<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$selector = empty($displayData['selector']) ? '' : $displayData['selector'];echo "(function($){					$('#$selector a').click(function (e)					{						e.preventDefault();						$(this).tab('show');					});				})(jQuery);";
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_PHP_INFORMATION'); ?></legend>	<?php echo $this->php_info;?></fieldset>
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Generic Installation View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewDefault extends JViewHtml{	/**	 * The JForm object	 *	 * @var    JForm	 * @since  3.1	 */	protected $form;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelSetup	 * @since   3.1	 */	protected $model;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->form = $this->model->getForm();		return parent::render();	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to verify the FTP settings for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerVerifyftpsettings extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the data		$data = $app->input->post->get('jform', array(), 'array');		// Store the options in the session.		$vars = $model->storeOptions($data);		// Get the database model.		$ftp = new InstallationModelFtp;		// Attempt to detect the Joomla root from the ftp account.		$return = $ftp->verifyFtpSettings($vars);		// Build the response object		$r = new stdClass;		$r->view = 'ftp';		// If we got a FTP root, add it to the response object		if ($return)		{			$r->valid = $return;		}		$app->sendJsonResponse($r);	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewPreinstallHtml $this */?><div class="btn-toolbar">	<div class="btn-group pull-right">		<a href="#" class="btn btn-primary" onclick="Install.submitform();" title="<?php echo JText::_('JCheck_Again'); ?>"><i class="icon-refresh icon-white"></i> <?php echo JText::_('JCheck_Again'); ?></a>	</div></div><form action="index.php" method="post" id="languageForm" class="form-horizontal">	<div class="control-group">		<label for="jform_language" class="control-label"><?php echo JText::_('INSTL_SELECT_LANGUAGE_TITLE'); ?></label>		<div class="controls">			<?php echo $this->form->getInput('language'); ?>		</div>	</div>	<input type="hidden" name="view" value="preinstall" />	<input type="hidden" name="task" value="setlanguage" />	<?php echo JHtml::_('form.token'); ?></form><form action="index.php" method="post" id="adminForm" class="form-horizontal">	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<tbody>					<?php foreach ($this->options as $option) : ?>					<tr>						<td class="item">							<?php echo $option->label; ?>						</td>						<td>							<span class="label label-<?php echo ($option->state) ? 'success' : 'important'; ?>">								<?php echo JText::_(($option->state) ? 'JYES' : 'JNO'); ?>								<?php if ($option->notice):?>									<i class="icon-info-sign icon-white hasTooltip" title="<?php echo $option->notice; ?>"></i>								<?php endif;?>							</span>						</td>					</tr>					<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<thead>					<tr>						<th>							<?php echo JText::_('INSTL_PRECHECK_DIRECTIVE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_ACTUAL'); ?>						</th>					</tr>				</thead>				<tbody>					<?php foreach ($this->settings as $setting) : ?>					<tr>						<td>							<?php echo $setting->label; ?>						</td>						<td>							<span class="label label-success disabled">								<?php echo JText::_(($setting->recommended) ? 'JON' : 'JOFF'); ?>							</span>						</td>						<td>							<span class="label label-<?php echo ($setting->state === $setting->recommended) ? 'success' : 'warning'; ?>">								<?php echo JText::_(($setting->state) ? 'JON' : 'JOFF'); ?>							</span>						</td>					</tr>				<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="3"></td>					</tr>				</tfoot>			</table>		</div>	</div>	<input type="hidden" name="task" value="preinstall" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users Route Helper * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersHelperRoute{	/**	 * Method to get the menu items for the component.	 *	 * @return  array  	An array of menu items.	 * @since   1.6	 */	public static function &getItems()	{		static $items;		// Get the menu items for this component.		if (!isset($items))		{			// Include the site app in case we are loading this from the admin.			require_once JPATH_SITE.'/includes/application.php';			$app	= JFactory::getApplication();			$menu	= $app->getMenu();			$com	= JComponentHelper::getComponent('com_users');			$items	= $menu->getItems('component_id', $com->id);			// If no items found, set to empty array.			if (!$items)			{				$items = array();			}		}		return $items;	}	/**	 * Method to get a route configuration for the login view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 * @static	 */	public static function getLoginRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'login')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the profile view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getProfileRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		//Menu link can only go to users own profile.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'profile')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the registration view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getRegistrationRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'registration')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the remind view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getRemindRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'remind')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the resend view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getResendRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'resend')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the reset view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getResetRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'reset')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR.'/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();?>		<script type="text/javascript">			window.addEvent('domready', function(){				validate();				document.getElements('select').addEvent('change', function(e){validate();});			});			function validate(){				var value	= document.id('jform_assignment').value;				var list	= document.id('menu-assignment');				if (value == '-' || value == '0'){					$$('.jform-assignments-button').each(function(el) {el.setProperty('disabled', true); });					list.getElements('input').each(function(el){						el.setProperty('disabled', true);						if (value == '-'){							el.setProperty('checked', false);						} else {							el.setProperty('checked', true);						}					});				} else {					$$('.jform-assignments-button').each(function(el) {el.setProperty('disabled', false); });					list.getElements('input').each(function(el){						el.setProperty('disabled', false);					});				}			}		</script>		<fieldset class="adminform">			<legend><?php echo JText::_('COM_MODULES_MENU_ASSIGNMENT'); ?></legend>			<label id="jform_menus-lbl" for="jform_menus"><?php echo JText::_('COM_MODULES_MODULE_ASSIGN'); ?></label>			<fieldset id="jform_menus" class="radio">				<select name="jform[assignment]" id="jform_assignment">					<?php echo JHtml::_('select.options', ModulesHelper::getAssignmentOptions($this->item->client_id), 'value', 'text', $this->item->assignment, true);?>				</select>			</fieldset>			<label id="jform_menuselect-lbl" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label>			<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.chkbox').each(function(el) { el.checked = !el.checked; });">				<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>			</button>			<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.chkbox').each(function(el) { el.checked = false; });">				<?php echo JText::_('JGLOBAL_SELECTION_NONE'); ?>			</button>			<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.chkbox').each(function(el) { el.checked = true; });">				<?php echo JText::_('JGLOBAL_SELECTION_ALL'); ?>			</button>			<div class="clr"></div>			<div id="menu-assignment">			<?php echo JHtml::_('tabs.start', 'module-menu-assignment-tabs', array('useCookie' => 1));?>			<?php foreach ($menuTypes as &$type) :				echo JHtml::_('tabs.panel', $type->title ? $type->title : $type->menutype, $type->menutype.'-details');				$chkbox_class = 'chk-menulink-' . $type->id; ?>				<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.<?php echo $chkbox_class; ?>').each(function(el) { el.checked = !el.checked; });">					<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>				</button>				<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.<?php echo $chkbox_class; ?>').each(function(el) { el.checked = false; });">					<?php echo JText::_('JGLOBAL_SELECTION_NONE'); ?>				</button>				<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.<?php echo $chkbox_class; ?>').each(function(el) { el.checked = true; });">					<?php echo JText::_('JGLOBAL_SELECTION_ALL'); ?>				</button>				<div class="clr"></div>				<?php				$count 	= count($type->links);				$i		= 0;				if ($count) :				?>				<ul class="menu-links">					<?php					foreach ($type->links as $link) :						if (trim($this->item->assignment) == '-'):							$checked = '';						elseif ($this->item->assignment == 0):							$checked = ' checked="checked"';						elseif ($this->item->assignment < 0):							$checked = in_array(-$link->value, $this->item->assigned) ? ' checked="checked"' : '';						elseif ($this->item->assignment > 0) :							$checked = in_array($link->value, $this->item->assigned) ? ' checked="checked"' : '';						endif;					?>					<li class="menu-link">						<input type="checkbox" class="chkbox <?php echo $chkbox_class; ?>" name="jform[assigned][]" value="<?php echo (int) $link->value;?>" id="link<?php echo (int) $link->value;?>"<?php echo $checked;?>/>						<label for="link<?php echo (int) $link->value;?>">							<?php echo $link->text; ?>						</label>					</li>					<?php if ($count > 20 && ++$i == ceil($count / 2)) :?>					</ul><ul class="menu-links">					<?php endif; ?>					<?php endforeach; ?>				</ul>				<div class="clr"></div>				<?php endif; ?>			<?php endforeach; ?>			<?php echo JHtml::_('tabs.end');?>			</div>		</fieldset>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.application.router');/** * Class to create and parse routes * * @package  Joomla.Installation * @since    1.5 */class JRouterInstallation extends JRouter{	/**	 * Function to convert a route to an internal URI	 *	 * @param   JURI  $url  The uri.	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function parse($url)	{		return true;	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 *	 * @since   1.5	 */	public function build($url)	{		$url = str_replace('&amp;', '&', $url);		return new JUri($url);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JMenu class. * * @package     Joomla.Libraries * @subpackage  Menu * @since       1.5 */class JMenuAdministrator extends JMenu{}
<?php/** * Squiz_Sniffs_Strings_ConcatenationSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ConcatenationSpacingSniff.php 151 2010-11-26 01:07:46Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Makes sure there are is a spaces between the concatenation operator <b>.</b> and the strings being concatenated. * * Example: * <b class="bad">$a = $b.$c;</b> * <b class="good">$a = $b . $c;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_ConcatenationSpacingSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns an array of tokens this test wants to listen for.	 *	 * @return array	 */	public function register()	{		return array(T_STRING_CONCAT);	}//function	/**	 * Processes this test, when one of its tokens is encountered.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.	 * @param integer $stackPtr The position of the current token in the	 *                                        stack passed in $tokens.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		if ($tokens[($stackPtr + 1)]['code'] != T_WHITESPACE)		{			// space after			$message = 'Concat operator must be followed by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			$found = strlen($tokens[($stackPtr + 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space after concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}		if ($tokens[($stackPtr - 1)]['code'] != T_WHITESPACE)		{			// space before			$message = 'Concat operator must be preceeded by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			if (strpos($tokens[($stackPtr - 2)]['content'], $phpcsFile->eolChar) !== false			|| strpos($tokens[($stackPtr - 1)]['content'], $phpcsFile->eolChar) !== false)			{				// the dot is on a new line				return;			}			$found = strlen($tokens[($stackPtr - 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space before concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}	}//function}//class
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit an language override * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesViewOverride extends JViewLegacy{	/**	 * The form to use for the view	 *	 * @var		object	 * @since	2.5	 */	protected $form;	/**	 * The item to edit	 *	 * @var		object	 * @since	2.5	 */	protected $item;	/**	 * The model state	 *	 * @var		object	 * @since	2.5	 */	protected $state;	/**	 * Displays the view	 *	 * @param   	string	$tpl	The name of the template file to parse	 *	 * @return  void	 *	 * @since		2.5	 */	public function display($tpl = null)	{		JHtml::_('stylesheet', 'overrider/overrider.css', array(), true);		JHtml::_('behavior.framework');		JHtml::_('script', 'overrider/overrider.js', false, true);		$this->form  = $this->get('Form');		$this->item  = $this->get('Item');		$this->state = $this->get('State');		// Check for errors		if (count($errors = $this->get('Errors')))		{			throw new Exception(implode("\n", $errors));		}		// Check whether the cache has to be refreshed		$cached_time = JFactory::getApplication()->getUserState('com_languages.overrides.cachedtime.'.$this->state->get('filter.client').'.'.$this->state->get('filter.language'), 0);		if (time() - $cached_time > 60 * 5)		{			$this->state->set('cache_expired', true);		}		// Add strings for translations in Javascript		JText::script('COM_LANGUAGES_VIEW_OVERRIDE_NO_RESULTS');		JText::script('COM_LANGUAGES_VIEW_OVERRIDE_REQUEST_ERROR');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Adds the page title and toolbar	 *	 * @return void	 *	 * @since	2.5	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_OVERRIDE_EDIT_TITLE'), 'langmanager');		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('override.apply');			JToolbarHelper::save('override.save');		}		// This component does not support Save as Copy		if ($canDo->get('core.edit') && $canDo->get('core.create'))		{			JToolbarHelper::save2new('override.save2new');		}		if (empty($this->item->key))		{			JToolbarHelper::cancel('override.cancel');		}		else		{			JToolbarHelper::cancel('override.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_OVERRIDES_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MODULES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($label); ?></legend>		<?php $hidden_fields = ''; ?>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<?php if (!$field->hidden) : ?>			<li>				<?php echo $field->label; ?>				<?php echo $field->input; ?>			</li>			<?php else : $hidden_fields .= $field->input; ?>			<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php echo $hidden_fields; ?>		</fieldset>	<?php endforeach; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @param   array * @return  array */function WrapperBuildRoute(&$query){	$segments = array();	if (isset($query['view']))	{		unset($query['view']);	}	return $segments;}/** * @param   array * @return  array */function WrapperParseRoute($segments){	$vars = array();	$vars['view'] = 'wrapper';	return $vars;}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL azure database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorAzure extends JDatabaseIteratorSqlsrv{}
<?php/** * @package     Joomla.Site * @subpackage  mod_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_ROOT . '/components/com_banners/helpers/banner.php';$baseurl = JURI::base();?><div class="bannergroup<?php echo $moduleclass_sfx ?>"><?php if ($headerText) : ?>	<?php echo $headerText; ?><?php endif; ?><?php foreach ($list as $item) : ?>	<div class="banneritem">		<?php $link = JRoute::_('index.php?option=com_banners&task=click&id='. $item->id);?>		<?php if ($item->type == 1) :?>			<?php // Text based banners ?>			<?php echo str_replace(array('{CLICKURL}', '{NAME}'), array($link, $item->name), $item->custombannercode);?>		<?php else:?>			<?php $imageurl = $item->params->get('imageurl');?>			<?php $width = $item->params->get('width');?>			<?php $height = $item->params->get('height');?>			<?php if (BannerHelper::isImage($imageurl)) :?>				<?php // Image based banner ?>				<?php $alt = $item->params->get('alt');?>				<?php $alt = $alt ? $alt : $item->name; ?>				<?php $alt = $alt ? $alt : JText::_('MOD_BANNERS_BANNER'); ?>				<?php if ($item->clickurl) :?>					<?php // Wrap the banner in a link?>					<?php $target = $params->get('target', 1);?>					<?php if ($target == 1) :?>						<?php // Open in a new window?>						<a							href="<?php echo $link; ?>" target="_blank"							title="<?php echo htmlspecialchars($item->name, ENT_QUOTES, 'UTF-8');?>">							<img								src="<?php echo $baseurl . $imageurl;?>"								alt="<?php echo $alt;?>"								<?php if (!empty($width)) echo 'width ="'. $width.'"';?>								<?php if (!empty($height)) echo 'height ="'. $height.'"';?>							/>						</a>					<?php elseif ($target == 2):?>						<?php // open in a popup window?>						<a							href="<?php echo $link;?>" onclick="window.open(this.href, '',								'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=550');								return false"							title="<?php echo htmlspecialchars($item->name, ENT_QUOTES, 'UTF-8');?>">							<img								src="<?php echo $baseurl . $imageurl;?>"								alt="<?php echo $alt;?>"								<?php if (!empty($width)) echo 'width ="'. $width.'"';?>								<?php if (!empty($height)) echo 'height ="'. $height.'"';?>							/>						</a>					<?php else :?>						<?php // open in parent window?>						<a							href="<?php echo $link;?>"							title="<?php echo htmlspecialchars($item->name, ENT_QUOTES, 'UTF-8');?>">							<img								src="<?php echo $baseurl . $imageurl;?>"								alt="<?php echo $alt;?>"								<?php if (!empty($width)) echo 'width ="'. $width.'"';?>								<?php if (!empty($height)) echo 'height ="'. $height.'"';?>							/>						</a>					<?php endif;?>				<?php else :?>					<?php // Just display the image if no link specified?>					<img						src="<?php echo $baseurl . $imageurl;?>"						alt="<?php echo $alt;?>"						<?php if (!empty($width)) echo 'width ="'. $width.'"';?>						<?php if (!empty($height)) echo 'height ="'. $height.'"';?>					/>				<?php endif;?>			<?php elseif (BannerHelper::isFlash($imageurl)) :?>				<object					classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"					codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0"					<?php if (!empty($width)) echo 'width ="'. $width.'"';?>					<?php if (!empty($height)) echo 'height ="'. $height.'"';?>				>					<param name="movie" value="<?php echo $imageurl;?>" />					<embed						src="<?php echo $imageurl;?>"						loop="false"						pluginspage="http://www.macromedia.com/go/get/flashplayer"						type="application/x-shockwave-flash"						<?php if (!empty($width)) echo 'width ="'. $width.'"';?>						<?php if (!empty($height)) echo 'height ="'. $height.'"';?>					/>				</object>			<?php endif;?>		<?php endif;?>		<div class="clr"></div>	</div><?php endforeach; ?><?php if ($footerText) : ?>	<div class="bannerfooter">		<?php echo $footerText; ?>	</div><?php endif; ?></div>
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strcspn* Find length of initial segment not matching mask* Note: requires utf8_strlen and utf8_substr (if start, length are used)* @param string* @return int* @see http://www.php.net/strcspn* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_strcspn($str, $mask, $start = NULL, $length = NULL) {    if ( empty($mask) || strlen($mask) == 0 ) {        return NULL;    }    $mask = preg_replace('!([\\\\\\-\\]\\[/^])!','\\\${1}',$mask);    if ( $start !== NULL || $length !== NULL ) {        $str = utf8_substr($str, $start, $length);    }    preg_match('/^[^'.$mask.']+/u',$str, $matches);    if ( isset($matches[0]) ) {        return utf8_strlen($matches[0]);    }    return 0;}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract class for a renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRenderer{	/**	 * Reference to the JDocument object that instantiated the renderer	 *	 * @var    JDocument	 * @since  11.1	 */	protected $_doc = null;	/**	 * Renderer mime type	 *	 * @var    string	 * @since  11.1	 */	protected $_mime = "text/html";	/**	 * Class constructor	 *	 * @param   JDocument  $doc  A reference to the JDocument object that instantiated the renderer	 *	 * @since   11.1	 */	public function __construct(JDocument $doc)	{		$this->_doc = $doc;	}	/**	 * Renders a script and returns the results as a string	 *	 * @param   string  $name     The name of the element to render	 * @param   array   $params   Array of values	 * @param   string  $content  Override the output of the renderer	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($name, $params = null, $content = null)	{	}	/**	 * Return the content type of the renderer	 *	 * @return  string  The contentType	 *	 * @since   11.1	 */	public function getContentType()	{		return $this->_mime;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Controller * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentController extends JControllerLegacy{	public function __construct($config = array())	{		$this->input = JFactory::getApplication()->input;		// Article frontpage Editor pagebreak proxying:		if ($this->input->get('view') === 'article' && $this->input->get('layout') === 'pagebreak')		{			$config['base_path'] = JPATH_COMPONENT_ADMINISTRATOR;		}		// Article frontpage Editor article proxying:		elseif ($this->input->get('view') === 'articles' && $this->input->get('layout') === 'modal')		{			JHtml::_('stylesheet', 'system/adminlist.css', array(), true);			$config['base_path'] = JPATH_COMPONENT_ADMINISTRATOR;		}		parent::__construct($config);	}	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Set the default view name and format from the Request.		// Note we are using a_id to avoid collisions with the router and the return page.		// Frontend is a bit messier than the backend.		$id    = $this->input->getInt('a_id');		$vName = $this->input->getCmd('view', 'categories');		$this->input->set('view', $vName);		$user = JFactory::getUser();		if ($user->get('id') ||			($this->input->getMethod() == 'POST' &&				(($vName == 'category' && $this->input->get('layout') != 'blog') || $vName == 'archive' )))		{			$cachable = false;		}		$safeurlparams = array('catid' => 'INT', 'id' => 'INT', 'cid' => 'ARRAY', 'year' => 'INT', 'month' => 'INT', 'limit' => 'UINT', 'limitstart' => 'UINT',			'showall' => 'INT', 'return' => 'BASE64', 'filter' => 'STRING', 'filter_order' => 'CMD', 'filter_order_Dir' => 'CMD', 'filter-search' => 'STRING', 'print' => 'BOOLEAN', 'lang' => 'CMD', 'Itemid' => 'INT');		// Check for edit form.		if ($vName == 'form' && !$this->checkEditId('com_content.edit.article', $id))		{			// Somehow the person just went to the form - we don't allow that.			return JError::raiseError(403, JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));		}		parent::display($cachable, $safeurlparams);		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// Detect if we have full UTF-8 and unicode PCRE support.if (!defined('JCOMPAT_UNICODE_PROPERTIES')){	define('JCOMPAT_UNICODE_PROPERTIES', (bool) @preg_match('/\pL/u', 'a'));}/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $regex;	/**	 * The regular expression modifiers to use when testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $modifiers;	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  UnexpectedValueException if rule is invalid.	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Check for a valid regex.		if (empty($this->regex))		{			throw new UnexpectedValueException(sprintf('%s has invalid regex.', get_class($this)));		}		// Add unicode property support if available.		if (JCOMPAT_UNICODE_PROPERTIES)		{			$this->modifiers = (strpos($this->modifiers, 'u') !== false) ? $this->modifiers : $this->modifiers . 'u';		}		// Test the value against the regular expression.		if (preg_match(chr(1) . $this->regex . chr(1) . $this->modifiers, $value))		{			return true;		}		return false;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base Controller Class * * @package     Joomla.Platform * @subpackage  Controller * @since       12.1 */abstract class JControllerBase implements JController{	/**	 * The application object.	 *	 * @var    JApplicationBase	 * @since  12.1	 */	protected $app;	/**	 * The input object.	 *	 * @var    JInput	 * @since  12.1	 */	protected $input;	/**	 * Instantiate the controller.	 *	 * @param   JInput            $input  The input object.	 * @param   JApplicationBase  $app    The application object.	 *	 * @since  12.1	 */	public function __construct(JInput $input = null, JApplicationBase $app = null)	{		// Setup dependencies.		$this->app = isset($app) ? $app : $this->loadApplication();		$this->input = isset($input) ? $input : $this->loadInput();	}	/**	 * Get the application object.	 *	 * @return  JApplicationBase  The application object.	 *	 * @since   12.1	 */	public function getApplication()	{		return $this->app;	}	/**	 * Get the input object.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function getInput()	{		return $this->input;	}	/**	 * Serialize the controller.	 *	 * @return  string  The serialized controller.	 *	 * @since   12.1	 */	public function serialize()	{		return serialize($this->input);	}	/**	 * Unserialize the controller.	 *	 * @param   string  $input  The serialized controller.	 *	 * @return  JController  Supports chaining.	 *	 * @since   12.1	 * @throws  UnexpectedValueException if input is not the right class.	 */	public function unserialize($input)	{		// Setup dependencies.		$this->app = $this->loadApplication();		// Unserialize the input.		$this->input = unserialize($input);		if (!($this->input instanceof JInput))		{			throw new UnexpectedValueException(sprintf('%s::unserialize would not accept a `%s`.', get_class($this), gettype($this->input)));		}		return $this;	}	/**	 * Load the application object.	 *	 * @return  JApplicationBase  The application object.	 *	 * @since   12.1	 */	protected function loadApplication()	{		return JFactory::getApplication();	}	/**	 * Load the input object.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	protected function loadInput()	{		return $this->app->input;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Add specific helper files for html generationJHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');?><form action="<?php echo JRoute::_('index.php'); ?>" method="post" name="adminForm" id="adminForm">	<div class="row-fluid">		<!-- Begin Content -->		<div class="span10">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'site')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'site', JText::_('COM_ADMIN_SYSTEM_INFORMATION', true)); ?>					<?php echo $this->loadTemplate('system'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'phpsettings', JText::_('COM_ADMIN_PHP_SETTINGS', true)); ?>					<?php echo $this->loadTemplate('phpsettings'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'config', JText::_('COM_ADMIN_CONFIGURATION_FILE', true)); ?>					<?php echo $this->loadTemplate('config'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'directory', JText::_('COM_ADMIN_DIRECTORY_PERMISSIONS', true)); ?>					<?php echo $this->loadTemplate('directory'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'phpinfo', JText::_('COM_ADMIN_PHP_INFORMATION', true)); ?>					<?php echo $this->loadTemplate('phpinfo'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>		</div>		<!-- End Content -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset title="<?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?>" class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?></legend>	<?php echo JText::_('COM_CONFIG_FTP_DETAILS_TIP'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p><?php echo JText::_($this->ftp->message); ?></p>	<?php endif; ?>	<div class="control-group">		<div class="control-label"><label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label></div>		<div class="controls"><input type="text" id="username" name="username" class="input_box" size="70" value="" /></div>	</div>	<div class="control-group">		<div class="control-label"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></div>		<div class="controls"><input type="password" id="password" name="password" class="input_box" size="70" value="" /></div>	</div></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * RESTful Web application router class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Application * @since       12.2 */class JApplicationWebRouterRest extends JApplicationWebRouterBase{	/**	 * @var     boolean  A boolean allowing to pass _method as parameter in POST requests	 *	 * @since  12.2	 */	protected $methodInPostRequest = false;	/**	 * @var    array  An array of HTTP Method => controller suffix pairs for routing the request.	 * @since  12.2	 */	protected $suffixMap = array(		'GET' => 'Get',		'POST' => 'Create',		'PUT' => 'Update',		'PATCH' => 'Update',		'DELETE' => 'Delete',		'HEAD' => 'Head',		'OPTIONS' => 'Options'	);	/**	 * Find and execute the appropriate controller based on a given route.	 *	 * @param   string  $route  The route string for which to find and execute a controller.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute($route)	{		// Get the controller name based on the route patterns and requested route.		$name = $this->parseRoute($route);		// Append the HTTP method based suffix.		$name .= $this->fetchControllerSuffix();		// Get the controller object by name.		$controller = $this->fetchController($name);		// Execute the controller.		$controller->execute();	}	/**	 * Set a controller class suffix for a given HTTP method.	 *	 * @param   string  $method  The HTTP method for which to set the class suffix.	 * @param   string  $suffix  The class suffix to use when fetching the controller name for a given request.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function setHttpMethodSuffix($method, $suffix)	{		$this->suffixMap[strtoupper((string) $method)] = (string) $suffix;		return $this;	}	/**	 * Set to allow or not method in POST request	 *	 * @param   boolean  $value  A boolean to allow or not method in POST request	 *	 * @return  void	 *	 * @since   12.2	 */	public function setMethodInPostRequest($value)	{		$this->methodInPostRequest = $value;	}	/**	 * Get the property to allow or not method in POST request	 *	 * @return  boolean	 *	 * @since   12.2	 */	public function isMethodInPostRequest()	{		return $this->methodInPostRequest;	}	/**	 * Get the controller class suffix string.	 *	 * @return  string	 *	 * @since   12.2	 * @throws  RuntimeException	 */	protected function fetchControllerSuffix()	{		// Validate that we have a map to handle the given HTTP method.		if (!isset($this->suffixMap[$this->input->getMethod()]))		{			throw new RuntimeException(sprintf('Unable to support the HTTP method `%s`.', $this->input->getMethod()), 404);		}		// Check if request method is POST		if ( $this->methodInPostRequest == true && strcmp(strtoupper($this->input->server->getMethod()), 'POST') === 0)		{			// Get the method from input			$postMethod = $this->input->get->getWord('_method');			// Validate that we have a map to handle the given HTTP method from input			if ($postMethod && isset($this->suffixMap[strtoupper($postMethod)]))			{				return ucfirst($this->suffixMap[strtoupper($postMethod)]);			}		}		return ucfirst($this->suffixMap[$this->input->getMethod()]);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to detect the site's FTP root for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerDetectftproot extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the data		$data = $app->input->post->get('jform', array(), 'array');		// Store the options in the session.		$vars = $model->storeOptions($data);		// Get the database model.		$ftp = new InstallationModelFtp;		// Attempt to detect the Joomla root from the ftp account.		$return = $ftp->detectFtpRoot($vars);		// Build the response object		$r = new stdClass;		$r->view = 'ftp';		// If we got a FTP root, add it to the response object		if ($return)		{			$r->root = $return;		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Update Controller * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since	2.5.4	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'default');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			$ftp = JClientHelper::setCredentialsFromRequest('ftp');			$view->ftp = &$ftp;			// Get the model for the view.			$model = $this->getModel($vName);			// Perform update source preference check and refresh update information			$model->applyUpdateSite();			$model->refreshUpdates();			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			$view->display();		}		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$document = JFactory::getDocument();$direction = $document->direction == 'rtl' ? 'pull-right' : '';require JModuleHelper::getLayoutPath('mod_menu', $enabled ? 'default_enabled' : 'default_disabled');$menu->renderMenu('menu', $enabled ? 'nav ' . $direction : 'nav disabled ' . $direction);
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Rest model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersModelLogin extends JModelForm{	/**	 * Method to get the login form.	 *	 * The base form is loaded from XML and then an event is fired	 * for users plugins to extend the form with extra fields.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.login', 'login', array('load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  array  The default data is an empty array.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered login form data.		$app  = JFactory::getApplication();		$data = $app->getUserState('users.login.form.data', array());		// check for return URL from the request first		if ($return = JRequest::getVar('return', '', 'method', 'base64'))		{			$data['return'] = base64_decode($return);			if (!JURI::isInternal($data['return']))			{				$data['return'] = '';			}		}		// Set the return URL if empty.		if (!isset($data['return']) || empty($data['return']))		{			$data['return'] = 'index.php?option=com_users&view=profile';		}		$app->setUserState('users.login.form.data', $data);		$this->preprocessData('com_users.login', $data);		return $data;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$params	= JFactory::getApplication()->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Override JModelAdmin::preprocessForm to ensure the correct plugin group is loaded.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');$pageClass = $this->params->get('pageclass_sfx');?><section class="category-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><?php if ($this->params->get('show_page_heading') and ($this->params->get('show_category_title') or $this->params->get('page_subheading'))) : ?><hgroup><?php endif; ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading')) : ?><h2>	<?php echo $this->escape($this->params->get('page_subheading')); ?>	<?php if ($this->params->get('show_category_title'))	{		echo '<span class="subheading-category">'.$this->category->title.'</span>';	}	?></h2><?php if ($this->params->get('show_page_heading') and ($this->params->get('show_category_title', 1) or $this->params->get('page_subheading'))) : ?></hgroup><?php endif; ?><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_content.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php if (is_array($this->children[$this->category->id]) && count($this->children[$this->category->id]) > 0 && $this->params->get('maxLevel') != 0) : ?>		<div class="cat-children">	<?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading'))	{		echo '<h3>';	}	elseif ($this->params->get('show_category_heading_title_text', 1) == 1)	{		echo '<h2>';	} ?>    <?php if ($this->params->get('show_category_heading_title_text', 1) == 1) : ?>		<?php echo JTEXT::_('JGLOBAL_SUBCATEGORIES'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading'))	{		echo '</h3>';	}	elseif ($this->params->get('show_category_heading_title_text', 1) == 1)	{		echo '</h2>';	} ?>		</div>	<?php endif; ?>		<?php echo $this->loadTemplate('children'); ?>			<div class="cat-items">		<?php echo $this->loadTemplate('articles'); ?>	</div></section>
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Base Class * * This is an abstracted input class used to manage retrieving data from the application environment. * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 * * @method      integer  getInt()       getInt($name, $default = null)    Get a signed integer. * @method      integer  getUint()      getUint($name, $default = null)   Get an unsigned integer. * @method      float    getFloat()     getFloat($name, $default = null)  Get a floating-point number. * @method      boolean  getBool()      getBool($name, $default = null)   Get a boolean. * @method      string   getWord()      getWord($name, $default = null) * @method      string   getAlnum()     getAlnum($name, $default = null) * @method      string   getCmd()       getCmd($name, $default = null) * @method      string   getBase64()    getBase64($name, $default = null) * @method      string   getString()    getString($name, $default = null) * @method      string   getHtml()      getHtml($name, $default = null) * @method      string   getPath()      getPath($name, $default = null) * @method      string   getUsername()  getUsername($name, $default = null) */class JInput implements Serializable, Countable{	/**	 * Options array for the JInput instance.	 *	 * @var    array	 * @since  11.1	 */	protected $options = array();	/**	 * Filter object to use.	 *	 * @var    JFilterInput	 * @since  11.1	 */	protected $filter = null;	/**	 * Input data.	 *	 * @var    array	 * @since  11.1	 */	protected $data = array();	/**	 * Input objects	 *	 * @var    array	 * @since  11.1	 */	protected $inputs = array();	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is $_REQUEST)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   11.1	 */	public function __construct($source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		if (is_null($source))		{			$this->data = &$_REQUEST;		}		else		{			$this->data = $source;		}		// Set the options for the class.		$this->options = $options;	}	/**	 * Magic method to get an input object	 *	 * @param   mixed  $name  Name of the input object to retrieve.	 *	 * @return  JInput  The request input object	 *	 * @since   11.1	 */	public function __get($name)	{		if (isset($this->inputs[$name]))		{			return $this->inputs[$name];		}		$className = 'JInput' . ucfirst($name);		if (class_exists($className))		{			$this->inputs[$name] = new $className(null, $this->options);			return $this->inputs[$name];		}		$superGlobal = '_' . strtoupper($name);		if (isset($GLOBALS[$superGlobal]))		{			$this->inputs[$name] = new JInput($GLOBALS[$superGlobal], $this->options);			return $this->inputs[$name];		}		// TODO throw an exception	}	/**	 * Get the number of variables.	 *	 * @return  integer  The number of variables in the input.	 *	 * @since   12.2	 * @see     Countable::count()	 */	public function count()	{		return count($this->data);	}	/**	 * Gets a value from the input data.	 *	 * @param   string  $name     Name of the value to get.	 * @param   mixed   $default  Default value to return if variable does not exist.	 * @param   string  $filter   Filter to apply to the value.	 *	 * @return  mixed  The filtered input value.	 *	 * @since   11.1	 */	public function get($name, $default = null, $filter = 'cmd')	{		if (isset($this->data[$name]))		{			return $this->filter->clean($this->data[$name], $filter);		}		return $default;	}	/**	 * Gets an array of values from the request.	 *	 * @param   array  $vars        Associative array of keys and filter types to apply.	 * @param   mixed  $datasource  Array to retrieve data from, or null	 *	 * @return  mixed  The filtered input data.	 *	 * @since   11.1	 */	public function getArray(array $vars, $datasource = null)	{		$results = array();		foreach ($vars as $k => $v)		{			if (is_array($v))			{				if (is_null($datasource))				{					$results[$k] = $this->getArray($v, $this->get($k, null, 'array'));				}				else				{					$results[$k] = $this->getArray($v, $datasource[$k]);				}			}			else			{				if (is_null($datasource))				{					$results[$k] = $this->get($k, null, $v);				}				elseif (isset($datasource[$k]))				{					$results[$k] = $this->filter->clean($datasource[$k], $v);				}				else				{					$results[$k] = $this->filter->clean(null, $v);				}			}		}		return $results;	}	/**	 * Sets a value	 *	 * @param   string  $name   Name of the value to set.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   11.1	 */	public function set($name, $value)	{		$this->data[$name] = $value;	}	/**	 * Define a value. The value will only be set if there's no value for the name or if it is null.	 *	 * @param   string  $name   Name of the value to define.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   12.1	 */	public function def($name, $value)	{		if (isset($this->data[$name]))		{			return;		}		$this->data[$name] = $value;	}	/**	 * Magic method to get filtered input data.	 *	 * @param   string  $name       Name of the filter type prefixed with 'get'.	 * @param   array   $arguments  [0] The name of the variable [1] The default value.	 *	 * @return  mixed   The filtered input value.	 *	 * @since   11.1	 */	public function __call($name, $arguments)	{		if (substr($name, 0, 3) == 'get')		{			$filter = substr($name, 3);			$default = null;			if (isset($arguments[1]))			{				$default = $arguments[1];			}			return $this->get($arguments[0], $default, $filter);		}	}	/**	 * Gets the request method.	 *	 * @return  string   The request method.	 *	 * @since   11.1	 */	public function getMethod()	{		$method = strtoupper($_SERVER['REQUEST_METHOD']);		return $method;	}	/**	 * Method to serialize the input.	 *	 * @return  string  The serialized input.	 *	 * @since   12.1	 */	public function serialize()	{		// Load all of the inputs.		$this->loadAllInputs();		// Remove $_ENV and $_SERVER from the inputs.		$inputs = $this->inputs;		unset($inputs['env']);		unset($inputs['server']);		// Serialize the options, data, and inputs.		return serialize(array($this->options, $this->data, $inputs));	}	/**	 * Method to unserialize the input.	 *	 * @param   string  $input  The serialized input.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function unserialize($input)	{		// Unserialize the options, data, and inputs.		list($this->options, $this->data, $this->inputs) = unserialize($input);		// Load the filter.		if (isset($this->options['filter']))		{			$this->filter = $this->options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}	}	/**	 * Method to load all of the global inputs.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function loadAllInputs()	{		static $loaded = false;		if (!$loaded)		{			// Load up all the globals.			foreach ($GLOBALS as $global => $data)			{				// Check if the global starts with an underscore.				if (strpos($global, '_') === 0)				{					// Convert global name to input name.					$global = strtolower($global);					$global = substr($global, 1);					// Get the input.					$this->$global;				}			}			$loaded = true;		}	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract observer class to implement the observer design pattern * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */abstract class JObserver extends JObject{	/**	 * Event object to observe.	 *	 * @var    object	 * @since  11.1	 * @deprecated  12.3	 */	protected $_subject = null;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function __construct(&$subject)	{		// Register the observer ($this) so we can be notified		$subject->attach($this);		// Set the subject to observe		$this->_subject = &$subject;	}	/**	 * Method to update the state of observable objects	 *	 * @param   array  &$args  An array of arguments to pass to the listener.	 *	 * @return  mixed	 *	 * @since   11.1	 * @deprecated  12.3	 */	public abstract function update(&$args);}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the site data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSite extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$model->checkForm('site');		// Redirect to the page.		$r = new stdClass;		$r->view = 'database';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';$controller	= JControllerLegacy::getInstance('Weblinks');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of newsfeeds * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$newsfeedId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text' .				' FROM #__newsfeeds' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $newsfeedId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.htmlspecialchars($this->value).'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $newsfeedId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Files Class * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 */class JInputFiles extends JInput{	protected $decodedData = array();	/**	 * Constructor.	 *	 * @param   array  $source   Ignored.	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.1	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		// Set the data source.		$this->data = & $_FILES;		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets a value from the input data.	 *	 * @param   string  $name     Name of the value to get.	 * @param   mixed   $default  Default value to return if variable does not exist.	 * @param   string  $filter   Filter to apply to the value.	 *	 * @return  mixed  The filtered input value.	 *	 * @since   11.1	 */	public function get($name, $default = null, $filter = 'cmd')	{		if (isset($this->data[$name]))		{			$results = $this->decodeData(				array(					$this->data[$name]['name'],					$this->data[$name]['type'],					$this->data[$name]['tmp_name'],					$this->data[$name]['error'],					$this->data[$name]['size']				)			);			return $results;		}		return $default;	}	/**	 * Method to decode a data array.	 *	 * @param   array  $data  The data array to decode.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function decodeData(array $data)	{		$result = array();		if (is_array($data[0]))		{			foreach ($data[0] as $k => $v)			{				$result[$k] = $this->decodeData(array($data[0][$k], $data[1][$k], $data[2][$k], $data[3][$k], $data[4][$k]));			}			return $result;		}		return array('name' => $data[0], 'type' => $data[1], 'tmp_name' => $data[2], 'error' => $data[3], 'size' => $data[4]);	}	/**	 * Sets a value	 *	 * @param   string  $name   Name of the value to set.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   11.1	 */	public function set($name, $value)	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Stemmer base class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexerStemmer{	/**	 * An internal cache of stemmed tokens.	 *	 * @var    array	 * @since  2.5	 */	public $cache = array();	/**	 * Method to get a stemmer, creating it if necessary.	 *	 * @param   string  $adapter  The type of stemmer to load.	 *	 * @return  FinderIndexerStemmer  A FinderIndexerStemmer instance.	 *	 * @since   2.5	 * @throws  Exception on invalid stemmer.	 */	public static function getInstance($adapter)	{		static $instances;		// Only create one stemmer for each adapter.		if (isset($instances[$adapter]))		{			return $instances[$adapter];		}		// Create an array of instances if necessary.		if (!is_array($instances))		{			$instances = array();		}		// Setup the adapter for the stemmer.		$adapter = JFilterInput::getInstance()->clean($adapter, 'cmd');		$path = __DIR__ . '/stemmer/' . $adapter . '.php';		$class = 'FinderIndexerStemmer' . ucfirst($adapter);		// Check if a stemmer exists for the adapter.		if (file_exists($path))		{			// Instantiate the stemmer.			include_once $path;			$instances[$adapter] = new $class;		}		else		{			// Throw invalid adapter exception.			throw new Exception(JText::sprintf('COM_FINDER_INDEXER_INVALID_STEMMER', $adapter));		}		return $instances[$adapter];	}	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	abstract public function stem($token, $lang);}
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder.  You should use JApplicationWeb instead. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.3 * @deprecated  12.3 Use JApplicationWeb instead. */class JWeb extends JApplicationWeb{	/**	 * Class constructor.	 *	 * @param   mixed  $input   An optional argument to provide dependency injection for the application's	 *                          input object.  If the argument is a JInput object that object will become	 *                          the application's input object, otherwise a default input object is created.	 * @param   mixed  $config  An optional argument to provide dependency injection for the application's	 *                          config object.  If the argument is a JRegistry object that object will become	 *                          the application's config object, otherwise a default config object is created.	 * @param   mixed  $client  An optional argument to provide dependency injection for the application's	 *                          client object.  If the argument is a JApplicationWebClient object that object will become	 *                          the application's client object, otherwise a default client object is created.	 *	 * @since   11.3	 * @deprecated  12.3 Use JApplicationWeb instead.	 */	public function __construct(JInput $input = null, JRegistry $config = null, JApplicationWebClient $client = null)	{		JLog::add('JWeb is deprecated. Use JApplicationWeb instead.', JLog::WARNING, 'deprecated');		parent::__construct($input, $registry, $client);	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('site');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a  class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_DATABASE'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_type'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_type'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_TYPE_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_host'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_host'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_HOST_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_user'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_user'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_USER_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_pass'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_pass'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PASSWORD_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_name'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_name'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_NAME_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_prefix'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_prefix'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PREFIX_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_old'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_old'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_OLD_PROCESS_DESC'); ?>			</p>		</div>	</div>	<input type="hidden" name="task" value="database" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$params = ModWrapperHelper::getParams($params);$load	= $params->get('load');$url	= htmlspecialchars($params->get('url'));$target = htmlspecialchars($params->get('target'));$width	= htmlspecialchars($params->get('width'));$height = htmlspecialchars($params->get('height'));$scroll = htmlspecialchars($params->get('scrolling'));$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));$frameborder = htmlspecialchars($params->get('frameborder'));require JModuleHelper::getLayoutPath('mod_wrapper', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$state			= $this->get('State');$message1		= $state->get('message');$message2		= $state->get('extension_message');?><table class="adminform">	<tbody>		<?php if ($message1) : ?>		<tr>			<th><?php echo $message1 ?></th>		</tr>		<?php endif; ?>		<?php if ($message2) : ?>		<tr>			<td><?php echo $message2; ?></td>		</tr>		<?php endif; ?>	</tbody></table>
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! W3c Logging class * * This class is designed to build log files based on the W3c specification * at: http://www.w3.org/TR/WD-logfile.html * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerW3c extends JLogLoggerFormattedtext{	/**	 * @var    string  The format which each entry follows in the log file.  All fields must be	 * named in all caps and be within curly brackets eg. {FOOBAR}.	 * @since  11.1	 */	protected $format = '{DATE}	{TIME}	{PRIORITY}	{CLIENTIP}	{CATEGORY}	{MESSAGE}';	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// The name of the text file defaults to 'error.w3c.php' if not explicitly given.		if (empty($options['text_file']))		{			$options['text_file'] = 'error.w3c.php';		}		// Call the parent constructor.		parent::__construct($options);	}}
<?php/*** @version $Id$* Tools for conversion between UTF-8 and unicode* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*///--------------------------------------------------------------------/*** Takes an UTF-8 string and returns an array of ints representing the* Unicode characters. Astral planes are supported ie. the ints in the* output can be > 0xFFFF. Occurrances of the BOM are ignored. Surrogates* are not allowed.* Returns false if the input string isn't a valid UTF-8 octet sequence* and raises a PHP error at level E_USER_WARNING* Note: this function has been modified slightly in this library to* trigger errors on encountering bad bytes* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return mixed array of unicode code points or FALSE if UTF-8 invalid* @see utf8_from_unicode* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*/function utf8_to_unicode($str) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $out = array();    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $out[] = $in;                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                * Rather than trying to resynchronize, we will carry on until the end                * of the sequence and let the later error handling code catch it.                */                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x03) << 24;                $mState = 4;                $mBytes = 5;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 1) << 30;                $mState = 5;                $mBytes = 6;            } else {                /* Current octet is neither in the US-ASCII range nor a legal first                 * octet of a multi-octet sequence.                 */                trigger_error(                        'utf8_to_unicode: Illegal sequence identifier '.                            'in UTF-8 at byte '.$i,                        E_USER_WARNING                    );                return FALSE;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    /*                    * Check for illegal sequences and codepoints.                    */                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ||                        (4 < $mBytes) ||                        // From Unicode 3.2, surrogate characters are illegal                        (($mUcs4 & 0xFFFFF800) == 0xD800) ||                        // Codepoints outside the Unicode range are illegal                        ($mUcs4 > 0x10FFFF)) {                        trigger_error(                                'utf8_to_unicode: Illegal sequence or codepoint '.                                    'in UTF-8 at byte '.$i,                                E_USER_WARNING                            );                        return FALSE;                    }                    if (0xFEFF != $mUcs4) {                        // BOM is legal but we don't want to output it                        $out[] = $mUcs4;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                /**                *((0xC0 & (*in) != 0x80) && (mState != 0))                * Incomplete multi-octet sequence.                */                trigger_error(                        'utf8_to_unicode: Incomplete multi-octet '.                        '   sequence in UTF-8 at byte '.$i,                        E_USER_WARNING                    );                return FALSE;            }        }    }    return $out;}//--------------------------------------------------------------------/*** Takes an array of ints representing the Unicode characters and returns* a UTF-8 string. Astral planes are supported ie. the ints in the* input can be > 0xFFFF. Occurrances of the BOM are ignored. Surrogates* are not allowed.* Returns false if the input array contains ints that represent* surrogates or are outside the Unicode range* and raises a PHP error at level E_USER_WARNING* Note: this function has been modified slightly in this library to use* output buffering to concatenate the UTF-8 string (faster) as well as* reference the array by it's keys* @param array of unicode code points representing a string* @return mixed UTF-8 string or FALSE if array contains invalid code points* @author <hsivonen@iki.fi>* @see utf8_to_unicode* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*/function utf8_from_unicode($arr) {    ob_start();    foreach (array_keys($arr) as $k) {        # ASCII range (including control chars)        if ( ($arr[$k] >= 0) && ($arr[$k] <= 0x007f) ) {            echo chr($arr[$k]);        # 2 byte sequence        } else if ($arr[$k] <= 0x07ff) {            echo chr(0xc0 | ($arr[$k] >> 6));            echo chr(0x80 | ($arr[$k] & 0x003f));        # Byte order mark (skip)        } else if($arr[$k] == 0xFEFF) {            // nop -- zap the BOM        # Test for illegal surrogates        } else if ($arr[$k] >= 0xD800 && $arr[$k] <= 0xDFFF) {            // found a surrogate            trigger_error(                'utf8_from_unicode: Illegal surrogate '.                    'at index: '.$k.', value: '.$arr[$k],                E_USER_WARNING                );            return FALSE;        # 3 byte sequence        } else if ($arr[$k] <= 0xffff) {            echo chr(0xe0 | ($arr[$k] >> 12));            echo chr(0x80 | (($arr[$k] >> 6) & 0x003f));            echo chr(0x80 | ($arr[$k] & 0x003f));        # 4 byte sequence        } else if ($arr[$k] <= 0x10ffff) {            echo chr(0xf0 | ($arr[$k] >> 18));            echo chr(0x80 | (($arr[$k] >> 12) & 0x3f));            echo chr(0x80 | (($arr[$k] >> 6) & 0x3f));            echo chr(0x80 | ($arr[$k] & 0x3f));        } else {            trigger_error(                'utf8_from_unicode: Codepoint out of Unicode range '.                    'at index: '.$k.', value: '.$arr[$k],                E_USER_WARNING                );            // out of range            return FALSE;        }    }    $result = ob_get_contents();    ob_end_clean();    return $result;}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_submenu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$list    = JSubMenuHelper::getEntries();$filters = JSubMenuHelper::getFilters();$action  = JSubMenuHelper::getAction();$displayMenu    = count($list);$displayFilters = count($filters);$hide = JFactory::getApplication()->input->getBool('hidemainmenu');if ($displayMenu || $displayFilters){	require JModuleHelper::getLayoutPath('mod_submenu', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_DIRECTORY_PERMISSIONS'); ?></legend>		<table class="table table-striped">			<thead>				<tr>					<th width="650">						<?php echo JText::_('COM_ADMIN_DIRECTORY'); ?>					</th>					<th>						<?php echo JText::_('COM_ADMIN_STATUS'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="2">&#160;</td>				</tr>			</tfoot>			<tbody>				<?php foreach ($this->directory as $dir => $info) : ?>					<tr>						<td>							<?php echo JHtml::_('directory.message', $dir, $info['message']);?>						</td>						<td>							<?php echo JHtml::_('directory.writable', $info['writable']);?>						</td>					</tr>				<?php endforeach; ?>			</tbody>		</table></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  mod_whosonline * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($showmode == 0 || $showmode == 2) : ?>	<?php $guest = JText::plural('MOD_WHOSONLINE_GUESTS', $count['guest']); ?>	<?php $member = JText::plural('MOD_WHOSONLINE_MEMBERS', $count['user']); ?>	<p><?php echo JText::sprintf('MOD_WHOSONLINE_WE_HAVE', $guest, $member); ?></p><?php endif; ?><?php if (($showmode > 0) && count($names)) : ?>	<ul  class="whosonline<?php echo $moduleclass_sfx ?>" >	<?php if ($params->get('filter_groups')):?>		<p><?php echo JText::_('MOD_WHOSONLINE_SAME_GROUP_MESSAGE'); ?></p>	<?php endif;?>	<?php foreach ($names as $name) : ?>		<li>			<?php echo $name->username; ?>		</li>	<?php endforeach;  ?>	</ul><?php endif;
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_ADMINISTRATOR . '/components/com_templates/helpers/templates.php';JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');$clientId       = $this->item->client_id;$state          = 1;$templates      = array_keys(ModulesHelper::getTemplates($clientId, $state));$templateGroups = array();// Add an empty value to be able to deselect a module position$option = ModulesHelper::createOption();$templateGroups[''] = ModulesHelper::createOptionGroup('', array($option));// Add positions from templates$isTemplatePosition = false;foreach ($templates as $template){	$options = array();	$positions = TemplatesHelper::getPositions($clientId, $template);	foreach ($positions as $position)	{		$text = ModulesHelper::getTranslatedModulePosition($clientId, $template, $position) . ' [' . $position . ']';		$options[] = ModulesHelper::createOption($position, $text);		if (!$isTemplatePosition && $this->item->position === $position)		{			$isTemplatePosition = true;		}	}	$templateGroups[$template] = ModulesHelper::createOptionGroup(ucfirst($template), $options);}// Add custom position to options$customGroupText = JText::_('COM_MODULES_CUSTOM_POSITION');$editPositions = true;$customPositions = ModulesHelper::getPositions($clientId, $editPositions);$templateGroups[$customGroupText] = ModulesHelper::createOptionGroup($customGroupText, $customPositions);// Build field$attr = array(	'id'          => 'jform_position',	'list.select' => $this->item->position,	'list.attr'   => 'class="chzn-custom-value input-xlarge" '		. 'data-custom_group_text="' . $customGroupText . '" '		. 'data-no_results_text="' . JText::_('COM_MODULES_ADD_CUSTOM_POSITION') . '" '		. 'data-placeholder="' . JText::_('COM_MODULES_TYPE_OR_SELECT_POSITION') . '" ');echo JHtml::_('select.groupedlist', $templateGroups, 'jform[position]', $attr);
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="newsflash<?php echo $moduleclass_sfx; ?>"><?phpforeach ($list as $item) :	require JModuleHelper::getLayoutPath('mod_articles_news', '_item');endforeach;?></div>
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JApplicationWebClient instead. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.3 * @deprecated  12.3 */class JWebClient extends JApplicationWebClient{	/**	 * Class constructor.	 *	 * @param   mixed  $userAgent       The optional user-agent string to parse.	 * @param   mixed  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   mixed  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   11.3	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		JLog::add('JWebClient is deprecated. Use JApplicationWebClient instead.', JLog::WARNING, 'deprecated');		parent::__construct($userAgent, $acceptEncoding, $acceptLanguage);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Route Helper * * @static * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsHelperRoute extends JHelperRoute{	protected static $lookup;	/**	 * Tries to load the router for the component and calls it. Otherwise uses getTagRoute.	 *	 * @param   integer  $contentItemId     Component item id	 * @param   string   $contentItemAlias  Component item alias	 * @param   integer  $contentCatId      Component item category id	 * @param   string   $language          Component item language	 * @param   string   $typeAlias         Component type alias	 * @param   string   $routerName        Component router	 *	 * @return  string  URL link to pass to JRoute	 *	 * @since   3.1	 */	public static function getItemRoute($contentItemId, $contentItemAlias, $contentCatId, $language, $typeAlias, $routerName)	{		$link = '';		$explodedAlias = explode('.', $typeAlias);		$explodedRouter = explode('::', $routerName);		if (file_exists($routerFile = JPATH_BASE . '/components/' . $explodedAlias[0] . '/helpers/route.php'))		{			JLoader::register($explodedRouter[0], $routerFile);			$routerClass = $explodedRouter[0];			$routerMethod = $explodedRouter[1];			if (class_exists($routerClass) && method_exists($routerClass, $routerMethod))			{				if ($routerMethod == 'getCategoryRoute')				{					$link = $routerClass::$routerMethod($contentItemId, $language);				}				else				{					$link = $routerClass::$routerMethod($contentItemId . ':' . $contentItemAlias, $contentCatId, $language);				}			}		}		if ($link == '')		{			// create a fallback link in case we can't find the component router			$router = new JHelperRoute;			$link = $router->getRoute($contentItemId, $typeAlias, $link, $language, $contentCatId);		}		return $link;	}	/**	 * Tries to load the router for the component and calls it. Otherwise calls getRoute.	 *	 * @param   integer  $id  The ID of the tag	 *	 * @return  string  URL link to pass to JRoute	 *	 * @since   3.1	 */	public static function getTagRoute($id)	{		$needles = array(			'tag'  => array((int) $id)		);		if ($id < 1)		{			$link = '';		}		else		{			if (!empty($needles) && $item = self::_findItem($needles))			{				$link = 'index.php?Itemid=' . $item;			}			else			{				// Create the link				$link = 'index.php?option=com_tags&view=tag&id=' . $id;			}		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (self::$lookup === null)		{			self::$lookup = array();			$component	= JComponentHelper::getComponent('com_tags');			$items		= $menus->getItems('component_id', $component->id);			if ($items) {				foreach ($items as $item)				{					if (isset($item->query) && isset($item->query['view']))					{						$view = $item->query['view'];						if (!isset(self::$lookup[$view]))						{							self::$lookup[$view] = array();						}						// Only match menu items that list one tag						if (isset($item->query['id'][0]) && count($item->query['id']) == 1)						{							// Here it will become a bit tricky							// language != * can override existing entries							// language == * cannot override existing entries							if (!isset(self::$lookup[$language][$view][$item->query['id'][0]]) || $item->language != '*')							{								self::$lookup[$language][$view][$item->query['id'][0]] = $item->id;							}							self::$lookup[$view][$item->query['id'][0]] = $item->id;						}						if (isset($item->query["tag_list_language_filter"]) && $item->query["tag_list_language_filter"] != '')						{							$language = $item->query["tag_list_language_filter"];						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$view]))				{					foreach($ids as $id)					{						if (isset(self::$lookup[$view][(int) $id]))						{							return self::$lookup[$view][(int) $id];						}					}				}			}		}		else		{			$active = $menus->getActive();			if ($active)			{				return $active->id;			}		}		return null;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Pagination * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Pagination object representing a particular item in the pagination lists. * * @package     Joomla.Platform * @subpackage  Pagination * @since       11.1 */class JPaginationObject{	/**	 * @var    string  The link text.	 * @since  11.1	 */	public $text;	/**	 * @var    integer  The number of rows as a base offset.	 * @since  11.1	 */	public $base;	/**	 * @var    string  The link URL.	 * @since  11.1	 */	public $link;	/**	 * @var    integer  The prefix used for request variables.	 * @since  11.1	 */	public $prefix;	/**	 * @var    boolean  Flag whether the object is the 'active' page	 * @since  12.2	 */	public $active;	/**	 * Class constructor.	 *	 * @param   string   $text    The link text.	 * @param   integer  $prefix  The prefix used for request variables.	 * @param   integer  $base    The number of rows as a base offset.	 * @param   string   $link    The link URL.	 * @param   boolean  $active  Flag whether the object is the 'active' page	 *	 * @since   11.1	 */	public function __construct($text, $prefix = '', $base = null, $link = null, $active = false)	{		$this->text   = $text;		$this->prefix = $prefix;		$this->base   = $base;		$this->link   = $link;		$this->active = $active;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the mod_popular functions only once.require_once __DIR__ . '/helper.php';// Get module data.$list = ModPopularHelper::getList($params);// Render the modulerequire JModuleHelper::getLayoutPath('mod_popular', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-params');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform" >	<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endforeach; ?>		</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages Component Message Model * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerMessage extends JControllerForm{	/**	 * Method (override) to check if you can save a new or existing record.	 *	 * Adjusts for the primary key name and hands off to the parent class.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 */	protected function allowSave($data, $key = 'message_id')	{		return parent::allowSave($data, $key);	}	/**	 * Reply to an existing message.	 *	 * This is a simple redirect to the compose form.	 */	public function reply()	{		if ($replyId = $this->input->getInt('reply_id'))		{			$this->setRedirect('index.php?option=com_messages&view=message&layout=edit&reply_id=' . $replyId);		}		else		{			$this->setMessage(JText::_('COM_MESSAGES_INVALID_REPLY_ID'));			$this->setRedirect('index.php?option=com_messages&view=messages');		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$class = ' class="first"';?><?php if (count($this->children[$this->category->id]) > 0) : ?>        <ul>        <?php foreach ($this->children[$this->category->id] as $id => $child) : ?>                <?php				if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :					if (!isset($this->children[$this->category->id][$id + 1])) :						$class = ' class="last"';					endif;				?>                <li<?php echo $class; ?>>                        <?php $class = ''; ?>                        <span class="item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">                                <?php echo $this->escape($child->title); ?></a>                        </span>                       <?php if ($this->params->get('show_subcat_desc') == 1) :?>                        <?php if ($child->description) : ?>                                <div class="category-desc">                                        <?php echo JHtml::_('content.prepare', $child->description, '', 'com_content.category'); ?>                                </div>                        <?php endif; ?>                        <?php endif; ?>                        <?php if ( $this->params->get('show_cat_num_articles', 1)) : ?>                        <dl>                                <dt>                                        <?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>                                </dt>                                <dd>                                        <?php echo $child->getNumItems(true); ?>                                </dd>                        </dl>                        <?php endif; ?>                        <?php if (count($child->getChildren()) > 0):							$this->children[$child->id] = $child->getChildren();							$this->category = $child;							$this->maxLevel--;							if ($this->maxLevel != 0) :								echo $this->loadTemplate('children');							endif;							$this->category = $child->getParent();							$this->maxLevel++;						endif; ?>                </li>                <?php endif; ?>        <?php endforeach; ?>        </ul><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (!empty($list)) :?>	<ul class="archive-module<?php echo $moduleclass_sfx; ?>">	<?php foreach ($list as $item) : ?>	<li>		<a href="<?php echo $item->link; ?>">			<?php echo $item->text; ?>		</a>	</li>	<?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       3.0 */class JFormFieldModuletag extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  3.0	 */	protected $type = 'ModuleTag';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   3.0	 */	protected function getOptions()	{		$options = array();		$tags = array('div', 'section', 'aside', 'nav', 'address', 'article');		// Create one new option object for each tag		foreach ($tags as $tag)		{			$tmp = JHtml::_('select.option', $tag, $tag);			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Token class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerToken{	/**	 * This is the term that will be referenced in the terms table and the	 * mapping tables.	 *	 * @var    string	 * @since  2.5	 */	public $term;	/**	 * The stem is used to match the root term and produce more potential	 * matches when searching the index.	 *	 * @var    string	 * @since  2.5	 */	public $stem;	/**	 * If the token is numeric, it is likely to be short and uncommon so the	 * weight is adjusted to compensate for that situation.	 *	 * @var    boolean	 * @since  2.5	 */	public $numeric;	/**	 * If the token is a common term, the weight is adjusted to compensate for	 * the higher frequency of the term in relation to other terms.	 *	 * @var    boolean	 * @since  2.5	 */	public $common;	/**	 * Flag for phrase tokens.	 *	 * @var    boolean	 * @since  2.5	 */	public $phrase;	/**	 * The length is used to calculate the weight of the token.	 *	 * @var    integer	 * @since  2.5	 */	public $length;	/**	 * The weight is calculated based on token size and whether the token is	 * considered a common term.	 *	 * @var    integer	 * @since  2.5	 */	public $weight;	/**	 * The simple language identifier for the token.	 *	 * @var    string	 * @since  2.5	 */	public $language;	/**	 * Method to construct the token object.	 *	 * @param   mixed   $term    The term as a string for words or an array for phrases.	 * @param   string  $lang    The simple language identifier.	 * @param   string  $spacer  The space separator for phrases. [optional]	 *	 * @since   2.5	 */	public function __construct($term, $lang, $spacer = ' ')	{		$this->language = $lang;		// Tokens can be a single word or an array of words representing a phrase.		if (is_array($term))		{			// Populate the token instance.			$this->term = implode($spacer, $term);			$this->stem = implode($spacer, array_map(array('FinderIndexerHelper', 'stem'), $term, array($lang)));			$this->numeric = false;			$this->common = false;			$this->phrase = true;			$this->length = JString::strlen($this->term);			/*			 * Calculate the weight of the token.			 *			 * 1. Length of the token up to 30 and divide by 30, add 1.			 * 2. Round weight to 4 decimal points.			 */			$this->weight = (($this->length >= 30 ? 30 : $this->length) / 30) + 1;			$this->weight = round($this->weight, 4);		}		else		{			// Populate the token instance.			$this->term = $term;			$this->stem = FinderIndexerHelper::stem($this->term, $lang);			$this->numeric = (is_numeric($this->term) || (bool) preg_match('#^[0-9,.\-\+]+$#', $this->term));			$this->common = $this->numeric ? false : FinderIndexerHelper::isCommon($this->term, $lang);			$this->phrase = false;			$this->length = JString::strlen($this->term);			/*			 * Calculate the weight of the token.			 *			 * 1. Length of the token up to 15 and divide by 15.			 * 2. If common term, divide weight by 8.			 * 3. If numeric, multiply weight by 1.5.			 * 4. Round weight to 4 decimal points.			 */			$this->weight = (($this->length >= 15 ? 15 : $this->length) / 15);			$this->weight = ($this->common == true ? $this->weight / 8 : $this->weight);			$this->weight = ($this->numeric == true ? $this->weight * 1.5 : $this->weight);			$this->weight = round($this->weight, 4);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * ZIP format adapter for the JArchive class * * The ZIP compression code is partially based on code from: * Eric Mueller <eric@themepark.com> * http://www.zend.com/codex.php?id=535&single=1 * * Deins125 <webmaster@atlant.ru> * http://www.zend.com/codex.php?id=470&single=1 * * The ZIP compression date code is partially based on code from * Peter Listiak <mlady@users.sourceforge.net> * * This class is inspired from and draws heavily in code and concept from the Compress package of * The Horde Project <http://www.horde.org> * * @contributor  Chuck Hagenbuch <chuck@horde.org> * @contributor  Michael Slusarz <slusarz@horde.org> * @contributor  Michael Cochrane <mike@graftonhall.co.nz> * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveZip implements JArchiveExtractable{	/**	 * ZIP compression methods.	 *	 * @var    array	 * @since  11.1	 */	private $_methods = array(0x0 => 'None', 0x1 => 'Shrunk', 0x2 => 'Super Fast', 0x3 => 'Fast', 0x4 => 'Normal', 0x5 => 'Maximum', 0x6 => 'Imploded',		0x8 => 'Deflated');	/**	 * Beginning of central directory record.	 *	 * @var    string	 * @since  11.1	 */	private $_ctrlDirHeader = "\x50\x4b\x01\x02";	/**	 * End of central directory record.	 *	 * @var    string	 * @since  11.1	 */	private $_ctrlDirEnd = "\x50\x4b\x05\x06\x00\x00\x00\x00";	/**	 * Beginning of file contents.	 *	 * @var    string	 * @since  11.1	 */	private $_fileHeader = "\x50\x4b\x03\x04";	/**	 * ZIP file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * ZIP file metadata array	 *	 * @var    array	 * @since  11.1	 */	private $_metadata = null;	/**	 * Create a ZIP compressed file from an array of file data.	 *	 * @param   string  $archive  Path to save archive.	 * @param   array   $files    Array of files to add to archive.	 * @param   array   $options  Compression options (unused).	 *	 * @return  boolean  True if successful.	 *	 * @since   11.1	 *	 * @todo    Finish Implementation	 */	public function create($archive, $files, array $options = array())	{		$contents = array();		$ctrldir = array();		foreach ($files as $file)		{			$this->_addToZIPFile($file, $contents, $ctrldir);		}		return $this->_createZIPFile($contents, $ctrldir, $archive);	}	/**	 * Extract a ZIP compressed file to a given path	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive into	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 * @throws RuntimeException	 */	public function extract($archive, $destination, array $options = array())	{		if (!is_file($archive))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Archive does not exist');			}			else			{				throw new RuntimeException('Archive does not exist');			}		}		if ($this->hasNativeSupport())		{			return $this->extractNative($archive, $destination, $options);		}		else		{			return $this->extractCustom($archive, $destination, $options);		}	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return (self::hasNativeSupport() || extension_loaded('zlib'));	}	/**	 * Method to determine if the server has native zip support for faster handling	 *	 * @return  boolean  True if php has native ZIP support	 *	 * @since   11.1	 */	public static function hasNativeSupport()	{		return (function_exists('zip_open') && function_exists('zip_read'));	}	/**	 * Checks to see if the data is a valid ZIP file.	 *	 * @param   string  &$data  ZIP archive data buffer.	 *	 * @return  boolean  True if valid, false if invalid.	 *	 * @since   11.1	 */	public function checkZipData(&$data)	{		if (strpos($data, $this->_fileHeader) === false)		{			return false;		}		else		{			return true;		}	}	/**	 * Extract a ZIP compressed file to a given path using a php based algorithm that only requires zlib support	 *	 * @param   string  $archive      Path to ZIP archive to extract.	 * @param   string  $destination  Path to extract archive into.	 * @param   array   $options      Extraction options [unused].	 *	 * @return  mixed   True if successful	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function extractCustom($archive, $destination, array $options)	{		$this->_data = null;		$this->_metadata = null;		if (!extension_loaded('zlib'))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Zlib not supported');			}			else			{				throw new RuntimeException('Zlib not supported');			}		}		$this->_data = file_get_contents($archive);		if (!$this->_data = JFile::read($archive))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to read archive (zip)');			}			else			{				throw new RuntimeException('Unable to read archive (zip)');			}		}		if (!$this->_readZipInfo($this->_data))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Get ZIP Information failed');			}			else			{				throw new RuntimeException('Get ZIP Information failed');			}		}		for ($i = 0, $n = count($this->_metadata); $i < $n; $i++)		{			$lastPathCharacter = substr($this->_metadata[$i]['name'], -1, 1);			if ($lastPathCharacter !== '/' && $lastPathCharacter !== '\\')			{				$buffer = $this->_getFileData($i);				$path = JPath::clean($destination . '/' . $this->_metadata[$i]['name']);				// Make sure the destination folder exists				if (!JFolder::create(dirname($path)))				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to create destination');					}					else					{						throw new RuntimeException('Unable to create destination');					}				}				if (JFile::write($path, $buffer) === false)				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to write entry');					}					else					{						throw new RuntimeException('Unable to write entry');					}				}			}		}		return true;	}	/**	 * Extract a ZIP compressed file to a given path using native php api calls for speed	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive into	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function extractNative($archive, $destination, array $options)	{		$zip = zip_open($archive);		if (is_resource($zip))		{			// Make sure the destination folder exists			if (!JFolder::create($destination))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to create destination');				}				else				{					throw new RuntimeException('Unable to create destination');				}			}			// Read files in the archive			while ($file = @zip_read($zip))			{				if (zip_entry_open($zip, $file, "r"))				{					if (substr(zip_entry_name($file), strlen(zip_entry_name($file)) - 1) != "/")					{						$buffer = zip_entry_read($file, zip_entry_filesize($file));						if (JFile::write($destination . '/' . zip_entry_name($file), $buffer) === false)						{							if (class_exists('JError'))							{								return JError::raiseWarning(100, 'Unable to write entry');							}							else							{								throw new RuntimeException('Unable to write entry');							}						}						zip_entry_close($file);					}				}				else				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to read entry');					}					else					{						throw new RuntimeException('Unable to read entry');					}				}			}			@zip_close($zip);		}		else		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to open archive');			}			else			{				throw new RuntimeException('Unable to open archive');			}		}		return true;	}	/**	 * Get the list of files/data from a ZIP archive buffer.	 *	 * <pre>	 * KEY: Position in zipfile	 * VALUES: 'attr'  --  File attributes	 * 'crc'   --  CRC checksum	 * 'csize' --  Compressed file size	 * 'date'  --  File modification time	 * 'name'  --  Filename	 * 'method'--  Compression method	 * 'size'  --  Original file size	 * 'type'  --  File type	 * </pre>	 *	 * @param   string  &$data  The ZIP archive buffer.	 *	 * @return  boolean True on success	 *	 * @since   11.1	 * @throws  RuntimeException	 */	private function _readZipInfo(&$data)	{		$entries = array();		// Find the last central directory header entry		$fhLast = strpos($data, $this->_ctrlDirEnd);		do		{			$last = $fhLast;		}		while (($fhLast = strpos($data, $this->_ctrlDirEnd, $fhLast + 1)) !== false);		// Find the central directory offset		$offset = 0;		if ($last)		{			$endOfCentralDirectory = unpack(				'vNumberOfDisk/vNoOfDiskWithStartOfCentralDirectory/vNoOfCentralDirectoryEntriesOnDisk/' .				'vTotalCentralDirectoryEntries/VSizeOfCentralDirectory/VCentralDirectoryOffset/vCommentLength',				substr($data, $last + 4)			);			$offset = $endOfCentralDirectory['CentralDirectoryOffset'];		}		// Get details from central directory structure.		$fhStart = strpos($data, $this->_ctrlDirHeader, $offset);		$dataLength = strlen($data);		do		{			if ($dataLength < $fhStart + 31)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Invalid Zip Data');				}				else				{					throw new RuntimeException('Invalid Zip Data');				}			}			$info = unpack('vMethod/VTime/VCRC32/VCompressed/VUncompressed/vLength', substr($data, $fhStart + 10, 20));			$name = substr($data, $fhStart + 46, $info['Length']);			$entries[$name] = array(				'attr' => null,				'crc' => sprintf("%08s", dechex($info['CRC32'])),				'csize' => $info['Compressed'],				'date' => null,				'_dataStart' => null,				'name' => $name,				'method' => $this->_methods[$info['Method']],				'_method' => $info['Method'],				'size' => $info['Uncompressed'],				'type' => null			);			$entries[$name]['date'] = mktime(				(($info['Time'] >> 11) & 0x1f),				(($info['Time'] >> 5) & 0x3f),				(($info['Time'] << 1) & 0x3e),				(($info['Time'] >> 21) & 0x07),				(($info['Time'] >> 16) & 0x1f),				((($info['Time'] >> 25) & 0x7f) + 1980)			);			if ($dataLength < $fhStart + 43)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Invalid ZIP data');				}				else				{					throw new RuntimeException('Invalid ZIP data');				}			}			$info = unpack('vInternal/VExternal/VOffset', substr($data, $fhStart + 36, 10));			$entries[$name]['type'] = ($info['Internal'] & 0x01) ? 'text' : 'binary';			$entries[$name]['attr'] = (($info['External'] & 0x10) ? 'D' : '-') . (($info['External'] & 0x20) ? 'A' : '-')				. (($info['External'] & 0x03) ? 'S' : '-') . (($info['External'] & 0x02) ? 'H' : '-') . (($info['External'] & 0x01) ? 'R' : '-');			$entries[$name]['offset'] = $info['Offset'];			// Get details from local file header since we have the offset			$lfhStart = strpos($data, $this->_fileHeader, $entries[$name]['offset']);			if ($dataLength < $lfhStart + 34)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Invalid Zip Data');				}				else				{					throw new RuntimeException('Invalid Zip Data');				}			}			$info = unpack('vMethod/VTime/VCRC32/VCompressed/VUncompressed/vLength/vExtraLength', substr($data, $lfhStart + 8, 25));			$name = substr($data, $lfhStart + 30, $info['Length']);			$entries[$name]['_dataStart'] = $lfhStart + 30 + $info['Length'] + $info['ExtraLength'];			// Bump the max execution time because not using the built in php zip libs makes this process slow.			@set_time_limit(ini_get('max_execution_time'));		}		while ((($fhStart = strpos($data, $this->_ctrlDirHeader, $fhStart + 46)) !== false));		$this->_metadata = array_values($entries);		return true;	}	/**	 * Returns the file data for a file by offsest in the ZIP archive	 *	 * @param   integer  $key  The position of the file in the archive.	 *	 * @return  string  Uncompressed file data buffer.	 *	 * @since   11.1	 */	private function _getFileData($key)	{		if ($this->_metadata[$key]['_method'] == 0x8)		{			return gzinflate(substr($this->_data, $this->_metadata[$key]['_dataStart'], $this->_metadata[$key]['csize']));		}		elseif ($this->_metadata[$key]['_method'] == 0x0)		{			/* Files that aren't compressed. */			return substr($this->_data, $this->_metadata[$key]['_dataStart'], $this->_metadata[$key]['csize']);		}		elseif ($this->_metadata[$key]['_method'] == 0x12)		{			// If bz2 extension is loaded use it			if (extension_loaded('bz2'))			{				return bzdecompress(substr($this->_data, $this->_metadata[$key]['_dataStart'], $this->_metadata[$key]['csize']));			}		}		return '';	}	/**	 * Converts a UNIX timestamp to a 4-byte DOS date and time format	 * (date in high 2-bytes, time in low 2-bytes allowing magnitude	 * comparison).	 *	 * @param   int  $unixtime  The current UNIX timestamp.	 *	 * @return  int  The current date in a 4-byte DOS format.	 *	 * @since   11.1	 */	protected function _unix2DOSTime($unixtime = null)	{		$timearray = (is_null($unixtime)) ? getdate() : getdate($unixtime);		if ($timearray['year'] < 1980)		{			$timearray['year'] = 1980;			$timearray['mon'] = 1;			$timearray['mday'] = 1;			$timearray['hours'] = 0;			$timearray['minutes'] = 0;			$timearray['seconds'] = 0;		}		return (($timearray['year'] - 1980) << 25) | ($timearray['mon'] << 21) | ($timearray['mday'] << 16) | ($timearray['hours'] << 11) | ($timearray['minutes'] << 5) | ($timearray['seconds'] >> 1);	}	/**	 * Adds a "file" to the ZIP archive.	 *	 * @param   array  &$file      File data array to add	 * @param   array  &$contents  An array of existing zipped files.	 * @param   array  &$ctrldir   An array of central directory information.	 *	 * @return  void	 *	 * @since   11.1	 *	 * @todo    Review and finish implementation	 */	private function _addToZIPFile(array &$file, array &$contents, array &$ctrldir)	{		$data = &$file['data'];		$name = str_replace('\\', '/', $file['name']);		/* See if time/date information has been provided. */		$ftime = null;		if (isset($file['time']))		{			$ftime = $file['time'];		}		// Get the hex time.		$dtime = dechex($this->_unix2DosTime($ftime));		$hexdtime = chr(hexdec($dtime[6] . $dtime[7])) . chr(hexdec($dtime[4] . $dtime[5])) . chr(hexdec($dtime[2] . $dtime[3]))			. chr(hexdec($dtime[0] . $dtime[1]));		/* Begin creating the ZIP data. */		$fr = $this->_fileHeader;		/* Version needed to extract. */		$fr .= "\x14\x00";		/* General purpose bit flag. */		$fr .= "\x00\x00";		/* Compression method. */		$fr .= "\x08\x00";		/* Last modification time/date. */		$fr .= $hexdtime;		/* "Local file header" segment. */		$unc_len = strlen($data);		$crc = crc32($data);		$zdata = gzcompress($data);		$zdata = substr(substr($zdata, 0, strlen($zdata) - 4), 2);		$c_len = strlen($zdata);		/* CRC 32 information. */		$fr .= pack('V', $crc);		/* Compressed filesize. */		$fr .= pack('V', $c_len);		/* Uncompressed filesize. */		$fr .= pack('V', $unc_len);		/* Length of filename. */		$fr .= pack('v', strlen($name));		/* Extra field length. */		$fr .= pack('v', 0);		/* File name. */		$fr .= $name;		/* "File data" segment. */		$fr .= $zdata;		/* Add this entry to array. */		$old_offset = strlen(implode('', $contents));		$contents[] = &$fr;		/* Add to central directory record. */		$cdrec = $this->_ctrlDirHeader;		/* Version made by. */		$cdrec .= "\x00\x00";		/* Version needed to extract */		$cdrec .= "\x14\x00";		/* General purpose bit flag */		$cdrec .= "\x00\x00";		/* Compression method */		$cdrec .= "\x08\x00";		/* Last mod time/date. */		$cdrec .= $hexdtime;		/* CRC 32 information. */		$cdrec .= pack('V', $crc);		/* Compressed filesize. */		$cdrec .= pack('V', $c_len);		/* Uncompressed filesize. */		$cdrec .= pack('V', $unc_len);		/* Length of filename. */		$cdrec .= pack('v', strlen($name));		/* Extra field length. */		$cdrec .= pack('v', 0);		/* File comment length. */		$cdrec .= pack('v', 0);		/* Disk number start. */		$cdrec .= pack('v', 0);		/* Internal file attributes. */		$cdrec .= pack('v', 0);		/* External file attributes -'archive' bit set. */		$cdrec .= pack('V', 32);		/* Relative offset of local header. */		$cdrec .= pack('V', $old_offset);		/* File name. */		$cdrec .= $name;		/* Optional extra field, file comment goes here. */		/* Save to central directory array. */		$ctrldir[] = &$cdrec;	}	/**	 * Creates the ZIP file.	 *	 * Official ZIP file format: http://www.pkware.com/appnote.txt	 *	 * @param   array   &$contents  An array of existing zipped files.	 * @param   array   &$ctrlDir   An array of central directory information.	 * @param   string  $path       The path to store the archive.	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 *	 * @todo	Review and finish implementation	 */	private function _createZIPFile(array &$contents, array &$ctrlDir, $path)	{		$data = implode('', $contents);		$dir = implode('', $ctrlDir);		$buffer = $data . $dir . $this->_ctrlDirEnd . /* Total # of entries "on this disk". */		pack('v', count($ctrlDir)) . /* Total # of entries overall. */		pack('v', count($ctrlDir)) . /* Size of central directory. */		pack('V', strlen($dir)) . /* Offset to start of central dir. */		pack('V', strlen($data)) . /* ZIP file comment length. */		"\x00\x00";		if (JFile::write($path, $buffer) === false)		{			return false;		}		else		{			return true;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleUrl extends JFormRule{	/**	 * Method to test an external url for a valid parts.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @link    http://www.w3.org/Addressing/URL/url-spec.txt	 * @see	    Jstring	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		$urlParts = JString::parse_url($value);		// See http://www.w3.org/Addressing/URL/url-spec.txt		// Use the full list or optionally specify a list of permitted schemes.		if ($element['schemes'] == '')		{			$scheme = array('http', 'https', 'ftp', 'ftps', 'gopher', 'mailto', 'news', 'prospero', 'telnet', 'rlogin', 'tn3270', 'wais', 'url',				'mid', 'cid', 'nntp', 'tel', 'urn', 'ldap', 'file', 'fax', 'modem', 'git');		}		else		{			$scheme = explode(',', $element['schemes']);		}		/*		 * This rule is only for full URLs with schemes because parse_url does not parse		 * accurately without a scheme.		 * @see http://php.net/manual/en/function.parse-url.php		 */		if ($urlParts && !array_key_exists('scheme', $urlParts))		{			return false;		}		$urlScheme = (string) $urlParts['scheme'];		$urlScheme = strtolower($urlScheme);		if (in_array($urlScheme, $scheme) == false)		{			return false;		}		// For some schemes here must be two slashes.		if (($urlScheme == 'http' || $urlScheme == 'https' || $urlScheme == 'ftp' || $urlScheme == 'sftp' || $urlScheme == 'gopher'			|| $urlScheme == 'wais' || $urlScheme == 'gopher' || $urlScheme == 'prospero' || $urlScheme == 'telnet' || $urlScheme == 'git')			&& ((substr($value, strlen($urlScheme), 3)) !== '://'))		{			return false;		}		// The best we can do for the rest is make sure that the strings are valid UTF-8		// and the port is an integer.		if (array_key_exists('host', $urlParts) && !JString::valid((string) $urlParts['host']))		{			return false;		}		if (array_key_exists('port', $urlParts) && !is_int((int) $urlParts['port']))		{			return false;		}		if (array_key_exists('path', $urlParts) && !JString::valid((string) $urlParts['path']))		{			return false;		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlusPeople extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * Get a person's profile.	 *	 * @param   string  $id      The ID of the person to get the profile for. The special value "me" can be used to indicate the authenticated user.	 * @param   string  $fields  Used to specify the fields you want returned.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function getPeople($id, $fields = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people/' . $id;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Search all public profiles.	 *	 * @param   string   $query     Specify a query string for full text search of public text in all profiles.	 * @param   string   $fields    Used to specify the fields you want returned.	 * @param   string   $language  Specify the preferred language to search with. https://developers.google.com/+/api/search#available-languages	 * @param   integer  $max       The maximum number of people to include in the response, used for paging.	 * @param   string   $token     The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function search($query, $fields = null, $language = null, $max = 10, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people?query=' . urlencode($query);			// Check if fields is specified.			if ($fields)			{				$url .= '&fields=' . $fields;			}			// Check if language is specified.			if ($language)			{				$url .= '&language=' . $language;			}			// Check if max is specified.			if ($max != 10)			{				$url .= '&maxResults=' . $max;			}			// Check of token is specified.			if ($token)			{				$url .= '&pageToken=' . $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * List all of the people in the specified collection for a particular activity.	 *	 * @param   string   $activityId  The ID of the activity to get the list of people for.	 * @param   string   $collection  The collection of people to list. Acceptable values are "plusoners" and "resharers".	 * @param   string   $fields      Used to specify the fields you want returned.	 * @param   integer  $max         The maximum number of people to include in the response, used for paging.	 * @param   string   $token       The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								  parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function listByActivity($activityId, $collection, $fields = null, $max = 10, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities/' . $activityId . '/people/' . $collection;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if max is specified.			if ($max != 10)			{				$url .= (strpos($url, '?') === false) ? '?maxResults=' : '&maxResults=';				$url .= $max;			}			// Check of token is specified.			if ($token)			{				$url .= (strpos($url, '?') === false) ? '?pageToken=' : '&pageToken=';				$url .= $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="list-striped list-condensed stats-module<?php echo $moduleclass_sfx ?>">	<?php foreach ($list as $item) : ?>		<li><i class="icon-<?php echo $item->icon;?>" title="<?php echo $item->title;?>"></i> <?php echo $item->title;?> <?php echo $item->data;?></li>	<?php endforeach; ?></ul>
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$serverinfo = $params->get('serverinfo');$siteinfo	= $params->get('siteinfo');$list = ModStatsHelper::getStats($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_stats_admin', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  mod_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_banners * * @package     Joomla.Site * @subpackage  mod_banners * @since       1.5 */class ModBannersHelper{	public static function &getList(&$params)	{		JModelLegacy::addIncludePath(JPATH_ROOT.'/components/com_banners/models', 'BannersModel');		$document	= JFactory::getDocument();		$app		= JFactory::getApplication();		$keywords	= explode(',', $document->getMetaData('keywords'));		$model = JModelLegacy::getInstance('Banners', 'BannersModel', array('ignore_request' => true));		$model->setState('filter.client_id', (int) $params->get('cid'));		$model->setState('filter.category_id', $params->get('catid', array()));		$model->setState('list.limit', (int) $params->get('count', 1));		$model->setState('list.start', 0);		$model->setState('filter.ordering', $params->get('ordering'));		$model->setState('filter.tag_search', $params->get('tag_search'));		$model->setState('filter.keywords', $keywords);		$model->setState('filter.language', $app->getLanguageFilter());		$banners = $model->getItems();		$model->impress();		return $banners;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners Component Category Tree * * @package     Joomla.Site * @subpackage  com_banners * @since       1.6 */class BannersCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__banners';		$options['extension'] = 'com_banners';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class for using PHP streams. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpTransportStream implements JHttpTransport{	/**	 * @var    JRegistry  The client options.	 * @since  11.3	 */	protected $options;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct(JRegistry $options)	{		// Verify that fopen() is available.		if (!self::isSupported())		{			throw new RuntimeException('Cannot use a stream transport when fopen() is not available.');		}		// Verify that URLs can be used with fopen();		if (!ini_get('allow_url_fopen'))		{			throw new RuntimeException('Cannot use a stream transport when "allow_url_fopen" is disabled.');		}		$this->options = $options;	}	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null)	{		// Create the stream context options array with the required method offset.		$options = array('method' => strtoupper($method));		// If data exists let's encode it and make sure our Content-Type header is set.		if (isset($data))		{			// If the data is a scalar value simply add it to the stream context options.			if (is_scalar($data))			{				$options['content'] = $data;			}			// Otherwise we need to encode the value first.			else			{				$options['content'] = http_build_query($data);			}			if (!isset($headers['Content-Type']))			{				$headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';			}			// Add the relevant headers.			$headers['Content-Length'] = strlen($options['content']);		}		// Build the headers string for the request.		$headerString = null;		if (isset($headers))		{			foreach ($headers as $key => $value)			{				$headerString .= $key . ': ' . $value . "\r\n";			}			// Add the headers string into the stream context options array.			$options['header'] = trim($headerString, "\r\n");		}		// If an explicit timeout is given user it.		if (isset($timeout))		{			$options['timeout'] = (int) $timeout;		}		// If an explicit user agent is given use it.		if (isset($userAgent))		{			$options['user_agent'] = $userAgent;		}		// Ignore HTTP errors so that we can capture them.		$options['ignore_errors'] = 1;		// Follow redirects.		$options['follow_location'] = (int) $this->options->get('follow_location', 1);		// Create the stream context for the request.		$context = stream_context_create(array('http' => $options));		// Open the stream for reading.		$stream = @fopen((string) $uri, 'r', false, $context);		// Check if the stream is open.		if (!$stream)		{			throw new RuntimeException(sprintf('Could not connect to resource: %s', $uri));		}		// Get the metadata for the stream, including response headers.		$metadata = stream_get_meta_data($stream);		// Get the contents from the stream.		$content = stream_get_contents($stream);		// Close the stream.		fclose($stream);		if (isset($metadata['wrapper_data']['headers']))		{			$headers = $metadata['wrapper_data']['headers'];		}		elseif (isset($metadata['wrapper_data']))		{			$headers = $metadata['wrapper_data'];		}		else		{			$headers = array();		}		return $this->getResponse($headers, $content);	}	/**	 * Method to get a response object from a server response.	 *	 * @param   array   $headers  The response headers as an array.	 * @param   string  $body     The response body as a string.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  UnexpectedValueException	 */	protected function getResponse(array $headers, $body)	{		// Create the response object.		$return = new JHttpResponse;		// Set the body for the response.		$return->body = $body;		// Get the response code from the first offset of the response headers.		preg_match('/[0-9]{3}/', array_shift($headers), $matches);		$code = $matches[0];		if (is_numeric($code))		{			$return->code = (int) $code;		}		// No valid response code was detected.		else		{			throw new UnexpectedValueException('No HTTP response code found.');		}		// Add the response headers to the response object.		foreach ($headers as $header)		{			$pos = strpos($header, ':');			$return->headers[trim(substr($header, 0, $pos))] = trim(substr($header, ($pos + 1)));		}		return $return;	}	/**	 * method to check if http transport stream available for using	 *	 * @return bool true if available else false	 *	 * @since   12.1	 */	static public function isSupported()	{		return function_exists('fopen') && is_callable('fopen');	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_syndicate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><a href="<?php echo $link ?>" class="syndicate-module<?php echo $moduleclass_sfx ?>">	<?php echo JHtml::_('image', 'system/livemarks.png', 'feed-image', null, true); ?>	<?php if ($params->get('display_text', 1)) : ?>		<span>		<?php if (str_replace(' ', '', $text) != '') : ?>			<?php echo $text; ?>		<?php else : ?>			<?php echo JText::_('MOD_SYNDICATE_DEFAULT_FEED_ENTRIES'); ?>		<?php endif; ?>		</span>	<?php endif; ?></a>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_installer */class InstallerControllerInstall extends JControllerLegacy{	/**	 * Install an extension.	 *	 * @return  void	 * @since   1.5	 */	public function install()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('install');		if ($model->install())		{			$cache = JFactory::getCache('mod_menu');			$cache->clean();			// TODO: Reset the users acl here as well to kill off any missing bits		}		$app = JFactory::getApplication();		$redirect_url = $app->getUserState('com_installer.redirect_url');		if (empty($redirect_url))		{			$redirect_url = JRoute::_('index.php?option=com_installer&view=install', false);		} else		{			// wipe out the user state when we're going to redirect			$app->setUserState('com_installer.redirect_url', '');			$app->setUserState('com_installer.message', '');			$app->setUserState('com_installer.extension_message', '');		}		$this->setRedirect($redirect_url);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');/** * Joomla! Package Manifest File * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */abstract class JInstallerManifest{	/**	 * Path to the manifest file	 *	 * @var    string	 * @since  3.1	 */	public $manifest_file = '';	/**	 * Name of the extension	 *	 * @var    string	 * @since  3.1	 */	public $name = '';	/**	 * Version of the extension	 *	 * @var    string	 * @since  3.1	 */	public $version = '';	/**	 * Description of the extension	 *	 * @var    string	 * @since  3.1	 */	public $description = '';	/**	 * Packager of the extension	 *	 * @var    string	 * @since  3.1	 */	public $packager = '';	/**	 * Packager's URL of the extension	 *	 * @var    string	 * @since  3.1	 */	public $packagerurl = '';	/**	 * Update site for the extension	 *	 * @var    string	 * @since  3.1	 */	public $update = '';	/**	 * List of files in the extension	 *	 * @var    array	 * @since  3.1	 */	public $filelist = array();	/**	 * Constructor	 *	 * @param   string  $xmlpath  Path to XML manifest file.	 *	 * @since   3.1	 */	public function __construct($xmlpath = '')	{		if (strlen($xmlpath))		{			$this->loadManifestFromXML($xmlpath);		}	}	/**	 * Load a manifest from a file	 *	 * @param   string  $xmlfile  Path to file to load	 *	 * @return  boolean	 *	 * @since   3.1	 */	public function loadManifestFromXML($xmlfile)	{		$this->manifest_file = basename($xmlfile, '.xml');		$xml = simplexml_load_file($xmlfile);		if (!$xml)		{			$this->_errors[] = JText::sprintf('JLIB_INSTALLER_ERROR_LOAD_XML', $xmlfile);			return false;		}		else		{			$this->loadManifestFromData($xml);			return true;		}	}	/**	 * Apply manifest data from a SimpleXMLElement to the object.	 *	 * @param   SimpleXMLElement  $xml  Data to load	 *	 * @return  void	 *	 * @since   3.1	 */	abstract protected function loadManifestFromData(SimpleXmlElement $xml);}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Picasa data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataPicasaAlbum extends JGoogleData{	/**	 * @var    SimpleXMLElement  The album's XML	 * @since  12.3	 */	protected $xml;	/**	 * Constructor.	 *	 * @param   SimpleXMLElement  $xml      XML from Google	 * @param   JRegistry         $options  Google options object	 * @param   JGoogleAuth       $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(SimpleXMLElement $xml, JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->xml = $xml;		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://picasaweb.google.com/data/');		}	}	/**	 * Method to delete a Picasa album	 *	 * @param   mixed  $match  Check for most up to date album	 *	 * @return  boolean  Success or failure.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function delete($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$jdata = $this->query($url, null, array('GData-Version' => 2, 'If-Match' => $match), 'delete');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			if ($jdata->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}			$this->xml = null;			return true;		}		else		{			return false;		}	}	/**	 * Method to get the album link	 *	 * @param   string  $type  Type of link to return	 *	 * @return  string  Link or false on failure	 *	 * @since   12.3	 */	public function getLink($type = 'edit')	{		$links = $this->xml->link;		foreach ($links as $link)		{			if ($link->attributes()->rel == $type)			{				return (string) $link->attributes()->href;			}		}		return false;	}	/**	 * Method to get the title of the album	 *	 * @return  string  Album title	 *	 * @since   12.3	 */	public function getTitle()	{		return (string) $this->xml->children()->title;	}	/**	 * Method to get the summary of the album	 *	 * @return  string  Album summary	 *	 * @since   12.3	 */	public function getSummary()	{		return (string) $this->xml->children()->summary;	}	/**	 * Method to get the location of the album	 *	 * @return  string  Album location	 *	 * @since   12.3	 */	public function getLocation()	{		return (string) $this->xml->children('gphoto', true)->location;	}	/**	 * Method to get the access level of the album	 *	 * @return  string  Album access level	 *	 * @since   12.3	 */	public function getAccess()	{		return (string) $this->xml->children('gphoto', true)->access;	}	/**	 * Method to get the time of the album	 *	 * @return  double  Album time	 *	 * @since   12.3	 */	public function getTime()	{		return (double) $this->xml->children('gphoto', true)->timestamp / 1000;	}	/**	 * Method to set the title of the album	 *	 * @param   string  $title  New album title	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setTitle($title)	{		$this->xml->children()->title = $title;		return $this;	}	/**	 * Method to set the summary of the album	 *	 * @param   string  $summary  New album summary	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setSummary($summary)	{		$this->xml->children()->summary = $summary;		return $this;	}	/**	 * Method to set the location of the album	 *	 * @param   string  $location  New album location	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setLocation($location)	{		$this->xml->children('gphoto', true)->location = $location;		return $this;	}	/**	 * Method to set the access level of the album	 *	 * @param   string  $access  New album access	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setAccess($access)	{		$this->xml->children('gphoto', true)->access = $access;		return $this;	}	/**	 * Method to set the time of the album	 *	 * @param   int  $time  New album time	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setTime($time)	{		$this->xml->children('gphoto', true)->timestamp = $time * 1000;		return $this;	}	/**	 * Method to modify a Picasa Album	 *	 * @param   string  $match  Optional eTag matching parameter	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	public function save($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$headers = array('GData-Version' => 2, 'Content-type' => 'application/atom+xml', 'If-Match' => $match);				$jdata = $this->query($url, $this->xml->asXML(), $headers, 'put');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}	/**	 * Refresh Picasa Album	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function refresh()	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			$jdata = $this->query($url, null, array('GData-Version' => 2));			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of Picasa Photos	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listPhotos()	{		if ($this->isAuthenticated())		{			$url = $this->getLink('http://schemas.google.com/g/2005#feed');			$jdata = $this->query($url, null, array('GData-Version' => 2));			$xml = $this->safeXML($jdata->body);			if (isset($xml->children()->entry))			{				$items = array();				foreach ($xml->children()->entry as $item)				{					$items[] = new JGoogleDataPicasaPhoto($item, $this->options, $this->auth);				}				return $items;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Add photo	 *	 * @param   string  $file     Path of file to upload	 * @param   string  $title    Title to give to file (defaults to filename)	 * @param   string  $summary  Description of the file	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function upload($file, $title = '', $summary = '')	{		if ($this->isAuthenticated())		{			$title = $title != '' ? $title : JFile::getName($file);			if (!($type = $this->getMIME($file)))			{				throw new RuntimeException("Inappropriate file type.");			}			if (!($data = JFile::read($file)))			{				throw new RuntimeException("Cannot access file: `$file`");			}			$xml = new SimpleXMLElement('<entry></entry>');			$xml->addAttribute('xmlns', 'http://www.w3.org/2005/Atom');			$xml->addChild('title', $title);			$xml->addChild('summary', $summary);			$cat = $xml->addChild('category', '');			$cat->addAttribute('scheme', 'http://schemas.google.com/g/2005#kind');			$cat->addAttribute('term', 'http://schemas.google.com/photos/2007#photo');			$post = "Media multipart posting\n";			$post .= "--END_OF_PART\n";			$post .= "Content-Type: application/atom+xml\n\n";			$post .= $xml->asXML() . "\n";			$post .= "--END_OF_PART\n";			$post .= "Content-Type: {$type}\n\n";			$post .= $data;			$jdata = $this->query($this->getLink(), $post, array('GData-Version' => 2, 'Content-Type: multipart/related'), 'post');			return new JGoogleDataPicasaPhoto($this->safeXML($jdata->body), $this->options, $this->auth);		}		else		{			return false;		}	}	/**	 * Add photo	 *	 * @param   string  $file  Filename	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected function getMIME($file)	{		switch (strtolower(JFile::getExt($file)))		{			case 'bmp':			case 'bm':			return 'image/bmp';			case 'gif':			return 'image/gif';			case 'jpg':			case 'jpeg':			case 'jpe':			case 'jif':			case 'jfif':			case 'jfi':			return 'image/jpeg';			case 'png':			return 'image/png';			case '3gp':			return 'video/3gpp';			case 'avi':			return 'video/avi';			case 'mov':			case 'moov':			case 'qt':			return 'video/quicktime';			case 'mp4':			case 'm4a':			case 'm4p':			case 'm4b':			case 'm4r':			case 'm4v':			return 'video/mp4';			case 'mpg':			case 'mpeg':			case 'mp1':			case 'mp2':			case 'mp3':			case 'm1v':			case 'm1a':			case 'm2a':			case 'mpa':			case 'mpv':			return 'video/mpeg';			case 'asf':			return 'video/x-ms-asf';			case 'wmv':			return 'video/x-ms-wmv';			default:			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Set up the sanitised target for the ul$ulTarget = str_replace('/', '-', $this->folders['data']->relative);?><ul class="nav nav-list collapse in" id="collapseFolder-<?php echo $ulTarget; ?>"><?php if (isset($this->folders['children'])) :	foreach ($this->folders['children'] as $folder) :	// Get a sanitised name for the target	$target = str_replace('/', '-', $folder['data']->relative); ?>	<li id="<?php echo $target; ?>">		<i class="icon-folder-2 pull-left" data-toggle="collapse" data-target="#collapseFolder-<?php echo $target; ?>"></i>		<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $folder['data']->relative; ?>" target="folderframe">			<?php echo $folder['data']->name; ?>		</a>		<?php echo $this->getFolderLevel($folder); ?>	</li><?php endforeach;endif; ?></ul>
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Simple encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipherSimple implements JCryptCipher{	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	public function decrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != 'simple')		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected simple.');		}		$decrypted = '';		$tmp = $key->public;		// Convert the HEX input into an array of integers and get the number of characters.		$chars = $this->_hexToIntArray($data);		$charCount = count($chars);		// Repeat the key as many times as necessary to ensure that the key is at least as long as the input.		for ($i = 0; $i < $charCount; $i = strlen($tmp))		{			$tmp = $tmp . $tmp;		}		// Get the XOR values between the ASCII values of the input and key characters for all input offsets.		for ($i = 0; $i < $charCount; $i++)		{			$decrypted .= chr($chars[$i] ^ ord($tmp[$i]));		}		return $decrypted;	}	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	public function encrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != 'simple')		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected simple.');		}		$encrypted = '';		$tmp = $key->private;		// Split up the input into a character array and get the number of characters.		$chars = preg_split('//', $data, -1, PREG_SPLIT_NO_EMPTY);		$charCount = count($chars);		// Repeat the key as many times as necessary to ensure that the key is at least as long as the input.		for ($i = 0; $i < $charCount; $i = strlen($tmp))		{			$tmp = $tmp . $tmp;		}		// Get the XOR values between the ASCII values of the input and key characters for all input offsets.		for ($i = 0; $i < $charCount; $i++)		{			$encrypted .= $this->_intToHex(ord($tmp[$i]) ^ ord($chars[$i]));		}		return $encrypted;	}	/**	 * Method to generate a new encryption key[/pair] object.	 *	 * @param   array  $options  Key generation options.	 *	 * @return  JCryptKey	 *	 * @since   12.1	 */	public function generateKey(array $options = array())	{		// Create the new encryption key[/pair] object.		$key = new JCryptKey('simple');		// Just a random key of a given length.		$key->private = $this->_getRandomKey();		$key->public  = $key->private;		return $key;	}	/**	 * Method to generate a random key of a given length.	 *	 * @param   integer  $length  The length of the key to generate.	 *	 * @return  string	 *	 * @since   12.1	 */	private function _getRandomKey($length = 256)	{		$key = '';		$salt = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';		$saltLength = strlen($salt);		// Build the random key.		for ($i = 0; $i < $length; $i++)		{			$key .= $salt[mt_rand(0, $saltLength - 1)];		}		return $key;	}	/**	 * Convert hex to an integer	 *	 * @param   string   $s  The hex string to convert.	 * @param   integer  $i  The offset?	 *	 * @return  integer	 *	 * @since   11.1	 */	private function _hexToInt($s, $i)	{		$j = (int) $i * 2;		$k = 0;		$s1 = (string) $s;		// Get the character at position $j.		$c = substr($s1, $j, 1);		// Get the character at position $j + 1.		$c1 = substr($s1, $j + 1, 1);		switch ($c)		{			case 'A':				$k += 160;				break;			case 'B':				$k += 176;				break;			case 'C':				$k += 192;				break;			case 'D':				$k += 208;				break;			case 'E':				$k += 224;				break;			case 'F':				$k += 240;				break;			case ' ':				$k += 0;				break;			default:				(int) $k = $k + (16 * (int) $c);				break;		}		switch ($c1)		{			case 'A':				$k += 10;				break;			case 'B':				$k += 11;				break;			case 'C':				$k += 12;				break;			case 'D':				$k += 13;				break;			case 'E':				$k += 14;				break;			case 'F':				$k += 15;				break;			case ' ':				$k += 0;				break;			default:				$k += (int) $c1;				break;		}		return $k;	}	/**	 * Convert hex to an array of integers	 *	 * @param   string  $hex  The hex string to convert to an integer array.	 *	 * @return  array  An array of integers.	 *	 * @since   11.1	 */	private function _hexToIntArray($hex)	{		$array = array();		$j = (int) strlen($hex) / 2;		for ($i = 0; $i < $j; $i++)		{			$array[$i] = (int) $this->_hexToInt($hex, $i);		}		return $array;	}	/**	 * Convert an integer to a hexadecimal string.	 *	 * @param   integer  $i  An integer value to convert to a hex string.	 *	 * @return  string	 *	 * @since   11.1	 */	private function _intToHex($i)	{		// Sanitize the input.		$i = (int) $i;		// Get the first character of the hexadecimal string if there is one.		$j = (int) ($i / 16);		if ($j === 0)		{			$s = ' ';		}		else		{			$s = strtoupper(dechex($j));		}		// Get the second character of the hexadecimal string.		$k = $i - $j * 16;		$s = $s . strtoupper(dechex($k));		return $s;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Event * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JEvent Class * * @package     Joomla.Platform * @subpackage  Event * @since       11.1 */abstract class JEvent extends JObject{	/**	 * Event object to observe.	 *	 * @var    object	 * @since  11.3	 */	protected $_subject = null;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe.	 *	 * @since   11.3	 */	public function __construct(&$subject)	{		// Register the observer ($this) so we can be notified		$subject->attach($this);		// Set the subject to observe		$this->_subject = &$subject;	}	/**	 * Method to trigger events.	 * The method first generates the even from the argument array. Then it unsets the argument	 * since the argument has no bearing on the event handler.	 * If the method exists it is called and returns its return value. If it does not exist it	 * returns null.	 *	 * @param   array  &$args  Arguments	 *	 * @return  mixed  Routine return value	 *	 * @since   11.1	 */	public function update(&$args)	{		// First let's get the event from the argument array.  Next we will unset the		// event argument as it has no bearing on the method to handle the event.		$event = $args['event'];		unset($args['event']);		/*		 * If the method to handle an event exists, call it and return its return		 * value.  If it does not exist, return null.		 */		if (method_exists($this, $event))		{			return call_user_func_array(array($this, $event), $args);		}		else		{			return null;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');JHtml::_('behavior.caption');?><div class="category-list<?php echo $this->pageclass_sfx;?>"><?php$this->subtemplatename = 'articles';echo JLayoutHelper::render('joomla.content.category_default', $this);?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache component helper. * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheHelper{	/**	 * Get a list of filter options for the application clients.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getClientOptions()	{		// Build the filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '0', JText::_('JSITE'));		$options[]	= JHtml::_('select.option', '1', JText::_('JADMINISTRATOR'));		return $options;	}	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_CHECKIN'),			'index.php?option=com_checkin',			$vName == 'com_checkin'		);		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_CLEAR_CACHE'),			'index.php?option=com_cache',			$vName == 'cache'		);		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_PURGE_EXPIRED_CACHE'),			'index.php?option=com_cache&view=purge',			$vName == 'purge'		);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_random_image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$link	= $params->get('link');$folder	= ModRandomImageHelper::getFolder($params);$images	= ModRandomImageHelper::getImages($params, $folder);if (!count($images)){	echo JText::_('MOD_RANDOM_IMAGE_NO_IMAGES');	return;}$image = ModRandomImageHelper::getRandomImage($params, $images);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_random_image', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));// Create a shortcut for params.$params = &$this->item->params;?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_CONTACT_NO_CONTACTS'); ?>	 </p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>	<?php if ($this->params->get('show_pagination_limit')) : ?>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	<?php endif; ?>	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	</fieldset>	<table class="category">		<?php if ($this->params->get('show_headings')) : ?>		<thead><tr>			<th class="item-num">				<?php echo JText::_('JGLOBAL_NUM'); ?>			</th>			<th class="item-title">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_CONTACT_EMAIL_NAME_LABEL', 'a.name', $listDirn, $listOrder); ?>			</th>			<?php if ($this->params->get('show_position_headings')) : ?>			<th class="item-position">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_POSITION', 'a.con_position', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_email_headings')) : ?>			<th class="item-email">				<?php echo JText::_('JGLOBAL_EMAIL'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_telephone_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_TELEPHONE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_mobile_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_MOBILE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_fax_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_FAX'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_suburb_headings')) : ?>			<th class="item-suburb">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_SUBURB', 'a.suburb', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_state_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_STATE', 'a.state', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_country_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_COUNTRY', 'a.country', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $item) : ?>				<tr class="<?php echo ($i % 2) ? "odd" : "even"; ?>">					<td class="item-num">						<?php echo $i; ?>					</td>					<td class="item-title">						<?php if ($this->items[$i]->published == 0) : ?>							<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>						<?php endif; ?>						<a href="<?php echo JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</td>					<?php if ($this->params->get('show_position_headings')) : ?>						<td class="item-position">							<?php echo $item->con_position; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_email_headings')) : ?>						<td class="item-email">							<?php echo $item->email_to; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_telephone_headings')) : ?>						<td class="item-phone">							<?php echo $item->telephone; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_mobile_headings')) : ?>						<td class="item-phone">							<?php echo $item->mobile; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_fax_headings')) : ?>					<td class="item-phone">						<?php echo $item->fax; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_suburb_headings')) : ?>					<td class="item-suburb">						<?php echo $item->suburb; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_state_headings')) : ?>					<td class="item-state">						<?php echo $item->state; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_country_headings')) : ?>					<td class="item-state">						<?php echo $item->country; ?>					</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table></form><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;if (!defined('JPATH_ROOT')){	// Define a string constant for the root directory of the file system in native format	define('JPATH_ROOT', JPath::clean(JPATH_SITE));}/** * A Path handling class * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JPath{	/**	 * Checks if a path's permissions can be changed.	 *	 * @param   string  $path  Path to check.	 *	 * @return  boolean  True if path can have mode changed.	 *	 * @since   11.1	 */	public static function canChmod($path)	{		$perms = fileperms($path);		if ($perms !== false)		{			if (@chmod($path, $perms ^ 0001))			{				@chmod($path, $perms);				return true;			}		}		return false;	}	/**	 * Chmods files and directories recursively to given permissions.	 *	 * @param   string  $path        Root path to begin changing mode [without trailing slash].	 * @param   string  $filemode    Octal representation of the value to change file mode to [null = no change].	 * @param   string  $foldermode  Octal representation of the value to change folder mode to [null = no change].	 *	 * @return  boolean  True if successful [one fail means the whole operation failed].	 *	 * @since   11.1	 */	public static function setPermissions($path, $filemode = '0644', $foldermode = '0755')	{		// Initialise return value		$ret = true;		if (is_dir($path))		{			$dh = opendir($path);			while ($file = readdir($dh))			{				if ($file != '.' && $file != '..')				{					$fullpath = $path . '/' . $file;					if (is_dir($fullpath))					{						if (!self::setPermissions($fullpath, $filemode, $foldermode))						{							$ret = false;						}					}					else					{						if (isset($filemode))						{							if (!@ chmod($fullpath, octdec($filemode)))							{								$ret = false;							}						}					}				}			}			closedir($dh);			if (isset($foldermode))			{				if (!@ chmod($path, octdec($foldermode)))				{					$ret = false;				}			}		}		else		{			if (isset($filemode))			{				$ret = @ chmod($path, octdec($filemode));			}		}		return $ret;	}	/**	 * Get the permissions of the file/folder at a give path.	 *	 * @param   string  $path  The path of a file/folder.	 *	 * @return  string  Filesystem permissions.	 *	 * @since   11.1	 */	public static function getPermissions($path)	{		$path = self::clean($path);		$mode = @ decoct(@ fileperms($path) & 0777);		if (strlen($mode) < 3)		{			return '---------';		}		$parsed_mode = '';		for ($i = 0; $i < 3; $i++)		{			// Read			$parsed_mode .= ($mode{$i} & 04) ? "r" : "-";			// Write			$parsed_mode .= ($mode{$i} & 02) ? "w" : "-";			// Execute			$parsed_mode .= ($mode{$i} & 01) ? "x" : "-";		}		return $parsed_mode;	}	/**	 * Checks for snooping outside of the file system root.	 *	 * @param   string  $path  A file system path to check.	 * @param   string  $ds    Directory separator (optional).	 *	 * @return  string  A cleaned version of the path or exit on error.	 *	 * @since   11.1	 * @throws  Exception	 */	public static function check($path, $ds = DIRECTORY_SEPARATOR)	{		if (strpos($path, '..') !== false)		{			// Don't translate			throw new Exception('JPath::check Use of relative paths not permitted', 20);		}		$path = self::clean($path);		if ((JPATH_ROOT != '') && strpos($path, self::clean(JPATH_ROOT)) !== 0)		{			throw new Exception('JPath::check Snooping out of bounds @ ' . $path, 20);		}		return $path;	}	/**	 * Function to strip additional / or \ in a path name.	 *	 * @param   string  $path  The path to clean.	 * @param   string  $ds    Directory separator (optional).	 *	 * @return  string  The cleaned path.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public static function clean($path, $ds = DIRECTORY_SEPARATOR)	{		if (!is_string($path))		{			throw new UnexpectedValueException('JPath::clean: $path is not a string.');		}		$path = trim($path);		if (empty($path))		{			$path = JPATH_ROOT;		}		// Remove double slashes and backslashes and convert all slashes and backslashes to DIRECTORY_SEPARATOR		// If dealing with a UNC path don't forget to prepend the path with a backslash.		elseif (($ds == '\\') && ($path[0] == '\\' ) && ( $path[1] == '\\' ))		{			$path = "\\" . preg_replace('#[/\\\\]+#', $ds, $path);		}		else		{			$path = preg_replace('#[/\\\\]+#', $ds, $path);		}		return $path;	}	/**	 * Method to determine if script owns the path.	 *	 * @param   string  $path  Path to check ownership.	 *	 * @return  boolean  True if the php script owns the path passed.	 *	 * @since   11.1	 */	public static function isOwner($path)	{		jimport('joomla.filesystem.file');		$tmp = md5(mt_rand());		$ssp = ini_get('session.save_path');		$jtp = JPATH_SITE . '/tmp';		// Try to find a writable directory		$dir = is_writable('/tmp') ? '/tmp' : false;		$dir = (!$dir && is_writable($ssp)) ? $ssp : false;		$dir = (!$dir && is_writable($jtp)) ? $jtp : false;		if ($dir)		{			$test = $dir . '/' . $tmp;			// Create the test file			$blank = '';			JFile::write($test, $blank, false);			// Test ownership			$return = (fileowner($test) == fileowner($path));			// Delete the test file			JFile::delete($test);			return $return;		}		return false;	}	/**	 * Searches the directory paths for a given file.	 *	 * @param   mixed   $paths  An path string or array of path strings to search in	 * @param   string  $file   The file name to look for.	 *	 * @return  mixed   The full path and file name for the target file, or boolean false if the file is not found in any of the paths.	 *	 * @since   11.1	 */	public static function find($paths, $file)	{		// Force to array		if (!is_array($paths) && !($paths instanceof Iterator))		{			settype($paths, 'array');		}		// Start looping through the path set		foreach ($paths as $path)		{			// Get the path to the file			$fullname = $path . '/' . $file;			// Is the path based on a stream?			if (strpos($path, '://') === false)			{				// Not a stream, so do a realpath() to avoid directory				// traversal attempts on the local file system.				// Needed for substr() later				$path = realpath($path);				$fullname = realpath($fullname);			}			/*			 * The substr() check added to make sure that the realpath()			 * results in a directory registered so that			 * non-registered directories are not accessible via directory			 * traversal attempts.			 */			if (file_exists($fullname) && substr($fullname, 0, strlen($path)) == $path)			{				return $fullname;			}		}		// Could not find the file in the set of paths		return false;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div style="padding: 10px;">	<div style="text-align:right">		<a href="javascript: void window.close()">			<?php echo JText::_('COM_MAILTO_CLOSE_WINDOW'); ?> <?php echo JHtml::_('image', 'mailto/close-x.png', null, null, true); ?></a>	</div>	<h2>		<?php echo JText::_('COM_MAILTO_EMAIL_SENT'); ?>	</h2></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Component Controller * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.5 */class ContentController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'articles';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 *	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$view   = $this->input->get('view', 'articles');		$layout = $this->input->get('layout', 'articles');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'article' && $layout == 'edit' && !$this->checkEditId('com_content.edit.article', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_content&view=articles', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/*** @version $Id$* Tools for validing a UTF-8 string is well formed.* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage validation*///--------------------------------------------------------------------/*** Tests a string as to whether it's valid UTF-8 and supported by the* Unicode standard* Note: this function has been modified to simple return true or false* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return boolean true if valid* @see http://hsivonen.iki.fi/php-utf8/* @see utf8_compliant* @package utf8* @subpackage validation*/function utf8_is_valid($str) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                * Rather than trying to resynchronize, we will carry on until the end                * of the sequence and let the later error handling code catch it.                */                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x03) << 24;                $mState = 4;                $mBytes = 5;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 1) << 30;                $mState = 5;                $mBytes = 6;            } else {                /* Current octet is neither in the US-ASCII range nor a legal first                 * octet of a multi-octet sequence.                 */                return FALSE;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    /*                    * Check for illegal sequences and codepoints.                    */                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ||                        (4 < $mBytes) ||                        // From Unicode 3.2, surrogate characters are illegal                        (($mUcs4 & 0xFFFFF800) == 0xD800) ||                        // Codepoints outside the Unicode range are illegal                        ($mUcs4 > 0x10FFFF)) {                        return FALSE;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                /**                *((0xC0 & (*in) != 0x80) && (mState != 0))                * Incomplete multi-octet sequence.                */                return FALSE;            }        }    }    return TRUE;}//--------------------------------------------------------------------/*** Tests whether a string complies as UTF-8. This will be much* faster than utf8_is_valid but will pass five and six octet* UTF-8 sequences, which are not supported by Unicode and* so cannot be displayed correctly in a browser. In other words* it is not as strict as utf8_is_valid but it's faster. If you use* is to validate user input, you place yourself at the risk that* attackers will be able to inject 5 and 6 byte sequences (which* may or may not be a significant risk, depending on what you are* are doing)* @see utf8_is_valid* @see http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#54805* @param string UTF-8 string to check* @return boolean TRUE if string is valid UTF-8* @package utf8* @subpackage validation*/function utf8_compliant($str) {    if ( strlen($str) == 0 ) {        return TRUE;    }    // If even just the first character can be matched, when the /u    // modifier is used, then it's valid UTF-8. If the UTF-8 is somehow    // invalid, nothing at all will match, even if the string contains    // some valid sequences    return (preg_match('/^.{1}/us',$str,$ar) == 1);}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$this->subtemplatename = 'items';echo JLayoutHelper::render('joomla.content.category_default', $this);
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to stristr* Find first occurrence of a string using case insensitive comparison* Note: requires utf8_strtolower* @param string* @param string* @return int* @see http://www.php.net/strcasecmp* @see utf8_strtolower* @package utf8* @subpackage strings*/function utf8_stristr($str, $search) {    if ( strlen($search) == 0 ) {        return $str;    }    $lstr = utf8_strtolower($str);    $lsearch = utf8_strtolower($search);    //JOOMLA SPECIFIC FIX - BEGIN    preg_match('/^(.*)'.preg_quote($lsearch, '/').'/Us',$lstr, $matches);    //JOOMLA SPECIFIC FIX - END    if ( count($matches) == 2 ) {        return substr($str, strlen($matches[1]));    }    return FALSE;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><fieldset>	<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  mod_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="weblinks<?php echo $moduleclass_sfx; ?>"><?php foreach ($list as $item) :	?><li>	<?php	$link = $item->link;	switch ($params->get('target', 3))	{		case 1:			// open in a new window			echo '<a href="'. $link .'" target="_blank" rel="'.$params->get('follow', 'nofollow').'">'.			htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;		case 2:			// open in a popup window			echo "<a href=\"#\" onclick=\"window.open('". $link ."', '', 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=550'); return false\">".				htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;		default:			// open in parent window			echo '<a href="'. $link .'" rel="'.$params->get('follow', 'nofollow').'">'.				htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;	}	?>	<?php if ($params->get('description', 0)) : ?>		<?php echo nl2br($item->description); ?>	<?php endif; ?>	<?php if ($params->get('hits', 0)) : ?>		<?php echo '(' . $item->hits . ' ' . JText::_('MOD_WEBLINKS_HITS') . ')'; ?>	<?php endif; ?></li><?php endforeach; ?></ul>
<?php/** * JGrid class to dynamically generate HTML tables * * @package     Joomla.Platform * @subpackage  Grid * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JGrid class to dynamically generate HTML tables * * @package     Joomla.Platform * @subpackage  Grid * @since       11.3 */class JGrid{	/**	 * Array of columns	 * @var array	 * @since 11.3	 */	protected $columns = array();	/**	 * Current active row	 * @var int	 * @since 11.3	 */	protected $activeRow = 0;	/**	 * Rows of the table (including header and footer rows)	 * @var array	 * @since 11.3	 */	protected $rows = array();	/**	 * Header and Footer row-IDs	 * @var array	 * @since 11.3	 */	protected $specialRows = array('header' => array(), 'footer' => array());	/**	 * Associative array of attributes for the table-tag	 * @var array	 * @since 11.3	 */	protected $options;	/**	 * Constructor for a JGrid object	 *	 * @param   array  $options  Associative array of attributes for the table-tag	 *	 * @since 11.3	 */	public function __construct($options = array())	{		$this->setTableOptions($options, true);	}	/**	 * Magic function to render this object as a table.	 *	 * @return  string	 *	 * @since 11.3	 */	public function __toString()	{		return $this->toString();	}	/**	 * Method to set the attributes for a table-tag	 *	 * @param   array  $options  Associative array of attributes for the table-tag	 * @param   bool   $replace  Replace possibly existing attributes	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setTableOptions($options = array(), $replace = false)	{		if ($replace)		{			$this->options = $options;		}		else		{			$this->options = array_merge($this->options, $options);		}		return $this;	}	/**	 * Get the Attributes of the current table	 *	 * @return  array Associative array of attributes	 *	 * @since 11.3	 */	public function getTableOptions()	{		return $this->options;	}	/**	 * Add new column name to process	 *	 * @param   string  $name  Internal column name	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function addColumn($name)	{		$this->columns[] = $name;		return $this;	}	/**	 * Returns the list of internal columns	 *	 * @return  array List of internal columns	 *	 * @since 11.3	 */	public function getColumns()	{		return $this->columns;	}	/**	 * Delete column by name	 *	 * @param   string  $name  Name of the column to be deleted	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function deleteColumn($name)	{		$index = array_search($name, $this->columns);		if ($index !== false)		{			unset($this->columns[$index]);			$this->columns = array_values($this->columns);		}		return $this;	}	/**	 * Method to set a whole range of columns at once	 * This can be used to re-order the columns, too	 *	 * @param   array  $columns  List of internal column names	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setColumns($columns)	{		$this->columns = array_values($columns);		return $this;	}	/**	 * Adds a row to the table and sets the currently	 * active row to the new row	 *	 * @param   array  $options  Associative array of attributes for the row	 * @param   int    $special  1 for a new row in the header, 2 for a new row in the footer	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function addRow($options = array(), $special = false)	{		$this->rows[]['_row'] = $options;		$this->activeRow = count($this->rows) - 1;		if ($special)		{			if ($special === 1)			{				$this->specialRows['header'][] = $this->activeRow;			}			else			{				$this->specialRows['footer'][] = $this->activeRow;			}		}		return $this;	}	/**	 * Method to get the attributes of the currently active row	 *	 * @return array Associative array of attributes	 *	 * @since 11.3	 */	public function getRowOptions()	{		return $this->rows[$this->activeRow]['_row'];	}	/**	 * Method to set the attributes of the currently active row	 *	 * @param   array  $options  Associative array of attributes	 *	 * @return JGrid This object for chaining	 *	 * @since 11.3	 */	public function setRowOptions($options)	{		$this->rows[$this->activeRow]['_row'] = $options;		return $this;	}	/**	 * Get the currently active row ID	 *	 * @return  int ID of the currently active row	 *	 * @since 11.3	 */	public function getActiveRow()	{		return $this->activeRow;	}	/**	 * Set the currently active row	 *	 * @param   int  $id  ID of the row to be set to current	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setActiveRow($id)	{		$this->activeRow = (int) $id;		return $this;	}	/**	 * Set cell content for a specific column for the	 * currently active row	 *	 * @param   string  $name     Name of the column	 * @param   string  $content  Content for the cell	 * @param   array   $option   Associative array of attributes for the td-element	 * @param   bool    $replace  If false, the content is appended to the current content of the cell	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setRowCell($name, $content, $option = array(), $replace = true)	{		if ($replace || !isset($this->rows[$this->activeRow][$name]))		{			$cell = new stdClass;			$cell->options = $option;			$cell->content = $content;			$this->rows[$this->activeRow][$name] = $cell;		}		else		{			$this->rows[$this->activeRow][$name]->content .= $content;			$this->rows[$this->activeRow][$name]->options = $option;		}		return $this;	}	/**	 * Get all data for a row	 *	 * @param   int  $id  ID of the row to return	 *	 * @return  array Array of columns of a table row	 *	 * @since 11.3	 */	public function getRow($id = false)	{		if ($id === false)		{			$id = $this->activeRow;		}		if (isset($this->rows[(int) $id]))		{			return $this->rows[(int) $id];		}		else		{			return false;		}	}	/**	 * Get the IDs of all rows in the table	 *	 * @param   int  $special  false for the standard rows, 1 for the header rows, 2 for the footer rows	 *	 * @return  array Array of IDs	 *	 * @since 11.3	 */	public function getRows($special = false)	{		if ($special)		{			if ($special === 1)			{				return $this->specialRows['header'];			}			else			{				return $this->specialRows['footer'];			}		}		return array_diff(array_keys($this->rows), array_merge($this->specialRows['header'], $this->specialRows['footer']));	}	/**	 * Delete a row from the object	 *	 * @param   int  $id  ID of the row to be deleted	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function deleteRow($id)	{		unset($this->rows[$id]);		if (in_array($id, $this->specialRows['header']))		{			unset($this->specialRows['header'][array_search($id, $this->specialRows['header'])]);		}		if (in_array($id, $this->specialRows['footer']))		{			unset($this->specialRows['footer'][array_search($id, $this->specialRows['footer'])]);		}		if ($this->activeRow == $id)		{			end($this->rows);			$this->activeRow = key($this->rows);		}		return $this;	}	/**	 * Render the HTML table	 *	 * @return  string The rendered HTML table	 *	 * @since 11.3	 */	public function toString()	{		$output = array();		$output[] = '<table' . $this->renderAttributes($this->getTableOptions()) . '>';		if (count($this->specialRows['header']))		{			$output[] = $this->renderArea($this->specialRows['header'], 'thead', 'th');		}		if (count($this->specialRows['footer']))		{			$output[] = $this->renderArea($this->specialRows['footer'], 'tfoot');		}		$ids = array_diff(array_keys($this->rows), array_merge($this->specialRows['header'], $this->specialRows['footer']));		if (count($ids))		{			$output[] = $this->renderArea($ids);		}		$output[] = '</table>';		return implode('', $output);	}	/**	 * Render an area of the table	 *	 * @param   array   $ids   IDs of the rows to render	 * @param   string  $area  Name of the area to render. Valid: tbody, tfoot, thead	 * @param   string  $cell  Name of the cell to render. Valid: td, th	 *	 * @return string The rendered table area	 *	 * @since 11.3	 */	protected function renderArea($ids, $area = 'tbody', $cell = 'td')	{		$output = array();		$output[] = '<' . $area . ">\n";		foreach ($ids as $id)		{			$output[] = "\t<tr" . $this->renderAttributes($this->rows[$id]['_row']) . ">\n";			foreach ($this->getColumns() as $name)			{				if (isset($this->rows[$id][$name]))				{					$column = $this->rows[$id][$name];					$output[] = "\t\t<" . $cell . $this->renderAttributes($column->options) . '>' . $column->content . '</' . $cell . ">\n";				}			}			$output[] = "\t</tr>\n";		}		$output[] = '</' . $area . '>';		return implode('', $output);	}	/**	 * Renders an HTML attribute from an associative array	 *	 * @param   array  $attributes  Associative array of attributes	 *	 * @return  string The HTML attribute string	 *	 * @since 11.3	 */	protected function renderAttributes($attributes)	{		if (count((array) $attributes) == 0)		{			return '';		}		$return = array();		foreach ($attributes as $key => $option)		{			$return[] = $key . '="' . $option . '"';		}		return ' ' . implode(' ', $return);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQueryMysql extends JDatabaseQueryMysqli{}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Category Tree * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__newsfeeds';		$options['extension'] = 'com_newsfeeds';		$options['statefield'] = 'published';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Callback Log class * * This class allows logging to be handled by a callback function. * This allows unprecedented flexibility in the way logging can be handled. * * @package     Joomla.Platform * @subpackage  Log * @since       12.2 */class JLogLoggerCallback extends JLogLogger{	/**	 * @var    callable  The function to call when an entry is added - should return True on success	 * @since  12.2	 */	protected $callback;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   12.2	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// Throw an exception if there is not a valid callback		if (isset($this->options['callback']) && is_callable($this->options['callback']))		{			$this->callback = $this->options['callback'];		}		else		{			throw new JLogException(JText::_('JLogLoggerCallback created without valid callback function.'));		}	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  boolean  True on success.	 *	 * @since   12.2	 * @throws  LogException	 */	public function addEntry(JLogEntry $entry)	{		// Pass the log entry to the callback function		call_user_func($this->callback, $entry);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	function iFrameHeight()	{		var h = 0;		if (!document.all)		{			h = document.getElementById('blockrandom').contentDocument.height;			document.getElementById('blockrandom').style.height = h + 60 + 'px';		} else if (document.all)		{			h = document.frames('blockrandom').document.body.scrollHeight;			document.all.blockrandom.style.height = h + 20 + 'px';		}	}</script><iframe <?php echo $load; ?>	id="blockrandom"	name="<?php echo $target ?>"	src="<?php echo $url; ?>"	width="<?php echo $width ?>"	height="<?php echo $height ?>"	scrolling="<?php echo $scroll ?>"	frameborder="<?php echo $frameborder?>"	class="wrapper<?php echo $moduleclass_sfx ?>" >	<?php echo JText::_('MOD_WRAPPER_NO_IFRAMES'); ?></iframe>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQuerySqlazure extends JDatabaseQuerySqlsrv{	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $name_quotes = '';}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Component Category Tree * * @static * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.6 */class WeblinksCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__weblinks';		$options['extension'] = 'com_weblinks';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Password Hashing Interface * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.2 */interface JCryptPassword{	const BLOWFISH = '$2y$';	const JOOMLA = 'Joomla';	const PBKDF = '$pbkdf$';	const MD5 = '$1$';	/**	 * Creates a password hash	 *	 * @param   string  $password  The password to hash.	 * @param   string  $prefix    The prefix of the hashing function.	 *	 * @return  string  The hashed password.	 *	 * @since   12.2	 */	public function create($password, $prefix = '$2a$');	/**	 * Verifies a password hash	 *	 * @param   string  $password  The password to verify.	 * @param   string  $hash      The password hash to check.	 *	 * @return  boolean  True if the password is valid, false otherwise.	 *	 * @since   12.2	 */	public function verify($password, $hash);}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the module helper classes.if (!class_exists('ModMenuHelper')){	require __DIR__ . '/helper.php';}if (!class_exists('JAdminCssMenu')){	require __DIR__ . '/menu.php';}$lang    = JFactory::getLanguage();$user    = JFactory::getUser();$input   = JFactory::getApplication()->input;$menu    = new JAdminCSSMenu;$enabled = $input->getBool('hidemainmenu') ? false : true;// Render the module layoutrequire JModuleHelper::getLayoutPath('mod_menu', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Reset controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerReset extends UsersController{	/**	 * Method to request a password reset.	 *	 * @since   1.6	 */	public function request()	{		// Check the request token.		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Reset', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Submit the password reset request.		$return	= $model->processResetRequest($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_RESET_REQUEST_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset'.$itemid;			// Go back to the request form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// The request failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset'.$itemid;			// Go back to the request form.			$message = JText::sprintf('COM_USERS_RESET_REQUEST_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// The request succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=confirm'.$itemid;			// Proceed to step two.			$this->setRedirect(JRoute::_($route, false));			return true;		}	}	/**	 * Method to confirm the password request.	 *	 * @access	public	 * @since   1.6	 */	public function confirm()	{		// Check the request token.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Reset', 'UsersModel');		$data  = $this->input->get('jform', array(), 'array');		// Confirm the password reset request.		$return	= $model->processResetConfirm($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_RESET_CONFIRM_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=confirm'.$itemid;			// Go back to the confirm form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// Confirm failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=confirm'.$itemid;			// Go back to the confirm form.			$message = JText::sprintf('COM_USERS_RESET_CONFIRM_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// Confirm succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=complete'.$itemid;			// Proceed to step three.			$this->setRedirect(JRoute::_($route, false));			return true;		}	}	/**	 * Method to complete the password reset process.	 *	 * @since   1.6	 */	public function complete()	{		// Check for request forgeries		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Reset', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Complete the password reset request.		$return	= $model->processResetComplete($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_RESET_COMPLETE_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=complete'.$itemid;			// Go back to the complete form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// Complete failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=complete'.$itemid;			// Go back to the complete form.			$message = JText::sprintf('COM_USERS_RESET_COMPLETE_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// Complete succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getLoginRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=login'.$itemid;			// Proceed to the login form.			$message = JText::_('COM_USERS_RESET_COMPLETE_SUCCESS');			$this->setRedirect(JRoute::_($route, false), $message);			return true;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Overrides Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesControllerOverrides extends JControllerAdmin{	/**	 * The prefix to use with controller messages	 *	 * @var		string	 * @since	2.5	 */	protected $text_prefix = 'COM_LANGUAGES_VIEW_OVERRIDES';	/**	 * Method for deleting one or more overrides	 *	 * @return  void	 *	 * @since		2.5	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));		// Get items to dlete from the request		$cid = $this->input->get('cid', array(), 'array');		if (!is_array($cid) || count($cid) < 1)		{			$this->setMessage(JText::_($this->text_prefix.'_NO_ITEM_SELECTED'), 'warning');		}		else		{			// Get the model			$model = $this->getModel('overrides');			// Remove the items			if ($model->delete($cid))			{				$this->setMessage(JText::plural($this->text_prefix.'_N_ITEMS_DELETED', count($cid)));			}			else			{				$this->setMessage($model->getError());			}		}		$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');/** * Weblinks Component Model for a Weblink record * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksModelWeblink extends JModelItem{	/**	 * Model context string.	 *	 * @access	protected	 * @var		string	 */	protected $_context = 'com_weblinks.weblink';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication();		$params	= $app->getParams();		// Load the object state.		$id	= $app->input->getInt('id');		$this->setState('weblink.id', $id);		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get an object.	 *	 * @param   integer	The id of the object to get.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($id = null)	{		if ($this->_item === null)		{			$this->_item = false;			if (empty($id))			{				$id = $this->getState('weblink.id');			}			// Get a level row instance.			$table = JTable::getInstance('Weblink', 'WeblinksTable');			// Attempt to load the row.			if ($table->load($id))			{				// Check published state.				if ($published = $this->getState('filter.published'))				{					if ($table->state != $published)					{						return $this->_item;					}				}				// Convert the JTable to a clean JObject.				$properties = $table->getProperties(1);				$this->_item = JArrayHelper::toObject($properties, 'JObject');			}			elseif ($error = $table->getError())			{				$this->setError($error);			}		}		return $this->_item;	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param	type	The table type to instantiate	 * @param	string	A prefix for the table class name. Optional.	 * @param	array	Configuration array for model. Optional.	 * @return	JTable	A database object	 * @since	1.6	 */	public function getTable($type = 'Weblink', $prefix = 'WeblinksTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to increment the hit counter for the weblink	 *	 * @param   integer  $id  Optional ID of the weblink.	 *	 * @return  boolean  True on success	 */	public function hit($id = null)	{		if (empty($id))		{			$id = $this->getState('weblink.id');		}		$weblink = $this->getTable('Weblink', 'WeblinksTable');		return $weblink->hit($id);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note. It is important to remove spaces between elements.?><?php // The menu class is deprecated. Use nav instead. ?><ul class="nav menu<?php echo $class_sfx;?>"<?php	$tag = '';	if ($params->get('tag_id') != null)	{		$tag = $params->get('tag_id').'';		echo ' id="'.$tag.'"';	}?>><?phpforeach ($list as $i => &$item) :	$class = 'item-'.$item->id;	if ($item->id == $active_id)	{		$class .= ' current';	}	if (in_array($item->id, $path))	{		$class .= ' active';	}	elseif ($item->type == 'alias')	{		$aliasToId = $item->params->get('aliasoptions');		if (count($path) > 0 && $aliasToId == $path[count($path) - 1])		{			$class .= ' active';		}		elseif (in_array($aliasToId, $path))		{			$class .= ' alias-parent-active';		}	}	if ($item->type == 'separator')	{		$class .= ' divider';	}	if ($item->deeper)	{		$class .= ' deeper';	}	if ($item->parent)	{		$class .= ' parent';	}	if (!empty($class))	{		$class = ' class="'.trim($class) .'"';	}	echo '<li'.$class.'>';	// Render the menu item.	switch ($item->type) :		case 'separator':		case 'url':		case 'component':		case 'heading':			require JModuleHelper::getLayoutPath('mod_menu', 'default_'.$item->type);			break;		default:			require JModuleHelper::getLayoutPath('mod_menu', 'default_url');			break;	endswitch;	// The next item is deeper.	if ($item->deeper)	{		echo '<ul class="nav-child unstyled small">';	}	// The next item is shallower.	elseif ($item->shallower)	{		echo '</li>';		echo str_repeat('</ul></li>', $item->level_diff);	}	// The next item is on the same level.	else {		echo '</li>';	}endforeach;?></ul>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_content/helpers/route.php';?><?php if ($this->params->get('show_articles')) : ?><div class="contact-articles">	<ul class="nav nav-tabs nav-stacked">		<?php foreach ($this->item->articles as $article) :	?>			<li>				<?php echo JHtml::_('link', JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catslug)), htmlspecialchars($article->title, ENT_COMPAT, 'UTF-8')); ?>			</li>		<?php endforeach; ?>	</ul></div><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorMysqli extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return mysqli_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return mysqli_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		mysqli_free_result($this->cursor);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="submenu-box">	<div class="submenu-box">		<div class="submenu-pad">			<ul id="submenu" class="information nav nav-list">				<li>					<a href="#" onclick="return false;" id="site" class="active">						<?php echo JText::_('COM_ADMIN_SYSTEM_INFORMATION'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="phpsettings">						<?php echo JText::_('COM_ADMIN_PHP_SETTINGS'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="config">						<?php echo JText::_('COM_ADMIN_CONFIGURATION_FILE'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="directory">						<?php echo JText::_('COM_ADMIN_DIRECTORY_PERMISSIONS'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="phpinfo">						<?php echo JText::_('COM_ADMIN_PHP_INFORMATION'); ?></a>				</li>			</ul>			<div class="clr"></div>		</div>	</div>	<div class="clr"></div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Driver Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */abstract class JDatabaseIterator implements Countable, Iterator{	/**	 * The database cursor.	 *	 * @var    mixed	 * @since  12.1	 */	protected $cursor;	/**	 * The class of object to create.	 *	 * @var    string	 * @since  12.1	 */	protected $class;	/**	 * The name of the column to use for the key of the database record.	 *	 * @var    mixed	 * @since  12.1	 */	private $_column;	/**	 * The current database record.	 *	 * @var    mixed	 * @since  12.1	 */	private $_current;	/**	 * A numeric or string key for the current database record.	 *	 * @var    scalar	 * @since  12.1	 */	private $_key;	/**	 * The number of fetched records.	 *	 * @var    integer	 * @since  12.1	 */	private $_fetched = 0;	/**	 * Database iterator constructor.	 *	 * @param   mixed   $cursor  The database cursor.	 * @param   string  $column  An option column to use as the iterator key.	 * @param   string  $class   The class of object that is returned.	 *	 * @throws  InvalidArgumentException	 */	public function __construct($cursor, $column = null, $class = 'stdClass')	{		if (!class_exists($class))		{			throw new InvalidArgumentException(sprintf('new %s(*%s*, cursor)', get_class($this), gettype($class)));		}		$this->cursor = $cursor;		$this->class = $class;		$this->_column = $column;		$this->_fetched = 0;		$this->next();	}	/**	 * Database iterator destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		if ($this->cursor)		{			$this->freeResult($this->cursor);		}	}	/**	 * The current element in the iterator.	 *	 * @return  object	 *	 * @see     Iterator::current()	 * @since   12.1	 */	public function current()	{		return $this->_current;	}	/**	 * The key of the current element in the iterator.	 *	 * @return  scalar	 *	 * @see     Iterator::key()	 * @since   12.1	 */	public function key()	{		return $this->_key;	}	/**	 * Moves forward to the next result from the SQL query.	 *	 * @return  void	 *	 * @see     Iterator::next()	 * @since   12.1	 */	public function next()	{		// Set the default key as being the number of fetched object		$this->_key = $this->_fetched;		// Try to get an object		$this->_current = $this->fetchObject();		// If an object has been found		if ($this->_current)		{			// Set the key as being the indexed column (if it exists)			if (isset($this->_current->{$this->_column}))			{				$this->_key = $this->_current->{$this->_column};			}			// Update the number of fetched object			$this->_fetched++;		}	}	/**	 * Rewinds the iterator.	 *	 * This iterator cannot be rewound.	 *	 * @return  void	 *	 * @see     Iterator::rewind()	 * @since   12.1	 */	public function rewind()	{	}	/**	 * Checks if the current position of the iterator is valid.	 *	 * @return  boolean	 *	 * @see     Iterator::valid()	 * @since   12.1	 */	public function valid()	{		return (boolean) $this->_current;	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	abstract protected function fetchObject();	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	abstract protected function freeResult();}
<?php/** * @package     Joomla.Libraries * @subpackage  Captcha * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Joomla! Captcha base object * * @abstract * @package     Joomla.Libraries * @subpackage  Captcha * @since       2.5 */class JCaptcha extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  2.5	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  2.5	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  2.5	 */	protected $_methods = array();	/**	 * Captcha Plugin object	 *	 * @var	   JPlugin	 * @since  2.5	 */	private $_captcha;	/**	 * Editor Plugin name	 *	 * @var string	 * @since  2.5	 */	private $_name;	/**	 * Array of instances of this class.	 *	 * @var	array	 */	private static $_instances = array();	/**	 * Class constructor.	 *	 * @param   string  $captcha  The editor to use.	 * @param   array   $options  Associative array of options.	 *	 * @since 2.5	 */	public function __construct($captcha, $options)	{		$this->_name = $captcha;		$this->_load($options);	}	/**	 * Returns the global Captcha object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $captcha  The plugin to use.	 * @param   array   $options  Associative array of options.	 *	 * @return  JCaptcha  Instance of this class.	 *	 * @since 2.5	 */	public static function getInstance($captcha, array $options = array())	{		$signature = md5(serialize(array($captcha, $options)));		if (empty(self::$_instances[$signature]))		{			try			{				self::$_instances[$signature] = new JCaptcha($captcha, $options);			}			catch (RuntimeException $e)			{				JFactory::getApplication()->enqueueMessage($e->getMessage(), 'error');				return null;			}		}		return self::$_instances[$signature];	}	/**	 * Fire the onInit event to initialise the captcha plug-in.	 *	 * @param   string  $id  The id of the field.	 *	 * @return  boolean  True on success	 *	 * @since	2.5	 */	public function initialise($id)	{		$args['id']    = $id;		$args['event'] = 'onInit';		try		{			$this->_captcha->update($args);		}		catch (Exception $e)		{			JFactory::getApplication()->enqueueMessage($e->getMessage(), 'error');			return false;		}		return true;	}	/**	 * Get the HTML for the captcha.	 *	 * @param   string  $name   The control name.	 * @param   string  $id     The id for the control.	 * @param   string  $class  Value for the HTML class attribute	 *	 * @return  mixed  The return value of the function "onDisplay" of the selected Plugin.	 *	 * @since   2.5	 */	public function display($name, $id, $class = '')	{		// Check if captcha is already loaded.		if (is_null($this->_captcha))		{			return;		}		// Initialise the Captcha.		if (!$this->initialise($id))		{			return;		}		$args['name']  = $name;		$args['id']    = $id ? $id : $name;		$args['class'] = $class ? 'class="' . $class . '"' : '';		$args['event'] = 'onDisplay';		return $this->_captcha->update($args);	}	/**	 * Checks if the answer is correct.	 *	 * @param   string  $code  The answer.	 *	 * @return  mixed   The return value of the function "onCheckAnswer" of the selected Plugin.	 *	 * @since	2.5	 */	public function checkAnswer($code)	{		// Check if captcha is already loaded		if (is_null(($this->_captcha)))		{			return;		}		$args['code']  = $code;		$args['event'] = 'onCheckAnswer';		return $this->_captcha->update($args);	}	/**	 * Load the Captcha plug-in.	 *	 * @param   array  $options  Associative array of options.	 *	 * @return  void	 *	 * @since	2.5	 * @throws  RuntimeException	 */	private function _load(array $options = array())	{		// Build the path to the needed captcha plugin		$name = JFilterInput::getInstance()->clean($this->_name, 'cmd');		$path = JPATH_PLUGINS . '/captcha/' . $name . '/' . $name . '.php';		if (!is_file($path))		{			throw new RuntimeException(JText::sprintf('JLIB_CAPTCHA_ERROR_PLUGIN_NOT_FOUND', $name));		}		// Require plugin file		require_once $path;		// Get the plugin		$plugin = JPluginHelper::getPlugin('captcha', $this->_name);		if (!$plugin)		{			throw new RuntimeException(JText::sprintf('JLIB_CAPTCHA_ERROR_PLUGIN_NOT_FOUND', $name));		}		$params = new JRegistry($plugin->params);		$plugin->params = $params;		// Build captcha plugin classname		$name = 'plgCaptcha' . $this->_name;		$this->_captcha = new $name($this, (array) $plugin, $options);	}	/**	 * Get the state of the JEditor object	 *	 * @return  mixed  The state of the object.	 *	 * @since   2.5	 */	public function getState()	{		return $this->_state;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   2.5	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEditor))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   2.5	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class JHtmlMessages{	/**	 * @param   int $value	The state value	 * @param   int $i	 */	public static function state($value = 0, $i, $canChange)	{		// Array of image, task, title, action.		$states	= array(			-2	=> array('trash.png',		'messages.unpublish',	'JTRASHED',				'COM_MESSAGES_MARK_AS_UNREAD'),			1	=> array('tick.png',		'messages.unpublish',	'COM_MESSAGES_OPTION_READ',		'COM_MESSAGES_MARK_AS_UNREAD'),			0	=> array('publish_x.png',	'messages.publish',		'COM_MESSAGES_OPTION_UNREAD',	'COM_MESSAGES_MARK_AS_READ')		);		$state	= JArrayHelper::getValue($states, (int) $value, $states[0]);		$html	= JHtml::_('image', 'admin/'.$state[0], JText::_($state[2]), null, true);		if ($canChange)		{			$html = '<a href="#" onclick="return listItemTask(\'cb'.$i.'\',\''.$state[1].'\')" title="'.JText::_($state[3]).'">'					.$html.'</a>';		}		return $html;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');jimport('joomla.html.html.bootstrap');?><div class="contact<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif; ?>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<div class="page-header">			<h2>				<?php if ($this->item->published == 0) : ?>					<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>				<?php endif; ?>				<span class="contact-name"><?php echo $this->contact->name; ?></span>			</h2>		</div>	<?php endif;  ?>	<?php if ($this->params->get('show_contact_category') == 'show_no_link') : ?>		<h3>			<span class="contact-category"><?php echo $this->contact->category_title; ?></span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_category') == 'show_with_link') : ?>		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid); ?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_list') && count($this->contacts) > 1) : ?>		<form action="#" method="get" name="selectForm" id="selectForm">			<?php echo JText::_('COM_CONTACT_SELECT_CONTACT'); ?>			<?php echo JHtml::_('select.genericlist', $this->contacts, 'id', 'class="inputbox" onchange="document.location.href = this.value"', 'link', 'name', $this->contact->link);?>		</form>	<?php endif; ?>	<?php if ($this->params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?> 	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.startAccordion', 'slide-contact', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_DETAILS'), 'basic-details'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic-details', JText::_('COM_CONTACT_DETAILS', true)); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'plain'):?>		<?php  echo '<h3>'. JText::_('COM_CONTACT_DETAILS').'</h3>';  ?>	<?php endif; ?>	<?php if ($this->contact->image && $this->params->get('show_image')) : ?>		<div class="thumbnail pull-right">			<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle')); ?>		</div>	<?php endif; ?>	<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>		<dl class="contact-position dl-horizontal">			<dd>				<?php echo $this->contact->con_position; ?>			</dd>		</dl>	<?php endif; ?>	<?php echo $this->loadTemplate('address'); ?>	<?php if ($this->params->get('allow_vcard')) :	?>		<?php echo JText::_('COM_CONTACT_DOWNLOAD_INFORMATION_AS');?>		<a href="<?php echo JRoute::_('index.php?option=com_contact&amp;view=contact&amp;id='.$this->contact->id . '&amp;format=vcf'); ?>">		<?php echo JText::_('COM_CONTACT_VCARD');?></a>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endSlide'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_email_form') && ($this->contact->email_to || $this->contact->user_id)) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_EMAIL_FORM'), 'display-form'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-form', JText::_('COM_CONTACT_EMAIL_FORM', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_EMAIL_FORM').'</h3>';  ?>		<?php endif; ?>		<?php  echo $this->loadTemplate('form');  ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>			<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_links')) : ?>		<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_articles') && $this->contact->user_id && $this->contact->articles) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('JGLOBAL_ARTICLES'), 'display-articles'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-articles', JText::_('JGLOBAL_ARTICLES', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('JGLOBAL_ARTICLES').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('articles'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_profile') && $this->contact->user_id && JPluginHelper::isEnabled('user', 'profile')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_PROFILE'), 'display-profile'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-profile', JText::_('COM_CONTACT_PROFILE', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_PROFILE').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('profile'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->contact->misc && $this->params->get('show_misc')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_OTHER_INFORMATION'), 'display-misc'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-misc', JText::_('COM_CONTACT_OTHER_INFORMATION', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_OTHER_INFORMATION').'</h3>';  ?>		<?php endif; ?>		<div class="contact-miscinfo">			<dl class="dl-horizontal">				<dt>					<span class="<?php echo $this->params->get('marker_class'); ?>">					<?php echo $this->params->get('marker_misc'); ?>					</span>				</dt>				<dd>					<span class="contact-misc">						<?php echo $this->contact->misc; ?>					</span>				</dd>			</dl>		</div>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endAccordion'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	<?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');?><section class="blog-featured<?php echo $this->pageclass_sfx;?>"><?php if ( $this->params->get('show_page_heading') != 0) : ?>	<h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1><?php endif; ?><?php $leadingcount = 0; ?><?php if (!empty($this->lead_items)) : ?><div class="items-leading">	<?php foreach ($this->lead_items as &$item) : ?>		<article class="leading-<?php echo $leadingcount; ?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?>">			<?php				$this->item = &$item;				echo $this->loadTemplate('item');			?>		</article>		<?php			$leadingcount++;		?>	<?php endforeach; ?></div><?php endif; ?><?php	$introcount = (count($this->intro_items));	$counter = 0;?><?php if (!empty($this->intro_items)) : ?>	<?php foreach ($this->intro_items as $key => &$item) : ?>	<?php		$key = ($key - $leadingcount) + 1;		$rowcount = (((int) $key - 1) % (int) $this->columns) + 1;		$row = $counter / $this->columns;		if ($rowcount == 1) : ?>			<div class="items-row cols-<?php echo (int) $this->columns;?> <?php echo 'row-'.$row; ?>">		<?php endif; ?>		<article class="item column-<?php echo $rowcount;?><?php echo $item->state == 0 ? ' system-unpublished"' : null; ?>">			<?php					$this->item = &$item;					echo $this->loadTemplate('item');			?>		</article>		<?php $counter++; ?>			<?php if (($rowcount == $this->columns) or ($counter == $introcount)) : ?>				<span class="row-separator"></span>				</div>			<?php endif; ?>	<?php endforeach; ?><?php endif; ?><?php if (!empty($this->link_items)) : ?>	<div class="items-more">	<?php echo $this->loadTemplate('links'); ?>	</div><?php endif; ?><?php if ($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2 && $this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>	</div><?php endif; ?></section>
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Search Component Search Model * * @package     Joomla.Site * @subpackage  com_search * @since       1.5 */class SearchModelSearch extends JModelLegacy{	/**	 * Search data array	 *	 * @var array	 */	protected $_data = null;	/**	 * Search total	 *	 * @var integer	 */	protected $_total = null;	/**	 * Search areas	 *	 * @var integer	 */	protected  $_areas = null;	/**	 * Pagination object	 *	 * @var object	 */	protected $_pagination = null;	/**	 * Constructor	 *	 * @since 1.5	 */	public function __construct()	{		parent::__construct();		//Get configuration		$app    = JFactory::getApplication();		$config = JFactory::getConfig();		// Get the pagination request variables		$this->setState('limit', $app->getUserStateFromRequest('com_search.limit', 'limit', $config->get('list_limit'), 'uint'));		$this->setState('limitstart', $app->input->get('limitstart', 0, 'uint'));		// Set the search parameters		$keyword  = urldecode($app->input->getString('searchword'));		$match    = $app->input->get('searchphrase', 'all', 'word');		$ordering = $app->input->get('ordering', 'newest', 'word');		$this->setSearch($keyword, $match, $ordering);		//Set the search areas		$areas = $app->input->get('areas');		$this->setAreas($areas);	}	/**	 * Method to set the search parameters	 *	 * @access	public	 * @param string search string	 * @param string mathcing option, exact|any|all	 * @param string ordering option, newest|oldest|popular|alpha|category	 */	public function setSearch($keyword, $match = 'all', $ordering = 'newest')	{		if (isset($keyword))		{			$this->setState('origkeyword', $keyword);			if ($match !== 'exact')			{				$keyword = preg_replace('#\xE3\x80\x80#s', ' ', $keyword);			}			$this->setState('keyword', $keyword);		}		if (isset($match))		{			$this->setState('match', $match);		}		if (isset($ordering))		{			$this->setState('ordering', $ordering);		}	}	/**	 * Method to set the search areas	 *	 * @access	public	 * @param   array  Active areas	 * @param   array  Search areas	 */	public function setAreas($active = array(), $search = array())	{		$this->_areas['active'] = $active;		$this->_areas['search'] = $search;	}	/**	 * Method to get weblink item data for the category	 *	 * @access public	 * @return array	 */	public function getData()	{		// Lets load the content if it doesn't already exist		if (empty($this->_data))		{			$areas = $this->getAreas();			JPluginHelper::importPlugin('search');			$dispatcher = JEventDispatcher::getInstance();			$results = $dispatcher->trigger('onContentSearch', array(				$this->getState('keyword'),				$this->getState('match'),				$this->getState('ordering'),				$areas['active'])			);			$rows = array();			foreach ($results as $result)			{				$rows = array_merge((array) $rows, (array) $result);			}			$this->_total	= count($rows);			if ($this->getState('limit') > 0)			{				$this->_data	= array_splice($rows, $this->getState('limitstart'), $this->getState('limit'));			} else {				$this->_data = $rows;			}		}		return $this->_data;	}	/**	 * Method to get the total number of weblink items for the category	 *	 * @access public	 * @return  integer	 */	public function getTotal()	{		return $this->_total;	}	/**	 * Method to get a pagination object of the weblink items for the category	 *	 * @access public	 * @return  integer	 */	public function getPagination()	{		// Lets load the content if it doesn't already exist		if (empty($this->_pagination))		{			$this->_pagination = new JPagination($this->getTotal(), $this->getState('limitstart'), $this->getState('limit'));		}		return $this->_pagination;	}	/**	 * Method to get the search areas	 *	 * @since 1.5	 */	public function getAreas()	{		// Load the Category data		if (empty($this->_areas['search']))		{			$areas = array();			JPluginHelper::importPlugin('search');			$dispatcher = JEventDispatcher::getInstance();			$searchareas = $dispatcher->trigger('onContentSearchAreas');			foreach ($searchareas as $area)			{				if (is_array($area))				{					$areas = array_merge($areas, $area);				}			}			$this->_areas['search'] = $areas;		}		return $this->_areas;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cpanel * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// No access check.$controller	= JControllerLegacy::getInstance('Cpanel');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  mod_syndicate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_syndicate * * @package     Joomla.Site * @subpackage  mod_syndicate * @since       1.5 */class ModSyndicateHelper{	public static function getLink(&$params)	{		$document = JFactory::getDocument();		foreach ($document->_links as $link => $value)		{			$value = JArrayHelper::toString($value);			if (strpos($value, 'application/'.$params->get('format').'+xml'))			{				return $link;			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Weblink Controller * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			$cachable	If true, the view output will be cached	 * @param   array  $urlparams	An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/weblinks.php';		$view   = $this->input->get('view', 'weblinks');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'weblink' && $layout == 'edit' && !$this->checkEditId('com_weblinks.edit.weblink', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_weblinks&view=weblinks', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Item View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewItem extends JViewLegacy{	protected $form;	protected $item;	protected $modules;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->modules	= $this->get('Modules');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$input = JFactory::getApplication()->input;		$input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		$canDo		= MenusHelper::getActions($this->state->get('filter.parent_id'));		JToolbarHelper::title(JText::_($isNew ? 'COM_MENUS_VIEW_NEW_ITEM_TITLE' : 'COM_MENUS_VIEW_EDIT_ITEM_TITLE'), 'menu-add');		// If a new item, can save the item.  Allow users with edit permissions to apply changes to prevent returning to grid.		if ($isNew && $canDo->get('core.create'))		{			if ($canDo->get('core.edit'))			{				JToolbarHelper::apply('item.apply');			}			JToolbarHelper::save('item.save');		}		// If not checked out, can save the item.		if (!$isNew && !$checkedOut && $canDo->get('core.edit'))		{			JToolbarHelper::apply('item.apply');			JToolbarHelper::save('item.save');		}		// If the user can create new items, allow them to see Save & New		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('item.save2new');		}		// If an existing item, can save to a copy only if we have create rights.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('item.save2copy');		}		if ($isNew)		{			JToolbarHelper::cancel('item.cancel');		}		else		{			JToolbarHelper::cancel('item.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		// Get the help information for the menu item.		$lang = JFactory::getLanguage();		$help = $this->get('Help');		if ($lang->hasKey($help->url))		{			$debug = $lang->setDebug(false);			$url = JText::_($help->url);			$lang->setDebug($debug);		}		else		{			$url = $help->url;		}		JToolbarHelper::help($help->key, $help->local, $url);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the language for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSetlanguage extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Very crude workaround to give an error message when JSON is disabled		if (!function_exists('json_encode') || !function_exists('json_decode'))		{			$app->setHeader('status', 500);			$app->setHeader('Content-Type', 'application/json; charset=utf-8');			$app->sendHeaders();			echo '{"token":"' . JSession::getFormToken(true) . '","lang":"' . JFactory::getLanguage()->getTag()				. '","error":true,"header":"' . JText::_('INSTL_HEADER_ERROR') . '","message":"' . JText::_('INSTL_WARNJSON') . '"}';			$app->close();		}		// Check for potentially unwritable session		$session = JFactory::getSession();		if ($session->isNew())		{			$this->sendResponse(new Exception(JText::_('INSTL_COOKIES_NOT_ENABLED'), 500));		}		// Get the setup model.		$model = new InstallationModelSetup;		// Get the posted values from the request and validate them.		$data = $this->input->post->get('jform', array(), 'array');		$return	= $model->validate($data, 'preinstall');		$r = new stdClass;		// Check for validation errors.		if ($return === false)		{			/*			 * The validate method enqueued all messages for us, so we just need to			 * redirect back to the site setup screen.			 */			$r->view = $this->input->getWord('view', 'site');			$app->sendJsonResponse($r);		}		// Store the options in the session.		$model->storeOptions($return);		// Setup language		$language = JFactory::getLanguage();		$language->setLanguage($return['language']);		// Redirect to the page.		$r->view = $this->input->getWord('view', 'site');		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Custom session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @todo        When dropping compatibility with PHP 5.3 use the SessionHandlerInterface and the SessionHandler class * @since       11.1 */abstract class JSessionStorage{	/**	 * @var    array  JSessionStorage instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		$this->register($options);	}	/**	 * Returns a session storage handler object, only creating it if it doesn't already exist.	 *	 * @param   string  $name     The session store to instantiate	 * @param   array   $options  Array of options	 *	 * @return  JSessionStorage	 *	 * @since   11.1	 */	public static function getInstance($name = 'none', $options = array())	{		$name = strtolower(JFilterInput::getInstance()->clean($name, 'word'));		if (empty(self::$instances[$name]))		{			$class = 'JSessionStorage' . ucfirst($name);			if (!class_exists($class))			{				$path = __DIR__ . '/storage/' . $name . '.php';				if (file_exists($path))				{					require_once $path;				}				else				{					// No attempt to die gracefully here, as it tries to close the non-existing session					jexit('Unable to load session storage class: ' . $name);				}			}			self::$instances[$name] = new $class($options);		}		return self::$instances[$name];	}	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   11.1	 */	public function register()	{		// Use this object as the session handler		session_set_save_handler(			array($this, 'open'), array($this, 'close'), array($this, 'read'), array($this, 'write'),			array($this, 'destroy'), array($this, 'gc')		);	}	/**	 * Open the SessionHandler backend.	 *	 * @param   string  $save_path     The path to the session object.	 * @param   string  $session_name  The name of the session.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function open($save_path, $session_name)	{		return true;	}	/**	 * Close the SessionHandler backend.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function close()	{		return true;	}	/**	 * Read the data for a particular session identifier from the	 * SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		return;	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id            The session identifier.	 * @param   string  $session_data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $session_data)	{		return true;	}	/**	 * Destroy the data for a particular session identifier in the	 * SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		return true;	}	/**	 * Garbage collect stale sessions from the SessionHandler backend.	 *	 * @param   integer  $maxlifetime  The maximum age of a session.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc($maxlifetime = null)	{		return true;	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return true;	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 * @deprecated  12.3 Use JSessionStorage::isSupported() instead.	 */	public static function test()	{		JLog::add('JSessionStorage::test() is deprecated. Use JSessionStorage::isSupported() instead.', JLog::WARNING, 'deprecated');		return static::isSupported();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to model a Web Client. * * @property-read  integer  $platform        The detected platform on which the web client runs. * @property-read  boolean  $mobile          True if the web client is a mobile device. * @property-read  integer  $engine          The detected rendering engine used by the web client. * @property-read  integer  $browser         The detected browser used by the web client. * @property-read  string   $browserVersion  The detected browser version used by the web client. * @property-read  array    $languages       The priority order detected accepted languages for the client. * @property-read  array    $encodings       The priority order detected accepted encodings for the client. * @property-read  string   $userAgent       The web client's user agent string. * @property-read  string   $acceptEncoding  The web client's accepted encoding string. * @property-read  string   $acceptLanguage  The web client's accepted languages string. * @property-read  array    $detection       An array of flags determining whether or not a detection routine has been run. * @property-read  boolean  $robot           True if the web client is a robot * * @package     Joomla.Platform * @subpackage  Application * @since       12.1 */class JApplicationWebClient{	const WINDOWS = 1;	const WINDOWS_PHONE = 2;	const WINDOWS_CE = 3;	const IPHONE = 4;	const IPAD = 5;	const IPOD = 6;	const MAC = 7;	const BLACKBERRY = 8;	const ANDROID = 9;	const LINUX = 10;	const TRIDENT = 11;	const WEBKIT = 12;	const GECKO = 13;	const PRESTO = 14;	const KHTML = 15;	const AMAYA = 16;	const IE = 17;	const FIREFOX = 18;	const CHROME = 19;	const SAFARI = 20;	const OPERA = 21;	const ANDROIDTABLET = 22;	/**	 * @var    integer  The detected platform on which the web client runs.	 * @since  12.1	 */	protected $platform;	/**	 * @var    boolean  True if the web client is a mobile device.	 * @since  12.1	 */	protected $mobile = false;	/**	 * @var    integer  The detected rendering engine used by the web client.	 * @since  12.1	 */	protected $engine;	/**	 * @var    integer  The detected browser used by the web client.	 * @since  12.1	 */	protected $browser;	/**	 * @var    string  The detected browser version used by the web client.	 * @since  12.1	 */	protected $browserVersion;	/**	 * @var    array  The priority order detected accepted languages for the client.	 * @since  12.1	 */	protected $languages = array();	/**	 * @var    array  The priority order detected accepted encodings for the client.	 * @since  12.1	 */	protected $encodings = array();	/**	 * @var    string  The web client's user agent string.	 * @since  12.1	 */	protected $userAgent;	/**	 * @var    string  The web client's accepted encoding string.	 * @since  12.1	 */	protected $acceptEncoding;	/**	 * @var    string  The web client's accepted languages string.	 * @since  12.1	 */	protected $acceptLanguage;	/**	 * @var    boolean  True if the web client is a robot.	 * @since  12.3	 */	protected $robot = false;	/**	 * @var    array  An array of flags determining whether or not a detection routine has been run.	 * @since  12.1	 */	protected $detection = array();	/**	 * Class constructor.	 *	 * @param   string  $userAgent       The optional user-agent string to parse.	 * @param   string  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   string  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   12.1	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		// If no explicit user agent string was given attempt to use the implicit one from server environment.		if (empty($userAgent) && isset($_SERVER['HTTP_USER_AGENT']))		{			$this->userAgent = $_SERVER['HTTP_USER_AGENT'];		}		else		{			$this->userAgent = $userAgent;		}		// If no explicit acceptable encoding string was given attempt to use the implicit one from server environment.		if (empty($acceptEncoding) && isset($_SERVER['HTTP_ACCEPT_ENCODING']))		{			$this->acceptEncoding = $_SERVER['HTTP_ACCEPT_ENCODING'];		}		else		{			$this->acceptEncoding = $acceptEncoding;		}		// If no explicit acceptable languages string was given attempt to use the implicit one from server environment.		if (empty($acceptLanguage) && isset($_SERVER['HTTP_ACCEPT_LANGUAGE']))		{			$this->acceptLanguage = $_SERVER['HTTP_ACCEPT_LANGUAGE'];		}		else		{			$this->acceptLanguage = $acceptLanguage;		}	}	/**	 * Magic method to get an object property's value by name.	 *	 * @param   string  $name  Name of the property for which to return a value.	 *	 * @return  mixed  The requested value if it exists.	 *	 * @since   12.1	 */	public function __get($name)	{		switch ($name)		{			case 'mobile':			case 'platform':				if (empty($this->detection['platform']))				{					$this->detectPlatform($this->userAgent);				}				break;			case 'engine':				if (empty($this->detection['engine']))				{					$this->detectEngine($this->userAgent);				}				break;			case 'browser':			case 'browserVersion':				if (empty($this->detection['browser']))				{					$this->detectBrowser($this->userAgent);				}				break;			case 'languages':				if (empty($this->detection['acceptLanguage']))				{					$this->detectLanguage($this->acceptLanguage);				}				break;			case 'encodings':				if (empty($this->detection['acceptEncoding']))				{					$this->detectEncoding($this->acceptEncoding);				}				break;			case 'robot':				if (empty($this->detection['robot']))				{					$this->detectRobot($this->userAgent);				}				break;		}		// Return the property if it exists.		if (isset($this->$name))		{			return $this->$name;		}	}	/**	 * Detects the client browser and version in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectBrowser($userAgent)	{		// Attempt to detect the browser type.  Obviously we are only worried about major browsers.		if ((stripos($userAgent, 'MSIE') !== false) && (stripos($userAgent, 'Opera') === false))		{			$this->browser = self::IE;			$patternBrowser = 'MSIE';		}		elseif ((stripos($userAgent, 'Firefox') !== false) && (stripos($userAgent, 'like Firefox') === false))		{			$this->browser = self::FIREFOX;			$patternBrowser = 'Firefox';		}		elseif (stripos($userAgent, 'Chrome') !== false)		{			$this->browser = self::CHROME;			$patternBrowser = 'Chrome';		}		elseif (stripos($userAgent, 'Safari') !== false)		{			$this->browser = self::SAFARI;			$patternBrowser = 'Safari';		}		elseif (stripos($userAgent, 'Opera') !== false)		{			$this->browser = self::OPERA;			$patternBrowser = 'Opera';		}		// If we detected a known browser let's attempt to determine the version.		if ($this->browser)		{			// Build the REGEX pattern to match the browser version string within the user agent string.			$pattern = '#(?<browser>Version|' . $patternBrowser . ')[/ ]+(?<version>[0-9.|a-zA-Z.]*)#';			// Attempt to find version strings in the user agent string.			$matches = array();			if (preg_match_all($pattern, $userAgent, $matches))			{				// Do we have both a Version and browser match?				if (count($matches['browser']) == 2)				{					// See whether Version or browser came first, and use the number accordingly.					if (strripos($userAgent, 'Version') < strripos($userAgent, $patternBrowser))					{						$this->browserVersion = $matches['version'][0];					}					else					{						$this->browserVersion = $matches['version'][1];					}				}				elseif (count($matches['browser']) > 2)				{						$key = array_search('Version', $matches['browser']);						if ($key)						{							$this->browserVersion = $matches['version'][$key];						}				}				// We only have a Version or a browser so use what we have.				else				{					$this->browserVersion = $matches['version'][0];				}			}		}		// Mark this detection routine as run.		$this->detection['browser'] = true;	}	/**	 * Method to detect the accepted response encoding by the client.	 *	 * @param   string  $acceptEncoding  The client accept encoding string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEncoding($acceptEncoding)	{		// Parse the accepted encodings.		$this->encodings = array_map('trim', (array) explode(',', $acceptEncoding));		// Mark this detection routine as run.		$this->detection['acceptEncoding'] = true;	}	/**	 * Detects the client rendering engine in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEngine($userAgent)	{		// Attempt to detect the client engine -- starting with the most popular ... for now.		if (stripos($userAgent, 'MSIE') !== false || stripos($userAgent, 'Trident') !== false)		{			$this->engine = self::TRIDENT;		}		// Evidently blackberry uses WebKit and doesn't necessarily report it.  Bad RIM.		elseif (stripos($userAgent, 'AppleWebKit') !== false || stripos($userAgent, 'blackberry') !== false)		{			$this->engine = self::WEBKIT;		}		// We have to check for like Gecko because some other browsers spoof Gecko.		elseif (stripos($userAgent, 'Gecko') !== false && stripos($userAgent, 'like Gecko') === false)		{			$this->engine = self::GECKO;		}		// Sometimes Opera browsers don't say Presto.		elseif (stripos($userAgent, 'Opera') !== false || stripos($userAgent, 'Presto') !== false)		{			$this->engine = self::PRESTO;		}		// *sigh*		elseif (stripos($userAgent, 'KHTML') !== false)		{			$this->engine = self::KHTML;		}		// Lesser known engine but it finishes off the major list from Wikipedia :-)		elseif (stripos($userAgent, 'Amaya') !== false)		{			$this->engine = self::AMAYA;		}		// Mark this detection routine as run.		$this->detection['engine'] = true;	}	/**	 * Method to detect the accepted languages by the client.	 *	 * @param   mixed  $acceptLanguage  The client accept language string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectLanguage($acceptLanguage)	{		// Parse the accepted encodings.		$this->languages = array_map('trim', (array) explode(',', $acceptLanguage));		// Mark this detection routine as run.		$this->detection['acceptLanguage'] = true;	}	/**	 * Detects the client platform in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectPlatform($userAgent)	{		// Attempt to detect the client platform.		if (stripos($userAgent, 'Windows') !== false)		{			$this->platform = self::WINDOWS;			// Let's look at the specific mobile options in the Windows space.			if (stripos($userAgent, 'Windows Phone') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_PHONE;			}			elseif (stripos($userAgent, 'Windows CE') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_CE;			}		}		// Interestingly 'iPhone' is present in all iOS devices so far including iPad and iPods.		elseif (stripos($userAgent, 'iPhone') !== false)		{			$this->mobile = true;			$this->platform = self::IPHONE;			// Let's look at the specific mobile options in the iOS space.			if (stripos($userAgent, 'iPad') !== false)			{				$this->platform = self::IPAD;			}			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->platform = self::IPOD;			}		}			// In case where iPhone is not mentioed in iPad user agent string			elseif (stripos($userAgent, 'iPad') !== false)			{				$this->mobile = true;				$this->platform = self::IPAD;			}			// In case where iPhone is not mentioed in iPod user agent string			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->mobile = true;				$this->platform = self::IPOD;			}		// This has to come after the iPhone check because mac strings are also present in iOS devices.		elseif (preg_match('/macintosh|mac os x/i', $userAgent))		{			$this->platform = self::MAC;		}		elseif (stripos($userAgent, 'Blackberry') !== false)		{			$this->mobile = true;			$this->platform = self::BLACKBERRY;		}		elseif (stripos($userAgent, 'Android') !== false)		{			$this->mobile = true;			$this->platform = self::ANDROID;			/**			 * Attempt to distinguish between Android phones and tablets			 * There is no totally foolproof method but certain rules almost always hold			 *   Android 3.x is only used for tablets			 *   Some devices and browsers encourage users to change their UA string to include Tablet.			 *   Google encourages manufacturers to exclude the string Mobile from tablet device UA strings.			 *   In some modes Kindle Android devices include the string Mobile but they include the string Silk.			 */			if (stripos($userAgent, 'Android 3') !== false || stripos($userAgent, 'Tablet') !== false				|| stripos($userAgent, 'Mobile') === false || stripos($userAgent, 'Silk') !== false )			{				$this->platform = self::ANDROIDTABLET;			}		}		elseif (stripos($userAgent, 'Linux') !== false)		{			$this->platform = self::LINUX;		}		// Mark this detection routine as run.		$this->detection['platform'] = true;	}	/**	 * Determines if the browser is a robot or not.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function detectRobot($userAgent)	{		if (preg_match('/http|bot|robot|spider|crawler|curl|^$/i', $userAgent))		{			$this->robot = true;		}		else		{			$this->robot = false;		}		$this->detection['robot'] = true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;?><h3>	<?php echo JText::_('COM_FINDER_STATISTICS_TITLE') ?></h3><div class="row-fluid">	<div class="span6">		<p class="tab-description"><?php echo JText::sprintf('COM_FINDER_STATISTICS_STATS_DESCRIPTION', number_format($this->data->term_count), number_format($this->data->link_count), number_format($this->data->taxonomy_node_count), number_format($this->data->taxonomy_branch_count)); ?></p>		<table class="table table-striped table-condensed">			<thead>				<tr>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_HEADING');?>					</th>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_COUNT');?>					</th>				</tr>			</thead>			<tbody>				<?php foreach ($this->data->type_list as $type) :?>				<tr>					<td>						<?php echo $type->type_title;?>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($type->link_count);?></span>					</td>				</tr>				<?php endforeach; ?>				<tr>					<td>						<strong><?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_TOTAL'); ?></strong>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($this->data->link_count); ?></span>					</td>				</tr>			</tbody>		</table>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Database Query Limitable Interface. * Adds bind/unbind methods as well as a getBounded() method * to retrieve the stored bounded variables on demand prior to * query execution. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */interface JDatabaseQueryLimitable{	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0);	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0);}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.language.help');?><form action="<?php echo JRoute::_('index.php?option=com_admin&amp;view=help'); ?>" method="post" name="adminForm" id="adminForm"><div class="width-40 fltlft">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_ADMIN_SEARCH'); ?></legend>		<input class="textarea" type="hidden" name="option" value="com_admin" />		<input type="text" name="helpsearch" size="40"  value="<?php echo $this->escape($this->help_search);?>" class="inputbox" />		<input type="submit" value="<?php echo JText::_('COM_ADMIN_GO'); ?>" class="button" />		<input type="button" value="<?php echo JText::_('COM_ADMIN_CLEAR_RESULTS'); ?>" class="button" onclick="f=document.adminForm;f.helpsearch.value='';f.submit()" />	</fieldset></div><div class="width-50 fltrt helplinks">	<ul class="helpmenu">		<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_GLOSSARY'), JText::_('COM_ADMIN_GLOSSARY'), array('target' => 'helpFrame')) ?></li>		<li><?php echo JHtml::_('link', 'http://www.gnu.org/licenses/gpl-2.0.html', JText::_('COM_ADMIN_LICENSE'), array('target' => 'helpFrame')) ?></li>		<li><?php echo JHtml::_('link', $this->latest_version_check, JText::_('COM_ADMIN_LATEST_VERSION_CHECK'), array('target' => 'helpFrame')) ?></li>		<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_START_HERE'), JText::_('COM_ADMIN_START_HERE'), array('target' => 'helpFrame')) ?></li>	</ul></div><div class="clr"> </div>	<div id="treecellhelp" class="width-20 fltleft">		<fieldset class="adminform whitebg" title="<?php echo JText::_('COM_ADMIN_ALPHABETICAL_INDEX'); ?>">			<legend><?php echo JText::_('COM_ADMIN_ALPHABETICAL_INDEX'); ?></legend>			<div class="helpIndex">				<ul class="subext">					<?php foreach ($this->toc as $k => $v):?>						<li>						    <?php $url = JHelp::createUrl('JHELP_'.strtoupper($k)); ?>							<?php echo JHtml::_('link', $url, $v, array('target' => 'helpFrame'));?>						</li>					<?php endforeach;?>				</ul>			</div>		</fieldset>	</div>	<div id="datacellhelp" class="width-80 fltrt">		<fieldset title="<?php echo JText::_('COM_ADMIN_VIEW'); ?>">			<legend>				<?php echo JText::_('COM_ADMIN_VIEW'); ?>			</legend>				<iframe name="helpFrame" src="<?php echo $this->page;?>" class="helpFrame"></iframe>		</fieldset>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!isset($this->error)){	$this->error = JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));	$this->debug = false;}//get language and direction$doc = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<title><?php echo $this->error->getCode(); ?> - <?php echo $this->title; ?></title>	<link rel="stylesheet" href="<?php echo $this->baseurl; ?>/templates/system/css/error.css" type="text/css" />	<?php if ($this->direction == 'rtl') : ?>	<link rel="stylesheet" href="<?php echo $this->baseurl; ?>/templates/system/css/error_rtl.css" type="text/css" />	<?php endif; ?>	<?php		$debug = JFactory::getConfig()->get('debug_lang');		if (JDEBUG || $debug)		{	?>		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/media/cms/css/debug.css" type="text/css" />	<?php		}	?></head><body>	<div class="error">		<div id="outline">		<div id="errorboxoutline">			<div id="errorboxheader"><?php echo $this->error->getCode(); ?> - <?php echo $this->error->getMessage(); ?></div>			<div id="errorboxbody">			<p><strong><?php echo JText::_('JERROR_LAYOUT_NOT_ABLE_TO_VISIT'); ?></strong></p>				<ol>					<li><?php echo JText::_('JERROR_LAYOUT_AN_OUT_OF_DATE_BOOKMARK_FAVOURITE'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_SEARCH_ENGINE_OUT_OF_DATE_LISTING'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_MIS_TYPED_ADDRESS'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_YOU_HAVE_NO_ACCESS_TO_THIS_PAGE'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_REQUESTED_RESOURCE_WAS_NOT_FOUND'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_ERROR_HAS_OCCURRED_WHILE_PROCESSING_YOUR_REQUEST'); ?></li>				</ol>			<p><strong><?php echo JText::_('JERROR_LAYOUT_PLEASE_TRY_ONE_OF_THE_FOLLOWING_PAGES'); ?></strong></p>				<ul>					<li><a href="<?php echo $this->baseurl; ?>/index.php" title="<?php echo JText::_('JERROR_LAYOUT_GO_TO_THE_HOME_PAGE'); ?>"><?php echo JText::_('JERROR_LAYOUT_HOME_PAGE'); ?></a></li>				</ul>			<p><?php echo JText::_('JERROR_LAYOUT_PLEASE_CONTACT_THE_SYSTEM_ADMINISTRATOR'); ?>.</p>			<div id="techinfo">			<p><?php echo $this->error->getMessage(); ?></p>			<p>				<?php if ($this->debug) :					echo $this->renderBacktrace();				endif; ?>			</p>			</div>			</div>		</div>		</div>	</div></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Component Language Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesModelLanguage extends JModelAdmin{	/**	 * Override to get the table	 *	 * @return  JTable	 * @since   1.6	 */	public function getTable($name = '', $prefix = '', $options = array())	{		return JTable::getInstance('Language');	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		$app    = JFactory::getApplication('administrator');		$params = JComponentHelper::getParams('com_languages');		// Load the User state.		$langId = $app->input->getInt('lang_id');		$this->setState('language.id', $langId);		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get a member item.	 *	 * @param   integer	The id of the member to get.	 *	 * @return  mixed  User data object on success, false on failure.	 * @since   1.0	 */	public function getItem($langId = null)	{		$langId	= (!empty($langId)) ? $langId : (int) $this->getState('language.id');		$false  = false;		// Get a member row instance.		$table = $this->getTable();		// Attempt to load the row.		$return = $table->load($langId);		// Check for a table object error.		if ($return === false && $table->getError())		{			$this->setError($table->getError());			return $false;		}		$properties = $table->getProperties(1);		$value = JArrayHelper::toObject($properties, 'JObject');		return $value;	}	/**	 * Method to get the group form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_languages.language', 'language', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_languages.edit.language.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_languages.language', $data);		return $data;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$langId	= (int) $this->getState('language.id');		$isNew	= true;		$dispatcher = JEventDispatcher::getInstance();		JPluginHelper::importPlugin('extension');		$table = $this->getTable();		// Load the row if saving an existing item.		if ($langId > 0)		{			$table->load($langId);			$isNew = false;		}		// Bind the data		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Check the data		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionBeforeSave event.		$result = $dispatcher->trigger('onExtensionBeforeSave', array('com_languages.language', &$table, $isNew));		// Check the event responses.		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionAfterSave event.		$dispatcher->trigger('onExtensionAfterSave', array('com_languages.language', &$table, $isNew));		$this->setState('language.id', $table->lang_id);		// Clean the cache.		$this->cleanCache();		return true;	}	/**	 * Custom clean cache method	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('_system');		parent::cleanCache('com_languages');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><form target="_parent" action="index.php?option=com_media&amp;tmpl=index&amp;folder=<?php echo $this->state->folder; ?>" method="post" id="mediamanager-form" name="mediamanager-form">	<ul class="manager thumbnails">		<?php		echo $this->loadTemplate('up');		?>		<?php for ($i = 0, $n = count($this->folders); $i < $n; $i++) :			$this->setFolder($i);			echo $this->loadTemplate('folder');		endfor; ?>		<?php for ($i = 0, $n = count($this->documents); $i < $n; $i++) :			$this->setDoc($i);			echo $this->loadTemplate('doc');		endfor; ?>		<?php for ($i = 0, $n = count($this->images); $i < $n; $i++) :			$this->setImage($i);			echo $this->loadTemplate('img');		endfor; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="username" value="" />		<input type="hidden" name="password" value="" />		<?php echo JHtml::_('form.token'); ?>	</ul></form>
<?php/** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FunctionCallSignatureSniff.php 284575 2009-07-22 02:58:19Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Functions_FunctionCallSignatureSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_STRING);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Find the next non-empty token.        $openBracket = $phpcsFile->findNext(PHP_CodeSniffer_Tokens::$emptyTokens, ($stackPtr + 1), null, true);        if ($tokens[$openBracket]['code'] !== T_OPEN_PARENTHESIS) {            // Not a function call.            return;        }        if (isset($tokens[$openBracket]['parenthesis_closer']) === false) {            // Not a function call.            return;        }        // Find the previous non-empty token.        $search   = PHP_CodeSniffer_Tokens::$emptyTokens;        $search[] = T_BITWISE_AND;        $previous = $phpcsFile->findPrevious($search, ($stackPtr - 1), null, true);        if ($tokens[$previous]['code'] === T_FUNCTION) {            // It's a function definition, not a function call.            return;        }        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        if (($stackPtr + 1) !== $openBracket) {            // Checking this: $value = my_function[*](...).            $error = 'Space before opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceBeforeOpenBracket');        }        $next = $phpcsFile->findNext(T_WHITESPACE, ($closeBracket + 1), null, true);        if ($tokens[$next]['code'] === T_SEMICOLON) {            if (in_array($tokens[($closeBracket + 1)]['code'], PHP_CodeSniffer_Tokens::$emptyTokens) === true) {                $error = 'Space after closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closeBracket, 'SpaceAfterCloseBracket');            }        }        // Check if this is a single line or multi-line function call.        if ($tokens[$openBracket]['line'] === $tokens[$closeBracket]['line']) {            $this->processSingleLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        } else {            $this->processMultiLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        }    }//end process()    /**     * Processes single-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processSingleLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        if ($tokens[($openBracket + 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function([*]...).            $error = 'Space after opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceAfterOpenBracket');        }        $closer = $tokens[$openBracket]['parenthesis_closer'];        if ($tokens[($closer - 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function(...[*]).            $between = $phpcsFile->findNext(T_WHITESPACE, ($openBracket + 1), null, true);            // Only throw an error if there is some content between the parenthesis.            // i.e., Checking for this: $value = my_function().            // If there is no content, then we would have thrown an error in the            // previous IF statement because it would look like this:            // $value = my_function( ).            if ($between !== $closer) {                $error = 'Space before closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closer, 'SpaceBeforeCloseBracket');            }        }    }//end processSingleLineCall()    /**     * Processes multi-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processMultiLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        // We need to work out how far indented the function        // call itself is, so we can work out how far to        // indent the arguments.        $functionIndent = 0;        for ($i = ($stackPtr - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$stackPtr]['line']) {                $i++;                break;            }        }        if ($tokens[$i]['code'] === T_WHITESPACE) {            $functionIndent = strlen($tokens[$i]['content']);        }        // Each line between the parenthesis should be indented 4 spaces.        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        $lastLine     = $tokens[$openBracket]['line'];        for ($i = ($openBracket + 1); $i < $closeBracket; $i++) {            // Skip nested function calls.            if ($tokens[$i]['code'] === T_OPEN_PARENTHESIS) {                $i        = $tokens[$i]['parenthesis_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }            if ($tokens[$i]['line'] !== $lastLine) {                $lastLine = $tokens[$i]['line'];                // We changed lines, so this should be a whitespace indent token.                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$heredocTokens) === true) {                    // Ignore heredoc indentation.                    continue;                }                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$stringTokens) === true) {                    if ($tokens[$i]['code'] === $tokens[($i - 1)]['code']) {                        // Ignore multi-line string indentation.                        continue;                    }                }                if ($tokens[$i]['line'] === $tokens[$closeBracket]['line']) {                    // Closing brace needs to be indented to the same level                    // as the function call.                    $expectedIndent = $functionIndent;                } else {                    $expectedIndent = ($functionIndent + 4);                }                if ($tokens[$i]['code'] !== T_WHITESPACE) {                    $foundIndent = 0;                } else {                    $foundIndent = strlen($tokens[$i]['content']);                }                if ($expectedIndent !== $foundIndent) {// TODO AJE Allow for tab indents instead of spaces//                    $error = 'Multi-line function call not indented correctly; expected %s spaces but found %s';//                    $data  = array(//                              $expectedIndent,//                              $foundIndent,//                             );//                    $phpcsFile->addError($error, $i, 'Indent', $data);                }            }//end if            // Skip the rest of a closure.            if ($tokens[$i]['code'] === T_CLOSURE) {                $i        = $tokens[$i]['scope_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }        }//end for        if ($tokens[($openBracket + 1)]['content'] !== $phpcsFile->eolChar        && T_CONSTANT_ENCAPSED_STRING != $tokens[($openBracket + 1)]['code'])// allow a '"'        {            $error = 'Opening parenthesis of a multi-line function call must be the last content on the line';            $phpcsFile->addError($error, $stackPtr, 'ContentAfterOpenBracket');        }        $prev = $phpcsFile->findPrevious(T_WHITESPACE, ($closeBracket - 1), null, true);        if ($tokens[$prev]['line'] === $tokens[$closeBracket]['line']        && T_CONSTANT_ENCAPSED_STRING != $tokens[$prev]['code'])// allow a '"'        {            $error = 'Closing parenthesis of a multi-line function call must be on a line by itself';            $phpcsFile->addError($error, $closeBracket, 'CloseBracketLine');        }    }//end processMultiLineCall()}//end class?>
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to prepare installation for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSummary extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$model->checkForm('summary');		// Redirect to the page.		$r = new stdClass;		$r->view = 'install';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContentHelper', JPATH_ADMINISTRATOR . '/components/com_content/helpers/content.php');JLoader::register('CategoryHelperAssociation', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/association.php');/** * Content Component Association Helper * * @package     Joomla.Site * @subpackage  com_content * @since       3.0 */abstract class ContentHelperAssociation extends CategoryHelperAssociation{	/**	 * Method to get the associations for a given item	 *	 * @param   integer  $id    Id of the item	 * @param   string   $view  Name of the view	 *	 * @return  array   Array of associations for the item	 *	 * @since  3.0	 */	public static function getAssociations($id = 0, $view = null)	{		jimport('helper.route', JPATH_COMPONENT_SITE);		$app = JFactory::getApplication();		$jinput = $app->input;		$view = is_null($view) ? $jinput->get('view') : $view;		$id = empty($id) ? $jinput->getInt('id') : $id;		if ($view == 'article')		{			if ($id)			{				$associations = JLanguageAssociations::getAssociations('com_content', '#__content', 'com_content.item', $id);				$return = array();				foreach ($associations as $tag => $item)				{					$return[$tag] = ContentHelperRoute::getArticleRoute($item->id, $item->catid, $item->language);				}				return $return;			}		}		if ($view == 'category' || $view == 'categories')		{			return self::getCategoryAssociations($id, 'com_content');		}		return array();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_PLUGINS_'.$name.'_FIELDSET_LABEL';	echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($label) ?></legend>		<?php $hidden_fields = ''; ?>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<?php if (!$field->hidden) : ?>			<li>				<?php echo $field->label; ?>				<?php echo $field->input; ?>			</li>			<?php else : $hidden_fields .= $field->input; ?>			<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php echo $hidden_fields; ?>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Syslog Log class * * This class is designed to call the PHP Syslog function call which is then sent to the * system wide log system. For Linux/Unix based systems this is the syslog subsystem, for * the Windows based implementations this can be found in the Event Log. For Windows, * permissions may prevent PHP from properly outputting messages. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerSyslog extends JLogLogger{	/**	 * @var array Translation array for JLogEntry priorities to SysLog priority names.	 * @since 11.1	 */	protected $priorities = array(		JLog::EMERGENCY => 'EMERG',		JLog::ALERT => 'ALERT',		JLog::CRITICAL => 'CRIT',		JLog::ERROR => 'ERR',		JLog::WARNING => 'WARNING',		JLog::NOTICE => 'NOTICE',		JLog::INFO => 'INFO',		JLog::DEBUG => 'DEBUG');	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// Ensure that we have an identity string for the Syslog entries.		if (empty($this->options['sys_ident']))		{			$this->options['sys_ident'] = 'Joomla Platform';		}		// If the option to add the process id to Syslog entries is set use it, otherwise default to true.		if (isset($this->options['sys_add_pid']))		{			$this->options['sys_add_pid'] = (bool) $this->options['sys_add_pid'];		}		else		{			$this->options['sys_add_pid'] = true;		}		// If the option to also send Syslog entries to STDERR is set use it, otherwise default to false.		if (isset($this->options['sys_use_stderr']))		{			$this->options['sys_use_stderr'] = (bool) $this->options['sys_use_stderr'];		}		else		{			$this->options['sys_use_stderr'] = false;		}		// Build the Syslog options from our log object options.		$sysOptions = 0;		if ($this->options['sys_add_pid'])		{			$sysOptions = $sysOptions | LOG_PID;		}		if ($this->options['sys_use_stderr'])		{			$sysOptions = $sysOptions | LOG_PERROR;		}		// Open the Syslog connection.		openlog((string) $this->options['sys_ident'], $sysOptions, LOG_USER);	}	/**	 * Destructor.	 *	 * @since   11.1	 */	public function __destruct()	{		closelog();	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addEntry(JLogEntry $entry)	{		// Generate the value for the priority based on predefined constants.		$priority = constant(strtoupper('LOG_' . $this->priorities[$entry->priority]));		// Send the entry to Syslog.		syslog($priority, '[' . $entry->category . '] ' . $entry->message);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset>	<legend>		<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_COMPLETE_HEADING') ?>	</legend>	<p>		<?php echo JText::sprintf('COM_JOOMLAUPDATE_VIEW_COMPLETE_MESSAGE', JVERSION); ?>	</p></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentImage class, provides an easy interface to output image data * * @package     Joomla.Platform * @subpackage  Document * @since       12.1 */class JDocumentImage extends JDocument{	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since   12.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'image/png';		// Set document type		$this->_type = 'image';	}	/**	 * Render the document.	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   12.1	 */	public function render($cache = false, $params = array())	{		// Get the image type		$type = JFactory::getApplication()->input->get('type', 'png');		switch ($type)		{			case 'jpg':			case 'jpeg':				$this->_mime = 'image/jpeg';				break;			case 'gif':				$this->_mime = 'image/gif';				break;			case 'png':			default:				$this->_mime = 'image/png';				break;		}		$this->_charset = null;		parent::render();		return $this->getBuffer();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'categoryOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_TAGS_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('bootstrap.addSlide', 'categoryOptions', JText::_($label), 'collapse' . $i++);			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>				<?php if ($name == 'basic'):?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('note'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('note'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('tag_layout'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('tag_layout'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('tag_link_class'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('tag_link_class'); ?>						</div>					</div>				<?php endif;		echo JHtml::_('bootstrap.endSlide');	endforeach;echo JHtml::_('bootstrap.endAccordion');
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><fieldset>	<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>		<?php if ($this->params->get('categories_description')) : ?>			<div class="category-desc base-desc">			<?php echo JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_weblinks.categories'); ?>			</div>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc base-desc">					<?php echo JHtml::_('content.prepare', $this->parent->description, '', 'com_weblinks.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?>	<?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController  This object to support chaining.	 *	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_ADMINISTRATOR . '/components/com_installer/helpers/installer.php';		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'install');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			$ftp = JClientHelper::setCredentialsFromRequest('ftp');			$view->ftp = &$ftp;			// Get the model for the view.			$model = $this->getModel($vName);			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			// Load the submenu.			InstallerHelper::addSubmenu($vName);			$view->display();		}		return $this;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.Highlight * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * System plugin to highlight terms. * * @package     Joomla.Plugin * @subpackage  System.Highlight * @since       2.5 */class PlgSystemHighlight extends JPlugin{	/**	 * Method to catch the onAfterDispatch event.	 *	 * This is where we setup the click-through content highlighting for.	 * The highlighting is done with JavaScript so we just	 * need to check a few parameters and the JHtml behavior will do the rest.	 *	 * @return  boolean  True on success	 *	 * @since   2.5	 */	public function onAfterDispatch()	{		// Check that we are in the site application.		if (JFactory::getApplication()->isAdmin())		{			return true;		}		// Set the variables		$input = JFactory::getApplication()->input;		$extension = $input->get('option', '', 'cmd');		// Check if the highlighter is enabled.		if (!JComponentHelper::getParams($extension)->get('highlight_terms', 1))		{			return true;		}		// Check if the highlighter should be activated in this environment.		if (JFactory::getDocument()->getType() !== 'html' || $input->get('tmpl', '', 'cmd') === 'component')		{			return true;		}		// Get the terms to highlight from the request.		$terms = $input->request->get('highlight', null, 'base64');		$terms = $terms ? json_decode(base64_decode($terms)) : null;		// Check the terms.		if (empty($terms))		{			return true;		}		// Clean the terms array		$filter = JFilterInput::getInstance();		$cleanTerms = array();		foreach ($terms as $term)		{			$cleanTerms[] = htmlspecialchars($filter->clean($term, 'string'));		}		// Activate the highlighter.		JHtml::_('behavior.highlighter', $cleanTerms);		// Adjust the component buffer.		$doc = JFactory::getDocument();		$buf = $doc->getBuffer('component');		$buf = '<br id="highlighter-start" />' . $buf . '<br id="highlighter-end" />';		$doc->setBuffer($buf, 'component');		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extension object * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerExtension extends JObject{	/**	 * Filename of the extension	 *	 * @var    string	 * @since  3.1	 */	public $filename = '';	/**	 * Type of the extension	 *	 * @var    string	 * @since  3.1	 */	public $type = '';	/**	 * Unique Identifier for the extension	 *	 * @var    string	 * @since  3.1	 */	public $id = '';	/**	 * The status of the extension	 *	 * @var    boolean	 * @since  3.1	 */	public $published = false;	/**	 * String representation of client. Valid for modules, templates and languages.	 * Set by default to site.	 *	 * @var    string	 * @since  3.1	 */	public $client = 'site';	/**	 * The group name of the plugin. Not used for other known extension types (only plugins)	 *	 * @var string	 * @since  3.1	 */	public $group = '';	/**	 * An object representation of the manifest file stored metadata	 *	 * @var object	 * @since  3.1	 */	public $manifest_cache = null;	/**	 * An object representation of the extension params	 *	 * @var    object	 * @since  3.1	 */	public $params = null;	/**	 * Constructor	 *	 * @param   SimpleXMLElement  $element  A SimpleXMLElement from which to load data from	 *	 * @since  3.1	 */	public function __construct(SimpleXMLElement $element = null)	{		if ($element)		{			$this->type = (string) $element->attributes()->type;			$this->id = (string) $element->attributes()->id;			switch ($this->type)			{				case 'component':					// By default a component doesn't have anything					break;				case 'module':				case 'template':				case 'language':					$this->client = (string) $element->attributes()->client;					$tmp_client_id = JApplicationHelper::getClientInfo($this->client, 1);					if ($tmp_client_id == null)					{						JLog::add(JText::_('JLIB_INSTALLER_ERROR_EXTENSION_INVALID_CLIENT_IDENTIFIER'), JLog::WARNING, 'jerror');					}					else					{						$this->client_id = $tmp_client_id->id;					}					break;				case 'plugin':					$this->group = (string) $element->attributes()->group;					break;				default:					// Catch all					// Get and set client and group if we don't recognise the extension					if ($element->attributes()->client)					{						$this->client_id = JApplicationHelper::getClientInfo($this->client, 1);						$this->client_id = $this->client_id->id;					}					if ($element->attributes()->group)					{						$this->group = (string) $element->attributes()->group;					}					break;			}			$this->filename = (string) $element;		}	}}/** * Deprecated class placeholder. You should use JInstallerExtension instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JExtension extends JInstallerExtension{	/**	 * Constructor	 *	 * @param   SimpleXMLElement  $element  A SimpleXMLElement from which to load data from	 *	 * @since  3.1	 */	public function __construct(SimpleXMLElement $element = null)	{		parent::__construct($element);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once dirname(dirname(__DIR__)) . '/helper/component.php';/** * View for the global configuration * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.5 */class ConfigViewApplication extends JViewLegacy{	public $state;	public $form;	public $data;	/**	 * Method to display the view.	 */	public function display($tpl = null)	{		$form	= $this->get('Form');		$data	= $this->get('Data');		$user = JFactory::getUser();		// Check for model errors.		if ($errors = $this->get('Errors'))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Bind the form to the data.		if ($form && $data)		{			$form->bind($data);		}		// Get the params for com_users.		$usersParams = JComponentHelper::getParams('com_users');		// Get the params for com_media.		$mediaParams = JComponentHelper::getParams('com_media');		// Load settings for the FTP layer.		$ftp = JClientHelper::setCredentialsFromRequest('ftp');		$this->form = &$form;		$this->data = &$data;		$this->ftp = &$ftp;		$this->usersParams = &$usersParams;		$this->mediaParams = &$mediaParams;		$this->components = ConfigHelperComponent::getComponentsWithConfig();		ConfigHelperComponent::loadLanguageForComponents($this->components);		$this->userIsSuperAdmin = $user->authorise('core.admin');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_CONFIG_GLOBAL_CONFIGURATION'), 'config.png');		JToolbarHelper::apply('application.apply');		JToolbarHelper::save('application.save');		JToolbarHelper::divider();		JToolbarHelper::cancel('application.cancel');		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_SITE_GLOBAL_CONFIGURATION');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google API data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleData{	/**	 * @var    JRegistry  Options for the Google data object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JGoogleAuth  Authentication client for the Google data object.	 * @since  12.3	 */	protected $auth;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object.	 * @param   JGoogleAuth  $auth     Google data http client object.	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->auth = isset($auth) ? $auth : new JGoogleAuthOauth2($this->options);	}	/**	 * Method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	public function authenticate()	{		return $this->auth->authenticate();	}	/**	 * Check authentication	 *	 * @return  boolean  True if authenticated.	 *	 * @since   12.3	 */	public function isAuthenticated()	{		return $this->auth->isAuthenticated();	}	/**	 * Method to validate XML	 *	 * @param   string  $data  XML data to be parsed	 *	 * @return  SimpleXMLElement  XMLElement of parsed data	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected static function safeXML($data)	{		try		{			return new SimpleXMLElement($data, LIBXML_NOWARNING | LIBXML_NOERROR);		}		catch (Exception $e)		{			throw new UnexpectedValueException("Unexpected data received from Google: `$data`.");		}	}	/**	 * Method to retrieve a list of data	 *	 * @param   array   $url       URL to GET	 * @param   int     $maxpages  Maximum number of pages to return	 * @param   string  $token     Next page token	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected function listGetData($url, $maxpages = 1, $token = null)	{		$qurl = $url;		if (strpos($url, '&') && isset($token))		{			$qurl .= '&pageToken=' . $token;		}		elseif (isset($token))		{			$qurl .= 'pageToken=' . $token;		}		$jdata = $this->query($qurl);		$data = json_decode($jdata->body, true);		if ($data && array_key_exists('items', $data))		{			if ($maxpages != 1 && array_key_exists('nextPageToken', $data))			{				$data['items'] = array_merge($data['items'], $this->listGetData($url, $maxpages - 1, $data['nextPageToken']));			}			return $data['items'];		}		elseif ($data)		{			return array();		}		else		{			throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");		}	}	/**	 * Method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	protected function query($url, $data = null, $headers = null, $method = 'get')	{		return $this->auth->query($url, $data, $headers, $method);	}	/**	 * Get an option from the JGoogleData instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleData instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleData  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugin controller class. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsControllerPlugin extends JControllerForm{}
<?php/** * @package     Joomla.Platform * @subpackage  Plugin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JPlugin Class * * @package     Joomla.Platform * @subpackage  Plugin * @since       11.1 */abstract class JPlugin extends JEvent{	/**	 * A JRegistry object holding the parameters for the plugin	 *	 * @var    JRegistry	 * @since  11.1	 */	public $params = null;	/**	 * The name of the plugin	 *	 * @var    string	 * @since  11.1	 */	protected $_name = null;	/**	 * The plugin type	 *	 * @var    string	 * @since  11.1	 */	protected $_type = null;	/**	 * Affects constructor behavior. If true, language files will be loaded automatically.	 *	 * @var    boolean	 * @since  12.3	 */	protected $autoloadLanguage = false;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe	 * @param   array   $config    An optional associative array of configuration settings.	 *                             Recognized key values include 'name', 'group', 'params', 'language'	 *                             (this list is not meant to be comprehensive).	 *	 * @since   11.1	 */	public function __construct(&$subject, $config = array())	{		// Get the parameters.		if (isset($config['params']))		{			if ($config['params'] instanceof JRegistry)			{				$this->params = $config['params'];			}			else			{				$this->params = new JRegistry;				$this->params->loadString($config['params']);			}		}		// Get the plugin name.		if (isset($config['name']))		{			$this->_name = $config['name'];		}		// Get the plugin type.		if (isset($config['type']))		{			$this->_type = $config['type'];		}		// Load the language files if needed.		if ($this->autoloadLanguage)		{			$this->loadLanguage();		}		parent::__construct($subject);	}	/**	 * Loads the plugin language file	 *	 * @param   string  $extension  The extension for which a language file should be loaded	 * @param   string  $basePath   The basepath to use	 *	 * @return  boolean  True, if the file has successfully loaded.	 *	 * @since   11.1	 */	public function loadLanguage($extension = '', $basePath = JPATH_ADMINISTRATOR)	{		if (empty($extension))		{			$extension = 'plg_' . $this->_type . '_' . $this->_name;		}		$lang = JFactory::getLanguage();		return $lang->load(strtolower($extension), $basePath, null, false, false)			|| $lang->load(strtolower($extension), JPATH_PLUGINS . '/' . $this->_type . '/' . $this->_name, null, false, false)			|| $lang->load(strtolower($extension), $basePath, $lang->getDefault(), false, false)			|| $lang->load(strtolower($extension), JPATH_PLUGINS . '/' . $this->_type . '/' . $this->_name, $lang->getDefault(), false, false);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$list = ModArticlesPopularHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_articles_popular', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the FTP data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerFtp extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$model->checkForm('ftp');		// Redirect to the page.		$r = new stdClass;		$r->view = 'summary';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php  $fieldSets = $this->form->getFieldsets('attribs'); ?>	<?php foreach ($fieldSets as $name => $fieldSet) : ?>		<?php $label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL'; ?>		<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'attrib-'.$name, trim($label)); ?>			<fieldset>			<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>				<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>			<?php endif;			foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach;?>			</fieldset>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endforeach; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Form * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * Requires the value entered be one of the options in a field of type="list" * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleOptions extends JFormRule{	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Check each value and return true if we get a match		foreach ($element->option as $option)		{			if ($value == (string) $option->attributes()->value)			{				return true;			}		}		return false;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User note controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersControllerNote extends JControllerForm{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  2.5	 */	protected $text_prefix = 'COM_USERS_NOTE';	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $key       The name of the primary key variable.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   2.5	 */	protected function getRedirectToItemAppend($recordId = null, $key = 'id')	{		$append = parent::getRedirectToItemAppend($recordId, $key);		$userId = JFactory::getApplication()->input->get('u_id', 0, 'int');		if ($userId)		{			$append .= '&u_id=' . $userId;		}		return $append;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleEquals extends JFormRule{	/**	 * Method to test if two values are equal. To use this rule, the form	 * XML needs a validate attribute of equals and a field attribute	 * that is equal to the field to test against.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 * @throws  UnexpectedValueException	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$field = (string) $element['field'];		// Check that a validation field is set.		if (!$field)		{			throw new UnexpectedValueException(sprintf('$field empty in %s::test', get_class($this)));		}		if (is_null($form))		{			throw new InvalidArgumentException(sprintf('The value for $form must not be null in %s', get_class($this)));		}		if (is_null($input))		{			throw new InvalidArgumentException(sprintf('The value for $input must not be null in %s', get_class($this)));		}		// Test the two values against each other.		if ($value == $input->get($field))		{			return true;		}		return false;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL Server database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/ee336279.aspx * @since       12.1 */class JDatabaseDriverSqlazure extends JDatabaseDriverSqlsrv{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlzure';}
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform String Inflector Class * * The Inflector transforms words * * @package     Joomla.Platform * @subpackage  String * @since       12.1 */class JStringInflector{	/**	 * The singleton instance.	 *	 * @var    JStringInflector	 * @since  12.1	 */	private static $_instance;	/**	 * The inflector rules for singularisation, pluralisation and countability.	 *	 * @var    array	 * @since  12.1	 */	private $_rules = array(		'singular' => array(			'/(matr)ices$/i' => '\1ix',			'/(vert|ind)ices$/i' => '\1ex',			'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|viri?)i$/i' => '\1us',			'/([ftw]ax)es/i' => '\1',			'/(cris|ax|test)es$/i' => '\1is',			'/(shoe|slave)s$/i' => '\1',			'/(o)es$/i' => '\1',			'/([^aeiouy]|qu)ies$/i' => '\1y',			'/$1ses$/i' => '\s',			'/ses$/i' => '\s',			'/eaus$/' => 'eau',			'/^(.*us)$/' => '\\1',			'/s$/i' => '',		),		'plural' => array(			'/([m|l])ouse$/i' => '\1ice',			'/(matr|vert|ind)(ix|ex)$/i'  => '\1ices',			'/(x|ch|ss|sh)$/i' => '\1es',			'/([^aeiouy]|qu)y$/i' => '\1ies',			'/([^aeiouy]|qu)ies$/i' => '\1y',			'/(?:([^f])fe|([lr])f)$/i' => '\1\2ves',			'/sis$/i' => 'ses',			'/([ti])um$/i' => '\1a',			'/(buffal|tomat)o$/i' => '\1\2oes',			'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|vir)us$/i' => '\1i',			'/us$/i' => 'uses',			'/(ax|cris|test)is$/i' => '\1es',			'/s$/i' => 's',			'/$/' => 's',		),		'countable' => array(			'id',			'hits',			'clicks',		),	);	/**	 * Cached inflections.	 *	 * The array is in the form [singular => plural]	 *	 * @var    array	 * @since  12.1	 */	private $_cache = array();	/**	 * Protected constructor.	 *	 * @since  12.1	 */	protected function __construct()	{		// Pre=populate the irregual singular/plural.		$this			->addWord('deer')			->addWord('moose')			->addWord('sheep')			->addWord('bison')			->addWord('salmon')			->addWord('pike')			->addWord('trout')			->addWord('fish')			->addWord('swine')			->addWord('alias', 'aliases')			->addWord('bus', 'buses')			->addWord('foot', 'feet')			->addWord('goose', 'geese')			->addWord('hive', 'hives')			->addWord('louse', 'lice')			->addWord('man', 'men')			->addWord('mouse', 'mice')			->addWord('ox', 'oxen')			->addWord('quiz', 'quizes')			->addWord('status', 'statuses')			->addWord('tooth', 'teeth')			->addWord('woman', 'women');	}	/**	 * Adds inflection regex rules to the inflector.	 *	 * @param   mixed   $data      A string or an array of strings or regex rules to add.	 * @param   string  $ruleType  The rule type: singular | plural | countable	 *	 * @return  void	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	private function _addRule($data, $ruleType)	{		if (is_string($data))		{			$data = array($data);		}		elseif (!is_array($data))		{			// Do not translate.			throw new InvalidArgumentException('Invalid inflector rule data.');		}		foreach ($data as $rule)		{			// Ensure a string is pushed.			array_push($this->_rules[$ruleType], (string) $rule);		}	}	/**	 * Gets an inflected word from the cache where the singular form is supplied.	 *	 * @param   string  $singular  A singular form of a word.	 *	 * @return  mixed  The cached inflection or false if none found.	 *	 * @since   12.1	 */	private function _getCachedPlural($singular)	{		$singular = JString::strtolower($singular);		// Check if the word is in cache.		if (isset($this->_cache[$singular]))		{			return $this->_cache[$singular];		}		return false;	}	/**	 * Gets an inflected word from the cache where the plural form is supplied.	 *	 * @param   string  $plural  A plural form of a word.	 *	 * @return  mixed  The cached inflection or false if none found.	 *	 * @since   12.1	 */	private function _getCachedSingular($plural)	{		$plural = JString::strtolower($plural);		return array_search($plural, $this->_cache);	}	/**	 * Execute a regex from rules.	 *	 * The 'plural' rule type expects a singular word.	 * The 'singular' rule type expects a plural word.	 *	 * @param   string  $word      The string input.	 * @param   string  $ruleType  String (eg, singular|plural)	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since   12.1	 */	private function _matchRegexRule($word, $ruleType)	{		// Cycle through the regex rules.		foreach ($this->_rules[$ruleType] as $regex => $replacement)		{			$matches = 0;			$matchedWord = preg_replace($regex, $replacement, $word, -1, $matches);			if ($matches > 0)			{				return $matchedWord;			}		}		return false;	}	/**	 * Sets an inflected word in the cache.	 *	 * @param   string  $singular  The singular form of the word.	 * @param   string  $plural    The plural form of the word. If omitted, it is assumed the singular and plural are identical.	 *	 * @return  void	 *	 * @since   12.1	 */	private function _setCache($singular, $plural = null)	{		$singular = JString::strtolower($singular);		if ($plural === null)		{			$plural = $singular;		}		else		{			$plural = JString::strtolower($plural);		}		$this->_cache[$singular] = $plural;	}	/**	 * Adds a countable word.	 *	 * @param   mixed  $data  A string or an array of strings to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addCountableRule($data)	{		$this->_addRule($data, 'countable');		return $this;	}	/**	 * Adds a specific singular-plural pair for a word.	 *	 * @param   string  $singular  The singular form of the word.	 * @param   string  $plural    The plural form of the word. If omitted, it is assumed the singular and plural are identical.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addWord($singular, $plural =null)	{		$this->_setCache($singular, $plural);		return $this;	}	/**	 * Adds a pluralisation rule.	 *	 * @param   mixed  $data  A string or an array of regex rules to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addPluraliseRule($data)	{		$this->_addRule($data, 'plural');		return $this;	}	/**	 * Adds a singularisation rule.	 *	 * @param   mixed  $data  A string or an array of regex rules to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addSingulariseRule($data)	{		$this->_addRule($data, 'singular');		return $this;	}	/**	 * Gets an instance of the JStringInflector singleton.	 *	 * @param   boolean  $new  If true (default is false), returns a new instance regardless if one exists.	 *                         This argument is mainly used for testing.	 *	 * @return  JStringInflector	 *	 * @since   12.1	 */	public static function getInstance($new = false)	{		if ($new)		{			return new static;		}		elseif (!is_object(self::$_instance))		{			self::$_instance = new static;		}		return self::$_instance;	}	/**	 * Checks if a word is countable.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is countable, false otherwise.	 *	 * @since  12.1	 */	public function isCountable($word)	{		return (boolean) in_array($word, $this->_rules['countable']);	}	/**	 * Checks if a word is in a plural form.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is plural, false if not.	 *	 * @since  12.1	 */	public function isPlural($word)	{		// Try the cache for an known inflection.		$inflection = $this->_getCachedSingular($word);		if ($inflection !== false)		{			return true;		}		// Compute the inflection to cache the values, and compare.		return $this->toPlural($this->toSingular($word)) == $word;	}	/**	 * Checks if a word is in a singular form.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is singular, false if not.	 *	 * @since  12.1	 */	public function isSingular($word)	{		// Try the cache for an known inflection.		$inflection = $this->_getCachedPlural($word);		if ($inflection !== false)		{			return true;		}		// Compute the inflection to cache the values, and compare.		return $this->toSingular($this->toPlural($word)) == $word;	}	/**	 * Converts a word into its plural form.	 *	 * @param   string  $word  The singular word to pluralise.	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since  12.1	 */	public function toPlural($word)	{		// Try to get the cached plural form from the singular.		$cache = $this->_getCachedPlural($word);		if ($cache !== false)		{			return $cache;		}		// Check if the word is a known singular.		if ($this->_getCachedSingular($word))		{			return false;		}		// Compute the inflection.		$inflected = $this->_matchRegexRule($word, 'plural');		if ($inflected !== false)		{			$this->_setCache($word, $inflected);			return $inflected;		}		return false;	}	/**	 * Converts a word into its singular form.	 *	 * @param   string  $word  The plural word to singularise.	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since  12.1	 */	public function toSingular($word)	{		// Try to get the cached singular form from the plural.		$cache = $this->_getCachedSingular($word);		if ($cache !== false)		{			return $cache;		}		// Check if the word is a known plural.		if ($this->_getCachedPlural($word))		{			return false;		}		// Compute the inflection.		$inflected = $this->_matchRegexRule($word, 'singular');		if ($inflected !== false)		{			$this->_setCache($inflected, $word);			return $inflected;		}		return false;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	?>	<div class="tab-pane" id="params-<?php echo $name;?>">	<?php	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php endforeach; ?>	</div><?php endforeach; ?>
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for cloaking email addresses * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlEmail{	/**	 * Simple Javascript email Cloaker	 *	 * By default replaces an email with a mailto link with email cloaked	 *	 * @param   string   $mail    The -mail address to cloak.	 * @param   boolean  $mailto  True if text and mailing address differ	 * @param   string   $text    Text for the link	 * @param   boolean  $email   True if text is an e-mail address	 *	 * @return  string  The cloaked email.	 *	 * @since   11.1	 */	public static function cloak($mail, $mailto = true, $text = '', $email = true)	{		// Convert text		$mail = self::_convertEncoding($mail);		// Split email by @ symbol		$mail = explode('@', $mail);		$mail_parts = explode('.', $mail[1]);		// Random number		$rand = rand(1, 100000);		$replacement = "\n <script type='text/javascript'>";		$replacement .= "\n <!--";		$replacement .= "\n var prefix = '&#109;a' + 'i&#108;' + '&#116;o';";		$replacement .= "\n var path = 'hr' + 'ef' + '=';";		$replacement .= "\n var addy" . $rand . " = '" . @$mail[0] . "' + '&#64;';";		$replacement .= "\n addy" . $rand . " = addy" . $rand . " + '" . implode("' + '&#46;' + '", $mail_parts) . "';";		if ($mailto)		{			// Special handling when mail text is different from mail address			if ($text)			{				if ($email)				{					// Convert text					$text = self::_convertEncoding($text);					// Split email by @ symbol					$text = explode('@', $text);					$text_parts = explode('.', $text[1]);					$replacement .= "\n var addy_text" . $rand . " = '" . @$text[0] . "' + '&#64;' + '" . implode("' + '&#46;' + '", @$text_parts)						. "';";				}				else				{					$replacement .= "\n var addy_text" . $rand . " = '" . $text . "';";				}				$replacement .= "\n document.write('<a ' + path + '\'' + prefix + ':' + addy" . $rand . " + '\'>');";				$replacement .= "\n document.write(addy_text" . $rand . ");";				$replacement .= "\n document.write('<\/a>');";			}			else			{				$replacement .= "\n document.write('<a ' + path + '\'' + prefix + ':' + addy" . $rand . " + '\'>');";				$replacement .= "\n document.write(addy" . $rand . ");";				$replacement .= "\n document.write('<\/a>');";			}		}		else		{			$replacement .= "\n document.write(addy" . $rand . ");";		}		$replacement .= "\n //-->";		$replacement .= '\n </script>';		// XHTML compliance no Javascript text handling		$replacement .= "<script type='text/javascript'>";		$replacement .= "\n <!--";		$replacement .= "\n document.write('<span style=\'display: none;\'>');";		$replacement .= "\n //-->";		$replacement .= "\n </script>";		$replacement .= JText::_('JLIB_HTML_CLOAKING');		$replacement .= "\n <script type='text/javascript'>";		$replacement .= "\n <!--";		$replacement .= "\n document.write('</');";		$replacement .= "\n document.write('span>');";		$replacement .= "\n //-->";		$replacement .= "\n </script>";		return $replacement;	}	/**	 * Convert encoded text	 *	 * @param   string  $text  Text to convert	 *	 * @return  string  The converted text.	 *	 * @since   11.1	 */	protected static function _convertEncoding($text)	{		// Replace vowels with character encoding		$text = str_replace('a', '&#97;', $text);		$text = str_replace('e', '&#101;', $text);		$text = str_replace('i', '&#105;', $text);		$text = str_replace('o', '&#111;', $text);		$text = str_replace('u', '&#117;', $text);		return $text;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_checkin');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CHECKIN_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table id="global-checkin" class="adminlist">		<thead>			<tr>				<th width="1%">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="left"><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_DATABASE_TABLE', 'table', $listDirn, $listOrder); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_ITEMS_TO_CHECK_IN', 'count', $listDirn, $listOrder); ?></th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $table => $count): $i = 0;?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center"><?php echo JHtml::_('grid.id', $i, $table); ?></td>				<td><?php echo JText::sprintf('COM_CHECKIN_TABLE', $table); ?></td>				<td width="200" class="center"><?php echo $count; ?></td>			</tr>		<?php endforeach;?>		</tbody>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>	</table>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Utility class for icons. * * @package     Joomla.Libraries * @subpackage  HTML * @since       2.5 */abstract class JHtmlIcons{	/**	 * Method to generate html code for a list of buttons	 *	 * @param   array  $buttons  Array of buttons	 *	 * @return  string	 *	 * @since   2.5	 */	public static function buttons($buttons)	{		$html = array();		foreach ($buttons as $button)		{			$html[] = JHtml::_('icons.button', $button);		}		return implode($html);	}	/**	 * Method to generate html code for a list of buttons	 *	 * @param   array  $button  Button properties	 *	 * @return  string	 *	 * @since   2.5	 */	public static function button($button)	{		if (isset($button['access']))		{			if (is_bool($button['access']))			{				if ($button['access'] == false)				{					return '';				}			}			else			{				// Get the user object to verify permissions				$user = JFactory::getUser();				// Take each pair of permission, context values.				for ($i = 0, $n = count($button['access']); $i < $n; $i += 2)				{					if (!$user->authorise($button['access'][$i], $button['access'][$i + 1]))					{						return '';					}				}			}		}		// Instantiate a new JLayoutFile instance and render the layout		$layout = new JLayoutFile('joomla.quickicons.icon');		return $layout->render($button);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Text Parser class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerParserTxt extends FinderIndexerParser{	/**	 * Method to process Text input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	protected function process($input)	{		return $input;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?phpif (!empty($this->msg)){	echo $this->msg;}else{	$lang = JFactory::getLanguage();	$myrtl = $this->newsfeed->rtl;	$direction = " ";		if ($lang->isRTL() && $myrtl == 0)		{			$direction = " redirect-rtl";		}		elseif ($lang->isRTL() && $myrtl == 1)		{				$direction = " redirect-ltr";		}		elseif ($lang->isRTL() && $myrtl == 2)		{			$direction = " redirect-rtl";		}		elseif ($myrtl == 0)		{			$direction = " redirect-ltr";		}		elseif ($myrtl == 1)		{			$direction = " redirect-ltr";		}		elseif ($myrtl == 2)		{			$direction = " redirect-rtl";		}		$images  = json_decode($this->item->images);	?>	<div class="newsfeed<?php echo $this->pageclass_sfx?><?php echo $direction; ?>">	<?php if ($this->params->get('display_num')) :  ?>	<h1 class="<?php echo $direction; ?>">		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<h2 class="<?php echo $direction; ?>">		<?php if ($this->item->published == 0) : ?>			<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>		<?php endif; ?>		<a href="<?php echo $this->item->link; ?>" target="_blank">		<?php echo str_replace('&apos;', "'", $this->item->name); ?></a>	</h2>	<?php if ($this->params->get('show_tags', 1)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?>	<!-- Show Images from Component -->	<?php  if (isset($images->image_first) and !empty($images->image_first)) : ?>	<?php $imgfloat = (empty($images->float_first)) ? $this->params->get('float_first') : $images->float_first; ?>	<div class="img-intro-<?php echo htmlspecialchars($imgfloat); ?>"> <img		<?php if ($images->image_first_caption):			echo 'class="caption"'.' title="' .htmlspecialchars($images->image_first_caption) .'"';		endif; ?>		src="<?php echo htmlspecialchars($images->image_first); ?>" alt="<?php echo htmlspecialchars($images->image_first_alt); ?>"/> </div>	<?php endif; ?>	<?php  if (isset($images->image_second) and !empty($images->image_second)) : ?>	<?php $imgfloat = (empty($images->float_second)) ? $this->params->get('float_second') : $images->float_second; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_second_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_second_caption) .'"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_second); ?>" alt="<?php echo htmlspecialchars($images->image_second_alt); ?>"/> </div>	<?php endif; ?>	<!-- Show Description from Component --><?php echo $this->item->description; ?>	<!-- Show Feed's Description -->	<?php if ($this->params->get('show_feed_description')) : ?>		<div class="feed-description">			<?php echo str_replace('&apos;', "'", $this->rssDoc->description); ?>		</div>	<?php endif; ?>	<!-- Show Image -->	<?php if (isset($this->rssDoc->image) && isset($this->rssDoc->imagetitle) && $this->params->get('show_feed_image')) : ?>	<div>			<img src="<?php echo $this->rssDoc->image; ?>" alt="<?php echo $this->rssDoc->image->decription; ?>" /></div><?php endif; ?>	<!-- Show items -->	<?php if (!empty($this->rssDoc[0])) { ?>	<ol>		<?php for ($i = 0; $i < $this->item->numarticles; $i++) { ?>	<?php		$uri = !empty($this->rssDoc[$i]->guid) || !is_null($this->rssDoc[$i]->guid) ? $this->rssDoc[$i]->guid : $this->rssDoc[$i]->uri;		$uri = substr($uri, 0, 4) != 'http' ? $this->item->link : $uri;		$text = !empty($this->rssDoc[$i]->content) || !is_null($this->rssDoc[$i]->content) ? $this->rssDoc[$i]->content : $this->rssDoc[$i]->description;	?>			<li>				<?php if (!empty($this->rssDoc[$i]->uri)) : ?>					<a href="<?php echo $this->rssDoc[$i]->uri; ?>" target="_blank">					<?php  echo $this->rssDoc[$i]->title; ?></a>				<?php else : ?>					<h3><?php  echo '<a target="_blank" href="' .$this->rssDoc[$i]->uri . '">' .$this->rssDoc[$i]->title. '</a>'; ?></h3>				<?php  endif; ?>				<?php if ($this->params->get('show_item_description') && !empty($text)) : ?>					<div class="feed-item-description">					<?php if ($this->params->get('show_feed_image', 0) == 0)					{						$text = JFilterOutput::stripImages($text);					}					$text = JHtml::_('string.truncate', $text, $this->params->get('feed_character_count'));						echo str_replace('&apos;', "'", $text);					?>					</div>				<?php endif; ?>				</li>			<?php } ?>			</ol>		<?php } ?>	</div><?php } ?>
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP response data object class. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpResponse{	/**	 * @var    integer  The server response code.	 * @since  11.3	 */	public $code;	/**	 * @var    array  Response headers.	 * @since  11.3	 */	public $headers = array();	/**	 * @var    string  Server response body.	 * @since  11.3	 */	public $body;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?>		<tr>			<td class="imgTotal">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">					<i class="icon-arrow-up"></i></a>			</td>			<td class="description">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">..</a>			</td>			<td>&#160;</td>			<td>&#160;</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>&#160;</td>		<?php endif;?>		</tr>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('database');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a  class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_FTP'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_enable'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_enable'); ?>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_user'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_user'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_FTP_USER_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_pass'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_pass'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_FTP_PASSWORD_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">		</div>		<div class="controls">			<button id="verifybutton" class="btn btn-success" onclick="Install.verifyFtpSettings(this);"><i class="icon-ok icon-white"></i> <?php echo JText::_('INSTL_VERIFY_FTP_SETTINGS'); ?></button>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_host'); ?>		</div>		<div class="controls">			<div class="input-append">				<?php echo $this->form->getInput('ftp_host'); ?><button id="findbutton" class="btn" onclick="Install.detectFtpRoot(this);"><i class="icon-folder-open"></i> <?php echo JText::_('INSTL_AUTOFIND_FTP_PATH'); ?></button>			</div>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_port'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_port'); ?>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_save'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_save'); ?>		</div>	</div>	<input type="hidden" name="task" value="ftp" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Joomla Core Install Remove View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewRemoveHtml extends JViewHtml{}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_category * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the helper functions only oncerequire_once __DIR__ . '/helper.php';$input = JFactory::getApplication()->input;		// Prep for Normal or Dynamic Modes		$mode = $params->get('mode', 'normal');		$idbase = null;		switch($mode)		{			case 'dynamic':				$option = $input->get('option');				$view = $input->get('view');				if ($option === 'com_content')				{					switch($view)					{						case 'category':							$idbase = $input->getInt('id');							break;						case 'categories':							$idbase = $input->getInt('id');							break;						case 'article':							if ($params->get('show_on_article_page', 1))							{								$idbase = $input->getInt('catid');							}							break;					}				}				break;			case 'normal':			default:				$idbase = $params->get('catid');				break;		}$cacheid = md5(serialize(array ($idbase, $module->module)));$cacheparams = new stdClass;$cacheparams->cachemode = 'id';$cacheparams->class = 'ModArticlesCategoryHelper';$cacheparams->method = 'getList';$cacheparams->methodparams = $params;$cacheparams->modeparams = $cacheid;$list = JModuleHelper::moduleCache($module, $params, $cacheparams);if (!empty($list)){	$grouped = false;	$article_grouping = $params->get('article_grouping', 'none');	$article_grouping_direction = $params->get('article_grouping_direction', 'ksort');	$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));	$item_heading = $params->get('item_heading');	if ($article_grouping !== 'none')	{		$grouped = true;		switch($article_grouping)		{			case 'year':			case 'month_year':				$list = ModArticlesCategoryHelper::groupByDate($list, $article_grouping, $article_grouping_direction, $params->get('month_year_format', 'F Y'));				break;			case 'author':			case 'category_title':				$list = ModArticlesCategoryHelper::groupBy($list, $article_grouping, $article_grouping_direction);				break;			default:				break;		}	}	require JModuleHelper::getLayoutPath('mod_articles_category', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Pull Requests class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubPulls extends JGithubObject{	/**	 * Method to create a pull request.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $title  The title of the new pull request.	 * @param   string  $base   The branch (or git ref) you want your changes pulled into. This	 *                          should be an existing branch on the current repository. You cannot	 *                          submit a pull request to one repo that requests a merge to a base	 *                          of another repo.	 * @param   string  $head   The branch (or git ref) where your changes are implemented.	 * @param   string  $body   The body text for the new pull request.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $title, $base, $head, $body = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// Build the request data.		$data = json_encode(			array(				'title' => $title,				'base' => $base,				'head' => $head,				'body' => $body			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on a pull request.	 *	 * @param   string   $user      The name of the owner of the GitHub repository.	 * @param   string   $repo      The name of the GitHub repository.	 * @param   integer  $pullId    The pull request number.	 * @param   string   $body      The comment body text.	 * @param   string   $commitId  The SHA1 hash of the commit to comment on.	 * @param   string   $filePath  The Relative path of the file to comment on.	 * @param   string   $position  The line index in the diff to comment on.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createComment($user, $repo, $pullId, $body, $commitId, $filePath, $position)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,				'commit_id' => $commitId,				'path' => $filePath,				'position' => $position			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment in reply to another comment.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $pullId     The pull request number.	 * @param   string   $body       The comment body text.	 * @param   integer  $inReplyTo  The id of the comment to reply to.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createCommentReply($user, $repo, $pullId, $body, $inReplyTo)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,				'in_reply_to' => (int) $inReplyTo			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a pull request from an existing issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number for which to attach the new pull request.	 * @param   string   $base     The branch (or git ref) you want your changes pulled into. This	 *                             should be an existing branch on the current repository. You cannot	 *                             submit a pull request to one repo that requests a merge to a base	 *                             of another repo.	 * @param   string   $head     The branch (or git ref) where your changes are implemented.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createFromIssue($user, $repo, $issueId, $base, $head)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// Build the request data.		$data = json_encode(			array(				'issue' => (int) $issueId,				'base' => $base,				'head' => $head			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to delete.	 *	 * @return  void	 *	 * @since   11.3	 */	public function deleteComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to update a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   string   $title   The optional new title for the pull request.	 * @param   string   $body    The optional new body text for the pull request.	 * @param   string   $state   The optional new state for the pull request. [open, closed]	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $pullId, $title = null, $body = null, $state = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if (isset($title))		{			$data->title = $title;		}		// If a body is set add it to the data object.		if (isset($body))		{			$data->body = $body;		}		// If a state is set add it to the data object.		if (isset($state))		{			$data->state = $state;		}		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to update.	 * @param   string   $body       The new body text for the comment.	 *	 * @return  object	 *	 * @since   11.3	 */	public function editComment($user, $repo, $commentId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Build the request data.		$data = json_encode(			array(				'body' => $body			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $pullId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The comment id to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function getComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of comments on a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getComments($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of commits for a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getCommits($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/commits';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of files for a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getFiles($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/files';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list pull requests.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $state  The optional state to filter requests by. [open, closed]	 * @param   integer  $page   The page number from which to get items.	 * @param   integer  $limit  The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($user, $repo, $state = 'open', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// If a state exists append it as an option.		if ($state != 'open')		{			$path .= '?state=' . $state;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to check if a pull request has been merged.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.  The pull request number.	 *	 * @return  boolean  True if the pull request has been merged.	 *	 * @since   11.3	 */	public function isMerged($user, $repo, $pullId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/merge';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code == 204)		{			return true;		}		elseif ($response->code == 404)		{			return false;		}		else		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to merge a pull request.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $pullId   The pull request number.	 * @param   string   $message  The message that will be used for the merge commit.	 *	 * @return  object	 *	 * @since   11.3	 */	public function merge($user, $repo, $pullId, $message = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/merge';		// Build the request data.		$data = json_encode(			array(				'commit_message' => $message			)		);		// Send the request.		$response = $this->client->put($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');/** * A File handling class * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JFile{	/**	 * Gets the extension of a file name	 *	 * @param   string  $file  The file name	 *	 * @return  string  The file extension	 *	 * @since   11.1	 */	public static function getExt($file)	{		$dot = strrpos($file, '.') + 1;		return substr($file, $dot);	}	/**	 * Strips the last extension off of a file name	 *	 * @param   string  $file  The file name	 *	 * @return  string  The file name without the extension	 *	 * @since   11.1	 */	public static function stripExt($file)	{		return preg_replace('#\.[^.]*$#', '', $file);	}	/**	 * Makes file name safe to use	 *	 * @param   string  $file  The name of the file [not full path]	 *	 * @return  string  The sanitised string	 *	 * @since   11.1	 */	public static function makeSafe($file)	{		$regex = array('#(\.){2,}#', '#[^A-Za-z0-9\.\_\- ]#', '#^\.#');		return preg_replace($regex, '', $file);	}	/**	 * Copies a file	 *	 * @param   string   $src          The path to the source file	 * @param   string   $dest         The path to the destination file	 * @param   string   $path         An optional base path to prefix to the file names	 * @param   boolean  $use_streams  True to use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function copy($src, $dest, $path = null, $use_streams = false)	{		// Prepend a base path if it exists		if ($path)		{			$src = JPath::clean($path . '/' . $src);			$dest = JPath::clean($path . '/' . $dest);		}		// Check src path		if (!is_readable($src))		{			JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_JFILE_FIND_COPY', $src), JLog::WARNING, 'jerror');			return false;		}		if ($use_streams)		{			$stream = JFactory::getStream();			if (!$stream->copy($src, $dest))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_JFILE_STREAMS', $src, $dest, $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// If the parent folder doesn't exist we must create it				if (!file_exists(dirname($dest)))				{					jimport('joomla.filesystem.folder');					JFolder::create(dirname($dest));				}				// Translate the destination path for the FTP account				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $dest), '/');				if (!$ftp->store($src, $dest))				{					// FTP connector throws an error					return false;				}				$ret = true;			}			else			{				if (!@ copy($src, $dest))				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_COPY_FAILED'), JLog::WARNING, 'jerror');					return false;				}				$ret = true;			}			return $ret;		}	}	/**	 * Delete a file or array of files	 *	 * @param   mixed  $file  The file name or an array of file names	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function delete($file)	{		$FTPOptions = JClientHelper::getCredentials('ftp');		if (is_array($file))		{			$files = $file;		}		else		{			$files[] = $file;		}		// Do NOT use ftp if it is not enabled		if ($FTPOptions['enabled'] == 1)		{			// Connect the FTP client			$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);		}		foreach ($files as $file)		{			$file = JPath::clean($file);			// Try making the file writable first. If it's read-only, it can't be deleted			// on Windows, even if the parent folder is writable			@chmod($file, 0777);			// In case of restricted permissions we zap it one way or the other			// as long as the owner is either the webserver or the ftp			if (@unlink($file))			{				// Do nothing			}			elseif ($FTPOptions['enabled'] == 1)			{				$file = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $file), '/');				if (!$ftp->delete($file))				{					// FTP connector throws an error					return false;				}			}			else			{				$filename = basename($file);				JLog::add(JText::sprintf('JLIB_FILESYSTEM_DELETE_FAILED', $filename), JLog::WARNING, 'jerror');				return false;			}		}		return true;	}	/**	 * Moves a file	 *	 * @param   string   $src          The path to the source file	 * @param   string   $dest         The path to the destination file	 * @param   string   $path         An optional base path to prefix to the file names	 * @param   boolean  $use_streams  True to use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function move($src, $dest, $path = '', $use_streams = false)	{		if ($path)		{			$src = JPath::clean($path . '/' . $src);			$dest = JPath::clean($path . '/' . $dest);		}		// Check src path		if (!is_readable($src))		{			return JText::_('JLIB_FILESYSTEM_CANNOT_FIND_SOURCE_FILE');		}		if ($use_streams)		{			$stream = JFactory::getStream();			if (!$stream->move($src, $dest))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_JFILE_MOVE_STREAMS', $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// Translate path for the FTP account				$src = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $src), '/');				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $dest), '/');				// Use FTP rename to simulate move				if (!$ftp->rename($src, $dest))				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_RENAME_FILE'), JLog::WARNING, 'jerror');					return false;				}			}			else			{				if (!@ rename($src, $dest))				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_RENAME_FILE'), JLog::WARNING, 'jerror');					return false;				}			}			return true;		}	}	/**	 * Read the contents of a file	 *	 * @param   string   $filename   The full file path	 * @param   boolean  $incpath    Use include path	 * @param   integer  $amount     Amount of file to read	 * @param   integer  $chunksize  Size of chunks to read	 * @param   integer  $offset     Offset of the file	 *	 * @return  mixed  Returns file contents or boolean False if failed	 *	 * @since   11.1	 * @deprecated  13.3  Use the native file_get_contents() instead.	 */	public static function read($filename, $incpath = false, $amount = 0, $chunksize = 8192, $offset = 0)	{		JLog::add(__METHOD__ . ' is deprecated. Use native file_get_contents() syntax.', JLog::WARNING, 'deprecated');		$data = null;		if ($amount && $chunksize > $amount)		{			$chunksize = $amount;		}		if (false === $fh = fopen($filename, 'rb', $incpath))		{			JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_READ_UNABLE_TO_OPEN_FILE', $filename), JLog::WARNING, 'jerror');			return false;		}		clearstatcache();		if ($offset)		{			fseek($fh, $offset);		}		if ($fsize = @ filesize($filename))		{			if ($amount && $fsize > $amount)			{				$data = fread($fh, $amount);			}			else			{				$data = fread($fh, $fsize);			}		}		else		{			$data = '';			/*			 * While it's:			 * 1: Not the end of the file AND			 * 2a: No Max Amount set OR			 * 2b: The length of the data is less than the max amount we want			 */			while (!feof($fh) && (!$amount || strlen($data) < $amount))			{				$data .= fread($fh, $chunksize);			}		}		fclose($fh);		return $data;	}	/**	 * Write contents to a file	 *	 * @param   string   $file         The full file path	 * @param   string   &$buffer      The buffer to write	 * @param   boolean  $use_streams  Use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function write($file, &$buffer, $use_streams = false)	{		@set_time_limit(ini_get('max_execution_time'));		// If the destination directory doesn't exist we need to create it		if (!file_exists(dirname($file)))		{			jimport('joomla.filesystem.folder');			JFolder::create(dirname($file));		}		if ($use_streams)		{			$stream = JFactory::getStream();			// Beef up the chunk size to a meg			$stream->set('chunksize', (1024 * 1024 * 1024));			if (!$stream->writeFile($file, $buffer))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_WRITE_STREAMS', $file, $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// Translate path for the FTP account and use FTP write buffer to file				$file = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $file), '/');				$ret = $ftp->write($file, $buffer);			}			else			{				$file = JPath::clean($file);				$ret = is_int(file_put_contents($file, $buffer)) ? true : false;			}			return $ret;		}	}	/**	 * Moves an uploaded file to a destination folder	 *	 * @param   string   $src          The name of the php (temporary) uploaded file	 * @param   string   $dest         The path (including filename) to move the uploaded file to	 * @param   boolean  $use_streams  True to use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function upload($src, $dest, $use_streams = false)	{		// Ensure that the path is valid and clean		$dest = JPath::clean($dest);		// Create the destination directory if it does not exist		$baseDir = dirname($dest);		if (!file_exists($baseDir))		{			jimport('joomla.filesystem.folder');			JFolder::create($baseDir);		}		if ($use_streams)		{			$stream = JFactory::getStream();			if (!$stream->upload($src, $dest))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_UPLOAD', $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			$ret = false;			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// Translate path for the FTP account				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $dest), '/');				// Copy the file to the destination directory				if (is_uploaded_file($src) && $ftp->store($src, $dest))				{					unlink($src);					$ret = true;				}				else				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_WARNFS_ERR02'), JLog::WARNING, 'jerror');				}			}			else			{				if (is_writeable($baseDir) && move_uploaded_file($src, $dest))				{					// Short circuit to prevent file permission errors					if (JPath::setPermissions($dest))					{						$ret = true;					}					else					{						JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_WARNFS_ERR01'), JLog::WARNING, 'jerror');					}				}				else				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_WARNFS_ERR02'), JLog::WARNING, 'jerror');				}			}			return $ret;		}	}	/**	 * Wrapper for the standard file_exists function	 *	 * @param   string  $file  File path	 *	 * @return  boolean  True if path is a file	 *	 * @since   11.1	 */	public static function exists($file)	{		return is_file(JPath::clean($file));	}	/**	 * Returns the name, without any path.	 *	 * @param   string  $file  File path	 *	 * @return  string  filename	 *	 * @since   11.1	 * @deprecated  13.3 Use basename() instead.	 */	public static function getName($file)	{		JLog::add(__METHOD__ . ' is deprecated. Use native basename() syntax.', JLog::WARNING, 'deprecated');		// Convert back slashes to forward slashes		$file = str_replace('\\', '/', $file);		$slash = strrpos($file, '/');		if ($slash !== false)		{			return substr($file, $slash + 1);		}		else		{			return $file;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// PHP mbstring and iconv local configuration// Check if mbstring extension is loaded and attempt to load it if not present except for windowsif (extension_loaded('mbstring')){	// Make sure to suppress the output in case ini_set is disabled	@ini_set('mbstring.internal_encoding', 'UTF-8');	@ini_set('mbstring.http_input', 'UTF-8');	@ini_set('mbstring.http_output', 'UTF-8');}// Same for iconvif (function_exists('iconv')){	// These are settings that can be set inside code	iconv_set_encoding("internal_encoding", "UTF-8");	iconv_set_encoding("input_encoding", "UTF-8");	iconv_set_encoding("output_encoding", "UTF-8");}/** * Include the utf8 package */jimport('phputf8.utf8');jimport('phputf8.strcasecmp');/** * String handling class for utf-8 data * Wraps the phputf8 library * All functions assume the validity of utf-8 strings. * * @package     Joomla.Platform * @subpackage  String * @since       11.1 */abstract class JString{	/**	 * Increment styles.	 *	 * @var    array	 * @since  11.3	 */	protected static $incrementStyles = array(		'dash' => array(			'#-(\d+)$#',			'-%d'		),		'default' => array(			array('#\((\d+)\)$#', '#\(\d+\)$#'),			array(' (%d)', '(%d)'),		),	);	/**	 * Split a string in camel case format	 *	 * "FooBarABCDef"            becomes  array("Foo", "Bar", "ABC", "Def");	 * "JFooBar"                 becomes  array("J", "Foo", "Bar");	 * "J001FooBar002"           becomes  array("J001", "Foo", "Bar002");	 * "abcDef"                  becomes  array("abc", "Def");	 * "abc_defGhi_Jkl"          becomes  array("abc_def", "Ghi_Jkl");	 * "ThisIsA_NASAAstronaut"   becomes  array("This", "Is", "A_NASA", "Astronaut")),	 * "JohnFitzgerald_Kennedy"  becomes  array("John", "Fitzgerald_Kennedy")),	 *	 * @param   string  $string  The source string.	 *	 * @return  array   The splitted string.	 *	 * @deprecated  12.3 Use JStringNormalise::fromCamelCase()	 * @since   11.3	 */	public static function splitCamelCase($string)	{		JLog::add('JString::splitCamelCase has been deprecated. Use JStringNormalise::fromCamelCase.', JLog::WARNING, 'deprecated');		return JStringNormalise::fromCamelCase($string, true);	}	/**	 * Increments a trailing number in a string.	 *	 * Used to easily create distinct labels when copying objects. The method has the following styles:	 *	 * default: "Label" becomes "Label (2)"	 * dash:    "Label" becomes "Label-2"	 *	 * @param   string   $string  The source string.	 * @param   string   $style   The the style (default|dash).	 * @param   integer  $n       If supplied, this number is used for the copy, otherwise it is the 'next' number.	 *	 * @return  string  The incremented string.	 *	 * @since   11.3	 */	public static function increment($string, $style = 'default', $n = 0)	{		$styleSpec = isset(self::$incrementStyles[$style]) ? self::$incrementStyles[$style] : self::$incrementStyles['default'];		// Regular expression search and replace patterns.		if (is_array($styleSpec[0]))		{			$rxSearch = $styleSpec[0][0];			$rxReplace = $styleSpec[0][1];		}		else		{			$rxSearch = $rxReplace = $styleSpec[0];		}		// New and old (existing) sprintf formats.		if (is_array($styleSpec[1]))		{			$newFormat = $styleSpec[1][0];			$oldFormat = $styleSpec[1][1];		}		else		{			$newFormat = $oldFormat = $styleSpec[1];		}		// Check if we are incrementing an existing pattern, or appending a new one.		if (preg_match($rxSearch, $string, $matches))		{			$n = empty($n) ? ($matches[1] + 1) : $n;			$string = preg_replace($rxReplace, sprintf($oldFormat, $n), $string);		}		else		{			$n = empty($n) ? 2 : $n;			$string .= sprintf($newFormat, $n);		}		return $string;	}	/**	 * UTF-8 aware alternative to strpos.	 *	 * Find position of first occurrence of a string.	 *	 * @param   string   $str     String being examined	 * @param   string   $search  String being searched for	 * @param   integer  $offset  Optional, specifies the position from which the search should be performed	 *	 * @return  mixed  Number of characters before the first match or FALSE on failure	 *	 * @see     http://www.php.net/strpos	 * @since   11.1	 */	public static function strpos($str, $search, $offset = false)	{		if ($offset === false)		{			return utf8_strpos($str, $search);		}		else		{			return utf8_strpos($str, $search, $offset);		}	}	/**	 * UTF-8 aware alternative to strrpos	 * Finds position of last occurrence of a string	 *	 * @param   string   $str     String being examined.	 * @param   string   $search  String being searched for.	 * @param   integer  $offset  Offset from the left of the string.	 *	 * @return  mixed  Number of characters before the last match or false on failure	 *	 * @see     http://www.php.net/strrpos	 * @since   11.1	 */	public static function strrpos($str, $search, $offset = 0)	{		return utf8_strrpos($str, $search, $offset);	}	/**	 * UTF-8 aware alternative to substr	 * Return part of a string given character offset (and optionally length)	 *	 * @param   string   $str     String being processed	 * @param   integer  $offset  Number of UTF-8 characters offset (from left)	 * @param   integer  $length  Optional length in UTF-8 characters from offset	 *	 * @return  mixed string or FALSE if failure	 *	 * @see     http://www.php.net/substr	 * @since   11.1	 */	public static function substr($str, $offset, $length = false)	{		if ($length === false)		{			return utf8_substr($str, $offset);		}		else		{			return utf8_substr($str, $offset, $length);		}	}	/**	 * UTF-8 aware alternative to strtlower	 *	 * Make a string lowercase	 * Note: The concept of a characters "case" only exists is some alphabets	 * such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	 * not exist in the Chinese alphabet, for example. See Unicode Standard	 * Annex #21: Case Mappings	 *	 * @param   string  $str  String being processed	 *	 * @return  mixed  Either string in lowercase or FALSE is UTF-8 invalid	 *	 * @see http://www.php.net/strtolower	 * @since   11.1	 */	public static function strtolower($str)	{		return utf8_strtolower($str);	}	/**	 * UTF-8 aware alternative to strtoupper	 * Make a string uppercase	 * Note: The concept of a characters "case" only exists is some alphabets	 * such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	 * not exist in the Chinese alphabet, for example. See Unicode Standard	 * Annex #21: Case Mappings	 *	 * @param   string  $str  String being processed	 *	 * @return  mixed  Either string in uppercase or FALSE is UTF-8 invalid	 *	 * @see     http://www.php.net/strtoupper	 * @since   11.1	 */	public static function strtoupper($str)	{		return utf8_strtoupper($str);	}	/**	 * UTF-8 aware alternative to strlen.	 *	 * Returns the number of characters in the string (NOT THE NUMBER OF BYTES),	 *	 * @param   string  $str  UTF-8 string.	 *	 * @return  integer  Number of UTF-8 characters in string.	 *	 * @see http://www.php.net/strlen	 * @since   11.1	 */	public static function strlen($str)	{		return utf8_strlen($str);	}	/**	 * UTF-8 aware alternative to str_ireplace	 * Case-insensitive version of str_replace	 *	 * @param   string   $search   String to search	 * @param   string   $replace  Existing string to replace	 * @param   string   $str      New string to replace with	 * @param   integer  $count    Optional count value to be passed by referene	 *	 * @return  string  UTF-8 String	 *	 * @see     http://www.php.net/str_ireplace	 * @since   11.1	 */	public static function str_ireplace($search, $replace, $str, $count = null)	{		jimport('phputf8.str_ireplace');		if ($count === false)		{			return utf8_ireplace($search, $replace, $str);		}		else		{			return utf8_ireplace($search, $replace, $str, $count);		}	}	/**	 * UTF-8 aware alternative to str_split	 * Convert a string to an array	 *	 * @param   string   $str        UTF-8 encoded string to process	 * @param   integer  $split_len  Number to characters to split string by	 *	 * @return  array	 *	 * @see     http://www.php.net/str_split	 * @since   11.1	 */	public static function str_split($str, $split_len = 1)	{		jimport('phputf8.str_split');		return utf8_str_split($str, $split_len);	}	/**	 * UTF-8/LOCALE aware alternative to strcasecmp	 * A case insensitive string comparison	 *	 * @param   string  $str1    string 1 to compare	 * @param   string  $str2    string 2 to compare	 * @param   mixed   $locale  The locale used by strcoll or false to use classical comparison	 *	 * @return  integer   < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.	 *	 * @see     http://www.php.net/strcasecmp	 * @see     http://www.php.net/strcoll	 * @see     http://www.php.net/setlocale	 * @since   11.1	 */	public static function strcasecmp($str1, $str2, $locale = false)	{		if ($locale)		{			// Get current locale			$locale0 = setlocale(LC_COLLATE, 0);			if (!$locale = setlocale(LC_COLLATE, $locale))			{				$locale = $locale0;			}			// See if we have successfully set locale to UTF-8			if (!stristr($locale, 'UTF-8') && stristr($locale, '_') && preg_match('~\.(\d+)$~', $locale, $m))			{				$encoding = 'CP' . $m[1];			}			elseif (stristr($locale, 'UTF-8') || stristr($locale, 'utf8'))			{				$encoding = 'UTF-8';			}			else			{				$encoding = 'nonrecodable';			}			// If we successfully set encoding it to utf-8 or encoding is sth weird don't recode			if ($encoding == 'UTF-8' || $encoding == 'nonrecodable')			{				return strcoll(utf8_strtolower($str1), utf8_strtolower($str2));			}			else			{				return strcoll(					self::transcode(utf8_strtolower($str1), 'UTF-8', $encoding),					self::transcode(utf8_strtolower($str2), 'UTF-8', $encoding)				);			}		}		else		{			return utf8_strcasecmp($str1, $str2);		}	}	/**	 * UTF-8/LOCALE aware alternative to strcmp	 * A case sensitive string comparison	 *	 * @param   string  $str1    string 1 to compare	 * @param   string  $str2    string 2 to compare	 * @param   mixed   $locale  The locale used by strcoll or false to use classical comparison	 *	 * @return  integer  < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.	 *	 * @see     http://www.php.net/strcmp	 * @see     http://www.php.net/strcoll	 * @see     http://www.php.net/setlocale	 * @since   11.1	 */	public static function strcmp($str1, $str2, $locale = false)	{		if ($locale)		{			// Get current locale			$locale0 = setlocale(LC_COLLATE, 0);			if (!$locale = setlocale(LC_COLLATE, $locale))			{				$locale = $locale0;			}			// See if we have successfully set locale to UTF-8			if (!stristr($locale, 'UTF-8') && stristr($locale, '_') && preg_match('~\.(\d+)$~', $locale, $m))			{				$encoding = 'CP' . $m[1];			}			elseif (stristr($locale, 'UTF-8') || stristr($locale, 'utf8'))			{				$encoding = 'UTF-8';			}			else			{				$encoding = 'nonrecodable';			}			// If we successfully set encoding it to utf-8 or encoding is sth weird don't recode			if ($encoding == 'UTF-8' || $encoding == 'nonrecodable')			{				return strcoll($str1, $str2);			}			else			{				return strcoll(self::transcode($str1, 'UTF-8', $encoding), self::transcode($str2, 'UTF-8', $encoding));			}		}		else		{			return strcmp($str1, $str2);		}	}	/**	 * UTF-8 aware alternative to strcspn	 * Find length of initial segment not matching mask	 *	 * @param   string   $str     The string to process	 * @param   string   $mask    The mask	 * @param   integer  $start   Optional starting character position (in characters)	 * @param   integer  $length  Optional length	 *	 * @return  integer  The length of the initial segment of str1 which does not contain any of the characters in str2	 *	 * @see     http://www.php.net/strcspn	 * @since   11.1	 */	public static function strcspn($str, $mask, $start = null, $length = null)	{		jimport('phputf8.strcspn');		if ($start === false && $length === false)		{			return utf8_strcspn($str, $mask);		}		elseif ($length === false)		{			return utf8_strcspn($str, $mask, $start);		}		else		{			return utf8_strcspn($str, $mask, $start, $length);		}	}	/**	 * UTF-8 aware alternative to stristr	 * Returns all of haystack from the first occurrence of needle to the end.	 * needle and haystack are examined in a case-insensitive manner	 * Find first occurrence of a string using case insensitive comparison	 *	 * @param   string  $str     The haystack	 * @param   string  $search  The needle	 *	 * @return string the sub string	 *	 * @see     http://www.php.net/stristr	 * @since   11.1	 */	public static function stristr($str, $search)	{		jimport('phputf8.stristr');		return utf8_stristr($str, $search);	}	/**	 * UTF-8 aware alternative to strrev	 * Reverse a string	 *	 * @param   string  $str  String to be reversed	 *	 * @return  string   The string in reverse character order	 *	 * @see     http://www.php.net/strrev	 * @since   11.1	 */	public static function strrev($str)	{		jimport('phputf8.strrev');		return utf8_strrev($str);	}	/**	 * UTF-8 aware alternative to strspn	 * Find length of initial segment matching mask	 *	 * @param   string   $str     The haystack	 * @param   string   $mask    The mask	 * @param   integer  $start   Start optional	 * @param   integer  $length  Length optional	 *	 * @return  integer	 *	 * @see     http://www.php.net/strspn	 * @since   11.1	 */	public static function strspn($str, $mask, $start = null, $length = null)	{		jimport('phputf8.strspn');		if ($start === null && $length === null)		{			return utf8_strspn($str, $mask);		}		elseif ($length === null)		{			return utf8_strspn($str, $mask, $start);		}		else		{			return utf8_strspn($str, $mask, $start, $length);		}	}	/**	 * UTF-8 aware substr_replace	 * Replace text within a portion of a string	 *	 * @param   string   $str     The haystack	 * @param   string   $repl    The replacement string	 * @param   integer  $start   Start	 * @param   integer  $length  Length (optional)	 *	 * @return  string	 *	 * @see     http://www.php.net/substr_replace	 * @since   11.1	 */	public static function substr_replace($str, $repl, $start, $length = null)	{		// Loaded by library loader		if ($length === false)		{			return utf8_substr_replace($str, $repl, $start);		}		else		{			return utf8_substr_replace($str, $repl, $start, $length);		}	}	/**	 * UTF-8 aware replacement for ltrim()	 *	 * Strip whitespace (or other characters) from the beginning of a string	 * You only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise ltrim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/ltrim	 * @since   11.1	 */	public static function ltrim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_ltrim($str);		}		else		{			return utf8_ltrim($str, $charlist);		}	}	/**	 * UTF-8 aware replacement for rtrim()	 * Strip whitespace (or other characters) from the end of a string	 * You only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise rtrim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/rtrim	 * @since   11.1	 */	public static function rtrim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_rtrim($str);		}		else		{			return utf8_rtrim($str, $charlist);		}	}	/**	 * UTF-8 aware replacement for trim()	 * Strip whitespace (or other characters) from the beginning and end of a string	 * Note: you only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise trim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/trim	 * @since   11.1	 */	public static function trim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_trim($str);		}		else		{			return utf8_trim($str, $charlist);		}	}	/**	 * UTF-8 aware alternative to ucfirst	 * Make a string's first character uppercase or all words' first character uppercase	 *	 * @param   string  $str           String to be processed	 * @param   string  $delimiter     The words delimiter (null means do not split the string)	 * @param   string  $newDelimiter  The new words delimiter (null means equal to $delimiter)	 *	 * @return  string  If $delimiter is null, return the string with first character as upper case (if applicable)	 *                  else consider the string of words separated by the delimiter, apply the ucfirst to each words	 *                  and return the string with the new delimiter	 *	 * @see     http://www.php.net/ucfirst	 * @since   11.1	 */	public static function ucfirst($str, $delimiter = null, $newDelimiter = null)	{		jimport('phputf8.ucfirst');		if ($delimiter === null)		{			return utf8_ucfirst($str);		}		else		{			if ($newDelimiter === null)			{				$newDelimiter = $delimiter;			}			return implode($newDelimiter, array_map('utf8_ucfirst', explode($delimiter, $str)));		}	}	/**	 * UTF-8 aware alternative to ucwords	 * Uppercase the first character of each word in a string	 *	 * @param   string  $str  String to be processed	 *	 * @return  string  String with first char of each word uppercase	 *	 * @see     http://www.php.net/ucwords	 * @since   11.1	 */	public static function ucwords($str)	{		jimport('phputf8.ucwords');		return utf8_ucwords($str);	}	/**	 * Transcode a string.	 *	 * @param   string  $source         The string to transcode.	 * @param   string  $from_encoding  The source encoding.	 * @param   string  $to_encoding    The target encoding.	 *	 * @return  mixed  The transcoded string, or null if the source was not a string.	 *	 * @link    https://bugs.php.net/bug.php?id=48147	 *	 * @since   11.1	 */	public static function transcode($source, $from_encoding, $to_encoding)	{		if (is_string($source))		{			switch (ICONV_IMPL)			{				case 'glibc':				return @iconv($from_encoding, $to_encoding . '//TRANSLIT,IGNORE', $source);				case 'libiconv':				default:				return iconv($from_encoding, $to_encoding . '//IGNORE//TRANSLIT', $source);			}		}		return null;	}	/**	 * Tests a string as to whether it's valid UTF-8 and supported by the Unicode standard.	 *	 * Note: this function has been modified to simple return true or false.	 *	 * @param   string  $str  UTF-8 encoded string.	 *	 * @return  boolean  true if valid	 *	 * @author  <hsivonen@iki.fi>	 * @see     http://hsivonen.iki.fi/php-utf8/	 * @see     compliant	 * @since   11.1	 */	public static function valid($str)	{		// Cached expected number of octets after the current octet		// until the beginning of the next UTF8 character sequence		$mState = 0;		// Cached Unicode character		$mUcs4 = 0;		// Cached expected number of octets in the current sequence		$mBytes = 1;		$len = strlen($str);		for ($i = 0; $i < $len; $i++)		{			$in = ord($str{$i});			if ($mState == 0)			{				// When mState is zero we expect either a US-ASCII character or a				// multi-octet sequence.				if (0 == (0x80 & ($in)))				{					// US-ASCII, pass straight through.					$mBytes = 1;				}				elseif (0xC0 == (0xE0 & ($in)))				{					// First octet of 2 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x1F) << 6;					$mState = 1;					$mBytes = 2;				}				elseif (0xE0 == (0xF0 & ($in)))				{					// First octet of 3 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x0F) << 12;					$mState = 2;					$mBytes = 3;				}				elseif (0xF0 == (0xF8 & ($in)))				{					// First octet of 4 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x07) << 18;					$mState = 3;					$mBytes = 4;				}				elseif (0xF8 == (0xFC & ($in)))				{					/* First octet of 5 octet sequence.					 *					 * This is illegal because the encoded codepoint must be either					 * (a) not the shortest form or					 * (b) outside the Unicode range of 0-0x10FFFF.					 * Rather than trying to resynchronize, we will carry on until the end					 * of the sequence and let the later error handling code catch it.					 */					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x03) << 24;					$mState = 4;					$mBytes = 5;				}				elseif (0xFC == (0xFE & ($in)))				{					// First octet of 6 octet sequence, see comments for 5 octet sequence.					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 1) << 30;					$mState = 5;					$mBytes = 6;				}				else				{					/* Current octet is neither in the US-ASCII range nor a legal first					 * octet of a multi-octet sequence.					 */					return false;				}			}			else			{				// When mState is non-zero, we expect a continuation of the multi-octet				// sequence				if (0x80 == (0xC0 & ($in)))				{					// Legal continuation.					$shift = ($mState - 1) * 6;					$tmp = $in;					$tmp = ($tmp & 0x0000003F) << $shift;					$mUcs4 |= $tmp;					/**					 * End of the multi-octet sequence. mUcs4 now contains the final					 * Unicode codepoint to be output					 */					if (0 == --$mState)					{						/*						 * Check for illegal sequences and codepoints.						 */						// From Unicode 3.1, non-shortest form is illegal						if (((2 == $mBytes) && ($mUcs4 < 0x0080)) || ((3 == $mBytes) && ($mUcs4 < 0x0800)) || ((4 == $mBytes) && ($mUcs4 < 0x10000))							|| (4 < $mBytes)							|| (($mUcs4 & 0xFFFFF800) == 0xD800) // From Unicode 3.2, surrogate characters are illegal							|| ($mUcs4 > 0x10FFFF)) // Codepoints outside the Unicode range are illegal						{							return false;						}						// Initialize UTF8 cache.						$mState = 0;						$mUcs4 = 0;						$mBytes = 1;					}				}				else				{					/**					 *((0xC0 & (*in) != 0x80) && (mState != 0))					 * Incomplete multi-octet sequence.					 */					return false;				}			}		}		return true;	}	/**	 * Tests whether a string complies as UTF-8. This will be much	 * faster than utf8_is_valid but will pass five and six octet	 * UTF-8 sequences, which are not supported by Unicode and	 * so cannot be displayed correctly in a browser. In other words	 * it is not as strict as utf8_is_valid but it's faster. If you use	 * it to validate user input, you place yourself at the risk that	 * attackers will be able to inject 5 and 6 byte sequences (which	 * may or may not be a significant risk, depending on what you are	 * are doing)	 *	 * @param   string  $str  UTF-8 string to check	 *	 * @return  boolean  TRUE if string is valid UTF-8	 *	 * @see     valid	 * @see     http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#54805	 * @since   11.1	 */	public static function compliant($str)	{		if (strlen($str) == 0)		{			return true;		}		/*		 * If even just the first character can be matched, when the /u		 * modifier is used, then it's valid UTF-8. If the UTF-8 is somehow		 * invalid, nothing at all will match, even if the string contains		 * some valid sequences		 */		return (preg_match('/^.{1}/us', $str, $ar) == 1);	}	/**	 * Does a UTF-8 safe version of PHP parse_url function	 *	 * @param   string  $url  URL to parse	 *	 * @return  mixed  Associative array or false if badly formed URL.	 *	 * @see     http://us3.php.net/manual/en/function.parse-url.php	 * @since   11.1	 */	public static function parse_url($url)	{		$result = false;		// Build arrays of values we need to decode before parsing		$entities = array('%21', '%2A', '%27', '%28', '%29', '%3B', '%3A', '%40', '%26', '%3D', '%24', '%2C', '%2F', '%3F', '%23', '%5B', '%5D');		$replacements = array('!', '*', "'", "(", ")", ";", ":", "@", "&", "=", "$", ",", "/", "?", "#", "[", "]");		// Create encoded URL with special URL characters decoded so it can be parsed		// All other characters will be encoded		$encodedURL = str_replace($entities, $replacements, urlencode($url));		// Parse the encoded URL		$encodedParts = parse_url($encodedURL);		// Now, decode each value of the resulting array		if ($encodedParts)		{			foreach ($encodedParts as $key => $value)			{				$result[$key] = urldecode(str_replace($replacements, $entities, $value));			}		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');/** * An Archive handling class * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchive{	/**	 * @var    array  The array of instantiated archive adapters.	 * @since  12.1	 */	protected static $adapters = array();	/**	 * Extract an archive file to a directory.	 *	 * @param   string  $archivename  The name of the archive file	 * @param   string  $extractdir   Directory to unpack into	 *	 * @return  boolean  True for success	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public static function extract($archivename, $extractdir)	{		$untar = false;		$result = false;		$ext = JFile::getExt(strtolower($archivename));		// Check if a tar is embedded...gzip/bzip2 can just be plain files!		if (JFile::getExt(JFile::stripExt(strtolower($archivename))) == 'tar')		{			$untar = true;		}		switch ($ext)		{			case 'zip':				$adapter = self::getAdapter('zip');				if ($adapter)				{					$result = $adapter->extract($archivename, $extractdir);				}				break;			case 'tar':				$adapter = self::getAdapter('tar');				if ($adapter)				{					$result = $adapter->extract($archivename, $extractdir);				}				break;			case 'tgz':				// This format is a tarball gzip'd				$untar = true;			case 'gz':			case 'gzip':				// This may just be an individual file (e.g. sql script)				$adapter = self::getAdapter('gzip');				if ($adapter)				{					$config = JFactory::getConfig();					$tmpfname = $config->get('tmp_path') . '/' . uniqid('gzip');					$gzresult = $adapter->extract($archivename, $tmpfname);					if ($gzresult instanceof Exception)					{						@unlink($tmpfname);						return false;					}					if ($untar)					{						// Try to untar the file						$tadapter = self::getAdapter('tar');						if ($tadapter)						{							$result = $tadapter->extract($tmpfname, $extractdir);						}					}					else					{						$path = JPath::clean($extractdir);						JFolder::create($path);						$result = JFile::copy($tmpfname, $path . '/' . JFile::stripExt(basename(strtolower($archivename))), null, 1);					}					@unlink($tmpfname);				}				break;			case 'tbz2':				// This format is a tarball bzip2'd				$untar = true;			case 'bz2':			case 'bzip2':				// This may just be an individual file (e.g. sql script)				$adapter = self::getAdapter('bzip2');				if ($adapter)				{					$config = JFactory::getConfig();					$tmpfname = $config->get('tmp_path') . '/' . uniqid('bzip2');					$bzresult = $adapter->extract($archivename, $tmpfname);					if ($bzresult instanceof Exception)					{						@unlink($tmpfname);						return false;					}					if ($untar)					{						// Try to untar the file						$tadapter = self::getAdapter('tar');						if ($tadapter)						{							$result = $tadapter->extract($tmpfname, $extractdir);						}					}					else					{						$path = JPath::clean($extractdir);						JFolder::create($path);						$result = JFile::copy($tmpfname, $path . '/' . JFile::stripExt(basename(strtolower($archivename))), null, 1);					}					@unlink($tmpfname);				}				break;			default:				throw new InvalidArgumentException('Unknown Archive Type');		}		if (!$result || $result instanceof Exception)		{			return false;		}		return true;	}	/**	 * Get a file compression adapter.	 *	 * @param   string  $type  The type of adapter (bzip2|gzip|tar|zip).	 *	 * @return  object  JArchiveExtractable	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public static function getAdapter($type)	{		if (!isset(self::$adapters[$type]))		{			// Try to load the adapter object			$class = 'JArchive' . ucfirst($type);			if (!class_exists($class))			{				throw new UnexpectedValueException('Unable to load archive', 500);			}			self::$adapters[$type] = new $class;		}		return self::$adapters[$type];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-params');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>	<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>		<?php endforeach; ?>	</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/route.php';$controller = JControllerLegacy::getInstance('Finder');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('JHtmlUsers', JPATH_COMPONENT . '/helpers/html/users.php');JHtml::register('users.spacer', array('JHtmlUsers', 'spacer'));JHtml::register('users.helpsite', array('JHtmlUsers', 'helpsite'));JHtml::register('users.templatestyle', array('JHtmlUsers', 'templatestyle'));JHtml::register('users.admin_language', array('JHtmlUsers', 'admin_language'));JHtml::register('users.language', array('JHtmlUsers', 'language'));JHtml::register('users.editor', array('JHtmlUsers', 'editor'));?><?php $fields = $this->form->getFieldset('params'); ?><?php if (count($fields)) : ?><fieldset id="users-profile-custom">	<legend><?php echo JText::_('COM_USERS_SETTINGS_FIELDSET_LABEL'); ?></legend>	<dl class="dl-horizontal">	<?php foreach ($fields as $field):		if (!$field->hidden) :?>		<dt><?php echo $field->title; ?></dt>		<dd>			<?php if (JHtml::isRegistered('users.'.$field->id)):?>				<?php echo JHtml::_('users.'.$field->id, $field->value);?>			<?php elseif (JHtml::isRegistered('users.'.$field->fieldname)):?>				<?php echo JHtml::_('users.'.$field->fieldname, $field->value);?>			<?php elseif (JHtml::isRegistered('users.'.$field->type)):?>				<?php echo JHtml::_('users.'.$field->type, $field->value);?>			<?php else:?>				<?php echo JHtml::_('users.value', $field->value);?>			<?php endif;?>		</dd>		<?php endif;?>	<?php endforeach;?>	</dl></fieldset><?php endif;?>
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto */abstract class MailtoHelper{	/**	 * Adds a URL to the mailto system and returns the hash	 *	 * @param string url	 * @return URL hash	 */	public static function addLink($url)	{		$hash = sha1($url);		self::cleanHashes();		$session = JFactory::getSession();		$mailto_links = $session->get('com_mailto.links', array());		if (!isset($mailto_links[$hash]))		{			$mailto_links[$hash] = new stdClass;		}		$mailto_links[$hash]->link = $url;		$mailto_links[$hash]->expiry = time();		$session->set('com_mailto.links', $mailto_links);		return $hash;	}	/**	 * Checks if a URL is a Flash file	 *	 * @param string	 * @return URL	 */	public static function validateHash($hash)	{		$retval = false;		$session = JFactory::getSession();		self::cleanHashes();		$mailto_links = $session->get('com_mailto.links', array());		if (isset($mailto_links[$hash]))		{			$retval = $mailto_links[$hash]->link;		}		return $retval;	}	/**	 * Cleans out old hashes	 *	 * @since 1.6.1	 */	public static function cleanHashes($lifetime = 1440)	{		// flag for if we've cleaned on this cycle		static $cleaned = false;		if (!$cleaned)		{			$past = time() - $lifetime;			$session = JFactory::getSession();			$mailto_links = $session->get('com_mailto.links', array());			foreach ($mailto_links as $index => $link)			{				if ($link->expiry < $past)				{					unset($mailto_links[$index]);				}			}			$session->set('com_mailto.links', $mailto_links);			$cleaned = true;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extension Manager Templates Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelWarnings extends JModelList{	/**	 * Extension Type	 * @var	string	 */	public $type = 'warnings';	/**	 * Return the byte value of a particular string.	 *	 * @param   string  $val  String optionally with G, M or K suffix	 *	 * @return  integer   size in bytes	 *	 * @since 1.6	 */	public function return_bytes($val)	{		$val = trim($val);		$last = strtolower($val{strlen($val) - 1});		switch ($last)		{			// The 'G' modifier is available since PHP 5.1.0			case 'g':				$val *= 1024;			case 'm':				$val *= 1024;			case 'k':				$val *= 1024;		}		return $val;	}	/**	 * Load the data.	 *	 * @return  array  Messages	 *	 * @since   1.6	 */	public function getItems()	{		static $messages;		if ($messages)		{			return $messages;		}		$messages = array();		$file_uploads = ini_get('file_uploads');		if (!$file_uploads)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADSDISABLED'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADISDISABLEDDESC'));		}		$upload_dir = ini_get('upload_tmp_dir');		if (!$upload_dir)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSETDESC'));		}		else		{			if (!is_writeable($upload_dir))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLEDESC', $upload_dir));			}		}		$config = JFactory::getConfig();		$tmp_path = $config->get('tmp_path');		if (!$tmp_path)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSETDESC'));		}		else		{			if (!is_writeable($tmp_path))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLEDESC', $tmp_path));			}		}		$memory_limit = $this->return_bytes(ini_get('memory_limit'));		if ($memory_limit < (8 * 1024 * 1024))		{			// 8MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYDESC'));		}		elseif ($memory_limit < (16 * 1024 * 1024))		{			// 16MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYDESC'));		}		$post_max_size = $this->return_bytes(ini_get('post_max_size'));		$upload_max_filesize = $this->return_bytes(ini_get('upload_max_filesize'));		if ($post_max_size < $upload_max_filesize)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOST'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOSTDESC'));		}		if ($post_max_size < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZEDESC'));		}		if ($upload_max_filesize < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZEDESC'));		}		return $messages;	}}
<?php/** * Verifies that class members have scope modifiers. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MemberVarScopeSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if(class_exists('PHP_CodeSniffer_Standards_AbstractVariableSniff', true) === false){    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractVariableSniff not found');}/** * Verifies that class members have scope modifiers. * * Example: * class Foo * { *     <b class="good">private $foo</b> *     <b class="bad">var $foo</b> * } * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Classes_MemberVarScopeSniff extends PHP_CodeSniffer_Standards_AbstractVariableSniff{    /**     * Processes the function tokens within the class.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processMemberVar(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $modifier = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$scopeModifiers, $stackPtr);        if(($modifier === false) || ($tokens[$modifier]['line'] !== $tokens[$stackPtr]['line']))        {            $error = sprintf('Scope modifier not specified for member variable "%s"'            , $tokens[$stackPtr]['content']);            $phpcsFile->addWarning($error, $stackPtr, 'Missing');        }    }//function    /**     * Processes normal variables.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processVariable(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function    /**     * Processes variables in double quoted strings.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processVariableInString(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function}//class
<?php/** * @package     Joomla.Plugin * @subpackage  Authentication.ldap * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * LDAP Authentication Plugin * * @package     Joomla.Plugin * @subpackage  Authentication.ldap * @since       1.5 */class PlgAuthenticationLdap extends JPlugin{	/**	 * This method should handle any authentication and report back to the subject	 *	 * @access	public	 * @param   array  $credentials Array holding the user credentials	 * @param   array   $options	Array of extra options	 * @param   object	$response	Authentication response object	 * @return  object  boolean	 * @since 1.5	 */	public function onUserAuthenticate($credentials, $options, &$response)	{		$userdetails = null;		$success = 0;		$userdetails = array();		// For JLog		$response->type = 'LDAP';		// LDAP does not like Blank passwords (tries to Anon Bind which is bad)		if (empty($credentials['password']))		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_PASS_BLANK');			return false;		}		// load plugin params info		$ldap_email		= $this->params->get('ldap_email');		$ldap_fullname	= $this->params->get('ldap_fullname');		$ldap_uid		= $this->params->get('ldap_uid');		$auth_method	= $this->params->get('auth_method');		$ldap = new JClientLdap($this->params);		if (!$ldap->connect())		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_NO_CONNECT');			return;		}		switch($auth_method)		{			case 'search':			{				// Bind using Connect Username/password				// Force anon bind to mitigate misconfiguration like [#7119]				if (strlen($this->params->get('username')))				{					$bindtest = $ldap->bind();				}				else				{					$bindtest = $ldap->anonymous_bind();				}				if ($bindtest)				{					// Search for users DN					$binddata = $ldap->simple_search(str_replace("[search]", $credentials['username'], $this->params->get('search_string')));					if (isset($binddata[0]) && isset($binddata[0]['dn']))					{						// Verify Users Credentials						$success = $ldap->bind($binddata[0]['dn'], $credentials['password'], 1);						// Get users details						$userdetails = $binddata;					} else {						$response->status = JAuthentication::STATUS_FAILURE;						$response->error_message = JText::_('JGLOBAL_AUTH_USER_NOT_FOUND');					}				}				else				{					$response->status = JAuthentication::STATUS_FAILURE;					$response->error_message = JText::_('JGLOBAL_AUTH_NO_BIND');				}			}	break;			case 'bind':			{				// We just accept the result here				$success = $ldap->bind($credentials['username'], $credentials['password']);				if ($success)				{					$userdetails = $ldap->simple_search(str_replace("[search]", $credentials['username'], $this->params->get('search_string')));				} else {					$response->status = JAuthentication::STATUS_FAILURE;					$response->error_message = JText::_('JGLOBAL_AUTH_BIND_FAILED');				}			}	break;		}		if (!$success)		{			$response->status = JAuthentication::STATUS_FAILURE;			if (!strlen($response->error_message))			{				$response->error_message = JText::_('JGLOBAL_AUTH_INCORRECT');			}		}		else		{			// Grab some details from LDAP and return them			if (isset($userdetails[0][$ldap_uid][0]))			{				$response->username = $userdetails[0][$ldap_uid][0];			}			if (isset($userdetails[0][$ldap_email][0]))			{				$response->email = $userdetails[0][$ldap_email][0];			}			if (isset($userdetails[0][$ldap_fullname][0]))			{				$response->fullname = $userdetails[0][$ldap_fullname][0];			} else {				$response->fullname = $credentials['username'];			}			// Were good - So say so.			$response->status		= JAuthentication::STATUS_SUCCESS;			$response->error_message = '';		}		$ldap->close();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages list controller class. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerMessages extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Message', $prefix = 'MessagesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');?><?php echo JHtml::_('access.usergroups', 'jform[groups]', $this->groups, true); ?>
<?php/** * Joomla_Sniffs_ControlStructures_InlineControlStructureSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: InlineControlStructureSniff.php 258843 2008-05-01 00:49:32Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_ControlStructures_InlineControlStructureSniff. * * Verifies that inline control statements are not present. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_InlineControlStructureSniff extends Generic_Sniffs_ControlStructures_InlineControlStructureSniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',                                  );    /**     * If true, an error will be thrown; otherwise a warning.     *     * @var bool     */    public $error = false;    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(                T_IF,                T_ELSE,                T_FOREACH,                T_WHILE,                T_DO,                T_SWITCH,                T_FOR,               );    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        if (isset($tokens[$stackPtr]['scope_opener']) === false) {            // Ignore the ELSE in ELSE IF. We'll process the IF part later.            if (($tokens[$stackPtr]['code'] === T_ELSE) && ($tokens[($stackPtr + 2)]['code'] === T_IF)) {                return;            }            if ($tokens[$stackPtr]['code'] === T_WHILE) {                // This could be from a DO WHILE, which doesn't have an opening brace.                $lastContent = $phpcsFile->findPrevious(T_WHITESPACE, ($stackPtr - 1), null, true);                if ($tokens[$lastContent]['code'] === T_CLOSE_CURLY_BRACKET) {                    $brace = $tokens[$lastContent];                    if (isset($brace['scope_condition']) === true) {                        $condition = $tokens[$brace['scope_condition']];                        if ($condition['code'] === T_DO) {                            return;                        }                    }                }            }            // This is a control structure without an opening brace,            // so it is an inline statement.            if ($this->error === true) {                $phpcsFile->addError('Inline control structures are not allowed', $stackPtr, 'NotAllowed');            } else {                $phpcsFile->addWarning('Inline control structures are discouraged', $stackPtr, 'Discouraged');            }            return;        }//end if    }//end process()}//end class?>
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note. It is important to remove spaces between elements.$class = $item->anchor_css ? 'class="'.$item->anchor_css.'" ' : '';$title = $item->anchor_title ? 'title="'.$item->anchor_title.'" ' : '';if ($item->menu_image)	{		$item->params->get('menu_text', 1) ?		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" /><span class="image-title">'.$item->title.'</span> ' :		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" />';}else { $linktype = $item->title;}switch ($item->browserNav) :	default:	case 0:?><a <?php echo $class; ?>href="<?php echo $item->flink; ?>" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;	case 1:		// _blank?><a <?php echo $class; ?>href="<?php echo $item->flink; ?>" target="_blank" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;	case 2:	// window.open?><a <?php echo $class; ?>href="<?php echo $item->flink; ?>" onclick="window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes');return false;" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;endswitch;
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script>var form = window.top.document.adminFormvar title = form.title.value;var alltext = window.top.<?php echo $this->editor->getContent('text') ?>;</script><table class="center" width="90%">	<tr>		<td class="contentheading" colspan="2"><script>document.write(title);</script></td>	</tr><tr>	<td valign="top" height="90%" colspan="2">		<script>document.write(alltext);</script>	</td></tr></table>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML utility class for the installation application * * @package  Joomla.Installation * @since    1.6 */class JHtmlInstallation{	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   1.6	 */	public static function stepbar()	{		// Determine if the configuration file path is writable.		$path = JPATH_CONFIGURATION . '/configuration.php';		$useftp = (file_exists($path)) ? !is_writable($path) : !is_writable(JPATH_CONFIGURATION . '/');		$tabs = array();		$tabs[] = 'site';		$tabs[] = 'database';		if ($useftp)		{			$tabs[] = 'ftp';		}		$tabs[] = 'summary';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   3.1	 */	public static function stepbarlanguages()	{		$tabs = array();		$tabs[] = 'languages';		$tabs[] = 'defaultlanguage';		$tabs[] = 'complete';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the navigation tab	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  string  Markup for the tab	 *	 * @since   3.1	 */	private static function getTab($id, $tabs)	{		$input = JFactory::getApplication()->input;		$num   = self::getTabNumber($id, $tabs);		$view  = self::getTabNumber($input->getWord('view'), $tabs);		$tab   = '<span class="badge">' . $num . '</span> ' . JText::_('INSTL_STEP_' . strtoupper($id) . '_LABEL');		if ($view + 1 == $num)		{			$tab = '<a href="#" onclick="Install.submitform();">' . $tab . '</a>';		}		elseif ($view < $num)		{			$tab = '<span>' . $tab . '</span>';		}		else		{			$tab = '<a href="#" onclick="return Install.goToPage(\'' . $id . '\')">' . $tab . '</a>';		}		return '<li class="step' . ($num == $view ? ' active' : '') . '" id="' . $id . '">' . $tab . '</li>';	}	/**	 * Method to determine the tab (step) number	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  integer  Tab number in navigation sequence	 *	 * @since   3.1	 */	private static function getTabNumber($id, $tabs)	{		$num = (int) array_search($id, $tabs);		$num++;		return $num;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users list controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerUsers extends JControllerAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_USERS_USERS';	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @return  UsersControllerUsers	 *	 * @since   1.6	 * @see     JController	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('block', 'changeBlock');		$this->registerTask('unblock', 'changeBlock');	}	/**	 * Proxy for getModel.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'User', $prefix = 'UsersModel', $config = array('ignore_request' => true))	{		return parent::getModel($name, $prefix, $config);	}	/**	 * Method to change the block status on a record.	 *	 * @return  void	 *	 * @since   1.6	 */	public function changeBlock()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids    = $this->input->get('cid', array(), 'array');		$values = array('block' => 1, 'unblock' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_USERS_USERS_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Change the state of the records.			if (!$model->block($ids, $value))			{				JError::raiseWarning(500, $model->getError());			}			else			{				if ($value == 1)				{					$this->setMessage(JText::plural('COM_USERS_N_USERS_BLOCKED', count($ids)));				}				elseif ($value == 0)				{					$this->setMessage(JText::plural('COM_USERS_N_USERS_UNBLOCKED', count($ids)));				}			}		}		$this->setRedirect('index.php?option=com_users&view=users');	}	/**	 * Method to activate a record.	 *	 * @return  void	 *	 * @since   1.6	 */	public function activate()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids = $this->input->get('cid', array(), 'array');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_USERS_USERS_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Change the state of the records.			if (!$model->activate($ids))			{				JError::raiseWarning(500, $model->getError());			}			else			{				$this->setMessage(JText::plural('COM_USERS_N_USERS_ACTIVATED', count($ids)));			}		}		$this->setRedirect('index.php?option=com_users&view=users');	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Language Form Field class. * * @package  Joomla.Installation * @since    1.6 */class JFormFieldLanguage extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Language';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   1.6	 */	protected function getOptions()	{		$app = JFactory::getApplication();		// Detect the native language.		$native = JLanguageHelper::detectLanguage();		if (empty($native))		{			$native = 'en-GB';		}		// Get a forced language if it exists.		$forced = $app->getLocalise();		if (!empty($forced['language']))		{			$native = $forced['language'];		}		// If a language is already set in the session, use this instead		$model   = new InstallationModelSetup;		$options = $model->getOptions();		if (isset($options['language']))		{			$native = $options['language'];		}		// Get the list of available languages.		$options = JLanguageHelper::createLanguageList($native);		if (!$options || $options  instanceof Exception)		{			$options = array();		}		// Sort languages by name		else		{			usort($options, array($this, '_sortLanguages'));		}		// Set the default value from the native language.		$this->value = $native;		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}	/**	 * Method to sort languages by name.	 *	 * @param   string  $a  The first value to determine sort	 * @param   string  $b  The second value to determine sort	 *	 * @return  string	 *	 * @since    3.1	 */	protected function _sortLanguages($a, $b)	{		return strcmp($a['text'], $b['text']);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_random_image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_random_image * * @package     Joomla.Site * @subpackage  mod_random_image * @since       1.5 */class ModRandomImageHelper{	public static function getRandomImage(&$params, $images)	{		$width	= $params->get('width');		$height	= $params->get('height');		$i      = count($images);		$random = mt_rand(0, $i - 1);		$image  = $images[$random];		$size   = getimagesize(JPATH_BASE . '/' . $image->folder . '/' . $image->name);		if ($width == '')		{			$width = 100;		}		if ($size[0] < $width)		{			$width = $size[0];		}		$coeff = $size[0] / $size[1];		if ($height == '')		{			$height = (int) ($width / $coeff);		}		else		{			$newheight = min($height, (int) ($width / $coeff));			if ($newheight < $height)			{				$height = $newheight;			} else {				$width = $height * $coeff;			}		}		$image->width	= $width;		$image->height	= $height;		$image->folder	= str_replace('\\', '/', $image->folder);		return $image;	}	public static function getImages(&$params, $folder)	{		$type		= $params->get('type', 'jpg');		$files	= array();		$images	= array();		$dir = JPATH_BASE . '/' . $folder;		// check if directory exists		if (is_dir($dir))		{			if ($handle = opendir($dir))			{				while (false !== ($file = readdir($handle)))				{					if ($file != '.' && $file != '..' && $file != 'CVS' && $file != 'index.html')					{						$files[] = $file;					}				}			}			closedir($handle);			$i = 0;			foreach ($files as $img)			{				if (!is_dir($dir . '/' . $img))				{					if (preg_match('/'.$type.'/', $img))					{						$images[$i] = new stdClass;						$images[$i]->name	= $img;						$images[$i]->folder	= $folder;						$i++;					}				}			}		}		return $images;	}	public static function getFolder(&$params)	{		$folder	= $params->get('folder');		$LiveSite	= JURI::base();		// if folder includes livesite info, remove		if (JString::strpos($folder, $LiveSite) === 0)		{			$folder = str_replace($LiveSite, '', $folder);		}		// if folder includes absolute path, remove		if (JString::strpos($folder, JPATH_SITE) === 0)		{			$folder = str_replace(JPATH_BASE, '', $folder);		}		$folder = str_replace('\\', DIRECTORY_SEPARATOR, $folder);		$folder = str_replace('/', DIRECTORY_SEPARATOR, $folder);		return $folder;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Cache callback type object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheControllerCallback extends JCacheController{	/**	 * Executes a cacheable callback if not found in cache else returns cached output and result	 *	 * Since arguments to this function are read with func_get_args you can pass any number of	 * arguments to this method	 * as long as the first argument passed is the callback definition.	 *	 * The callback definition can be in several forms:	 * - Standard PHP Callback array see <http://php.net/callback> [recommended]	 * - Function name as a string eg. 'foo' for function foo()	 * - Static method name as a string eg. 'MyClass::myMethod' for method myMethod() of class MyClass	 *	 * @return  mixed  Result of the callback	 *	 * @since   11.1	 */	public function call()	{		// Get callback and arguments		$args = func_get_args();		$callback = array_shift($args);		return $this->get($callback, $args);	}	/**	 * Executes a cacheable callback if not found in cache else returns cached output and result	 *	 * @param   mixed    $callback    Callback or string shorthand for a callback	 * @param   array    $args        Callback arguments	 * @param   string   $id          Cache id	 * @param   boolean  $wrkarounds  True to use wrkarounds	 * @param   array    $woptions    Workaround options	 *	 * @return  mixed  Result of the callback	 *	 * @since   11.1	 */	public function get($callback, $args = array(), $id = false, $wrkarounds = false, $woptions = array())	{		// Normalize callback		if (is_array($callback))		{			// We have a standard php callback array -- do nothing		}		elseif (strstr($callback, '::'))		{			// This is shorthand for a static method callback classname::methodname			list ($class, $method) = explode('::', $callback);			$callback = array(trim($class), trim($method));		}		elseif (strstr($callback, '->'))		{			/*			 * This is a really not so smart way of doing this... we provide this for backward compatability but this			 * WILL! disappear in a future version.  If you are using this syntax change your code to use the standard			 * PHP callback array syntax: <http://php.net/callback>			 *			 * We have to use some silly global notation to pull it off and this is very unreliable			 */			list ($object_123456789, $method) = explode('->', $callback);			global $$object_123456789;			$callback = array($$object_123456789, $method);		}		else		{			// We have just a standard function -- do nothing		}		if (!$id)		{			// Generate an ID			$id = $this->_makeId($callback, $args);		}		$data = $this->cache->get($id);		$locktest = new stdClass;		$locktest->locked = null;		$locktest->locklooped = null;		if ($data === false)		{			$locktest = $this->cache->lock($id);			if ($locktest->locked == true && $locktest->locklooped == true)			{				$data = $this->cache->get($id);			}		}		$coptions = array();		if ($data !== false)		{			$cached = unserialize(trim($data));			$coptions['mergehead'] = isset($woptions['mergehead']) ? $woptions['mergehead'] : 0;			$output = ($wrkarounds == false) ? $cached['output'] : JCache::getWorkarounds($cached['output'], $coptions);			$result = $cached['result'];			if ($locktest->locked == true)			{				$this->cache->unlock($id);			}		}		else		{			if (!is_array($args))			{				$Args = !empty($args) ? array(&$args) : array();			}			else			{				$Args = &$args;			}			if ($locktest->locked == false)			{				$locktest = $this->cache->lock($id);			}			if (isset($woptions['modulemode']) && $woptions['modulemode'] == 1)			{				$document = JFactory::getDocument();				$coptions['modulemode'] = 1;				$coptions['headerbefore'] = $document->getHeadData();			}			else			{				$coptions['modulemode'] = 0;			}			ob_start();			ob_implicit_flush(false);			$result = call_user_func_array($callback, $Args);			$output = ob_get_contents();			ob_end_clean();			$cached = array();			$coptions['nopathway'] = isset($woptions['nopathway']) ? $woptions['nopathway'] : 1;			$coptions['nohead'] = isset($woptions['nohead']) ? $woptions['nohead'] : 1;			$coptions['nomodules'] = isset($woptions['nomodules']) ? $woptions['nomodules'] : 1;			$cached['output'] = ($wrkarounds == false) ? $output : JCache::setWorkarounds($output, $coptions);			$cached['result'] = $result;			// Store the cache data			$this->cache->store(serialize($cached), $id);			if ($locktest->locked == true)			{				$this->cache->unlock($id);			}		}		echo $output;		return $result;	}	/**	 * Generate a callback cache id	 *	 * @param   callback  $callback  Callback to cache	 * @param   array     $args      Arguments to the callback method to cache	 *	 * @return  string  MD5 Hash : function cache id	 *	 * @since   11.1	 */	protected function _makeId($callback, $args)	{		if (is_array($callback) && is_object($callback[0]))		{			$vars = get_object_vars($callback[0]);			$vars[] = strtolower(get_class($callback[0]));			$callback[0] = $vars;		}		return md5(serialize(array($callback, $args)));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Checkin component * * @package     Joomla.Administrator * @subpackage  com_checkin * @since       1.0 */class CheckinViewCheckin extends JViewLegacy{	protected $tables;	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_CHECKIN_GLOBAL_CHECK_IN'), 'checkin.png');		if (JFactory::getUser()->authorise('core.admin', 'com_checkin'))		{			JToolbarHelper::custom('checkin', 'checkin.png', 'checkin_f2.png', 'JTOOLBAR_CHECKIN', true);			JToolbarHelper::divider();			JToolbarHelper::preferences('com_checkin');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_SITE_MAINTENANCE_GLOBAL_CHECK-IN');	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');// Import the com_menus helper.require_once realpath(JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Supports an HTML select list of menus * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6 */class JFormFieldMenu extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'Menu';	/**	 * Method to get the list of menus for the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   1.6	 */	protected function getOptions()	{		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), JHtml::_('menu.menus'));		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');?><div class="reset-complete<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=reset.complete'); ?>" method="post" class="form-validate">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<dl>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<dt><?php echo $field->label; ?></dt>				<dd><?php echo $field->input; ?></dd>			<?php endforeach; ?>			</dl>		</fieldset>		<?php endforeach; ?>		<div>			<button type="submit" class="validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Triple DES encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipher3DES extends JCryptCipherMcrypt{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type = MCRYPT_3DES;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode = MCRYPT_MODE_CBC;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType = '3des';}
<?php/** * @package     Joomla.Legacy * @subpackage  Dispatcher * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder.  You should use JEventDispatcher instead. * * @package     Joomla.Legacy * @subpackage  Dispatcher * @since       11.1 * @deprecated  12.3 */class JDispatcher extends JEventDispatcher{	/**	 * Constructor.	 *	 * @since   11.1	 */	public function __construct()	{		JLog::add('JDispatcher is deprecated. Use JEventDispatcher instead.', JLog::WARNING, 'deprecated');		parent::__construct();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of article categories. * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.6 */class WeblinksModelCategories extends JModelList{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_weblinks.categories';	/**	 * The category context (allows other extensions to derived from this model).	 *	 * @var		string	 */	protected $_extension = 'com_weblinks';	private $_parent = null;	private $_items = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('filter.extension', $this->_extension);		// Get the parent id if defined.		$parentId = $app->input->getInt('id');		$this->setState('filter.parentId', $parentId);		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('filter.published',	1);		$this->setState('filter.access',	true);	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.extension');		$id	.= ':'.$this->getState('filter.published');		$id	.= ':'.$this->getState('filter.access');		$id	.= ':'.$this->getState('filter.parentId');		return parent::getStoreId($id);	}	/**	 * redefine the function an add some properties to make the styling more easy	 *	 * @return mixed An array of data items on success, false on failure.	 */	public function getItems()	{		if (!count($this->_items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_num_links', 1) || !$params->get('show_empty_categories_cat', 0);			$categories = JCategories::getInstance('Weblinks', $options);			$this->_parent = $categories->get($this->getState('filter.parentId', 'root'));			if (is_object($this->_parent))			{				$this->_items = $this->_parent->getChildren();			} else {				$this->_items = false;			}		}		return $this->_items;	}	public function getParent()	{		if (!is_object($this->_parent))		{			$this->getItems();		}		return $this->_parent;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.path');/** * FTP configuration model for the Joomla Core Installer. * * @package     Joomla.Installation * @subpackage  Model * @since       3.1 */class InstallationModelFtp extends JModelBase{	/**	 * Find the ftp filesystem root for a given user/pass pair.	 *	 * @param   array  $options  Configuration options.	 *	 * @return  mixed  FTP root for given FTP user, or boolean false if not found.	 *	 * @since   3.1	 */	public function detectFtpRoot($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Connect and login to the FTP server.		// Use binary transfer mode to be able to compare files.		@$ftp = JClientFtp::getInstance($options->get('ftp_host'), $options->get('ftp_port'), array('type' => FTP_BINARY));		// Check to make sure FTP is connected and authenticated.		if (!$ftp->isConnected())		{			$app->enqueueMessage($options->get('ftp_host') . ':' . $options->get('ftp_port') . ' ' . JText::_('INSTL_FTP_NOCONNECT'), 'error');			return false;		}		if (!$ftp->login($options->get('ftp_user'), $options->get('ftp_pass')))		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOLOGIN'), 'error');			return false;		}		// Get the current working directory from the FTP server.		$cwd = $ftp->pwd();		if ($cwd === false)		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOPWD'), 'error');			return false;		}		$cwd = rtrim($cwd, '/');		// Get a list of folders in the current working directory.		$cwdFolders = $ftp->listDetails(null, 'folders');		if ($cwdFolders === false || count($cwdFolders) == 0)		{			$app->enqueueMessage(JText::_('INSTL_FTP_NODIRECTORYLISTING'), 'error');			return false;		}		// Get just the folder names from the list of folder data.		for ($i = 0, $n = count($cwdFolders); $i < $n; $i++)		{			$cwdFolders[$i] = $cwdFolders[$i]['name'];		}		// Check to see if Joomla is installed at the FTP current working directory.		$paths = array();		$known = array('administrator', 'components', 'installation', 'language', 'libraries', 'plugins');		if (count(array_diff($known, $cwdFolders)) == 0)		{			$paths[] = $cwd . '/';		}		// Search through the segments of JPATH_SITE looking for root possibilities.		$parts = explode(DIRECTORY_SEPARATOR, JPATH_SITE);		$tmp = '';		for ($i = count($parts) - 1; $i >= 0; $i--)		{			$tmp = '/' . $parts[$i] . $tmp;			if (in_array($parts[$i], $cwdFolders))			{				$paths[] = $cwd . $tmp;			}		}		// Check all possible paths for the real Joomla installation by comparing version files.		$rootPath = false;		$checkValue = file_get_contents(JPATH_LIBRARIES . '/cms/version/version.php');		foreach ($paths as $tmp)		{			$filePath = rtrim($tmp, '/') . '/libraries/cms/version/version.php';			$buffer = null;			@ $ftp->read($filePath, $buffer);			if ($buffer == $checkValue)			{				$rootPath = $tmp;				break;			}		}		// Close the FTP connection.		$ftp->quit();		// Return an error if no root path was found.		if ($rootPath === false)		{			$app->enqueueMessage(JText::_('INSTL_FTP_UNABLE_DETECT_ROOT_FOLDER'), 'error');			return false;		}		return $rootPath;	}	/**	 * Verify the FTP settings as being functional and correct.	 *	 * @param   array  $options  Configuration options.	 *	 * @return  mixed  FTP root for given FTP user, or boolean false if not found.	 *	 * @since   3.1	 */	public function verifyFtpSettings($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Connect and login to the FTP server.		@$ftp = JClientFtp::getInstance($options->get('ftp_host'), $options->get('ftp_port'));		// Check to make sure FTP is connected and authenticated.		if (!$ftp->isConnected())		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOCONNECT'), 'error');			return false;		}		if (!$ftp->login($options->get('ftp_user'), $options->get('ftp_pass')))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOLOGIN'), 'error');			return false;		}		// Since the root path will be trimmed when it gets saved to configuration.php,		// we want to test with the same value as well.		$root = rtrim($options->get('ftp_root'), '/');		// Verify PWD function		if ($ftp->pwd() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOPWD'), 'error');			return false;		}		// Verify root path exists		if (!$ftp->chdir($root))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOROOT'), 'error');			return false;		}		// Verify NLST function		if (($rootList = $ftp->listNames()) === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NONLST'), 'error');			return false;		}		// Verify LIST function		if ($ftp->listDetails() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOLIST'), 'error');			return false;		}		// Verify SYST function		if ($ftp->syst() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOSYST'), 'error');			return false;		}		// Verify valid root path, part one		$checkList = array('robots.txt', 'index.php');		if (count(array_diff($checkList, $rootList)))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_INVALIDROOT'), 'error');			return false;		}		// Verify RETR function		$buffer = null;		if ($ftp->read($root . '/libraries/cms/version/version.php', $buffer) === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NORETR'), 'error');			return false;		}		// Verify valid root path, part two		$checkValue = file_get_contents(JPATH_ROOT . '/libraries/cms/version/version.php');		if ($buffer !== $checkValue)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_INVALIDROOT'), 'error');			return false;		}		// Verify STOR function		if ($ftp->create($root . '/ftp_testfile') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOSTOR'), 'error');			return false;		}		// Verify DELE function		if ($ftp->delete($root . '/ftp_testfile') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NODELE'), 'error');			return false;		}		// Verify MKD function		if ($ftp->mkdir($root . '/ftp_testdir') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOMKD'), 'error');			return false;		}		// Verify RMD function		if ($ftp->delete($root . '/ftp_testdir') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NORMD'), 'error');			return false;		}		$ftp->quit();		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages list actions controller. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesControllerLanguage extends JControllerForm{	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   int      $recordId  The primary key id for the item.	 * @param   string  $key        The name of the primary key variable.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $key = 'lang_id')	{		return parent::getRedirectToItemAppend($recordId, $key);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * OpenSearch View class for Finder * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderViewSearch extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  JError object on failure, void on success.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		$doc = JFactory::getDocument();		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_finder');		$doc->setShortName($params->get('opensearch_name', $app->getCfg('sitename')));		$doc->setDescription($params->get('opensearch_description', $app->getCfg('MetaDesc')));		// Add the URL for the search		$searchUri = JURI::base() . 'index.php?option=com_finder&q={searchTerms}';		// Find the menu item for the search		$menu = $app->getMenu();		$items = $menu->getItems('link', 'index.php?option=com_finder&view=search');		if (isset($items[0]))		{			$searchUri .= '&Itemid=' . $items[0]->id;		}		$htmlSearch = new JOpenSearchUrl;		$htmlSearch->template = JRoute::_($searchUri);		$doc->addUrl($htmlSearch);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_MESSAGES_ADD'),			'index.php?option=com_messages&view=message&layout=edit',			$vName == 'message'		);		JHtmlSidebar::addEntry(			JText::_('COM_MESSAGES_READ'),			'index.php?option=com_messages',			$vName == 'messages'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$actions = JAccess::getActions('com_messages');		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, 'com_messages'));		}		return $result;	}	/**	 * Get a list of filter options for the state of a module.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getStateOptions()	{		// Build the filter options.		$options	= array();		$options[]	= JHtml::_('select.option',	'1',	JText::_('COM_MESSAGES_OPTION_READ'));		$options[]	= JHtml::_('select.option',	'0',	JText::_('COM_MESSAGES_OPTION_UNREAD'));		$options[]	= JHtml::_('select.option',	'-2',	JText::_('JTRASHED'));		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/helper.php';$version = ModVersionHelper::getVersion($params);require JModuleHelper::getLayoutPath('mod_version', $params->get('layout', 'default'));
<?php/** * This file will be removed in Joomla! CMS version 3.2. Developers should either supply their own copy * in their installation packages or switch to JFeed. *//** * SimplePie * * A PHP-Based RSS and Atom Feed Framework. * Takes the hard work out of managing a complete RSS/Atom solution. * * Copyright (c) 2004-2009, Ryan Parman and Geoffrey Sneddon * All rights reserved. * * Redistribution and use in source and binary forms, with or without modification, are * permitted provided that the following conditions are met: * * 	* Redistributions of source code must retain the above copyright notice, this list of * 	  conditions and the following disclaimer. * * 	* Redistributions in binary form must reproduce the above copyright notice, this list * 	  of conditions and the following disclaimer in the documentation and/or other materials * 	  provided with the distribution. * * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used * 	  to endorse or promote products derived from this software without specific prior * 	  written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. * * @package SimplePie * @version 1.2 * @copyright 2004-2009 Ryan Parman, Geoffrey Sneddon * @author Ryan Parman * @author Geoffrey Sneddon * @link http://simplepie.org/ SimplePie * @link http://simplepie.org/support/ Please submit all bug reports and feature requests to the SimplePie forums * @license http://www.opensource.org/licenses/bsd-license.php BSD License * @todo phpDoc comments *//** * SimplePie Name */define('SIMPLEPIE_NAME', 'SimplePie');/** * SimplePie Version */define('SIMPLEPIE_VERSION', '1.2');/** * SimplePie Build */define('SIMPLEPIE_BUILD', '20090627192103');/** * SimplePie Website URL */define('SIMPLEPIE_URL', 'http://simplepie.org');/** * SimplePie Useragent * @see SimplePie::set_useragent() */define('SIMPLEPIE_USERAGENT', SIMPLEPIE_NAME . '/' . SIMPLEPIE_VERSION . ' (Feed Parser; ' . SIMPLEPIE_URL . '; Allow like Gecko) Build/' . SIMPLEPIE_BUILD);/** * SimplePie Linkback */define('SIMPLEPIE_LINKBACK', '<a href="' . SIMPLEPIE_URL . '" title="' . SIMPLEPIE_NAME . ' ' . SIMPLEPIE_VERSION . '">' . SIMPLEPIE_NAME . '</a>');/** * No Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_NONE', 0);/** * Feed Link Element Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_AUTODISCOVERY', 1);/** * Local Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_EXTENSION', 2);/** * Local Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_BODY', 4);/** * Remote Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_EXTENSION', 8);/** * Remote Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_BODY', 16);/** * All Feed Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_ALL', 31);/** * No known feed type */define('SIMPLEPIE_TYPE_NONE', 0);/** * RSS 0.90 */define('SIMPLEPIE_TYPE_RSS_090', 1);/** * RSS 0.91 (Netscape) */define('SIMPLEPIE_TYPE_RSS_091_NETSCAPE', 2);/** * RSS 0.91 (Userland) */define('SIMPLEPIE_TYPE_RSS_091_USERLAND', 4);/** * RSS 0.91 (both Netscape and Userland) */define('SIMPLEPIE_TYPE_RSS_091', 6);/** * RSS 0.92 */define('SIMPLEPIE_TYPE_RSS_092', 8);/** * RSS 0.93 */define('SIMPLEPIE_TYPE_RSS_093', 16);/** * RSS 0.94 */define('SIMPLEPIE_TYPE_RSS_094', 32);/** * RSS 1.0 */define('SIMPLEPIE_TYPE_RSS_10', 64);/** * RSS 2.0 */define('SIMPLEPIE_TYPE_RSS_20', 128);/** * RDF-based RSS */define('SIMPLEPIE_TYPE_RSS_RDF', 65);/** * Non-RDF-based RSS (truly intended as syndication format) */define('SIMPLEPIE_TYPE_RSS_SYNDICATION', 190);/** * All RSS */define('SIMPLEPIE_TYPE_RSS_ALL', 255);/** * Atom 0.3 */define('SIMPLEPIE_TYPE_ATOM_03', 256);/** * Atom 1.0 */define('SIMPLEPIE_TYPE_ATOM_10', 512);/** * All Atom */define('SIMPLEPIE_TYPE_ATOM_ALL', 768);/** * All feed types */define('SIMPLEPIE_TYPE_ALL', 1023);/** * No construct */define('SIMPLEPIE_CONSTRUCT_NONE', 0);/** * Text construct */define('SIMPLEPIE_CONSTRUCT_TEXT', 1);/** * HTML construct */define('SIMPLEPIE_CONSTRUCT_HTML', 2);/** * XHTML construct */define('SIMPLEPIE_CONSTRUCT_XHTML', 4);/** * base64-encoded construct */define('SIMPLEPIE_CONSTRUCT_BASE64', 8);/** * IRI construct */define('SIMPLEPIE_CONSTRUCT_IRI', 16);/** * A construct that might be HTML */define('SIMPLEPIE_CONSTRUCT_MAYBE_HTML', 32);/** * All constructs */define('SIMPLEPIE_CONSTRUCT_ALL', 63);/** * Don't change case */define('SIMPLEPIE_SAME_CASE', 1);/** * Change to lowercase */define('SIMPLEPIE_LOWERCASE', 2);/** * Change to uppercase */define('SIMPLEPIE_UPPERCASE', 4);/** * PCRE for HTML attributes */define('SIMPLEPIE_PCRE_HTML_ATTRIBUTE', '((?:[\x09\x0A\x0B\x0C\x0D\x20]+[^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?)*)[\x09\x0A\x0B\x0C\x0D\x20]*');/** * PCRE for XML attributes */define('SIMPLEPIE_PCRE_XML_ATTRIBUTE', '((?:\s+(?:(?:[^\s:]+:)?[^\s:]+)\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'))*)\s*');/** * XML Namespace */define('SIMPLEPIE_NAMESPACE_XML', 'http://www.w3.org/XML/1998/namespace');/** * Atom 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_10', 'http://www.w3.org/2005/Atom');/** * Atom 0.3 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_03', 'http://purl.org/atom/ns#');/** * RDF Namespace */define('SIMPLEPIE_NAMESPACE_RDF', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');/** * RSS 0.90 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_090', 'http://my.netscape.com/rdf/simple/0.9/');/** * RSS 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10', 'http://purl.org/rss/1.0/');/** * RSS 1.0 Content Module Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT', 'http://purl.org/rss/1.0/modules/content/');/** * RSS 2.0 Namespace * (Stupid, I know, but I'm certain it will confuse people less with support.) */define('SIMPLEPIE_NAMESPACE_RSS_20', '');/** * DC 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_DC_10', 'http://purl.org/dc/elements/1.0/');/** * DC 1.1 Namespace */define('SIMPLEPIE_NAMESPACE_DC_11', 'http://purl.org/dc/elements/1.1/');/** * W3C Basic Geo (WGS84 lat/long) Vocabulary Namespace */define('SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO', 'http://www.w3.org/2003/01/geo/wgs84_pos#');/** * GeoRSS Namespace */define('SIMPLEPIE_NAMESPACE_GEORSS', 'http://www.georss.org/georss');/** * Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS', 'http://search.yahoo.com/mrss/');/** * Wrong Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG', 'http://search.yahoo.com/mrss');/** * iTunes RSS Namespace */define('SIMPLEPIE_NAMESPACE_ITUNES', 'http://www.itunes.com/dtds/podcast-1.0.dtd');/** * XHTML Namespace */define('SIMPLEPIE_NAMESPACE_XHTML', 'http://www.w3.org/1999/xhtml');/** * IANA Link Relations Registry */define('SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY', 'http://www.iana.org/assignments/relation/');/** * Whether we're running on PHP5 */define('SIMPLEPIE_PHP5', version_compare(PHP_VERSION, '5.0.0', '>='));/** * No file source */define('SIMPLEPIE_FILE_SOURCE_NONE', 0);/** * Remote file source */define('SIMPLEPIE_FILE_SOURCE_REMOTE', 1);/** * Local file source */define('SIMPLEPIE_FILE_SOURCE_LOCAL', 2);/** * fsockopen() file source */define('SIMPLEPIE_FILE_SOURCE_FSOCKOPEN', 4);/** * cURL file source */define('SIMPLEPIE_FILE_SOURCE_CURL', 8);/** * file_get_contents() file source */define('SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS', 16);/** * SimplePie * * @package SimplePie */class SimplePie{	/**	 * @var array Raw data	 * @access private	 */	var $data = array();	/**	 * @var mixed Error string	 * @access private	 */	var $error;	/**	 * @var object Instance of SimplePie_Sanitize (or other class)	 * @see SimplePie::set_sanitize_class()	 * @access private	 */	var $sanitize;	/**	 * @var string SimplePie Useragent	 * @see SimplePie::set_useragent()	 * @access private	 */	var $useragent = SIMPLEPIE_USERAGENT;	/**	 * @var string Feed URL	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $feed_url;	/**	 * @var object Instance of SimplePie_File to use as a feed	 * @see SimplePie::set_file()	 * @access private	 */	var $file;	/**	 * @var string Raw feed data	 * @see SimplePie::set_raw_data()	 * @access private	 */	var $raw_data;	/**	 * @var int Timeout for fetching remote files	 * @see SimplePie::set_timeout()	 * @access private	 */	var $timeout = 10;	/**	 * @var bool Forces fsockopen() to be used for remote files instead	 * of cURL, even if a new enough version is installed	 * @see SimplePie::force_fsockopen()	 * @access private	 */	var $force_fsockopen = false;	/**	 * @var bool Force the given data/URL to be treated as a feed no matter what	 * it appears like	 * @see SimplePie::force_feed()	 * @access private	 */	var $force_feed = false;	/**	 * @var bool Enable/Disable XML dump	 * @see SimplePie::enable_xml_dump()	 * @access private	 */	var $xml_dump = false;	/**	 * @var bool Enable/Disable Caching	 * @see SimplePie::enable_cache()	 * @access private	 */	var $cache = true;	/**	 * @var int Cache duration (in seconds)	 * @see SimplePie::set_cache_duration()	 * @access private	 */	var $cache_duration = 3600;	/**	 * @var int Auto-discovery cache duration (in seconds)	 * @see SimplePie::set_autodiscovery_cache_duration()	 * @access private	 */	var $autodiscovery_cache_duration = 604800; // 7 Days.	/**	 * @var string Cache location (relative to executing script)	 * @see SimplePie::set_cache_location()	 * @access private	 */	var $cache_location = './cache';	/**	 * @var string Function that creates the cache filename	 * @see SimplePie::set_cache_name_function()	 * @access private	 */	var $cache_name_function = 'md5';	/**	 * @var bool Reorder feed by date descending	 * @see SimplePie::enable_order_by_date()	 * @access private	 */	var $order_by_date = true;	/**	 * @var mixed Force input encoding to be set to the follow value	 * (false, or anything type-cast to false, disables this feature)	 * @see SimplePie::set_input_encoding()	 * @access private	 */	var $input_encoding = false;	/**	 * @var int Feed Autodiscovery Level	 * @see SimplePie::set_autodiscovery_level()	 * @access private	 */	var $autodiscovery = SIMPLEPIE_LOCATOR_ALL;	/**	 * @var string Class used for caching feeds	 * @see SimplePie::set_cache_class()	 * @access private	 */	var $cache_class = 'SimplePie_Cache';	/**	 * @var string Class used for locating feeds	 * @see SimplePie::set_locator_class()	 * @access private	 */	var $locator_class = 'SimplePie_Locator';	/**	 * @var string Class used for parsing feeds	 * @see SimplePie::set_parser_class()	 * @access private	 */	var $parser_class = 'SimplePie_Parser';	/**	 * @var string Class used for fetching feeds	 * @see SimplePie::set_file_class()	 * @access private	 */	var $file_class = 'SimplePie_File';	/**	 * @var string Class used for items	 * @see SimplePie::set_item_class()	 * @access private	 */	var $item_class = 'SimplePie_Item';	/**	 * @var string Class used for authors	 * @see SimplePie::set_author_class()	 * @access private	 */	var $author_class = 'SimplePie_Author';	/**	 * @var string Class used for categories	 * @see SimplePie::set_category_class()	 * @access private	 */	var $category_class = 'SimplePie_Category';	/**	 * @var string Class used for enclosures	 * @see SimplePie::set_enclosures_class()	 * @access private	 */	var $enclosure_class = 'SimplePie_Enclosure';	/**	 * @var string Class used for Media RSS <media:text> captions	 * @see SimplePie::set_caption_class()	 * @access private	 */	var $caption_class = 'SimplePie_Caption';	/**	 * @var string Class used for Media RSS <media:copyright>	 * @see SimplePie::set_copyright_class()	 * @access private	 */	var $copyright_class = 'SimplePie_Copyright';	/**	 * @var string Class used for Media RSS <media:credit>	 * @see SimplePie::set_credit_class()	 * @access private	 */	var $credit_class = 'SimplePie_Credit';	/**	 * @var string Class used for Media RSS <media:rating>	 * @see SimplePie::set_rating_class()	 * @access private	 */	var $rating_class = 'SimplePie_Rating';	/**	 * @var string Class used for Media RSS <media:restriction>	 * @see SimplePie::set_restriction_class()	 * @access private	 */	var $restriction_class = 'SimplePie_Restriction';	/**	 * @var string Class used for content-type sniffing	 * @see SimplePie::set_content_type_sniffer_class()	 * @access private	 */	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	/**	 * @var string Class used for item sources.	 * @see SimplePie::set_source_class()	 * @access private	 */	var $source_class = 'SimplePie_Source';	/**	 * @var mixed Set javascript query string parameter (false, or	 * anything type-cast to false, disables this feature)	 * @see SimplePie::set_javascript()	 * @access private	 */	var $javascript = 'js';	/**	 * @var int Maximum number of feeds to check with autodiscovery	 * @see SimplePie::set_max_checked_feeds()	 * @access private	 */	var $max_checked_feeds = 10;	/**	 * @var array All the feeds found during the autodiscovery process	 * @see SimplePie::get_all_discovered_feeds()	 * @access private	 */	var $all_discovered_feeds = array();	/**	 * @var string Web-accessible path to the handler_favicon.php file.	 * @see SimplePie::set_favicon_handler()	 * @access private	 */	var $favicon_handler = '';	/**	 * @var string Web-accessible path to the handler_image.php file.	 * @see SimplePie::set_image_handler()	 * @access private	 */	var $image_handler = '';	/**	 * @var array Stores the URLs when multiple feeds are being initialized.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $multifeed_url = array();	/**	 * @var array Stores SimplePie objects when multiple feeds initialized.	 * @access private	 */	var $multifeed_objects = array();	/**	 * @var array Stores the get_object_vars() array for use with multifeeds.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $config_settings = null;	/**	 * @var integer Stores the number of items to return per-feed with multifeeds.	 * @see SimplePie::set_item_limit()	 * @access private	 */	var $item_limit = 0;	/**	 * @var array Stores the default attributes to be stripped by strip_attributes().	 * @see SimplePie::strip_attributes()	 * @access private	 */	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	/**	 * @var array Stores the default tags to be stripped by strip_htmltags().	 * @see SimplePie::strip_htmltags()	 * @access private	 */	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	/**	 * The SimplePie class contains feed level data and options	 *	 * There are two ways that you can create a new SimplePie object. The first	 * is by passing a feed URL as a parameter to the SimplePie constructor	 * (as well as optionally setting the cache location and cache expiry). This	 * will initialise the whole feed with all of the default settings, and you	 * can begin accessing methods and properties immediately.	 *	 * The second way is to create the SimplePie object with no parameters	 * at all. This will enable you to set configuration options. After setting	 * them, you must initialise the feed using $feed->init(). At that point the	 * object's methods and properties will be available to you. This format is	 * what is used throughout this documentation.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param string $feed_url This is the URL you want to parse.	 * @param string $cache_location This is where you want the cache to be stored.	 * @param int $cache_duration This is the number of seconds that you want to store the cache file for.	 */	function SimplePie($feed_url = null, $cache_location = null, $cache_duration = null)	{		// Other objects, instances created here so we can set options on them		$this->sanitize = new SimplePie_Sanitize;		// Set options if they're passed to the constructor		if ($cache_location !== null)		{			$this->set_cache_location($cache_location);		}		if ($cache_duration !== null)		{			$this->set_cache_duration($cache_duration);		}		// Only init the script if we're passed a feed URL		if ($feed_url !== null)		{			$this->set_feed_url($feed_url);			$this->init();		}	}	/**	 * Used for converting object to a string	 */	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			if (!empty($this->data['items']))			{				foreach ($this->data['items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['items']);			}			if (!empty($this->data['ordered_items']))			{				foreach ($this->data['ordered_items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['ordered_items']);			}		}	}	/**	 * Force the given data/URL to be treated as a feed no matter what it	 * appears like	 *	 * @access public	 * @since 1.1	 * @param bool $enable Force the given data/URL to be treated as a feed	 */	function force_feed($enable = false)	{		$this->force_feed = (bool) $enable;	}	/**	 * This is the URL of the feed you want to parse.	 *	 * This allows you to enter the URL of the feed you want to parse, or the	 * website you want to try to use auto-discovery on. This takes priority	 * over any set raw data.	 *	 * You can set multiple feeds to mash together by passing an array instead	 * of a string for the $url. Remember that with each additional feed comes	 * additional processing and resources.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param mixed $url This is the URL (or array of URLs) that you want to parse.	 * @see SimplePie::set_raw_data()	 */	function set_feed_url($url)	{		if (is_array($url))		{			$this->multifeed_url = array();			foreach ($url as $value)			{				$this->multifeed_url[] = SimplePie_Misc::fix_protocol($value, 1);			}		}		else		{			$this->feed_url = SimplePie_Misc::fix_protocol($url, 1);		}	}	/**	 * Provides an instance of SimplePie_File to use as a feed	 *	 * @access public	 * @param object &$file Instance of SimplePie_File (or subclass)	 * @return bool True on success, false on failure	 */	function set_file(&$file)	{		if (is_a($file, 'SimplePie_File'))		{			$this->feed_url = $file->url;			$this->file =& $file;			return true;		}		return false;	}	/**	 * Allows you to use a string of RSS/Atom data instead of a remote feed.	 *	 * If you have a feed available as a string in PHP, you can tell SimplePie	 * to parse that data string instead of a remote feed. Any set feed URL	 * takes precedence.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param string $data RSS or Atom data as a string.	 * @see SimplePie::set_feed_url()	 */	function set_raw_data($data)	{		$this->raw_data = $data;	}	/**	 * Allows you to override the default timeout for fetching remote feeds.	 *	 * This allows you to change the maximum time the feed's server to respond	 * and send the feed back.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param int $timeout The maximum number of seconds to spend waiting to retrieve a feed.	 */	function set_timeout($timeout = 10)	{		$this->timeout = (int) $timeout;	}	/**	 * Forces SimplePie to use fsockopen() instead of the preferred cURL	 * functions.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param bool $enable Force fsockopen() to be used	 */	function force_fsockopen($enable = false)	{		$this->force_fsockopen = (bool) $enable;	}	/**	 * Outputs the raw XML content of the feed, after it has gone through	 * SimplePie's filters.	 *	 * Used only for debugging, this function will output the XML content as	 * text/xml. When SimplePie reads in a feed, it does a bit of cleaning up	 * before trying to parse it. Many parts of the feed are re-written in	 * memory, and in the end, you have a parsable feed. XML dump shows you the	 * actual XML that SimplePie tries to parse, which may or may not be very	 * different from the original feed.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable XML dump	 */	function enable_xml_dump($enable = false)	{		$this->xml_dump = (bool) $enable;	}	/**	 * Enables/disables caching in SimplePie.	 *	 * This option allows you to disable caching all-together in SimplePie.	 * However, disabling the cache can lead to longer load times.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable caching	 */	function enable_cache($enable = true)	{		$this->cache = (bool) $enable;	}	/**	 * Set the length of time (in seconds) that the contents of a feed	 * will be cached.	 *	 * @access public	 * @param int $seconds The feed content cache duration.	 */	function set_cache_duration($seconds = 3600)	{		$this->cache_duration = (int) $seconds;	}	/**	 * Set the length of time (in seconds) that the autodiscovered feed	 * URL will be cached.	 *	 * @access public	 * @param int $seconds The autodiscovered feed URL cache duration.	 */	function set_autodiscovery_cache_duration($seconds = 604800)	{		$this->autodiscovery_cache_duration = (int) $seconds;	}	/**	 * Set the file system location where the cached files should be stored.	 *	 * @access public	 * @param string $location The file system location.	 */	function set_cache_location($location = './cache')	{		$this->cache_location = (string) $location;	}	/**	 * Determines whether feed items should be sorted into reverse chronological order.	 *	 * @access public	 * @param bool $enable Sort as reverse chronological order.	 */	function enable_order_by_date($enable = true)	{		$this->order_by_date = (bool) $enable;	}	/**	 * Allows you to override the character encoding reported by the feed.	 *	 * @access public	 * @param string $encoding Character encoding.	 */	function set_input_encoding($encoding = false)	{		if ($encoding)		{			$this->input_encoding = (string) $encoding;		}		else		{			$this->input_encoding = false;		}	}	/**	 * Set how much feed autodiscovery to do	 *	 * @access public	 * @see SIMPLEPIE_LOCATOR_NONE	 * @see SIMPLEPIE_LOCATOR_AUTODISCOVERY	 * @see SIMPLEPIE_LOCATOR_LOCAL_EXTENSION	 * @see SIMPLEPIE_LOCATOR_LOCAL_BODY	 * @see SIMPLEPIE_LOCATOR_REMOTE_EXTENSION	 * @see SIMPLEPIE_LOCATOR_REMOTE_BODY	 * @see SIMPLEPIE_LOCATOR_ALL	 * @param int $level Feed Autodiscovery Level (level can be a	 * combination of the above constants, see bitwise OR operator)	 */	function set_autodiscovery_level($level = SIMPLEPIE_LOCATOR_ALL)	{		$this->autodiscovery = (int) $level;	}	/**	 * Allows you to change which class SimplePie uses for caching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_cache_class($class = 'SimplePie_Cache')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Cache'))		{			$this->cache_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for auto-discovery.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_locator_class($class = 'SimplePie_Locator')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Locator'))		{			$this->locator_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for XML parsing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_parser_class($class = 'SimplePie_Parser')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Parser'))		{			$this->parser_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for remote file fetching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_file_class($class = 'SimplePie_File')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_File'))		{			$this->file_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for data sanitization.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_sanitize_class($class = 'SimplePie_Sanitize')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Sanitize'))		{			$this->sanitize = new $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling feed items.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_item_class($class = 'SimplePie_Item')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Item'))		{			$this->item_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling author data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_author_class($class = 'SimplePie_Author')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Author'))		{			$this->author_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling category data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_category_class($class = 'SimplePie_Category')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Category'))		{			$this->category_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for feed enclosures.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_enclosure_class($class = 'SimplePie_Enclosure')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Enclosure'))		{			$this->enclosure_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:text> captions	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_caption_class($class = 'SimplePie_Caption')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Caption'))		{			$this->caption_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:copyright>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_copyright_class($class = 'SimplePie_Copyright')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Copyright'))		{			$this->copyright_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:credit>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_credit_class($class = 'SimplePie_Credit')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Credit'))		{			$this->credit_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:rating>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_rating_class($class = 'SimplePie_Rating')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Rating'))		{			$this->rating_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:restriction>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_restriction_class($class = 'SimplePie_Restriction')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Restriction'))		{			$this->restriction_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for content-type sniffing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_content_type_sniffer_class($class = 'SimplePie_Content_Type_Sniffer')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Content_Type_Sniffer'))		{			$this->content_type_sniffer_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses item sources.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_source_class($class = 'SimplePie_Source')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Source'))		{			$this->source_class = $class;			return true;		}		return false;	}	/**	 * Allows you to override the default user agent string.	 *	 * @access public	 * @param string $ua New user agent string.	 */	function set_useragent($ua = SIMPLEPIE_USERAGENT)	{		$this->useragent = (string) $ua;	}	/**	 * Set callback function to create cache filename with	 *	 * @access public	 * @param mixed $function Callback function	 */	function set_cache_name_function($function = 'md5')	{		if (is_callable($function))		{			$this->cache_name_function = $function;		}	}	/**	 * Set javascript query string parameter	 *	 * @access public	 * @param mixed $get Javascript query string parameter	 */	function set_javascript($get = 'js')	{		if ($get)		{			$this->javascript = (string) $get;		}		else		{			$this->javascript = false;		}	}	/**	 * Set options to make SP as fast as possible.  Forgoes a	 * substantial amount of data sanitization in favor of speed.	 *	 * @access public	 * @param bool $set Whether to set them or not	 */	function set_stupidly_fast($set = false)	{		if ($set)		{			$this->enable_order_by_date(false);			$this->remove_div(false);			$this->strip_comments(false);			$this->strip_htmltags(false);			$this->strip_attributes(false);			$this->set_image_handler(false);		}	}	/**	 * Set maximum number of feeds to check with autodiscovery	 *	 * @access public	 * @param int $max Maximum number of feeds to check	 */	function set_max_checked_feeds($max = 10)	{		$this->max_checked_feeds = (int) $max;	}	function remove_div($enable = true)	{		$this->sanitize->remove_div($enable);	}	function strip_htmltags($tags = '', $encode = null)	{		if ($tags === '')		{			$tags = $this->strip_htmltags;		}		$this->sanitize->strip_htmltags($tags);		if ($encode !== null)		{			$this->sanitize->encode_instead_of_strip($tags);		}	}	function encode_instead_of_strip($enable = true)	{		$this->sanitize->encode_instead_of_strip($enable);	}	function strip_attributes($attribs = '')	{		if ($attribs === '')		{			$attribs = $this->strip_attributes;		}		$this->sanitize->strip_attributes($attribs);	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->sanitize->set_output_encoding($encoding);	}	function strip_comments($strip = false)	{		$this->sanitize->strip_comments($strip);	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->sanitize->set_url_replacements($element_attribute);	}	/**	 * Set the handler to enable the display of cached favicons.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_favicon.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_favicon_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->favicon_handler = $page . '?' . $qs . '=';		}		else		{			$this->favicon_handler = '';		}	}	/**	 * Set the handler to enable the display of cached images.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_image.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_image_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->sanitize->set_image_handler($page . '?' . $qs . '=');		}		else		{			$this->image_handler = '';		}	}	/**	 * Set the limit for items returned per-feed with multifeeds.	 *	 * @access public	 * @param integer $limit The maximum number of items to return.	 */	function set_item_limit($limit = 0)	{		$this->item_limit = (int) $limit;	}	function init()	{		// Check absolute bare minimum requirements.		if ((function_exists('version_compare') && version_compare(PHP_VERSION, '4.3.0', '<')) || !extension_loaded('xml') || !extension_loaded('pcre'))		{			return false;		}		// Then check the xml extension is sane (i.e., libxml 2.7.x issue on PHP < 5.2.9 and libxml 2.7.0 to 2.7.2 on any version) if we don't have xmlreader.		elseif (!extension_loaded('xmlreader'))		{			static $xml_is_sane = null;			if ($xml_is_sane === null)			{				$parser_check = xml_parser_create();				xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);				xml_parser_free($parser_check);				$xml_is_sane = isset($values[0]['value']);			}			if (!$xml_is_sane)			{				return false;			}		}		if (isset($_GET[$this->javascript]))		{			SimplePie_Misc::output_javascript();			exit;		}		// Pass whatever was set with config options over to the sanitizer.		$this->sanitize->pass_cache_data($this->cache, $this->cache_location, $this->cache_name_function, $this->cache_class);		$this->sanitize->pass_file_data($this->file_class, $this->timeout, $this->useragent, $this->force_fsockopen);		if ($this->feed_url !== null || $this->raw_data !== null)		{			$this->data = array();			$this->multifeed_objects = array();			$cache = false;			if ($this->feed_url !== null)			{				$parsed_feed_url = SimplePie_Misc::parse_url($this->feed_url);				// Decide whether to enable caching				if ($this->cache && $parsed_feed_url['scheme'] !== '')				{					$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $this->feed_url), 'spc');				}				// If it's enabled and we don't want an XML dump, use the cache				if ($cache && !$this->xml_dump)				{					// Load the Cache					$this->data = $cache->load();					if (!empty($this->data))					{						// If the cache is for an outdated build of SimplePie						if (!isset($this->data['build']) || $this->data['build'] !== SIMPLEPIE_BUILD)						{							$cache->unlink();							$this->data = array();						}						// If we've hit a collision just rerun it with caching disabled						elseif (isset($this->data['url']) && $this->data['url'] !== $this->feed_url)						{							$cache = false;							$this->data = array();						}						// If we've got a non feed_url stored (if the page isn't actually a feed, or is a redirect) use that URL.						elseif (isset($this->data['feed_url']))						{							// If the autodiscovery cache is still valid use it.							if ($cache->mtime() + $this->autodiscovery_cache_duration > time())							{								// Do not need to do feed autodiscovery yet.								if ($this->data['feed_url'] === $this->data['url'])								{									$cache->unlink();									$this->data = array();								}								else								{									$this->set_feed_url($this->data['feed_url']);									return $this->init();								}							}						}						// Check if the cache has been updated						elseif ($cache->mtime() + $this->cache_duration < time())						{							// If we have last-modified and/or etag set							if (isset($this->data['headers']['last-modified']) || isset($this->data['headers']['etag']))							{								$headers = array();								if (isset($this->data['headers']['last-modified']))								{									$headers['if-modified-since'] = $this->data['headers']['last-modified'];								}								if (isset($this->data['headers']['etag']))								{									$headers['if-none-match'] = '"' . $this->data['headers']['etag'] . '"';								}								$file = new $this->file_class($this->feed_url, $this->timeout/10, 5, $headers, $this->useragent, $this->force_fsockopen);								if ($file->success)								{									if ($file->status_code === 304)									{										$cache->touch();										return true;									}									else									{										$headers = $file->headers;									}								}								else								{									unset($file);								}							}						}						// If the cache is still valid, just return true						else						{							return true;						}					}					// If the cache is empty, delete it					else					{						$cache->unlink();						$this->data = array();					}				}				// If we don't already have the file (it'll only exist if we've opened it to check if the cache has been modified), open it.				if (!isset($file))				{					if (is_a($this->file, 'SimplePie_File') && $this->file->url === $this->feed_url)					{						$file =& $this->file;					}					else					{						$file = new $this->file_class($this->feed_url, $this->timeout, 5, null, $this->useragent, $this->force_fsockopen);					}				}				// If the file connection has an error, set SimplePie::error to that and quit				if (!$file->success && !($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))				{					$this->error = $file->error;					if (!empty($this->data))					{						return true;					}					else					{						return false;					}				}				if (!$this->force_feed)				{					// Check if the supplied URL is a feed, if it isn't, look for it.					$locate = new $this->locator_class($file, $this->timeout, $this->useragent, $this->file_class, $this->max_checked_feeds, $this->content_type_sniffer_class);					if (!$locate->is_feed($file))					{						// We need to unset this so that if SimplePie::set_file() has been called that object is untouched						unset($file);						if ($file = $locate->find($this->autodiscovery, $this->all_discovered_feeds))						{							if ($cache)							{								$this->data = array('url' => $this->feed_url, 'feed_url' => $file->url, 'build' => SIMPLEPIE_BUILD);								if (!$cache->save($this))								{									trigger_error("$this->cache_location is not writeable", E_USER_WARNING);								}								$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $file->url), 'spc');							}							$this->feed_url = $file->url;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}					$locate = null;				}				$headers = $file->headers;				$data = $file->body;				$sniffer = new $this->content_type_sniffer_class($file);				$sniffed = $sniffer->get_type();			}			else			{				$data = $this->raw_data;			}			// Set up array of possible encodings			$encodings = array();			// First check to see if input has been overridden.			if ($this->input_encoding !== false)			{				$encodings[] = $this->input_encoding;			}			$application_types = array('application/xml', 'application/xml-dtd', 'application/xml-external-parsed-entity');			$text_types = array('text/xml', 'text/xml-external-parsed-entity');			// RFC 3023 (only applies to sniffed content)			if (isset($sniffed))			{				if (in_array($sniffed, $application_types) || substr($sniffed, 0, 12) === 'application/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = strtoupper($charset[1]);					}					$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));					$encodings[] = 'UTF-8';				}				elseif (in_array($sniffed, $text_types) || substr($sniffed, 0, 5) === 'text/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = $charset[1];					}					$encodings[] = 'US-ASCII';				}				// Text MIME-type default				elseif (substr($sniffed, 0, 5) === 'text/')				{					$encodings[] = 'US-ASCII';				}			}			// Fallback to XML 1.0 Appendix F.1/UTF-8/ISO-8859-1			$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));			$encodings[] = 'UTF-8';			$encodings[] = 'ISO-8859-1';			// There's no point in trying an encoding twice			$encodings = array_unique($encodings);			// If we want the XML, just output that with the most likely encoding and quit			if ($this->xml_dump)			{				header('Content-type: text/xml; charset=' . $encodings[0]);				echo $data;				exit;			}			// Loop through each possible encoding, till we return something, or run out of possibilities			foreach ($encodings as $encoding)			{				// Change the encoding to UTF-8 (as we always use UTF-8 internally)				if ($utf8_data = SimplePie_Misc::change_encoding($data, $encoding, 'UTF-8'))				{					// Create new parser					$parser = new $this->parser_class();					// If it's parsed fine					if ($parser->parse($utf8_data, 'UTF-8'))					{						$this->data = $parser->get_data();						if ($this->get_type() & ~SIMPLEPIE_TYPE_NONE)						{							if (isset($headers))							{								$this->data['headers'] = $headers;							}							$this->data['build'] = SIMPLEPIE_BUILD;							// Cache the file if caching is enabled							if ($cache && !$cache->save($this))							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);							}							return true;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}				}			}			if(isset($parser))			{				// We have an error, just set SimplePie_Misc::error to it and quit				$this->error = sprintf('XML error: %s at line %d, column %d', $parser->get_error_string(), $parser->get_current_line(), $parser->get_current_column());			}			else			{				$this->error = 'The data could not be converted to UTF-8';			}			SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);			return false;		}		elseif (!empty($this->multifeed_url))		{			$i = 0;			$success = 0;			$this->multifeed_objects = array();			foreach ($this->multifeed_url as $url)			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$this->multifeed_objects[$i] = clone($this);				}				else				{					$this->multifeed_objects[$i] = $this;				}				$this->multifeed_objects[$i]->set_feed_url($url);				$success |= $this->multifeed_objects[$i]->init();				$i++;			}			return (bool) $success;		}		else		{			return false;		}	}	/**	 * Return the error message for the occured error	 *	 * @access public	 * @return string Error message	 */	function error()	{		return $this->error;	}	function get_encoding()	{		return $this->sanitize->output_encoding;	}	function handle_content_type($mime = 'text/html')	{		if (!headers_sent())		{			$header = "Content-type: $mime;";			if ($this->get_encoding())			{				$header .= ' charset=' . $this->get_encoding();			}			else			{				$header .= ' charset=UTF-8';			}			header($header);		}	}	function get_type()	{		if (!isset($this->data['type']))		{			$this->data['type'] = SIMPLEPIE_TYPE_ALL;			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_10;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_03;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF']))			{				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_10;				}				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_090;				}			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_RSS_ALL;				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))				{					switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))					{						case '0.91':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091;							if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))							{								switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))								{									case '0':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_NETSCAPE;										break;									case '24':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_USERLAND;										break;								}							}							break;						case '0.92':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_092;							break;						case '0.93':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_093;							break;						case '0.94':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_094;							break;						case '2.0':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_20;							break;					}				}			}			else			{				$this->data['type'] = SIMPLEPIE_TYPE_NONE;			}		}		return $this->data['type'];	}	/**	 * Returns the URL for the favicon of the feed's website.	 *	 * @todo Cache atom:icon	 * @access public	 * @since 1.0	 */	function get_favicon()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif (($url = $this->get_link()) !== null && preg_match('/^http(s)?:\/\//i', $url))		{			$favicon = SimplePie_Misc::absolutize_url('/favicon.ico', $url);			if ($this->cache && $this->favicon_handler)			{				$favicon_filename = call_user_func($this->cache_name_function, $favicon);				$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $favicon_filename, 'spi');				if ($cache->load())				{					return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);				}				else				{					$file = new $this->file_class($favicon, $this->timeout / 10, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);					if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)) && strlen($file->body) > 0)					{						$sniffer = new $this->content_type_sniffer_class($file);						if (substr($sniffer->get_type(), 0, 6) === 'image/')						{							if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))							{								return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);							}							else							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);								return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);							}						}						// not an image						else						{							return false;						}					}				}			}			else			{				return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);			}		}		return false;	}	/**	 * @todo If we have a perm redirect we should return the new URL	 * @todo When we make the above change, let's support <itunes:new-feed-url> as well	 * @todo Also, |atom:link|@rel=self	 */	function subscribe_url()	{		if ($this->feed_url !== null)		{			return $this->sanitize($this->feed_url, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_feed()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_outlook()	{		if ($this->feed_url !== null)		{			return $this->sanitize('outlook' . SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_podcast()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 3), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_itunes()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 4), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	/**	 * Creates the subscribe_* methods' return data	 *	 * @access private	 * @param string $feed_url String to prefix to the feed URL	 * @param string $site_url String to prefix to the site URL (and	 * suffix to the feed URL)	 * @return mixed URL if feed exists, false otherwise	 */	function subscribe_service($feed_url, $site_url = null)	{		if ($this->subscribe_url())		{			$return = $feed_url . rawurlencode($this->feed_url);			if ($site_url !== null && $this->get_link() !== null)			{				$return .= $site_url . rawurlencode($this->get_link());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_aol()	{		return $this->subscribe_service('http://feeds.my.aol.com/add.jsp?url=');	}	function subscribe_bloglines()	{		return $this->subscribe_service('http://www.bloglines.com/sub/');	}	function subscribe_eskobo()	{		return $this->subscribe_service('http://www.eskobo.com/?AddToMyPage=');	}	function subscribe_feedfeeds()	{		return $this->subscribe_service('http://www.feedfeeds.com/add?feed=');	}	function subscribe_feedster()	{		return $this->subscribe_service('http://www.feedster.com/myfeedster.php?action=addrss&confirm=no&rssurl=');	}	function subscribe_google()	{		return $this->subscribe_service('http://fusion.google.com/add?feedurl=');	}	function subscribe_gritwire()	{		return $this->subscribe_service('http://my.gritwire.com/feeds/addExternalFeed.aspx?FeedUrl=');	}	function subscribe_msn()	{		return $this->subscribe_service('http://my.msn.com/addtomymsn.armx?id=rss&ut=', '&ru=');	}	function subscribe_netvibes()	{		return $this->subscribe_service('http://www.netvibes.com/subscribe.php?url=');	}	function subscribe_newsburst()	{		return $this->subscribe_service('http://www.newsburst.com/Source/?add=');	}	function subscribe_newsgator()	{		return $this->subscribe_service('http://www.newsgator.com/ngs/subscriber/subext.aspx?url=');	}	function subscribe_odeo()	{		return $this->subscribe_service('http://www.odeo.com/listen/subscribe?feed=');	}	function subscribe_podnova()	{		return $this->subscribe_service('http://www.podnova.com/index_your_podcasts.srf?action=add&url=');	}	function subscribe_rojo()	{		return $this->subscribe_service('http://www.rojo.com/add-subscription?resource=');	}	function subscribe_yahoo()	{		return $this->subscribe_service('http://add.my.yahoo.com/rss?url=');	}	function get_feed_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_10)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_ATOM_03)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_RDF)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag];			}		}		return null;	}	function get_channel_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_ALL)		{			if ($return = $this->get_feed_tags($namespace, $tag))			{				return $return;			}		}		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_image_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($image = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_base($element = array())	{		if (!($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION) && !empty($element['xml_base_explicit']) && isset($element['xml_base']))		{			return $element['xml_base'];		}		elseif ($this->get_link() !== null)		{			return $this->get_link();		}		else		{			return $this->subscribe_url();		}	}	function sanitize($data, $type, $base = '')	{		return $this->sanitize->sanitize($data, $type, $base);	}	function get_title()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] = new $this->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] = new $this->category_class($term, $scheme, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] = new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] = new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] = new $this->author_class($name, $uri, $email);			}		}		if ($author = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] = new $this->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] = new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] = new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] = new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] = new $this->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] = new $this->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_all_discovered_feeds()	{		return $this->all_discovered_feeds;	}	function get_description()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['headers']['content-language']))		{			return $this->sanitize($this->data['headers']['content-language'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_title()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_link()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_width()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'width'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 88.0;		}		else		{			return null;		}	}	function get_image_height()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'height'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 31.0;		}		else		{			return null;		}	}	function get_item_quantity($max = 0)	{		$max = (int) $max;		$qty = count($this->get_items());		if ($max === 0)		{			return $qty;		}		else		{			return ($qty > $max) ? $max : $qty;		}	}	function get_item($key = 0)	{		$items = $this->get_items();		if (isset($items[$key]))		{			return $items[$key];		}		else		{			return null;		}	}	function get_items($start = 0, $end = 0)	{		if (!isset($this->data['items']))		{			if (!empty($this->multifeed_objects))			{				$this->data['items'] = SimplePie::merge_items($this->multifeed_objects, $start, $end, $this->item_limit);			}			else			{				$this->data['items'] = array();				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}			}		}		if (!empty($this->data['items']))		{			// If we want to order it by date, check if all items have a date, and then sort it			if ($this->order_by_date && empty($this->multifeed_objects))			{				if (!isset($this->data['ordered_items']))				{					$do_sort = true;					foreach ($this->data['items'] as $item)					{						if (!$item->get_date('U'))						{							$do_sort = false;							break;						}					}					$item = null;					$this->data['ordered_items'] = $this->data['items'];					if ($do_sort)					{						usort($this->data['ordered_items'], array(&$this, 'sort_items'));					}				}				$items = $this->data['ordered_items'];			}			else			{				$items = $this->data['items'];			}			// Slice the data as desired			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			return array();		}	}	/**	 * @static	 */	function sort_items($a, $b)	{		return $a->get_date('U') <= $b->get_date('U');	}	/**	 * @static	 */	function merge_items($urls, $start = 0, $end = 0, $limit = 0)	{		if (is_array($urls) && sizeof($urls) > 0)		{			$items = array();			foreach ($urls as $arg)			{				if (is_a($arg, 'SimplePie'))				{					$items = array_merge($items, $arg->get_items(0, $limit));				}				else				{					trigger_error('Arguments must be SimplePie objects', E_USER_WARNING);				}			}			$do_sort = true;			foreach ($items as $item)			{				if (!$item->get_date('U'))				{					$do_sort = false;					break;				}			}			$item = null;			if ($do_sort)			{				usort($items, array('SimplePie', 'sort_items'));			}			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			trigger_error('Cannot merge zero SimplePie objects', E_USER_WARNING);			return array();		}	}}class SimplePie_Item{	var $feed;	var $data = array();	function SimplePie_Item($feed, $data)	{		$this->feed = $feed;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			unset($this->feed);		}	}	function get_item_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->feed->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->feed->sanitize($data, $type, $base);	}	function get_feed()	{		return $this->feed;	}	function get_id($hash = false)	{		if (!$hash)		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif (($return = $this->get_permalink()) !== null)			{				return $return;			}			elseif (($return = $this->get_title()) !== null)			{				return $return;			}		}		if ($this->get_permalink() !== null || $this->get_title() !== null)		{			return md5($this->get_permalink() . $this->get_title());		}		else		{			return md5(serialize($this->data));		}	}	function get_title()	{		if (!isset($this->data['title']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$this->data['title'] = null;			}		}		return $this->data['title'];	}	function get_description($description_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (!$description_only)		{			return $this->get_content(true);		}		else		{			return null;		}	}	function get_content($content_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_content_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT, 'encoded'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif (!$content_only)		{			return $this->get_description(true);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] = new $this->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] = new $this->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] = new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] = new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] = new $this->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] = new $this->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] = new $this->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] = new $this->feed->author_class($name, $url, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'author'))		{			$authors[] = new $this->feed->author_class(null, null, $this->sanitize($author[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] = new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] = new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] = new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		elseif (($source = $this->get_source()) && ($authors = $source->get_authors()))		{			return $authors;		}		elseif ($authors = $this->feed->get_authors())		{			return $authors;		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_date($date_format = 'j F Y, g:i a')	{		if (!isset($this->data['date']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'published'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'updated'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'issued'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'created'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'modified'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'pubDate'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			if (!empty($this->data['date']['raw']))			{				$parser = SimplePie_Parse_Date::get();				$this->data['date']['parsed'] = $parser->parse($this->data['date']['raw']);			}			else			{				$this->data['date'] = null;			}		}		if ($this->data['date'])		{			$date_format = (string) $date_format;			switch ($date_format)			{				case '':					return $this->sanitize($this->data['date']['raw'], SIMPLEPIE_CONSTRUCT_TEXT);				case 'U':					return $this->data['date']['parsed'];				default:					return date($date_format, $this->data['date']['parsed']);			}		}		else		{			return null;		}	}	function get_local_date($date_format = '%c')	{		if (!$date_format)		{			return $this->sanitize($this->get_date(''), SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (($date = $this->get_date('U')) !== null)		{			return strftime($date_format, $date);		}		else		{			return null;		}	}	function get_permalink()	{		$link = $this->get_link();		$enclosure = $this->get_enclosure(0);		if ($link !== null)		{			return $link;		}		elseif ($enclosure !== null)		{			return $enclosure->get_link();		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if ($links[$key] !== null)		{			return $links[$key];		}		else		{			return null;		}	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				if (!isset($links[0]['attribs']['']['isPermaLink']) || strtolower(trim($links[0]['attribs']['']['isPermaLink'])) === 'true')				{					$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));				}			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	/**	 * @todo Add ability to prefer one type of content over another (in a media group).	 */	function get_enclosure($key = 0, $prefer = null)	{		$enclosures = $this->get_enclosures();		if (isset($enclosures[$key]))		{			return $enclosures[$key];		}		else		{			return null;		}	}	/**	 * Grabs all available enclosures (podcasts, etc.)	 *	 * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.	 *	 * At this point, we're pretty much assuming that all enclosures for an item are the same content.  Anything else is too complicated to properly support.	 *	 * @todo Add support for end-user defined sorting of enclosures by type/handler (so we can prefer the faster-loading FLV over MP4).	 * @todo If an element exists at a level, but it's value is empty, we should fall back to the value from the parent (if it exists).	 */	function get_enclosures()	{		if (!isset($this->data['enclosures']))		{			$this->data['enclosures'] = array();			// Elements			$captions_parent = null;			$categories_parent = null;			$copyrights_parent = null;			$credits_parent = null;			$description_parent = null;			$duration_parent = null;			$hashes_parent = null;			$keywords_parent = null;			$player_parent = null;			$ratings_parent = null;			$restrictions_parent = null;			$thumbnails_parent = null;			$title_parent = null;			// Let's do the channel and item-level ones first, and just re-use them if we need to.			$parent = $this->get_feed();			// CAPTIONS			if ($captions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			elseif ($captions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			if (is_array($captions_parent))			{				$captions_parent = array_values(SimplePie_Misc::array_unique($captions_parent));			}			// CATEGORIES			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'category') as $category)			{				$term = null;				$scheme = 'http://www.itunes.com/dtds/podcast-1.0.dtd';				$label = null;				if (isset($category['attribs']['']['text']))				{					$label = $this->sanitize($category['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);				if (isset($category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category']))				{					foreach ((array) $category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category'] as $subcategory)					{						if (isset($subcategory['attribs']['']['text']))						{							$label = $this->sanitize($subcategory['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);					}				}			}			if (is_array($categories_parent))			{				$categories_parent = array_values(SimplePie_Misc::array_unique($categories_parent));			}			// COPYRIGHT			if ($copyright = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent = new $this->feed->copyright_class($copyright_url, $copyright_label);			}			elseif ($copyright = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent = new $this->feed->copyright_class($copyright_url, $copyright_label);			}			// CREDITS			if ($credits = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			elseif ($credits = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			if (is_array($credits_parent))			{				$credits_parent = array_values(SimplePie_Misc::array_unique($credits_parent));			}			// DESCRIPTION			if ($description_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($description_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// DURATION			if ($duration_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'duration'))			{				$seconds = null;				$minutes = null;				$hours = null;				if (isset($duration_parent[0]['data']))				{					$temp = explode(':', $this->sanitize($duration_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					if (sizeof($temp) > 0)					{						(int) $seconds = array_pop($temp);					}					if (sizeof($temp) > 0)					{						(int) $minutes = array_pop($temp);						$seconds += $minutes * 60;					}					if (sizeof($temp) > 0)					{						(int) $hours = array_pop($temp);						$seconds += $hours * 3600;					}					unset($temp);					$duration_parent = $seconds;				}			}			// HASHES			if ($hashes_iterator = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			elseif ($hashes_iterator = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			if (is_array($hashes_parent))			{				$hashes_parent = array_values(SimplePie_Misc::array_unique($hashes_parent));			}			// KEYWORDS			if ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			if (is_array($keywords_parent))			{				$keywords_parent = array_values(SimplePie_Misc::array_unique($keywords_parent));			}			// PLAYER			if ($player_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			elseif ($player_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			// RATINGS			if ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			if (is_array($ratings_parent))			{				$ratings_parent = array_values(SimplePie_Misc::array_unique($ratings_parent));			}			// RESTRICTIONS			if ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			if (is_array($restrictions_parent))			{				$restrictions_parent = array_values(SimplePie_Misc::array_unique($restrictions_parent));			}			// THUMBNAILS			if ($thumbnails = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			elseif ($thumbnails = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			// TITLES			if ($title_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($title_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// Clear the memory			unset($parent);			// Attributes			$bitrate = null;			$channels = null;			$duration = null;			$expression = null;			$framerate = null;			$height = null;			$javascript = null;			$lang = null;			$length = null;			$medium = null;			$samplingrate = null;			$type = null;			$url = null;			$width = null;			// Elements			$captions = null;			$categories = null;			$copyrights = null;			$credits = null;			$description = null;			$hashes = null;			$keywords = null;			$player = null;			$ratings = null;			$restrictions = null;			$thumbnails = null;			$title = null;			// If we have media:group tags, loop through them.			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'group') as $group)			{				// If we have media:content tags, loop through them.				foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] = new $this->feed->category_class($term, $scheme, $label);							}						}						if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] = new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights = new $this->feed->copyright_class($copyright_url, $copyright_label);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights = new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] = new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] = new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			// If we have standalone media:content tags, loop through them.			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content']))			{				foreach ((array) $this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] = new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						else						{							$categories = null;						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights = new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] = new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if ($enclosure = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'enclosure'))			{				if (isset($enclosure[0]['attribs']['']['url']))				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($enclosure[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($enclosure[0]));					if (isset($enclosure[0]['attribs']['']['type']))					{						$type = $this->sanitize($enclosure[0]['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($enclosure[0]['attribs']['']['length']))					{						$length = ceil($enclosure[0]['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if (sizeof($this->data['enclosures']) === 0 && ($url || $type || $length || $bitrate || $captions_parent || $categories_parent || $channels || $copyrights_parent || $credits_parent || $description_parent || $duration_parent || $expression || $framerate || $hashes_parent || $height || $keywords_parent || $lang || $medium || $player_parent || $ratings_parent || $restrictions_parent || $samplingrate || $thumbnails_parent || $title_parent || $width))			{				// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor				$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);			}			$this->data['enclosures'] = array_values(SimplePie_Misc::array_unique($this->data['enclosures']));		}		if (!empty($this->data['enclosures']))		{			return $this->data['enclosures'];		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_source()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'source'))		{			return new $this->feed->source_class($this, $return[0]);		}		else		{			return null;		}	}	/**	 * Creates the add_to_* methods' return data	 *	 * @access private	 * @param string $item_url String to prefix to the item permalink	 * @param string $title_url String to prefix to the item title	 * (and suffix to the item permalink)	 * @return mixed URL if feed exists, false otherwise	 */	function add_to_service($item_url, $title_url = null, $summary_url = null)	{		if ($this->get_permalink() !== null)		{			$return = $item_url . rawurlencode($this->get_permalink());			if ($title_url !== null && $this->get_title() !== null)			{				$return .= $title_url . rawurlencode($this->get_title());			}			if ($summary_url !== null && $this->get_description() !== null)			{				$return .= $summary_url . rawurlencode($this->get_description());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function add_to_blinklist()	{		return $this->add_to_service('http://www.blinklist.com/index.php?Action=Blink/addblink.php&Description=&Url=', '&Title=');	}	function add_to_blogmarks()	{		return $this->add_to_service('http://blogmarks.net/my/new.php?mini=1&simple=1&url=', '&title=');	}	function add_to_delicious()	{		return $this->add_to_service('http://del.icio.us/post/?v=4&url=', '&title=');	}	function add_to_digg()	{		return $this->add_to_service('http://digg.com/submit?url=', '&title=', '&bodytext=');	}	function add_to_furl()	{		return $this->add_to_service('http://www.furl.net/storeIt.jsp?u=', '&t=');	}	function add_to_magnolia()	{		return $this->add_to_service('http://ma.gnolia.com/bookmarklet/add?url=', '&title=');	}	function add_to_myweb20()	{		return $this->add_to_service('http://myweb2.search.yahoo.com/myresults/bookmarklet?u=', '&t=');	}	function add_to_newsvine()	{		return $this->add_to_service('http://www.newsvine.com/_wine/save?u=', '&h=');	}	function add_to_reddit()	{		return $this->add_to_service('http://reddit.com/submit?url=', '&title=');	}	function add_to_segnalo()	{		return $this->add_to_service('http://segnalo.com/post.html.php?url=', '&title=');	}	function add_to_simpy()	{		return $this->add_to_service('http://www.simpy.com/simpy/LinkAdd.do?href=', '&title=');	}	function add_to_spurl()	{		return $this->add_to_service('http://www.spurl.net/spurl.php?v=3&url=', '&title=');	}	function add_to_wists()	{		return $this->add_to_service('http://wists.com/r.php?c=&r=', '&title=');	}	function search_technorati()	{		return $this->add_to_service('http://www.technorati.com/search/');	}}class SimplePie_Source{	var $item;	var $data = array();	function SimplePie_Source($item, $data)	{		$this->item = $item;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	function get_source_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->item->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->item->sanitize($data, $type, $base);	}	function get_item()	{		return $this->item;	}	function get_title()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] = new $this->item->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] = new $this->item->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] = new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] = new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] = new $this->item->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] = new $this->item->feed->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] = new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] = new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] = new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] = new $this->item->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] = new $this->item->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_description()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['xml_lang']))		{			return $this->sanitize($this->data['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}}class SimplePie_Author{	var $name;	var $link;	var $email;	// Constructor, used to input the data	function SimplePie_Author($name = null, $link = null, $email = null)	{		$this->name = $name;		$this->link = $link;		$this->email = $email;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return $this->link;		}		else		{			return null;		}	}	function get_email()	{		if ($this->email !== null)		{			return $this->email;		}		else		{			return null;		}	}}class SimplePie_Category{	var $term;	var $scheme;	var $label;	// Constructor, used to input the data	function SimplePie_Category($term = null, $scheme = null, $label = null)	{		$this->term = $term;		$this->scheme = $scheme;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_term()	{		if ($this->term !== null)		{			return $this->term;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_label()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return $this->get_term();		}	}}class SimplePie_Enclosure{	var $bitrate;	var $captions;	var $categories;	var $channels;	var $copyright;	var $credits;	var $description;	var $duration;	var $expression;	var $framerate;	var $handler;	var $hashes;	var $height;	var $javascript;	var $keywords;	var $lang;	var $length;	var $link;	var $medium;	var $player;	var $ratings;	var $restrictions;	var $samplingrate;	var $thumbnails;	var $title;	var $type;	var $width;	// Constructor, used to input the data	function SimplePie_Enclosure($link = null, $type = null, $length = null, $javascript = null, $bitrate = null, $captions = null, $categories = null, $channels = null, $copyright = null, $credits = null, $description = null, $duration = null, $expression = null, $framerate = null, $hashes = null, $height = null, $keywords = null, $lang = null, $medium = null, $player = null, $ratings = null, $restrictions = null, $samplingrate = null, $thumbnails = null, $title = null, $width = null)	{		$this->bitrate = $bitrate;		$this->captions = $captions;		$this->categories = $categories;		$this->channels = $channels;		$this->copyright = $copyright;		$this->credits = $credits;		$this->description = $description;		$this->duration = $duration;		$this->expression = $expression;		$this->framerate = $framerate;		$this->hashes = $hashes;		$this->height = $height;		$this->javascript = $javascript;		$this->keywords = $keywords;		$this->lang = $lang;		$this->length = $length;		$this->link = $link;		$this->medium = $medium;		$this->player = $player;		$this->ratings = $ratings;		$this->restrictions = $restrictions;		$this->samplingrate = $samplingrate;		$this->thumbnails = $thumbnails;		$this->title = $title;		$this->type = $type;		$this->width = $width;		if (class_exists('idna_convert'))		{			$idn = new idna_convert;			$parsed = SimplePie_Misc::parse_url($link);			$this->link = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->handler = $this->get_handler(); // Needs to load last	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_bitrate()	{		if ($this->bitrate !== null)		{			return $this->bitrate;		}		else		{			return null;		}	}	function get_caption($key = 0)	{		$captions = $this->get_captions();		if (isset($captions[$key]))		{			return $captions[$key];		}		else		{			return null;		}	}	function get_captions()	{		if ($this->captions !== null)		{			return $this->captions;		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		if ($this->categories !== null)		{			return $this->categories;		}		else		{			return null;		}	}	function get_channels()	{		if ($this->channels !== null)		{			return $this->channels;		}		else		{			return null;		}	}	function get_copyright()	{		if ($this->copyright !== null)		{			return $this->copyright;		}		else		{			return null;		}	}	function get_credit($key = 0)	{		$credits = $this->get_credits();		if (isset($credits[$key]))		{			return $credits[$key];		}		else		{			return null;		}	}	function get_credits()	{		if ($this->credits !== null)		{			return $this->credits;		}		else		{			return null;		}	}	function get_description()	{		if ($this->description !== null)		{			return $this->description;		}		else		{			return null;		}	}	function get_duration($convert = false)	{		if ($this->duration !== null)		{			if ($convert)			{				$time = SimplePie_Misc::time_hms($this->duration);				return $time;			}			else			{				return $this->duration;			}		}		else		{			return null;		}	}	function get_expression()	{		if ($this->expression !== null)		{			return $this->expression;		}		else		{			return 'full';		}	}	function get_extension()	{		if ($this->link !== null)		{			$url = SimplePie_Misc::parse_url($this->link);			if ($url['path'] !== '')			{				return pathinfo($url['path'], PATHINFO_EXTENSION);			}		}		return null;	}	function get_framerate()	{		if ($this->framerate !== null)		{			return $this->framerate;		}		else		{			return null;		}	}	function get_handler()	{		return $this->get_real_type(true);	}	function get_hash($key = 0)	{		$hashes = $this->get_hashes();		if (isset($hashes[$key]))		{			return $hashes[$key];		}		else		{			return null;		}	}	function get_hashes()	{		if ($this->hashes !== null)		{			return $this->hashes;		}		else		{			return null;		}	}	function get_height()	{		if ($this->height !== null)		{			return $this->height;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_keyword($key = 0)	{		$keywords = $this->get_keywords();		if (isset($keywords[$key]))		{			return $keywords[$key];		}		else		{			return null;		}	}	function get_keywords()	{		if ($this->keywords !== null)		{			return $this->keywords;		}		else		{			return null;		}	}	function get_length()	{		if ($this->length !== null)		{			return $this->length;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return urldecode($this->link);		}		else		{			return null;		}	}	function get_medium()	{		if ($this->medium !== null)		{			return $this->medium;		}		else		{			return null;		}	}	function get_player()	{		if ($this->player !== null)		{			return $this->player;		}		else		{			return null;		}	}	function get_rating($key = 0)	{		$ratings = $this->get_ratings();		if (isset($ratings[$key]))		{			return $ratings[$key];		}		else		{			return null;		}	}	function get_ratings()	{		if ($this->ratings !== null)		{			return $this->ratings;		}		else		{			return null;		}	}	function get_restriction($key = 0)	{		$restrictions = $this->get_restrictions();		if (isset($restrictions[$key]))		{			return $restrictions[$key];		}		else		{			return null;		}	}	function get_restrictions()	{		if ($this->restrictions !== null)		{			return $this->restrictions;		}		else		{			return null;		}	}	function get_sampling_rate()	{		if ($this->samplingrate !== null)		{			return $this->samplingrate;		}		else		{			return null;		}	}	function get_size()	{		$length = $this->get_length();		if ($length !== null)		{			return round($length/1048576, 2);		}		else		{			return null;		}	}	function get_thumbnail($key = 0)	{		$thumbnails = $this->get_thumbnails();		if (isset($thumbnails[$key]))		{			return $thumbnails[$key];		}		else		{			return null;		}	}	function get_thumbnails()	{		if ($this->thumbnails !== null)		{			return $this->thumbnails;		}		else		{			return null;		}	}	function get_title()	{		if ($this->title !== null)		{			return $this->title;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_width()	{		if ($this->width !== null)		{			return $this->width;		}		else		{			return null;		}	}	function native_embed($options='')	{		return $this->embed($options, true);	}	/**	 * @todo If the dimensions for media:content are defined, use them when width/height are set to 'auto'.	 */	function embed($options = '', $native = false)	{		// Set up defaults		$audio = '';		$video = '';		$alt = '';		$altclass = '';		$loop = 'false';		$width = 'auto';		$height = 'auto';		$bgcolor = '#ffffff';		$mediaplayer = '';		$widescreen = false;		$handler = $this->get_handler();		$type = $this->get_real_type();		// Process options and reassign values as necessary		if (is_array($options))		{			extract($options);		}		else		{			$options = explode(',', $options);			foreach($options as $option)			{				$opt = explode(':', $option, 2);				if (isset($opt[0], $opt[1]))				{					$opt[0] = trim($opt[0]);					$opt[1] = trim($opt[1]);					switch ($opt[0])					{						case 'audio':							$audio = $opt[1];							break;						case 'video':							$video = $opt[1];							break;						case 'alt':							$alt = $opt[1];							break;						case 'altclass':							$altclass = $opt[1];							break;						case 'loop':							$loop = $opt[1];							break;						case 'width':							$width = $opt[1];							break;						case 'height':							$height = $opt[1];							break;						case 'bgcolor':							$bgcolor = $opt[1];							break;						case 'mediaplayer':							$mediaplayer = $opt[1];							break;						case 'widescreen':							$widescreen = $opt[1];							break;					}				}			}		}		$mime = explode('/', $type, 2);		$mime = $mime[0];		// Process values for 'auto'		if ($width === 'auto')		{			if ($mime === 'video')			{				if ($height === 'auto')				{					$width = 480;				}				elseif ($widescreen)				{					$width = round((intval($height)/9)*16);				}				else				{					$width = round((intval($height)/3)*4);				}			}			else			{				$width = '100%';			}		}		if ($height === 'auto')		{			if ($mime === 'audio')			{				$height = 0;			}			elseif ($mime === 'video')			{				if ($width === 'auto')				{					if ($widescreen)					{						$height = 270;					}					else					{						$height = 360;					}				}				elseif ($widescreen)				{					$height = round((intval($width)/16)*9);				}				else				{					$height = round((intval($width)/4)*3);				}			}			else			{				$height = 376;			}		}		elseif ($mime === 'audio')		{			$height = 0;		}		// Set proper placeholder value		if ($mime === 'audio')		{			$placeholder = $audio;		}		elseif ($mime === 'video')		{			$placeholder = $video;		}		$embed = '';		// Make sure the JS library is included		if (!$native)		{			static $javascript_outputted = null;			if (!$javascript_outputted && $this->javascript)			{				$embed .= '<script type="text/javascript" src="?' . htmlspecialchars($this->javascript) . '"></script>';				$javascript_outputted = true;			}		}		// Odeo Feed MP3's		if ($handler === 'odeo')		{			if ($native)			{				$embed .= '<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://adobe.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url=' . $this->get_link() . '"></embed>';			}			else			{				$embed .= '<script type="text/javascript">embed_odeo("' . $this->get_link() . '");</script>';			}		}		// Flash		elseif ($handler === 'flash')		{			if ($native)			{				$embed .= "<embed src=\"" . $this->get_link() . "\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"$type\" quality=\"high\" width=\"$width\" height=\"$height\" bgcolor=\"$bgcolor\" loop=\"$loop\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flash('$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$loop', '$type');</script>";			}		}		// Flash Media Player file types.		// Preferred handler for MP3 file types.		elseif ($handler === 'fmedia' || ($handler === 'mp3' && $mediaplayer !== ''))		{			$height += 20;			if ($native)			{				$embed .= "<embed src=\"$mediaplayer\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"application/x-shockwave-flash\" quality=\"high\" width=\"$width\" height=\"$height\" wmode=\"transparent\" flashvars=\"file=" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "&autostart=false&repeat=$loop&showdigits=true&showfsbutton=false\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flv('$width', '$height', '" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "', '$placeholder', '$loop', '$mediaplayer');</script>";			}		}		// QuickTime 7 file types.  Need to test with QuickTime 6.		// Only handle MP3's if the Flash Media Player is not present.		elseif ($handler === 'quicktime' || ($handler === 'mp3' && $mediaplayer === ''))		{			$height += 16;			if ($native)			{				if ($placeholder !== '')				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" href=\"" . $this->get_link() . "\" src=\"$placeholder\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"false\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}				else				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" src=\"" . $this->get_link() . "\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"true\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}			}			else			{				$embed .= "<script type='text/javascript'>embed_quicktime('$type', '$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$placeholder', '$loop');</script>";			}		}		// Windows Media		elseif ($handler === 'wmedia')		{			$height += 45;			if ($native)			{				$embed .= "<embed type=\"application/x-mplayer2\" src=\"" . $this->get_link() . "\" autosize=\"1\" width=\"$width\" height=\"$height\" showcontrols=\"1\" showstatusbar=\"0\" showdisplay=\"0\" autostart=\"0\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_wmedia('$width', '$height', '" . $this->get_link() . "');</script>";			}		}		// Everything else		else $embed .= '<a href="' . $this->get_link() . '" class="' . $altclass . '">' . $alt . '</a>';		return $embed;	}	function get_real_type($find_handler = false)	{		// If it's Odeo, let's get it out of the way.		if (substr(strtolower($this->get_link()), 0, 15) === 'http://odeo.com')		{			return 'odeo';		}		// Mime-types by handler.		$types_flash = array('application/x-shockwave-flash', 'application/futuresplash'); // Flash		$types_fmedia = array('video/flv', 'video/x-flv','flv-application/octet-stream'); // Flash Media Player		$types_quicktime = array('audio/3gpp', 'audio/3gpp2', 'audio/aac', 'audio/x-aac', 'audio/aiff', 'audio/x-aiff', 'audio/mid', 'audio/midi', 'audio/x-midi', 'audio/mp4', 'audio/m4a', 'audio/x-m4a', 'audio/wav', 'audio/x-wav', 'video/3gpp', 'video/3gpp2', 'video/m4v', 'video/x-m4v', 'video/mp4', 'video/mpeg', 'video/x-mpeg', 'video/quicktime', 'video/sd-video'); // QuickTime		$types_wmedia = array('application/asx', 'application/x-mplayer2', 'audio/x-ms-wma', 'audio/x-ms-wax', 'video/x-ms-asf-plugin', 'video/x-ms-asf', 'video/x-ms-wm', 'video/x-ms-wmv', 'video/x-ms-wvx'); // Windows Media		$types_mp3 = array('audio/mp3', 'audio/x-mp3', 'audio/mpeg', 'audio/x-mpeg'); // MP3		if ($this->get_type() !== null)		{			$type = strtolower($this->type);		}		else		{			$type = null;		}		// If we encounter an unsupported mime-type, check the file extension and guess intelligently.		if (!in_array($type, array_merge($types_flash, $types_fmedia, $types_quicktime, $types_wmedia, $types_mp3)))		{			switch (strtolower($this->get_extension()))			{				// Audio mime-types				case 'aac':				case 'adts':					$type = 'audio/acc';					break;				case 'aif':				case 'aifc':				case 'aiff':				case 'cdda':					$type = 'audio/aiff';					break;				case 'bwf':					$type = 'audio/wav';					break;				case 'kar':				case 'mid':				case 'midi':				case 'smf':					$type = 'audio/midi';					break;				case 'm4a':					$type = 'audio/x-m4a';					break;				case 'mp3':				case 'swa':					$type = 'audio/mp3';					break;				case 'wav':					$type = 'audio/wav';					break;				case 'wax':					$type = 'audio/x-ms-wax';					break;				case 'wma':					$type = 'audio/x-ms-wma';					break;				// Video mime-types				case '3gp':				case '3gpp':					$type = 'video/3gpp';					break;				case '3g2':				case '3gp2':					$type = 'video/3gpp2';					break;				case 'asf':					$type = 'video/x-ms-asf';					break;				case 'flv':					$type = 'video/x-flv';					break;				case 'm1a':				case 'm1s':				case 'm1v':				case 'm15':				case 'm75':				case 'mp2':				case 'mpa':				case 'mpeg':				case 'mpg':				case 'mpm':				case 'mpv':					$type = 'video/mpeg';					break;				case 'm4v':					$type = 'video/x-m4v';					break;				case 'mov':				case 'qt':					$type = 'video/quicktime';					break;				case 'mp4':				case 'mpg4':					$type = 'video/mp4';					break;				case 'sdv':					$type = 'video/sd-video';					break;				case 'wm':					$type = 'video/x-ms-wm';					break;				case 'wmv':					$type = 'video/x-ms-wmv';					break;				case 'wvx':					$type = 'video/x-ms-wvx';					break;				// Flash mime-types				case 'spl':					$type = 'application/futuresplash';					break;				case 'swf':					$type = 'application/x-shockwave-flash';					break;			}		}		if ($find_handler)		{			if (in_array($type, $types_flash))			{				return 'flash';			}			elseif (in_array($type, $types_fmedia))			{				return 'fmedia';			}			elseif (in_array($type, $types_quicktime))			{				return 'quicktime';			}			elseif (in_array($type, $types_wmedia))			{				return 'wmedia';			}			elseif (in_array($type, $types_mp3))			{				return 'mp3';			}			else			{				return null;			}		}		else		{			return $type;		}	}}class SimplePie_Caption{	var $type;	var $lang;	var $startTime;	var $endTime;	var $text;	// Constructor, used to input the data	function SimplePie_Caption($type = null, $lang = null, $startTime = null, $endTime = null, $text = null)	{		$this->type = $type;		$this->lang = $lang;		$this->startTime = $startTime;		$this->endTime = $endTime;		$this->text = $text;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_endtime()	{		if ($this->endTime !== null)		{			return $this->endTime;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_starttime()	{		if ($this->startTime !== null)		{			return $this->startTime;		}		else		{			return null;		}	}	function get_text()	{		if ($this->text !== null)		{			return $this->text;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}}class SimplePie_Credit{	var $role;	var $scheme;	var $name;	// Constructor, used to input the data	function SimplePie_Credit($role = null, $scheme = null, $name = null)	{		$this->role = $role;		$this->scheme = $scheme;		$this->name = $name;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_role()	{		if ($this->role !== null)		{			return $this->role;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}}class SimplePie_Copyright{	var $url;	var $label;	// Constructor, used to input the data	function SimplePie_Copyright($url = null, $label = null)	{		$this->url = $url;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_url()	{		if ($this->url !== null)		{			return $this->url;		}		else		{			return null;		}	}	function get_attribution()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return null;		}	}}class SimplePie_Rating{	var $scheme;	var $value;	// Constructor, used to input the data	function SimplePie_Rating($scheme = null, $value = null)	{		$this->scheme = $scheme;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}class SimplePie_Restriction{	var $relationship;	var $type;	var $value;	// Constructor, used to input the data	function SimplePie_Restriction($relationship = null, $type = null, $value = null)	{		$this->relationship = $relationship;		$this->type = $type;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_relationship()	{		if ($this->relationship !== null)		{			return $this->relationship;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}/** * @todo Move to properly supporting RFC2616 (HTTP/1.1) */class SimplePie_File{	var $url;	var $useragent;	var $success = true;	var $headers = array();	var $body;	var $status_code;	var $redirects = 0;	var $error;	var $method = SIMPLEPIE_FILE_SOURCE_NONE;	function SimplePie_File($url, $timeout = 10, $redirects = 5, $headers = null, $useragent = null, $force_fsockopen = false)	{		if (class_exists('idna_convert'))		{			$idn = new idna_convert;			$parsed = SimplePie_Misc::parse_url($url);			$url = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->url = $url;		$this->useragent = $useragent;		if (preg_match('/^http(s)?:\/\//i', $url))		{			if ($useragent === null)			{				$useragent = ini_get('user_agent');				$this->useragent = $useragent;			}			if (!is_array($headers))			{				$headers = array();			}			if (!$force_fsockopen && function_exists('curl_exec'))			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_CURL;				$fp = curl_init();				$headers2 = array();				foreach ($headers as $key => $value)				{					$headers2[] = "$key: $value";				}				if (version_compare(SimplePie_Misc::get_curl_version(), '7.10.5', '>='))				{					curl_setopt($fp, CURLOPT_ENCODING, '');				}				curl_setopt($fp, CURLOPT_URL, $url);				curl_setopt($fp, CURLOPT_HEADER, 1);				curl_setopt($fp, CURLOPT_RETURNTRANSFER, 1);				curl_setopt($fp, CURLOPT_TIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_CONNECTTIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_REFERER, $url);				curl_setopt($fp, CURLOPT_USERAGENT, $useragent);				curl_setopt($fp, CURLOPT_HTTPHEADER, $headers2);				if (!ini_get('open_basedir') && !ini_get('safe_mode') && version_compare(SimplePie_Misc::get_curl_version(), '7.15.2', '>='))				{					curl_setopt($fp, CURLOPT_FOLLOWLOCATION, 1);					curl_setopt($fp, CURLOPT_MAXREDIRS, $redirects);				}				$this->headers = curl_exec($fp);				if (curl_errno($fp) === 23 || curl_errno($fp) === 61)				{					curl_setopt($fp, CURLOPT_ENCODING, 'none');					$this->headers = curl_exec($fp);				}				if (curl_errno($fp))				{					$this->error = 'cURL error ' . curl_errno($fp) . ': ' . curl_error($fp);					$this->success = false;				}				else				{					$info = curl_getinfo($fp);					curl_close($fp);					$this->headers = explode("\r\n\r\n", $this->headers, $info['redirect_count'] + 1);					$this->headers = array_pop($this->headers);					$parser = new SimplePie_HTTP_Parser($this->headers);					if ($parser->parse())					{						$this->headers = $parser->headers;						$this->body = $parser->body;						$this->status_code = $parser->status_code;						if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)						{							$this->redirects++;							$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);							return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);						}					}				}			}			else			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_FSOCKOPEN;				$url_parts = parse_url($url);				if (isset($url_parts['scheme']) && strtolower($url_parts['scheme']) === 'https')				{					$url_parts['host'] = "ssl://$url_parts[host]";					$url_parts['port'] = 443;				}				if (!isset($url_parts['port']))				{					$url_parts['port'] = 80;				}				$fp = @fsockopen($url_parts['host'], $url_parts['port'], $errno, $errstr, $timeout);				if (!$fp)				{					$this->error = 'fsockopen error: ' . $errstr;					$this->success = false;				}				else				{					stream_set_timeout($fp, $timeout);					if (isset($url_parts['path']))					{						if (isset($url_parts['query']))						{							$get = "$url_parts[path]?$url_parts[query]";						}						else						{							$get = $url_parts['path'];						}					}					else					{						$get = '/';					}					$out = "GET $get HTTP/1.0\r\n";					$out .= "Host: $url_parts[host]\r\n";					$out .= "User-Agent: $useragent\r\n";					if (extension_loaded('zlib'))					{						$out .= "Accept-Encoding: x-gzip,gzip,deflate\r\n";					}					if (isset($url_parts['user']) && isset($url_parts['pass']))					{						$out .= "Authorization: Basic " . base64_encode("$url_parts[user]:$url_parts[pass]") . "\r\n";					}					foreach ($headers as $key => $value)					{						$out .= "$key: $value\r\n";					}					$out .= "Connection: Close\r\n\r\n";					fwrite($fp, $out);					$info = stream_get_meta_data($fp);					$this->headers = '';					while (!$info['eof'] && !$info['timed_out'])					{						$this->headers .= fread($fp, 1160);						$info = stream_get_meta_data($fp);					}					if (!$info['timed_out'])					{						$parser = new SimplePie_HTTP_Parser($this->headers);						if ($parser->parse())						{							$this->headers = $parser->headers;							$this->body = $parser->body;							$this->status_code = $parser->status_code;							if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)							{								$this->redirects++;								$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);								return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);							}							if (isset($this->headers['content-encoding']))							{								// Hey, we act dumb elsewhere, so let's do that here too								switch (strtolower(trim($this->headers['content-encoding'], "\x09\x0A\x0D\x20")))								{									case 'gzip':									case 'x-gzip':										$decoder = new SimplePie_gzdecode($this->body);										if (!$decoder->parse())										{											$this->error = 'Unable to decode HTTP "gzip" stream';											$this->success = false;										}										else										{											$this->body = $decoder->data;										}										break;									case 'deflate':										if (($body = gzuncompress($this->body)) === false)										{											if (($body = gzinflate($this->body)) === false)											{												$this->error = 'Unable to decode HTTP "deflate" stream';												$this->success = false;											}										}										$this->body = $body;										break;									default:										$this->error = 'Unknown content coding';										$this->success = false;								}							}						}					}					else					{						$this->error = 'fsocket timed out';						$this->success = false;					}					fclose($fp);				}			}		}		else		{			$this->method = SIMPLEPIE_FILE_SOURCE_LOCAL | SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS;			if (!$this->body = file_get_contents($url))			{				$this->error = 'file_get_contents could not read the file';				$this->success = false;			}		}	}}/** * HTTP Response Parser * * @package SimplePie */class SimplePie_HTTP_Parser{	/**	 * HTTP Version	 *	 * @access public	 * @var float	 */	var $http_version = 0.0;	/**	 * Status code	 *	 * @access public	 * @var int	 */	var $status_code = 0;	/**	 * Reason phrase	 *	 * @access public	 * @var string	 */	var $reason = '';	/**	 * Key/value pairs of the headers	 *	 * @access public	 * @var array	 */	var $headers = array();	/**	 * Body of the response	 *	 * @access public	 * @var string	 */	var $body = '';	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'http_version';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Name of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $name = '';	/**	 * Value of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $value = '';	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_HTTP_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit' || $this->state === 'body')		{			return true;		}		else		{			$this->http_version = '';			$this->status_code = '';			$this->reason = '';			$this->headers = array();			$this->body = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * See if the next character is LWS	 *	 * @access private	 * @return bool true if the next character is LWS, false if not	 */	function is_linear_whitespace()	{		return (bool) ($this->data[$this->position] === "\x09"			|| $this->data[$this->position] === "\x20"			|| ($this->data[$this->position] === "\x0A"				&& isset($this->data[$this->position + 1])				&& ($this->data[$this->position + 1] === "\x09" || $this->data[$this->position + 1] === "\x20")));	}	/**	 * Parse the HTTP version	 *	 * @access private	 */	function http_version()	{		if (strpos($this->data, "\x0A") !== false && strtoupper(substr($this->data, 0, 5)) === 'HTTP/')		{			$len = strspn($this->data, '0123456789.', 5);			$this->http_version = substr($this->data, 5, $len);			$this->position += 5 + $len;			if (substr_count($this->http_version, '.') <= 1)			{				$this->http_version = (float) $this->http_version;				$this->position += strspn($this->data, "\x09\x20", $this->position);				$this->state = 'status';			}			else			{				$this->state = false;			}		}		else		{			$this->state = false;		}	}	/**	 * Parse the status code	 *	 * @access private	 */	function status()	{		if ($len = strspn($this->data, '0123456789', $this->position))		{			$this->status_code = (int) substr($this->data, $this->position, $len);			$this->position += $len;			$this->state = 'reason';		}		else		{			$this->state = false;		}	}	/**	 * Parse the reason phrase	 *	 * @access private	 */	function reason()	{		$len = strcspn($this->data, "\x0A", $this->position);		$this->reason = trim(substr($this->data, $this->position, $len), "\x09\x0D\x20");		$this->position += $len + 1;		$this->state = 'new_line';	}	/**	 * Deal with a new line, shifting data around as needed	 *	 * @access private	 */	function new_line()	{		$this->value = trim($this->value, "\x0D\x20");		if ($this->name !== '' && $this->value !== '')		{			$this->name = strtolower($this->name);			if (isset($this->headers[$this->name]))			{				$this->headers[$this->name] .= ', ' . $this->value;			}			else			{				$this->headers[$this->name] = $this->value;			}		}		$this->name = '';		$this->value = '';		if (substr($this->data[$this->position], 0, 2) === "\x0D\x0A")		{			$this->position += 2;			$this->state = 'body';		}		elseif ($this->data[$this->position] === "\x0A")		{			$this->position++;			$this->state = 'body';		}		else		{			$this->state = 'name';		}	}	/**	 * Parse a header name	 *	 * @access private	 */	function name()	{		$len = strcspn($this->data, "\x0A:", $this->position);		if (isset($this->data[$this->position + $len]))		{			if ($this->data[$this->position + $len] === "\x0A")			{				$this->position += $len;				$this->state = 'new_line';			}			else			{				$this->name = substr($this->data, $this->position, $len);				$this->position += $len + 1;				$this->state = 'value';			}		}		else		{			$this->state = false;		}	}	/**	 * Parse LWS, replacing consecutive LWS characters with a single space	 *	 * @access private	 */	function linear_whitespace()	{		do		{			if (substr($this->data, $this->position, 2) === "\x0D\x0A")			{				$this->position += 2;			}			elseif ($this->data[$this->position] === "\x0A")			{				$this->position++;			}			$this->position += strspn($this->data, "\x09\x20", $this->position);		} while ($this->has_data() && $this->is_linear_whitespace());		$this->value .= "\x20";	}	/**	 * See what state to move to while within non-quoted header values	 *	 * @access private	 */	function value()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'quote';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				default:					$this->state = 'value_char';					break;			}		}	}	/**	 * Parse a header value while outside quotes	 *	 * @access private	 */	function value_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * See what state to move to while within quoted header values	 *	 * @access private	 */	function quote()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'value';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				case '\\':					$this->position++;					$this->state = 'quote_escaped';					break;				default:					$this->state = 'quote_char';					break;			}		}	}	/**	 * Parse a header value while within quotes	 *	 * @access private	 */	function quote_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"\\", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * Parse an escaped character within quotes	 *	 * @access private	 */	function quote_escaped()	{		$this->value .= $this->data[$this->position];		$this->position++;		$this->state = 'quote';	}	/**	 * Parse the body	 *	 * @access private	 */	function body()	{		$this->body = substr($this->data, $this->position);		$this->state = 'emit';	}}/** * gzdecode * * @package SimplePie */class SimplePie_gzdecode{	/**	 * Compressed data	 *	 * @access private	 * @see gzdecode::$data	 */	var $compressed_data;	/**	 * Size of compressed data	 *	 * @access private	 */	var $compressed_size;	/**	 * Minimum size of a valid gzip string	 *	 * @access private	 */	var $min_compressed_size = 18;	/**	 * Current position of pointer	 *	 * @access private	 */	var $position = 0;	/**	 * Flags (FLG)	 *	 * @access private	 */	var $flags;	/**	 * Uncompressed data	 *	 * @access public	 * @see gzdecode::$compressed_data	 */	var $data;	/**	 * Modified time	 *	 * @access public	 */	var $MTIME;	/**	 * Extra Flags	 *	 * @access public	 */	var $XFL;	/**	 * Operating System	 *	 * @access public	 */	var $OS;	/**	 * Subfield ID 1	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI2	 */	var $SI1;	/**	 * Subfield ID 2	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI1	 */	var $SI2;	/**	 * Extra field content	 *	 * @access public	 * @see gzdecode::$SI1	 * @see gzdecode::$SI2	 */	var $extra_field;	/**	 * Original filename	 *	 * @access public	 */	var $filename;	/**	 * Human readable comment	 *	 * @access public	 */	var $comment;	/**	 * Don't allow anything to be set	 *	 * @access public	 */	function __set($name, $value)	{		trigger_error("Cannot write property $name", E_USER_ERROR);	}	/**	 * Set the compressed string and related properties	 *	 * @access public	 */	function SimplePie_gzdecode($data)	{		$this->compressed_data = $data;		$this->compressed_size = strlen($data);	}	/**	 * Decode the GZIP stream	 *	 * @access public	 */	function parse()	{		if ($this->compressed_size >= $this->min_compressed_size)		{			// Check ID1, ID2, and CM			if (substr($this->compressed_data, 0, 3) !== "\x1F\x8B\x08")			{				return false;			}			// Get the FLG (FLaGs)			$this->flags = ord($this->compressed_data[3]);			// FLG bits above (1 << 4) are reserved			if ($this->flags > 0x1F)			{				return false;			}			// Advance the pointer after the above			$this->position += 4;			// MTIME			$mtime = substr($this->compressed_data, $this->position, 4);			// Reverse the string if we're on a big-endian arch because l is the only signed long and is machine endianness			if (current(unpack('S', "\x00\x01")) === 1)			{				$mtime = strrev($mtime);			}			$this->MTIME = current(unpack('l', $mtime));			$this->position += 4;			// Get the XFL (eXtra FLags)			$this->XFL = ord($this->compressed_data[$this->position++]);			// Get the OS (Operating System)			$this->OS = ord($this->compressed_data[$this->position++]);			// Parse the FEXTRA			if ($this->flags & 4)			{				// Read subfield IDs				$this->SI1 = $this->compressed_data[$this->position++];				$this->SI2 = $this->compressed_data[$this->position++];				// SI2 set to zero is reserved for future use				if ($this->SI2 === "\x00")				{					return false;				}				// Get the length of the extra field				$len = current(unpack('v', substr($this->compressed_data, $this->position, 2)));				$position += 2;				// Check the length of the string is still valid				$this->min_compressed_size += $len + 4;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the extra field to the given data					$this->extra_field = substr($this->compressed_data, $this->position, $len);					$this->position += $len;				}				else				{					return false;				}			}			// Parse the FNAME			if ($this->flags & 8)			{				// Get the length of the filename				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original filename to the given string					$this->filename = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FCOMMENT			if ($this->flags & 16)			{				// Get the length of the comment				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original comment to the given string					$this->comment = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FHCRC			if ($this->flags & 2)			{				// Check the length of the string is still valid				$this->min_compressed_size += $len + 2;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Read the CRC					$crc = current(unpack('v', substr($this->compressed_data, $this->position, 2)));					// Check the CRC matches					if ((crc32(substr($this->compressed_data, 0, $this->position)) & 0xFFFF) === $crc)					{						$this->position += 2;					}					else					{						return false;					}				}				else				{					return false;				}			}			// Decompress the actual data			if (($this->data = gzinflate(substr($this->compressed_data, $this->position, -8))) === false)			{				return false;			}			else			{				$this->position = $this->compressed_size - 8;			}			// Check CRC of data			$crc = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			/*if (extension_loaded('hash') && sprintf('%u', current(unpack('V', hash('crc32b', $this->data)))) !== sprintf('%u', $crc))			{				return false;			}*/			// Check ISIZE of data			$isize = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			if (sprintf('%u', strlen($this->data) & 0xFFFFFFFF) !== sprintf('%u', $isize))			{				return false;			}			// Wow, against all odds, we've actually got a valid gzip string			return true;		}		else		{			return false;		}	}}class SimplePie_Cache{	/**	 * Don't call the constructor. Please.	 *	 * @access private	 */	function SimplePie_Cache()	{		trigger_error('Please call SimplePie_Cache::create() instead of the constructor', E_USER_ERROR);	}	/**	 * Create a new SimplePie_Cache object	 *	 * @static	 * @access public	 */	function create($location, $filename, $extension)	{		$location_iri = new SimplePie_IRI($location);		switch ($location_iri->get_scheme())		{			case 'mysql':				if (extension_loaded('mysql'))				{					return new SimplePie_Cache_MySQL($location_iri, $filename, $extension);				}				break;			default:				return new SimplePie_Cache_File($location, $filename, $extension);		}	}}class SimplePie_Cache_File{	var $location;	var $filename;	var $extension;	var $name;	function SimplePie_Cache_File($location, $filename, $extension)	{		$this->location = $location;		$this->filename = $filename;		$this->extension = $extension;		$this->name = "$this->location/$this->filename.$this->extension";	}	function save($data)	{		if (file_exists($this->name) && is_writeable($this->name) || file_exists($this->location) && is_writeable($this->location))		{			if (is_a($data, 'SimplePie'))			{				$data = $data->data;			}			$data = serialize($data);			if (function_exists('file_put_contents'))			{				return (bool) file_put_contents($this->name, $data);			}			else			{				$fp = fopen($this->name, 'wb');				if ($fp)				{					fwrite($fp, $data);					fclose($fp);					return true;				}			}		}		return false;	}	function load()	{		if (file_exists($this->name) && is_readable($this->name))		{			return unserialize(file_get_contents($this->name));		}		return false;	}	function mtime()	{		if (file_exists($this->name))		{			return filemtime($this->name);		}		return false;	}	function touch()	{		if (file_exists($this->name))		{			return touch($this->name);		}		return false;	}	function unlink()	{		if (file_exists($this->name))		{			return unlink($this->name);		}		return false;	}}class SimplePie_Cache_DB{	function prepare_simplepie_object_for_cache($data)	{		$items = $data->get_items();		$items_by_id = array();		if (!empty($items))		{			foreach ($items as $item)			{				$items_by_id[$item->get_id()] = $item;			}			if (count($items_by_id) !== count($items))			{				$items_by_id = array();				foreach ($items as $item)				{					$items_by_id[$item->get_id(true)] = $item;				}			}			if (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0];			}			else			{				$channel = null;			}			if ($channel !== null)			{				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']);				}			}			if (isset($data->data['items']))			{				unset($data->data['items']);			}			if (isset($data->data['ordered_items']))			{				unset($data->data['ordered_items']);			}		}		return array(serialize($data->data), $items_by_id);	}}class SimplePie_Cache_MySQL extends SimplePie_Cache_DB{	var $mysql;	var $options;	var $id;	function SimplePie_Cache_MySQL($mysql_location, $name, $extension)	{		$host = $mysql_location->get_host();		if (SimplePie_Misc::stripos($host, 'unix(') === 0 && substr($host, -1) === ')')		{			$server = ':' . substr($host, 5, -1);		}		else		{			$server = $host;			if ($mysql_location->get_port() !== null)			{				$server .= ':' . $mysql_location->get_port();			}		}		if (strpos($mysql_location->get_userinfo(), ':') !== false)		{			list($username, $password) = explode(':', $mysql_location->get_userinfo(), 2);		}		else		{			$username = $mysql_location->get_userinfo();			$password = null;		}		if ($this->mysql = mysql_connect($server, $username, $password))		{			$this->id = $name . $extension;			$this->options = SimplePie_Misc::parse_str($mysql_location->get_query());			if (!isset($this->options['prefix'][0]))			{				$this->options['prefix'][0] = '';			}			if (mysql_select_db(ltrim($mysql_location->get_path(), '/'))				&& mysql_query('SET NAMES utf8')				&& ($query = mysql_unbuffered_query('SHOW TABLES')))			{				$db = array();				while ($row = mysql_fetch_row($query))				{					$db[] = $row[0];				}				if (!in_array($this->options['prefix'][0] . 'cache_data', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'cache_data` (`id` TEXT CHARACTER SET utf8 NOT NULL, `items` SMALLINT NOT NULL DEFAULT 0, `data` BLOB NOT NULL, `mtime` INT UNSIGNED NOT NULL, UNIQUE (`id`(125)))'))					{						$this->mysql = null;					}				}				if (!in_array($this->options['prefix'][0] . 'items', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'items` (`feed_id` TEXT CHARACTER SET utf8 NOT NULL, `id` TEXT CHARACTER SET utf8 NOT NULL, `data` TEXT CHARACTER SET utf8 NOT NULL, `posted` INT UNSIGNED NOT NULL, INDEX `feed_id` (`feed_id`(125)))'))					{						$this->mysql = null;					}				}			}			else			{				$this->mysql = null;			}		}	}	function save($data)	{		if ($this->mysql)		{			$feed_id = "'" . mysql_real_escape_string($this->id) . "'";			if (is_a($data, 'SimplePie'))			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$data = clone($data);				}				$prepared = $this->prepare_simplepie_object_for_cache($data);				if ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))				{					if (mysql_num_rows($query))					{						$items = count($prepared[1]);						if ($items)						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = ' . $items . ', `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						else						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						if (!mysql_query($sql, $this->mysql))						{							return false;						}					}					elseif (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(' . $feed_id . ', ' . count($prepared[1]) . ', \'' . mysql_real_escape_string($prepared[0]) . '\', ' . time() . ')', $this->mysql))					{						return false;					}					$ids = array_keys($prepared[1]);					if (!empty($ids))					{						foreach ($ids as $id)						{							$database_ids[] = mysql_real_escape_string($id);						}						if ($query = mysql_unbuffered_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'items` WHERE `id` = \'' . implode('\' OR `id` = \'', $database_ids) . '\' AND `feed_id` = ' . $feed_id, $this->mysql))						{							$existing_ids = array();							while ($row = mysql_fetch_row($query))							{								$existing_ids[] = $row[0];							}							$new_ids = array_diff($ids, $existing_ids);							foreach ($new_ids as $new_id)							{								if (!($date = $prepared[1][$new_id]->get_date('U')))								{									$date = time();								}								if (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'items` (`feed_id`, `id`, `data`, `posted`) VALUES(' . $feed_id . ', \'' . mysql_real_escape_string($new_id) . '\', \'' . mysql_real_escape_string(serialize($prepared[1][$new_id]->data)) . '\', ' . $date . ')', $this->mysql))								{									return false;								}							}							return true;						}					}					else					{						return true;					}				}			}			elseif ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))			{				if (mysql_num_rows($query))				{					if (mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = 0, `data` = \'' . mysql_real_escape_string(serialize($data)) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id, $this->mysql))					{						return true;					}				}				elseif (mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(\'' . mysql_real_escape_string($this->id) . '\', 0, \'' . mysql_real_escape_string(serialize($data)) . '\', ' . time() . ')', $this->mysql))				{					return true;				}			}		}		return false;	}	function load()	{		if ($this->mysql && ($query = mysql_query('SELECT `items`, `data` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			$data = unserialize($row[1]);			if (isset($this->options['items'][0]))			{				$items = (int) $this->options['items'][0];			}			else			{				$items = (int) $row[0];			}			if ($items !== 0)			{				if (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0];				}				else				{					$feed = null;				}				if ($feed !== null)				{					$sql = 'SELECT `data` FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . '\' ORDER BY `posted` DESC';					if ($items > 0)					{						$sql .= ' LIMIT ' . $items;					}					if ($query = mysql_unbuffered_query($sql, $this->mysql))					{						while ($row = mysql_fetch_row($query))						{							$feed['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry'][] = unserialize($row[0]);						}					}					else					{						return false;					}				}			}			return $data;		}		return false;	}	function mtime()	{		if ($this->mysql && ($query = mysql_query('SELECT `mtime` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			return $row[0];		}		else		{			return false;		}	}	function touch()	{		if ($this->mysql && ($query = mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `mtime` = ' . time() . ' WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && mysql_affected_rows($this->mysql))		{			return true;		}		else		{			return false;		}	}	function unlink()	{		if ($this->mysql && ($query = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($query2 = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)))		{			return true;		}		else		{			return false;		}	}}class SimplePie_Misc{	function time_hms($seconds)	{		$time = '';		$hours = floor($seconds / 3600);		$remainder = $seconds % 3600;		if ($hours > 0)		{			$time .= $hours.':';		}		$minutes = floor($remainder / 60);		$seconds = $remainder % 60;		if ($minutes < 10 && $hours > 0)		{			$minutes = '0' . $minutes;		}		if ($seconds < 10)		{			$seconds = '0' . $seconds;		}		$time .= $minutes.':';		$time .= $seconds;		return $time;	}	function absolutize_url($relative, $base)	{		$iri = SimplePie_IRI::absolutize(new SimplePie_IRI($base), $relative);		return $iri->get_iri();	}	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	function get_element($realname, $string)	{		$return = array();		$name = preg_quote($realname, '/');		if (preg_match_all("/<($name)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$name>|(\/)?>)/siU", $string, $matches, PREG_SET_ORDER | PREG_OFFSET_CAPTURE))		{			for ($i = 0, $total_matches = count($matches); $i < $total_matches; $i++)			{				$return[$i]['tag'] = $realname;				$return[$i]['full'] = $matches[$i][0][0];				$return[$i]['offset'] = $matches[$i][0][1];				if (strlen($matches[$i][3][0]) <= 2)				{					$return[$i]['self_closing'] = true;				}				else				{					$return[$i]['self_closing'] = false;					$return[$i]['content'] = $matches[$i][4][0];				}				$return[$i]['attribs'] = array();				if (isset($matches[$i][2][0]) && preg_match_all('/[\x09\x0A\x0B\x0C\x0D\x20]+([^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*)(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"([^"]*)"|\'([^\']*)\'|([^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?/', ' ' . $matches[$i][2][0] . ' ', $attribs, PREG_SET_ORDER))				{					for ($j = 0, $total_attribs = count($attribs); $j < $total_attribs; $j++)					{						if (count($attribs[$j]) === 2)						{							$attribs[$j][2] = $attribs[$j][1];						}						$return[$i]['attribs'][strtolower($attribs[$j][1])]['data'] = SimplePie_Misc::entities_decode(end($attribs[$j]), 'UTF-8');					}				}			}		}		return $return;	}	function element_implode($element)	{		$full = "<$element[tag]";		foreach ($element['attribs'] as $key => $value)		{			$key = strtolower($key);			$full .= " $key=\"" . htmlspecialchars($value['data']) . '"';		}		if ($element['self_closing'])		{			$full .= ' />';		}		else		{			$full .= ">$element[content]</$element[tag]>";		}		return $full;	}	function error($message, $level, $file, $line)	{		if ((ini_get('error_reporting') & $level) > 0)		{			switch ($level)			{				case E_USER_ERROR:					$note = 'PHP Error';					break;				case E_USER_WARNING:					$note = 'PHP Warning';					break;				case E_USER_NOTICE:					$note = 'PHP Notice';					break;				default:					$note = 'Unknown Error';					break;			}			error_log("$note: $message in $file on line $line", 0);		}		return $message;	}	/**	 * If a file has been cached, retrieve and display it.	 *	 * This is most useful for caching images (get_favicon(), etc.),	 * however it works for all cached files.  This WILL NOT display ANY	 * file/image/page/whatever, but rather only display what has already	 * been cached by SimplePie.	 *	 * @access public	 * @see SimplePie::get_favicon()	 * @param str $identifier_url URL that is used to identify the content.	 * This may or may not be the actual URL of the live content.	 * @param str $cache_location Location of SimplePie's cache.  Defaults	 * to './cache'.	 * @param str $cache_extension The file extension that the file was	 * cached with.  Defaults to 'spc'.	 * @param str $cache_class Name of the cache-handling class being used	 * in SimplePie.  Defaults to 'SimplePie_Cache', and should be left	 * as-is unless you've overloaded the class.	 * @param str $cache_name_function Obsolete. Exists for backwards	 * compatibility reasons only.	 */	function display_cached_file($identifier_url, $cache_location = './cache', $cache_extension = 'spc', $cache_class = 'SimplePie_Cache', $cache_name_function = 'md5')	{		$cache = call_user_func(array($cache_class, 'create'), $cache_location, $identifier_url, $cache_extension);		if ($file = $cache->load())		{			if (isset($file['headers']['content-type']))			{				header('Content-type:' . $file['headers']['content-type']);			}			else			{				header('Content-type: application/octet-stream');			}			header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days			echo $file['body'];			exit;		}		die('Cached file for ' . $identifier_url . ' cannot be found.');	}	function fix_protocol($url, $http = 1)	{		$url = SimplePie_Misc::normalize_url($url);		$parsed = SimplePie_Misc::parse_url($url);		if ($parsed['scheme'] !== '' && $parsed['scheme'] !== 'http' && $parsed['scheme'] !== 'https')		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['authority'], $parsed['path'], $parsed['query'], $parsed['fragment']), $http);		}		if ($parsed['scheme'] === '' && $parsed['authority'] === '' && !file_exists($url))		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['path'], '', $parsed['query'], $parsed['fragment']), $http);		}		if ($http === 2 && $parsed['scheme'] !== '')		{			return "feed:$url";		}		elseif ($http === 3 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'podcast', 0, 4);		}		elseif ($http === 4 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'itpc', 0, 4);		}		else		{			return $url;		}	}	function parse_url($url)	{		$iri = new SimplePie_IRI($url);		return array(			'scheme' => (string) $iri->get_scheme(),			'authority' => (string) $iri->get_authority(),			'path' => (string) $iri->get_path(),			'query' => (string) $iri->get_query(),			'fragment' => (string) $iri->get_fragment()		);	}	function compress_parse_url($scheme = '', $authority = '', $path = '', $query = '', $fragment = '')	{		$iri = new SimplePie_IRI('');		$iri->set_scheme($scheme);		$iri->set_authority($authority);		$iri->set_path($path);		$iri->set_query($query);		$iri->set_fragment($fragment);		return $iri->get_iri();	}	function normalize_url($url)	{		$iri = new SimplePie_IRI($url);		return $iri->get_iri();	}	function percent_encoding_normalization($match)	{		$integer = hexdec($match[1]);		if ($integer >= 0x41 && $integer <= 0x5A || $integer >= 0x61 && $integer <= 0x7A || $integer >= 0x30 && $integer <= 0x39 || $integer === 0x2D || $integer === 0x2E || $integer === 0x5F || $integer === 0x7E)		{			return chr($integer);		}		else		{			return strtoupper($match[0]);		}	}	/**	 * Remove bad UTF-8 bytes	 *	 * PCRE Pattern to locate bad bytes in a UTF-8 string comes from W3C	 * FAQ: Multilingual Forms (modified to include full ASCII range)	 *	 * @author Geoffrey Sneddon	 * @see http://www.w3.org/International/questions/qa-forms-utf-8	 * @param string $str String to remove bad UTF-8 bytes from	 * @return string UTF-8 string	 */	function utf8_bad_replace($str)	{		if (function_exists('iconv') && ($return = @iconv('UTF-8', 'UTF-8//IGNORE', $str)))		{			return $return;		}		elseif (function_exists('mb_convert_encoding') && ($return = @mb_convert_encoding($str, 'UTF-8', 'UTF-8')))		{			return $return;		}		elseif (preg_match_all('/(?:[\x00-\x7F]|[\xC2-\xDF][\x80-\xBF]|\xE0[\xA0-\xBF][\x80-\xBF]|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}|\xED[\x80-\x9F][\x80-\xBF]|\xF0[\x90-\xBF][\x80-\xBF]{2}|[\xF1-\xF3][\x80-\xBF]{3}|\xF4[\x80-\x8F][\x80-\xBF]{2})+/', $str, $matches))		{			return implode("\xEF\xBF\xBD", $matches[0]);		}		elseif ($str !== '')		{			return "\xEF\xBF\xBD";		}		else		{			return '';		}	}	/**	 * Converts a Windows-1252 encoded string to a UTF-8 encoded string	 *	 * @static	 * @access public	 * @param string $string Windows-1252 encoded string	 * @return string UTF-8 encoded string	 */	function windows_1252_to_utf8($string)	{		static $convert_table = array("\x80" => "\xE2\x82\xAC", "\x81" => "\xEF\xBF\xBD", "\x82" => "\xE2\x80\x9A", "\x83" => "\xC6\x92", "\x84" => "\xE2\x80\x9E", "\x85" => "\xE2\x80\xA6", "\x86" => "\xE2\x80\xA0", "\x87" => "\xE2\x80\xA1", "\x88" => "\xCB\x86", "\x89" => "\xE2\x80\xB0", "\x8A" => "\xC5\xA0", "\x8B" => "\xE2\x80\xB9", "\x8C" => "\xC5\x92", "\x8D" => "\xEF\xBF\xBD", "\x8E" => "\xC5\xBD", "\x8F" => "\xEF\xBF\xBD", "\x90" => "\xEF\xBF\xBD", "\x91" => "\xE2\x80\x98", "\x92" => "\xE2\x80\x99", "\x93" => "\xE2\x80\x9C", "\x94" => "\xE2\x80\x9D", "\x95" => "\xE2\x80\xA2", "\x96" => "\xE2\x80\x93", "\x97" => "\xE2\x80\x94", "\x98" => "\xCB\x9C", "\x99" => "\xE2\x84\xA2", "\x9A" => "\xC5\xA1", "\x9B" => "\xE2\x80\xBA", "\x9C" => "\xC5\x93", "\x9D" => "\xEF\xBF\xBD", "\x9E" => "\xC5\xBE", "\x9F" => "\xC5\xB8", "\xA0" => "\xC2\xA0", "\xA1" => "\xC2\xA1", "\xA2" => "\xC2\xA2", "\xA3" => "\xC2\xA3", "\xA4" => "\xC2\xA4", "\xA5" => "\xC2\xA5", "\xA6" => "\xC2\xA6", "\xA7" => "\xC2\xA7", "\xA8" => "\xC2\xA8", "\xA9" => "\xC2\xA9", "\xAA" => "\xC2\xAA", "\xAB" => "\xC2\xAB", "\xAC" => "\xC2\xAC", "\xAD" => "\xC2\xAD", "\xAE" => "\xC2\xAE", "\xAF" => "\xC2\xAF", "\xB0" => "\xC2\xB0", "\xB1" => "\xC2\xB1", "\xB2" => "\xC2\xB2", "\xB3" => "\xC2\xB3", "\xB4" => "\xC2\xB4", "\xB5" => "\xC2\xB5", "\xB6" => "\xC2\xB6", "\xB7" => "\xC2\xB7", "\xB8" => "\xC2\xB8", "\xB9" => "\xC2\xB9", "\xBA" => "\xC2\xBA", "\xBB" => "\xC2\xBB", "\xBC" => "\xC2\xBC", "\xBD" => "\xC2\xBD", "\xBE" => "\xC2\xBE", "\xBF" => "\xC2\xBF", "\xC0" => "\xC3\x80", "\xC1" => "\xC3\x81", "\xC2" => "\xC3\x82", "\xC3" => "\xC3\x83", "\xC4" => "\xC3\x84", "\xC5" => "\xC3\x85", "\xC6" => "\xC3\x86", "\xC7" => "\xC3\x87", "\xC8" => "\xC3\x88", "\xC9" => "\xC3\x89", "\xCA" => "\xC3\x8A", "\xCB" => "\xC3\x8B", "\xCC" => "\xC3\x8C", "\xCD" => "\xC3\x8D", "\xCE" => "\xC3\x8E", "\xCF" => "\xC3\x8F", "\xD0" => "\xC3\x90", "\xD1" => "\xC3\x91", "\xD2" => "\xC3\x92", "\xD3" => "\xC3\x93", "\xD4" => "\xC3\x94", "\xD5" => "\xC3\x95", "\xD6" => "\xC3\x96", "\xD7" => "\xC3\x97", "\xD8" => "\xC3\x98", "\xD9" => "\xC3\x99", "\xDA" => "\xC3\x9A", "\xDB" => "\xC3\x9B", "\xDC" => "\xC3\x9C", "\xDD" => "\xC3\x9D", "\xDE" => "\xC3\x9E", "\xDF" => "\xC3\x9F", "\xE0" => "\xC3\xA0", "\xE1" => "\xC3\xA1", "\xE2" => "\xC3\xA2", "\xE3" => "\xC3\xA3", "\xE4" => "\xC3\xA4", "\xE5" => "\xC3\xA5", "\xE6" => "\xC3\xA6", "\xE7" => "\xC3\xA7", "\xE8" => "\xC3\xA8", "\xE9" => "\xC3\xA9", "\xEA" => "\xC3\xAA", "\xEB" => "\xC3\xAB", "\xEC" => "\xC3\xAC", "\xED" => "\xC3\xAD", "\xEE" => "\xC3\xAE", "\xEF" => "\xC3\xAF", "\xF0" => "\xC3\xB0", "\xF1" => "\xC3\xB1", "\xF2" => "\xC3\xB2", "\xF3" => "\xC3\xB3", "\xF4" => "\xC3\xB4", "\xF5" => "\xC3\xB5", "\xF6" => "\xC3\xB6", "\xF7" => "\xC3\xB7", "\xF8" => "\xC3\xB8", "\xF9" => "\xC3\xB9", "\xFA" => "\xC3\xBA", "\xFB" => "\xC3\xBB", "\xFC" => "\xC3\xBC", "\xFD" => "\xC3\xBD", "\xFE" => "\xC3\xBE", "\xFF" => "\xC3\xBF");		return strtr($string, $convert_table);	}	function change_encoding($data, $input, $output)	{		$input = SimplePie_Misc::encoding($input);		$output = SimplePie_Misc::encoding($output);		// We fail to fail on non US-ASCII bytes		if ($input === 'US-ASCII')		{			static $non_ascii_octects = '';			if (!$non_ascii_octects)			{				for ($i = 0x80; $i <= 0xFF; $i++)				{					$non_ascii_octects .= chr($i);				}			}			$data = substr($data, 0, strcspn($data, $non_ascii_octects));		}		// This is first, as behaviour of this is completely predictable		if ($input === 'Windows-1252' && $output === 'UTF-8')		{			return SimplePie_Misc::windows_1252_to_utf8($data);		}		// This is second, as behaviour of this varies only with PHP version (the middle part of this expression checks the encoding is supported).		elseif (function_exists('mb_convert_encoding') && @mb_convert_encoding("\x80", 'UTF-16BE', $input) !== "\x00\x80" && ($return = @mb_convert_encoding($data, $output, $input)))		{			return $return;		}		// This is last, as behaviour of this varies with OS userland and PHP version		elseif (function_exists('iconv') && ($return = @iconv($input, $output, $data)))		{			return $return;		}		// If we can't do anything, just fail		else		{			return false;		}	}	function encoding($charset)	{		// Normalization from UTS #22		switch (strtolower(preg_replace('/(?:[^a-zA-Z0-9]+|([^0-9])0+)/', '\1', $charset)))		{			case 'adobestandardencoding':			case 'csadobestandardencoding':				return 'Adobe-Standard-Encoding';			case 'adobesymbolencoding':			case 'cshppsmath':				return 'Adobe-Symbol-Encoding';			case 'ami1251':			case 'amiga1251':				return 'Amiga-1251';			case 'ansix31101983':			case 'csat5001983':			case 'csiso99naplps':			case 'isoir99':			case 'naplps':				return 'ANSI_X3.110-1983';			case 'arabic7':			case 'asmo449':			case 'csiso89asmo449':			case 'iso9036':			case 'isoir89':				return 'ASMO_449';			case 'big5':			case 'csbig5':			case 'xxbig5':				return 'Big5';			case 'big5hkscs':				return 'Big5-HKSCS';			case 'bocu1':			case 'csbocu1':				return 'BOCU-1';			case 'brf':			case 'csbrf':				return 'BRF';			case 'bs4730':			case 'csiso4unitedkingdom':			case 'gb':			case 'iso646gb':			case 'isoir4':			case 'uk':				return 'BS_4730';			case 'bsviewdata':			case 'csiso47bsviewdata':			case 'isoir47':				return 'BS_viewdata';			case 'cesu8':			case 'cscesu8':				return 'CESU-8';			case 'ca':			case 'csa71':			case 'csaz243419851':			case 'csiso121canadian1':			case 'iso646ca':			case 'isoir121':				return 'CSA_Z243.4-1985-1';			case 'csa72':			case 'csaz243419852':			case 'csiso122canadian2':			case 'iso646ca2':			case 'isoir122':				return 'CSA_Z243.4-1985-2';			case 'csaz24341985gr':			case 'csiso123csaz24341985gr':			case 'isoir123':				return 'CSA_Z243.4-1985-gr';			case 'csiso139csn369103':			case 'csn369103':			case 'isoir139':				return 'CSN_369103';			case 'csdecmcs':			case 'dec':			case 'decmcs':				return 'DEC-MCS';			case 'csiso21german':			case 'de':			case 'din66003':			case 'iso646de':			case 'isoir21':				return 'DIN_66003';			case 'csdkus':			case 'dkus':				return 'dk-us';			case 'csiso646danish':			case 'dk':			case 'ds2089':			case 'iso646dk':				return 'DS_2089';			case 'csibmebcdicatde':			case 'ebcdicatde':				return 'EBCDIC-AT-DE';			case 'csebcdicatdea':			case 'ebcdicatdea':				return 'EBCDIC-AT-DE-A';			case 'csebcdiccafr':			case 'ebcdiccafr':				return 'EBCDIC-CA-FR';			case 'csebcdicdkno':			case 'ebcdicdkno':				return 'EBCDIC-DK-NO';			case 'csebcdicdknoa':			case 'ebcdicdknoa':				return 'EBCDIC-DK-NO-A';			case 'csebcdices':			case 'ebcdices':				return 'EBCDIC-ES';			case 'csebcdicesa':			case 'ebcdicesa':				return 'EBCDIC-ES-A';			case 'csebcdicess':			case 'ebcdicess':				return 'EBCDIC-ES-S';			case 'csebcdicfise':			case 'ebcdicfise':				return 'EBCDIC-FI-SE';			case 'csebcdicfisea':			case 'ebcdicfisea':				return 'EBCDIC-FI-SE-A';			case 'csebcdicfr':			case 'ebcdicfr':				return 'EBCDIC-FR';			case 'csebcdicit':			case 'ebcdicit':				return 'EBCDIC-IT';			case 'csebcdicpt':			case 'ebcdicpt':				return 'EBCDIC-PT';			case 'csebcdicuk':			case 'ebcdicuk':				return 'EBCDIC-UK';			case 'csebcdicus':			case 'ebcdicus':				return 'EBCDIC-US';			case 'csiso111ecmacyrillic':			case 'ecmacyrillic':			case 'isoir111':			case 'koi8e':				return 'ECMA-cyrillic';			case 'csiso17spanish':			case 'es':			case 'iso646es':			case 'isoir17':				return 'ES';			case 'csiso85spanish2':			case 'es2':			case 'iso646es2':			case 'isoir85':				return 'ES2';			case 'cseucfixwidjapanese':			case 'extendedunixcodefixedwidthforjapanese':				return 'Extended_UNIX_Code_Fixed_Width_for_Japanese';			case 'cseucpkdfmtjapanese':			case 'eucjp':			case 'extendedunixcodepackedformatforjapanese':				return 'Extended_UNIX_Code_Packed_Format_for_Japanese';			case 'gb18030':				return 'GB18030';			case 'chinese':			case 'cp936':			case 'csgb2312':			case 'csiso58gb231280':			case 'gb2312':			case 'gb231280':			case 'gbk':			case 'isoir58':			case 'ms936':			case 'windows936':				return 'GBK';			case 'cn':			case 'csiso57gb1988':			case 'gb198880':			case 'iso646cn':			case 'isoir57':				return 'GB_1988-80';			case 'csiso153gost1976874':			case 'gost1976874':			case 'isoir153':			case 'stsev35888':				return 'GOST_19768-74';			case 'csiso150':			case 'csiso150greekccitt':			case 'greekccitt':			case 'isoir150':				return 'greek-ccitt';			case 'csiso88greek7':			case 'greek7':			case 'isoir88':				return 'greek7';			case 'csiso18greek7old':			case 'greek7old':			case 'isoir18':				return 'greek7-old';			case 'cshpdesktop':			case 'hpdesktop':				return 'HP-DeskTop';			case 'cshplegal':			case 'hplegal':				return 'HP-Legal';			case 'cshpmath8':			case 'hpmath8':				return 'HP-Math8';			case 'cshppifont':			case 'hppifont':				return 'HP-Pi-font';			case 'cshproman8':			case 'hproman8':			case 'r8':			case 'roman8':				return 'hp-roman8';			case 'hzgb2312':				return 'HZ-GB-2312';			case 'csibmsymbols':			case 'ibmsymbols':				return 'IBM-Symbols';			case 'csibmthai':			case 'ibmthai':				return 'IBM-Thai';			case 'ccsid858':			case 'cp858':			case 'ibm858':			case 'pcmultilingual850euro':				return 'IBM00858';			case 'ccsid924':			case 'cp924':			case 'ebcdiclatin9euro':			case 'ibm924':				return 'IBM00924';			case 'ccsid1140':			case 'cp1140':			case 'ebcdicus37euro':			case 'ibm1140':				return 'IBM01140';			case 'ccsid1141':			case 'cp1141':			case 'ebcdicde273euro':			case 'ibm1141':				return 'IBM01141';			case 'ccsid1142':			case 'cp1142':			case 'ebcdicdk277euro':			case 'ebcdicno277euro':			case 'ibm1142':				return 'IBM01142';			case 'ccsid1143':			case 'cp1143':			case 'ebcdicfi278euro':			case 'ebcdicse278euro':			case 'ibm1143':				return 'IBM01143';			case 'ccsid1144':			case 'cp1144':			case 'ebcdicit280euro':			case 'ibm1144':				return 'IBM01144';			case 'ccsid1145':			case 'cp1145':			case 'ebcdices284euro':			case 'ibm1145':				return 'IBM01145';			case 'ccsid1146':			case 'cp1146':			case 'ebcdicgb285euro':			case 'ibm1146':				return 'IBM01146';			case 'ccsid1147':			case 'cp1147':			case 'ebcdicfr297euro':			case 'ibm1147':				return 'IBM01147';			case 'ccsid1148':			case 'cp1148':			case 'ebcdicinternational500euro':			case 'ibm1148':				return 'IBM01148';			case 'ccsid1149':			case 'cp1149':			case 'ebcdicis871euro':			case 'ibm1149':				return 'IBM01149';			case 'cp37':			case 'csibm37':			case 'ebcdiccpca':			case 'ebcdiccpnl':			case 'ebcdiccpus':			case 'ebcdiccpwt':			case 'ibm37':				return 'IBM037';			case 'cp38':			case 'csibm38':			case 'ebcdicint':			case 'ibm38':				return 'IBM038';			case 'cp273':			case 'csibm273':			case 'ibm273':				return 'IBM273';			case 'cp274':			case 'csibm274':			case 'ebcdicbe':			case 'ibm274':				return 'IBM274';			case 'cp275':			case 'csibm275':			case 'ebcdicbr':			case 'ibm275':				return 'IBM275';			case 'csibm277':			case 'ebcdiccpdk':			case 'ebcdiccpno':			case 'ibm277':				return 'IBM277';			case 'cp278':			case 'csibm278':			case 'ebcdiccpfi':			case 'ebcdiccpse':			case 'ibm278':				return 'IBM278';			case 'cp280':			case 'csibm280':			case 'ebcdiccpit':			case 'ibm280':				return 'IBM280';			case 'cp281':			case 'csibm281':			case 'ebcdicjpe':			case 'ibm281':				return 'IBM281';			case 'cp284':			case 'csibm284':			case 'ebcdiccpes':			case 'ibm284':				return 'IBM284';			case 'cp285':			case 'csibm285':			case 'ebcdiccpgb':			case 'ibm285':				return 'IBM285';			case 'cp290':			case 'csibm290':			case 'ebcdicjpkana':			case 'ibm290':				return 'IBM290';			case 'cp297':			case 'csibm297':			case 'ebcdiccpfr':			case 'ibm297':				return 'IBM297';			case 'cp420':			case 'csibm420':			case 'ebcdiccpar1':			case 'ibm420':				return 'IBM420';			case 'cp423':			case 'csibm423':			case 'ebcdiccpgr':			case 'ibm423':				return 'IBM423';			case 'cp424':			case 'csibm424':			case 'ebcdiccphe':			case 'ibm424':				return 'IBM424';			case '437':			case 'cp437':			case 'cspc8codepage437':			case 'ibm437':				return 'IBM437';			case 'cp500':			case 'csibm500':			case 'ebcdiccpbe':			case 'ebcdiccpch':			case 'ibm500':				return 'IBM500';			case 'cp775':			case 'cspc775baltic':			case 'ibm775':				return 'IBM775';			case '850':			case 'cp850':			case 'cspc850multilingual':			case 'ibm850':				return 'IBM850';			case '851':			case 'cp851':			case 'csibm851':			case 'ibm851':				return 'IBM851';			case '852':			case 'cp852':			case 'cspcp852':			case 'ibm852':				return 'IBM852';			case '855':			case 'cp855':			case 'csibm855':			case 'ibm855':				return 'IBM855';			case '857':			case 'cp857':			case 'csibm857':			case 'ibm857':				return 'IBM857';			case '860':			case 'cp860':			case 'csibm860':			case 'ibm860':				return 'IBM860';			case '861':			case 'cp861':			case 'cpis':			case 'csibm861':			case 'ibm861':				return 'IBM861';			case '862':			case 'cp862':			case 'cspc862latinhebrew':			case 'ibm862':				return 'IBM862';			case '863':			case 'cp863':			case 'csibm863':			case 'ibm863':				return 'IBM863';			case 'cp864':			case 'csibm864':			case 'ibm864':				return 'IBM864';			case '865':			case 'cp865':			case 'csibm865':			case 'ibm865':				return 'IBM865';			case '866':			case 'cp866':			case 'csibm866':			case 'ibm866':				return 'IBM866';			case 'cp868':			case 'cpar':			case 'csibm868':			case 'ibm868':				return 'IBM868';			case '869':			case 'cp869':			case 'cpgr':			case 'csibm869':			case 'ibm869':				return 'IBM869';			case 'cp870':			case 'csibm870':			case 'ebcdiccproece':			case 'ebcdiccpyu':			case 'ibm870':				return 'IBM870';			case 'cp871':			case 'csibm871':			case 'ebcdiccpis':			case 'ibm871':				return 'IBM871';			case 'cp880':			case 'csibm880':			case 'ebcdiccyrillic':			case 'ibm880':				return 'IBM880';			case 'cp891':			case 'csibm891':			case 'ibm891':				return 'IBM891';			case 'cp903':			case 'csibm903':			case 'ibm903':				return 'IBM903';			case '904':			case 'cp904':			case 'csibbm904':			case 'ibm904':				return 'IBM904';			case 'cp905':			case 'csibm905':			case 'ebcdiccptr':			case 'ibm905':				return 'IBM905';			case 'cp918':			case 'csibm918':			case 'ebcdiccpar2':			case 'ibm918':				return 'IBM918';			case 'cp1026':			case 'csibm1026':			case 'ibm1026':				return 'IBM1026';			case 'ibm1047':				return 'IBM1047';			case 'csiso143iecp271':			case 'iecp271':			case 'isoir143':				return 'IEC_P27-1';			case 'csiso49inis':			case 'inis':			case 'isoir49':				return 'INIS';			case 'csiso50inis8':			case 'inis8':			case 'isoir50':				return 'INIS-8';			case 'csiso51iniscyrillic':			case 'iniscyrillic':			case 'isoir51':				return 'INIS-cyrillic';			case 'csinvariant':			case 'invariant':				return 'INVARIANT';			case 'iso2022cn':				return 'ISO-2022-CN';			case 'iso2022cnext':				return 'ISO-2022-CN-EXT';			case 'csiso2022jp':			case 'iso2022jp':				return 'ISO-2022-JP';			case 'csiso2022jp2':			case 'iso2022jp2':				return 'ISO-2022-JP-2';			case 'csiso2022kr':			case 'iso2022kr':				return 'ISO-2022-KR';			case 'cswindows30latin1':			case 'iso88591windows30latin1':				return 'ISO-8859-1-Windows-3.0-Latin-1';			case 'cswindows31latin1':			case 'iso88591windows31latin1':				return 'ISO-8859-1-Windows-3.1-Latin-1';			case 'csisolatin2':			case 'iso88592':			case 'iso885921987':			case 'isoir101':			case 'l2':			case 'latin2':				return 'ISO-8859-2';			case 'cswindows31latin2':			case 'iso88592windowslatin2':				return 'ISO-8859-2-Windows-Latin-2';			case 'csisolatin3':			case 'iso88593':			case 'iso885931988':			case 'isoir109':			case 'l3':			case 'latin3':				return 'ISO-8859-3';			case 'csisolatin4':			case 'iso88594':			case 'iso885941988':			case 'isoir110':			case 'l4':			case 'latin4':				return 'ISO-8859-4';			case 'csisolatincyrillic':			case 'cyrillic':			case 'iso88595':			case 'iso885951988':			case 'isoir144':				return 'ISO-8859-5';			case 'arabic':			case 'asmo708':			case 'csisolatinarabic':			case 'ecma114':			case 'iso88596':			case 'iso885961987':			case 'isoir127':				return 'ISO-8859-6';			case 'csiso88596e':			case 'iso88596e':				return 'ISO-8859-6-E';			case 'csiso88596i':			case 'iso88596i':				return 'ISO-8859-6-I';			case 'csisolatingreek':			case 'ecma118':			case 'elot928':			case 'greek':			case 'greek8':			case 'iso88597':			case 'iso885971987':			case 'isoir126':				return 'ISO-8859-7';			case 'csisolatinhebrew':			case 'hebrew':			case 'iso88598':			case 'iso885981988':			case 'isoir138':				return 'ISO-8859-8';			case 'csiso88598e':			case 'iso88598e':				return 'ISO-8859-8-E';			case 'csiso88598i':			case 'iso88598i':				return 'ISO-8859-8-I';			case 'cswindows31latin5':			case 'iso88599windowslatin5':				return 'ISO-8859-9-Windows-Latin-5';			case 'csisolatin6':			case 'iso885910':			case 'iso8859101992':			case 'isoir157':			case 'l6':			case 'latin6':				return 'ISO-8859-10';			case 'iso885913':				return 'ISO-8859-13';			case 'iso885914':			case 'iso8859141998':			case 'isoceltic':			case 'isoir199':			case 'l8':			case 'latin8':				return 'ISO-8859-14';			case 'iso885915':			case 'latin9':				return 'ISO-8859-15';			case 'iso885916':			case 'iso8859162001':			case 'isoir226':			case 'l10':			case 'latin10':				return 'ISO-8859-16';			case 'iso10646j1':				return 'ISO-10646-J-1';			case 'csunicode':			case 'iso10646ucs2':				return 'ISO-10646-UCS-2';			case 'csucs4':			case 'iso10646ucs4':				return 'ISO-10646-UCS-4';			case 'csunicodeascii':			case 'iso10646ucsbasic':				return 'ISO-10646-UCS-Basic';			case 'csunicodelatin1':			case 'iso10646':			case 'iso10646unicodelatin1':				return 'ISO-10646-Unicode-Latin1';			case 'csiso10646utf1':			case 'iso10646utf1':				return 'ISO-10646-UTF-1';			case 'csiso115481':			case 'iso115481':			case 'isotr115481':				return 'ISO-11548-1';			case 'csiso90':			case 'isoir90':				return 'iso-ir-90';			case 'csunicodeibm1261':			case 'isounicodeibm1261':				return 'ISO-Unicode-IBM-1261';			case 'csunicodeibm1264':			case 'isounicodeibm1264':				return 'ISO-Unicode-IBM-1264';			case 'csunicodeibm1265':			case 'isounicodeibm1265':				return 'ISO-Unicode-IBM-1265';			case 'csunicodeibm1268':			case 'isounicodeibm1268':				return 'ISO-Unicode-IBM-1268';			case 'csunicodeibm1276':			case 'isounicodeibm1276':				return 'ISO-Unicode-IBM-1276';			case 'csiso646basic1983':			case 'iso646basic1983':			case 'ref':				return 'ISO_646.basic:1983';			case 'csiso2intlrefversion':			case 'irv':			case 'iso646irv1983':			case 'isoir2':				return 'ISO_646.irv:1983';			case 'csiso2033':			case 'e13b':			case 'iso20331983':			case 'isoir98':				return 'ISO_2033-1983';			case 'csiso5427cyrillic':			case 'iso5427':			case 'isoir37':				return 'ISO_5427';			case 'iso5427cyrillic1981':			case 'iso54271981':			case 'isoir54':				return 'ISO_5427:1981';			case 'csiso5428greek':			case 'iso54281980':			case 'isoir55':				return 'ISO_5428:1980';			case 'csiso6937add':			case 'iso6937225':			case 'isoir152':				return 'ISO_6937-2-25';			case 'csisotextcomm':			case 'iso69372add':			case 'isoir142':				return 'ISO_6937-2-add';			case 'csiso8859supp':			case 'iso8859supp':			case 'isoir154':			case 'latin125':				return 'ISO_8859-supp';			case 'csiso10367box':			case 'iso10367box':			case 'isoir155':				return 'ISO_10367-box';			case 'csiso15italian':			case 'iso646it':			case 'isoir15':			case 'it':				return 'IT';			case 'csiso13jisc6220jp':			case 'isoir13':			case 'jisc62201969':			case 'jisc62201969jp':			case 'katakana':			case 'x2017':				return 'JIS_C6220-1969-jp';			case 'csiso14jisc6220ro':			case 'iso646jp':			case 'isoir14':			case 'jisc62201969ro':			case 'jp':				return 'JIS_C6220-1969-ro';			case 'csiso42jisc62261978':			case 'isoir42':			case 'jisc62261978':				return 'JIS_C6226-1978';			case 'csiso87jisx208':			case 'isoir87':			case 'jisc62261983':			case 'jisx2081983':			case 'x208':				return 'JIS_C6226-1983';			case 'csiso91jisc62291984a':			case 'isoir91':			case 'jisc62291984a':			case 'jpocra':				return 'JIS_C6229-1984-a';			case 'csiso92jisc62991984b':			case 'iso646jpocrb':			case 'isoir92':			case 'jisc62291984b':			case 'jpocrb':				return 'JIS_C6229-1984-b';			case 'csiso93jis62291984badd':			case 'isoir93':			case 'jisc62291984badd':			case 'jpocrbadd':				return 'JIS_C6229-1984-b-add';			case 'csiso94jis62291984hand':			case 'isoir94':			case 'jisc62291984hand':			case 'jpocrhand':				return 'JIS_C6229-1984-hand';			case 'csiso95jis62291984handadd':			case 'isoir95':			case 'jisc62291984handadd':			case 'jpocrhandadd':				return 'JIS_C6229-1984-hand-add';			case 'csiso96jisc62291984kana':			case 'isoir96':			case 'jisc62291984kana':				return 'JIS_C6229-1984-kana';			case 'csjisencoding':			case 'jisencoding':				return 'JIS_Encoding';			case 'cshalfwidthkatakana':			case 'jisx201':			case 'x201':				return 'JIS_X0201';			case 'csiso159jisx2121990':			case 'isoir159':			case 'jisx2121990':			case 'x212':				return 'JIS_X0212-1990';			case 'csiso141jusib1002':			case 'iso646yu':			case 'isoir141':			case 'js':			case 'jusib1002':			case 'yu':				return 'JUS_I.B1.002';			case 'csiso147macedonian':			case 'isoir147':			case 'jusib1003mac':			case 'macedonian':				return 'JUS_I.B1.003-mac';			case 'csiso146serbian':			case 'isoir146':			case 'jusib1003serb':			case 'serbian':				return 'JUS_I.B1.003-serb';			case 'koi7switched':				return 'KOI7-switched';			case 'cskoi8r':			case 'koi8r':				return 'KOI8-R';			case 'koi8u':				return 'KOI8-U';			case 'csksc5636':			case 'iso646kr':			case 'ksc5636':				return 'KSC5636';			case 'cskz1048':			case 'kz1048':			case 'rk1048':			case 'strk10482002':				return 'KZ-1048';			case 'csiso19latingreek':			case 'isoir19':			case 'latingreek':				return 'latin-greek';			case 'csiso27latingreek1':			case 'isoir27':			case 'latingreek1':				return 'Latin-greek-1';			case 'csiso158lap':			case 'isoir158':			case 'lap':			case 'latinlap':				return 'latin-lap';			case 'csmacintosh':			case 'mac':			case 'macintosh':				return 'macintosh';			case 'csmicrosoftpublishing':			case 'microsoftpublishing':				return 'Microsoft-Publishing';			case 'csmnem':			case 'mnem':				return 'MNEM';			case 'csmnemonic':			case 'mnemonic':				return 'MNEMONIC';			case 'csiso86hungarian':			case 'hu':			case 'iso646hu':			case 'isoir86':			case 'msz77953':				return 'MSZ_7795.3';			case 'csnatsdano':			case 'isoir91':			case 'natsdano':				return 'NATS-DANO';			case 'csnatsdanoadd':			case 'isoir92':			case 'natsdanoadd':				return 'NATS-DANO-ADD';			case 'csnatssefi':			case 'isoir81':			case 'natssefi':				return 'NATS-SEFI';			case 'csnatssefiadd':			case 'isoir82':			case 'natssefiadd':				return 'NATS-SEFI-ADD';			case 'csiso151cuba':			case 'cuba':			case 'iso646cu':			case 'isoir151':			case 'ncnc1081':				return 'NC_NC00-10:81';			case 'csiso69french':			case 'fr':			case 'iso646fr':			case 'isoir69':			case 'nfz62010':				return 'NF_Z_62-010';			case 'csiso25french':			case 'iso646fr1':			case 'isoir25':			case 'nfz620101973':				return 'NF_Z_62-010_(1973)';			case 'csiso60danishnorwegian':			case 'csiso60norwegian1':			case 'iso646no':			case 'isoir60':			case 'no':			case 'ns45511':				return 'NS_4551-1';			case 'csiso61norwegian2':			case 'iso646no2':			case 'isoir61':			case 'no2':			case 'ns45512':				return 'NS_4551-2';			case 'osdebcdicdf3irv':				return 'OSD_EBCDIC_DF03_IRV';			case 'osdebcdicdf41':				return 'OSD_EBCDIC_DF04_1';			case 'osdebcdicdf415':				return 'OSD_EBCDIC_DF04_15';			case 'cspc8danishnorwegian':			case 'pc8danishnorwegian':				return 'PC8-Danish-Norwegian';			case 'cspc8turkish':			case 'pc8turkish':				return 'PC8-Turkish';			case 'csiso16portuguese':			case 'iso646pt':			case 'isoir16':			case 'pt':				return 'PT';			case 'csiso84portuguese2':			case 'iso646pt2':			case 'isoir84':			case 'pt2':				return 'PT2';			case 'cp154':			case 'csptcp154':			case 'cyrillicasian':			case 'pt154':			case 'ptcp154':				return 'PTCP154';			case 'scsu':				return 'SCSU';			case 'csiso10swedish':			case 'fi':			case 'iso646fi':			case 'iso646se':			case 'isoir10':			case 'se':			case 'sen850200b':				return 'SEN_850200_B';			case 'csiso11swedishfornames':			case 'iso646se2':			case 'isoir11':			case 'se2':			case 'sen850200c':				return 'SEN_850200_C';			case 'csshiftjis':			case 'mskanji':			case 'shiftjis':				return 'Shift_JIS';			case 'csiso102t617bit':			case 'isoir102':			case 't617bit':				return 'T.61-7bit';			case 'csiso103t618bit':			case 'isoir103':			case 't61':			case 't618bit':				return 'T.61-8bit';			case 'csiso128t101g2':			case 'isoir128':			case 't101g2':				return 'T.101-G2';			case 'cstscii':			case 'tscii':				return 'TSCII';			case 'csunicode11':			case 'unicode11':				return 'UNICODE-1-1';			case 'csunicode11utf7':			case 'unicode11utf7':				return 'UNICODE-1-1-UTF-7';			case 'csunknown8bit':			case 'unknown8bit':				return 'UNKNOWN-8BIT';			case 'ansix341968':			case 'ansix341986':			case 'ascii':			case 'cp367':			case 'csascii':			case 'ibm367':			case 'iso646irv1991':			case 'iso646us':			case 'isoir6':			case 'us':			case 'usascii':				return 'US-ASCII';			case 'csusdk':			case 'usdk':				return 'us-dk';			case 'utf7':				return 'UTF-7';			case 'utf8':				return 'UTF-8';			case 'utf16':				return 'UTF-16';			case 'utf16be':				return 'UTF-16BE';			case 'utf16le':				return 'UTF-16LE';			case 'utf32':				return 'UTF-32';			case 'utf32be':				return 'UTF-32BE';			case 'utf32le':				return 'UTF-32LE';			case 'csventurainternational':			case 'venturainternational':				return 'Ventura-International';			case 'csventuramath':			case 'venturamath':				return 'Ventura-Math';			case 'csventuraus':			case 'venturaus':				return 'Ventura-US';			case 'csiso70videotexsupp1':			case 'isoir70':			case 'videotexsuppl':				return 'videotex-suppl';			case 'csviqr':			case 'viqr':				return 'VIQR';			case 'csviscii':			case 'viscii':				return 'VISCII';			case 'cswindows31j':			case 'windows31j':				return 'Windows-31J';			case 'iso885911':			case 'tis620':				return 'windows-874';			case 'cseuckr':			case 'csksc56011987':			case 'euckr':			case 'isoir149':			case 'korean':			case 'ksc5601':			case 'ksc56011987':			case 'ksc56011989':			case 'windows949':				return 'windows-949';			case 'windows1250':				return 'windows-1250';			case 'windows1251':				return 'windows-1251';			case 'cp819':			case 'csisolatin1':			case 'ibm819':			case 'iso88591':			case 'iso885911987':			case 'isoir100':			case 'l1':			case 'latin1':			case 'windows1252':				return 'windows-1252';			case 'windows1253':				return 'windows-1253';			case 'csisolatin5':			case 'iso88599':			case 'iso885991989':			case 'isoir148':			case 'l5':			case 'latin5':			case 'windows1254':				return 'windows-1254';			case 'windows1255':				return 'windows-1255';			case 'windows1256':				return 'windows-1256';			case 'windows1257':				return 'windows-1257';			case 'windows1258':				return 'windows-1258';			default:				return $charset;		}	}	function get_curl_version()	{		if (is_array($curl = curl_version()))		{			$curl = $curl['version'];		}		elseif (substr($curl, 0, 5) === 'curl/')		{			$curl = substr($curl, 5, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 5));		}		elseif (substr($curl, 0, 8) === 'libcurl/')		{			$curl = substr($curl, 8, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 8));		}		else		{			$curl = 0;		}		return $curl;	}	function is_subclass_of($class1, $class2)	{		if (func_num_args() !== 2)		{			trigger_error('Wrong parameter count for SimplePie_Misc::is_subclass_of()', E_USER_WARNING);		}		elseif (version_compare(PHP_VERSION, '5.0.3', '>=') || is_object($class1))		{			return is_subclass_of($class1, $class2);		}		elseif (is_string($class1) && is_string($class2))		{			if (class_exists($class1))			{				if (class_exists($class2))				{					$class2 = strtolower($class2);					while ($class1 = strtolower(get_parent_class($class1)))					{						if ($class1 === $class2)						{							return true;						}					}				}			}			else			{				trigger_error('Unknown class passed as parameter', E_USER_WARNNG);			}		}		return false;	}	/**	 * Strip HTML comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function strip_comments($data)	{		$output = '';		while (($start = strpos($data, '<!--')) !== false)		{			$output .= substr($data, 0, $start);			if (($end = strpos($data, '-->', $start)) !== false)			{				$data = substr_replace($data, '', 0, $end + 3);			}			else			{				$data = '';			}		}		return $output . $data;	}	function parse_date($dt)	{		$parser = SimplePie_Parse_Date::get();		return $parser->parse($dt);	}	/**	 * Decode HTML entities	 *	 * @static	 * @access public	 * @param string $data Input data	 * @return string Output data	 */	function entities_decode($data)	{		$decoder = new SimplePie_Decode_HTML_Entities($data);		return $decoder->parse();	}	/**	 * Remove RFC822 comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function uncomment_rfc822($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	function parse_mime($mime)	{		if (($pos = strpos($mime, ';')) === false)		{			return trim($mime);		}		else		{			return trim(substr($mime, 0, $pos));		}	}	function htmlspecialchars_decode($string, $quote_style)	{		if (function_exists('htmlspecialchars_decode'))		{			return htmlspecialchars_decode($string, $quote_style);		}		else		{			return strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));		}	}	function atom_03_construct_type($attribs)	{		if (isset($attribs['']['mode']) && strtolower(trim($attribs['']['mode']) === 'base64'))		{			$mode = SIMPLEPIE_CONSTRUCT_BASE64;		}		else		{			$mode = SIMPLEPIE_CONSTRUCT_NONE;		}		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':				case 'text/plain':					return SIMPLEPIE_CONSTRUCT_TEXT | $mode;				case 'html':				case 'text/html':					return SIMPLEPIE_CONSTRUCT_HTML | $mode;				case 'xhtml':				case 'application/xhtml+xml':					return SIMPLEPIE_CONSTRUCT_XHTML | $mode;				default:					return SIMPLEPIE_CONSTRUCT_NONE | $mode;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT | $mode;		}	}	function atom_10_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;				default:					return SIMPLEPIE_CONSTRUCT_NONE;			}		}		return SIMPLEPIE_CONSTRUCT_TEXT;	}	function atom_10_content_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			$type = strtolower(trim($attribs['']['type']));			switch ($type)			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;			}			if (in_array(substr($type, -4), array('+xml', '/xml')) || substr($type, 0, 5) === 'text/')			{				return SIMPLEPIE_CONSTRUCT_NONE;			}			else			{				return SIMPLEPIE_CONSTRUCT_BASE64;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT;		}	}	function is_isegment_nz_nc($string)	{		return (bool) preg_match('/^([A-Za-z0-9\-._~\x{A0}-\x{D7FF}\x{F900}-\x{FDCF}\x{FDF0}-\x{FFEF}\x{10000}-\x{1FFFD}\x{20000}-\x{2FFFD}\x{30000}-\x{3FFFD}\x{40000}-\x{4FFFD}\x{50000}-\x{5FFFD}\x{60000}-\x{6FFFD}\x{70000}-\x{7FFFD}\x{80000}-\x{8FFFD}\x{90000}-\x{9FFFD}\x{A0000}-\x{AFFFD}\x{B0000}-\x{BFFFD}\x{C0000}-\x{CFFFD}\x{D0000}-\x{DFFFD}\x{E1000}-\x{EFFFD}!$&\'()*+,;=@]|(%[0-9ABCDEF]{2}))+$/u', $string);	}	function space_seperated_tokens($string)	{		$space_characters = "\x20\x09\x0A\x0B\x0C\x0D";		$string_length = strlen($string);		$position = strspn($string, $space_characters);		$tokens = array();		while ($position < $string_length)		{			$len = strcspn($string, $space_characters, $position);			$tokens[] = substr($string, $position, $len);			$position += $len;			$position += strspn($string, $space_characters, $position);		}		return $tokens;	}	function array_unique($array)	{		if (version_compare(PHP_VERSION, '5.2', '>='))		{			return array_unique($array);		}		else		{			$array = (array) $array;			$new_array = array();			$new_array_strings = array();			foreach ($array as $key => $value)			{				if (is_object($value))				{					if (method_exists($value, '__toString'))					{						$cmp = $value->__toString();					}					else					{						trigger_error('Object of class ' . get_class($value) . ' could not be converted to string', E_USER_ERROR);					}				}				elseif (is_array($value))				{					$cmp = (string) reset($value);				}				else				{					$cmp = (string) $value;				}				if (!in_array($cmp, $new_array_strings))				{					$new_array[$key] = $value;					$new_array_strings[] = $cmp;				}			}			return $new_array;		}	}	/**	 * Converts a unicode codepoint to a UTF-8 character	 *	 * @static	 * @access public	 * @param int $codepoint Unicode codepoint	 * @return string UTF-8 character	 */	function codepoint_to_utf8($codepoint)	{		$codepoint = (int) $codepoint;		if ($codepoint < 0)		{			return false;		}		else if ($codepoint <= 0x7f)		{			return chr($codepoint);		}		else if ($codepoint <= 0x7ff)		{			return chr(0xc0 | ($codepoint >> 6)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0xffff)		{			return chr(0xe0 | ($codepoint >> 12)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0x10ffff)		{			return chr(0xf0 | ($codepoint >> 18)) . chr(0x80 | (($codepoint >> 12) & 0x3f)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else		{			// U+FFFD REPLACEMENT CHARACTER			return "\xEF\xBF\xBD";		}	}	/**	 * Re-implementation of PHP 5's stripos()	 *	 * Returns the numeric position of the first occurrence of needle in the	 * haystack string.	 *	 * @static	 * @access string	 * @param object $haystack	 * @param string $needle Note that the needle may be a string of one or more	 *     characters. If needle is not a string, it is converted to an integer	 *     and applied as the ordinal value of a character.	 * @param int $offset The optional offset parameter allows you to specify which	 *     character in haystack to start searching. The position returned is still	 *     relative to the beginning of haystack.	 * @return bool If needle is not found, stripos() will return boolean false.	 */	function stripos($haystack, $needle, $offset = 0)	{		if (function_exists('stripos'))		{			return stripos($haystack, $needle, $offset);		}		else		{			if (is_string($needle))			{				$needle = strtolower($needle);			}			elseif (is_int($needle) || is_bool($needle) || is_double($needle))			{				$needle = strtolower(chr($needle));			}			else			{				trigger_error('needle is not a string or an integer', E_USER_WARNING);				return false;			}			return strpos(strtolower($haystack), $needle, $offset);		}	}	/**	 * Similar to parse_str()	 *	 * Returns an associative array of name/value pairs, where the value is an	 * array of values that have used the same name	 *	 * @static	 * @access string	 * @param string $str The input string.	 * @return array	 */	function parse_str($str)	{		$return = array();		$str = explode('&', $str);		foreach ($str as $section)		{			if (strpos($section, '=') !== false)			{				list($name, $value) = explode('=', $section, 2);				$return[urldecode($name)][] = urldecode($value);			}			else			{				$return[urldecode($section)][] = null;			}		}		return $return;	}	/**	 * Detect XML encoding, as per XML 1.0 Appendix F.1	 *	 * @todo Add support for EBCDIC	 * @param string $data XML data	 * @return array Possible encodings	 */	function xml_encoding($data)	{		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$encoding[] = 'UTF-16LE';		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$encoding[] = 'UTF-8';		}		// UTF-32 Big Endian Without BOM		elseif (substr($data, 0, 20) === "\x00\x00\x00\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C")		{			if ($pos = strpos($data, "\x00\x00\x00\x3F\x00\x00\x00\x3E"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian Without BOM		elseif (substr($data, 0, 20) === "\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C\x00\x00\x00")		{			if ($pos = strpos($data, "\x3F\x00\x00\x00\x3E\x00\x00\x00"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian Without BOM		elseif (substr($data, 0, 10) === "\x00\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C")		{			if ($pos = strpos($data, "\x00\x3F\x00\x3E"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian Without BOM		elseif (substr($data, 0, 10) === "\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C\x00")		{			if ($pos = strpos($data, "\x3F\x00\x3E\x00"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16LE';		}		// US-ASCII (or superset)		elseif (substr($data, 0, 5) === "\x3C\x3F\x78\x6D\x6C")		{			if ($pos = strpos($data, "\x3F\x3E"))			{				$parser = new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-8';		}		// Fallback to UTF-8		else		{			$encoding[] = 'UTF-8';		}		return $encoding;	}	function output_javascript()	{		if (function_exists('ob_gzhandler'))		{			ob_start('ob_gzhandler');		}		header('Content-type: text/javascript; charset: UTF-8');		header('Cache-Control: must-revalidate');		header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days		?>function embed_odeo(link) {	document.writeln('<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url='+link+'"></embed>');}function embed_quicktime(type, bgcolor, width, height, link, placeholder, loop) {	if (placeholder != '')	{		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" href="'+link+'" src="'+placeholder+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="false" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}	else {		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" src="'+link+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="true" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}}function embed_flash(bgcolor, width, height, link, loop, type) {	document.writeln('<embed src="'+link+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="'+type+'" quality="high" width="'+width+'" height="'+height+'" bgcolor="'+bgcolor+'" loop="'+loop+'"></embed>');}function embed_flv(width, height, link, placeholder, loop, player) {	document.writeln('<embed src="'+player+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="'+width+'" height="'+height+'" wmode="transparent" flashvars="file='+link+'&autostart=false&repeat='+loop+'&showdigits=true&showfsbutton=false"></embed>');}function embed_wmedia(width, height, link) {	document.writeln('<embed type="application/x-mplayer2" src="'+link+'" autosize="1" width="'+width+'" height="'+height+'" showcontrols="1" showstatusbar="0" showdisplay="0" autostart="0"></embed>');}		<?php	}}/** * Decode HTML Entities * * This implements HTML5 as of revision 967 (2007-06-28) * * @package SimplePie */class SimplePie_Decode_HTML_Entities{	/**	 * Data to be parsed	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Currently consumed bytes	 *	 * @access private	 * @var string	 */	var $consumed = '';	/**	 * Position of the current byte being parsed	 *	 * @access private	 * @var int	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_Decode_HTML_Entities($data)	{		$this->data = $data;	}	/**	 * Parse the input data	 *	 * @access public	 * @return string Output data	 */	function parse()	{		while (($this->position = strpos($this->data, '&', $this->position)) !== false)		{			$this->consume();			$this->entity();			$this->consumed = '';		}		return $this->data;	}	/**	 * Consume the next byte	 *	 * @access private	 * @return mixed The next byte, or false, if there is no more data	 */	function consume()	{		if (isset($this->data[$this->position]))		{			$this->consumed .= $this->data[$this->position];			return $this->data[$this->position++];		}		else		{			return false;		}	}	/**	 * Consume a range of characters	 *	 * @access private	 * @param string $chars Characters to consume	 * @return mixed A series of characters that match the range, or false	 */	function consume_range($chars)	{		if ($len = strspn($this->data, $chars, $this->position))		{			$data = substr($this->data, $this->position, $len);			$this->consumed .= $data;			$this->position += $len;			return $data;		}		else		{			return false;		}	}	/**	 * Unconsume one byte	 *	 * @access private	 */	function unconsume()	{		$this->consumed = substr($this->consumed, 0, -1);		$this->position--;	}	/**	 * Decode an entity	 *	 * @access private	 */	function entity()	{		switch ($this->consume())		{			case "\x09":			case "\x0A":			case "\x0B":			case "\x0B":			case "\x0C":			case "\x20":			case "\x3C":			case "\x26":			case false:				break;			case "\x23":				switch ($this->consume())				{					case "\x78":					case "\x58":						$range = '0123456789ABCDEFabcdef';						$hex = true;						break;					default:						$range = '0123456789';						$hex = false;						$this->unconsume();						break;				}				if ($codepoint = $this->consume_range($range))				{					static $windows_1252_specials = array(0x0D => "\x0A", 0x80 => "\xE2\x82\xAC", 0x81 => "\xEF\xBF\xBD", 0x82 => "\xE2\x80\x9A", 0x83 => "\xC6\x92", 0x84 => "\xE2\x80\x9E", 0x85 => "\xE2\x80\xA6", 0x86 => "\xE2\x80\xA0", 0x87 => "\xE2\x80\xA1", 0x88 => "\xCB\x86", 0x89 => "\xE2\x80\xB0", 0x8A => "\xC5\xA0", 0x8B => "\xE2\x80\xB9", 0x8C => "\xC5\x92", 0x8D => "\xEF\xBF\xBD", 0x8E => "\xC5\xBD", 0x8F => "\xEF\xBF\xBD", 0x90 => "\xEF\xBF\xBD", 0x91 => "\xE2\x80\x98", 0x92 => "\xE2\x80\x99", 0x93 => "\xE2\x80\x9C", 0x94 => "\xE2\x80\x9D", 0x95 => "\xE2\x80\xA2", 0x96 => "\xE2\x80\x93", 0x97 => "\xE2\x80\x94", 0x98 => "\xCB\x9C", 0x99 => "\xE2\x84\xA2", 0x9A => "\xC5\xA1", 0x9B => "\xE2\x80\xBA", 0x9C => "\xC5\x93", 0x9D => "\xEF\xBF\xBD", 0x9E => "\xC5\xBE", 0x9F => "\xC5\xB8");					if ($hex)					{						$codepoint = hexdec($codepoint);					}					else					{						$codepoint = intval($codepoint);					}					if (isset($windows_1252_specials[$codepoint]))					{						$replacement = $windows_1252_specials[$codepoint];					}					else					{						$replacement = SimplePie_Misc::codepoint_to_utf8($codepoint);					}					if (!in_array($this->consume(), array(';', false), true))					{						$this->unconsume();					}					$consumed_length = strlen($this->consumed);					$this->data = substr_replace($this->data, $replacement, $this->position - $consumed_length, $consumed_length);					$this->position += strlen($replacement) - $consumed_length;				}				break;			default:				static $entities = array('Aacute' => "\xC3\x81", 'aacute' => "\xC3\xA1", 'Aacute;' => "\xC3\x81", 'aacute;' => "\xC3\xA1", 'Acirc' => "\xC3\x82", 'acirc' => "\xC3\xA2", 'Acirc;' => "\xC3\x82", 'acirc;' => "\xC3\xA2", 'acute' => "\xC2\xB4", 'acute;' => "\xC2\xB4", 'AElig' => "\xC3\x86", 'aelig' => "\xC3\xA6", 'AElig;' => "\xC3\x86", 'aelig;' => "\xC3\xA6", 'Agrave' => "\xC3\x80", 'agrave' => "\xC3\xA0", 'Agrave;' => "\xC3\x80", 'agrave;' => "\xC3\xA0", 'alefsym;' => "\xE2\x84\xB5", 'Alpha;' => "\xCE\x91", 'alpha;' => "\xCE\xB1", 'AMP' => "\x26", 'amp' => "\x26", 'AMP;' => "\x26", 'amp;' => "\x26", 'and;' => "\xE2\x88\xA7", 'ang;' => "\xE2\x88\xA0", 'apos;' => "\x27", 'Aring' => "\xC3\x85", 'aring' => "\xC3\xA5", 'Aring;' => "\xC3\x85", 'aring;' => "\xC3\xA5", 'asymp;' => "\xE2\x89\x88", 'Atilde' => "\xC3\x83", 'atilde' => "\xC3\xA3", 'Atilde;' => "\xC3\x83", 'atilde;' => "\xC3\xA3", 'Auml' => "\xC3\x84", 'auml' => "\xC3\xA4", 'Auml;' => "\xC3\x84", 'auml;' => "\xC3\xA4", 'bdquo;' => "\xE2\x80\x9E", 'Beta;' => "\xCE\x92", 'beta;' => "\xCE\xB2", 'brvbar' => "\xC2\xA6", 'brvbar;' => "\xC2\xA6", 'bull;' => "\xE2\x80\xA2", 'cap;' => "\xE2\x88\xA9", 'Ccedil' => "\xC3\x87", 'ccedil' => "\xC3\xA7", 'Ccedil;' => "\xC3\x87", 'ccedil;' => "\xC3\xA7", 'cedil' => "\xC2\xB8", 'cedil;' => "\xC2\xB8", 'cent' => "\xC2\xA2", 'cent;' => "\xC2\xA2", 'Chi;' => "\xCE\xA7", 'chi;' => "\xCF\x87", 'circ;' => "\xCB\x86", 'clubs;' => "\xE2\x99\xA3", 'cong;' => "\xE2\x89\x85", 'COPY' => "\xC2\xA9", 'copy' => "\xC2\xA9", 'COPY;' => "\xC2\xA9", 'copy;' => "\xC2\xA9", 'crarr;' => "\xE2\x86\xB5", 'cup;' => "\xE2\x88\xAA", 'curren' => "\xC2\xA4", 'curren;' => "\xC2\xA4", 'Dagger;' => "\xE2\x80\xA1", 'dagger;' => "\xE2\x80\xA0", 'dArr;' => "\xE2\x87\x93", 'darr;' => "\xE2\x86\x93", 'deg' => "\xC2\xB0", 'deg;' => "\xC2\xB0", 'Delta;' => "\xCE\x94", 'delta;' => "\xCE\xB4", 'diams;' => "\xE2\x99\xA6", 'divide' => "\xC3\xB7", 'divide;' => "\xC3\xB7", 'Eacute' => "\xC3\x89", 'eacute' => "\xC3\xA9", 'Eacute;' => "\xC3\x89", 'eacute;' => "\xC3\xA9", 'Ecirc' => "\xC3\x8A", 'ecirc' => "\xC3\xAA", 'Ecirc;' => "\xC3\x8A", 'ecirc;' => "\xC3\xAA", 'Egrave' => "\xC3\x88", 'egrave' => "\xC3\xA8", 'Egrave;' => "\xC3\x88", 'egrave;' => "\xC3\xA8", 'empty;' => "\xE2\x88\x85", 'emsp;' => "\xE2\x80\x83", 'ensp;' => "\xE2\x80\x82", 'Epsilon;' => "\xCE\x95", 'epsilon;' => "\xCE\xB5", 'equiv;' => "\xE2\x89\xA1", 'Eta;' => "\xCE\x97", 'eta;' => "\xCE\xB7", 'ETH' => "\xC3\x90", 'eth' => "\xC3\xB0", 'ETH;' => "\xC3\x90", 'eth;' => "\xC3\xB0", 'Euml' => "\xC3\x8B", 'euml' => "\xC3\xAB", 'Euml;' => "\xC3\x8B", 'euml;' => "\xC3\xAB", 'euro;' => "\xE2\x82\xAC", 'exist;' => "\xE2\x88\x83", 'fnof;' => "\xC6\x92", 'forall;' => "\xE2\x88\x80", 'frac12' => "\xC2\xBD", 'frac12;' => "\xC2\xBD", 'frac14' => "\xC2\xBC", 'frac14;' => "\xC2\xBC", 'frac34' => "\xC2\xBE", 'frac34;' => "\xC2\xBE", 'frasl;' => "\xE2\x81\x84", 'Gamma;' => "\xCE\x93", 'gamma;' => "\xCE\xB3", 'ge;' => "\xE2\x89\xA5", 'GT' => "\x3E", 'gt' => "\x3E", 'GT;' => "\x3E", 'gt;' => "\x3E", 'hArr;' => "\xE2\x87\x94", 'harr;' => "\xE2\x86\x94", 'hearts;' => "\xE2\x99\xA5", 'hellip;' => "\xE2\x80\xA6", 'Iacute' => "\xC3\x8D", 'iacute' => "\xC3\xAD", 'Iacute;' => "\xC3\x8D", 'iacute;' => "\xC3\xAD", 'Icirc' => "\xC3\x8E", 'icirc' => "\xC3\xAE", 'Icirc;' => "\xC3\x8E", 'icirc;' => "\xC3\xAE", 'iexcl' => "\xC2\xA1", 'iexcl;' => "\xC2\xA1", 'Igrave' => "\xC3\x8C", 'igrave' => "\xC3\xAC", 'Igrave;' => "\xC3\x8C", 'igrave;' => "\xC3\xAC", 'image;' => "\xE2\x84\x91", 'infin;' => "\xE2\x88\x9E", 'int;' => "\xE2\x88\xAB", 'Iota;' => "\xCE\x99", 'iota;' => "\xCE\xB9", 'iquest' => "\xC2\xBF", 'iquest;' => "\xC2\xBF", 'isin;' => "\xE2\x88\x88", 'Iuml' => "\xC3\x8F", 'iuml' => "\xC3\xAF", 'Iuml;' => "\xC3\x8F", 'iuml;' => "\xC3\xAF", 'Kappa;' => "\xCE\x9A", 'kappa;' => "\xCE\xBA", 'Lambda;' => "\xCE\x9B", 'lambda;' => "\xCE\xBB", 'lang;' => "\xE3\x80\x88", 'laquo' => "\xC2\xAB", 'laquo;' => "\xC2\xAB", 'lArr;' => "\xE2\x87\x90", 'larr;' => "\xE2\x86\x90", 'lceil;' => "\xE2\x8C\x88", 'ldquo;' => "\xE2\x80\x9C", 'le;' => "\xE2\x89\xA4", 'lfloor;' => "\xE2\x8C\x8A", 'lowast;' => "\xE2\x88\x97", 'loz;' => "\xE2\x97\x8A", 'lrm;' => "\xE2\x80\x8E", 'lsaquo;' => "\xE2\x80\xB9", 'lsquo;' => "\xE2\x80\x98", 'LT' => "\x3C", 'lt' => "\x3C", 'LT;' => "\x3C", 'lt;' => "\x3C", 'macr' => "\xC2\xAF", 'macr;' => "\xC2\xAF", 'mdash;' => "\xE2\x80\x94", 'micro' => "\xC2\xB5", 'micro;' => "\xC2\xB5", 'middot' => "\xC2\xB7", 'middot;' => "\xC2\xB7", 'minus;' => "\xE2\x88\x92", 'Mu;' => "\xCE\x9C", 'mu;' => "\xCE\xBC", 'nabla;' => "\xE2\x88\x87", 'nbsp' => "\xC2\xA0", 'nbsp;' => "\xC2\xA0", 'ndash;' => "\xE2\x80\x93", 'ne;' => "\xE2\x89\xA0", 'ni;' => "\xE2\x88\x8B", 'not' => "\xC2\xAC", 'not;' => "\xC2\xAC", 'notin;' => "\xE2\x88\x89", 'nsub;' => "\xE2\x8A\x84", 'Ntilde' => "\xC3\x91", 'ntilde' => "\xC3\xB1", 'Ntilde;' => "\xC3\x91", 'ntilde;' => "\xC3\xB1", 'Nu;' => "\xCE\x9D", 'nu;' => "\xCE\xBD", 'Oacute' => "\xC3\x93", 'oacute' => "\xC3\xB3", 'Oacute;' => "\xC3\x93", 'oacute;' => "\xC3\xB3", 'Ocirc' => "\xC3\x94", 'ocirc' => "\xC3\xB4", 'Ocirc;' => "\xC3\x94", 'ocirc;' => "\xC3\xB4", 'OElig;' => "\xC5\x92", 'oelig;' => "\xC5\x93", 'Ograve' => "\xC3\x92", 'ograve' => "\xC3\xB2", 'Ograve;' => "\xC3\x92", 'ograve;' => "\xC3\xB2", 'oline;' => "\xE2\x80\xBE", 'Omega;' => "\xCE\xA9", 'omega;' => "\xCF\x89", 'Omicron;' => "\xCE\x9F", 'omicron;' => "\xCE\xBF", 'oplus;' => "\xE2\x8A\x95", 'or;' => "\xE2\x88\xA8", 'ordf' => "\xC2\xAA", 'ordf;' => "\xC2\xAA", 'ordm' => "\xC2\xBA", 'ordm;' => "\xC2\xBA", 'Oslash' => "\xC3\x98", 'oslash' => "\xC3\xB8", 'Oslash;' => "\xC3\x98", 'oslash;' => "\xC3\xB8", 'Otilde' => "\xC3\x95", 'otilde' => "\xC3\xB5", 'Otilde;' => "\xC3\x95", 'otilde;' => "\xC3\xB5", 'otimes;' => "\xE2\x8A\x97", 'Ouml' => "\xC3\x96", 'ouml' => "\xC3\xB6", 'Ouml;' => "\xC3\x96", 'ouml;' => "\xC3\xB6", 'para' => "\xC2\xB6", 'para;' => "\xC2\xB6", 'part;' => "\xE2\x88\x82", 'permil;' => "\xE2\x80\xB0", 'perp;' => "\xE2\x8A\xA5", 'Phi;' => "\xCE\xA6", 'phi;' => "\xCF\x86", 'Pi;' => "\xCE\xA0", 'pi;' => "\xCF\x80", 'piv;' => "\xCF\x96", 'plusmn' => "\xC2\xB1", 'plusmn;' => "\xC2\xB1", 'pound' => "\xC2\xA3", 'pound;' => "\xC2\xA3", 'Prime;' => "\xE2\x80\xB3", 'prime;' => "\xE2\x80\xB2", 'prod;' => "\xE2\x88\x8F", 'prop;' => "\xE2\x88\x9D", 'Psi;' => "\xCE\xA8", 'psi;' => "\xCF\x88", 'QUOT' => "\x22", 'quot' => "\x22", 'QUOT;' => "\x22", 'quot;' => "\x22", 'radic;' => "\xE2\x88\x9A", 'rang;' => "\xE3\x80\x89", 'raquo' => "\xC2\xBB", 'raquo;' => "\xC2\xBB", 'rArr;' => "\xE2\x87\x92", 'rarr;' => "\xE2\x86\x92", 'rceil;' => "\xE2\x8C\x89", 'rdquo;' => "\xE2\x80\x9D", 'real;' => "\xE2\x84\x9C", 'REG' => "\xC2\xAE", 'reg' => "\xC2\xAE", 'REG;' => "\xC2\xAE", 'reg;' => "\xC2\xAE", 'rfloor;' => "\xE2\x8C\x8B", 'Rho;' => "\xCE\xA1", 'rho;' => "\xCF\x81", 'rlm;' => "\xE2\x80\x8F", 'rsaquo;' => "\xE2\x80\xBA", 'rsquo;' => "\xE2\x80\x99", 'sbquo;' => "\xE2\x80\x9A", 'Scaron;' => "\xC5\xA0", 'scaron;' => "\xC5\xA1", 'sdot;' => "\xE2\x8B\x85", 'sect' => "\xC2\xA7", 'sect;' => "\xC2\xA7", 'shy' => "\xC2\xAD", 'shy;' => "\xC2\xAD", 'Sigma;' => "\xCE\xA3", 'sigma;' => "\xCF\x83", 'sigmaf;' => "\xCF\x82", 'sim;' => "\xE2\x88\xBC", 'spades;' => "\xE2\x99\xA0", 'sub;' => "\xE2\x8A\x82", 'sube;' => "\xE2\x8A\x86", 'sum;' => "\xE2\x88\x91", 'sup;' => "\xE2\x8A\x83", 'sup1' => "\xC2\xB9", 'sup1;' => "\xC2\xB9", 'sup2' => "\xC2\xB2", 'sup2;' => "\xC2\xB2", 'sup3' => "\xC2\xB3", 'sup3;' => "\xC2\xB3", 'supe;' => "\xE2\x8A\x87", 'szlig' => "\xC3\x9F", 'szlig;' => "\xC3\x9F", 'Tau;' => "\xCE\xA4", 'tau;' => "\xCF\x84", 'there4;' => "\xE2\x88\xB4", 'Theta;' => "\xCE\x98", 'theta;' => "\xCE\xB8", 'thetasym;' => "\xCF\x91", 'thinsp;' => "\xE2\x80\x89", 'THORN' => "\xC3\x9E", 'thorn' => "\xC3\xBE", 'THORN;' => "\xC3\x9E", 'thorn;' => "\xC3\xBE", 'tilde;' => "\xCB\x9C", 'times' => "\xC3\x97", 'times;' => "\xC3\x97", 'TRADE;' => "\xE2\x84\xA2", 'trade;' => "\xE2\x84\xA2", 'Uacute' => "\xC3\x9A", 'uacute' => "\xC3\xBA", 'Uacute;' => "\xC3\x9A", 'uacute;' => "\xC3\xBA", 'uArr;' => "\xE2\x87\x91", 'uarr;' => "\xE2\x86\x91", 'Ucirc' => "\xC3\x9B", 'ucirc' => "\xC3\xBB", 'Ucirc;' => "\xC3\x9B", 'ucirc;' => "\xC3\xBB", 'Ugrave' => "\xC3\x99", 'ugrave' => "\xC3\xB9", 'Ugrave;' => "\xC3\x99", 'ugrave;' => "\xC3\xB9", 'uml' => "\xC2\xA8", 'uml;' => "\xC2\xA8", 'upsih;' => "\xCF\x92", 'Upsilon;' => "\xCE\xA5", 'upsilon;' => "\xCF\x85", 'Uuml' => "\xC3\x9C", 'uuml' => "\xC3\xBC", 'Uuml;' => "\xC3\x9C", 'uuml;' => "\xC3\xBC", 'weierp;' => "\xE2\x84\x98", 'Xi;' => "\xCE\x9E", 'xi;' => "\xCE\xBE", 'Yacute' => "\xC3\x9D", 'yacute' => "\xC3\xBD", 'Yacute;' => "\xC3\x9D", 'yacute;' => "\xC3\xBD", 'yen' => "\xC2\xA5", 'yen;' => "\xC2\xA5", 'yuml' => "\xC3\xBF", 'Yuml;' => "\xC5\xB8", 'yuml;' => "\xC3\xBF", 'Zeta;' => "\xCE\x96", 'zeta;' => "\xCE\xB6", 'zwj;' => "\xE2\x80\x8D", 'zwnj;' => "\xE2\x80\x8C");				for ($i = 0, $match = null; $i < 9 && $this->consume() !== false; $i++)				{					$consumed = substr($this->consumed, 1);					if (isset($entities[$consumed]))					{						$match = $consumed;					}				}				if ($match !== null)				{ 					$this->data = substr_replace($this->data, $entities[$match], $this->position - strlen($consumed) - 1, strlen($match) + 1);					$this->position += strlen($entities[$match]) - strlen($consumed) - 1;				}				break;		}	}}/** * IRI parser/serialiser * * @package SimplePie */class SimplePie_IRI{	/**	 * Scheme	 *	 * @access private	 * @var string	 */	var $scheme;	/**	 * User Information	 *	 * @access private	 * @var string	 */	var $userinfo;	/**	 * Host	 *	 * @access private	 * @var string	 */	var $host;	/**	 * Port	 *	 * @access private	 * @var string	 */	var $port;	/**	 * Path	 *	 * @access private	 * @var string	 */	var $path;	/**	 * Query	 *	 * @access private	 * @var string	 */	var $query;	/**	 * Fragment	 *	 * @access private	 * @var string	 */	var $fragment;	/**	 * Whether the object represents a valid IRI	 *	 * @access private	 * @var array	 */	var $valid = array();	/**	 * Return the entire IRI when you try and read the object as a string	 *	 * @access public	 * @return string	 */	function __toString()	{		return $this->get_iri();	}	/**	 * Create a new IRI object, from a specified string	 *	 * @access public	 * @param string $iri	 * @return SimplePie_IRI	 */	function SimplePie_IRI($iri)	{		$iri = (string) $iri;		if ($iri !== '')		{			$parsed = $this->parse_iri($iri);			$this->set_scheme($parsed['scheme']);			$this->set_authority($parsed['authority']);			$this->set_path($parsed['path']);			$this->set_query($parsed['query']);			$this->set_fragment($parsed['fragment']);		}	}	/**	 * Create a new IRI object by resolving a relative IRI	 *	 * @static	 * @access public	 * @param SimplePie_IRI $base Base IRI	 * @param string $relative Relative IRI	 * @return SimplePie_IRI	 */	function absolutize($base, $relative)	{		$relative = (string) $relative;		if ($relative !== '')		{			$relative = new SimplePie_IRI($relative);			if ($relative->get_scheme() !== null)			{				$target = $relative;			}			elseif ($base->get_iri() !== null)			{				if ($relative->get_authority() !== null)				{					$target = $relative;					$target->set_scheme($base->get_scheme());				}				else				{					$target = new SimplePie_IRI('');					$target->set_scheme($base->get_scheme());					$target->set_userinfo($base->get_userinfo());					$target->set_host($base->get_host());					$target->set_port($base->get_port());					if ($relative->get_path() !== null)					{						if (strpos($relative->get_path(), '/') === 0)						{							$target->set_path($relative->get_path());						}						elseif (($base->get_userinfo() !== null || $base->get_host() !== null || $base->get_port() !== null) && $base->get_path() === null)						{							$target->set_path('/' . $relative->get_path());						}						elseif (($last_segment = strrpos($base->get_path(), '/')) !== false)						{							$target->set_path(substr($base->get_path(), 0, $last_segment + 1) . $relative->get_path());						}						else						{							$target->set_path($relative->get_path());						}						$target->set_query($relative->get_query());					}					else					{						$target->set_path($base->get_path());						if ($relative->get_query() !== null)						{							$target->set_query($relative->get_query());						}						elseif ($base->get_query() !== null)						{							$target->set_query($base->get_query());						}					}				}				$target->set_fragment($relative->get_fragment());			}			else			{				// No base URL, just return the relative URL				$target = $relative;			}		}		else		{			$target = $base;		}		return $target;	}	/**	 * Parse an IRI into scheme/authority/path/query/fragment segments	 *	 * @access private	 * @param string $iri	 * @return array	 */	function parse_iri($iri)	{		preg_match('/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/', $iri, $match);		for ($i = count($match); $i <= 9; $i++)		{			$match[$i] = '';		}		return array('scheme' => $match[2], 'authority' => $match[4], 'path' => $match[5], 'query' => $match[7], 'fragment' => $match[9]);	}	/**	 * Remove dot segments from a path	 *	 * @access private	 * @param string $input	 * @return string	 */	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	/**	 * Replace invalid character with percent encoding	 *	 * @access private	 * @param string $string Input string	 * @param string $valid_chars Valid characters	 * @param int $case Normalise case	 * @return string	 */	function replace_invalid_with_pct_encoding($string, $valid_chars, $case = SIMPLEPIE_SAME_CASE)	{		// Normalise case		if ($case & SIMPLEPIE_LOWERCASE)		{			$string = strtolower($string);		}		elseif ($case & SIMPLEPIE_UPPERCASE)		{			$string = strtoupper($string);		}		// Store position and string length (to avoid constantly recalculating this)		$position = 0;		$strlen = strlen($string);		// Loop as long as we have invalid characters, advancing the position to the next invalid character		while (($position += strspn($string, $valid_chars, $position)) < $strlen)		{			// If we have a % character			if ($string[$position] === '%')			{				// If we have a pct-encoded section				if ($position + 2 < $strlen && strspn($string, '0123456789ABCDEFabcdef', $position + 1, 2) === 2)				{					// Get the the represented character					$chr = chr(hexdec(substr($string, $position + 1, 2)));					// If the character is valid, replace the pct-encoded with the actual character while normalising case					if (strpos($valid_chars, $chr) !== false)					{						if ($case & SIMPLEPIE_LOWERCASE)						{							$chr = strtolower($chr);						}						elseif ($case & SIMPLEPIE_UPPERCASE)						{							$chr = strtoupper($chr);						}						$string = substr_replace($string, $chr, $position, 3);						$strlen -= 2;						$position++;					}					// Otherwise just normalise the pct-encoded to uppercase					else					{						$string = substr_replace($string, strtoupper(substr($string, $position + 1, 2)), $position + 1, 2);						$position += 3;					}				}				// If we don't have a pct-encoded section, just replace the % with its own esccaped form				else				{					$string = substr_replace($string, '%25', $position, 1);					$strlen += 2;					$position += 3;				}			}			// If we have an invalid character, change into its pct-encoded form			else			{				$replacement = sprintf("%%%02X", ord($string[$position]));				$string = str_replace($string[$position], $replacement, $string);				$strlen = strlen($string);			}		}		return $string;	}	/**	 * Check if the object represents a valid IRI	 *	 * @access public	 * @return bool	 */	function is_valid()	{		return array_sum($this->valid) === count($this->valid);	}	/**	 * Set the scheme. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $scheme	 * @return bool	 */	function set_scheme($scheme)	{		if ($scheme === null || $scheme === '')		{			$this->scheme = null;		}		else		{			$len = strlen($scheme);			switch (true)			{				case $len > 1:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-.', 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}				case $len > 0:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 0, 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}			}			$this->scheme = strtolower($scheme);		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the authority. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $authority	 * @return bool	 */	function set_authority($authority)	{		if (($userinfo_end = strrpos($authority, '@')) !== false)		{			$userinfo = substr($authority, 0, $userinfo_end);			$authority = substr($authority, $userinfo_end + 1);		}		else		{			$userinfo = null;		}		if (($port_start = strpos($authority, ':')) !== false)		{			$port = substr($authority, $port_start + 1);			$authority = substr($authority, 0, $port_start);		}		else		{			$port = null;		}		return $this->set_userinfo($userinfo) && $this->set_host($authority) && $this->set_port($port);	}	/**	 * Set the userinfo.	 *	 * @access public	 * @param string $userinfo	 * @return bool	 */	function set_userinfo($userinfo)	{		if ($userinfo === null || $userinfo === '')		{			$this->userinfo = null;		}		else		{			$this->userinfo = $this->replace_invalid_with_pct_encoding($userinfo, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the host. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $host	 * @return bool	 */	function set_host($host)	{		if ($host === null || $host === '')		{			$this->host = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif ($host[0] === '[' && substr($host, -1) === ']')		{			if (Net_IPv6::checkIPv6(substr($host, 1, -1)))			{				$this->host = $host;				$this->valid[__FUNCTION__] = true;				return true;			}			else			{				$this->host = null;				$this->valid[__FUNCTION__] = false;				return false;			}		}		else		{			$this->host = $this->replace_invalid_with_pct_encoding($host, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=', SIMPLEPIE_LOWERCASE);			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the port. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $port	 * @return bool	 */	function set_port($port)	{		if ($port === null || $port === '')		{			$this->port = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (strspn($port, '0123456789') === strlen($port))		{			$this->port = (int) $port;			$this->valid[__FUNCTION__] = true;			return true;		}		else		{			$this->port = null;			$this->valid[__FUNCTION__] = false;			return false;		}	}	/**	 * Set the path.	 *	 * @access public	 * @param string $path	 * @return bool	 */	function set_path($path)	{		if ($path === null || $path === '')		{			$this->path = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (substr($path, 0, 2) === '//' && $this->userinfo === null && $this->host === null && $this->port === null)		{			$this->path = null;			$this->valid[__FUNCTION__] = false;			return false;		}		else		{			$this->path = $this->replace_invalid_with_pct_encoding($path, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=@/');			if ($this->scheme !== null)			{				$this->path = $this->remove_dot_segments($this->path);			}			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the query.	 *	 * @access public	 * @param string $query	 * @return bool	 */	function set_query($query)	{		if ($query === null || $query === '')		{			$this->query = null;		}		else		{			$this->query = $this->replace_invalid_with_pct_encoding($query, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the fragment.	 *	 * @access public	 * @param string $fragment	 * @return bool	 */	function set_fragment($fragment)	{		if ($fragment === null || $fragment === '')		{			$this->fragment = null;		}		else		{			$this->fragment = $this->replace_invalid_with_pct_encoding($fragment, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Get the complete IRI	 *	 * @access public	 * @return string	 */	function get_iri()	{		$iri = '';		if ($this->scheme !== null)		{			$iri .= $this->scheme . ':';		}		if (($authority = $this->get_authority()) !== null)		{			$iri .= '//' . $authority;		}		if ($this->path !== null)		{			$iri .= $this->path;		}		if ($this->query !== null)		{			$iri .= '?' . $this->query;		}		if ($this->fragment !== null)		{			$iri .= '#' . $this->fragment;		}		if ($iri !== '')		{			return $iri;		}		else		{			return null;		}	}	/**	 * Get the scheme	 *	 * @access public	 * @return string	 */	function get_scheme()	{		return $this->scheme;	}	/**	 * Get the complete authority	 *	 * @access public	 * @return string	 */	function get_authority()	{		$authority = '';		if ($this->userinfo !== null)		{			$authority .= $this->userinfo . '@';		}		if ($this->host !== null)		{			$authority .= $this->host;		}		if ($this->port !== null)		{			$authority .= ':' . $this->port;		}		if ($authority !== '')		{			return $authority;		}		else		{			return null;		}	}	/**	 * Get the user information	 *	 * @access public	 * @return string	 */	function get_userinfo()	{		return $this->userinfo;	}	/**	 * Get the host	 *	 * @access public	 * @return string	 */	function get_host()	{		return $this->host;	}	/**	 * Get the port	 *	 * @access public	 * @return string	 */	function get_port()	{		return $this->port;	}	/**	 * Get the path	 *	 * @access public	 * @return string	 */	function get_path()	{		return $this->path;	}	/**	 * Get the query	 *	 * @access public	 * @return string	 */	function get_query()	{		return $this->query;	}	/**	 * Get the fragment	 *	 * @access public	 * @return string	 */	function get_fragment()	{		return $this->fragment;	}}/** * Class to validate and to work with IPv6 addresses. * * @package SimplePie * @copyright 2003-2005 The PHP Group * @license http://www.opensource.org/licenses/bsd-license.php * @link http://pear.php.net/package/Net_IPv6 * @author Alexander Merz <alexander.merz@web.de> * @author elfrink at introweb dot nl * @author Josh Peck <jmp at joshpeck dot org> * @author Geoffrey Sneddon <geoffers@gmail.com> */class SimplePie_Net_IPv6{	/**	 * Removes a possible existing netmask specification of an IP address.	 *	 * @param string $ip the (compressed) IP as Hex representation	 * @return string the IP the without netmask	 * @since 1.1.0	 * @access public	 * @static	 */	function removeNetmaskSpec($ip)	{		if (strpos($ip, '/') !== false)		{			list($addr, $nm) = explode('/', $ip);		}		else		{			$addr = $ip;		}		return $addr;	}	/**	 * Uncompresses an IPv6 address	 *	 * RFC 2373 allows you to compress zeros in an address to '::'. This	 * function expects an valid IPv6 address and expands the '::' to	 * the required zeros.	 *	 * Example:	 FF01::101	->	FF01:0:0:0:0:0:0:101	 *			 ::1		->	0:0:0:0:0:0:0:1	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return string the uncompressed IPv6-address (hex format)	 */	function Uncompress($ip)	{		$uip = SimplePie_Net_IPv6::removeNetmaskSpec($ip);		$c1 = -1;		$c2 = -1;		if (strpos($ip, '::') !== false)		{			list($ip1, $ip2) = explode('::', $ip);			if ($ip1 === '')			{				$c1 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip1, ':')) > 0)				{					$c1 = $pos;				}				else				{					$c1 = 0;				}			}			if ($ip2 === '')			{				$c2 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip2, ':')) > 0)				{					$c2 = $pos;				}				else				{					$c2 = 0;				}			}			if (strstr($ip2, '.'))			{				$c2++;			}			// ::			if ($c1 === -1 && $c2 === -1)			{				$uip = '0:0:0:0:0:0:0:0';			}			// ::xxx			else if ($c1 === -1)			{				$fill = str_repeat('0:', 7 - $c2);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::			else if ($c2 === -1)			{				$fill = str_repeat(':0', 7 - $c1);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::xxx			else			{				$fill = str_repeat(':0:', 6 - $c2 - $c1);				$uip =	str_replace('::', $fill, $uip);				$uip =	str_replace('::', ':', $uip);			}		}		return $uip;	}	/**	 * Splits an IPv6 address into the IPv6 and a possible IPv4 part	 *	 * RFC 2373 allows you to note the last two parts of an IPv6 address as	 * an IPv4 compatible address	 *	 * Example:	 0:0:0:0:0:0:13.1.68.3	 *			 0:0:0:0:0:FFFF:129.144.52.38	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return array [0] contains the IPv6 part, [1] the IPv4 part (hex format)	 */	function SplitV64($ip)	{		$ip = SimplePie_Net_IPv6::Uncompress($ip);		if (strstr($ip, '.'))		{			$pos = strrpos($ip, ':');			$ip[$pos] = '_';			$ipPart = explode('_', $ip);			return $ipPart;		}		else		{			return array($ip, '');		}	}	/**	 * Checks an IPv6 address	 *	 * Checks if the given IP is IPv6-compatible	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address	 * @return bool true if $ip is an IPv6 address	 */	function checkIPv6($ip)	{		$ipPart = SimplePie_Net_IPv6::SplitV64($ip);		$count = 0;		if (!empty($ipPart[0]))		{			$ipv6 = explode(':', $ipPart[0]);			for ($i = 0; $i < count($ipv6); $i++)			{				$dec = hexdec($ipv6[$i]);				$hex = strtoupper(preg_replace('/^[0]{1,3}(.*[0-9a-fA-F])$/', '\\1', $ipv6[$i]));				if ($ipv6[$i] >= 0 && $dec <= 65535 && $hex === strtoupper(dechex($dec)))				{					$count++;				}			}			if ($count === 8)			{				return true;			}			elseif ($count === 6 && !empty($ipPart[1]))			{				$ipv4 = explode('.', $ipPart[1]);				$count = 0;				foreach ($ipv4 as $ipv4_part)				{					if ($ipv4_part >= 0 && $ipv4_part <= 255 && preg_match('/^\d{1,3}$/', $ipv4_part))					{						$count++;					}				}				if ($count === 4)				{					return true;				}			}			else			{				return false;			}		}		else		{			return false;		}	}}/** * Date Parser * * @package SimplePie */class SimplePie_Parse_Date{	/**	 * Input data	 *	 * @access protected	 * @var string	 */	var $date;	/**	 * List of days, calendar day name => ordinal day number in the week	 *	 * @access protected	 * @var array	 */	var $day = array(		// English		'mon' => 1,		'monday' => 1,		'tue' => 2,		'tuesday' => 2,		'wed' => 3,		'wednesday' => 3,		'thu' => 4,		'thursday' => 4,		'fri' => 5,		'friday' => 5,		'sat' => 6,		'saturday' => 6,		'sun' => 7,		'sunday' => 7,		// Dutch		'maandag' => 1,		'dinsdag' => 2,		'woensdag' => 3,		'donderdag' => 4,		'vrijdag' => 5,		'zaterdag' => 6,		'zondag' => 7,		// French		'lundi' => 1,		'mardi' => 2,		'mercredi' => 3,		'jeudi' => 4,		'vendredi' => 5,		'samedi' => 6,		'dimanche' => 7,		// German		'montag' => 1,		'dienstag' => 2,		'mittwoch' => 3,		'donnerstag' => 4,		'freitag' => 5,		'samstag' => 6,		'sonnabend' => 6,		'sonntag' => 7,		// Italian		'luned' => 1,		'marted' => 2,		'mercoled' => 3,		'gioved' => 4,		'venerd' => 5,		'sabato' => 6,		'domenica' => 7,		// Spanish		'lunes' => 1,		'martes' => 2,		'mircoles' => 3,		'jueves' => 4,		'viernes' => 5,		'sbado' => 6,		'domingo' => 7,		// Finnish		'maanantai' => 1,		'tiistai' => 2,		'keskiviikko' => 3,		'torstai' => 4,		'perjantai' => 5,		'lauantai' => 6,		'sunnuntai' => 7,		// Hungarian		'htf' => 1,		'kedd' => 2,		'szerda' => 3,		'cstrtok' => 4,		'pntek' => 5,		'szombat' => 6,		'vasrnap' => 7,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 4,		'' => 5,		'' => 6,		'' => 7,	);	/**	 * List of months, calendar month name => calendar month number	 *	 * @access protected	 * @var array	 */	var $month = array(		// English		'jan' => 1,		'january' => 1,		'feb' => 2,		'february' => 2,		'mar' => 3,		'march' => 3,		'apr' => 4,		'april' => 4,		'may' => 5,		// No long form of May		'jun' => 6,		'june' => 6,		'jul' => 7,		'july' => 7,		'aug' => 8,		'august' => 8,		'sep' => 9,		'september' => 8,		'oct' => 10,		'october' => 10,		'nov' => 11,		'november' => 11,		'dec' => 12,		'december' => 12,		// Dutch		'januari' => 1,		'februari' => 2,		'maart' => 3,		'april' => 4,		'mei' => 5,		'juni' => 6,		'juli' => 7,		'augustus' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'december' => 12,		// French		'janvier' => 1,		'fvrier' => 2,		'mars' => 3,		'avril' => 4,		'mai' => 5,		'juin' => 6,		'juillet' => 7,		'aot' => 8,		'septembre' => 9,		'octobre' => 10,		'novembre' => 11,		'dcembre' => 12,		// German		'januar' => 1,		'februar' => 2,		'mrz' => 3,		'april' => 4,		'mai' => 5,		'juni' => 6,		'juli' => 7,		'august' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'dezember' => 12,		// Italian		'gennaio' => 1,		'febbraio' => 2,		'marzo' => 3,		'aprile' => 4,		'maggio' => 5,		'giugno' => 6,		'luglio' => 7,		'agosto' => 8,		'settembre' => 9,		'ottobre' => 10,		'novembre' => 11,		'dicembre' => 12,		// Spanish		'enero' => 1,		'febrero' => 2,		'marzo' => 3,		'abril' => 4,		'mayo' => 5,		'junio' => 6,		'julio' => 7,		'agosto' => 8,		'septiembre' => 9,		'setiembre' => 9,		'octubre' => 10,		'noviembre' => 11,		'diciembre' => 12,		// Finnish		'tammikuu' => 1,		'helmikuu' => 2,		'maaliskuu' => 3,		'huhtikuu' => 4,		'toukokuu' => 5,		'keskuu' => 6,		'heinkuu' => 7,		'elokuu' => 8,		'suuskuu' => 9,		'lokakuu' => 10,		'marras' => 11,		'joulukuu' => 12,		// Hungarian		'janur' => 1,		'februr' => 2,		'mrcius' => 3,		'prilis' => 4,		'mjus' => 5,		'jnius' => 6,		'jlius' => 7,		'augusztus' => 8,		'szeptember' => 9,		'oktber' => 10,		'november' => 11,		'december' => 12,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 3,		'' => 4,		'' => 5,		'' => 5,		'' => 5,		'' => 6,		'' => 6,		'' => 7,		'' => 7,		'' => 8,		'' => 8,		'' => 9,		'' => 10,		'' => 11,		'' => 12,	);	/**	 * List of timezones, abbreviation => offset from UTC	 *	 * @access protected	 * @var array	 */	var $timezone = array(		'ACDT' => 37800,		'ACIT' => 28800,		'ACST' => 34200,		'ACT' => -18000,		'ACWDT' => 35100,		'ACWST' => 31500,		'AEDT' => 39600,		'AEST' => 36000,		'AFT' => 16200,		'AKDT' => -28800,		'AKST' => -32400,		'AMDT' => 18000,		'AMT' => -14400,		'ANAST' => 46800,		'ANAT' => 43200,		'ART' => -10800,		'AZOST' => -3600,		'AZST' => 18000,		'AZT' => 14400,		'BIOT' => 21600,		'BIT' => -43200,		'BOT' => -14400,		'BRST' => -7200,		'BRT' => -10800,		'BST' => 3600,		'BTT' => 21600,		'CAST' => 18000,		'CAT' => 7200,		'CCT' => 23400,		'CDT' => -18000,		'CEDT' => 7200,		'CET' => 3600,		'CGST' => -7200,		'CGT' => -10800,		'CHADT' => 49500,		'CHAST' => 45900,		'CIST' => -28800,		'CKT' => -36000,		'CLDT' => -10800,		'CLST' => -14400,		'COT' => -18000,		'CST' => -21600,		'CVT' => -3600,		'CXT' => 25200,		'DAVT' => 25200,		'DTAT' => 36000,		'EADT' => -18000,		'EAST' => -21600,		'EAT' => 10800,		'ECT' => -18000,		'EDT' => -14400,		'EEST' => 10800,		'EET' => 7200,		'EGT' => -3600,		'EKST' => 21600,		'EST' => -18000,		'FJT' => 43200,		'FKDT' => -10800,		'FKST' => -14400,		'FNT' => -7200,		'GALT' => -21600,		'GEDT' => 14400,		'GEST' => 10800,		'GFT' => -10800,		'GILT' => 43200,		'GIT' => -32400,		'GST' => 14400,		'GST' => -7200,		'GYT' => -14400,		'HAA' => -10800,		'HAC' => -18000,		'HADT' => -32400,		'HAE' => -14400,		'HAP' => -25200,		'HAR' => -21600,		'HAST' => -36000,		'HAT' => -9000,		'HAY' => -28800,		'HKST' => 28800,		'HMT' => 18000,		'HNA' => -14400,		'HNC' => -21600,		'HNE' => -18000,		'HNP' => -28800,		'HNR' => -25200,		'HNT' => -12600,		'HNY' => -32400,		'IRDT' => 16200,		'IRKST' => 32400,		'IRKT' => 28800,		'IRST' => 12600,		'JFDT' => -10800,		'JFST' => -14400,		'JST' => 32400,		'KGST' => 21600,		'KGT' => 18000,		'KOST' => 39600,		'KOVST' => 28800,		'KOVT' => 25200,		'KRAST' => 28800,		'KRAT' => 25200,		'KST' => 32400,		'LHDT' => 39600,		'LHST' => 37800,		'LINT' => 50400,		'LKT' => 21600,		'MAGST' => 43200,		'MAGT' => 39600,		'MAWT' => 21600,		'MDT' => -21600,		'MESZ' => 7200,		'MEZ' => 3600,		'MHT' => 43200,		'MIT' => -34200,		'MNST' => 32400,		'MSDT' => 14400,		'MSST' => 10800,		'MST' => -25200,		'MUT' => 14400,		'MVT' => 18000,		'MYT' => 28800,		'NCT' => 39600,		'NDT' => -9000,		'NFT' => 41400,		'NMIT' => 36000,		'NOVST' => 25200,		'NOVT' => 21600,		'NPT' => 20700,		'NRT' => 43200,		'NST' => -12600,		'NUT' => -39600,		'NZDT' => 46800,		'NZST' => 43200,		'OMSST' => 25200,		'OMST' => 21600,		'PDT' => -25200,		'PET' => -18000,		'PETST' => 46800,		'PETT' => 43200,		'PGT' => 36000,		'PHOT' => 46800,		'PHT' => 28800,		'PKT' => 18000,		'PMDT' => -7200,		'PMST' => -10800,		'PONT' => 39600,		'PST' => -28800,		'PWT' => 32400,		'PYST' => -10800,		'PYT' => -14400,		'RET' => 14400,		'ROTT' => -10800,		'SAMST' => 18000,		'SAMT' => 14400,		'SAST' => 7200,		'SBT' => 39600,		'SCDT' => 46800,		'SCST' => 43200,		'SCT' => 14400,		'SEST' => 3600,		'SGT' => 28800,		'SIT' => 28800,		'SRT' => -10800,		'SST' => -39600,		'SYST' => 10800,		'SYT' => 7200,		'TFT' => 18000,		'THAT' => -36000,		'TJT' => 18000,		'TKT' => -36000,		'TMT' => 18000,		'TOT' => 46800,		'TPT' => 32400,		'TRUT' => 36000,		'TVT' => 43200,		'TWT' => 28800,		'UYST' => -7200,		'UYT' => -10800,		'UZT' => 18000,		'VET' => -14400,		'VLAST' => 39600,		'VLAT' => 36000,		'VOST' => 21600,		'VUT' => 39600,		'WAST' => 7200,		'WAT' => 3600,		'WDT' => 32400,		'WEST' => 3600,		'WFT' => 43200,		'WIB' => 25200,		'WIT' => 32400,		'WITA' => 28800,		'WKST' => 18000,		'WST' => 28800,		'YAKST' => 36000,		'YAKT' => 32400,		'YAPT' => 36000,		'YEKST' => 21600,		'YEKT' => 18000,	);	/**	 * Cached PCRE for SimplePie_Parse_Date::$day	 *	 * @access protected	 * @var string	 */	var $day_pcre;	/**	 * Cached PCRE for SimplePie_Parse_Date::$month	 *	 * @access protected	 * @var string	 */	var $month_pcre;	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $built_in = array();	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $user = array();	/**	 * Create new SimplePie_Parse_Date object, and set self::day_pcre,	 * self::month_pcre, and self::built_in	 *	 * @access private	 */	function SimplePie_Parse_Date()	{		$this->day_pcre = '(' . implode(array_keys($this->day), '|') . ')';		$this->month_pcre = '(' . implode(array_keys($this->month), '|') . ')';		static $cache;		if (!isset($cache[get_class($this)]))		{			$all_methods = get_class_methods($this);			foreach ($all_methods as $method)			{				if (strtolower(substr($method, 0, 5)) === 'date_')				{					$cache[get_class($this)][] = $method;				}			}		}		foreach ($cache[get_class($this)] as $method)		{			$this->built_in[] = $method;		}	}	/**	 * Get the object	 *	 * @access public	 */	function get()	{		static $object;		if (!$object)		{			$object = new SimplePie_Parse_Date;		}		return $object;	}	/**	 * Parse a date	 *	 * @final	 * @access public	 * @param string $date Date to parse	 * @return int Timestamp corresponding to date string, or false on failure	 */	function parse($date)	{		foreach ($this->user as $method)		{			if (($returned = call_user_func($method, $date)) !== false)			{				return $returned;			}		}		foreach ($this->built_in as $method)		{			if (($returned = call_user_func(array(&$this, $method), $date)) !== false)			{				return $returned;			}		}		return false;	}	/**	 * Add a callback method to parse a date	 *	 * @final	 * @access public	 * @param callback $callback	 */	function add_callback($callback)	{		if (is_callable($callback))		{			$this->user[] = $callback;		}		else		{			trigger_error('User-supplied function must be a valid callback', E_USER_WARNING);		}	}	/**	 * Parse a superset of W3C-DTF (allows hyphens and colons to be omitted, as	 * well as allowing any of upper or lower case "T", horizontal tabs, or	 * spaces to be used as the time seperator (including more than one))	 *	 * @access protected	 * @return int Timestamp	 */	function date_w3cdtf($date)	{		static $pcre;		if (!$pcre)		{			$year = '([0-9]{4})';			$month = $day = $hour = $minute = $second = '([0-9]{2})';			$decimal = '([0-9]*)';			$zone = '(?:(Z)|([+\-])([0-9]{1,2}):?([0-9]{1,2}))';			$pcre = '/^' . $year . '(?:-?' . $month . '(?:-?' . $day . '(?:[Tt\x09\x20]+' . $hour . '(?::?' . $minute . '(?::?' . $second . '(?:.' . $decimal . ')?)?)?' . $zone . ')?)?)?$/';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Year			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Decimal fraction of a second			8: Zulu			9: Timezone 			10: Timezone hours			11: Timezone minutes			*/			// Fill in empty matches			for ($i = count($match); $i <= 3; $i++)			{				$match[$i] = '1';			}			for ($i = count($match); $i <= 7; $i++)			{				$match[$i] = '0';			}			// Numeric timezone			if (isset($match[9]) && $match[9] !== '')			{				$timezone = $match[10] * 3600;				$timezone += $match[11] * 60;				if ($match[9] === '-')				{					$timezone = 0 - $timezone;				}			}			else			{				$timezone = 0;			}			// Convert the number of seconds to an integer, taking decimals into account			$second = round($match[6] + $match[7] / pow(10, strlen($match[7])));			return gmmktime($match[4], $match[5], $second, $match[2], $match[3], $match[1]) - $timezone;		}		else		{			return false;		}	}	/**	 * Remove RFC822 comments	 *	 * @access protected	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function remove_rfc2822_comments($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	/**	 * Parse RFC2822's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc2822($date)	{		static $pcre;		if (!$pcre)		{			$wsp = '[\x09\x20]';			$fws = '(?:' . $wsp . '+|' . $wsp . '*(?:\x0D\x0A' . $wsp . '+)+)';			$optional_fws = $fws . '?';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $minute = $second = '([0-9]{2})';			$year = '([0-9]{2,4})';			$num_zone = '([+\-])([0-9]{2})([0-9]{2})';			$character_zone = '([A-Z]{1,5})';			$zone = '(?:' . $num_zone . '|' . $character_zone . ')';			$pcre = '/(?:' . $optional_fws . $day_name . $optional_fws . ',)?' . $optional_fws . $day . $fws . $month . $fws . $year . $fws . $hour . $optional_fws . ':' . $optional_fws . $minute . '(?:' . $optional_fws . ':' . $optional_fws . $second . ')?' . $fws . $zone . '/i';		}		if (preg_match($pcre, $this->remove_rfc2822_comments($date), $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone 			9: Timezone hours			10: Timezone minutes			11: Alphabetic timezone			*/			// Find the month number			$month = $this->month[strtolower($match[3])];			// Numeric timezone			if ($match[8] !== '')			{				$timezone = $match[9] * 3600;				$timezone += $match[10] * 60;				if ($match[8] === '-')				{					$timezone = 0 - $timezone;				}			}			// Character timezone			elseif (isset($this->timezone[strtoupper($match[11])]))			{				$timezone = $this->timezone[strtoupper($match[11])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2/3 digit years			if ($match[4] < 50)			{				$match[4] += 2000;			}			elseif ($match[4] < 1000)			{				$match[4] += 1900;			}			// Second is optional, if it is empty set it to zero			if ($match[7] !== '')			{				$second = $match[7];			}			else			{				$second = 0;			}			return gmmktime($match[5], $match[6], $second, $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse RFC850's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc850($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$year = $hour = $minute = $second = '([0-9]{2})';			$zone = '([A-Z]{1,5})';			$pcre = '/^' . $day_name . ',' . $space . $day . '-' . $month . '-' . $year . $space . $hour . ':' . $minute . ':' . $second . $space . $zone . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone			*/			// Month			$month = $this->month[strtolower($match[3])];			// Character timezone			if (isset($this->timezone[strtoupper($match[8])]))			{				$timezone = $this->timezone[strtoupper($match[8])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2 digit year			if ($match[4] < 50)			{				$match[4] += 2000;			}			else			{				$match[4] += 1900;			}			return gmmktime($match[5], $match[6], $match[7], $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse C99's asctime()'s date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_asctime($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$wday_name = $this->day_pcre;			$mon_name = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $sec = $min = '([0-9]{2})';			$year = '([0-9]{4})';			$terminator = '\x0A?\x00?';			$pcre = '/^' . $wday_name . $space . $mon_name . $space . $day . $space . $hour . ':' . $min . ':' . $sec . $space . $year . $terminator . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Year			*/			$month = $this->month[strtolower($match[2])];			return gmmktime($match[4], $match[5], $match[6], $month, $match[3], $match[7]);		}		else		{			return false;		}	}	/**	 * Parse dates using strtotime()	 *	 * @access protected	 * @return int Timestamp	 */	function date_strtotime($date)	{		$strtotime = strtotime($date);		if ($strtotime === -1 || $strtotime === false)		{			return false;		}		else		{			return $strtotime;		}	}}/** * Content-type sniffing * * @package SimplePie */class SimplePie_Content_Type_Sniffer{	/**	 * File object	 *	 * @var SimplePie_File	 * @access private	 */	var $file;	/**	 * Create an instance of the class with the input file	 *	 * @access public	 * @param SimplePie_Content_Type_Sniffer $file Input file	 */	function SimplePie_Content_Type_Sniffer($file)	{		$this->file = $file;	}	/**	 * Get the Content-Type of the specified file	 *	 * @access public	 * @return string Actual Content-Type	 */	function get_type()	{		if (isset($this->file->headers['content-type']))		{			if (!isset($this->file->headers['content-encoding'])				&& ($this->file->headers['content-type'] === 'text/plain'					|| $this->file->headers['content-type'] === 'text/plain; charset=ISO-8859-1'					|| $this->file->headers['content-type'] === 'text/plain; charset=iso-8859-1'))			{				return $this->text_or_binary();			}			if (($pos = strpos($this->file->headers['content-type'], ';')) !== false)			{				$official = substr($this->file->headers['content-type'], 0, $pos);			}			else			{				$official = $this->file->headers['content-type'];			}			$official = strtolower($official);			if ($official === 'unknown/unknown'				|| $official === 'application/unknown')			{				return $this->unknown();			}			elseif (substr($official, -4) === '+xml'				|| $official === 'text/xml'				|| $official === 'application/xml')			{				return $official;			}			elseif (substr($official, 0, 6) === 'image/')			{				if ($return = $this->image())				{					return $return;				}				else				{					return $official;				}			}			elseif ($official === 'text/html')			{				return $this->feed_or_html();			}			else			{				return $official;			}		}		else		{			return $this->unknown();		}	}	/**	 * Sniff text or binary	 *	 * @access private	 * @return string Actual Content-Type	 */	function text_or_binary()	{		if (substr($this->file->body, 0, 2) === "\xFE\xFF"			|| substr($this->file->body, 0, 2) === "\xFF\xFE"			|| substr($this->file->body, 0, 4) === "\x00\x00\xFE\xFF"			|| substr($this->file->body, 0, 3) === "\xEF\xBB\xBF")		{			return 'text/plain';		}		elseif (preg_match('/[\x00-\x08\x0E-\x1A\x1C-\x1F]/', $this->file->body))		{			return 'application/octect-stream';		}		else		{			return 'text/plain';		}	}	/**	 * Sniff unknown	 *	 * @access private	 * @return string Actual Content-Type	 */	function unknown()	{		$ws = strspn($this->file->body, "\x09\x0A\x0B\x0C\x0D\x20");		if (strtolower(substr($this->file->body, $ws, 14)) === '<!doctype html'			|| strtolower(substr($this->file->body, $ws, 5)) === '<html'			|| strtolower(substr($this->file->body, $ws, 7)) === '<script')		{			return 'text/html';		}		elseif (substr($this->file->body, 0, 5) === '%PDF-')		{			return 'application/pdf';		}		elseif (substr($this->file->body, 0, 11) === '%!PS-Adobe-')		{			return 'application/postscript';		}		elseif (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return $this->text_or_binary();		}	}	/**	 * Sniff images	 *	 * @access private	 * @return string Actual Content-Type	 */	function image()	{		if (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return false;		}	}	/**	 * Sniff HTML	 *	 * @access private	 * @return string Actual Content-Type	 */	function feed_or_html()	{		$len = strlen($this->file->body);		$pos = strspn($this->file->body, "\x09\x0A\x0D\x20");		while ($pos < $len)		{			switch ($this->file->body[$pos])			{				case "\x09":				case "\x0A":				case "\x0D":				case "\x20":					$pos += strspn($this->file->body, "\x09\x0A\x0D\x20", $pos);					continue 2;				case '<':					$pos++;					break;				default:					return 'text/html';			}			if (substr($this->file->body, $pos, 3) === '!--')			{				$pos += 3;				if ($pos < $len && ($pos = strpos($this->file->body, '-->', $pos)) !== false)				{					$pos += 3;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '!')			{				if ($pos < $len && ($pos = strpos($this->file->body, '>', $pos)) !== false)				{					$pos++;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '?')			{				if ($pos < $len && ($pos = strpos($this->file->body, '?>', $pos)) !== false)				{					$pos += 2;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 3) === 'rss'				|| substr($this->file->body, $pos, 7) === 'rdf:RDF')			{				return 'application/rss+xml';			}			elseif (substr($this->file->body, $pos, 4) === 'feed')			{				return 'application/atom+xml';			}			else			{				return 'text/html';			}		}		return 'text/html';	}}/** * Parses the XML Declaration * * @package SimplePie */class SimplePie_XML_Declaration_Parser{	/**	 * XML Version	 *	 * @access public	 * @var string	 */	var $version = '1.0';	/**	 * Encoding	 *	 * @access public	 * @var string	 */	var $encoding = 'UTF-8';	/**	 * Standalone	 *	 * @access public	 * @var bool	 */	var $standalone = false;	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'before_version_name';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_XML_Declaration_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit')		{			return true;		}		else		{			$this->version = '';			$this->encoding = '';			$this->standalone = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * Advance past any whitespace	 *	 * @return int Number of whitespace characters passed	 */	function skip_whitespace()	{		$whitespace = strspn($this->data, "\x09\x0A\x0D\x20", $this->position);		$this->position += $whitespace;		return $whitespace;	}	/**	 * Read value	 */	function get_value()	{		$quote = substr($this->data, $this->position, 1);		if ($quote === '"' || $quote === "'")		{			$this->position++;			$len = strcspn($this->data, $quote, $this->position);			if ($this->has_data())			{				$value = substr($this->data, $this->position, $len);				$this->position += $len + 1;				return $value;			}		}		return false;	}	function before_version_name()	{		if ($this->skip_whitespace())		{			$this->state = 'version_name';		}		else		{			$this->state = false;		}	}	function version_name()	{		if (substr($this->data, $this->position, 7) === 'version')		{			$this->position += 7;			$this->skip_whitespace();			$this->state = 'version_equals';		}		else		{			$this->state = false;		}	}	function version_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'version_value';		}		else		{			$this->state = false;		}	}	function version_value()	{		if ($this->version = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'encoding_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = 'standalone_name';		}	}	function encoding_name()	{		if (substr($this->data, $this->position, 8) === 'encoding')		{			$this->position += 8;			$this->skip_whitespace();			$this->state = 'encoding_equals';		}		else		{			$this->state = false;		}	}	function encoding_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'encoding_value';		}		else		{			$this->state = false;		}	}	function encoding_value()	{		if ($this->encoding = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'standalone_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}	function standalone_name()	{		if (substr($this->data, $this->position, 10) === 'standalone')		{			$this->position += 10;			$this->skip_whitespace();			$this->state = 'standalone_equals';		}		else		{			$this->state = false;		}	}	function standalone_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'standalone_value';		}		else		{			$this->state = false;		}	}	function standalone_value()	{		if ($standalone = $this->get_value())		{			switch ($standalone)			{				case 'yes':					$this->standalone = true;					break;				case 'no':					$this->standalone = false;					break;				default:					$this->state = false;					return;			}			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = false;			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}}class SimplePie_Locator{	var $useragent;	var $timeout;	var $file;	var $local = array();	var $elsewhere = array();	var $file_class = 'SimplePie_File';	var $cached_entities = array();	var $http_base;	var $base;	var $base_location = 0;	var $checked_feeds = 0;	var $max_checked_feeds = 10;	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	function SimplePie_Locator(&$file, $timeout = 10, $useragent = null, $file_class = 'SimplePie_File', $max_checked_feeds = 10, $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer')	{		$this->file =& $file;		$this->file_class = $file_class;		$this->useragent = $useragent;		$this->timeout = $timeout;		$this->max_checked_feeds = $max_checked_feeds;		$this->content_type_sniffer_class = $content_type_sniffer_class;	}	function find($type = SIMPLEPIE_LOCATOR_ALL, &$working)	{		if ($this->is_feed($this->file))		{			return $this->file;		}		if ($this->file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer = new $this->content_type_sniffer_class($this->file);			if ($sniffer->get_type() !== 'text/html')			{				return null;			}		}		if ($type & ~SIMPLEPIE_LOCATOR_NONE)		{			$this->get_base();		}		if ($type & SIMPLEPIE_LOCATOR_AUTODISCOVERY && $working = $this->autodiscovery())		{			return $working[0];		}		if ($type & (SIMPLEPIE_LOCATOR_LOCAL_EXTENSION | SIMPLEPIE_LOCATOR_LOCAL_BODY | SIMPLEPIE_LOCATOR_REMOTE_EXTENSION | SIMPLEPIE_LOCATOR_REMOTE_BODY) && $this->get_links())		{			if ($type & SIMPLEPIE_LOCATOR_LOCAL_EXTENSION && $working = $this->extension($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_LOCAL_BODY && $working = $this->body($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_EXTENSION && $working = $this->extension($this->elsewhere))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_BODY && $working = $this->body($this->elsewhere))			{				return $working;			}		}		return null;	}	function is_feed(&$file)	{		if ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer = new $this->content_type_sniffer_class($file);			$sniffed = $sniffer->get_type();			if (in_array($sniffed, array('application/rss+xml', 'application/rdf+xml', 'text/rdf', 'application/atom+xml', 'text/xml', 'application/xml')))			{				return true;			}			else			{				return false;			}		}		elseif ($file->method & SIMPLEPIE_FILE_SOURCE_LOCAL)		{			return true;		}		else		{			return false;		}	}	function get_base()	{		$this->http_base = $this->file->url;		$this->base = $this->http_base;		$elements = SimplePie_Misc::get_element('base', $this->file->body);		foreach ($elements as $element)		{			if ($element['attribs']['href']['data'] !== '')			{				$this->base = SimplePie_Misc::absolutize_url(trim($element['attribs']['href']['data']), $this->http_base);				$this->base_location = $element['offset'];				break;			}		}	}	function autodiscovery()	{		$links = array_merge(SimplePie_Misc::get_element('link', $this->file->body), SimplePie_Misc::get_element('a', $this->file->body), SimplePie_Misc::get_element('area', $this->file->body));		$done = array();		$feeds = array();		foreach ($links as $link)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (isset($link['attribs']['href']['data']) && isset($link['attribs']['rel']['data']))			{				$rel = array_unique(SimplePie_Misc::space_seperated_tokens(strtolower($link['attribs']['rel']['data'])));				if ($this->base_location < $link['offset'])				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);				}				else				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);				}				if (!in_array($href, $done) && in_array('feed', $rel) || (in_array('alternate', $rel) && !empty($link['attribs']['type']['data']) && in_array(strtolower(SimplePie_Misc::parse_mime($link['attribs']['type']['data'])), array('application/rss+xml', 'application/atom+xml'))) && !isset($feeds[$href]))				{					$this->checked_feeds++;					$feed = new $this->file_class($href, $this->timeout, 5, null, $this->useragent);					if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))					{						$feeds[$href] = $feed;					}				}				$done[] = $href;			}		}		if (!empty($feeds))		{			return array_values($feeds);		}		else		{			return null;		}	}	function get_links()	{		$links = SimplePie_Misc::get_element('a', $this->file->body);		foreach ($links as $link)		{			if (isset($link['attribs']['href']['data']))			{				$href = trim($link['attribs']['href']['data']);				$parsed = SimplePie_Misc::parse_url($href);				if ($parsed['scheme'] === '' || preg_match('/^(http(s)|feed)?$/i', $parsed['scheme']))				{					if ($this->base_location < $link['offset'])					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);					}					else					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);					}					$current = SimplePie_Misc::parse_url($this->file->url);					if ($parsed['authority'] === '' || $parsed['authority'] === $current['authority'])					{						$this->local[] = $href;					}					else					{						$this->elsewhere[] = $href;					}				}			}		}		$this->local = array_unique($this->local);		$this->elsewhere = array_unique($this->elsewhere);		if (!empty($this->local) || !empty($this->elsewhere))		{			return true;		}		return null;	}	function extension(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (in_array(strtolower(strrchr($value, '.')), array('.rss', '.rdf', '.atom', '.xml')))			{				$this->checked_feeds++;				$feed = new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}	function body(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (preg_match('/(rss|rdf|atom|xml)/i', $value))			{				$this->checked_feeds++;				$feed = new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}}class SimplePie_Parser{	var $error_code;	var $error_string;	var $current_line;	var $current_column;	var $current_byte;	var $separator = ' ';	var $namespace = array('');	var $element = array('');	var $xml_base = array('');	var $xml_base_explicit = array(false);	var $xml_lang = array('');	var $data = array();	var $datas = array(array());	var $current_xhtml_construct = -1;	var $encoding;	function parse(&$data, $encoding)	{		// Use UTF-8 if we get passed US-ASCII, as every US-ASCII character is a UTF-8 character		if (strtoupper($encoding) === 'US-ASCII')		{			$this->encoding = 'UTF-8';		}		else		{			$this->encoding = $encoding;		}		// Strip BOM:		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$data = substr($data, 4);		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$data = substr($data, 4);		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$data = substr($data, 2);		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$data = substr($data, 2);		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$data = substr($data, 3);		}		if (substr($data, 0, 5) === '<?xml' && strspn(substr($data, 5, 1), "\x09\x0A\x0D\x20") && ($pos = strpos($data, '?>')) !== false)		{			$declaration = new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));			if ($declaration->parse())			{				$data = substr($data, $pos + 2);				$data = '<?xml version="' . $declaration->version . '" encoding="' . $encoding . '" standalone="' . (($declaration->standalone) ? 'yes' : 'no') . '"?>' . $data;			}			else			{				$this->error_string = 'SimplePie bug! Please report this!';				return false;			}		}		$return = true;		static $xml_is_sane = null;		if ($xml_is_sane === null)		{			$parser_check = xml_parser_create();			xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);			xml_parser_free($parser_check);			$xml_is_sane = isset($values[0]['value']);		}		// Create the parser		if ($xml_is_sane)		{			$xml = xml_parser_create_ns($this->encoding, $this->separator);			xml_parser_set_option($xml, XML_OPTION_SKIP_WHITE, 1);			xml_parser_set_option($xml, XML_OPTION_CASE_FOLDING, 0);			xml_set_object($xml, $this);			xml_set_character_data_handler($xml, 'cdata');			xml_set_element_handler($xml, 'tag_open', 'tag_close');			// Parse!			if (!xml_parse($xml, $data, true))			{				$this->error_code = xml_get_error_code($xml);				$this->error_string = xml_error_string($this->error_code);				$return = false;			}			$this->current_line = xml_get_current_line_number($xml);			$this->current_column = xml_get_current_column_number($xml);			$this->current_byte = xml_get_current_byte_index($xml);			xml_parser_free($xml);			return $return;		}		else		{			libxml_clear_errors();			$xml = new XMLReader();			$xml->xml($data);			while (@$xml->read())			{				switch ($xml->nodeType)				{					case constant('XMLReader::END_ELEMENT'):						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$this->tag_close(null, $tagName);						break;					case constant('XMLReader::ELEMENT'):						$empty = $xml->isEmptyElement;						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$attributes = array();						while ($xml->moveToNextAttribute())						{							if ($xml->namespaceURI !== '')							{								$attrName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";							}							else							{								$attrName = $xml->localName;							}							$attributes[$attrName] = $xml->value;						}						$this->tag_open(null, $tagName, $attributes);						if ($empty)						{							$this->tag_close(null, $tagName);						}						break;					case constant('XMLReader::TEXT'):					case constant('XMLReader::CDATA'):						$this->cdata(null, $xml->value);						break;				}			}			if ($error = libxml_get_last_error())			{				$this->error_code = $error->code;				$this->error_string = $error->message;				$this->current_line = $error->line;				$this->current_column = $error->column;				return false;			}			else			{				return true;			}		}	}	function get_error_code()	{		return $this->error_code;	}	function get_error_string()	{		return $this->error_string;	}	function get_current_line()	{		return $this->current_line;	}	function get_current_column()	{		return $this->current_column;	}	function get_current_byte()	{		return $this->current_byte;	}	function get_data()	{		return $this->data;	}	function tag_open($parser, $tag, $attributes)	{		list($this->namespace[], $this->element[]) = $this->split_ns($tag);		$attribs = array();		foreach ($attributes as $name => $value)		{			list($attrib_namespace, $attribute) = $this->split_ns($name);			$attribs[$attrib_namespace][$attribute] = $value;		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['base']))		{			$this->xml_base[] = SimplePie_Misc::absolutize_url($attribs[SIMPLEPIE_NAMESPACE_XML]['base'], end($this->xml_base));			$this->xml_base_explicit[] = true;		}		else		{			$this->xml_base[] = end($this->xml_base);			$this->xml_base_explicit[] = end($this->xml_base_explicit);		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['lang']))		{			$this->xml_lang[] = $attribs[SIMPLEPIE_NAMESPACE_XML]['lang'];		}		else		{			$this->xml_lang[] = end($this->xml_lang);		}		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct++;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML)			{				$this->data['data'] .= '<' . end($this->element);				if (isset($attribs['']))				{					foreach ($attribs[''] as $name => $value)					{						$this->data['data'] .= ' ' . $name . '="' . htmlspecialchars($value, ENT_COMPAT, $this->encoding) . '"';					}				}				$this->data['data'] .= '>';			}		}		else		{			$this->datas[] =& $this->data;			$this->data =& $this->data['child'][end($this->namespace)][end($this->element)][];			$this->data = array('data' => '', 'attribs' => $attribs, 'xml_base' => end($this->xml_base), 'xml_base_explicit' => end($this->xml_base_explicit), 'xml_lang' => end($this->xml_lang));			if ((end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_03 && in_array(end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml')			|| (end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_10 && in_array(end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml'))			{				$this->current_xhtml_construct = 0;			}		}	}	function cdata($parser, $cdata)	{		if ($this->current_xhtml_construct >= 0)		{			$this->data['data'] .= htmlspecialchars($cdata, ENT_QUOTES, $this->encoding);		}		else		{			$this->data['data'] .= $cdata;		}	}	function tag_close($parser, $tag)	{		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct--;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML && !in_array(end($this->element), array('area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param')))			{				$this->data['data'] .= '</' . end($this->element) . '>';			}		}		if ($this->current_xhtml_construct === -1)		{			$this->data =& $this->datas[count($this->datas) - 1];			array_pop($this->datas);		}		array_pop($this->element);		array_pop($this->namespace);		array_pop($this->xml_base);		array_pop($this->xml_base_explicit);		array_pop($this->xml_lang);	}	function split_ns($string)	{		static $cache = array();		if (!isset($cache[$string]))		{			if ($pos = strpos($string, $this->separator))			{				static $separator_length;				if (!$separator_length)				{					$separator_length = strlen($this->separator);				}				$namespace = substr($string, 0, $pos);				$local_name = substr($string, $pos + $separator_length);				if (strtolower($namespace) === SIMPLEPIE_NAMESPACE_ITUNES)				{					$namespace = SIMPLEPIE_NAMESPACE_ITUNES;				}				// Normalize the Media RSS namespaces				if ($namespace === SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG)				{					$namespace = SIMPLEPIE_NAMESPACE_MEDIARSS;				}				$cache[$string] = array($namespace, $local_name);			}			else			{				$cache[$string] = array('', $string);			}		}		return $cache[$string];	}}/** * @todo Move to using an actual HTML parser (this will allow tags to be properly stripped, and to switch between HTML and XHTML), this will also make it easier to shorten a string while preserving HTML tags */class SimplePie_Sanitize{	// Private vars	var $base;	// Options	var $remove_div = true;	var $image_handler = '';	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	var $encode_instead_of_strip = false;	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	var $strip_comments = false;	var $output_encoding = 'UTF-8';	var $enable_cache = true;	var $cache_location = './cache';	var $cache_name_function = 'md5';	var $cache_class = 'SimplePie_Cache';	var $file_class = 'SimplePie_File';	var $timeout = 10;	var $useragent = '';	var $force_fsockopen = false;	var $replace_url_attributes = array(		'a' => 'href',		'area' => 'href',		'blockquote' => 'cite',		'del' => 'cite',		'form' => 'action',		'img' => array('longdesc', 'src'),		'input' => 'src',		'ins' => 'cite',		'q' => 'cite'	);	function remove_div($enable = true)	{		$this->remove_div = (bool) $enable;	}	function set_image_handler($page = false)	{		if ($page)		{			$this->image_handler = (string) $page;		}		else		{			$this->image_handler = false;		}	}	function pass_cache_data($enable_cache = true, $cache_location = './cache', $cache_name_function = 'md5', $cache_class = 'SimplePie_Cache')	{		if (isset($enable_cache))		{			$this->enable_cache = (bool) $enable_cache;		}		if ($cache_location)		{			$this->cache_location = (string) $cache_location;		}		if ($cache_name_function)		{			$this->cache_name_function = (string) $cache_name_function;		}		if ($cache_class)		{			$this->cache_class = (string) $cache_class;		}	}	function pass_file_data($file_class = 'SimplePie_File', $timeout = 10, $useragent = '', $force_fsockopen = false)	{		if ($file_class)		{			$this->file_class = (string) $file_class;		}		if ($timeout)		{			$this->timeout = (string) $timeout;		}		if ($useragent)		{			$this->useragent = (string) $useragent;		}		if ($force_fsockopen)		{			$this->force_fsockopen = (string) $force_fsockopen;		}	}	function strip_htmltags($tags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style'))	{		if ($tags)		{			if (is_array($tags))			{				$this->strip_htmltags = $tags;			}			else			{				$this->strip_htmltags = explode(',', $tags);			}		}		else		{			$this->strip_htmltags = false;		}	}	function encode_instead_of_strip($encode = false)	{		$this->encode_instead_of_strip = (bool) $encode;	}	function strip_attributes($attribs = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc'))	{		if ($attribs)		{			if (is_array($attribs))			{				$this->strip_attributes = $attribs;			}			else			{				$this->strip_attributes = explode(',', $attribs);			}		}		else		{			$this->strip_attributes = false;		}	}	function strip_comments($strip = false)	{		$this->strip_comments = (bool) $strip;	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->output_encoding = (string) $encoding;	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->replace_url_attributes = (array) $element_attribute;	}	function sanitize($data, $type, $base = '')	{		$data = trim($data);		if ($data !== '' || $type & SIMPLEPIE_CONSTRUCT_IRI)		{			if ($type & SIMPLEPIE_CONSTRUCT_MAYBE_HTML)			{				if (preg_match('/(&(#(x[0-9a-fA-F]+|[0-9]+)|[a-zA-Z0-9]+)|<\/[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>)/', $data))				{					$type |= SIMPLEPIE_CONSTRUCT_HTML;				}				else				{					$type |= SIMPLEPIE_CONSTRUCT_TEXT;				}			}			if ($type & SIMPLEPIE_CONSTRUCT_BASE64)			{				$data = base64_decode($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_XHTML)			{				if ($this->remove_div)				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '', $data);					$data = preg_replace('/<\/div>$/', '', $data);				}				else				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '<div>', $data);				}			}			if ($type & (SIMPLEPIE_CONSTRUCT_HTML | SIMPLEPIE_CONSTRUCT_XHTML))			{				// Strip comments				if ($this->strip_comments)				{					$data = SimplePie_Misc::strip_comments($data);				}				// Strip out HTML tags and attributes that might cause various security problems.				// Based on recommendations by Mark Pilgrim at:				// http://diveintomark.org/archives/2003/06/12/how_to_consume_rss_safely				if ($this->strip_htmltags)				{					foreach ($this->strip_htmltags as $tag)					{						$pcre = "/<($tag)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$tag" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>|(\/)?>)/siU';						while (preg_match($pcre, $data))						{							$data = preg_replace_callback($pcre, array(&$this, 'do_strip_htmltags'), $data);						}					}				}				if ($this->strip_attributes)				{					foreach ($this->strip_attributes as $attrib)					{						$data = preg_replace('/(<[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*)' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . trim($attrib) . '(?:\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>/', '\1\2\3>', $data);					}				}				// Replace relative URLs				$this->base = $base;				foreach ($this->replace_url_attributes as $element => $attributes)				{					$data = $this->replace_urls($data, $element, $attributes);				}				// If image handling (caching, etc.) is enabled, cache and rewrite all the image tags.				if (isset($this->image_handler) && ((string) $this->image_handler) !== '' && $this->enable_cache)				{					$images = SimplePie_Misc::get_element('img', $data);					foreach ($images as $img)					{						if (isset($img['attribs']['src']['data']))						{							$image_url = call_user_func($this->cache_name_function, $img['attribs']['src']['data']);							$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $image_url, 'spi');							if ($cache->load())							{								$img['attribs']['src']['data'] = $this->image_handler . $image_url;								$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);							}							else							{								$file = new $this->file_class($img['attribs']['src']['data'], $this->timeout, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);								$headers = $file->headers;								if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))								{									if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))									{										$img['attribs']['src']['data'] = $this->image_handler . $image_url;										$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);									}									else									{										trigger_error("$this->cache_location is not writeable", E_USER_WARNING);									}								}							}						}					}				}				// Having (possibly) taken stuff out, there may now be whitespace at the beginning/end of the data				$data = trim($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_IRI)			{				$data = SimplePie_Misc::absolutize_url($data, $base);			}			if ($type & (SIMPLEPIE_CONSTRUCT_TEXT | SIMPLEPIE_CONSTRUCT_IRI))			{				$data = htmlspecialchars($data, ENT_COMPAT, 'UTF-8');			}			if ($this->output_encoding !== 'UTF-8')			{				$data = SimplePie_Misc::change_encoding($data, 'UTF-8', $this->output_encoding);			}		}		return $data;	}	function replace_urls($data, $tag, $attributes)	{		if (!is_array($this->strip_htmltags) || !in_array($tag, $this->strip_htmltags))		{			$elements = SimplePie_Misc::get_element($tag, $data);			foreach ($elements as $element)			{				if (is_array($attributes))				{					foreach ($attributes as $attribute)					{						if (isset($element['attribs'][$attribute]['data']))						{							$element['attribs'][$attribute]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attribute]['data'], $this->base);							$new_element = SimplePie_Misc::element_implode($element);							$data = str_replace($element['full'], $new_element, $data);							$element['full'] = $new_element;						}					}				}				elseif (isset($element['attribs'][$attributes]['data']))				{					$element['attribs'][$attributes]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attributes]['data'], $this->base);					$data = str_replace($element['full'], SimplePie_Misc::element_implode($element), $data);				}			}		}		return $data;	}	function do_strip_htmltags($match)	{		if ($this->encode_instead_of_strip)		{			if (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))			{				$match[1] = htmlspecialchars($match[1], ENT_COMPAT, 'UTF-8');				$match[2] = htmlspecialchars($match[2], ENT_COMPAT, 'UTF-8');				return "&lt;$match[1]$match[2]&gt;$match[3]&lt;/$match[1]&gt;";			}			else			{				return htmlspecialchars($match[0], ENT_COMPAT, 'UTF-8');			}		}		elseif (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))		{			return $match[4];		}		else		{			return '';		}	}}?>
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class adjust the brightness of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterBrightness extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			// @codeCoverageIgnoreStart			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Validate that the brightness value exists and is an integer.		if (!isset($options[IMG_FILTER_BRIGHTNESS]) || !is_int($options[IMG_FILTER_BRIGHTNESS]))		{			throw new InvalidArgumentException('No valid brightness value was given.  Expected integer.');		}		// Perform the brightness filter.		imagefilter($this->handle, IMG_FILTER_BRIGHTNESS, $options[IMG_FILTER_BRIGHTNESS]);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Media Manager Component Controller * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		JPluginHelper::importPlugin('content');		$vName = $this->input->get('view', 'media');		switch ($vName)		{			case 'images':				$vLayout = $this->input->get('layout', 'default');				$mName = 'manager';				break;			case 'imagesList':				$mName = 'list';				$vLayout = $this->input->get('layout', 'default');				break;			case 'mediaList':				$app	= JFactory::getApplication();				$mName = 'list';				$vLayout = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');				break;			case 'media':			default:				$vName = 'media';				$vLayout = $this->input->get('layout', 'default');				$mName = 'manager';				break;		}		$document = JFactory::getDocument();		$vType    = $document->getType();		// Get/Create the view		$view = $this->getView($vName, $vType);		$view->addTemplatePath(JPATH_COMPONENT_ADMINISTRATOR.'/views/'.strtolower($vName).'/tmpl');		// Get/Create the model		if ($model = $this->getModel($mName))		{			// Push the model into the view (as default)			$view->setModel($model, true);		}		// Set the layout		$view->setLayout($vLayout);		// Display the view		$view->display();		return $this;	}	public function ftpValidate()	{		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?>	<?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>		<?php if ($this->params->get('categories_description')) : ?>		<div class="category-desc base-desc">			<?php echo  JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_contact.categories'); ?>			</div>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc base-desc">					<?php  echo JHtml::_('content.prepare', $this->parent->description, '', 'com_contact.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?>	<?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_RELEVANT_PHP_SETTINGS'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="250">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;				</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SAFE_MODE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['safe_mode']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OPEN_BASEDIR'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['open_basedir']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISPLAY_ERRORS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['display_errors']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SHORT_OPEN_TAGS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['short_open_tag']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_FILE_UPLOADS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['file_uploads']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MAGIC_QUOTES'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['magic_quotes_gpc']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_REGISTER_GLOBALS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['register_globals']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OUTPUT_BUFFERING'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['output_buffering']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_SAVE_PATH'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['session.save_path']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_AUTO_START'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.integer', $this->php_settings['session.auto_start']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_XML_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['xml']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZLIB_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zlib']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZIP_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zip']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISABLED_FUNCTIONS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['disable_functions']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MBSTRING_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['mbstring']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ICONV_AVAILABLE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['iconv']); ?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Download model. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersModelDownload extends JModelForm{	protected $_context = 'com_banners.tracks';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$input = JFactory::getApplication()->input;		$basename = $input->cookie->getString(JApplication::getHash($this->_context.'.basename'), '__SITE__');		$this->setState('basename', $basename);		$compressed = $input->cookie->getInt(JApplication::getHash($this->_context.'.compressed'), 1);		$this->setState('compressed', $compressed);	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_banners.download', 'download', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		$data = array(			'basename'		=> $this->getState('basename'),			'compressed'	=> $this->getState('compressed')		);		$this->preprocessData('com_banners.download', $data);		return $data;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewCompleteHtml $this */?><form action="index.php" xmlns="http://www.w3.org/1999/html" method="post" id="adminForm"	class="form-validate form-horizontal">	<div class="alert alert-error inlineError" id="theDefaultError" style="display: none">		<h4 class="alert-heading"><?php echo JText::_('JERROR'); ?></h4>		<p id="theDefaultErrorMessage"></p>	</div>	<div class="alert alert-success">		<h3><?php echo JText::_('INSTL_COMPLETE_TITLE'); ?></h3>	</div>	<div class="alert">		<p><?php echo JText::_('INSTL_COMPLETE_REMOVE_INSTALLATION'); ?></p>		<input type="button" class="btn btn-warning" name="instDefault" onclick="Install.removeFolder(this);" value="<?php echo JText::_('INSTL_COMPLETE_REMOVE_FOLDER'); ?>" />	</div>	<div class="btn-toolbar">		<div class="btn-group">			<a class="btn" href="<?php echo JURI::root(); ?>" title="<?php echo JText::_('JSITE'); ?>"><i class="icon-eye-open"></i> <?php echo JText::_('JSITE'); ?></a>		</div>		<div class="btn-group">			<a class="btn btn-primary" href="<?php echo JURI::root(); ?>administrator/" title="<?php echo JText::_('JADMINISTRATOR'); ?>"><i class="icon-lock icon-white"></i> <?php echo JText::_('JADMINISTRATOR'); ?></a>		</div>	</div>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_COMPLETE_ADMINISTRATION_LOGIN_DETAILS'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('JEMAIL'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_email']; ?></span>						</td>					</tr>					<tr>						<td class="notice">							<?php echo JText::_('JUSERNAME'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_user']; ?></span>						</td>					</tr>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div id="languages" class="span6">			<h3><?php echo JText::_('INSTL_COMPLETE_LANGUAGE_1'); ?></h3>			<hr class="hr-condensed" />			<p><?php echo JText::_('INSTL_COMPLETE_LANGUAGE_DESC'); ?></p>			<p><a href="#" class="btn btn-primary" id="instLangs" onclick="return Install.goToPage('languages');"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('INSTL_COMPLETE_INSTALL_LANGUAGES'); ?></a></p>			<p><?php echo JText::_('INSTL_COMPLETE_LANGUAGE_DESC2'); ?></p>		</div>	</div>	<?php if ($this->config) : ?>	<div class="alert alert-error">		<h3 class="alert-heading"><?php echo JText::_('JNOTICE'); ?></h3>		<p><?php echo JText::_('INSTL_CONFPROBLEM'); ?></p>		<textarea rows="10" cols="80" style="width: 100%;" name="configcode" onclick="this.form.configcode.focus();this.form.configcode.select();"><?php echo $this->config; ?></textarea>	</div>	<?php endif; ?>	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleTel extends JFormRule{	/**	 * Method to test the url for a valid parts.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		/*		 * @see http://www.nanpa.com/		 * @see http://tools.ietf.org/html/rfc4933		 * @see http://www.itu.int/rec/T-REC-E.164/en		 *		 * Regex by Steve Levithan		 * @see http://blog.stevenlevithan.com/archives/validate-phone-number		 * @note that valid ITU-T and EPP must begin with +.		 */		$regexarray = array('NANP' => '/^(?:\+?1[-. ]?)?\(?([2-9][0-8][0-9])\)?[-. ]?([2-9][0-9]{2})[-. ]?([0-9]{4})$/',			'ITU-T' => '/^\+(?:[0-9] ?){6,14}[0-9]$/', 'EPP' => '/^\+[0-9]{1,3}\.[0-9]{4,14}(?:x.+)?$/');		if (isset($element['plan']))		{			$plan = (string) $element['plan'];			if ($plan == 'northamerica' || $plan == 'us')			{				$plan = 'NANP';			}			elseif ($plan == 'International' || $plan == 'int' || $plan == 'missdn' || !$plan)			{				$plan = 'ITU-T';			}			elseif ($plan == 'IETF')			{				$plan = 'EPP';			}			$regex = $regexarray[$plan];			// Test the value against the regular expression.			if (preg_match($regex, $value) == false)			{				return false;			}		}		else		{			/*			 * If the rule is set but no plan is selected just check that there are between			 * 7 and 15 digits inclusive and no illegal characters (but common number separators			 * are allowed).			 */			$cleanvalue = preg_replace('/[+. \-(\)]/', '', $value);			$regex = '/^[0-9]{7,15}?$/';			if (preg_match($regex, $cleanvalue) == true)			{				return true;			}			else			{				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners master display controller. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/banners.php';		BannersHelper::updateReset();		$view   = $this->input->get('view', 'banners');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'banner' && $layout == 'edit' && !$this->checkEditId('com_banners.edit.banner', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_banners&view=banners', false));			return false;		}		elseif ($view == 'client' && $layout == 'edit' && !$this->checkEditId('com_banners.edit.client', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_banners&view=clients', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Languages View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewLanguagesHtml extends JViewHtml{	/**	 * Container with all available languages	 *	 * @var    array	 * @since  3.1	 */	protected $items;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelLanguages	 * @since   3.1	 */	protected $model;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->items = $this->model->getItems();		return parent::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="btn-toolbar">	<div class="btn-group">		<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('module.save');">		<?php echo JText::_('JSAVE');?></button>	</div>	<div class="btn-group">		<button type="button" class="btn" onclick="window.parent.SqueezeBox.close();">		<?php echo JText::_('JCANCEL');?></button>	</div>	<div class="clearfix"></div></div><?php$this->setLayout('edit');echo $this->loadTemplate();
<?php/** * @package     Joomla.Administrator * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo $module->content;
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller	= JControllerLegacy::getInstance('Banners');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Database Query Preparable Interface. * Adds bind/unbind methods as well as a getBounded() method * to retrieve the stored bounded variables on demand prior to * query execution. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */interface JDatabaseQueryPreparable{	/**	 * Method to add a variable to an internal array that will be bound to a prepared SQL statement before query execution. Also	 * removes a variable that has been bounded from the internal bounded array when the passed in value is null.	 *	 * @param   string|integer  $key            The key that will be used in your SQL query to reference the value. Usually of	 *                                          the form ':key', but can also be an integer.	 * @param   mixed           &$value         The value that will be bound. The value is passed by reference to support output	 *                                          parameters such as those possible with stored procedures.	 * @param   integer         $dataType       Constant corresponding to a SQL datatype.	 * @param   integer         $length         The length of the variable. Usually required for OUTPUT parameters.	 * @param   array           $driverOptions  Optional driver options to be used.	 *	 * @return  JDatabaseQuery	 *	 * @since   12.1	 */	public function bind($key = null, &$value = null, $dataType = PDO::PARAM_STR, $length = 0, $driverOptions = array());	/**	 * Retrieves the bound parameters array when key is null and returns it by reference. If a key is provided then that item is	 * returned.	 *	 * @param   mixed  $key  The bounded variable key to retrieve.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function &getBounded($key = null);}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$doc = JFactory::getDocument();$color = $this->params->get('templatecolor');$doc->addStyleSheet($this->baseurl.'/templates/system/css/system.css');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/template.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/position.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/layout.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/print.css', $type = 'text/css', $media = 'print');$files = JHtml::_('stylesheet', 'templates/'.$this->template.'/css/general.css', null, false, true);if ($files):	if (!is_array($files)):		$files = array($files);	endif;	foreach ($files as $file) :		$doc->addStyleSheet($file);	endforeach;endif;$doc->addStyleSheet('templates/'.$this->template.'/css/'.htmlspecialchars($color).'.css');if ($this->direction == 'rtl'){	$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/template_rtl.css');	if (file_exists(JPATH_SITE . '/templates/' . $this->template . '/css/' . $color . '_rtl.css'))	{		$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/'.htmlspecialchars($color).'_rtl.css');	}}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" /><!--[if lte IE 6]>	<link href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/ieonly.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script><![endif]--></head><body class="contentpane">	<div id="all">		<div id="main">			<jdoc:include type="message" />			<jdoc:include type="component" />		</div>	</div></body></html>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Setup model for the Joomla Core Installer. * * @package     Joomla.Installation * @subpackage  Model * @since       3.1 */class InstallationModelSetup extends JModelBase{	/**	 * Get the current setup options from the session.	 *	 * @return  array  An array of options from the session	 *	 * @since   3.1	 */	public function getOptions()	{		$session = JFactory::getSession();		$options = $session->get('setup.options', array());		return $options;	}	/**	 * Store the current setup options in the session.	 *	 * @param   array  $options  The installation options	 *	 * @return  array  An array of options from the session	 *	 * @since   3.1	 */	public function storeOptions($options)	{		// Get the current setup options from the session.		$session = JFactory::getSession();		$old = $session->get('setup.options', array());		// Ensure that we have language		if (!isset($options['language']) || empty($options['language']))		{			$options['language'] = JFactory::getLanguage()->getTag();		}		// Merge the new setup options into the current ones and store in the session.		$options = array_merge($old, (array) $options);		$session->set('setup.options', $options);		return $options;	}	/**	 * Method to get the form.	 *	 * @param   string  $view  The view being processed	 *	 * @return  mixed  JForm object on success, false on failure.	 *	 * @since   3.1	 */	public function getForm($view = null)	{		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		if (!$view)		{			$view = $app->input->getWord('view', 'site');		}		// Get the form.		JForm::addFormPath(JPATH_COMPONENT . '/model/forms');		JForm::addFieldPath(JPATH_COMPONENT . '/model/fields');		JForm::addRulePath(JPATH_COMPONENT . '/model/rules');		try		{			$form = JForm::getInstance('jform', $view, array('control' => 'jform'));		}		catch (Exception $e)		{			$app->enqueueMessage($e->getMessage(), 'error');			return false;		}		// Check the session for previously entered form data.		$data = (array) $this->getOptions();		// Bind the form data if present.		if (!empty($data))		{			$form->bind($data);		}		return $form;	}	/**	 * Method to check the form data	 *	 * @param   string  $page  The view being checked	 *	 * @return  array  Validated form data	 *	 * @since   3.1	 */	public function checkForm($page = 'site')	{		// Get the application object.		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the posted values from the request and validate them.		$data   = $app->input->post->get('jform', array(), 'array');		$return	= $this->validate($data, $page);		// Attempt to save the data before validation		$form = $this->getForm();		$data = $form->filter($data);		unset($data['admin_password2']);		$this->storeOptions($data);		// Check for validation errors.		if ($return === false)		{			// Redirect back to the previous page.			$r = new stdClass;			$r->view = $page;			$app->sendJsonResponse($r);		}		unset($return['admin_password2']);		// Store the options in the session.		$vars = $this->storeOptions($return);		return $vars;	}	/**	 * Generate a panel of language choices for the user to select their language	 *	 * @return  boolean True if successful	 *	 * @since	3.1	 */	public function getLanguages()	{		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Detect the native language.		$native = JLanguageHelper::detectLanguage();		if (empty($native))		{			$native = 'en-GB';		}		// Get a forced language if it exists.		$forced = $app->getLocalise();		if (!empty($forced['language']))		{			$native = $forced['language'];		}		// Get the list of available languages.		$list = JLanguageHelper::createLanguageList($native);		if (!$list || $list instanceof Exception)		{			$list = array();		}		return $list;	}	/**	 * Checks the availability of the parse_ini_file and parse_ini_string functions.	 *	 * @return	boolean  True if the method exists	 *	 * @since	3.1	 */	public function getIniParserAvailability()	{		$disabled_functions = ini_get('disable_functions');		if (!empty($disabled_functions))		{			// Attempt to detect them in the disable_functions black list			$disabled_functions = explode(',', trim($disabled_functions));			$number_of_disabled_functions = count($disabled_functions);			for ($i = 0; $i < $number_of_disabled_functions; $i++)			{				$disabled_functions[$i] = trim($disabled_functions[$i]);			}			$result = !in_array('parse_ini_string', $disabled_functions);		}		else		{			// Attempt to detect their existence; even pure PHP implementation of them will trigger a positive response, though.			$result = function_exists('parse_ini_string');		}		return $result;	}	/**	 * Gets PHP options.	 *	 * @return	array  Array of PHP config options	 *	 * @since   3.1	 */	public function getPhpOptions()	{		$options = array();		// Check the PHP Version.		$option = new stdClass;		$option->label  = JText::_('INSTL_PHP_VERSION') . ' >= 5.3.1';		$option->state  = version_compare(PHP_VERSION, '5.3.1', '>=');		$option->notice = null;		$options[] = $option;		// Check for magic quotes gpc.		$option = new stdClass;		$option->label  = JText::_('INSTL_MAGIC_QUOTES_GPC');		$option->state  = (ini_get('magic_quotes_gpc') == false);		$option->notice = null;		$options[] = $option;		// Check for register globals.		$option = new stdClass;		$option->label  = JText::_('INSTL_REGISTER_GLOBALS');		$option->state  = (ini_get('register_globals') == false);		$option->notice = null;		$options[] = $option;		// Check for zlib support.		$option = new stdClass;		$option->label  = JText::_('INSTL_ZLIB_COMPRESSION_SUPPORT');		$option->state  = extension_loaded('zlib');		$option->notice = null;		$options[] = $option;		// Check for XML support.		$option = new stdClass;		$option->label  = JText::_('INSTL_XML_SUPPORT');		$option->state  = extension_loaded('xml');		$option->notice = null;		$options[] = $option;		// Check for database support.		// We are satisfied if there is at least one database driver available.		$available = JDatabaseDriver::getConnectors();		$option = new stdClass;		$option->label  = JText::_('INSTL_DATABASE_SUPPORT');		$option->label .= '<br />(' . implode(', ', $available) . ')';		$option->state  = count($available);		$option->notice = null;		$options[] = $option;		// Check for mbstring options.		if (extension_loaded('mbstring'))		{			// Check for default MB language.			$option = new stdClass;			$option->label  = JText::_('INSTL_MB_LANGUAGE_IS_DEFAULT');			$option->state  = (strtolower(ini_get('mbstring.language')) == 'neutral');			$option->notice = ($option->state) ? null : JText::_('INSTL_NOTICEMBLANGNOTDEFAULT');			$options[] = $option;			// Check for MB function overload.			$option = new stdClass;			$option->label  = JText::_('INSTL_MB_STRING_OVERLOAD_OFF');			$option->state  = (ini_get('mbstring.func_overload') == 0);			$option->notice = ($option->state) ? null : JText::_('INSTL_NOTICEMBSTRINGOVERLOAD');			$options[] = $option;		}		// Check for a missing native parse_ini_file implementation		$option = new stdClass;		$option->label  = JText::_('INSTL_PARSE_INI_FILE_AVAILABLE');		$option->state  = $this->getIniParserAvailability();		$option->notice = null;		$options[] = $option;		// Check for missing native json_encode / json_decode support		$option = new stdClass;		$option->label  = JText::_('INSTL_JSON_SUPPORT_AVAILABLE');		$option->state  = function_exists('json_encode') && function_exists('json_decode');		$option->notice = null;		$options[] = $option;		// Check for configuration file writeable.		$option = new stdClass;		$option->label  = JText::sprintf('INSTL_WRITABLE', 'configuration.php');		$option->state  = (is_writable(JPATH_CONFIGURATION . '/configuration.php') || (!file_exists(JPATH_CONFIGURATION . '/configuration.php') && is_writable(JPATH_ROOT)));		$option->notice = ($option->state) ? null : JText::_('INSTL_NOTICEYOUCANSTILLINSTALL');		$options[] = $option;		return $options;	}	/**	 * Checks if all of the mandatory PHP options are met	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function getPhpOptionsSufficient()	{		$result  = true;		$options = $this->getPhpOptions();		foreach ($options as $option)		{			if (is_null($option->notice))			{				$result = ($result && $option->state);			}		}		return $result;	}	/**	 * Gets PHP Settings.	 *	 * @return  array	 *	 * @since   3.1	 */	public function getPhpSettings()	{		$settings = array();		// Check for safe mode.		$setting = new stdClass;		$setting->label = JText::_('INSTL_SAFE_MODE');		$setting->state = (bool) ini_get('safe_mode');		$setting->recommended = false;		$settings[] = $setting;		// Check for display errors.		$setting = new stdClass;		$setting->label = JText::_('INSTL_DISPLAY_ERRORS');		$setting->state = (bool) ini_get('display_errors');		$setting->recommended = false;		$settings[] = $setting;		// Check for file uploads.		$setting = new stdClass;		$setting->label = JText::_('INSTL_FILE_UPLOADS');		$setting->state = (bool) ini_get('file_uploads');		$setting->recommended = true;		$settings[] = $setting;		// Check for magic quotes runtimes.		$setting = new stdClass;		$setting->label = JText::_('INSTL_MAGIC_QUOTES_RUNTIME');		$setting->state = (bool) ini_get('magic_quotes_runtime');		$setting->recommended = false;		$settings[] = $setting;		// Check for output buffering.		$setting = new stdClass;		$setting->label = JText::_('INSTL_OUTPUT_BUFFERING');		$setting->state = (bool) ini_get('output_buffering');		$setting->recommended = false;		$settings[] = $setting;		// Check for session auto-start.		$setting = new stdClass;		$setting->label = JText::_('INSTL_SESSION_AUTO_START');		$setting->state = (bool) ini_get('session.auto_start');		$setting->recommended = false;		$settings[] = $setting;		// Check for native ZIP support		$setting = new stdClass;		$setting->label = JText::_('INSTL_ZIP_SUPPORT_AVAILABLE');		$setting->state = function_exists('zip_open') && function_exists('zip_read');		$setting->recommended = true;		$settings[] = $setting;		return $settings;	}	/**	 * Method to validate the form data.	 *	 * @param   array   $data  The form data.	 * @param   string  $view  The view.	 *	 * @return  mixed   Array of filtered data if valid, false otherwise.	 *	 * @since	3.1	 */	public function validate($data, $view = null)	{		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the form.		$form = $this->getForm($view);		// Check for an error.		if ($form === false)		{			return false;		}		// Filter and validate the form data.		$data   = $form->filter($data);		$return = $form->validate($data);		// Check for an error.		if ($return instanceof Exception)		{			$app->enqueueMessage($return->getMessage(), 'warning');			return false;		}		// Check the validation results.		if ($return === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $message)			{				if ($message instanceof Exception)				{					$app->enqueueMessage($message->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($message, 'warning');				}			}			return false;		}		return $data;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  User.profile * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('radio');/** * Provides input for TOS * * @package     Joomla.Plugin * @subpackage  User.profile * @since       2.5.5 */class JFormFieldTos extends JFormFieldRadio{	/**	 * The form field type.	 *	 * @var    string	 * @since  2.5.5	 */	protected $type = 'Tos';	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   2.5.5	 */	protected function getLabel()	{		$label = '';		if ($this->hidden)		{			return $label;		}		// Get the label text from the XML element, defaulting to the element name.		$text = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$text = $this->translateLabel ? JText::_($text) : $text;		// Set required to true as this field is not displayed at all if not required.		$this->required = true;		// Add CSS and JS for the TOS field		$doc = JFactory::getDocument();		$css = "#jform_profile_tos {width: 18em; margin: 0 !important; padding: 0 2px !important;}				#jform_profile_tos input {margin:0 5px 0 0 !important; width:10px !important;}				#jform_profile_tos label {margin:0 15px 0 0 !important; width:auto;}				";		$doc->addStyleDeclaration($css);		JHtml::_('behavior.modal');		// Build the class for the label.		$class = !empty($this->description) ? 'hasTip' : '';		$class = $class . ' required';		$class = !empty($this->labelClass) ? $class . ' ' . $this->labelClass : $class;		// Add the opening label tag and main attributes attributes.		$label .= '<label id="' . $this->id . '-lbl" for="' . $this->id . '" class="' . $class . '"';		// If a description is specified, use it to build a tooltip.		if (!empty($this->description))		{			$label .= ' title="'				. htmlspecialchars(				trim($text, ':') . '::' . ($this->translateDescription ? JText::_($this->description) : $this->description),				ENT_COMPAT, 'UTF-8'			) . '"';		}		$tosarticle = $this->element['article'] ? (int) $this->element['article'] : 1;		$link = '<a class="modal" title="" href="index.php?option=com_content&amp;view=article&amp;layout=modal&amp;id=' . $tosarticle . '&amp;tmpl=component" rel="{handler: \'iframe\', size: {x:800, y:500}}">' . $text . '</a>';		// Add the label text and closing tag.		$label .= '>' . $link . '<span class="star">&#160;*</span></label>';		return $label;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleRules extends JFormRule{	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Get the possible field actions and the ones posted to validate them.		$fieldActions = self::getFieldActions($element);		$valueActions = self::getValueActions($value);		// Make sure that all posted actions are in the list of possible actions for the field.		foreach ($valueActions as $action)		{			if (!in_array($action, $fieldActions))			{				return false;			}		}		return true;	}	/**	 * Method to get the list of permission action names from the form field value.	 *	 * @param   mixed  $value  The form field value to validate.	 *	 * @return  array  A list of permission action names from the form field value.	 *	 * @since   11.1	 */	protected function getValueActions($value)	{		$actions = array();		// Iterate over the asset actions and add to the actions.		foreach ((array) $value as $name => $rules)		{			$actions[] = $name;		}		return $actions;	}	/**	 * Method to get the list of possible permission action names for the form field.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the	 *                                      form field object.	 *	 * @return  array   A list of permission action names from the form field element definition.	 *	 * @since   11.1	 */	protected function getFieldActions(SimpleXMLElement $element)	{		$actions = array();		// Initialise some field attributes.		$section = $element['section'] ? (string) $element['section'] : '';		$component = $element['component'] ? (string) $element['component'] : '';		// Get the asset actions for the element.		$elActions = JAccess::getActions($component, $section);		// Iterate over the asset actions and add to the actions.		foreach ($elActions as $item)		{			$actions[] = $item->name;		}		// Iterate over the children and add to the actions.		foreach ($element->children() as $el)		{			if ($el->getName() == 'action')			{				$actions[] = (string) $el['name'];			}		}		return $actions;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(pressbutton)	{		var form = document.getElementById('mailtoForm');		// do field validation		if (form.mailto.value == "" || form.from.value == "")		{			alert('<?php echo JText::_('COM_MAILTO_EMAIL_ERR_NOINFO'); ?>');			return false;		}		form.submit();	}</script><?php$data	= $this->get('data');?><div id="mailto-window">	<h2>		<?php echo JText::_('COM_MAILTO_EMAIL_TO_A_FRIEND'); ?>	</h2>	<div class="mailto-close">		<a href="javascript: void window.close()" title="<?php echo JText::_('COM_MAILTO_CLOSE_WINDOW'); ?>">		 <span><?php echo JText::_('COM_MAILTO_CLOSE_WINDOW'); ?> </span></a>	</div>	<form action="<?php echo JURI::base() ?>index.php" id="mailtoForm" method="post">		<div class="formelm">			<label for="mailto_field"><?php echo JText::_('COM_MAILTO_EMAIL_TO'); ?></label>			<input type="text" id="mailto_field" name="mailto" class="inputbox" size="25" value="<?php echo $this->escape($data->mailto); ?>"/>		</div>		<div class="formelm">			<label for="sender_field">			<?php echo JText::_('COM_MAILTO_SENDER'); ?></label>			<input type="text" id="sender_field" name="sender" class="inputbox" value="<?php echo $this->escape($data->sender); ?>" size="25" />		</div>		<div class="formelm">			<label for="from_field">			<?php echo JText::_('COM_MAILTO_YOUR_EMAIL'); ?></label>			<input type="text" id="from_field" name="from" class="inputbox" value="<?php echo $this->escape($data->from); ?>" size="25" />		</div>		<div class="formelm">			<label for="subject_field">			<?php echo JText::_('COM_MAILTO_SUBJECT'); ?></label>			<input type="text" id="subject_field" name="subject" class="inputbox" value="<?php echo $this->escape($data->subject); ?>" size="25" />		</div>		<p>			<button class="button" onclick="return Joomla.submitbutton('send');">				<?php echo JText::_('COM_MAILTO_SEND'); ?>			</button>			<button class="button" onclick="window.close();return false;">				<?php echo JText::_('COM_MAILTO_CANCEL'); ?>			</button>		</p>		<input type="hidden" name="layout" value="<?php echo $this->getLayout();?>" />		<input type="hidden" name="option" value="com_mailto" />		<input type="hidden" name="task" value="send" />		<input type="hidden" name="tmpl" value="component" />		<input type="hidden" name="link" value="<?php echo $data->link; ?>" />		<?php echo JHtml::_('form.token'); ?>	</form></div>
<?php/** * Parses and verifies the doc comments for files. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FileCommentSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_CommentParser_ClassCommentParser', true) === false) {    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_CommentParser_ClassCommentParser not found');}/** * Parses and verifies the doc comments for files. * * Verifies that : * <ul> *  <li>A doc comment exists.</li> *  <li>There is a blank newline after the short description.</li> *  <li>There is a blank newline between the long and short description.</li> *  <li>There is a blank newline between the long description and tags.</li> *  <li>A PHP version is specified.</li> *  <li>Check the order of the tags.</li> *  <li>Check the indentation of each tag.</li> *  <li>Check required and optional tags and the format of their content.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff{    /**     * The header comment parser for the current file.     *     * @var PHP_CodeSniffer_Comment_Parser_ClassCommentParser     */    protected $commentParser = null;    /**     * The current PHP_CodeSniffer_File object we are processing.     *     * @var PHP_CodeSniffer_File     */    protected $currentFile = null;    /**     * Tags in correct order and related info.     *     * @var array     */    protected $tags = array(                       'version'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must be first',                                       ),                       'category'   => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'precedes @package',                                       ),                       'package'    => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follows @category (if used)',                                       ),                       'subpackage' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @package',                                       ),                       'author'     => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @subpackage (if used) or @package',                                       ),                       'copyright'  => array(                                        'required'       => true,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @author (if used), @subpackage (if used) or @package',                                       ),                       'license'    => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @copyright',                                       ),                       'link'       => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @license',                                       ),                       'see'        => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @link (if used) or @license',                                       ),                       'since'      => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follows @see (if used), @link (if used) or @license',                                       ),                       'deprecated' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @since (if used), @see (if used), @link (if used) or @license',                                       ),                );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_OPEN_TAG);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $this->currentFile = $phpcsFile;        // We are only interested if this is the first open tag.        if ($stackPtr !== 0) {            if ($phpcsFile->findPrevious(T_OPEN_TAG, ($stackPtr - 1)) !== false) {                return;            }        }        $tokens = $phpcsFile->getTokens();        // Find the next non whitespace token.        $commentStart            = $phpcsFile->findNext(T_WHITESPACE, ($stackPtr + 1), null, true);        // Allow declare() statements at the top of the file.        if ($tokens[$commentStart]['code'] === T_DECLARE) {            $semicolon = $phpcsFile->findNext(T_SEMICOLON, ($commentStart + 1));            $commentStart                = $phpcsFile->findNext(T_WHITESPACE, ($semicolon + 1), null, true);        }        // Ignore vim header.        if ($tokens[$commentStart]['code'] === T_COMMENT) {            if (strstr($tokens[$commentStart]['content'], 'vim:') !== false) {                $commentStart = $phpcsFile->findNext(                    T_WHITESPACE,                    ($commentStart + 1),                    null,                    true                );            }        }        $errorToken = ($stackPtr + 1);        if (isset($tokens[$errorToken]) === false) {            $errorToken--;        }        if ($tokens[$commentStart]['code'] === T_CLOSE_TAG) {            // We are only interested if this is the first open tag.            return;        } else if ($tokens[$commentStart]['code'] === T_COMMENT) {            $error = 'You must use "/**" style comments for a file comment';            $phpcsFile->addError($error, $errorToken, 'WrongStyle');            return;        } else if ($commentStart === false            || $tokens[$commentStart]['code'] !== T_DOC_COMMENT        ) {            $phpcsFile->addError('Missing file doc comment', $errorToken, 'Missing');            return;        } else {            // Extract the header comment docblock.            $commentEnd = $phpcsFile->findNext(                T_DOC_COMMENT,                ($commentStart + 1),                null,                true            );            $commentEnd--;            // Check if there is only 1 doc comment between the            // open tag and class token.            $nextToken   = array(                            T_ABSTRACT,                            T_CLASS,                            T_FUNCTION,                            T_DOC_COMMENT,                           );            $commentNext = $phpcsFile->findNext($nextToken, ($commentEnd + 1));            if ($commentNext !== false                && $tokens[$commentNext]['code'] !== T_DOC_COMMENT            ) {                // Found a class token right after comment doc block.                $newlineToken = $phpcsFile->findNext(                    T_WHITESPACE,                    ($commentEnd + 1),                    $commentNext,                    false,                    $phpcsFile->eolChar                );                if ($newlineToken !== false) {                    $newlineToken = $phpcsFile->findNext(                        T_WHITESPACE,                        ($newlineToken + 1),                        $commentNext,                        false,                        $phpcsFile->eolChar                    );                    if ($newlineToken === false) {                        // No blank line between the class token and the doc block.                        // The doc block is most likely a class comment.                        $error = 'Missing file doc comment';                        $phpcsFile->addError($error, $errorToken, 'Missing');                        return;                    }                }            }//end if            $comment = $phpcsFile->getTokensAsString(                $commentStart,                ($commentEnd - $commentStart + 1)            );            // Parse the header comment docblock.            try {                $this->commentParser = new PHP_CodeSniffer_CommentParser_ClassCommentParser($comment, $phpcsFile);                $this->commentParser->parse();            } catch (PHP_CodeSniffer_CommentParser_ParserException $e) {                $line = ($e->getLineWithinComment() + $commentStart);                $phpcsFile->addError($e->getMessage(), $line, 'FailedParse');                return;            }            $comment = $this->commentParser->getComment();            if (is_null($comment) === true) {                $error = 'File doc comment is empty';                $phpcsFile->addError($error, $commentStart, 'Empty');                return;            }            // No extra newline before short description.            $short        = $comment->getShortComment();            $newlineCount = 0;            $newlineSpan  = strspn($short, $phpcsFile->eolChar);            if ($short !== '' && $newlineSpan > 0) {                $error = 'Extra newline(s) found before file comment short description';                $phpcsFile->addError($error, ($commentStart + 1), 'SpacingBefore');            }            $newlineCount = (substr_count($short, $phpcsFile->eolChar) + 1);            // Exactly one blank line between short and long description.            $long = $comment->getLongComment();            if (empty($long) === false) {                $between        = $comment->getWhiteSpaceBetween();                $newlineBetween = substr_count($between, $phpcsFile->eolChar);                if ($newlineBetween !== 2) {                    $error = 'There must be exactly one blank line between descriptions in file comment';                    $phpcsFile->addError($error, ($commentStart + $newlineCount + 1), 'DescriptionSpacing');                }                $newlineCount += $newlineBetween;            }            // Exactly one blank line before tags if short description is present.            $tags = $this->commentParser->getTagOrders();            if (count($tags) > 1 && $short !== '' && $newlineSpan > 0) {                $newlineSpan = $comment->getNewlineAfter();                if ($newlineSpan !== 2) {                    $error = 'There must be exactly one blank line before the tags in file comment';                    if ($long !== '') {                        $newlineCount += (substr_count($long, $phpcsFile->eolChar) - $newlineSpan + 1);                    }                    $phpcsFile->addError($error, ($commentStart + $newlineCount), 'SpacingBeforeTags');                    $short = rtrim($short, $phpcsFile->eolChar.' ');                }            }//            // Check the PHP Version.//            $this->processPHPVersion($commentStart, $commentEnd, $long);            // Check each tag.            $this->processTags($commentStart, $commentEnd);        }//end if    }//end process()//    /**//     * Check that the PHP version is specified.//     *//     * @param int    $commentStart Position in the stack where the comment started.//     * @param int    $commentEnd   Position in the stack where the comment ended.//     * @param string $commentText  The text of the function comment.//     *//     * @return void//     *///    protected function processPHPVersion($commentStart, $commentEnd, $commentText)//    {//        if (strstr(strtolower($commentText), 'php version') === false) {//            $error = 'PHP version not specified';//             $this->currentFile->addWarning($error, $commentEnd, 'MissingVersion');//        }////    }//end processPHPVersion()    /**     * Processes each required or optional tag.     *     * @param int $commentStart Position in the stack where the comment started.     * @param int $commentEnd   Position in the stack where the comment ended.     *     * @return void     */    protected function processTags($commentStart, $commentEnd)    {        $docBlock    = (get_class($this) === 'Joomla_Sniffs_Commenting_FileCommentSniff') ? 'file' : 'class';        $foundTags   = $this->commentParser->getTagOrders();        $orderIndex  = 0;        $indentation = array();        $longestTag  = 0;        $errorPos    = 0;        foreach ($this->tags as $tag => $info) {            // Required tag missing.            if ($info['required'] === true && in_array($tag, $foundTags) === false) {                $error = 'Missing @%s tag in %s comment';                $data  = array(                              $tag,                              $docBlock,                             );                $this->currentFile->addError($error, $commentEnd, 'MissingTag', $data);                continue;            }             // Get the line number for current tag.            $tagName = ucfirst($tag);            if ($info['allow_multiple'] === true) {                $tagName .= 's';            }            $getMethod  = 'get'.$tagName;            $tagElement = $this->commentParser->$getMethod();            if (is_null($tagElement) === true || empty($tagElement) === true) {                continue;            }            $errorPos = $commentStart;            if (is_array($tagElement) === false) {                $errorPos = ($commentStart + $tagElement->getLine());            }            // Get the tag order.            $foundIndexes = array_keys($foundTags, $tag);            if (count($foundIndexes) > 1) {                // Multiple occurance not allowed.                if ($info['allow_multiple'] === false) {                    $error = 'Only 1 @%s tag is allowed in a %s comment';                    $data  = array(                              $tag,                              $docBlock,                             );                    $this->currentFile->addError($error, $errorPos, 'DuplicateTag', $data);                } else {                    // Make sure same tags are grouped together.                    $i     = 0;                    $count = $foundIndexes[0];                    foreach ($foundIndexes as $index) {                        if ($index !== $count) {                            $errorPosIndex                                = ($errorPos + $tagElement[$i]->getLine());                            $error = '@%s tags must be grouped together';                            $data  = array($tag);                            $this->currentFile->addError($error, $errorPosIndex, 'TagsNotGrouped', $data);                        }                        $i++;                        $count++;                    }                }            }//end if            // Check tag order.            if ($foundIndexes[0] > $orderIndex) {                $orderIndex = $foundIndexes[0];            } else {                if (is_array($tagElement) === true && empty($tagElement) === false) {                    $errorPos += $tagElement[0]->getLine();                }                $error = 'The @%s tag is in the wrong order; the tag %s';                $data  = array(                          $tag,                          $info['order_text'],                         );                $this->currentFile->addError($error, $errorPos, 'WrongTagOrder', $data);            }            // Store the indentation for checking.            $len = strlen($tag);            if ($len > $longestTag) {                $longestTag = $len;            }            if (is_array($tagElement) === true) {                foreach ($tagElement as $key => $element) {                    $indentation[] = array(                                      'tag'   => $tag,                                      'space' => $this->getIndentation($tag, $element),                                      'line'  => $element->getLine(),                                     );                }            } else {                $indentation[] = array(                                  'tag'   => $tag,                                  'space' => $this->getIndentation($tag, $tagElement),                                 );            }            $method = 'process'.$tagName;            if (method_exists($this, $method) === true) {                // Process each tag if a method is defined.                call_user_func(array($this, $method), $errorPos);            } else {                if (is_array($tagElement) === true) {                    foreach ($tagElement as $key => $element) {                        $element->process(                            $this->currentFile,                            $commentStart,                            $docBlock                        );                    }                } else {                     $tagElement->process(                         $this->currentFile,                         $commentStart,                         $docBlock                     );                }            }        }//end foreach        foreach ($indentation as $indentInfo) {            if ($indentInfo['space'] !== 0            // Joomla change: allow for 2 space gap.                && $indentInfo['space'] !== ($longestTag + 2)            ) {                $expected = (($longestTag - strlen($indentInfo['tag'])) + 2);                $space    = ($indentInfo['space'] - strlen($indentInfo['tag']));                $error    = '@%s tag comment indented incorrectly; expected %s spaces but found %s';                $data     = array(                             $indentInfo['tag'],                             $expected,                             $space,                            );                $getTagMethod = 'get'.ucfirst($indentInfo['tag']);                if ($this->tags[$indentInfo['tag']]['allow_multiple'] === true) {                    $line = $indentInfo['line'];                } else {                    $tagElem = $this->commentParser->$getTagMethod();                    $line    = $tagElem->getLine();                }                $this->currentFile->addError($error, ($commentStart + $line), 'TagIndent', $data);            }        }    }//end processTags()    /**     * Get the indentation information of each tag.     *     * @param string                                   $tagName    The name of the     *                                                             doc comment     *                                                             element.     * @param PHP_CodeSniffer_CommentParser_DocElement $tagElement The doc comment     *                                                             element.     *     * @return void     */    protected function getIndentation($tagName, $tagElement)    {        if ($tagElement instanceof PHP_CodeSniffer_CommentParser_SingleElement) {            if ($tagElement->getContent() !== '') {                return (strlen($tagName) + substr_count($tagElement->getWhitespaceBeforeContent(), ' '));            }        } else if ($tagElement instanceof PHP_CodeSniffer_CommentParser_PairElement) {            if ($tagElement->getValue() !== '') {                return (strlen($tagName) + substr_count($tagElement->getWhitespaceBeforeValue(), ' '));            }        }        return 0;    }//end getIndentation()    /**     * Process the category tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processCategory($errorPos)    {        $category = $this->commentParser->getCategory();        if ($category !== null) {            $content = $category->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {//                    $newContent = str_replace(' ', '_', $content);//                    $nameBits   = explode('_', $newContent);//                    $firstBit   = array_shift($nameBits);//                    $newName    = ucfirst($firstBit).'_';//                    foreach ($nameBits as $bit) {//                        $newName .= ucfirst($bit).'_';//                    }////                    $error     = 'Category name "%s" is not valid; consider "%s" instead';//                    $validName = trim($newName, '_');//                    $data      = array(//                                  $content,//                                  $validName,//                                 );//                    $this->currentFile->addError($error, $errorPos, 'InvalidCategory', $data);                }            } else {                $error = '@category tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptyCategory');            }        }    }//end processCategory()    /**     * Process the package tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processPackage($errorPos)    {        $package = $this->commentParser->getPackage();        if ($package !== null) {            $content = $package->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {                    $newContent = str_replace(' ', '_', $content);                    $nameBits   = explode('_', $newContent);                    $firstBit   = array_shift($nameBits);                    $newName    = strtoupper($firstBit{0}).substr($firstBit, 1).'_';                    foreach ($nameBits as $bit) {                        $newName .= strtoupper($bit{0}).substr($bit, 1).'_';                    }                    $error     = 'Package name "%s" is not valid; consider "%s" instead';                    $validName = trim($newName, '_');                    $data      = array(                                  $content,                                  $validName,                                 );                    $this->currentFile->addError($error, $errorPos, 'InvalidPackage', $data);                }            } else {                $error = '@package tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptyPackage');            }        }    }//end processPackage()    /**     * Process the subpackage tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processSubpackage($errorPos)    {        $package = $this->commentParser->getSubpackage();        if ($package !== null) {            $content = $package->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {//                    $newContent = str_replace(' ', '_', $content);//                    $nameBits   = explode('_', $newContent);//                    $firstBit   = array_shift($nameBits);//                    $newName    = strtoupper($firstBit{0}).substr($firstBit, 1).'_';//                    foreach ($nameBits as $bit) {//                        $newName .= strtoupper($bit{0}).substr($bit, 1).'_';//                    }////                    $error     = 'Subpackage name "%s" is not valid; consider "%s" instead';//                    $validName = trim($newName, '_');//                    $data      = array(//                                  $content,//                                  $validName,//                                 );//                    $this->currentFile->addError($error, $errorPos, 'InvalidSubpackage', $data);                }            } else {                $error = '@subpackage tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptySubpackage');            }        }    }//end processSubpackage()    /**     * Process the author tag(s) that this header comment has.     *     * This function is different from other _process functions     * as $authors is an array of SingleElements, so we work out     * the errorPos for each element separately     *     * @param int $commentStart The position in the stack where     *                          the comment started.     *     * @return void     */    protected function processAuthors($commentStart)    {         $authors = $this->commentParser->getAuthors();        // Report missing return.        if (empty($authors) === false) {            foreach ($authors as $author) {                $errorPos = ($commentStart + $author->getLine());                $content  = $author->getContent();                if ($content !== '') {                    $local = '\da-zA-Z-_+';                    // Dot character cannot be the first or last character                    // in the local-part.                    $localMiddle = $local.'.\w';                    if (preg_match('/^([^<]*)\s+<(['.$local.']['.$localMiddle.']*['.$local.']@[\da-zA-Z][-.\w]*[\da-zA-Z]\.[a-zA-Z]{2,7})>$/', $content) === 0) {                        $error = 'Content of the @author tag must be in the form "Display Name <username@example.com>"';                        $this->currentFile->addError($error, $errorPos, 'InvalidAuthors');                    }                } else {                    $error    = 'Content missing for @author tag in %s comment';                    $docBlock = (get_class($this) === 'PEAR_Sniffs_Commenting_FileCommentSniff') ? 'file' : 'class';                    $data     = array($docBlock);                    $this->currentFile->addError($error, $errorPos, 'EmptyAuthors', $data);                }            }        }    }//end processAuthors()    /**     * Process the copyright tags.     *     * @param int $commentStart The position in the stack where     *                          the comment started.     *     * @return void     */    protected function processCopyrights($commentStart)    {        $copyrights = $this->commentParser->getCopyrights();        foreach ($copyrights as $copyright) {            $errorPos = ($commentStart + $copyright->getLine());            $content  = $copyright->getContent();            if ($content !== '') {                $matches = array();                if (preg_match('/^.*?([0-9]{4})((.{1})([0-9]{4}))? (.+)$/', $content, $matches) !== 0) {                    // Check earliest-latest year order.                    if ($matches[3] !== '') {                        if ($matches[3] !== '-') {                            $error = 'A hyphen must be used between the earliest and latest year';                            $this->currentFile->addError($error, $errorPos, 'CopyrightHyphen');                        }                        if ($matches[4] !== '' && $matches[4] < $matches[1]) {                            $error = "Invalid year span \"$matches[1]$matches[3]$matches[4]\" found; consider \"$matches[4]-$matches[1]\" instead";                            $this->currentFile->addWarning($error, $errorPos, 'InvalidCopyright');                        }                    }                } else {                    $error = '@copyright tag must contain a year and the name of the copyright holder';                    $this->currentFile->addError($error, $errorPos, 'EmptyCopyright');                }            } else {                $error = '@copyright tag must contain a year and the name of the copyright holder';                $this->currentFile->addError($error, $errorPos, 'EmptyCopyright');            }//end if        }//end if    }//end processCopyrights()    /**     * Process the license tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processLicense($errorPos)    {        $license = $this->commentParser->getLicense();        if ($license !== null) {            $value   = $license->getValue();            $comment = $license->getComment();            if ($value === '' || $comment === '') {                $error = '@license tag must contain a URL and a license name';                $this->currentFile->addError($error, $errorPos, 'EmptyLicense');            }        }    }//end processLicense()    /**     * Process the version tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processVersion($errorPos)    {        $version = $this->commentParser->getVersion();        if ($version !== null) {            $content = $version->getContent();            $matches = array();            if (empty($content) === true) {                $error = 'Content missing for @version tag in file comment';                $this->currentFile->addError($error, $errorPos, 'EmptyVersion');            } else if (strstr($content, 'CVS:') === false                && strstr($content, 'SVN:') === false                && strstr($content, 'Id:') === false            ) {                $error = 'Invalid version "%s" in file comment; consider "CVS: <cvs_id>" or "SVN: <svn_id>" instead';                $data  = array($content);                $this->currentFile->addWarning($error, $errorPos, 'InvalidVersion', $data);            }        }    }//end processVersion()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Displays a list of the installed languages. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesViewInstalled extends JViewLegacy{	/**	 * @var object client object	 */	protected $client = null;	/**	 * @var boolean|JExeption True, if FTP settings should be shown, or an exeption	 */	protected $ftp = null;	/**	 * @var string option name	 */	protected $option = null;	/**	 * @var object pagination information	 */	protected $pagination = null;	/**	 * @var array languages information	 */	protected $rows = null;	/**	 * @var object user object	 */	protected $user = null;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->ftp        = $this->get('Ftp');		$this->option     = $this->get('Option');		$this->pagination = $this->get('Pagination');		$this->rows       = $this->get('Data');		$this->state      = $this->get('State');		$client = (int) $this->state->get('filter.client_id', 0);		LanguagesHelper::addSubmenu('installed', $client);		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_INSTALLED_TITLE'), 'langmanager.png');		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::makeDefault('installed.setDefault');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			// Add install languages link to the lang installer component			$bar = JToolbar::getInstance('toolbar');			$bar->appendButton('Link', 'upload', 'COM_LANGUAGES_INSTALL', 'index.php?option=com_installer&view=languages');			JToolbarHelper::divider();			JToolbarHelper::preferences('com_languages');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_INSTALLED');		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_FTP_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('ftp') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * Ensures that new classes are instantiated without brackets if they do not * have any parameters. * * @category  Classes * @package   Joomla.CodeSniffer * @author    Nikolai Plath * @license   GNU General Public License version 2 or later *//** * Ensures that new classes are instantiated without brackets if they do not * have any parameters. * * @category  Classes * @package   Joomla.CodeSniffer */class Joomla_Sniffs_Classes_InstantiateNewClassesSniff implements PHP_CodeSniffer_Sniff{    /**     * Registers the token types that this sniff wishes to listen to.     *     * @return array     */    public function register()    {        return array(T_NEW);    }//end register()    /**     * Process the tokens that this sniff is listening for.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where the token was found.     * @param int                  $stackPtr  The position in the stack where     *                                        the token was found.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $running = true;        $valid = false;        $started = false;        $cnt = $stackPtr + 1;        do        {            if( ! isset($tokens[$cnt]))            {                $running = false;            }            else            {                switch ($tokens[$cnt]['code'])                {                    case T_SEMICOLON:                    case T_COMMA :                        $valid = true;                        $running = false;                        break;                    case T_OPEN_PARENTHESIS :                        $started = true;                        break;                    case T_VARIABLE :                    case T_STRING :                    case T_LNUMBER :                    case T_CONSTANT_ENCAPSED_STRING :                    case T_DOUBLE_QUOTED_STRING :                        if($started)                        {                            $valid = true;                            $running = false;                        }                        break;                    case T_CLOSE_PARENTHESIS :                        if( ! $started)                        {                            $valid = true;                        }                         $running = false;                        break;                    case T_WHITESPACE :                        break;                }//switch                $cnt ++;            }        }        while ($running == true);        if( ! $valid)        {            $error = 'Instanciating new classes without parameters does not require brackets.';            $phpcsFile->addError($error, $stackPtr, 'New class');        }    }//function}//class
<?php/** * @package     Joomla.Site * @subpackage  Template.Beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;function renderMessage($msgList){	$buffer  = null;	$buffer .= "\n<div id=\"system-message-container\">";	if (is_array($msgList))	{		$buffer .= "\n<dl id=\"system-message\">";		foreach ($msgList as $type => $msgs)		{			if (count($msgs))			{				$buffer .= "\n<dt class=\"" . strtolower($type) . "\">" . JText::_($type) . "</dt>";				$buffer .= "\n<dd class=\"" . strtolower($type) . " message\">";				$buffer .= "\n\t<ul>";				foreach ($msgs as $msg)				{					$buffer .= "\n\t\t<li>" . $msg . "</li>";				}				$buffer .= "\n\t</ul>";				$buffer .= "\n</dd>";			}			$buffer .= "\n</dl>";		}		$buffer .= "\n</div>";		return $buffer;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Data * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JData is a class that is used to store data but allowing you to access the data * by mimicking the way PHP handles class properties. * * @package     Joomla.Platform * @subpackage  Data * @since       12.3 */class JData implements JDataDumpable, IteratorAggregate, JsonSerializable, Countable{	/**	 * The data properties.	 *	 * @var    array	 * @since  12.3	 */	private $_properties = array();	/**	 * The class constructor.	 *	 * @param   mixed  $properties  Either an associative array or another object	 *                              by which to set the initial properties of the new object.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public function __construct($properties = array())	{		// Check the properties input.		if (!empty($properties))		{			// Bind the properties.			$this->bind($properties);		}	}	/**	 * The magic get method is used to get a data property.	 *	 * This method is a public proxy for the protected getProperty method.	 *	 * Note: Magic __get does not allow recursive calls. This can be tricky because the error generated by recursing into	 * __get is "Undefined property:  {CLASS}::{PROPERTY}" which is misleading. This is relevant for this class because	 * requesting a non-visible property can trigger a call to a sub-function. If that references the property directly in	 * the object, it will cause a recursion into __get.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  mixed  The value of the data property, or null if the data property does not exist.	 *	 * @see     JData::getProperty()	 * @since   12.3	 */	public function __get($property)	{		return $this->getProperty($property);	}	/**	 * The magic isset method is used to check the state of an object property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  boolean  True if set, otherwise false is returned.	 *	 * @since   12.3	 */	public function __isset($property)	{		return isset($this->_properties[$property]);	}	/**	 * The magic set method is used to set a data property.	 *	 * This is a public proxy for the protected setProperty method.	 *	 * @param   string  $property  The name of the data property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  void	 *	 * @see     JData::setProperty()	 * @since   12.3	 */	public function __set($property, $value)	{		$this->setProperty($property, $value);	}	/**	 * The magic unset method is used to unset a data property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __unset($property)	{		unset($this->_properties[$property]);	}	/**	 * Binds an array or object to this object.	 *	 * @param   mixed    $properties   An associative array of properties or an object.	 * @param   boolean  $updateNulls  True to bind null values, false to ignore null values.	 *	 * @return  JData  Returns itself to allow chaining.	 *	 * @since   12.3	 * @throws  InvalidArgumentException	 */	public function bind($properties, $updateNulls = true)	{		// Check the properties data type.		if (!is_array($properties) && !is_object($properties))		{			throw new InvalidArgumentException(sprintf('%s(%s)', __METHOD__, gettype($properties)));		}		// Check if the object is traversable.		if ($properties instanceof Traversable)		{			// Convert iterator to array.			$properties = iterator_to_array($properties);		}		// Check if the object needs to be converted to an array.		elseif (is_object($properties))		{			// Convert properties to an array.			$properties = (array) $properties;		}		// Bind the properties.		foreach ($properties as $property => $value)		{			// Check if the value is null and should be bound.			if ($value === null && !$updateNulls)			{				continue;			}			// Set the property.			$this->setProperty($property, $value);		}		return $this;	}	/**	 * Dumps the data properties into a stdClass object, recursively if appropriate.	 *	 * @param   integer           $depth   The maximum depth of recursion (default = 3).	 *                                     For example, a depth of 0 will return a stdClass with all the properties in native	 *                                     form. A depth of 1 will recurse into the first level of properties only.	 * @param   SplObjectStorage  $dumped  An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  stdClass  The data properties as a simple PHP stdClass object.	 *	 * @since   12.3	 */	public function dump($depth = 3, SplObjectStorage $dumped = null)	{		// Check if we should initialise the recursion tracker.		if ($dumped === null)		{			$dumped = new SplObjectStorage;		}		// Add this object to the dumped stack.		$dumped->attach($this);		// Setup a container.		$dump = new stdClass;		// Dump all object properties.		foreach (array_keys($this->_properties) as $property)		{			// Get the property.			$dump->$property = $this->dumpProperty($property, $depth, $dumped);		}		return $dump;	}	/**	 * Gets this object represented as an ArrayIterator.	 *	 * This allows the data properties to be access via a foreach statement.	 *	 * @return  ArrayIterator  This object represented as an ArrayIterator.	 *	 * @see     IteratorAggregate::getIterator()	 * @since   12.3	 */	public function getIterator()	{		return new ArrayIterator($this->dump(0));	}	/**	 * Gets the data properties in a form that can be serialised to JSON format.	 *	 * @return  string  An object that can be serialised by json_encode().	 *	 * @since   12.3	 */	public function jsonSerialize()	{		return $this->dump();	}	/**	 * Dumps a data property.	 *	 * If recursion is set, this method will dump any object implementing JDumpable (like JData and JDataSet); it will	 * convert a JDate object to a string; and it will convert a JRegistry to an object.	 *	 * @param   string            $property  The name of the data property.	 * @param   integer           $depth     The current depth of recursion (a value of 0 will ignore recursion).	 * @param   SplObjectStorage  $dumped    An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  mixed  The value of the dumped property.	 *	 * @since   12.3	 */	protected function dumpProperty($property, $depth, SplObjectStorage $dumped)	{		$value = $this->getProperty($property);		if ($depth > 0)		{			// Check if the object is also an dumpable object.			if ($value instanceof JDataDumpable)			{				// Do not dump the property if it has already been dumped.				if (!$dumped->contains($value))				{					$value = $value->dump($depth - 1, $dumped);				}			}			// Check if the object is a date.			if ($value instanceof JDate)			{				$value = (string) $value;			}			// Check if the object is a registry.			elseif ($value instanceof JRegistry)			{				$value = $value->toObject();			}		}		return $value;	}	/**	 * Gets a data property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  mixed  The value of the data property.	 *	 * @see     JData::__get()	 * @since   12.3	 */	protected function getProperty($property)	{		// Get the raw value.		$value = array_key_exists($property, $this->_properties) ? $this->_properties[$property] : null;		return $value;	}	/**	 * Sets a data property.	 *	 * If the name of the property starts with a null byte, this method will return null.	 *	 * @param   string  $property  The name of the data property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  mixed  The value of the data property.	 *	 * @see     JData::__set()	 * @since   12.3	 */	protected function setProperty($property, $value)	{		/*		 * Check if the property starts with a null byte. If so, discard it because a later attempt to try to access it		 * can cause a fatal error. See http://us3.php.net/manual/en/language.types.array.php#language.types.array.casting		 */		if (strpos($property, "\0") === 0)		{			return null;		}		// Set the value.		$this->_properties[$property] = $value;		return $value;	}	/**	 * Count the number of data properties.	 *	 * @return  integer  The number of data properties.	 *	 * @since   12.3	 */	public function count()	{		return count($this->_properties);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$version = new JVersion;?><div id="installer-languages">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=languages');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<?php if (count($this->items) || $this->escape($this->state->get('filter.search'))) : ?>			<?php echo $this->loadTemplate('filter'); ?>			<table class="adminlist">				<thead>					<tr>						<th width="20" class="nowrap hidden-phone">							<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />						</th>						<th class="nowrap">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>						</th>						<th width="10%" class="center">							<?php echo JText::_('JVERSION'); ?>						</th>						<th class="center nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_TYPE'); ?>						</th>						<th width="35%" class="nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_DETAILS_URL'); ?>						</th>						<th width="30" class="nowrap hidden-phone">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'update_id', $listDirn, $listOrder); ?>						</th>					</tr>				</thead>				<tbody>					<?php foreach ($this->items as $i => $language) : ?>					<tr class="row<?php echo $i % 2; ?>">						<td class="hidden-phone">							<?php echo JHtml::_('grid.id', $i, $language->update_id, false, 'cid'); ?>						</td>						<td>							<?php echo $language->name; ?>							<?php // Display a Note if language pack version is not equal to Joomla version ?>							<?php if (substr($language->version, 0, 3) != $version->RELEASE									|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>								<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>							<?php endif; ?>						</td>						<td class="center">							<?php echo $language->version; ?>						</td>						<td class="center">							<?php echo JText::_('COM_INSTALLER_TYPE_' . strtoupper($language->type)); ?>						</td>						<td>							<?php echo $language->detailsurl; ?>						</td>						<td class="center">							<?php echo $language->update_id; ?>						</td>					</tr>					<?php endforeach; ?>				</tbody>			</table>			<?php echo $this->pagination->getListFooter(); ?>		<?php else : ?>			<div class="alert"><?php echo JText::_('COM_INSTALLER_MSG_LANGUAGES_NOLANGUAGES'); ?></div>		<?php endif; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Plugin * @subpackage  Captcha * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Recaptcha Plugin. * Based on the oficial recaptcha library( http://recaptcha.net/plugins/php/ ) * * @package     Joomla.Plugin * @subpackage  Captcha * @since       2.5 */class PlgCaptchaRecaptcha extends JPlugin{	const RECAPTCHA_API_SERVER = "http://api.recaptcha.net";	const RECAPTCHA_API_SECURE_SERVER = "https://www.google.com/recaptcha/api";	const RECAPTCHA_VERIFY_SERVER = "api-verify.recaptcha.net";	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Initialise the captcha	 *	 * @param   string	$id	The id of the field.	 *	 * @return  Boolean	True on success, false otherwise	 *	 * @since  2.5	 */	public function onInit($id)	{		$document = JFactory::getDocument();		$app      = JFactory::getApplication();		$lang   = $this->_getLanguage();		$pubkey = $this->params->get('public_key', '');		$theme  = $this->params->get('theme', 'clean');		if ($pubkey == null || $pubkey == '')		{			throw new Exception(JText::_('PLG_RECAPTCHA_ERROR_NO_PUBLIC_KEY'));		}		$server = self::RECAPTCHA_API_SERVER;		if ($app->isSSLConnection())		{			$server = self::RECAPTCHA_API_SECURE_SERVER;		}		JHtml::_('script', $server.'/js/recaptcha_ajax.js');		$document->addScriptDeclaration('window.addEvent(\'domready\', function()		{			Recaptcha.create("'.$pubkey.'", "dynamic_recaptcha_1", {theme: "'.$theme.'",'.$lang.'tabindex: 0});});'		);		return true;	}	/**	 * Gets the challenge HTML	 *	 * @return  string  The HTML to be embedded in the form.	 *	 * @since  2.5	 */	public function onDisplay($name, $id, $class)	{		return '<div id="dynamic_recaptcha_1"></div>';	}	/**	  * Calls an HTTP POST function to verify if the user's guess was correct	  *	  * @return  True if the answer is correct, false otherwise	  *	  * @since  2.5	  */	public function onCheckAnswer($code)	{		$input      = JFactory::getApplication()->input;		$privatekey = $this->params->get('private_key');		$remoteip   = $input->server->get('REMOTE_ADDR', '', 'string');		$challenge  = $input->get('recaptcha_challenge_field', '', 'string');		$response   = $input->get('recaptcha_response_field', '', 'string');		// Check for Private Key		if (empty($privatekey))		{			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_NO_PRIVATE_KEY'));			return false;		}		// Check for IP		if (empty($remoteip))		{			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_NO_IP'));			return false;		}		// Discard spam submissions		if ($challenge == null || strlen($challenge) == 0 || $response == null || strlen($response) == 0)		{			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_EMPTY_SOLUTION'));			return false;		}		$response = $this->_recaptcha_http_post(			self::RECAPTCHA_VERIFY_SERVER, "/verify",			array(				'privatekey' => $privatekey,				'remoteip'   => $remoteip,				'challenge'  => $challenge,				'response'   => $response			)	);		$answers = explode("\n", $response[1]);		if (trim($answers[0]) == 'true')			{				return true;		}		else		{			//@todo use exceptions here			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_'.strtoupper(str_replace('-', '_', $answers[1]))));			return false;		}	}	/**	 * Encodes the given data into a query string format.	 *	 * @param   string  $data  Array of string elements to be encoded	 *	 * @return  string  Encoded request	 *	 * @since  2.5	 */	private function _recaptcha_qsencode($data)	{		$req = "";		foreach ($data as $key => $value)		{			$req .= $key . '=' . urlencode(stripslashes($value)) . '&';		}		// Cut the last '&'		$req = rtrim($req, '&');		return $req;	}	/**	 * Submits an HTTP POST to a reCAPTCHA server.	 *	 * @param   string  $host	 * @param   string  $path	 * @param   array   $data	 * @param   int     $port	 *	 * @return  array   Response	 *	 * @since  2.5	 */	private function _recaptcha_http_post($host, $path, $data, $port = 80)	{		$req = $this->_recaptcha_qsencode($data);		$http_request  = "POST $path HTTP/1.0\r\n";		$http_request .= "Host: $host\r\n";		$http_request .= "Content-Type: application/x-www-form-urlencoded;\r\n";		$http_request .= "Content-Length: " . strlen($req) . "\r\n";		$http_request .= "User-Agent: reCAPTCHA/PHP\r\n";		$http_request .= "\r\n";		$http_request .= $req;		$response = '';		if (($fs = @fsockopen($host, $port, $errno, $errstr, 10)) == false )		{			die('Could not open socket');		}		fwrite($fs, $http_request);		while (!feof($fs))		{			// One TCP-IP packet			$response .= fgets($fs, 1160);		}		fclose($fs);		$response = explode("\r\n\r\n", $response, 2);		return $response;	}	/**	 * Get the language tag or a custom translation	 *	 * @return  string	 *	 * @since  2.5	 */	private function _getLanguage()	{		$language = JFactory::getLanguage();		$tag = explode('-', $language->getTag());		$tag = $tag[0];		$available = array('en', 'pt', 'fr', 'de', 'nl', 'ru', 'es', 'tr');		if (in_array($tag, $available))		{			return "lang : '" . $tag . "',";		}		// If the default language is not available, let's search for a custom translation		if ($language->hasKey('PLG_RECAPTCHA_CUSTOM_LANG'))		{			$custom[] = 'custom_translations : {';			$custom[] = "\t".'instructions_visual : "' . JText::_('PLG_RECAPTCHA_INSTRUCTIONS_VISUAL') . '",';			$custom[] = "\t".'instructions_audio : "' . JText::_('PLG_RECAPTCHA_INSTRUCTIONS_AUDIO') . '",';			$custom[] = "\t".'play_again : "' . JText::_('PLG_RECAPTCHA_PLAY_AGAIN') . '",';			$custom[] = "\t".'cant_hear_this : "' . JText::_('PLG_RECAPTCHA_CANT_HEAR_THIS') . '",';			$custom[] = "\t".'visual_challenge : "' . JText::_('PLG_RECAPTCHA_VISUAL_CHALLENGE') . '",';			$custom[] = "\t".'audio_challenge : "' . JText::_('PLG_RECAPTCHA_AUDIO_CHALLENGE') . '",';			$custom[] = "\t".'refresh_btn : "' . JText::_('PLG_RECAPTCHA_REFRESH_BTN') . '",';			$custom[] = "\t".'help_btn : "' . JText::_('PLG_RECAPTCHA_HELP_BTN') . '",';			$custom[] = "\t".'incorrect_try_again : "' . JText::_('PLG_RECAPTCHA_INCORRECT_TRY_AGAIN') . '",';			$custom[] = '},';			$custom[] = "lang : '" . $tag . "',";			return implode("\n", $custom);		}		// If nothing helps fall back to english		return '';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlus extends JGoogleData{	/**	* @var    JGoogleDataPlusPeople  Google+ API object for people.	* @since  12.3	*/	protected $people;	/**	* @var    JGoogleDataPlusActivities  Google+ API object for people.	* @since  12.3	*/	protected $activities;	/**	* @var    JGoogleDataPlusComments  Google+ API object for people.	* @since  12.3	*/	protected $comments;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		// Setup the default API url if not already set.		$options->def('api.url', 'https://www.googleapis.com/plus/v1/');		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JGoogleDataPlus  Google+ API object (people, activities, comments).	 *	 * @since   12.3	 */	public function __get($name)	{		switch ($name)		{			case 'people':				if ($this->people == null)				{					$this->people = new JGoogleDataPlusPeople($this->options, $this->auth);				}				return $this->people;			case 'activities':				if ($this->activities == null)				{					$this->activities = new JGoogleDataPlusActivities($this->options, $this->auth);				}				return $this->activities;			case 'comments':				if ($this->comments == null)				{					$this->comments = new JGoogleDataPlusComments($this->options, $this->auth);				}				return $this->comments;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users mail controller. * * @package     Joomla.Administrator * @subpackage  com_users */class UsersControllerMail extends JControllerLegacy{	public function send()	{		// Check for request forgeries.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Mail');		if ($model->send())		{			$type = 'message';		}		else		{			$type = 'error';		}		$msg = $model->getError();		$this->setredirect('index.php?option=com_users&view=mail', $msg, $type);	}	public function cancel()	{		// Check for request forgeries.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$this->setRedirect('index.php');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Encryption key object for the Joomla Platform. * * @property-read  string  $type  The key type. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptKey{	/**	 * @var    string  The private key.	 * @since  12.1	 */	public $private;	/**	 * @var    string  The public key.	 * @since  12.1	 */	public $public;	/**	 * @var    string  The key type.	 * @since  12.1	 */	protected $type;	/**	 * Constructor.	 *	 * @param   string  $type     The key type.	 * @param   string  $private  The private key.	 * @param   string  $public   The public key.	 *	 * @since   12.1	 */	public function __construct($type, $private = null, $public = null)	{		// Set the key type.		$this->type = (string) $type;		// Set the optional public/private key strings.		$this->private = isset($private) ? (string) $private : null;		$this->public  = isset($public) ? (string) $public : null;	}	/**	 * Magic method to return some protected property values.	 *	 * @param   string  $name  The name of the property to return.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function __get($name)	{		if ($name == 'type')		{			return $this->type;		}		else		{			trigger_error('Cannot access property ' . __CLASS__ . '::' . $name, E_USER_WARNING);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class for using sockets directly. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpTransportSocket implements JHttpTransport{	/**	 * @var    array  Reusable socket connections.	 * @since  11.3	 */	protected $connections;	/**	 * @var    JRegistry  The client options.	 * @since  11.3	 */	protected $options;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct(JRegistry $options)	{		if (!self::isSupported())		{			throw new RuntimeException('Cannot use a socket transport when fsockopen() is not available.');		}		$this->options = $options;	}	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null)	{		$connection = $this->connect($uri, $timeout);		// Make sure the connection is alive and valid.		if (is_resource($connection))		{			// Make sure the connection has not timed out.			$meta = stream_get_meta_data($connection);			if ($meta['timed_out'])			{				throw new RuntimeException('Server connection timed out.');			}		}		else		{			throw new RuntimeException('Not connected to server.');		}		// Get the request path from the URI object.		$path = $uri->toString(array('path', 'query'));		// If we have data to send make sure our request is setup for it.		if (!empty($data))		{			// If the data is not a scalar value encode it to be sent with the request.			if (!is_scalar($data))			{				$data = http_build_query($data);			}			if (!isset($headers['Content-Type']))			{				$headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';			}			// Add the relevant headers.			$headers['Content-Length'] = strlen($data);		}		// Build the request payload.		$request = array();		$request[] = strtoupper($method) . ' ' . ((empty($path)) ? '/' : $path) . ' HTTP/1.0';		$request[] = 'Host: ' . $uri->getHost();		// If an explicit user agent is given use it.		if (isset($userAgent))		{			$headers['User-Agent'] = $userAgent;		}		// If there are custom headers to send add them to the request payload.		if (is_array($headers))		{			foreach ($headers as $k => $v)			{				$request[] = $k . ': ' . $v;			}		}		// If we have data to send add it to the request payload.		if (!empty($data))		{			$request[] = null;			$request[] = $data;		}		// Send the request to the server.		fwrite($connection, implode("\r\n", $request) . "\r\n\r\n");		// Get the response data from the server.		$content = '';		while (!feof($connection))		{			$content .= fgets($connection, 4096);		}		return $this->getResponse($content);	}	/**	 * Method to get a response object from a server response.	 *	 * @param   string  $content  The complete server response, including headers.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  UnexpectedValueException	 */	protected function getResponse($content)	{		// Create the response object.		$return = new JHttpResponse;		// Split the response into headers and body.		$response = explode("\r\n\r\n", $content, 2);		// Get the response headers as an array.		$headers = explode("\r\n", $response[0]);		// Set the body for the response.		$return->body = $response[1];		// Get the response code from the first offset of the response headers.		preg_match('/[0-9]{3}/', array_shift($headers), $matches);		$code = $matches[0];		if (is_numeric($code))		{			$return->code = (int) $code;		}		// No valid response code was detected.		else		{			throw new UnexpectedValueException('No HTTP response code found.');		}		// Add the response headers to the response object.		foreach ($headers as $header)		{			$pos = strpos($header, ':');			$return->headers[trim(substr($header, 0, $pos))] = trim(substr($header, ($pos + 1)));		}		return $return;	}	/**	 * Method to connect to a server and get the resource.	 *	 * @param   JUri     $uri      The URI to connect with.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  resource  Socket connection resource.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	protected function connect(JUri $uri, $timeout = null)	{		$errno = null;		$err = null;		// Get the host from the uri.		$host = ($uri->isSSL()) ? 'ssl://' . $uri->getHost() : $uri->getHost();		// If the port is not explicitly set in the URI detect it.		if (!$uri->getPort())		{			$port = ($uri->getScheme() == 'https') ? 443 : 80;		}		// Use the set port.		else		{			$port = $uri->getPort();		}		// Build the connection key for resource memory caching.		$key = md5($host . $port);		// If the connection already exists, use it.		if (!empty($this->connections[$key]) && is_resource($this->connections[$key]))		{			// Connection reached EOF, cannot be used anymore			$meta = stream_get_meta_data($this->connections[$key]);			if ($meta['eof'])			{				if (!fclose($this->connections[$key]))				{					throw new RuntimeException('Cannot close connection');				}			}			// Make sure the connection has not timed out.			elseif (!$meta['timed_out'])			{				return $this->connections[$key];			}		}		if (!is_numeric($timeout))		{			$timeout = ini_get("default_socket_timeout");		}		// Attempt to connect to the server.		$connection = fsockopen($host, $port, $errno, $err, $timeout);		if (!$connection)		{			throw new RuntimeException($err, $errno);		}		// Since the connection was successful let's store it in case we need to use it later.		$this->connections[$key] = $connection;		// If an explicit timeout is set, set it.		if (isset($timeout))		{			stream_set_timeout($this->connections[$key], (int) $timeout);		}		return $this->connections[$key];	}	/**	 * method to check if http transport socket available for using	 *	 * @return bool true if available else false	 *	 * @since   12.1	 */	static public function isSupported()	{		return function_exists('fsockopen') && is_callable('fsockopen');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Oracle database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorOracle extends JDatabaseIteratorPdo{}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="modified">				<span class="icon-calendar"></span>				<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $displayData['item']->modified, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of categories * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$weblinkId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, title AS text' .				' FROM #__weblinks' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $weblinkId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $weblinkId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Commits class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.1 */class JGithubCommits extends JGithubObject{	/**	 * Method to create a commit.	 *	 * @param   string  $user     The name of the owner of the GitHub repository.	 * @param   string  $repo     The name of the GitHub repository.	 * @param   string  $message  The commit message.	 * @param   string  $tree     SHA of the tree object this commit points to.	 * @param   array   $parents  Array of the SHAs of the commits that were the parents of this commit.	 *                            If omitted or empty, the commit will be written as a root commit.	 *                            For a single parent, an array of one SHA should be provided.	 *                            For a merge commit, an array of more than one should be provided.	 *	 * @return  object	 *	 * @since   12.1	 */	public function create($user, $repo, $message, $tree, array $parents = array())	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/commits';		$data = json_encode(			array('message' => $message, 'tree' => $tree, 'parents' => $parents)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on a commit.	 *	 * @param   string   $user      The name of the owner of the GitHub repository.	 * @param   string   $repo      The name of the GitHub repository.	 * @param   string   $sha       The SHA of the commit to comment on.	 * @param   string   $comment   The text of the comment.	 * @param   integer  $line      The line number of the commit to comment on.	 * @param   string   $filepath  A relative path to the file to comment on within the commit.	 * @param   integer  $position  Line index in the diff to comment on.	 *	 * @return  object	 *	 * @since   12.1	 */	public function createCommitComment($user, $repo, $sha, $comment, $line, $filepath, $position)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha . '/comments';		$data = json_encode(			array(				'body' => $comment,				'commit_id' => $sha,				'line' => (int) $line,				'path' => $filepath,				'position' => (int) $position			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on a commit.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $id    The ID of the comment to edit.	 *	 * @return  object	 *	 * @since   12.1	 */	public function deleteCommitComment($user, $repo, $id)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to edit a comment on a commit.	 *	 * @param   string  $user     The name of the owner of the GitHub repository.	 * @param   string  $repo     The name of the GitHub repository.	 * @param   string  $id       The ID of the comment to edit.	 * @param   string  $comment  The text of the comment.	 *	 * @return  object	 *	 * @since   12.1	 */	public function editCommitComment($user, $repo, $id, $comment)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		$data = json_encode(			array(				'body' => $comment			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single commit for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $sha    The SHA of the commit to retrieve.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommit($user, $repo, $sha, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single comment on a commit.	 *	 * @param   string   $user  The name of the owner of the GitHub repository.	 * @param   string   $repo  The name of the GitHub repository.	 * @param   integer  $id    ID of the comment to retrieve	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommitComment($user, $repo, $id)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of comments for a single commit for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $sha    The SHA of the commit to retrieve.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommitComments($user, $repo, $sha, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a diff for two commits.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $base  The base of the diff, either a commit SHA or branch.	 * @param   string  $head  The head of the diff, either a commit SHA or branch.	 *	 * @return  array	 *	 * @since   12.1	 */	public function getDiff($user, $repo, $base, $head)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/compare/' . $base . '...' . $head;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list commits for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getList($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of commit comments for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getListComments($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><div class="tab-pane" id="associations">	<fieldset>		<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>		<?php endforeach; ?>	</fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filter model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelFilter extends JModelAdmin{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  2.5	 */	protected $text_prefix = 'COM_FINDER';	/**	 * Model context string.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'com_finder.filter';	/**	 * Custom clean cache method.	 *	 * @param   string   $group      The component name. [optional]	 * @param   integer  $client_id  The client ID. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	protected function cleanCache($group = 'com_finder', $client_id = 1)	{		parent::cleanCache($group, $client_id);	}	/**	 * Method to get the filter data.	 *	 * @return  mixed  The filter data.	 *	 * @since   2.5	 */	public function getFilter()	{		$filter_id = (int) $this->getState('filter.id');		// Get a FinderTableFilter instance.		$filter = $this->getTable();		// Attempt to load the row.		$return = $filter->load($filter_id);		// Check for a database error.		if ($return === false && $filter->getError())		{			$this->setError($filter->getError());			return false;		}		// Process the filter data.		if (!empty($filter->data))		{			$filter->data = explode(',', $filter->data);		}		elseif (empty($filter->data))		{			$filter->data = array();		}		// Check for a database error.		if ($this->_db->getErrorNum())		{			$this->setError($this->_db->getErrorMsg());			return false;		}		return $filter;	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form. [optional]	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not. [optional]	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   2.5	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_finder.filter', 'filter', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Returns a JTable object, always creating it.	 *	 * @param   string  $type    The table type to instantiate. [optional]	 * @param   string  $prefix  A prefix for the table class name. [optional]	 * @param   array   $config  Configuration array for model. [optional]	 *	 * @return  JTable  A database object	 *	 * @since   2.5	 */	public function getTable($type = 'Filter', $prefix = 'FinderTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   2.5	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_finder.edit.filter.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_finder.filter', $data);		return $data;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Model Class * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */abstract class JModelDatabase extends JModelBase{	/**	 * The database driver.	 *	 * @var    JDatabaseDriver	 * @since  12.1	 */	protected $db;	/**	 * Instantiate the model.	 *	 * @param   JRegistry        $state  The model state.	 * @param   JDatabaseDriver  $db     The database adpater.	 *	 * @since   12.1	 */	public function __construct(JRegistry $state = null, JDatabaseDriver $db = null)	{		parent::__construct($state);		// Setup the model.		$this->db = isset($db) ? $db : $this->loadDb();	}	/**	 * Get the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	public function getDb()	{		return $this->db;	}	/**	 * Set the database driver.	 *	 * @param   JDatabaseDriver  $db  The database driver.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setDb(JDatabaseDriver $db)	{		$this->db = $db;	}	/**	 * Load the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	protected function loadDb()	{		return JFactory::getDbo();	}}
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt *//** * This is a CRON script which should be called from the command-line, not the * web. For example something like: * /usr/bin/php /path/to/site/cli/update_cron.php */// Set flag that this is a parent file.const _JEXEC = 1;error_reporting(E_ALL | E_NOTICE);ini_set('display_errors', 1);// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}require_once JPATH_LIBRARIES . '/import.legacy.php';require_once JPATH_LIBRARIES . '/cms.php';// Load the configurationrequire_once JPATH_CONFIGURATION . '/configuration.php';/** * This script will fetch the update information for all extensions and store * them in the database, speeding up your administrator. * * @package  Joomla.CLI * @since    2.5 */class Updatecron extends JApplicationCli{	/**	 * Entry point for the script	 *	 * @return  void	 *	 * @since   2.5	 */	public function doExecute()	{		// Get the update cache time		$component = JComponentHelper::getComponent('com_installer');		$params = $component->params;		$cache_timeout = $params->get('cachetimeout', 6, 'int');		$cache_timeout = 3600 * $cache_timeout;		// Find all updates		$this->out('Fetching updates...');		$updater = JUpdater::getInstance();		$updater->findUpdates(0, $cache_timeout);		$this->out('Finished fetching updates');	}}JApplicationCli::getInstance('Updatecron')->execute();
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla Model * * Acts as a Factory class for application specific objects and * provides many supporting API functions. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */abstract class JModelLegacy extends JObject{	/**	 * Indicates if the internal state has been set	 *	 * @var    boolean	 * @since  12.2	 */	protected $__state_set = null;	/**	 * Database Connector	 *	 * @var    object	 * @since  12.2	 */	protected $_db;	/**	 * The model (base) name	 *	 * @var    string	 * @since  12.2	 */	protected $name;	/**	 * The URL option for the component.	 *	 * @var    string	 * @since  12.2	 */	protected $option = null;	/**	 * A state object	 *	 * @var    string	 * @since  12.2	 */	protected $state;	/**	 * The event to trigger when cleaning cache.	 *	 * @var      string	 * @since    12.2	 */	protected $event_clean_cache = null;	/**	 * Add a directory where JModelLegacy should search for models. You may	 * either pass a string or an array of directories.	 *	 * @param   mixed   $path    A path or array[sting] of paths to search.	 * @param   string  $prefix  A prefix for models.	 *	 * @return  array  An array with directory elements. If prefix is equal to '', all directories are returned.	 *	 * @since   12.2	 */	public static function addIncludePath($path = '', $prefix = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!isset($paths[$prefix]))		{			$paths[$prefix] = array();		}		if (!isset($paths['']))		{			$paths[''] = array();		}		if (!empty($path))		{			jimport('joomla.filesystem.path');			if (!in_array($path, $paths[$prefix]))			{				array_unshift($paths[$prefix], JPath::clean($path));			}			if (!in_array($path, $paths['']))			{				array_unshift($paths[''], JPath::clean($path));			}		}		return $paths[$prefix];	}	/**	 * Adds to the stack of model table paths in LIFO order.	 *	 * @param   mixed  $path  The directory as a string or directories as an array to add.	 *	 * @return  void	 *	 * @since   12.2	 */	public static function addTablePath($path)	{		JTable::addIncludePath($path);	}	/**	 * Create the filename for a resource	 *	 * @param   string  $type   The resource type to create the filename for.	 * @param   array   $parts  An associative array of filename information.	 *	 * @return  string  The filename	 *	 * @since   12.2	 */	protected static function _createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'model':				$filename = strtolower($parts['name']) . '.php';				break;		}		return $filename;	}	/**	 * Returns a Model object, always creating it	 *	 * @param   string  $type    The model type to instantiate	 * @param   string  $prefix  Prefix for the model class name. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  mixed   A model object or false on failure	 *	 * @since   12.2	 */	public static function getInstance($type, $prefix = '', $config = array())	{		$type = preg_replace('/[^A-Z0-9_\.-]/i', '', $type);		$modelClass = $prefix . ucfirst($type);		if (!class_exists($modelClass))		{			jimport('joomla.filesystem.path');			$path = JPath::find(self::addIncludePath(null, $prefix), self::_createFileName('model', array('name' => $type)));			if (!$path)			{				$path = JPath::find(self::addIncludePath(null, ''), self::_createFileName('model', array('name' => $type)));			}			if ($path)			{				require_once $path;				if (!class_exists($modelClass))				{					JLog::add(JText::sprintf('JLIB_APPLICATION_ERROR_MODELCLASS_NOT_FOUND', $modelClass), JLog::WARNING, 'jerror');					return false;				}			}			else			{				return false;			}		}		return new $modelClass($config);	}	/**	 * Constructor	 *	 * @param   array  $config  An array of configuration options (name, state, dbo, table_path, ignore_request).	 *	 * @since   12.2	 * @throws  Exception	 */	public function __construct($config = array())	{		// Guess the option from the class name (Option)Model(View).		if (empty($this->option))		{			$r = null;			if (!preg_match('/(.*)Model/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_MODEL_GET_NAME'), 500);			}			$this->option = 'com_' . strtolower($r[1]);		}		// Set the view name		if (empty($this->name))		{			if (array_key_exists('name', $config))			{				$this->name = $config['name'];			}			else			{				$this->name = $this->getName();			}		}		// Set the model state		if (array_key_exists('state', $config))		{			$this->state = $config['state'];		}		else		{			$this->state = new JObject;		}		// Set the model dbo		if (array_key_exists('dbo', $config))		{			$this->_db = $config['dbo'];		}		else		{			$this->_db = JFactory::getDbo();		}		// Set the default view search path		if (array_key_exists('table_path', $config))		{			$this->addTablePath($config['table_path']);		}		elseif (defined('JPATH_COMPONENT_ADMINISTRATOR'))		{			$this->addTablePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');		}		// Set the internal state marker - used to ignore setting state from the request		if (!empty($config['ignore_request']))		{			$this->__state_set = true;		}		// Set the clean cache event		if (isset($config['event_clean_cache']))		{			$this->event_clean_cache = $config['event_clean_cache'];		}		elseif (empty($this->event_clean_cache))		{			$this->event_clean_cache = 'onContentCleanCache';		}	}	/**	 * Gets an array of objects from the results of database query.	 *	 * @param   string   $query       The query.	 * @param   integer  $limitstart  Offset.	 * @param   integer  $limit       The number of records.	 *	 * @return  array  An array of results.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$this->_db->setQuery($query, $limitstart, $limit);		$result = $this->_db->loadObjectList();		return $result;	}	/**	 * Returns a record count for the query	 *	 * @param   string  $query  The query.	 *	 * @return  integer  Number of rows for query	 *	 * @since   12.2	 */	protected function _getListCount($query)	{		$this->_db->setQuery($query);		$this->_db->execute();		return $this->_db->getNumRows();	}	/**	 * Method to load and return a model object.	 *	 * @param   string  $name    The name of the view	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration settings to pass to JTable::getInstance	 *	 * @return  mixed  Model object or boolean false if failed	 *	 * @since   12.2	 * @see     JTable::getInstance	 */	protected function _createTable($name, $prefix = 'Table', $config = array())	{		// Clean the model name		$name = preg_replace('/[^A-Z0-9_]/i', '', $name);		$prefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		// Make sure we are returning a DBO object		if (!array_key_exists('dbo', $config))		{			$config['dbo'] = $this->getDbo();		}		return JTable::getInstance($name, $prefix, $config);	}	/**	 * Method to get the database driver object	 *	 * @return  JDatabaseDriver	 */	public function getDbo()	{		return $this->_db;	}	/**	 * Method to get the model name	 *	 * The model name. By default parsed using the classname or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the model	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->name))		{			$r = null;			if (!preg_match('/Model(.*)/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_MODEL_GET_NAME'), 500);			}			$this->name = strtolower($r[1]);		}		return $this->name;	}	/**	 * Method to get model state variables	 *	 * @param   string  $property  Optional parameter name	 * @param   mixed   $default   Optional default value	 *	 * @return  object  The property where specified, the state object where omitted	 *	 * @since   12.2	 */	public function getState($property = null, $default = null)	{		if (!$this->__state_set)		{			// Protected method to auto-populate the model state.			$this->populateState();			// Set the model state set flag to true.			$this->__state_set = true;		}		return $property === null ? $this->state : $this->state->get($property, $default);	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $name     The table name. Optional.	 * @param   string  $prefix   The class prefix. Optional.	 * @param   array   $options  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   12.2	 * @throws  Exception	 */	public function getTable($name = '', $prefix = 'Table', $options = array())	{		if (empty($name))		{			$name = $this->getName();		}		if ($table = $this->_createTable($name, $prefix, $options))		{			return $table;		}		throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_TABLE_NAME_NOT_SUPPORTED', $name), 0);	}	/**	 * Method to auto-populate the model state.	 *	 * This method should only be called once per instantiation and is designed	 * to be called on the first call to the getState() method unless the model	 * configuration flag to ignore the request is set.	 *	 * @return  void	 *	 * @note    Calling getState in this method will result in recursion.	 * @since   12.2	 */	protected function populateState()	{	}	/**	 * Method to set the database driver object	 *	 * @param   JDatabaseDriver  $db  A JDatabaseDriver based object	 *	 * @return  void	 *	 * @since   12.2	 */	public function setDbo($db)	{		$this->_db = $db;	}	/**	 * Method to set model state variables	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set or null.	 *	 * @return  mixed  The previous value of the property or null if not set.	 *	 * @since   12.2	 */	public function setState($property, $value = null)	{		return $this->state->set($property, $value);	}	/**	 * Clean the cache	 *	 * @param   string   $group      The cache group	 * @param   integer  $client_id  The ID of the client	 *	 * @return  void	 *	 * @since   12.2	 */	protected function cleanCache($group = null, $client_id = 0)	{		$conf = JFactory::getConfig();		$dispatcher = JEventDispatcher::getInstance();		$options = array(			'defaultgroup' => ($group) ? $group : (isset($this->option) ? $this->option : JFactory::getApplication()->input->get('option')),			'cachebase' => ($client_id) ? JPATH_ADMINISTRATOR . '/cache' : $conf->get('cache_path', JPATH_SITE . '/cache'));		$cache = JCache::getInstance('callback', $options);		$cache->clean();		// Trigger the onContentCleanCache event.		$dispatcher->trigger($this->event_clean_cache, $options);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Joomla! Formatted Text File Log class * * This class is designed to use as a base for building formatted text files for output. By * default it emulates the Syslog style format output. This is a disk based output format. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerFormattedtext extends JLogLogger{	/**	 * @var    resource  The file pointer for the log file.	 * @since  11.1	 */	protected $file;	/**	 * @var    string  The format for which each entry follows in the log file.  All fields must be named	 * in all caps and be within curly brackets eg. {FOOBAR}.	 * @since  11.1	 */	protected $format = '{DATETIME}	{PRIORITY}	{CATEGORY}	{MESSAGE}';	/**	 * @var    array  The parsed fields from the format string.	 * @since  11.1	 */	protected $fields = array();	/**	 * @var    string  The full filesystem path for the log file.	 * @since  11.1	 */	protected $path;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// The name of the text file defaults to 'error.php' if not explicitly given.		if (empty($this->options['text_file']))		{			$this->options['text_file'] = 'error.php';		}		// The name of the text file path defaults to that which is set in configuration if not explicitly given.		if (empty($this->options['text_file_path']))		{			$this->options['text_file_path'] = JFactory::getConfig()->get('log_path');		}		// False to treat the log file as a php file.		if (empty($this->options['text_file_no_php']))		{			$this->options['text_file_no_php'] = false;		}		// Build the full path to the log file.		$this->path = $this->options['text_file_path'] . '/' . $this->options['text_file'];		// Use the default entry format unless explicitly set otherwise.		if (!empty($this->options['text_entry_format']))		{			$this->format = (string) $this->options['text_entry_format'];		}		// Build the fields array based on the format string.		$this->parseFields();	}	/**	 * Destructor.	 *	 * @since   11.1	 */	public function __destruct()	{		if (is_resource($this->file))		{			fclose($this->file);		}	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function addEntry(JLogEntry $entry)	{		// Initialise the file if not already done.		if (!is_resource($this->file))		{			$this->initFile();		}		// Set some default field values if not already set.		if (!isset($entry->clientIP))		{			// Check for proxies as well.			if (isset($_SERVER['REMOTE_ADDR']))			{				$entry->clientIP = $_SERVER['REMOTE_ADDR'];			}			elseif (isset($_SERVER['HTTP_X_FORWARDED_FOR']))			{				$entry->clientIP = $_SERVER['HTTP_X_FORWARDED_FOR'];			}			elseif (isset($_SERVER['HTTP_CLIENT_IP']))			{				$entry->clientIP = $_SERVER['HTTP_CLIENT_IP'];			}		}		// If the time field is missing or the date field isn't only the date we need to rework it.		if ((strlen($entry->date) != 10) || !isset($entry->time))		{			// Get the date and time strings in GMT.			$entry->datetime = $entry->date->toISO8601();			$entry->time = $entry->date->format('H:i:s', false);			$entry->date = $entry->date->format('Y-m-d', false);		}		// Get a list of all the entry keys and make sure they are upper case.		$tmp = array_change_key_case(get_object_vars($entry), CASE_UPPER);		// Decode the entry priority into an English string.		$tmp['PRIORITY'] = $this->priorities[$entry->priority];		// Fill in field data for the line.		$line = $this->format;		foreach ($this->fields as $field)		{			$line = str_replace('{' . $field . '}', (isset($tmp[$field])) ? $tmp[$field] : '-', $line);		}		// Write the new entry to the file.		if (!fwrite($this->file, $line . "\n"))		{			throw new RuntimeException('Cannot write to log file.');		}	}	/**	 * Method to generate the log file header.	 *	 * @return  string  The log file header	 *	 * @since   11.1	 */	protected function generateFileHeader()	{		$head = array();		// Build the log file header.		// If the no php flag is not set add the php die statement.		if (empty($this->options['text_file_no_php']))		{			// Blank line to prevent information disclose: https://bugs.php.net/bug.php?id=60677			$head[] = '#';			$head[] = '#<?php die(\'Forbidden.\'); ?>';		}		$head[] = '#Date: ' . gmdate('Y-m-d H:i:s') . ' UTC';		$head[] = '#Software: ' . JPlatform::getLongVersion();		$head[] = '';		// Prepare the fields string		$head[] = '#Fields: ' . strtolower(str_replace('}', '', str_replace('{', '', $this->format)));		$head[] = '';		return implode("\n", $head);	}	/**	 * Method to initialise the log file.  This will create the folder path to the file if it doesn't already	 * exist and also get a new file header if the file doesn't already exist.  If the file already exists it	 * will simply open it for writing.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function initFile()	{		// If the file doesn't already exist we need to create it and generate the file header.		if (!is_file($this->path))		{			// Make sure the folder exists in which to create the log file.			JFolder::create(dirname($this->path));			// Build the log file header.			$head = $this->generateFileHeader();		}		else		{			$head = false;		}		// Open the file for writing (append mode).		if (!$this->file = fopen($this->path, 'a'))		{			throw new RuntimeException('Cannot open file for writing log');		}		if ($head)		{			if (!fwrite($this->file, $head))			{				throw new RuntimeException('Cannot fput file for log');			}		}	}	/**	 * Method to parse the format string into an array of fields.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function parseFields()	{		$this->fields = array();		$matches = array();		// Get all of the available fields in the format string.		preg_match_all("/{(.*?)}/i", $this->format, $matches);		// Build the parsed fields list based on the found fields.		foreach ($matches[1] as $match)		{			$this->fields[] = strtoupper($match);		}	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to refresh the preinstall view for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerPreinstall extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Redirect to the page.		$r = new stdClass;		$r->view = 'preinstall';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Viewlevels table class. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableViewlevel extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__viewlevels', 'id', $db);	}	/**	 * Method to bind the data.	 *	 * @param   array  $array   The data to bind.	 * @param   mixed  $ignore  An array or space separated list of fields to ignore.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Bind the rules as appropriate.		if (isset($array['rules']))		{			if (is_array($array['rules']))			{				$array['rules'] = json_encode($array['rules']);			}		}		return parent::bind($array, $ignore);	}	/**	 * Method to check the current record to save	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		// Validate the title.		if ((trim($this->title)) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_VIEWLEVEL'));			return false;		}		return true;	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ucfirst* Make a string's first character uppercase* Note: requires utf8_strtoupper* @param string* @return string with first character as upper case (if applicable)* @see http://www.php.net/ucfirst* @see utf8_strtoupper* @package utf8* @subpackage strings*/function utf8_ucfirst($str){    switch ( utf8_strlen($str) ) {        case 0:            return '';        break;        case 1:            return utf8_strtoupper($str);        break;        default:            preg_match('/^(.{1})(.*)$/us', $str, $matches);            return utf8_strtoupper($matches[1]).$matches[2];        break;    }}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Media Component Manager Model * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaModelManager extends JModelLegacy{	public function getState($property = null, $default = null)	{		static $set;		if (!$set)		{			$input = JFactory::getApplication()->input;			$folder = $input->get('folder', '', 'path');			$this->setState('folder', $folder);			$fieldid = $input->get('fieldid', '');			$this->setState('field.id', $fieldid);			$parent = str_replace("\\", "/", dirname($folder));			$parent = ($parent == '.') ? null : $parent;			$this->setState('parent', $parent);			$set = true;		}		return parent::getState($property, $default);	}	/**	 * Image Manager Popup	 *	 * @param string $listFolder The image directory to display	 * @since 1.5	 */	function getFolderList($base = null)	{		// Get some paths from the request		if (empty($base))		{			$base = COM_MEDIA_BASE;		}		//corrections for windows paths		$base = str_replace(DIRECTORY_SEPARATOR, '/', $base);		$com_media_base_uni = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE);		// Get the list of folders		jimport('joomla.filesystem.folder');		$folders = JFolder::folders($base, '.', true, true);		$document = JFactory::getDocument();		$document->setTitle(JText::_('COM_MEDIA_INSERT_IMAGE'));		// Build the array of select options for the folder list		$options[] = JHtml::_('select.option', "", "/");		foreach ($folders as $folder)		{			$folder		= str_replace($com_media_base_uni, "", str_replace(DIRECTORY_SEPARATOR, '/', $folder));			$value		= substr($folder, 1);			$text		= str_replace(DIRECTORY_SEPARATOR, "/", $folder);			$options[]	= JHtml::_('select.option', $value, $text);		}		// Sort the folder list array		if (is_array($options))		{			sort($options);		}		// Get asset and author id (use integer filter)		$input = JFactory::getApplication()->input;		$asset = $input->get('asset', 0, 'integer');		$author = $input->get('author', 0, 'integer');		// Create the drop-down folder select list		$list = JHtml::_('select.genericlist', $options, 'folderlist', 'class="inputbox" size="1" onchange="ImageManager.setFolder(this.options[this.selectedIndex].value, '.$asset.', '.$author.')" ', 'value', 'text', $base);		return $list;	}	function getFolderTree($base = null)	{		// Get some paths from the request		if (empty($base))		{			$base = COM_MEDIA_BASE;		}		$mediaBase = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE.'/');		// Get the list of folders		jimport('joomla.filesystem.folder');		$folders = JFolder::folders($base, '.', true, true);		$tree = array();		foreach ($folders as $folder)		{			$folder		= str_replace(DIRECTORY_SEPARATOR, '/', $folder);			$name		= substr($folder, strrpos($folder, '/') + 1);			$relative	= str_replace($mediaBase, '', $folder);			$absolute	= $folder;			$path		= explode('/', $relative);			$node		= (object) array('name' => $name, 'relative' => $relative, 'absolute' => $absolute);			$tmp = &$tree;			for ($i = 0, $n = count($path); $i < $n; $i++)			{				if (!isset($tmp['children']))				{					$tmp['children'] = array();				}				if ($i == $n - 1)				{					// We need to place the node					$tmp['children'][$relative] = array('data' => $node, 'children' => array());					break;				}				if (array_key_exists($key = implode('/', array_slice($path, 0, $i + 1)), $tmp['children']))				{					$tmp = &$tmp['children'][$key];				}			}		}		$tree['data'] = (object) array('name' => JText::_('COM_MEDIA_MEDIA'), 'relative' => '', 'absolute' => $base);		return $tree;	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Version information class for the Joomla Platform. * * @package  Joomla.Platform * @since    11.1 */final class JPlatform{	// Product name.	const PRODUCT = 'Joomla Platform';	// Release version.	const RELEASE = '12.2';	// Maintenance version.	const MAINTENANCE = '0';	// Development STATUS.	const STATUS = 'Stable';	// Build number.	const BUILD = 0;	// Code name.	const CODE_NAME = 'Neil Armstrong';	// Release date.	const RELEASE_DATE = '21-September-2012';	// Release time.	const RELEASE_TIME = '00:00';	// Release timezone.	const RELEASE_TIME_ZONE = 'GMT';	// Copyright Notice.	const COPYRIGHT = 'Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved.';	// Link text.	const LINK_TEXT = '<a href="http://www.joomla.org">Joomla!</a> is Free Software released under the GNU General Public License.';	/**	 * Compares two a "PHP standardized" version number against the current Joomla Platform version.	 *	 * @param   string  $minimum  The minimum version of the Joomla Platform which is compatible.	 *	 * @return  boolean  True if the version is compatible.	 *	 * @see     http://www.php.net/version_compare	 * @since   11.1	 */	public static function isCompatible($minimum)	{		return (version_compare(self::getShortVersion(), $minimum, 'eq') == 1);	}	/**	 * Gets a "PHP standardized" version string for the current Joomla Platform.	 *	 * @return  string  Version string.	 *	 * @since   11.1	 */	public static function getShortVersion()	{		return self::RELEASE . '.' . self::MAINTENANCE;	}	/**	 * Gets a version string for the current Joomla Platform with all release information.	 *	 * @return  string  Complete version string.	 *	 * @since   11.1	 */	public static function getLongVersion()	{		return self::PRODUCT . ' ' . self::RELEASE . '.' . self::MAINTENANCE . ' ' . self::STATUS . ' [ ' . self::CODE_NAME . ' ] '			. self::RELEASE_DATE . ' ' . self::RELEASE_TIME . ' ' . self::RELEASE_TIME_ZONE;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset title="<?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?>">	<legend><?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?></legend>	<?php echo JText::_('COM_INSTALLER_MSG_DESCFTP'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p><?php echo JText::_($this->ftp->getMessage()); ?></p>	<?php endif; ?>	<table class="adminform">		<tbody>			<tr>				<td width="120">					<label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>				</td>				<td>					<input type="text" id="username" name="username" class="input_box" size="70" value="" />				</td>			</tr>			<tr>				<td width="120">					<label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>				</td>				<td>					<input type="password" id="password" name="password" class="input_box" size="70" value="" />				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersViewRegistration extends JViewLegacy{	protected $data;	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	The template file to include	 * @since   1.6	 */	public function display($tpl = null)	{		// Get the view data.		$this->data		= $this->get('Data');		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->get('params');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document.	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_REGISTRATION'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Login component * * @package     Joomla.Administrator * @subpackage  com_login * @since       1.6 */class LoginViewLogin extends JViewLegacy{}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to make an image appear "sketchy". * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterSketchy extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the sketchy filter.		imagefilter($this->handle, IMG_FILTER_MEAN_REMOVAL);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php JLoader::register('TagsHelperRoute', JPATH_BASE . '/components/com_tags/helpers/route.php'); ?><div class="tagssimilar<?php echo $moduleclass_sfx; ?>"><?php if ($list) : ?>	<ul>	<?php foreach ($list as $i => $item) : ?>		<li>			<?php $item->route = new JHelperRoute; ?>			<a href="<?php echo JRoute::_(TagsHelperRoute::getItemRoute($item->content_item_id, $item->core_alias, $item->core_catid, $item->core_language, $item->type_alias, $item->router)); ?>">				<?php if (!empty($item->core_title)) :					echo htmlspecialchars($item->core_title);				endif; ?>			</a>		</li>	<?php endforeach; ?>	</ul><?php else : ?>	<span><?php echo JText::_('MOD_TAGS_SIMILAR_NO_MATCHING_TAGS'); ?></span><?php endif; ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PDO database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorPdo extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			return $this->cursor->rowCount();		}		else		{			return 0;		}	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			return $this->cursor->fetchObject($this->class);		}		else		{			return false;		}	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			$this->cursor->closeCursor();		}	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseMysqli is deprecated, use JDatabaseDriverMysqli instead.', JLog::WARNING, 'deprecated');/** * MySQLi database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://php.net/manual/en/book.mysqli.php * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverMysqli instead. */class JDatabaseMysqli extends JDatabaseDriverMysqli{}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Joomla Core Pre-Install View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewPreinstallHtml extends InstallationViewDefault{	/**	 * Array of PHP config options     *     * @var    array	 * @since  3.1	 */	protected $options;	/**	 * Array of PHP settings     *     * @var    array	 * @since  3.1	 */	protected $settings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options  = $this->model->getPhpOptions();		$this->settings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input JSON Class * * This class decodes a JSON string from the raw request data and makes it available via * the standard JInput interface. * * @package     Joomla.Platform * @subpackage  Input * @since       12.2 */class JInputJSON extends JInput{	/**	 * @var    string  The raw JSON string from the request.	 * @since  12.2	 */	private $_raw;	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is the raw HTTP input decoded from JSON)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.2	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		if (is_null($source))		{			$this->_raw = file_get_contents('php://input');			$this->data = json_decode($this->_raw, true);		}		else		{			$this->data = & $source;		}		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets the raw JSON string from the request.	 *	 * @return  string  The raw JSON string from the request.	 *	 * @since   12.2	 */	public function getRaw()	{		return $this->_raw;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_search')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Search');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Mail * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;$PHPMAILER_LANG["authenticate"] = JText::_('PHPMAILER_AUTHENTICATE');$PHPMAILER_LANG["connect_host"] = JText::_('PHPMAILER_CONNECT_HOST');$PHPMAILER_LANG["data_not_accepted"] = JText::_('PHPMAILER_DATA_NOT_ACCEPTED');$PHPMAILER_LANG['empty_message'] = JText::_('PHPMAILER_EMPTY_MESSAGE');$PHPMAILER_LANG["encoding"] = JText::_('PHPMAILER_ENCODING');$PHPMAILER_LANG["execute"] = JText::_('PHPMAILER_EXECUTE');$PHPMAILER_LANG["file_access"] = JText::_('PHPMAILER_FILE_ACCESS');$PHPMAILER_LANG["file_open"] = JText::_('PHPMAILER_FILE_OPEN');$PHPMAILER_LANG["from_failed"] = JText::_('PHPMAILER_FROM_FAILED');$PHPMAILER_LANG["instantiate"] = JText::_('PHPMAILER_INSTANTIATE');$PHPMAILER_LANG['invalid_address'] = JText::_('PHPMAILER_INVALID_ADDRESS');$PHPMAILER_LANG["mailer_not_supported"] = JText::_('PHPMAILER_MAILER_IS_NOT_SUPPORTED');$PHPMAILER_LANG["provide_address"] = JText::_('PHPMAILER_PROVIDE_ADDRESS');$PHPMAILER_LANG["recipients_failed"] = JText::_('PHPMAILER_RECIPIENTS_FAILED');$PHPMAILER_LANG["signing"]  = JText::_('PHPMAILER_SIGNING_ERROR');$PHPMAILER_LANG['smtp_connect_failed'] = JText::_('PHPMAILER_SMTP_CONNECT_FAILED');$PHPMAILER_LANG['smtp_error'] = JText::_('PHPMAILER_SMTP_ERROR');$PHPMAILER_LANG['variable_set'] = JText::_('PHPMAILER_VARIABLE_SET');
<?php/** * @package     Joomla.Legacy * @subpackage  Simplepie * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('simplepie.simplepie');/** * Class to maintain a pathway. * * The user's navigated path within the application. * * @package     Joomla.Legacy * @subpackage  Simplepie * @since       12.2 * * @deprecated  4.0  Use JFeed or supply your own methods */class JSimplepieFactory{	/**	 * Get a parsed XML Feed Source	 *	 * @param   string   $url         Url for feed source.	 * @param   integer  $cache_time  Time to cache feed for (using internal cache mechanism).	 *	 * @return  mixed  SimplePie parsed object on success, false on failure.	 *	 * @since   12.2	 * @deprecated  4.0   Use JFeedFactory($url) instead.	 *	 * @note  In 3.2 will be proxied to JFeedFactory()	 */	public static function getFeedParser($url, $cache_time = 0)	{		JLog::add(__METHOD__ . ' is deprecated.   Use JFeedFactory() or supply Simple Pie instead.', JLog::WARNING, 'deprecated');		$cache = JFactory::getCache('feed_parser', 'callback');		if ($cache_time > 0)		{			$cache->setLifeTime($cache_time);		}		$simplepie = new SimplePie(null, null, 0);		$simplepie->enable_cache(false);		$simplepie->set_feed_url($url);		$simplepie->force_feed(true);		$contents = $cache->get(array($simplepie, 'init'), null, false, false);		if ($contents)		{			return $simplepie;		}		JLog::add(JText::_('JLIB_UTIL_ERROR_LOADING_FEED_DATA'), JLog::WARNING, 'jerror');		return false;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseMysql is deprecated, use JDatabaseDriverMysql instead.', JLog::WARNING, 'deprecated');/** * MySQL database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverMysql instead. */class JDatabaseMysql extends JDatabaseDriverMysql{}
<?php/** * @package     Joomla.Platform * @subpackage  Filter * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JFilterOutput * * @package     Joomla.Platform * @subpackage  Filter * @since       11.1 */class JFilterOutput{	/**	 * Makes an object safe to display in forms	 *	 * Object parameters that are non-string, array, object or start with underscore	 * will be converted	 *	 * @param   object   &$mixed        An object to be parsed	 * @param   integer  $quote_style   The optional quote style for the htmlspecialchars function	 * @param   mixed    $exclude_keys  An optional string single field name or array of field names not	 *                                  to be parsed (eg, for a textarea)	 *	 * @return  void	 *	 * @since   11.1	 */	public static function objectHTMLSafe(&$mixed, $quote_style = ENT_QUOTES, $exclude_keys = '')	{		if (is_object($mixed))		{			foreach (get_object_vars($mixed) as $k => $v)			{				if (is_array($v) || is_object($v) || $v == null || substr($k, 1, 1) == '_')				{					continue;				}				if (is_string($exclude_keys) && $k == $exclude_keys)				{					continue;				}				elseif (is_array($exclude_keys) && in_array($k, $exclude_keys))				{					continue;				}				$mixed->$k = htmlspecialchars($v, $quote_style, 'UTF-8');			}		}	}	/**	 * This method processes a string and replaces all instances of & with &amp; in links only.	 *	 * @param   string  $input  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	public static function linkXHTMLSafe($input)	{		$regex = 'href="([^"]*(&(amp;){0})[^"]*)*?"';		return preg_replace_callback("#$regex#i", array('JFilterOutput', '_ampReplaceCallback'), $input);	}	/**	 * This method processes a string and replaces all accented UTF-8 characters by unaccented	 * ASCII-7 "equivalents", whitespaces are replaced by hyphens and the string is lowercase.	 *	 * @param   string  $string  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	public static function stringURLSafe($string)	{		// Remove any '-' from the string since they will be used as concatenaters		$str = str_replace('-', ' ', $string);		$lang = JFactory::getLanguage();		$str = $lang->transliterate($str);		// Trim white spaces at beginning and end of alias and make lowercase		$str = trim(JString::strtolower($str));		// Remove any duplicate whitespace, and ensure all characters are alphanumeric		$str = preg_replace('/(\s|[^A-Za-z0-9\-])+/', '-', $str);		// Trim dashes at beginning and end of alias		$str = trim($str, '-');		return $str;	}	/**	 * This method implements unicode slugs instead of transliteration.	 *	 * @param   string  $string  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	public static function stringURLUnicodeSlug($string)	{		// Replace double byte whitespaces by single byte (East Asian languages)		$str = preg_replace('/\xE3\x80\x80/', ' ', $string);		// Remove any '-' from the string as they will be used as concatenator.		// Would be great to let the spaces in but only Firefox is friendly with this		$str = str_replace('-', ' ', $str);		// Replace forbidden characters by whitespaces		$str = preg_replace('#[:\#\*"@+=;!><&\.%()\]\/\'\\\\|\[]#', "\x20", $str);		// Delete all '?'		$str = str_replace('?', '', $str);		// Trim white spaces at beginning and end of alias and make lowercase		$str = trim(JString::strtolower($str));		// Remove any duplicate whitespace and replace whitespaces by hyphens		$str = preg_replace('#\x20+#', '-', $str);		return $str;	}	/**	 * Replaces &amp; with & for XHTML compliance	 *	 * @param   string  $text  Text to process	 *	 * @return  string  Processed string.	 *	 * @since   11.1	 *	 * @todo There must be a better way???	 */	public static function ampReplace($text)	{		$text = str_replace('&&', '*--*', $text);		$text = str_replace('&#', '*-*', $text);		$text = str_replace('&amp;', '&', $text);		$text = preg_replace('|&(?![\w]+;)|', '&amp;', $text);		$text = str_replace('*-*', '&#', $text);		$text = str_replace('*--*', '&&', $text);		return $text;	}	/**	 * Callback method for replacing & with &amp; in a string	 *	 * @param   string  $m  String to process	 *	 * @return  string  Replaced string	 *	 * @since   11.1	 */	public static function _ampReplaceCallback($m)	{		$rx = '&(?!amp;)';		return preg_replace('#' . $rx . '#', '&amp;', $m[0]);	}	/**	 * Cleans text of all formatting and scripting code	 *	 * @param   string  &$text  Text to clean	 *	 * @return  string  Cleaned text.	 *	 * @since   11.1	 */	public static function cleanText(&$text)	{		$text = preg_replace("'<script[^>]*>.*?</script>'si", '', $text);		$text = preg_replace('/<a\s+.*?href="([^"]+)"[^>]*>([^<]+)<\/a>/is', '\2 (\1)', $text);		$text = preg_replace('/<!--.+?-->/', '', $text);		$text = preg_replace('/{.+?}/', '', $text);		$text = preg_replace('/&nbsp;/', ' ', $text);		$text = preg_replace('/&amp;/', ' ', $text);		$text = preg_replace('/&quot;/', ' ', $text);		$text = strip_tags($text);		$text = htmlspecialchars($text, ENT_COMPAT, 'UTF-8');		return $text;	}	/**	 * Strip img-tags from string	 *	 * @param   string  $string  Sting to be cleaned.	 *	 * @return  string  Cleaned string	 *	 * @since   11.1	 */	public static function stripImages($string)	{		return preg_replace('#(<[/]?img.*>)#U', '', $string);	}	/**	 * Strip iframe-tags from string	 *	 * @param   string  $string  Sting to be cleaned.	 *	 * @return  string  Cleaned string	 *	 * @since   12.2	 */	public static function stripIframes($string)	{		return preg_replace('#(<[/]?iframe.*>)#U', '', $string);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('bootstrap.tooltip');?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="login-form" class="form-inline">	<?php if ($params->get('pretext')) : ?>		<div class="pretext">		<p><?php echo $params->get('pretext'); ?></p>		</div>	<?php endif; ?>	<div class="userdata">		<div id="form-login-username" class="control-group">			<div class="controls">				<?php if (!$params->get('usetext')) : ?>					<div class="input-prepend input-append">						<span class="add-on">							<span class="icon-user tip" title="<?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?>"></span>							<label for="modlgn-username" class="element-invisible"><?php echo JText::_('MOD_LOGIN_VALUE_USERNAME'); ?></label>						</span>						<input id="modlgn-username" type="text" name="username" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?>" />					</div>				<?php else: ?>					<label for="modlgn-username"><?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?></label>						<input id="modlgn-username" type="text" name="username" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?>" />				<?php endif; ?>			</div>		</div>		<div id="form-login-password" class="control-group">			<div class="controls">				<?php if (!$params->get('usetext')) : ?>					<div class="input-prepend input-append">						<span class="add-on">							<span class="icon-lock tip" title="<?php echo JText::_('JGLOBAL_PASSWORD') ?>">							</span>								<label for="modlgn-passwd" class="element-invisible"><?php echo JText::_('JGLOBAL_PASSWORD'); ?>							</label>						</span>						<input id="modlgn-passwd" type="password" name="password" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('JGLOBAL_PASSWORD') ?>" />				</div>				<?php else: ?>					<label for="modlgn-passwd"><?php echo JText::_('JGLOBAL_PASSWORD') ?></label>					<input id="modlgn-passwd" type="password" name="password" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('JGLOBAL_PASSWORD') ?>" />				<?php endif; ?>			</div>		</div>		<?php if (JPluginHelper::isEnabled('system', 'remember')) : ?>		<div id="form-login-remember" class="control-group checkbox">			<label for="modlgn-remember" class="control-label"><?php echo JText::_('MOD_LOGIN_REMEMBER_ME') ?></label> <input id="modlgn-remember" type="checkbox" name="remember" class="inputbox" value="yes"/>		</div>		<?php endif; ?>		<div id="form-login-submit" class="control-group">			<div class="controls">				<button type="submit" tabindex="0" name="Submit" class="btn btn-primary"><?php echo JText::_('JLOGIN') ?></button>			</div>		</div>		<?php			$usersConfig = JComponentHelper::getParams('com_users');			if ($usersConfig->get('allowUserRegistration')) : ?>			<ul class="unstyled">				<li>					<a href="<?php echo JRoute::_('index.php?option=com_users&view=registration'); ?>">					<?php echo JText::_('MOD_LOGIN_REGISTER'); ?> <span class="icon-arrow-right"></span></a>				</li>				<li>					<a href="<?php echo JRoute::_('index.php?option=com_users&view=remind'); ?>">					  <?php echo JText::_('MOD_LOGIN_FORGOT_YOUR_USERNAME'); ?></a>				</li>				<li>					<a href="<?php echo JRoute::_('index.php?option=com_users&view=reset'); ?>"><?php echo JText::_('MOD_LOGIN_FORGOT_YOUR_PASSWORD'); ?></a>				</li>			</ul>		<?php endif; ?>		<input type="hidden" name="option" value="com_users" />		<input type="hidden" name="task" value="user.login" />		<input type="hidden" name="return" value="<?php echo $return; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div>	<?php if ($params->get('posttext')) : ?>		<div class="posttext">		<p><?php echo $params->get('posttext'); ?></p>		</div>	<?php endif; ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Indexer controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderControllerFilter extends JControllerForm{	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable. [optional]	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions). [optional]	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   2.5	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$input = $app->input;		$lang = JFactory::getLanguage();		$model = $this->getModel();		$table = $model->getTable();		$data = $input->post->get('jform', array(), 'array');		$checkin = property_exists($table, 'checked_out');		$context = "$this->option.edit.$this->context";		$task = $this->getTask();		// Determine the name of the primary key for the data.		if (empty($key))		{			$key = $table->getKeyName();		}		// To avoid data collisions the urlVar may be different from the primary key.		if (empty($urlVar))		{			$urlVar = $key;		}		$recordId = $input->get($urlVar, '', 'int');		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and tried to save it. We don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));			return false;		}		// Populate the row id from the session.		$data[$key] = $recordId;		// The save2copy task needs to be handled slightly differently.		if ($task == 'save2copy')		{			// Check-in the original row.			if ($checkin && $model->checkin($data[$key]) === false)			{				// Check-in failed. Go back to the item and display a notice.				$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));				$this->setMessage($this->getError(), 'error');				$this->setRedirect('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $urlVar));				return false;			}			// Reset the ID and then treat the request as for Apply.			$data[$key] = 0;			$task = 'apply';		}		// Access check.		if (!$this->allowSave($data, $key))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));			return false;		}		// Validate the posted data.		// Sometimes the form needs some posted data, such as for plugins and modules.		$form = $model->getForm($data, false);		if (!$form)		{			$app->enqueueMessage($model->getError(), 'error');			return false;		}		// Test whether the data is valid.		$validData = $model->validate($form, $data);		// Check for validation errors.		if ($validData === false)		{			// Get the validation messages.			$errors = $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if (($errors[$i]) instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState($context . '.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));			return false;		}		// Get and sanitize the filter data.		$validData['data'] = $input->post->get('t', array(), 'array');		$validData['data'] = array_unique($validData['data']);		JArrayHelper::toInteger($validData['data']);		// Remove any values of zero.		if (array_search(0, $validData['data'], true))		{			unset($validData['data'][array_search(0, $validData['data'], true)]);		}		// Attempt to save the data.		if (!$model->save($validData))		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Redirect back to the edit screen.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));			return false;		}		// Save succeeded, so check-in the record.		if ($checkin && $model->checkin($validData[$key]) === false)		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Check-in failed, so go back to the record and display a notice.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key));			return false;		}		$this->setMessage(			JText::_(				($lang->hasKey($this->text_prefix . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS')				? $this->text_prefix : 'JLIB_APPLICATION') . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS'			)		);		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the record data in the session.				$recordId = $model->getState($this->context . '.id');				$this->holdEditId($context, $recordId);				$app->setUserState($context . '.data', null);				$model->checkout($recordId);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));				break;			case 'save2new':				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend(null, $key), false));				break;			default:				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));				break;		}		// Invoke the postSave method to allow for the child class to access the model.		$this->postSaveHook($model, $validData);		return true;	}}
