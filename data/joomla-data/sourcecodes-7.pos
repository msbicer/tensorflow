<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Impressions Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldImpTotal extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ImpTotal';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$class		= ' class="validate-numeric text_area"';		$onchange	= ' onchange="document.id(\''.$this->id.'_unlimited\').checked=document.id(\''.$this->id.'\').value==\'\';"';		$onclick	= ' onclick="if (document.id(\''.$this->id.'_unlimited\').checked) document.id(\''.$this->id.'\').value=\'\';"';		$value		= empty($this->value) ? '' : $this->value;		$checked	= empty($this->value) ? ' checked="checked"' : '';		return '<input type="text" name="'.$this->name.'" id="'.$this->id.'" size="9" value="'.htmlspecialchars($value, ENT_COMPAT, 'UTF-8').'" '.$class.$onchange.' />		<fieldset class="checkboxes impunlimited"><input id="'.$this->id.'_unlimited" type="checkbox"'.$checked.$onclick.' />		<label for="'.$this->id.'_unlimited" id="jform-imp" type="text">'.JText::_('COM_BANNERS_UNLIMITED').'</label></fieldset>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_TEMPLATES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<fieldset class="panelform">			<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<li>				<?php if (!$field->hidden) : ?>					<?php echo $field->label; ?>				<?php endif; ?>					<?php echo $field->input; ?>				</li>			<?php endforeach; ?>			</ul>		</fieldset>	<?php endforeach;  ?>
<?php/** * @package     Joomla.Site * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$rssurl	= $params->get('rssurl', '');$rssrtl	= $params->get('rssrtl', 0);//check if feed URL has been setif (empty ($rssurl)){	echo '<div>';	echo JText::_('MOD_FEED_ERR_NO_URL');	echo '</div>';	return;}$feed = ModFeedHelper::getFeed($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_feed', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.folder');/** * Controller class to set the FTP data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerRemovefolder extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		$path = JPATH_INSTALLATION;		// Check whether the folder still exists		if (!file_exists($path))		{			$app->sendJsonResponse(new Exception(JText::sprintf('INSTL_COMPLETE_ERROR_FOLDER_ALREADY_REMOVED'), 500));		}		// Check whether we need to use FTP		$useFTP = false;		if ((file_exists($path) && !is_writable($path)))		{			$useFTP = true;		}		// Check for safe mode		if (ini_get('safe_mode'))		{			$useFTP = true;		}		// Enable/Disable override		if (!isset($options->ftpEnable) || ($options->ftpEnable != 1))		{			$useFTP = false;		}		if ($useFTP == true)		{			// Connect the FTP client			jimport('joomla.filesystem.path');			$ftp = JClientFtp::getInstance($options->ftp_host, $options->ftp_port);			$ftp->login($options->ftp_user, $options->ftp_pass);			// Translate path for the FTP account			$file = JPath::clean(str_replace(JPATH_CONFIGURATION, $options->ftp_root, $path), '/');			$return = $ftp->delete($file);			// Delete the extra XML file while we're at it			if ($return)			{				$file = JPath::clean($options->ftp_root . '/joomla.xml');				if (file_exists($file))				{					$return = $ftp->delete($file);				}			}			// Rename the robots.txt.dist file to robots.txt			if ($return)			{				$robotsFile = JPath::clean($options->ftp_root . '/robots.txt');				$distFile = JPath::clean($options->ftp_root . '/robots.txt.dist');				if (!file_exists($robotsFile) && file_exists($distFile))				{					$return = $ftp->rename($distFile, $robotsFile);				}			}			$ftp->quit();		}		else		{			/*			 * Try to delete the folder.			 * We use output buffering so that any error message echoed JFolder::delete			 * doesn't land in our JSON output.			 */			ob_start();			$return = JFolder::delete($path) && (!file_exists(JPATH_ROOT . '/joomla.xml') || JFile::delete(JPATH_ROOT . '/joomla.xml'));			// Rename the robots.txt.dist file if robots.txt doesn't exist			if ($return && !file_exists(JPATH_ROOT . '/robots.txt') && file_exists(JPATH_ROOT . '/robots.txt.dist'))			{				$return = JFile::move(JPATH_ROOT . '/robots.txt.dist', JPATH_ROOT . '/robots.txt');			}			ob_end_clean();		}		// If an error was encountered return an error.		if (!$return)		{			$app->sendJsonResponse(new Exception(JText::_('INSTL_COMPLETE_ERROR_FOLDER_DELETE'), 500));		}		// Create a response body.		$r = new stdClass;		$r->text = JText::_('INSTL_COMPLETE_FOLDER_REMOVED');		/*		 * Send the response		 * This is a hack since by now, the rest of the folder is deleted and we can't make a new request		 */		$this->sendJsonResponse($r);	}	/**	 * Method to send a JSON response. The data parameter	 * can be a Exception object for when an error has occurred or	 * a stdClass for a good response.	 *	 * @param   mixed  $response  stdClass on success, Exception on failure.	 *	 * @return  void	 *	 * @since   3.1	 */	public function sendJsonResponse($response)	{		// Check if we need to send an error code.		if ($response instanceof Exception)		{			// Send the appropriate error code response.			$this->setHeader('status', $response->getCode());			$this->setHeader('Content-Type', 'application/json; charset=utf-8');			$this->sendHeaders();		}		// Send the JSON response.		JLoader::register('InstallationResponseJson', __FILE__);		echo json_encode(new InstallationResponseJson($response));		// Close the application.		exit;	}}/** * JSON Response class for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Response * @since       3.1 */class InstallationResponseJson{	/**	 * Constructor for the JSON response	 *	 * @param   mixed  $data  Exception if there is an error, otherwise, the session data	 *	 * @since   3.1	 */	public function __construct($data)	{		// The old token is invalid so send a new one.		$this->token = JSession::getFormToken(true);		// Get the language and send it's tag along		$this->lang = JFactory::getLanguage()->getTag();		// Get the message queue		$messages = JFactory::getApplication()->getMessageQueue();		// Build the sorted message list		if (is_array($messages) && count($messages))		{			foreach ($messages as $msg)			{				if (isset($msg['type']) && isset($msg['message']))				{					$lists[$msg['type']][] = $msg['message'];				}			}		}		// If messages exist add them to the output		if (isset($lists) && is_array($lists))		{			$this->messages = $lists;		}		// Check if we are dealing with an error.		if ($data instanceof Exception)		{			// Prepare the error response.			$this->error   = true;			$this->header  = JText::_('INSTL_HEADER_ERROR');			$this->message = $data->getMessage();		}		else		{			// Prepare the response data.			$this->error = false;			$this->data  = $data;		}	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Version information class for the Joomla Platform. * * @package  Joomla.Platform * @since    11.1 */final class JPlatform{	// Product name.	const PRODUCT = 'Joomla Platform';	// Release version.	const RELEASE = '12.2';	// Maintenance version.	const MAINTENANCE = '0';	// Development STATUS.	const STATUS = 'Stable';	// Build number.	const BUILD = 0;	// Code name.	const CODE_NAME = 'Neil Armstrong';	// Release date.	const RELEASE_DATE = '21-September-2012';	// Release time.	const RELEASE_TIME = '00:00';	// Release timezone.	const RELEASE_TIME_ZONE = 'GMT';	// Copyright Notice.	const COPYRIGHT = 'Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved.';	// Link text.	const LINK_TEXT = '<a href="http://www.joomla.org">Joomla!</a> is Free Software released under the GNU General Public License.';	/**	 * Compares two a "PHP standardized" version number against the current Joomla Platform version.	 *	 * @param   string  $minimum  The minimum version of the Joomla Platform which is compatible.	 *	 * @return  boolean  True if the version is compatible.	 *	 * @see     http://www.php.net/version_compare	 * @since   11.1	 */	public static function isCompatible($minimum)	{		return (version_compare(self::getShortVersion(), $minimum, 'eq') == 1);	}	/**	 * Gets a "PHP standardized" version string for the current Joomla Platform.	 *	 * @return  string  Version string.	 *	 * @since   11.1	 */	public static function getShortVersion()	{		return self::RELEASE . '.' . self::MAINTENANCE;	}	/**	 * Gets a version string for the current Joomla Platform with all release information.	 *	 * @return  string  Complete version string.	 *	 * @since   11.1	 */	public static function getLongVersion()	{		return self::PRODUCT . ' ' . self::RELEASE . '.' . self::MAINTENANCE . ' ' . self::STATUS . ' [ ' . self::CODE_NAME . ' ] '			. self::RELEASE_DATE . ' ' . self::RELEASE_TIME . ' ' . self::RELEASE_TIME_ZONE;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Languages component * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesViewLanguage extends JViewLegacy{	public $item;	public $form;	public $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->item = $this->get('Item');		$this->form = $this->get('Form');		$this->state = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since  1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT . '/helpers/languages.php';		JFactory::getApplication()->input->set('hidemainmenu', 1);		$isNew = empty($this->item->lang_id);		$canDo = LanguagesHelper::getActions();		JToolbarHelper::title(JText::_($isNew ? 'COM_LANGUAGES_VIEW_LANGUAGE_EDIT_NEW_TITLE' : 'COM_LANGUAGES_VIEW_LANGUAGE_EDIT_EDIT_TITLE'), 'langmanager.png');		// If a new item, can save.		if ($isNew && $canDo->get('core.create'))		{			JToolbarHelper::save('language.save');		}		//If an existing item, allow to Apply and Save.		if (!$isNew && $canDo->get('core.edit'))		{			JToolbarHelper::apply('language.apply');			JToolbarHelper::save('language.save');		}		// If an existing item, can save to a copy only if we have create rights.		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('language.save2new');		}		if ($isNew)		{			JToolbarHelper::cancel('language.cancel');		}		else		{			JToolbarHelper::cancel('language.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_EDIT');		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Finder route helper class. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderHelperRoute{	/**	 * Method to get the route for a search page.	 *	 * @param   integer  $f  The search filter id. [optional]	 * @param   string   $q  The search query string. [optional]	 *	 * @return  string  The search route.	 *	 * @since   2.5	 */	public static function getSearchRoute($f = null, $q = null)	{		// Get the menu item id.		$query = array('view' => 'search', 'q' => $q, 'f' => $f);		$item = self::getItemid($query);		// Get the base route.		$uri = clone(JUri::getInstance('index.php?option=com_finder&view=search'));		// Add the pre-defined search filter if present.		if ($f !== null)		{			$uri->setVar('f', $f);		}		// Add the search query string if present.		if ($q !== null)		{			$uri->setVar('q', $q);		}		// Add the menu item id if present.		if ($item !== null)		{			$uri->setVar('Itemid', $item);		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get the route for an advanced search page.	 *	 * @param   integer  $f  The search filter id. [optional]	 * @param   string   $q  The search query string. [optional]	 *	 * @return  string  The advanced search route.	 *	 * @since   2.5	 */	public static function getAdvancedRoute($f = null, $q = null)	{		// Get the menu item id.		$query = array('view' => 'advanced', 'q' => $q, 'f' => $f);		$item = self::getItemid($query);		// Get the base route.		$uri = clone(JUri::getInstance('index.php?option=com_finder&view=advanced'));		// Add the pre-defined search filter if present.		if ($q !== null)		{			$uri->setVar('f', $f);		}		// Add the search query string if present.		if ($q !== null)		{			$uri->setVar('q', $q);		}		// Add the menu item id if present.		if ($item !== null)		{			$uri->setVar('Itemid', $item);		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get the most appropriate menu item for the route based on the	 * supplied query needles.	 *	 * @param   array  $query  An array of URL parameters.	 *	 * @return  mixed  An integer on success, null otherwise.	 *	 * @since   2.5	 */	public static function getItemid($query)	{		static $items, $active;		// Get the menu items for com_finder.		if (!$items || !$active)		{			$app = JFactory::getApplication('site');			$com = JComponentHelper::getComponent('com_finder');			$menu = $app->getMenu();			$active = $menu->getActive();			$items = $menu->getItems('component_id', $com->id);			$items = is_array($items) ? $items : array();		}		// Try to match the active view and filter.		if ($active && @$active->query['view'] == @$query['view'] && @$active->query['f'] == @$query['f'])		{			return $active->id;		}		// Try to match the view, query, and filter.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'] && @$item->query['q'] == @$query['q'] && @$item->query['f'] == @$query['f'])			{				return $item->id;			}		}		// Try to match the view and filter.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'] && @$item->query['f'] == @$query['f'])			{				return $item->id;			}		}		// Try to match the view.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'])			{				return $item->id;			}		}		return null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform long">	<legend><?php echo JText::_('COM_CONFIG_SEO_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('seo') as $field):			?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Utility class to render a list view sidebar * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlSidebar{	/**	 * Menu entries	 *	 * @var    array	 * @since  3.0	 */	protected static $entries = array();	/**	 * Filters	 *	 * @var    array	 * @since  3.0	 */	protected static $filters = array();	/**	 * Value for the action attribute of the form.	 *	 * @var    string	 * @since  3.0	 */	protected static $action = '';	/**	 * Render the sidebar.	 *	 * @return  string  The necessary HTML to display the sidebar	 *	 * @since   3.0	 */	public static function render()	{		// Collect display data		$data                 = new stdClass;		$data->list           = self::getEntries();		$data->filters        = self::getFilters();		$data->action         = self::getAction();		$data->displayMenu    = count($data->list);		$data->displayFilters = count($data->filters);		$data->hide           = JFactory::getApplication()->input->getBool('hidemainmenu');		// Create a layout object and ask it to render the sidebar		$layout      = new JLayoutFile('joomla.sidebars.submenu');		$sidebarHtml = $layout->render($data);		return $sidebarHtml;	}	/**	 * Method to add a menu item to submenu.	 *	 * @param   string  $name    Name of the menu item.	 * @param   string  $link    URL of the menu item.	 * @param   bool    $active  True if the item is active, false otherwise.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function addEntry($name, $link = '', $active = false)	{		array_push(self::$entries, array($name, $link, $active));	}	/**	 * Returns an array of all submenu entries	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getEntries()	{		return self::$entries;	}	/**	 * Method to add a filter to the submenu	 *	 * @param   string  $label      Label for the menu item.	 * @param   string  $name       Name for the filter. Also used as id.	 * @param   string  $options    Options for the select field.	 * @param   bool    $noDefault  Don't the label as the empty option	 *	 * @return  void	 *	 * @since   3.0	 */	public static function addFilter($label, $name, $options, $noDefault = false)	{		array_push(self::$filters, array('label' => $label, 'name' => $name, 'options' => $options, 'noDefault' => $noDefault));	}	/**	 * Returns an array of all filters	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getFilters()	{		return self::$filters;	}	/**	 * Set value for the action attribute of the filter form	 *	 * @param   string  $action  Value for the action attribute of the form	 *	 * @return  void	 *	 * @since   3.0	 */	public static function setAction($action)	{		self::$action = $action;	}	/**	 * Get value for the action attribute of the filter form	 *	 * @return  string	 *	 * @since   3.0	 */	public static function getAction()	{		return self::$action;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JMenu class * * @package     Joomla.Legacy * @subpackage  Menu * @since       11.1 */class JMenu{	/**	 * Array to hold the menu items	 *	 * @var    array	 * @since   11.1	 */	protected $_items = array();	/**	 * Identifier of the default menu item	 *	 * @var    integer	 * @since   11.1	 */	protected $_default = array();	/**	 * Identifier of the active menu item	 *	 * @var    integer	 * @since  11.1	 */	protected $_active = 0;	/**	 * @var    array  JMenu instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor	 *	 * @param   array  $options  An array of configuration options.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		// Load the menu items		$this->load();		foreach ($this->_items as $item)		{			if ($item->home)			{				$this->_default[trim($item->language)] = $item->id;			}			// Decode the item params			$result = new JRegistry;			$result->loadString($item->params);			$item->params = $result;		}	}	/**	 * Returns a JMenu object	 *	 * @param   string  $client   The name of the client	 * @param   array   $options  An associative array of options	 *	 * @return  JMenu  A menu object.	 *	 * @since   11.1	 */	public static function getInstance($client, $options = array())	{		if (empty(self::$instances[$client]))		{			// Create a JMenu object			$classname = 'JMenu' . ucfirst($client);			if (!class_exists($classname))			{				// @deprecated 13.3 Everything in this block is deprecated but the warning is only logged after the file_exists				// Load the menu object				$info = JApplicationHelper::getClientInfo($client, true);				if (is_object($info))				{					$path = $info->path . '/includes/menu.php';					if (file_exists($path))					{						JLog::add('Non-autoloadable JMenu subclasses are deprecated.', JLog::WARNING, 'deprecated');						include_once $path;					}				}			}			if (class_exists($classname))			{				self::$instances[$client] = new $classname($options);			}			else			{				throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_MENU_LOAD', $client), 500);			}		}		return self::$instances[$client];	}	/**	 * Get menu item by id	 *	 * @param   integer  $id  The item id	 *	 * @return  mixed    The item object, or null if not found	 *	 * @since   11.1	 */	public function getItem($id)	{		$result = null;		if (isset($this->_items[$id]))		{			$result = &$this->_items[$id];		}		return $result;	}	/**	 * Set the default item by id and language code.	 *	 * @param   integer  $id        The menu item id.	 * @param   string   $language  The language cod (since 1.6).	 *	 * @return  boolean  True, if successful	 *	 * @since   11.1	 */	public function setDefault($id, $language = '')	{		if (isset($this->_items[$id]))		{			$this->_default[$language] = $id;			return true;		}		return false;	}	/**	 * Get the default item by language code.	 *	 * @param   string  $language  The language code, default value of * means all.	 *	 * @return  object  The item object	 *	 * @since   11.1	 */	public function getDefault($language = '*')	{		if (array_key_exists($language, $this->_default))		{			return $this->_items[$this->_default[$language]];		}		elseif (array_key_exists('*', $this->_default))		{			return $this->_items[$this->_default['*']];		}		else		{			return 0;		}	}	/**	 * Set the default item by id	 *	 * @param   integer  $id  The item id	 *	 * @return  mixed  If successful the active item, otherwise null	 *	 * @since   11.1	 */	public function setActive($id)	{		if (isset($this->_items[$id]))		{			$this->_active = $id;			$result = &$this->_items[$id];			return $result;		}		return null;	}	/**	 * Get menu item by id.	 *	 * @return  object  The item object.	 *	 * @since   11.1	 */	public function getActive()	{		if ($this->_active)		{			$item = &$this->_items[$this->_active];			return $item;		}		return null;	}	/**	 * Gets menu items by attribute	 *	 * @param   string   $attributes  The field name	 * @param   string   $values      The value of the field	 * @param   boolean  $firstonly   If true, only returns the first item found	 *	 * @return  array	 *	 * @since   11.1	 */	public function getItems($attributes, $values, $firstonly = false)	{		$items = array();		$attributes = (array) $attributes;		$values = (array) $values;		foreach ($this->_items as $item)		{			if (!is_object($item))			{				continue;			}			$test = true;			for ($i = 0, $count = count($attributes); $i < $count; $i++)			{				if (is_array($values[$i]))				{					if (!in_array($item->$attributes[$i], $values[$i]))					{						$test = false;						break;					}				}				else				{					if ($item->$attributes[$i] != $values[$i])					{						$test = false;						break;					}				}			}			if ($test)			{				if ($firstonly)				{					return $item;				}				$items[] = $item;			}		}		return $items;	}	/**	 * Gets the parameter object for a certain menu item	 *	 * @param   integer  $id  The item id	 *	 * @return  JRegistry  A JRegistry object	 *	 * @since   11.1	 */	public function getParams($id)	{		if ($menu = $this->getItem($id))		{			return $menu->params;		}		else		{			return new JRegistry;		}	}	/**	 * Getter for the menu array	 *	 * @return  array	 *	 * @since   11.1	 */	public function getMenu()	{		return $this->_items;	}	/**	 * Method to check JMenu object authorization against an access control	 * object and optionally an access extension object	 *	 * @param   integer  $id  The menu id	 *	 * @return  boolean  True if authorised	 *	 * @since   11.1	 */	public function authorise($id)	{		$menu = $this->getItem($id);		$user = JFactory::getUser();		if ($menu)		{			return in_array((int) $menu->access, $user->getAuthorisedViewLevels());		}		else		{			return true;		}	}	/**	 * Loads the menu items	 *	 * @return  array	 *	 * @since   11.1	 */	public function load()	{		return array();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	?>	<div class="tab-pane" id="params-<?php echo $name;?>">	<?php	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php endforeach; ?>	</div><?php endforeach; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));// Create a shortcut for params.$params = &$this->item->params;?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_CONTACT_NO_CONTACTS'); ?>	 </p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>	<?php if ($this->params->get('show_pagination_limit')) : ?>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	<?php endif; ?>	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	</fieldset>	<table class="category">		<?php if ($this->params->get('show_headings')) : ?>		<thead><tr>			<th class="item-num">				<?php echo JText::_('JGLOBAL_NUM'); ?>			</th>			<th class="item-title">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_CONTACT_EMAIL_NAME_LABEL', 'a.name', $listDirn, $listOrder); ?>			</th>			<?php if ($this->params->get('show_position_headings')) : ?>			<th class="item-position">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_POSITION', 'a.con_position', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_email_headings')) : ?>			<th class="item-email">				<?php echo JText::_('JGLOBAL_EMAIL'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_telephone_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_TELEPHONE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_mobile_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_MOBILE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_fax_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_FAX'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_suburb_headings')) : ?>			<th class="item-suburb">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_SUBURB', 'a.suburb', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_state_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_STATE', 'a.state', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_country_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_COUNTRY', 'a.country', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $item) : ?>				<tr class="<?php echo ($i % 2) ? "odd" : "even"; ?>">					<td class="item-num">						<?php echo $i; ?>					</td>					<td class="item-title">						<?php if ($this->items[$i]->published == 0) : ?>							<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>						<?php endif; ?>						<a href="<?php echo JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</td>					<?php if ($this->params->get('show_position_headings')) : ?>						<td class="item-position">							<?php echo $item->con_position; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_email_headings')) : ?>						<td class="item-email">							<?php echo $item->email_to; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_telephone_headings')) : ?>						<td class="item-phone">							<?php echo $item->telephone; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_mobile_headings')) : ?>						<td class="item-phone">							<?php echo $item->mobile; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_fax_headings')) : ?>					<td class="item-phone">						<?php echo $item->fax; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_suburb_headings')) : ?>					<td class="item-suburb">						<?php echo $item->suburb; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_state_headings')) : ?>					<td class="item-state">						<?php echo $item->state; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_country_headings')) : ?>					<td class="item-state">						<?php echo $item->country; ?>					</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table></form><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  mod_random_image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="random-image<?php echo $moduleclass_sfx ?>"><?php if ($link) : ?><a href="<?php echo $link; ?>"><?php endif; ?>	<?php echo JHtml::_('image', $image->folder.'/'.$image->name, $image->name, array('width' => $image->width, 'height' => $image->height)); ?><?php if ($link) : ?></a><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="submenu-box">	<div class="submenu-box">		<div class="submenu-pad">			<ul id="submenu" class="information nav nav-list">				<li>					<a href="#" onclick="return false;" id="site" class="active">						<?php echo JText::_('COM_ADMIN_SYSTEM_INFORMATION'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="phpsettings">						<?php echo JText::_('COM_ADMIN_PHP_SETTINGS'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="config">						<?php echo JText::_('COM_ADMIN_CONFIGURATION_FILE'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="directory">						<?php echo JText::_('COM_ADMIN_DIRECTORY_PERMISSIONS'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="phpinfo">						<?php echo JText::_('COM_ADMIN_PHP_INFORMATION'); ?></a>				</li>			</ul>			<div class="clr"></div>		</div>	</div>	<div class="clr"></div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google API data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleData{	/**	 * @var    JRegistry  Options for the Google data object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JGoogleAuth  Authentication client for the Google data object.	 * @since  12.3	 */	protected $auth;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object.	 * @param   JGoogleAuth  $auth     Google data http client object.	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->auth = isset($auth) ? $auth : new JGoogleAuthOauth2($this->options);	}	/**	 * Method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	public function authenticate()	{		return $this->auth->authenticate();	}	/**	 * Check authentication	 *	 * @return  boolean  True if authenticated.	 *	 * @since   12.3	 */	public function isAuthenticated()	{		return $this->auth->isAuthenticated();	}	/**	 * Method to validate XML	 *	 * @param   string  $data  XML data to be parsed	 *	 * @return  SimpleXMLElement  XMLElement of parsed data	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected static function safeXML($data)	{		try		{			return new SimpleXMLElement($data, LIBXML_NOWARNING | LIBXML_NOERROR);		}		catch (Exception $e)		{			throw new UnexpectedValueException("Unexpected data received from Google: `$data`.");		}	}	/**	 * Method to retrieve a list of data	 *	 * @param   array   $url       URL to GET	 * @param   int     $maxpages  Maximum number of pages to return	 * @param   string  $token     Next page token	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected function listGetData($url, $maxpages = 1, $token = null)	{		$qurl = $url;		if (strpos($url, '&') && isset($token))		{			$qurl .= '&pageToken=' . $token;		}		elseif (isset($token))		{			$qurl .= 'pageToken=' . $token;		}		$jdata = $this->query($qurl);		$data = json_decode($jdata->body, true);		if ($data && array_key_exists('items', $data))		{			if ($maxpages != 1 && array_key_exists('nextPageToken', $data))			{				$data['items'] = array_merge($data['items'], $this->listGetData($url, $maxpages - 1, $data['nextPageToken']));			}			return $data['items'];		}		elseif ($data)		{			return array();		}		else		{			throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");		}	}	/**	 * Method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	protected function query($url, $data = null, $headers = null, $method = 'get')	{		return $this->auth->query($url, $data, $headers, $method);	}	/**	 * Get an option from the JGoogleData instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleData instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleData  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');?><div class="login <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<?php if (($this->params->get('logindescription_show') == 1 && str_replace(' ', '', $this->params->get('login_description')) != '') || $this->params->get('login_image') != '') : ?>	<div class="login-description">	<?php endif; ?>		<?php if ($this->params->get('logindescription_show') == 1) : ?>			<?php echo $this->params->get('login_description'); ?>		<?php endif; ?>		<?php if (($this->params->get('login_image') != '')) :?>			<img src="<?php echo $this->escape($this->params->get('login_image')); ?>" class="login-image" alt="<?php echo JTEXT::_('COM_USER_LOGIN_IMAGE_ALT')?>"/>		<?php endif; ?>	<?php if (($this->params->get('logindescription_show') == 1 && str_replace(' ', '', $this->params->get('login_description')) != '') || $this->params->get('login_image') != '') : ?>	</div>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=user.login'); ?>" method="post" class="form-horizontal">		<fieldset class="well">			<?php foreach ($this->form->getFieldset('credentials') as $field) : ?>				<?php if (!$field->hidden) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endif; ?>			<?php endforeach; ?>			<div class="control-group">				<div class="controls">					<button type="submit" class="btn btn-primary"><?php echo JText::_('JLOGIN'); ?></button>				</div>			</div>			<input type="hidden" name="return" value="<?php echo base64_encode($this->params->get('login_redirect_url', $this->form->getValue('return'))); ?>" />			<?php echo JHtml::_('form.token'); ?>		</fieldset>	</form></div><div>	<ul class="nav nav-tabs nav-stacked">		<li>			<a href="<?php echo JRoute::_('index.php?option=com_users&view=reset'); ?>">			<?php echo JText::_('COM_USERS_LOGIN_RESET'); ?></a>		</li>		<li>			<a href="<?php echo JRoute::_('index.php?option=com_users&view=remind'); ?>">			<?php echo JText::_('COM_USERS_LOGIN_REMIND'); ?></a>		</li>		<?php		$usersConfig = JComponentHelper::getParams('com_users');		if ($usersConfig->get('allowUserRegistration')) : ?>		<li>			<a href="<?php echo JRoute::_('index.php?option=com_users&view=registration'); ?>">				<?php echo JText::_('COM_USERS_LOGIN_REGISTER'); ?></a>		</li>		<?php endif; ?>	</ul></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Set up the sanitised target for the ul$ulTarget = str_replace('/', '-', $this->folders['data']->relative);?><ul class="nav nav-list collapse in" id="collapseFolder-<?php echo $ulTarget; ?>"><?php if (isset($this->folders['children'])) :	foreach ($this->folders['children'] as $folder) :	// Get a sanitised name for the target	$target = str_replace('/', '-', $folder['data']->relative); ?>	<li id="<?php echo $target; ?>">		<i class="icon-folder-2 pull-left" data-toggle="collapse" data-target="#collapseFolder-<?php echo $target; ?>"></i>		<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $folder['data']->relative; ?>" target="folderframe">			<?php echo $folder['data']->name; ?>		</a>		<?php echo $this->getFolderLevel($folder); ?>	</li><?php endforeach;endif; ?></ul>
<?php/** * Squiz_Sniffs_Strings_ConcatenationSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ConcatenationSpacingSniff.php 151 2010-11-26 01:07:46Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Makes sure there are is a spaces between the concatenation operator <b>.</b> and the strings being concatenated. * * Example: * <b class="bad">$a = $b.$c;</b> * <b class="good">$a = $b . $c;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_ConcatenationSpacingSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns an array of tokens this test wants to listen for.	 *	 * @return array	 */	public function register()	{		return array(T_STRING_CONCAT);	}//function	/**	 * Processes this test, when one of its tokens is encountered.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.	 * @param integer $stackPtr The position of the current token in the	 *                                        stack passed in $tokens.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		if ($tokens[($stackPtr + 1)]['code'] != T_WHITESPACE)		{			// space after			$message = 'Concat operator must be followed by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			$found = strlen($tokens[($stackPtr + 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space after concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}		if ($tokens[($stackPtr - 1)]['code'] != T_WHITESPACE)		{			// space before			$message = 'Concat operator must be preceeded by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			if (strpos($tokens[($stackPtr - 2)]['content'], $phpcsFile->eolChar) !== false			|| strpos($tokens[($stackPtr - 1)]['content'], $phpcsFile->eolChar) !== false)			{				// the dot is on a new line				return;			}			$found = strlen($tokens[($stackPtr - 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space before concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}	}//function}//class
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_DIRECTORY_PERMISSIONS'); ?></legend>		<table class="table table-striped">			<thead>				<tr>					<th width="650">						<?php echo JText::_('COM_ADMIN_DIRECTORY'); ?>					</th>					<th>						<?php echo JText::_('COM_ADMIN_STATUS'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="2">&#160;</td>				</tr>			</tfoot>			<tbody>				<?php foreach ($this->directory as $dir => $info) : ?>					<tr>						<td>							<?php echo JHtml::_('directory.message', $dir, $info['message']);?>						</td>						<td>							<?php echo JHtml::_('directory.writable', $info['writable']);?>						</td>					</tr>				<?php endforeach; ?>			</tbody>		</table></fieldset>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.application.router');/** * Class to create and parse routes * * @package  Joomla.Installation * @since    1.5 */class JRouterInstallation extends JRouter{	/**	 * Function to convert a route to an internal URI	 *	 * @param   JURI  $url  The uri.	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function parse($url)	{		return true;	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 *	 * @since   1.5	 */	public function build($url)	{		$url = str_replace('&amp;', '&', $url);		return new JUri($url);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to model a Web Client. * * @property-read  integer  $platform        The detected platform on which the web client runs. * @property-read  boolean  $mobile          True if the web client is a mobile device. * @property-read  integer  $engine          The detected rendering engine used by the web client. * @property-read  integer  $browser         The detected browser used by the web client. * @property-read  string   $browserVersion  The detected browser version used by the web client. * @property-read  array    $languages       The priority order detected accepted languages for the client. * @property-read  array    $encodings       The priority order detected accepted encodings for the client. * @property-read  string   $userAgent       The web client's user agent string. * @property-read  string   $acceptEncoding  The web client's accepted encoding string. * @property-read  string   $acceptLanguage  The web client's accepted languages string. * @property-read  array    $detection       An array of flags determining whether or not a detection routine has been run. * @property-read  boolean  $robot           True if the web client is a robot * * @package     Joomla.Platform * @subpackage  Application * @since       12.1 */class JApplicationWebClient{	const WINDOWS = 1;	const WINDOWS_PHONE = 2;	const WINDOWS_CE = 3;	const IPHONE = 4;	const IPAD = 5;	const IPOD = 6;	const MAC = 7;	const BLACKBERRY = 8;	const ANDROID = 9;	const LINUX = 10;	const TRIDENT = 11;	const WEBKIT = 12;	const GECKO = 13;	const PRESTO = 14;	const KHTML = 15;	const AMAYA = 16;	const IE = 17;	const FIREFOX = 18;	const CHROME = 19;	const SAFARI = 20;	const OPERA = 21;	const ANDROIDTABLET = 22;	/**	 * @var    integer  The detected platform on which the web client runs.	 * @since  12.1	 */	protected $platform;	/**	 * @var    boolean  True if the web client is a mobile device.	 * @since  12.1	 */	protected $mobile = false;	/**	 * @var    integer  The detected rendering engine used by the web client.	 * @since  12.1	 */	protected $engine;	/**	 * @var    integer  The detected browser used by the web client.	 * @since  12.1	 */	protected $browser;	/**	 * @var    string  The detected browser version used by the web client.	 * @since  12.1	 */	protected $browserVersion;	/**	 * @var    array  The priority order detected accepted languages for the client.	 * @since  12.1	 */	protected $languages = array();	/**	 * @var    array  The priority order detected accepted encodings for the client.	 * @since  12.1	 */	protected $encodings = array();	/**	 * @var    string  The web client's user agent string.	 * @since  12.1	 */	protected $userAgent;	/**	 * @var    string  The web client's accepted encoding string.	 * @since  12.1	 */	protected $acceptEncoding;	/**	 * @var    string  The web client's accepted languages string.	 * @since  12.1	 */	protected $acceptLanguage;	/**	 * @var    boolean  True if the web client is a robot.	 * @since  12.3	 */	protected $robot = false;	/**	 * @var    array  An array of flags determining whether or not a detection routine has been run.	 * @since  12.1	 */	protected $detection = array();	/**	 * Class constructor.	 *	 * @param   string  $userAgent       The optional user-agent string to parse.	 * @param   string  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   string  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   12.1	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		// If no explicit user agent string was given attempt to use the implicit one from server environment.		if (empty($userAgent) && isset($_SERVER['HTTP_USER_AGENT']))		{			$this->userAgent = $_SERVER['HTTP_USER_AGENT'];		}		else		{			$this->userAgent = $userAgent;		}		// If no explicit acceptable encoding string was given attempt to use the implicit one from server environment.		if (empty($acceptEncoding) && isset($_SERVER['HTTP_ACCEPT_ENCODING']))		{			$this->acceptEncoding = $_SERVER['HTTP_ACCEPT_ENCODING'];		}		else		{			$this->acceptEncoding = $acceptEncoding;		}		// If no explicit acceptable languages string was given attempt to use the implicit one from server environment.		if (empty($acceptLanguage) && isset($_SERVER['HTTP_ACCEPT_LANGUAGE']))		{			$this->acceptLanguage = $_SERVER['HTTP_ACCEPT_LANGUAGE'];		}		else		{			$this->acceptLanguage = $acceptLanguage;		}	}	/**	 * Magic method to get an object property's value by name.	 *	 * @param   string  $name  Name of the property for which to return a value.	 *	 * @return  mixed  The requested value if it exists.	 *	 * @since   12.1	 */	public function __get($name)	{		switch ($name)		{			case 'mobile':			case 'platform':				if (empty($this->detection['platform']))				{					$this->detectPlatform($this->userAgent);				}				break;			case 'engine':				if (empty($this->detection['engine']))				{					$this->detectEngine($this->userAgent);				}				break;			case 'browser':			case 'browserVersion':				if (empty($this->detection['browser']))				{					$this->detectBrowser($this->userAgent);				}				break;			case 'languages':				if (empty($this->detection['acceptLanguage']))				{					$this->detectLanguage($this->acceptLanguage);				}				break;			case 'encodings':				if (empty($this->detection['acceptEncoding']))				{					$this->detectEncoding($this->acceptEncoding);				}				break;			case 'robot':				if (empty($this->detection['robot']))				{					$this->detectRobot($this->userAgent);				}				break;		}		// Return the property if it exists.		if (isset($this->$name))		{			return $this->$name;		}	}	/**	 * Detects the client browser and version in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectBrowser($userAgent)	{		// Attempt to detect the browser type.  Obviously we are only worried about major browsers.		if ((stripos($userAgent, 'MSIE') !== false) && (stripos($userAgent, 'Opera') === false))		{			$this->browser = self::IE;			$patternBrowser = 'MSIE';		}		elseif ((stripos($userAgent, 'Firefox') !== false) && (stripos($userAgent, 'like Firefox') === false))		{			$this->browser = self::FIREFOX;			$patternBrowser = 'Firefox';		}		elseif (stripos($userAgent, 'Chrome') !== false)		{			$this->browser = self::CHROME;			$patternBrowser = 'Chrome';		}		elseif (stripos($userAgent, 'Safari') !== false)		{			$this->browser = self::SAFARI;			$patternBrowser = 'Safari';		}		elseif (stripos($userAgent, 'Opera') !== false)		{			$this->browser = self::OPERA;			$patternBrowser = 'Opera';		}		// If we detected a known browser let's attempt to determine the version.		if ($this->browser)		{			// Build the REGEX pattern to match the browser version string within the user agent string.			$pattern = '#(?<browser>Version|' . $patternBrowser . ')[/ ]+(?<version>[0-9.|a-zA-Z.]*)#';			// Attempt to find version strings in the user agent string.			$matches = array();			if (preg_match_all($pattern, $userAgent, $matches))			{				// Do we have both a Version and browser match?				if (count($matches['browser']) == 2)				{					// See whether Version or browser came first, and use the number accordingly.					if (strripos($userAgent, 'Version') < strripos($userAgent, $patternBrowser))					{						$this->browserVersion = $matches['version'][0];					}					else					{						$this->browserVersion = $matches['version'][1];					}				}				elseif (count($matches['browser']) > 2)				{						$key = array_search('Version', $matches['browser']);						if ($key)						{							$this->browserVersion = $matches['version'][$key];						}				}				// We only have a Version or a browser so use what we have.				else				{					$this->browserVersion = $matches['version'][0];				}			}		}		// Mark this detection routine as run.		$this->detection['browser'] = true;	}	/**	 * Method to detect the accepted response encoding by the client.	 *	 * @param   string  $acceptEncoding  The client accept encoding string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEncoding($acceptEncoding)	{		// Parse the accepted encodings.		$this->encodings = array_map('trim', (array) explode(',', $acceptEncoding));		// Mark this detection routine as run.		$this->detection['acceptEncoding'] = true;	}	/**	 * Detects the client rendering engine in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEngine($userAgent)	{		// Attempt to detect the client engine -- starting with the most popular ... for now.		if (stripos($userAgent, 'MSIE') !== false || stripos($userAgent, 'Trident') !== false)		{			$this->engine = self::TRIDENT;		}		// Evidently blackberry uses WebKit and doesn't necessarily report it.  Bad RIM.		elseif (stripos($userAgent, 'AppleWebKit') !== false || stripos($userAgent, 'blackberry') !== false)		{			$this->engine = self::WEBKIT;		}		// We have to check for like Gecko because some other browsers spoof Gecko.		elseif (stripos($userAgent, 'Gecko') !== false && stripos($userAgent, 'like Gecko') === false)		{			$this->engine = self::GECKO;		}		// Sometimes Opera browsers don't say Presto.		elseif (stripos($userAgent, 'Opera') !== false || stripos($userAgent, 'Presto') !== false)		{			$this->engine = self::PRESTO;		}		// *sigh*		elseif (stripos($userAgent, 'KHTML') !== false)		{			$this->engine = self::KHTML;		}		// Lesser known engine but it finishes off the major list from Wikipedia :-)		elseif (stripos($userAgent, 'Amaya') !== false)		{			$this->engine = self::AMAYA;		}		// Mark this detection routine as run.		$this->detection['engine'] = true;	}	/**	 * Method to detect the accepted languages by the client.	 *	 * @param   mixed  $acceptLanguage  The client accept language string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectLanguage($acceptLanguage)	{		// Parse the accepted encodings.		$this->languages = array_map('trim', (array) explode(',', $acceptLanguage));		// Mark this detection routine as run.		$this->detection['acceptLanguage'] = true;	}	/**	 * Detects the client platform in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectPlatform($userAgent)	{		// Attempt to detect the client platform.		if (stripos($userAgent, 'Windows') !== false)		{			$this->platform = self::WINDOWS;			// Let's look at the specific mobile options in the Windows space.			if (stripos($userAgent, 'Windows Phone') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_PHONE;			}			elseif (stripos($userAgent, 'Windows CE') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_CE;			}		}		// Interestingly 'iPhone' is present in all iOS devices so far including iPad and iPods.		elseif (stripos($userAgent, 'iPhone') !== false)		{			$this->mobile = true;			$this->platform = self::IPHONE;			// Let's look at the specific mobile options in the iOS space.			if (stripos($userAgent, 'iPad') !== false)			{				$this->platform = self::IPAD;			}			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->platform = self::IPOD;			}		}			// In case where iPhone is not mentioed in iPad user agent string			elseif (stripos($userAgent, 'iPad') !== false)			{				$this->mobile = true;				$this->platform = self::IPAD;			}			// In case where iPhone is not mentioed in iPod user agent string			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->mobile = true;				$this->platform = self::IPOD;			}		// This has to come after the iPhone check because mac strings are also present in iOS devices.		elseif (preg_match('/macintosh|mac os x/i', $userAgent))		{			$this->platform = self::MAC;		}		elseif (stripos($userAgent, 'Blackberry') !== false)		{			$this->mobile = true;			$this->platform = self::BLACKBERRY;		}		elseif (stripos($userAgent, 'Android') !== false)		{			$this->mobile = true;			$this->platform = self::ANDROID;			/**			 * Attempt to distinguish between Android phones and tablets			 * There is no totally foolproof method but certain rules almost always hold			 *   Android 3.x is only used for tablets			 *   Some devices and browsers encourage users to change their UA string to include Tablet.			 *   Google encourages manufacturers to exclude the string Mobile from tablet device UA strings.			 *   In some modes Kindle Android devices include the string Mobile but they include the string Silk.			 */			if (stripos($userAgent, 'Android 3') !== false || stripos($userAgent, 'Tablet') !== false				|| stripos($userAgent, 'Mobile') === false || stripos($userAgent, 'Silk') !== false )			{				$this->platform = self::ANDROIDTABLET;			}		}		elseif (stripos($userAgent, 'Linux') !== false)		{			$this->platform = self::LINUX;		}		// Mark this detection routine as run.		$this->detection['platform'] = true;	}	/**	 * Determines if the browser is a robot or not.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function detectRobot($userAgent)	{		if (preg_match('/http|bot|robot|spider|crawler|curl|^$/i', $userAgent))		{			$this->robot = true;		}		else		{			$this->robot = false;		}		$this->detection['robot'] = true;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform long">	<legend><?php echo JText::_('COM_CONFIG_METADATA_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('metadata') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>			</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?>		<tr>			<td class="imgTotal">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">					<i class="icon-arrow-up"></i></a>			</td>			<td class="description">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">..</a>			</td>			<td>&#160;</td>			<td>&#160;</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>&#160;</td>		<?php endif;?>		</tr>
<?php/** * @package     Joomla.Site * @subpackage  mod_footer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app		= JFactory::getApplication();$date		= JFactory::getDate();$cur_year	= $date->format('Y');$csite_name	= $app->getCfg('sitename');if (JString::strpos(JText :: _('MOD_FOOTER_LINE1'), '%date%')){	$line1 = str_replace('%date%', $cur_year, JText :: _('MOD_FOOTER_LINE1'));}else {	$line1 = JText :: _('MOD_FOOTER_LINE1');}if (JString::strpos($line1, '%sitename%')){	$lineone = str_replace('%sitename%', $csite_name, $line1);}else {	$lineone = $line1;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_footer', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Media Manager Component Controller * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		JPluginHelper::importPlugin('content');		$vName = $this->input->get('view', 'media');		switch ($vName)		{			case 'images':				$vLayout = $this->input->get('layout', 'default');				$mName = 'manager';				break;			case 'imagesList':				$mName = 'list';				$vLayout = $this->input->get('layout', 'default');				break;			case 'mediaList':				$app	= JFactory::getApplication();				$mName = 'list';				$vLayout = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');				break;			case 'media':			default:				$vName = 'media';				$vLayout = $this->input->get('layout', 'default');				$mName = 'manager';				break;		}		$document = JFactory::getDocument();		$vType    = $document->getType();		// Get/Create the view		$view = $this->getView($vName, $vType);		$view->addTemplatePath(JPATH_COMPONENT_ADMINISTRATOR.'/views/'.strtolower($vName).'/tmpl');		// Get/Create the model		if ($model = $this->getModel($mName))		{			// Push the model into the view (as default)			$view->setModel($model, true);		}		// Set the layout		$view->setLayout($vLayout);		// Display the view		$view->display();		return $this;	}	public function ftpValidate()	{		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Pull Requests class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubPulls extends JGithubObject{	/**	 * Method to create a pull request.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $title  The title of the new pull request.	 * @param   string  $base   The branch (or git ref) you want your changes pulled into. This	 *                          should be an existing branch on the current repository. You cannot	 *                          submit a pull request to one repo that requests a merge to a base	 *                          of another repo.	 * @param   string  $head   The branch (or git ref) where your changes are implemented.	 * @param   string  $body   The body text for the new pull request.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $title, $base, $head, $body = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// Build the request data.		$data = json_encode(			array(				'title' => $title,				'base' => $base,				'head' => $head,				'body' => $body			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on a pull request.	 *	 * @param   string   $user      The name of the owner of the GitHub repository.	 * @param   string   $repo      The name of the GitHub repository.	 * @param   integer  $pullId    The pull request number.	 * @param   string   $body      The comment body text.	 * @param   string   $commitId  The SHA1 hash of the commit to comment on.	 * @param   string   $filePath  The Relative path of the file to comment on.	 * @param   string   $position  The line index in the diff to comment on.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createComment($user, $repo, $pullId, $body, $commitId, $filePath, $position)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,				'commit_id' => $commitId,				'path' => $filePath,				'position' => $position			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment in reply to another comment.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $pullId     The pull request number.	 * @param   string   $body       The comment body text.	 * @param   integer  $inReplyTo  The id of the comment to reply to.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createCommentReply($user, $repo, $pullId, $body, $inReplyTo)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,				'in_reply_to' => (int) $inReplyTo			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a pull request from an existing issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number for which to attach the new pull request.	 * @param   string   $base     The branch (or git ref) you want your changes pulled into. This	 *                             should be an existing branch on the current repository. You cannot	 *                             submit a pull request to one repo that requests a merge to a base	 *                             of another repo.	 * @param   string   $head     The branch (or git ref) where your changes are implemented.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createFromIssue($user, $repo, $issueId, $base, $head)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// Build the request data.		$data = json_encode(			array(				'issue' => (int) $issueId,				'base' => $base,				'head' => $head			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to delete.	 *	 * @return  void	 *	 * @since   11.3	 */	public function deleteComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to update a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   string   $title   The optional new title for the pull request.	 * @param   string   $body    The optional new body text for the pull request.	 * @param   string   $state   The optional new state for the pull request. [open, closed]	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $pullId, $title = null, $body = null, $state = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if (isset($title))		{			$data->title = $title;		}		// If a body is set add it to the data object.		if (isset($body))		{			$data->body = $body;		}		// If a state is set add it to the data object.		if (isset($state))		{			$data->state = $state;		}		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to update.	 * @param   string   $body       The new body text for the comment.	 *	 * @return  object	 *	 * @since   11.3	 */	public function editComment($user, $repo, $commentId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Build the request data.		$data = json_encode(			array(				'body' => $body			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $pullId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The comment id to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function getComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of comments on a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getComments($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of commits for a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getCommits($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/commits';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of files for a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getFiles($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/files';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list pull requests.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $state  The optional state to filter requests by. [open, closed]	 * @param   integer  $page   The page number from which to get items.	 * @param   integer  $limit  The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($user, $repo, $state = 'open', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// If a state exists append it as an option.		if ($state != 'open')		{			$path .= '?state=' . $state;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to check if a pull request has been merged.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.  The pull request number.	 *	 * @return  boolean  True if the pull request has been merged.	 *	 * @since   11.3	 */	public function isMerged($user, $repo, $pullId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/merge';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code == 204)		{			return true;		}		elseif ($response->code == 404)		{			return false;		}		else		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to merge a pull request.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $pullId   The pull request number.	 * @param   string   $message  The message that will be used for the merge commit.	 *	 * @return  object	 *	 * @since   11.3	 */	public function merge($user, $repo, $pullId, $message = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/merge';		// Build the request data.		$data = json_encode(			array(				'commit_message' => $message			)		);		// Send the request.		$response = $this->client->put($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_newsfeeds.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_items') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FunctionCallSignatureSniff.php 284575 2009-07-22 02:58:19Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Functions_FunctionCallSignatureSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_STRING);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Find the next non-empty token.        $openBracket = $phpcsFile->findNext(PHP_CodeSniffer_Tokens::$emptyTokens, ($stackPtr + 1), null, true);        if ($tokens[$openBracket]['code'] !== T_OPEN_PARENTHESIS) {            // Not a function call.            return;        }        if (isset($tokens[$openBracket]['parenthesis_closer']) === false) {            // Not a function call.            return;        }        // Find the previous non-empty token.        $search   = PHP_CodeSniffer_Tokens::$emptyTokens;        $search[] = T_BITWISE_AND;        $previous = $phpcsFile->findPrevious($search, ($stackPtr - 1), null, true);        if ($tokens[$previous]['code'] === T_FUNCTION) {            // It's a function definition, not a function call.            return;        }        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        if (($stackPtr + 1) !== $openBracket) {            // Checking this: $value = my_function[*](...).            $error = 'Space before opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceBeforeOpenBracket');        }        $next = $phpcsFile->findNext(T_WHITESPACE, ($closeBracket + 1), null, true);        if ($tokens[$next]['code'] === T_SEMICOLON) {            if (in_array($tokens[($closeBracket + 1)]['code'], PHP_CodeSniffer_Tokens::$emptyTokens) === true) {                $error = 'Space after closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closeBracket, 'SpaceAfterCloseBracket');            }        }        // Check if this is a single line or multi-line function call.        if ($tokens[$openBracket]['line'] === $tokens[$closeBracket]['line']) {            $this->processSingleLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        } else {            $this->processMultiLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        }    }//end process()    /**     * Processes single-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processSingleLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        if ($tokens[($openBracket + 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function([*]...).            $error = 'Space after opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceAfterOpenBracket');        }        $closer = $tokens[$openBracket]['parenthesis_closer'];        if ($tokens[($closer - 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function(...[*]).            $between = $phpcsFile->findNext(T_WHITESPACE, ($openBracket + 1), null, true);            // Only throw an error if there is some content between the parenthesis.            // i.e., Checking for this: $value = my_function().            // If there is no content, then we would have thrown an error in the            // previous IF statement because it would look like this:            // $value = my_function( ).            if ($between !== $closer) {                $error = 'Space before closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closer, 'SpaceBeforeCloseBracket');            }        }    }//end processSingleLineCall()    /**     * Processes multi-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processMultiLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        // We need to work out how far indented the function        // call itself is, so we can work out how far to        // indent the arguments.        $functionIndent = 0;        for ($i = ($stackPtr - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$stackPtr]['line']) {                $i++;                break;            }        }        if ($tokens[$i]['code'] === T_WHITESPACE) {            $functionIndent = strlen($tokens[$i]['content']);        }        // Each line between the parenthesis should be indented 4 spaces.        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        $lastLine     = $tokens[$openBracket]['line'];        for ($i = ($openBracket + 1); $i < $closeBracket; $i++) {            // Skip nested function calls.            if ($tokens[$i]['code'] === T_OPEN_PARENTHESIS) {                $i        = $tokens[$i]['parenthesis_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }            if ($tokens[$i]['line'] !== $lastLine) {                $lastLine = $tokens[$i]['line'];                // We changed lines, so this should be a whitespace indent token.                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$heredocTokens) === true) {                    // Ignore heredoc indentation.                    continue;                }                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$stringTokens) === true) {                    if ($tokens[$i]['code'] === $tokens[($i - 1)]['code']) {                        // Ignore multi-line string indentation.                        continue;                    }                }                if ($tokens[$i]['line'] === $tokens[$closeBracket]['line']) {                    // Closing brace needs to be indented to the same level                    // as the function call.                    $expectedIndent = $functionIndent;                } else {                    $expectedIndent = ($functionIndent + 4);                }                if ($tokens[$i]['code'] !== T_WHITESPACE) {                    $foundIndent = 0;                } else {                    $foundIndent = strlen($tokens[$i]['content']);                }                if ($expectedIndent !== $foundIndent) {// TODO AJE Allow for tab indents instead of spaces//                    $error = 'Multi-line function call not indented correctly; expected %s spaces but found %s';//                    $data  = array(//                              $expectedIndent,//                              $foundIndent,//                             );//                    $phpcsFile->addError($error, $i, 'Indent', $data);                }            }//end if            // Skip the rest of a closure.            if ($tokens[$i]['code'] === T_CLOSURE) {                $i        = $tokens[$i]['scope_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }        }//end for        if ($tokens[($openBracket + 1)]['content'] !== $phpcsFile->eolChar        && T_CONSTANT_ENCAPSED_STRING != $tokens[($openBracket + 1)]['code'])// allow a '"'        {            $error = 'Opening parenthesis of a multi-line function call must be the last content on the line';            $phpcsFile->addError($error, $stackPtr, 'ContentAfterOpenBracket');        }        $prev = $phpcsFile->findPrevious(T_WHITESPACE, ($closeBracket - 1), null, true);        if ($tokens[$prev]['line'] === $tokens[$closeBracket]['line']        && T_CONSTANT_ENCAPSED_STRING != $tokens[$prev]['code'])// allow a '"'        {            $error = 'Closing parenthesis of a multi-line function call must be on a line by itself';            $phpcsFile->addError($error, $closeBracket, 'CloseBracketLine');        }    }//end processMultiLineCall()}//end class?>
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class interface. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */interface JHttpTransport{	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options);	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null);	/**	 * method to check if http transport layer available for using	 * 	 * @return bool true if available else false	 * 	 * @since   12.1	 */	static public function isSupported();}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller	= JControllerLegacy::getInstance('Banners');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! update helper. * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateHelper{	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since	2.5.4	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$assetName = 'com_joomlaupdate';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Object * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Object Class * * This class allows for simple but smart objects with get and set methods * and an internal error handler. * * @package     Joomla.Platform * @subpackage  Object * @since       11.1 */class JObject{	/**	 * An array of error messages or Exception objects.	 *	 * @var    array	 * @since  11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	protected $_errors = array();	/**	 * Class constructor, overridden in descendant classes.	 *	 * @param   mixed  $properties  Either and associative array or another	 *                              object to set the initial properties of the object.	 *	 * @since   11.1	 */	public function __construct($properties = null)	{		if ($properties !== null)		{			$this->setProperties($properties);		}	}	/**	 * Magic method to convert the object to a string gracefully.	 *	 * @return  string  The classname.	 *	 * @since   11.1	 * @deprecated 12.3  Classes should provide their own __toString() implementation.	 */	public function __toString()	{		return get_class($this);	}	/**	 * Sets a default value if not alreay assigned	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function def($property, $default = null)	{		$value = $this->get($property, $default);		return $this->set($property, $value);	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed    The value of the property.	 *	 * @since   11.1	 *	 * @see     getProperties()	 */	public function get($property, $default = null)	{		if (isset($this->$property))		{			return $this->$property;		}		return $default;	}	/**	 * Returns an associative array of object properties.	 *	 * @param   boolean  $public  If true, returns only the public properties.	 *	 * @return  array	 *	 * @since   11.1	 *	 * @see     get()	 */	public function getProperties($public = true)	{		$vars = get_object_vars($this);		if ($public)		{			foreach ($vars as $key => $value)			{				if ('_' == substr($key, 0, 1))				{					unset($vars[$key]);				}			}		}		return $vars;	}	/**	 * Get the most recent error message.	 *	 * @param   integer  $i         Option error index.	 * @param   boolean  $toString  Indicates if JError objects should return their error message.	 *	 * @return  string   Error message	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function getError($i = null, $toString = true)	{		// Find the error		if ($i === null)		{			// Default, return the last message			$error = end($this->_errors);		}		elseif (!array_key_exists($i, $this->_errors))		{			// If $i has been specified but does not exist, return false			return false;		}		else		{			$error = $this->_errors[$i];		}		// Check if only the string is requested		if ($error instanceof Exception && $toString)		{			return (string) $error;		}		return $error;	}	/**	 * Return all errors, if any.	 *	 * @return  array  Array of error messages or JErrors.	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function getErrors()	{		return $this->_errors;	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set.	 *	 * @return  mixed  Previous value of the property.	 *	 * @since   11.1	 */	public function set($property, $value = null)	{		$previous = isset($this->$property) ? $this->$property : null;		$this->$property = $value;		return $previous;	}	/**	 * Set the object properties based on a named array/hash.	 *	 * @param   mixed  $properties  Either an associative array or another object.	 *	 * @return  boolean	 *	 * @since   11.1	 *	 * @see     set()	 */	public function setProperties($properties)	{		if (is_array($properties) || is_object($properties))		{			foreach ((array) $properties as $k => $v)			{				// Use the set function which might be overridden.				$this->set($k, $v);			}			return true;		}		return false;	}	/**	 * Add an error message.	 *	 * @param   string  $error  Error message.	 *	 * @return  void	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function setError($error)	{		array_push($this->_errors, $error);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');JHtml::_('behavior.caption');?><div class="category-list<?php echo $this->pageclass_sfx;?>"><?php$this->subtemplatename = 'articles';echo JLayoutHelper::render('joomla.content.category_default', $this);?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Client controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerClient extends JControllerForm{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_BANNERS_CLIENT';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cpanel * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// No access check.$controller	= JControllerLegacy::getInstance('Cpanel');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to transform an image to grayscale. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterGrayscale extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the grayscale filter.		imagefilter($this->handle, IMG_FILTER_GRAYSCALE);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Client * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Client helper class * * @package     Joomla.Platform * @subpackage  Client * @since       11.1 */class JClientHelper{	/**	 * Method to return the array of client layer configuration options	 *	 * @param   string   $client  Client name, currently only 'ftp' is supported	 * @param   boolean  $force   Forces re-creation of the login credentials. Set this to	 *                            true if login credentials in the session storage have changed	 *	 * @return  array    Client layer configuration options, consisting of at least	 *                   these fields: enabled, host, port, user, pass, root	 *	 * @since   11.1	 */	public static function getCredentials($client, $force = false)	{		static $credentials = array();		$client = strtolower($client);		if (!isset($credentials[$client]) || $force)		{			$config = JFactory::getConfig();			// Fetch the client layer configuration options for the specific client			switch ($client)			{				case 'ftp':					$options = array(						'enabled' => $config->get('ftp_enable'),						'host' => $config->get('ftp_host'),						'port' => $config->get('ftp_port'),						'user' => $config->get('ftp_user'),						'pass' => $config->get('ftp_pass'),						'root' => $config->get('ftp_root'));					break;				default:					$options = array('enabled' => false, 'host' => '', 'port' => '', 'user' => '', 'pass' => '', 'root' => '');					break;			}			// If user and pass are not set in global config lets see if they are in the session			if ($options['enabled'] == true && ($options['user'] == '' || $options['pass'] == ''))			{				$session = JFactory::getSession();				$options['user'] = $session->get($client . '.user', null, 'JClientHelper');				$options['pass'] = $session->get($client . '.pass', null, 'JClientHelper');			}			// If user or pass are missing, disable this client			if ($options['user'] == '' || $options['pass'] == '')			{				$options['enabled'] = false;			}			// Save the credentials for later use			$credentials[$client] = $options;		}		return $credentials[$client];	}	/**	 * Method to set client login credentials	 *	 * @param   string  $client  Client name, currently only 'ftp' is supported	 * @param   string  $user    Username	 * @param   string  $pass    Password	 *	 * @return  boolean  True if the given login credentials have been set and are valid	 *	 * @since   11.1	 */	public static function setCredentials($client, $user, $pass)	{		$return = false;		$client = strtolower($client);		// Test if the given credentials are valid		switch ($client)		{			case 'ftp':				$config = JFactory::getConfig();				$options = array('enabled' => $config->get('ftp_enable'), 'host' => $config->get('ftp_host'), 'port' => $config->get('ftp_port'));				if ($options['enabled'])				{					$ftp = JClientFtp::getInstance($options['host'], $options['port']);					// Test the connection and try to log in					if ($ftp->isConnected())					{						if ($ftp->login($user, $pass))						{							$return = true;						}						$ftp->quit();					}				}				break;			default:				break;		}		if ($return)		{			// Save valid credentials to the session			$session = JFactory::getSession();			$session->set($client . '.user', $user, 'JClientHelper');			$session->set($client . '.pass', $pass, 'JClientHelper');			// Force re-creation of the data saved within JClientHelper::getCredentials()			self::getCredentials($client, true);		}		return $return;	}	/**	 * Method to determine if client login credentials are present	 *	 * @param   string  $client  Client name, currently only 'ftp' is supported	 *	 * @return  boolean  True if login credentials are available	 *	 * @since   11.1	 */	public static function hasCredentials($client)	{		$return = false;		$client = strtolower($client);		// Get (unmodified) credentials for this client		switch ($client)		{			case 'ftp':				$config = JFactory::getConfig();				$options = array('enabled' => $config->get('ftp_enable'), 'user' => $config->get('ftp_user'), 'pass' => $config->get('ftp_pass'));				break;			default:				$options = array('enabled' => false, 'user' => '', 'pass' => '');				break;		}		if ($options['enabled'] == false)		{			// The client is disabled in global config, so let's pretend we are OK			$return = true;		}		elseif ($options['user'] != '' && $options['pass'] != '')		{			// Login credentials are available in global config			$return = true;		}		else		{			// Check if login credentials are available in the session			$session = JFactory::getSession();			$user = $session->get($client . '.user', null, 'JClientHelper');			$pass = $session->get($client . '.pass', null, 'JClientHelper');			if ($user != '' && $pass != '')			{				$return = true;			}		}		return $return;	}	/**	 * Determine whether input fields for client settings need to be shown	 *	 * If valid credentials were passed along with the request, they are saved to the session.	 * This functions returns an exception if invalid credentials have been given or if the	 * connection to the server failed for some other reason.	 *	 * @param   string  $client  The name of the client.	 *	 * @return  mixed  True, if FTP settings; JError if using legacy tree.	 *	 * @since   11.1	 * @throws  InvalidArgumentException if credentials invalid	 */	public static function setCredentialsFromRequest($client)	{		// Determine whether FTP credentials have been passed along with the current request		$input = JFactory::getApplication()->input;		$user = $input->post->getString('username', null);		$pass = $input->post->getString('password', null);		if ($user != '' && $pass != '')		{			// Add credentials to the session			if (self::setCredentials($client, $user, $pass))			{				$return = false;			}			else			{				if (class_exists('JError'))				{					$return = JError::raiseWarning('SOME_ERROR_CODE', JText::_('JLIB_CLIENT_ERROR_HELPER_SETCREDENTIALSFROMREQUEST_FAILED'));				}				else				{					throw new InvalidArgumentException('Invalid user credentials');				}			}		}		else		{			// Just determine if the FTP input fields need to be shown			$return = !self::hasCredentials('ftp');		}		return $return;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * Finder Component Controller. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached. [optional]	 * @param   array    $urlparams  An array of safe url parameters and their variable types,	 *                               for valid values see {@link JFilterInput::clean()}. [optional]	 *	 * @return  JControllerLegacy  This object is to support chaining.	 *	 * @since   2.5	 */	public function display($cachable = false, $urlparams = array())	{		$input = JFactory::getApplication()->input;		$cachable = true;		// Load plug-in language files.		FinderHelperLanguage::loadPluginLanguage();		// Set the default view name and format from the Request.		$viewName = $input->get('view', 'search', 'word');		$input->set('view', $viewName);		// Don't cache view for search queries		if ($input->get('q') || $input->get('f') || $input->get('t'))		{			$cachable = false;		}		$safeurlparams = array(			'f' 	=> 'INT',			'lang' 	=> 'CMD'		);		return parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Menu table * * @package     Joomla.Administrator * @subpackage  com_menus */class MenusTableMenu extends JTableMenu{	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @see     http://docs.joomla.org/JTableNested/delete	 */	public function delete($pk = null, $children = false)	{		return parent::delete($pk, $children);	}}
#!/usr/bin/php<?phpif (php_sapi_name() != "cli"){	echo "Error: phptidy has to be run on command line with CLI SAPI\n";	exit(1);}function getDirectory($path = '.', $level = 0){	$iterator  = new RecursiveDirectoryIterator($path, FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS);	$flattened = new RecursiveIteratorIterator($iterator, RecursiveIteratorIterator::SELF_FIRST);	foreach ($flattened as $path => $dir)	{		if (!$dir->isDir())		{			continue;		}		// Add an index.html if neither an index.html nor an index.php exist		if (!(file_exists($path . '/index.html') || file_exists($path . '/index.php')))		{			file_put_contents($path . '/index.html', '<!DOCTYPE html><title></title>' . "\n");		}	}}$work = $_SERVER['argv'][1];echo "Working on directory " . $work . "\n";getDirectory($_SERVER['argv'][1]);
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Generic Installation View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewDefault extends JViewHtml{	/**	 * The JForm object	 *	 * @var    JForm	 * @since  3.1	 */	protected $form;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelSetup	 * @since   3.1	 */	protected $model;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->form = $this->model->getForm();		return parent::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_CONFIG_PERMISSION_SETTINGS'); ?></legend>		<?php foreach ($this->form->getFieldset('permissions') as $field) : ?>			<?php echo $field->label; ?>			<div class="clr"> </div>			<?php echo $field->input; ?>		<?php endforeach; ?>	</fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages component helper. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName   The name of the active view.	 * @param   int     $client  The client id of the active view. Maybe be 0 or 1	 *	 * @return  void	 */	public static function addSubmenu($vName, $client = 0)	{		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_INSTALLED_SITE'),			'index.php?option=com_languages&view=installed&client=0',			$vName == 'installed' && $client === 0		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_INSTALLED_ADMINISTRATOR'),			'index.php?option=com_languages&view=installed&client=1',			$vName == 'installed' && $client === 1		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_CONTENT'),			'index.php?option=com_languages&view=languages',			$vName == 'languages'		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_OVERRIDES'),			'index.php?option=com_languages&view=overrides',			$vName == 'overrides'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user		= JFactory::getUser();		$result		= new JObject;		$assetName	= 'com_languages';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Method for parsing ini files	 *	 * @param   string  $filename Path and name of the ini file to parse	 *	 * @return  array   Array of strings found in the file, the array indices will be the keys. On failure an empty array will be returned	 *	 * @since   2.5	 */	public static function parseFile($filename)	{		if (!is_file($filename))		{			return array();		}		$contents = file_get_contents($filename);		$contents = str_replace('_QQ_', '"\""', $contents);		$strings  = @parse_ini_string($contents);		if ($strings === false)		{			return array();		}		return $strings;	}	/**	 * Filter method for language keys.	 * This method will be called by JForm while filtering the form data.	 *	 * @param   	string	$value	The language key to filter	 *	 * @return  string	The filtered language key	 *	 * @since		2.5	 */	public static function filterKey($value)	{		$filter = JFilterInput::getInstance(null, null, 1, 1);		return strtoupper($filter->clean($value, 'cmd'));	}	/**	 * Filter method for language strings.	 * This method will be called by JForm while filtering the form data.	 *	 * @param   	string	$value	The language string to filter	 *	 * @return  string	The filtered language string	 *	 * @since		2.5	 */	public static function filterText($value)	{		$filter = JFilterInput::getInstance(null, null, 1, 1);		return $filter->clean($value);	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="modified">				<span class="icon-calendar"></span>				<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $displayData['item']->modified, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlusPeople extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * Get a person's profile.	 *	 * @param   string  $id      The ID of the person to get the profile for. The special value "me" can be used to indicate the authenticated user.	 * @param   string  $fields  Used to specify the fields you want returned.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function getPeople($id, $fields = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people/' . $id;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Search all public profiles.	 *	 * @param   string   $query     Specify a query string for full text search of public text in all profiles.	 * @param   string   $fields    Used to specify the fields you want returned.	 * @param   string   $language  Specify the preferred language to search with. https://developers.google.com/+/api/search#available-languages	 * @param   integer  $max       The maximum number of people to include in the response, used for paging.	 * @param   string   $token     The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function search($query, $fields = null, $language = null, $max = 10, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people?query=' . urlencode($query);			// Check if fields is specified.			if ($fields)			{				$url .= '&fields=' . $fields;			}			// Check if language is specified.			if ($language)			{				$url .= '&language=' . $language;			}			// Check if max is specified.			if ($max != 10)			{				$url .= '&maxResults=' . $max;			}			// Check of token is specified.			if ($token)			{				$url .= '&pageToken=' . $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * List all of the people in the specified collection for a particular activity.	 *	 * @param   string   $activityId  The ID of the activity to get the list of people for.	 * @param   string   $collection  The collection of people to list. Acceptable values are "plusoners" and "resharers".	 * @param   string   $fields      Used to specify the fields you want returned.	 * @param   integer  $max         The maximum number of people to include in the response, used for paging.	 * @param   string   $token       The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								  parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function listByActivity($activityId, $collection, $fields = null, $max = 10, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities/' . $activityId . '/people/' . $collection;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if max is specified.			if ($max != 10)			{				$url .= (strpos($url, '?') === false) ? '?maxResults=' : '&maxResults=';				$url .= $max;			}			// Check of token is specified.			if ($token)			{				$url .= (strpos($url, '?') === false) ? '?pageToken=' : '&pageToken=';				$url .= $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of newsfeed categories. * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsModelCategories extends JModelList{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_newsfeeds.categories';	/**	 * The category context (allows other extensions to derived from this model).	 *	 * @var		string	 */	protected $_extension = 'com_newsfeeds';	private $_parent = null;	private $_items = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('filter.extension', $this->_extension);		// Get the parent id if defined.		$parentId = $app->input->getInt('id');		$this->setState('filter.parentId', $parentId);		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('filter.published',	1);		$this->setState('filter.access',	true);	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.extension');		$id	.= ':'.$this->getState('filter.published');		$id	.= ':'.$this->getState('filter.access');		$id	.= ':'.$this->getState('filter.parentId');		return parent::getStoreId($id);	}	/**	 * redefine the function an add some properties to make the styling more easy	 *	 * @return mixed An array of data items on success, false on failure.	 */	public function getItems()	{		if (!count($this->_items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_items_cat', 1) || !$params->get('show_empty_categories_cat', 0);			$categories = JCategories::getInstance('Newsfeeds', $options);			$this->_parent = $categories->get($this->getState('filter.parentId', 'root'));			if (is_object($this->_parent))			{				$this->_items = $this->_parent->getChildren();			} else {				$this->_items = false;			}		}		return $this->_items;	}	public function getParent()	{		if (!is_object($this->_parent))		{			$this->getItems();		}		return $this->_parent;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto */abstract class MailtoHelper{	/**	 * Adds a URL to the mailto system and returns the hash	 *	 * @param string url	 * @return URL hash	 */	public static function addLink($url)	{		$hash = sha1($url);		self::cleanHashes();		$session = JFactory::getSession();		$mailto_links = $session->get('com_mailto.links', array());		if (!isset($mailto_links[$hash]))		{			$mailto_links[$hash] = new stdClass;		}		$mailto_links[$hash]->link = $url;		$mailto_links[$hash]->expiry = time();		$session->set('com_mailto.links', $mailto_links);		return $hash;	}	/**	 * Checks if a URL is a Flash file	 *	 * @param string	 * @return URL	 */	public static function validateHash($hash)	{		$retval = false;		$session = JFactory::getSession();		self::cleanHashes();		$mailto_links = $session->get('com_mailto.links', array());		if (isset($mailto_links[$hash]))		{			$retval = $mailto_links[$hash]->link;		}		return $retval;	}	/**	 * Cleans out old hashes	 *	 * @since 1.6.1	 */	public static function cleanHashes($lifetime = 1440)	{		// flag for if we've cleaned on this cycle		static $cleaned = false;		if (!$cleaned)		{			$past = time() - $lifetime;			$session = JFactory::getSession();			$mailto_links = $session->get('com_mailto.links', array());			foreach ($mailto_links as $index => $link)			{				if ($link->expiry < $past)				{					unset($mailto_links[$index]);				}			}			$session->set('com_mailto.links', $mailto_links);			$cleaned = true;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexerHelper', __DIR__ . '/helper.php');JLoader::register('FinderIndexerParser', __DIR__ . '/parser.php');JLoader::register('FinderIndexerStemmer', __DIR__ . '/stemmer.php');JLoader::register('FinderIndexerTaxonomy', __DIR__ . '/taxonomy.php');JLoader::register('FinderIndexerToken', __DIR__ . '/token.php');jimport('joomla.filesystem.file');/** * Main indexer class for the Finder indexer package. * * The indexer class provides the core functionality of the Finder * search engine. It is responsible for adding and updating the * content links table; extracting and scoring tokens; and maintaining * all referential information for the content. * * Note: All exceptions thrown from within this class should be caught * by the controller. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexer{	/**	 * The title context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const TITLE_CONTEXT = 1;	/**	 * The text context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const TEXT_CONTEXT = 2;	/**	 * The meta context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const META_CONTEXT = 3;	/**	 * The path context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const PATH_CONTEXT = 4;	/**	 * The misc context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const MISC_CONTEXT = 5;	/**	 * The indexer state object.	 *	 * @var    object	 * @since  2.5	 */	public static $state;	/**	 * The indexer profiler object.	 *	 * @var    object	 * @since  2.5	 */	public static $profiler;	/**	 * Returns a reference to the FinderIndexer object.	 *	 * @return  FinderIndexer instance based on the database driver	 *	 * @since   3.0	 * @throws  RuntimeException if driver class for indexer not present.	 */	public static function getInstance()	{		// Setup the adapter for the indexer.		$format = JFactory::getDbo()->name;		if ($format == 'mysqli')		{			$format = 'mysql';		}		elseif ($format == 'sqlazure')		{			$format = 'sqlsrv';		}		$path = __DIR__ . '/driver/' . $format . '.php';		$class = 'FinderIndexerDriver' . ucfirst($format);		// Check if a parser exists for the format.		if (file_exists($path))		{			// Instantiate the parser.			include_once $path;			return new $class;		}		else		{			// Throw invalid format exception.			throw new RuntimeException(JText::sprintf('COM_FINDER_INDEXER_INVALID_DRIVER', $format));		}	}	/**	 * Method to get the indexer state.	 *	 * @return  object  The indexer state object.	 *	 * @since   2.5	 */	public static function getState()	{		// First, try to load from the internal state.		if (!empty(self::$state))		{			return self::$state;		}		// If we couldn't load from the internal state, try the session.		$session = JFactory::getSession();		$data = $session->get('_finder.state', null);		// If the state is empty, load the values for the first time.		if (empty($data))		{			$data = new JObject;			// Load the default configuration options.			$data->options = JComponentHelper::getParams('com_finder');			// Setup the weight lookup information.			$data->weights = array(				self::TITLE_CONTEXT	=> round($data->options->get('title_multiplier', 1.7), 2),				self::TEXT_CONTEXT	=> round($data->options->get('text_multiplier', 0.7), 2),				self::META_CONTEXT	=> round($data->options->get('meta_multiplier', 1.2), 2),				self::PATH_CONTEXT	=> round($data->options->get('path_multiplier', 2.0), 2),				self::MISC_CONTEXT	=> round($data->options->get('misc_multiplier', 0.3), 2)			);			// Set the current time as the start time.			$data->startTime = JFactory::getDate()->toSQL();			// Set the remaining default values.			$data->batchSize = (int) $data->options->get('batch_size', 50);			$data->batchOffset = 0;			$data->totalItems = 0;			$data->pluginState = array();		}		// Setup the profiler if debugging is enabled.		if (JFactory::getApplication()->getCfg('debug'))		{			self::$profiler = JProfiler::getInstance('FinderIndexer');		}		// Setup the stemmer.		if ($data->options->get('stem', 1) && $data->options->get('stemmer', 'porter_en'))		{			FinderIndexerHelper::$stemmer = FinderIndexerStemmer::getInstance($data->options->get('stemmer', 'porter_en'));		}		// Set the state.		self::$state = $data;		return self::$state;	}	/**	 * Method to set the indexer state.	 *	 * @param   object  $data  A new indexer state object.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 */	public static function setState($data)	{		// Check the state object.		if (empty($data) || !$data instanceof JObject)		{			return false;		}		// Set the new internal state.		self::$state = $data;		// Set the new session state.		$session = JFactory::getSession();		$session->set('_finder.state', $data);		return true;	}	/**	 * Method to reset the indexer state.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function resetState()	{		// Reset the internal state to null.		self::$state = null;		// Reset the session state to null.		$session = JFactory::getSession();		$session->set('_finder.state', null);	}	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function index($item, $format = 'html');	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function remove($linkId);	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function optimize();	/**	 * Method to get a content item's signature.	 *	 * @param   object  $item  The content item to index.	 *	 * @return  string  The content item's signature.	 *	 * @since   2.5	 */	protected static function getSignature($item)	{		// Get the indexer state.		$state = self::getState();		// Get the relevant configuration variables.		$config = array();		$config[] = $state->weights;		$config[] = $state->options->get('stem', 1);		$config[] = $state->options->get('stemmer', 'porter_en');		return md5(serialize(array($item, $config)));	}	/**	 * Method to parse input, tokenize it, and then add it to the database.	 *	 * @param   mixed    $input    String or resource to use as input. A resource	 *                             input will automatically be chunked to conserve	 *                             memory. Strings will be chunked if longer than	 *                             2K in size.	 * @param   integer  $context  The context of the input. See context constants.	 * @param   string   $lang     The language of the input.	 * @param   string   $format   The format of the input.	 *	 * @return  integer  The number of tokens extracted from the input.	 *	 * @since   2.5	 */	protected function tokenizeToDB($input, $context, $lang, $format)	{		$count = 0;		$buffer = null;		if (!empty($input))		{			// If the input is a resource, batch the process out.			if (is_resource($input))			{				// Batch the process out to avoid memory limits.				while (!feof($input))				{					// Read into the buffer.					$buffer .= fread($input, 2048);					// If we haven't reached the end of the file, seek to the last					// space character and drop whatever is after that to make sure					// we didn't truncate a term while reading the input.					if (!feof($input))					{						// Find the last space character.						$ls = strrpos($buffer, ' ');						// Adjust string based on the last space character.						if ($ls)						{							// Truncate the string to the last space character.							$string = substr($buffer, 0, $ls);							// Adjust the buffer based on the last space for the							// next iteration and trim.							$buffer = JString::trim(substr($buffer, $ls));						}						// No space character was found.						else						{							$string = $buffer;						}					}					// We've reached the end of the file, so parse whatever remains.					else					{						$string = $buffer;					}					// Parse the input.					$string = FinderIndexerHelper::parse($string, $format);					// Check the input.					if (empty($string))					{						continue;					}					// Tokenize the input.					$tokens = FinderIndexerHelper::tokenize($string, $lang);					// Add the tokens to the database.					$count += $this->addTokensToDB($tokens, $context);					// Check if we're approaching the memory limit of the token table.					if ($count > self::$state->options->get('memory_table_limit', 30000))					{						self::toggleTables(false);					}					unset($string);					unset($tokens);				}			}			// If the input is greater than 2K in size, it is more efficient to			// batch out the operation into smaller chunks of work.			elseif (strlen($input) > 2048)			{				$start = 0;				$end = strlen($input);				$chunk = 2048;				// As it turns out, the complex regular expressions we use for				// sanitizing input are not very efficient when given large				// strings. It is much faster to process lots of short strings.				while ($start < $end)				{					// Setup the string.					$string = substr($input, $start, $chunk);					// Find the last space character if we aren't at the end.					$ls = (($start + $chunk) < $end ? strrpos($string, ' ') : false);					// Truncate to the last space character.					if ($ls !== false)					{						$string = substr($string, 0, $ls);					}					// Adjust the start position for the next iteration.					$start += ($ls !== false ? ($ls + 1 - $chunk) + $chunk : $chunk);					// Parse the input.					$string = FinderIndexerHelper::parse($string, $format);					// Check the input.					if (empty($string))					{						continue;					}					// Tokenize the input.					$tokens = FinderIndexerHelper::tokenize($string, $lang);					// Add the tokens to the database.					$count += $this->addTokensToDB($tokens, $context);					// Check if we're approaching the memory limit of the token table.					if ($count > self::$state->options->get('memory_table_limit', 30000))					{						self::toggleTables(false);					}				}			}			else			{				// Parse the input.				$input = FinderIndexerHelper::parse($input, $format);				// Check the input.				if (empty($input))				{					return $count;				}				// Tokenize the input.				$tokens = FinderIndexerHelper::tokenize($input, $lang);				// Add the tokens to the database.				$count = $this->addTokensToDB($tokens, $context);			}		}		return $count;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function addTokensToDB($tokens, $context = '');	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function toggleTables($memory);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect master display controller. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'links';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/redirect.php';		// Load the submenu.		RedirectHelper::addSubmenu($this->input->get('view', 'links'));		$view   = $this->input->get('view', 'links');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'link' && $layout == 'edit' && !$this->checkEditId('com_redirect.edit.link', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_redirect&view=links', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Forks class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubForks extends JGithubObject{	/**	 * Method to fork a repository.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $org   The organization to fork the repo into. By default it is forked to the current user.	 *	 * @return  object	 *	 * @since   11.4	 * @throws  DomainException	 */	public function create($user, $repo, $org = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/forks';		if (strlen($org) > 0)		{			$data = json_encode(				array('org' => $org)			);		}		else		{			$data = json_encode(array());		}		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 202)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list forks for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   11.4	 * @throws  DomainException	 */	public function getList($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/forks';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE.'/components/com_content/helpers/route.php';JModelLegacy::addIncludePath(JPATH_SITE.'/components/com_content/models', 'ContentModel');/** * Helper for mod_articles_popular * * @package     Joomla.Site * @subpackage  mod_articles_popular */abstract class ModArticlesPopularHelper{	public static function getList(&$params)	{		// Get an instance of the generic articles model		$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));		// Set application parameters in model		$app = JFactory::getApplication();		$appParams = $app->getParams();		$model->setState('params', $appParams);		// Set the filters based on the module params		$model->setState('list.start', 0);		$model->setState('list.limit', (int) $params->get('count', 5));		$model->setState('filter.published', 1);		$model->setState('filter.featured', $params->get('show_front', 1) == 1 ? 'show' : 'hide');		// Access filter		$access = !JComponentHelper::getParams('com_content')->get('show_noauth');		$authorised = JAccess::getAuthorisedViewLevels(JFactory::getUser()->get('id'));		$model->setState('filter.access', $access);		// Category filter		$model->setState('filter.category_id', $params->get('catid', array()));		// Filter by language		$model->setState('filter.language', $app->getLanguageFilter());		// Ordering		$model->setState('list.ordering', 'a.hits');		$model->setState('list.direction', 'DESC');		$items = $model->getItems();		foreach ($items as &$item)		{			$item->slug = $item->id.':'.$item->alias;			$item->catslug = $item->catid.':'.$item->category_alias;			if ($access || in_array($item->access, $authorised))			{				// We know that user has the privilege to view the article				$item->link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug));			} else {				$item->link = JRoute::_('index.php?option=com_users&view=login');			}		}		return $items;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('database');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a  class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_FTP'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_enable'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_enable'); ?>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_user'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_user'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_FTP_USER_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_pass'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_pass'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_FTP_PASSWORD_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">		</div>		<div class="controls">			<button id="verifybutton" class="btn btn-success" onclick="Install.verifyFtpSettings(this);"><i class="icon-ok icon-white"></i> <?php echo JText::_('INSTL_VERIFY_FTP_SETTINGS'); ?></button>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_host'); ?>		</div>		<div class="controls">			<div class="input-append">				<?php echo $this->form->getInput('ftp_host'); ?><button id="findbutton" class="btn" onclick="Install.detectFtpRoot(this);"><i class="icon-folder-open"></i> <?php echo JText::_('INSTL_AUTOFIND_FTP_PATH'); ?></button>			</div>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_port'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_port'); ?>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_save'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_save'); ?>		</div>	</div>	<input type="hidden" name="task" value="ftp" />	<?php echo JHtml::_('form.token'); ?></form>
#!/usr/bin/env php<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */define('_JEXEC', 1);define('JPATH_BASE', dirname(__FILE__));// Load the Joomla! Platformrequire_once realpath('../libraries/import.php');/** * Keychain Manager * * @package  Joomla.Platform * @since    12.3 */class KeychainManager extends JApplicationCli{	/**	 * @var    boolean  A flag if the keychain has been updated to trigger saving the keychain	 * @since  12.3	 */	protected $updated = false;	/**	 * @var    JKeychain  The keychain object being manipulated.	 * @since  12.3	 */	protected $keychain = null;	/**	 * Execute the application	 *	 * @return  void	 *	 * @since   12.3	 */	public function execute( )	{		if (!count($this->input->args))		{			// Check if they passed --help in otherwise display short usage summary			if ($this->input->get('help', false) === false)			{				$this->out("usage: {$this->input->executable} [options] [command] [<args>]");				exit(1);			}			else			{				$this->displayHelp();				exit(0);			}		}		// For all tasks but help and init we use the keychain		if (!in_array($this->input->args[0], array('help', 'init')))		{			$this->loadKeychain();		}		switch ($this->input->args[0])		{			case 'init':				$this->initPassphraseFile();				break;			case 'list':				$this->listEntries();				break;			case 'create':				$this->create();				break;			case 'change':				$this->change();			case 'delete':				$this->delete();				break;			case 'read':				$this->read();				break;			case 'help':				$this->displayHelp();				break;			default:				$this->out('Invalid command.');				break;		}		if ($this->updated)		{			$this->saveKeychain();		}		exit(0);	}	/**	 * Load the keychain from a file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function loadKeychain()	{		$keychain = $this->input->get('keychain', '', 'raw');		$publicKeyFile = $this->input->get('public-key', '', 'raw');		$passphraseFile = $this->input->get('passphrase', '', 'raw');		$this->keychain = new JKeychain;		if (file_exists($keychain))		{			if (file_exists($publicKeyFile))			{				$this->keychain->loadKeychain($keychain, $passphraseFile, $publicKeyFile);			}			else			{				$this->out('Public key not specified or missing!');				exit(1);			}		}	}	/**	 * Save this keychain to a file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function saveKeychain()	{		$keychain = $this->input->get('keychain', '', 'raw');		$publicKeyFile = $this->input->get('public-key', '', 'raw');		$passphraseFile = $this->input->get('passphrase', '', 'raw');		if (!file_exists($publicKeyFile))		{			$this->out("Public key file specified doesn't exist: $publicKeyFile");			exit(1);		}		$this->keychain->saveKeychain($keychain, $passphraseFile, $publicKeyFile);	}	/**	 * Initialise a new passphrase file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function initPassphraseFile()	{		$keychain = new JKeychain;		$passphraseFile = $this->input->get('passphrase', '', 'raw');		$privateKeyFile = $this->input->get('private-key', '', 'raw');		if (!strlen($passphraseFile))		{			$this->out('A passphrase file must be specified with --passphrase');			exit(1);		}		if (!file_exists($privateKeyFile))		{			$this->out("protected key file specified doesn't exist: $privateKeyFile");			exit(1);		}		$this->out('Please enter the new passphrase:');		$passphrase = $this->in();		$this->out('Please enter the passphrase for the protected key:');		$privateKeyPassphrase = $this->in();		$keychain->createPassphraseFile($passphrase, $passphraseFile, $privateKeyFile, $privateKeyPassphrase);	}	/**	 * Create a new entry	 *	 * @return  void	 *	 * @since   12.3	 */	protected function create()	{		if (count($this->input->args) != 3)		{			$this->out("usage: {$this->input->executable} [options] create entry_name entry_value");			exit(1);		}		if ($this->keychain->exists($this->input->args[1]))		{			$this->out('error: entry already exists. To change this entry, use "change"');			exit(1);		}		$this->change();	}	/**	 * Change an existing entry to a new value or create an entry if missing.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function change()	{		if (count($this->input->args) != 3)		{			$this->out("usage: {$this->input->executable} [options] change entry_name entry_value");			exit(1);		}		$this->updated = true;		$this->keychain->setValue($this->input->args[1], $this->input->args[2]);	}	/**	 * Read an entry from the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function read()	{		if (count($this->input->args) != 2)		{			$this->out("usage: {$this->input->executable} [options] read entry_name");			exit(1);		}		$key = $this->input->args[1];		$this->out($key . ': ' . $this->dumpVar($this->keychain->get($key)));	}	/**	 * Get the string from var_dump	 *	 * @param   mixed  $var  The variable you want to have dumped.	 *	 * @return  string  The result of var_dump	 *	 * @since   12.3	 */	private function dumpVar($var)	{		ob_start();		var_dump($var);		$result = trim(ob_get_contents());		ob_end_clean();		return $result;	}	/**	 * Delete an entry from the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function delete()	{		if (count($this->input->args) != 2)		{			$this->out("usage: {$this->input->executable} [options] delete entry_name");			exit(1);		}		$this->updated = true;		$this->keychain->deleteValue($this->input->args[1], null);	}	/**	 * List entries in the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function listEntries()	{		foreach ($this->keychain->toArray() as $key => $value)		{			$line = $key;			if ($this->input->get('print-values'))			{				$line .= ': ' . $this->dumpVar($value);			}			$this->out($line);		}	}	/**	 * Display the help information	 *	 * @return  void	 *	 * @since   12.3	 */	protected function displayHelp()	{/*COMMANDS - list - create entry_name entry_value - change entry_name entry_value - delete entry_name - read   entry_name*/		$help = <<<HELPKeychain Management Utilityusage: {$this->input->executable} [--keychain=/path/to/keychain]	[--passphrase=/path/to/passphrase.dat] [--public-key=/path/to/public.pem]	[command] [<args>]OPTIONS  --keychain=/path/to/keychain    Path to a keychain file to manipulate.  --passphrase=/path/to/passphrase.dat    Path to a passphrase file containing the encryption/decryption key.  --public-key=/path/to/public.pem    Path to a public key file to decrypt the passphrase file.COMMANDS  list:    Usage: list [--print-values]    Lists all entries in the keychain. Optionally pass --print-values to print the values as well.  create:    Usage: create entry_name entry_value    Creates a new entry in the keychain called "entry_name" with the plaintext value "entry_value".    NOTE: This is an alias for change.  change:    Usage: change entry_name entry_value    Updates the keychain entry called "entry_name" with the value "entry_value".  delete:    Usage: delete entry_name    Removes an entry called "entry_name" from the keychain.  read:    Usage: read entry_name    Outputs the plaintext value of "entry_name" from the keychain.  init:    Usage: init    Creates a new passphrase file and prompts for a new passphrase.HELP;		$this->out($help);	}}try{	JApplicationCli::getInstance('KeychainManager')->execute();}catch (Exception $e){	echo $e->getMessage() . "\n";	exit(1);}
<?php/** * @package     Joomla.Platform * @subpackage  Access * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JAccessRule class. * * @package     Joomla.Platform * @subpackage  Access * @since       11.4 */class JAccessRule{	/**	 * A named array	 *	 * @var    array	 * @since  11.1	 */	protected $data = array();	/**	 * Constructor.	 *	 * The input array must be in the form: array(-42 => true, 3 => true, 4 => false)	 * or an equivalent JSON encoded string.	 *	 * @param   mixed  $identities  A JSON format string (probably from the database) or a named array.	 *	 * @since   11.1	 */	public function __construct($identities)	{		// Convert string input to an array.		if (is_string($identities))		{			$identities = json_decode($identities, true);		}		$this->mergeIdentities($identities);	}	/**	 * Get the data for the action.	 *	 * @return  array  A named array	 *	 * @since   11.1	 */	public function getData()	{		return $this->data;	}	/**	 * Merges the identities	 *	 * @param   mixed  $identities  An integer or array of integers representing the identities to check.	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeIdentities($identities)	{		if ($identities instanceof JAccessRule)		{			$identities = $identities->getData();		}		if (is_array($identities))		{			foreach ($identities as $identity => $allow)			{				$this->mergeIdentity($identity, $allow);			}		}	}	/**	 * Merges the values for an identity.	 *	 * @param   integer  $identity  The identity.	 * @param   boolean  $allow     The value for the identity (true == allow, false == deny).	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeIdentity($identity, $allow)	{		$identity = (int) $identity;		$allow = (int) ((boolean) $allow);		// Check that the identity exists.		if (isset($this->data[$identity]))		{			// Explicit deny always wins a merge.			if ($this->data[$identity] !== 0)			{				$this->data[$identity] = $allow;			}		}		else		{			$this->data[$identity] = $allow;		}	}	/**	 * Checks that this action can be performed by an identity.	 *	 * The identity is an integer where +ve represents a user group,	 * and -ve represents a user.	 *	 * @param   mixed  $identities  An integer or array of integers representing the identities to check.	 *	 * @return  mixed  True if allowed, false for an explicit deny, null for an implicit deny.	 *	 * @since   11.1	 */	public function allow($identities)	{		// Implicit deny by default.		$result = null;		// Check that the inputs are valid.		if (!empty($identities))		{			if (!is_array($identities))			{				$identities = array($identities);			}			foreach ($identities as $identity)			{				// Technically the identity just needs to be unique.				$identity = (int) $identity;				// Check if the identity is known.				if (isset($this->data[$identity]))				{					$result = (boolean) $this->data[$identity];					// An explicit deny wins.					if ($result === false)					{						break;					}				}			}		}		return $result;	}	/**	 * Convert this object into a JSON encoded string.	 *	 * @return  string  JSON encoded string	 *	 * @since   11.1	 */	public function __toString()	{		return json_encode($this->data);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_version * * @package     Joomla.Administrator * @subpackage  mod_version * @since       1.6 */abstract class ModVersionHelper{	/**	 * Get the member items of the submenu.	 *	 * @param   JRegistry  &$params  The parameters object.	 *	 * @return  string  String containing the current Joomla version based on the selected format.	 */	public static function getVersion(&$params)	{		$format  = $params->get('format', 'short');		$product = $params->get('product', 0);		$method  = 'get' . ucfirst($format) . "Version";		// Get the joomla version		$instance = new JVersion;		$version  = call_user_func(array($instance, $method));		if ($format == 'short' && !empty($product))		{			// Add the product name to short format only (in long format it's included)			$version = $instance->PRODUCT . ' ' . $version;		}		return $version;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL import driver. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseImporterMysql extends JDatabaseImporterMysqli{	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverMysql))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Sets the database connector to use for exporting structure and/or data from MySQL.	 *	 * @param   JDatabaseDriverMysql  $db  The database connector.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function setDbo(JDatabaseDriverMysql $db)	{		$this->db = $db;		return $this;	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Summary View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewSummaryHtml extends InstallationViewDefault{	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * The PHP options checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpoptions;	/**	 * The PHP settings checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpsettings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options     = $this->model->getOptions();		$this->phpoptions  = $this->model->getPhpOptions();		$this->phpsettings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');?><div class="reset-complete<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=reset.complete'); ?>" method="post" class="form-validate">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<dl>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<dt><?php echo $field->label; ?></dt>				<dd><?php echo $field->input; ?></dd>			<?php endforeach; ?>			</dl>		</fieldset>		<?php endforeach; ?>		<div>			<button type="submit" class="validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Milestones class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.3 */class JGithubMilestones extends JGithubObject{	/**	 * Method to get the list of milestones for a repo.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $state      The milestone state to retrieved.  Open (default) or closed.	 * @param   string   $sort       Sort can be due_date (default) or completeness.	 * @param   string   $direction  Direction is asc or desc (default).	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   12.3	 */	public function getList($user, $repo, $state = 'open', $sort = 'due_date', $direction = 'desc', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones?';		$path .= 'state=' . $state;		$path .= '&sort=' . $sort;		$path .= '&direction=' . $direction;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The milestone id to get.	 *	 * @return  object	 *	 * @since   12.3	 */	public function get($user, $repo, $milestoneId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a milestone for a repository.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $title        The title of the milestone.	 * @param   string   $state        Can be open (default) or closed.	 * @param   string   $description  Optional description for milestone.	 * @param   string   $due_on       Optional ISO 8601 time.	 *	 * @return  object	 *	 * @since   12.3	 */	public function create($user, $repo, $title, $state = null, $description = null, $due_on = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones';		// Build the request data.		$data = array(			'title' => $title		);		if (!is_null($state))		{			$data['state'] = $state;		}		if (!is_null($description))		{			$data['description'] = $description;		}		if (!is_null($due_on))		{			$data['due_on'] = $due_on;		}		$data = json_encode($data);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The id of the comment to update.	 * @param   integer  $title        Optional title of the milestone.	 * @param   string   $state        Can be open (default) or closed.	 * @param   string   $description  Optional description for milestone.	 * @param   string   $due_on       Optional ISO 8601 time.	 *	 * @return  object	 *	 * @since   12.3	 */	public function edit($user, $repo, $milestoneId, $title = null, $state = null, $description = null, $due_on = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Build the request data.		$data = array();		if (!is_null($title))		{			$data['title'] = $title;		}		if (!is_null($state))		{			$data['state'] = $state;		}		if (!is_null($description))		{			$data['description'] = $description;		}		if (!is_null($due_on))		{			$data['due_on'] = $due_on;		}		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The id of the milestone to delete.	 *	 * @return  void	 *	 * @since   12.3	 */	public function delete($user, $repo, $milestoneId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_random_image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$link	= $params->get('link');$folder	= ModRandomImageHelper::getFolder($params);$images	= ModRandomImageHelper::getImages($params, $folder);if (!count($images)){	echo JText::_('MOD_RANDOM_IMAGE_NO_IMAGES');	return;}$image = ModRandomImageHelper::getRandomImage($params, $images);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_random_image', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$this->subtemplatename = 'items';echo JLayoutHelper::render('joomla.content.category_default', $this);
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Tree Class. * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */class JTree extends JObject{	/**	 * Root node	 *	 * @var    object	 * @since  11.1	 */	protected $_root = null;	/**	 * Current working node	 *	 * @var    object	 * @since  11.1	 */	protected $_current = null;	/**	 * Constructor	 *	 * @since   11.1	 */	public function __construct()	{		JLog::add('JTree::__construct() is deprecated.', JLog::WARNING, 'deprecated');		$this->_root = new JNode('ROOT');		$this->_current = & $this->_root;	}	/**	 * Method to add a child	 *	 * @param   array    &$node       The node to process	 * @param   boolean  $setCurrent  True to set as current working node	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function addChild(&$node, $setCurrent = false)	{		JLog::add('JTree::addChild() is deprecated.', JLog::WARNING, 'deprecated');		$this->_current->addChild($node);		if ($setCurrent)		{			$this->_current = &$node;		}	}	/**	 * Method to get the parent	 *	 * @return  void	 *	 * @since   11.1	 */	public function getParent()	{		JLog::add('JTree::getParent() is deprecated.', JLog::WARNING, 'deprecated');		$this->_current = &$this->_current->getParent();	}	/**	 * Method to get the parent	 *	 * @return  void	 *	 * @since   11.1	 */	public function reset()	{		JLog::add('JTree::reset() is deprecated.', JLog::WARNING, 'deprecated');		$this->_current = &$this->_root;	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware substr_replace.* Note: requires utf8_substr to be loaded* @see http://www.php.net/substr_replace* @see utf8_strlen* @see utf8_substr*/function utf8_substr_replace($str, $repl, $start , $length = NULL ) {    preg_match_all('/./us', $str, $ar);    preg_match_all('/./us', $repl, $rar);    if( $length === NULL ) {        $length = utf8_strlen($str);    }    array_splice( $ar[0], $start, $length, $rar[0] );    return join('',$ar[0]);}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Class to turn JCli applications into daemons.  It requires CLI and PCNTL support built into PHP. * * @package     Joomla.Platform * @subpackage  Application * @see         http://www.php.net/manual/en/book.pcntl.php * @see         http://php.net/manual/en/features.commandline.php * @since       11.1 */class JApplicationDaemon extends JApplicationCli{	/**	 * @var    array  The available POSIX signals to be caught by default.	 * @see    http://php.net/manual/pcntl.constants.php	 * @since  11.1	 */	protected static $signals = array(		'SIGHUP',		'SIGINT',		'SIGQUIT',		'SIGILL',		'SIGTRAP',		'SIGABRT',		'SIGIOT',		'SIGBUS',		'SIGFPE',		'SIGUSR1',		'SIGSEGV',		'SIGUSR2',		'SIGPIPE',		'SIGALRM',		'SIGTERM',		'SIGSTKFLT',		'SIGCLD',		'SIGCHLD',		'SIGCONT',		'SIGTSTP',		'SIGTTIN',		'SIGTTOU',		'SIGURG',		'SIGXCPU',		'SIGXFSZ',		'SIGVTALRM',		'SIGPROF',		'SIGWINCH',		'SIGPOLL',		'SIGIO',		'SIGPWR',		'SIGSYS',		'SIGBABY',		'SIG_BLOCK',		'SIG_UNBLOCK',		'SIG_SETMASK'	);	/**	 * @var    boolean  True if the daemon is in the process of exiting.	 * @since  11.1	 */	protected $exiting = false;	/**	 * @var    integer  The parent process id.	 * @since  12.1	 */	protected $parentId = 0;	/**	 * @var    integer  The process id of the daemon.	 * @since  11.1	 */	protected $processId = 0;	/**	 * @var    boolean  True if the daemon is currently running.	 * @since  11.1	 */	protected $running = false;	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		// Verify that the process control extension for PHP is available.		// @codeCoverageIgnoreStart		if (!defined('SIGHUP'))		{			JLog::add('The PCNTL extension for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The PCNTL extension for PHP is not available.');		}		// Verify that POSIX support for PHP is available.		if (!function_exists('posix_getpid'))		{			JLog::add('The POSIX extension for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The POSIX extension for PHP is not available.');		}		// @codeCoverageIgnoreEnd		// Call the parent constructor.		parent::__construct($input, $config, $dispatcher);		// Set some system limits.		@set_time_limit($this->config->get('max_execution_time', 0));		if ($this->config->get('max_memory_limit') !== null)		{			ini_set('memory_limit', $this->config->get('max_memory_limit', '256M'));		}		// Flush content immediately.		ob_implicit_flush();	}	/**	 * Method to handle POSIX signals.	 *	 * @param   integer  $signal  The received POSIX signal.	 *	 * @return  void	 *	 * @since   11.1	 * @see     pcntl_signal()	 * @throws  RuntimeException	 */	public static function signal($signal)	{		// Log all signals sent to the daemon.		JLog::add('Received signal: ' . $signal, JLog::DEBUG);		// Let's make sure we have an application instance.		if (!is_subclass_of(static::$instance, 'JApplicationDaemon'))		{			JLog::add('Cannot find the application instance.', JLog::EMERGENCY);			throw new RuntimeException('Cannot find the application instance.');		}		// Fire the onReceiveSignal event.		static::$instance->triggerEvent('onReceiveSignal', array($signal));		switch ($signal)		{			case SIGINT:			case SIGTERM:				// Handle shutdown tasks				if (static::$instance->running && static::$instance->isActive())				{					static::$instance->shutdown();				}				else				{					static::$instance->close();				}				break;			case SIGHUP:				// Handle restart tasks				if (static::$instance->running && static::$instance->isActive())				{					static::$instance->shutdown(true);				}				else				{					static::$instance->close();				}				break;			case SIGCHLD:				// A child process has died				while (static::$instance->pcntlWait($signal, WNOHANG || WUNTRACED) > 0)				{					usleep(1000);				}				break;			case SIGCLD:				while (static::$instance->pcntlWait($signal, WNOHANG) > 0)				{					$signal = static::$instance->pcntlChildExitStatus($signal);				}				break;			default:				break;		}	}	/**	 * Check to see if the daemon is active.  This does not assume that $this daemon is active, but	 * only if an instance of the application is active as a daemon.	 *	 * @return  boolean  True if daemon is active.	 *	 * @since   11.1	 */	public function isActive()	{		// Get the process id file location for the application.		$pidFile = $this->config->get('application_pid_file');		// If the process id file doesn't exist then the daemon is obviously not running.		if (!is_file($pidFile))		{			return false;		}		// Read the contents of the process id file as an integer.		$fp = fopen($pidFile, 'r');		$pid = fread($fp, filesize($pidFile));		$pid = (int) $pid;		fclose($fp);		// Check to make sure that the process id exists as a positive integer.		if (!$pid)		{			return false;		}		// Check to make sure the process is active by pinging it and ensure it responds.		if (!posix_kill($pid, 0))		{			// No response so remove the process id file and log the situation.			@ unlink($pidFile);			JLog::add('The process found based on PID file was unresponsive.', JLog::WARNING);			return false;		}		return true;	}	/**	 * Load an object or array into the application configuration object.	 *	 * @param   mixed  $data  Either an array or object to be loaded into the configuration object.	 *	 * @return  JCli  Instance of $this to allow chaining.	 *	 * @since   11.1	 */	public function loadConfiguration($data)	{		// Execute the parent load method.		parent::loadConfiguration($data);		/*		 * Setup some application metadata options.  This is useful if we ever want to write out startup scripts		 * or just have some sort of information available to share about things.		 */		// The application author name.  This string is used in generating startup scripts and has		// a maximum of 50 characters.		$tmp = (string) $this->config->get('author_name', 'Joomla Platform');		$this->config->set('author_name', (strlen($tmp) > 50) ? substr($tmp, 0, 50) : $tmp);		// The application author email.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('author_email', 'admin@joomla.org');		$this->config->set('author_email', filter_var($tmp, FILTER_VALIDATE_EMAIL));		// The application name.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('application_name', 'JApplicationDaemon');		$this->config->set('application_name', (string) preg_replace('/[^A-Z0-9_-]/i', '', $tmp));		// The application description.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('application_description', 'A generic Joomla Platform application.');		$this->config->set('application_description', filter_var($tmp, FILTER_SANITIZE_STRING));		/*		 * Setup the application path options.  This defines the default executable name, executable directory,		 * and also the path to the daemon process id file.		 */		// The application executable daemon.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('application_executable', basename($this->input->executable));		$this->config->set('application_executable', $tmp);		// The home directory of the daemon.		$tmp = (string) $this->config->get('application_directory', dirname($this->input->executable));		$this->config->set('application_directory', $tmp);		// The pid file location.  This defaults to a path inside the /tmp directory.		$name = $this->config->get('application_name');		$tmp = (string) $this->config->get('application_pid_file', strtolower('/tmp/' . $name . '/' . $name . '.pid'));		$this->config->set('application_pid_file', $tmp);		/*		 * Setup the application identity options.  It is important to remember if the default of 0 is set for		 * either UID or GID then changing that setting will not be attempted as there is no real way to "change"		 * the identity of a process from some user to root.		 */		// The user id under which to run the daemon.		$tmp = (int) $this->config->get('application_uid', 0);		$options = array('options' => array('min_range' => 0, 'max_range' => 65000));		$this->config->set('application_uid', filter_var($tmp, FILTER_VALIDATE_INT, $options));		// The group id under which to run the daemon.		$tmp = (int) $this->config->get('application_gid', 0);		$options = array('options' => array('min_range' => 0, 'max_range' => 65000));		$this->config->set('application_gid', filter_var($tmp, FILTER_VALIDATE_INT, $options));		// Option to kill the daemon if it cannot switch to the chosen identity.		$tmp = (bool) $this->config->get('application_require_identity', 1);		$this->config->set('application_require_identity', $tmp);		/*		 * Setup the application runtime options.  By default our execution time limit is infinite obviously		 * because a daemon should be constantly running unless told otherwise.  The default limit for memory		 * usage is 128M, which admittedly is a little high, but remember it is a "limit" and PHP's memory		 * management leaves a bit to be desired :-)		 */		// The maximum execution time of the application in seconds.  Zero is infinite.		$tmp = $this->config->get('max_execution_time');		if ($tmp !== null)		{			$this->config->set('max_execution_time', (int) $tmp);		}		// The maximum amount of memory the application can use.		$tmp = $this->config->get('max_memory_limit', '256M');		if ($tmp !== null)		{			$this->config->set('max_memory_limit', (string) $tmp);		}		return $this;	}	/**	 * Execute the daemon.	 *	 * @return  void	 *	 * @since   11.1	 */	public function execute()	{		// Trigger the onBeforeExecute event.		$this->triggerEvent('onBeforeExecute');		// Enable basic garbage collection.		gc_enable();		JLog::add('Starting ' . $this->name, JLog::INFO);		// Set off the process for becoming a daemon.		if ($this->daemonize())		{			// Declare ticks to start signal monitoring. When you declare ticks, PCNTL will monitor			// incoming signals after each tick and call the relevant signal handler automatically.			declare (ticks = 1);			// Start the main execution loop.			while (true)			{				// Perform basic garbage collection.				$this->gc();				// Don't completely overload the CPU.				usleep(1000);				// Execute the main application logic.				$this->doExecute();			}		}		// We were not able to daemonize the application so log the failure and die gracefully.		else		{			JLog::add('Starting ' . $this->name . ' failed', JLog::INFO);		}		// Trigger the onAfterExecute event.		$this->triggerEvent('onAfterExecute');	}	/**	 * Restart daemon process.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function restart()	{		JLog::add('Stopping ' . $this->name, JLog::INFO);		$this->shutdown(true);	}	/**	 * Stop daemon process.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function stop()	{		JLog::add('Stopping ' . $this->name, JLog::INFO);		$this->shutdown();	}	/**	 * Method to change the identity of the daemon process and resources.	 *	 * @return  boolean  True if identity successfully changed	 *	 * @since   11.1	 * @see     posix_setuid()	 */	protected function changeIdentity()	{		// Get the group and user ids to set for the daemon.		$uid = (int) $this->config->get('application_uid', 0);		$gid = (int) $this->config->get('application_gid', 0);		// Get the application process id file path.		$file = $this->config->get('application_pid_file');		// Change the user id for the process id file if necessary.		if ($uid && (fileowner($file) != $uid) && (!@ chown($file, $uid)))		{			JLog::add('Unable to change user ownership of the process id file.', JLog::ERROR);			return false;		}		// Change the group id for the process id file if necessary.		if ($gid && (filegroup($file) != $gid) && (!@ chgrp($file, $gid)))		{			JLog::add('Unable to change group ownership of the process id file.', JLog::ERROR);			return false;		}		// Set the correct home directory for the process.		if ($uid && ($info = posix_getpwuid($uid)) && is_dir($info['dir']))		{			system('export HOME="' . $info['dir'] . '"');		}		// Change the user id for the process necessary.		if ($uid && (posix_getuid($file) != $uid) && (!@ posix_setuid($uid)))		{			JLog::add('Unable to change user ownership of the proccess.', JLog::ERROR);			return false;		}		// Change the group id for the process necessary.		if ($gid && (posix_getgid($file) != $gid) && (!@ posix_setgid($gid)))		{			JLog::add('Unable to change group ownership of the proccess.', JLog::ERROR);			return false;		}		// Get the user and group information based on uid and gid.		$user = posix_getpwuid($uid);		$group = posix_getgrgid($gid);		JLog::add('Changed daemon identity to ' . $user['name'] . ':' . $group['name'], JLog::INFO);		return true;	}	/**	 * Method to put the application into the background.	 *	 * @return  boolean	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function daemonize()	{		// Is there already an active daemon running?		if ($this->isActive())		{			JLog::add($this->name . ' daemon is still running. Exiting the application.', JLog::EMERGENCY);			return false;		}		// Reset Process Information		$this->safeMode = !!@ ini_get('safe_mode');		$this->processId = 0;		$this->running = false;		// Detach process!		try		{			// Check if we should run in the foreground.			if (!$this->input->get('f'))			{				// Detach from the terminal.				$this->detach();			}			else			{				// Setup running values.				$this->exiting = false;				$this->running = true;				// Set the process id.				$this->processId = (int) posix_getpid();				$this->parentId = $this->processId;			}		}		catch (RuntimeException $e)		{			JLog::add('Unable to fork.', JLog::EMERGENCY);			return false;		}		// Verify the process id is valid.		if ($this->processId < 1)		{			JLog::add('The process id is invalid; the fork failed.', JLog::EMERGENCY);			return false;		}		// Clear the umask.		@ umask(0);		// Write out the process id file for concurrency management.		if (!$this->writeProcessIdFile())		{			JLog::add('Unable to write the pid file at: ' . $this->config->get('application_pid_file'), JLog::EMERGENCY);			return false;		}		// Attempt to change the identity of user running the process.		if (!$this->changeIdentity())		{			// If the identity change was required then we need to return false.			if ($this->config->get('application_require_identity'))			{				JLog::add('Unable to change process owner.', JLog::CRITICAL);				return false;			}			else			{				JLog::add('Unable to change process owner.', JLog::WARNING);			}		}		// Setup the signal handlers for the daemon.		if (!$this->setupSignalHandlers())		{			return false;		}		// Change the current working directory to the application working directory.		@ chdir($this->config->get('application_directory'));		return true;	}	/**	 * This is truly where the magic happens.  This is where we fork the process and kill the parent	 * process, which is essentially what turns the application into a daemon.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	protected function detach()	{		JLog::add('Detaching the ' . $this->name . ' daemon.', JLog::DEBUG);		// Attempt to fork the process.		$pid = $this->fork();		// If the pid is positive then we successfully forked, and can close this application.		if ($pid)		{			// Add the log entry for debugging purposes and exit gracefully.			JLog::add('Ending ' . $this->name . ' parent process', JLog::DEBUG);			$this->close();		}		// We are in the forked child process.		else		{			// Setup some protected values.			$this->exiting = false;			$this->running = true;			// Set the parent to self.			$this->parentId = $this->processId;		}	}	/**	 * Method to fork the process.	 *	 * @return  integer  The child process id to the parent process, zero to the child process.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function fork()	{		// Attempt to fork the process.		$pid = $this->pcntlFork();		// If the fork failed, throw an exception.		if ($pid === -1)		{			throw new RuntimeException('The process could not be forked.');		}		// Update the process id for the child.		elseif ($pid === 0)		{			$this->processId = (int) posix_getpid();		}		// Log the fork in the parent.		else		{			// Log the fork.			JLog::add('Process forked ' . $pid, JLog::DEBUG);		}		// Trigger the onFork event.		$this->postFork();		return $pid;	}	/**	 * Method to perform basic garbage collection and memory management in the sense of clearing the	 * stat cache.  We will probably call this method pretty regularly in our main loop.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	protected function gc()	{		// Perform generic garbage collection.		gc_collect_cycles();		// Clear the stat cache so it doesn't blow up memory.		clearstatcache();	}	/**	 * Method to attach the JApplicationDaemon signal handler to the known signals.  Applications	 * can override these handlers by using the pcntl_signal() function and attaching a different	 * callback method.	 *	 * @return  boolean	 *	 * @since   11.1	 * @see     pcntl_signal()	 */	protected function setupSignalHandlers()	{		// We add the error suppression for the loop because on some platforms some constants are not defined.		foreach (self::$signals as $signal)		{			// Ignore signals that are not defined.			if (!defined($signal) || !is_int(constant($signal)) || (constant($signal) === 0))			{				// Define the signal to avoid notices.				JLog::add('Signal "' . $signal . '" not defined. Defining it as null.', JLog::DEBUG);				define($signal, null);				// Don't listen for signal.				continue;			}			// Attach the signal handler for the signal.			if (!$this->pcntlSignal(constant($signal), array('JApplicationDaemon', 'signal')))			{				JLog::add(sprintf('Unable to reroute signal handler: %s', $signal), JLog::EMERGENCY);				return false;			}		}		return true;	}	/**	 * Method to shut down the daemon and optionally restart it.	 *	 * @param   boolean  $restart  True to restart the daemon on exit.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function shutdown($restart = false)	{		// If we are already exiting, chill.		if ($this->exiting)		{			return;		}		// If not, now we are.		else		{			$this->exiting = true;		}		// If we aren't already daemonized then just kill the application.		if (!$this->running && !$this->isActive())		{			JLog::add('Process was not daemonized yet, just halting current process', JLog::INFO);			$this->close();		}		// Only read the pid for the parent file.		if ($this->parentId == $this->processId)		{			// Read the contents of the process id file as an integer.			$fp = fopen($this->config->get('application_pid_file'), 'r');			$pid = fread($fp, filesize($this->config->get('application_pid_file')));			$pid = (int) $pid;			fclose($fp);			// Remove the process id file.			@ unlink($this->config->get('application_pid_file'));			// If we are supposed to restart the daemon we need to execute the same command.			if ($restart)			{				$this->close(exec(implode(' ', $GLOBALS['argv']) . ' > /dev/null &'));			}			// If we are not supposed to restart the daemon let's just kill -9.			else			{				passthru('kill -9 ' . $pid);				$this->close();			}		}	}	/**	 * Method to write the process id file out to disk.	 *	 * @return  boolean	 *	 * @since   11.1	 */	protected function writeProcessIdFile()	{		// Verify the process id is valid.		if ($this->processId < 1)		{			JLog::add('The process id is invalid.', JLog::EMERGENCY);			return false;		}		// Get the application process id file path.		$file = $this->config->get('application_pid_file');		if (empty($file))		{			JLog::add('The process id file path is empty.', JLog::ERROR);			return false;		}		// Make sure that the folder where we are writing the process id file exists.		$folder = dirname($file);		if (!is_dir($folder) && !JFolder::create($folder))		{			JLog::add('Unable to create directory: ' . $folder, JLog::ERROR);			return false;		}		// Write the process id file out to disk.		if (!file_put_contents($file, $this->processId))		{			JLog::add('Unable to write proccess id file: ' . $file, JLog::ERROR);			return false;		}		// Make sure the permissions for the proccess id file are accurate.		if (!chmod($file, 0644))		{			JLog::add('Unable to adjust permissions for the proccess id file: ' . $file, JLog::ERROR);			return false;		}		return true;	}	/**	 * Method to handle post-fork triggering of the onFork event.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function postFork()	{		// Trigger the onFork event.		$this->triggerEvent('onFork');	}	/**	 * Method to return the exit code of a terminated child process.	 *	 * @param   integer  $status  The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().	 *	 * @return  integer  The child process exit code.	 *	 * @codeCoverageIgnore	 * @see     pcntl_wexitstatus()	 * @since   11.3	 */	protected function pcntlChildExitStatus($status)	{		return pcntl_wexitstatus($status);	}	/**	 * Method to return the exit code of a terminated child process.	 *	 * @return  integer  On success, the PID of the child process is returned in the parent's thread	 *                   of execution, and a 0 is returned in the child's thread of execution. On	 *                   failure, a -1 will be returned in the parent's context, no child process	 *                   will be created, and a PHP error is raised.	 *	 * @codeCoverageIgnore	 * @see     pcntl_fork()	 * @since   11.3	 */	protected function pcntlFork()	{		return pcntl_fork();	}	/**	 * Method to install a signal handler.	 *	 * @param   integer   $signal   The signal number.	 * @param   callback  $handler  The signal handler which may be the name of a user created function,	 *                              or method, or either of the two global constants SIG_IGN or SIG_DFL.	 * @param   boolean   $restart  Specifies whether system call restarting should be used when this	 *                              signal arrives.	 *	 * @return  boolean  True on success.	 *	 * @codeCoverageIgnore	 * @see     pcntl_signal()	 * @since   11.3	 */	protected function pcntlSignal($signal , $handler, $restart = true)	{		return pcntl_signal($signal, $handler, $restart);	}	/**	 * Method to wait on or return the status of a forked child.	 *	 * @param   integer  &$status  Status information.	 * @param   integer  $options  If wait3 is available on your system (mostly BSD-style systems),	 *                             you can provide the optional options parameter.	 *	 * @return  integer  The process ID of the child which exited, -1 on error or zero if WNOHANG	 *                   was provided as an option (on wait3-available systems) and no child was available.	 *	 * @codeCoverageIgnore	 * @see     pcntl_wait()	 * @since   11.3	 */	protected function pcntlWait(&$status, $options = 0)	{		return pcntl_wait($status, $options);	}}
<?php/** * Squiz_Sniffs_WhiteSpace_SuperfluousWhitespaceSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: SuperfluousWhitespaceSniff.php 509 2011-08-30 02:21:56Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Checks for whitespace. * * Checks that. * <ul> *   <li>No whitespace proceeds the first content of the file.</li> *   <li>No whitespace resides after content on any line.</li> *   <li>There are not two or more empty lines in functions and classes.</li> *   <li>There is a exactly one empty line after the last content of the file.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.2.2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SuperfluousWhitespaceSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(       'PHP',       'JS',       'CSS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(        T_OPEN_TAG,        T_CLOSE_TAG,        T_WHITESPACE,        T_COMMENT,        T_CLOSE_CURLY_BRACKET,        );    }//function    /**     * Processes this sniff, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param integer $stackPtr The position of the current token in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        if($stackPtr == $phpcsFile->numTokens - 1)        {            //-- We reached the end of the file - without a closing tag            if($tokens[$stackPtr]['code'] == T_WHITESPACE)            {                $lastCode = $tokens[$stackPtr - 1]['code'];                if($lastCode != T_CLOSE_CURLY_BRACKET                && $lastCode !== T_SEMICOLON)                {                    //-- If the second last is not a curly bracket or a semicolon                    $phpcsFile->addError('Additional whitespace found at end of file', $stackPtr);                }            }            else if(strpos($tokens[$stackPtr]['content'], $phpcsFile->eolChar) === false)            {                //-- Files must end with an empty line                $phpcsFile->addError('Please end your files with an empty line.', $stackPtr);            }        }        if($tokens[$stackPtr]['code'] === T_OPEN_TAG)        {            /*             Check for start of file whitespace.             */            if($phpcsFile->tokenizerType !== 'PHP')            {                // The first token is always the open tag inserted when tokenizsed                // and the second token is always the first piece of content in                // the file. If the second token is whitespace, there was                // whitespace at the start of the file.                if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)                {                    return;                }            }            else            {                // If its the first token, then there is no space.                if($stackPtr === 0)                {                    return;                }                for($i = ($stackPtr - 1); $i >= 0; $i--)                {                    // If we find something that isn't inline html                    // then there is something previous in the file.                    if($tokens[$i]['type'] !== 'T_INLINE_HTML')                    {                        return;                    }                    // If we have ended up with inline html make sure it isn't just whitespace.                    $tokenContent = trim($tokens[$i]['content']);                    if($tokenContent !== '')                    {                        return;                    }                }//for            }//end if            $phpcsFile->addError('Additional whitespace found at start of file', $stackPtr);        }        else if($phpcsFile->numTokens == ($stackPtr - 1))        {            //-- Wereached the end of the file - without a closing tag            die('BB');        }        else if($tokens[$stackPtr]['code'] === T_CLOSE_TAG)        {            /*            Check for end of file whitespace.            */            if($phpcsFile->tokenizerType === 'JS')            {                // The last token is always the close tag inserted when tokenizsed                // and the second last token is always the last piece of content in                // the file. If the second last token is whitespace, there was                // whitespace at the end of the file.                if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)                {                    return;                }            }            else if($phpcsFile->tokenizerType === 'CSS')            {                // The last two tokens are always the close tag and whitespace                // inserted when tokenizsed and the third last token is always the                // last piece of content in the file. If the third last token is                // whitespace, there was whitespace at the end of the file.                if($tokens[($stackPtr - 3)]['code'] !== T_WHITESPACE)                {                    return;                }                // Adjust the pointer to give the correct line number for the error.                $stackPtr -= 2;            }            else            {                if(isset($tokens[($stackPtr + 1)]) === false)                {                    // The close PHP token is the last in the file.                    return;                }                for($i = ($stackPtr + 1); $i < $phpcsFile->numTokens; $i++)                {                    // If we find something that isn't inline html then there                    // is more to the file.                    if($tokens[$i]['type'] !== 'T_INLINE_HTML')                    {                        return;                    }                    // If we have ended up with inline html make sure it                    // isn't just whitespace.                    $tokenContent = trim($tokens[$i]['content']);                    if(empty($tokenContent) === false)                    {                        return;                    }                }//for            }            $phpcsFile->addError('Additional whitespace found at end of file', $stackPtr);        }        else        {            /*             Check for end of line whitespace.             */            if(strpos($tokens[$stackPtr]['content'], $phpcsFile->eolChar) === false)            {                return;            }            $tokenContent = rtrim($tokens[$stackPtr]['content'], $phpcsFile->eolChar);            if(empty($tokenContent) === false)            {                if(preg_match('|^.*\s+$|', $tokenContent) !== 0)                {                    $phpcsFile->addError('Whitespace found at end of line', $stackPtr);                }            }            /*             Check for multiple blanks lines in a function or class.             */            if($phpcsFile->hasCondition($stackPtr, T_FUNCTION) === true            || $phpcsFile->hasCondition($stackPtr, T_CLASS) === true)            {                if($tokens[($stackPtr - 1)]['line'] < $tokens[$stackPtr]['line']                && $tokens[($stackPtr - 2)]['line'] === $tokens[($stackPtr - 1)]['line'])                {                    // This is an empty line and the line before this one is not                    //  empty, so this could be the start of a multiple empty                    // line block.                    $next  = $phpcsFile->findNext(T_WHITESPACE, $stackPtr, null, true);                    $lines = $tokens[$next]['line'] - $tokens[$stackPtr]['line'];                    if($lines > 1)                    {                        $error = 'Functions and classes must not contain multiple empty lines in a row;'                        ." found $lines empty lines";                        $phpcsFile->addError($error, $stackPtr);                    }                }            }        }//end if    }//function}//class
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.folder');jimport('joomla.filesystem.file');/** * Media Component List Model * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaModelList extends JModelLegacy{	public function getState($property = null, $default = null)	{		static $set;		if (!$set)		{			$input  = JFactory::getApplication()->input;			$folder = $input->get('folder', '', 'path');			$this->setState('folder', $folder);			$parent = str_replace("\\", "/", dirname($folder));			$parent = ($parent == '.') ? null : $parent;			$this->setState('parent', $parent);			$set = true;		}		return parent::getState($property, $default);	}	public function getImages()	{		$list = $this->getList();		return $list['images'];	}	public function getFolders()	{		$list = $this->getList();		return $list['folders'];	}	public function getDocuments()	{		$list = $this->getList();		return $list['docs'];	}	/**	 * Build imagelist	 *	 * @param string $listFolder The image directory to display	 * @since 1.5	 */	public function getList()	{		static $list;		// Only process the list once per request		if (is_array($list))		{			return $list;		}		// Get current path from request		$current = $this->getState('folder');		// If undefined, set to empty		if ($current == 'undefined')		{			$current = '';		}		if (strlen($current) > 0)		{			$basePath = COM_MEDIA_BASE.'/'.$current;		}		else		{			$basePath = COM_MEDIA_BASE;		}		$mediaBase = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE.'/');		$images		= array ();		$folders	= array ();		$docs		= array ();		$fileList = false;		$folderList = false;		if (file_exists($basePath))		{			// Get the list of files and folders from the given folder			$fileList	= JFolder::files($basePath);			$folderList = JFolder::folders($basePath);		}		// Iterate over the files if they exist		if ($fileList !== false)		{			foreach ($fileList as $file)			{				if (is_file($basePath.'/'.$file) && substr($file, 0, 1) != '.' && strtolower($file) !== 'index.html')				{					$tmp = new JObject;					$tmp->name = $file;					$tmp->title = $file;					$tmp->path = str_replace(DIRECTORY_SEPARATOR, '/', JPath::clean($basePath . '/' . $file));					$tmp->path_relative = str_replace($mediaBase, '', $tmp->path);					$tmp->size = filesize($tmp->path);					$ext = strtolower(JFile::getExt($file));					switch ($ext)					{						// Image						case 'jpg':						case 'png':						case 'gif':						case 'xcf':						case 'odg':						case 'bmp':						case 'jpeg':						case 'ico':							$info = @getimagesize($tmp->path);							$tmp->width		= @$info[0];							$tmp->height	= @$info[1];							$tmp->type		= @$info[2];							$tmp->mime		= @$info['mime'];							if (($info[0] > 60) || ($info[1] > 60))							{								$dimensions = MediaHelper::imageResize($info[0], $info[1], 60);								$tmp->width_60 = $dimensions[0];								$tmp->height_60 = $dimensions[1];							}							else {								$tmp->width_60 = $tmp->width;								$tmp->height_60 = $tmp->height;							}							if (($info[0] > 16) || ($info[1] > 16))							{								$dimensions = MediaHelper::imageResize($info[0], $info[1], 16);								$tmp->width_16 = $dimensions[0];								$tmp->height_16 = $dimensions[1];							}							else {								$tmp->width_16 = $tmp->width;								$tmp->height_16 = $tmp->height;							}							$images[] = $tmp;							break;						// Non-image document						default:							$tmp->icon_32 = "media/mime-icon-32/".$ext.".png";							$tmp->icon_16 = "media/mime-icon-16/".$ext.".png";							$docs[] = $tmp;							break;					}				}			}		}		// Iterate over the folders if they exist		if ($folderList !== false)		{			foreach ($folderList as $folder)			{				$tmp = new JObject;				$tmp->name = basename($folder);				$tmp->path = str_replace(DIRECTORY_SEPARATOR, '/', JPath::clean($basePath . '/' . $folder));				$tmp->path_relative = str_replace($mediaBase, '', $tmp->path);				$count = MediaHelper::countFiles($tmp->path);				$tmp->files = $count[0];				$tmp->folders = $count[1];				$folders[] = $tmp;			}		}		$list = array('folders' => $folders, 'docs' => $docs, 'images' => $images);		return $list;	}}
<?php/** * Verifies that control statements conform to their coding standards. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ControlSignatureSniff.php 244676 2007-10-23 06:05:14Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_Standards_AbstractPatternSniff', true) === false) {	throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractPatternSniff not found');}/** * Verifies that control statements conform to their coding standards. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_ControlSignatureSniff extends PHP_CodeSniffer_Standards_AbstractPatternSniff{	/**	 * Constructs a Joomla_Sniffs_ControlStructures_ControlSignatureSniff.	 */	public function __construct()	{		parent::__construct(true);	}//end __construct()	/**	 * Returns the patterns that this test wishes to verify.	 *	 * @return array(string)	 */	protected function getPatterns()	{		return array(			'if (...)EOL...{...}EOL...elseEOL',			'if (...)EOL...{...}EOL...elseif (...)EOL',			'if (...)EOL',			'tryEOL...{EOL...}EOL',			'catch (...)EOL...{EOL',			'doEOL...{...}EOL',			'while (...)EOL...{EOL',			'for (...)EOL...{EOL',			'foreach (...)EOL...{EOL',			'switch (...)EOL...{EOL',		);	}//end getPatterns()	/**	 * Process a pattern.	 *	 * Returns if we are inside a "tmpl" folder - workaround for the Joomla! CMS :(	 *	 * @param array $patternInfo Information about the pattern used for checking, which includes are	 *               parsed token representation of the pattern.	 * @param PHP_CodeSniffer_File $phpcsFile The PHP_CodeSniffer file where the token occured.	 * @param integer $stackPtr The postion in the tokens stack where the listening token type was found.	 *	 * @return return_type	 */	protected function processPattern($patternInfo, PHP_CodeSniffer_File $phpcsFile	, $stackPtr)	{		if (0)		{			/*			 * @todo disabled - This is a special sniff for the Joomla! CMS to exclude			* the tmpl folder which may contain constructs in colon notation			*/			$parts = explode(DIRECTORY_SEPARATOR, $phpcsFile->getFileName());			if ('tmpl' == $parts[count($parts) - 2])			{				return false;			}		}		return parent::processPattern($patternInfo, $phpcsFile, $stackPtr);	}//function}//end class?>
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP response data object class. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpResponse{	/**	 * @var    integer  The server response code.	 * @since  11.3	 */	public $code;	/**	 * @var    array  Response headers.	 * @since  11.3	 */	public $headers = array();	/**	 * @var    string  Server response body.	 * @since  11.3	 */	public $body;}
