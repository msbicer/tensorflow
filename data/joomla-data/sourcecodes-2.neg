<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsViewTag extends JViewLegacy{	protected $state;	protected $items;	protected $item;	protected $children;	protected $pagination;	protected $params;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$item		= $this->get('Item');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Change to catch		/*if (count($errors = $this->get('Errors'))) {			JError::raiseError(500, implode("\n", $errors));			return false;		}*/		// Check whether access level allows access.		// TODO: SHould already be computed in $item->params->get('access-view')		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		foreach ($item as $itemElement)		{			if (!in_array($itemElement->access, $groups))			{				unset($itemElement);			}			// Prepare the data.			if (!empty($itemElement))			{				$temp = new JRegistry;				$temp->loadString($itemElement->params);				$itemElement->params = clone($params);				$itemElement->params->merge($temp);				$itemElement->params = (array) json_decode($itemElement->params);			}		}		$this->state      = &$state;		$this->items      = &$items;		$this->children   = &$children;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		$this->item       = &$item;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		// Merge tag params. If this is single-tag view, menu params override tag params		// Otherwise, article params override menu item params		$this->params	= $this->state->get('params');		$active	= $app->getMenu()->getActive();		$temp	= clone ($this->params);		// Check to see which parameters should take priority		if ($active)		{			$currentLink = $active->link;			// If the current view is the active item and an tag view for one tag, then the menu item params take priority			if (strpos($currentLink, 'view=tag') && (strpos($currentLink, '&id[0]='.(string) $item[0]->id)))			{				// $item->params are the article params, $temp are the menu item params				// Merge so that the menu item params take priority				$this->params->merge($temp);				// Load layout from active query (in case it is an alternative menu item)				if (isset($active->query['layout'])) {					$this->setLayout($active->query['layout']);				}			}			else			{				// Current view is not tags, so the global params take priority since tags is not an item.				// Merge the menu item params with the global params so that the article params take priority				$temp->merge($this->state->params);				$this->params = $temp;				// Check for alternative layouts (since we are not in a single-article menu item)				// Single-article menu item layout takes priority over alt layout for an article				if ($layout = $this->params->get('tags_layout'))				{					$this->setLayout($layout);				}			}		}		else		{			// Merge so that item params take priority			$temp->merge($item[0]->params);			$item[0]->params = $temp;			// Check for alternative layouts (since we are not in a single-tag menu item)			// Single-tag menu item layout takes priority over alt layout for an article			if ($layout = $item[0]->params->get('tag_layout'))			{				$this->setLayout($layout);			}		}		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_TAGS_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_tags'))		{			$this->params->set('page_subheading', $item->title);		}		// If this is not a single tag menu item, set the page title to the menu item title		if (count($this->item) == 1)		{			$title = $this->item[0]->title;		}		else		{			$title = $this->state->params->get('page_title');		}		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		foreach ($this->item as $j => $itemElement)		{			if ($itemElement->metadesc)			{				$this->document->setDescription($itemElement->metadesc);			}			elseif ($itemElement->metadesc && $this->params->get('menu-meta_description'))			{				$this->document->setDescription($this->params->get('menu-meta_description'));			}			if ($itemElement->metakey)			{				$this->document->setMetadata('keywords', $itemElement->metakey);			}			elseif (!$itemElement->metakey && $this->params->get('menu-meta_keywords'))			{				$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));			}			if ($this->params->get('robots'))			{				$this->document->setMetadata('robots', $this->params->get('robots'));			}			if ($app->getCfg('MetaAuthor') == '1')			{				$this->document->setMetaData('author', $itemElement->created_user_id);			}		}		// TODO create tag feed document		// Add alternative feed link		if ($this->params->get('show_feed_link', 1) == 1)		{			$link	= '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link.'&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link.'&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Media component * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.0 */class MediaViewMediaList extends JViewLegacy{	public function display($tpl = null)	{		// Do not allow cache		JResponse::allowCache(false);		$app	= JFactory::getApplication();		$style = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');		$lang	= JFactory::getLanguage();		JHtml::_('behavior.framework', true);		$document = JFactory::getDocument();		/*		$document->addStyleSheet('../media/media/css/medialist-'.$style.'.css');		if ($lang->isRTL()) :			$document->addStyleSheet('../media/media/css/medialist-'.$style.'_rtl.css');		endif;		*/		$document->addScriptDeclaration("		window.addEvent('domready', function()		{			window.parent.document.updateUploader();			$$('a.img-preview').each(function(el)			{				el.addEvent('click', function(e)				{					new Event(e).stop();					window.top.document.preview.fromElement(el);				});			});		});");		$images = $this->get('images');		$documents = $this->get('documents');		$folders = $this->get('folders');		$state = $this->get('state');		$this->baseURL = JURI::root();		$this->images = &$images;		$this->documents = &$documents;		$this->folders = &$folders;		$this->state = &$state;		parent::display($tpl);	}	function setFolder($index = 0)	{		if (isset($this->folders[$index]))		{			$this->_tmp_folder = &$this->folders[$index];		}		else		{			$this->_tmp_folder = new JObject;		}	}	function setImage($index = 0)	{		if (isset($this->images[$index]))		{			$this->_tmp_img = &$this->images[$index];		}		else		{			$this->_tmp_img = new JObject;		}	}	function setDoc($index = 0)	{		if (isset($this->documents[$index]))		{			$this->_tmp_doc = &$this->documents[$index];		}		else		{			$this->_tmp_doc = new JObject;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');// Import the com_menus helper.require_once realpath(JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Supports an HTML grouped select list of menu item grouped by menu * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6 */class JFormFieldMenuitem extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'MenuItem';	/**	 * Method to get the field option groups.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   1.6	 */	protected function getGroups()	{		$groups = array();		// Initialize some field attributes.		$menuType = (string) $this->element['menu_type'];		$published = $this->element['published'] ? explode(',', (string) $this->element['published']) : array();		$disable = $this->element['disable'] ? explode(',', (string) $this->element['disable']) : array();		$language = $this->element['language'] ? explode(',', (string) $this->element['language']) : array();		// Get the menu items.		$items = MenusHelper::getMenuLinks($menuType, 0, 0, $published, $language);		// Build group for a specific menu type.		if ($menuType)		{			// Initialize the group.			$groups[$menuType] = array();			// Build the options array.			foreach ($items as $link)			{				$groups[$menuType][] = JHtml::_('select.option', $link->value, $link->text, 'value', 'text', in_array($link->type, $disable));			}		}		// Build groups for all menu types.		else		{			// Build the groups arrays.			foreach ($items as $menu)			{				// Initialize the group.				$groups[$menu->menutype] = array();				// Build the options array.				foreach ($menu->links as $link)				{					$groups[$menu->menutype][] = JHtml::_(						'select.option', $link->value, $link->text, 'value', 'text',						in_array($link->type, $disable)					);				}			}		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Category Controller * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesControllerCategory extends JControllerForm{	/**	 * The extension for which the categories apply.	 *	 * @var    string	 * @since  1.6	 */	protected $extension;	/**	 * Constructor.	 *	 * @param  array  $config  An optional associative array of configuration settings.	 *	 * @since  1.6	 * @see    JController	 */	public function __construct($config = array())	{		parent::__construct($config);		// Guess the JText message prefix. Defaults to the option.		if (empty($this->extension))		{			$this->extension = $this->input->get('extension', 'com_content');		}	}	/**	 * Method to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		return ($user->authorise('core.create', $this->extension) || count($user->getAuthorisedCategories($this->extension, 'core.create')));	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'parent_id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$user = JFactory::getUser();		$userId = $user->get('id');		// Check general edit permission first.		if ($user->authorise('core.edit', $this->extension))		{			return true;		}		// Check specific edit permission.		if ($user->authorise('core.edit', $this->extension . '.category.' . $recordId))		{			return true;		}		// Fallback on edit.own.		// First test if the permission is available.		if ($user->authorise('core.edit.own', $this->extension . '.category.' . $recordId) || $user->authorise('core.edit.own', $this->extension))		{			// Now test the owner is the user.			$ownerId = (int) isset($data['created_user_id']) ? $data['created_user_id'] : 0;			if (empty($ownerId) && $recordId)			{				// Need to do a lookup from the model.				$record = $this->getModel()->getItem($recordId);				if (empty($record))				{					return false;				}				$ownerId = $record->created_user_id;			}			// If the owner matches 'me' then do the test.			if ($ownerId == $userId)			{				return true;			}		}		return false;	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   1.6	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Category');		// Preset the redirect		$this->setRedirect('index.php?option=com_categories&view=categories&extension=' . $this->extension);		return parent::batch($model);	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $urlVar    The name of the URL variable for the id.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = 'id')	{		$append = parent::getRedirectToItemAppend($recordId);		$append .= '&extension=' . $this->extension;		return $append;	}	/**	 * Gets the URL arguments to append to a list redirect.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToListAppend()	{		$append = parent::getRedirectToListAppend();		$append .= '&extension=' . $this->extension;		return $append;	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		$task = $this->getTask();		$item = $model->getItem();		if (isset($item->params) && is_array($item->params))		{			$registry = new JRegistry;			$registry->loadArray($item->params);			$item->params = (string) $registry;		}		if (isset($item->metadata) && is_array($item->metadata))		{			$registry = new JRegistry;			$registry->loadArray($item->metadata);			$item->metadata = (string) $registry;		}		$id = $item->id;		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$langs  = ModLoginHelper::getLanguageList();$return = ModLoginHelper::getReturnURI();require JModuleHelper::getLayoutPath('mod_login', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * HTML behavior class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class JHtmlFinder{	/**	 * Creates a list of types to filter on.	 *	 * @return  array  An array containing the types that can be selected.	 *	 * @since   2.5	 */	public static function typeslist()	{		$lang = JFactory::getLanguage();		// Load the finder types.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('DISTINCT t.title AS text, t.id AS value')			->from($db->quoteName('#__finder_types') . ' AS t')			->join('LEFT', $db->quoteName('#__finder_links') . ' AS l ON l.type_id = t.id')			->order('t.title ASC');		$db->setQuery($query);		try		{			$rows = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return;		}		// Compile the options.		$options = array();		foreach ($rows as $row)		{			$key = $lang->hasKey(FinderHelperLanguage::branchPlural($row->text))					? FinderHelperLanguage::branchPlural($row->text) : $row->text;			$string = JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_($key));			$options[] = JHtml::_('select.option', $row->value, $string);		}		return $options;	}	/**	 * Creates a list of maps.	 *	 * @return  array  An array containing the maps that can be selected.	 *	 * @since   2.5	 */	public static function mapslist()	{		$lang = JFactory::getLanguage();		// Load the finder types.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('title AS text, id AS value')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' = 1')			->order('ordering, title ASC');		$db->setQuery($query);		try		{			$rows = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return;		}		// Compile the options.		$options = array();		$options[] = JHtml::_('select.option', '1', JText::_('COM_FINDER_MAPS_BRANCHES'));		foreach ($rows as $row)		{			$key = $lang->hasKey(FinderHelperLanguage::branchPlural($row->text))					? FinderHelperLanguage::branchPlural($row->text) : $row->text;			$string = JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_($key));			$options[] = JHtml::_('select.option', $row->value, $string);		}		return $options;	}	/**	 * Creates a list of published states.	 *	 * @return  array  An array containing the states that can be selected.	 *	 * @since   2.5	 */	public static function statelist()	{		$options = array();		$options[] = JHtml::_('select.option', '1', JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_('JPUBLISHED')));		$options[] = JHtml::_('select.option', '0', JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_('JUNPUBLISHED')));		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=debuggroup&user_id='.(int) $this->state->get('filter.user_id'));?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn tip" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button type="button" class="btn tip" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_RESET'); ?>"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_NAME', 'a.name', $listDirn, $listOrder); ?>					</th>					<?php foreach ($this->actions as $key => $action) : ?>					<th width="5%" class="nowrap center">						<span class="hasTip" title="<?php echo htmlspecialchars(JText::_($key) . '::' . JText::_($action[1]), ENT_COMPAT, 'UTF-8'); ?>"><?php echo JText::_($key); ?></span>					</th>					<?php endforeach; ?>					<th width="5%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LFT', 'a.lft', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>				<tr class="row1">					<td colspan="15">						<div>							<?php echo JText::_('COM_USERS_DEBUG_LEGEND'); ?>							<span class="btn disabled btn-micro btn-warning"><i class="icon-white icon-ban-circle"></i></span> <?php echo JText::_('COM_USERS_DEBUG_IMPLICIT_DENY');?>							<span class="btn disabled btn-micro btn-success"><i class="icon-white icon-ok"></i></span> <?php echo JText::_('COM_USERS_DEBUG_EXPLICIT_ALLOW');?>							<span class="btn disabled btn-micro btn-danger"><i class="icon-white icon-remove"></i></span> <?php echo JText::_('COM_USERS_DEBUG_EXPLICIT_DENY');?>						</div>					</td>				</tr>				<?php foreach ($this->items as $i => $item) : ?>					<tr class="row0">						<td>							<?php echo $this->escape($item->title); ?>						</td>						<td class="nowrap">							<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>							<?php echo $this->escape($item->name); ?>						</td>						<?php foreach ($this->actions as $action) : ?>							<?php							$name  = $action[0];							$check = $item->checks[$name];							if ($check === true) :								$class  = 'icon-ok';								$button = 'btn-success';							elseif ($check === false) :								$class  = 'icon-remove';								$button = 'btn-danger';							elseif ($check === null) :								$class  = 'icon-ban-circle';								$button = 'btn-warning';							else :								$class  = '';								$button = '';							endif;							?>						<td class="center">							<span class="btn disabled btn-micro <?php echo $button; ?>">								<i class="icon-white <?php echo $class; ?>"></i>							</span>						</td>						<?php endforeach; ?>						<td class="center">							<?php echo (int) $item->lft; ?>							- <?php echo (int) $item->rgt; ?>						</td>						<td class="center">							<?php echo (int) $item->id; ?>						</td>					</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Search feed view class for the Finder package. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderViewSearch extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  JError object on failure, void on success.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Get the application		$app = JFactory::getApplication();		// Adjust the list limit to the feed limit.		$app->input->set('limit', $app->getCfg('feed_limit'));		// Get view data.		$state = $this->get('State');		$params = $state->get('params');		$query = $this->get('Query');		$results = $this->get('Results');		// Push out the query data.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		$explained = JHtml::_('query.explained', $query);		// Set the document title.		$title = $params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		// Configure the document description.		if (!empty($explained))		{			$this->document->setDescription(html_entity_decode(strip_tags($explained), ENT_QUOTES, 'UTF-8'));		}		// Set the document link.		$this->document->link = JRoute::_($query->toURI());		// If we don't have any results, we are done.		if (empty($results))		{			return;		}		// Convert the results to feed entries.		foreach ($results as $result)		{			// Convert the result to a feed entry.			$item = new JFeedItem;			$item->title = $result->title;			$item->link = JRoute::_($result->route);			$item->description = $result->description;			$item->date = (int) $result->start_date ? JHtml::date($result->start_date, 'l d F Y') : $result->indexdate;			// Get the taxonomy data.			$taxonomy = $result->getTaxonomy();			// Add the category to the feed if available.			if (isset($taxonomy['Category']))			{				$node = array_pop($taxonomy['Category']);				$item->category = $node->title;			}			// loads item info into rss array			$this->document->addItem($item);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeed controller class. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsControllerNewsfeed extends JControllerForm{	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('filter_category_id'), 'int');		$allow = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow = $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absence of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user = JFactory::getUser();		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return $user->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Newsfeed', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Categories. * * @package     Joomla.Plugin * @subpackage  Finder.Categories * @since       2.5 */class PlgFinderCategories extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Categories';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_categories';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'category';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'Category';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__categories';	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'published';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderDelete($context, $table)	{		if ($context == 'com_categories.category')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);				// Reindex the item				$this->reindex($row->id);			}			// Check if the parent access level is different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row     A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// Query the database for the old access level and the parent if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// The category published state is tied to the parent category			// published state so we need to look up all published states			// before we change anything.			foreach ($pks as $pk)			{				$query = clone($this->getStateQuery());				$query->where('a.id = ' . (int) $pk);				// Get the published states.				$this->db->setQuery($query);				$item = $this->db->loadObject();				// Translate the state.				$state = null;				if ($item->parent_id != 1)				{					$state = $item->cat_state;				}				$temp = $this->translateState($value, $state);				// Update the item.				$this->change($pk, 'state', $temp);				// Reindex the item				$this->reindex($pk);			}		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Need to import component route helpers dynamically, hence the reason it's handled here		$path = JPATH_SITE . '/components/' . $item->extension . '/helpers/route.php';		if (is_file($path))		{			include_once $path;		}		$extension = ucfirst(substr($item->extension, 4));		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = $registry;		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		/* Add the meta-data processing instructions based on the categories		 * configuration parameters.		 */		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Handle the link to the meta-data.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'link');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		//$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Trigger the onContentPrepare event.		$item->summary = FinderIndexerHelper::prepareContent($item->summary, $item->params);		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $item->extension, $this->layout);		$class = $extension . 'HelperRoute';		if (class_exists($class) && method_exists($class, 'getCategoryRoute'))		{			$item->route = $class::getCategoryRoute($item->id);		}		else		{			$item->route = ContentHelperRoute::getCategoryRoute($item->slug, $item->catid);		}		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		// Translate the state. Categories should only be published if the parent category is published.		$item->state = $this->translateState($item->state);		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Category');		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load com_content route helper as it is the fallback for routing in the indexer in this instance.		include_once JPATH_SITE . '/components/com_content/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.title, a.alias, a.description AS summary, a.extension')			->select('a.created_user_id AS created_by, a.modified_time AS modified, a.modified_user_id AS modified_by')			->select('a.metakey, a.metadesc, a.metadata, a.language, a.lft, a.parent_id, a.level')			->select('a.created_time AS start_date, a.published AS state, a.access, a.params');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias)			->from('#__categories AS a')			->where($db->quoteName('a.id') . ' > 1');		return $query;	}	/**	 * Method to get a SQL query to load the published and access states for	 * an article and category.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getStateQuery()	{		$query = $this->db->getQuery(true)			->select($this->db->quoteName('a.id'))			->select('a.' . $this->state_field . ' AS state, c.published AS cat_state')			->select('a.access, c.access AS cat_access')			->from($this->db->quoteName('#__categories') . ' AS a')			->join('LEFT', '#__categories AS c ON c.id = a.parent_id');		return $query;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';JHtml::_('bootstrap.tooltip');$item = $displayData->item;$items = $displayData->get('items');$params = $displayData->params;$extension = $displayData->get('extension');$className = substr($extension, 4);// This will work for the core components but not necessarily for other components// that may have different pluralisation rules.if (substr($className, -1) == 's'){	$className = rtrim($className, 's');}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');$app = JFactory::getApplication();$input = $app->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'category.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_categories&extension=' . $input->getCmd('extension', 'com_content') . '&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<div class="row-fluid">	<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_CATEGORIES_FIELDSET_DETAILS', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('title'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('title'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('alias'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('description'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('description'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('extension'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('extension'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_CATEGORIES_FIELDSET_PUBLISHING', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('id'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('hits'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('hits'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('created_user_id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('created_user_id'); ?>						</div>					</div>					<?php if (intval($this->item->created_time)) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('created_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('created_time'); ?>							</div>						</div>					<?php endif; ?>					<?php if ($this->item->modified_user_id) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_user_id'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_user_id'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_time'); ?>							</div>						</div>					<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'options', JText::_('CATEGORIES_FIELDSET_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('options'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('metadata'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo $this->loadTemplate('extrafields'); ?>				<?php if ($this->assoc) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>						<fieldset>							<?php echo $this->loadTemplate('associations'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>				<?php if ($this->canDo->get('core.admin')) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'rules', JText::_('COM_CATEGORIES_FIELDSET_RULES', true)); ?>						<fieldset>							<?php echo $this->form->getInput('rules'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->		<div class="span2">			<h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('title'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('parent_id'); ?>					<div class="controls">						<?php echo $this->form->getInput('parent_id'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('published'); ?>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('access'); ?>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('language'); ?>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<?php foreach ($this->form->getFieldset('jmetadata') as $field) : ?>						<?php if ($field->name == 'jform[metadata][tags][]') :?>						<div class="control-group">							<div class="control-label"><?php echo $field->label; ?></div>							<div class="controls"><?php echo $field->input; ?></div>						</div>						<?php endif; ?>					<?php endforeach; ?>				</div>			</fieldset>		</div>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of plugin records. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsModelPlugins extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'extension_id', 'a.extension_id',				'name', 'a.name',				'folder', 'a.folder',				'element', 'a.element',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'state', 'a.state',				'enabled', 'a.enabled',				'access', 'a.access', 'access_level',				'ordering', 'a.ordering',				'client_id', 'a.client_id',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$state = $this->getUserStateFromRequest($this->context . '.filter.enabled', 'filter_enabled', '', 'string');		$this->setState('filter.enabled', $state);		$folder = $this->getUserStateFromRequest($this->context . '.filter.folder', 'filter_folder', null, 'cmd');		$this->setState('filter.folder', $folder);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_plugins');		$this->setState('params', $params);		// List state information.		parent::populateState('folder', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.folder');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Returns an object list	 *	 * @param   string The query	 * @param   int    Offset	 * @param   int    The number of records	 * @return  array	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$search = $this->getState('filter.search');		$ordering = $this->getState('list.ordering', 'ordering');		if ($ordering == 'name' || (!empty($search) && stripos($search, 'id:') !== 0))		{			$this->_db->setQuery($query);			$result = $this->_db->loadObjectList();			$this->translate($result);			if (!empty($search))			{				foreach ($result as $i => $item)				{					if (!preg_match("/$search/i", $item->name))					{						unset($result[$i]);					}				}			}			$lang = JFactory::getLanguage();			$direction = ($this->getState('list.direction') == 'desc') ? -1 : 1;			JArrayHelper::sortObjects($result, $ordering, $direction, true, $lang->getLocale());			$total = count($result);			$this->cache[$this->getStoreId('getTotal')] = $total;			if ($total < $limitstart)			{				$limitstart = 0;				$this->setState('list.start', 0);			}			return array_slice($result, $limitstart, $limit ? $limit : null);		}		else		{			if ($ordering == 'ordering')			{				$query->order('a.folder ASC');				$ordering = 'a.ordering';			}			$query->order($this->_db->quoteName($ordering) . ' ' . $this->getState('list.direction'));			if ($ordering == 'folder')			{				$query->order('a.ordering ASC');			}			$result = parent::_getList($query, $limitstart, $limit);			$this->translate($result);			return $result;		}	}	/**	 * Translate a list of objects	 *	 * @param   array The array of objects	 * @return  array The array of translated objects	 */	protected function translate(&$items)	{		$lang = JFactory::getLanguage();		foreach ($items as &$item)		{			$source = JPATH_PLUGINS . '/' . $item->folder . '/' . $item->element;			$extension = 'plg_' . $item->folder . '_' . $item->element;			$lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)				|| $lang->load($extension . '.sys', $source, null, false, false)				|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)				|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);		}	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.extension_id , a.name, a.element, a.folder, a.checked_out, a.checked_out_time,' .					' a.enabled, a.access, a.ordering'			)		)			->from($db->quoteName('#__extensions') . ' AS a')			->where($db->quoteName('type') . ' = ' . $db->quote('plugin'));		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Filter by published state		$published = $this->getState('filter.enabled');		if (is_numeric($published))		{			$query->where('a.enabled = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.enabled IN (0, 1))');		}		// Filter by state		$query->where('a.state >= 0');		// Filter by folder.		if ($folder = $this->getState('filter.folder'))		{			$query->where('a.folder = ' . $db->quote($folder));		}		// Filter by search in id		$search = $this->getState('filter.search');		if (!empty($search) && stripos($search, 'id:') === 0)		{			$query->where('a.extension_id = ' . (int) substr($search, 3));		}		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('CategoriesHelper', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/categories.php');/** * @package     Joomla.Administrator * @subpackage  com_categories */abstract class JHtmlCategoriesAdministrator{	/**	 * @param   int $catid	The category item id	 */	public static function association($catid, $extension = 'com_content')	{		// Get the associations		$associations = CategoriesHelper::getAssociations($catid, $extension);		JArrayHelper::toInteger($associations);		// Get the associated categories		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('c.*')			->from('#__categories as c')			->where('c.id IN ('.implode(',', array_values($associations)).')')			->join('LEFT', '#__languages as l ON c.language=l.lang_code')			->select('l.image')			->select('l.title as language_title');		$db->setQuery($query);		$items = $db->loadObjectList('id');		// Check for a database error.		if ($error = $db->getErrorMsg())		{			JError::raiseWarning(500, $error);			return false;		}		// Construct html		$text = array();		foreach ($associations as $tag => $associated)		{			if ($associated != $catid)			{				$text[] = JText::sprintf('COM_CATEGORIES_TIP_ASSOCIATED_LANGUAGE', JHtml::_('image', 'mod_languages/'.$items[$associated]->image.'.gif', $items[$associated]->language_title, array('title' => $items[$associated]->language_title), true), $items[$associated]->title);			}		}		return JHtml::_('tooltip', implode('<br />', $text), JText::_('COM_CATEGORIES_TIP_ASSOCIATION'), 'admin/icon-16-links.png');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQuerySqlsrv extends JDatabaseQuery{	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $name_quotes = '`';	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $null_date = '1900-01-01 00:00:00';	/**	 * Magic function to convert the query to a string.	 *	 * @return  string	The completed query.	 *	 * @since   11.1	 */	public function __toString()	{		$query = '';		switch ($this->type)		{			case 'insert':				$query .= (string) $this->insert;				// Set method				if ($this->set)				{					$query .= (string) $this->set;				}				// Columns-Values method				elseif ($this->values)				{					if ($this->columns)					{						$query .= (string) $this->columns;					}					$elements = $this->insert->getElements();					$tableName = array_shift($elements);					$query .= 'VALUES ';					$query .= (string) $this->values;					if ($this->autoIncrementField)					{						$query = 'SET IDENTITY_INSERT ' . $tableName . ' ON;' . $query . 'SET IDENTITY_INSERT ' . $tableName . ' OFF;';					}					if ($this->where)					{						$query .= (string) $this->where;					}				}				break;			default:				$query = parent::__toString();				break;		}		return $query;	}	/**	 * Casts a value to a char.	 *	 * Ensure that the value is properly quoted before passing to the method.	 *	 * @param   string  $value  The value to cast as a char.	 *	 * @return  string  Returns the cast value.	 *	 * @since   11.1	 */	public function castAsChar($value)	{		return 'CAST(' . $value . ' as NVARCHAR(10))';	}	/**	 * Gets the function to determine the length of a character string.	 *	 * @param   string  $field      A value.	 * @param   string  $operator   Comparison operator between charLength integer value and $condition	 * @param   string  $condition  Integer value to compare charLength with.	 *	 * @return  string  The required char length call.	 *	 * @since 11.1	 */	public function charLength($field, $operator = null, $condition = null)	{		return 'DATALENGTH(' . $field . ')' . (isset($operator) && isset($condition) ? ' ' . $operator . ' ' . $condition : '');	}	/**	 * Concatenates an array of column names or values.	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.1	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			return '(' . implode('+' . $this->quote($separator) . '+', $values) . ')';		}		else		{			return '(' . implode('+', $values) . ')';		}	}	/**	 * Gets the current date and time.	 *	 * @return  string	 *	 * @since   11.1	 */	public function currentTimestamp()	{		return 'GETDATE()';	}	/**	 * Get the length of a string in bytes.	 *	 * @param   string  $value  The string to measure.	 *	 * @return  integer	 *	 * @since   11.1	 */	public function length($value)	{		return 'LEN(' . $value . ')';	}	/**	 * Add to the current date and time.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date to add to; type may be time or datetime.	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @note Not all drivers support all units.	 * @link http://msdn.microsoft.com/en-us/library/ms186819.aspx for more information	 */	public function dateAdd($date, $interval, $datePart)	{		return "DATEADD('" . $datePart . "', '" . $interval . "', '" . $date . "'" . ')';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/pdo * @since       12.1 */class JDatabaseDriverSqlite extends JDatabaseDriverPdo{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlite';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc. The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = '`';	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true);		$this->setQuery('DROP TABLE ' . ($ifExists ? 'IF EXISTS ' : '') . $query->quoteName($tableName));		$this->execute();		return $this;	}	/**	 * Method to escape a string for usage in an SQLite statement.	 *	 * Note: Using query objects with bound variables is	 * preferable to the below.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Unused optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		if (is_int($text) || is_float($text))		{			return $text;		}		return SQLite3::escapeString($text);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 */	public function getCollation()	{		return $this->charset;	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * Note: Doesn't appear to have support in SQLite	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		// Sanitize input to an array and iterate over the list.		settype($tables, 'array');		return $tables;	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$columns = array();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->setQuery('pragma table_info(' . $table . ')');		$this->setQuery($query);		$fields = $this->loadObjectList();		if ($typeOnly)		{			foreach ($fields as $field)			{				$columns[$field->NAME] = $field->TYPE;			}		}		else		{			foreach ($fields as $field)			{				// Do some dirty translation to MySQL output.				// TODO: Come up with and implement a standard across databases.				$columns[$field->NAME] = (object) array(					'Field' => $field->NAME,					'Type' => $field->TYPE,					'Null' => ($field->NOTNULL == '1' ? 'NO' : 'YES'),					'Default' => $field->DFLT_VALUE,					'Key' => ($field->PK == '1' ? 'PRI' : '')				);			}		}		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $columns;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		$keys = array();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->setQuery('pragma table_info( ' . $table . ')');		// $query->bind(':tableName', $table);		$this->setQuery($query);		$rows = $this->loadObjectList();		foreach ($rows as $column)		{			if ($column->PK == 1)			{				$keys[$column->NAME] = $column;			}		}		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $keys;	}	/**	 * Method to get an array of all tables in the database (schema).	 *	 * @return  array   An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		$query = $this->getQuery(true);		$tables = array();		$type = 'table';		$query->select('name')			->from('sqlite_master')			->where('type = :type')			->bind(':type', $type)			->order('name');		$this->setQuery($query);		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$this->setQuery("SELECT sqlite_version()");		return $this->loadResult();	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * Returns false automatically for the Oracle driver since	 * you can only set the character set when the connection	 * is created.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return false;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $table  The name of the table to unlock.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function lockTable($table)	{		return $this;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by Sqlite.	 * @param   string  $prefix    Not used by Sqlite.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->setQuery('ALTER TABLE ' . $oldTable . ' RENAME TO ' . $newTable)->execute();		return $this;	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		return $this;	}	/**	 * Test to see if the PDO ODBC connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return class_exists('PDO') && in_array('sqlite', PDO::getAvailableDrivers());	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.2 */class JFormRuleColor extends JFormRule{	/**	 * Method to test for a valid color in hexadecimal.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.2	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$value = trim($value);		if (empty($value))		{			// A color field can't be empty, we default to black. This is the same as the HTML5 spec.			$value = '#000000';			return true;		}		if ($value[0] != '#')		{			return false;		}		// Remove the leading # if present to validate the numeric part		$value = ltrim($value, '#');		// The value must be 6 or 3 characters long		if (!((strlen($value) == 6 || strlen($value) == 3) && ctype_xdigit($value)))		{			return false;		}		// Prepend the # again		$value = '#' . $value;		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if ($this->user->get('guest')):	// The user is not logged in.	echo $this->loadTemplate('login');else:	// The user is already logged in.	echo $this->loadTemplate('logout');endif;
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_redirect&view=links'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', RedirectHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_OLD_URL', 'a.old_url', $listDirn, $listOrder); ?>				</th>				<th class="width-30">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_NEW_URL', 'a.new_url', $listDirn, $listOrder); ?>				</th>				<th class="width-30">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_REFERRER', 'a.referer', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_CREATED_DATE', 'a.created_date', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canCreate = $user->authorise('core.create',     'com_redirect');			$canEdit   = $user->authorise('core.edit',       'com_redirect');			$canChange = $user->authorise('core.edit.state', 'com_redirect');			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_redirect&task=link.edit&id='.$item->id);?>" title="<?php echo $this->escape($item->old_url); ?>">							<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?></a>					<?php else : ?>							<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?>					<?php endif; ?>				</td>				<td>					<?php echo $this->escape($item->new_url); ?>				</td>				<td>					<?php echo $this->escape($item->referer); ?>				</td>				<td class="center">					<?php echo JHtml::_('date', $item->created_date, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo JHtml::_('redirect.published', $item->published, $i); ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<p class="footer-tip">		<?php if ($this->enabled) : ?>			<span class="enabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_ENABLED'); ?></span>		<?php else : ?>			<span class="disabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_DISABLED'); ?></span>		<?php endif; ?>	</p>	<div class="clr"></div>	<?php if (!empty($this->items)) : ?>		<?php echo $this->loadTemplate('addform'); ?>	<?php endif; ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink Component HTML Helper * * @static * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class JHtmlIcon{	public static function create($weblink, $params)	{		$uri = JURI::getInstance();		$url = JRoute::_(WeblinksHelperRoute::getFormRoute(0, base64_encode($uri)));		$text = JHtml::_('image', 'system/new.png', JText::_('JNEW'), null, true);		$button = JHtml::_('link', $url, $text);		$output = '<span class="hasTip" title="'.JText::_('COM_WEBLINKS_FORM_CREATE_WEBLINK').'">'.$button.'</span>';		return $output;	}	public static function edit($weblink, $params, $attribs = array())	{		$uri = JURI::getInstance();		if ($params && $params->get('popup'))		{			return;		}		if ($weblink->state < 0)		{			return;		}		JHtml::_('behavior.tooltip');		$url	= WeblinksHelperRoute::getFormRoute($weblink->id, base64_encode($uri));		$icon	= $weblink->state ? 'edit.png' : 'edit_unpublished.png';		$text	= JHtml::_('image', 'system/'.$icon, JText::_('JGLOBAL_EDIT'), null, true);		if ($weblink->state == 0)		{			$overlib = JText::_('JUNPUBLISHED');		}		else		{			$overlib = JText::_('JPUBLISHED');		}		$date = JHtml::_('date', $weblink->created);		$author = $weblink->created_by_alias ? $weblink->created_by_alias : $weblink->author;		$overlib .= '&lt;br /&gt;';		$overlib .= $date;		$overlib .= '&lt;br /&gt;';		$overlib .= htmlspecialchars($author, ENT_COMPAT, 'UTF-8');		$button = JHtml::_('link', JRoute::_($url), $text);		$output = '<span class="hasTip" title="'.JText::_('COM_WEBLINKS_EDIT').' :: '.$overlib.'">'.$button.'</span>';		return $output;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * File installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterFile extends JAdapterInstance{	protected $route = 'install';	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path on which to find language files.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path)	{		$this->manifest = $this->parent->getManifest();		$extension = 'files_' . str_replace('files_', '', strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd')));		$lang = JFactory::getLanguage();		$source = $path;		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension's name		$name = JFilterInput::getInstance()->clean((string) $this->manifest->name, 'string');		$this->set('name', $name);		// Set element		$manifestPath = JPath::clean($this->parent->getPath('manifest'));		$element = preg_replace('/\.xml/', '', basename($manifestPath));		$this->set('element', $element);		// Get the component description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Check if the extension by the same name is already installed		if ($this->extensionExistsInSystem($element))		{			// Package with same name already exists			if (!$this->parent->isOverwrite())			{				// We're not overwriting so abort				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_SAME_NAME'));				return false;			}			else			{				// Swap to the update route				$this->route = 'update';			}		}		// Set the file root path		if ($name == 'files_joomla')		{			// If we are updating the Joomla core, set the root path to the root of Joomla			$this->parent->setPath('extension_root', JPATH_ROOT);		}		else		{			$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/files/' . $this->get('element'));		}		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$this->scriptElement = $this->manifest->scriptfile;		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight($this->route, $this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		// Populate File and Folder List to copy		$this->populateFilesAndFolderList();		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Now that we have folder list, lets start creating them		foreach ($this->folderList as $folder)		{			if (!JFolder::exists($folder))			{				if (!$created = JFolder::create($folder))				{					JLog::add(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_FAIL_SOURCE_DIRECTORY', $folder), JLog::WARNING, 'jerror');					// If installation fails, rollback					$this->parent->abort();					return false;				}				// Since we created a directory and will want to remove it if we have to roll back.				// The installation due to some errors, let's add it to the installation step stack.				if ($created)				{					$this->parent->pushStep(array('type' => 'folder', 'path' => $folder));				}			}		}		// Now that we have file list, let's start copying them		$this->parent->copyFiles($this->fileList);		// Parse optional tags		$this->parent->parseLanguages($this->manifest->languages);		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Get a database connector object		$db = $this->parent->getDbo();		/*		 * Check to see if a file extension by the same name is already installed		 * If it is, then update the table because if the files aren't there		 * we can assume that it was (badly) uninstalled		 * If it isn't, add an entry to extensions		 */		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('file'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent->abort(				JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))			);			return false;		}		$id = $db->loadResult();		$row = JTable::getInstance('extension');		if ($id)		{			// Load the entry and update the manifest_cache			$row->load($id);			// Update name			$row->set('name', $this->get('name'));			// Update manifest			$row->manifest_cache = $this->parent->generateManifestCache();			if (!$row->store())			{				// Install failed, roll back changes				$this->parent->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))				);				return false;			}		}		else		{			// Add an entry to the extension table with a whole heap of defaults			$row->set('name', $this->get('name'));			$row->set('type', 'file');			$row->set('element', $this->get('element'));			// There is no folder for files so leave it blank			$row->set('folder', '');			$row->set('enabled', 1);			$row->set('protected', 0);			$row->set('access', 0);			$row->set('client_id', 0);			$row->set('params', '');			$row->set('system_data', '');			$row->set('manifest_cache', $this->parent->generateManifestCache());			if (!$row->store())			{				// Install failed, roll back changes				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_ROLLBACK', $db->stderr(true)));				return false;			}			// Since we have created a module item, we add it to the installation step stack			// so that if we have to rollback the changes we can undo it.			$this->parent->pushStep(array('type' => 'extension', 'extension_id' => $row->extension_id));		}		// Let's run the queries for the file		if (strtolower($this->route) == 'install')		{			$result = $this->parent->parseSQLFiles($this->manifest->install->sql);			if ($result === false)			{				// Install failed, rollback changes				$this->parent->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_SQL_ERROR', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))				);				return false;			}			// Set the schema version to be the latest update version			if ($this->manifest->update)			{				$this->parent->setSchemaVersion($this->manifest->update->schemas, $row->extension_id);			}		}		elseif (strtolower($this->route) == 'update')		{			if ($this->manifest->update)			{				$result = $this->parent->parseSchemaUpdates($this->manifest->update->schemas, $row->extension_id);				if ($result === false)				{					// Install failed, rollback changes					$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_UPDATE_SQL_ERROR', $db->stderr(true)));					return false;				}			}		}		// Try to run the script file's custom method based on the route		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, $this->route))		{			if ($this->parent->manifestClass->{$this->route}($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		// Lastly, we will copy the manifest file to its appropriate place.		$manifest = array();		$manifest['src'] = $this->parent->getPath('manifest');		$manifest['dest'] = JPATH_MANIFESTS . '/files/' . basename($this->parent->getPath('manifest'));		if (!$this->parent->copyFiles(array($manifest), true))		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_COPY_SETUP'));			return false;		}		// If there is a manifest script, let's copy it.		if ($this->get('manifest_script'))		{			// First, we have to create a folder for the script if one isn't present			if (!file_exists($this->parent->getPath('extension_root')))			{				JFolder::create($this->parent->getPath('extension_root'));			}			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_root') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']) || $this->parent->isOverwrite())			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PACKAGE_INSTALL_MANIFEST'));					return false;				}			}		}		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(			array('element' => $this->get('element'), 'type' => 'file', 'client_id' => '', 'folder' => '')		);		if ($uid)		{			$update->delete($uid);		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight($this->route, $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $row->get('extension_id');	}	/**	 * Custom update method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function update()	{		// Set the overwrite setting		$this->parent->setOverwrite(true);		$this->parent->setUpgrade(true);		$this->route = 'update';		// ...and adds new files		return $this->install();	}	/**	 * Custom uninstall method	 *	 * @param   string  $id  The id of the file to uninstall	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$row = JTable::getInstance('extension');		if (!$row->load($id))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_LOAD_ENTRY'), JLog::WARNING, 'jerror');			return false;		}		if ($row->protected)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_WARNCOREFILE'), JLog::WARNING, 'jerror');			return false;		}		$retval = true;		$manifestFile = JPATH_MANIFESTS . '/files/' . $row->element . '.xml';		// Because files may not have their own folders we cannot use the standard method of finding an installation manifest		if (file_exists($manifestFile))		{			// Set the files root path			$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/files/' . $row->element);			$xml = simplexml_load_file($manifestFile);			// If we cannot load the XML file return null			if (!$xml)			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_LOAD_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			// Check for a valid XML root tag.			if ($xml->getName() != 'extension')			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_INVALID_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			$this->manifest = $xml;			// If there is an manifest class file, let's load it			$this->scriptElement = $this->manifest->scriptfile;			$manifestScript = (string) $this->manifest->scriptfile;			if ($manifestScript)			{				$manifestScriptFile = $this->parent->getPath('extension_root') . '/' . $manifestScript;				if (is_file($manifestScriptFile))				{					// Load the file					include_once $manifestScriptFile;				}				// Set the class name				$classname = $row->element . 'InstallerScript';				if (class_exists($classname))				{					// Create a new instance					$this->parent->manifestClass = new $classname($this);					// And set this so we can copy it later					$this->set('manifest_script', $manifestScript);				}			}			ob_start();			ob_implicit_flush(false);			// Run uninstall if possible			if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'uninstall'))			{				$this->parent->manifestClass->uninstall($this);			}			$msg = ob_get_contents();			ob_end_clean();			if ($msg != '')			{				$this->parent->set('extension_message', $msg);			}			$db = JFactory::getDbo();			// Let's run the uninstall queries for the extension			$result = $this->parent->parseSQLFiles($this->manifest->uninstall->sql);			if ($result === false)			{				// Install failed, rollback changes				JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');				$retval = false;			}			// Remove the schema version			$query = $db->getQuery(true)				->delete('#__schemas')				->where('extension_id = ' . $row->extension_id);			$db->setQuery($query);			$db->execute();			// Loop through all elements and get list of files and folders			foreach ($xml->fileset->files as $eFiles)			{				$folder = (string) $eFiles->attributes()->folder;				$target = (string) $eFiles->attributes()->target;				// Create folder path				if (empty($target))				{					$targetFolder = JPATH_ROOT;				}				else				{					$targetFolder = JPATH_ROOT . '/' . $target;				}				$folderList = array();				// Check if all children exists				if (count($eFiles->children()) > 0)				{					// Loop through all filenames elements					foreach ($eFiles->children() as $eFileName)					{						if ($eFileName->getName() == 'folder')						{							$folderList[] = $targetFolder . '/' . $eFileName;						}						else						{							$fileName = $targetFolder . '/' . $eFileName;							JFile::delete($fileName);						}					}				}				// Delete any folders that don't have any content in them.				foreach ($folderList as $folder)				{					$files = JFolder::files($folder);					if (!count($files))					{						JFolder::delete($folder);					}				}			}			JFile::delete($manifestFile);			// Lastly, remove the extension_root			$folder = $this->parent->getPath('extension_root');			if (JFolder::exists($folder))			{				JFolder::delete($folder);			}		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_INVALID_NOTFOUND_MANIFEST'), JLog::WARNING, 'jerror');			// Delete the row because its broken			$row->delete();			return false;		}		$this->parent->removeFiles($xml->languages);		$row->delete();		return $retval;	}	/**	 * Function used to check if extension is already installed	 *	 * @param   string  $extension  The element name of the extension to install	 *	 * @return  boolean  True if extension exists	 *	 * @since   3.1	 */	protected function extensionExistsInSystem($extension = null)	{		// Get a database connector object		$db = $this->parent->getDBO();		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('file'))			->where($db->quoteName('element') . ' = ' . $db->quote($extension));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', $db->stderr(true)));			return false;		}		$id = $db->loadResult();		if (empty($id))		{			return false;		}		return true;	}	/**	 * Function used to populate files and folder list	 *	 * @return  boolean  none	 *	 * @since   3.1	 */	protected function populateFilesAndFolderList()	{		// Initialise variable		$this->folderList = array();		$this->fileList = array();		// Set root folder names		$packagePath = $this->parent->getPath('source');		$jRootPath = JPath::clean(JPATH_ROOT);		// Loop through all elements and get list of files and folders		foreach ($this->manifest->fileset->files as $eFiles)		{			// Check if the element is files element			$folder = (string) $eFiles->attributes()->folder;			$target = (string) $eFiles->attributes()->target;			// Split folder names into array to get folder names. This will help in creating folders			$arrList = preg_split("#/|\\/#", $target);			$folderName = $jRootPath;			foreach ($arrList as $dir)			{				if (empty($dir))				{					continue;				}				$folderName .= '/' . $dir;				// Check if folder exists, if not then add to the array for folder creation				if (!JFolder::exists($folderName))				{					array_push($this->folderList, $folderName);				}			}			// Create folder path			$sourceFolder = empty($folder) ? $packagePath : $packagePath . '/' . $folder;			$targetFolder = empty($target) ? $jRootPath : $jRootPath . '/' . $target;			// Check if source folder exists			if (!JFolder::exists($sourceFolder))			{				JLog::add(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_FAIL_SOURCE_DIRECTORY', $sourceFolder), JLog::WARNING, 'jerror');				// If installation fails, rollback				$this->parent->abort();				return false;			}			// Check if all children exists			if (count($eFiles->children()))			{				// Loop through all filenames elements				foreach ($eFiles->children() as $eFileName)				{					$path['src'] = $sourceFolder . '/' . $eFileName;					$path['dest'] = $targetFolder . '/' . $eFileName;					$path['type'] = 'file';					if ($eFileName->getName() == 'folder')					{						$folderName = $targetFolder . '/' . $eFileName;						array_push($this->folderList, $folderName);						$path['type'] = 'folder';					}					array_push($this->fileList, $path);				}			}			else			{				$files = JFolder::files($sourceFolder);				foreach ($files as $file)				{					$path['src'] = $sourceFolder . '/' . $file;					$path['dest'] = $targetFolder . '/' . $file;					array_push($this->fileList, $path);				}			}		}	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally		$manifestPath = JPATH_MANIFESTS . '/files/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterFile instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerFile extends JInstallerAdapterFile{}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto * @since       1.5 */class MailtoController extends JControllerLegacy{	/**	 * Show the form so that the user can send the link to someone	 *	 * @access public	 * @since 1.5	 */	public function mailto()	{		$session = JFactory::getSession();		$session->set('com_mailto.formtime', time());		$this->input->set('view', 'mailto');		$this->display();	}	/**	 * Send the message and display a notice	 *	 * @access public	 * @since 1.5	 */	public function send()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$session = JFactory::getSession();		$timeout = $session->get('com_mailto.formtime', 0);		if ($timeout == 0 || time() - $timeout < 20)		{			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		$SiteName = $app->getCfg('sitename');		$link     = MailtoHelper::validateHash($this->input->get('link', '', 'post'));		// Verify that this is a local link		if (!$link || !JURI::isInternal($link))		{			//Non-local url...			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		// An array of email headers we do not want to allow as input		$headers = array (	'Content-Type:',							'MIME-Version:',							'Content-Transfer-Encoding:',							'bcc:',							'cc:');		// An array of the input fields to scan for injected headers		$fields = array(			'mailto',			'sender',			'from',			'subject',		);		/*		 * Here is the meat and potatoes of the header injection test.  We		 * iterate over the array of form input and check for header strings.		 * If we find one, send an unauthorized header and die.		 */		foreach ($fields as $field)		{			foreach ($headers as $header)			{				if (strpos($_POST[$field], $header) !== false)				{					JError::raiseError(403, '');				}			}		}		/*		 * Free up memory		 */		unset ($headers, $fields);		$email           = $this->input->post->getString('mailto', '');		$sender          = $this->input->post->getString('sender', '');		$from            = $this->input->post->getString('from', '');		$subject_default = JText::sprintf('COM_MAILTO_SENT_BY', $sender);		$subject         = $this->input->post->getString('subject', $subject_default);		// Check for a valid to address		$error	= false;		if (! $email  || ! JMailHelper::isEmailAddress($email))		{			$error	= JText::sprintf('COM_MAILTO_EMAIL_INVALID', $email);			JError::raiseWarning(0, $error);		}		// Check for a valid from address		if (! $from || ! JMailHelper::isEmailAddress($from))		{			$error	= JText::sprintf('COM_MAILTO_EMAIL_INVALID', $from);			JError::raiseWarning(0, $error);		}		if ($error)		{			return $this->mailto();		}		// Build the message to send		$msg	= JText::_('COM_MAILTO_EMAIL_MSG');		$body	= sprintf($msg, $SiteName, $sender, $from, $link);		// Clean the email data		$subject = JMailHelper::cleanSubject($subject);		$body	 = JMailHelper::cleanBody($body);		$sender	 = JMailHelper::cleanAddress($sender);		// Send the email		if (JFactory::getMailer()->sendMail($from, $sender, $email, $subject, $body) !== true)		{			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		$this->input->set('view', 'sent');		$this->display();	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Search.content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_content/router.php';/** * Content Search plugin * * @package     Joomla.Plugin * @subpackage  Search.content * @since       1.6 */class PlgSearchContent extends JPlugin{	/**	 * @return array An array of search areas	 */	public function onContentSearchAreas()	{		static $areas = array(			'content' => 'JGLOBAL_ARTICLES'		);		return $areas;	}	/**	 * Content Search method	 * The sql must return the following fields that are used in a common display	 * routine: href, title, section, created, text, browsernav	 * @param string Target search string	 * @param string mathcing option, exact|any|all	 * @param string ordering option, newest|oldest|popular|alpha|category	 * @param mixed  An array if the search it to be restricted to areas, null if search all	 */	public function onContentSearch($text, $phrase = '', $ordering = '', $areas = null)	{		$db = JFactory::getDbo();		$app = JFactory::getApplication();		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		$tag = JFactory::getLanguage()->getTag();		require_once JPATH_SITE . '/components/com_content/helpers/route.php';		require_once JPATH_ADMINISTRATOR . '/components/com_search/helpers/search.php';		$searchText = $text;		if (is_array($areas))		{			if (!array_intersect($areas, array_keys($this->onContentSearchAreas())))			{				return array();			}		}		$sContent = $this->params->get('search_content', 1);		$sArchived = $this->params->get('search_archived', 1);		$limit = $this->params->def('search_limit', 50);		$nullDate = $db->getNullDate();		$date = JFactory::getDate();		$now = $date->toSql();		$text = trim($text);		if ($text == '')		{			return array();		}		$wheres = array();		switch ($phrase)		{			case 'exact':				$text = $db->quote('%' . $db->escape($text, true) . '%', false);				$wheres2 = array();				$wheres2[] = 'a.title LIKE ' . $text;				$wheres2[] = 'a.introtext LIKE ' . $text;				$wheres2[] = 'a.fulltext LIKE ' . $text;				$wheres2[] = 'a.metakey LIKE ' . $text;				$wheres2[] = 'a.metadesc LIKE ' . $text;				$where = '(' . implode(') OR (', $wheres2) . ')';				break;			case 'all':			case 'any':			default:				$words = explode(' ', $text);				$wheres = array();				foreach ($words as $word)				{					$word = $db->quote('%' . $db->escape($word, true) . '%', false);					$wheres2 = array();					$wheres2[] = 'a.title LIKE ' . $word;					$wheres2[] = 'a.introtext LIKE ' . $word;					$wheres2[] = 'a.fulltext LIKE ' . $word;					$wheres2[] = 'a.metakey LIKE ' . $word;					$wheres2[] = 'a.metadesc LIKE ' . $word;					$wheres[] = implode(' OR ', $wheres2);				}				$where = '(' . implode(($phrase == 'all' ? ') AND (' : ') OR ('), $wheres) . ')';				break;		}		$morder = '';		switch ($ordering)		{			case 'oldest':				$order = 'a.created ASC';				break;			case 'popular':				$order = 'a.hits DESC';				break;			case 'alpha':				$order = 'a.title ASC';				break;			case 'category':				$order = 'c.title ASC, a.title ASC';				$morder = 'a.title ASC';				break;			case 'newest':			default:				$order = 'a.created DESC';				break;		}		$rows = array();		$query = $db->getQuery(true);		// search articles		if ($sContent && $limit > 0)		{			$query->clear();			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id . ' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('c.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('c.id');			$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id . ' END as catslug';			$query->select('a.title AS title, a.metadesc, a.metakey, a.created AS created')				->select($query->concatenate(array('a.introtext', 'a.fulltext')) . ' AS text')				->select('c.title AS section, ' . $case_when . ',' . $case_when1 . ', ' . '\'2\' AS browsernav')				->from('#__content AS a')				->join('INNER', '#__categories AS c ON c.id=a.catid')				->where(					'(' . $where . ')AND a.state=1 AND c.published = 1 AND a.access IN (' . $groups . ') '						. 'AND c.access IN (' . $groups . ') '						. 'AND (a.publish_up = ' . $db->quote($nullDate) . ' OR a.publish_up <= ' . $db->quote($now) . ') '						. 'AND (a.publish_down = ' . $db->quote($nullDate) . ' OR a.publish_down >= ' . $db->quote($now) . ')'				);			$query->group('a.id, a.title, a.metadesc, a.metakey, a.created, a.introtext, a.fulltext, c.title, a.alias, c.alias, c.id')				->order($order);			// Filter by language			if ($app->isSite() && JLanguageMultilang::isEnabled())			{				$query->where('a.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')')					->where('c.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')');			}			$db->setQuery($query, 0, $limit);			$list = $db->loadObjectList();			$limit -= count($list);			if (isset($list))			{				foreach ($list as $key => $item)				{					$list[$key]->href = ContentHelperRoute::getArticleRoute($item->slug, $item->catslug);				}			}			$rows[] = $list;		}		// search archived content		if ($sArchived && $limit > 0)		{			$query->clear();			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id . ' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('c.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('c.id');			$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id . ' END as catslug';			$query->select(				'a.title AS title, a.metadesc, a.metakey, a.created AS created, '					. $query->concatenate(array("a.introtext", "a.fulltext")) . ' AS text,'					. $case_when . ',' . $case_when1 . ', '					. 'c.title AS section, \'2\' AS browsernav'			);			//.'CONCAT_WS("/", c.title) AS section, \'2\' AS browsernav' );			$query->from('#__content AS a')				->join('INNER', '#__categories AS c ON c.id=a.catid AND c.access IN (' . $groups . ')')				->where(					'(' . $where . ') AND a.state = 2 AND c.published = 1 AND a.access IN (' . $groups						. ') AND c.access IN (' . $groups . ') '						. 'AND (a.publish_up = ' . $db->quote($nullDate) . ' OR a.publish_up <= ' . $db->quote($now) . ') '						. 'AND (a.publish_down = ' . $db->quote($nullDate) . ' OR a.publish_down >= ' . $db->quote($now) . ')'				);			$query->order($order);			// Filter by language			if ($app->isSite() && JLanguageMultilang::isEnabled())			{				$query->where('a.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')')					->where('c.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')');			}			$db->setQuery($query, 0, $limit);			$list3 = $db->loadObjectList();			// find an itemid for archived to use if there isn't another one			$item = $app->getMenu()->getItems('link', 'index.php?option=com_content&view=archive', true);			$itemid = isset($item->id) ? '&Itemid=' . $item->id : '';			if (isset($list3))			{				foreach ($list3 as $key => $item)				{					$date = JFactory::getDate($item->created);					$created_month = $date->format("n");					$created_year = $date->format("Y");					$list3[$key]->href = JRoute::_('index.php?option=com_content&view=archive&year=' . $created_year . '&month=' . $created_month . $itemid);				}			}			$rows[] = $list3;		}		$results = array();		if (count($rows))		{			foreach ($rows as $row)			{				$new_row = array();				foreach ($row as $key => $article)				{					if (searchHelper::checkNoHTML($article, $searchText, array('text', 'title', 'metadesc', 'metakey')))					{						$new_row[] = $article;					}				}				$results = array_merge($results, (array) $new_row);			}		}		return $results;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Finder language helper class. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderHelperLanguage{	/**	 * Method to return a plural language code for a taxonomy branch.	 *	 * @param   string  Branch title.	 *	 * @return  string  Language key code.	 */	public static function branchPlural($branchName)	{		$return = preg_replace('/[^a-zA-Z0-9]+/', '_', strtoupper($branchName));		return 'PLG_FINDER_QUERY_FILTER_BRANCH_P_'.$return;	}	/**	 * Method to return a singular language code for a taxonomy branch.	 *	 * @param   string  Branch name.	 *	 * @return  string  Language key code.	 */	public static function branchSingular($branchName)	{		$return = preg_replace('/[^a-zA-Z0-9]+/', '_', strtoupper($branchName));		return 'PLG_FINDER_QUERY_FILTER_BRANCH_S_'.$return;	}	/**	 * Method to load Smart Search component language file.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function loadComponentLanguage()	{		$lang = JFactory::getLanguage();		$lang->load('com_finder', JPATH_SITE);	}	/**	 * Method to load Smart Search plug-in language files.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function loadPluginLanguage()	{		static $loaded = false;		// If already loaded, don't load again.		if ($loaded)		{			return;		}		$loaded = true;		// Get array of all the enabled Smart Search plug-in names.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('name')			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' .  $db->quote('plugin'))			->where($db->quoteName('folder') . ' = ' .  $db->quote('finder'))			->where($db->quoteName('enabled') . ' = 1');		$db->setQuery($query);		$plugins = $db->loadObjectList();		if (empty($plugins))		{			return;		}		// Load generic language strings.		$lang = JFactory::getLanguage();		$lang->load('plg_content_finder', JPATH_ADMINISTRATOR);		// Load language file for each plug-in.		foreach ($plugins as $plugin)		{			$lang->load($plugin->name, JPATH_ADMINISTRATOR);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'message.cancel' || document.formvalidator.isValid(document.id('message-form')))		{			Joomla.submitform(task, document.getElementById('message-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_messages'); ?>" method="post" name="adminForm" id="message-form" class="form-validate form-horizontal">	<fieldset class="adminform">		<ul class="adminformlist">			<li><?php echo $this->form->getLabel('user_id_to'); ?>				<?php echo $this->form->getInput('user_id_to'); ?></li>			<li><?php echo $this->form->getLabel('subject'); ?>				<?php echo $this->form->getInput('subject'); ?></li>		</ul>	</fieldset>	<fieldset class="adminform">		<legend><?php echo $this->form->getLabel('message'); ?></legend>		<ul class="adminformlist">			<li><?php echo $this->form->getInput('message'); ?> </li>		</ul>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;jimport('joomla.filesystem.file');/** * Indexer class supporting SQL Server for the Finder indexer package. * * The indexer class provides the core functionality of the Finder * search engine. It is responsible for adding and updating the * content links table; extracting and scoring tokens; and maintaining * all referential information for the content. * * Note: All exceptions thrown from within this class should be caught * by the controller. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.1 */class FinderIndexerDriverSqlsrv extends FinderIndexer{	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function index($item, $format = 'html')	{		// Mark beforeIndexing in the profiler.		static::$profiler ? static::$profiler->mark('beforeIndexing') : null;		$db = JFactory::getDbo();		$nd = $db->getNullDate();		// Check if the item is in the database.		$query = $db->getQuery(true)			->select($db->quoteName('link_id') . ', ' . $db->quoteName('md5sum'))			->from($db->quoteName('#__finder_links'))			->where($db->quoteName('url') . ' = ' . $db->quote($item->url));		// Load the item  from the database.		$db->setQuery($query);		$link = $db->loadObject();		// Get the indexer state.		$state = static::getState();		// Get the signatures of the item.		$curSig = static::getSignature($item);		$oldSig = isset($link->md5sum) ? $link->md5sum : null;		// Get the other item information.		$linkId = empty($link->link_id) ? null : $link->link_id;		$isNew = empty($link->link_id) ? true : false;		// Check the signatures. If they match, the item is up to date.		if (!$isNew && $curSig == $oldSig)		{			return $linkId;		}		/*		 * If the link already exists, flush all the term maps for the item.		 * Maps are stored in 16 tables so we need to iterate through and flush		 * each table one at a time.		 */		if (!$isNew)		{			for ($i = 0; $i <= 15; $i++)			{				// Flush the maps for the link.				$query->clear()					->delete($db->quoteName('#__finder_links_terms' . dechex($i)))					->where($db->quoteName('link_id') . ' = ' . (int) $linkId);				$db->setQuery($query);				$db->execute();			}			// Remove the taxonomy maps.			FinderIndexerTaxonomy::removeMaps($linkId);		}		// Mark afterUnmapping in the profiler.		static::$profiler ? static::$profiler->mark('afterUnmapping') : null;		// Perform cleanup on the item data.		$item->publish_start_date = (int) $item->publish_start_date != 0 ? $item->publish_start_date : $nd;		$item->publish_end_date = (int) $item->publish_end_date != 0 ? $item->publish_end_date : $nd;		$item->start_date = (int) $item->start_date != 0 ? $item->start_date : $nd;		$item->end_date = (int) $item->end_date != 0 ? $item->end_date : $nd;		// Prepare the item description.		$item->description = FinderIndexerHelper::parse($item->summary);		/*		 * Now, we need to enter the item into the links table. If the item		 * already exists in the database, we need to use an UPDATE query.		 * Otherwise, we need to use an INSERT to get the link id back.		 */		if ($isNew)		{			$columnsArray = array(				$db->quoteName('url'), $db->quoteName('route'), $db->quoteName('title'), $db->quoteName('description'),				$db->quoteName('indexdate'), $db->quoteName('published'), $db->quoteName('state'), $db->quoteName('access'),				$db->quoteName('language'), $db->quoteName('type_id'), $db->quoteName('object'), $db->quoteName('publish_start_date'),				$db->quoteName('publish_end_date'), $db->quoteName('start_date'), $db->quoteName('end_date'), $db->quoteName('list_price'),				$db->quoteName('sale_price')			);			// Insert the link.			$query->clear()				->insert($db->quoteName('#__finder_links'))				->columns($columnsArray)				->values(				$db->quote($item->url) . ', '				. $db->quote($item->route) . ', '				. $db->quote($item->title) . ', '				. $db->quote($item->description) . ', '				. $query->currentTimestamp() . ', '				. '1, '				. (int) $item->state . ', '				. (int) $item->access . ', '				. $db->quote($item->language) . ', '				. (int) $item->type_id . ', '				. $db->quote(serialize($item)) . ', '				. $db->quote($item->publish_start_date) . ', '				. $db->quote($item->publish_end_date) . ', '				. $db->quote($item->start_date) . ', '				. $db->quote($item->end_date) . ', '				. (double) ($item->list_price ? $item->list_price : 0) . ', '				. (double) ($item->sale_price ? $item->sale_price : 0)			);			$db->setQuery($query);			$db->execute();			// Get the link id.			$linkId = (int) $db->insertid();		}		else		{			// Update the link.			$query->clear()				->update($db->quoteName('#__finder_links'))				->set($db->quoteName('route') . ' = ' . $db->quote($item->route))				->set($db->quoteName('title') . ' = ' . $db->quote($item->title))				->set($db->quoteName('description') . ' = ' . $db->quote($item->description))				->set($db->quoteName('indexdate') . ' = ' . $query->currentTimestamp())				->set($db->quoteName('state') . ' = ' . (int) $item->state)				->set($db->quoteName('access') . ' = ' . (int) $item->access)				->set($db->quoteName('language') . ' = ' . $db->quote($item->language))				->set($db->quoteName('type_id') . ' = ' . (int) $item->type_id)				->set($db->quoteName('object') . ' = ' . $db->quote(serialize($item)))				->set($db->quoteName('publish_start_date') . ' = ' . $db->quote($item->publish_start_date))				->set($db->quoteName('publish_end_date') . ' = ' . $db->quote($item->publish_end_date))				->set($db->quoteName('start_date') . ' = ' . $db->quote($item->start_date))				->set($db->quoteName('end_date') . ' = ' . $db->quote($item->end_date))				->set($db->quoteName('list_price') . ' = ' . (double) ($item->list_price ? $item->list_price : 0))				->set($db->quoteName('sale_price') . ' = ' . (double) ($item->sale_price ? $item->sale_price : 0))				->where('link_id = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Set up the variables we will need during processing.		$tokens = array();		$count = 0;		// Mark afterLinking in the profiler.		static::$profiler ? static::$profiler->mark('afterLinking') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		/*		 * Process the item's content. The items can customize their		 * processing instructions to define extra properties to process		 * or rearrange how properties are weighted.		 */		foreach ($item->getInstructions() as $group => $properties)		{			// Iterate through the properties of the group.			foreach ($properties as $property)			{				// Check if the property exists in the item.				if (empty($item->$property))				{					continue;				}				// Tokenize the property.				if (is_array($item->$property))				{					// Tokenize an array of content and add it to the database.					foreach ($item->$property as $ip)					{						// If the group is path, we need to a few extra processing						// steps to strip the extension and convert slashes and dashes						// to spaces.						if ($group === static::PATH_CONTEXT)						{							$ip = JFile::stripExt($ip);							$ip = str_replace('/', ' ', $ip);							$ip = str_replace('-', ' ', $ip);						}						// Tokenize a string of content and add it to the database.						$count += $this->tokenizeToDB($ip, $group, $item->language, $format);						// Check if we're approaching the memory limit of the token table.						if ($count > static::$state->options->get('memory_table_limit', 30000))						{							$this->toggleTables(false);						}					}				}				else				{					// If the group is path, we need to a few extra processing					// steps to strip the extension and convert slashes and dashes					// to spaces.					if ($group === static::PATH_CONTEXT)					{						$item->$property = JFile::stripExt($item->$property);						$item->$property = str_replace('/', ' ', $item->$property);						$item->$property = str_replace('-', ' ', $item->$property);					}					// Tokenize a string of content and add it to the database.					$count += $this->tokenizeToDB($item->$property, $group, $item->language, $format);					// Check if we're approaching the memory limit of the token table.					if ($count > static::$state->options->get('memory_table_limit', 30000))					{						$this->toggleTables(false);					}				}			}		}		/*		 * Process the item's taxonomy. The items can customize their		 * taxonomy mappings to define extra properties to map.		 */		foreach ($item->getTaxonomy() as $branch => $nodes)		{			// Iterate through the nodes and map them to the branch.			foreach ($nodes as $node)			{				// Add the node to the tree.				$nodeId = FinderIndexerTaxonomy::addNode($branch, $node->title, $node->state, $node->access);				// Add the link => node map.				FinderIndexerTaxonomy::addMap($linkId, $nodeId);				// Tokenize the node title and add them to the database.				$count += $this->tokenizeToDB($node->title, static::META_CONTEXT, $item->language, $format);			}		}		// Mark afterProcessing in the profiler.		static::$profiler ? static::$profiler->mark('afterProcessing') : null;		/*		 * At this point, all of the item's content has been parsed, tokenized		 * and inserted into the #__finder_tokens table. Now, we need to		 * aggregate all the data into that table into a more usable form. The		 * aggregated data will be inserted into #__finder_tokens_aggregate		 * table.		 */		$query	= 'INSERT INTO ' . $db->quoteName('#__finder_tokens_aggregate') .				' (' . $db->quoteName('term_id') .				', ' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('term_weight') .				', ' . $db->quoteName('context') .				', ' . $db->quoteName('context_weight') .				', ' . $db->quoteName('language') . ')' .				' SELECT' .				' t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context,' .				' ROUND( t1.weight * COUNT( t2.term ) * %F, 8 ) AS context_weight, t1.language' .				' FROM (' .				'   SELECT DISTINCT t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				'   FROM ' . $db->quoteName('#__finder_tokens') . ' AS t1' .				'   WHERE t1.context = %d' .				' ) AS t1' .				' JOIN ' . $db->quoteName('#__finder_tokens') . ' AS t2 ON t2.term = t1.term' .				' LEFT JOIN ' . $db->quoteName('#__finder_terms') . ' AS t ON t.term = t1.term' .				' WHERE t2.context = %d' .				' GROUP BY t1.term, t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				' ORDER BY t1.term DESC';		// Iterate through the contexts and aggregate the tokens per context.		foreach ($state->weights as $context => $multiplier)		{			// Run the query to aggregate the tokens for this context..			$db->setQuery(sprintf($query, $multiplier, $context, $context));			$db->execute();		}		// Mark afterAggregating in the profiler.		static::$profiler ? static::$profiler->mark('afterAggregating') : null;		/*		 * When we pulled down all of the aggregate data, we did a LEFT JOIN		 * over the terms table to try to find all the term ids that		 * already exist for our tokens. If any of the rows in the aggregate		 * table have a term of 0, then no term record exists for that		 * term so we need to add it to the terms table.		 */		$db->setQuery(			'INSERT INTO ' . $db->quoteName('#__finder_terms') .			' (' . $db->quoteName('term') .			', ' . $db->quoteName('stem') .			', ' . $db->quoteName('common') .			', ' . $db->quoteName('phrase') .			', ' . $db->quoteName('weight') .			', ' . $db->quoteName('soundex') . ')' .			' SELECT ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term)' .			' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .			' WHERE ta.term_id IS NULL' .			' GROUP BY ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight'		);		$db->execute();		/*		 * Now, we just inserted a bunch of new records into the terms table		 * so we need to go back and update the aggregate table with all the		 * new term ids.		 */		$query = $db->getQuery(true)			->update('ta')			->set('ta.term_id = t.term_id from #__finder_tokens_aggregate AS ta INNER JOIN #__finder_terms AS t ON t.term = ta.term')			->where('ta.term_id IS NULL');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * After we've made sure that all of the terms are in the terms table		 * and the aggregate table has the correct term ids, we need to update		 * the links counter for each term by one.		 */		$query->clear()			->update('t')			->set('t.links = t.links + 1 FROM #__finder_terms AS t INNER JOIN #__finder_tokens_aggregate AS ta ON ta.term_id = t.term_id');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * Before we can insert all of the mapping rows, we have to figure out		 * which mapping table the rows need to be inserted into. The mapping		 * table for each term is based on the first character of the md5 of		 * the first character of the term. In php, it would be expressed as		 * substr(md5(substr($token, 0, 1)), 0, 1)		 */		$query->clear()			->update($db->quoteName('#__finder_tokens_aggregate'))			->set($db->quoteName('map_suffix') . " = SUBSTRING(HASHBYTES('MD5', SUBSTRING(" . $db->quoteName('term') . ', 1, 1)), 1, 1)');		$db->setQuery($query);		$db->execute();		/*		 * At this point, the aggregate table contains a record for each		 * term in each context. So, we're going to pull down all of that		 * data while grouping the records by term and add all of the		 * sub-totals together to arrive at the final total for each token for		 * this link. Then, we insert all of that data into the appropriate		 * mapping table.		 */		for ($i = 0; $i <= 15; $i++)		{			// Get the mapping table suffix.			$suffix = dechex($i);			/*			 * We have to run this query 16 times, one for each link => term			 * mapping table.			 */			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_links_terms' . $suffix) .				' (' . $db->quoteName('link_id') .				', ' . $db->quoteName('term_id') .				', ' . $db->quoteName('weight') . ')' .				' SELECT ' . (int) $linkId . ', ' . $db->quoteName('term_id') . ',' .				' ROUND(SUM(' . $db->quoteName('context_weight') . '), 8)' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') .				' WHERE ' . $db->quoteName('map_suffix') . ' = ' . $db->quote($suffix) .				' GROUP BY term, term_id' .				' ORDER BY ' . $db->quoteName('term') . ' DESC'			);			$db->execute();		}		// Mark afterMapping in the profiler.		static::$profiler ? static::$profiler->mark('afterMapping') : null;		// Update the signature.		$query->clear()			->update($db->quoteName('#__finder_links'))			->set($db->quoteName('md5sum') . ' = ' . $db->quote($curSig))			->where($db->quoteName('link_id') . ' = ' . $db->quote($linkId));		$db->setQuery($query);		$db->execute();		// Mark afterSigning in the profiler.		static::$profiler ? static::$profiler->mark('afterSigning') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		// Toggle the token tables back to memory tables.		$this->toggleTables(true);		// Mark afterTruncating in the profiler.		static::$profiler ? static::$profiler->mark('afterTruncating') : null;		return $linkId;	}	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function remove($linkId)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Update the link counts and remove the mapping records.		for ($i = 0; $i <= 15; $i++)		{			// Update the link counts for the terms.			$query->update('t')				->set('t.links = t.links - 1 from #__finder_terms AS t INNER JOIN #__finder_links_terms' . dechex($i) . ' AS AS m ON m.term_id = t.term_id')				->where('m.link_id = ' . $db->quote((int) $linkId));			$db->setQuery($query);			$db->execute();			// Remove all records from the mapping tables.			$query->clear()				->delete($db->quoteName('#__finder_links_terms' . dechex($i)))				->where($db->quoteName('link_id') . ' = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Delete all orphaned terms.		$query->clear()			->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Delete the link from the index.		$query->clear()			->delete($db->quoteName('#__finder_links'))			->where($db->quoteName('link_id') . ' = ' . $db->quote((int) $linkId));		$db->setQuery($query);		$db->execute();		// Remove the taxonomy maps.		FinderIndexerTaxonomy::removeMaps($linkId);		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function optimize()	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Delete all orphaned terms.		$query->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	protected function addTokensToDB($tokens, $context = '')	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Force tokens to an array.		$tokens = is_array($tokens) ? $tokens : array($tokens);		// Count the number of token values.		$values = 0;		// Set some variables to count the iterations		$totalTokens = count($tokens);		$remaining   = $totalTokens;		$iterations  = 0;		$loop        = true;		do		{			// Shift the token off the array			$token = array_shift($tokens);			$query->values(				$db->quote($token->term) . ', '				. $db->quote($token->stem) . ', '				. (int) $token->common . ', '				. (int) $token->phrase . ', '				. (float) $token->weight . ', '				. (int) $context . ', '				. $db->quote($token->language)			);			$values++;			$iterations++;			$remaining--;			// Run the query if we've reached 1000 iterations or there are no tokens remaining			if ($iterations == 1000 || $remaining == 0)			{				// Insert the tokens into the database.				$query->insert($db->quoteName('#__finder_tokens'))					->columns(					array(						$db->quoteName('term'),						$db->quoteName('stem'),						$db->quoteName('common'),						$db->quoteName('phrase'),						$db->quoteName('weight'),						$db->quoteName('context'),						$db->quoteName('language')					)				);				$db->setQuery($query);				$db->execute();				// Reset the query				$query->clear();			}			// If there's nothing remaining, we're done looping			if ($remaining == 0)			{				$loop = false;			}		}		while ($loop == true);		return $values;	}	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	protected function toggleTables($memory)	{		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User notes model class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersModelNotes extends JModelList{	/**	 * Class constructor.	 *	 * @param  array  $config  An optional associative array of configuration settings.	 *	 * @since  2.5	 */	public function __construct($config = array())	{		// Set the list ordering fields.		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id',				'a.id',				'user_id',				'a.user_id',				'u.name',				'subject',				'a.subject',				'catid',				'a.catid',				'state', 'a.state',				'c.title',				'review_time',				'a.review_time',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',			);		}		parent::__construct($config);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery  A JDatabaseQuery object to retrieve the data set.	 *	 * @since   2.5	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		$section = $this->getState('filter.category_id');		// Select the required fields from the table.		$query->select(			$this->getState('list.select',				'a.id, a.subject, a.checked_out, a.checked_out_time,' .				'a.catid, a.created_time, a.review_time,' .				'a.state, a.publish_up, a.publish_down'			)		);		$query->from('#__user_notes AS a');		// Join over the category		$query->select('c.title AS category_title, c.params AS category_params')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the users for the note user.		$query->select('u.name AS user_name')			->join('LEFT', '#__users AS u ON u.id = a.user_id');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id = a.checked_out');		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'uid:') === 0)			{				$query->where('a.user_id = ' . (int) substr($search, 4));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('((a.subject LIKE ' . $search . ') OR (u.name LIKE ' . $search . ') OR (u.username LIKE ' . $search . '))');			}		}		// Filter by published state		$published = $this->getState('filter.state');		if (is_numeric($published))		{			$query->where('a.state = '.(int) $published);		} elseif ($published === '')		{			$query->where('(a.state IN (0, 1))');		}		// Filter by a single or group of categories.		$categoryId = (int) $this->getState('filter.category_id');		if ($categoryId)		{			if (is_scalar($section))			{				$query->where('a.catid = ' . $categoryId);			}		}		// Filter by a single user.		$userId = (int) $this->getState('filter.user_id');		if ($userId)		{			// Add the body and where filter.			$query->select('a.body')				->where('a.user_id = ' . $userId);		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering');		$orderDirn = $this->state->get('list.direction');		$query->order($db->escape($orderCol . ' ' . $orderDirn));		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 *	 * @since   2.5	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.category_id');		return parent::getStoreId($id);	}	/**	 * Gets a user object if the user filter is set.	 *	 * @return  JUser  The JUser object	 *	 * @since   2.5	 */	public function getUser()	{		$user = new JUser;		// Filter by search in title		$search = JFactory::getApplication()->input->get('u_id', 0, 'int');		if ($search != 0)		{			$user->load((int) $search);		}		return $user;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$input = $app->input;		// Adjust the context to support modal layouts.		if ($layout = $input->get('layout'))		{			$this->context .= '.' . $layout;		}		$value = $app->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $value);		$published = $this->getUserStateFromRequest($this->context.'.filter.state', 'filter_published', '', 'string');		$this->setState('filter.state', $published);		$section = $app->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id');		$this->setState('filter.category_id', $section);		$userId = $input->get('u_id', 0, 'int');		$this->setState('filter.user_id', $userId);		parent::populateState('a.review_time', 'DESC');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'banner.cancel' || document.formvalidator.isValid(document.id('banner-form')))		{			Joomla.submitform(task, document.getElementById('banner-form'));		}	}	window.addEvent('domready', function()	{		document.id('jform_type0').addEvent('click', function(e){			document.id('image').setStyle('display', 'block');			document.id('url').setStyle('display', 'block');			document.id('custom').setStyle('display', 'none');		});		document.id('jform_type1').addEvent('click', function(e){			document.id('image').setStyle('display', 'none');			document.id('url').setStyle('display', 'block');			document.id('custom').setStyle('display', 'block');		});		if (document.id('jform_type0').checked==true)		{			document.id('jform_type0').fireEvent('click');		}		else		{			document.id('jform_type1').fireEvent('click');		}	});</script><form action="<?php echo JRoute::_('index.php?option=com_banners&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="banner-form" class="form-validate form-horizontal"><!-- Begin Banner --><div class="span10 form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('COM_BANNERS_BANNER_DETAILS', true)); ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('name'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('name'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('alias'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('alias'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('catid'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('catid'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('type'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('type'); ?>					</div>				</div>				<div id="image">						<?php foreach ($this->form->getFieldset('image') as $field) : ?>							<div class="control-group">								<div class="control-label">									<?php echo $field->label; ?>								</div>								<div class="controls">									<?php echo $field->input; ?>								</div>							</div>						<?php endforeach; ?>				</div>				<div class="control-group" id="custom">					<div class="control-label">						<?php echo $this->form->getLabel('custombannercode'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('custombannercode'); ?>					</div>				</div>				<div class="control-group" id="url">					<div class="control-label">						<?php echo $this->form->getLabel('clickurl'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('clickurl'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('description'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('description'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('id'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('id'); ?>					</div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_BANNERS_GROUP_LABEL_PUBLISHING_DETAILS', true)); ?>				<?php foreach ($this->form->getFieldset('publish') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'otherparams', JText::_('COM_BANNERS_GROUP_LABEL_BANNER_DETAILS', true)); ?>				<?php foreach ($this->form->getFieldset('otherparams') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>				<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?>	</div>	<!-- End Newsfeed -->	<!-- Begin Sidebar -->	<div class="span2">		<h4><?php echo JText::_('JDETAILS');?></h4>		<hr />		<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('name'); ?>					</div>				</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('sticky'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('sticky'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('language'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('language'); ?>				</div>			</div>		</fieldset>	</div>	<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectContact');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_contact&view=contacts&layout=modal&tmpl=component');?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter-search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>				<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />				<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>				<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>				<select name="filter_language" class="inputbox" id="filter_language">					<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>					<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>				</select>			<?php endif; ?>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist modal">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th class="title language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<th>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $this->escape($item->name); ?></a>				</th>				<td class="center">					<?php if (!empty($item->linked_user)) : ?>						<?php echo $item->linked_user;?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Joomla Platform class for generating Facebook API access token. * * @package     Joomla.Platform * @subpackage  Facebook * * @since       13.1 */class JFacebookOAuth extends JOAuth2Client{	/**	 * @var JRegistry Options for the JFacebookOAuth object.	 * @since 13.1	 */	protected $options;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  JFacebookOauth options object.	 * @param   JHttp      $client   The HTTP client object.	 * @param   JInput     $input    The input object.	 *	 * @since   13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JInput $input = null)	{		$this->options = isset($options) ? $options : new JRegistry;		// Setup the authentication and token urls if not already set.		$this->options->def('authurl', 'http://www.facebook.com/dialog/oauth');		$this->options->def('tokenurl', 'https://graph.facebook.com/oauth/access_token');		// Call the JOauthOauth2client constructor to setup the object.		parent::__construct($this->options, $client, $input);	}	/**	 * Method used to set permissions.	 *	 * @param   string  $scope  Comma separated list of permissions.	 *	 * @return  JFacebookOauth  This object for method chaining	 *	 * @since   13.1	 */	public function setScope($scope)	{		$this->setOption('scope', $scope);		return $this;	}	/**	 * Method to get the current scope	 *	 * @return  string Comma separated list of permissions.	 *	 * @since   13.1	 */	public function getScope()	{		return $this->getOption('scope');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Cache base object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCache{	/**	 * @var    object  Storage handler	 * @since  11.1	 */	public static $_handler = array();	/**	 * @var    array  Options	 * @since  11.1	 */	public $_options;	/**	 * Constructor	 *	 * @param   array  $options  options	 *	 * @since   11.1	 */	public function __construct($options)	{		$conf = JFactory::getConfig();		$this->_options = array(			'cachebase' => $conf->get('cache_path', JPATH_CACHE),			'lifetime' => (int) $conf->get('cachetime'),			'language' => $conf->get('language', 'en-GB'),			'storage' => $conf->get('cache_handler', ''),			'defaultgroup' => 'default',			'locking' => true,			'locktime' => 15,			'checkTime' => true,			'caching' => ($conf->get('caching') >= 1) ? true : false);		// Overwrite default options with given options		foreach ($options as $option => $value)		{			if (isset($options[$option]) && $options[$option] !== '')			{				$this->_options[$option] = $options[$option];			}		}		if (empty($this->_options['storage']))		{			$this->_options['caching'] = false;		}	}	/**	 * Returns a reference to a cache adapter object, always creating it	 *	 * @param   string  $type     The cache object type to instantiate	 * @param   array   $options  The array of options	 *	 * @return  JCache  A JCache object	 *	 * @since   11.1	 */	public static function getInstance($type = 'output', $options = array())	{		return JCacheController::getInstance($type, $options);	}	/**	 * Get the storage handlers	 *	 * @return  array    An array of available storage handlers	 *	 * @since   11.1	 */	public static function getStores()	{		$handlers = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/storage');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile()				|| substr($fileName, strrpos($fileName, '.') + 1) != 'php'				|| $fileName == 'helper.php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JCacheStorage' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$handlers[] = str_ireplace('.php', '', $fileName);			}		}		return $handlers;	}	/**	 * Set caching enabled state	 *	 * @param   boolean  $enabled  True to enable caching	 *	 * @return  void	 *	 * @since   11.1	 */	public function setCaching($enabled)	{		$this->_options['caching'] = $enabled;	}	/**	 * Get caching state	 *	 * @return  boolean  Caching state	 *	 * @since   11.1	 */	public function getCaching()	{		return $this->_options['caching'];	}	/**	 * Set cache lifetime	 *	 * @param   integer  $lt  Cache lifetime	 *	 * @return  void	 *	 * @since   11.1	 */	public function setLifeTime($lt)	{		$this->_options['lifetime'] = $lt;	}	/**	 * Get cached data by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  mixed  boolean  False on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group = null)	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			return $handler->get($id, $group, $this->_options['checkTime']);		}		return false;	}	/**	 * Get a list of all cached data	 *	 * @return  mixed    Boolean false on failure or an object with a list of cache groups and data	 *	 * @since   11.1	 */	public function getAll()	{		// Get the storage		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			return $handler->getAll();		}		return false;	}	/**	 * Store the cached data by id and group	 *	 * @param   mixed   $data   The data to store	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True if cache stored	 *	 * @since   11.1	 */	public function store($data, $id, $group = null)	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage and store the cached data		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			$handler->_lifetime = $this->_options['lifetime'];			return $handler->store($id, $group, $data);		}		return false;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group = null)	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage		$handler = $this->_getStorage();		if (!($handler instanceof Exception))		{			return $handler->remove($id, $group);		}		return false;	}	/**	 * Clean cache for a group given a mode.	 *	 * group mode       : cleans all cache in the group	 * notgroup mode    : cleans all cache not in the group	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group = null, $mode = 'group')	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage handler		$handler = $this->_getStorage();		if (!($handler instanceof Exception))		{			return $handler->clean($group, $mode);		}		return false;	}	/**	 * Garbage collect expired cache data	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		// Get the storage handler		$handler = $this->_getStorage();		if (!($handler instanceof Exception))		{			return $handler->gc();		}		return false;	}	/**	 * Set lock flag on cached item	 *	 * @param   string  $id        The cache data id	 * @param   string  $group     The cache data group	 * @param   string  $locktime  The default locktime for locking the cache.	 *	 * @return  object  Properties are lock and locklooped	 *	 * @since   11.1	 */	public function lock($id, $group = null, $locktime = null)	{		$returning = new stdClass;		$returning->locklooped = false;		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the default locktime		$locktime = ($locktime) ? $locktime : $this->_options['locktime'];		// Allow storage handlers to perform locking on their own		// NOTE drivers with lock need also unlock or unlocking will fail because of false $id		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['locking'] == true && $this->_options['caching'] == true)		{			$locked = $handler->lock($id, $group, $locktime);			if ($locked !== false)			{				return $locked;			}		}		// Fallback		$curentlifetime = $this->_options['lifetime'];		// Set lifetime to locktime for storing in children		$this->_options['lifetime'] = $locktime;		$looptime = $locktime * 10;		$id2 = $id . '_lock';		if ($this->_options['locking'] == true && $this->_options['caching'] == true)		{			$data_lock = $this->get($id2, $group);		}		else		{			$data_lock = false;			$returning->locked = false;		}		if ($data_lock !== false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock !== false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = $this->get($id2, $group);				$lock_counter++;			}		}		if ($this->_options['locking'] == true && $this->_options['caching'] == true)		{			$returning->locked = $this->store(1, $id2, $group);		}		// Revert lifetime to previous one		$this->_options['lifetime'] = $curentlifetime;		return $returning;	}	/**	 * Unset lock flag on cached item	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		$unlock = false;		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Allow handlers to perform unlocking on their own		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			$unlocked = $handler->unlock($id, $group);			if ($unlocked !== false)			{				return $unlocked;			}		}		// Fallback		if ($this->_options['caching'])		{			$unlock = $this->remove($id . '_lock', $group);		}		return $unlock;	}	/**	 * Get the cache storage handler	 *	 * @return  JCacheStorage   A JCacheStorage object	 *	 * @since   11.1	 */	public function &_getStorage()	{		$hash = md5(serialize($this->_options));		if (isset(self::$_handler[$hash]))		{			return self::$_handler[$hash];		}		self::$_handler[$hash] = JCacheStorage::getInstance($this->_options['storage'], $this->_options);		return self::$_handler[$hash];	}	/**	 * Perform workarounds on retrieved cached data	 *	 * @param   string  $data     Cached data	 * @param   array   $options  Array of options	 *	 * @return  string  Body of cached data	 *	 * @since   11.1	 */	public static function getWorkarounds($data, $options = array())	{		$app = JFactory::getApplication();		$document = JFactory::getDocument();		$body = null;		// Get the document head out of the cache.		if (isset($options['mergehead']) && $options['mergehead'] == 1 && isset($data['head']) && !empty($data['head']))		{			$document->mergeHeadData($data['head']);		}		elseif (isset($data['head']) && method_exists($document, 'setHeadData'))		{			$document->setHeadData($data['head']);		}		// If the pathway buffer is set in the cache data, get it.		if (isset($data['pathway']) && is_array($data['pathway']))		{			// Push the pathway data into the pathway object.			$pathway = $app->getPathWay();			$pathway->setPathway($data['pathway']);		}		// @todo check if the following is needed, seems like it should be in page cache		// If a module buffer is set in the cache data, get it.		if (isset($data['module']) && is_array($data['module']))		{			// Iterate through the module positions and push them into the document buffer.			foreach ($data['module'] as $name => $contents)			{				$document->setBuffer($contents, 'module', $name);			}		}		if (isset($data['body']))		{			// The following code searches for a token in the cached page and replaces it with the			// proper token.			$token = JSession::getFormToken();			$search = '#<input type="hidden" name="[0-9a-f]{32}" value="1" />#';			$replacement = '<input type="hidden" name="' . $token . '" value="1" />';			$data['body'] = preg_replace($search, $replacement, $data['body']);			$body = $data['body'];		}		// Get the document body out of the cache.		return $body;	}	/**	 * Create workarounded data to be cached	 *	 * @param   string  $data     Cached data	 * @param   array   $options  Array of options	 *	 * @return  string  Data to be cached	 *	 * @since   11.1	 */	public static function setWorkarounds($data, $options = array())	{		$loptions = array();		$loptions['nopathway'] = 0;		$loptions['nohead'] = 0;		$loptions['nomodules'] = 0;		$loptions['modulemode'] = 0;		if (isset($options['nopathway']))		{			$loptions['nopathway'] = $options['nopathway'];		}		if (isset($options['nohead']))		{			$loptions['nohead'] = $options['nohead'];		}		if (isset($options['nomodules']))		{			$loptions['nomodules'] = $options['nomodules'];		}		if (isset($options['modulemode']))		{			$loptions['modulemode'] = $options['modulemode'];		}		$app = JFactory::getApplication();		$document = JFactory::getDocument();		// Get the modules buffer before component execution.		$buffer1 = $document->getBuffer();		if (!is_array($buffer1))		{			$buffer1 = array();		}		// Make sure the module buffer is an array.		if (!isset($buffer1['module']) || !is_array($buffer1['module']))		{			$buffer1['module'] = array();		}		// View body data		$cached['body'] = $data;		// Document head data		if ($loptions['nohead'] != 1 && method_exists($document, 'getHeadData'))		{			if ($loptions['modulemode'] == 1)			{				$headnow = $document->getHeadData();				$unset = array('title', 'description', 'link', 'links', 'metaTags');				foreach ($unset as $un)				{					unset($headnow[$un]);					unset($options['headerbefore'][$un]);				}				$cached['head'] = array();				// Only store what this module has added				foreach ($headnow as $now => $value)				{					if (isset($options['headerbefore'][$now]))					{						// We have to serialize the content of the arrays because the may contain other arrays which is a notice in PHP 5.4 and newer						$nowvalue = array_map('serialize', $headnow[$now]);						$beforevalue = array_map('serialize', $options['headerbefore'][$now]);						$newvalue = array_diff_assoc($nowvalue, $beforevalue);						$newvalue = array_map('unserialize', $newvalue);					}					else					{						$newvalue = $headnow[$now];					}					if (!empty($newvalue))					{						$cached['head'][$now] = $newvalue;					}				}			}			else			{				$cached['head'] = $document->getHeadData();			}		}		// Pathway data		if ($app->isSite() && $loptions['nopathway'] != 1)		{			$pathway = $app->getPathWay();			$cached['pathway'] = isset($data['pathway']) ? $data['pathway'] : $pathway->getPathway();		}		if ($loptions['nomodules'] != 1)		{			// @todo Check if the following is needed, seems like it should be in page cache			// Get the module buffer after component execution.			$buffer2 = $document->getBuffer();			if (!is_array($buffer2))			{				$buffer2 = array();			}			// Make sure the module buffer is an array.			if (!isset($buffer2['module']) || !is_array($buffer2['module']))			{				$buffer2['module'] = array();			}			// Compare the second module buffer against the first buffer.			$cached['module'] = array_diff_assoc($buffer2['module'], $buffer1['module']);		}		return $cached;	}	/**	 * Create safe id for cached data from url parameters set by plugins and framework	 *	 * @return  string   md5 encoded cacheid	 *	 * @since   11.1	 */	public static function makeId()	{		$app = JFactory::getApplication();		// Get url parameters set by plugins		if (!empty($app->registeredurlparams))		{			$registeredurlparams = $app->registeredurlparams;		}		// Platform defaults		$registeredurlparams->format = 'WORD';		$registeredurlparams->option = 'WORD';		$registeredurlparams->view = 'WORD';		$registeredurlparams->layout = 'WORD';		$registeredurlparams->tpl = 'CMD';		$registeredurlparams->id = 'INT';		$safeuriaddon = new stdClass;		foreach ($registeredurlparams as $key => $value)		{			$safeuriaddon->$key = $app->input->get($key, null, $value);		}		return md5(serialize($safeuriaddon));	}	/**	 * Add a directory where JCache should search for handlers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array   An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!empty($path) && !in_array($path, $paths))		{			jimport('joomla.filesystem.path');			array_unshift($paths, JPath::clean($path));		}		return $paths;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');jimport('legacy.application.helper');/** * Database configuration model for the Joomla Core Installer. * * @package  Joomla.Installation * @since    3.1 */class InstallationModelDatabase extends JModelBase{	/**	 * The generated user ID	 *	 * @var    integer	 * @since  3.1	 */	protected static $userId = 0;	/**	 * Generates the user ID	 *	 * @return  integer  The user ID	 *	 * @since   3.1	 */	protected static function generateRandUserId()	{		$session = JFactory::getSession();		$randUserId = $session->get('randUserId');		if (empty($randUserId))		{			// Create the ID for the root user only once and store in session			$randUserId = mt_rand(1, 1000);			$session->set('randUserId', $randUserId);		}		return $randUserId;	}	/**	 * Resets the user ID	 *	 * @return  void	 *	 * @since   3.1	 */	public static function resetRandUserId()	{		self::$userId = 0;		$session = JFactory::getSession();		$session->set('randUserId', self::$userId);	}	/**	 * Retrieves the default user ID and sets it if necessary	 *	 * @return  integer  The user ID	 *	 * @since   3.1	 */	public static function getUserId()	{		if (!self::$userId)		{			self::$userId = self::generateRandUserId();		}		return self::$userId;	}	/**	 * Method to initialise the database	 *	 * @param   array  $options  The options to use for configuration	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function initialise($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Load the back-end language files so that the DB error messages work		$lang = JFactory::getLanguage();		$currentLang = $lang->getTag();		// Load the selected language		if (JLanguage::exists($currentLang, JPATH_ADMINISTRATOR))		{			$lang->load('joomla', JPATH_ADMINISTRATOR, $currentLang, true);		}		// Pre-load en-GB in case the chosen language files do not exist		else		{			$lang->load('joomla', JPATH_ADMINISTRATOR, 'en-GB', true);		}		// Ensure a database type was selected.		if (empty($options->db_type))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_INVALID_TYPE'), 'notice');			return false;		}		// Ensure that a hostname and user name were input.		if (empty($options->db_host) || empty($options->db_user))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_INVALID_DB_DETAILS'), 'notice');			return false;		}		// Ensure that a database name was input.		if (empty($options->db_name))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_EMPTY_NAME'), 'notice');			return false;		}		// Validate database table prefix.		if (!preg_match('#^[a-zA-Z]+[a-zA-Z0-9_]*$#', $options->db_prefix))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_PREFIX_INVALID_CHARS'), 'notice');			return false;		}		// Validate length of database table prefix.		if (strlen($options->db_prefix) > 15)		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_FIX_TOO_LONG'), 'notice');			return false;		}		// Validate length of database name.		if (strlen($options->db_name) > 64)		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_NAME_TOO_LONG'), 'notice');			return false;		}		// Get a database object.		try		{			return InstallationHelperDatabase::getDbo(				$options->db_type, $options->db_host, $options->db_user, $options->db_pass, $options->db_name, $options->db_prefix, $options->db_select			);		}		catch (RuntimeException $e)		{			$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_COULD_NOT_CONNECT', $e->getMessage()), 'notice');			return false;		}	}	/**	 * Method to create a new database.	 *	 * @param   array  $options  The configuration options	 *	 * @return    boolean    True on success.	 *	 * @since    3.1	 */	public function createDatabase($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Disable autoselect database before it's created		$tmpSelect = true;		if (isset($options['db_select']))		{			$tmpSelect = $options['db_select'];		}		$options['db_select'] = false;		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Check database version.		$type = $options->db_type;		try		{			$db_version = $db->getVersion();		}		catch (RuntimeException $e)		{			$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_COULD_NOT_CONNECT', $e->getMessage()), 'notice');			return false;		}		if (!$db->isMinimumVersion())		{			$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_INVALID_' . strtoupper($type) . '_VERSION', $db_version), 'notice');			return false;		}		if (($type == 'mysql') || ($type == 'mysqli'))		{			// @internal MySQL versions pre 5.1.6 forbid . / or \ or NULL			if ((preg_match('#[\\\/\.\0]#', $options->db_name)) && (!version_compare($db_version, '5.1.6', '>=')))			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_INVALID_NAME', $db_version), 'notice');				return false;			}		}		// @internal Check for spaces in beginning or end of name		if (strlen(trim($options->db_name)) <> strlen($options->db_name))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_NAME_INVALID_SPACES'), 'notice');			return false;		}		// @internal Check for asc(00) Null in name		if (strpos($options->db_name, chr(00)) !== false)		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_NAME_INVALID_CHAR'), 'notice');			return false;		}		// PostgreSQL database older than version 9.0.0 needs to run 'CREATE LANGUAGE' to create function.		if (($options->db_type == 'postgresql') && (version_compare($db_version, '9.0.0', '<')))		{			$db->setQuery("CREATE LANGUAGE plpgsql");			$db->execute();		}		// Get database's UTF support		$utfSupport = $db->hasUTFSupport();		// Try to select the database		try		{			$db->select($options->db_name);		}		catch (RuntimeException $e)		{			// If the database could not be selected, attempt to create it and then select it.			if ($this->createDB($db, $options, $utfSupport))			{				$db->select($options->db_name);			}			else			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_CREATE', $options->db_name), 'notice');				return false;			}		}		$options = (array) $options;		// Remove *_errors value		foreach ($options as $i => $option)		{			if (isset($i['1']) && $i['1'] == '*')			{				unset($options[$i]);				break;			}		}		$options = array_merge(array('db_created' => 1), $options);		// Restore autoselect value after database creation		$options['db_select'] = $tmpSelect;		$session = JFactory::getSession();		$session->set('setup.options', $options);		return true;	}	/**	 * Method to process the old database	 *	 * @param   array  $options  The options array	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function handleOldDatabase($options)	{		if (!isset($options['db_created']) || !$options['db_created'])		{			return $this->createDatabase($options);		}		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Set the character set to UTF-8 for pre-existing databases.		$this->setDatabaseCharset($db, $options->db_name);		// Should any old database tables be removed or backed up?		if ($options->db_old == 'remove')		{			// Attempt to delete the old database tables.			if (!$this->deleteDatabase($db, $options->db_prefix))			{				// Message queued by method, simply return				return false;			}		}		else		{			// If the database isn't being deleted, back it up.			if (!$this->backupDatabase($db, $options->db_prefix))			{				return false;			}		}		return true;	}	/**	 * Method to create the database tables	 *	 * @param   array  $options  The options array	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function createTables($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		if (!isset($options['db_created']) || !$options['db_created'])		{			return $this->createDatabase($options);		}		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Check database type.		$type = $options->db_type;		// Set the character set to UTF-8 for pre-existing databases.		$this->setDatabaseCharset($db, $options->db_name);		// Set the appropriate schema script based on UTF-8 support.		if ($type == 'mysqli' || $type == 'mysql')		{			$schema = 'sql/mysql/joomla.sql';		}		elseif ($type == 'sqlsrv' || $type == 'sqlazure')		{			$schema = 'sql/sqlazure/joomla.sql';		}		else		{			$schema = 'sql/' . $type . '/joomla.sql';		}		// Check if the schema is a valid file		if (!is_file($schema))		{			$app->enqueueMessage(JText::sprintf('INSTL_ERROR_DB', JText::_('INSTL_DATABASE_NO_SCHEMA')), 'notice');			return false;		}		// Attempt to import the database schema.		if (!$this->populateDatabase($db, $schema))		{			return false;		}		// Attempt to update the table #__schema.		$pathPart = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		if ($type == 'mysqli' || $type == 'mysql')		{			$pathPart .= 'mysql/';		}		elseif ($type == 'sqlsrv' || $type == 'sqlazure')		{			$pathPart .= 'sqlazure/';		}		else		{			$pathPart .= $type . '/';		}		$files = JFolder::files($pathPart, '\.sql$');		if (empty($files))		{			$app->enqueueMessage(JText::_('INSTL_ERROR_INITIALISE_SCHEMA'), 'notice');			return false;		}		$version = '';		foreach ($files as $file)		{			if (version_compare($version, JFile::stripExt($file)) < 0)			{				$version = JFile::stripExt($file);			}		}		$query = $db->getQuery(true)			->insert($db->quoteName('#__schemas'))			->columns(				array(					$db->quoteName('extension_id'),					$db->quoteName('version_id')				)			)			->values('700, ' . $db->quote($version));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$app->enqueueMessage($e->getMessage(), 'notice');			return false;		}		// Attempt to refresh manifest caches		$query = $db->getQuery(true)			->select('*')			->from('#__extensions');		$db->setQuery($query);		$return = true;		try		{			$extensions = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$app->enqueueMessage($e->getMessage(), 'notice');			$return = false;		}		JFactory::$database = $db;		$installer = JInstaller::getInstance();		foreach ($extensions as $extension)		{			if (!$installer->refreshManifestCache($extension->extension_id))			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_COULD_NOT_REFRESH_MANIFEST_CACHE', $extension->name), 'notice');				return false;			}		}		// Load the localise.sql for translating the data in joomla.sql		if ($type == 'mysqli' || $type == 'mysql')		{			$dblocalise = 'sql/mysql/localise.sql';		}		elseif ($type == 'sqlsrv' || $type == 'sqlazure')		{			$dblocalise = 'sql/sqlazure/localise.sql';		}		else		{			$dblocalise = 'sql/' . $type . '/localise.sql';		}		if (is_file($dblocalise))		{			if (!$this->populateDatabase($db, $dblocalise))			{				return false;			}		}		// Handle default backend language setting. This feature is available for localized versions of Joomla.		$app = JFactory::getApplication();		$languages = $app->getLocaliseAdmin($db);		if (in_array($options->language, $languages['admin']) || in_array($options->language, $languages['site']))		{			// Build the language parameters for the language manager.			$params = array();			// Set default administrator/site language to sample data values:			$params['administrator'] = 'en-GB';			$params['site'] = 'en-GB';			if (in_array($options->language, $languages['admin']))			{				$params['administrator'] = $options->language;			}			if (in_array($options->language, $languages['site']))			{				$params['site'] = $options->language;			}			$params = json_encode($params);			// Update the language settings in the language manager.			$query = $db->getQuery(true)				->update($db->quoteName('#__extensions'))				->set($db->quoteName('params') . ' = ' . $db->quote($params))				->where($db->quoteName('element') . ' = ' . $db->quote('com_languages'));			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$app->enqueueMessage($e->getMessage(), 'notice');				$return = false;			}		}		return $return;	}	/**	 * Method to install the sample data	 *	 * @param   array  $options  The options array	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function installSampleData($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		if (!isset($options['db_created']) || !$options['db_created'])		{			return $this->createDatabase($options);		}		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Build the path to the sample data file.		$type = $options->db_type;		if ($type == 'mysqli')		{			$type = 'mysql';		}		elseif ($type == 'sqlsrv')		{			$type = 'sqlazure';		}		$data = JPATH_INSTALLATION . '/sql/' . $type . '/' . $options->sample_file;		// Attempt to import the database schema if one is chosen.		if ($options->sample_file != '')		{			if (!file_exists($data))			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_FILE_DOES_NOT_EXIST', $data), 'notice');				return false;			}			elseif (!$this->populateDatabase($db, $data))			{				return false;			}			$this->postInstallSampleData($db);		}		return true;	}	/**	 * Method to update the user id of the sample data content to the new rand user id	 *	 * @param   JDatabaseDriver  $db  Database connector object $db*	 *	 * @return  void	 *	 * @since   3.1	 */	protected function postInstallSampleData($db)	{		// Create the ID for the root user		$userId = self::getUserId();		// Update all created_by field of the tables with the random user id		// categories (created_user_id), contact_details, content, newsfeeds, weblinks		$updates_array = array(			'categories' => 'created_user_id',			'contact_details' => 'created_by',			'content' => 'created_by',			'newsfeeds' => 'created_by',			'weblinks' => 'created_by',		);		foreach ($updates_array as $table => $field)		{			$db->setQuery(				'UPDATE ' . $db->quoteName('#__' . $table) .					' SET ' . $db->quoteName($field) . ' = ' . $db->quote($userId)			);			$db->execute();		}	}	/**	 * Method to backup all tables in a database with a given prefix.	 *	 * @param   JDatabaseDriver  $db      JDatabaseDriver object.	 * @param   string           $prefix  Database table prefix.	 *	 * @return  boolean  True on success.	 *	 * @since    3.1	 */	public function backupDatabase($db, $prefix)	{		$return = true;		$backup = 'bak_' . $prefix;		// Get the tables in the database.		$tables = $db->getTableList();		if ($tables)		{			foreach ($tables as $table)			{				// If the table uses the given prefix, back it up.				if (strpos($table, $prefix) === 0)				{					// Backup table name.					$backupTable = str_replace($prefix, $backup, $table);					// Drop the backup table.					try					{						$db->dropTable($backupTable, true);					}					catch (RuntimeException $e)					{						JFactory::getApplication()->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_BACKINGUP', $e->getMessage()), 'notice');						$return = false;					}					// Rename the current table to the backup table.					try					{						$db->renameTable($table, $backupTable, $backup, $prefix);					}					catch (RuntimeException $e)					{						JFactory::getApplication()->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_BACKINGUP', $e->getMessage()), 'notice');						$return = false;					}				}			}		}		return $return;	}	/**	 * Method to create a new database.	 *	 * @param   JDatabaseDriver  $db       JDatabase object.	 * @param   JObject          $options  JObject coming from "initialise" function to pass user	 *                                     and database name to database driver.	 * @param   boolean          $utf      True if the database supports the UTF-8 character set.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function createDB($db, $options, $utf)	{		// Build the create database query.		try		{			// Run the create database query.			$db->createDatabase($options, $utf);		}		catch (RuntimeException $e)		{			// If an error occurred return false.			return false;		}		return true;	}	/**	 * Method to delete all tables in a database with a given prefix.	 *	 * @param   JDatabaseDriver  $db      JDatabaseDriver object.	 * @param   string           $prefix  Database table prefix.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function deleteDatabase($db, $prefix)	{		$return = true;		// Get the tables in the database.		$tables = $db->getTableList();		if ($tables)		{			foreach ($tables as $table)			{				// If the table uses the given prefix, drop it.				if (strpos($table, $prefix) === 0)				{					// Drop the table.					try					{						$db->dropTable($table);					}					catch (RuntimeException $e)					{						JFactory::getApplication()->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_DELETE', $e->getMessage()), 'notice');						$return = false;					}				}			}		}		return $return;	}	/**	 * Method to import a database schema from a file.	 *	 * @param   JDatabaseDriver  $db      JDatabase object.	 * @param   string           $schema  Path to the schema file.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function populateDatabase($db, $schema)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		$return = true;		// Get the contents of the schema file.		if (!($buffer = file_get_contents($schema)))		{			$app->enqueueMessage($db->getErrorMsg(), 'notice');			return false;		}		// Get an array of queries from the schema and process them.		$queries = $this->_splitQueries($buffer);		foreach ($queries as $query)		{			// Trim any whitespace.			$query = trim($query);			// If the query isn't empty and is not a MySQL or PostgreSQL comment, execute it.			if (!empty($query) && ($query{0} != '#') && ($query{0} != '-'))			{				// Execute the query.				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$app->enqueueMessage($e->getMessage(), 'notice');					$return = false;				}			}		}		return $return;	}	/**	 * Method to set the database character set to UTF-8.	 *	 * @param   JDatabaseDriver  $db    JDatabaseDriver object.	 * @param   string           $name  Name of the database to process.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function setDatabaseCharset($db, $name)	{		// Run the create database query.		$db->setQuery($db->getAlterDbCharacterSet($name));		try		{			$db->execute();		}		catch (RuntimeException $e)		{			return false;		}		return true;	}	/**	 * Method to split up queries from a schema file into an array.	 *	 * @param   string  $query  SQL schema.	 *	 * @return  array  Queries to perform.	 *	 * @since   3.1	 */	protected function _splitQueries($query)	{		$buffer = array();		$queries = array();		$in_string = false;		// Trim any whitespace.		$query = trim($query);		// Remove comment lines.		$query = preg_replace("/\n\#[^\n]*/", '', "\n" . $query);		// Remove PostgreSQL comment lines.		$query = preg_replace("/\n\--[^\n]*/", '', "\n" . $query);		// Find function		$funct = explode('CREATE OR REPLACE FUNCTION', $query);		// Save sql before function and parse it		$query = $funct[0];		// Parse the schema file to break up queries.		for ($i = 0; $i < strlen($query) - 1; $i++)		{			if ($query[$i] == ";" && !$in_string)			{				$queries[] = substr($query, 0, $i);				$query = substr($query, $i + 1);				$i = 0;			}			if ($in_string && ($query[$i] == $in_string) && $buffer[1] != "\\")			{				$in_string = false;			}			elseif (!$in_string && ($query[$i] == '"' || $query[$i] == "'") && (!isset ($buffer[0]) || $buffer[0] != "\\"))			{				$in_string = $query[$i];			}			if (isset ($buffer[1]))			{				$buffer[0] = $buffer[1];			}			$buffer[1] = $query[$i];		}		// If the is anything left over, add it to the queries.		if (!empty($query))		{			$queries[] = $query;		}		// Add function part as is		for ($f = 1; $f < count($funct); $f++)		{			$queries[] = 'CREATE OR REPLACE FUNCTION ' . $funct[$f];		}		return $queries;	}}
