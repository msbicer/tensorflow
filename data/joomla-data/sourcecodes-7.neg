<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_contact */class ContactTableContact extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param  JDatabase  Database connector object	 *	 * @since 1.0	 */	public function __construct(& $db)	{		parent::__construct('#__contact_details', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_contact.contact';	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array to bind	 * @param   mixed  $ignore  An optional array or space separated list of properties to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error	 * @since   1.6	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Stores a contact	 *	 * @param   boolean	True to update fields even if they are null.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   1.6	 */	public function store($updateNulls = false)	{		// Transform the params field		if (is_array($this->params))		{			$registry = new JRegistry;			$registry->loadArray($this->params);			$this->params = (string) $registry;		}		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified		= $date->toSql();			$this->modified_by	= $user->get('id');		}		else		{			// New contact. A contact created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Set publish_up to null date if not set		if (!$this->publish_up)		{			$this->publish_up = $this->_db->getNullDate();		}		// Set publish_down to null date if not set		if (!$this->publish_down)		{			$this->publish_down = $this->_db->getNullDate();		}		// Set xreference to empty string if not set		if (!$this->xreference)		{			$this->xreference = '';		}		// Verify that the alias is unique		$table = JTable::getInstance('Contact', 'ContactTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_CONTACT_ERROR_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success, false on failure	 *	 * @see JTable::check	 * @since 1.5	 */	public function check()	{		$this->default_con = (int) $this->default_con;		if (JFilterInput::checkAttribute(array ('href', $this->webpage)))		{			$this->setError(JText::_('COM_CONTACT_WARNING_PROVIDE_VALID_URL'));			return false;		}		/** check for valid name */		if (trim($this->name) == '')		{			$this->setError(JText::_('COM_CONTACT_WARNING_PROVIDE_VALID_NAME'));			return false;		}		if (empty($this->alias))		{			$this->alias = $this->name;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		/** check for valid category */		if (trim($this->catid) == '')		{			$this->setError(JText::_('COM_CONTACT_WARNING_CATEGORY'));			return false;		}		// Check the publish down date is not earlier than publish up.		if ((int) $this->publish_down > 0 && $this->publish_down < $this->publish_up)		{			$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));			return false;		}		return true;		// Clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// Only process if not empty			$bad_characters = array("\n", "\r", "\"", "<", ">"); // array of characters to remove			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey); // remove bad characters			$keys = explode(',', $after_clean); // create array using commas as delimiter			$clean_keys = array();			foreach($keys as $key)			{				if (trim($key)) {  // ignore blank keywords					$clean_keys[] = trim($key);				}			}			$this->metakey = implode(", ", $clean_keys); // put array back together delimited by ", "		}		// Clean up description -- eliminate quotes and <> brackets		if (!empty($this->metadesc))		{			// Only process if not empty			$bad_characters = array("\"", "<", ">");			$this->metadesc = JString::str_ireplace($bad_characters, "", $this->metadesc);		}		return true;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Menu Types table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableMenuType extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since  11.1	 */	public function __construct($db)	{		parent::__construct('#__menu_types', 'id', $db);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success, false on failure	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		$this->menutype = JApplication::stringURLSafe($this->menutype);		if (empty($this->menutype))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENUTYPE_EMPTY'));			return false;		}		// Sanitise data.		if (trim($this->title) == '')		{			$this->title = $this->menutype;		}		// Check for unique menutype.		$query = $this->_db->getQuery(true)			->select('COUNT(id)')			->from($this->_db->quoteName('#__menu_types'))			->where($this->_db->quoteName('menutype') . ' = ' . $this->_db->quote($this->menutype))			->where($this->_db->quoteName('id') . ' <> ' . (int) $this->id);		$this->_db->setQuery($query);		if ($this->_db->loadResult())		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_MENUTYPE_EXISTS', $this->menutype));			return false;		}		return true;	}	/**	 * Method to store a row in the database from the JTable instance properties.	 * If a primary key value is set the row with that primary key value will be	 * updated with the instance property values.  If no primary key value is set	 * a new row will be inserted into the database with the properties from the	 * JTable instance.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/store	 * @since   11.1	 */	public function store($updateNulls = false)	{		if ($this->id)		{			// Get the user id			$userId = JFactory::getUser()->id;			// Get the old value of the table			$table = JTable::getInstance('Menutype', 'JTable');			$table->load($this->id);			// Verify that no items are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(					JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE_CHECKOUT'))				);				return false;			}			// Verify that no module for this menu are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(					JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE_CHECKOUT'))				);				return false;			}			// Update the menu items			$query = $this->_db->getQuery(true)				->update('#__menu')				->set('menutype=' . $this->_db->quote($this->menutype))				->where('menutype=' . $this->_db->quote($table->menutype));			$this->_db->setQuery($query);			$this->_db->execute();			// Update the module items			$query = $this->_db->getQuery(true)				->update('#__modules')				->set(				'params=REPLACE(params,' . $this->_db->quote('"menutype":' . json_encode($table->menutype)) . ',' .				$this->_db->quote('"menutype":' . json_encode($this->menutype)) . ')'			);			$query->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'));			$this->_db->setQuery($query);			$this->_db->execute();		}		return parent::store($updateNulls);	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   mixed  $pk  An optional primary key value to delete.  If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/delete	 * @since   11.1	 */	public function delete($pk = null)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk !== null)		{			// Get the user id			$userId = JFactory::getUser()->id;			// Get the old value of the table			$table = JTable::getInstance('Menutype', 'JTable');			$table->load($pk);			// Verify that no items are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('client_id=0')				->where('(checked_out NOT IN (0,' . (int) $userId . ') OR home=1 AND language=' . $this->_db->quote('*') . ')');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_DELETE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE')));				return false;			}			// Verify that no module for this menu are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_DELETE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE')));				return false;			}			// Delete the menu items			$query = $this->_db->getQuery(true)				->delete('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('client_id=0');			$this->_db->setQuery($query);			$this->_db->execute();			// Update the module items			$query = $this->_db->getQuery(true)				->delete('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'));			$this->_db->setQuery($query);			$this->_db->execute();		}		return parent::delete($pk);	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for creating HTML select lists * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlSelect{	/**	 * Default values for options. Organized by option group.	 *	 * @var     array	 * @since   11.1	 */	static protected $optionDefaults = array(		'option' => array('option.attr' => null, 'option.disable' => 'disable', 'option.id' => null, 'option.key' => 'value',			'option.key.toHtml' => true, 'option.label' => null, 'option.label.toHtml' => true, 'option.text' => 'text',			'option.text.toHtml' => true));	/**	 * Generates a yes/no radio list.	 *	 * @param   string  $name      The value of the HTML name attribute	 * @param   array   $attribs   Additional HTML attributes for the <select> tag	 * @param   string  $selected  The key that is selected	 * @param   string  $yes       Language key for Yes	 * @param   string  $no        Language key for no	 * @param   string  $id        The id for the field	 *	 * @return  string  HTML for the radio list	 *	 * @since   11.1	 * @see     JFormFieldRadio	 */	public static function booleanlist($name, $attribs = null, $selected = null, $yes = 'JYES', $no = 'JNO', $id = false)	{		$arr = array(JHtml::_('select.option', '0', JText::_($no)), JHtml::_('select.option', '1', JText::_($yes)));		return JHtml::_('select.radiolist', $arr, $name, $attribs, 'value', 'text', (int) $selected, $id);	}	/**	 * Generates an HTML selection list.	 *	 * @param   array    $data       An array of objects, arrays, or scalars.	 * @param   string   $name       The value of the HTML name attribute.	 * @param   mixed    $attribs    Additional HTML attributes for the <select> tag. This	 *                               can be an array of attributes, or an array of options. Treated as options	 *                               if it is the last argument passed. Valid options are:	 *                               Format options, see {@see JHtml::$formatOptions}.	 *                               Selection options, see {@see JHtmlSelect::options()}.	 *                               list.attr, string|array: Additional attributes for the select	 *                               element.	 *                               id, string: Value to use as the select element id attribute.	 *                               Defaults to the same as the name.	 *                               list.select, string|array: Identifies one or more option elements	 *                               to be selected, based on the option key values.	 * @param   string   $optKey     The name of the object variable for the option value. If	 *                               set to null, the index of the value array is used.	 * @param   string   $optText    The name of the object variable for the option text.	 * @param   mixed    $selected   The key that is selected (accepts an array or a string).	 * @param   mixed    $idtag      Value of the field id or null by default	 * @param   boolean  $translate  True to translate	 *	 * @return  string  HTML for the select list.	 *	 * @since   11.1	 */	public static function genericlist($data, $name, $attribs = null, $optKey = 'value', $optText = 'text', $selected = null, $idtag = false,		$translate = false)	{		// Set default options		$options = array_merge(JHtml::$formatOptions, array('format.depth' => 0, 'id' => false));		if (is_array($attribs) && func_num_args() == 3)		{			// Assume we have an options array			$options = array_merge($options, $attribs);		}		else		{			// Get options from the parameters			$options['id'] = $idtag;			$options['list.attr'] = $attribs;			$options['list.translate'] = $translate;			$options['option.key'] = $optKey;			$options['option.text'] = $optText;			$options['list.select'] = $selected;		}		$attribs = '';		if (isset($options['list.attr']))		{			if (is_array($options['list.attr']))			{				$attribs = JArrayHelper::toString($options['list.attr']);			}			else			{				$attribs = $options['list.attr'];			}			if ($attribs != '')			{				$attribs = ' ' . $attribs;			}		}		$id = $options['id'] !== false ? $options['id'] : $name;		$id = str_replace(array('[', ']'), '', $id);		$baseIndent = str_repeat($options['format.indent'], $options['format.depth']++);		$html = $baseIndent . '<select' . ($id !== '' ? ' id="' . $id . '"' : '') . ' name="' . $name . '"' . $attribs . '>' . $options['format.eol']			. self::options($data, $options) . $baseIndent . '</select>' . $options['format.eol'];		return $html;	}	/**	 * Generates a grouped HTML selection list from nested arrays.	 *	 * @param   array   $data     An array of groups, each of which is an array of options.	 * @param   string  $name     The value of the HTML name attribute	 * @param   array   $options  Options, an array of key/value pairs. Valid options are:	 *                            Format options, {@see JHtml::$formatOptions}.	 *                            Selection options. See {@see JHtmlSelect::options()}.	 *                            group.id: The property in each group to use as the group id	 *                            attribute. Defaults to none.	 *                            group.label: The property in each group to use as the group	 *                            label. Defaults to "text". If set to null, the data array index key is	 *                            used.	 *                            group.items: The property in each group to use as the array of	 *                            items in the group. Defaults to "items". If set to null, group.id and	 *                            group. label are forced to null and the data element is assumed to be a	 *                            list of selections.	 *                            id: Value to use as the select element id attribute. Defaults to	 *                            the same as the name.	 *                            list.attr: Attributes for the select element. Can be a string or	 *                            an array of key/value pairs. Defaults to none.	 *                            list.select: either the value of one selected option or an array	 *                            of selected options. Default: none.	 *                            list.translate: Boolean. If set, text and labels are translated via	 *                            JText::_().	 *	 * @return  string  HTML for the select list	 *	 * @since   11.1	 *	 * @throws  RuntimeException If a group has contents that cannot be processed.	 */	public static function groupedlist($data, $name, $options = array())	{		// Set default options and overwrite with anything passed in		$options = array_merge(			JHtml::$formatOptions,			array('format.depth' => 0, 'group.items' => 'items', 'group.label' => 'text', 'group.label.toHtml' => true, 'id' => false),			$options		);		// Apply option rules		if ($options['group.items'] === null)		{			$options['group.label'] = null;		}		$attribs = '';		if (isset($options['list.attr']))		{			if (is_array($options['list.attr']))			{				$attribs = JArrayHelper::toString($options['list.attr']);			}			else			{				$attribs = $options['list.attr'];			}			if ($attribs != '')			{				$attribs = ' ' . $attribs;			}		}		$id = $options['id'] !== false ? $options['id'] : $name;		$id = str_replace(array('[', ']'), '', $id);		// Disable groups in the options.		$options['groups'] = false;		$baseIndent = str_repeat($options['format.indent'], $options['format.depth']++);		$html = $baseIndent . '<select' . ($id !== '' ? ' id="' . $id . '"' : '') . ' name="' . $name . '"' . $attribs . '>' . $options['format.eol'];		$groupIndent = str_repeat($options['format.indent'], $options['format.depth']++);		foreach ($data as $dataKey => $group)		{			$label = $dataKey;			$id = '';			$noGroup = is_int($dataKey);			if ($options['group.items'] == null)			{				// Sub-list is an associative array				$subList = $group;			}			elseif (is_array($group))			{				// Sub-list is in an element of an array.				$subList = $group[$options['group.items']];				if (isset($group[$options['group.label']]))				{					$label = $group[$options['group.label']];					$noGroup = false;				}				if (isset($options['group.id']) && isset($group[$options['group.id']]))				{					$id = $group[$options['group.id']];					$noGroup = false;				}			}			elseif (is_object($group))			{				// Sub-list is in a property of an object				$subList = $group->$options['group.items'];				if (isset($group->$options['group.label']))				{					$label = $group->$options['group.label'];					$noGroup = false;				}				if (isset($options['group.id']) && isset($group->$options['group.id']))				{					$id = $group->$options['group.id'];					$noGroup = false;				}			}			else			{				throw new RuntimeException('Invalid group contents.', 1);			}			if ($noGroup)			{				$html .= self::options($subList, $options);			}			else			{				$html .= $groupIndent . '<optgroup' . (empty($id) ? '' : ' id="' . $id . '"') . ' label="'					. ($options['group.label.toHtml'] ? htmlspecialchars($label, ENT_COMPAT, 'UTF-8') : $label) . '">' . $options['format.eol']					. self::options($subList, $options) . $groupIndent . '</optgroup>' . $options['format.eol'];			}		}		$html .= $baseIndent . '</select>' . $options['format.eol'];		return $html;	}	/**	 * Generates a selection list of integers.	 *	 * @param   integer  $start     The start integer	 * @param   integer  $end       The end integer	 * @param   integer  $inc       The increment	 * @param   string   $name      The value of the HTML name attribute	 * @param   mixed    $attribs   Additional HTML attributes for the <select> tag, an array of	 *                              attributes, or an array of options. Treated as options if it is the last	 *                              argument passed.	 * @param   mixed    $selected  The key that is selected	 * @param   string   $format    The printf format to be applied to the number	 *	 * @return  string   HTML for the select list	 *	 * @since    11.1	 */	public static function integerlist($start, $end, $inc, $name, $attribs = null, $selected = null, $format = '')	{		// Set default options		$options = array_merge(JHtml::$formatOptions, array('format.depth' => 0, 'option.format' => '', 'id' => null));		if (is_array($attribs) && func_num_args() == 5)		{			// Assume we have an options array			$options = array_merge($options, $attribs);			// Extract the format and remove it from downstream options			$format = $options['option.format'];			unset($options['option.format']);		}		else		{			// Get options from the parameters			$options['list.attr'] = $attribs;			$options['list.select'] = $selected;		}		$start = (int) $start;		$end   = (int) $end;		$inc   = (int) $inc;		$data = array();		for ($i = $start; $i <= $end; $i += $inc)		{			$data[$i] = $format ? sprintf($format, $i) : $i;		}		// Tell genericlist() to use array keys		$options['option.key'] = null;		return JHtml::_('select.genericlist', $data, $name, $options);	}	/**	 * Create a placeholder for an option group.	 *	 * @param   string  $text     The text for the option	 * @param   string  $optKey   The returned object property name for the value	 * @param   string  $optText  The returned object property name for the text	 *	 * @return  object	 *	 * @deprecated  12.1  Use JHtmlSelect::groupedList()	 * @see     JHtmlSelect::groupedList()	 * @since   11.1	 */	public static function optgroup($text, $optKey = 'value', $optText = 'text')	{		JLog::add('JHtmlSelect::optgroup is deprecated.', JLog::WARNING, 'deprecated');		// Set initial state		static $state = 'open';		// Toggle between open and close states:		switch ($state)		{			case 'open':				$obj = new stdClass;				$obj->$optKey = '<OPTGROUP>';				$obj->$optText = $text;				$state = 'close';				break;			case 'close':				$obj = new stdClass;				$obj->$optKey = '</OPTGROUP>';				$obj->$optText = $text;				$state = 'open';				break;		}		return $obj;	}	/**	 * Create an object that represents an option in an option list.	 *	 * @param   string   $value    The value of the option	 * @param   string   $text     The text for the option	 * @param   mixed    $optKey   If a string, the returned object property name for	 *                             the value. If an array, options. Valid options are:	 *                             attr: String|array. Additional attributes for this option.	 *                             Defaults to none.	 *                             disable: Boolean. If set, this option is disabled.	 *                             label: String. The value for the option label.	 *                             option.attr: The property in each option array to use for	 *                             additional selection attributes. Defaults to none.	 *                             option.disable: The property that will hold the disabled state.	 *                             Defaults to "disable".	 *                             option.key: The property that will hold the selection value.	 *                             Defaults to "value".	 *                             option.label: The property in each option array to use as the	 *                             selection label attribute. If a "label" option is provided, defaults to	 *                             "label", if no label is given, defaults to null (none).	 *                             option.text: The property that will hold the the displayed text.	 *                             Defaults to "text". If set to null, the option array is assumed to be a	 *                             list of displayable scalars.	 * @param   string   $optText  The property that will hold the the displayed text. This	 *                             parameter is ignored if an options array is passed.	 * @param   boolean  $disable  Not used.	 *	 * @return  object	 *	 * @since   11.1	 */	public static function option($value, $text = '', $optKey = 'value', $optText = 'text', $disable = false)	{		$options = array('attr' => null, 'disable' => false, 'option.attr' => null, 'option.disable' => 'disable', 'option.key' => 'value',			'option.label' => null, 'option.text' => 'text');		if (is_array($optKey))		{			// Merge in caller's options			$options = array_merge($options, $optKey);		}		else		{			// Get options from the parameters			$options['option.key'] = $optKey;			$options['option.text'] = $optText;			$options['disable'] = $disable;		}		$obj = new stdClass;		$obj->$options['option.key'] = $value;		$obj->$options['option.text'] = trim($text) ? $text : $value;		/*		 * If a label is provided, save it. If no label is provided and there is		 * a label name, initialise to an empty string.		 */		$hasProperty = $options['option.label'] !== null;		if (isset($options['label']))		{			$labelProperty = $hasProperty ? $options['option.label'] : 'label';			$obj->$labelProperty = $options['label'];		}		elseif ($hasProperty)		{			$obj->$options['option.label'] = '';		}		// Set attributes only if there is a property and a value		if ($options['attr'] !== null)		{			$obj->$options['option.attr'] = $options['attr'];		}		// Set disable only if it has a property and a value		if ($options['disable'] !== null)		{			$obj->$options['option.disable'] = $options['disable'];		}		return $obj;	}	/**	 * Generates the option tags for an HTML select list (with no select tag	 * surrounding the options).	 *	 * @param   array    $arr        An array of objects, arrays, or values.	 * @param   mixed    $optKey     If a string, this is the name of the object variable for	 *                               the option value. If null, the index of the array of objects is used. If	 *                               an array, this is a set of options, as key/value pairs. Valid options are:	 *                               -Format options, {@see JHtml::$formatOptions}.	 *                               -groups: Boolean. If set, looks for keys with the value	 *                                "&lt;optgroup>" and synthesizes groups from them. Deprecated. Defaults	 *                                true for backwards compatibility.	 *                               -list.select: either the value of one selected option or an array	 *                                of selected options. Default: none.	 *                               -list.translate: Boolean. If set, text and labels are translated via	 *                                JText::_(). Default is false.	 *                               -option.id: The property in each option array to use as the	 *                                selection id attribute. Defaults to none.	 *                               -option.key: The property in each option array to use as the	 *                                selection value. Defaults to "value". If set to null, the index of the	 *                                option array is used.	 *                               -option.label: The property in each option array to use as the	 *                                selection label attribute. Defaults to null (none).	 *                               -option.text: The property in each option array to use as the	 *                               displayed text. Defaults to "text". If set to null, the option array is	 *                               assumed to be a list of displayable scalars.	 *                               -option.attr: The property in each option array to use for	 *                                additional selection attributes. Defaults to none.	 *                               -option.disable: The property that will hold the disabled state.	 *                                Defaults to "disable".	 *                               -option.key: The property that will hold the selection value.	 *                                Defaults to "value".	 *                               -option.text: The property that will hold the the displayed text.	 *                               Defaults to "text". If set to null, the option array is assumed to be a	 *                               list of displayable scalars.	 * @param   string   $optText    The name of the object variable for the option text.	 * @param   mixed    $selected   The key that is selected (accepts an array or a string)	 * @param   boolean  $translate  Translate the option values.	 *	 * @return  string  HTML for the select list	 *	 * @since   11.1	 */	public static function options($arr, $optKey = 'value', $optText = 'text', $selected = null, $translate = false)	{		$options = array_merge(			JHtml::$formatOptions,			self::$optionDefaults['option'],			array('format.depth' => 0, 'groups' => true, 'list.select' => null, 'list.translate' => false)		);		if (is_array($optKey))		{			// Set default options and overwrite with anything passed in			$options = array_merge($options, $optKey);		}		else		{			// Get options from the parameters			$options['option.key'] = $optKey;			$options['option.text'] = $optText;			$options['list.select'] = $selected;			$options['list.translate'] = $translate;		}		$html = '';		$baseIndent = str_repeat($options['format.indent'], $options['format.depth']);		foreach ($arr as $elementKey => &$element)		{			$attr = '';			$extra = '';			$label = '';			$id = '';			if (is_array($element))			{				$key = $options['option.key'] === null ? $elementKey : $element[$options['option.key']];				$text = $element[$options['option.text']];				if (isset($element[$options['option.attr']]))				{					$attr = $element[$options['option.attr']];				}				if (isset($element[$options['option.id']]))				{					$id = $element[$options['option.id']];				}				if (isset($element[$options['option.label']]))				{					$label = $element[$options['option.label']];				}				if (isset($element[$options['option.disable']]) && $element[$options['option.disable']])				{					$extra .= ' disabled="disabled"';				}			}			elseif (is_object($element))			{				$key = $options['option.key'] === null ? $elementKey : $element->$options['option.key'];				$text = $element->$options['option.text'];				if (isset($element->$options['option.attr']))				{					$attr = $element->$options['option.attr'];				}				if (isset($element->$options['option.id']))				{					$id = $element->$options['option.id'];				}				if (isset($element->$options['option.label']))				{					$label = $element->$options['option.label'];				}				if (isset($element->$options['option.disable']) && $element->$options['option.disable'])				{					$extra .= ' disabled="disabled"';				}			}			else			{				// This is a simple associative array				$key = $elementKey;				$text = $element;			}			/*			 * The use of options that contain optgroup HTML elements was			 * somewhat hacked for J1.5. J1.6 introduces the grouplist() method			 * to handle this better. The old solution is retained through the			 * "groups" option, which defaults true in J1.6, but should be			 * deprecated at some point in the future.			 */			$key = (string) $key;			if ($options['groups'] && $key == '<OPTGROUP>')			{				$html .= $baseIndent . '<optgroup label="' . ($options['list.translate'] ? JText::_($text) : $text) . '">' . $options['format.eol'];				$baseIndent = str_repeat($options['format.indent'], ++$options['format.depth']);			}			elseif ($options['groups'] && $key == '</OPTGROUP>')			{				$baseIndent = str_repeat($options['format.indent'], --$options['format.depth']);				$html .= $baseIndent . '</optgroup>' . $options['format.eol'];			}			else			{				// If no string after hyphen - take hyphen out				$splitText = explode(' - ', $text, 2);				$text = $splitText[0];				if (isset($splitText[1]))				{					$text .= ' - ' . $splitText[1];				}				if ($options['list.translate'] && !empty($label))				{					$label = JText::_($label);				}				if ($options['option.label.toHtml'])				{					$label = htmlentities($label);				}				if (is_array($attr))				{					$attr = JArrayHelper::toString($attr);				}				else				{					$attr = trim($attr);				}				$extra = ($id ? ' id="' . $id . '"' : '') . ($label ? ' label="' . $label . '"' : '') . ($attr ? ' ' . $attr : '') . $extra;				if (is_array($options['list.select']))				{					foreach ($options['list.select'] as $val)					{						$key2 = is_object($val) ? $val->$options['option.key'] : $val;						if ($key == $key2)						{							$extra .= ' selected="selected"';							break;						}					}				}				elseif ((string) $key == (string) $options['list.select'])				{					$extra .= ' selected="selected"';				}				if ($options['list.translate'])				{					$text = JText::_($text);				}				// Generate the option, encoding as required				$html .= $baseIndent . '<option value="' . ($options['option.key.toHtml'] ? htmlspecialchars($key, ENT_COMPAT, 'UTF-8') : $key) . '"'					. $extra . '>';				$html .= $options['option.text.toHtml'] ? htmlentities(html_entity_decode($text, ENT_COMPAT, 'UTF-8'), ENT_COMPAT, 'UTF-8') : $text;				$html .= '</option>' . $options['format.eol'];			}		}		return $html;	}	/**	 * Generates an HTML radio list.	 *	 * @param   array    $data       An array of objects	 * @param   string   $name       The value of the HTML name attribute	 * @param   string   $attribs    Additional HTML attributes for the <select> tag	 * @param   mixed    $optKey     The key that is selected	 * @param   string   $optText    The name of the object variable for the option value	 * @param   string   $selected   The name of the object variable for the option text	 * @param   boolean  $idtag      Value of the field id or null by default	 * @param   boolean  $translate  True if options will be translated	 *	 * @return  string HTML for the select list	 *	 * @since  11.1	 */	public static function radiolist($data, $name, $attribs = null, $optKey = 'value', $optText = 'text', $selected = null, $idtag = false,		$translate = false)	{		reset($data);		if (is_array($attribs))		{			$attribs = JArrayHelper::toString($attribs);		}		$id_text = $idtag ? $idtag : $name;		$html = '<div class="controls">';		foreach ($data as $obj)		{			$k = $obj->$optKey;			$t = $translate ? JText::_($obj->$optText) : $obj->$optText;			$id = (isset($obj->id) ? $obj->id : null);			$extra = '';			$extra .= $id ? ' id="' . $obj->id . '"' : '';			if (is_array($selected))			{				foreach ($selected as $val)				{					$k2 = is_object($val) ? $val->$optKey : $val;					if ($k == $k2)					{						$extra .= ' selected="selected"';						break;					}				}			}			else			{				$extra .= ((string) $k == (string) $selected ? ' checked="checked"' : '');			}			$html .= "\n\t" . '<label for="' . $id_text . $k . '" id="' . $id_text . $k . '-lbl" class="radio">';			$html .= "\n\t" . "\n\t" . '<input type="radio" name="' . $name . '" id="' . $id_text . $k . '" value="' . $k . '" ' . $extra . ' '				. $attribs . '>' . $t;			$html .= "\n\t" . '</label>';		}		$html .= '</div>';		$html .= "\n";		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags view class for the Tags package. * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JControllerLegacy  This object to support chaining.	 *	 * @since   3.1	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/tags.php';		$view   = $this->input->get('view', 'tags');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'tag' && $layout == 'edit' && !$this->checkEditId('com_tags.edit.tag', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_tags&view=tags', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  UCM * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * UCM Class for handling content types * * @package     Joomla.Libraries * @subpackage  UCM * @since       3.1 */class JUcmType implements JUcm{	/**	 * The UCM Type	 *	 * @var    JUcmType	 * @since  3.1	 */	public $type;	/**	* The Database object	*	* @var    JDatabaseDriver	* @since  3.1	*/	protected $db;	/**	* The alias for the content type	*	* @var	  string	* @since  3.1	*/	protected $alias;	/**	 * @param  string            $alias        The alias for the item	 * @param  JDatabaseDriver   $database     The database object	 * @param  JApplicationBase  $application  The application object	 */	public function __construct($alias = null, JDatabaseDriver $database = null, JApplicationBase $application = null)	{		$this->db = $database ? $database : JFactory::getDbo();		$app      = $application ? $application : JFactory::getApplication();		// Make the best guess we can in the absence of information.		$this->alias = $alias ? $alias : $app->input->get('option') . '.' . $app->input->get('view');		$this->type  = $this->getType();	}	/**	* Get the Content Type	*	* @param   integer  $pk  The primary key of the alias type	*	* @return  object  The UCM Type data	*	* @since   3.1	*/	public function getType($pk = null)	{		if (!$pk)		{			$pk = $this->getTypeId();		}		$query	= $this->db->getQuery(true);		$query->select('ct.*');		$query->from($this->db->quoteName('#__content_types', 'ct'));		$query->where($this->db->quoteName('ct.type_id') . ' = ' . (int) $pk);		$this->db->setQuery($query);		$type = $this->db->loadObject();		return $type;	}	/**	 * Retrieves the UCM type ID	 *	 * @param   string  $alias  The string of the type alias	 *	 * @return  integer  The ID of the requested type	 *	 * @since   3.1	 */	public function getTypeId($alias = null)	{		if (!$alias)		{			$alias = $this->alias;		}		$query = $this->db->getQuery(true);		$query->select('ct.type_id');		$query->from($this->db->quoteName('#__content_types', 'ct'));		$query->where($this->db->quoteName('ct.type_alias') . ' = ' . $this->db->q($alias));		$this->db->setQuery($query);		$id = $this->db->loadResult();		return $id;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');// Create shortcut to parameters.$params = $this->state->get('params');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'weblink.cancel' || document.formvalidator.isValid(document.id('adminForm')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task);		}	}</script><div class="edit<?php echo $this->pageclass_sfx; ?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_weblinks&view=form&w_id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate form-vertical">		<div class="btn-toolbar">			<div class="btn-group">				<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('weblink.save')">					<i class="icon-ok"></i> <?php echo JText::_('JSAVE') ?>				</button>			</div>			<div class="btn-group">				<button type="button" class="btn" onclick="Joomla.submitbutton('weblink.cancel')">					<i class="icon-cancel"></i> <?php echo JText::_('JCANCEL') ?>				</button>			</div>		</div>		<hr class="hr-condensed" />		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('title'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('title'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('alias'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('alias'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('catid'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('catid'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('url'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('url'); ?>			</div>		</div>		<?php if ($this->user->authorise('core.edit.state', 'com_weblinks.weblink')) : ?>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>		<?php endif; ?>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('language'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('language'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('description'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('description'); ?>			</div>		</div>		<input type="hidden" name="return" value="<?php echo $this->return_page;?>" />		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	$fieldSets = $this->form->getFieldsets('request');	if (!empty($fieldSets))	{		$fieldSet = array_shift($fieldSets);		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$fieldSet->name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), 'request-options');		if (isset($fieldSet->description) && trim($fieldSet->description)) :			echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';		endif;	?>		<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_($label) ?></legend>			<?php $hidden_fields = ''; ?>			<ul class="adminformlist">				<?php foreach ($this->form->getFieldset('request') as $field) : ?>				<?php if (!$field->hidden) : ?>				<li>					<?php echo $field->label; ?>					<?php echo $field->input; ?>				</li>				<?php else : $hidden_fields .= $field->input; ?>				<?php endif; ?>				<?php endforeach; ?>			</ul>			<?php echo $hidden_fields; ?>		</fieldset><?php	}	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<div class="clr"></div>		<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_($label) ?></legend>			<ul class="adminformlist">				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>				<?php endforeach; ?>			</ul>		</fieldset><?php endforeach;?><?php	$fieldSets = $this->form->getFieldsets('associations');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<div class="clr"></div>		<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_($label) ?></legend>			<ul class="adminformlist">				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>				<?php endforeach; ?>			</ul>		</fieldset><?php endforeach;?>
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * INI format handler for JRegistry. * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistryFormatINI extends JRegistryFormat{	protected static $cache = array();	/**	 * Converts an object into an INI formatted string	 * -	Unfortunately, there is no way to have ini values nested further than two	 * levels deep.  Therefore we will only go through the first two levels of	 * the object.	 *	 * @param   object  $object   Data source object.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  string  INI formatted string.	 *	 * @since   11.1	 */	public function objectToString($object, $options = array())	{		$local = array();		$global = array();		// Iterate over the object to set the properties.		foreach (get_object_vars($object) as $key => $value)		{			// If the value is an object then we need to put it in a local section.			if (is_object($value))			{				// Add the section line.				$local[] = '';				$local[] = '[' . $key . ']';				// Add the properties for this section.				foreach (get_object_vars($value) as $k => $v)				{					$local[] = $k . '=' . $this->getValueAsINI($v);				}			}			else			{				// Not in a section so add the property to the global array.				$global[] = $key . '=' . $this->getValueAsINI($value);			}		}		return implode("\n", array_merge($global, $local));	}	/**	 * Parse an INI formatted string and convert it into an object.	 *	 * @param   string  $data     INI formatted string to convert.	 * @param   mixed   $options  An array of options used by the formatter, or a boolean setting to process sections.	 *	 * @return  object   Data object.	 *	 * @since   11.1	 */	public function stringToObject($data, array $options = array())	{		$sections = (isset($options['processSections'])) ? $options['processSections'] : false;		// Check the memory cache for already processed strings.		$hash = md5($data . ':' . (int) $sections);		if (isset(self::$cache[$hash]))		{			return self::$cache[$hash];		}		// If no lines present just return the object.		if (empty($data))		{			return new stdClass;		}		$obj = new stdClass;		$section = false;		$lines = explode("\n", $data);		// Process the lines.		foreach ($lines as $line)		{			// Trim any unnecessary whitespace.			$line = trim($line);			// Ignore empty lines and comments.			if (empty($line) || ($line{0} == ';'))			{				continue;			}			if ($sections)			{				$length = strlen($line);				// If we are processing sections and the line is a section add the object and continue.				if (($line[0] == '[') && ($line[$length - 1] == ']'))				{					$section = substr($line, 1, $length - 2);					$obj->$section = new stdClass;					continue;				}			}			elseif ($line{0} == '[')			{				continue;			}			// Check that an equal sign exists and is not the first character of the line.			if (!strpos($line, '='))			{				// Maybe throw exception?				continue;			}			// Get the key and value for the line.			list ($key, $value) = explode('=', $line, 2);			// Validate the key.			if (preg_match('/[^A-Z0-9_]/i', $key))			{				// Maybe throw exception?				continue;			}			// If the value is quoted then we assume it is a string.			$length = strlen($value);			if ($length && ($value[0] == '"') && ($value[$length - 1] == '"'))			{				// Strip the quotes and Convert the new line characters.				$value = stripcslashes(substr($value, 1, ($length - 2)));				$value = str_replace('\n', "\n", $value);			}			else			{				// If the value is not quoted, we assume it is not a string.				// If the value is 'false' assume boolean false.				if ($value == 'false')				{					$value = false;				}				// If the value is 'true' assume boolean true.				elseif ($value == 'true')				{					$value = true;				}				// If the value is numeric than it is either a float or int.				elseif (is_numeric($value))				{					// If there is a period then we assume a float.					if (strpos($value, '.') !== false)					{						$value = (float) $value;					}					else					{						$value = (int) $value;					}				}			}			// If a section is set add the key/value to the section, otherwise top level.			if ($section)			{				$obj->$section->$key = $value;			}			else			{				$obj->$key = $value;			}		}		// Cache the string to save cpu cycles -- thus the world :)		self::$cache[$hash] = clone ($obj);		return $obj;	}	/**	 * Method to get a value in an INI format.	 *	 * @param   mixed  $value  The value to convert to INI format.	 *	 * @return  string  The value in INI format.	 *	 * @since   11.1	 */	protected function getValueAsINI($value)	{		$string = '';		switch (gettype($value))		{			case 'integer':			case 'double':				$string = $value;				break;			case 'boolean':				$string = $value ? 'true' : 'false';				break;			case 'string':				// Sanitize any CRLF characters..				$string = '"' . str_replace(array("\r\n", "\n"), '\\n', $value) . '"';				break;		}		return $string;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewLanguagesHtml $this */// Get version of Joomla! to compare it with the version of the language package$version = new JVersion;?><script type="text/javascript">	function installLanguages()	{		document.id(install_languages_desc).hide();		document.id(wait_installing).show();		document.id(wait_installing_spinner).show();		Install.submitform();	}</script><?php echo JHtml::_('installation.stepbarlanguages'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a				class="btn"				href="#"				onclick="return Install.goToPage('remove');"				rel="prev"				title="<?php echo JText::_('JPREVIOUS'); ?>">				<i class="icon-arrow-left"></i>				<?php echo JText::_('JPREVIOUS'); ?>			</a>			<a				class="btn btn-primary"				href="#"				onclick="installLanguages()"				rel="next"				title="<?php echo JText::_('JNEXT'); ?>">				<i class="icon-arrow-right icon-white"></i>				<?php echo JText::_('JNEXT'); ?>			</a>		</div>	</div>	<h3><?php echo JText::_('INSTL_LANGUAGES'); ?></h3>	<hr class="hr-condensed" />	<?php if (!$this->items) : ?>		<p><?php echo JText::_('INSTL_LANGUAGES_WARNING_NO_INTERNET') ?></p>		<p>			<a href="#"			class="btn btn-primary"			onclick="return Install.goToPage('remove');">			<i class="icon-arrow-left icon-white"></i>			<?php echo JText::_('INSTL_LANGUAGES_WARNING_BACK_BUTTON'); ?>			</a>		</p>		<p><?php echo JText::_('INSTL_LANGUAGES_WARNING_NO_INTERNET2') ?></p>	<?php else : ?>		<p id="install_languages_desc"><?php echo JText::_('INSTL_LANGUAGES_DESC'); ?></p>		<p id="wait_installing" style="display: none;">			<?php echo JText::_('INSTL_LANGUAGES_MESSAGE_PLEASE_WAIT') ?><br />			<div id="wait_installing_spinner" class="spinner spinner-img" style="display: none;"></div>		</p>	<table class="table table-striped table-condensed">			<thead>					<tr>						<th>							<?php echo JText::_('INSTL_LANGUAGES_COLUMN_HEADER_LANGUAGE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_LANGUAGES_COLUMN_HEADER_VERSION'); ?>						</th>					</tr>			</thead>			<tbody>				<?php foreach ($this->items as $i => $language) : ?>					<tr>						<td>							<label class="checkbox">								<input									type="checkbox"									id="cb<?php echo $i; ?>"									name="cid[]"									value="<?php echo $language->update_id; ?>"									/> <?php echo $language->name; ?>									<?php // Display a Note if language pack version is not equal to Joomla version ?>									<?php if (substr($language->version, 0, 3) != $version->RELEASE											|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>										<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>									<?php endif; ?>							</label>						</td>						<td>							<span class="badge"><?php echo $language->version; ?></span>						</td>					</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="InstallLanguages" />		<?php echo JHtml::_('form.token'); ?>	<?php endif; ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" ><head>	<link rel="stylesheet" href="templates/<?php echo  $this->template ?>/css/error.css" type="text/css" />	<!-- Load additional CSS styles for rtl sites --><?php if ($this->direction == 'rtl') : ?>	<link href="templates/<?php echo  $this->template ?>/css/template_rtl.css" rel="stylesheet" type="text/css" /><?php endif; ?></head><body class="errors">	<div>		<h1>			<?php echo $this->error->getCode() ?> - <?php echo JText::_('JERROR_AN_ERROR_HAS_OCCURRED') ?>		</h1>	</div>	<div>		<p><?php echo $this->error->getMessage(); ?></p>		<p><a href="index.php"><?php echo JText::_('JGLOBAL_TPL_CPANEL_LINK_TEXT') ?></a></p>		<?php if ($this->debug) :			echo $this->renderBacktrace();		endif; ?>	</div>	<div class="clr"></div>	<noscript>			<?php echo  JText::_('JGLOBAL_WARNJAVASCRIPT') ?>	</noscript></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Category Controller * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesControllerCategory extends JControllerForm{	/**	 * The extension for which the categories apply.	 *	 * @var    string	 * @since  1.6	 */	protected $extension;	/**	 * Constructor.	 *	 * @param  array  $config  An optional associative array of configuration settings.	 *	 * @since  1.6	 * @see    JController	 */	public function __construct($config = array())	{		parent::__construct($config);		// Guess the JText message prefix. Defaults to the option.		if (empty($this->extension))		{			$this->extension = $this->input->get('extension', 'com_content');		}	}	/**	 * Method to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		return ($user->authorise('core.create', $this->extension) || count($user->getAuthorisedCategories($this->extension, 'core.create')));	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'parent_id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$user = JFactory::getUser();		$userId = $user->get('id');		// Check general edit permission first.		if ($user->authorise('core.edit', $this->extension))		{			return true;		}		// Check specific edit permission.		if ($user->authorise('core.edit', $this->extension . '.category.' . $recordId))		{			return true;		}		// Fallback on edit.own.		// First test if the permission is available.		if ($user->authorise('core.edit.own', $this->extension . '.category.' . $recordId) || $user->authorise('core.edit.own', $this->extension))		{			// Now test the owner is the user.			$ownerId = (int) isset($data['created_user_id']) ? $data['created_user_id'] : 0;			if (empty($ownerId) && $recordId)			{				// Need to do a lookup from the model.				$record = $this->getModel()->getItem($recordId);				if (empty($record))				{					return false;				}				$ownerId = $record->created_user_id;			}			// If the owner matches 'me' then do the test.			if ($ownerId == $userId)			{				return true;			}		}		return false;	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   1.6	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Category');		// Preset the redirect		$this->setRedirect('index.php?option=com_categories&view=categories&extension=' . $this->extension);		return parent::batch($model);	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $urlVar    The name of the URL variable for the id.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = 'id')	{		$append = parent::getRedirectToItemAppend($recordId);		$append .= '&extension=' . $this->extension;		return $append;	}	/**	 * Gets the URL arguments to append to a list redirect.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToListAppend()	{		$append = parent::getRedirectToListAppend();		$append .= '&extension=' . $this->extension;		return $append;	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		$task = $this->getTask();		$item = $model->getItem();		if (isset($item->params) && is_array($item->params))		{			$registry = new JRegistry;			$registry->loadArray($item->params);			$item->params = (string) $registry;		}		if (isset($item->metadata) && is_array($item->metadata))		{			$registry = new JRegistry;			$registry->loadArray($item->metadata);			$item->metadata = (string) $registry;		}		$id = $item->id;		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_weblinks.category');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_weblinks&view=weblinks'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_WEBLINKS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_weblinks'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>            <label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="nowrap title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'weblinks.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th class="hits-col">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'a.ordering');			$item->cat_link	= JRoute::_('index.php?option=com_categories&extension=com_weblinks&task=edit&type=other&cid[]=' . $item->catid);			$canCreate  = $user->authorise('core.create',     'com_weblinks.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_weblinks.category.' . $item->catid);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_weblinks.category.' . $item->catid) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'weblinks.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_weblinks&task=weblink.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>							<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'weblinks.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'weblinks.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'weblinks.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'weblinks.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'weblinks.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $item->hits; ?>				</td>				<td class="center">					<?php if ($item->language == '*') : ?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table><?php echo $this->pagination->getListFooter(); ?>	<div class="clr"> </div>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('NewsfeedsHelper', JPATH_ADMINISTRATOR . '/components/com_newsfeeds/helpers/newsfeeds.php');/** * Utility class for creating HTML Grids * * @static * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.5 */class JHtmlNewsfeed{	/**	 * Get the associated language flags	 *	 * @param   int  $newsfeedid  The item id to search associations	 *	 * @return  string  The language HTML	 */	public static function association($newsfeedid)	{		// Defaults		$html = '';		// Get the associations		if ($associations = JLanguageAssociations::getAssociations('com_newsfeeds', '#__newsfeeds', 'com_newsfeeds.item', $newsfeedid))		{			foreach ($associations as $tag => $associated)			{				$associations[$tag] = (int) $associated->id;			}			// Get the associated newsfeed items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('c.*')				->from('#__newsfeeds as c')				->select('cat.title as category_title')				->join('LEFT', '#__categories as cat ON cat.id=c.catid')				->where('c.id IN (' . implode(',', array_values($associations)) . ')')				->join('LEFT', '#__languages as l ON c.language=l.lang_code')				->select('l.image')				->select('l.title as language_title');			$db->setQuery($query);			try			{				$items = $db->loadObjectList('id');			}			catch (runtimeException $e)			{				throw new Exception($e->getMessage(), 500);				return false;			}			$tags = array();			// Construct html			foreach ($associations as $tag => $associated)			{				if ($associated != $newsfeedid)				{					$tags[] = JText::sprintf('COM_NEWSFEEDS_TIP_ASSOCIATED_LANGUAGE',						JHtml::_('image', 'mod_languages/' . $items[$associated]->image . '.gif',							$items[$associated]->language_title,							array('title' => $items[$associated]->language_title),							true						),						$items[$associated]->name, $items[$associated]->category_title					);				}			}			$html = JHtml::_('tooltip', implode('<br />', $tags), JText::_('COM_NEWSFEEDS_TIP_ASSOCIATION'), 'admin/icon-16-links.png');		}		return $html;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Model class for handling lists of items. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */class JModelList extends JModelLegacy{	/**	 * Internal memory based cache array of data.	 *	 * @var    array	 * @since  12.2	 */	protected $cache = array();	/**	 * Context string for the model type.  This is used to handle uniqueness	 * when dealing with the getStoreId() method and caching data structures.	 *	 * @var    string	 * @since  12.2	 */	protected $context = null;	/**	 * Valid filter fields or ordering.	 *	 * @var    array	 * @since  12.2	 */	protected $filter_fields = array();	/**	 * An internal cache for the last query used.	 *	 * @var    JDatabaseQuery	 * @since  12.2	 */	protected $query = array();	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JModelLegacy	 * @since   12.2	 */	public function __construct($config = array())	{		parent::__construct($config);		// Add the ordering filtering fields white list.		if (isset($config['filter_fields']))		{			$this->filter_fields = $config['filter_fields'];		}		// Guess the context as Option.ModelName.		if (empty($this->context))		{			$this->context = strtolower($this->option . '.' . $this->getName());		}	}	/**	 * Method to cache the last query constructed.	 *	 * This method ensures that the query is constructed only once for a given state of the model.	 *	 * @return  JDatabaseQuery  A JDatabaseQuery object	 *	 * @since   12.2	 */	protected function _getListQuery()	{		// Capture the last store id used.		static $lastStoreId;		// Compute the current store id.		$currentStoreId = $this->getStoreId();		// If the last store id is different from the current, refresh the query.		if ($lastStoreId != $currentStoreId || empty($this->query))		{			$lastStoreId = $currentStoreId;			$this->query = $this->getListQuery();		}		return $this->query;	}	/**	 * Method to get an array of data items.	 *	 * @return  mixed  An array of data items on success, false on failure.	 *	 * @since   12.2	 */	public function getItems()	{		// Get a storage key.		$store = $this->getStoreId();		// Try to load the data from internal storage.		if (isset($this->cache[$store]))		{			return $this->cache[$store];		}		// Load the list items.		$query = $this->_getListQuery();		try		{			$items = $this->_getList($query, $this->getStart(), $this->getState('list.limit'));		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Add the items to the internal cache.		$this->cache[$store] = $items;		return $this->cache[$store];	}	/**	 * Method to get a JDatabaseQuery object for retrieving the data set from a database.	 *	 * @return  JDatabaseQuery   A JDatabaseQuery object to retrieve the data set.	 *	 * @since   12.2	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		return $query;	}	/**	 * Method to get a JPagination object for the data set.	 *	 * @return  JPagination  A JPagination object for the data set.	 *	 * @since   12.2	 */	public function getPagination()	{		// Get a storage key.		$store = $this->getStoreId('getPagination');		// Try to load the data from internal storage.		if (isset($this->cache[$store]))		{			return $this->cache[$store];		}		// Create the pagination object.		$limit = (int) $this->getState('list.limit') - (int) $this->getState('list.links');		$page = new JPagination($this->getTotal(), $this->getStart(), $limit);		// Add the object to the internal cache.		$this->cache[$store] = $page;		return $this->cache[$store];	}	/**	 * Method to get a store id based on the model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  An identifier string to generate the store id.	 *	 * @return  string  A store id.	 *	 * @since   12.2	 */	protected function getStoreId($id = '')	{		// Add the list state to the store id.		$id .= ':' . $this->getState('list.start');		$id .= ':' . $this->getState('list.limit');		$id .= ':' . $this->getState('list.ordering');		$id .= ':' . $this->getState('list.direction');		return md5($this->context . ':' . $id);	}	/**	 * Method to get the total number of items for the data set.	 *	 * @return  integer  The total number of items available in the data set.	 *	 * @since   12.2	 */	public function getTotal()	{		// Get a storage key.		$store = $this->getStoreId('getTotal');		// Try to load the data from internal storage.		if (isset($this->cache[$store]))		{			return $this->cache[$store];		}		// Load the total.		$query = $this->_getListQuery();		try		{			$total = (int) $this->_getListCount($query);		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Add the total to the internal cache.		$this->cache[$store] = $total;		return $this->cache[$store];	}	/**	 * Method to get the starting number of items for the data set.	 *	 * @return  integer  The starting number of items available in the data set.	 *	 * @since   12.2	 */	public function getStart()	{		$store = $this->getStoreId('getstart');		// Try to load the data from internal storage.		if (isset($this->cache[$store]))		{			return $this->cache[$store];		}		$start = $this->getState('list.start');		$limit = $this->getState('list.limit');		$total = $this->getTotal();		if ($start > $total - $limit)		{			$start = max(0, (int) (ceil($total / $limit) - 1) * $limit);		}		// Add the total to the internal cache.		$this->cache[$store] = $start;		return $this->cache[$store];	}	/**	 * Method to auto-populate the model state.	 *	 * This method should only be called once per instantiation and is designed	 * to be called on the first call to the getState() method unless the model	 * configuration flag to ignore the request is set.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   12.2	 */	protected function populateState($ordering = null, $direction = null)	{		// If the context is set, assume that stateful lists are used.		if ($this->context)		{			$app = JFactory::getApplication();			$value = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');			$limit = $value;			$this->setState('list.limit', $limit);			$value = $app->getUserStateFromRequest($this->context . '.limitstart', 'limitstart', 0);			$limitstart = ($limit != 0 ? (floor($value / $limit) * $limit) : 0);			$this->setState('list.start', $limitstart);			// Check if the ordering field is in the white list, otherwise use the incoming value.			$value = $app->getUserStateFromRequest($this->context . '.ordercol', 'filter_order', $ordering);			if (!in_array($value, $this->filter_fields))			{				$value = $ordering;				$app->setUserState($this->context . '.ordercol', $value);			}			$this->setState('list.ordering', $value);			// Check if the ordering direction is valid, otherwise use the incoming value.			$value = $app->getUserStateFromRequest($this->context . '.orderdirn', 'filter_order_Dir', $direction);			if (!in_array(strtoupper($value), array('ASC', 'DESC', '')))			{				$value = $direction;				$app->setUserState($this->context . '.orderdirn', $value);			}			$this->setState('list.direction', $value);		}		else		{			$this->setState('list.start', 0);			$this->state->set('list.limit', 0);		}	}	/**	 * Gets the value of a user state variable and sets it in the session	 *	 * This is the same as the method in JApplication except that this also can optionally	 * force you back to the first page when a filter has changed	 *	 * @param   string   $key        The key of the user state variable.	 * @param   string   $request    The name of the variable passed in a request.	 * @param   string   $default    The default value for the variable if not found. Optional.	 * @param   string   $type       Filter for the variable, for valid values see {@link JFilterInput::clean()}. Optional.	 * @param   boolean  $resetPage  If true, the limitstart in request is set to zero	 *	 * @return  The request user state.	 *	 * @since   12.2	 */	public function getUserStateFromRequest($key, $request, $default = null, $type = 'none', $resetPage = true)	{		$app = JFactory::getApplication();		$input     = $app->input;		$old_state = $app->getUserState($key);		$cur_state = (!is_null($old_state)) ? $old_state : $default;		$new_state = $input->get($request, null, $type);		if (($cur_state != $new_state) && ($resetPage))		{			$input->set('limitstart', 0);		}		// Save the new value only if it is set in this request.		if ($new_state !== null)		{			$app->setUserState($key, $new_state);		}		else		{			$new_state = $cur_state;		}		return $new_state;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * marker_class: Class based on the selection of text, none, or icons * jicon-text, jicon-none, jicon-icon */?><dl class="contact-address dl-horizontal">	<?php if (($this->params->get('address_check') > 0) &&		($this->contact->address || $this->contact->suburb  || $this->contact->state || $this->contact->country || $this->contact->postcode)) : ?>		<?php if ($this->params->get('address_check') > 0) : ?>			<dt>				<span class="<?php echo $this->params->get('marker_class'); ?>" >					<?php echo $this->params->get('marker_address'); ?>				</span>			</dt>		<?php endif; ?>		<?php if ($this->contact->address && $this->params->get('show_street_address')) : ?>			<dd>				<span class="contact-street">					<?php echo $this->contact->address .'<br/>'; ?>				</span>			</dd>		<?php endif; ?>		<?php if ($this->contact->suburb && $this->params->get('show_suburb')) : ?>			<dd>				<span class="contact-suburb">					<?php echo $this->contact->suburb .'<br/>'; ?>				</span>			</dd>		<?php endif; ?>		<?php if ($this->contact->state && $this->params->get('show_state')) : ?>			<dd>				<span class="contact-state">					<?php echo $this->contact->state . '<br/>'; ?>				</span>			</dd>		<?php endif; ?>		<?php if ($this->contact->postcode && $this->params->get('show_postcode')) : ?>			<dd>				<span class="contact-postcode">					<?php echo $this->contact->postcode .'<br/>'; ?>				</span>			</dd>		<?php endif; ?>		<?php if ($this->contact->country && $this->params->get('show_country')) : ?>		<dd>			<span class="contact-country">				<?php echo $this->contact->country .'<br/>'; ?>			</span>		</dd>		<?php endif; ?>	<?php endif; ?><?php if ($this->contact->email_to && $this->params->get('show_email')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo nl2br($this->params->get('marker_email')); ?>		</span>	</dt>	<dd>		<span class="contact-emailto">			<?php echo $this->contact->email_to; ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->telephone && $this->params->get('show_telephone')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_telephone'); ?>		</span>	</dt>	<dd>		<span class="contact-telephone">			<?php echo nl2br($this->contact->telephone); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->fax && $this->params->get('show_fax')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_fax'); ?>		</span>	</dt>	<dd>		<span class="contact-fax">		<?php echo nl2br($this->contact->fax); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->mobile && $this->params->get('show_mobile')) :?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_mobile'); ?>		</span>	</dt>	<dd>		<span class="contact-mobile">			<?php echo nl2br($this->contact->mobile); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->webpage && $this->params->get('show_webpage')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >		</span>	</dt>	<dd>		<span class="contact-webpage">			<a href="<?php echo $this->contact->webpage; ?>" target="_blank">			<?php echo $this->contact->webpage; ?></a>		</span>	</dd><?php endif; ?></dl>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelTracks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'name', 'b.name',				'cl.name', 'client_name',				'cat.title', 'category_title',				'track_type', 'a.track_type',				'count', 'a.count',				'track_date', 'a.track_date',			);		}		parent::__construct($config);	}	/**	 * @since   1.6	 */	protected $basename;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$type = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type');		$this->setState('filter.type', $type);		$begin = $this->getUserStateFromRequest($this->context . '.filter.begin', 'filter_begin', '', 'string');		$this->setState('filter.begin', $begin);		$end = $this->getUserStateFromRequest($this->context . '.filter.end', 'filter_end', '', 'string');		$this->setState('filter.end', $end);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('b.name', 'asc');	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		require_once JPATH_COMPONENT . '/helpers/banners.php';		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			'a.track_date as track_date,'				. 'a.track_type as track_type,'				. $db->quoteName('a.count') . ' as ' . $db->quoteName('count')		);		$query->from($db->quoteName('#__banner_tracks') . ' AS a');		// Join with the banners		$query->join('LEFT', $db->quoteName('#__banners') . ' as b ON b.id=a.banner_id')			->select('b.name as name');		// Join with the client		$query->join('LEFT', $db->quoteName('#__banner_clients') . ' as cl ON cl.id=b.cid')			->select('cl.name as client_name');		// Join with the category		$query->join('LEFT', $db->quoteName('#__categories') . ' as cat ON cat.id=b.catid')			->select('cat.title as category_title');		// Filter by type		$type = $this->getState('filter.type');		if (!empty($type))		{			$query->where('a.track_type = ' . (int) $type);		}		// Filter by client		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('b.cid = ' . (int) $clientId);		}		// Filter by category		$catedoryId = $this->getState('filter.category_id');		if (is_numeric($catedoryId))		{			$query->where('b.catid = ' . (int) $catedoryId);		}		// Filter by begin date		$begin = $this->getState('filter.begin');		if (!empty($begin))		{			$query->where('a.track_date >= ' . $db->quote($begin));		}		// Filter by end date		$end = $this->getState('filter.end');		if (!empty($end))		{			$query->where('a.track_date <= ' . $db->quote($end));		}		// Add the list ordering clause.		$orderCol = $this->getState('list.ordering', 'name');		$query->order($db->escape($orderCol) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to delete rows.	 *	 * @param   array  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 */	public function delete()	{		$user = JFactory::getUser();		$categoryId = $this->getState('category_id');		// Access checks.		if ($categoryId)		{			$allow = $user->authorise('core.delete', 'com_banners.category.' . (int) $categoryId);		}		else		{			$allow = $user->authorise('core.delete', 'com_banners');		}		if ($allow)		{			// Delete tracks from this banner			$db = $this->getDbo();			$query = $db->getQuery(true)				->delete($db->quoteName('#__banner_tracks'));			// Filter by type			$type = $this->getState('filter.type');			if (!empty($type))			{				$query->where('track_type = ' . (int) $type);			}			// Filter by begin date			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$query->where('track_date >= ' . $db->quote($begin));			}			// Filter by end date			$end = $this->getState('filter.end');			if (!empty($end))			{				$query->where('track_date <= ' . $db->quote($end));			}			$where = '1';			// Filter by client			$clientId = $this->getState('filter.client_id');			if (!empty($clientId))			{				$where .= ' AND cid = ' . (int) $clientId;			}			// Filter by category			if (!empty($categoryId))			{				$where .= ' AND catid = ' . (int) $categoryId;			}			$query->where('banner_id IN (SELECT id FROM ' . $db->quoteName('#__banners') . ' WHERE ' . $where . ')');			$db->setQuery($query);			$this->setError((string) $query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));		}		return true;	}	/**	 * Get file name	 *	 * @return  string    The file name	 * @since   1.6	 */	public function getBaseName()	{		if (!isset($this->basename))		{			$app = JFactory::getApplication();			$basename = $this->getState('basename');			$basename = str_replace('__SITE__', $app->getCfg('sitename'), $basename);			$categoryId = $this->getState('filter.category_id');			if (is_numeric($categoryId))			{				if ($categoryId > 0)				{					$basename = str_replace('__CATID__', $categoryId, $basename);				}				else				{					$basename = str_replace('__CATID__', '', $basename);				}				$categoryName = $this->getCategoryName();				$basename = str_replace('__CATNAME__', $categoryName, $basename);			}			else			{				$basename = str_replace('__CATID__', '', $basename);				$basename = str_replace('__CATNAME__', '', $basename);			}			$clientId = $this->getState('filter.client_id');			if (is_numeric($clientId))			{				if ($clientId > 0)				{					$basename = str_replace('__CLIENTID__', $clientId, $basename);				}				else				{					$basename = str_replace('__CLIENTID__', '', $basename);				}				$clientName = $this->getClientName();				$basename = str_replace('__CLIENTNAME__', $clientName, $basename);			}			else			{				$basename = str_replace('__CLIENTID__', '', $basename);				$basename = str_replace('__CLIENTNAME__', '', $basename);			}			$type = $this->getState('filter.type');			if ($type > 0)			{				$basename = str_replace('__TYPE__', $type, $basename);				$typeName = JText::_('COM_BANNERS_TYPE' . $type);				$basename = str_replace('__TYPENAME__', $typeName, $basename);			}			else			{				$basename = str_replace('__TYPE__', '', $basename);				$basename = str_replace('__TYPENAME__', '', $basename);			}			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$basename = str_replace('__BEGIN__', $begin, $basename);			}			else			{				$basename = str_replace('__BEGIN__', '', $basename);			}			$end = $this->getState('filter.end');			if (!empty($end))			{				$basename = str_replace('__END__', $end, $basename);			}			else			{				$basename = str_replace('__END__', '', $basename);			}			$this->basename = $basename;		}		return $this->basename;	}	/**	 * Get the category name.	 *	 * @return  string    The category name	 * @since   1.6	 */	protected function getCategoryName()	{		$categoryId = $this->getState('filter.category_id');		if ($categoryId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('title')				->from($db->quoteName('#__categories'))				->where($db->quoteName('id') . '=' . $db->quote($categoryId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCATEGORYNAME');		}		return $name;	}	/**	 * Get the category name	 *	 * @return  string    The category name.	 * @since   1.6	 */	protected function getClientName()	{		$clientId = $this->getState('filter.client_id');		if ($clientId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('name')				->from($db->quoteName('#__banner_clients'))				->where($db->quoteName('id') . '=' . $db->quote($clientId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCLIENTNAME');		}		return $name;	}	/**	 * Get the file type.	 *	 * @return  string    The file type	 * @since   1.6	 */	public function getFileType()	{		return $this->getState('compressed') ? 'zip' : 'csv';	}	/**	 * Get the mime type.	 *	 * @return  string    The mime type.	 * @since   1.6	 */	public function getMimeType()	{		return $this->getState('compressed') ? 'application/zip' : 'text/csv';	}	/**	 * Get the content	 *	 * @return  string    The content.	 * @since   1.6	 */	public function getContent()	{		if (!isset($this->content))		{			$this->content = '';			$this->content .=				'"' . str_replace('"', '""', JText::_('COM_BANNERS_HEADING_NAME')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_CLIENT')) . '","' .					str_replace('"', '""', JText::_('JCATEGORY')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_TYPE')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_COUNT')) . '","' .					str_replace('"', '""', JText::_('JDATE')) . '"' . "\n";			foreach ($this->getItems() as $item)			{				$this->content .=					'"' . str_replace('"', '""', $item->name) . '","' .						str_replace('"', '""', $item->client_name) . '","' .						str_replace('"', '""', $item->category_title) . '","' .						str_replace('"', '""', ($item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION') : JText::_('COM_BANNERS_CLICK'))) . '","' .						str_replace('"', '""', $item->count) . '","' .						str_replace('"', '""', $item->track_date) . '"' . "\n";			}			if ($this->getState('compressed'))			{				$app = JFactory::getApplication('administrator');				$files = array();				$files['track'] = array();				$files['track']['name'] = $this->getBasename() . '.csv';				$files['track']['data'] = $this->content;				$files['track']['time'] = time();				$ziproot = $app->getCfg('tmp_path') . '/' . uniqid('banners_tracks_') . '.zip';				// run the packager				jimport('joomla.filesystem.folder');				jimport('joomla.filesystem.file');				$delete = JFolder::files($app->getCfg('tmp_path') . '/', uniqid('banners_tracks_'), false, true);				if (!empty($delete))				{					if (!JFile::delete($delete))					{						// JFile::delete throws an error						$this->setError(JText::_('COM_BANNERS_ERR_ZIP_DELETE_FAILURE'));						return false;					}				}				if (!$packager = JArchive::getAdapter('zip'))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_ADAPTER_FAILURE'));					return false;				}				elseif (!$packager->create($ziproot, $files))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_CREATE_FAILURE'));					return false;				}				$this->content = file_get_contents($ziproot);			}		}		return $this->content;	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */// Set the platform root path as a constant if necessary.if (!defined('JPATH_PLATFORM')){	define('JPATH_PLATFORM', __DIR__);}// Detect the native operating system type.$os = strtoupper(substr(PHP_OS, 0, 3));if (!defined('IS_WIN')){	define('IS_WIN', ($os === 'WIN') ? true : false);}if (!defined('IS_UNIX')){	define('IS_UNIX', (($os !== 'MAC') && ($os !== 'WIN')) ? true : false);}/** * @deprecated 13.3	Use IS_UNIX instead */if (!defined('IS_MAC')){	define('IS_MAC', (IS_UNIX === true && ($os === 'DAR' || $os === 'MAC')) ? true : false);}// Import the platform version library if necessary.if (!class_exists('JPlatform')){	require_once JPATH_PLATFORM . '/platform.php';}// Import the library loader if necessary.if (!class_exists('JLoader')){	require_once JPATH_PLATFORM . '/loader.php';}class_exists('JLoader') or die;// Setup the autoloaders.JLoader::setup();// Register the legacy library base path for deprecated or legacy libraries.JLoader::registerPrefix('J', JPATH_PLATFORM . '/legacy');// Import the Joomla Factory.JLoader::import('joomla.factory');// Register classes that don't follow one file per class naming conventions.JLoader::register('JText', JPATH_PLATFORM . '/joomla/language/text.php');JLoader::register('JRoute', JPATH_PLATFORM . '/joomla/application/route.php');// Register the folder for the moved JHtml classesJHtml::addIncludePath(JPATH_PLATFORM . '/legacy/html');// Register classes for compatability with PHP 5.3if (version_compare(PHP_VERSION, '5.4.0', '<')){	JLoader::register('JsonSerializable', __DIR__ . '/compat/jsonserializable.php');}// Add deprecated constants// @deprecated 12.3define('JPATH_ISWIN', IS_WIN);define('JPATH_ISMAC', IS_MAC);// Register classes where the names have been changed to fit the autoloader rules// @deprecated  12.3JLoader::register('JSimpleCrypt', JPATH_PLATFORM . '/legacy/simplecrypt/simplecrypt.php');JLoader::register('JTree', JPATH_PLATFORM . '/legacy/base/tree.php');JLoader::register('JNode', JPATH_PLATFORM . '/legacy/base/node.php');JLoader::register('JObserver', JPATH_PLATFORM . '/legacy/base/observer.php');JLoader::register('JObservable', JPATH_PLATFORM . '/legacy/base/observable.php');JLoader::register('LogException', JPATH_PLATFORM . '/legacy/log/logexception.php');JLoader::register('JXMLElement', JPATH_PLATFORM . '/legacy/utilities/xmlelement.php');JLoader::register('JRule', JPATH_PLATFORM . '/legacy/access/rule.php');JLoader::register('JRules', JPATH_PLATFORM . '/legacy/access/rules.php');JLoader::register('JCli', JPATH_PLATFORM . '/legacy/application/cli.php');JLoader::register('JDaemon', JPATH_PLATFORM . '/legacy/application/daemon.php');JLoader::register('JApplication', JPATH_LIBRARIES . '/legacy/application/application.php');
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Color Form Field class for the Joomla Platform. * This implementation is designed to be compatible with HTML5's <input type="color"> * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.color.html * @since       11.3 */class JFormFieldColor extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.3	 */	protected $type = 'Color';	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.3	 */	protected function getInput()	{		// Control value can be: hue (default), saturation, brightness, wheel or simpel		$control = (string) $this->element['control'];		// Position of the panel can be: right (default), left, top or bottom		$position = $this->element['position'] ? (string) $this->element['position'] : 'right';		$position = ' data-position="' . $position . '"';		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		$class = (string) $this->element['class'];		$color = strtolower($this->value);		if (!$color || in_array($color, array('none', 'transparent')))		{			$color = 'none';		}		elseif ($color['0'] != '#')		{			$color = '#' . $color;		}		if ($control == 'simple')		{			$class = ' class="' . trim('simplecolors chzn-done ' . $class) . '"';			JHtml::_('behavior.simplecolorpicker');			$colors = (string) $this->element['colors'];			if (empty($colors))			{				$colors = array(					'none',					'#049cdb',					'#46a546',					'#9d261d',					'#ffc40d',					'#f89406',					'#c3325f',					'#7a43b6',					'#FFFFFF',					'#999999',					'#555555',					'#000000'				);			}			else			{				$colors = explode(',', $colors);			}			$split = (int) $this->element['split'];			if (!$split)			{				$count = count($colors);				if ($count % 5 == 0)				{					$split = 5;				}				else				{					if ($count % 4 == 0)					{						$split = 4;					}				}			}			$split = $split ? $split : 3;			$html = array();			$html[] = '<select name="' . $this->name . '" id="' . $this->id . '"'				. $class . $position . $onchange . ' style="visibility:hidden;width:22px;height:1px">';			foreach ($colors as $i => $c)			{				$html[] = '<option' . ($c == $color ? ' selected="selected"' : '') . '>' . $c . '</option>';				if (($i + 1) % $split == 0)				{					$html[] = '<option>-</option>';				}			}			$html[] = '</select>';			return implode('', $html);		}		else		{			$class = ' class="' . trim('minicolors ' . $class) . '"';			$control = $control ? ' data-control="' . $control . '"' : '';			$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';			JHtml::_('behavior.colorpicker');			return '<input type="text" name="' . $this->name . '" id="' . $this->id . '"' . ' value="'				. htmlspecialchars($color, ENT_COMPAT, 'UTF-8') . '"' . $class . $position . $control . $disabled . $onchange . '/>';		}	}}
<?php/** * @package    Joomla.Site * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Application class * * Provide many supporting API functions * * @package     Joomla.Site * @subpackage  Application * @since       1.5 */final class JSite extends JApplication{	/**	 * Currently active template	 * @var object	 */	private $template = null;	/**	 * Option to filter by language	 */	private $_language_filter = false;	/**	 * Option to detect language by the browser	 */	private $_detect_browser = false;	/**	 * Class constructor	 *	 * @param   array An optional associative array of configuration settings.	 *                Recognized key values include 'clientId' (this list is not meant to be comprehensive).	 */	public function __construct($config = array())	{		$config['clientId'] = 0;		parent::__construct($config);	}	/**	 * Initialise the application.	 *	 * @param   array	 */	public function initialise($options = array())	{		$config = JFactory::getConfig();		$user = JFactory::getUser();		// If the user is a guest we populate it with the guest user group.		if ($user->guest)		{			$guestUsergroup = JComponentHelper::getParams('com_users')->get('guest_usergroup', 1);			$user->groups = array($guestUsergroup);		}		// if a language was specified it has priority		// otherwise use user or default language settings		JPluginHelper::importPlugin('system', 'languagefilter');		if (empty($options['language']))		{			$lang = $this->input->getString('language', null);			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if ($this->_language_filter && empty($options['language']))		{			// Detect cookie language			$lang = $this->input->getString(self::getHash('language'), null, 'cookie');			// Make sure that the user's language exists			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if (empty($options['language']))		{			// Detect user language			$lang = $user->getParam('language');			// Make sure that the user's language exists			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if ($this->_detect_browser && empty($options['language']))		{			// Detect browser language			$lang = JLanguageHelper::detectLanguage();			// Make sure that the user's language exists			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if (empty($options['language']))		{			// Detect default language			$params = JComponentHelper::getParams('com_languages');			$client = JApplicationHelper::getClientInfo($this->getClientId());			$options['language'] = $params->get($client->name, $config->get('language', 'en-GB'));		}		// One last check to make sure we have something		if (!JLanguage::exists($options['language']))		{			$lang = $config->get('language', 'en-GB');			if (JLanguage::exists($lang))			{				$options['language'] = $lang;			}			else			{				$options['language'] = 'en-GB'; // as a last ditch fail to english			}		}		// Execute the parent initialise method.		parent::initialise($options);		// Load Library language		$lang = JFactory::getLanguage();		// Try the lib_joomla file in the current language (without allowing the loading of the file in the default language)		$lang->load('lib_joomla', JPATH_SITE, null, false, false)			|| $lang->load('lib_joomla', JPATH_ADMINISTRATOR, null, false, false)			// Fallback to the lib_joomla file in the default language			|| $lang->load('lib_joomla', JPATH_SITE, null, true)			|| $lang->load('lib_joomla', JPATH_ADMINISTRATOR, null, true);	}	/**	 * Route the application.	 *	 */	public function route()	{		parent::route();		$Itemid = $this->input->getInt('Itemid');		$this->authorise($Itemid);	}	/**	 * Dispatch the application	 *	 * @param   string	 */	public function dispatch($component = null)	{		// Get the component if not set.		if (!$component)		{			$component = $this->input->get('option');		}		$document = JFactory::getDocument();		$user = JFactory::getUser();		$router = $this->getRouter();		$params = $this->getParams();		switch ($document->getType())		{			case 'html':				// Get language				$lang_code = JFactory::getLanguage()->getTag();				$languages = JLanguageHelper::getLanguages('lang_code');				// Set metadata				if (isset($languages[$lang_code]) && $languages[$lang_code]->metakey)				{					$document->setMetaData('keywords', $languages[$lang_code]->metakey);				}				else				{					$document->setMetaData('keywords', $this->getCfg('MetaKeys'));				}				$document->setMetaData('rights', $this->getCfg('MetaRights'));				if ($router->getMode() == JROUTER_MODE_SEF)				{					$document->setBase(htmlspecialchars(JURI::current()));				}				break;			case 'feed':				$document->setBase(htmlspecialchars(JURI::current()));				break;		}		$document->setTitle($params->get('page_title'));		$document->setDescription($params->get('page_description'));		// Add version number or not based on global configuration		if ($this->getCfg('MetaVersion', 0))		{			$document->setGenerator('Joomla! - Open Source Content Management  - Version ' . JVERSION);		}		else		{			$document->setGenerator('Joomla! - Open Source Content Management');		}		$contents = JComponentHelper::renderComponent($component);		$document->setBuffer($contents, 'component');		// Trigger the onAfterDispatch event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterDispatch');	}	/**	 * Display the application.	 */	public function render()	{		$document = JFactory::getDocument();		$user = JFactory::getUser();		// get the format to render		$format = $document->getType();		switch ($format)		{			case 'feed':				$params = array();				break;			case 'html':			default:				$template = $this->getTemplate(true);				$file = $this->input->get('tmpl', 'index');				if (!$this->getCfg('offline') && ($file == 'offline'))				{					$file = 'index';				}				if ($this->getCfg('offline') && !$user->authorise('core.login.offline'))				{					$uri = JURI::getInstance();					$return = (string) $uri;					$this->setUserState('users.login.form.data', array('return' => $return));					$file = 'offline';					JResponse::setHeader('Status', '503 Service Temporarily Unavailable', 'true');				}				if (!is_dir(JPATH_THEMES . '/' . $template->template) && !$this->getCfg('offline'))				{					$file = 'component';				}				$params = array(					'template' => $template->template,					'file' => $file . '.php',					'directory' => JPATH_THEMES,					'params' => $template->params				);				break;		}		// Parse the document.		$document = JFactory::getDocument();		$document->parse($params);		// Trigger the onBeforeRender event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onBeforeRender');		$caching = false;		if ($this->getCfg('caching') && $this->getCfg('caching', 2) == 2 && !$user->get('id'))		{			$caching = true;		}		// Render the document.		JResponse::setBody($document->render($caching, $params));		// Trigger the onAfterRender event.		$this->triggerEvent('onAfterRender');	}	/**	 * Login authentication function	 *	 * @param   array  Array('username' => string, 'password' => string)	 * @param   array  Array('remember' => boolean)	 *	 * @see JApplication::login	 */	public function login($credentials, $options = array())	{		// Set the application login entry point		if (!array_key_exists('entry_url', $options))		{			$options['entry_url'] = JURI::base() . 'index.php?option=com_users&task=user.login';		}		// Set the access control action to check.		$options['action'] = 'core.login.site';		return parent::login($credentials, $options);	}	/**	 * Check if the user can access the application	 */	public function authorise($itemid)	{		$menus = $this->getMenu();		$user = JFactory::getUser();		if (!$menus->authorise($itemid))		{			if ($user->get('id') == 0)			{				// Redirect to login				$uri = JURI::getInstance();				$return = (string) $uri;				$this->setUserState('users.login.form.data', array('return' => $return));				$url = 'index.php?option=com_users&view=login';				$url = JRoute::_($url, false);				$this->redirect($url, JText::_('JGLOBAL_YOU_MUST_LOGIN_FIRST'));			}			else			{				JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));			}		}	}	/**	 * Get the appliaction parameters	 *	 * @param   string    The component option	 * @return  object  The parameters object	 * @since   1.5	 */	public function getParams($option = null)	{		static $params = array();		$hash = '__default';		if (!empty($option))		{			$hash = $option;		}		if (!isset($params[$hash]))		{			// Get component parameters			if (!$option)			{				$option = $this->input->get('option');			}			// Get new instance of component global parameters			$params[$hash] = clone JComponentHelper::getParams($option);			// Get menu parameters			$menus = $this->getMenu();			$menu = $menus->getActive();			// Get language			$lang_code = JFactory::getLanguage()->getTag();			$languages = JLanguageHelper::getLanguages('lang_code');			$title = $this->getCfg('sitename');			if (isset($languages[$lang_code]) && $languages[$lang_code]->metadesc)			{				$description = $languages[$lang_code]->metadesc;			}			else			{				$description = $this->getCfg('MetaDesc');			}			$rights = $this->getCfg('MetaRights');			$robots = $this->getCfg('robots');			// Lets cascade the parameters if we have menu item parameters			if (is_object($menu))			{				$temp = new JRegistry;				$temp->loadString($menu->params);				$params[$hash]->merge($temp);				$title = $menu->title;			}			else			{				// get com_menu global settings				$temp = clone JComponentHelper::getParams('com_menus');				$params[$hash]->merge($temp);				// if supplied, use page title				$title = $temp->get('page_title', $title);			}			$params[$hash]->def('page_title', $title);			$params[$hash]->def('page_description', $description);			$params[$hash]->def('page_rights', $rights);			$params[$hash]->def('robots', $robots);		}		return $params[$hash];	}	/**	 * Get the application parameters	 *	 * @param   string    The component option	 *	 * @return  object  The parameters object	 * @since   1.5	 */	public function getPageParameters($option = null)	{		return $this->getParams($option);	}	/**	 * Get the template	 *	 * @return  string The template name	 * @since 1.0	 */	public function getTemplate($params = false)	{		if (is_object($this->template))		{			if (!file_exists(JPATH_THEMES . '/' . $this->template->template . '/index.php'))			{				throw new InvalidArgumentException(JText::sprintf('JERROR_COULD_NOT_FIND_TEMPLATE', $this->template->template));			}			if ($params)			{				return $this->template;			}			return $this->template->template;		}		// Get the id of the active menu item		$menu = $this->getMenu();		$item = $menu->getActive();		if (!$item)		{			$item = $menu->getItem($this->input->getInt('Itemid'));		}		$id = 0;		if (is_object($item))		{ // valid item retrieved			$id = $item->template_style_id;		}		$condition = '';		$tid = $this->input->get('templateStyle', 0, 'uint');		if (is_numeric($tid) && (int) $tid > 0)		{			$id = (int) $tid;		}		$cache = JFactory::getCache('com_templates', '');		if ($this->_language_filter)		{			$tag = JFactory::getLanguage()->getTag();		}		else		{			$tag = '';		}		if (!$templates = $cache->get('templates0' . $tag))		{			// Load styles			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('id, home, template, s.params')				->from('#__template_styles as s')				->where('s.client_id = 0')				->where('e.enabled = 1')				->join('LEFT', '#__extensions as e ON e.element=s.template AND e.type=' . $db->quote('template') . ' AND e.client_id=s.client_id');			$db->setQuery($query);			$templates = $db->loadObjectList('id');			foreach ($templates as &$template)			{				$registry = new JRegistry;				$registry->loadString($template->params);				$template->params = $registry;				// Create home element				//sqlsrv change				if ($template->home == 1 && !isset($templates[0]) || $this->_language_filter && $template->home == $tag)				{					$templates[0] = clone $template;				}			}			$cache->store($templates, 'templates0' . $tag);		}		if (isset($templates[$id]))		{			$template = $templates[$id];		}		else		{			$template = $templates[0];		}		// Allows for overriding the active template from the request		$template->template = $this->input->get('template', $template->template);		$template->template = JFilterInput::getInstance()->clean($template->template, 'cmd'); // need to filter the default value as well		// Fallback template		if (!file_exists(JPATH_THEMES . '/' . $template->template . '/index.php'))		{			$this->enqueueMessage(JText::_('JERROR_ALERTNOTEMPLATE'), 'error');			// try to find data for 'beez3' template			$original_tmpl = $template->template;			foreach ($templates as $tmpl)			{				if ($tmpl->template == 'beez3')				{					$template = $tmpl;					break;				}			}			// check, the data were found and if template really exists			if (!file_exists(JPATH_THEMES . '/' . $template->template . '/index.php'))			{				throw new InvalidArgumentException(JText::sprintf('JERROR_COULD_NOT_FIND_TEMPLATE', $original_tmpl));			}		}		$this->template = $template;		if ($params)		{			return $template;		}		return $template->template;	}	/**	 * Overrides the default template that would be used	 *	 * @param string       The template name	 * @param mixed        The template style parameters	 */	public function setTemplate($template, $styleParams = null)	{		if (is_dir(JPATH_THEMES . '/' . $template))		{			$this->template = new stdClass;			$this->template->template = $template;			if ($styleParams instanceof JRegistry)			{				$this->template->params = $styleParams;			}			else			{				$this->template->params = new JRegistry($styleParams);			}		}	}	/**	 * Return a reference to the JPathway object.	 *	 * @param   string    $name        The name of the application/client.	 * @param   array     $options     An optional associative array of configuration settings.	 *	 * @return  object  JMenu.	 * @since   1.5	 */	public function getMenu($name = null, $options = array())	{		$options = array();		$menu = parent::getMenu('site', $options);		return $menu;	}	/**	 * Return a reference to the JPathway object.	 *	 * @param   string    $name        The name of the application.	 * @param   array     $options     An optional associative array of configuration settings.	 *	 * @return  object JPathway.	 * @since   1.5	 */	public function getPathway($name = null, $options = array())	{		$options = array();		$pathway = parent::getPathway('site', $options);		return $pathway;	}	/**	 * Return a reference to the JRouter object.	 *	 * @param   string    $name        The name of the application.	 * @param   array     $options     An optional associative array of configuration settings.	 *	 * @return  JRouter	 * @since   1.5	 */	static public function getRouter($name = null, array $options = array())	{		$config = JFactory::getConfig();		$options['mode'] = $config->get('sef');		$router = parent::getRouter('site', $options);		return $router;	}	/**	 * Return the current state of the language filter.	 *	 * @return  boolean	 * @since   1.6	 */	public function getLanguageFilter()	{		return $this->_language_filter;	}	/**	 * Set the current state of the language filter.	 *	 * @return  boolean  The old state	 * @since   1.6	 */	public function setLanguageFilter($state = false)	{		$old = $this->_language_filter;		$this->_language_filter = $state;		return $old;	}	/**	 * Return the current state of the detect browser option.	 *	 * @return  boolean	 * @since   1.6	 */	public function getDetectBrowser()	{		return $this->_detect_browser;	}	/**	 * Set the current state of the detect browser option.	 *	 * @return  boolean  The old state	 * @since   1.6	 */	public function setDetectBrowser($state = false)	{		$old = $this->_detect_browser;		$this->_detect_browser = $state;		return $old;	}	/**	 * Redirect to another URL.	 *	 * Optionally enqueues a message in the system message queue (which will be displayed	 * the next time a page is loaded) using the enqueueMessage method. If the headers have	 * not been sent the redirect will be accomplished using a "301 Moved Permanently"	 * code in the header pointing to the new location. If the headers have already been	 * sent this will be accomplished using a JavaScript statement.	 *	 * @param   string     The URL to redirect to. Can only be http/https URL	 * @param   string     An optional message to display on redirect.	 * @param   string     An optional message type.	 * @param   boolean    True if the page is 301 Permanently Moved, otherwise 303 See Other is assumed.	 * @param   boolean    True if the enqueued messages are passed to the redirection, false else.	 * @return  none; calls exit().	 * @since   1.5	 * @see     JApplication::enqueueMessage()	 */	public function redirect($url, $msg = '', $msgType = 'message', $moved = false, $persistMsg = true)	{		if (!$persistMsg)		{			$this->_messageQueue = array();		}		parent::redirect($url, $msg, $msgType, $moved);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><div id="installer-discover">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=discover');?>" method="post" name="adminForm" id="adminForm">		<?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>    	<?php if ($this->showMessage) : ?>  		<?php echo $this->loadTemplate('message'); ?>  	<?php endif; ?>    	<?php if ($this->ftp) : ?>  		<?php echo $this->loadTemplate('ftp'); ?>  	<?php endif; ?>    	<!-- Begin Content -->  		<?php if (count($this->items)) : ?>  		<table class="table table-striped">  			<thead>  				<tr>  					<th width="20"><input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" /></th>  					<th class="nowrap"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?></th>  					<th class="center"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_TYPE', 'type', $listDirn, $listOrder); ?></th>  					<th width="10%" class="center"><?php echo JText::_('JVERSION'); ?></th>  					<th width="10%" class="center"><?php echo JText::_('JDATE'); ?></th>  					<th><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_FOLDER', 'folder', $listDirn, $listOrder); ?></th>  					<th><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_CLIENT', 'client_id', $listDirn, $listOrder); ?></th>  					<th width="15%" class="center"><?php echo JText::_('JAUTHOR'); ?></th>  					<th width="10"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'extension_id', $listDirn, $listOrder); ?></th>  				</tr>  			</thead>  			<tfoot><tr><td colspan="10"><?php echo $this->pagination->getListFooter(); ?></td></tr>  			</tfoot>  			<tbody>  			<?php foreach ($this->items as $i => $item) : ?>  				<tr class="row<?php echo $i % 2;?>">  					<td><?php echo JHtml::_('grid.id', $i, $item->extension_id); ?></td>  					<td><span class="bold hasTip" title="<?php echo htmlspecialchars($item->name.'::'.$item->description); ?>"><?php echo $item->name; ?></span></td>  					<td class="center"><?php echo JText::_('COM_INSTALLER_TYPE_' . $item->type); ?></td>  					<td class="center"><?php echo @$item->version != '' ? $item->version : '&#160;'; ?></td>  					<td class="center"><?php echo @$item->creationDate != '' ? $item->creationDate : '&#160;'; ?></td>  					<td class="center"><?php echo @$item->folder != '' ? $item->folder : JText::_('COM_INSTALLER_TYPE_NONAPPLICABLE'); ?></td>  					<td class="center"><?php echo $item->client; ?></td>  					<td class="center">  						<span class="editlinktip hasTip" title="<?php echo addslashes(htmlspecialchars(JText::_('COM_INSTALLER_AUTHOR_INFORMATION').'::'.$item->author_info)); ?>">  							<?php echo @$item->author != '' ? $item->author : '&#160;'; ?>  						</span>  					</td>  					<td><?php echo $item->extension_id ?></td>  				</tr>  			<?php endforeach; ?>  			</tbody>  		</table>  		<?php echo JText::_('COM_INSTALLER_MSG_DISCOVER_DESCRIPTION'); ?>  		<?php else : ?>  			<p>  				<?php echo JText::_('COM_INSTALLER_MSG_DISCOVER_DESCRIPTION'); ?>  			</p>  			<div class="alert">  				<?php echo JText::_('COM_INSTALLER_MSG_DISCOVER_NOEXTENSION'); ?>  			</div>  		<?php endif; ?>    		<input type="hidden" name="task" value="" />  		<input type="hidden" name="boxchecked" value="0" />  		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  		<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content component helper. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentHelper{	public static $extension = 'com_content';	/**	 * Configure the Linkbar.	 *	 * @param   string	$vName	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_ARTICLES'),			'index.php?option=com_content&view=articles',			$vName == 'articles'		);		JHtmlSidebar::addEntry(			JText::_('COM_CONTENT_SUBMENU_CATEGORIES'),			'index.php?option=com_categories&extension=com_content',			$vName == 'categories');		JHtmlSidebar::addEntry(			JText::_('COM_CONTENT_SUBMENU_FEATURED'),			'index.php?option=com_content&view=featured',			$vName == 'featured'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The category ID.	 * @param   integer  The article ID.	 *	 * @return  JObject	 * @since   1.6	 */	public static function getActions($categoryId = 0, $articleId = 0)	{		// Reverted a change for version 2.5.6		$user	= JFactory::getUser();		$result	= new JObject;		if (empty($articleId) && empty($categoryId))		{			$assetName = 'com_content';		}		elseif (empty($articleId))		{			$assetName = 'com_content.category.'.(int) $categoryId;		}		else		{			$assetName = 'com_content.article.'.(int) $articleId;		}		$actions = array(			'core.admin', 'core.manage', 'core.create', 'core.edit', 'core.edit.own', 'core.edit.state', 'core.delete'		);		foreach ($actions as $action)		{			$result->set($action,	$user->authorise($action, $assetName));		}		return $result;	}	/**	 * Applies the content tag filters to arbitrary text as per settings for current user group	 *	 * @param   text  $text  The string to filter	 *	 * @return  string  The filtered string	 *	 * @deprecated  4.0  Use JComponentHelper::filterText() instead.	*/	public static function filterText($text)	{		JLog::add('ContentHelper::filterText() is deprecated. Use JComponentHelper::filterText() instead.', JLog::WARNING, 'deprecated');		return JComponentHelper::filterText($text);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;// Load the base adapter.require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Tag. * * @package     Joomla.Plugin * @subpackage  Finder.Tags * @since       3.1 */class PlgFinderTags extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  3.1	 */	protected $context = 'Tags';	/**	 * The extension name.	 *	 * @var    string	 * @since  3.1	 */	protected $extension = 'com_tags';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  3.1	 */	protected $layout = 'tag';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  3.1	 */	protected $type_title = 'Tag';	/**	 * The table name.	 *	 * @var    string	 * @since  3.1	 */	protected $table = '#__tags';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  3.1	 */	protected $state_field = 'published';	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function onFinderAfterDelete($context, $table)	{		if ($context == 'com_tags.tag')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle tags here.		if ($context == 'com_tags.tag')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);			}			// Reindex the item			$this->reindex($row->id);		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle news feeds here		if ($context == 'com_tags.tag')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   3.1	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle tags here		if ($context == 'com_tags.tag')		{			$this->itemStateChange($pks, $value);		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = JComponentHelper::getParams('com_tags', true);		$item->params->merge($registry);		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $this->extension, $this->layout);		$item->route = TagsHelperRoute::getTagRoute($item->slug);		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Handle the link to the meta-data.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'link');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Tag');		// Add the author taxonomy data.		if (!empty($item->author) || !empty($item->created_by_alias))		{			$item->addTaxonomy('Author', !empty($item->created_by_alias) ? $item->created_by_alias : $item->author);		}		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	protected function setup()	{		// Load dependent classes.		require_once JPATH_SITE . '/components/com_tags/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   3.1	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.title, a.alias, a.description AS summary')			->select('a.created_time AS start_date, a.created_user_id AS created_by')			->select('a.metakey, a.metadesc, a.metadata, a.language, a.access')			->select('a.modified_time AS modified, a.modified_user_id AS modified_by')			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')			->select('a.published AS state, a.access, a.created_time AS start_date, a.params');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias)			->from('#__tags AS a');		// Join the #__users table		$query->select('u.name AS author')			->join('LEFT', '#__users AS u ON u.id = b.created_user_id')			->from('#__tags AS b');		// Exclude the ROOT item		$query->where($db->quoteName('a.id') . ' > 1');		return $query;	}	/**	 * Method to get a SQL query to load the published and access states for the given tag.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   3.1	 */	protected function getStateQuery()	{		$query = $this->db->getQuery(true);		$query->select($this->db->quoteName('a.id'))			->select($this->db->quoteName('a.' . $this->state_field, 'state') . ', ' . $this->db->quoteName('a.access'))			->select('NULL AS cat_state, NULL AS cat_access')			->from($this->db->quoteName($this->table, 'a'));		return $query;	}	/**	 * Method to get the query clause for getting items to update by time.	 *	 * @param   string  $time  The modified timestamp.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   3.1	 */	protected function getUpdateQueryByTime($time)	{		// Build an SQL query based on the modified time.		$query = $this->db->getQuery(true)			->where('a.date >= ' . $this->db->quote($time));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('InstallerModelInstall', JPATH_ADMINISTRATOR . '/components/com_installer/models/install.php');/** * Template style controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerTemplate extends JControllerLegacy{	/**	 */	public function cancel()	{		$this->setRedirect('index.php?option=com_templates&view=templates');	}	public function copy()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$this->input->set('installtype', 'folder');		$newName    = $this->input->get('new_name');		$newNameRaw = $this->input->get('new_name', null, 'string');		$templateID = $this->input->getInt('id', 0);		$this->setRedirect('index.php?option=com_templates&view=template&id=' . $templateID);		$model = $this->getModel('Template', 'TemplatesModel');		$model->setState('new_name', $newName);		$model->setState('tmp_prefix', uniqid('template_copy_'));		$model->setState('to_path', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));		// Process only if we have a new name entered		if (strlen($newName) > 0)		{			if (!JFactory::getUser()->authorise('core.create', 'com_templates'))			{				// User is not authorised to delete				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_CREATE_NOT_PERMITTED'));				return false;			}			// Set FTP credentials, if given			JClientHelper::setCredentialsFromRequest('ftp');			// Check that new name is valid			if (($newNameRaw !== null) && ($newName !== $newNameRaw))			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_TEMPLATE_NAME'));				return false;			}			// Check that new name doesn't already exist			if (!$model->checkNewName())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_DUPLICATE_TEMPLATE_NAME'));				return false;			}			// Check that from name does exist and get the folder name			$fromName = $model->getFromName();			if (!$fromName)			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_FROM_NAME'));				return false;			}			// Call model's copy method			if (!$model->copy())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_COPY'));				return false;			}			// Call installation model			$this->input->set('install_directory', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));			$installModel = $this->getModel('Install', 'InstallerModel');			JFactory::getLanguage()->load('com_installer');			if (!$installModel->install())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_INSTALL'));				return false;			}			$this->setMessage(JText::sprintf('COM_TEMPLATES_COPY_SUCCESS', $newName));			$model->cleanup();			return true;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Categories Component Category Model * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesModelCategory extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_CATEGORIES';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 *	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return $user->authorise('core.delete', $record->extension . '.category.' . (int) $record->id);		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 *	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check for existing category.		if (!empty($record->id))		{			return $user->authorise('core.edit.state', $record->extension . '.category.' . (int) $record->id);		}		// New category, so check against the parent.		elseif (!empty($record->parent_id))		{			return $user->authorise('core.edit.state', $record->extension . '.category.' . (int) $record->parent_id);		}		// Default to component settings if neither category nor parent known.		else		{			return $user->authorise('core.edit.state', $record->extension);		}	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   1.6	 */	public function getTable($type = 'Category', $prefix = 'CategoriesTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		$parentId = $app->input->getInt('parent_id');		$this->setState('category.parent_id', $parentId);		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState($this->getName() . '.id', $pk);		$extension = $app->input->get('extension', 'com_content');		$this->setState('category.extension', $extension);		$parts = explode('.', $extension);		// Extract the component name		$this->setState('category.component', $parts[0]);		// Extract the optional section name		$this->setState('category.section', (count($parts) > 1) ? $parts[1] : null);		// Load the parameters.		$params = JComponentHelper::getParams('com_categories');		$this->setState('params', $params);	}	/**	 * Method to get a category.	 *	 * @param   integer  $pk  An optional id of the object to get, otherwise the id from the model state is used.	 *	 * @return  mixed  Category data object on success, false on failure.	 *	 * @since   1.6	 */	public function getItem($pk = null)	{		if ($result = parent::getItem($pk))		{			// Prime required properties.			if (empty($result->id))			{				$result->parent_id = $this->getState('category.parent_id');				$result->extension = $this->getState('category.extension');			}			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($result->metadata);			$result->metadata = $registry->toArray();			// Convert the created and modified dates to local user time for display in the form.			$tz = new DateTimeZone(JFactory::getApplication()->getCfg('offset'));			if ((int) $result->created_time)			{				$date = new JDate($result->created_time);				$date->setTimezone($tz);				$result->created_time = $date->toSql(true);			}			else			{				$result->created_time = null;			}			if ((int) $result->modified_time)			{				$date = new JDate($result->modified_time);				$date->setTimezone($tz);				$result->modified_time = $date->toSql(true);			}			else			{				$result->modified_time = null;			}			if (!empty($result->id))			{				$db = JFactory::getDbo();				$result->tags = new JHelperTags;				$result->tags->getTagIds($result->id, $result->extension . '.category');				$result->metadata['tags'] = $result->tags;			}		}		$app = JFactory::getApplication();		$assoc = $this->getAssoc();		if ($assoc)		{			if ($result->id != null)			{				$result->associations = CategoriesHelper::getAssociations($result->id, $result->extension);				JArrayHelper::toInteger($result->associations);			}			else			{				$result->associations = array();			}		}		return $result;	}	/**	 * Method to get the row form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$extension = $this->getState('category.extension');		$jinput = JFactory::getApplication()->input;		// A workaround to get the extension into the model for save requests.		if (empty($extension) && isset($data['extension']))		{			$extension = $data['extension'];			$parts = explode('.', $extension);			$this->setState('category.extension', $extension);			$this->setState('category.component', $parts[0]);			$this->setState('category.section', @$parts[1]);		}		// Get the form.		$form = $this->loadForm('com_categories.category' . $extension, 'category', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on Edit State access controls.		if (empty($data['extension']))		{			$data['extension'] = $extension;		}		$user = JFactory::getUser();		if (!$user->authorise('core.edit.state', $extension . '.category.' . $jinput->get('id')))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * A protected method to get the where clause for the reorder	 * This ensures that the row will be moved relative to a row with the same extension	 *	 * @param   JCategoryTable  $table  Current table instance	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 *	 * @since   1.6	 */	protected function getReorderConditions($table)	{		return 'extension = ' . $this->_db->quote($table->extension);	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_categories.edit.' . $this->getName() . '.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_categories.category', $data);		return $data;	}	/**	 * Method to preprocess the form.	 *	 * @param   JForm   $form    A JForm object.	 * @param   mixed   $data    The data expected for the form.	 * @param   string  $group   The name of the plugin group to import.	 *	 * @return  void	 *	 * @see     JFormField	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		jimport('joomla.filesystem.path');		$lang = JFactory::getLanguage();		$extension = $this->getState('category.extension');		$component = $this->getState('category.component');		$section = $this->getState('category.section');		// Get the component form if it exists		$name = 'category' . ($section ? ('.' . $section) : '');		// Looking first in the component models/forms folder		$path = JPath::clean(JPATH_ADMINISTRATOR . "/components/$component/models/forms/$name.xml");		// Old way: looking in the component folder		if (!file_exists($path))		{			$path = JPath::clean(JPATH_ADMINISTRATOR . "/components/$component/$name.xml");		}		if (file_exists($path))		{			$lang->load($component, JPATH_BASE, null, false, false);			$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false);			$lang->load($component, JPATH_BASE . '/components/' . $component, null, false, false);			$lang->load($component, JPATH_BASE . '/components/' . $component, $lang->getDefault(), false, false);			if (!$form->loadFile($path, false))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Try to find the component helper.		$eName = str_replace('com_', '', $component);		$path = JPath::clean(JPATH_ADMINISTRATOR . "/components/$component/helpers/category.php");		if (file_exists($path))		{			require_once $path;			$cName = ucfirst($eName) . ucfirst($section) . 'HelperCategory';			if (class_exists($cName) && is_callable(array($cName, 'onPrepareForm')))			{				$lang->load($component, JPATH_BASE, null, false, false) || $lang->load($component, JPATH_BASE . '/components/' . $component, null, false, false) || $lang->load($component, JPATH_BASE, $lang->getDefault(), false, false) || $lang->load($component, JPATH_BASE . '/components/' . $component, $lang->getDefault(), false, false);				call_user_func_array(array($cName, 'onPrepareForm'), array(&$form));				// Check for an error.				if ($form instanceof Exception)				{					$this->setError($form->getMessage());					return false;				}			}		}		// Set the access control rules field component value.		$form->setFieldAttribute('rules', 'component', $component);		$form->setFieldAttribute('rules', 'section', $name);		// Association category items		$app = JFactory::getApplication();		$assoc = $this->getAssoc();		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			// Force to array (perhaps move to $this->loadFormData())			$data = (array) $data;			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_CATEGORIES_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if (empty($data['language']) || $tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'categoryedit');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');					$option = $field->addChild('option', 'COM_CATEGORIES_ITEM_FIELD_ASSOCIATION_NO_VALUE');					$option->addAttribute('value', '');				}			}			if ($add)			{				$form->load($addform, false);			}		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$table = $this->getTable();		$input = JFactory::getApplication()->input;		$pk = (!empty($data['id'])) ? $data['id'] : (int) $this->getState($this->getName() . '.id');		$isNew = true;		// Include the content plugins for the on save events.		JPluginHelper::importPlugin('content');		// Load the row if saving an existing category.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		// Set the new parent id if parent id not matched OR while New/Save as Copy .		if ($table->parent_id != $data['parent_id'] || $data['id'] == 0)		{			$table->setLocation($data['parent_id'], 'last-child');		}		// Alter the title for save as copy		if ($input->get('task') == 'save2copy')		{			list($title, $alias) = $this->generateNewTitle($data['parent_id'], $data['alias'], $data['title']);			$data['title'] = $title;			$data['alias'] = $alias;			$data['published'] = 0;		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Bind the rules.		if (isset($data['rules']))		{			$rules = new JAccessRules($data['rules']);			$table->setRules($rules);		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentBeforeSave event.		$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, &$table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		$app = JFactory::getApplication();		$assoc = $this->getAssoc();		if ($assoc)		{			// Adding self to the association			$associations = $data['associations'];			foreach ($associations as $tag => $id)			{				if (empty($id))				{					unset($associations[$tag]);				}			}			// Detecting all item menus			$all_language = $table->language == '*';			if ($all_language && !empty($associations))			{				JError::raiseNotice(403, JText::_('COM_CATEGORIES_ERROR_ALL_LANGUAGE_ASSOCIATED'));			}			$associations[$table->language] = $table->id;			// Deleting old association for these items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->delete('#__associations')				->where($db->quoteName('context') . ' = ' . $db->quote('com_categories.item'))				->where($db->quoteName('id') . ' IN (' . implode(',', $associations) . ')');			$db->setQuery($query);			$db->execute();			if ($error = $db->getErrorMsg())			{				$this->setError($error);				return false;			}			if (!$all_language && count($associations))			{				// Adding new association for these items				$key = md5(json_encode($associations));				$query->clear()					->insert('#__associations');				foreach ($associations as $tag => $id)				{					$query->values($id . ',' . $db->quote('com_categories.item') . ',' . $db->quote($key));				}				$db->setQuery($query);				$db->execute();				if ($error = $db->getErrorMsg())				{					$this->setError($error);					return false;				}			}		}		// Trigger the onContentAfterSave event.		$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, &$table, $isNew));		// Rebuild the path for the category:		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		// Rebuild the paths of the category's children:		if (!$table->rebuild($table->id, $table->lft, $table->level, $table->path))		{			$this->setError($table->getError());			return false;		}		$this->setState($this->getName() . '.id', $table->id);		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    &$pks    A list of the primary keys to change.	 * @param   integer  $value   The value of the published state.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function publish(&$pks, $value = 1)	{		if (parent::publish($pks, $value))		{			$dispatcher = JEventDispatcher::getInstance();			$extension = JFactory::getApplication()->input->get('extension');			// Include the content plugins for the change of category state event.			JPluginHelper::importPlugin('content');			// Trigger the onCategoryChangeState event.			$dispatcher->trigger('onCategoryChangeState', array($extension, $pks, $value));			return true;		}	}	/**	 * Method rebuild the entire nested set tree.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   1.6	 */	public function rebuild()	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to save the reordered nested set tree.	 * First we save the new order values in the lft values of the changed ids.	 * Then we invoke the table rebuild to implement the new ordering.	 *	 * @param   array    $idArray    An array of primary key ids.	 * @param   integer  $lft_array  The lft value	 *	 * @return  boolean  False on failure or error, True otherwise	 *	 * @since   1.6	 */	public function saveorder($idArray = null, $lft_array = null)	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->saveorder($idArray, $lft_array))		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy categories to a new category.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   1.6	 */	protected function batchCopy($value, $pks, $contexts)	{		// $value comes as {parent_id}.{extension}		$parts = explode('.', $value);		$parentId = (int) JArrayHelper::getValue($parts, 0, 1);		$table = $this->getTable();		$db = $this->getDbo();		$user = JFactory::getUser();		$extension = JFactory::getApplication()->input->get('extension', '', 'word');		$i = 0;		// Check that the parent exists		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}			// Check that user has create permission for parent category			$canCreate = ($parentId == $table->getRootId()) ? $user->authorise('core.create', $extension) : $user->authorise('core.create', $extension . '.category.' . $parentId);			if (!$canCreate)			{				// Error since user cannot create in parent category				$this->setError(JText::_('COM_CATEGORIES_BATCH_CANNOT_CREATE'));				return false;			}		}		// If the parent is 0, set it to the ID of the root item in the tree		if (empty($parentId))		{			if (!$parentId = $table->getRootId())			{				$this->setError($db->getErrorMsg());				return false;			}			// Make sure we can create in root			elseif (!$user->authorise('core.create', $extension))			{				$this->setError(JText::_('COM_CATEGORIES_BATCH_CANNOT_CREATE'));				return false;			}		}		// We need to log the parent ID		$parents = array();		// Calculate the emergency stop count as a precaution against a runaway loop bug		$query = $db->getQuery(true)			->select('COUNT(id)')			->from($db->quoteName('#__categories'));		$db->setQuery($query);		try		{			$count = $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Parent exists so we let's proceed		while (!empty($pks) && $count > 0)		{			// Pop the first id off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Copy is a bit tricky, because we also need to copy the children			$query->clear()				->select('id')				->from($db->quoteName('#__categories'))				->where('lft > ' . (int) $table->lft)				->where('rgt < ' . (int) $table->rgt);			$db->setQuery($query);			$childIds = $db->loadColumn();			// Add child ID's to the array only if they aren't already there.			foreach ($childIds as $childId)			{				if (!in_array($childId, $pks))				{					array_push($pks, $childId);				}			}			// Make a copy of the old ID and Parent ID			$oldId = $table->id;			$oldParentId = $table->parent_id;			// Reset the id because we are making a copy.			$table->id = 0;			// If we a copying children, the Old ID will turn up in the parents list			// otherwise it's a new top level item			$table->parent_id = isset($parents[$oldParentId]) ? $parents[$oldParentId] : $parentId;			// Set the new location in the tree for the node.			$table->setLocation($table->parent_id, 'last-child');			// TODO: Deal with ordering?			// $table->ordering	= 1;			$table->level = null;			$table->asset_id = null;			$table->lft = null;			$table->rgt = null;			// Alter the title & alias			list($title, $alias) = $this->generateNewTitle($table->parent_id, $table->alias, $table->title);			$table->title = $title;			$table->alias = $alias;			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;			// Now we log the old 'parent' to the new 'parent'			$parents[$oldId] = $table->id;			$count--;		}		// Rebuild the hierarchy.		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Rebuild the tree path.		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		return $newIds;	}	/**	 * Batch move categories to a new category.	 *	 * @param   integer  $value     The new category ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	protected function batchMove($value, $pks, $contexts)	{		$parentId = (int) $value;		$table = $this->getTable();		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$extension = JFactory::getApplication()->input->get('extension', '', 'word');		// Check that the parent exists.		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}			// Check that user has create permission for parent category			$canCreate = ($parentId == $table->getRootId()) ? $user->authorise('core.create', $extension) : $user->authorise('core.create', $extension . '.category.' . $parentId);			if (!$canCreate)			{				// Error since user cannot create in parent category				$this->setError(JText::_('COM_CATEGORIES_BATCH_CANNOT_CREATE'));				return false;			}			// Check that user has edit permission for every category being moved			// Note that the entire batch operation fails if any category lacks edit permission			foreach ($pks as $pk)			{				if (!$user->authorise('core.edit', $extension . '.category.' . $pk))				{					// Error since user cannot edit this category					$this->setError(JText::_('COM_CATEGORIES_BATCH_CANNOT_EDIT'));					return false;				}			}		}		// We are going to store all the children and just move the category		$children = array();		// Parent exists so we let's proceed		foreach ($pks as $pk)		{			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Set the new location in the tree for the node.			$table->setLocation($parentId, 'last-child');			// Check if we are moving to a different parent			if ($parentId != $table->parent_id)			{				// Add the child node ids to the children array.				$query->clear()					->select('id')					->from($db->quoteName('#__categories'))					->where($db->quoteName('lft') . ' BETWEEN ' . (int) $table->lft . ' AND ' . (int) $table->rgt);				$db->setQuery($query);				try				{					$children = array_merge($children, (array) $db->loadColumn());				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Rebuild the tree path.			if (!$table->rebuildPath())			{				$this->setError($table->getError());				return false;			}		}		// Process the child rows		if (!empty($children))		{			// Remove any duplicates and sanitize ids.			$children = array_unique($children);			JArrayHelper::toInteger($children);		}		return true;	}	/**	 * Custom clean the cache of com_content and content modules	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		$extension = JFactory::getApplication()->input->get('extension');		switch ($extension)		{			case 'com_content':				parent::cleanCache('com_content');				parent::cleanCache('mod_articles_archive');				parent::cleanCache('mod_articles_categories');				parent::cleanCache('mod_articles_category');				parent::cleanCache('mod_articles_latest');				parent::cleanCache('mod_articles_news');				parent::cleanCache('mod_articles_popular');				break;			default:				parent::cleanCache($extension);				break;		}	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   1.7	 */	protected function generateNewTitle($parent_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'parent_id' => $parent_id)))		{			$title = JString::increment($title);			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}	public function getAssoc()	{		static $assoc = null;		if (!is_null($assoc))		{			return $assoc;		}		$app = JFactory::getApplication();		$extension = $this->getState('category.extension');		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		$extension = explode('.', $extension);		$component = array_shift($extension);		$cname = str_replace('com_', '', $component);		if (!$assoc || !$component || !$cname)		{			$assoc = false;		}		else		{			$hname = $cname . 'HelperAssociation';			JLoader::register($hname, JPATH_SITE . '/components/' . $component . '/helpers/association.php');			$assoc = class_exists($hname) && !empty($hname::$category_association);		}		return $assoc;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_content.article');$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$saveOrder	= $listOrder == 'fp.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_content&view=featured'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?></label>				<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC'); ?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" style="min-width:55px" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'fp.ordering', $listDirn, $listOrder); ?>						<?php if ($canOrder && $saveOrder) :?>							<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'featured.saveorder'); ?>						<?php endif; ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JAUTHOR', 'a.created_by', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="8">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php $count = count($this->items); ?>			<?php foreach ($this->items as $i => $item) :				$item->max_ordering = 0;				$ordering	= ($listOrder == 'fp.ordering');				$assetId	= 'com_content.article.'.$item->id;				$canCreate	= $user->authorise('core.create',     'com_content.category.'.$item->catid);				$canEdit	= $user->authorise('core.edit',       'com_content.article.'.$item->id);				$canCheckin	= $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canChange	= $user->authorise('core.edit.state', 'com_content.article.'.$item->id) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid; ?>">					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">							<?php echo JHtml::_('jgrid.published', $item->state, $i, 'articles.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'articles.', $canCheckin); ?>							<?php endif; ?>							<?php if ($item->language == '*') : ?>								<?php $language = JText::alt('JALL', 'language'); ?>							<?php else : ?>								<?php $language = $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_content&task=article.edit&return=featured&id=' . $item->id);?>" title="<?php echo JText::_('JACTION_EDIT'); ?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>								<span title="<?php echo JText::sprintf('JFIELD_ALIAS_LABEL', $this->escape($item->alias)); ?>"><?php echo $this->escape($item->title); ?></span>							<?php endif; ?>							<div class="small">								<?php echo JText::_('JCATEGORY') . ": " . $this->escape($item->category_title); ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'article.', 'index.php?option=com_content&return=featured');								JHtml::_('dropdown.divider');								if ($item->state) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'articles.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'articles.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'articles.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'articles.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'articles.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'articles.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'articles.');								endif;								// Render dropdown list								echo JHtml::_('dropdown.render');							?>						</div>					</td>					<td class="order">						<?php if ($canChange) : ?>							<div class="input-prepend">							<?php if ($saveOrder) :?>								<?php if ($listDirn == 'asc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'featured.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php elseif ($listDirn == 'desc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'featured.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php endif; ?>							<?php endif; ?>							<?php $disabled = $saveOrder ? '' : 'disabled="disabled"'; ?>						 	<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="width-20 text-area-order" />						 </div>						<?php else : ?>							<?php echo $item->ordering; ?>						<?php endif; ?>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="small hidden-phone">						<?php if ($item->created_by_alias) : ?>							<?php echo $this->escape($item->author_name); ?>							<p class="smallsub"> <?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->created_by_alias)); ?></p>						<?php else : ?>							<?php echo $this->escape($item->author_name); ?>						<?php endif; ?>					</td>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="nowrap small hidden-phone">						<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="featured" value="1" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @since       13.1 */abstract class JFacebookObject{	/**	 * @var    JRegistry  Options for the Facebook object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var    JFacebookOAuth  The OAuth client.	 * @since  13.1	 */	protected $oauth;	/**	 * Constructor.	 *	 * @param   JRegistry       $options  Facebook options object.	 * @param   JHttp           $client   The HTTP client object.	 * @param   JFacebookOAuth  $oauth    The OAuth client.	 *	 * @since   13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JFacebookOAuth $oauth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JHttp($this->options);		$this->oauth = $oauth;	}	/**	 * Method to build and return a full request URL for the request.  This method will	 * add appropriate pagination details if necessary and also prepend the API url	 * to have a complete URL for the request.	 *	 * @param   string     $path    URL to inflect.	 * @param   integer    $limit   The number of objects per page.	 * @param   integer    $offset  The object's number on the page.	 * @param   timestamp  $until   A unix timestamp or any date accepted by strtotime.	 * @param   timestamp  $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  string  The request URL.	 *	 * @since   13.1	 */	protected function fetchUrl($path, $limit = 0, $offset = 0, $until = null, $since = null)	{		// Get a new JUri object fousing the api url and given path.		$uri = new JUri($this->options->get('api.url') . $path);		if ($limit > 0)		{			$uri->setVar('limit', (int) $limit);		}		if ($offset > 0)		{			$uri->setVar('offset', (int) $offset);		}		if ($until != null)		{			$uri->setVar('until', $until);		}		if ($since != null)		{			$uri->setVar('since', $since);		}		return (string) $uri;	}	/**	 * Method to send the request.	 *	 * @param   string   $path     The path of the request to make.	 * @param   mixed    $data     Either an associative array or a string to be sent with the post request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return   mixed  The request response.	 *	 * @since    13.1	 * @throws   DomainException	 */	public function sendRequest($path, $data = '', array $headers = null, $limit = 0, $offset = 0, $until = null, $since = null)	{		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $limit, $offset, $until, $since), $headers);		$response = json_decode($response->body);		// Validate the response.		if (property_exists($response, 'error'))		{			throw new RuntimeException($response->error->message);		}		return $response;	}	/**	 * Method to get an object.	 *	 * @param   string  $object  The object id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function get($object)	{		if ($this->oauth != null)		{			if ($this->oauth->isAuthenticated())			{				$response = $this->oauth->query($this->fetchUrl($object));				return json_decode($response->body);			}			else			{				return false;			}		}		// Send the request.		return $this->sendRequest($object);	}	/**	 * Method to get object's connection.	 *	 * @param   string   $object        The object id.	 * @param   string   $connection    The object's connection name.	 * @param   string   $extra_fields  URL fields.	 * @param   integer  $limit         The number of objects per page.	 * @param   integer  $offset        The object's number on the page.	 * @param   string   $until         A unix timestamp or any date accepted by strtotime.	 * @param   string   $since         A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getConnection($object, $connection = null, $extra_fields = '', $limit = 0, $offset = 0, $until = null, $since = null)	{		$path = $object . '/' . $connection . $extra_fields;		if ($this->oauth != null)		{			if ($this->oauth->isAuthenticated())			{				$response = $this->oauth->query($this->fetchUrl($path, $limit, $offset, $until, $since));				if (strcmp($response->body, ''))				{					return json_decode($response->body);				}				else				{					return $response->headers['Location'];				}			}			else			{				return false;			}		}		// Send the request.		return $this->sendRequest($path, '', null, $limit, $offset, $until, $since);	}	/**	 * Method to create a connection.	 *	 * @param   string  $object      The object id.	 * @param   string  $connection  The object's connection name.	 * @param   array   $parameters  The POST request parameters.	 * @param   array   $headers     An array of name-value pairs to include in the header of the request	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createConnection($object, $connection = null, $parameters = null, array $headers = null)	{		if ($this->oauth->isAuthenticated())		{			// Build the request path.			if ($connection != null)			{				$path = $object . '/' . $connection;			}			else			{				$path = $object;			}			// Send the post request.			$response = $this->oauth->query($this->fetchUrl($path), $parameters, $headers, 'post');			return json_decode($response->body);		}		else		{			return false;		}	}	/**	 * Method to delete a connection.	 *	 * @param   string  $object        The object id.	 * @param   string  $connection    The object's connection name.	 * @param   string  $extra_fields  URL fields.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteConnection($object, $connection = null, $extra_fields = '')	{		if ($this->oauth->isAuthenticated())		{			// Build the request path.			if ($connection != null)			{				$path = $object . '/' . $connection . $extra_fields;			}			else			{				$path = $object . $extra_fields;			}			// Send the delete request.			$response = $this->oauth->query($this->fetchUrl($path), null, array(), 'delete');			return json_decode($response->body);		}		else		{			return false;		}	}	/**	 * Method used to set the OAuth client.	 *	 * @param   JFacebookOAuth  $oauth  The OAuth client object.	 *	 * @return  JFacebookObject  This object for method chaining.	 *	 * @since   13.1	 */	public function setOAuth($oauth)	{		$this->oauth = $oauth;		return $this;	}	/**	 * Method used to get the OAuth client.	 *	 * @return  JFacebookOAuth  The OAuth client	 *	 * @since   13.1	 */	public function getOAuth()	{		return $this->oauth;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');/** * Banners model for the Joomla Banners component. * * @package     Joomla.Site * @subpackage  com_banners * @since       1.6 */class BannersModelBanners extends JModelList{	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.tag_search');		$id .= ':' . $this->getState('filter.client_id');		$id .= ':' . serialize($this->getState('filter.category_id'));		$id .= ':' . serialize($this->getState('filter.keywords'));		return parent::getStoreId($id);	}	/**	 * Gets a list of banners	 *	 * @return  array  An array of banner objects.	 * @since   1.6	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		$ordering = $this->getState('filter.ordering');		$tagSearch = $this->getState('filter.tag_search');		$cid = $this->getState('filter.client_id');		$categoryId = $this->getState('filter.category_id');		$keywords = $this->getState('filter.keywords');		$randomise = ($ordering == 'random');		$nullDate = $db->quote($db->getNullDate());		$query->select(			'a.id as id,' .				'a.type as type,' .				'a.name as name,' .				'a.clickurl as clickurl,' .				'a.cid as cid,' .				'a.params as params,' .				'a.custombannercode as custombannercode,' .				'a.track_impressions as track_impressions,' .				'cl.track_impressions as client_track_impressions'		)			->from('#__banners as a')			->join('LEFT', '#__banner_clients AS cl ON cl.id = a.cid')			->where('a.state=1')			->where('(' . $query->currentTimestamp() . ' >= a.publish_up OR a.publish_up = ' . $nullDate . ')')			->where('(' . $query->currentTimestamp() . ' <= a.publish_down OR a.publish_down = ' . $nullDate . ')')			->where('(a.imptotal = 0 OR a.impmade <= a.imptotal)');		if ($cid)		{			$query->join('LEFT', '#__categories as cat ON a.catid = cat.id')				->where('a.cid = ' . (int) $cid)				->where('cl.state = 1');		}		// Filter by a single or group of categories		$categoryId = $this->getState('filter.category_id');		$catid = $this->getState('filter.category_id', array());		if (is_numeric($categoryId))		{			$type = $this->getState('filter.category_id.include', true) ? '= ' : '<> ';			// Add subcategory check			$includeSubcategories = $this->getState('filter.subcategories', false);			$categoryEquals = 'a.catid ' . $type . (int) $categoryId;			if ($includeSubcategories)			{				$levels = (int) $this->getState('filter.max_category_levels', '1');				// Create a subquery for the subcategory list				$subQuery = $db->getQuery(true);				$subQuery->select('sub.id')					->from('#__categories as sub')					->join('INNER', '#__categories as this ON sub.lft > this.lft AND sub.rgt < this.rgt')					->where('this.id = ' . (int) $categoryId)					->where('sub.level <= this.level + ' . $levels);				// Add the subquery to the main query				$query->where('(' . $categoryEquals . ' OR a.catid IN (' . $subQuery->__toString() . '))');			}			else			{				$query->where($categoryEquals);			}		}		elseif ((is_array($categoryId)) && (count($categoryId) > 0))		{			JArrayHelper::toInteger($categoryId);			$categoryId = implode(',', $categoryId);			if ($categoryId != '0')			{				$type = $this->getState('filter.category_id.include', true) ? 'IN' : 'NOT IN';				$query->where('a.catid ' . $type . ' (' . $categoryId . ')');			}		}		if ($tagSearch)		{			if (count($keywords) == 0)			{				$query->where('0');			}			else			{				$temp = array();				$config = JComponentHelper::getParams('com_banners');				$prefix = $config->get('metakey_prefix');				foreach ($keywords as $keyword)				{					$keyword = trim($keyword);					$condition1 = "a.own_prefix=1 AND a.metakey_prefix=SUBSTRING(" . $db->quote($keyword) . ",1,LENGTH( a.metakey_prefix)) OR a.own_prefix=0 AND cl.own_prefix=1 AND cl.metakey_prefix=SUBSTRING(" . $db->quote($keyword) . ",1,LENGTH(cl.metakey_prefix)) OR a.own_prefix=0 AND cl.own_prefix=0 AND " . ($prefix == substr($keyword, 0, strlen($prefix)) ? '1' : '0');					$condition2 = "a.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					if ($cid)					{						$condition2 .= " OR cl.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					}					if ($catid)					{						$condition2 .= " OR cat.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					}					$temp[] = "($condition1) AND ($condition2)";				}				$query->where('(' . implode(' OR ', $temp) . ')');			}		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		$query->order('a.sticky DESC,' . ($randomise ? 'RAND()' : 'a.ordering'));		return $query;	}	/**	 * Get a list of banners.	 *	 * @return  array	 * @since   1.6	 */	public function getItems()	{		if (!isset($this->cache['items']))		{			$this->cache['items'] = parent::getItems();			foreach ($this->cache['items'] as &$item)			{				$parameters = new JRegistry;				$parameters->loadString($item->params);				$item->params = $parameters;			}		}		return $this->cache['items'];	}	/**	 * Makes impressions on a list of banners	 *	 * @return  void	 * @since   1.6	 */	public function impress()	{		$trackDate = JFactory::getDate()->format('Y-m-d H');		$items = $this->getItems();		$db = $this->getDbo();		$query = $db->getQuery(true);		foreach ($items as $item)		{			// Increment impression made			$id = $item->id;			$query->clear()				->update('#__banners')				->set('impmade = (impmade + 1)')				->where('id = ' . (int) $id);			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				JError::raiseError(500, $e->getMessage());			}			// track impressions			$trackImpressions = $item->track_impressions;			if ($trackImpressions < 0 && $item->cid)			{				$trackImpressions = $item->client_track_impressions;			}			if ($trackImpressions < 0)			{				$config = JComponentHelper::getParams('com_banners');				$trackImpressions = $config->get('track_impressions');			}			if ($trackImpressions > 0)			{				// is track already created ?				$query->clear()					->select($db->quoteName('count'))					->from('#__banner_tracks')					->where('track_type=1')					->where('banner_id=' . (int) $id)					->where('track_date=' . $db->quote($trackDate));				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					JError::raiseError(500, $e->getMessage());				}				$count = $db->loadResult();				$query->clear();				if ($count)				{					// update count					$query->update('#__banner_tracks')						->set($db->quoteName('count') . ' = (' . $db->quote('count') . ' + 1)')						->where('track_type=1')						->where('banner_id=' . (int) $id)						->where('track_date=' . $db->quote($trackDate));				}				else				{					// insert new count					//sqlsrv change					$query->insert('#__banner_tracks')						->columns(							array(								$db->quoteName('count'), $db->quoteName('track_type'),								$db->quoteName('banner_id'), $db->quoteName('track_date')							)						)						->values('1, 1, ' . (int) $id . ', ' . $db->quote($trackDate));				}				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					JError::raiseError(500, $e->getMessage());				}			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_contact.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_contact&task=contacts.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_contact'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" style="min-width:55px" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>					</th>					<th class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JFEATURED', 'a.featured', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<?php if ($assoc) : ?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tbody>			<?php			$n = count($this->items);			foreach ($this->items as $i => $item) :				$ordering	= $listOrder == 'a.ordering';				$canCreate	= $user->authorise('core.create',     'com_contact.category.'.$item->catid);				$canEdit	= $user->authorise('core.edit',       'com_contact.category.'.$item->catid);				$canCheckin	= $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canEditOwn	= $user->authorise('core.edit.own',   'com_contact.category.'.$item->catid) && $item->created_by == $userId;				$canChange	= $user->authorise('core.edit.state', 'com_contact.category.'.$item->catid) && $canCheckin;				$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_contact&task=edit&type=other&id='.$item->catid);				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel	  = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip<?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>							<input type="text" style="display:none" name="order[]" size="5"							value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />						<?php else : ?>							<span class="sortable-handler inactive" >								<i class="icon-menu"></i>							</span>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'contacts.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'contacts.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit || $canEditOwn) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_contact&task=contact.edit&id='.(int) $item->id); ?>">								<?php echo $this->escape($item->name); ?></a>							<?php else : ?>								<?php echo $this->escape($item->name); ?>							<?php endif; ?>							<span class="small">								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							</span>							<div class="small">								<?php echo $item->category_title; ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'contact.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'contacts.');								endif;								if ($item->featured) :									JHtml::_('dropdown.unfeatured', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.featured', 'cb' . $i, 'contacts.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'contacts.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'contacts.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'contacts.');								endif;								// render dropdown list								echo JHtml::_('dropdown.render');							?>						</div>					</td>					<td align="small hidden-phone">						<?php if (!empty($item->linked_user)) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_users&task=user.edit&id='.$item->user_id);?>"><?php echo $item->linked_user;?></a>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('contact.featured', $item->featured, $i, $canChange); ?>					</td>					<td align="small hidden-phone">						<?php echo $item->access_level; ?>					</td>					<?php if ($assoc) : ?>					<td class="hidden-phone">						<?php if ($item->association) : ?>							<?php echo JHtml::_('contact.association', $item->id); ?>						<?php endif; ?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td align="center hidden-phone">						<?php echo $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$options = array(	JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),	JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE')));$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_MENUS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_MENUS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<?php if ($published >= 0)		{		?>			<div id="batch-choose-action" class="combo control-group">				<label id="batch-choose-action-lbl" class="control-label" for="batch-choose-action">					<?php echo JText::_('COM_MENUS_BATCH_MENU_LABEL'); ?>				</label>				<div class="controls">					<select name="batch[menu_id]" class="inputbox" id="batch-menu-id">						<option value=""><?php echo JText::_('JSELECT') ?></option>						<?php echo JHtml::_('select.options', JHtml::_('menu.menuitems', array('published' => $published)));?>					</select>				</div>			</div>			<div id="batch-copy-move" class="control-group radio">				<?php echo JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'); ?>			</div>		<?php		}		?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-menu-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('item.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API Changesets class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */class JOpenstreetmapChangesets extends JOpenstreetmapObject{	/**	 * Method to create a changeset	 * 	 * @param   array  $changesets  array which contains changeset data	 * 	 * @return  array  The xml response	 * 	 * @since   13.1	 */	public function createChangeset($changesets=array())	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key'],				'oauth_token_secret' => $token['secret']		);		// Set the API base		$base = 'changeset/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$xml = '<?xml version="1.0" encoding="UTF-8"?>			<osm version="0.6" generator="JOpenstreetmap">';		if (!empty($changesets))		{			// Create Changeset element for every changeset			foreach ($changesets as $tags)			{				$xml .= '<changeset>';				$tag_list = '';				if (!empty($tags))				{					// Create a list of tags for each changeset					foreach ($tags as $key => $value)					{						$xml .= '<tag k="' . $key . '" v="' . $value . '"/>';					}				}				$xml .= '</changeset>';			}		}		$xml .= '</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to read a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  array    The xml response about a changeset	 *  	 * @since   13.1	 */	public function readChangeset($id)	{		// Set the API base		$base = 'changeset/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->changeset;	}	/**	 * Method to update a changeset	 * 	 * @param   int    $id    identifier of the changeset	 * @param   array  $tags  array of tags to update	 * 	 * @return  array    The xml response of updated changeset	 * 	 * @since   13.1 	 */	public function updateChangeset($id, $tags=array() )	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create a list of tags to update changeset		$tag_list = '';		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<changeset>'				. $tag_list .				'</changeset>  				</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->changeset;	}	/**	 * Method to close a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  No value returns	 * 	 * @since   13.1	 */	public function closeChangeset($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/close';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['format'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $header);	}	/**	 * Method to download a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  array	The xml response of requested changeset	 * 	 * @since   13.1	 */	public function downloadChangeset($id)	{		// Set the API base		$base = 'changeset/' . $id . '/download';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->create;	}	/**	 * Method to expand the bounding box of a changeset	 * 	 * @param   int    $id     identifier of the changeset	 * @param   array  $nodes  list of lat lon about nodes	 * 	 * @return  array    The xml response of changed changeset	 * 	 * @since   13.1	 */	public function expandBBoxChangeset($id, $nodes)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/expand_bbox';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create a list of tags to update changeset		$node_list = '';		if (!empty($nodes))		{			foreach ($nodes as $node)			{				$node_list .= '<node lat="' . $node[0] . '" lon="' . $node[1] . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<changeset>'				. $node_list .				'</changeset>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->changeset;	}	/**	 * Method to Query on changesets	 *  	 * @param   string  $param  parameters for query	 * 	 * @return  array    The xml response	 * 	 * @since   13.1	 */	public function queryChangeset($param)	{		// Set the API base		$base = 'changesets/' . $param;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->osm;	}	/**	 * Method to upload a diff to a changeset	 * 	 * @param   string  $xml  diff data to upload	 * @param   int     $id   identifier of the changeset	 * 	 * @return  array    The xml response of result	 * 	 * @since   13.1	 */	public function diffUploadChangeset($xml, $id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/upload';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->diffResult;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// Create shortcuts to some parameters.$params  = $this->item->params;$images  = json_decode($this->item->images);$urls    = json_decode($this->item->urls);$canEdit = $params->get('access-edit');$user    = JFactory::getUser();$info    = $params->get('info_block_position', 0);JHtml::_('behavior.caption');?><div class="item-page<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading') && $params->get('show_title')) : ?>	<div class="page-header">		<h1> <?php echo $this->escape($this->params->get('page_heading')); ?> </h1>	</div>	<?php endif;if (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && $this->item->paginationrelative){	echo $this->item->pagination;}?>	<?php if ($params->get('show_title') || $params->get('show_author')) : ?>	<div class="page-header">		<h2>			<?php if ($this->item->state == 0) : ?>				<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>			<?php endif; ?>			<?php if ($params->get('show_title')) : ?>				<?php if ($params->get('link_titles') && !empty($this->item->readmore_link)) : ?>					<a href="<?php echo $this->item->readmore_link; ?>"> <?php echo $this->escape($this->item->title); ?></a>				<?php else : ?>					<?php echo $this->escape($this->item->title); ?>				<?php endif; ?>			<?php endif; ?>		</h2>	</div>	<?php endif; ?>	<?php if (!$this->print) : ?>		<?php if ($canEdit || $params->get('show_print_icon') || $params->get('show_email_icon')) : ?>		<div class="btn-group pull-right">			<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span> <span class="caret"></span> </a>			<?php // Note the actions class is deprecated. Use dropdown-menu instead. ?>			<ul class="dropdown-menu actions">				<?php if ($params->get('show_print_icon')) : ?>				<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $this->item, $params); ?> </li>				<?php endif; ?>				<?php if ($params->get('show_email_icon')) : ?>				<li class="email-icon"> <?php echo JHtml::_('icon.email', $this->item, $params); ?> </li>				<?php endif; ?>				<?php if ($canEdit) : ?>				<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $this->item, $params); ?> </li>				<?php endif; ?>			</ul>		</div>		<?php endif; ?>		<?php else : ?>		<div class="pull-right">		<?php echo JHtml::_('icon.print_screen', $this->item, $params); ?>		</div>	<?php endif; ?><?php $useDefList = ($params->get('show_modify_date') || $params->get('show_publish_date') || $params->get('show_create_date')	|| $params->get('show_hits') || $params->get('show_category') || $params->get('show_parent_category') || $params->get('show_author')); ?>	<?php if ($useDefList && ($info == 0 || $info == 2)) : ?>		<div class="article-info muted">			<dl class="article-info">			<dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt>			<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>				<dd class="createdby">					<?php $author = $this->item->created_by_alias ? $this->item->created_by_alias : $this->item->author; ?>					<?php if (!empty($this->item->contactid) && $params->get('link_author') == true) : ?>						<?php						$needle = 'index.php?option=com_contact&view=contact&id=' . $this->item->contactid;						$menu = JFactory::getApplication()->getMenu();						$item = $menu->getItems('link', $needle, true);						$cntlink = !empty($item) ? $needle . '&Itemid=' . $item->id : $needle;						?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', JHtml::_('link', JRoute::_($cntlink), $author)); ?>					<?php else: ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>				<dd class="parent-category-name">					<?php $title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>					<?php if ($params->get('link_parent_category') && !empty($this->item->parent_slug)) : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_category')) : ?>				<dd class="category-name">					<?php $title = $this->escape($this->item->category_title);					$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)) . '">' . $title . '</a>';?>					<?php if ($params->get('link_category') && $this->item->catslug) : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_publish_date')) : ?>				<dd class="published">					<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($info == 0) : ?>				<?php if ($params->get('show_modify_date')) : ?>					<dd class="modified">						<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_create_date')) : ?>					<dd class="create">						<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_hits')) : ?>					<dd class="hits">						<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>					</dd>				<?php endif; ?>			<?php endif; ?>			</dl>		</div>	<?php endif; ?>	<?php if ($params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?>	<?php if (!$params->get('show_intro')) : echo $this->item->event->afterDisplayTitle; endif; ?>	<?php echo $this->item->event->beforeDisplayContent; ?>	<?php if (isset($urls) && ((!empty($urls->urls_position) && ($urls->urls_position == '0')) || ($params->get('urls_position') == '0' && empty($urls->urls_position)))		|| (empty($urls->urls_position) && (!$params->get('urls_position')))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($params->get('access-view')):?>	<?php if (isset($images->image_fulltext) && !empty($images->image_fulltext)) : ?>	<?php $imgfloat = (empty($images->float_fulltext)) ? $params->get('float_fulltext') : $images->float_fulltext; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_fulltext_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_fulltext_caption) . '"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_fulltext); ?>" alt="<?php echo htmlspecialchars($images->image_fulltext_alt); ?>"/> </div>	<?php endif; ?>	<?php	if (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && !$this->item->paginationrelative):		echo $this->item->pagination;	endif;	?>	<?php if (isset ($this->item->toc)) :		echo $this->item->toc;	endif; ?>	<?php echo $this->item->text; ?>	<?php if ($useDefList && ($info == 1 || $info == 2)) : ?>		<div class="article-info muted">			<dl class="article-info">			<dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt>			<?php if ($info == 1) : ?>				<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>					<dd class="createdby">						<?php $author = $this->item->created_by_alias ? $this->item->created_by_alias : $this->item->author; ?>						<?php if (!empty($this->item->contactid) && $params->get('link_author') == true) : ?>						<?php						$needle = 'index.php?option=com_contact&view=contact&id=' . $this->item->contactid;						$menu = JFactory::getApplication()->getMenu();						$item = $menu->getItems('link', $needle, true);						$cntlink = !empty($item) ? $needle . '&Itemid=' . $item->id : $needle;						?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', JHtml::_('link', JRoute::_($cntlink), $author)); ?>						<?php else: ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>					<dd class="parent-category-name">						<?php	$title = $this->escape($this->item->parent_title);						$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)) . '">' . $title . '</a>';?>						<?php if ($params->get('link_parent_category') && $this->item->parent_slug) : ?>							<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>						<?php else : ?>							<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_category')) : ?>					<dd class="category-name">						<?php 	$title = $this->escape($this->item->category_title);						$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)) . '">' . $title . '</a>';?>						<?php if ($params->get('link_category') && $this->item->catslug) : ?>							<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>						<?php else : ?>							<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_publish_date')) : ?>					<dd class="published">						<span class="icon-calendar"></span>						<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>			<?php endif; ?>			<?php if ($params->get('show_create_date')) : ?>				<dd class="create">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_modify_date')) : ?>				<dd class="modified">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_hits')) : ?>				<dd class="hits">					<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>				</dd>			<?php endif; ?>			</dl>		</div>	<?php endif; ?>	<?phpif (!empty($this->item->pagination) && $this->item->pagination && $this->item->paginationposition && !$this->item->paginationrelative):	echo $this->item->pagination;?>	<?php endif; ?>	<?php if (isset($urls) && ((!empty($urls->urls_position) && ($urls->urls_position == '1')) || ($params->get('urls_position') == '1'))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php // Optional teaser intro text for guests ?>	<?php elseif ($params->get('show_noauth') == true && $user->get('guest')) : ?>	<?php echo $this->item->introtext; ?>	<?php //Optional link to let them register to see the whole article. ?>	<?php if ($params->get('show_readmore') && $this->item->fulltext != null) :		$link1 = JRoute::_('index.php?option=com_users&view=login');		$link = new JURI($link1);?>	<p class="readmore">		<a href="<?php echo $link; ?>">		<?php $attribs = json_decode($this->item->attribs); ?>		<?php		if ($attribs->alternative_readmore == null) :			echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');		elseif ($readmore = $this->item->alternative_readmore) :			echo $readmore;			if ($params->get('show_readmore_title', 0) != 0) :				echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));			endif;		elseif ($params->get('show_readmore_title', 0) == 0) :			echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');		else :			echo JText::_('COM_CONTENT_READ_MORE');			echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));		endif; ?>		</a>	</p>	<?php endif; ?>	<?php endif; ?>	<?phpif (!empty($this->item->pagination) && $this->item->pagination && $this->item->paginationposition && $this->item->paginationrelative) :	echo $this->item->pagination;?>	<?php endif; ?>	<?php echo $this->item->event->afterDisplayContent; ?> </div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('filelist');/** * Supports an HTML select list of image * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldImageList extends JFormFieldFileList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'ImageList';	/**	 * Method to get the list of images field options.	 * Use the filter attribute to specify allowable file extensions.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		// Define the image file type filter.		$filter = '\.png$|\.gif$|\.jpg$|\.bmp$|\.ico$|\.jpeg$|\.psd$|\.eps$';		// Set the form field element attribute for file type filter.		$this->element->addAttribute('filter', $filter);		// Get the field options.		return parent::getOptions();	}}
