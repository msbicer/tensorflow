<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Driver Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */abstract class JDatabaseIterator implements Countable, Iterator{	/**	 * The database cursor.	 *	 * @var    mixed	 * @since  12.1	 */	protected $cursor;	/**	 * The class of object to create.	 *	 * @var    string	 * @since  12.1	 */	protected $class;	/**	 * The name of the column to use for the key of the database record.	 *	 * @var    mixed	 * @since  12.1	 */	private $_column;	/**	 * The current database record.	 *	 * @var    mixed	 * @since  12.1	 */	private $_current;	/**	 * A numeric or string key for the current database record.	 *	 * @var    scalar	 * @since  12.1	 */	private $_key;	/**	 * The number of fetched records.	 *	 * @var    integer	 * @since  12.1	 */	private $_fetched = 0;	/**	 * Database iterator constructor.	 *	 * @param   mixed   $cursor  The database cursor.	 * @param   string  $column  An option column to use as the iterator key.	 * @param   string  $class   The class of object that is returned.	 *	 * @throws  InvalidArgumentException	 */	public function __construct($cursor, $column = null, $class = 'stdClass')	{		if (!class_exists($class))		{			throw new InvalidArgumentException(sprintf('new %s(*%s*, cursor)', get_class($this), gettype($class)));		}		$this->cursor = $cursor;		$this->class = $class;		$this->_column = $column;		$this->_fetched = 0;		$this->next();	}	/**	 * Database iterator destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		if ($this->cursor)		{			$this->freeResult($this->cursor);		}	}	/**	 * The current element in the iterator.	 *	 * @return  object	 *	 * @see     Iterator::current()	 * @since   12.1	 */	public function current()	{		return $this->_current;	}	/**	 * The key of the current element in the iterator.	 *	 * @return  scalar	 *	 * @see     Iterator::key()	 * @since   12.1	 */	public function key()	{		return $this->_key;	}	/**	 * Moves forward to the next result from the SQL query.	 *	 * @return  void	 *	 * @see     Iterator::next()	 * @since   12.1	 */	public function next()	{		// Set the default key as being the number of fetched object		$this->_key = $this->_fetched;		// Try to get an object		$this->_current = $this->fetchObject();		// If an object has been found		if ($this->_current)		{			// Set the key as being the indexed column (if it exists)			if (isset($this->_current->{$this->_column}))			{				$this->_key = $this->_current->{$this->_column};			}			// Update the number of fetched object			$this->_fetched++;		}	}	/**	 * Rewinds the iterator.	 *	 * This iterator cannot be rewound.	 *	 * @return  void	 *	 * @see     Iterator::rewind()	 * @since   12.1	 */	public function rewind()	{	}	/**	 * Checks if the current position of the iterator is valid.	 *	 * @return  boolean	 *	 * @see     Iterator::valid()	 * @since   12.1	 */	public function valid()	{		return (boolean) $this->_current;	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	abstract protected function fetchObject();	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	abstract protected function freeResult();}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Clicks Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldImpMade extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ImpMade';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$onclick	= ' onclick="document.id(\''.$this->id.'\').value=\'0\';"';		return '<input class="input-small" type="text" name="'.$this->name.'" id="'.$this->id.'" value="'.htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8').'" readonly="readonly" /> <a class="btn" '.$onclick.'><i class="icon-refresh"></i> '.JText::_('COM_BANNERS_RESET_IMPMADE').'</a>';	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewSummaryHtml $this */// Determine if the configuration file path is writable.$path = JPATH_CONFIGURATION . '/configuration.php';$useftp = (file_exists($path)) ? !is_writable($path) : !is_writable(JPATH_CONFIGURATION . '/');$prev = $useftp ? 'ftp' : 'database';?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('<?php echo $prev; ?>');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('INSTL_SUMMARY_INSTALL'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('INSTL_SUMMARY_INSTALL'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_FINALISATION'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('sample_file'); ?>		</div>		<div class="controls">			<div class="help-block">				<?php echo $this->form->getInput('sample_file'); ?>			</div>			<p class="help-block">				<?php echo JText::_('INSTL_SITE_INSTALL_SAMPLE_DESC'); ?>			</p>		</div>	</div>	<h3><?php echo JText::_('INSTL_STEP_SUMMARY_LABEL'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group" id="summary_email">		<div class="control-label">			<?php echo $this->form->getLabel('summary_email'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('summary_email'); ?>			<p class="help-block">				<?php echo JText::sprintf('INSTL_SUMMARY_EMAIL_DESC', '<span class="label">' . $this->options['admin_email'] . '</span>'); ?>			</p>		</div>	</div>	<div class="control-group" id="email_passwords" style="display:none;">		<div class="control-label">			<?php echo $this->form->getLabel('summary_email_passwords'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('summary_email_passwords'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_SUMMARY_EMAIL_PASSWORDS_DESC'); ?>			</p>		</div>	</div>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_SITE'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('INSTL_SITE_NAME_LABEL'); ?>						</td>						<td>							<?php echo $this->options['site_name']; ?>						</td>					</tr>					<?php if ($this->options['site_metadesc']) : ?>					<tr>						<td class="item">							<?php echo JText::_('INSTL_SITE_METADESC_LABEL'); ?>						</td>						<td>							<?php echo $this->options['site_metadesc']; ?>						</td>					</tr>					<?php endif; ?>					<tr>						<td class="item">							<?php echo JText::_('INSTL_SITE_OFFLINE_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['site_offline']) ? 'success' : 'important'; ?>">								<?php echo JText::_(($this->options['site_offline']) ? 'JYES' : 'JNO'); ?>							</span>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_ADMIN_EMAIL_LABEL'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_email']; ?></span>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_ADMIN_USER_LABEL'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_user']; ?></span>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_ADMIN_PASSWORD_LABEL'); ?>						</td>						<td>							<?php echo $this->options['admin_password'] ? '***': ''; ?>						</td>					</tr>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div class="span6">			<h3><?php echo JText::_('INSTL_DATABASE'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_TYPE_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_type']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_HOST_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_host']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_USER_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_user']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_PASSWORD_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_pass'] ? '***': ''; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_NAME_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_name']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_PREFIX_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_prefix']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_OLD_PROCESS_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['db_old'] == 'remove') ? 'important' : 'success'; ?>">								<?php echo JText::_(($this->options['db_old'] == 'remove') ? 'INSTL_DATABASE_FIELD_VALUE_REMOVE' : 'INSTL_DATABASE_FIELD_VALUE_BACKUP'); ?>							</span>						</td>					</tr>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>	</div>	<?php if ($useftp) : ?>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_FTP'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_ENABLE_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['ftp_enable']) ? 'success' : 'important'; ?>">								<?php echo JText::_(($this->options['ftp_enable']) ? 'JYES' : 'JNO'); ?>							</span>						</td>					</tr>					<?php if($this->options['ftp_enable']) : ?>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_USER_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_user']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_PASSWORD_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_pass'] ? '***': ''; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_HOST_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_host']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_PORT_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_port']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_SAVE_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['ftp_save']) ? 'important' : 'success'; ?>">								<?php echo JText::_(($this->options['ftp_save']) ? 'JYES' : 'JNO'); ?>							</span>						</td>					</tr>					<?php endif; ?>				</tbody>				<tfoot>				<tr>					<td colspan="2"></td>				</tr>				</tfoot>			</table>		</div>	</div>	<?php endif; ?>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_TITLE'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>				<?php foreach ($this->phpoptions as $option) : ?>					<tr>						<td class="item">							<?php echo $option->label; ?>						</td>						<td>							<span class="label label-<?php echo ($option->state) ? 'success' : 'important'; ?>">								<?php echo JText::_(($option->state) ? 'JYES' : 'JNO'); ?>								<?php if ($option->notice):?>								<i class="icon-info-sign icon-white hasTooltip" title="<?php echo $option->notice; ?>"></i>								<?php endif;?>							</span>						</td>					</tr>				<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<thead>					<tr>						<th>							<?php echo JText::_('INSTL_PRECHECK_DIRECTIVE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_ACTUAL'); ?>						</th>					</tr>				</thead>				<tbody>				<?php foreach ($this->phpsettings as $setting) : ?>					<tr>						<td>							<?php echo $setting->label; ?>						</td>						<td>							<span class="label label-success disabled">								<?php echo JText::_(($setting->recommended) ? 'JON' : 'JOFF'); ?>							</span>						</td>						<td>							<span class="label label-<?php echo ($setting->state === $setting->recommended) ? 'success' : 'warning'; ?>">								<?php echo JText::_(($setting->state) ? 'JON' : 'JOFF'); ?>							</span>						</td>					</tr>				<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="3"></td>					</tr>				</tfoot>			</table>		</div>	</div>	<input type="hidden" name="task" value="summary" />	<?php echo JHtml::_('form.token'); ?></form><script type="text/javascript">	window.addEvent('domready', function() {		document.getElements('input[name=jform[summary_email]]').each(function(el){			el.addEvent('click', function(){Install.toggle('email_passwords', 'summary_email', 1);});		});		Install.toggle('email_passwords', 'summary_email', 1);	});</script>
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Mock JSite class used to fool the frontend search plugins because they route the results. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.5 */class JSite extends JObject{	/**	 * False method to fool the frontend search plugins	 *	 * @since  1.5	 */	public function getMenu()	{		$result = new JSite;		return $result;	}	/**	 * False method to fool the frontend search plugins	 *	 * @since  1.5	 */	public function getItems()	{		return array();	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML utility class for the installation application * * @package  Joomla.Installation * @since    1.6 */class JHtmlInstallation{	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   1.6	 */	public static function stepbar()	{		// Determine if the configuration file path is writable.		$path = JPATH_CONFIGURATION . '/configuration.php';		$useftp = (file_exists($path)) ? !is_writable($path) : !is_writable(JPATH_CONFIGURATION . '/');		$tabs = array();		$tabs[] = 'site';		$tabs[] = 'database';		if ($useftp)		{			$tabs[] = 'ftp';		}		$tabs[] = 'summary';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   3.1	 */	public static function stepbarlanguages()	{		$tabs = array();		$tabs[] = 'languages';		$tabs[] = 'defaultlanguage';		$tabs[] = 'complete';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the navigation tab	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  string  Markup for the tab	 *	 * @since   3.1	 */	private static function getTab($id, $tabs)	{		$input = JFactory::getApplication()->input;		$num   = self::getTabNumber($id, $tabs);		$view  = self::getTabNumber($input->getWord('view'), $tabs);		$tab   = '<span class="badge">' . $num . '</span> ' . JText::_('INSTL_STEP_' . strtoupper($id) . '_LABEL');		if ($view + 1 == $num)		{			$tab = '<a href="#" onclick="Install.submitform();">' . $tab . '</a>';		}		elseif ($view < $num)		{			$tab = '<span>' . $tab . '</span>';		}		else		{			$tab = '<a href="#" onclick="return Install.goToPage(\'' . $id . '\')">' . $tab . '</a>';		}		return '<li class="step' . ($num == $view ? ' active' : '') . '" id="' . $id . '">' . $tab . '</li>';	}	/**	 * Method to determine the tab (step) number	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  integer  Tab number in navigation sequence	 *	 * @since   3.1	 */	private static function getTabNumber($id, $tabs)	{		$num = (int) array_search($id, $tabs);		$num++;		return $num;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Reset view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersViewReset extends JViewLegacy{	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	The template file to include	 * @since   1.5	 */	public function display($tpl = null)	{		// This name will be used to get the model		$name = $this->getLayout();		// Check that the name is valid - has an associated model.		if (!in_array($name, array('confirm', 'complete')))		{			$name = 'default';		}		if ('default' == $name)		{			$formname = 'Form';		}		else		{			$formname = ucfirst($this->_name).ucfirst($name).'Form';		}		// Get the view data.		$this->form	= $this->get($formname);		$this->state	= $this->get('State');		$this->params	= $this->state->params;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document.	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_RESET'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('bootstrap.tooltip');?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="login-form" class="form-inline">	<?php if ($params->get('pretext')) : ?>		<div class="pretext">		<p><?php echo $params->get('pretext'); ?></p>		</div>	<?php endif; ?>	<div class="userdata">		<div id="form-login-username" class="control-group">			<div class="controls">				<?php if (!$params->get('usetext')) : ?>					<div class="input-prepend input-append">						<span class="add-on">							<span class="icon-user tip" title="<?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?>"></span>							<label for="modlgn-username" class="element-invisible"><?php echo JText::_('MOD_LOGIN_VALUE_USERNAME'); ?></label>						</span>						<input id="modlgn-username" type="text" name="username" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?>" />					</div>				<?php else: ?>					<label for="modlgn-username"><?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?></label>						<input id="modlgn-username" type="text" name="username" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?>" />				<?php endif; ?>			</div>		</div>		<div id="form-login-password" class="control-group">			<div class="controls">				<?php if (!$params->get('usetext')) : ?>					<div class="input-prepend input-append">						<span class="add-on">							<span class="icon-lock tip" title="<?php echo JText::_('JGLOBAL_PASSWORD') ?>">							</span>								<label for="modlgn-passwd" class="element-invisible"><?php echo JText::_('JGLOBAL_PASSWORD'); ?>							</label>						</span>						<input id="modlgn-passwd" type="password" name="password" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('JGLOBAL_PASSWORD') ?>" />				</div>				<?php else: ?>					<label for="modlgn-passwd"><?php echo JText::_('JGLOBAL_PASSWORD') ?></label>					<input id="modlgn-passwd" type="password" name="password" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('JGLOBAL_PASSWORD') ?>" />				<?php endif; ?>			</div>		</div>		<?php if (JPluginHelper::isEnabled('system', 'remember')) : ?>		<div id="form-login-remember" class="control-group checkbox">			<label for="modlgn-remember" class="control-label"><?php echo JText::_('MOD_LOGIN_REMEMBER_ME') ?></label> <input id="modlgn-remember" type="checkbox" name="remember" class="inputbox" value="yes"/>		</div>		<?php endif; ?>		<div id="form-login-submit" class="control-group">			<div class="controls">				<button type="submit" tabindex="0" name="Submit" class="btn btn-primary"><?php echo JText::_('JLOGIN') ?></button>			</div>		</div>		<?php			$usersConfig = JComponentHelper::getParams('com_users');			if ($usersConfig->get('allowUserRegistration')) : ?>			<ul class="unstyled">				<li>					<a href="<?php echo JRoute::_('index.php?option=com_users&view=registration'); ?>">					<?php echo JText::_('MOD_LOGIN_REGISTER'); ?> <span class="icon-arrow-right"></span></a>				</li>				<li>					<a href="<?php echo JRoute::_('index.php?option=com_users&view=remind'); ?>">					  <?php echo JText::_('MOD_LOGIN_FORGOT_YOUR_USERNAME'); ?></a>				</li>				<li>					<a href="<?php echo JRoute::_('index.php?option=com_users&view=reset'); ?>"><?php echo JText::_('MOD_LOGIN_FORGOT_YOUR_PASSWORD'); ?></a>				</li>			</ul>		<?php endif; ?>		<input type="hidden" name="option" value="com_users" />		<input type="hidden" name="task" value="user.login" />		<input type="hidden" name="return" value="<?php echo $return; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div>	<?php if ($params->get('posttext')) : ?>		<div class="posttext">		<p><?php echo $params->get('posttext'); ?></p>		</div>	<?php endif; ?></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_whosonline * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the whosonline functions only oncerequire_once __DIR__ . '/helper.php';$showmode = $params->get('showmode', 0);if ($showmode == 0 || $showmode == 2){	$count	= ModWhosonlineHelper::getOnlineCount();}if ($showmode > 0){	$names	= ModWhosonlineHelper::getOnlineUserNames($params);}$linknames = $params->get('linknames', 0);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_whosonline', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Search HTML view class for the Finder package. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderViewSearch extends JViewLegacy{	protected $query;	protected $params;	protected $state;	protected $user;	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  JError object on failure, void on success.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		$app = JFactory::getApplication();		$params = $app->getParams();		// Get view data.		$state = $this->get('State');		$query = $this->get('Query');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderQuery') : null;		$results = $this->get('Results');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderResults') : null;		$total = $this->get('Total');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderTotal') : null;		$pagination = $this->get('Pagination');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderPagination') : null;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Configure the pathway.		if (!empty($query->input))		{			$app->getPathWay()->addItem($this->escape($query->input));		}		// Push out the view data.		$this->state = &$state;		$this->params = &$params;		$this->query = &$query;		$this->results = &$results;		$this->total = &$total;		$this->pagination = &$pagination;		// Check for a double quote in the query string.		if (strpos($this->query->input, '"'))		{			// Get the application router.			$router =& $app->getRouter();			// Fix the q variable in the URL.			if ($router->getVar('q') !== $this->query->input)			{				$router->setVar('q', $this->query->input);			}		}		// Log the search		JSearchHelper::logSearch($this->query->input, 'com_finder');		// Push out the query data.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		$this->suggested = JHtml::_('query.suggested', $query);		$this->explained = JHtml::_('query.explained', $query);		// Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active = $app->getMenu()->getActive();		if (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$this->prepareDocument($query);		JDEBUG ? $GLOBALS['_PROFILER']->mark('beforeFinderLayout') : null;		parent::display($tpl);		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderLayout') : null;	}	/**	 * Method to get hidden input fields for a get form so that control variables	 * are not lost upon form submission	 *	 * @return  string  A string of hidden input form fields	 *	 * @since   2.5	 */	protected function getFields()	{		$fields = null;		// Get the URI.		$uri = JUri::getInstance(JRoute::_($this->query->toURI()));		$uri->delVar('q');		$uri->delVar('o');		$uri->delVar('t');		$uri->delVar('d1');		$uri->delVar('d2');		$uri->delVar('w1');		$uri->delVar('w2');		$elements = $uri->getQuery(true);		// Create hidden input elements for each part of the URI.		foreach ($elements as $n => $v)		{			if (is_scalar($v))			{				$fields .= '<input type="hidden" name="' . $n . '" value="' . $v . '" />';			}		}		return $fields;	}	/**	 * Method to get the layout file for a search result object.	 *	 * @param   string  $layout  The layout file to check. [optional]	 *	 * @return  string  The layout file to use.	 *	 * @since   2.5	 */	protected function getLayoutFile($layout = null)	{		// Create and sanitize the file name.		$file = $this->_layout . '_' . preg_replace('/[^A-Z0-9_\.-]/i', '', $layout);		// Check if the file exists.		jimport('joomla.filesystem.path');		$filetofind = $this->_createFileName('template', array('name' => $file));		$exists = JPath::find($this->_path['template'], $filetofind);		return ($exists ? $layout : 'result');	}	/**	 * Prepares the document	 *	 * @param   FinderIndexerQuery  $query  The search query	 *	 * @return  void	 *	 * @since   2.5	 */	protected function prepareDocument($query)	{		$app = JFactory::getApplication();		$menus = $app->getMenu();		$title = null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_FINDER_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($layout = $this->params->get('article_layout'))		{			$this->setLayout($layout);		}		// Configure the document meta-description.		if (!empty($this->explained))		{			$explained = $this->escape(html_entity_decode(strip_tags($this->explained), ENT_QUOTES, 'UTF-8'));			$this->document->setDescription($explained);		}		// Configure the document meta-keywords.		if (!empty($query->highlight))		{			$this->document->setMetadata('keywords', implode(', ', $query->highlight));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		// Add feed link to the document head.		if ($this->params->get('show_feed_link', 1) == 1)		{			// Add the RSS link.			$props = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$route = JRoute::_($this->query->toURI() . '&format=feed&type=rss');			$this->document->addHeadLink($route, 'alternate', 'rel', $props);			// Add the ATOM link.			$props = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$route = JRoute::_($this->query->toURI() . '&format=feed&type=atom');			$this->document->addHeadLink($route, 'alternate', 'rel', $props);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// Detect if we have full UTF-8 and unicode PCRE support.if (!defined('JCOMPAT_UNICODE_PROPERTIES')){	define('JCOMPAT_UNICODE_PROPERTIES', (bool) @preg_match('/\pL/u', 'a'));}/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $regex;	/**	 * The regular expression modifiers to use when testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $modifiers;	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  UnexpectedValueException if rule is invalid.	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Check for a valid regex.		if (empty($this->regex))		{			throw new UnexpectedValueException(sprintf('%s has invalid regex.', get_class($this)));		}		// Add unicode property support if available.		if (JCOMPAT_UNICODE_PROPERTIES)		{			$this->modifiers = (strpos($this->modifiers, 'u') !== false) ? $this->modifiers : $this->modifiers . 'u';		}		// Test the value against the regular expression.		if (preg_match(chr(1) . $this->regex . chr(1) . $this->modifiers, $value))		{			return true;		}		return false;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * XCache cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @link        http://xcache.lighttpd.net/ * @since       11.1 */class JCacheStorageXcache extends JCacheStorage{	/**	 * Get cached data by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean false on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		$cache_content = xcache_get($cache_id);		if ($cache_content === null)		{			return false;		}		return $cache_content;	}	/**	 * Get all cached data	 *	 * This requires the php.ini setting xcache.admin.enable_auth = Off.	 *	 * @return  array  data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$allinfo = xcache_list(XC_TYPE_VAR, 0);		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		$data = array();		foreach ($keys as $key)		{			$namearr = explode('-', $key['name']);			if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')			{				$group = $namearr[2];				if (!isset($data[$group]))				{					$item = new JCacheStorageHelper($group);				}				else				{					$item = $data[$group];				}				$item->updateSize($key['size'] / 1024);				$data[$group] = $item;			}		}		return $data;	}	/**	 * Store the data by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		$store = xcache_set($cache_id, $data, $this->_lifetime);		return $store;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		if (!xcache_isset($cache_id))		{			return true;		}		return xcache_unset($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * This requires the php.ini setting xcache.admin.enable_auth = Off.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 * group mode  : cleans all cache in the group	 * notgroup mode  : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		$allinfo = xcache_list(XC_TYPE_VAR, 0);		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['name'], $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				xcache_unset($key['name']);			}		}		return true;	}	/**	 * Garbage collect expired cache data	 *	 * This is a dummy, since xcache has built in garbage collector, turn it	 * on in php.ini by changing default xcache.gc_interval setting from	 * 0 to 3600 (=1 hour)	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		/*		$now = time();		$cachecount = xcache_count(XC_TYPE_VAR);			for ($i = 0; $i < $cachecount; $i ++) {				$allinfo  = xcache_list(XC_TYPE_VAR, $i);				$keys = $allinfo ['cache_list'];				foreach($keys as $key) {					if (strstr($key['name'], $this->_hash)) {						if (($key['ctime'] + $this->_lifetime ) < $this->_now) xcache_unset($key['name']);					}				}			}		 */		return true;	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (extension_loaded('xcache'));	}}
<?php/** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FunctionCallSignatureSniff.php 284575 2009-07-22 02:58:19Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Functions_FunctionCallSignatureSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_STRING);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Find the next non-empty token.        $openBracket = $phpcsFile->findNext(PHP_CodeSniffer_Tokens::$emptyTokens, ($stackPtr + 1), null, true);        if ($tokens[$openBracket]['code'] !== T_OPEN_PARENTHESIS) {            // Not a function call.            return;        }        if (isset($tokens[$openBracket]['parenthesis_closer']) === false) {            // Not a function call.            return;        }        // Find the previous non-empty token.        $search   = PHP_CodeSniffer_Tokens::$emptyTokens;        $search[] = T_BITWISE_AND;        $previous = $phpcsFile->findPrevious($search, ($stackPtr - 1), null, true);        if ($tokens[$previous]['code'] === T_FUNCTION) {            // It's a function definition, not a function call.            return;        }        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        if (($stackPtr + 1) !== $openBracket) {            // Checking this: $value = my_function[*](...).            $error = 'Space before opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceBeforeOpenBracket');        }        $next = $phpcsFile->findNext(T_WHITESPACE, ($closeBracket + 1), null, true);        if ($tokens[$next]['code'] === T_SEMICOLON) {            if (in_array($tokens[($closeBracket + 1)]['code'], PHP_CodeSniffer_Tokens::$emptyTokens) === true) {                $error = 'Space after closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closeBracket, 'SpaceAfterCloseBracket');            }        }        // Check if this is a single line or multi-line function call.        if ($tokens[$openBracket]['line'] === $tokens[$closeBracket]['line']) {            $this->processSingleLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        } else {            $this->processMultiLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        }    }//end process()    /**     * Processes single-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processSingleLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        if ($tokens[($openBracket + 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function([*]...).            $error = 'Space after opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceAfterOpenBracket');        }        $closer = $tokens[$openBracket]['parenthesis_closer'];        if ($tokens[($closer - 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function(...[*]).            $between = $phpcsFile->findNext(T_WHITESPACE, ($openBracket + 1), null, true);            // Only throw an error if there is some content between the parenthesis.            // i.e., Checking for this: $value = my_function().            // If there is no content, then we would have thrown an error in the            // previous IF statement because it would look like this:            // $value = my_function( ).            if ($between !== $closer) {                $error = 'Space before closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closer, 'SpaceBeforeCloseBracket');            }        }    }//end processSingleLineCall()    /**     * Processes multi-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processMultiLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        // We need to work out how far indented the function        // call itself is, so we can work out how far to        // indent the arguments.        $functionIndent = 0;        for ($i = ($stackPtr - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$stackPtr]['line']) {                $i++;                break;            }        }        if ($tokens[$i]['code'] === T_WHITESPACE) {            $functionIndent = strlen($tokens[$i]['content']);        }        // Each line between the parenthesis should be indented 4 spaces.        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        $lastLine     = $tokens[$openBracket]['line'];        for ($i = ($openBracket + 1); $i < $closeBracket; $i++) {            // Skip nested function calls.            if ($tokens[$i]['code'] === T_OPEN_PARENTHESIS) {                $i        = $tokens[$i]['parenthesis_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }            if ($tokens[$i]['line'] !== $lastLine) {                $lastLine = $tokens[$i]['line'];                // We changed lines, so this should be a whitespace indent token.                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$heredocTokens) === true) {                    // Ignore heredoc indentation.                    continue;                }                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$stringTokens) === true) {                    if ($tokens[$i]['code'] === $tokens[($i - 1)]['code']) {                        // Ignore multi-line string indentation.                        continue;                    }                }                if ($tokens[$i]['line'] === $tokens[$closeBracket]['line']) {                    // Closing brace needs to be indented to the same level                    // as the function call.                    $expectedIndent = $functionIndent;                } else {                    $expectedIndent = ($functionIndent + 4);                }                if ($tokens[$i]['code'] !== T_WHITESPACE) {                    $foundIndent = 0;                } else {                    $foundIndent = strlen($tokens[$i]['content']);                }                if ($expectedIndent !== $foundIndent) {// TODO AJE Allow for tab indents instead of spaces//                    $error = 'Multi-line function call not indented correctly; expected %s spaces but found %s';//                    $data  = array(//                              $expectedIndent,//                              $foundIndent,//                             );//                    $phpcsFile->addError($error, $i, 'Indent', $data);                }            }//end if            // Skip the rest of a closure.            if ($tokens[$i]['code'] === T_CLOSURE) {                $i        = $tokens[$i]['scope_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }        }//end for        if ($tokens[($openBracket + 1)]['content'] !== $phpcsFile->eolChar        && T_CONSTANT_ENCAPSED_STRING != $tokens[($openBracket + 1)]['code'])// allow a '"'        {            $error = 'Opening parenthesis of a multi-line function call must be the last content on the line';            $phpcsFile->addError($error, $stackPtr, 'ContentAfterOpenBracket');        }        $prev = $phpcsFile->findPrevious(T_WHITESPACE, ($closeBracket - 1), null, true);        if ($tokens[$prev]['line'] === $tokens[$closeBracket]['line']        && T_CONSTANT_ENCAPSED_STRING != $tokens[$prev]['code'])// allow a '"'        {            $error = 'Closing parenthesis of a multi-line function call must be on a line by itself';            $phpcsFile->addError($error, $closeBracket, 'CloseBracketLine');        }    }//end processMultiLineCall()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MODULES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($label); ?></legend>		<?php $hidden_fields = ''; ?>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<?php if (!$field->hidden) : ?>			<li>				<?php echo $field->label; ?>				<?php echo $field->input; ?>			</li>			<?php else : $hidden_fields .= $field->input; ?>			<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php echo $hidden_fields; ?>		</fieldset>	<?php endforeach; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL import driver. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseImporterMysql extends JDatabaseImporterMysqli{	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverMysql))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Sets the database connector to use for exporting structure and/or data from MySQL.	 *	 * @param   JDatabaseDriverMysql  $db  The database connector.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function setDbo(JDatabaseDriverMysql $db)	{		$this->db = $db;		return $this;	}}
<?php/*** Utilities for processing "special" characters in UTF-8. "Special" largely means anything which would* be regarded as a non-word character, like ASCII control characters and punctuation. This has a "Roman"* bias - it would be unaware of modern Chinese "punctuation" characters for example.* Note: requires utils/unicode.php to be loaded* @version $Id$* @package utf8* @subpackage utils* @see utf8_is_valid*///--------------------------------------------------------------------/*** Used internally. Builds a PCRE pattern from the $UTF8_SPECIAL_CHARS* array defined in this file* The $UTF8_SPECIAL_CHARS should contain all special characters (non-letter/non-digit)* defined in the various local charsets - it's not a complete list of* non-alphanum characters in UTF-8. It's not perfect but should match most* cases of special chars.* This function adds the control chars 0x00 to 0x19 to the array of* special chars (they are not included in $UTF8_SPECIAL_CHARS)* @package utf8* @subpackage utils* @return string* @see utf8_from_unicode* @see utf8_is_word_chars* @see utf8_strip_specials*/function utf8_specials_pattern() {    static $pattern = NULL;    if ( !$pattern ) {        $UTF8_SPECIAL_CHARS = array(    0x001a, 0x001b, 0x001c, 0x001d, 0x001e, 0x001f, 0x0020, 0x0021, 0x0022, 0x0023,    0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002a, 0x002b, 0x002c,    0x002f,         0x003b, 0x003c, 0x003d, 0x003e, 0x003f, 0x0040, 0x005b,    0x005c, 0x005d, 0x005e,         0x0060, 0x007b, 0x007c, 0x007d, 0x007e,    0x007f, 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088,    0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f, 0x0090, 0x0091, 0x0092,    0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009a, 0x009b, 0x009c,    0x009d, 0x009e, 0x009f, 0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6,    0x00a7, 0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af, 0x00b0,    0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7, 0x00b8, 0x00b9, 0x00ba,    0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf, 0x00d7, 0x00f7, 0x02c7, 0x02d8, 0x02d9,    0x02da, 0x02db, 0x02dc, 0x02dd, 0x0300, 0x0301, 0x0303, 0x0309, 0x0323, 0x0384,    0x0385, 0x0387, 0x03b2, 0x03c6, 0x03d1, 0x03d2, 0x03d5, 0x03d6, 0x05b0, 0x05b1,    0x05b2, 0x05b3, 0x05b4, 0x05b5, 0x05b6, 0x05b7, 0x05b8, 0x05b9, 0x05bb, 0x05bc,    0x05bd, 0x05be, 0x05bf, 0x05c0, 0x05c1, 0x05c2, 0x05c3, 0x05f3, 0x05f4, 0x060c,    0x061b, 0x061f, 0x0640, 0x064b, 0x064c, 0x064d, 0x064e, 0x064f, 0x0650, 0x0651,    0x0652, 0x066a, 0x0e3f, 0x200c, 0x200d, 0x200e, 0x200f, 0x2013, 0x2014, 0x2015,    0x2017, 0x2018, 0x2019, 0x201a, 0x201c, 0x201d, 0x201e, 0x2020, 0x2021, 0x2022,    0x2026, 0x2030, 0x2032, 0x2033, 0x2039, 0x203a, 0x2044, 0x20a7, 0x20aa, 0x20ab,    0x20ac, 0x2116, 0x2118, 0x2122, 0x2126, 0x2135, 0x2190, 0x2191, 0x2192, 0x2193,    0x2194, 0x2195, 0x21b5, 0x21d0, 0x21d1, 0x21d2, 0x21d3, 0x21d4, 0x2200, 0x2202,    0x2203, 0x2205, 0x2206, 0x2207, 0x2208, 0x2209, 0x220b, 0x220f, 0x2211, 0x2212,    0x2215, 0x2217, 0x2219, 0x221a, 0x221d, 0x221e, 0x2220, 0x2227, 0x2228, 0x2229,    0x222a, 0x222b, 0x2234, 0x223c, 0x2245, 0x2248, 0x2260, 0x2261, 0x2264, 0x2265,    0x2282, 0x2283, 0x2284, 0x2286, 0x2287, 0x2295, 0x2297, 0x22a5, 0x22c5, 0x2310,    0x2320, 0x2321, 0x2329, 0x232a, 0x2469, 0x2500, 0x2502, 0x250c, 0x2510, 0x2514,    0x2518, 0x251c, 0x2524, 0x252c, 0x2534, 0x253c, 0x2550, 0x2551, 0x2552, 0x2553,    0x2554, 0x2555, 0x2556, 0x2557, 0x2558, 0x2559, 0x255a, 0x255b, 0x255c, 0x255d,    0x255e, 0x255f, 0x2560, 0x2561, 0x2562, 0x2563, 0x2564, 0x2565, 0x2566, 0x2567,    0x2568, 0x2569, 0x256a, 0x256b, 0x256c, 0x2580, 0x2584, 0x2588, 0x258c, 0x2590,    0x2591, 0x2592, 0x2593, 0x25a0, 0x25b2, 0x25bc, 0x25c6, 0x25ca, 0x25cf, 0x25d7,    0x2605, 0x260e, 0x261b, 0x261e, 0x2660, 0x2663, 0x2665, 0x2666, 0x2701, 0x2702,    0x2703, 0x2704, 0x2706, 0x2707, 0x2708, 0x2709, 0x270c, 0x270d, 0x270e, 0x270f,    0x2710, 0x2711, 0x2712, 0x2713, 0x2714, 0x2715, 0x2716, 0x2717, 0x2718, 0x2719,    0x271a, 0x271b, 0x271c, 0x271d, 0x271e, 0x271f, 0x2720, 0x2721, 0x2722, 0x2723,    0x2724, 0x2725, 0x2726, 0x2727, 0x2729, 0x272a, 0x272b, 0x272c, 0x272d, 0x272e,    0x272f, 0x2730, 0x2731, 0x2732, 0x2733, 0x2734, 0x2735, 0x2736, 0x2737, 0x2738,    0x2739, 0x273a, 0x273b, 0x273c, 0x273d, 0x273e, 0x273f, 0x2740, 0x2741, 0x2742,    0x2743, 0x2744, 0x2745, 0x2746, 0x2747, 0x2748, 0x2749, 0x274a, 0x274b, 0x274d,    0x274f, 0x2750, 0x2751, 0x2752, 0x2756, 0x2758, 0x2759, 0x275a, 0x275b, 0x275c,    0x275d, 0x275e, 0x2761, 0x2762, 0x2763, 0x2764, 0x2765, 0x2766, 0x2767, 0x277f,    0x2789, 0x2793, 0x2794, 0x2798, 0x2799, 0x279a, 0x279b, 0x279c, 0x279d, 0x279e,    0x279f, 0x27a0, 0x27a1, 0x27a2, 0x27a3, 0x27a4, 0x27a5, 0x27a6, 0x27a7, 0x27a8,    0x27a9, 0x27aa, 0x27ab, 0x27ac, 0x27ad, 0x27ae, 0x27af, 0x27b1, 0x27b2, 0x27b3,    0x27b4, 0x27b5, 0x27b6, 0x27b7, 0x27b8, 0x27b9, 0x27ba, 0x27bb, 0x27bc, 0x27bd,    0x27be, 0xf6d9, 0xf6da, 0xf6db, 0xf8d7, 0xf8d8, 0xf8d9, 0xf8da, 0xf8db, 0xf8dc,    0xf8dd, 0xf8de, 0xf8df, 0xf8e0, 0xf8e1, 0xf8e2, 0xf8e3, 0xf8e4, 0xf8e5, 0xf8e6,    0xf8e7, 0xf8e8, 0xf8e9, 0xf8ea, 0xf8eb, 0xf8ec, 0xf8ed, 0xf8ee, 0xf8ef, 0xf8f0,    0xf8f1, 0xf8f2, 0xf8f3, 0xf8f4, 0xf8f5, 0xf8f6, 0xf8f7, 0xf8f8, 0xf8f9, 0xf8fa,    0xf8fb, 0xf8fc, 0xf8fd, 0xf8fe, 0xfe7c, 0xfe7d,            );        $pattern = preg_quote(utf8_from_unicode($UTF8_SPECIAL_CHARS), '/');        $pattern = '/[\x00-\x19'.$pattern.']/u';    }    return $pattern;}//--------------------------------------------------------------------/*** Checks a string for whether it contains only word characters. This* is logically equivalent to the \w PCRE meta character. Note that* this is not a 100% guarantee that the string only contains alpha /* numeric characters but just that common non-alphanumeric are not* in the string, including ASCII device control characters.* @package utf8* @subpackage utils* @param string to check* @return boolean TRUE if the string only contains word characters* @see utf8_specials_pattern*/function utf8_is_word_chars($str) {    return !(bool)preg_match(utf8_specials_pattern(),$str);}//--------------------------------------------------------------------/*** Removes special characters (nonalphanumeric) from a UTF-8 string** This can be useful as a helper for sanitizing a string for use as* something like a file name or a unique identifier. Be warned though* it does not handle all possible non-alphanumeric characters and is* not intended is some kind of security / injection filter.** @package utf8* @subpackage utils* @author Andreas Gohr <andi@splitbrain.org>* @param string $string The UTF8 string to strip of special chars* @param string (optional) $repl   Replace special with this string* @return string with common non-alphanumeric characters removed* @see utf8_specials_pattern*/function utf8_strip_specials($string, $repl=''){    return preg_replace(utf8_specials_pattern(), $repl, $string);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');?><?php echo JHtml::_('access.usergroups', 'jform[groups]', $this->groups, true); ?>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Rest model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersModelLogin extends JModelForm{	/**	 * Method to get the login form.	 *	 * The base form is loaded from XML and then an event is fired	 * for users plugins to extend the form with extra fields.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.login', 'login', array('load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  array  The default data is an empty array.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered login form data.		$app  = JFactory::getApplication();		$data = $app->getUserState('users.login.form.data', array());		// check for return URL from the request first		if ($return = JRequest::getVar('return', '', 'method', 'base64'))		{			$data['return'] = base64_decode($return);			if (!JURI::isInternal($data['return']))			{				$data['return'] = '';			}		}		// Set the return URL if empty.		if (!isset($data['return']) || empty($data['return']))		{			$data['return'] = 'index.php?option=com_users&view=profile';		}		$app->setUserState('users.login.form.data', $data);		$this->preprocessData('com_users.login', $data);		return $data;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$params	= JFactory::getApplication()->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Override JModelAdmin::preprocessForm to ensure the correct plugin group is loaded.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Cookie Class * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 */class JInputCookie extends JInput{	/**	 * Constructor.	 *	 * @param   array  $source   Ignored.	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   11.1	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		// Set the data source.		$this->data = & $_COOKIE;		// Set the options for the class.		$this->options = $options;	}	/**	 * Sets a value	 *	 * @param   string   $name      Name of the value to set.	 * @param   mixed    $value     Value to assign to the input.	 * @param   integer  $expire    The time the cookie expires. This is a Unix timestamp so is in number	 *                              of seconds since the epoch. In other words, you'll most likely set this	 *                              with the time() function plus the number of seconds before you want it	 *                              to expire. Or you might use mktime(). time()+60*60*24*30 will set the	 *                              cookie to expire in 30 days. If set to 0, or omitted, the cookie will	 *                              expire at the end of the session (when the browser closes).	 * @param   string   $path      The path on the server in which the cookie will be available on. If set	 *                              to '/', the cookie will be available within the entire domain. If set to	 *                              '/foo/', the cookie will only be available within the /foo/ directory and	 *                              all sub-directories such as /foo/bar/ of domain. The default value is the	 *                              current directory that the cookie is being set in.	 * @param   string   $domain    The domain that the cookie is available to. To make the cookie available	 *                              on all subdomains of example.com (including example.com itself) then you'd	 *                              set it to '.example.com'. Although some browsers will accept cookies without	 *                              the initial ., RFC 2109 requires it to be included. Setting the domain to	 *                              'www.example.com' or '.www.example.com' will make the cookie only available	 *                              in the www subdomain.	 * @param   boolean  $secure    Indicates that the cookie should only be transmitted over a secure HTTPS	 *                              connection from the client. When set to TRUE, the cookie will only be set	 *                              if a secure connection exists. On the server-side, it's on the programmer	 *                              to send this kind of cookie only on secure connection (e.g. with respect	 *                              to $_SERVER["HTTPS"]).	 * @param   boolean  $httpOnly  When TRUE the cookie will be made accessible only through the HTTP protocol.	 *                              This means that the cookie won't be accessible by scripting languages, such	 *                              as JavaScript. This setting can effectively help to reduce identity theft	 *                              through XSS attacks (although it is not supported by all browsers).	 *	 * @return  void	 *	 * @link    http://www.ietf.org/rfc/rfc2109.txt	 * @see     setcookie()	 * @since   11.1	 */	public function set($name, $value, $expire = 0, $path = '', $domain = '', $secure = false, $httpOnly = false)	{		setcookie($name, $value, $expire, $path, $domain, $secure, $httpOnly);		$this->data[$name] = $value;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla MessageQueue logger class. * * This class is designed to output logs to a specific MySQL database table. Fields in this * table are based on the Syslog style of log output. This is designed to allow quick and * easy searching. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerMessagequeue extends JLogLogger{	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addEntry(JLogEntry $entry)	{		switch ($entry->priority)		{			case JLog::EMERGENCY:			case JLog::ALERT:			case JLog::CRITICAL:			case JLog::ERROR:				JFactory::getApplication()->enqueueMessage($entry->message, 'error');				break;			case JLog::WARNING:				JFactory::getApplication()->enqueueMessage($entry->message, 'warning');				break;			case JLog::NOTICE:				JFactory::getApplication()->enqueueMessage($entry->message, 'notice');				break;			case JLog::INFO:				JFactory::getApplication()->enqueueMessage($entry->message, 'message');				break;			default:				// Ignore other priorities.				break;		}	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Joomla Core Install Remove View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewRemoveHtml extends JViewHtml{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Download model. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersModelDownload extends JModelForm{	protected $_context = 'com_banners.tracks';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$input = JFactory::getApplication()->input;		$basename = $input->cookie->getString(JApplication::getHash($this->_context.'.basename'), '__SITE__');		$this->setState('basename', $basename);		$compressed = $input->cookie->getInt(JApplication::getHash($this->_context.'.compressed'), 1);		$this->setState('compressed', $compressed);	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_banners.download', 'download', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		$data = array(			'basename'		=> $this->getState('basename'),			'compressed'	=> $this->getState('compressed')		);		$this->preprocessData('com_banners.download', $data);		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset>	<legend>		<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_COMPLETE_HEADING') ?>	</legend>	<p>		<?php echo JText::sprintf('COM_JOOMLAUPDATE_VIEW_COMPLETE_MESSAGE', JVERSION); ?>	</p></fieldset>
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one PostgreSQL DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       3.0 */class JSchemaChangeitemPostgresql extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  3.0	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand === 'ADD COLUMN')			{				$result = 'SELECT column_name FROM information_schema.columns WHERE table_name='				. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD_COLUMN';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand === 'ALTER COLUMN')			{				if (strtoupper($wordArray[6]) == 'TYPE')				{					$type = '';					for ($i = 7; $i < count($wordArray); $i++)					{						$type .= $wordArray[$i] . ' ';					}					if ($pos = strpos($type, '('))					{						$type = substr($type, 0, $pos);					}					if ($pos = strpos($type, ';'))					{						$type = substr($type, 0, $pos);					}					$result = 'SELECT column_name, data_type FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND data_type=' . $this->fixQuote($type);					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $type);				}				elseif (strtoupper($wordArray[7] . ' ' . $wordArray[8]) == 'NOT NULL')				{					if (strtoupper($wordArray[6]) == 'SET')					{						// SET NOT NULL						$isNullable = $this->fixQuote('NO');					}					else					{						// DROP NOT NULL						$isNullable = $this->fixQuote('YES');					}					$result = 'SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND is_nullable=' . $isNullable;					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->checkQueryExpected = 1;					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $isNullable);				}				elseif (strtoupper($wordArray[7]) === 'DEFAULT')				{					if (strtoupper($wordArray[6]) == 'SET')					{						$isNullDef = 'IS NOT NULL';					}					else					{						// DROP DEFAULT						$isNullDef = 'IS NULL';					}					$result = 'SELECT column_name, data_type, column_default FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND column_default ' . $isNullDef;					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->checkQueryExpected = 1;					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $isNullDef);				}			}		}		elseif ($command === 'DROP INDEX')		{			if (strtoupper($wordArray[2] . $wordArray[3]) == 'IFEXISTS')			{				$idx = $this->fixQuote($wordArray[4]);			}			else			{				$idx = $this->fixQuote($wordArray[2]);			}			$result = 'SELECT * FROM pg_indexes WHERE indexname=' . $idx;			$this->queryType = 'DROP_INDEX';			$this->checkQueryExpected = 0;			$this->msgElements = array($this->fixQuote($idx));		}		elseif ($command == 'CREATE INDEX' || (strtoupper($command . $wordArray[2]) == 'CREATE UNIQUE INDEX'))		{			if ($wordArray[1] === 'UNIQUE')			{				$idx = $this->fixQuote($wordArray[3]);				$table = $this->fixQuote($wordArray[5]);			}			else			{				$idx = $this->fixQuote($wordArray[2]);				$table = $this->fixQuote($wordArray[4]);			}			$result = 'SELECT * FROM pg_indexes WHERE indexname=' . $idx . ' AND tablename=' . $table;			$this->queryType = 'ADD_INDEX';			$this->checkQueryExpected = 1;			$this->msgElements = array($table, $idx);		}		if ($command == 'CREATE TABLE')		{			if (strtoupper($wordArray[2] . $wordArray[3] . $wordArray[4]) == 'IFNOTEXISTS')			{				$table = $this->fixQuote($wordArray[5]);			}			else			{				$table = $this->fixQuote($wordArray[2]);			}			$result = 'SELECT table_name FROM information_schema.tables WHERE table_name=' . $table;			$this->queryType = 'CREATE_TABLE';			$this->checkQueryExpected = 1;			$this->msgElements = array($table);		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with PostgreSQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   3.0	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == 'integer' && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'unsigned int(10)';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   3.0	 */	private function fixQuote($string)	{		$string = str_replace('"', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');?><div class="reset-confirm<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=reset.confirm'); ?>" method="post" class="form-validate">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<dl>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<dt><?php echo $field->label; ?></dt>				<dd><?php echo $field->input; ?></dd>			<?php endforeach; ?>			</dl>		</fieldset>		<?php endforeach; ?>		<div>			<button type="submit" class="validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleTel extends JFormRule{	/**	 * Method to test the url for a valid parts.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		/*		 * @see http://www.nanpa.com/		 * @see http://tools.ietf.org/html/rfc4933		 * @see http://www.itu.int/rec/T-REC-E.164/en		 *		 * Regex by Steve Levithan		 * @see http://blog.stevenlevithan.com/archives/validate-phone-number		 * @note that valid ITU-T and EPP must begin with +.		 */		$regexarray = array('NANP' => '/^(?:\+?1[-. ]?)?\(?([2-9][0-8][0-9])\)?[-. ]?([2-9][0-9]{2})[-. ]?([0-9]{4})$/',			'ITU-T' => '/^\+(?:[0-9] ?){6,14}[0-9]$/', 'EPP' => '/^\+[0-9]{1,3}\.[0-9]{4,14}(?:x.+)?$/');		if (isset($element['plan']))		{			$plan = (string) $element['plan'];			if ($plan == 'northamerica' || $plan == 'us')			{				$plan = 'NANP';			}			elseif ($plan == 'International' || $plan == 'int' || $plan == 'missdn' || !$plan)			{				$plan = 'ITU-T';			}			elseif ($plan == 'IETF')			{				$plan = 'EPP';			}			$regex = $regexarray[$plan];			// Test the value against the regular expression.			if (preg_match($regex, $value) == false)			{				return false;			}		}		else		{			/*			 * If the rule is set but no plan is selected just check that there are between			 * 7 and 15 digits inclusive and no illegal characters (but common number separators			 * are allowed).			 */			$cleanvalue = preg_replace('/[+. \-(\)]/', '', $value);			$regex = '/^[0-9]{7,15}?$/';			if (preg_match($regex, $cleanvalue) == true)			{				return true;			}			else			{				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform String Normalise Class * * @package     Joomla.Platform * @subpackage  String * @since       11.3 */abstract class JStringNormalise{	/**	 * Method to convert a string from camel case.	 *	 * This method offers two modes. Grouped allows for splitting on groups of uppercase characters as follows:	 *	 * "FooBarABCDef"            becomes  array("Foo", "Bar", "ABC", "Def")	 * "JFooBar"                 becomes  array("J", "Foo", "Bar")	 * "J001FooBar002"           becomes  array("J001", "Foo", "Bar002")	 * "abcDef"                  becomes  array("abc", "Def")	 * "abc_defGhi_Jkl"          becomes  array("abc_def", "Ghi_Jkl")	 * "ThisIsA_NASAAstronaut"   becomes  array("This", "Is", "A_NASA", "Astronaut"))	 * "JohnFitzgerald_Kennedy"  becomes  array("John", "Fitzgerald_Kennedy"))	 *	 * Non-grouped will split strings at each uppercase character.	 *	 * @param   string   $input    The string input (ASCII only).	 * @param   boolean  $grouped  Optionally allows splitting on groups of uppercase characters.	 *	 * @return  string  The space separated string.	 *	 * @since   12.1	 */	public static function fromCamelCase($input, $grouped = false)	{		return $grouped			? preg_split('/(?<=[^A-Z_])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][^A-Z_])/x', $input)			: trim(preg_replace('#([A-Z])#', ' $1', $input));	}	/**	 * Method to convert a string into camel case.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The camel case string.	 *	 * @since   11.3	 */	public static function toCamelCase($input)	{		// Convert words to uppercase and then remove spaces.		$input = self::toSpaceSeparated($input);		$input = ucwords($input);		$input = str_ireplace(' ', '', $input);		return $input;	}	/**	 * Method to convert a string into dash separated form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The dash separated string.	 *	 * @since   11.3	 */	public static function toDashSeparated($input)	{		// Convert spaces and underscores to dashes.		$input = preg_replace('#[ \-_]+#', '-', $input);		return $input;	}	/**	 * Method to convert a string into space separated form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The space separated string.	 *	 * @since   11.3	 */	public static function toSpaceSeparated($input)	{		// Convert underscores and dashes to spaces.		$input = preg_replace('#[ \-_]+#', ' ', $input);		return $input;	}	/**	 * Method to convert a string into underscore separated form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The underscore separated string.	 *	 * @since   11.3	 */	public static function toUnderscoreSeparated($input)	{		// Convert spaces and dashes to underscores.		$input = preg_replace('#[ \-_]+#', '_', $input);		return $input;	}	/**	 * Method to convert a string into variable form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The variable string.	 *	 * @since   11.3	 */	public static function toVariable($input)	{		// Remove dashes and underscores, then convert to camel case.		$input = self::toSpaceSeparated($input);		$input = self::toCamelCase($input);		// Remove leading digits.		$input = preg_replace('#^[0-9]+.*$#', '', $input);		// Lowercase the first character.		$first = substr($input, 0, 1);		$first = strtolower($first);		// Replace the first character with the lowercase character.		$input = substr_replace($input, $first, 0, 1);		return $input;	}	/**	 * Method to convert a string into key form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The key string.	 *	 * @since   11.3	 */	public static function toKey($input)	{		// Remove spaces and dashes, then convert to lower case.		$input = self::toUnderscoreSeparated($input);		$input = strtolower($input);		return $input;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?phpif (!empty($this->msg)){	echo $this->msg;}else{	$lang = JFactory::getLanguage();	$myrtl = $this->newsfeed->rtl;	$direction = " ";		if ($lang->isRTL() && $myrtl == 0)		{			$direction = " redirect-rtl";		}		elseif ($lang->isRTL() && $myrtl == 1)		{				$direction = " redirect-ltr";		}		elseif ($lang->isRTL() && $myrtl == 2)		{			$direction = " redirect-rtl";		}		elseif ($myrtl == 0)		{			$direction = " redirect-ltr";		}		elseif ($myrtl == 1)		{			$direction = " redirect-ltr";		}		elseif ($myrtl == 2)		{			$direction = " redirect-rtl";		}		$images  = json_decode($this->item->images);	?>	<div class="newsfeed<?php echo $this->pageclass_sfx?><?php echo $direction; ?>">	<?php if ($this->params->get('display_num')) :  ?>	<h1 class="<?php echo $direction; ?>">		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<h2 class="<?php echo $direction; ?>">		<?php if ($this->item->published == 0) : ?>			<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>		<?php endif; ?>		<a href="<?php echo $this->item->link; ?>" target="_blank">		<?php echo str_replace('&apos;', "'", $this->item->name); ?></a>	</h2>	<?php if ($this->params->get('show_tags', 1)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?>	<!-- Show Images from Component -->	<?php  if (isset($images->image_first) and !empty($images->image_first)) : ?>	<?php $imgfloat = (empty($images->float_first)) ? $this->params->get('float_first') : $images->float_first; ?>	<div class="img-intro-<?php echo htmlspecialchars($imgfloat); ?>"> <img		<?php if ($images->image_first_caption):			echo 'class="caption"'.' title="' .htmlspecialchars($images->image_first_caption) .'"';		endif; ?>		src="<?php echo htmlspecialchars($images->image_first); ?>" alt="<?php echo htmlspecialchars($images->image_first_alt); ?>"/> </div>	<?php endif; ?>	<?php  if (isset($images->image_second) and !empty($images->image_second)) : ?>	<?php $imgfloat = (empty($images->float_second)) ? $this->params->get('float_second') : $images->float_second; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_second_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_second_caption) .'"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_second); ?>" alt="<?php echo htmlspecialchars($images->image_second_alt); ?>"/> </div>	<?php endif; ?>	<!-- Show Description from Component --><?php echo $this->item->description; ?>	<!-- Show Feed's Description -->	<?php if ($this->params->get('show_feed_description')) : ?>		<div class="feed-description">			<?php echo str_replace('&apos;', "'", $this->rssDoc->description); ?>		</div>	<?php endif; ?>	<!-- Show Image -->	<?php if (isset($this->rssDoc->image) && isset($this->rssDoc->imagetitle) && $this->params->get('show_feed_image')) : ?>	<div>			<img src="<?php echo $this->rssDoc->image; ?>" alt="<?php echo $this->rssDoc->image->decription; ?>" /></div><?php endif; ?>	<!-- Show items -->	<?php if (!empty($this->rssDoc[0])) { ?>	<ol>		<?php for ($i = 0; $i < $this->item->numarticles; $i++) { ?>	<?php		$uri = !empty($this->rssDoc[$i]->guid) || !is_null($this->rssDoc[$i]->guid) ? $this->rssDoc[$i]->guid : $this->rssDoc[$i]->uri;		$uri = substr($uri, 0, 4) != 'http' ? $this->item->link : $uri;		$text = !empty($this->rssDoc[$i]->content) || !is_null($this->rssDoc[$i]->content) ? $this->rssDoc[$i]->content : $this->rssDoc[$i]->description;	?>			<li>				<?php if (!empty($this->rssDoc[$i]->uri)) : ?>					<a href="<?php echo $this->rssDoc[$i]->uri; ?>" target="_blank">					<?php  echo $this->rssDoc[$i]->title; ?></a>				<?php else : ?>					<h3><?php  echo '<a target="_blank" href="' .$this->rssDoc[$i]->uri . '">' .$this->rssDoc[$i]->title. '</a>'; ?></h3>				<?php  endif; ?>				<?php if ($this->params->get('show_item_description') && !empty($text)) : ?>					<div class="feed-item-description">					<?php if ($this->params->get('show_feed_image', 0) == 0)					{						$text = JFilterOutput::stripImages($text);					}					$text = JHtml::_('string.truncate', $text, $this->params->get('feed_character_count'));						echo str_replace('&apos;', "'", $text);					?>					</div>				<?php endif; ?>				</li>			<?php } ?>			</ol>		<?php } ?>	</div><?php } ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><fieldset>	<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_finder')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Finder');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Messages component * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesViewMessage extends JViewLegacy{	protected $form;	protected $item;	protected $state;	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		if ($this->getLayout() == 'edit')		{			JToolbarHelper::title(JText::_('COM_MESSAGES_WRITE_PRIVATE_MESSAGE'), 'new-privatemessage.png');			JToolbarHelper::save('message.save', 'COM_MESSAGES_TOOLBAR_SEND');			JToolbarHelper::cancel('message.cancel');			JToolbarHelper::help('JHELP_COMPONENTS_MESSAGING_WRITE');		}		else		{			JToolbarHelper::title(JText::_('COM_MESSAGES_VIEW_PRIVATE_MESSAGE'), 'inbox.png');			$sender = JUser::getInstance($this->item->user_id_from);			if ($sender->authorise('core.admin') || $sender->authorise('core.manage', 'com_messages') && $sender->authorise('core.login.admin'))			{				JToolbarHelper::custom('message.reply', 'redo', null, 'COM_MESSAGES_TOOLBAR_REPLY', false);			}			JToolbarHelper::cancel('message.cancel');			JToolbarHelper::help('JHELP_COMPONENTS_MESSAGING_READ');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class JHtmlMessages{	/**	 * @param   int $value	The state value	 * @param   int $i	 */	public static function state($value = 0, $i, $canChange)	{		// Array of image, task, title, action.		$states	= array(			-2	=> array('trash.png',		'messages.unpublish',	'JTRASHED',				'COM_MESSAGES_MARK_AS_UNREAD'),			1	=> array('tick.png',		'messages.unpublish',	'COM_MESSAGES_OPTION_READ',		'COM_MESSAGES_MARK_AS_UNREAD'),			0	=> array('publish_x.png',	'messages.publish',		'COM_MESSAGES_OPTION_UNREAD',	'COM_MESSAGES_MARK_AS_READ')		);		$state	= JArrayHelper::getValue($states, (int) $value, $states[0]);		$html	= JHtml::_('image', 'admin/'.$state[0], JText::_($state[2]), null, true);		if ($canChange)		{			$html = '<a href="#" onclick="return listItemTask(\'cb'.$i.'\',\''.$state[1].'\')" title="'.JText::_($state[3]).'">'					.$html.'</a>';		}		return $html;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/mailto.php';require_once JPATH_COMPONENT.'/controller.php';$controller = JControllerLegacy::getInstance('Mailto');$controller->registerDefaultTask('mailto');$controller->execute(JFactory::getApplication()->input->get('task'));//$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * RTF Parser class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerParserRtf extends FinderIndexerParser{	/**	 * Method to process RTF input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	protected function process($input)	{		// Remove embedded pictures.		$input = preg_replace('#{\\\pict[^}]*}#mis', '', $input);		// Remove control characters.		$input = str_replace(array('{', '}', "\\\n"), array(' ', ' ', "\n"), $input);		$input = preg_replace('#\\\([^;]+?);#mis', ' ', $input);		$input = preg_replace('#\\\[\'a-zA-Z0-9]+#mis', ' ', $input);		return $input;	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><div class="btn-toolbar">	<div class="btn-group pull-right">		<a href="#" class="btn btn-primary" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>	</div></div><form action="index.php" method="post" id="languageForm" class="form-horizontal">	<div class="control-group">		<label for="jform_language" class="control-label"><?php echo JText::_('INSTL_SELECT_LANGUAGE_TITLE'); ?></label>		<div class="controls">			<?php echo $this->form->getInput('language'); ?>		</div>	</div>	<input type="hidden" name="task" value="setlanguage" />	<?php echo JHtml::_('form.token'); ?></form><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<h3><?php echo JText::_('INSTL_SITE'); ?></h3>	<hr class="hr-condensed" />	<div class="row-fluid">		<div class="span6">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_name'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_name'); ?>					<p class="help-block"><?php echo JText::_('INSTL_SITE_NAME_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_metadesc'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_metadesc'); ?>					<p class="help-block">						<?php echo JText::_('INSTL_SITE_METADESC_TITLE_LABEL'); ?>					</p>				</div>			</div>		</div>		<div class="span6">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_email'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_email'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_EMAIL_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_user'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_user'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_USER_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_password'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_password'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_PASSWORD_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_password2'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_password2'); ?>				</div>			</div>		</div>	</div>	<div class="row-fluid">		<div class="span12">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_offline'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_offline'); ?>					<p class="help-block">						<?php echo JText::_('INSTL_SITE_OFFLINE_TITLE_LABEL'); ?>					</p>				</div>			</div>		</div>	</div>	<input type="hidden" name="task" value="site" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the mod_popular functions only once.require_once __DIR__ . '/helper.php';// Get module data.$list = ModPopularHelper::getList($params);// Render the modulerequire JModuleHelper::getLayoutPath('mod_popular', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with languages * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */abstract class JHtmlLanguages{	/**	 * Method to generate an information about the default language	 *	 * @param   boolean	$published is the language the default?	 *	 * @return  string	html code	 */	public static function published($published)	{		if ($published)		{			return JHtml::_('image', 'menu/icon-16-default.png', JText::_('COM_LANGUAGES_HEADING_DEFAULT'), null, true);		}		else		{			return '&#160;';		}	}	/**	 * Method to generate an input radio button	 *	 * @param   integer  $rowNum the row number	 * @param   string	language tag	 *	 * @return  string	html code	 */	public static function id($rowNum, $language)	{		return '<input type="radio" id="cb' . $rowNum . '" name="cid" value="' . htmlspecialchars($language) . '" onclick="Joomla.isChecked(this.checked);" title="' . ($rowNum + 1) . '"/>';	}	public static function clients()	{		return array(			JHtml::_('select.option', 0, JText::_('JSITE')),			JHtml::_('select.option', 1, JText::_('JADMINISTRATOR'))		);	}	/**	 * Returns an array of published state filter options.	 *	 * @return  string  	The HTML code for the select tag	 * @since   1.6	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '1', 'JPUBLISHED');		$options[]	= JHtml::_('select.option', '0', 'JUNPUBLISHED');		$options[]	= JHtml::_('select.option', '-2', 'JTRASHED');		$options[]	= JHtml::_('select.option', '*', 'JALL');		return $options;	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Summary View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewSummaryHtml extends InstallationViewDefault{	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * The PHP options checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpoptions;	/**	 * The PHP settings checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpsettings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options     = $this->model->getOptions();		$this->phpoptions  = $this->model->getPhpOptions();		$this->phpsettings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Impressions Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldImpTotal extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ImpTotal';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$class		= ' class="validate-numeric text_area"';		$onchange	= ' onchange="document.id(\''.$this->id.'_unlimited\').checked=document.id(\''.$this->id.'\').value==\'\';"';		$onclick	= ' onclick="if (document.id(\''.$this->id.'_unlimited\').checked) document.id(\''.$this->id.'\').value=\'\';"';		$value		= empty($this->value) ? '' : $this->value;		$checked	= empty($this->value) ? ' checked="checked"' : '';		return '<input type="text" name="'.$this->name.'" id="'.$this->id.'" size="9" value="'.htmlspecialchars($value, ENT_COMPAT, 'UTF-8').'" '.$class.$onchange.' />		<fieldset class="checkboxes impunlimited"><input id="'.$this->id.'_unlimited" type="checkbox"'.$checked.$onclick.' />		<label for="'.$this->id.'_unlimited" id="jform-imp" type="text">'.JText::_('COM_BANNERS_UNLIMITED').'</label></fieldset>';	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?>	<?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>		<?php if ($this->params->get('categories_description')) : ?>		<div class="category-desc base-desc">			<?php echo  JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_contact.categories'); ?>			</div>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc base-desc">					<?php  echo JHtml::_('content.prepare', $this->parent->description, '', 'com_contact.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?>	<?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of search terms. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.5 */class SearchViewSearches extends JViewLegacy{	protected $enabled;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->enabled		= $this->state->params->get('enabled');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= SearchHelper::getActions();		JToolbarHelper::title(JText::_('COM_SEARCH_MANAGER_SEARCHES'), 'search.png');		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::custom('searches.reset', 'refresh.png', 'refresh_f2.png', 'JSEARCH_RESET', false);		}		JToolbarHelper::divider();		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_search');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_SEARCH');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_CONFIG_SYSTEM_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('system') as $field):			?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php			endforeach;			?>			</ul>	</fieldset></div>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL Server database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/ee336279.aspx * @since       12.1 */class JDatabaseDriverSqlazure extends JDatabaseDriverSqlsrv{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlzure';}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Viewlevels table class. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableViewlevel extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__viewlevels', 'id', $db);	}	/**	 * Method to bind the data.	 *	 * @param   array  $array   The data to bind.	 * @param   mixed  $ignore  An array or space separated list of fields to ignore.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Bind the rules as appropriate.		if (isset($array['rules']))		{			if (is_array($array['rules']))			{				$array['rules'] = json_encode($array['rules']);			}		}		return parent::bind($array, $ignore);	}	/**	 * Method to check the current record to save	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		// Validate the title.		if ((trim($this->title)) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_VIEWLEVEL'));			return false;		}		return true;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.folder');/** * Controller class to set the FTP data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerRemovefolder extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		$path = JPATH_INSTALLATION;		// Check whether the folder still exists		if (!file_exists($path))		{			$app->sendJsonResponse(new Exception(JText::sprintf('INSTL_COMPLETE_ERROR_FOLDER_ALREADY_REMOVED'), 500));		}		// Check whether we need to use FTP		$useFTP = false;		if ((file_exists($path) && !is_writable($path)))		{			$useFTP = true;		}		// Check for safe mode		if (ini_get('safe_mode'))		{			$useFTP = true;		}		// Enable/Disable override		if (!isset($options->ftpEnable) || ($options->ftpEnable != 1))		{			$useFTP = false;		}		if ($useFTP == true)		{			// Connect the FTP client			jimport('joomla.filesystem.path');			$ftp = JClientFtp::getInstance($options->ftp_host, $options->ftp_port);			$ftp->login($options->ftp_user, $options->ftp_pass);			// Translate path for the FTP account			$file = JPath::clean(str_replace(JPATH_CONFIGURATION, $options->ftp_root, $path), '/');			$return = $ftp->delete($file);			// Delete the extra XML file while we're at it			if ($return)			{				$file = JPath::clean($options->ftp_root . '/joomla.xml');				if (file_exists($file))				{					$return = $ftp->delete($file);				}			}			// Rename the robots.txt.dist file to robots.txt			if ($return)			{				$robotsFile = JPath::clean($options->ftp_root . '/robots.txt');				$distFile = JPath::clean($options->ftp_root . '/robots.txt.dist');				if (!file_exists($robotsFile) && file_exists($distFile))				{					$return = $ftp->rename($distFile, $robotsFile);				}			}			$ftp->quit();		}		else		{			/*			 * Try to delete the folder.			 * We use output buffering so that any error message echoed JFolder::delete			 * doesn't land in our JSON output.			 */			ob_start();			$return = JFolder::delete($path) && (!file_exists(JPATH_ROOT . '/joomla.xml') || JFile::delete(JPATH_ROOT . '/joomla.xml'));			// Rename the robots.txt.dist file if robots.txt doesn't exist			if ($return && !file_exists(JPATH_ROOT . '/robots.txt') && file_exists(JPATH_ROOT . '/robots.txt.dist'))			{				$return = JFile::move(JPATH_ROOT . '/robots.txt.dist', JPATH_ROOT . '/robots.txt');			}			ob_end_clean();		}		// If an error was encountered return an error.		if (!$return)		{			$app->sendJsonResponse(new Exception(JText::_('INSTL_COMPLETE_ERROR_FOLDER_DELETE'), 500));		}		// Create a response body.		$r = new stdClass;		$r->text = JText::_('INSTL_COMPLETE_FOLDER_REMOVED');		/*		 * Send the response		 * This is a hack since by now, the rest of the folder is deleted and we can't make a new request		 */		$this->sendJsonResponse($r);	}	/**	 * Method to send a JSON response. The data parameter	 * can be a Exception object for when an error has occurred or	 * a stdClass for a good response.	 *	 * @param   mixed  $response  stdClass on success, Exception on failure.	 *	 * @return  void	 *	 * @since   3.1	 */	public function sendJsonResponse($response)	{		// Check if we need to send an error code.		if ($response instanceof Exception)		{			// Send the appropriate error code response.			$this->setHeader('status', $response->getCode());			$this->setHeader('Content-Type', 'application/json; charset=utf-8');			$this->sendHeaders();		}		// Send the JSON response.		JLoader::register('InstallationResponseJson', __FILE__);		echo json_encode(new InstallationResponseJson($response));		// Close the application.		exit;	}}/** * JSON Response class for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Response * @since       3.1 */class InstallationResponseJson{	/**	 * Constructor for the JSON response	 *	 * @param   mixed  $data  Exception if there is an error, otherwise, the session data	 *	 * @since   3.1	 */	public function __construct($data)	{		// The old token is invalid so send a new one.		$this->token = JSession::getFormToken(true);		// Get the language and send it's tag along		$this->lang = JFactory::getLanguage()->getTag();		// Get the message queue		$messages = JFactory::getApplication()->getMessageQueue();		// Build the sorted message list		if (is_array($messages) && count($messages))		{			foreach ($messages as $msg)			{				if (isset($msg['type']) && isset($msg['message']))				{					$lists[$msg['type']][] = $msg['message'];				}			}		}		// If messages exist add them to the output		if (isset($lists) && is_array($lists))		{			$this->messages = $lists;		}		// Check if we are dealing with an error.		if ($data instanceof Exception)		{			// Prepare the error response.			$this->error   = true;			$this->header  = JText::_('INSTL_HEADER_ERROR');			$this->message = $data->getMessage();		}		else		{			// Prepare the response data.			$this->error = false;			$this->data  = $data;		}	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Exception * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Exception object. * * @package     Joomla.Legacy * @subpackage  Exception * @since       11.1 * @deprecated  12.1 */class JException extends Exception{	/**	 * @var    string  Error level.	 * @since  11.1	 */	protected $level = null;	/**	 * @var    string  Error code.	 * @since  11.1	 */	protected $code = null;	/**	 * @var    string  Error message.	 * @since  11.1	 */	protected $message = null;	/**	 * Additional info about the error relevant to the developer,	 * for example, if a database connect fails, the dsn used	 *	 * @var    string	 * @since  11.1	 */	protected $info = '';	/**	 * Name of the file the error occurred in [Available if backtrace is enabled]	 *	 * @var    string	 * @since  11.1	 */	protected $file = null;	/**	 * Line number the error occurred in [Available if backtrace is enabled]	 *	 * @var    int	 * @since  11.1	 */	protected $line = 0;	/**	 * Name of the method the error occurred in [Available if backtrace is enabled]	 *	 * @var    string	 * @since  11.1	 */	protected $function = null;	/**	 * Name of the class the error occurred in [Available if backtrace is enabled]	 *	 * @var    string	 * @since  11.1	 */	protected $class = null;	/**	 * @var    string  Error type.	 * @since  11.1	 */	protected $type = null;	/**	 * Arguments recieved by the method the error occurred in [Available if backtrace is enabled]	 *	 * @var    array	 * @since  11.1	 */	protected $args = array();	/**	 * @var    mixed  Backtrace information.	 * @since  11.1	 */	protected $backtrace = null;	/**	 * Constructor	 * - used to set up the error with all needed error details.	 *	 * @param   string   $msg        The error message	 * @param   string   $code       The error code from the application	 * @param   integer  $level      The error level (use the PHP constants E_ALL, E_NOTICE etc.).	 * @param   string   $info       Optional: The additional error information.	 * @param   boolean  $backtrace  True if backtrace information is to be collected	 *	 * @since   11.1	 *	 * @deprecated  12.1	 */	public function __construct($msg, $code = 0, $level = null, $info = null, $backtrace = false)	{		JLog::add('JException is deprecated.', JLog::WARNING, 'deprecated');		$this->level = $level;		$this->code = $code;		$this->message = $msg;		if ($info != null)		{			$this->info = $info;		}		if ($backtrace && function_exists('debug_backtrace'))		{			$this->backtrace = debug_backtrace();			for ($i = count($this->backtrace) - 1; $i >= 0; --$i)			{				++$i;				if (isset($this->backtrace[$i]['file']))				{					$this->file = $this->backtrace[$i]['file'];				}				if (isset($this->backtrace[$i]['line']))				{					$this->line = $this->backtrace[$i]['line'];				}				if (isset($this->backtrace[$i]['class']))				{					$this->class = $this->backtrace[$i]['class'];				}				if (isset($this->backtrace[$i]['function']))				{					$this->function = $this->backtrace[$i]['function'];				}				if (isset($this->backtrace[$i]['type']))				{					$this->type = $this->backtrace[$i]['type'];				}				$this->args = false;				if (isset($this->backtrace[$i]['args']))				{					$this->args = $this->backtrace[$i]['args'];				}				break;			}		}		// Store exception for debugging purposes!		JError::addToStack($this);		parent::__construct($msg, (int) $code);	}	/**	 * Returns to error message	 *	 * @return  string  Error message	 *	 * @since   11.1	 *	 * @deprecated  12.1	 */	public function __toString()	{		JLog::add('JException::__toString is deprecated.', JLog::WARNING, 'deprecated');		return $this->message;	}	/**	 * Returns to error message	 *	 * @return  string   Error message	 *	 * @since   11.1	 * @deprecated    12.1	 */	public function toString()	{		JLog::add('JException::toString is deprecated.', JLog::WARNING, 'deprecated');		return (string) $this;	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $property  The name of the property	 * @param   mixed   $default   The default value	 *	 * @return  mixed  The value of the property or null	 *	 * @deprecated  12.1	 * @see         getProperties()	 * @since       11.1	 */	public function get($property, $default = null)	{		JLog::add('JException::get is deprecated.', JLog::WARNING, 'deprecated');		if (isset($this->$property))		{			return $this->$property;		}		return $default;	}	/**	 * Returns an associative array of object properties	 *	 * @param   boolean  $public  If true, returns only the public properties	 *	 * @return  array  Object properties	 *	 * @deprecated    12.1	 * @see     get()	 * @since   11.1	 */	public function getProperties($public = true)	{		JLog::add('JException::getProperties is deprecated.', JLog::WARNING, 'deprecated');		$vars = get_object_vars($this);		if ($public)		{			foreach ($vars as $key => $value)			{				if ('_' == substr($key, 0, 1))				{					unset($vars[$key]);				}			}		}		return $vars;	}	/**	 * Get the most recent error message	 *	 * @param   integer  $i         Option error index	 * @param   boolean  $toString  Indicates if JError objects should return their error message	 *	 * @return  string  Error message	 *	 * @since   11.1	 *	 * @deprecated  12.1	 */	public function getError($i = null, $toString = true)	{		JLog::add('JException::getError is deprecated.', JLog::WARNING, 'deprecated');		// Find the error		if ($i === null)		{			// Default, return the last message			$error = end($this->_errors);		}		elseif (!array_key_exists($i, $this->_errors))		{			// If $i has been specified but does not exist, return false			return false;		}		else		{			$error = $this->_errors[$i];		}		// Check if only the string is requested		if ($error instanceof Exception && $toString)		{			return (string) $error;		}		return $error;	}	/**	 * Return all errors, if any	 *	 * @return  array  Array of error messages or JErrors	 *	 * @since   11.1	 *	 * @deprecated  12.1	 */	public function getErrors()	{		JLog::add('JException::getErrors is deprecated.', JLog::WARNING, 'deprecated');		return $this->_errors;	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $property  The name of the property	 * @param   mixed   $value     The value of the property to set	 *	 * @return  mixed  Previous value of the property	 *	 * @deprecated  12.1	 * @see         setProperties()	 * @since       11.1	 */	public function set($property, $value = null)	{		JLog::add('JException::set is deprecated.', JLog::WARNING, 'deprecated');		$previous = isset($this->$property) ? $this->$property : null;		$this->$property = $value;		return $previous;	}	/**	 * Set the object properties based on a named array/hash	 *	 * @param   mixed  $properties  Either and associative array or another object	 *	 * @return  boolean	 *	 * @deprecated  12.1	 * @see         set()	 * @since       11.1	 */	public function setProperties($properties)	{		JLog::add('JException::setProperties is deprecated.', JLog::WARNING, 'deprecated');		// Cast to an array		$properties = (array) $properties;		if (is_array($properties))		{			foreach ($properties as $k => $v)			{				$this->$k = $v;			}			return true;		}		return false;	}	/**	 * Add an error message	 *	 * @param   string  $error  Error message	 *	 * @return  void	 *	 * @since   11.1	 *	 * @deprecated  12.1	 */	public function setError($error)	{		JLog::add('JException::setErrors is deprecated.', JLog::WARNING, 'deprecated');		array_push($this->_errors, $error);	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.beez5 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>		<?php if ($this->params->get('categories_description')) : ?>			<?php echo  JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_content.categories'); ?>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc">					<?php  echo JHtml::_('content.prepare', $this->parent->description, '', 'com_content.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?><?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Update Controller * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since	2.5.4	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'default');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			$ftp = JClientHelper::setCredentialsFromRequest('ftp');			$view->ftp = &$ftp;			// Get the model for the view.			$model = $this->getModel($vName);			// Perform update source preference check and refresh update information			$model->applyUpdateSite();			$model->refreshUpdates();			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			$view->display();		}		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Commits class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.1 */class JGithubCommits extends JGithubObject{	/**	 * Method to create a commit.	 *	 * @param   string  $user     The name of the owner of the GitHub repository.	 * @param   string  $repo     The name of the GitHub repository.	 * @param   string  $message  The commit message.	 * @param   string  $tree     SHA of the tree object this commit points to.	 * @param   array   $parents  Array of the SHAs of the commits that were the parents of this commit.	 *                            If omitted or empty, the commit will be written as a root commit.	 *                            For a single parent, an array of one SHA should be provided.	 *                            For a merge commit, an array of more than one should be provided.	 *	 * @return  object	 *	 * @since   12.1	 */	public function create($user, $repo, $message, $tree, array $parents = array())	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/commits';		$data = json_encode(			array('message' => $message, 'tree' => $tree, 'parents' => $parents)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on a commit.	 *	 * @param   string   $user      The name of the owner of the GitHub repository.	 * @param   string   $repo      The name of the GitHub repository.	 * @param   string   $sha       The SHA of the commit to comment on.	 * @param   string   $comment   The text of the comment.	 * @param   integer  $line      The line number of the commit to comment on.	 * @param   string   $filepath  A relative path to the file to comment on within the commit.	 * @param   integer  $position  Line index in the diff to comment on.	 *	 * @return  object	 *	 * @since   12.1	 */	public function createCommitComment($user, $repo, $sha, $comment, $line, $filepath, $position)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha . '/comments';		$data = json_encode(			array(				'body' => $comment,				'commit_id' => $sha,				'line' => (int) $line,				'path' => $filepath,				'position' => (int) $position			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on a commit.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $id    The ID of the comment to edit.	 *	 * @return  object	 *	 * @since   12.1	 */	public function deleteCommitComment($user, $repo, $id)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to edit a comment on a commit.	 *	 * @param   string  $user     The name of the owner of the GitHub repository.	 * @param   string  $repo     The name of the GitHub repository.	 * @param   string  $id       The ID of the comment to edit.	 * @param   string  $comment  The text of the comment.	 *	 * @return  object	 *	 * @since   12.1	 */	public function editCommitComment($user, $repo, $id, $comment)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		$data = json_encode(			array(				'body' => $comment			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single commit for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $sha    The SHA of the commit to retrieve.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommit($user, $repo, $sha, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single comment on a commit.	 *	 * @param   string   $user  The name of the owner of the GitHub repository.	 * @param   string   $repo  The name of the GitHub repository.	 * @param   integer  $id    ID of the comment to retrieve	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommitComment($user, $repo, $id)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of comments for a single commit for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $sha    The SHA of the commit to retrieve.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommitComments($user, $repo, $sha, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a diff for two commits.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $base  The base of the diff, either a commit SHA or branch.	 * @param   string  $head  The head of the diff, either a commit SHA or branch.	 *	 * @return  array	 *	 * @since   12.1	 */	public function getDiff($user, $repo, $base, $head)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/compare/' . $base . '...' . $head;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list commits for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getList($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of commit comments for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getListComments($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Object * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Object Class * * This class allows for simple but smart objects with get and set methods * and an internal error handler. * * @package     Joomla.Platform * @subpackage  Object * @since       11.1 */class JObject{	/**	 * An array of error messages or Exception objects.	 *	 * @var    array	 * @since  11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	protected $_errors = array();	/**	 * Class constructor, overridden in descendant classes.	 *	 * @param   mixed  $properties  Either and associative array or another	 *                              object to set the initial properties of the object.	 *	 * @since   11.1	 */	public function __construct($properties = null)	{		if ($properties !== null)		{			$this->setProperties($properties);		}	}	/**	 * Magic method to convert the object to a string gracefully.	 *	 * @return  string  The classname.	 *	 * @since   11.1	 * @deprecated 12.3  Classes should provide their own __toString() implementation.	 */	public function __toString()	{		return get_class($this);	}	/**	 * Sets a default value if not alreay assigned	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function def($property, $default = null)	{		$value = $this->get($property, $default);		return $this->set($property, $value);	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed    The value of the property.	 *	 * @since   11.1	 *	 * @see     getProperties()	 */	public function get($property, $default = null)	{		if (isset($this->$property))		{			return $this->$property;		}		return $default;	}	/**	 * Returns an associative array of object properties.	 *	 * @param   boolean  $public  If true, returns only the public properties.	 *	 * @return  array	 *	 * @since   11.1	 *	 * @see     get()	 */	public function getProperties($public = true)	{		$vars = get_object_vars($this);		if ($public)		{			foreach ($vars as $key => $value)			{				if ('_' == substr($key, 0, 1))				{					unset($vars[$key]);				}			}		}		return $vars;	}	/**	 * Get the most recent error message.	 *	 * @param   integer  $i         Option error index.	 * @param   boolean  $toString  Indicates if JError objects should return their error message.	 *	 * @return  string   Error message	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function getError($i = null, $toString = true)	{		// Find the error		if ($i === null)		{			// Default, return the last message			$error = end($this->_errors);		}		elseif (!array_key_exists($i, $this->_errors))		{			// If $i has been specified but does not exist, return false			return false;		}		else		{			$error = $this->_errors[$i];		}		// Check if only the string is requested		if ($error instanceof Exception && $toString)		{			return (string) $error;		}		return $error;	}	/**	 * Return all errors, if any.	 *	 * @return  array  Array of error messages or JErrors.	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function getErrors()	{		return $this->_errors;	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set.	 *	 * @return  mixed  Previous value of the property.	 *	 * @since   11.1	 */	public function set($property, $value = null)	{		$previous = isset($this->$property) ? $this->$property : null;		$this->$property = $value;		return $previous;	}	/**	 * Set the object properties based on a named array/hash.	 *	 * @param   mixed  $properties  Either an associative array or another object.	 *	 * @return  boolean	 *	 * @since   11.1	 *	 * @see     set()	 */	public function setProperties($properties)	{		if (is_array($properties) || is_object($properties))		{			foreach ((array) $properties as $k => $v)			{				// Use the set function which might be overridden.				$this->set($k, $v);			}			return true;		}		return false;	}	/**	 * Add an error message.	 *	 * @param   string  $error  Error message.	 *	 * @return  void	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function setError($error)	{		array_push($this->_errors, $error);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">function iFrameHeight(){	var h = 0;	if (!document.all)	{		h = document.getElementById('blockrandom').contentDocument.height;		document.getElementById('blockrandom').style.height = h + 60 + 'px';	} else if (document.all)	{		h = document.frames('blockrandom').document.body.scrollHeight;		document.all.blockrandom.style.height = h + 20 + 'px';	}}</script><div class="contentpane<?php echo $this->pageclass_sfx; ?>"><?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php if ($this->escape($this->params->get('page_heading'))) :?>			<?php echo $this->escape($this->params->get('page_heading')); ?>		<?php else : ?>			<?php echo $this->escape($this->params->get('page_title')); ?>		<?php endif; ?>	</h1><?php endif; ?><iframe <?php echo $this->wrapper->load; ?>	id="blockrandom"	name="iframe"	src="<?php echo $this->escape($this->wrapper->url); ?>"	width="<?php echo $this->escape($this->params->get('width')); ?>"	height="<?php echo $this->escape($this->params->get('height')); ?>"	scrolling="<?php echo $this->escape($this->params->get('scrolling')); ?>"	frameborder="<?php echo $this->escape($this->params->get('frameborder', 1)); ?>"	class="wrapper<?php echo $this->pageclass_sfx; ?>">	<?php echo JText::_('COM_WRAPPER_NO_IFRAMES'); ?></iframe></div>
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform class for interacting with a GitHub server instance. * * @property-read  JGithubGists    $gists    GitHub API object for gists. * @property-read  JGithubIssues   $issues   GitHub API object for issues. * @property-read  JGithubPulls    $pulls    GitHub API object for pulls. * @property-read  JGithubRefs     $refs     GitHub API object for referencess. * @property-read  JGithubForks    $forks    GitHub API object for forks. * @property-read  JGithubCommits  $commits  GitHub API object for commits. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithub{	/**	 * @var    JRegistry  Options for the GitHub object.	 * @since  11.3	 */	protected $options;	/**	 * @var    JGithubHttp  The HTTP client object to use in sending HTTP requests.	 * @since  11.3	 */	protected $client;	/**	 * @var    JGithubGists  GitHub API object for gists.	 * @since  11.3	 */	protected $gists;	/**	 * @var    JGithubIssues  GitHub API object for issues.	 * @since  11.3	 */	protected $issues;	/**	 * @var    JGithubPulls  GitHub API object for pulls.	 * @since  11.3	 */	protected $pulls;	/**	 * @var    JGithubRefs  GitHub API object for referencess.	 * @since  11.3	 */	protected $refs;	/**	 * @var    JGithubForks  GitHub API object for forks.	 * @since  11.3	 */	protected $forks;	/**	 * @var    JGithubCommits  GitHub API object for commits.	 * @since  12.1	 */	protected $commits;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  GitHub options object.	 * @param   JGithubHttp  $client   The HTTP client object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JGithubHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JGithubHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'https://api.github.com');	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JGithubObject  GitHub API object (gists, issues, pulls, etc).	 *	 * @since   11.3	 */	public function __get($name)	{		if ($name == 'gists')		{			if ($this->gists == null)			{				$this->gists = new JGithubGists($this->options, $this->client);			}			return $this->gists;		}		if ($name == 'issues')		{			if ($this->issues == null)			{				$this->issues = new JGithubIssues($this->options, $this->client);			}			return $this->issues;		}		if ($name == 'pulls')		{			if ($this->pulls == null)			{				$this->pulls = new JGithubPulls($this->options, $this->client);			}			return $this->pulls;		}		if ($name == 'refs')		{			if ($this->refs == null)			{				$this->refs = new JGithubRefs($this->options, $this->client);			}			return $this->refs;		}		if ($name == 'forks')		{			if ($this->forks == null)			{				$this->forks = new JGithubForks($this->options, $this->client);			}			return $this->forks;		}		if ($name == 'commits')		{			if ($this->commits == null)			{				$this->commits = new JGithubCommits($this->options, $this->client);			}			return $this->commits;		}	}	/**	 * Get an option from the JGitHub instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   11.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGitHub instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGitHub  This object for method chaining.	 *	 * @since   11.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (JPluginHelper::isEnabled('user', 'profile')) :	$fields = $this->item->profile->getFieldset('profile'); ?><div class="contact-profile" id="users-profile-custom">	<dl class="dl-horizontal">	<?php foreach ($fields as $profile) :		if ($profile->value) :			echo '<dt>'.$profile->label.'</dt>';			$profile->text = htmlspecialchars($profile->value, ENT_COMPAT, 'UTF-8');			switch ($profile->id) :				case "profile_website" :					$v_http = substr($profile->profile_value, 0, 4);					if ($v_http == "http") :						echo '<dd><a href="'.$profile->text.'">'.$profile->text.'</a></dd>';					else :						echo '<dd><a href="http://'.$profile->text.'">'.$profile->text.'</a></dd>';					endif;					break;				default:					echo '<dd>'.$profile->text.'</dd>';					break;			endswitch;		endif;	endforeach; ?>	</dl></div><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_category * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the helper functions only oncerequire_once __DIR__ . '/helper.php';$input = JFactory::getApplication()->input;		// Prep for Normal or Dynamic Modes		$mode = $params->get('mode', 'normal');		$idbase = null;		switch($mode)		{			case 'dynamic':				$option = $input->get('option');				$view = $input->get('view');				if ($option === 'com_content')				{					switch($view)					{						case 'category':							$idbase = $input->getInt('id');							break;						case 'categories':							$idbase = $input->getInt('id');							break;						case 'article':							if ($params->get('show_on_article_page', 1))							{								$idbase = $input->getInt('catid');							}							break;					}				}				break;			case 'normal':			default:				$idbase = $params->get('catid');				break;		}$cacheid = md5(serialize(array ($idbase, $module->module)));$cacheparams = new stdClass;$cacheparams->cachemode = 'id';$cacheparams->class = 'ModArticlesCategoryHelper';$cacheparams->method = 'getList';$cacheparams->methodparams = $params;$cacheparams->modeparams = $cacheid;$list = JModuleHelper::moduleCache($module, $params, $cacheparams);if (!empty($list)){	$grouped = false;	$article_grouping = $params->get('article_grouping', 'none');	$article_grouping_direction = $params->get('article_grouping_direction', 'ksort');	$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));	$item_heading = $params->get('item_heading');	if ($article_grouping !== 'none')	{		$grouped = true;		switch($article_grouping)		{			case 'year':			case 'month_year':				$list = ModArticlesCategoryHelper::groupByDate($list, $article_grouping, $article_grouping_direction, $params->get('month_year_format', 'F Y'));				break;			case 'author':			case 'category_title':				$list = ModArticlesCategoryHelper::groupBy($list, $article_grouping, $article_grouping_direction);				break;			default:				break;		}	}	require JModuleHelper::getLayoutPath('mod_articles_category', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Encryption key object for the Joomla Platform. * * @property-read  string  $type  The key type. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptKey{	/**	 * @var    string  The private key.	 * @since  12.1	 */	public $private;	/**	 * @var    string  The public key.	 * @since  12.1	 */	public $public;	/**	 * @var    string  The key type.	 * @since  12.1	 */	protected $type;	/**	 * Constructor.	 *	 * @param   string  $type     The key type.	 * @param   string  $private  The private key.	 * @param   string  $public   The public key.	 *	 * @since   12.1	 */	public function __construct($type, $private = null, $public = null)	{		// Set the key type.		$this->type = (string) $type;		// Set the optional public/private key strings.		$this->private = isset($private) ? (string) $private : null;		$this->public  = isset($public) ? (string) $public : null;	}	/**	 * Magic method to return some protected property values.	 *	 * @param   string  $name  The name of the property to return.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function __get($name)	{		if ($name == 'type')		{			return $this->type;		}		else		{			trigger_error('Cannot access property ' . __CLASS__ . '::' . $name, E_USER_WARNING);		}	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('database');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a  class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_FTP'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_enable'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_enable'); ?>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_user'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_user'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_FTP_USER_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_pass'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_pass'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_FTP_PASSWORD_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">		</div>		<div class="controls">			<button id="verifybutton" class="btn btn-success" onclick="Install.verifyFtpSettings(this);"><i class="icon-ok icon-white"></i> <?php echo JText::_('INSTL_VERIFY_FTP_SETTINGS'); ?></button>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_host'); ?>		</div>		<div class="controls">			<div class="input-append">				<?php echo $this->form->getInput('ftp_host'); ?><button id="findbutton" class="btn" onclick="Install.detectFtpRoot(this);"><i class="icon-folder-open"></i> <?php echo JText::_('INSTL_AUTOFIND_FTP_PATH'); ?></button>			</div>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_port'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_port'); ?>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_save'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_save'); ?>		</div>	</div>	<input type="hidden" name="task" value="ftp" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesControllerInstalled extends JControllerLegacy{	/**	 * task to set the default language	 */	public function setDefault()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$cid = $this->input->get('cid', '');		$model = $this->getModel('installed');		if ($model->publish($cid))		{			$msg = JText::_('COM_LANGUAGES_MSG_DEFAULT_LANGUAGE_SAVED');			$type = 'message';		}		else		{			$msg = $this->getError();			$type = 'error';		}		$clientId = $model->getState('filter.client_id');		$this->setredirect('index.php?option=com_languages&view=installed&client='.$clientId, $msg, $type);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE.'/components/com_content/helpers/route.php';JModelLegacy::addIncludePath(JPATH_SITE.'/components/com_content/models', 'ContentModel');/** * Helper for mod_articles_news * * @package     Joomla.Site * @subpackage  mod_articles_news */abstract class ModArticlesNewsHelper{	public static function getList(&$params)	{		$app = JFactory::getApplication();		// Get an instance of the generic articles model		$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));		// Set application parameters in model		$appParams = JFactory::getApplication()->getParams();		$model->setState('params', $appParams);		// Set the filters based on the module params		$model->setState('list.start', 0);		$model->setState('list.limit', (int) $params->get('count', 5));		$model->setState('filter.published', 1);		$model->setState('list.select', 'a.fulltext, a.id, a.title, a.alias, a.introtext, a.state, a.catid, a.created, a.created_by, a.created_by_alias,' .			' a.modified, a.modified_by, a.publish_up, a.publish_down, a.images, a.urls, a.attribs, a.metadata, a.metakey, a.metadesc, a.access,' .			' a.hits, a.featured' );		// Access filter		$access = !JComponentHelper::getParams('com_content')->get('show_noauth');		$authorised = JAccess::getAuthorisedViewLevels(JFactory::getUser()->get('id'));		$model->setState('filter.access', $access);		// Category filter		$model->setState('filter.category_id', $params->get('catid', array()));		// Filter by language		$model->setState('filter.language', $app->getLanguageFilter());		// Set ordering		$ordering = $params->get('ordering', 'a.publish_up');		$model->setState('list.ordering', $ordering);		if (trim($ordering) == 'rand()')		{			$model->setState('list.direction', '');		}		else		{			$model->setState('list.direction', 'DESC');		}		//	Retrieve Content		$items = $model->getItems();		foreach ($items as &$item)		{			$item->readmore = strlen(trim($item->fulltext));			$item->slug = $item->id.':'.$item->alias;			$item->catslug = $item->catid.':'.$item->category_alias;			if ($access || in_array($item->access, $authorised))			{				// We know that user has the privilege to view the article				$item->link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catid));				$item->linkText = JText::_('MOD_ARTICLES_NEWS_READMORE');			}			else {				$item->link = JRoute::_('index.php?option=com_users&view=login');				$item->linkText = JText::_('MOD_ARTICLES_NEWS_READMORE_REGISTER');			}			$item->introtext = JHtml::_('content.prepare', $item->introtext, '', 'mod_articles_news.content');			//new			if (!$params->get('image'))			{				$item->introtext = preg_replace('/<img[^>]*>/', '', $item->introtext);			}			$results = $app->triggerEvent('onContentAfterDisplay', array('com_content.article', &$item, &$params, 1));			$item->afterDisplayTitle = trim(implode("\n", $results));			$results = $app->triggerEvent('onContentBeforeDisplay', array('com_content.article', &$item, &$params, 1));			$item->beforeDisplayContent = trim(implode("\n", $results));		}		return $items;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="category-name">				<?php $title = $this->escape($displayData['item']->category_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($displayData['item']->catslug)).'">'.$title.'</a>';?>				<?php if ($displayData['params']->get('link_category') && $displayData['item']->catslug) : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>				<?php endif; ?>			</dd>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('NewsfeedsHelper', JPATH_ADMINISTRATOR . '/components/com_newsfeeds/helpers/newsfeeds.php');JLoader::register('CategoryHelperAssociation', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/association.php');/** * Newsfeeds Component Association Helper * * @package     Joomla.Site * @subpackage  com_contact * @since       3.0 */abstract class NewsfeedsHelperAssociation extends CategoryHelperAssociation{	/**	 * Method to get the associations for a given item	 *	 * @param   integer  $id    Id of the item	 * @param   string   $view  Name of the view	 *	 * @return  array   Array of associations for the item	 *	 * @since  3.0	 */	public static function getAssociations($id = 0, $view = null)	{		jimport('helper.route', JPATH_COMPONENT_SITE);		$app = JFactory::getApplication();		$jinput = $app->input;		$view = is_null($view) ? $jinput->get('view') : $view;		$id = empty($id) ? $jinput->getInt('id') : $id;		if ($view == 'newsfeed')		{			if ($id)			{				$associations = JLanguageAssociations::getAssociations('com_newsfeeds', '#__newsfeeds', 'com_newsfeeds.item', $id);				$return = array();				foreach ($associations as $tag => $item)				{					$return[$tag] = NewsfeedsHelperRoute::getNewsfeedRoute($item->id, $item->catid, $item->language);				}				return $return;			}		}		if ($view == 'category' || $view == 'categories')		{			return self::getCategoryAssociations($id, 'com_newsfeeds');		}		return array();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Discover Installation Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerControllerDiscover extends JControllerLegacy{	/**	 * Refreshes the cache of discovered extensions.	 *	 * @return  void	 *	 * @since   1.6	 */	public function refresh()	{		$model = $this->getModel('discover');		$model->discover();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=discover', false));	}	/**	 * Install a discovered extension.	 *	 * @return  void	 *	 * @since   1.6	 */	public function install()	{		$model = $this->getModel('discover');		$model->discover_install();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=discover', false));	}	/**	 * Clean out the discovered extension cache.	 *	 * @return  void	 *	 * @since   1.6	 */	public function purge()	{		$model = $this->getModel('discover');		$model->purge();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=discover', false), $model->_message);	}}
<?php/** * @package    Joomla.Compat * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JsonSerializable interface. This file should only be loaded on PHP < 5.4 * It allows us to implement it in classes without requiring PHP 5.4 * * @package  Joomla.Compat * @link     http://www.php.net/manual/en/jsonserializable.jsonserialize.php * @since    12.2 */interface JsonSerializable{	/**	 * Return data which should be serialized by json_encode().	 *	 * @return  mixed	 *	 * @since   12.2	 */	public function jsonSerialize();}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleUrl extends JFormRule{	/**	 * Method to test an external url for a valid parts.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @link    http://www.w3.org/Addressing/URL/url-spec.txt	 * @see	    Jstring	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		$urlParts = JString::parse_url($value);		// See http://www.w3.org/Addressing/URL/url-spec.txt		// Use the full list or optionally specify a list of permitted schemes.		if ($element['schemes'] == '')		{			$scheme = array('http', 'https', 'ftp', 'ftps', 'gopher', 'mailto', 'news', 'prospero', 'telnet', 'rlogin', 'tn3270', 'wais', 'url',				'mid', 'cid', 'nntp', 'tel', 'urn', 'ldap', 'file', 'fax', 'modem', 'git');		}		else		{			$scheme = explode(',', $element['schemes']);		}		/*		 * This rule is only for full URLs with schemes because parse_url does not parse		 * accurately without a scheme.		 * @see http://php.net/manual/en/function.parse-url.php		 */		if ($urlParts && !array_key_exists('scheme', $urlParts))		{			return false;		}		$urlScheme = (string) $urlParts['scheme'];		$urlScheme = strtolower($urlScheme);		if (in_array($urlScheme, $scheme) == false)		{			return false;		}		// For some schemes here must be two slashes.		if (($urlScheme == 'http' || $urlScheme == 'https' || $urlScheme == 'ftp' || $urlScheme == 'sftp' || $urlScheme == 'gopher'			|| $urlScheme == 'wais' || $urlScheme == 'gopher' || $urlScheme == 'prospero' || $urlScheme == 'telnet' || $urlScheme == 'git')			&& ((substr($value, strlen($urlScheme), 3)) !== '://'))		{			return false;		}		// The best we can do for the rest is make sure that the strings are valid UTF-8		// and the port is an integer.		if (array_key_exists('host', $urlParts) && !JString::valid((string) $urlParts['host']))		{			return false;		}		if (array_key_exists('port', $urlParts) && !is_int((int) $urlParts['port']))		{			return false;		}		if (array_key_exists('path', $urlParts) && !JString::valid((string) $urlParts['path']))		{			return false;		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Stemmer base class. * * @package     Joomla.Platform * @subpackage  Language * @since       12.1 */abstract class JLanguageStemmer{	/**	 * An internal cache of stemmed tokens.	 *	 * @var    array	 * @since  12.1	 */	protected $cache = array();	/**	 * @var    array  JLanguageStemmer instances.	 * @since  12.1	 */	protected static $instances = array();	/**	 * Method to get a stemmer, creating it if necessary.	 *	 * @param   string  $adapter  The type of stemmer to load.	 *	 * @return  JLanguageStemmer  A JLanguageStemmer instance.	 *	 * @since   12.1	 * @throws  RuntimeException on invalid stemmer.	 */	public static function getInstance($adapter)	{		// Only create one stemmer for each adapter.		if (isset(self::$instances[$adapter]))		{			return self::$instances[$adapter];		}		// Setup the adapter for the stemmer.		$class = 'JLanguageStemmer' . ucfirst(trim($adapter));		// Check if a stemmer exists for the adapter.		if (!class_exists($class))		{			// Throw invalid adapter exception.			throw new RuntimeException(JText::sprintf('JLIB_STEMMER_INVALID_STEMMER', $adapter));		}		self::$instances[$adapter] = new $class;		return self::$instances[$adapter];	}	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   12.1	 */	abstract public function stem($token, $lang);}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_newsfeeds.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_items') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><fieldset>	<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_contact.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_items') == 1) :?>			<dl><dt>				<?php echo JText::_('COM_CONTACT_CAT_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>            <?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Log Entry class * * This class is designed to hold log entries for either writing to an engine, or for * supported engines, retrieving lists and building in memory (PHP based) search operations. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogEntry{	/**	 * Application responsible for log entry.	 * @var    string	 * @since  11.1	 */	public $category;	/**	 * The date the message was logged.	 * @var    JDate	 * @since  11.1	 */	public $date;	/**	 * Message to be logged.	 * @var    string	 * @since  11.1	 */	public $message;	/**	 * The priority of the message to be logged.	 * @var    string	 * @since  11.1	 * @see    $priorities	 */	public $priority = JLog::INFO;	/**	 * List of available log priority levels [Based on the Syslog default levels].	 * @var    array	 * @since  11.1	 */	protected $priorities = array(		JLog::EMERGENCY,		JLog::ALERT,		JLog::CRITICAL,		JLog::ERROR,		JLog::WARNING,		JLog::NOTICE,		JLog::INFO,		JLog::DEBUG	);	/**	 * Constructor	 *	 * @param   string  $message   The message to log.	 * @param   string  $priority  Message priority based on {$this->priorities}.	 * @param   string  $category  Type of entry	 * @param   string  $date      Date of entry (defaults to now if not specified or blank)	 *	 * @since   11.1	 */	public function __construct($message, $priority = JLog::INFO, $category = '', $date = null)	{		$this->message = (string) $message;		// Sanitize the priority.		if (!in_array($priority, $this->priorities, true))		{			$priority = JLog::INFO;		}		$this->priority = $priority;		// Sanitize category if it exists.		if (!empty($category))		{			$this->category = (string) strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $category));		}		// Get the date as a JDate object.		$this->date = new JDate($date ? $date : 'now');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/route.php';$controller = JControllerLegacy::getInstance('Contact');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL server database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorSqlsrv extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return sqlsrv_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return sqlsrv_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		sqlsrv_free_stmt($this->cursor);	}}
