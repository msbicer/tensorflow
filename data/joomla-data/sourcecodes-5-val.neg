<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_COOKIE_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('cookie') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Social Stream class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinStream extends JLinkedinObject{	/**	 * Method to add a new share. Note: post must contain comment and/or (title and url).	 *	 * @param   string   $visibility   One of anyone: all members or connections-only: connections only.	 * @param   string   $comment      Text of member's comment.	 * @param   string   $title        Title of shared document.	 * @param   string   $url          URL for shared content.	 * @param   string   $image        URL for image of shared content.	 * @param   string   $description  Description of shared content.	 * @param   boolean  $twitter      True to have LinkedIn pass the status message along to a member's tethered Twitter account.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 * @throws  RuntimeException	 */	public function share($visibility, $comment = null, $title = null, $url = null, $image = null, $description = null, $twitter = false)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/shares';		// Check if twitter is true.		if ($twitter)		{			$base .= '?twitter-post=true';		}		// Build xml.		$xml = '<share>				  <visibility>					 <code>' . $visibility . '</code>				  </visibility>';		// Check if comment specified.		if ($comment)		{			$xml .= '<comment>' . $comment . '</comment>';		}		// Check if title and url are specified.		if ($title && $url)		{			$xml .= '<content>					   <title>' . $title . '</title>					   <submitted-url>' . $url . '</submitted-url>';			// Check if image is specified.			if ($image)			{				$xml .= '<submitted-image-url>' . $image . '</submitted-image-url>';			}			// Check if descrption id specified.			if ($description)			{				$xml .= '<description>' . $description . '</description>';			}			$xml .= '</content>';		}		elseif (!$comment)		{			throw new RuntimeException('Post must contain comment and/or (title and url).');		}		$xml .= '</share>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to reshare an existing share.	 *	 * @param   string   $visibility  One of anyone: all members or connections-only: connections only.	 * @param   string   $id          The unique identifier for a share.	 * @param   string   $comment     Text of member's comment.	 * @param   boolean  $twitter     True to have LinkedIn pass the status message along to a member's tethered Twitter account.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 * @throws  RuntimeException	 */	public function reshare($visibility, $id, $comment = null, $twitter = false)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/shares';		// Check if twitter is true.		if ($twitter)		{			$base .= '?twitter-post=true';		}		// Build xml.		$xml = '<share>				  <visibility>					 <code>' . $visibility . '</code>				  </visibility>';		// Check if comment specified.		if ($comment)		{			$xml .= '<comment>' . $comment . '</comment>';		}		$xml .= '   <attribution>					   <share>					   	  <id>' . $id . '</id>					   </share>					</attribution>				 </share>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to get a particular member's current share.	 *	 * @param   string  $id   Member id of the profile you want.	 * @param   string  $url  The public profile URL.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getCurrentShare($id = null, $url = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if a member id is specified.		if ($id)		{			$base .= 'id=' . $id;		}		elseif (!$url)		{			$base .= '~';		}		// Check if profile url is specified.		if ($url)		{			$base .= 'url=' . $this->oauth->safeEncode($url);		}		$base .= ':(current-share)';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get a particular member's current share.	 *	 * @param   string   $id    Member id of the profile you want.	 * @param   string   $url   The public profile URL.	 * @param   boolean  $self  Used to return member's feed. Omitted to return aggregated network feed.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getShareStream($id = null, $url = null, $self = true)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if a member id is specified.		if ($id)		{			$base .= $id;		}		elseif (!$url)		{			$base .= '~';		}		// Check if profile url is specified.		if ($url)		{			$base .= 'url=' . $this->oauth->safeEncode($url);		}		$base .= '/network';		// Set request parameters.		$data['format'] = 'json';		$data['type'] = 'SHAR';		// Check if self is true		if ($self)		{			$data['scope'] = 'self';		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get the users network updates.	 *	 * @param   string   $id      Member id.	 * @param   boolean  $self    Used to return member's feed. Omitted to return aggregated network feed.	 * @param   mixed    $type    String containing any valid Network Update Type from the table or an array of strings	 * 							  to specify more than one Network Update type.	 * @param   integer  $count   Number of updates to return, with a maximum of 250.	 * @param   integer  $start   The offset by which to start Network Update pagination.	 * @param   string   $after   Timestamp after which to retrieve updates.	 * @param   string   $before  Timestamp before which to retrieve updates.	 * @param   boolean  $hidden  Whether to display updates from people the member has chosen to "hide" from their update stream.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getNetworkUpdates($id = null, $self = true, $type = null, $count = 0, $start = 0, $after = null, $before = null,		$hidden = false)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if a member id is specified.		if ($id)		{			$base .= $id;		}		else		{			$base .= '~';		}		$base .= '/network/updates';		// Set request parameters.		$data['format'] = 'json';		// Check if self is true.		if ($self)		{			$data['scope'] = 'self';		}		// Check if type is specified.		if ($type)		{			$data['type'] = $type;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if after is specified.		if ($after)		{			$data['after'] = $after;		}		// Check if before is specified.		if ($before > 0)		{			$data['before'] = $before;		}		// Check if hidden is true.		if ($hidden)		{			$data['hidden'] = $hidden;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get information about the current member's network.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getNetworkStats()	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/network/network-stats';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get the users network updates.	 *	 * @param   string  $body  The actual content of the update. You can use HTML to include links to the user name and the content the user	 *                         created. Other HTML tags are not supported. All body text should be HTML entity escaped and UTF-8 compliant.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function postNetworkUpdate($body)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/person-activities';		// Build the xml.		$xml = '<activity locale="en_US">					<content-type>linkedin-html</content-type>				    <body>' . $body . '</body>				</activity>';		$header['Content-Type'] = 'text/xml';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to retrieve all comments for a given network update.	 *	 * @param   string  $key  update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getComments($key)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/update-comments';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to post a new comment to an existing update.	 *	 * @param   string  $key      update/update-key representing an update.	 * @param   string  $comment  Maximum length of 700 characters	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function postComment($key, $comment)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/update-comments';		// Build the xml.		$xml = '<update-comment>				  <comment>' . $comment . '</comment>				</update-comment>';		$header['Content-Type'] = 'text/xml';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to retrieve the complete list of people who liked an update.	 *	 * @param   string  $key  update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getLikes($key)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/likes';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to like or unlike an update.	 *	 * @param   string   $key   Update/update-key representing an update.	 * @param   boolean  $like  True to like update, false otherwise.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	private function _likeUnlike($key, $like)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/is-liked';		// Build xml.		$xml = '<is-liked>' . $this->booleanToString($like) . '</is-liked>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to like an update.	 *	 * @param   string  $key  Update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function like($key)	{		return $this->_likeUnlike($key, true);	}	/**	 * Method used to unlike an update.	 *	 * @param   string  $key  Update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unlike($key)	{		return $this->_likeUnlike($key, false);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();// This checks if the config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params['show_publishing_options']);$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;if (!$editoroptions){	$params['show_publishing_options'] = '1';	$params['show_article_options'] = '1';	$params['show_urls_images_backend'] = '0';	$params['show_urls_images_frontend'] = '0';}// Check if the article uses configuration settings besides global. If so, use them.if (!empty($this->item->attribs['show_publishing_options'])){	$params['show_publishing_options'] = $this->item->attribs['show_publishing_options'];}if (!empty($this->item->attribs['show_article_options'])){	$params['show_article_options'] = $this->item->attribs['show_article_options'];}if (!empty($this->item->attribs['show_urls_images_backend'])){	$params['show_urls_images_backend'] = $this->item->attribs['show_urls_images_backend'];}?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_content&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate">	<div class="row-fluid">		<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_CONTENT_ARTICLE_DETAILS', true)); ?>					<fieldset class="adminform">						<div class="control-group form-inline">							<?php echo $this->form->getLabel('title'); ?> <?php echo $this->form->getInput('title'); ?> <?php echo $this->form->getLabel('catid'); ?> <?php echo $this->form->getInput('catid'); ?>						</div>						<?php echo $this->form->getInput('articletext'); ?>					</fieldset>					<?php						// The url and images fields only show if the configuration is set to allow them. This is for legacy reasons.					?>					<?php if ($params['show_urls_images_backend']) : ?>						<div class="row-fluid">							<div class="span6">								<h4><?php echo JText::_('COM_CONTENT_FIELDSET_URLS_AND_IMAGES');?></h4>								<div class="control-group">									<?php echo $this->form->getLabel('images'); ?>									<div class="controls">										<?php echo $this->form->getInput('images'); ?>									</div>								</div>								<?php foreach ($this->form->getGroup('images') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>											<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>							<div class="span6">								<?php foreach ($this->form->getGroup('urls') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>												<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>						</div>					<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php // Do not show the publishing options if the edit form is configured not to. ?>					<?php  if ($params['show_publishing_options'] || ( $params['show_publishing_options'] = '' && !empty($editoroptions)) ) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_CONTENT_FIELDSET_PUBLISHING', true)); ?>							<div class="row-fluid">								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('alias'); ?>										</div>									</div>									<div class="control-group">										<div class="control-label">											<?php echo $this->form->getLabel('id'); ?>										</div>										<div class="controls">											<?php echo $this->form->getInput('id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by_alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by_alias'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created'); ?>										<div class="controls">											<?php echo $this->form->getInput('created'); ?>										</div>									</div>								</div>								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('publish_up'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_up'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('publish_down'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_down'); ?>										</div>									</div>									<?php if ($this->item->modified_by) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('modified_by'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_by'); ?>											</div>										</div>										<div class="control-group">											<?php echo $this->form->getLabel('modified'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->version) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('version'); ?>											<div class="controls">												<?php echo $this->form->getInput('version'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->hits) : ?>										<div class="control-group">											<div class="control-label">												<?php echo $this->form->getLabel('hits'); ?>											</div>											<div class="controls">												<?php echo $this->form->getInput('hits'); ?>											</div>										</div>									<?php endif; ?>								</div>							</div>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php  endif; ?>					<?php if ($params['show_article_options'] || (( $params['show_article_options'] == '' && !empty($editoroptions) ))) : ?>							<?php $fieldSets = $this->form->getFieldsets('attribs'); ?>							<?php foreach ($fieldSets as $name => $fieldSet) : ?>								<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>									<?php $attribtabs = 'attrib-' . $name; ?>									<?php echo JHtml::_('bootstrap.addTab', 'myTab', $attribtabs, JText::_($fieldSet->label, true)); ?>								<?php endif; ?>							<?php								// If the parameter says to show the article options or if the parameters have never been set, we will								// show the article options.								if ($params['show_article_options'] || (( $params['show_article_options'] == '' && !empty($editoroptions) ))) : ?>								<?php	// Go through all the fieldsets except the configuration and basic-limited, which are									// handled separately below.								?>									<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>										<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>											<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>										<?php endif; ?>										<?php foreach ($this->form->getFieldset($name) as $field) : ?>											<div class="control-group">												<?php echo $field->label; ?>												<div class="controls">													<?php echo $field->input; ?>												</div>											</div>										<?php endforeach; ?>									<?php endif; ?>								<?php // If we are not showing the options we need to use the hidden fields so the values are not lost.								?>								<?php elseif ($name == 'basic-limited'):									foreach ($this->form->getFieldset('basic-limited') as $field) :										echo $field->input;									endforeach;								endif;							?>						<?php endforeach; ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>					<?php // We need to make a separate space for the configuration						// so that those fields always show to those wih permissions					?>					<?php if ($this->canDo->get('core.admin')):  ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'editor', JText::_('COM_CONTENT_SLIDER_EDITOR_CONFIG', true)); ?>							<?php foreach ($this->form->getFieldset('editorConfig') as $field) : ?>								<div class="control-group">									<?php echo $field->label; ?>									<div class="controls">										<?php echo $field->input; ?>									</div>								</div>							<?php endforeach; ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>							<?php echo $this->loadTemplate('metadata'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php if ($assoc) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>							<?php echo $this->loadTemplate('associations'); ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>					<?php if ($this->canDo->get('core.admin')) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'permissions', JText::_('COM_CONTENT_FIELDSET_RULES', true)); ?>							<fieldset>								<?php echo $this->form->getInput('rules'); ?>							</fieldset>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="return" value="<?php echo $input->getCmd('return');?>" />			<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'link.cancel' || document.formvalidator.isValid(document.id('link-form')))		{			Joomla.submitform(task, document.getElementById('link-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_redirect&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="link-form" class="form-validate form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'basic')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic', empty($this->item->id) ? JText::_('COM_REDIRECT_NEW_LINK', true) : JText::sprintf('COM_REDIRECT_EDIT_LINK', $this->item->id, true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('old_url'); ?></div>					<div class="controls"><?php echo $this->form->getInput('old_url'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('new_url'); ?></div>					<div class="controls"><?php echo $this->form->getInput('new_url'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('published'); ?></div>					<div class="controls"><?php echo $this->form->getInput('published'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('comment'); ?></div>					<div class="controls"><?php echo $this->form->getInput('comment'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('id'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_date'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_date'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified_date'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified_date'); ?></div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</fieldset></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Templates manager master display controller. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'styles';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$view   = $this->input->get('view', 'styles');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'style' && $layout == 'edit' && !$this->checkEditId('com_templates.edit.style', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_templates&view=styles', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Oracle database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/pdo * @since       12.1 */class JDatabaseDriverOracle extends JDatabaseDriverPdo{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'oracle';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = '"';	/**	 * Returns the current dateformat	 *	 * @var   string	 * @since 12.1	 */	protected $dateformat;	/**	 * Returns the current character set	 *	 * @var   string	 * @since 12.1	 */	protected $charset;	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		$options['driver'] = 'oci';		$options['charset']    = (isset($options['charset'])) ? $options['charset']   : 'AL32UTF8';		$options['dateformat'] = (isset($options['dateformat'])) ? $options['dateformat'] : 'RRRR-MM-DD HH24:MI:SS';		$this->charset = $options['charset'];		$this->dateformat = $options['dateformat'];		// Finalize initialisation		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		parent::connect();		if (isset($this->options['schema']))		{			$this->setQuery('ALTER SESSION SET CURRENT_SCHEMA = ' . $this->quoteName($this->options['schema']))->execute();		}		$this->setDateFormat($this->dateformat);	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		$this->freeResult();		unset($this->connection);	}	/**	 * Drops a table from the database.	 *	 * Note: The IF EXISTS flag is unused in the Oracle driver.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true)			->setQuery('DROP TABLE :tableName');		$query->bind(':tableName', $tableName);		$this->setQuery($query);		$this->execute();		return $this;	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 */	public function getCollation()	{		return $this->charset;	}	/**	 * Get a query to run and verify the database is operational.	 *	 * @return  string  The query to check the health of the DB.	 *	 * @since   12.2	 */	public function getConnectedQuery()	{		return 'SELECT 1 FROM dual';	}	/**     * Returns the current date format     * This method should be useful in the case that     * somebody actually wants to use a different     * date format and needs to check what the current     * one is to see if it needs to be changed.     *     * @return string The current date format     *     * @since 12.1     */	public function getDateFormat()	{		return $this->dateformat;	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * Note: You must have the correct privileges before this method	 * will return usable results!	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		$result = array();		$query = $this->getQuery(true)			->select('dbms_metadata.get_ddl(:type, :tableName)')			->from('dual')			->bind(':type', 'TABLE');		// Sanitize input to an array and iterate over the list.		settype($tables, 'array');		foreach ($tables as $table)		{			$query->bind(':tableName', $table);			$this->setQuery($query);			$statement = (string) $this->loadResult();			$result[$table] = $statement;		}		return $result;	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$columns = array();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->select('*')			->from('ALL_TAB_COLUMNS')			->where('table_name = :tableName');		$prefixedTable = str_replace('#__', strtoupper($this->tablePrefix), $table);		$query->bind(':tableName', $prefixedTable);		$this->setQuery($query);		$fields = $this->loadObjectList();		if ($typeOnly)		{			foreach ($fields as $field)			{				$columns[$field->COLUMN_NAME] = $field->DATA_TYPE;			}		}		else		{			foreach ($fields as $field)			{				$columns[$field->COLUMN_NAME] = $field;				$columns[$field->COLUMN_NAME]->Default = null;			}		}		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $columns;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->select('*')			->from('ALL_CONSTRAINTS')			->where('table_name = :tableName')			->bind(':tableName', $table);		$this->setQuery($query);		$keys = $this->loadObjectList();		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $keys;	}	/**	 * Method to get an array of all tables in the database (schema).	 *	 * @param   string   $databaseName         The database (schema) name	 * @param   boolean  $includeDatabaseName  Whether to include the schema name in the results	 *	 * @return  array    An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList($databaseName = null, $includeDatabaseName = false)	{		$this->connect();		$query = $this->getQuery(true);		$tables = array();		if ($includeDatabaseName)		{			$query->select('owner, table_name');		}		else		{			$query->select('table_name');		}		$query->from('all_tables');		if ($databaseName)		{			$query->where('owner = :database')				->bind(':database', $databaseName);		}		$query->order('table_name');		$this->setQuery($query);		if ($includeDatabaseName)		{			$tables = $this->loadAssocList();		}		else		{			$tables = $this->loadResultArray();		}		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$this->setQuery("select value from nls_database_parameters where parameter = 'NLS_RDBMS_VERSION'");		return $this->loadResult();	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		return true;	}	/**     * Sets the Oracle Date Format for the session     * Default date format for Oracle is = DD-MON-RR     * The default date format for this driver is:     * 'RRRR-MM-DD HH24:MI:SS' since it is the format     * that matches the MySQL one used within most Joomla     * tables.     *     * @param   string  $dateFormat  Oracle Date Format String     *     * @return boolean     *     * @since  12.1     */	public function setDateFormat($dateFormat = 'DD-MON-RR')	{		$this->connect();		$this->setQuery("ALTER SESSION SET NLS_DATE_FORMAT = '$dateFormat'");		$this->setQuery("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = '$dateFormat'");		if (!$this->execute())		{			return false;		}		$this->dateformat = $dateFormat;		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * Returns false automatically for the Oracle driver since	 * you can only set the character set when the connection	 * is created.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		return false;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $table  The name of the table to unlock.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function lockTable($table)	{		$this->setQuery('LOCK TABLE ' . $this->quoteName($table) . ' IN EXCLUSIVE MODE')->execute();		return $this;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by Oracle.	 * @param   string  $prefix    Not used by Oracle.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->setQuery('RENAME ' . $oldTable . ' TO ' . $newTable)->execute();		return $this;	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		$this->setQuery('COMMIT')->execute();		return $this;	}	/**	 * Test to see if the PDO ODBC connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return class_exists('PDO') && in_array('oci', PDO::getAvailableDrivers());	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   11.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$escaped = false;		$startPos = 0;		$quoteChar = "'";		$literal = '';		$query = trim($query);		$n = strlen($query);		while ($startPos < $n)		{			$ip = strpos($query, $prefix, $startPos);			if ($ip === false)			{				break;			}			$j = strpos($query, "'", $startPos);			if ($j === false)			{				$j = $n;			}			$literal .= str_replace($prefix, $this->tablePrefix, substr($query, $startPos, $j - $startPos));			$startPos = $j;			$j = $startPos + 1;			if ($j >= $n)			{				break;			}			// Quote comes first, find end of quote			while (true)			{				$k = strpos($query, $quoteChar, $j);				$escaped = false;				if ($k === false)				{					break;				}				$l = $k - 1;				while ($l >= 0 && $query{$l} == '\\')				{					$l--;					$escaped = !$escaped;				}				if ($escaped)				{					$j = $k + 1;					continue;				}				break;			}			if ($k === false)			{				// Error in the query - no end quote; ignore it				break;			}			$literal .= substr($query, $startPos, $k - $startPos + 1);			$startPos = $k + 1;		}		if ($startPos < $n)		{			$literal .= substr($query, $startPos, $n - $startPos);		}		return $literal;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?phpif (!empty($feed) && is_string($feed)){		echo $feed;}else{	$lang = JFactory::getLanguage();	$myrtl = $params->get('rssrtl');	$direction = " ";	if ($lang->isRTL() && $myrtl == 0)	{		$direction = " redirect-rtl";	}	// feed description	elseif ($lang->isRTL() && $myrtl == 1)	{			$direction = " redirect-ltr";	}	elseif ($lang->isRTL() && $myrtl == 2)	{		$direction = " redirect-rtl";	}	elseif ($myrtl == 0)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 1)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 2)	{		$direction = " redirect-rtl";	}	?>	<?php	if ($feed != false)	{		//image handling		$iUrl	= isset($feed->image)	? $feed->image	: null;		$iTitle = isset($feed->imagetitle) ? $feed->imagetitle : null;		?>		<div style="direction: <?php echo $rssrtl ? 'rtl' :'ltr'; ?>; text-align: <?php echo $rssrtl ? 'right' :'left'; ?> ! important"  class="feed<?php echo $moduleclass_sfx; ?>">		<?php		// feed description		if (!is_null($feed->title) && $params->get('rsstitle', 1))		{			?>					<h2 class="<?php echo $direction; ?>">						<a href="<?php echo str_replace('&', '&amp', $feed->link); ?>" target="_blank">						<?php echo $feed->title; ?></a>					</h2>			<?php		}		// feed description		if ($params->get('rssdesc', 1))		{		?>			<?php echo $feed->description; ?>			<?php		}		// feed image		if ($params->get('rssimage', 1) && $iUrl) :		?>			<img src="<?php echo $iUrl; ?>" alt="<?php echo @$iTitle; ?>"/>		<?php endif; ?>	<ul class="newsfeed<?php echo $params->get('moduleclass_sfx'); ?>">	<!-- Show items -->	<?php if (!empty($feed))	{ ?>	<ul>		<?php for  ($i = 0; $i < $params->get('rssitems', 5); $i++)		{  ?>			<?php				$uri = (!empty($feed[$i]->guid) || !is_null($feed[$i]->guid)) ? $feed[$i]->guid : $feed[$i]->uri;				$uri = substr($uri, 0, 4) != 'http' ? $params->get('rsslink') : $uri;				$text = !empty($feed[$i]->content) ||  !is_null($feed[$i]->content) ? $feed[$i]->content : $feed[$i]->description;			?>				<li>					<?php if (!empty($uri)) : ?>						<h5 class="feed-link">						<a href="<?php echo $uri; ?>" target="_blank">						<?php  echo $feed[$i]->title; ?></a></h5>					<?php else : ?>						<h5 class="feed-link"><?php  echo $feed[$i]->title; ?></h5>					<?php  endif; ?>					<?php if ($params->get('rssitemdesc') && !empty($text)) : ?>						<div class="feed-item-description">						<?php							// Strip the images.							$text = JFilterOutput::stripImages($text);							$text = JHtml::_('string.truncate', $text, $params->get('word_count'));							echo str_replace('&apos;', "'", $text);						?>						</div>					<?php endif; ?>					</li>			<?php } ?>			</ul>	<?php }	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_stats * * @package     Joomla.Site * @subpackage  mod_stats * @since       1.5 */class ModStatsHelper{	public static function &getList(&$params)	{		$app	= JFactory::getApplication();		$db		= JFactory::getDbo();		$rows	= array();		$query	= $db->getQuery(true);		$serverinfo = $params->get('serverinfo');		$siteinfo	= $params->get('siteinfo');		$counter	= $params->get('counter');		$increase	= $params->get('increase');		$i = 0;		if ($serverinfo)		{			$rows[$i] = new stdClass;			$rows[$i]->title	= JText::_('MOD_STATS_OS');			$rows[$i]->data		= substr(php_uname(), 0, 7);			$i++;			$rows[$i] = new stdClass;			$rows[$i]->title	= JText::_('MOD_STATS_PHP');			$rows[$i]->data	= phpversion();			$i++;			$rows[$i] = new stdClass;			$rows[$i]->title	= JText::_('MOD_STATS_MYSQL');			$rows[$i]->data	= $db->getVersion();			$i++;			$rows[$i] = new stdClass;			$rows[$i]->title	= JTEXT::_('MOD_STATS_TIME');			$rows[$i]->data	= JHtml::_('date', 'now', 'H:i');			$i++;			$rows[$i] = new stdClass;			$rows[$i]->title	= JText::_('MOD_STATS_CACHING');			$rows[$i]->data	= $app->getCfg('caching') ? JText::_('JENABLED'):JText::_('JDISABLED');			$i++;			$rows[$i] = new stdClass;			$rows[$i]->title	= JText::_('MOD_STATS_GZIP');			$rows[$i]->data	= $app->getCfg('gzip') ? JText::_('JENABLED'):JText::_('JDISABLED');			$i++;		}		if ($siteinfo)		{			$query->select('COUNT(id) AS count_users')				->from('#__users');			$db->setQuery($query);			$users = $db->loadResult();			$query->clear()				->select('COUNT(id) AS count_items')				->from('#__content')				->where('state = 1');			$db->setQuery($query);			$items = $db->loadResult();			$query->clear()				->select('COUNT(id) AS count_links ')				->from('#__weblinks')				->where('state = 1');			$db->setQuery($query);			$links = $db->loadResult();			if ($users)			{				$rows[$i] = new stdClass;				$rows[$i]->title	= JText::_('MOD_STATS_USERS');				$rows[$i]->data	= $users;				$i++;			}			if ($items)			{				$rows[$i] = new stdClass;				$rows[$i]->title	= JText::_('MOD_STATS_ARTICLES');				$rows[$i]->data	= $items;				$i++;			}			if ($links)			{				$rows[$i] = new stdClass;				$rows[$i]->title	= JText::_('MOD_STATS_WEBLINKS');				$rows[$i]->data	= $links;				$i++;			}		}		if ($counter)		{			$query->clear()				->select('SUM(hits) AS count_hits')				->from('#__content')				->where('state = 1');			$db->setQuery($query);			$hits = $db->loadResult();			if ($hits)			{				$rows[$i] = new stdClass;				$rows[$i]->title	= JText::_('MOD_STATS_ARTICLES_VIEW_HITS');				$rows[$i]->data	= $hits + $increase;				$i++;			}		}		return $rows;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');// Create some shortcuts.$params		= &$this->item->params;$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));// check for at least one editable article$isEditable = false;if (!empty($this->items)){	foreach ($this->items as $article)	{		if ($article->params->get('access-edit'))		{			$isEditable = true;			break;		}	}}?><?php if (empty($this->items)) : ?>	<?php if ($this->params->get('show_no_articles', 1)) : ?>	<p><?php echo JText::_('COM_CONTENT_NO_ARTICLES'); ?></p>	<?php endif; ?><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<?php if ($this->params->get('show_headings') || $this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?>	<table class="category table table-striped table-bordered table-hover">		<?php if ($this->params->get('show_headings')) : ?>		<thead>			<tr>				<th id="categorylist_header_title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<?php if ($date = $this->params->get('list_show_date')) : ?>					<th id="categorylist_header_date">						<?php if ($date == "created") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.created', $listDirn, $listOrder); ?>						<?php elseif ($date == "modified") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.modified', $listDirn, $listOrder); ?>						<?php elseif ($date == "published") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.publish_up', $listDirn, $listOrder); ?>						<?php endif; ?>					</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_author')) : ?>					<th id="categorylist_header_author">						<?php echo JHtml::_('grid.sort', 'JAUTHOR', 'author', $listDirn, $listOrder); ?>					</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_hits')) : ?>					<th id="categorylist_header_hits">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>					</th>				<?php endif; ?>				<?php if ($isEditable) : ?>					<th id="categorylist_header_edit"><?php echo JText::_('COM_CONTENT_EDIT_ITEM'); ?></th>				<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $article) : ?>				<?php if ($this->items[$i]->state == 0) : ?>				 <tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>				<tr class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>					<td headers="categorylist_header_title" class="list-title">						<?php if (in_array($article->access, $this->user->getAuthorisedViewLevels())) : ?>							<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid)); ?>">								<?php echo $this->escape($article->title); ?>							</a>						<?php else: ?>							<?php							echo $this->escape($article->title).' : ';							$menu		= JFactory::getApplication()->getMenu();							$active		= $menu->getActive();							$itemId		= $active->id;							$link = JRoute::_('index.php?option=com_users&view=login&Itemid='.$itemId);							$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($article->slug));							$fullURL = new JURI($link);							$fullURL->setVar('return', base64_encode($returnURL));							?>							<a href="<?php echo $fullURL; ?>" class="register">								<?php echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE'); ?>							</a>						<?php endif; ?>						<?php if ($article->state == 0) : ?>							<span class="list-published label label-warning">								<?php echo JText::_('JUNPUBLISHED'); ?>							</span>						<?php endif; ?>					</td>					<?php if ($this->params->get('list_show_date')) : ?>						<td headers="categorylist_header_date" class="list-date small">							<?php							echo JHtml::_(								'date', $article->displayDate,								$this->escape($this->params->get('date_format', JText::_('DATE_FORMAT_LC3')))							); ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_author', 1)) : ?>						<td headers="categorylist_header_author" class="list-author">							<?php if (!empty($article->author) || !empty($article->created_by_alias)) : ?>								<?php $author = $article->author ?>								<?php $author = ($article->created_by_alias ? $article->created_by_alias : $author);?>								<?php if (!empty($article->contactid ) &&  $this->params->get('link_author') == true):?>									<?php echo JHtml::_(											'link',											JRoute::_('index.php?option=com_contact&view=contact&id='.$article->contactid),											$author									); ?>								<?php else :?>									<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>								<?php endif; ?>							<?php endif; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_hits', 1)) : ?>						<td headers="categorylist_header_hits" class="list-hits">							<span class="badge badge-info">								<?php echo JText::sprintf('JGLOBAL_HITS_COUNT', $article->hits); ?>							</span>						</td>					<?php endif; ?>					<?php if ($isEditable) : ?>						<td headers="categorylist_header_edit" class="list-edit">							<?php if ($article->params->get('access-edit')) : ?>								<?php echo JHtml::_('icon.edit', $article, $params); ?>							<?php endif; ?>						</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table><?php endif; ?><?php // Code to add a link to submit an article. ?><?php if ($this->category->getParams()->get('access-create')) : ?>	<?php echo JHtml::_('icon.create', $this->category, $this->category->params); ?><?php  endif; ?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php  endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tags Model * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsModelTags extends JModelList{	/**	 * Constructor.	 *	 * @param    array    An optional associative array of configuration settings.	 * @see        JController	 * @since      3.0.3	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'published', 'a.published',				'access', 'a.access', 'access_level',				'language', 'a.language',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'created_time', 'a.created_time',				'created_user_id', 'a.created_user_id',				'lft', 'a.lft',				'rgt', 'a.rgt',				'level', 'a.level',				'path', 'a.path',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return    void	 * @since    3.1	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$context = $this->context;		$search = $this->getUserStateFromRequest($context . '.search', 'filter_search');		$this->setState('filter.search', $search);		$level = $this->getUserStateFromRequest($context . '.filter.level', 'filter_level', 0, 'int');		$this->setState('filter.level', $level);		$access = $this->getUserStateFromRequest($context . '.filter.access', 'filter_access', 0, 'int');		$this->setState('filter.access', $access);		$published = $this->getUserStateFromRequest($context . '.filter.published', 'filter_published', '');		$this->setState('filter.published', $published);		$language = $this->getUserStateFromRequest($context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_tags');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   3.1	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Method to create a query for a list of items.	 *	 * @return  string	 *	 * @since  3.1	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.note, a.published, a.access' .					', a.checked_out, a.checked_out_time, a.created_user_id' .					', a.path, a.parent_id, a.level, a.lft, a.rgt' .					', a.language'			)		);		$query->from('#__tags AS a')			->where('a.alias <> ' . $db->quote('root'));		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the users for the author.		$query->select('ua.name AS author_name')			->join('LEFT', '#__users AS ua ON ua.id = a.created_user_id')			->select('ug.title AS access_title')			->join('LEFT', '#__usergroups AS ug on ug.id = a.access');		// Filter on the level.		if ($level = $this->getState('filter.level'))		{			$query->where('a.level <= ' . (int) $level);		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'author:') === 0)			{				$search = $db->quote('%' . $db->escape(substr($search, 7), true) . '%');				$query->where('(ua.name LIKE ' . $search . ' OR ua.username LIKE ' . $search . ')');			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search . ' OR a.note LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Add the list ordering clause		$listOrdering = $this->getState('list.ordering', 'a.lft');		$listDirn = $db->escape($this->getState('list.direction', 'ASC'));		if ($listOrdering == 'a.access')		{			$query->order('a.access ' . $listDirn . ', a.lft ' . $listDirn);		}		else		{			$query->order($db->escape($listOrdering) . ' ' . $listDirn);		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method override to check-in a record or an array of record	 *	 * @param   mixed  $pks  The ID of the primary key or an array of IDs	 *	 * @return  mixed  Boolean false if there is an error, otherwise the count of records checked in.	 *	 * @since   12.2	 */	public function checkin($pks = array())	{		$pks = (array) $pks;		$table = $this->getTable();		$count = 0;		if (empty($pks))		{			$pks = array((int) $this->getState($this->getName() . '.id'));		}		// Check in all items.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				if ($table->checked_out > 0)				{					// Only attempt to check the row in if it exists.					if ($pk)					{						$user = JFactory::getUser();						// Get an instance of the row to checkin.						$table = $this->getTable();						if (!$table->load($pk))						{							$this->setError($table->getError());							return false;						}						// Check if this is the user having previously checked out the row.						if ($table->checked_out > 0 && $table->checked_out != $user->get('id') && !$user->authorise('core.admin', 'com_checkin'))						{							$this->setError(JText::_('JLIB_APPLICATION_ERROR_CHECKIN_USER_MISMATCH'));							return false;						}						// Attempt to check the row in.						if (!$table->checkin($pk))						{							$this->setError($table->getError());							return false;						}					}					$count++;				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return $count;	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   3.1	 */	public function getTable($type = 'Tag', $prefix = 'TagsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_CONTACT_NO_ARTICLES'); ?>	 </p><?php else : ?>	<form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search"><span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php echo JText::_('COM_CONTACT_FILTER_LABEL').'&#160;'; ?></label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>	</fieldset>	<?php endif; ?>		<ul class="category list-striped">			<?php foreach ($this->items as $i => $item) : ?>				<?php if (in_array($item->access, $this->user->getAuthorisedViewLevels())) : ?>					<?php if ($this->items[$i]->published == 0) : ?>						<li class="system-unpublished cat-list-row<?php echo $i % 2; ?>">					<?php else: ?>						<li class="cat-list-row<?php echo $i % 2; ?>" >					<?php endif; ?>						<span class="pull-right">							<?php if ($this->params->get('show_telephone_headings') AND !empty($item->telephone)) : ?>								<?php echo JTEXT::sprintf('COM_CONTACT_TELEPHONE_NUMBER', $item->telephone); ?><br/>							<?php endif; ?>							<?php if ($this->params->get('show_mobile_headings') AND !empty ($item->mobile)) : ?>									<?php echo JTEXT::sprintf('COM_CONTACT_MOBILE_NUMBER', $item->mobile); ?><br/>							<?php endif; ?>							<?php if ($this->params->get('show_fax_headings') AND !empty($item->fax) ) : ?>								<?php echo JTEXT::sprintf('COM_CONTACT_FAX_NUMBER', $item->fax); ?><br/>							<?php endif; ?>					</span>					<p>						<strong class="list-title">							<a href="<?php echo JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid)); ?>">								<?php echo $item->name; ?></a>							<?php if ($this->items[$i]->published == 0) : ?>								<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>							<?php endif; ?>						</strong><br/>						<?php if ($this->params->get('show_position_headings')) : ?>								<?php echo $item->con_position; ?><br/>						<?php endif; ?>						<?php if ($this->params->get('show_email_headings')) : ?>								<?php echo $item->email_to; ?>						<?php endif; ?>						<?php if ($this->params->get('show_suburb_headings') AND !empty($item->suburb)) : ?>							<?php echo $item->suburb . ', '; ?>						<?php endif; ?>						<?php if ($this->params->get('show_state_headings') AND !empty($item->state)) : ?>							<?php echo $item->state . ', '; ?>						<?php endif; ?>						<?php if ($this->params->get('show_country_headings') AND !empty($item->country)) : ?>							<?php echo $item->country; ?><br/>						<?php endif; ?>					</p>					</li>				<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php if ($this->params->get('show_pagination')) : ?>		<div class="pagination">			<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>			<?php endif; ?>			<?php echo $this->pagination->getPagesLinks(); ?>		</div>		<?php endif; ?>		<div>			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		</div></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Load tooltips behaviorJHtml::_('behavior.formvalidation');JHtml::_('behavior.switcher');JHtml::_('behavior.tooltip');// Load submenu template, using element id 'submenu' as needed by behavior.switcher$this->document->setBuffer($this->loadTemplate('navigation'), 'modules', 'submenu');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'application.cancel' || document.formvalidator.isValid(document.id('application-form')))		{			Joomla.submitform(task, document.getElementById('application-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_config');?>" id="application-form" method="post" name="adminForm" class="form-validate">	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftplogin'); ?>	<?php endif; ?>	<div id="config-document">		<div id="page-site" class="tab">			<div class="noshow">				<div class="width-60 fltlft">					<?php echo $this->loadTemplate('site'); ?>					<?php echo $this->loadTemplate('metadata'); ?>				</div>				<div class="width-40 fltrt">					<?php echo $this->loadTemplate('seo'); ?>					<?php echo $this->loadTemplate('cookie'); ?>				</div>			</div>		</div>		<div id="page-system" class="tab">			<div class="noshow">				<div class="width-60 fltlft">					<?php echo $this->loadTemplate('system'); ?>				</div>				<div class="width-40 fltrt">					<?php echo $this->loadTemplate('debug'); ?>					<?php echo $this->loadTemplate('cache'); ?>					<?php echo $this->loadTemplate('session'); ?>				</div>			</div>		</div>		<div id="page-server" class="tab">			<div class="noshow">				<div class="width-60 fltlft">					<?php echo $this->loadTemplate('server'); ?>					<?php echo $this->loadTemplate('locale'); ?>					<?php echo $this->loadTemplate('ftp'); ?>				</div>				<div class="width-40 fltrt">					<?php echo $this->loadTemplate('database'); ?>					<?php echo $this->loadTemplate('mail'); ?>				</div>			</div>		</div>		<div id="page-permissions" class="tab">			<div class="noshow">				<?php echo $this->loadTemplate('permissions'); ?>			</div>		</div>		<div id="page-filters" class="tab">			<div class="noshow">				<?php echo $this->loadTemplate('filters'); ?>			</div>		</div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<div class="clr"></div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');/** * UpdateAdapter class. * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 */class JUpdateAdapter extends JAdapterInstance{	/**	 * @var    resource	 * @since  12.1	 */	protected $xmlParser;	/**	 * @var    array	 * @since  12.1	 */	protected $stack = array('base');	/**	 * ID of update site	 *	 * @var    string	 * @since  12.1	 */	protected $updateSiteId = 0;	/**	 * Columns in the extensions table to be updated	 *	 * @var    array	 * @since  12.1	 */	protected $updatecols = array('NAME', 'ELEMENT', 'TYPE', 'FOLDER', 'CLIENT', 'VERSION', 'DESCRIPTION', 'INFOURL');	/**	 * Gets the reference to the current direct parent	 *	 * @return  object	 *	 * @since   11.1	 */	protected function _getStackLocation()	{		return implode('->', $this->stack);	}	/**	 * Gets the reference to the last tag	 *	 * @return  object	 *	 * @since   11.1	 */	protected function _getLastTag()	{		return $this->stack[count($this->stack) - 1];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User group model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelGroup extends JModelAdmin{	/**	 * @var		string	The event to trigger after saving the data.	 * @since   1.6	 */	protected $event_after_save = 'onUserAfterSaveGroup';	/**	 * @var		string	The event to trigger after before the data.	 * @since   1.6	 */	protected $event_before_save = 'onUserBeforeSaveGroup';	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	 * @since   1.6	*/	public function getTable($type = 'Usergroup', $prefix = 'JTable', $config = array())	{		$return = JTable::getInstance($type, $prefix, $config);		return $return;	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// Get the form.		$form = $this->loadForm('com_users.group', 'group', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_users.edit.group.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_users.group', $data);		return $data;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $groups = '')	{		$obj = is_array($data) ? JArrayHelper::toObject($data, 'JObject') : $data;		if (isset($obj->parent_id) && $obj->parent_id == 0 && $obj->id > 0)		{			$form->setFieldAttribute('parent_id', 'type', 'hidden');			$form->setFieldAttribute('parent_id', 'hidden', 'true');		}		parent::preprocessForm($form, $data, 'user');	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		// Include the content plugins for events.		JPluginHelper::importPlugin('user');		// Check the super admin permissions for group		// We get the parent group permissions and then check the group permissions manually		// We have to calculate the group permissions manually because we haven't saved the group yet		$parentSuperAdmin = JAccess::checkGroup($data['parent_id'], 'core.admin');		// Get core.admin rules from the root asset		$rules = JAccess::getAssetRules('root.1')->getData('core.admin');		// Get the value for the current group (will be true (allowed), false (denied), or null (inherit)		$groupSuperAdmin = $rules['core.admin']->allow($data['id']);		// We only need to change the $groupSuperAdmin if the parent is true or false. Otherwise, the value set in the rule takes effect.		if ($parentSuperAdmin === false)		{			// If parent is false (Denied), effective value will always be false			$groupSuperAdmin = false;		}		elseif ($parentSuperAdmin === true)		{			// If parent is true (allowed), group is true unless explicitly set to false			$groupSuperAdmin = ($groupSuperAdmin === false) ? false : true;		}		// Check for non-super admin trying to save with super admin group		$iAmSuperAdmin	= JFactory::getUser()->authorise('core.admin');		if ((!$iAmSuperAdmin) && ($groupSuperAdmin))		{			try			{				throw new Exception(JText::_('JLIB_USER_ERROR_NOT_SUPERADMIN'));			}			catch (Exception $e)			{				$this->setError($e->getMessage());				return false;			}		}		// Check for super-admin changing self to be non-super-admin		// First, are we a super admin>		if ($iAmSuperAdmin)		{			// Next, are we a member of the current group?			$myGroups = JAccess::getGroupsByUser(JFactory::getUser()->get('id'), false);			if (in_array($data['id'], $myGroups))			{				// Now, would we have super admin permissions without the current group?				$otherGroups = array_diff($myGroups, array($data['id']));				$otherSuperAdmin = false;				foreach ($otherGroups as $otherGroup)				{					$otherSuperAdmin = ($otherSuperAdmin) ? $otherSuperAdmin : JAccess::checkGroup($otherGroup, 'core.admin');				}				// If we would not otherwise have super admin permissions				// and the current group does not have super admin permissions, throw an exception				if ((!$otherSuperAdmin) && (!$groupSuperAdmin))				{					try					{						throw new Exception(JText::_('JLIB_USER_ERROR_CANNOT_DEMOTE_SELF'));					}					catch (Exception $e)					{						$this->setError($e->getMessage());						return false;					}				}			}		}		// Proceed with the save		return parent::save($data);	}	/**	 * Method to delete rows.	 *	 * @param   array  An array of item ids.	 * @return  boolean  Returns true on success, false on failure.	 * @since   1.6	 */	public function delete(&$pks)	{		// Typecast variable.		$pks = (array) $pks;		$user	= JFactory::getUser();		$groups = JAccess::getGroupsByUser($user->get('id'));		// Get a row instance.		$table = $this->getTable();		// Load plugins.		JPluginHelper::importPlugin('user');		$dispatcher = JEventDispatcher::getInstance();		// Check if I am a Super Admin		$iAmSuperAdmin	= $user->authorise('core.admin');		// do not allow to delete groups to which the current user belongs		foreach ($pks as $i => $pk)		{			if (in_array($pk, $groups))			{				JError::raiseWarning(403, JText::_('COM_USERS_DELETE_ERROR_INVALID_GROUP'));				return false;			}		}		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				// Access checks.				$allow = $user->authorise('core.edit.state', 'com_users');				// Don't allow non-super-admin to delete a super admin				$allow = (!$iAmSuperAdmin && JAccess::checkGroup($pk, 'core.admin')) ? false : $allow;				if ($allow)				{					// Fire the onUserBeforeDeleteGroup event.					$dispatcher->trigger('onUserBeforeDeleteGroup', array($table->getProperties()));					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					} else {						// Trigger the onUserAfterDeleteGroup event.						$dispatcher->trigger('onUserAfterDeleteGroup', array($table->getProperties(), true, $this->getError()));					}				} else {					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));				}			} else {				$this->setError($table->getError());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JFormRule for com_contact to make sure the message body contains no banned word. * * @package     Joomla.Site * @subpackage  com_contact */class JFormRuleContactEmailMessage extends JFormRule{	/**	 * Method to test for a valid color in hexadecimal.	 *	 * @param   SimpleXMLElement  &$element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value     The form field value to validate.	 * @param   string            $group     The field name group control value. This acts as as an array container for the field.	 *                                       For example if the field has name="foo" and the group value is set to "bar" then the	 *                                       full field name would end up being "bar[foo]".	 * @param   object            &$input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   object            &$form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 */	public function test(&$element, $value, $group = null, &$input = null, &$form = null)	{		$params = JComponentHelper::getParams('com_contact');		$banned = $params->get('banned_text');		foreach (explode(';', $banned) as $item) {			if (JString::stristr($item, $value) !== false)					return false;		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'banner.cancel' || document.formvalidator.isValid(document.id('banner-form')))		{			Joomla.submitform(task, document.getElementById('banner-form'));		}	}	window.addEvent('domready', function()	{		document.id('jform_type0').addEvent('click', function(e){			document.id('image').setStyle('display', 'block');			document.id('url').setStyle('display', 'block');			document.id('custom').setStyle('display', 'none');		});		document.id('jform_type1').addEvent('click', function(e){			document.id('image').setStyle('display', 'none');			document.id('url').setStyle('display', 'block');			document.id('custom').setStyle('display', 'block');		});		if (document.id('jform_type0').checked==true)		{			document.id('jform_type0').fireEvent('click');		}		else		{			document.id('jform_type1').fireEvent('click');		}	});</script><form action="<?php echo JRoute::_('index.php?option=com_banners&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="banner-form" class="form-validate form-horizontal"><!-- Begin Banner --><div class="span10 form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('COM_BANNERS_BANNER_DETAILS', true)); ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('name'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('name'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('alias'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('alias'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('catid'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('catid'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('type'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('type'); ?>					</div>				</div>				<div id="image">						<?php foreach ($this->form->getFieldset('image') as $field) : ?>							<div class="control-group">								<div class="control-label">									<?php echo $field->label; ?>								</div>								<div class="controls">									<?php echo $field->input; ?>								</div>							</div>						<?php endforeach; ?>				</div>				<div class="control-group" id="custom">					<div class="control-label">						<?php echo $this->form->getLabel('custombannercode'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('custombannercode'); ?>					</div>				</div>				<div class="control-group" id="url">					<div class="control-label">						<?php echo $this->form->getLabel('clickurl'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('clickurl'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('description'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('description'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('id'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('id'); ?>					</div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_BANNERS_GROUP_LABEL_PUBLISHING_DETAILS', true)); ?>				<?php foreach ($this->form->getFieldset('publish') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'otherparams', JText::_('COM_BANNERS_GROUP_LABEL_BANNER_DETAILS', true)); ?>				<?php foreach ($this->form->getFieldset('otherparams') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>				<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?>	</div>	<!-- End Newsfeed -->	<!-- Begin Sidebar -->	<div class="span2">		<h4><?php echo JText::_('JDETAILS');?></h4>		<hr />		<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('name'); ?>					</div>				</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('sticky'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('sticky'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('language'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('language'); ?>				</div>			</div>		</fieldset>	</div>	<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsViewTag extends JViewLegacy{	public function display($tpl = null)	{		$app      = JFactory::getApplication();		$document = JFactory::getDocument();		$document->link = JRoute::_(TagsHelperRoute::getTagRoute($app->input->getInt('id')));		$app->input->set('limit', $app->getCfg('feed_limit'));		$params = $app->getParams();		$siteEmail = $app->getCfg('mailfrom');		$fromName  = $app->getCfg('fromname');		$feedEmail = $app->getCfg('feed_email', 'author');		$document->editor = $fromName;		if ($feedEmail != "none")		{			$document->editorEmail = $siteEmail;		}		// Get some data from the model		$items    = $this->get('Items');		$tag = $this->get('Item');		foreach ($items as $item)		{			// Strip HTML from feed item title			$title = $this->escape($item->core_title);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// URL link to tagged item			// Change to new routing once it is merged			$link = JRoute::_($item->link);			// Strip HTML from feed item description text			$description = $item->core_body;			$author			= $item->core_created_by_alias ? $item->core_created_by_alias : $item->author;			$date = ($item->displayDate ? date('r', strtotime($item->displayDate)) : '');			// Load individual item creator class			$feeditem = new JFeedItem;			$feeditem->title       = $title;			$feeditem->link        = $link;			$feeditem->description = $description;			$feeditem->date        = $date;			$feeditem->category    = $item->title;			$feeditem->author      = $author;			if ($feedEmail == 'site')			{				$item->authorEmail = $siteEmail;			}			elseif ($feedEmail === 'author')			{				$item->authorEmail = $row->author_email;			}			// Loads item info into RSS array			$document->addItem($feeditem);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" ><head>	<link rel="stylesheet" href="templates/system/css/error.css" type="text/css" /></head><body>	<table width="550" align="center" class="outline">	<tr>		<td align="center">			<h1>				<?php echo $this->error->getCode() ?> - <?php echo JText::_('JERROR_AN_ERROR_HAS_OCCURRED') ?>			</h1>		</td>	</tr>	<tr>		<td width="39%" align="center">			<p><?php echo $this->error->getMessage(); ?></p>			<p><a href="index.php"><?php echo JText::_('JGLOBAL_TPL_CPANEL_LINK_TEXT') ?></a></p>			<p>				<?php if ($this->debug) :					echo $this->renderBacktrace();				endif; ?>			</p>		</td>	</tr>	</table></body></html>
<?php/** * @package     Joomla.Plugin * @subpackage  Extension.Joomla * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! master extension plugin. * * @package     Joomla.Plugin * @subpackage  Extension.Joomla * @since       1.6 */class PlgExtensionJoomla extends JPlugin{	/**	 * @var    integer Extension Identifier	 * @since  1.6	 */	private $eid = 0;	/**	 * @var    JInstaller Installer object	 * @since  1.6	 */	private $installer = null;	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Adds an update site to the table if it doesn't exist.	 *	 * @param   string   $name      The friendly name of the site	 * @param   string   $type      The type of site (e.g. collection or extension)	 * @param   string   $location  The URI for the site	 * @param   boolean  $enabled   If this site is enabled	 *	 * @return  void	 *	 * @since   1.6	 */	private function addUpdateSite($name, $type, $location, $enabled)	{		$db = JFactory::getDbo();		// Look if the location is used already; doesn't matter what type you can't have two types at the same address, doesn't make sense		$query = $db->getQuery(true)			->select('update_site_id')			->from('#__update_sites')			->where('location = ' . $db->quote($location));		$db->setQuery($query);		$update_site_id = (int) $db->loadResult();		// If it doesn't exist, add it!		if (!$update_site_id)		{			$query->clear()				->insert('#__update_sites')				->columns(array($db->quoteName('name'), $db->quoteName('type'), $db->quoteName('location'), $db->quoteName('enabled')))				->values($db->quote($name) . ', ' . $db->quote($type) . ', ' . $db->quote($location) . ', ' . (int) $enabled);			$db->setQuery($query);			if ($db->execute())			{				// Link up this extension to the update site				$update_site_id = $db->insertid();			}		}		// Check if it has an update site id (creation might have faileD)		if ($update_site_id)		{			// Look for an update site entry that exists			$query->clear()				->select('update_site_id')				->from('#__update_sites_extensions')				->where('update_site_id = ' . $update_site_id)				->where('extension_id = ' . $this->eid);			$db->setQuery($query);			$tmpid = (int) $db->loadResult();			if (!$tmpid)			{				// Link this extension to the relevant update site				$query->clear()					->insert('#__update_sites_extensions')					->columns(array($db->quoteName('update_site_id'), $db->quoteName('extension_id')))					->values($update_site_id . ', ' . $this->eid);				$db->setQuery($query);				$db->execute();			}		}	}	/**	 * Handle post extension install update sites	 *	 * @param   JInstaller  $installer  Installer object	 * @param   integer     $eid        Extension Identifier	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterInstall($installer, $eid )	{		if ($eid)		{			$this->installer = $installer;			$this->eid = $eid;			// After an install we only need to do update sites			$this->processUpdateSites();		}	}	/**	 * Handle extension uninstall	 *	 * @param   JInstaller  $installer  Installer instance	 * @param   integer     $eid        Extension id	 * @param   integer     $result     Installation result	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterUninstall($installer, $eid, $result)	{		if ($eid)		{			// Wipe out any update_sites_extensions links			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->delete('#__update_sites_extensions')				->where('extension_id = ' . $eid);			$db->setQuery($query);			$db->execute();			// Delete any unused update sites			$query->clear()				->select('update_site_id')				->from('#__update_sites_extensions');			$db->setQuery($query);			$results = $db->loadColumn();			if (is_array($results))			{				// So we need to delete the update sites and their associated updates				$updatesite_delete = $db->getQuery(true);				$updatesite_delete->delete('#__update_sites');				$updatesite_query = $db->getQuery(true);				$updatesite_query->select('update_site_id')					->from('#__update_sites');				// If we get results back then we can exclude them				if (count($results))				{					$updatesite_query->where('update_site_id NOT IN (' . implode(',', $results) . ')');					$updatesite_delete->where('update_site_id NOT IN (' . implode(',', $results) . ')');				}				// So let's find what update sites we're about to nuke and remove their associated extensions				$db->setQuery($updatesite_query);				$update_sites_pending_delete = $db->loadColumn();				if (is_array($update_sites_pending_delete) && count($update_sites_pending_delete))				{					// Nuke any pending updates with this site before we delete it					// TODO: investigate alternative of using a query after the delete below with a query and not in like above					$query->clear()						->delete('#__updates')						->where('update_site_id IN (' . implode(',', $update_sites_pending_delete) . ')');					$db->setQuery($query);					$db->execute();				}				// Note: this might wipe out the entire table if there are no extensions linked				$db->setQuery($updatesite_delete);				$db->execute();			}			// Last but not least we wipe out any pending updates for the extension			$query->clear()				->delete('#__updates')				->where('extension_id = '. $eid);			$db->setQuery($query);			$db->execute();		}	}	/**	 * After update of an extension	 *	 * @param   JInstaller  $installer  Installer object	 * @param   integer     $eid        Extension identifier	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterUpdate($installer, $eid)	{		if ($eid)		{			$this->installer = $installer;			$this->eid = $eid;			// handle any update sites			$this->processUpdateSites();		}	}	/**	 * Processes the list of update sites for an extension.	 *	 * @return  void	 *	 * @since   1.6	 */	private function processUpdateSites()	{		$manifest		= $this->installer->getManifest();		$updateservers	= $manifest->updateservers;		if ($updateservers)		{			$children = $updateservers->children();		}		else		{			$children = array();		}		if (count($children))		{			foreach ($children as $child)			{				$attrs = $child->attributes();				$this->addUpdateSite($attrs['name'], $attrs['type'], $child, true);			}		}		else		{			$data = (string) $updateservers;			if (strlen($data))			{				// We have a single entry in the update server line, let us presume this is an extension line				$this->addUpdateSite(JText::_('PLG_EXTENSION_JOOMLA_UNKNOWN_SITE'), 'extension', $data, true);			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! MySQL Database Log class * * This class is designed to output logs to a specific MySQL database table. Fields in this * table are based on the Syslog style of log output. This is designed to allow quick and * easy searching. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerDatabase extends JLogLogger{	/**	 * @var    string  The name of the database driver to use for connecting to the database.	 * @since  11.1	 */	protected $driver = 'mysqli';	/**	 * @var    string  The host name (or IP) of the server with which to connect for the logger.	 * @since  11.1	 */	protected $host = '127.0.0.1';	/**	 * @var    string  The database server user to connect as for the logger.	 * @since  11.1	 */	protected $user = 'root';	/**	 * @var    string  The password to use for connecting to the database server.	 * @since  11.1	 */	protected $password = '';	/**	 * @var    string  The name of the database table to use for the logger.	 * @since  11.1	 */	protected $database = 'logging';	/**	 * @var    string  The database table to use for logging entries.	 * @since  11.1	 */	protected $table = 'jos_';	/**	 * @var    JDatabaseDriver  The database driver object for the logger.	 * @since  11.1	 */	protected $db;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// If both the database object and driver options are empty we want to use the system database connection.		if (empty($this->options['db_driver']))		{			$this->db = JFactory::getDbo();			$this->driver = null;			$this->host = null;			$this->user = null;			$this->password = null;			$this->database = null;			$this->prefix = null;		}		else		{			$this->db = null;			$this->driver = (empty($this->options['db_driver'])) ? 'mysqli' : $this->options['db_driver'];			$this->host = (empty($this->options['db_host'])) ? '127.0.0.1' : $this->options['db_host'];			$this->user = (empty($this->options['db_user'])) ? 'root' : $this->options['db_user'];			$this->password = (empty($this->options['db_pass'])) ? '' : $this->options['db_pass'];			$this->database = (empty($this->options['db_database'])) ? 'logging' : $this->options['db_database'];			$this->prefix = (empty($this->options['db_prefix'])) ? 'jos_' : $this->options['db_prefix'];		}		// The table name is independent of how we arrived at the connection object.		$this->table = (empty($this->options['db_table'])) ? '#__log_entries' : $this->options['db_table'];	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addEntry(JLogEntry $entry)	{		// Connect to the database if not connected.		if (empty($this->db))		{			$this->connect();		}		// Convert the date.		$entry->date = $entry->date->toSql(false, $this->db);		$this->db->insertObject($this->table, $entry);	}	/**	 * Method to connect to the database server based on object properties.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function connect()	{		// Build the configuration object to use for JDatabaseDriver.		$options = array(			'driver' => $this->driver,			'host' => $this->host,			'user' => $this->user,			'password' => $this->password,			'database' => $this->database,			'prefix' => $this->prefix);		$db = JDatabaseDriver::getInstance($options);		// Assign the database connector to the class.		$this->db = $db;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Users table * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableUser extends JTable{	/**	 * Associative array of group ids => group ids for the user	 *	 * @var    array	 * @since  11.1	 */	public $groups;	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since  11.1	 */	public function __construct($db)	{		parent::__construct('#__users', 'id', $db);		// Initialise.		$this->id = 0;		$this->sendEmail = 0;	}	/**	 * Method to load a user, user groups, and any other necessary data	 * from the database so that it can be bound to the user object.	 *	 * @param   integer  $userId  An optional user id.	 * @param   boolean  $reset   False if row not found or on error	 *                           (internal error state set in that case).	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function load($userId = null, $reset = true)	{		// Get the id to load.		if ($userId !== null)		{			$this->id = $userId;		}		else		{			$userId = $this->id;		}		// Check for a valid id to load.		if ($userId === null)		{			return false;		}		// Reset the table.		$this->reset();		// Load the user data.		$query = $this->_db->getQuery(true)			->select('*')			->from($this->_db->quoteName('#__users'))			->where($this->_db->quoteName('id') . ' = ' . (int) $userId);		$this->_db->setQuery($query);		$data = (array) $this->_db->loadAssoc();		if (!count($data))		{			return false;		}		// Bind the data to the table.		$return = $this->bind($data);		if ($return !== false)		{			// Load the user groups.			$query->clear()				->select($this->_db->quoteName('g.id'))				->select($this->_db->quoteName('g.title'))				->from($this->_db->quoteName('#__usergroups') . ' AS g')				->join('INNER', $this->_db->quoteName('#__user_usergroup_map') . ' AS m ON m.group_id = g.id')				->where($this->_db->quoteName('m.user_id') . ' = ' . (int) $userId);			$this->_db->setQuery($query);			// Add the groups to the user data.			$this->groups = $this->_db->loadAssocList('id', 'id');		}		return $return;	}	/**	 * Method to bind the user, user groups, and any other necessary data.	 *	 * @param   array  $array   The data to bind.	 * @param   mixed  $ignore  An array or space separated list of fields to ignore.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		if (array_key_exists('params', $array) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		// Attempt to bind the data.		$return = parent::bind($array, $ignore);		// Load the real group data based on the bound ids.		if ($return && !empty($this->groups))		{			// Set the group ids.			JArrayHelper::toInteger($this->groups);			// Get the titles for the user groups.			$query = $this->_db->getQuery(true)				->select($this->_db->quoteName('id'))				->select($this->_db->quoteName('title'))				->from($this->_db->quoteName('#__usergroups'))				->where($this->_db->quoteName('id') . ' = ' . implode(' OR ' . $this->_db->quoteName('id') . ' = ', $this->groups));			$this->_db->setQuery($query);			// Set the titles for the user groups.			$this->groups = $this->_db->loadAssocList('id', 'id');		}		return $return;	}	/**	 * Validation and filtering	 *	 * @return  boolean  True if satisfactory	 *	 * @since   11.1	 */	public function check()	{		// Set user id to null istead of 0, if needed		if ($this->id === 0)		{			$this->id = null;		}		// Validate user information		if (trim($this->name) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_PLEASE_ENTER_YOUR_NAME'));			return false;		}		if (trim($this->username) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_PLEASE_ENTER_A_USER_NAME'));			return false;		}		if (preg_match("#[<>\"'%;()&]#i", $this->username) || strlen(utf8_decode($this->username)) < 2)		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_VALID_AZ09', 2));			return false;		}		if ((trim($this->email) == "") || !JMailHelper::isEmailAddress($this->email))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_VALID_MAIL'));			return false;		}		// Set the registration timestamp		if (empty($this->registerDate) || $this->registerDate == $this->_db->getNullDate())		{			$this->registerDate = JFactory::getDate()->toSql();		}		// Set the lastvisitDate timestamp		if (empty($this->lastvisitDate))		{			$this->lastvisitDate = $this->_db->getNullDate();		}		// Check for existing username		$query = $this->_db->getQuery(true)			->select($this->_db->quoteName('id'))			->from($this->_db->quoteName('#__users'))			->where($this->_db->quoteName('username') . ' = ' . $this->_db->quote($this->username))			->where($this->_db->quoteName('id') . ' != ' . (int) $this->id);		$this->_db->setQuery($query);		$xid = (int) $this->_db->loadResult();		if ($xid && $xid != (int) $this->id)		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_USERNAME_INUSE'));			return false;		}		// Check for existing email		$query->clear()			->select($this->_db->quoteName('id'))			->from($this->_db->quoteName('#__users'))			->where($this->_db->quoteName('email') . ' = ' . $this->_db->quote($this->email))			->where($this->_db->quoteName('id') . ' != ' . (int) $this->id);		$this->_db->setQuery($query);		$xid = (int) $this->_db->loadResult();		if ($xid && $xid != (int) $this->id)		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_EMAIL_INUSE'));			return false;		}		// Check for root_user != username		$config = JFactory::getConfig();		$rootUser = $config->get('root_user');		if (!is_numeric($rootUser))		{			$query->clear()				->select($this->_db->quoteName('id'))				->from($this->_db->quoteName('#__users'))				->where($this->_db->quoteName('username') . ' = ' . $this->_db->quote($rootUser));			$this->_db->setQuery($query);			$xid = (int) $this->_db->loadResult();			if ($rootUser == $this->username && (!$xid || $xid && $xid != (int) $this->id)				|| $xid && $xid == (int) $this->id && $rootUser != $this->username)			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_USERNAME_CANNOT_CHANGE'));				return false;			}		}		return true;	}	/**	 * Method to store a row in the database from the JTable instance properties.	 * If a primary key value is set the row with that primary key value will be	 * updated with the instance property values.  If no primary key value is set	 * a new row will be inserted into the database with the properties from the	 * JTable instance.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/store	 * @since   11.1	 */	public function store($updateNulls = false)	{		// Get the table key and key value.		$k = $this->_tbl_key;		$key = $this->$k;		// TODO: This is a dumb way to handle the groups.		// Store groups locally so as to not update directly.		$groups = $this->groups;		unset($this->groups);		// Insert or update the object based on presence of a key value.		if ($key)		{			// Already have a table key, update the row.			$this->_db->updateObject($this->_tbl, $this, $this->_tbl_key, $updateNulls);		}		else		{			// Don't have a table key, insert the row.			$this->_db->insertObject($this->_tbl, $this, $this->_tbl_key);		}		// Reset groups to the local object.		$this->groups = $groups;		unset($groups);		// Store the group data if the user data was saved.		if (is_array($this->groups) && count($this->groups))		{			// Delete the old user group maps.			$query = $this->_db->getQuery(true)				->delete($this->_db->quoteName('#__user_usergroup_map'))				->where($this->_db->quoteName('user_id') . ' = ' . (int) $this->id);			$this->_db->setQuery($query);			$this->_db->execute();			// Set the new user group maps.			$query->clear()				->insert($this->_db->quoteName('#__user_usergroup_map'))				->columns(array($this->_db->quoteName('user_id'), $this->_db->quoteName('group_id')));			// Have to break this up into individual queries for cross-database support.			foreach ($this->groups as $group)			{				$query->clear('values')					->values($this->id . ', ' . $group);				$this->_db->setQuery($query);				$this->_db->execute();			}		}		return true;	}	/**	 * Method to delete a user, user groups, and any other necessary data from the database.	 *	 * @param   integer  $userId  An optional user id.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function delete($userId = null)	{		// Set the primary key to delete.		$k = $this->_tbl_key;		if ($userId)		{			$this->$k = (int) $userId;		}		// Delete the user.		$query = $this->_db->getQuery(true)			->delete($this->_db->quoteName($this->_tbl))			->where($this->_db->quoteName($this->_tbl_key) . ' = ' . (int) $this->$k);		$this->_db->setQuery($query);		$this->_db->execute();		// Delete the user group maps.		$query->clear()			->delete($this->_db->quoteName('#__user_usergroup_map'))			->where($this->_db->quoteName('user_id') . ' = ' . (int) $this->$k);		$this->_db->setQuery($query);		$this->_db->execute();		/*		 * Clean Up Related Data.		 */		$query->clear()			->delete($this->_db->quoteName('#__messages_cfg'))			->where($this->_db->quoteName('user_id') . ' = ' . (int) $this->$k);		$this->_db->setQuery($query);		$this->_db->execute();		$query->clear()			->delete($this->_db->quoteName('#__messages'))			->where($this->_db->quoteName('user_id_to') . ' = ' . (int) $this->$k);		$this->_db->setQuery($query);		$this->_db->execute();		return true;	}	/**	 * Updates last visit time of user	 *	 * @param   integer  $timeStamp  The timestamp, defaults to 'now'.	 * @param   integer  $userId     The user id (optional).	 *	 * @return  boolean  False if an error occurs	 *	 * @since   11.1	 */	public function setLastVisit($timeStamp = null, $userId = null)	{		// Check for User ID		if (is_null($userId))		{			if (isset($this))			{				$userId = $this->id;			}			else			{				jexit('No userid in setLastVisit');			}		}		// If no timestamp value is passed to function, than current time is used.		$date = JFactory::getDate($timeStamp);		// Update the database row for the user.		$db = $this->_db;		$query = $db->getQuery(true)			->update($db->quoteName($this->_tbl))			->set($db->quoteName('lastvisitDate') . '=' . $db->quote($date->toSql()))			->where($db->quoteName('id') . '=' . (int) $userId);		$db->setQuery($query);		$db->execute();		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Manage View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewDiscover extends InstallerViewDefault{	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		// Get data from the model		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= InstallerHelper::getActions();		/*		 * Set toolbar items for the page		 */		JToolbarHelper::custom('discover.install', 'upload', 'upload', 'JTOOLBAR_INSTALL', true, false);		JToolbarHelper::custom('discover.refresh', 'refresh', 'refresh', 'COM_INSTALLER_TOOLBAR_DISCOVER', false, false);		JToolbarHelper::divider();		parent::addToolbar();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_DISCOVER');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state',	'com_plugins');$saveOrder	= $listOrder == 'ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_plugins&task=plugins.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_plugins&view=plugins'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="main-container" class="span10"><?php else : ?>	<div id="main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_PLUGINS_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_PLUGINS_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'enabled', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_NAME_HEADING', 'name', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_FOLDER_HEADING', 'folder', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_ELEMENT_HEADING', 'element', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'extension_id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="12">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'ordering');				$canEdit    = $user->authorise('core.edit',       'com_plugins');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_plugins') && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->folder?>">					<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel	  = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu" title="<?php echo $item->ordering;?>"></i>							</span>							<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />						<?php else : ?>							<span class="sortable-handler inactive" >								<i class="icon-menu"></i>							</span>						<?php endif; ?>						</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->extension_id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->enabled, $i, 'plugins.', $canChange); ?>					</td>					<td>						<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'plugins.', $canCheckin); ?>						<?php endif; ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_plugins&task=plugin.edit&extension_id='.(int) $item->extension_id); ?>">								<?php echo $item->name; ?></a>						<?php else : ?>								<?php echo $item->name; ?>						<?php endif; ?>					</td>					<td class="nowrap small hidden-phone">						<?php echo $this->escape($item->folder);?>					</td>					<td class="nowrap small hidden-phone">						<?php echo $this->escape($item->element);?>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->extension_id;?>					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Menu Item Controller * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusControllerItems extends JControllerAdmin{	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('unsetDefault',	'setDefault');	}	/**	 * Proxy for getModel	 * @since   1.6	 */	public function getModel($name = 'Item', $prefix = 'MenusModel', $config = array())	{		return parent::getModel($name, $prefix, array('ignore_request' => true));	}	/**	 * Rebuild the nested set tree.	 *	 * @return  bool	False on failure or error, true on success.	 * @since   1.6	 */	public function rebuild()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$this->setRedirect('index.php?option=com_menus&view=items');		$model = $this->getModel();		if ($model->rebuild())		{			// Reorder succeeded.			$this->setMessage(JText::_('COM_MENUS_ITEMS_REBUILD_SUCCESS'));			return true;		}		else		{			// Rebuild failed.			$this->setMessage(JText::sprintf('COM_MENUS_ITEMS_REBUILD_FAILED'));			return false;		}	}	public function saveorder()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			parent::saveorder();		}		else		{			// Nothing to reorder			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));			return true;		}	}	/**	 * Method to set the home property for a list of items	 *	 * @since   1.6	 */	public function setDefault()	{		// Check for request forgeries		JSession::checkToken('request') or die(JText::_('JINVALID_TOKEN'));		// Get items to publish from the request.		$cid   = $this->input->get('cid', array(), 'array');		$data  = array('setDefault' => 1, 'unsetDefault' => 0);		$task  = $this->getTask();		$value = JArrayHelper::getValue($data, $task, 0, 'int');		if (empty($cid))		{			JError::raiseWarning(500, JText::_($this->text_prefix.'_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Make sure the item ids are integers			JArrayHelper::toInteger($cid);			// Publish the items.			if (!$model->setHome($cid, $value))			{				JError::raiseWarning(500, $model->getError());			} else {				if ($value == 1)				{					$ntext = 'COM_MENUS_ITEMS_SET_HOME';				}				else {					$ntext = 'COM_MENUS_ITEMS_UNSET_HOME';				}				$this->setMessage(JText::plural($ntext, count($cid)));			}		}		$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$pks   = $this->input->post->get('cid', null, 'array');		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			// Get the model			$model = $this->getModel();			// Save the ordering			$return = $model->saveorder($pks, $order);			if ($return)			{				echo "1";			}		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Model Class * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesModelLanguages extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'lang_id', 'a.lang_id',				'lang_code', 'a.lang_code',				'title', 'a.title',				'title_native', 'a.title_native',				'sef', 'a.sef',				'image', 'a.image',				'published', 'a.published',				'ordering', 'a.ordering',				'access', 'a.access', 'access_level',				'home', 'l.home',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$published = $this->getUserStateFromRequest($this->context . '.published', 'filter_published', '');		$this->setState('filter.published', $published);		// Load the parameters.		$params = JComponentHelper::getParams('com_languages');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.published');		return parent::getStoreId($id);	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select all fields from the languages table.		$query->select($this->getState('list.select', 'a.*', 'l.home'))			->from($db->quoteName('#__languages') . ' AS a');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Select the language home pages		$query->select('l.home AS home')			->join('LEFT', $db->quoteName('#__menu') . ' AS l  ON  l.language = a.lang_code AND l.home=1  AND l.language <> ' . $db->quote('*'));		// Filter on the published state.		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%', false);			$query->where('(a.title LIKE ' . $search . ')');		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Set the published language(s)	 *	 * @param   array    $cid      An array of language IDs.	 * @param   integer  $value    The value of the published state.	 *	 * @return  boolean  True on success, false otherwise.	 * @since   1.6	 */	public function setPublished($cid, $value = 0)	{		return JTable::getInstance('Language')->publish($cid, $value);	}	/**	 * Method to delete records.	 *	 * @param   array  An array of item primary keys.	 *	 * @return  boolean  Returns true on success, false on failure.	 * @since   1.6	 */	public function delete($pks)	{		// Sanitize the array.		$pks = (array) $pks;		// Get a row instance.		$table = JTable::getInstance('Language');		// Iterate the items to delete each one.		foreach ($pks as $itemId)		{			if (!$table->delete((int) $itemId))			{				$this->setError($table->getError());				return false;			}		}		// Clean the cache.		$this->cleanCache();		return true;	}	/**	 * Custom clean cache method, 2 places for 2 clients	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('_system');		parent::cleanCache('com_languages');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink Component HTML Helper * * @static * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class JHtmlIcon{	public static function create($weblink, $params)	{		$uri = JURI::getInstance();		$url = JRoute::_(WeblinksHelperRoute::getFormRoute(0, base64_encode($uri)));		$text = JHtml::_('image', 'system/new.png', JText::_('JNEW'), null, true);		$button = JHtml::_('link', $url, $text);		$output = '<span class="hasTip" title="'.JText::_('COM_WEBLINKS_FORM_CREATE_WEBLINK').'">'.$button.'</span>';		return $output;	}	public static function edit($weblink, $params, $attribs = array())	{		$uri = JURI::getInstance();		if ($params && $params->get('popup'))		{			return;		}		if ($weblink->state < 0)		{			return;		}		JHtml::_('behavior.tooltip');		$url	= WeblinksHelperRoute::getFormRoute($weblink->id, base64_encode($uri));		$icon	= $weblink->state ? 'edit.png' : 'edit_unpublished.png';		$text	= JHtml::_('image', 'system/'.$icon, JText::_('JGLOBAL_EDIT'), null, true);		if ($weblink->state == 0)		{			$overlib = JText::_('JUNPUBLISHED');		}		else		{			$overlib = JText::_('JPUBLISHED');		}		$date = JHtml::_('date', $weblink->created);		$author = $weblink->created_by_alias ? $weblink->created_by_alias : $weblink->author;		$overlib .= '&lt;br /&gt;';		$overlib .= $date;		$overlib .= '&lt;br /&gt;';		$overlib .= htmlspecialchars($author, ENT_COMPAT, 'UTF-8');		$button = JHtml::_('link', JRoute::_($url), $text);		$output = '<span class="hasTip" title="'.JText::_('COM_WEBLINKS_EDIT').' :: '.$overlib.'">'.$button.'</span>';		return $output;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides a hidden field * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.hidden.html#input.hidden * @since       11.1 */class JFormFieldHidden extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Hidden';	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="hidden" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $class . $disabled . $onchange . ' />';	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Categories. * * @package     Joomla.Plugin * @subpackage  Finder.Categories * @since       2.5 */class PlgFinderCategories extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Categories';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_categories';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'category';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'Category';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__categories';	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'published';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderDelete($context, $table)	{		if ($context == 'com_categories.category')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);				// Reindex the item				$this->reindex($row->id);			}			// Check if the parent access level is different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row     A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// Query the database for the old access level and the parent if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// The category published state is tied to the parent category			// published state so we need to look up all published states			// before we change anything.			foreach ($pks as $pk)			{				$query = clone($this->getStateQuery());				$query->where('a.id = ' . (int) $pk);				// Get the published states.				$this->db->setQuery($query);				$item = $this->db->loadObject();				// Translate the state.				$state = null;				if ($item->parent_id != 1)				{					$state = $item->cat_state;				}				$temp = $this->translateState($value, $state);				// Update the item.				$this->change($pk, 'state', $temp);				// Reindex the item				$this->reindex($pk);			}		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Need to import component route helpers dynamically, hence the reason it's handled here		$path = JPATH_SITE . '/components/' . $item->extension . '/helpers/route.php';		if (is_file($path))		{			include_once $path;		}		$extension = ucfirst(substr($item->extension, 4));		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = $registry;		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		/* Add the meta-data processing instructions based on the categories		 * configuration parameters.		 */		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Handle the link to the meta-data.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'link');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		//$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Trigger the onContentPrepare event.		$item->summary = FinderIndexerHelper::prepareContent($item->summary, $item->params);		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $item->extension, $this->layout);		$class = $extension . 'HelperRoute';		if (class_exists($class) && method_exists($class, 'getCategoryRoute'))		{			$item->route = $class::getCategoryRoute($item->id);		}		else		{			$item->route = ContentHelperRoute::getCategoryRoute($item->slug, $item->catid);		}		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		// Translate the state. Categories should only be published if the parent category is published.		$item->state = $this->translateState($item->state);		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Category');		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load com_content route helper as it is the fallback for routing in the indexer in this instance.		include_once JPATH_SITE . '/components/com_content/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.title, a.alias, a.description AS summary, a.extension')			->select('a.created_user_id AS created_by, a.modified_time AS modified, a.modified_user_id AS modified_by')			->select('a.metakey, a.metadesc, a.metadata, a.language, a.lft, a.parent_id, a.level')			->select('a.created_time AS start_date, a.published AS state, a.access, a.params');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias)			->from('#__categories AS a')			->where($db->quoteName('a.id') . ' > 1');		return $query;	}	/**	 * Method to get a SQL query to load the published and access states for	 * an article and category.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getStateQuery()	{		$query = $this->db->getQuery(true)			->select($this->db->quoteName('a.id'))			->select('a.' . $this->state_field . ' AS state, c.published AS cat_state')			->select('a.access, c.access AS cat_access')			->from($this->db->quoteName('#__categories') . ' AS a')			->join('LEFT', '#__categories AS c ON c.id = a.parent_id');		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.combobox');JHtml::_('formbehavior.chosen', 'select');$hasContent = empty($this->item->module) || $this->item->module == 'custom' || $this->item->module == 'mod_custom';// Get Params Fieldsets$this->fieldsets = $this->form->getFieldsets('params');$script = "Joomla.submitbutton = function(task)	{			if (task == 'module.cancel' || document.formvalidator.isValid(document.id('module-form'))) {";if ($hasContent){	$script .= $this->form->getField('content')->save();}$script .= "	Joomla.submitform(task, document.getElementById('module-form'));				if (self != top)				{					window.top.setTimeout('window.parent.SqueezeBox.close()', 1000);				}			}	}";JFactory::getDocument()->addScriptDeclaration($script);?><form action="<?php echo JRoute::_('index.php?option=com_modules&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="module-form" class="form-validate form-horizontal">	<fieldset>		<ul class="nav nav-tabs">			<li class="active"><a href="#details" data-toggle="tab"><?php echo JText::_('JDETAILS'); ?></a></li>			<li><a href="#options" data-toggle="tab"><?php echo JText::_('JOPTIONS'); ?></a></li>			<?php if ($hasContent) : ?>				<li><a href="#custom" data-toggle="tab"><?php echo JText::_('COM_MODULES_CUSTOM_OUTPUT'); ?></a></li>			<?php endif; ?>			<?php if ($this->item->client_id == 0) : ?>				<li><a href="#assignment" data-toggle="tab"><?php echo JText::_('COM_MODULES_MENU_ASSIGNMENT'); ?></a></li>			<?php endif; ?>		</ul>		<div class="tab-content">			<div class="tab-pane active" id="details">				<div class="row-fluid">					<div class="span6">						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('title'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('title'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('showtitle'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('showtitle'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('position'); ?>							</div>							<div class="controls">								<?php echo $this->loadTemplate('positions'); ?>							</div>						</div>						<hr />						<?php if ((string) $this->item->xml->name != 'Login Form') : ?>							<div class="control-group">								<div class="control-label">									<?php echo $this->form->getLabel('published'); ?>								</div>								<div class="controls">									<?php echo $this->form->getInput('published'); ?>								</div>							</div>						<?php endif; ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('access'); ?>							</div>						<div class="controls">								<?php echo $this->form->getInput('access'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('ordering'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('ordering'); ?>							</div>						</div>						<?php if ((string) $this->item->xml->name != 'Login Form') : ?>							<div class="control-group">								<div class="control-label">									<?php echo $this->form->getLabel('publish_up'); ?>								</div>								<div class="controls">									<?php echo $this->form->getInput('publish_up'); ?>								</div>							</div>							<div class="control-group">								<div class="control-label">									<?php echo $this->form->getLabel('publish_down'); ?>								</div>								<div class="controls">									<?php echo $this->form->getInput('publish_down'); ?>								</div>							</div>						<?php endif; ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('language'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('language'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('note'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('note'); ?>							</div>						</div>					</div>					<div class="span6">						<?php if ($this->item->xml) : ?>							<?php if ($text = trim($this->item->xml->description)) : ?>								<blockquote>									<h4>										<?php echo JText::_('COM_MODULES_MODULE_DESCRIPTION'); ?>										<?php if ($this->item->id) : ?>											<span class="label label-info"><?php echo JText::_('JGRID_HEADING_ID'); ?> : <?php echo $this->item->id; ?></span>										<?php endif; ?>									</h4>									<hr />									<div>										<?php echo JText::_($text); ?>									</div>									<hr />									<div>										<span class="label"><?php echo $this->item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?></span> / <span class="label"><?php if ($this->item->xml) echo ($text = (string) $this->item->xml->name) ? JText::_($text) : $this->item->module;else echo JText::_('COM_MODULES_ERR_XML');?></span>									</div>								</blockquote>							<?php endif; ?>						<?php else : ?>							<div class="alert alert-error"><?php echo JText::_('COM_MODULES_ERR_XML'); ?></div>						<?php endif; ?>					</div>				</div>			</div>			<div class="tab-pane" id="options">				<?php echo $this->loadTemplate('options'); ?>			</div>			<?php if ($hasContent) : ?>			<div class="tab-pane" id="custom">				<?php echo $this->form->getInput('content'); ?>			</div>			<?php endif; ?>			<?php if ($this->item->client_id == 0) : ?>				<div class="tab-pane" id="assignment">					<?php echo $this->loadTemplate('assignment'); ?>				</div>			<?php endif; ?>		</div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>		<?php echo $this->form->getInput('module'); ?>		<?php echo $this->form->getInput('client_id'); ?>	</fieldset></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Add specific helper files for html generationJHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$user		= JFactory::getUser();$userId		= $user->get('id');$client		= $this->state->get('filter.client_id', 0) ? JText::_('JADMINISTRATOR') : JText::_('JSITE');$clientId	= $this->state->get('filter.client_id', 0);?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=installed&client='.$clientId); ?>" method="post" id="adminForm" name="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<table class="table table-striped">			<thead>				<tr>					<th width="20">						<?php echo JText::_('COM_LANGUAGES_HEADING_NUM'); ?>					</th>					<th width="20">						&#160;					</th>					<th width="25%" class="title">						<?php echo JText::_('COM_LANGUAGES_HEADING_LANGUAGE'); ?>					</th>					<th>						<?php echo JText::_('COM_LANGUAGES_FIELD_LANG_TAG_LABEL'); ?>					</th>					<th>						<?php echo JText::_('JCLIENT'); ?>					</th>					<th>						<?php echo JText::_('COM_LANGUAGES_HEADING_DEFAULT'); ?>					</th>					<th>						<?php echo JText::_('JVERSION'); ?>					</th>					<th>						<?php echo JText::_('JDATE'); ?>					</th>					<th>						<?php echo JText::_('JAUTHOR'); ?>					</th>					<th>						<?php echo JText::_('COM_LANGUAGES_HEADING_AUTHOR_EMAIL'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->rows as $i => $row) :			$canCreate = $user->authorise('core.create',     'com_languages');			$canEdit   = $user->authorise('core.edit',       'com_languages');			$canChange = $user->authorise('core.edit.state', 'com_languages');			?>				<tr class="row<?php echo $i % 2; ?>">					<td width="20">						<?php echo $this->pagination->getRowOffset($i); ?>					</td>					<td width="20">						<?php echo JHtml::_('languages.id', $i, $row->language);?>					</td>					<td width="25%">						<?php echo $this->escape($row->name); ?>					</td>					<td align="center">						<?php echo $this->escape($row->language); ?>					</td>					<td align="center">						<?php echo $client;?>					</td>					<td align="center">						<?php echo JHtml::_('jgrid.isdefault', $row->published, $i, 'installed.', !$row->published && $canChange);?>					</td>					<td align="center">						<?php echo $this->escape($row->version); ?>					</td>					<td align="center">						<?php echo $this->escape($row->creationDate); ?>					</td>					<td align="center">						<?php echo $this->escape($row->author); ?>					</td>					<td align="center">						<?php echo $this->escape($row->authorEmail); ?>					</td>				</tr>			<?php endforeach;?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$app = JFactory::getApplication();$input = $app->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'tag.cancel' || document.formvalidator.isValid(document.id('item-form'))) {			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_tags&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<div class="row-fluid">	<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_TAGS_FIELDSET_DETAILS', true)); ?>					<fieldset class="adminform">						<div class="control-group form-inline">							<?php echo $this->form->getLabel('title'); ?> <?php echo $this->form->getInput('title'); ?> <?php echo $this->form->getLabel('catid'); ?> <?php echo $this->form->getInput('catid'); ?>						</div>						<?php echo $this->form->getInput('description'); ?>					</fieldset>						<div class="row-fluid">							<div class="span6">								<h4><?php echo JText::_('COM_TAGS_FIELDSET_URLS_AND_IMAGES');?></h4>								<div class="control-group">									<?php echo $this->form->getLabel('images'); ?>									<div class="controls">										<?php echo $this->form->getInput('images'); ?>									</div>								</div>								<?php foreach ($this->form->getGroup('images') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>											<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>						</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_TAGS_FIELDSET_PUBLISHING', true)); ?>							<div class="row-fluid">								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('alias'); ?>										</div>									</div>									<div class="control-group">										<div class="control-label">											<?php echo $this->form->getLabel('id'); ?>										</div>										<div class="controls">											<?php echo $this->form->getInput('id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_user_id'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_user_id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by_alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by_alias'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_time'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_time'); ?>										</div>									</div>								</div>								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('publish_up'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_up'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('publish_down'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_down'); ?>										</div>									</div>									<?php if ($this->item->modified_user_id) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('modified_user_id'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_user_id'); ?>											</div>										</div>										<div class="control-group">											<?php echo $this->form->getLabel('modified_time'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_time'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->version) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('version'); ?>											<div class="controls">												<?php echo $this->form->getInput('version'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->hits) : ?>										<div class="control-group">											<div class="control-label">												<?php echo $this->form->getLabel('hits'); ?>											</div>											<div class="controls">												<?php echo $this->form->getInput('hits'); ?>											</div>										</div>									<?php endif; ?>								</div>							</div>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>							<?php echo $this->loadTemplate('metadata'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>									</div>				<input type="hidden" name="task" value="" />				<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->		<div class="span2">			<h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('title'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('parent_id'); ?>					<div class="controls">						<?php echo $this->form->getInput('parent_id'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('published'); ?>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('access'); ?>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('language'); ?>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>			</fieldset>		</div>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Plugin * @subpackage  System.remember * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! System Remember Me Plugin * * @package     Joomla.Plugin * @subpackage  System.remember * @since       1.5 */class PlgSystemRemember extends JPlugin{	public function onAfterInitialise()	{		$app = JFactory::getApplication();		// No remember me for admin		if ($app->isAdmin())		{			return;		}		$user = JFactory::getUser();		if ($user->get('guest'))		{			$hash = JApplication::getHash('JLOGIN_REMEMBER');			if ($str = JRequest::getString($hash, '', 'cookie', JREQUEST_ALLOWRAW | JREQUEST_NOTRIM))			{				$credentials = array();				$goodCookie = true;				$filter = JFilterInput::getInstance();				// Create the encryption key, apply extra hardening using the user agent string.				// Since we're decoding, no UA validity check is required.				$privateKey = JApplication::getHash(@$_SERVER['HTTP_USER_AGENT']);				$key = new JCryptKey('simple', $privateKey, $privateKey);				$crypt = new JCrypt(new JCryptCipherSimple, $key);				try				{					$str = $crypt->decrypt($str);					if (!is_string($str))					{						throw new Exception('Decoded cookie is not a string.');					}					$cookieData = json_decode($str);					if (null === $cookieData)					{						throw new Exception('JSON could not be docoded.');					}					if (!is_object($cookieData))					{						throw new Exception('Decoded JSON is not an object.');					}					// json_decoded cookie could be any object structure, so make sure the					// credentials are well structured and only have user and password.					if (isset($cookieData->username) && is_string($cookieData->username))					{						$credentials['username'] = $filter->clean($cookieData->username, 'username');					}					else					{						throw new Exception('Malformed username.');					}					if (isset($cookieData->password) && is_string($cookieData->password))					{						$credentials['password'] = $filter->clean($cookieData->password, 'string');					}					else					{						throw new Exception('Malformed password.');					}					$return = $app->login($credentials, array('silent' => true));					if (!$return)					{						throw new Exception('Log-in failed.');					}				}				catch (Exception $e)				{					$config = JFactory::getConfig();					$cookie_domain = $config->get('cookie_domain', '');					$cookie_path = $config->get('cookie_path', '/');					// Clear the remember me cookie					setcookie(						JApplication::getHash('JLOGIN_REMEMBER'), false, time() - 86400,						$cookie_path, $cookie_domain					);					JLog::add('A remember me cookie was unset for the following reason: ' . $e->getMessage(), JLog::WARNING, 'security');				}			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides radio button inputs * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/command.radio.html#command.radio * @since       11.1 */class JFormFieldRadio extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Radio';	/**	 * Method to get the radio button field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="radio ' . (string) $this->element['class'] . '"' : ' class="radio"';		// Start the radio field output.		$html[] = '<fieldset id="' . $this->id . '"' . $class . '>';		// Get the field options.		$options = $this->getOptions();		// Build the radio field output.		foreach ($options as $i => $option)		{			// Initialize some option attributes.			$checked = ((string) $option->value == (string) $this->value) ? ' checked="checked"' : '';			$class = !empty($option->class) ? ' class="' . $option->class . '"' : '';			$disabled = !empty($option->disable) ? ' disabled="disabled"' : '';			$required = !empty($option->required) ? ' required="required" aria-required="true"' : '';			// Initialize some JavaScript option attributes.			$onclick = !empty($option->onclick) ? ' onclick="' . $option->onclick . '"' : '';			$html[] = '<input type="radio" id="' . $this->id . $i . '" name="' . $this->name . '" value="'				. htmlspecialchars($option->value, ENT_COMPAT, 'UTF-8') . '"' . $checked . $class . $onclick . $disabled . $required . '/>';			$html[] = '<label for="' . $this->id . $i . '"' . $class . '>'				. JText::alt($option->text, preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)) . '</label>';		}		// End the radio field output.		$html[] = '</fieldset>';		return implode($html);	}	/**	 * Method to get the field options for radio buttons.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		foreach ($this->element->children() as $option)		{			// Only add <option /> elements.			if ($option->getName() != 'option')			{				continue;			}			// Create a new option object based on the <option /> element.			$tmp = JHtml::_(				'select.option', (string) $option['value'], trim((string) $option), 'value', 'text',				((string) $option['disabled'] == 'true')			);			// Set some option attributes.			$tmp->class = (string) $option['class'];			// Set some JavaScript option attributes.			$tmp->onclick = (string) $option['onclick'];			// Add the option object to the result set.			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewArchive extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	protected $pagination = null;	public function display($tpl = null)	{		$app = JFactory::getApplication();		$user		= JFactory::getUser();		$state 		= $this->get('State');		$items 		= $this->get('Items');		$pagination	= $this->get('Pagination');		$pathway	= $app->getPathway();		$document	= JFactory::getDocument();		// Get the page/component configuration		$params = &$state->params;		foreach ($items as $item)		{			$item->catslug = ($item->category_alias) ? ($item->catid . ':' . $item->category_alias) : $item->catid;			$item->parent_slug = ($item->parent_alias) ? ($item->parent_id . ':' . $item->parent_alias) : $item->parent_id;			// No link for ROOT category			if ($item->parent_alias == 'root')			{				$item->parent_slug = null;			}		}		$form = new stdClass;		// Month Field		$months = array(			'' => JText::_('COM_CONTENT_MONTH'),			'01' => JText::_('JANUARY_SHORT'),			'02' => JText::_('FEBRUARY_SHORT'),			'03' => JText::_('MARCH_SHORT'),			'04' => JText::_('APRIL_SHORT'),			'05' => JText::_('MAY_SHORT'),			'06' => JText::_('JUNE_SHORT'),			'07' => JText::_('JULY_SHORT'),			'08' => JText::_('AUGUST_SHORT'),			'09' => JText::_('SEPTEMBER_SHORT'),			'10' => JText::_('OCTOBER_SHORT'),			'11' => JText::_('NOVEMBER_SHORT'),			'12' => JText::_('DECEMBER_SHORT')		);		$form->monthField = JHtml::_(			'select.genericlist',			$months,			'month',			array(				'list.attr' => 'size="1" class="inputbox"',				'list.select' => $state->get('filter.month'),				'option.key' => null			)		);		// Year Field		$years = array();		$years[] = JHtml::_('select.option', null, JText::_('JYEAR'));		for ($i = 2000; $i <= 2020; $i++)		{			$years[] = JHtml::_('select.option', $i, $i);		}		$form->yearField = JHtml::_(			'select.genericlist',			$years,			'year',			array('list.attr' => 'size="1" class="inputbox"', 'list.select' => $state->get('filter.year'))		);		$form->limitField = $pagination->getLimitBox();		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->filter     = $state->get('list.filter');		$this->form       = &$form;		$this->items      = &$items;		$this->params     = &$params;		$this->user       = &$user;		$this->pagination = &$pagination;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of template styles. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesViewTemplates extends JViewLegacy{	/**	 * @var		array	 * @since   1.6	 */	protected $items;	/**	 * @var		object	 * @since   1.6	 */	protected $pagination;	/**	 * @var		object	 * @since   1.6	 */	protected $state;	/**	 * Display the view.	 *	 * @param   string	 *	 * @return  void	 * @since   1.6	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->preview		= JComponentHelper::getParams('com_templates')->get('template_positions_display');		TemplatesHelper::addSubmenu('templates');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_TEMPLATES_MSG_MANAGE_NO_TEMPLATES'),				'warning'			);		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= TemplatesHelper::getActions();		JToolbarHelper::title(JText::_('COM_TEMPLATES_MANAGER_TEMPLATES'), 'thememanager');		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_templates');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_TEMPLATE_MANAGER_TEMPLATES');		JHtmlSidebar::setAction('index.php?option=com_templates&view=templates');		JHtmlSidebar::addFilter(			JText::_('JGLOBAL_FILTER_CLIENT'),			'filter_client_id',			JHtml::_('select.options', TemplatesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'))		);		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Template styles list controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerStyles extends JControllerAdmin{	/**	 * Method to clone and existing template style.	 */	public function duplicate()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			JArrayHelper::toInteger($pks);			$model = $this->getModel();			$model->duplicate($pks);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_DUPLICATED'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}	/**	 * Proxy for getModel.	 *	 * @since   1.6	 */	public function getModel($name = 'Style', $prefix = 'TemplatesModel', $config = array())	{		$model = parent::getModel($name, $prefix, array('ignore_request' => true));		return $model;	}	/**	 * Method to set the home template for a client.	 *	 * @since   1.6	 */	public function setDefault()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			JArrayHelper::toInteger($pks);			// Pop off the first element.			$id = array_shift($pks);			$model = $this->getModel();			$model->setHome($id);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_HOME_SET'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}	/**	 * Method to unset the default template for a client and for a language	 *	 * @since   1.6	 */	public function unsetDefault()	{		// Check for request forgeries		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->get->get('cid', array(), 'array');		JArrayHelper::toInteger($pks);		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			// Pop off the first element.			$id = array_shift($pks);			$model = $this->getModel();			$model->unsetHome($id);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_HOME_UNSET'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect component helper. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectHelper{	public static $extension = 'com_redirect';	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 */	public static function addSubmenu($vName)	{		// No submenu for this component.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user		= JFactory::getUser();		$result		= new JObject;		$assetName	= 'com_redirect';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string  	The HTML code for the select tag	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '*', 'JALL');		$options[]	= JHtml::_('select.option', '1', 'JENABLED');		$options[]	= JHtml::_('select.option', '0', 'JDISABLED');		$options[]	= JHtml::_('select.option', '2', 'JARCHIVED');		$options[]	= JHtml::_('select.option', '-2', 'JTRASHED');		return $options;	}	/**	 * Determines if the plugin for Redirect to work is enabled.	 *	 * @return  boolean	 */	public static function isEnabled()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('enabled'))			->from('#__extensions')			->where($db->quoteName('folder') . ' = ' . $db->quote('system'))			->where($db->quoteName('element') . ' = ' . $db->quote('redirect'));		$db->setQuery($query);		try		{			$result = (boolean) $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.3 */class JDatabaseQueryPostgresql extends JDatabaseQuery implements JDatabaseQueryLimitable{	/**	 * @var    object  The FOR UPDATE element used in "FOR UPDATE"  lock	 * @since  11.3	 */	protected $forUpdate = null;	/**	 * @var    object  The FOR SHARE element used in "FOR SHARE"  lock	 * @since  11.3	 */	protected $forShare = null;	/**	 * @var    object  The NOWAIT element used in "FOR SHARE" and "FOR UPDATE" lock	 * @since  11.3	 */	protected $noWait = null;	/**	 * @var    object  The LIMIT element	 * @since  11.3	 */	protected $limit = null;	/**	 * @var    object  The OFFSET element	 * @since  11.3	 */	protected $offset = null;	/**	 * @var    object  The RETURNING element of INSERT INTO	 * @since  11.3	 */	protected $returning = null;	/**	 * Magic function to convert the query to a string, only for postgresql specific query	 *	 * @return  string	The completed query.	 *	 * @since   11.3	 */	public function __toString()	{		$query = '';		switch ($this->type)		{			case 'select':				$query .= (string) $this->select;				$query .= (string) $this->from;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				if ($this->where)				{					$query .= (string) $this->where;				}				if ($this->group)				{					$query .= (string) $this->group;				}				if ($this->having)				{					$query .= (string) $this->having;				}				if ($this->order)				{					$query .= (string) $this->order;				}				if ($this->limit)				{					$query .= (string) $this->limit;				}				if ($this->offset)				{					$query .= (string) $this->offset;				}				if ($this->forUpdate)				{					$query .= (string) $this->forUpdate;				}				else				{					if ($this->forShare)					{						$query .= (string) $this->forShare;					}				}				if ($this->noWait)				{					$query .= (string) $this->noWait;				}				break;			case 'update':				$query .= (string) $this->update;				$query .= (string) $this->set;				if ($this->join)				{					$onWord = ' ON ';					// Workaround for special case of JOIN with UPDATE					foreach ($this->join as $join)					{						$joinElem = $join->getElements();						$joinArray = explode($onWord, $joinElem[0]);						$this->from($joinArray[0]);						$this->where($joinArray[1]);					}					$query .= (string) $this->from;				}				if ($this->where)				{					$query .= (string) $this->where;				}				break;			case 'insert':				$query .= (string) $this->insert;				if ($this->values)				{					if ($this->columns)					{						$query .= (string) $this->columns;					}					$elements = $this->values->getElements();					if (!($elements[0] instanceof $this))					{						$query .= ' VALUES ';					}					$query .= (string) $this->values;					if ($this->returning)					{						$query .= (string) $this->returning;					}				}				break;			default:				$query = parent::__toString();				break;		}		return $query;	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  void	 *	 * @since   11.3	 */	public function clear($clause = null)	{		switch ($clause)		{			case 'limit':				$this->limit = null;				break;			case 'offset':				$this->offset = null;				break;			case 'forUpdate':				$this->forUpdate = null;				break;			case 'forShare':				$this->forShare = null;				break;			case 'noWait':				$this->noWait = null;				break;			case 'returning':				$this->returning = null;				break;			case 'select':			case 'update':			case 'delete':			case 'insert':			case 'from':			case 'join':			case 'set':			case 'where':			case 'group':			case 'having':			case 'order':			case 'columns':			case 'values':				parent::clear($clause);				break;			default:				$this->type = null;				$this->limit = null;				$this->offset = null;				$this->forUpdate = null;				$this->forShare = null;				$this->noWait = null;				$this->returning = null;				parent::clear($clause);				break;		}		return $this;	}	/**	 * Casts a value to a char.	 *	 * Ensure that the value is properly quoted before passing to the method.	 *	 * Usage:	 * $query->select($query->castAsChar('a'));	 *	 * @param   string  $value  The value to cast as a char.	 *	 * @return  string  Returns the cast value.	 *	 * @since   11.1	 */	public function castAsChar($value)	{		return $value . '::text';	}	/**	 * Concatenates an array of column names or values.	 *	 * Usage:	 * $query->select($query->concatenate(array('a', 'b')));	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.3	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			return implode(' || ' . $this->quote($separator) . ' || ', $values);		}		else		{			return implode(' || ', $values);		}	}	/**	 * Gets the current date and time.	 *	 * @return  string  Return string used in query to obtain	 *	 * @since   11.3	 */	public function currentTimestamp()	{		return 'NOW()';	}	/**	 * Sets the FOR UPDATE lock on select's output row	 *	 * @param   string   $table_name  The table to lock	 * @param   boolean  $glue        The glue by which to join the conditions. Defaults to ',' .	 *	 * @return  JDatabaseQuery  FOR UPDATE query element	 *	 * @since   11.3	 */	public function forUpdate ($table_name, $glue = ',')	{		$this->type = 'forUpdate';		if ( is_null($this->forUpdate) )		{			$glue = strtoupper($glue);			$this->forUpdate = new JDatabaseQueryElement('FOR UPDATE', 'OF ' . $table_name, "$glue ");		}		else		{			$this->forUpdate->append($table_name);		}		return $this;	}	/**	 * Sets the FOR SHARE lock on select's output row	 *	 * @param   string   $table_name  The table to lock	 * @param   boolean  $glue        The glue by which to join the conditions. Defaults to ',' .	 *	 * @return  JDatabaseQuery  FOR SHARE query element	 *	 * @since   11.3	 */	public function forShare ($table_name, $glue = ',')	{		$this->type = 'forShare';		if ( is_null($this->forShare) )		{			$glue = strtoupper($glue);			$this->forShare = new JDatabaseQueryElement('FOR SHARE', 'OF ' . $table_name, "$glue ");		}		else		{			$this->forShare->append($table_name);		}		return $this;	}	/**	 * Used to get a string to extract year from date column.	 *	 * Usage:	 * $query->select($query->year($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing year to be extracted.	 *	 * @return  string  Returns string to extract year from a date.	 *	 * @since   12.1	 */	public function year($date)	{		return 'EXTRACT (YEAR FROM ' . $date . ')';	}	/**	 * Used to get a string to extract month from date column.	 *	 * Usage:	 * $query->select($query->month($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing month to be extracted.	 *	 * @return  string  Returns string to extract month from a date.	 *	 * @since   12.1	 */	public function month($date)	{		return 'EXTRACT (MONTH FROM ' . $date . ')';	}	/**	 * Used to get a string to extract day from date column.	 *	 * Usage:	 * $query->select($query->day($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing day to be extracted.	 *	 * @return  string  Returns string to extract day from a date.	 *	 * @since   12.1	 */	public function day($date)	{		return 'EXTRACT (DAY FROM ' . $date . ')';	}	/**	 * Used to get a string to extract hour from date column.	 *	 * Usage:	 * $query->select($query->hour($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing hour to be extracted.	 *	 * @return  string  Returns string to extract hour from a date.	 *	 * @since   12.1	 */	public function hour($date)	{		return 'EXTRACT (HOUR FROM ' . $date . ')';	}	/**	 * Used to get a string to extract minute from date column.	 *	 * Usage:	 * $query->select($query->minute($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing minute to be extracted.	 *	 * @return  string  Returns string to extract minute from a date.	 *	 * @since   12.1	 */	public function minute($date)	{		return 'EXTRACT (MINUTE FROM ' . $date . ')';	}	/**	 * Used to get a string to extract seconds from date column.	 *	 * Usage:	 * $query->select($query->second($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing second to be extracted.	 *	 * @return  string  Returns string to extract second from a date.	 *	 * @since   12.1	 */	public function second($date)	{		return 'EXTRACT (SECOND FROM ' . $date . ')';	}	/**	 * Sets the NOWAIT lock on select's output row	 *	 * @return  JDatabaseQuery  NO WAIT query element	 *	 * @since   11.3	 */	public function noWait ()	{		$this->type = 'noWait';		if ( is_null($this->noWait) )		{			$this->noWait = new JDatabaseQueryElement('NOWAIT', null);		}		return $this;	}	/**	 * Set the LIMIT clause to the query	 *	 * @param   int  $limit  An int of how many row will be returned	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function limit( $limit = 0 )	{		if (is_null($this->limit))		{			$this->limit = new JDatabaseQueryElement('LIMIT', (int) $limit);		}		return $this;	}	/**	 * Set the OFFSET clause to the query	 *	 * @param   int  $offset  An int for skipping row	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function offset( $offset = 0 )	{		if (is_null($this->offset))		{			$this->offset = new JDatabaseQueryElement('OFFSET', (int) $offset);		}		return $this;	}	/**	 * Add the RETURNING element to INSERT INTO statement.	 *	 * @param   mixed  $pkCol  The name of the primary key column.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function returning( $pkCol )	{		if (is_null($this->returning))		{			$this->returning = new JDatabaseQueryElement('RETURNING', $pkCol);		}		return $this;	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit  = (int) $limit;		$this->offset = (int) $offset;		return $this;	}	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return string	 *	 * @since 12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		if ($limit > 0)		{			$query .= ' LIMIT ' . $limit;		}		if ($offset > 0)		{			$query .= ' OFFSET ' . $offset;		}		return $query;	}	/**	 * Add to the current date and time in Postgresql.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date to add to	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @note Not all drivers support all units. Check appropriate references	 * @link http://www.postgresql.org/docs/9.0/static/functions-datetime.html.	 */	public function dateAdd($date, $interval, $datePart)	{		if (substr($interval, 0, 1) != '-')		{			return "timestamp '" . $date . "' + interval '" . $interval . " " . $datePart . "'";		}		else		{			return "timestamp '" . $date . "' - interval '" . ltrim($interval, '-') . " " . $datePart . "'";		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.response');/** * Document class, provides an easy interface to parse and display a document * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocument{	/**	 * Document title	 *	 * @var    string	 * @since  11.1	 */	public $title = '';	/**	 * Document description	 *	 * @var    string	 * @since  11.1	 */	public $description = '';	/**	 * Document full URL	 *	 * @var    string	 * @since  11.1	 */	public $link = '';	/**	 * Document base URL	 *	 * @var    string	 * @since  11.1	 */	public $base = '';	/**	 * Contains the document language setting	 *	 * @var    string	 * @since  11.1	 */	public $language = 'en-gb';	/**	 * Contains the document direction setting	 *	 * @var    string	 * @since  11.1	 */	public $direction = 'ltr';	/**	 * Document generator	 *	 * @var    string	 */	public $_generator = 'Joomla! - Open Source Content Management';	/**	 * Document modified date	 *	 * @var    string	 * @since  11.1	 */	public $_mdate = '';	/**	 * Tab string	 *	 * @var    string	 * @since  11.1	 */	public $_tab = "\11";	/**	 * Contains the line end string	 *	 * @var    string	 * @since  11.1	 */	public $_lineEnd = "\12";	/**	 * Contains the character encoding string	 *	 * @var    string	 * @since  11.1	 */	public $_charset = 'utf-8';	/**	 * Document mime type	 *	 * @var    string	 * @since  11.1	 */	public $_mime = '';	/**	 * Document namespace	 *	 * @var    string	 * @since  11.1	 */	public $_namespace = '';	/**	 * Document profile	 *	 * @var    string	 * @since  11.1	 */	public $_profile = '';	/**	 * Array of linked scripts	 *	 * @var    array	 * @since  11.1	 */	public $_scripts = array();	/**	 * Array of scripts placed in the header	 *	 * @var    array	 * @since  11.1	 */	public $_script = array();	/**	 * Array of linked style sheets	 *	 * @var    array	 * @since  11.1	 */	public $_styleSheets = array();	/**	 * Array of included style declarations	 *	 * @var    array	 * @since  11.1	 */	public $_style = array();	/**	 * Array of meta tags	 *	 * @var    array	 * @since  11.1	 */	public $_metaTags = array();	/**	 * The rendering engine	 *	 * @var    object	 * @since  11.1	 */	public $_engine = null;	/**	 * The document type	 *	 * @var    string	 * @since  11.1	 */	public $_type = null;	/**	 * Array of buffered output	 *	 * @var    mixed (depends on the renderer)	 * @since  11.1	 */	public static $_buffer = null;	/**	 * @var    array  JDocument instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor.	 *	 * @param   array  $options  Associative array of options	 *	 * @since   11.1	 */	public function __construct($options = array())	{		if (array_key_exists('lineend', $options))		{			$this->setLineEnd($options['lineend']);		}		if (array_key_exists('charset', $options))		{			$this->setCharset($options['charset']);		}		if (array_key_exists('language', $options))		{			$this->setLanguage($options['language']);		}		if (array_key_exists('direction', $options))		{			$this->setDirection($options['direction']);		}		if (array_key_exists('tab', $options))		{			$this->setTab($options['tab']);		}		if (array_key_exists('link', $options))		{			$this->setLink($options['link']);		}		if (array_key_exists('base', $options))		{			$this->setBase($options['base']);		}	}	/**	 * Returns the global JDocument object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $type        The document type to instantiate	 * @param   array   $attributes  Array of attributes	 *	 * @return  object  The document object.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($type = 'html', $attributes = array())	{		$signature = serialize(array($type, $attributes));		if (empty(self::$instances[$signature]))		{			$type = preg_replace('/[^A-Z0-9_\.-]/i', '', $type);			$path = __DIR__ . '/' . $type . '/' . $type . '.php';			$ntype = null;			// Check if the document type exists			if (!file_exists($path))			{				// Default to the raw format				$ntype = $type;				$type = 'raw';			}			// Determine the path and class			$class = 'JDocument' . $type;			if (!class_exists($class))			{				$path = __DIR__ . '/' . $type . '/' . $type . '.php';				if (file_exists($path))				{					require_once $path;				}				else				{					throw new RuntimeException('Invalid JDocument Class', 500);				}			}			$instance = new $class($attributes);			self::$instances[$signature] = $instance;			if (!is_null($ntype))			{				// Set the type to the Document type originally requested				$instance->setType($ntype);			}		}		return self::$instances[$signature];	}	/**	 * Set the document type	 *	 * @param   string  $type  Type document is to set to	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setType($type)	{		$this->_type = $type;		return $this;	}	/**	 * Returns the document type	 *	 * @return  string	 *	 * @since   11.1	 */	public function getType()	{		return $this->_type;	}	/**	 * Get the contents of the document buffer	 *	 * @return  The contents of the document buffer	 *	 * @since   11.1	 */	public function getBuffer()	{		return self::$_buffer;	}	/**	 * Set the contents of the document buffer	 *	 * @param   string  $content  The content to be set in the buffer.	 * @param   array   $options  Array of optional elements.	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setBuffer($content, $options = array())	{		self::$_buffer = $content;		return $this;	}	/**	 * Gets a meta tag.	 *	 * @param   string   $name       Value of name or http-equiv tag	 * @param   boolean  $httpEquiv  META type "http-equiv" defaults to null	 *	 * @return  string	 *	 * @since   11.1	 */	public function getMetaData($name, $httpEquiv = false)	{		$result = '';		$name = strtolower($name);		if ($name == 'generator')		{			$result = $this->getGenerator();		}		elseif ($name == 'description')		{			$result = $this->getDescription();		}		else		{			if ($httpEquiv == true)			{				$result = @$this->_metaTags['http-equiv'][$name];			}			else			{				$result = @$this->_metaTags['standard'][$name];			}		}		return $result;	}	/**	 * Sets or alters a meta tag.	 *	 * @param   string   $name        Value of name or http-equiv tag	 * @param   string   $content     Value of the content tag	 * @param   boolean  $http_equiv  META type "http-equiv" defaults to null	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setMetaData($name, $content, $http_equiv = false)	{		$name = strtolower($name);		if ($name == 'generator')		{			$this->setGenerator($content);		}		elseif ($name == 'description')		{			$this->setDescription($content);		}		else		{			if ($http_equiv == true)			{				$this->_metaTags['http-equiv'][$name] = $content;			}			else			{				$this->_metaTags['standard'][$name] = $content;			}		}		return $this;	}	/**	 * Adds a linked script to the page	 *	 * @param   string   $url    URL to the linked script	 * @param   string   $type   Type of script. Defaults to 'text/javascript'	 * @param   boolean  $defer  Adds the defer attribute.	 * @param   boolean  $async  Adds the async attribute.	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addScript($url, $type = "text/javascript", $defer = false, $async = false)	{		$this->_scripts[$url]['mime'] = $type;		$this->_scripts[$url]['defer'] = $defer;		$this->_scripts[$url]['async'] = $async;		return $this;	}	/**	 * Adds a script to the page	 *	 * @param   string  $content  Script	 * @param   string  $type     Scripting mime (defaults to 'text/javascript')	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addScriptDeclaration($content, $type = 'text/javascript')	{		if (!isset($this->_script[strtolower($type)]))		{			$this->_script[strtolower($type)] = $content;		}		else		{			$this->_script[strtolower($type)] .= chr(13) . $content;		}		return $this;	}	/**	 * Adds a linked stylesheet to the page	 *	 * @param   string  $url      URL to the linked style sheet	 * @param   string  $type     Mime encoding type	 * @param   string  $media    Media type that this stylesheet applies to	 * @param   array   $attribs  Array of attributes	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addStyleSheet($url, $type = 'text/css', $media = null, $attribs = array())	{		$this->_styleSheets[$url]['mime'] = $type;		$this->_styleSheets[$url]['media'] = $media;		$this->_styleSheets[$url]['attribs'] = $attribs;		return $this;	}	/**	 * Adds a stylesheet declaration to the page	 *	 * @param   string  $content  Style declarations	 * @param   string  $type     Type of stylesheet (defaults to 'text/css')	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addStyleDeclaration($content, $type = 'text/css')	{		if (!isset($this->_style[strtolower($type)]))		{			$this->_style[strtolower($type)] = $content;		}		else		{			$this->_style[strtolower($type)] .= chr(13) . $content;		}		return $this;	}	/**	 * Sets the document charset	 *	 * @param   string  $type  Charset encoding string	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setCharset($type = 'utf-8')	{		$this->_charset = $type;		return $this;	}	/**	 * Returns the document charset encoding.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getCharset()	{		return $this->_charset;	}	/**	 * Sets the global document language declaration. Default is English (en-gb).	 *	 * @param   string  $lang  The language to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setLanguage($lang = "en-gb")	{		$this->language = strtolower($lang);		return $this;	}	/**	 * Returns the document language.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getLanguage()	{		return $this->language;	}	/**	 * Sets the global document direction declaration. Default is left-to-right (ltr).	 *	 * @param   string  $dir  The language direction to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setDirection($dir = "ltr")	{		$this->direction = strtolower($dir);		return $this;	}	/**	 * Returns the document direction declaration.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getDirection()	{		return $this->direction;	}	/**	 * Sets the title of the document	 *	 * @param   string  $title  The title to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setTitle($title)	{		$this->title = $title;		return $this;	}	/**	 * Return the title of the document.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getTitle()	{		return $this->title;	}	/**	 * Sets the base URI of the document	 *	 * @param   string  $base  The base URI to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setBase($base)	{		$this->base = $base;		return $this;	}	/**	 * Return the base URI of the document.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getBase()	{		return $this->base;	}	/**	 * Sets the description of the document	 *	 * @param   string  $description  The description to set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setDescription($description)	{		$this->description = $description;		return $this;	}	/**	 * Return the title of the page.	 *	 * @return  string	 *	 * @since    11.1	 */	public function getDescription()	{		return $this->description;	}	/**	 * Sets the document link	 *	 * @param   string  $url  A url	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setLink($url)	{		$this->link = $url;		return $this;	}	/**	 * Returns the document base url	 *	 * @return string	 *	 * @since   11.1	 */	public function getLink()	{		return $this->link;	}	/**	 * Sets the document generator	 *	 * @param   string  $generator  The generator to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setGenerator($generator)	{		$this->_generator = $generator;		return $this;	}	/**	 * Returns the document generator	 *	 * @return  string	 *	 * @since   11.1	 */	public function getGenerator()	{		return $this->_generator;	}	/**	 * Sets the document modified date	 *	 * @param   string  $date  The date to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setModifiedDate($date)	{		$this->_mdate = $date;		return $this;	}	/**	 * Returns the document modified date	 *	 * @return  string	 *	 * @since   11.1	 */	public function getModifiedDate()	{		return $this->_mdate;	}	/**	 * Sets the document MIME encoding that is sent to the browser.	 *	 * This usually will be text/html because most browsers cannot yet	 * accept the proper mime settings for XHTML: application/xhtml+xml	 * and to a lesser extent application/xml and text/xml. See the W3C note	 * ({@link http://www.w3.org/TR/xhtml-media-types/	 * http://www.w3.org/TR/xhtml-media-types/}) for more details.	 *	 * @param   string   $type  The document type to be sent	 * @param   boolean  $sync  Should the type be synced with HTML?	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 *	 * @link    http://www.w3.org/TR/xhtml-media-types	 */	public function setMimeEncoding($type = 'text/html', $sync = true)	{		$this->_mime = strtolower($type);		// Syncing with meta-data		if ($sync)		{			$this->setMetaData('content-type', $type . '; charset=' . $this->_charset, true);		}		return $this;	}	/**	 * Return the document MIME encoding that is sent to the browser.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getMimeEncoding()	{		return $this->_mime;	}	/**	 * Sets the line end style to Windows, Mac, Unix or a custom string.	 *	 * @param   string  $style  "win", "mac", "unix" or custom string.	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setLineEnd($style)	{		switch ($style)		{			case 'win':				$this->_lineEnd = "\15\12";				break;			case 'unix':				$this->_lineEnd = "\12";				break;			case 'mac':				$this->_lineEnd = "\15";				break;			default:				$this->_lineEnd = $style;		}		return $this;	}	/**	 * Returns the lineEnd	 *	 * @return  string	 *	 * @since   11.1	 */	public function _getLineEnd()	{		return $this->_lineEnd;	}	/**	 * Sets the string used to indent HTML	 *	 * @param   string  $string  String used to indent ("\11", "\t", '  ', etc.).	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setTab($string)	{		$this->_tab = $string;		return $this;	}	/**	 * Returns a string containing the unit for indenting HTML	 *	 * @return  string	 *	 * @since   11.1	 */	public function _getTab()	{		return $this->_tab;	}	/**	 * Load a renderer	 *	 * @param   string  $type  The renderer type	 *	 * @return  JDocumentRenderer  Object or null if class does not exist	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRenderer($type)	{		$class = 'JDocumentRenderer' . $type;		if (!class_exists($class))		{			$path = __DIR__ . '/' . $this->_type . '/renderer/' . $type . '.php';			if (file_exists($path))			{				require_once $path;			}			else			{				throw new RuntimeException('Unable to load renderer class', 500);			}		}		if (!class_exists($class))		{			return null;		}		$instance = new $class($this);		return $instance;	}	/**	 * Parses the document and prepares the buffers	 *	 * @param   array  $params  The array of parameters	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function parse($params = array())	{		return $this;	}	/**	 * Outputs the document	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   11.1	 */	public function render($cache = false, $params = array())	{		if ($mdate = $this->getModifiedDate())		{			JResponse::setHeader('Last-Modified', $mdate /* gmdate('D, d M Y H:i:s', time() + 900) . ' GMT' */);		}		JResponse::setHeader('Content-Type', $this->_mime . ($this->_charset ? '; charset=' . $this->_charset : ''));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleUsername extends JFormRule{	/**	 * Method to test the username for uniqueness.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Get the database object and a new query object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Build the query.		$query->select('COUNT(*)')			->from('#__users')			->where('username = ' . $db->quote($value));		// Get the extra field check attribute.		$userId = ($form instanceof JForm) ? $form->getValue('id') : '';		$query->where($db->quoteName('id') . ' <> ' . (int) $userId);		// Set and query the database.		$db->setQuery($query);		$duplicate = (bool) $db->loadResult();		if ($duplicate)		{			return false;		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="search<?php echo $this->pageclass_sfx; ?>"><?php if ($this->params->get('show_page_heading', 1)) : ?><h1 class="page-title">	<?php if ($this->escape($this->params->get('page_heading'))) :?>		<?php echo $this->escape($this->params->get('page_heading')); ?>	<?php else : ?>		<?php echo $this->escape($this->params->get('page_title')); ?>	<?php endif; ?></h1><?php endif; ?><?php echo $this->loadTemplate('form'); ?><?php if ($this->error == null && count($this->results) > 0) :	echo $this->loadTemplate('results');else :	echo $this->loadTemplate('error');endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a contact. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactViewContact extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Initialise variables.		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Since we don't track these assets at the item level, use the category id.		$canDo		= ContactHelper::getActions($this->item->catid, 0);		JToolbarHelper::title(JText::_('COM_CONTACT_MANAGER_CONTACT'), 'contact.png');		// Build the actions for new and existing records.		if ($isNew)		{			// For new records, check the create permission.			if ($isNew && (count($user->getAuthorisedCategories('com_contact', 'core.create')) > 0))			{				JToolbarHelper::apply('contact.apply');				JToolbarHelper::save('contact.save');				JToolbarHelper::save2new('contact.save2new');			}			JToolbarHelper::cancel('contact.cancel');		}		else		{			// Can't save the record if it's checked out.			if (!$checkedOut)			{				// Since it's an existing record, check the edit permission, or fall back to edit own if the owner.				if ($canDo->get('core.edit') || ($canDo->get('core.edit.own') && $this->item->created_by == $userId))				{					JToolbarHelper::apply('contact.apply');					JToolbarHelper::save('contact.save');					// We can save this record, but check the create permission to see if we can return to make a new one.					if ($canDo->get('core.create'))					{						JToolbarHelper::save2new('contact.save2new');					}				}			}			// If checked out, we can still save			if ($canDo->get('core.create'))			{				JToolbarHelper::save2copy('contact.save2copy');			}			JToolbarHelper::cancel('contact.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_CONTACTS_CONTACTS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// no direct accessdefined('_JEXEC') or die;echo JHtml::_('sliders.start', 'panel-sliders', array('useCookie' => '1'));foreach ($this->modules as $module){	$output = JModuleHelper::renderModule($module);	$params = new JRegistry;	$params->loadString($module->params);	if ($params->get('automatic_title', '0') == '0')	{		echo JHtml::_('sliders.panel', $module->title, 'cpanel-panel-' . $module->name);	}	elseif (method_exists('mod'.$module->name.'Helper', 'getTitle'))	{		echo JHtml::_('sliders.panel', call_user_func_array(array('mod' . $module->name . 'Helper', 'getTitle'), array($params)), 'cpanel-panel-' . $module->name);	}	else	{		echo JHtml::_('sliders.panel', JText::_('MOD_' . $module->name . '_TITLE'), 'cpanel-panel-' . $module->name);	}	echo $output;}echo JHtml::_('sliders.end');
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_newsfeeds component * * @return  array  An array of URL arguments * * @return  array  The URL arguments to use to assemble the subsequent URL. */function NewsfeedsBuildRoute(&$query){	$segments = array();	// get a menu item based on Itemid or currently active	$app	= JFactory::getApplication();	$menu	= $app->getMenu();	$params = JComponentHelper::getParams('com_newsfeeds');	$advanced = $params->get('sef_advanced_link', 0);	if (empty($query['Itemid']))	{		$menuItem = $menu->getActive();	}	else	{		$menuItem = $menu->getItem($query['Itemid']);	}	$mView = (empty($menuItem->query['view'])) ? null : $menuItem->query['view'];	$mId   = (empty($menuItem->query['id'])) ? null : $menuItem->query['id'];	if (isset($query['view']))	{		$view = $query['view'];		if (empty($query['Itemid']) || empty($menuItem) || $menuItem->component != 'com_newsfeeds')		{			$segments[] = $query['view'];		}		unset($query['view']);	}	// are we dealing with an newsfeed that is attached to a menu item?	if (isset($query['view']) && ($mView == $query['view']) and (isset($query['id'])) and ($mId == (int) $query['id']))	{		unset($query['view']);		unset($query['catid']);		unset($query['id']);		return $segments;	}	if (isset($view) and ($view == 'category' or $view == 'newsfeed'))	{		if ($mId != (int) $query['id'] || $mView != $view)		{			if ($view == 'newsfeed' && isset($query['catid']))			{				$catid = $query['catid'];			}			elseif (isset($query['id']))			{				$catid = $query['id'];			}			$menuCatid = $mId;			$categories = JCategories::getInstance('Newsfeeds');			$category = $categories->get($catid);			if ($category)			{				$path = $category->getPath();				$path = array_reverse($path);				$array = array();				foreach ($path as $id)				{					if ((int) $id == (int) $menuCatid)					{						break;					}					if ($advanced)					{						list($tmp, $id) = explode(':', $id, 2);					}					$array[] = $id;				}				$segments = array_merge($segments, array_reverse($array));			}			if ($view == 'newsfeed')			{				if ($advanced)				{					list($tmp, $id) = explode(':', $query['id'], 2);				}				else				{					$id = $query['id'];				}				$segments[] = $id;			}		}		unset($query['id']);		unset($query['catid']);	}	if (isset($query['layout']))	{		if (!empty($query['Itemid']) && isset($menuItem->query['layout']))		{			if ($query['layout'] == $menuItem->query['layout'])			{				unset($query['layout']);			}		}		else		{			if ($query['layout'] == 'default')			{				unset($query['layout']);			}		}	}	return $segments;}/** * Parse the segments of a URL. * * @return  array  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. */function NewsfeedsParseRoute($segments){	$vars = array();	//Get the active menu item.	$app	= JFactory::getApplication();	$menu	= $app->getMenu();	$item	= $menu->getActive();	$params = JComponentHelper::getParams('com_newsfeeds');	$advanced = $params->get('sef_advanced_link', 0);	// Count route segments	$count = count($segments);	// Standard routing for newsfeeds.	if (!isset($item))	{		$vars['view']	= $segments[0];		$vars['id']		= $segments[$count - 1];		return $vars;	}	// From the categories view, we can only jump to a category.	$id = (isset($item->query['id']) && $item->query['id'] > 1) ? $item->query['id'] : 'root';	$categories = JCategories::getInstance('Newsfeeds')->get($id)->getChildren();	$vars['catid'] = $id;	$vars['id'] = $id;	$found = 0;	foreach ($segments as $segment)	{		$segment = $advanced ? str_replace(':', '-', $segment) : $segment;		foreach ($categories as $category)		{			if ($category->slug == $segment || $category->alias == $segment)			{				$vars['id'] = $category->id;				$vars['catid'] = $category->id;				$vars['view'] = 'category';				$categories = $category->getChildren();				$found = 1;				break;			}		}		if ($found == 0)		{			if ($advanced)			{				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('id'))					->from('#__newsfeeds')					->where($db->quoteName('catid') . ' = ' . (int) $vars['catid'])					->where($db->quoteName('alias') . ' = ' . $db->quote($db->quote($segment)));				$db->setQuery($query);				$nid = $db->loadResult();			}			else			{				$nid = $segment;			}			$vars['id'] = $nid;			$vars['view'] = 'newsfeed';		}		$found = 0;	}	return $vars;}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectPosition');$lang      = JFactory::getLanguage();$ordering  = $this->escape($this->state->get('list.ordering'));$direction = $this->escape($this->state->get('list.direction'));$clientId  = $this->state->get('filter.client_id');$state     = $this->state->get('filter.state');$template  = $this->state->get('filter.template');$type      = $this->state->get('filter.type');?><form action="<?php echo JRoute::_('index.php?option=com_modules&view=positions&layout=modal&tmpl=component&function='.$function.'&client_id=' .$clientId);?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label for="filter_search">				<?php echo JText::_('JSearch_Filter_Label'); ?>			</label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_MODULES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.templateStates'), 'value', 'text', $state, true);?>			</select>			<label class="selectlabel" for="filter_type">				<?php echo JText::_('COM_MODULES_OPTION_SELECT_TYPE'); ?>			</label>			<select name="filter_type" class="inputbox" id="filter_type">				<option value=""><?php echo JText::_('COM_MODULES_OPTION_SELECT_TYPE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.types'), 'value', 'text', $type, true);?>			</select>			<label class="selectlabel" for="filter_template">				<?php echo JText::_('JOPTION_SELECT_TEMPLATE'); ?>			</label>			<select name="filter_template" class="inputbox" id="filter_template">				<option value=""><?php echo JText::_('JOPTION_SELECT_TEMPLATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.templates', $clientId), 'value', 'text', $template, true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist">		<thead>			<tr>				<th class="title width-20">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'value', $direction, $ordering); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_TEMPLATES', 'templates', $direction, $ordering); ?>				</th>			</tr>		</thead>		<tbody>		<?php $i = 1; foreach ($this->items as $value => $templates) : ?>			<tr class="row<?php echo $i = 1 - $i;?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $function;?>('<?php echo $value; ?>');"><?php echo $this->escape($value); ?></a>				</td>				<td>					<?php if (!empty($templates)):?>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $function;?>('<?php echo $value; ?>');">						<ul>						<?php foreach ($templates as $template => $label):?>							<li><?php echo $lang->hasKey($label) ? JText::sprintf('COM_MODULES_MODULE_TEMPLATE_POSITION', JText::_($template), JText::_($label)) : JText::_($template);?></li>						<?php endforeach;?>						</ul>					</a>					<?php endif;?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $ordering; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $direction; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_CACHE_SETTINGS'); ?></legend>			<?php			foreach ($this->form->getFieldset('cache') as $field):			?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php			endforeach;			?>		<?php if (isset($this->data['cache_handler']) &&				$this->data['cache_handler'] == 'memcache' ||				$this->data['session_handler'] == 'memcache' ||				$this->data['cache_handler'] == 'memcached' ||				$this->data['session_handler'] == 'memcached'				) : ?>					<?php			foreach ($this->form->getFieldset('memcache') as $mfield):			?>				<div class="control-group">					<div class="control-label"><?php echo $mfield->label; ?></div>					<div class="controls"><?php echo $mfield->input; ?></div>				</div>			<?php			endforeach;			?>		<?php endif; ?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Video class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/video/ * @since       13.1 */class JFacebookVideo extends JFacebookObject{	/**	 * Method to get a video. Requires authentication and user_videos or friends_videos permission for private videos.	 *	 * @param   string  $video  The video id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getVideo($video)	{		return $this->get($video);	}	/**	 * Method to get a video's comments. Requires authentication and user_videos or friends_videos permission for private videos.	 *	 * @param   string   $video   The video id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($video, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($video, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a video. Requires authentication and publish_stream permission, user_videos or friends_videos permission for private videos.	 *	 * @param   string  $video    The video id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($video, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($video, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission, user_videos or friends_videos permission for private videos.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get video's likes. Requires authentication and user_videos or friends_videos permission for private videos.	 *	 * @param   string   $video   The video id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($video, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($video, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a video. Requires authentication and publish_stream permission, user_videos or friends_videos permission for private videos.	 *	 * @param   string  $video  The video id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($video)	{		return $this->createConnection($video, 'likes');	}	/**	 * Method to unlike a video. Requires authentication and publish_stream permission, user_videos or friends_videos permission for private videos.	 *	 * @param   string  $video  The video id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($video)	{		return $this->deleteConnection($video, 'likes');	}	/**	 * Method to get the album-sized view of the video. Requires authentication and user_videos or friends_videos permission for private photos.	 *	 * @param   string  $video  The video id.	 *	 * @return  string  URL of the picture.	 *	 * @since   13.1	 */	public function getPicture($video)	{		return $this->getConnection($video, 'picture');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides an input field for files * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.file.html#input.file * @since       11.1 */class JFormFieldFile extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'File';	/**	 * Method to get the field input markup for the file field.	 * Field attributes allow specification of a maximum file size and a string	 * of accepted file extensions.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 *	 * @note    The field does not include an upload mechanism.	 * @see     JFormFieldMedia	 */	protected function getInput()	{		// Initialize some field attributes.		$accept = $this->element['accept'] ? ' accept="' . (string) $this->element['accept'] . '"' : '';		$size = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="file" name="' . $this->name . '" id="' . $this->id . '" value=""' . $accept . $disabled . $class . $size			. $onchange . $required . ' />';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filters model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelFilters extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An associative array of configuration settings. [optional]	 *	 * @since   2.5	 * @see     JController	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'filter_id', 'a.filter_id',				'title', 'a.title',				'state', 'a.state',				'created_by_alias', 'a.created_by_alias',				'created', 'a.created',				'map_count', 'a.map_count'			);		}		parent::__construct($config);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery  A JDatabaseQuery object	 *	 * @since   2.5	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select all fields from the table.		$query->select('a.*')			->from($db->quoteName('#__finder_filters') . ' AS a');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', $db->quoteName('#__users') . ' AS uc ON uc.id=a.checked_out');		// Join over the users for the author.		$query->select('ua.name AS user_name')			->join('LEFT', $db->quoteName('#__users') . ' AS ua ON ua.id = a.created_by');		// Check for a search filter.		if ($this->getState('filter.search'))		{			$query->where('( a.title LIKE \'%' . $db->escape($this->getState('filter.search')) . '%\' )');		}		// If the model is set to check item state, add to the query.		if (is_numeric($this->getState('filter.state')))		{			$query->where('a.state = ' . (int) $this->getState('filter.state'));		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering') . ' ' . $db->escape($this->getState('list.direction'))));		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id. [optional]	 *	 * @return  string  A store id.	 *	 * @since   2.5	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.state');		return parent::getStoreId($id);	}	/**	 * Method to auto-populate the model state.  Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field. [optional]	 * @param   string  $direction  An optional direction. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState($ordering = null, $direction = null)	{		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		// Load the parameters.		$params = JComponentHelper::getParams('com_finder');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Editors.codemirror * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * CodeMirror Editor Plugin. * * @package     Joomla.Plugin * @subpackage  Editors.codemirror * @since       1.6 */class PlgEditorCodemirror extends JPlugin{	/**	 * Base path for editor files	 */	protected $_basePath = 'media/editors/codemirror/';	/**	 * Initialises the Editor.	 *	 * @return  string	JavaScript Initialization string.	 */	public function onInit()	{		JHtml::_('behavior.framework');		$uncompressed	= JFactory::getApplication()->getCfg('debug') ? '-uncompressed' : '';		JHtml::_('script', $this->_basePath . 'js/codemirror'.$uncompressed.'.js', false, false, false, false);		JHtml::_('stylesheet', $this->_basePath . 'css/codemirror.css');		return '';	}	/**	 * Copy editor content to form field.	 *	 * @param   string	$id	The id of the editor field.	 *	 * @return  string Javascript	 */	public function onSave($id)	{		return "document.getElementById('$id').value = Joomla.editors.instances['$id'].getCode();\n";	}	/**	 * Get the editor content.	 *	 * @param   string	$id	The id of the editor field.	 *	 * @return  string Javascript	 */	public function onGetContent($id)	{		return "Joomla.editors.instances['$id'].getCode();\n";	}	/**	 * Set the editor content.	 *	 * @param   string	$id			The id of the editor field.	 * @param   string	$content	The content to set.	 *	 * @return  string Javascript	 */	public function onSetContent($id, $content)	{		return "Joomla.editors.instances['$id'].setCode($content);\n";	}	/**	 * Adds the editor specific insert method.	 *	 * @return  boolean	 */	public function onGetInsertMethod()	{		static $done = false;		// Do this only once.		if (!$done)		{			$done = true;			$doc = JFactory::getDocument();			$js = "\tfunction jInsertEditorText(text, editor)				{					Joomla.editors.instances[editor].replaceSelection(text);\n			}";			$doc->addScriptDeclaration($js);		}		return true;	}	/**	 * Display the editor area.	 *	 * @param   string	$name		The control name.	 * @param   string	$html		The contents of the text area.	 * @param   string	$width		The width of the text area (px or %).	 * @param   string	$height		The height of the text area (px or %).	 * @param   integer  $col		The number of columns for the textarea.	 * @param   integer  $row		The number of rows for the textarea.	 * @param   boolean	$buttons	True and the editor buttons will be displayed.	 * @param   string	$id			An optional ID for the textarea (note: since 1.6). If not supplied the name is used.	 * @param   string	$asset	 * @param   object	$author	 * @param   array  $params		Associative array of editor parameters.	 *	 * @return  string HTML	 */	public function onDisplay($name, $content, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null, $params = array())	{		if (empty($id))		{			$id = $name;		}		// Only add "px" to width and height if they are not given as a percentage		if (is_numeric($width))		{			$width .= 'px';		}		if (is_numeric($height))		{			$height .= 'px';		}		// Must pass the field id to the buttons in this editor.		$buttons = $this->_displayButtons($id, $buttons, $asset, $author);		$compressed	= JFactory::getApplication()->getCfg('debug') ? '-uncompressed' : '';		// Default syntax		$parserFile = 'parsexml.js';		$styleSheet = array('xmlcolors.css');		// Look if we need special syntax coloring.		$syntax = JFactory::getApplication()->getUserState('editor.source.syntax');		if ($syntax)		{			switch($syntax)			{				case 'css':					$parserFile = 'parsecss.js';					$styleSheet = array('csscolors.css');					break;				case 'js':					$parserFile = array('tokenizejavascript.js', 'parsejavascript.js');					$styleSheet = array('jscolors.css');					break;				case 'html':					$parserFile = array('parsexml.js', 'parsecss.js', 'tokenizejavascript.js', 'parsejavascript.js', 'parsehtmlmixed.js');					$styleSheet = array('xmlcolors.css', 'jscolors.css', 'csscolors.css');					break;				case 'php':					$parserFile = array('parsexml.js', 'parsecss.js', 'tokenizejavascript.js', 'parsejavascript.js', 'tokenizephp.js', 'parsephp.js', 'parsephphtmlmixed.js');					$styleSheet = array('xmlcolors.css', 'jscolors.css', 'csscolors.css', 'phpcolors.css');					break;				default:					break;			} //switch		}		foreach ($styleSheet as &$style)		{			$style = JURI::root(true).'/'.$this->_basePath.'css/'.$style;		}		$options	= new stdClass;		$options->basefiles		= array('basefiles'.$compressed.'.js');		$options->path			= JURI::root(true).'/'.$this->_basePath.'js/';		$options->parserfile	= $parserFile;		$options->stylesheet	= $styleSheet;		$options->height		= $height;		$options->width			= $width;		$options->continuousScanning = 500;		if ($this->params->get('linenumbers', 0))		{			$options->lineNumbers	= true;			$options->textWrapping	= false;		}		if ($this->params->get('tabmode', '') == 'shift')		{			$options->tabMode = 'shift';		}		$html = array();		$html[]	= "<textarea name=\"$name\" id=\"$id\" cols=\"$col\" rows=\"$row\">$content</textarea>";		$html[] = $buttons;		$html[] = '<script type="text/javascript">';		$html[] = '(function() {';		$html[] = 'var editor = CodeMirror.fromTextArea("'.$id.'", '.json_encode($options).');';		$html[] = 'Joomla.editors.instances[\''.$id.'\'] = editor;';		$html[] = '})()';		$html[] = '</script>';		return implode("\n", $html);	}	/**	 * Displays the editor buttons.	 *	 * @param string $name	 * @param mixed $buttons [array with button objects | boolean true to display buttons]	 *	 * @return  string HTML	 */	protected function _displayButtons($name, $buttons, $asset, $author)	{		// Load modal popup behavior		JHtml::_('behavior.modal', 'a.modal-button');		$args['name'] = $name;		$args['event'] = 'onGetInsertMethod';		$html = array();		$results[] = $this->update($args);		foreach ($results as $result)		{			if (is_string($result) && trim($result))			{				$html[] = $result;			}		}		if (is_array($buttons) || (is_bool($buttons) && $buttons))		{			$results = $this->_subject->getButtons($name, $buttons, $asset, $author);			// This will allow plugins to attach buttons or change the behavior on the fly using AJAX			$html[] = '<div id="editor-xtd-buttons">';			$html[] = '<div class="btn-toolbar">';			foreach ($results as $button)			{				// Results should be an object				if ($button->get('name'))				{					$modal		= ($button->get('modal')) ? 'class="modal-button btn"' : null;					$href		= ($button->get('link')) ? ' class="btn" href="'.JURI::base().$button->get('link').'"' : null;					$onclick	= ($button->get('onclick')) ? 'onclick="'.$button->get('onclick').'"' : null;					$title      = ($button->get('title')) ? $button->get('title') : $button->get('text');					$html[] = '<a '.$modal.' title="'.$title.'" '.$href.' '.$onclick.' rel="'.$button->get('options').'">';					$html[] = '<i class="icon-' . $button->get('name'). '"></i> ';					$html[] = $button->get('text').'</a>';				}			}			$html[] = '</div>';			$html[] = '</div>';		}		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Installation Application class * * @package     Joomla.Installation * @subpackage  Application * @since       3.1 */final class InstallationApplicationWeb extends JApplicationWeb{	/**	 * The application message queue.	 *	 * @var    array	 * @since  3.1	 */	protected $_messageQueue = array();	/**	 * Class constructor.	 *	 * @since   3.1	 */	public function __construct()	{		// Run the parent constructor		parent::__construct();		// Load and set the dispatcher		$this->loadDispatcher();		// Enable sessions by default.		if (is_null($this->config->get('session')))		{			$this->config->set('session', true);		}		// Set the session default name.		if (is_null($this->config->get('session_name')))		{			$this->config->set('session_name', 'installation');		}		// Create the session if a session name is passed.		if ($this->config->get('session') !== false)		{			$this->loadSession();			// Register the session with JFactory			JFactory::$session = $this->getSession();		}		// Store the debug value to config based on the JDEBUG flag		$this->config->set('debug', JDEBUG);		// Register the config to JFactory		JFactory::$config = $this->config;		// Register the application to JFactory		JFactory::$application = $this;		// Set the root in the URI based on the application name		JUri::root(null, str_ireplace('/installation', '', JUri::base(true)));	}	/**	 * Method to display errors in language parsing	 *	 * @return  string  Language debug output	 *	 * @since   3.1	 */	public function debugLanguage()	{		$lang   = JFactory::getLanguage();		$output = '<h4>' . JText::_('JDEBUG_LANGUAGE_FILES_IN_ERROR') . '</h4>';		$errorfiles = $lang->getErrorFiles();		if (count($errorfiles))		{			$output .= '<ul>';			foreach ($errorfiles as $file => $error)			{				$output .= "<li>$error</li>";			}			$output .= '</ul>';		}		else		{			$output .= '<pre>' . JText::_('JNONE') . '</pre>';		}		$output .= '<h4>' . JText::_('JDEBUG_LANGUAGE_UNTRANSLATED_STRING') . '</h4>';		$output .= '<pre>';		$orphans = $lang->getOrphans();		if (count($orphans))		{			ksort($orphans, SORT_STRING);			foreach ($orphans as $key => $occurance)			{				$guess = str_replace('_', ' ', $key);				$parts = explode(' ', $guess);				if (count($parts) > 1)				{					array_shift($parts);					$guess = implode(' ', $parts);				}				$guess = trim($guess);				$key = trim(strtoupper($key));				$key = preg_replace('#\s+#', '_', $key);				$key = preg_replace('#\W#', '', $key);				// Prepare the text				$guesses[] = $key . '="' . $guess . '"';			}			$output .= implode("\n", $guesses);		}		else		{			$output .= '<pre>' . JText::_('JNONE') . '</pre>';		}		$output .= '</pre>';		return $output;	}	/**	 * Dispatch the application	 *	 * @return  void	 *	 * @since   3.1	 */	public function dispatch()	{		try		{			// Load the document to the API			$this->loadDocument();			// Set up the params			$document = $this->getDocument();			// Register the document object with JFactory			JFactory::$document = $document;			if ($document->getType() == 'html')			{				// Set metadata				$document->setTitle(JText::_('INSTL_PAGE_TITLE'));			}			// Define component path			define('JPATH_COMPONENT', JPATH_BASE);			define('JPATH_COMPONENT_SITE', JPATH_SITE);			define('JPATH_COMPONENT_ADMINISTRATOR', JPATH_ADMINISTRATOR);			// Execute the task.			try			{				$controller = $this->fetchController($this->input->getCmd('task'));				$contents   = $controller->execute();			}			catch (RuntimeException $e)			{				echo $e->getMessage();				$this->close($e->getCode());			}			// If debug language is set, append its output to the contents			if ($this->config->get('debug_lang'))			{				$contents .= $this->debugLanguage();			}			$document->setBuffer($contents, 'component');			$document->setTitle(JText::_('INSTL_PAGE_TITLE'));		}		// Mop up any uncaught exceptions.		catch (Exception $e)		{			echo $e->getMessage();			$this->close($e->getCode());		}	}	/**	 * Method to run the Web application routines.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function doExecute()	{		// Initialise the application		$this->initialiseApp();		// Dispatch the application		$this->dispatch();	}	/**	 * Enqueue a system message.	 *	 * @param   string  $msg   The message to enqueue.	 * @param   string  $type  The message type. Default is message.	 *	 * @return  void	 *	 * @since   3.1	 */	public function enqueueMessage($msg, $type = 'message')	{		// For empty queue, if messages exists in the session, enqueue them first.		if (!count($this->_messageQueue))		{			$session = JFactory::getSession();			$sessionQueue = $session->get('application.queue');			if (count($sessionQueue))			{				$this->_messageQueue = $sessionQueue;				$session->set('application.queue', null);			}		}		// Enqueue the message.		$this->_messageQueue[] = array('message' => $msg, 'type' => strtolower($type));	}	/**	 * Method to get a controller object.	 *	 * @param   string  $task  The task being executed	 *	 * @return  JController	 *	 * @since   3.1	 * @throws  RuntimeException	 */	protected function fetchController($task)	{		if (is_null($task))		{			$task = 'default';		}		// Set the controller class name based on the task		$class = 'InstallationController' . ucfirst($task);		// If the requested controller exists let's use it.		if (class_exists($class))		{			return new $class;		}		// Nothing found. Panic.		throw new RuntimeException('Class ' . $class . ' not found');	}	/**	 * Gets the client id of the current running application.	 *	 * @return  integer  A client identifier.	 *	 * @since   3.1	 */	public function getClientId()	{		return 2;	}	/**	 * Returns the language code and help url set in the localise.xml file.	 * Used for forcing a particular language in localised releases.	 *	 * @return  mixed  False on failure, array on success.	 *	 * @since   3.1	 */	public function getLocalise()	{		$xml = simplexml_load_file(JPATH_INSTALLATION . '/localise.xml');		if (!$xml)		{			return false;		}		// Check that it's a localise file		if ($xml->getName() != 'localise')		{			return false;		}		$ret = array();		$ret['language'] = (string) $xml->forceLang;		$ret['helpurl'] = (string) $xml->helpurl;		$ret['debug'] = (string) $xml->debug;		$ret['sampledata'] = (string) $xml->sampledata;		return $ret;	}	/**	 * Returns the installed language files in the administrative and	 * front-end area.	 *	 * @param   mixed  $db  JDatabaseDriver instance	 *	 * @return  array  Array with installed language packs in admin and site area	 *	 * @since   3.1	 */	public function getLocaliseAdmin($db = false)	{		jimport('joomla.filesystem.folder');		// Read the files in the admin area		$path = JLanguage::getLanguagePath(JPATH_ADMINISTRATOR);		$langfiles['admin'] = JFolder::folders($path);		// Read the files in the site area		$path = JLanguage::getLanguagePath(JPATH_SITE);		$langfiles['site'] = JFolder::folders($path);		if ($db)		{			$langfiles_disk = $langfiles;			$langfiles = array();			$langfiles['admin'] = array();			$langfiles['site'] = array();			$query = $db->getQuery(true)				->select($db->quoteName(array('element','client_id')))				->from($db->quoteName('#__extensions'))				->where($db->quoteName('type') . ' = ' . $db->quote('language'));			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				switch ($lang->client_id)				{					// Site					case 0:						if (in_array($lang->element, $langfiles_disk['site']))						{							$langfiles['site'][] = $lang->element;						}						break;					// Administrator					case 1:						if (in_array($lang->element, $langfiles_disk['admin']))						{							$langfiles['admin'][] = $lang->element;						}						break;				}			}		}		return $langfiles;	}	/**	 * Get the system message queue.	 *	 * @return  array  The system message queue.	 *	 * @since   3.1	 */	public function getMessageQueue()	{		// For empty queue, if messages exists in the session, enqueue them.		if (!count($this->_messageQueue))		{			$session = JFactory::getSession();			$sessionQueue = $session->get('application.queue');			if (count($sessionQueue))			{				$this->_messageQueue = $sessionQueue;				$session->set('application.queue', null);			}		}		return $this->_messageQueue;	}	/**	 * Gets the name of the current template.	 *	 * @param   boolean  $params  True to return the template parameters	 *	 * @return  string  The name of the template.	 *	 * @since   3.1	 */	public function getTemplate($params = false)	{		if ($params)		{			$template = new stdClass;			$template->template = 'template';			$template->params = new JRegistry;			return $template;		}		return 'template';	}	/**	 * Initialise the application.	 *	 * @param   array  $options  An optional associative array of configuration settings.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function initialiseApp($options = array())	{		// Get the localisation information provided in the localise.xml file.		$forced = $this->getLocalise();		// Check the request data for the language.		if (empty($options['language']))		{			$requestLang = $this->input->getCmd('lang', null);			if (!is_null($requestLang))			{				$options['language'] = $requestLang;			}		}		// Check the session for the language.		if (empty($options['language']))		{			$sessionOptions = $this->getSession()->get('setup.options');			if (isset($sessionOptions['language']))			{				$options['language'] = $sessionOptions['language'];			}		}		// This could be a first-time visit - try to determine what the client accepts.		if (empty($options['language']))		{			if (!empty($forced['language']))			{				$options['language'] = $forced['language'];			}			else			{				$options['language'] = JLanguageHelper::detectLanguage();				if (empty($options['language']))				{					$options['language'] = 'en-GB';				}			}		}		// Give the user English		if (empty($options['language']))		{			$options['language'] = 'en-GB';		}		// Set the language in the class		$this->config->set('language', $options['language']);		$this->config->set('debug_lang', $forced['debug']);		$this->config->set('sampledata', $forced['sampledata']);	}	/**	 * Allows the application to load a custom or default session.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create a session,	 * if required, based on more specific needs.	 *	 * @param   JSession  $session  An optional session object. If omitted, the session is created.	 *	 * @return  JApplicationWeb This method is chainable.	 *	 * @since   3.1	 */	public function loadSession(JSession $session = null)	{		jimport('legacy.application.application');		$options = array();		$options['name'] = JApplication::getHash($this->config->get('session_name'));		$session = JFactory::getSession($options);		$session->initialise($this->input);		$session->start();		if (!$session->get('registry') instanceof JRegistry)		{			// Registry has been corrupted somehow			$session->set('registry', new JRegistry('session'));		}		// Set the session object.		$this->session = $session;		return $this;	}	/**	 * Rendering is the process of pushing the document buffers into the template	 * placeholders, retrieving data from the document and pushing it into	 * the application response buffer.	 *	 * @return  void	 *	 * @since   3.1	 */	public function render()	{		$file = $this->input->getCmd('tmpl', 'index');		$options = array(			'template' => 'template',			'file' => $file . '.php',			'directory' => JPATH_THEMES,			'params' => '{}'		);		// Parse the document.		$this->document->parse($options);		// Render the document.		$data = $this->document->render($this->get('cache_enabled'), $options);		// Set the application output data.		$this->setBody($data);	}	/**	 * Method to send a JSON response. The data parameter	 * can be a Exception object for when an error has occurred or	 * a stdClass for a good response.	 *	 * @param   mixed  $response  stdClass on success, Exception on failure.	 *	 * @return  void	 *	 * @since   3.1	 */	public function sendJsonResponse($response)	{		// Check if we need to send an error code.		if ($response instanceof Exception)		{			// Send the appropriate error code response.			$this->setHeader('status', $response->getCode());			$this->setHeader('Content-Type', 'application/json; charset=utf-8');			$this->sendHeaders();		}		// Send the JSON response.		echo json_encode(new InstallationResponseJson($response));		// Close the application.		$this->close();	}	/**	 * Set configuration values	 *	 * @param   array   $vars       Array of configuration values	 * @param   string  $namespace  The namespace	 *	 * @return  void	 *	 * @since   3.1	 */	public function setCfg(array $vars = array(), $namespace = 'config')	{		$this->config->loadArray($vars, $namespace);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Form Field class for the Joomla CMS. * Supports a select grouped list of template styles * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6 */class JFormFieldTemplatestyle extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'TemplateStyle';	/**	 * Method to get the list of template style options	 * grouped by template.	 * Use the client attribute to specify a specific client.	 * Use the template attribute to specify a specific template	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   1.6	 */	protected function getGroups()	{		$groups = array();		$lang = JFactory::getLanguage();		// Get the client and client_id.		$clientName = $this->element['client'] ? (string) $this->element['client'] : 'site';		$client = JApplicationHelper::getClientInfo($clientName, true);		// Get the template.		$template = (string) $this->element['template'];		// Get the database object and a new query object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Build the query.		$query->select('s.id, s.title, e.name as name, s.template')			->from('#__template_styles as s')			->where('s.client_id = ' . (int) $client->id)			->order('template')			->order('title');		if ($template)		{			$query->where('s.template = ' . $db->quote($template));		}		$query->join('LEFT', '#__extensions as e on e.element=s.template')			->where('e.enabled=1')			->where($db->quoteName('e.type') . '=' . $db->quote('template'));		// Set the query and load the styles.		$db->setQuery($query);		$styles = $db->loadObjectList();		// Build the grouped list array.		if ($styles)		{			foreach ($styles as $style)			{				$template = $style->template;				$lang->load('tpl_' . $template . '.sys', $client->path, null, false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path . '/templates/' . $template, null, false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path, $lang->getDefault(), false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path . '/templates/' . $template, $lang->getDefault(), false, false);				$name = JText::_($style->name);				// Initialize the group if necessary.				if (!isset($groups[$name]))				{					$groups[$name] = array();				}				$groups[$name][] = JHtml::_('select.option', $style->id, $style->title);			}		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_weblinks component * * @return  array  An array of URL arguments * * @return  array  The URL arguments to use to assemble the subsequent URL. */function WeblinksBuildRoute(&$query){	$segments = array();	// get a menu item based on Itemid or currently active	$app = JFactory::getApplication();	$menu = $app->getMenu();	$params = JComponentHelper::getParams('com_weblinks');	$advanced = $params->get('sef_advanced_link', 0);	// we need a menu item.  Either the one specified in the query, or the current active one if none specified	if (empty($query['Itemid']))	{		$menuItem = $menu->getActive();	}	else	{		$menuItem = $menu->getItem($query['Itemid']);	}	$mView = (empty($menuItem->query['view'])) ? null : $menuItem->query['view'];	$mId = (empty($menuItem->query['id'])) ? null : $menuItem->query['id'];	if (isset($query['view']))	{		$view = $query['view'];		if (empty($query['Itemid']) || empty($menuItem) || $menuItem->component != 'com_weblinks')		{			$segments[] = $query['view'];		}		// We need to keep the view for forms since they never have their own menu item		if ($view != 'form')		{			unset($query['view']);		}	}	// are we dealing with an weblink that is attached to a menu item?	if (isset($query['view']) && ($mView == $query['view']) and (isset($query['id'])) and ($mId == (int) $query['id']))	{		unset($query['view']);		unset($query['catid']);		unset($query['id']);		return $segments;	}	if (isset($view) and ($view == 'category' or $view == 'weblink'))	{		if ($mId != (int) $query['id'] || $mView != $view)		{			if ($view == 'weblink' && isset($query['catid']))			{				$catid = $query['catid'];			}			elseif (isset($query['id']))			{				$catid = $query['id'];			}			$menuCatid = $mId;			$categories = JCategories::getInstance('Weblinks');			$category = $categories->get($catid);			if ($category)			{				//TODO Throw error that the category either not exists or is unpublished				$path = $category->getPath();				$path = array_reverse($path);				$array = array();				foreach ($path as $id)				{					if ((int) $id == (int) $menuCatid)					{						break;					}					if ($advanced)					{						list($tmp, $id) = explode(':', $id, 2);					}					$array[] = $id;				}				$segments = array_merge($segments, array_reverse($array));			}			if ($view == 'weblink')			{				if ($advanced)				{					list($tmp, $id) = explode(':', $query['id'], 2);				}				else				{					$id = $query['id'];				}				$segments[] = $id;			}		}		unset($query['id']);		unset($query['catid']);	}	if (isset($query['layout']))	{		if (!empty($query['Itemid']) && isset($menuItem->query['layout']))		{			if ($query['layout'] == $menuItem->query['layout'])			{				unset($query['layout']);			}		}		else		{			if ($query['layout'] == 'default')			{				unset($query['layout']);			}		}	}	return $segments;}/** * Parse the segments of a URL. * * @return  array  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. */function WeblinksParseRoute($segments){	$vars = array();	//Get the active menu item.	$app = JFactory::getApplication();	$menu = $app->getMenu();	$item = $menu->getActive();	$params = JComponentHelper::getParams('com_weblinks');	$advanced = $params->get('sef_advanced_link', 0);	// Count route segments	$count = count($segments);	// Standard routing for weblinks.	if (!isset($item))	{		$vars['view'] = $segments[0];		$vars['id'] = $segments[$count - 1];		return $vars;	}	// From the categories view, we can only jump to a category.	$id = (isset($item->query['id']) && $item->query['id'] > 1) ? $item->query['id'] : 'root';	$category = JCategories::getInstance('Weblinks')->get($id);	$categories = $category->getChildren();	$found = 0;	foreach ($segments as $segment)	{		foreach ($categories as $category)		{			if (($category->slug == $segment) || ($advanced && $category->alias == str_replace(':', '-', $segment)))			{				$vars['id'] = $category->id;				$vars['view'] = 'category';				$categories = $category->getChildren();				$found = 1;				break;			}		}		if ($found == 0)		{			if ($advanced)			{				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('id'))					->from('#__weblinks')					->where($db->quoteName('catid') . ' = ' . (int) $vars['catid'])					->where($db->quoteName('alias') . ' = ' . $db->quote($db->quote(str_replace(':', '-', $segment))));				$db->setQuery($query);				$id = $db->loadResult();			}			else			{				$id = $segment;			}			$vars['id'] = $id;			$vars['view'] = 'weblink';			break;		}		$found = 0;	}	return $vars;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User note model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersModelNote extends JModelAdmin{	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   2.5	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.note', 'note', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   2.5	 */	public function getItem($pk = null)	{		$result = parent::getItem($pk);		// Get the dispatcher and load the users plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		// Trigger the data preparation event.		$results = $dispatcher->trigger('onContentPrepareData', array('com_users.note', $result));		return $result;	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $name     The table name. Optional.	 * @param   string  $prefix   The class prefix. Optional.	 * @param   array   $options  Configuration array for model. Optional.	 *	 * @return  JTable  The table object	 *	 * @since   2.5	 */	public function getTable($name = 'Note', $prefix = 'UsersTable', $options = array())	{		return JTable::getInstance($name, $prefix, $options);	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Get the application		$app = JFactory::getApplication();		// Check the session for previously entered form data.		$data = $app->getUserState('com_users.edit.note.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('note.id') == 0)			{				$data->set('catid', $app->input->get('catid', $app->getUserState('com_users.notes.filter.category_id'), 'int'));			}			$userId = $app->input->get('u_id', 0, 'int');			if ($userId != 0)			{				$data->user_id = $userId;			}		}		$this->preprocessData('com_users.note', $data);		return $data;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState()	{		parent::populateState();		$userId = JFactory::getApplication()->input->get('u_id', 0, 'int');		$this->setState('note.user_id', $userId);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	/*public function save($data)	{		$pk		= (!empty($data['id'])) ? $data['id'] : (int) $this->getState('note.id');		$table	= $this->getTable();		$isNew	= empty($pk);		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// JTableCategory doesn't bind the params, so we need to do that by hand.		if (isset($data['params']) && is_array($data['params']))		{			$registry = new JRegistry();			$registry->loadArray($data['params']);			$table->params = $registry->toString();			// This will give us INI format.		}		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		$this->setState('note.id', $table->id);		return true;	}*/}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexerStemmer', __DIR__ . '/stemmer.php');JLoader::register('FinderIndexerToken', __DIR__ . '/token.php');/** * Helper class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerHelper{	/**	 * The token stemmer object. The stemmer is set by whatever class	 * wishes to use it but it must be an instance of FinderIndexerStemmer.	 *	 * @var		FinderIndexerStemmer	 * @since	2.5	 */	public static $stemmer;	/**	 * Method to parse input into plain text.	 *	 * @param   string  $input   The raw input.	 * @param   string  $format  The format of the input. [optional]	 *	 * @return  string  The parsed input.	 *	 * @since   2.5	 * @throws  Exception on invalid parser.	 */	public static function parse($input, $format = 'html')	{		// Get a parser for the specified format and parse the input.		return FinderIndexerParser::getInstance($format)->parse($input);	}	/**	 * Method to tokenize a text string.	 *	 * @param   string   $input   The input to tokenize.	 * @param   string   $lang    The language of the input.	 * @param   boolean  $phrase  Flag to indicate whether input could be a phrase. [optional]	 *	 * @return  array  An array of FinderIndexerToken objects.	 *	 * @since   2.5	 */	public static function tokenize($input, $lang, $phrase = false)	{		static $cache;		$store = JString::strlen($input) < 128 ? md5($input . '::' . $lang . '::' . $phrase) : null;		// Check if the string has been tokenized already.		if ($store && isset($cache[$store]))		{			return $cache[$store];		}		$tokens = array();		$quotes = html_entity_decode('&#8216;&#8217;&#39;', ENT_QUOTES, 'UTF-8');		// Get the simple language key.		$lang = self::getPrimaryLanguage($lang);		/*		 * Parsing the string input into terms is a multi-step process.		 *		 * Regexes:		 *  1. Remove everything except letters, numbers, quotes, apostrophe, plus, dash, period, and comma.		 *  2. Remove plus, dash, period, and comma characters located before letter characters.		 *  3. Remove plus, dash, period, and comma characters located after other characters.		 *  4. Remove plus, period, and comma characters enclosed in alphabetical characters. Ungreedy.		 *  5. Remove orphaned apostrophe, plus, dash, period, and comma characters.		 *  6. Remove orphaned quote characters.		 *  7. Replace the assorted single quotation marks with the ASCII standard single quotation.		 *  8. Remove multiple space characters and replaces with a single space.		 */		$input = JString::strtolower($input);		$input = preg_replace('#[^\pL\pM\pN\p{Pi}\p{Pf}\'+-.,]+#mui', ' ', $input);		$input = preg_replace('#(^|\s)[+-.,]+([\pL\pM]+)#mui', ' $1', $input);		$input = preg_replace('#([\pL\pM\pN]+)[+-.,]+(\s|$)#mui', '$1 ', $input);		$input = preg_replace('#([\pL\pM]+)[+.,]+([\pL\pM]+)#muiU', '$1 $2', $input); // Ungreedy		$input = preg_replace('#(^|\s)[\'+-.,]+(\s|$)#mui', ' ', $input);		$input = preg_replace('#(^|\s)[\p{Pi}\p{Pf}]+(\s|$)#mui', ' ', $input);		$input = preg_replace('#[' . $quotes . ']+#mui', '\'', $input);		$input = preg_replace('#\s+#mui', ' ', $input);		$input = JString::trim($input);		// Explode the normalized string to get the terms.		$terms = explode(' ', $input);		/*		 * If we have Unicode support and are dealing with Chinese text, Chinese		 * has to be handled specially because there are not necessarily any spaces		 * between the "words". So, we have to test if the words belong to the Chinese		 * character set and if so, explode them into single glyphs or "words".		 */		if ($lang === 'zh')		{			// Iterate through the terms and test if they contain Chinese.			for ($i = 0, $n = count($terms); $i < $n; $i++)			{				$charMatches = array();				$charCount = preg_match_all('#[\p{Han}]#mui', $terms[$i], $charMatches);				// Split apart any groups of Chinese characters.				for ($j = 0; $j < $charCount; $j++)				{					$tSplit = JString::str_ireplace($charMatches[0][$j], '', $terms[$i], false);					if (!empty($tSplit))					{						$terms[$i] = $tSplit;					}					else					{						unset($terms[$i]);					}					$terms[] = $charMatches[0][$j];				}			}			// Reset array keys.			$terms = array_values($terms);		}		/*		 * If we have to handle the input as a phrase, that means we don't		 * tokenize the individual terms and we do not create the two and three		 * term combinations. The phrase must contain more than one word!		 */		if ($phrase === true && count($terms) > 1)		{			// Create tokens from the phrase.			$tokens[] = new FinderIndexerToken($terms, $lang);		}		else		{			// Create tokens from the terms.			for ($i = 0, $n = count($terms); $i < $n; $i++)			{				$tokens[] = new FinderIndexerToken($terms[$i], $lang);			}			// Create two and three word phrase tokens from the individual words.			for ($i = 0, $n = count($tokens); $i < $n; $i++)			{				// Setup the phrase positions.				$i2 = $i + 1;				$i3 = $i + 2;				// Create the two word phrase.				if ($i2 < $n && isset($tokens[$i2]))				{					// Tokenize the two word phrase.					$token = new FinderIndexerToken(array($tokens[$i]->term, $tokens[$i2]->term), $lang, $lang === 'zh' ? '' : ' ');					$token->derived = true;					// Add the token to the stack.					$tokens[] = $token;				}				// Create the three word phrase.				if ($i3 < $n && isset($tokens[$i3]))				{					// Tokenize the three word phrase.					$token = new FinderIndexerToken(array($tokens[$i]->term, $tokens[$i2]->term, $tokens[$i3]->term), $lang, $lang === 'zh' ? '' : ' ');					$token->derived = true;					// Add the token to the stack.					$tokens[] = $token;				}			}		}		if ($store)		{			$cache[$store] = count($tokens) > 1 ? $tokens : array_shift($tokens);			return $cache[$store];		}		else		{			return count($tokens) > 1 ? $tokens : array_shift($tokens);		}	}	/**	 * Method to get the base word of a token. This method uses the public	 * {@link FinderIndexerHelper::$stemmer} object if it is set. If no stemmer is set,	 * the original token is returned.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	public static function stem($token, $lang)	{		// Trim apostrophes at either end of the token.		$token = JString::trim($token, '\'');		// Trim everything after any apostrophe in the token.		if (($pos = JString::strpos($token, '\'')) !== false)		{			$token = JString::substr($token, 0, $pos);		}		// Stem the token if we have a valid stemmer to use.		if (self::$stemmer instanceof FinderIndexerStemmer)		{			return self::$stemmer->stem($token, $lang);		}		else		{			return $token;		}	}	/**	 * Method to add a content type to the database.	 *	 * @param   string  $title  The type of content. For example: PDF	 * @param   string  $mime   The mime type of the content. For example: PDF [optional]	 *	 * @return  integer  The id of the content type.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function addContentType($title, $mime = null)	{		static $types;		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Check if the types are loaded.		if (empty($types))		{			// Build the query to get the types.			$query->select('*')				->from($db->quoteName('#__finder_types'));			// Get the types.			$db->setQuery($query);			$types = $db->loadObjectList('title');		}		// Check if the type already exists.		if (isset($types[$title]))		{			return (int) $types[$title]->id;		}		// Add the type.		$query->clear()			->insert($db->quoteName('#__finder_types'))			->columns(array($db->quoteName('title'), $db->quoteName('mime')))			->values($db->quote($title) . ', ' . $db->quote($mime));		$db->setQuery($query);		$db->execute();		// Return the new id.		return (int) $db->insertid();	}	/**	 * Method to check if a token is common in a language.	 *	 * @param   string  $token  The token to test.	 * @param   string  $lang   The language to reference.	 *	 * @return  boolean  True if common, false otherwise.	 *	 * @since   2.5	 */	public static function isCommon($token, $lang)	{		static $data;		// Load the common tokens for the language if necessary.		if (!isset($data[$lang]))		{			$data[$lang] = self::getCommonWords($lang);		}		// Check if the token is in the common array.		if (in_array($token, $data[$lang]))		{			return true;		}		else		{			return false;		}	}	/**	 * Method to get an array of common terms for a language.	 *	 * @param   string  $lang  The language to use.	 *	 * @return  array  Array of common terms.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function getCommonWords($lang)	{		$db = JFactory::getDbo();		// Create the query to load all the common terms for the language.		$query = $db->getQuery(true)			->select($db->quoteName('term'))			->from($db->quoteName('#__finder_terms_common'))			->where($db->quoteName('language') . ' = ' . $db->quote($lang));		// Load all of the common terms for the language.		$db->setQuery($query);		$results = $db->loadColumn();		return $results;	}	/**	 * Method to get the default language for the site.	 *	 * @return  string  The default language string.	 *	 * @since   2.5	 */	public static function getDefaultLanguage()	{		static $lang;		// We need to go to com_languages to get the site default language, it's the best we can guess.		if (empty($lang))		{			$lang = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');		}		return $lang;	}	/**	 * Method to parse a language/locale key and return a simple language string.	 *	 * @param   string  $lang  The language/locale key. For example: en-GB	 *	 * @return  string  The simple language string. For example: en	 *	 * @since   2.5	 */	public static function getPrimaryLanguage($lang)	{		static $data;		// Only parse the identifier if necessary.		if (!isset($data[$lang]))		{			if (is_callable(array('Locale', 'getPrimaryLanguage')))			{				// Get the language key using the Locale package.				$data[$lang] = Locale::getPrimaryLanguage($lang);			}			else			{				// Get the language key using string position.				$data[$lang] = JString::substr($lang, 0, JString::strpos($lang, '-'));			}		}		return $data[$lang];	}	/**	 * Method to get the path (SEF route) for a content item.	 *	 * @param   string  $url  The non-SEF route to the content item.	 *	 * @return  string  The path for the content item.	 *	 * @since   2.5	 */	public static function getContentPath($url)	{		static $router;		// Only get the router once.		if (!($router instanceof JRouter))		{			jimport('joomla.application.router');			include_once JPATH_SITE . '/includes/application.php';			// Get and configure the site router.			$config = JFactory::getConfig();			$router = JRouter::getInstance('site');			$router->setMode($config->get('sef', 1));		}		// Build the relative route.		$uri = $router->build($url);		$route = $uri->toString(array('path', 'query', 'fragment'));		$route = str_replace(JURI::base(true) . '/', '', $route);		return $route;	}	/**	 * Method to get extra data for a content before being indexed. This is how	 * we add Comments, Tags, Labels, etc. that should be available to Finder.	 *	 * @param   FinderIndexerResult  &$item  The item to index as an FinderIndexerResult object.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function getContentExtras(FinderIndexerResult &$item)	{		// Get the event dispatcher.		$dispatcher = JEventDispatcher::getInstance();		// Load the finder plugin group.		JPluginHelper::importPlugin('finder');		try		{			// Trigger the event.			$results = $dispatcher->trigger('onPrepareFinderContent', array(&$item));			// Check the returned results. This is for plugins that don't throw			// exceptions when they encounter serious errors.			if (in_array(false, $results))			{				throw new Exception($dispatcher->getError(), 500);			}		}		catch (Exception $e)		{			// Handle a caught exception.			throw $e;		}		return true;	}	/**	 * Method to process content text using the onContentPrepare event trigger.	 *	 * @param   string     $text    The content to process.	 * @param   JRegistry  $params  The parameters object. [optional]	 *	 * @return  string  The processed content.	 *	 * @since   2.5	 */	public static function prepareContent($text, $params = null)	{		static $loaded;		// Get the dispatcher.		$dispatcher = JEventDispatcher::getInstance();		// Load the content plugins if necessary.		if (empty($loaded))		{			JPluginHelper::importPlugin('content');			$loaded = true;		}		// Instantiate the parameter object if necessary.		if (!($params instanceof JRegistry))		{			$registry = new JRegistry;			$registry->loadString($params);			$params = $registry;		}		// Create a mock content object.		$content = JTable::getInstance('Content');		$content->text = $text;		// Fire the onContentPrepare event.		$dispatcher->trigger('onContentPrepare', array('com_finder.indexer', &$content, &$params, 0));		return $content->text;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$user      = JFactory::getUser();$userId    = $user->get('id');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));JText::script('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'filters.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=filters');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by_alias', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_TIMESTAMP', 'a.created', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_MAP_COUNT', 'a.map_count', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.filter_id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tbody>				<?php if (count($this->items) == 0) : ?>				<tr class="row0">					<td class="center" colspan="7">						<?php						if ($this->total == 0):							echo JText::_('COM_FINDER_NO_FILTERS');							?>							<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.add'); ?>" title="<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>">								<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>							</a>						<?php						else:							echo JText::_('COM_FINDER_NO_RESULTS');						endif;						?>					</td>				</tr>				<?php endif; ?>				<?php foreach ($this->items as $i => $item):				$canCreate  = $user->authorise('core.create',     'com_finder');				$canEdit    = $user->authorise('core.edit',       'com_finder');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_finder') && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->filter_id); ?>					</td>					<td>						<?php if ($item->checked_out)						{							echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'filters.', $canCheckin);						} ?>						<?php if ($canEdit) { ?>							<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.edit&filter_id=' . (int) $item->filter_id); ?>">								<?php echo $this->escape($item->title); ?></a>						<?php } else {								echo $this->escape($item->title);						} ?>					</td>					<td class="center nowrap">						<?php echo JHtml::_('jgrid.published', $item->state, $i, 'filters.', $canChange); ?>					</td>					<td class="center nowrap">						<?php echo $item->created_by_alias ? $item->created_by_alias : $item->user_name; ?>					</td>					<td class="center nowrap">						<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center nowrap">						<?php echo $item->map_count; ?>					</td>					<td class="center">						<?php echo (int) $item->filter_id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>			<tfoot>				<tr>					<td colspan="7" class="nowrap">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $this->state->get('list.ordering'); ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $this->state->get('list.direction'); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	Joomla.submitbutton = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_package.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_PACKAGE', true); ?>");		}		else		{			form.installtype.value = 'upload';			form.submit();		}	}	Joomla.submitbutton3 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_directory.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_DIRECTORY', true); ?>");		}		else		{			form.installtype.value = 'folder';			form.submit();		}	}	Joomla.submitbutton4 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_url.value == "" || form.install_url.value == "http://"){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_ENTER_A_URL', true); ?>");		}		else		{			form.installtype.value = 'url';			form.submit();		}	}</script><div id="installer-install"><form enctype="multipart/form-data" action="<?php echo JRoute::_('index.php?option=com_installer&view=install');?>" method="post" name="adminForm" id="adminForm" class="form-horizontal">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<!-- Render messages set by extension install scripts here -->	<?php if ($this->showMessage) : ?>		<?php echo $this->loadTemplate('message'); ?>	<?php endif; ?>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'upload')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'upload', JText::_('COM_INSTALLER_UPLOAD_PACKAGE_FILE', true)); ?>			<fieldset class="uploadform">				<legend><?php echo JText::_('COM_INSTALLER_UPLOAD_PACKAGE_FILE'); ?></legend>				<div class="control-group">					<label for="install_package" class="control-label"><?php echo JText::_('COM_INSTALLER_PACKAGE_FILE'); ?></label>					<div class="controls">						<input class="input_box" id="install_package" name="install_package" type="file" size="57" />					</div>				</div>				<div class="form-actions">					<input class="btn btn-primary" type="button" value="<?php echo JText::_('COM_INSTALLER_UPLOAD_AND_INSTALL'); ?>" onclick="Joomla.submitbutton()" />				</div>			</fieldset>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'directory', JText::_('COM_INSTALLER_INSTALL_FROM_DIRECTORY', true)); ?>			<fieldset class="uploadform">				<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_DIRECTORY'); ?></legend>				<div class="control-group">					<label for="install_directory" class="control-label"><?php echo JText::_('COM_INSTALLER_INSTALL_DIRECTORY'); ?></label>					<div class="controls">						<input type="text" id="install_directory" name="install_directory" class="span5 input_box" size="70" value="<?php echo $this->state->get('install.directory'); ?>" />					</div>				</div>				<div class="form-actions">					<input type="button" class="btn btn-primary" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton3()" />				</div>			</fieldset>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'url', JText::_('COM_INSTALLER_INSTALL_FROM_URL', true)); ?>			<fieldset class="uploadform">				<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_URL'); ?></legend>				<div class="control-group">					<label for="install_url" class="control-label"><?php echo JText::_('COM_INSTALLER_INSTALL_URL'); ?></label>					<div class="controls">						<input type="text" id="install_url" name="install_url" class="span5 input_box" size="70" value="http://" />					</div>				</div>				<div class="form-actions">					<input type="button" class="btn btn-primary" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton4()" />				</div>			</fieldset>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php if ($this->ftp) : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'ftp', JText::_('COM_INSTALLER_MSG_DESCFTPTITLE', true)); ?>				<?php echo $this->loadTemplate('ftp'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<input type="hidden" name="type" value="" />	<input type="hidden" name="installtype" value="upload" />	<input type="hidden" name="task" value="install.install" />	<?php echo JHtml::_('form.token'); ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?></form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_users * @since       1.5 */class UsersViewUser extends JViewLegacy{	protected $form;	protected $item;	protected $grouplist;	protected $groups;	protected $state;	/**	 * Display the view	 *	 * @since  1.5	 */	public function display($tpl = null)	{		$this->form			= $this->get('Form');		$this->item			= $this->get('Item');		$this->grouplist	= $this->get('Groups');		$this->groups		= $this->get('AssignedGroups');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->form->setValue('password', null);		$this->form->setValue('password2',	null);		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = UsersHelper::getActions();		$isNew	= ($this->item->id == 0);		$isProfile = $this->item->id == $user->id;		JToolbarHelper::title(JText::_($isNew ? 'COM_USERS_VIEW_NEW_USER_TITLE' : ($isProfile ? 'COM_USERS_VIEW_EDIT_PROFILE_TITLE' : 'COM_USERS_VIEW_EDIT_USER_TITLE')), $isNew ? 'user-add' : ($isProfile ? 'user-profile' : 'user-edit'));		if ($canDo->get('core.edit')||$canDo->get('core.create'))		{			JToolbarHelper::apply('user.apply');			JToolbarHelper::save('user.save');		}		if ($canDo->get('core.create')&&$canDo->get('core.manage'))		{			JToolbarHelper::save2new('user.save2new');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('user.cancel');		}		else		{			JToolbarHelper::cancel('user.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_USER_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');/** * Banners model for the Joomla Banners component. * * @package     Joomla.Site * @subpackage  com_banners * @since       1.6 */class BannersModelBanners extends JModelList{	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.tag_search');		$id .= ':' . $this->getState('filter.client_id');		$id .= ':' . serialize($this->getState('filter.category_id'));		$id .= ':' . serialize($this->getState('filter.keywords'));		return parent::getStoreId($id);	}	/**	 * Gets a list of banners	 *	 * @return  array  An array of banner objects.	 * @since   1.6	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		$ordering = $this->getState('filter.ordering');		$tagSearch = $this->getState('filter.tag_search');		$cid = $this->getState('filter.client_id');		$categoryId = $this->getState('filter.category_id');		$keywords = $this->getState('filter.keywords');		$randomise = ($ordering == 'random');		$nullDate = $db->quote($db->getNullDate());		$query->select(			'a.id as id,' .				'a.type as type,' .				'a.name as name,' .				'a.clickurl as clickurl,' .				'a.cid as cid,' .				'a.params as params,' .				'a.custombannercode as custombannercode,' .				'a.track_impressions as track_impressions,' .				'cl.track_impressions as client_track_impressions'		)			->from('#__banners as a')			->join('LEFT', '#__banner_clients AS cl ON cl.id = a.cid')			->where('a.state=1')			->where('(' . $query->currentTimestamp() . ' >= a.publish_up OR a.publish_up = ' . $nullDate . ')')			->where('(' . $query->currentTimestamp() . ' <= a.publish_down OR a.publish_down = ' . $nullDate . ')')			->where('(a.imptotal = 0 OR a.impmade <= a.imptotal)');		if ($cid)		{			$query->join('LEFT', '#__categories as cat ON a.catid = cat.id')				->where('a.cid = ' . (int) $cid)				->where('cl.state = 1');		}		// Filter by a single or group of categories		$categoryId = $this->getState('filter.category_id');		$catid = $this->getState('filter.category_id', array());		if (is_numeric($categoryId))		{			$type = $this->getState('filter.category_id.include', true) ? '= ' : '<> ';			// Add subcategory check			$includeSubcategories = $this->getState('filter.subcategories', false);			$categoryEquals = 'a.catid ' . $type . (int) $categoryId;			if ($includeSubcategories)			{				$levels = (int) $this->getState('filter.max_category_levels', '1');				// Create a subquery for the subcategory list				$subQuery = $db->getQuery(true);				$subQuery->select('sub.id')					->from('#__categories as sub')					->join('INNER', '#__categories as this ON sub.lft > this.lft AND sub.rgt < this.rgt')					->where('this.id = ' . (int) $categoryId)					->where('sub.level <= this.level + ' . $levels);				// Add the subquery to the main query				$query->where('(' . $categoryEquals . ' OR a.catid IN (' . $subQuery->__toString() . '))');			}			else			{				$query->where($categoryEquals);			}		}		elseif ((is_array($categoryId)) && (count($categoryId) > 0))		{			JArrayHelper::toInteger($categoryId);			$categoryId = implode(',', $categoryId);			if ($categoryId != '0')			{				$type = $this->getState('filter.category_id.include', true) ? 'IN' : 'NOT IN';				$query->where('a.catid ' . $type . ' (' . $categoryId . ')');			}		}		if ($tagSearch)		{			if (count($keywords) == 0)			{				$query->where('0');			}			else			{				$temp = array();				$config = JComponentHelper::getParams('com_banners');				$prefix = $config->get('metakey_prefix');				foreach ($keywords as $keyword)				{					$keyword = trim($keyword);					$condition1 = "a.own_prefix=1 AND a.metakey_prefix=SUBSTRING(" . $db->quote($keyword) . ",1,LENGTH( a.metakey_prefix)) OR a.own_prefix=0 AND cl.own_prefix=1 AND cl.metakey_prefix=SUBSTRING(" . $db->quote($keyword) . ",1,LENGTH(cl.metakey_prefix)) OR a.own_prefix=0 AND cl.own_prefix=0 AND " . ($prefix == substr($keyword, 0, strlen($prefix)) ? '1' : '0');					$condition2 = "a.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					if ($cid)					{						$condition2 .= " OR cl.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					}					if ($catid)					{						$condition2 .= " OR cat.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					}					$temp[] = "($condition1) AND ($condition2)";				}				$query->where('(' . implode(' OR ', $temp) . ')');			}		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		$query->order('a.sticky DESC,' . ($randomise ? 'RAND()' : 'a.ordering'));		return $query;	}	/**	 * Get a list of banners.	 *	 * @return  array	 * @since   1.6	 */	public function getItems()	{		if (!isset($this->cache['items']))		{			$this->cache['items'] = parent::getItems();			foreach ($this->cache['items'] as &$item)			{				$parameters = new JRegistry;				$parameters->loadString($item->params);				$item->params = $parameters;			}		}		return $this->cache['items'];	}	/**	 * Makes impressions on a list of banners	 *	 * @return  void	 * @since   1.6	 */	public function impress()	{		$trackDate = JFactory::getDate()->format('Y-m-d H');		$items = $this->getItems();		$db = $this->getDbo();		$query = $db->getQuery(true);		foreach ($items as $item)		{			// Increment impression made			$id = $item->id;			$query->clear()				->update('#__banners')				->set('impmade = (impmade + 1)')				->where('id = ' . (int) $id);			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				JError::raiseError(500, $e->getMessage());			}			// track impressions			$trackImpressions = $item->track_impressions;			if ($trackImpressions < 0 && $item->cid)			{				$trackImpressions = $item->client_track_impressions;			}			if ($trackImpressions < 0)			{				$config = JComponentHelper::getParams('com_banners');				$trackImpressions = $config->get('track_impressions');			}			if ($trackImpressions > 0)			{				// is track already created ?				$query->clear()					->select($db->quoteName('count'))					->from('#__banner_tracks')					->where('track_type=1')					->where('banner_id=' . (int) $id)					->where('track_date=' . $db->quote($trackDate));				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					JError::raiseError(500, $e->getMessage());				}				$count = $db->loadResult();				$query->clear();				if ($count)				{					// update count					$query->update('#__banner_tracks')						->set($db->quoteName('count') . ' = (' . $db->quote('count') . ' + 1)')						->where('track_type=1')						->where('banner_id=' . (int) $id)						->where('track_date=' . $db->quote($trackDate));				}				else				{					// insert new count					//sqlsrv change					$query->insert('#__banner_tracks')						->columns(							array(								$db->quoteName('count'), $db->quoteName('track_type'),								$db->quoteName('banner_id'), $db->quoteName('track_date')							)						)						->values('1, 1, ' . (int) $id . ', ' . $db->quote($trackDate));				}				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					JError::raiseError(500, $e->getMessage());				}			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_templates */class JHtmlTemplates{	/**	 * Display the thumb for the template.	 *	 * @param   string	The name of the active view.	 */	public static function thumb($template, $clientId = 0)	{		$client		= JApplicationHelper::getClientInfo($clientId);		$basePath	= $client->path.'/templates/'.$template;		$baseUrl	= ($clientId == 0) ? JUri::root(true) : JUri::root(true).'/administrator';		$thumb		= $basePath.'/template_thumbnail.png';		$preview	= $basePath.'/template_preview.png';		$html		= '';		if (file_exists($thumb))		{			$clientPath = ($clientId == 0) ? '' : 'administrator/';			$thumb	= $clientPath.'templates/'.$template.'/template_thumbnail.png';			$html	= JHtml::_('image', $thumb, JText::_('COM_TEMPLATES_PREVIEW'));			if (file_exists($preview))			{				$preview	= $baseUrl.'/templates/'.$template.'/template_preview.png';				$html		= '<a href="'.$preview.'" class="thumbnail pull-left modal" title="'.JText::_('COM_TEMPLATES_CLICK_TO_ENLARGE').'">'.$html.'</a>';			}		}		return $html;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Editors-xtd.readmore * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Editor Readmore buton * * @package     Joomla.Plugin * @subpackage  Editors-xtd.readmore * @since       1.5 */class PlgButtonReadmore extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * readmore button	 * @return array A two element array of (imageName, textToInsert)	 */	public function onDisplay($name)	{		$doc = JFactory::getDocument();		// button is not active in specific content components		$getContent = $this->_subject->getContent($name);		$present = JText::_('PLG_READMORE_ALREADY_EXISTS', true);		$js = "			function insertReadmore(editor)			{				var content = $getContent				if (content.match(/<hr\s+id=(\"|')system-readmore(\"|')\s*\/*>/i))				{					alert('$present');					return false;				} else {					jInsertEditorText('<hr id=\"system-readmore\" />', editor);				}			}			";		$doc->addScriptDeclaration($js);		$button = new JObject;		$button->modal = false;		$button->onclick = 'insertReadmore(\''.$name.'\');return false;';		$button->text = JText::_('PLG_READMORE_BUTTON_READMORE');		$button->name = 'arrow-down';		// TODO: The button writer needs to take into account the javascript directive		//$button->link', 'javascript:void(0)');		$button->link = '#';		return $button;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Cache base object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCache{	/**	 * @var    object  Storage handler	 * @since  11.1	 */	public static $_handler = array();	/**	 * @var    array  Options	 * @since  11.1	 */	public $_options;	/**	 * Constructor	 *	 * @param   array  $options  options	 *	 * @since   11.1	 */	public function __construct($options)	{		$conf = JFactory::getConfig();		$this->_options = array(			'cachebase' => $conf->get('cache_path', JPATH_CACHE),			'lifetime' => (int) $conf->get('cachetime'),			'language' => $conf->get('language', 'en-GB'),			'storage' => $conf->get('cache_handler', ''),			'defaultgroup' => 'default',			'locking' => true,			'locktime' => 15,			'checkTime' => true,			'caching' => ($conf->get('caching') >= 1) ? true : false);		// Overwrite default options with given options		foreach ($options as $option => $value)		{			if (isset($options[$option]) && $options[$option] !== '')			{				$this->_options[$option] = $options[$option];			}		}		if (empty($this->_options['storage']))		{			$this->_options['caching'] = false;		}	}	/**	 * Returns a reference to a cache adapter object, always creating it	 *	 * @param   string  $type     The cache object type to instantiate	 * @param   array   $options  The array of options	 *	 * @return  JCache  A JCache object	 *	 * @since   11.1	 */	public static function getInstance($type = 'output', $options = array())	{		return JCacheController::getInstance($type, $options);	}	/**	 * Get the storage handlers	 *	 * @return  array    An array of available storage handlers	 *	 * @since   11.1	 */	public static function getStores()	{		$handlers = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/storage');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile()				|| substr($fileName, strrpos($fileName, '.') + 1) != 'php'				|| $fileName == 'helper.php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JCacheStorage' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$handlers[] = str_ireplace('.php', '', $fileName);			}		}		return $handlers;	}	/**	 * Set caching enabled state	 *	 * @param   boolean  $enabled  True to enable caching	 *	 * @return  void	 *	 * @since   11.1	 */	public function setCaching($enabled)	{		$this->_options['caching'] = $enabled;	}	/**	 * Get caching state	 *	 * @return  boolean  Caching state	 *	 * @since   11.1	 */	public function getCaching()	{		return $this->_options['caching'];	}	/**	 * Set cache lifetime	 *	 * @param   integer  $lt  Cache lifetime	 *	 * @return  void	 *	 * @since   11.1	 */	public function setLifeTime($lt)	{		$this->_options['lifetime'] = $lt;	}	/**	 * Get cached data by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  mixed  boolean  False on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group = null)	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			return $handler->get($id, $group, $this->_options['checkTime']);		}		return false;	}	/**	 * Get a list of all cached data	 *	 * @return  mixed    Boolean false on failure or an object with a list of cache groups and data	 *	 * @since   11.1	 */	public function getAll()	{		// Get the storage		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			return $handler->getAll();		}		return false;	}	/**	 * Store the cached data by id and group	 *	 * @param   mixed   $data   The data to store	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True if cache stored	 *	 * @since   11.1	 */	public function store($data, $id, $group = null)	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage and store the cached data		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			$handler->_lifetime = $this->_options['lifetime'];			return $handler->store($id, $group, $data);		}		return false;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group = null)	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage		$handler = $this->_getStorage();		if (!($handler instanceof Exception))		{			return $handler->remove($id, $group);		}		return false;	}	/**	 * Clean cache for a group given a mode.	 *	 * group mode       : cleans all cache in the group	 * notgroup mode    : cleans all cache not in the group	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group = null, $mode = 'group')	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage handler		$handler = $this->_getStorage();		if (!($handler instanceof Exception))		{			return $handler->clean($group, $mode);		}		return false;	}	/**	 * Garbage collect expired cache data	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		// Get the storage handler		$handler = $this->_getStorage();		if (!($handler instanceof Exception))		{			return $handler->gc();		}		return false;	}	/**	 * Set lock flag on cached item	 *	 * @param   string  $id        The cache data id	 * @param   string  $group     The cache data group	 * @param   string  $locktime  The default locktime for locking the cache.	 *	 * @return  object  Properties are lock and locklooped	 *	 * @since   11.1	 */	public function lock($id, $group = null, $locktime = null)	{		$returning = new stdClass;		$returning->locklooped = false;		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the default locktime		$locktime = ($locktime) ? $locktime : $this->_options['locktime'];		// Allow storage handlers to perform locking on their own		// NOTE drivers with lock need also unlock or unlocking will fail because of false $id		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['locking'] == true && $this->_options['caching'] == true)		{			$locked = $handler->lock($id, $group, $locktime);			if ($locked !== false)			{				return $locked;			}		}		// Fallback		$curentlifetime = $this->_options['lifetime'];		// Set lifetime to locktime for storing in children		$this->_options['lifetime'] = $locktime;		$looptime = $locktime * 10;		$id2 = $id . '_lock';		if ($this->_options['locking'] == true && $this->_options['caching'] == true)		{			$data_lock = $this->get($id2, $group);		}		else		{			$data_lock = false;			$returning->locked = false;		}		if ($data_lock !== false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock !== false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = $this->get($id2, $group);				$lock_counter++;			}		}		if ($this->_options['locking'] == true && $this->_options['caching'] == true)		{			$returning->locked = $this->store(1, $id2, $group);		}		// Revert lifetime to previous one		$this->_options['lifetime'] = $curentlifetime;		return $returning;	}	/**	 * Unset lock flag on cached item	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		$unlock = false;		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Allow handlers to perform unlocking on their own		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			$unlocked = $handler->unlock($id, $group);			if ($unlocked !== false)			{				return $unlocked;			}		}		// Fallback		if ($this->_options['caching'])		{			$unlock = $this->remove($id . '_lock', $group);		}		return $unlock;	}	/**	 * Get the cache storage handler	 *	 * @return  JCacheStorage   A JCacheStorage object	 *	 * @since   11.1	 */	public function &_getStorage()	{		$hash = md5(serialize($this->_options));		if (isset(self::$_handler[$hash]))		{			return self::$_handler[$hash];		}		self::$_handler[$hash] = JCacheStorage::getInstance($this->_options['storage'], $this->_options);		return self::$_handler[$hash];	}	/**	 * Perform workarounds on retrieved cached data	 *	 * @param   string  $data     Cached data	 * @param   array   $options  Array of options	 *	 * @return  string  Body of cached data	 *	 * @since   11.1	 */	public static function getWorkarounds($data, $options = array())	{		$app = JFactory::getApplication();		$document = JFactory::getDocument();		$body = null;		// Get the document head out of the cache.		if (isset($options['mergehead']) && $options['mergehead'] == 1 && isset($data['head']) && !empty($data['head']))		{			$document->mergeHeadData($data['head']);		}		elseif (isset($data['head']) && method_exists($document, 'setHeadData'))		{			$document->setHeadData($data['head']);		}		// If the pathway buffer is set in the cache data, get it.		if (isset($data['pathway']) && is_array($data['pathway']))		{			// Push the pathway data into the pathway object.			$pathway = $app->getPathWay();			$pathway->setPathway($data['pathway']);		}		// @todo check if the following is needed, seems like it should be in page cache		// If a module buffer is set in the cache data, get it.		if (isset($data['module']) && is_array($data['module']))		{			// Iterate through the module positions and push them into the document buffer.			foreach ($data['module'] as $name => $contents)			{				$document->setBuffer($contents, 'module', $name);			}		}		if (isset($data['body']))		{			// The following code searches for a token in the cached page and replaces it with the			// proper token.			$token = JSession::getFormToken();			$search = '#<input type="hidden" name="[0-9a-f]{32}" value="1" />#';			$replacement = '<input type="hidden" name="' . $token . '" value="1" />';			$data['body'] = preg_replace($search, $replacement, $data['body']);			$body = $data['body'];		}		// Get the document body out of the cache.		return $body;	}	/**	 * Create workarounded data to be cached	 *	 * @param   string  $data     Cached data	 * @param   array   $options  Array of options	 *	 * @return  string  Data to be cached	 *	 * @since   11.1	 */	public static function setWorkarounds($data, $options = array())	{		$loptions = array();		$loptions['nopathway'] = 0;		$loptions['nohead'] = 0;		$loptions['nomodules'] = 0;		$loptions['modulemode'] = 0;		if (isset($options['nopathway']))		{			$loptions['nopathway'] = $options['nopathway'];		}		if (isset($options['nohead']))		{			$loptions['nohead'] = $options['nohead'];		}		if (isset($options['nomodules']))		{			$loptions['nomodules'] = $options['nomodules'];		}		if (isset($options['modulemode']))		{			$loptions['modulemode'] = $options['modulemode'];		}		$app = JFactory::getApplication();		$document = JFactory::getDocument();		// Get the modules buffer before component execution.		$buffer1 = $document->getBuffer();		if (!is_array($buffer1))		{			$buffer1 = array();		}		// Make sure the module buffer is an array.		if (!isset($buffer1['module']) || !is_array($buffer1['module']))		{			$buffer1['module'] = array();		}		// View body data		$cached['body'] = $data;		// Document head data		if ($loptions['nohead'] != 1 && method_exists($document, 'getHeadData'))		{			if ($loptions['modulemode'] == 1)			{				$headnow = $document->getHeadData();				$unset = array('title', 'description', 'link', 'links', 'metaTags');				foreach ($unset as $un)				{					unset($headnow[$un]);					unset($options['headerbefore'][$un]);				}				$cached['head'] = array();				// Only store what this module has added				foreach ($headnow as $now => $value)				{					if (isset($options['headerbefore'][$now]))					{						// We have to serialize the content of the arrays because the may contain other arrays which is a notice in PHP 5.4 and newer						$nowvalue = array_map('serialize', $headnow[$now]);						$beforevalue = array_map('serialize', $options['headerbefore'][$now]);						$newvalue = array_diff_assoc($nowvalue, $beforevalue);						$newvalue = array_map('unserialize', $newvalue);					}					else					{						$newvalue = $headnow[$now];					}					if (!empty($newvalue))					{						$cached['head'][$now] = $newvalue;					}				}			}			else			{				$cached['head'] = $document->getHeadData();			}		}		// Pathway data		if ($app->isSite() && $loptions['nopathway'] != 1)		{			$pathway = $app->getPathWay();			$cached['pathway'] = isset($data['pathway']) ? $data['pathway'] : $pathway->getPathway();		}		if ($loptions['nomodules'] != 1)		{			// @todo Check if the following is needed, seems like it should be in page cache			// Get the module buffer after component execution.			$buffer2 = $document->getBuffer();			if (!is_array($buffer2))			{				$buffer2 = array();			}			// Make sure the module buffer is an array.			if (!isset($buffer2['module']) || !is_array($buffer2['module']))			{				$buffer2['module'] = array();			}			// Compare the second module buffer against the first buffer.			$cached['module'] = array_diff_assoc($buffer2['module'], $buffer1['module']);		}		return $cached;	}	/**	 * Create safe id for cached data from url parameters set by plugins and framework	 *	 * @return  string   md5 encoded cacheid	 *	 * @since   11.1	 */	public static function makeId()	{		$app = JFactory::getApplication();		// Get url parameters set by plugins		if (!empty($app->registeredurlparams))		{			$registeredurlparams = $app->registeredurlparams;		}		// Platform defaults		$registeredurlparams->format = 'WORD';		$registeredurlparams->option = 'WORD';		$registeredurlparams->view = 'WORD';		$registeredurlparams->layout = 'WORD';		$registeredurlparams->tpl = 'CMD';		$registeredurlparams->id = 'INT';		$safeuriaddon = new stdClass;		foreach ($registeredurlparams as $key => $value)		{			$safeuriaddon->$key = $app->input->get($key, null, $value);		}		return md5(serialize($safeuriaddon));	}	/**	 * Add a directory where JCache should search for handlers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array   An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!empty($path) && !in_array($path, $paths))		{			jimport('joomla.filesystem.path');			array_unshift($paths, JPath::clean($path));		}		return $paths;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.admin')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Checkin');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Strings Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesModelStrings extends JModelLegacy{	/**	 * Method for refreshing the cache in the database with the known language strings	 *	 * @return  boolean  True on success, Exception object otherwise	 *	 * @since		2.5	 */	public function refresh()	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$app = JFactory::getApplication();		$app->setUserState('com_languages.overrides.cachedtime', null);		// Empty the database cache first		try		{			$this->_db->setQuery('TRUNCATE TABLE '.$this->_db->quoteName('#__overrider'));			$this->_db->execute();		}		catch (RuntimeException $e)		{			return $e;		}		// Create the insert query		$query = $this->_db->getQuery(true)					->insert($this->_db->quoteName('#__overrider'))					->columns('constant, string, file');		// Initialize some variables		$client		= $app->getUserState('com_languages.overrides.filter.client', 'site') ? 'administrator' : 'site';		$language	= $app->getUserState('com_languages.overrides.filter.language', 'en-GB');		$base = constant('JPATH_'.strtoupper($client));		$path = $base . '/language/' . $language;		$files = array();		// Parse common language directory		jimport('joomla.filesystem.folder');		if (is_dir($path))		{			$files = JFolder::files($path, $language.'.*ini$', false, true);		}		// Parse language directories of components		$files = array_merge($files, JFolder::files($base.'/components', $language.'.*ini$', 3, true));		// Parse language directories of modules		$files = array_merge($files, JFolder::files($base.'/modules', $language.'.*ini$', 3, true));		// Parse language directories of templates		$files = array_merge($files, JFolder::files($base.'/templates', $language.'.*ini$', 3, true));		// Parse language directories of plugins		$files = array_merge($files, JFolder::files(JPATH_PLUGINS, $language.'.*ini$', 3, true));		// Parse all found ini files and add the strings to the database cache		foreach ($files as $file)		{			$strings = LanguagesHelper::parseFile($file);			if ($strings && count($strings))			{				$query->clear('values');				foreach ($strings as $key => $string)				{					$query->values($this->_db->quote($key).','.$this->_db->quote($string).','.$this->_db->quote(JPath::clean($file)));				}				try				{					$this->_db->setQuery($query);					$this->_db->execute();				}				catch (RuntimeException $e)				{					return $e;				}			}		}		// Update the cached time		$app->setUserState('com_languages.overrides.cachedtime.'.$client.'.'.$language, time());		return true;	}	/**	 * Method for searching language strings	 *	 * @return  array  Array of resuls on success, Exception object otherwise	 *	 * @since		2.5	 */	public function search()	{		$results = array();		$input   = JFactory::getApplication()->input;		$limitstart = $input->getInt('more');		try		{			$searchstring = $this->_db->quote('%' . $input->getString('searchstring') . '%');			// Create the search query			$query = $this->_db->getQuery(true)						->select('constant, string, file')						->from($this->_db->quoteName('#__overrider'));			if ($input->get('searchtype') == 'constant')			{				$query->where('constant LIKE '.$searchstring);			}			else			{				$query->where('string LIKE '.$searchstring);			}			// Consider the limitstart according to the 'more' parameter and load the results			$this->_db->setQuery($query, $limitstart, 10);			$results['results'] = $this->_db->loadObjectList();			// Check whether there are more results than already loaded			$query->clear('select')						->select('COUNT(id)');			$this->_db->setQuery($query);			if ($this->_db->loadResult() > $limitstart + 10)			{				// If this is set a 'More Results' link will be displayed in the view				$results['more'] = $limitstart + 10;			}		}		catch (RuntimeException $e)		{			return $e;		}		return $results;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewTracks extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		BannersHelper::addSubmenu('tracks');		$this->addToolbar();		require_once JPATH_COMPONENT .'/models/fields/bannerclient.php';		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/banners.php';		$canDo	= BannersHelper::getActions($this->state->get('filter.category_id'));		JToolbarHelper::title(JText::_('COM_BANNERS_MANAGER_TRACKS'), 'banners-tracks.png');		$bar = JToolBar::getInstance('toolbar');			$bar->appendButton('Slider', 'export', 'JTOOLBAR_EXPORT', 'index.php?option=com_banners&amp;view=download&amp;tmpl=component', 600, 300);		$document = JFactory::getDocument();		$app = JFactory::getApplication();		if ($canDo->get('core.delete'))		{			$bar->appendButton('Confirm', 'COM_BANNERS_DELETE_MSG', 'delete', 'COM_BANNERS_TRACKS_DELETE', 'tracks.delete', false);			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_banners');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_TRACKS');		JHtmlSidebar::setAction('index.php?option=com_banners&view=tracks');		JHtmlSidebar::addFilter(			JText::_('COM_BANNERS_SELECT_CLIENT'),			'filter_client_id',			JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('COM_BANNERS_SELECT_TYPE'),			'filter_type',			JHtml::_('select.options', array(JHtml::_('select.option', 1, JText::_('COM_BANNERS_IMPRESSION')), JHtml::_('select.option', 2, JText::_('COM_BANNERS_CLICK'))), 'value', 'text', $this->state->get('filter.type'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'b.name' => JText::_('COM_BANNERS_HEADING_NAME'),			'cl.name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'track_type' => JText::_('COM_BANNERS_HEADING_TYPE'),			'count' => JText::_('COM_BANNERS_HEADING_COUNT'),			'track_date' => JText::_('JDATE')		);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_wrapper * @since       1.5 */class WrapperViewWrapper extends JViewLegacy{	/**	 * @since  1.5	 */	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$document	= JFactory::getDocument();		$menus	= $app->getMenu();		$menu	= $menus->getActive();		$params = $app->getParams();		// because the application sets a default page title, we need to get it		// right from the menu item itself		$title = $params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($params->get('menu-meta_description'))		{			$this->document->setDescription($params->get('menu-meta_description'));		}		if ($params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $params->get('menu-meta_keywords'));		}		if ($params->get('robots'))		{			$this->document->setMetadata('robots', $params->get('robots'));		}		$wrapper = new stdClass;		// auto height control		if ($params->def('height_auto'))		{			$wrapper->load = 'onload="iFrameHeight()"';		}		else		{			$wrapper->load = '';		}		$url = $params->def('url', '');		if ($params->def('add_scheme', 1))		{			// adds 'http://' if none is set			if (substr($url, 0, 1) == '/')			{				// relative url in component. use server http_host.				$wrapper->url = 'http://'. $_SERVER['HTTP_HOST'] . $url;			}			elseif (!strstr($url, 'http') && !strstr($url, 'https'))			{				$wrapper->url = 'http://'. $url;			}			else {				$wrapper->url = $url;			}		}		else		{			$wrapper->url = $url;		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->params = &$params;		$this->wrapper = &$wrapper;		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_doc, &$params));?>		<li class="imgOutline thumbnail height-80 width-80 center">			<?php if ($user->authorise('core.delete', 'com_media')):?>				<a class="close delete-item" target="_top" href="index.php?option=com_media&amp;task=file.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_doc->name; ?>" rel="<?php echo $this->_tmp_doc->name; ?>" title="<?php echo JText::_('JACTION_DELETE');?>">x</a>				<input class="pull-left" type="checkbox" name="rm[]" value="<?php echo $this->_tmp_doc->name; ?>" />				<div class="clearfix"></div>			<?php endif;?>			<div class="height-50">				<a style="display: block; width: 100%; height: 100%" title="<?php echo $this->_tmp_doc->name; ?>" >					<?php echo JHtml::_('image', $this->_tmp_doc->icon_32, $this->_tmp_doc->name, null, true, true) ? JHtml::_('image', $this->_tmp_doc->icon_32, $this->_tmp_doc->title, null, true) : JHtml::_('image', 'media/con_info.png', $this->_tmp_doc->name, null, true); ?></a>			</div>			<div class="small" title="<?php echo $this->_tmp_doc->name; ?>" >				<?php echo JHtml::_('string.truncate', $this->_tmp_doc->name, 10, false); ?>			</div>		</li><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_doc, &$params));?>
<?php/** * @package     Joomla.Legacy * @subpackage  Categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCategories Class. * * @package     Joomla.Legacy * @subpackage  Categories * @since       11.1 */class JCategories{	/**	 * Array to hold the object instances	 *	 * @var    array	 * @since  11.1	 */	public static $instances = array();	/**	 * Array of category nodes	 *	 * @var    mixed	 * @since  11.1	 */	protected $_nodes;	/**	 * Array of checked categories -- used to save values when _nodes are null	 *	 * @var    array	 * @since  11.1	 */	protected $_checkedCategories;	/**	 * Name of the extension the categories belong to	 *	 * @var    string	 * @since  11.1	 */	protected $_extension = null;	/**	 * Name of the linked content table to get category content count	 *	 * @var    string	 * @since  11.1	 */	protected $_table = null;	/**	 * Name of the category field	 *	 * @var    string	 * @since  11.1	 */	protected $_field = null;	/**	 * Name of the key field	 *	 * @var    string	 * @since  11.1	 */	protected $_key = null;	/**	 * Name of the items state field	 *	 * @var    string	 * @since  11.1	 */	protected $_statefield = null;	/**	 * Array of options	 *	 * @var    array	 * @since  11.1	 */	protected $_options = null;	/**	 * Class constructor	 *	 * @param   array  $options  Array of options	 *	 * @since   11.1	 */	public function __construct($options)	{		$this->_extension = $options['extension'];		$this->_table = $options['table'];		$this->_field = (isset($options['field']) && $options['field']) ? $options['field'] : 'catid';		$this->_key = (isset($options['key']) && $options['key']) ? $options['key'] : 'id';		$this->_statefield = (isset($options['statefield'])) ? $options['statefield'] : 'state';		$options['access'] = (isset($options['access'])) ? $options['access'] : 'true';		$options['published'] = (isset($options['published'])) ? $options['published'] : 1;		$this->_options = $options;		return true;	}	/**	 * Returns a reference to a JCategories object	 *	 * @param   string  $extension  Name of the categories extension	 * @param   array   $options    An array of options	 *	 * @return  JCategories         JCategories object	 *	 * @since   11.1	 */	public static function getInstance($extension, $options = array())	{		$hash = md5($extension . serialize($options));		if (isset(self::$instances[$hash]))		{			return self::$instances[$hash];		}		$parts = explode('.', $extension);		$component = 'com_' . strtolower($parts[0]);		$section = count($parts) > 1 ? $parts[1] : '';		$classname = ucfirst(substr($component, 4)) . ucfirst($section) . 'Categories';		if (!class_exists($classname))		{			$path = JPATH_SITE . '/components/' . $component . '/helpers/category.php';			if (is_file($path))			{				include_once $path;			}			else			{				return false;			}		}		self::$instances[$hash] = new $classname($options);		return self::$instances[$hash];	}	/**	 * Loads a specific category and all its children in a JCategoryNode object	 *	 * @param   mixed    $id         an optional id integer or equal to 'root'	 * @param   boolean  $forceload  True to force  the _load method to execute	 *	 * @return  mixed    JCategoryNode object or null if $id is not valid	 *	 * @since   11.1	 */	public function get($id = 'root', $forceload = false)	{		if ($id !== 'root')		{			$id = (int) $id;			if ($id == 0)			{				$id = 'root';			}		}		// If this $id has not been processed yet, execute the _load method		if ((!isset($this->_nodes[$id]) && !isset($this->_checkedCategories[$id])) || $forceload)		{			$this->_load($id);		}		// If we already have a value in _nodes for this $id, then use it.		if (isset($this->_nodes[$id]))		{			return $this->_nodes[$id];		}		// If we processed this $id already and it was not valid, then return null.		elseif (isset($this->_checkedCategories[$id]))		{			return null;		}		return false;	}	/**	 * Load method	 *	 * @param   integer  $id  Id of category to load	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _load($id)	{		$db = JFactory::getDbo();		$app = JFactory::getApplication();		$user = JFactory::getUser();		$extension = $this->_extension;		// Record that has this $id has been checked		$this->_checkedCategories[$id] = true;		$query = $db->getQuery(true);		// Right join with c for category		$query->select('c.id, c.asset_id, c.access, c.alias, c.checked_out, c.checked_out_time,			c.created_time, c.created_user_id, c.description, c.extension, c.hits, c.language, c.level,			c.lft, c.metadata, c.metadesc, c.metakey, c.modified_time, c.note, c.params, c.parent_id,			c.path, c.published, c.rgt, c.title, c.modified_user_id, c.version');		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('c.alias', '!=', '0');		$case_when .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $c_id . ' END as slug';		$query->select($case_when)			->from('#__categories as c')			->where('(c.extension=' . $db->quote($extension) . ' OR c.extension=' . $db->quote('system') . ')');		if ($this->_options['access'])		{			$query->where('c.access IN (' . implode(',', $user->getAuthorisedViewLevels()) . ')');		}		if ($this->_options['published'] == 1)		{			$query->where('c.published = 1');		}		$query->order('c.lft');		// Note: s for selected id		if ($id != 'root')		{			// Get the selected category			$query->join('LEFT', '#__categories AS s ON (s.lft <= c.lft AND s.rgt >= c.rgt) OR (s.lft > c.lft AND s.rgt < c.rgt)')				->where('s.id=' . (int) $id);		}		$subQuery = ' (SELECT cat.id as id FROM #__categories AS cat JOIN #__categories AS parent ' .			'ON cat.lft BETWEEN parent.lft AND parent.rgt WHERE parent.extension = ' . $db->quote($extension) .			' AND parent.published != 1 GROUP BY cat.id) ';		$query->join('LEFT', $subQuery . 'AS badcats ON badcats.id = c.id')			->where('badcats.id is null');		// Note: i for item		if (isset($this->_options['countItems']) && $this->_options['countItems'] == 1)		{			if ($this->_options['published'] == 1)			{				$query->join(					'LEFT',					$db->quoteName($this->_table) . ' AS i ON i.' . $db->quoteName($this->_field) . ' = c.id AND i.' . $this->_statefield . ' = 1'				);			}			else			{				$query->join('LEFT', $db->quoteName($this->_table) . ' AS i ON i.' . $db->quoteName($this->_field) . ' = c.id');			}			$query->select('COUNT(i.' . $db->quoteName($this->_key) . ') AS numitems');		}		// Group by		$query->group(			'c.id, c.asset_id, c.access, c.alias, c.checked_out, c.checked_out_time,			 c.created_time, c.created_user_id, c.description, c.extension, c.hits, c.language, c.level,			 c.lft, c.metadata, c.metadesc, c.metakey, c.modified_time, c.note, c.params, c.parent_id,			 c.path, c.published, c.rgt, c.title, c.modified_user_id, c.version'		);		// Get the results		$db->setQuery($query);		$results = $db->loadObjectList('id');		$childrenLoaded = false;		if (count($results))		{			// Foreach categories			foreach ($results as $result)			{				// Deal with root category				if ($result->id == 1)				{					$result->id = 'root';				}				// Deal with parent_id				if ($result->parent_id == 1)				{					$result->parent_id = 'root';				}				// Create the node				if (!isset($this->_nodes[$result->id]))				{					// Create the JCategoryNode and add to _nodes					$this->_nodes[$result->id] = new JCategoryNode($result, $this);					// If this is not root and if the current node's parent is in the list or the current node parent is 0					if ($result->id != 'root' && (isset($this->_nodes[$result->parent_id]) || $result->parent_id == 1))					{						// Compute relationship between node and its parent - set the parent in the _nodes field						$this->_nodes[$result->id]->setParent($this->_nodes[$result->parent_id]);					}					// If the node's parent id is not in the _nodes list and the node is not root (doesn't have parent_id == 0),					// then remove the node from the list					if (!(isset($this->_nodes[$result->parent_id]) || $result->parent_id == 0))					{						unset($this->_nodes[$result->id]);						continue;					}					if ($result->id == $id || $childrenLoaded)					{						$this->_nodes[$result->id]->setAllLoaded();						$childrenLoaded = true;					}				}				elseif ($result->id == $id || $childrenLoaded)				{					// Create the JCategoryNode					$this->_nodes[$result->id] = new JCategoryNode($result, $this);					if ($result->id != 'root' && (isset($this->_nodes[$result->parent_id]) || $result->parent_id))					{						// Compute relationship between node and its parent						$this->_nodes[$result->id]->setParent($this->_nodes[$result->parent_id]);					}					if (!isset($this->_nodes[$result->parent_id]))					{						unset($this->_nodes[$result->id]);						continue;					}					if ($result->id == $id || $childrenLoaded)					{						$this->_nodes[$result->id]->setAllLoaded();						$childrenLoaded = true;					}				}			}		}		else		{			$this->_nodes[$id] = null;		}	}}/** * Helper class to load Categorytree * * @package     Joomla.Legacy * @subpackage  Categories * @since       11.1 */class JCategoryNode extends JObject{	/**	 * Primary key	 *	 * @var    integer	 * @since  11.1	 */	public $id = null;	/**	 * The id of the category in the asset table	 *	 * @var    integer	 * @since  11.1	 */	public $asset_id = null;	/**	 * The id of the parent of category in the asset table, 0 for category root	 *	 * @var    integer	 * @since  11.1	 */	public $parent_id = null;	/**	 * The lft value for this category in the category tree	 *	 * @var    integer	 * @since  11.1	 */	public $lft = null;	/**	 * The rgt value for this category in the category tree	 *	 * @var    integer	 * @since  11.1	 */	public $rgt = null;	/**	 * The depth of this category's position in the category tree	 *	 * @var    integer	 * @since  11.1	 */	public $level = null;	/**	 * The extension this category is associated with	 *	 * @var    integer	 * @since  11.1	 */	public $extension = null;	/**	 * The menu title for the category (a short name)	 *	 * @var    string	 * @since  11.1	 */	public $title = null;	/**	 * The the alias for the category	 *	 * @var    string	 * @since  11.1	 */	public $alias = null;	/**	 * Description of the category.	 *	 * @var    string	 * @since  11.1	 */	public $description = null;	/**	 * The publication status of the category	 *	 * @var    boolean	 * @since  11.1	 */	public $published = null;	/**	 * Whether the category is or is not checked out	 *	 * @var    boolean	 * @since  11.1	 */	public $checked_out = 0;	/**	 * The time at which the category was checked out	 *	 * @var    string	 * @since  11.1	 */	public $checked_out_time = 0;	/**	 * Access level for the category	 *	 * @var    integer	 * @since  11.1	 */	public $access = null;	/**	 * JSON string of parameters	 *	 * @var    string	 * @since  11.1	 */	public $params = null;	/**	 * Metadata description	 *	 * @var    string	 * @since  11.1	 */	public $metadesc = null;	/**	 * Key words for meta data	 *	 * @var    string	 * @since  11.1	 */	public $metakey = null;	/**	 * JSON string of other meta data	 *	 * @var    string	 * @since  11.1	 */	public $metadata = null;	/**	 * The ID of the user who created the category	 *	 * @var    integer	 * @since  11.1	 */	public $created_user_id = null;	/**	 * The time at which the category was created	 *	 * @var    string	 * @since  11.1	 */	public $created_time = null;	/**	 * The ID of the user who last modified the category	 *	 * @var    integer	 * @since  11.1	 */	public $modified_user_id = null;	/**	 * The time at which the category was modified	 *	 * @var    string	 * @since  11.1	 */	public $modified_time = null;	/**	 * Nmber of times the category has been viewed	 *	 * @var    integer	 * @since  11.1	 */	public $hits = null;	/**	 * The language for the category in xx-XX format	 *	 * @var    string	 * @since  11.1	 */	public $language = null;	/**	 * Number of items in this category or descendants of this category	 *	 * @var    integer	 * @since  11.1	 */	public $numitems = null;	/**	 * Number of children items	 *	 * @var    integer	 * @since  11.1	 */	public $childrennumitems = null;	/**	 * Slug fo the category (used in URL)	 *	 * @var    string	 * @since  11.1	 */	public $slug = null;	/**	 * Array of  assets	 *	 * @var    array	 * @since  11.1	 */	public $assets = null;	/**	 * Parent Category object	 *	 * @var    object	 * @since  11.1	 */	protected $_parent = null;	/**	 * @var Array of Children	 * @since  11.1	 */	protected $_children = array();	/**	 * Path from root to this category	 *	 * @var    array	 * @since  11.1	 */	protected $_path = array();	/**	 * Category left of this one	 *	 * @var    integer	 * @since  11.1	 */	protected $_leftSibling = null;	/**	 * Category right of this one	 *	 * @var	 * @since  11.1	 */	protected $_rightSibling = null;	/**	 * true if all children have been loaded	 *	 * @var boolean	 * @since  11.1	 */	protected $_allChildrenloaded = false;	/**	 * Constructor of this tree	 *	 * @var	 * @since  11.1	 */	protected $_constructor = null;	/**	 * Class constructor	 *	 * @param   array          $category     The category data.	 * @param   JCategoryNode  $constructor  The tree constructor.	 *	 * @since   11.1	 */	public function __construct($category = null, $constructor = null)	{		if ($category)		{			$this->setProperties($category);			if ($constructor)			{				$this->_constructor = $constructor;			}			return true;		}		return false;	}	/**	 * Set the parent of this category	 *	 * If the category already has a parent, the link is unset	 *	 * @param   mixed  $parent  JCategoryNode for the parent to be set or null	 *	 * @return  void	 *	 * @since   11.1	 */	public function setParent($parent)	{		if ($parent instanceof JCategoryNode || is_null($parent))		{			if (!is_null($this->_parent))			{				$key = array_search($this, $this->_parent->_children);				unset($this->_parent->_children[$key]);			}			if (!is_null($parent))			{				$parent->_children[] = & $this;			}			$this->_parent = $parent;			if ($this->id != 'root')			{				if ($this->parent_id != 1)				{					$this->_path = $parent->getPath();				}				$this->_path[] = $this->id . ':' . $this->alias;			}			if (count($parent->_children) > 1)			{				end($parent->_children);				$this->_leftSibling = prev($parent->_children);				$this->_leftSibling->_rightsibling = & $this;			}		}	}	/**	 * Add child to this node	 *	 * If the child already has a parent, the link is unset	 *	 * @param   JCategoryNode  $child  The child to be added.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addChild($child)	{		if ($child instanceof JCategoryNode)		{			$child->setParent($this);		}	}	/**	 * Remove a specific child	 *	 * @param   integer  $id  ID of a category	 *	 * @return  void	 *	 * @since   11.1	 */	public function removeChild($id)	{		$key = array_search($this, $this->_parent->_children);		unset($this->_parent->_children[$key]);	}	/**	 * Get the children of this node	 *	 * @param   boolean  $recursive  False by default	 *	 * @return  array  The children	 *	 * @since   11.1	 */	public function &getChildren($recursive = false)	{		if (!$this->_allChildrenloaded)		{			$temp = $this->_constructor->get($this->id, true);			if ($temp)			{				$this->_children = $temp->getChildren();				$this->_leftSibling = $temp->getSibling(false);				$this->_rightSibling = $temp->getSibling(true);				$this->setAllLoaded();			}		}		if ($recursive)		{			$items = array();			foreach ($this->_children as $child)			{				$items[] = $child;				$items = array_merge($items, $child->getChildren(true));			}			return $items;		}		return $this->_children;	}	/**	 * Get the parent of this node	 *	 * @return  mixed  JCategoryNode or null	 *	 * @since   11.1	 */	public function getParent()	{		return $this->_parent;	}	/**	 * Test if this node has children	 *	 * @return  boolean  True if there is a child	 *	 * @since   11.1	 */	public function hasChildren()	{		return count($this->_children);	}	/**	 * Test if this node has a parent	 *	 * @return  boolean    True if there is a parent	 *	 * @since   11.1	 */	public function hasParent()	{		return $this->getParent() != null;	}	/**	 * Function to set the left or right sibling of a category	 *	 * @param   JCategoryNode  $sibling  JCategoryNode object for the sibling	 * @param   boolean        $right    If set to false, the sibling is the left one	 *	 * @return  void	 *	 * @since   11.1	 */	public function setSibling($sibling, $right = true)	{		if ($right)		{			$this->_rightSibling = $sibling;		}		else		{			$this->_leftSibling = $sibling;		}	}	/**	 * Returns the right or left sibling of a category	 *	 * @param   boolean  $right  If set to false, returns the left sibling	 *	 * @return  mixed  JCategoryNode object with the sibling information or	 *                 NULL if there is no sibling on that side.	 *	 * @since          11.1	 */	public function getSibling($right = true)	{		if (!$this->_allChildrenloaded)		{			$temp = $this->_constructor->get($this->id, true);			$this->_children = $temp->getChildren();			$this->_leftSibling = $temp->getSibling(false);			$this->_rightSibling = $temp->getSibling(true);			$this->setAllLoaded();		}		if ($right)		{			return $this->_rightSibling;		}		else		{			return $this->_leftSibling;		}	}	/**	 * Returns the category parameters	 *	 * @return  JRegistry	 *	 * @since   11.1	 */	public function getParams()	{		if (!($this->params instanceof JRegistry))		{			$temp = new JRegistry;			$temp->loadString($this->params);			$this->params = $temp;		}		return $this->params;	}	/**	 * Returns the category metadata	 *	 * @return  JRegistry  A JRegistry object containing the metadata	 *	 * @since   11.1	 */	public function getMetadata()	{		if (!($this->metadata instanceof JRegistry))		{			$temp = new JRegistry;			$temp->loadString($this->metadata);			$this->metadata = $temp;		}		return $this->metadata;	}	/**	 * Returns the category path to the root category	 *	 * @return  array	 *	 * @since   11.1	 */	public function getPath()	{		return $this->_path;	}	/**	 * Returns the user that created the category	 *	 * @param   boolean  $modified_user  Returns the modified_user when set to true	 *	 * @return  JUser  A JUser object containing a userid	 *	 * @since   11.1	 */	public function getAuthor($modified_user = false)	{		if ($modified_user)		{			return JFactory::getUser($this->modified_user_id);		}		return JFactory::getUser($this->created_user_id);	}	/**	 * Set to load all children	 *	 * @return  void	 *	 * @since 11.1	 */	public function setAllLoaded()	{		$this->_allChildrenloaded = true;		foreach ($this->_children as $child)		{			$child->setAllLoaded();		}	}	/**	 * Returns the number of items.	 *	 * @param   boolean  $recursive  If false number of children, if true number of descendants	 *	 * @return  integer  Number of children or descendants	 *	 * @since 11.1	 */	public function getNumItems($recursive = false)	{		if ($recursive)		{			$count = $this->numitems;			foreach ($this->getChildren() as $child)			{				$count = $count + $child->getNumItems(true);			}			return $count;		}		return $this->numitems;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Articles list controller class. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentControllerArticles extends JControllerAdmin{	/**	 * Constructor.	 *	 * @param   array  $config	An optional associative array of configuration settings.	 * @return  ContentControllerArticles	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		// Articles default form can come from the articles or featured view.		// Adjust the redirect view on the value of 'view' in the request.		if ($this->input->get('view') == 'featured')		{			$this->view_list = 'featured';		}		$this->registerTask('unfeatured',	'featured');	}	/**	 * Method to toggle the featured setting of a list of articles.	 *	 * @return  void	 * @since   1.6	 */	public function featured()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user   = JFactory::getUser();		$ids    = $this->input->get('cid', array(), 'array');		$values = array('featured' => 1, 'unfeatured' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		// Access checks.		foreach ($ids as $i => $id)		{			if (!$user->authorise('core.edit.state', 'com_content.article.'.(int) $id))			{				// Prune items that you can't change.				unset($ids[$i]);				JError::raiseNotice(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			}		}		if (empty($ids))		{			JError::raiseWarning(500, JText::_('JERROR_NO_ITEMS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Publish the items.			if (!$model->featured($ids, $value))			{				JError::raiseWarning(500, $model->getError());			}		}		$this->setRedirect('index.php?option=com_content&view=articles');	}	/**	 * Proxy for getModel.	 *	 * @param   string	$name	The name of the model.	 * @param   string	$prefix	The prefix for the PHP class name.	 *	 * @return  JModel	 * @since   1.6	 */	public function getModel($name = 'Article', $prefix = 'ContentModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}	/**	 * Function that allows child controller access to model data	 * after the item has been deleted.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   integer       $ids    The array of ids for items being deleted.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function postDeleteHook(JModelLegacy $model, $ids = null)	{	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a select list of integers with specified first, last and step values. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldInteger extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Integer';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Initialize some field attributes.		$first = (int) $this->element['first'];		$last = (int) $this->element['last'];		$step = (int) $this->element['step'];		// Sanity checks.		if ($step == 0)		{			// Step of 0 will create an endless loop.			return $options;		}		elseif ($first < $last && $step < 0)		{			// A negative step will never reach the last number.			return $options;		}		elseif ($first > $last && $step > 0)		{			// A position step will never reach the last number.			return $options;		}		elseif ($step < 0)		{			// Build the options array backwards.			for ($i = $first; $i >= $last; $i += $step)			{				$options[] = JHtml::_('select.option', $i);			}		}		else		{			// Build the options array.			for ($i = $first; $i <= $last; $i += $step)			{				$options[] = JHtml::_('select.option', $i);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Core content table * * @package     Joomla.Libraries * @subpackage  Table * @since       3.1 */class JTableCorecontent extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   3.1	 */	public function __construct($db)	{		parent::__construct('#__ucm_content', 'core_content_id', $db);	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 *                          to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error string	 *	 * @see     JTable::bind	 * @since   3.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['core_params']) && is_array($array['core_params']))		{			$registry = new JRegistry;			$registry->loadArray($array['core_params']);			$array['core_params'] = (string) $registry;		}		if (isset($array['core_metadata']) && is_array($array['core_metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['core_metadata']);			$array['core_metadata'] = (string) $registry;		}		if (isset($array['core_images']) && is_array($array['core_images']))		{			$registry = new JRegistry;			$registry->loadArray($array['core_images']);			$array['core_images'] = (string) $registry;		}		if (isset($array['core_urls']) && is_array($array['core_urls']))		{			$registry = new JRegistry;			$registry->loadArray($array['core_urls']);			$array['core_urls'] = (string) $registry;		}		if (isset($array['core_body']) && is_array($array['core_body']))		{			$registry = new JRegistry;			$registry->loadArray($array['core_body']);			$array['core_body'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success, false on failure	 *	 * @see     JTable::check	 * @since   3.1	 */	public function check()	{		if (trim($this->core_title) == '')		{			$this->setError(JText::_('LIB_CMS_WARNING_PROVIDE_VALID_NAME'));			return false;		}		if (trim($this->core_alias) == '')		{			$this->core_alias = $this->core_title;		}		$this->core_alias = JApplication::stringURLSafe($this->core_alias);		if (trim(str_replace('-', '', $this->core_alias)) == '')		{			$this->core_alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		// Check the publish down date is not earlier than publish up.		if ($this->core_publish_down > $this->_db->getNullDate() && $this->core_publish_down < $this->core_publish_up)		{			// Swap the dates.			$temp = $this->core_publish_up;			$this->core_publish_up = $this->core_publish_down;			$this->core_publish_down = $temp;		}		// Clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->core_metakey))		{			// Only process if not empty			// Array of characters to remove			$bad_characters = array("\n", "\r", "\"", "<", ">");			// Remove bad characters			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey);			// Create array using commas as delimiter			$keys = explode(',', $after_clean);			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key))				{					// Ignore blank keywords					$clean_keys[] = trim($key);				}			}			// Put array back together delimited by ", "			$this->core_metakey = implode(", ", $clean_keys);		}		return true;	}	/**	 * Override JTable delete method to include deleting corresponding row from #__ucm_base.	 *	 * @param   integer  primary key value to delete. Must be set or throws an exception.	 *	 * @return  boolean  True on success.	 *	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$baseTable = JTable::getInstance('Ucm');		return parent::delete($pk) && $baseTable->delete($pk);	}	/**	 * Method to delete a row from the #__ucm_content table by content_item_id.	 *	 * @param   integer  $pk  value of the core_content_item_id to delete. Corresponds to the primary key of the content table.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 *	 * @throws  UnexpectedValueException	 */	public function deleteByContentId($contentItemId = null)	{		if ($contentItemId === null || ((int) $contentItemId) === 0)		{			throw new UnexpectedValueException('Null content item key not allowed.');		}		$db = $this->getDbo();		$query = $db->getQuery(true);		$query->select($db->quoteName('core_content_id'))			->from($db->quoteName('#__ucm_content'))			->where($db->quoteName('core_content_item_id') . ' = ' . (int) $contentItemId);		$db->setQuery($query);		if ($ucmId = $db->loadResult())		{			return $this->delete($ucmId);		}		else		{			return true;		}	}	/**	 * Overrides JTable::store to set modified data and user id.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function store($updateNulls = false)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if ($this->core_content_id)		{			// Existing item			$this->core_modified_time = $date->toSql();			$this->core_modified_user_id = $user->get('id');			$isNew = false;		}		else		{			// New content item. A content item core_created_time and core_created_user_id field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->core_created_time)			{				$this->core_created_time = $date->toSql();			}			if (empty($this->core_created_user_id))			{				$this->core_created_user_id = $user->get('id');			}			$isNew = true;		}		$result = parent::store($updateNulls);		return $result && $this->storeUcmBase($updateNulls, $isNew);	}	/**	 * Insert or update row in ucm_base table	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 * @param   boolean  $isNew        if true, need to insert. Otherwise update.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	protected function storeUcmBase($updateNulls = false, $isNew = false)	{		// Store the ucm_base row		$db = $this->getDbo();		$query = $db->getQuery(true);		$query->set($db->quoteName('ucm_item_id') . ' = ' . $db->quote($this->core_content_item_id));		$query->set($db->quoteName('ucm_type_id') . ' = ' . $db->quote($this->core_type_id));		$languageId = JHelperContent::getLanguageId($this->core_language);		$query->set($db->quoteName('ucm_language_id') . ' = ' . $db->quote($languageId));		if ($isNew)		{			$query->set($db->quoteName('ucm_id') . ' = ' . $db->quote($this->core_content_id));			$query->insert($db->quoteName('#__ucm_base'));		}		else		{			$query->update($db->quoteName('#__ucm_base'));			$query->where($db->quoteName('ucm_id') . ' = ' . $db->quote($this->core_content_id));		}		$db->setQuery($query);		return $db->execute();	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table. The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		$pksImploded = implode(',', $pks);		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		// Update the publishing state for rows with the given primary keys.		$query->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('core_state') . ' = ' . (int) $state)			->where($this->_db->quoteName($k) . 'IN (' . $pksImploded . ')');		// Determine if there is checkin support for the table.		$checkin = false;		if (property_exists($this, 'core_checked_out_user_id') && property_exists($this, 'core_checked_out_time'))		{			$checkin = true;			$query->where(' (' . $this->_db->quoteName('core_checked_out_user_id') . ' = 0 OR ' . $this->_db->quoteName('core_checked_out_user_id') . ' = ' . (int) $userId . ')');		}		$this->_db->setQuery($query);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->core_state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Item TYpes View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewMenutypes extends JViewLegacy{	/**	 * Display the view	 */	public function display($tpl = null)	{		$input = JFactory::getApplication()->input;		$this->recordId = $input->getInt('recordId');		$this->types    = $this->get('TypeOptions');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   3.0	 */	protected function addToolbar()	{		// Add page title		JToolbarHelper::title(JText::_('COM_MENUS'), 'menumgr.png');		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Cancel		$title = JText::_('JTOOLBAR_CANCEL');		$dhtml = "<button onClick=\"location.href='index.php?option=com_menus&view=items'\" class=\"btn\">					<i class=\"icon-remove\" title=\"$title\"></i>					$title</button>";		$bar->appendButton('Custom', $dhtml, 'new');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');// Get the form fieldsets.$fieldsets = $this->form->getFieldsets();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'profile.cancel' || document.formvalidator.isValid(document.id('profile-form')))		{			Joomla.submitform(task, document.getElementById('profile-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_admin&view=profile&layout=edit&id='.$this->item->id); ?>" method="post" name="adminForm" id="profile-form" class="form-validate" enctype="multipart/form-data">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('COM_ADMIN_USER_ACCOUNT_DETAILS'); ?></legend>			<ul class="adminformlist">			<?php foreach ($this->form->getFieldset('user_details') as $field) : ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endforeach; ?>			</ul>		</fieldset>	</div>	<div class="col options-section">		<?php		echo JHtml::_('sliders.start');		foreach ($fieldsets as $fieldset) :			if ($fieldset->name == 'user_details') :				continue;			endif;			echo JHtml::_('sliders.panel', JText::_($fieldset->label), $fieldset->name);		?>		<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($fieldset->label); ?></legend>		<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($fieldset->name) as $field) : ?>			<?php if ($field->hidden) : ?>				<?php echo $field->input; ?>			<?php else: ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endif; ?>		<?php endforeach; ?>		</ul>		</fieldset>		<?php endforeach; ?>		<?php echo JHtml::_('sliders.end'); ?>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><div class="row-striped">	<?php if (count($list)) : ?>		<?php foreach ($list as $i => $item) :			// Calculate popular items			$hits = (int) $item->hits;			$hits_class = $hits >= 100 ? 'important' : $hits >= 25 ? 'warning' : $hits >= 10 ? 'info' : '';		?>			<div class="row-fluid">				<div class="span9">					<span class="badge badge-<?php echo $hits_class;?> hasTooltip" title="<?php echo JText::_('JGLOBAL_HITS');?>"><?php echo $item->hits;?></span>					<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time); ?>					<?php endif; ?>					<strong class="row-title">						<?php if ($item->link) :?>							<a href="<?php echo $item->link; ?>">								<?php echo htmlspecialchars($item->title, ENT_QUOTES, 'UTF-8');?></a>						<?php else :							echo htmlspecialchars($item->title, ENT_QUOTES, 'UTF-8');						endif; ?>					</strong>				</div>				<div class="span3">					<span class="small"><i class="icon-calendar"></i> <?php echo JHtml::_('date', $item->created, 'Y-m-d'); ?></span>				</div>			</div>		<?php endforeach; ?>	<?php else : ?>		<div class="row-fluid">			<div class="span12">				<div class="alert"><?php echo JText::_('MOD_POPULAR_NO_MATCHING_RESULTS');?></div>			</div>		</div>	<?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User notes table class * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersTableNote extends JTable{	/**	 * Constructor	 *	 * @param  JDatabaseDriver  &$db  Database object	 *	 * @since  2.5	 */	public function __construct(&$db)	{		parent::__construct('#__user_notes', 'id', $db);	}	/**	 * Overloaded store method for the notes table.	 *	 * @param   boolean  $updateNulls  Toggle whether null values should be updated.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 */	public function store($updateNulls = false)	{		$date = JFactory::getDate()->toSql();		$userId = JFactory::getUser()->get('id');		if (empty($this->id))		{			// New record.			$this->created_time = $date;			$this->created_user_id = $userId;		}		else		{			// Existing record.			$this->modified_time = $date;			$this->modified_user_id = $userId;		}		// Attempt to store the data.		return parent::store($updateNulls);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to check-in rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/publish	 * @since   2.5	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		$query = $this->_db->getQuery(true)			->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('state') . ' = ' . (int) $state);		// Build the WHERE clause for the primary keys.		$query->where($k . '=' . implode(' OR ' . $k . '=', $pks));		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = false;		}		else		{			$query->where('(checked_out = 0 OR checked_out = ' . (int) $userId . ')');			$checkin = true;		}		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery($query);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($this->_db->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');jimport('joomla.filesystem.path');jimport('joomla.base.adapter');jimport('joomla.utilities.arrayhelper');/** * Updater Class * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 */class JUpdater extends JAdapter{	/**	 * @var    JUpdater  JUpdater instance container.	 * @since  11.3	 */	protected static $instance;	/**	 * Constructor	 *	 * @since   11.1	 */	public function __construct()	{		// Adapter base path, class prefix		parent::__construct(__DIR__, 'JUpdater');	}	/**	 * Returns a reference to the global Installer object, only creating it	 * if it doesn't already exist.	 *	 * @return  object  An installer object	 *	 * @since   11.1	 */	public static function getInstance()	{		if (!isset(self::$instance))		{			self::$instance = new JUpdater;		}		return self::$instance;	}	/**	 * Finds an update for an extension	 *	 * @param   integer  $eid           Extension Identifier; if zero use all sites	 * @param   integer  $cacheTimeout  How many seconds to cache update information; if zero, force reload the update information	 *	 * @return  boolean True if there are updates	 *	 * @since   11.1	 */	public function findUpdates($eid = 0, $cacheTimeout = 0)	{		$db = $this->getDBO();		$retval = false;		// Push it into an array		if (!is_array($eid))		{			$query = 'SELECT DISTINCT update_site_id, type, location, last_check_timestamp FROM #__update_sites WHERE enabled = 1';		}		else		{			$query = 'SELECT DISTINCT update_site_id, type, location, last_check_timestamp FROM #__update_sites' .				' WHERE update_site_id IN' .				'  (SELECT update_site_id FROM #__update_sites_extensions WHERE extension_id IN (' . implode(',', $eid) . '))';		}		$db->setQuery($query);		$results = $db->loadAssocList();		$result_count = count($results);		$now = time();		for ($i = 0; $i < $result_count; $i++)		{			$result = &$results[$i];			$this->setAdapter($result['type']);			if (!isset($this->_adapters[$result['type']]))			{				// Ignore update sites requiring adapters we don't have installed				continue;			}			if ($cacheTimeout > 0)			{				if (isset($result['last_check_timestamp']) && ($now - $result['last_check_timestamp'] <= $cacheTimeout))				{					// Ignore update sites whose information we have fetched within					// the cache time limit					$retval = true;					continue;				}			}			$update_result = $this->_adapters[$result['type']]->findUpdate($result);			if (is_array($update_result))			{				if (array_key_exists('update_sites', $update_result) && count($update_result['update_sites']))				{					$results = JArrayHelper::arrayUnique(array_merge($results, $update_result['update_sites']));					$result_count = count($results);				}				if (array_key_exists('updates', $update_result) && count($update_result['updates']))				{					for ($k = 0, $count = count($update_result['updates']); $k < $count; $k++)					{						$current_update = &$update_result['updates'][$k];						$update = JTable::getInstance('update');						$extension = JTable::getInstance('extension');						$uid = $update							->find(							array(								'element' => strtolower($current_update->get('element')), 'type' => strtolower($current_update->get('type')),								'client_id' => strtolower($current_update->get('client_id')),								'folder' => strtolower($current_update->get('folder'))							)						);						$eid = $extension							->find(							array(								'element' => strtolower($current_update->get('element')), 'type' => strtolower($current_update->get('type')),								'client_id' => strtolower($current_update->get('client_id')),								'folder' => strtolower($current_update->get('folder'))							)						);						if (!$uid)						{							// Set the extension id							if ($eid)							{								// We have an installed extension, check the update is actually newer								$extension->load($eid);								$data = json_decode($extension->manifest_cache, true);								if (version_compare($current_update->version, $data['version'], '>') == 1)								{									$current_update->extension_id = $eid;									$current_update->store();								}							}							else							{								// A potentially new extension to be installed								$current_update->store();							}						}						else						{							$update->load($uid);							// If there is an update, check that the version is newer then replaces							if (version_compare($current_update->version, $update->version, '>') == 1)							{								$current_update->store();							}						}					}				}				$update_result = true;			}			elseif ($retval)			{				$update_result = true;			}			// Finally, update the last update check timestamp			$query = $db->getQuery(true)				->update($db->quoteName('#__update_sites'))				->set($db->quoteName('last_check_timestamp') . ' = ' . $db->quote($now))				->where($db->quoteName('update_site_id') . ' = ' . $db->quote($result['update_site_id']));			$db->setQuery($query);			$db->execute();		}		return $retval;	}	/**	 * Finds an update for an extension	 *	 * @param   integer  $id  Id of the extension	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function update($id)	{		$updaterow = JTable::getInstance('update');		$updaterow->load($id);		$update = new JUpdate;		if ($update->loadFromXML($updaterow->detailsurl))		{			return $update->install();		}		return false;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.updater.update');/** * Languages Installer Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.7 */class InstallerModelLanguages extends JModelList{	/**	 * Constructor override, defines a white list of column filters.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @since   2.5.7	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'update_id', 'update_id',				'name', 'name',			);		}		parent::__construct($config);	}	/**	 * Method to get the available languages database query.	 *	 * @return  JDatabaseQuery  The database query	 *	 * @since   2.5.7	 */	protected function _getListQuery()	{		$db   = JFactory::getDbo();		$query = $db->getQuery(true);		// Select the required fields from the updates table		$query->select('update_id, name, version, detailsurl, type')			->from('#__updates');		// This Where clause will avoid to list languages already installed.		$query->where('extension_id = 0');		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%');			$query->where('(name LIKE ' . $search . ')');		}		// Add the list ordering clause.		$listOrder = $this->state->get('list.ordering');		$orderDirn = $this->state->get('list.direction');		$query->order($db->escape($listOrder) . ' ' . $db->escape($orderDirn));		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 *	 * @since   2.5.7	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':' . $this->getState('filter.search');		return parent::getStoreId($id);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   list order	 * @param   string  $direction  direction in the list	 *	 * @return  void	 *	 * @since   2.5.7	 */	protected function populateState($ordering = 'name', $direction = 'asc')	{		$app = JFactory::getApplication();		$value = $app->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $value);		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		parent::populateState($ordering, $direction);	}	/**	 * Method to find available languages in the Accredited Languages Update Site.	 *	 * @param   int  $cache_timeout  time before refreshing the cached updates	 *	 * @return  bool	 *	 * @since   2.5.7	 */	public function findLanguages($cache_timeout = 0)	{		$updater = JUpdater::getInstance();		/*		 * The following function uses extension_id 600, that is the english language extension id.		 * In #__update_sites_extensions you should have 600 linked to the Accredited Translations Repo		 */		$updater->findUpdates(array(600), $cache_timeout);		return true;	}	/**	 * Install languages in the system.	 *	 * @param   array  $lids  array of language ids selected in the list	 *	 * @return  bool	 *	 * @since   2.5.7	 */	public function install($lids)	{		$app       = JFactory::getApplication();		$installer = JInstaller::getInstance();		// Loop through every selected language		foreach ($lids as $id)		{			// Loads the update database object that represents the language			$language = JTable::getInstance('update');			$language->load($id);			// Get the url to the XML manifest file of the selected language			$remote_manifest = $this->_getLanguageManifest($id);			if (!$remote_manifest)			{				// Could not find the url, the information in the update server may be corrupt				$message  = JText::sprintf('COM_INSTALLER_MSG_LANGUAGES_CANT_FIND_REMOTE_MANIFEST', $language->name);				$message .= ' ' . JText::_('COM_INSTALLER_MSG_LANGUAGES_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Based on the language XML manifest get the url of the package to download			$package_url = $this->_getPackageUrl($remote_manifest);			if (!$package_url)			{				// Could not find the url , maybe the url is wrong in the update server, or there is not internet access				$message  = JText::sprintf('COM_INSTALLER_MSG_LANGUAGES_CANT_FIND_REMOTE_PACKAGE', $language->name);				$message .= ' ' . JText::_('COM_INSTALLER_MSG_LANGUAGES_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Download the package to the tmp folder			$package = $this->_downloadPackage($package_url);			// Install the package			if (!$installer->install($package['dir']))			{				// There was an error installing the package				$message  = JText::sprintf('COM_INSTALLER_INSTALL_ERROR', $language->name);				$message .= ' ' . JText::_('COM_INSTALLER_MSG_LANGUAGES_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Package installed successfully			$app->enqueueMessage(JText::sprintf('COM_INSTALLER_INSTALL_SUCCESS', $language->name));			// Cleanup the install files in tmp folder			if (!is_file($package['packagefile']))			{				$config = JFactory::getConfig();				$package['packagefile'] = $config->get('tmp_path') . '/' . $package['packagefile'];			}			JInstallerHelper::cleanupInstall($package['packagefile'], $package['extractdir']);			// Delete the installed language from the list			$language->delete($id);		}	}	/**	 * Gets the manifest file of a selected language from a the language list in a update server.	 *	 * @param   int  $uid  the id of the language in the #__updates table	 *	 * @return  string	 *	 * @since   2.5.7	 */	protected function _getLanguageManifest($uid)	{		$instance = JTable::getInstance('update');		$instance->load($uid);		return $instance->detailsurl;	}	/**	 * Finds the url of the package to download.	 *	 * @param   string  $remote_manifest  url to the manifest XML file of the remote package	 *	 * @return  string|bool	 *	 * @since   2.5.7	 */	protected function _getPackageUrl( $remote_manifest )	{		$update = new JUpdate;		$update->loadFromXML($remote_manifest);		$package_url = trim($update->get('downloadurl', false)->_data);		return $package_url;	}	/**	 * Download a language package from a URL and unpack it in the tmp folder.	 *	 * @param   string  $url  hola	 *	 * @return  array|bool  Package details or false on failure	 *	 * @since   2.5.7	 */	protected function _downloadPackage($url)	{		// Download the package from the given URL		$p_file = JInstallerHelper::downloadPackage($url);		// Was the package downloaded?		if (!$p_file)		{			JError::raiseWarning('', JText::_('COM_INSTALLER_MSG_INSTALL_INVALID_URL'));			return false;		}		$config   = JFactory::getConfig();		$tmp_dest = $config->get('tmp_path');		// Unpack the downloaded package file		$package = JInstallerHelper::unpack($tmp_dest . '/' . $p_file);		return $package;	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class for the button bar. * * @package  Joomla.Administrator * @since    1.5 */abstract class JToolbarHelper{	/**	 * Title cell.	 * For the title and toolbar to be rendered correctly,	 * this title fucntion must be called before the starttable function and the toolbars icons	 * this is due to the nature of how the css has been used to postion the title in respect to the toolbar.	 *	 * @param   string  $title  The title.	 * @param   string  $icon   The space-separated names of the image.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function title($title, $icon = 'generic.png')	{		// Strip the extension.		$icons = explode(' ', $icon);		foreach ($icons as &$icon)		{			$icon = 'icon-48-' . preg_replace('#\.[^.]*$#', '', $icon);		}		$html = '<div class="pagetitle ' . htmlspecialchars(implode(' ', $icons)) . '"><h2>' . $title . '</h2></div>';		$app = JFactory::getApplication();		$app->JComponentTitle = $html;		JFactory::getDocument()->setTitle($app->getCfg('sitename') . ' - ' . JText::_('JADMINISTRATION') . ' - ' . $title);	}	/**	 * Writes a spacer cell.	 *	 * @param   string  $width  The width for the cell	 *	 * @return  void	 *	 * @since   1.5	 */	public static function spacer($width = '')	{		$bar = JToolbar::getInstance('toolbar');		// Add a spacer.		$bar->appendButton('Separator', 'spacer', $width);	}	/**	 * Writes a divider between menu buttons	 *	 * @return  void	 *	 * @since   1.5	 */	public static function divider()	{		$bar = JToolbar::getInstance('toolbar');		// Add a divider.		$bar->appendButton('Separator', 'divider');	}	/**	 * Writes a custom option and task button for the button bar.	 *	 * @param   string  $task        The task to perform (picked up by the switch($task) blocks.	 * @param   string  $icon        The image to display.	 * @param   string  $iconOver    The image to display when moused over.	 * @param   string  $alt         The alt text for the icon image.	 * @param   bool    $listSelect  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function custom($task = '', $icon = '', $iconOver = '', $alt = '', $listSelect = true)	{		$bar = JToolbar::getInstance('toolbar');		// Strip extension.		$icon = preg_replace('#\.[^.]*$#', '', $icon);		// Add a standard button.		$bar->appendButton('Standard', $icon, $alt, $task, $listSelect);	}	/**	 * Writes a preview button for a given option (opens a popup window).	 *	 * @param   string  $url            The name of the popup file (excluding the file extension)	 * @param   bool    $updateEditors	 *	 * @return  void	 *	 * @since   1.5	 */	public static function preview($url = '', $updateEditors = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a preview button.		$bar->appendButton('Popup', 'preview', 'Preview', $url.'&task=preview');	}	/**	 * Writes a preview button for a given option (opens a popup window).	 *	 * @param   string  $ref        The name of the popup file (excluding the file extension for an xml file).	 * @param   bool    $com        Use the help file in the component directory.	 * @param   string  $override   Use this URL instead of any other	 * @param   string  $component  Name of component to get Help (null for current component)	 *	 * @return  void	 *	 * @since   1.5	 */	public static function help($ref, $com = false, $override = null, $component = null)	{		$bar = JToolbar::getInstance('toolbar');		// Add a help button.		$bar->appendButton('Help', $ref, $com, $override, $component);	}	/**	 * Writes a cancel button that will go back to the previous page without doing	 * any other operation.	 *	 * @param   string  $alt   Alternative text.	 * @param   string  $href  URL of the href attribute.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function back($alt = 'JTOOLBAR_BACK', $href = 'javascript:history.back();')	{		$bar = JToolbar::getInstance('toolbar');		// Add a back button.		$bar->appendButton('Link', 'back', $alt, $href);	}	/**	 * Writes a media_manager button.	 *	 * @param   string  $directory  The sub-directory to upload the media to.	 * @param   string  $alt        An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function media_manager($directory = '', $alt = 'JTOOLBAR_UPLOAD')	{		$bar = JToolbar::getInstance('toolbar');		// Add an upload button.		$bar->appendButton('Popup', 'upload', $alt, 'index.php?option=com_media&tmpl=component&task=popupUpload&folder=' . $directory, 800, 520);	}	/**	 * Writes a common 'default' button for a record.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function makeDefault($task = 'default', $alt = 'JTOOLBAR_DEFAULT')	{		$bar = JToolbar::getInstance('toolbar');		// Add a default button.		$bar->appendButton('Standard', 'star', $alt, $task, true);	}	/**	 * Writes a common 'assign' button for a record.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function assign($task = 'assign', $alt = 'JTOOLBAR_ASSIGN')	{		$bar = JToolbar::getInstance('toolbar');		// Add an assign button.		$bar->appendButton('Standard', 'assign', $alt, $task, true);	}	/**	 * Writes the common 'new' icon for the button bar.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function addNew($task = 'add', $alt = 'JTOOLBAR_NEW', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a new button.		$bar->appendButton('Standard', 'new', $alt, $task, $check);	}	/**	 * Writes a common 'publish' button.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function publish($task = 'publish', $alt = 'JTOOLBAR_PUBLISH', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a publish button.		$bar->appendButton('Standard', 'publish', $alt, $task, $check);	}	/**	 * Writes a common 'publish' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function publishList($task = 'publish', $alt = 'JTOOLBAR_PUBLISH')	{		$bar = JToolbar::getInstance('toolbar');		// Add a publish button (list).		$bar->appendButton('Standard', 'publish', $alt, $task, true);	}	/**	 * Writes a common 'unpublish' button.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unpublish($task = 'unpublish', $alt = 'JTOOLBAR_UNPUBLISH', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add an unpublish button		$bar->appendButton('Standard', 'unpublish', $alt, $task, $check);	}	/**	 * Writes a common 'unpublish' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unpublishList($task = 'unpublish', $alt = 'JTOOLBAR_UNPUBLISH')	{		$bar = JToolbar::getInstance('toolbar');		// Add an unpublish button (list).		$bar->appendButton('Standard', 'unpublish', $alt, $task, true);	}	/**	 * Writes a common 'archive' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function archiveList($task = 'archive', $alt = 'JTOOLBAR_ARCHIVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add an archive button.		$bar->appendButton('Standard', 'archive', $alt, $task, true);	}	/**	 * Writes an unarchive button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unarchiveList($task = 'unarchive', $alt = 'JTOOLBAR_UNARCHIVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add an unarchive button (list).		$bar->appendButton('Standard', 'unarchive', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editList($task = 'edit', $alt = 'JTOOLBAR_EDIT')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit button.		$bar->appendButton('Standard', 'edit', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a template html.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editHtml($task = 'edit_source', $alt = 'JTOOLBAR_EDIT_HTML')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit html button.		$bar->appendButton('Standard', 'edithtml', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a template css.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editCss($task = 'edit_css', $alt = 'JTOOLBAR_EDIT_CSS')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit css button (hide).		$bar->appendButton('Standard', 'editcss', $alt, $task, true);	}	/**	 * Writes a common 'delete' button for a list of records.	 *	 * @param   string  $msg   Postscript for the 'are you sure' message.	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function deleteList($msg = '', $task = 'remove', $alt = 'JTOOLBAR_DELETE')	{		$bar = JToolbar::getInstance('toolbar');		// Add a delete button.		if ($msg)		{			$bar->appendButton('Confirm', $msg, 'delete', $alt, $task, true);		}		else		{			$bar->appendButton('Standard', 'delete', $alt, $task, true);		}	}	/**	 * Write a trash button that will move items to Trash Manager.	 *	 * @param   string  $task   An override for the task.	 * @param   string  $alt    An override for the alt text.	 * @param   bool    $check	 *	 * @return  void	 *	 * @since   1.5	 */	public static function trash($task = 'remove', $alt = 'JTOOLBAR_TRASH', $check = true)	{		$bar = JToolbar::getInstance('toolbar');		// Add a trash button.		$bar->appendButton('Standard', 'trash', $alt, $task, $check, false);	}	/**	 * Writes a save button for a given option.	 * Apply operation leads to a save action only (does not leave edit mode).	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function apply($task = 'apply', $alt = 'JTOOLBAR_APPLY')	{		$bar = JToolbar::getInstance('toolbar');		// Add an apply button		$bar->appendButton('Standard', 'apply', $alt, $task, false);	}	/**	 * Writes a save button for a given option.	 * Save operation leads to a save and then close action.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function save($task = 'save', $alt = 'JTOOLBAR_SAVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save button.		$bar->appendButton('Standard', 'save', $alt, $task, false);	}	/**	 * Writes a save and create new button for a given option.	 * Save and create operation leads to a save and then add action.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function save2new($task = 'save2new', $alt = 'JTOOLBAR_SAVE_AND_NEW')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'save-new', $alt, $task, false);	}	/**	 * Writes a save as copy button for a given option.	 * Save as copy operation leads to a save after clearing the key,	 * then returns user to edit mode with new key.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function save2copy($task = 'save2copy', $alt = 'JTOOLBAR_SAVE_AS_COPY')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'save-copy', $alt, $task, false);	}	/**	 * Writes a checkin button for a given option.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.7	 */	public static function checkin($task = 'checkin', $alt = 'JTOOLBAR_CHECKIN', $check = true)	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'checkin', $alt, $task, $check);	}	/**	 * Writes a cancel button and invokes a cancel operation (eg a checkin).	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function cancel($task = 'cancel', $alt = 'JTOOLBAR_CANCEL')	{		$bar = JToolbar::getInstance('toolbar');		// Add a cancel button.		$bar->appendButton('Standard', 'cancel', $alt, $task, false);	}	/**	 * Writes a configuration button and invokes a cancel operation (eg a checkin).	 *	 * @param   string  $component  The name of the component, eg, com_content.	 * @param   int     $height     The height of the popup. [UNUSED]	 * @param   int     $width      The width of the popup. [UNUSED]	 * @param   string  $alt        The name of the button.	 * @param   string  $path       An alternative path for the configuation xml relative to JPATH_SITE.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function preferences($component, $height = '550', $width = '875', $alt = 'JToolbar_Options', $path = '')	{		$component = urlencode($component);		$path = urlencode($path);		$bar = JToolBar::getInstance('toolbar');		$uri = (string) JUri::getInstance();		$return = urlencode(base64_encode($uri));		// Add a button linking to config for component.		$bar->appendButton('Link', 'options', $alt, 'index.php?option=com_config&amp;view=component&amp;component=' . $component . '&amp;path=' . $path . '&amp;return=' . $return);	}}/** * Utility class for the submenu. * * @package     Joomla.Administrator * @since       1.5 * @deprecated  4.0  Use JHtmlSidebar instead. */abstract class JSubMenuHelper{	/**	 * Menu entries	 *	 * @var    array	 * @since  3.0	 * @deprecated  4.0	 */	protected static $entries = array();	/**	 * Filters	 *	 * @var    array	 * @since  3.0	 * @deprecated  4.0	 */	protected static $filters = array();	/**	 * Value for the action attribute of the form.	 *	 * @var    string	 * @since  3.0	 * @deprecated  4.0	 */	protected static $action = '';	/**	 * Method to add a menu item to submenu.	 *	 * @param   string	$name	 Name of the menu item.	 * @param   string	$link	 URL of the menu item.	 * @param   bool	$active  True if the item is active, false otherwise.	 *	 * @return  void	 *	 * @since   1.5	 * @deprecated  4.0  Use JHtmlSidebar::addEntry() instead.	 */	public static function addEntry($name, $link = '', $active = false)	{		JLog::add('JSubMenuHelper::addEntry() is deprecated. Use JHtmlSidebar::addEntry() instead.', JLog::WARNING, 'deprecated');		array_push(self::$entries, array($name, $link, $active));	}	/**	 * Returns an array of all submenu entries	 *	 * @return  array	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getEntries() instead.	 */	public static function getEntries()	{		JLog::add('JSubMenuHelper::getEntries() is deprecated. Use JHtmlSidebar::getEntries() instead.', JLog::WARNING, 'deprecated');		return self::$entries;	}	/**	 * Method to add a filter to the submenu	 *	 * @param   string	$label      Label for the menu item.	 * @param   string	$name       name for the filter. Also used as id.	 * @param   string	$options    options for the select field.	 * @param   bool	$noDefault  Don't the label as the empty option	 *	 * @return  void	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::addFilter() instead.	 */	public static function addFilter($label, $name, $options, $noDefault = false)	{		JLog::add('JSubMenuHelper::addFilter() is deprecated. Use JHtmlSidebar::addFilter() instead.', JLog::WARNING, 'deprecated');		array_push(self::$filters, array('label' => $label, 'name' => $name, 'options' => $options, 'noDefault' => $noDefault));	}	/**	 * Returns an array of all filters	 *	 * @return  array	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getFilters() instead.	 */	public static function getFilters()	{		JLog::add('JSubMenuHelper::getFilters() is deprecated. Use JHtmlSidebar::getFilters() instead.', JLog::WARNING, 'deprecated');		return self::$filters;	}	/**	 * Set value for the action attribute of the filter form	 *	 * @param   string  $action  Value for the action attribute of the form	 *	 * @return  void	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::setAction() instead.	 */	public static function setAction($action)	{		JLog::add('JSubMenuHelper::setAction() is deprecated. Use JHtmlSidebar::setAction() instead.', JLog::WARNING, 'deprecated');		self::$action = $action;	}	/**	 * Get value for the action attribute of the filter form	 *	 * @return  string  Value for the action attribute of the form	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getAction() instead.	 */	public static function getAction()	{		JLog::add('JSubMenuHelper::getAction() is deprecated. Use JHtmlSidebar::getAction() instead.', JLog::WARNING, 'deprecated');		return self::$action;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Text field for passwords * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.password.html#input.password * @note        Two password fields may be validated as matching using JFormRuleEquals * @since       11.1 */class JFormFieldPassword extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Password';	/**	 * Method to get the field input markup for password.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$size		= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$maxLength	= $this->element['maxlength'] ? ' maxlength="' . (int) $this->element['maxlength'] . '"' : '';		$class		= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$auto		= ((string) $this->element['autocomplete'] == 'off') ? ' autocomplete="off"' : '';		$readonly	= ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$disabled	= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$meter		= ((string) $this->element['strengthmeter'] == 'true');		$required   = $this->required ? ' required="required" aria-required="true"' : '';		$threshold	= $this->element['threshold'] ? (int) $this->element['threshold'] : 66;		$script = '';		if ($meter)		{			JHtml::_('script', 'system/passwordstrength.js', true, true);			$script = '<script type="text/javascript">new Form.PasswordStrength("' . $this->id . '",				{					threshold: ' . $threshold . ',					onUpdate: function(element, strength, threshold) {						element.set("data-passwordstrength", strength);					}				}			);</script>';		}		return '<input type="password" name="' . $this->name . '" id="' . $this->id . '"' .			' value="' . htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' .			$auto . $class . $readonly . $disabled . $size . $maxLength . $required . '/>' . $script;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides spacer markup to be used in form layouts. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldSpacer extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Spacer';	/**	 * Method to get the field input markup for a spacer.	 * The spacer does not have accept input.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		return ' ';	}	/**	 * Method to get the field label markup for a spacer.	 * Use the label text or name from the XML element as the spacer or	 * Use a hr="true" to automatically generate plain hr markup	 *	 * @return  string  The field label markup.	 *	 * @since   11.1	 */	protected function getLabel()	{		$html = array();		$class = $this->element['class'] ? (string) $this->element['class'] : '';		$html[] = '<span class="spacer">';		$html[] = '<span class="before"></span>';		$html[] = '<span class="' . $class . '">';		if ((string) $this->element['hr'] == 'true')		{			$html[] = '<hr class="' . $class . '" />';		}		else		{			$label = '';			// Get the label text from the XML element, defaulting to the element name.			$text = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];			$text = $this->translateLabel ? JText::_($text) : $text;			// Build the class for the label.			$class = !empty($this->description) ? 'hasTip' : '';			$class = $this->required == true ? $class . ' required' : $class;			// Add the opening label tag and main attributes attributes.			$label .= '<label id="' . $this->id . '-lbl" class="' . $class . '"';			// If a description is specified, use it to build a tooltip.			if (!empty($this->description))			{				$label .= ' title="'					. htmlspecialchars(					trim($text, ':') . '::' . ($this->translateDescription ? JText::_($this->description) : $this->description),					ENT_COMPAT, 'UTF-8'				) . '"';			}			// Add the label text and closing tag.			$label .= '>' . $text . '</label>';			$html[] = $label;		}		$html[] = '</span>';		$html[] = '<span class="after"></span>';		$html[] = '</span>';		return implode('', $html);	}	/**	 * Method to get the field title.	 *	 * @return  string  The field title.	 *	 * @since   11.1	 */	protected function getTitle()	{		return $this->getLabel();	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Button base class * * The JButton is the base class for all JButton types * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */abstract class JToolbarButton{	/**	 * element name	 *	 * This has to be set in the final renderer classes.	 *	 * @var    string	 */	protected $_name = null;	/**	 * reference to the object that instantiated the element	 *	 * @var    JButton	 */	protected $_parent = null;	/**	 * Constructor	 *	 * @param   object  $parent  The parent	 */	public function __construct($parent = null)	{		$this->_parent = $parent;	}	/**	 * Get the element name	 *	 * @return  string   type of the parameter	 *	 * @since   3.0	 */	public function getName()	{		return $this->_name;	}	/**	 * Get the HTML to render the button	 *	 * @param   array  &$definition  Parameters to be passed	 *	 * @return  string	 *	 * @since   3.0	 */	public function render(&$definition)	{		/*		 * Initialise some variables		 */		$html = null;		$id = call_user_func_array(array(&$this, 'fetchId'), $definition);		$action = call_user_func_array(array(&$this, 'fetchButton'), $definition);		// Build id attribute		if ($id)		{			$id = "id=\"$id\"";		}		// Build the HTML Button		$html .= "<div class=\"btn-group\" $id>\n";		$html .= $action;		$html .= "</div>\n";		return $html;	}	/**	 * Method to get the CSS class name for an icon identifier	 *	 * Can be redefined in the final class	 *	 * @param   string  $identifier  Icon identification string	 *	 * @return  string  CSS class name	 *	 * @since   3.0	 */	public function fetchIconClass($identifier)	{		return "icon-$identifier";	}	/**	 * Get the button	 *	 * Defined in the final button class	 *	 * @return  string	 *	 * @since   3.0	 */	abstract public function fetchButton();}/** * Deprecated class placeholder. You should use JToolbarButton instead. * * @package     Joomla.Legacy * @subpackage  Toolbar * @since       1.5 * @deprecated  4.0  Use JToolbarButton instead. * @codeCoverageIgnore */abstract class JButton extends JToolbarButton{	/**	 * Constructor	 *	 * @param   object  $parent  The parent	 *	 * @deprecated  4.0  Use JToolbarButton instead.	 */	public function __construct($parent = null)	{		JLog::add('JButton is deprecated. Use JToolbarButton instead.', JLog::WARNING, 'deprecated');		parent::__construct($parent);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Language installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterLanguage extends JAdapterInstance{	/**	 * Core language pack flag	 *	 * @var    boolean	 * @since  12.1	 */	protected $core = false;	/**	 * Custom install method	 *	 * Note: This behaves badly due to hacks made in the middle of 1.5.x to add	 * the ability to install multiple distinct packs in one install. The	 * preferred method is to use a package to install multiple language packs.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent				->setPath(				'source',				($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/language/' . $this->parent->extension->element			);		}		$this->manifest = $this->parent->getManifest();		// Get the client application target		if ($cname = (string) $this->manifest->attributes()->client)		{			// Attempt to map the client to a base path			$client = JApplicationHelper::getClientInfo($cname, true);			if ($client === null)			{				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_UNKNOWN_CLIENT_TYPE', $cname)));				return false;			}			$basePath = $client->path;			$clientId = $client->id;			$element = $this->manifest->files;			return $this->_install($cname, $basePath, $clientId, $element);		}		else		{			// No client attribute was found so we assume the site as the client			$cname = 'site';			$basePath = JPATH_SITE;			$clientId = 0;			$element = $this->manifest->files;			return $this->_install($cname, $basePath, $clientId, $element);		}	}	/**	 * Install function that is designed to handle individual clients	 *	 * @param   string   $cname     Cname @todo: not used	 * @param   string   $basePath  The base name.	 * @param   integer  $clientId  The client id.	 * @param   object   &$element  The XML element.	 *	 * @return  boolean	 *	 * @since  3.1	 */	protected function _install($cname, $basePath, $clientId, &$element)	{		$this->manifest = $this->parent->getManifest();		// Get the language name		// Set the extensions name		$name = JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd');		$this->set('name', $name);		// Get the Language tag [ISO tag, eg. en-GB]		$tag = (string) $this->manifest->tag;		// Check if we found the tag - if we didn't, we may be trying to install from an older language package		if (!$tag)		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::_('JLIB_INSTALLER_ERROR_NO_LANGUAGE_TAG')));			return false;		}		$this->set('tag', $tag);		// Set the language installation path		$this->parent->setPath('extension_site', $basePath . '/language/' . $tag);		// Do we have a meta file in the file list?  In other words... is this a core language pack?		if ($element && count($element->children()))		{			$files = $element->children();			foreach ($files as $file)			{				if ((string) $file->attributes()->file == 'meta')				{					$this->core = true;					break;				}			}		}		// If the language directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_site')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_site')))			{				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT',						JText::sprintf('JLIB_INSTALLER_ERROR_CREATE_FOLDER_FAILED', $this->parent->getPath('extension_site'))					)				);				return false;			}		}		else		{			// Look for an update function or update tag			$updateElement = $this->manifest->update;			// Upgrade manually set or update tag detected			if ($this->parent->isUpgrade() || $updateElement)			{				// Transfer control to the update function				return $this->update();			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is set				// We didn't have overwrite set, find an update function or find an update tag so lets call it safe				if (file_exists($this->parent->getPath('extension_site')))				{					// If the site exists say so.					JLog::add(						JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_FOLDER_IN_USE', $this->parent->getPath('extension_site'))),						JLog::WARNING, 'jerror'					);				}				else				{					// If the admin exists say so.					JLog::add(						JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_FOLDER_IN_USE', $this->parent->getPath('extension_administrator'))),						JLog::WARNING, 'jerror'					);				}				return false;			}		}		/*		 * If we created the language directory we will want to remove it if we		 * have to roll back the installation, so let's add it to the installation		 * step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_site')));		}		// Copy all the necessary files		if ($this->parent->parseFiles($element) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseMedia($this->manifest->media);		// Copy all the necessary font files to the common pdf_fonts directory		$this->parent->setPath('extension_site', $basePath . '/language/pdf_fonts');		$overwrite = $this->parent->setOverwrite(true);		if ($this->parent->parseFiles($this->manifest->fonts) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		$this->parent->setOverwrite($overwrite);		// Get the language description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Add an entry to the extension table with a whole heap of defaults		$row = JTable::getInstance('extension');		$row->set('name', $this->get('name'));		$row->set('type', 'language');		$row->set('element', $this->get('tag'));		// There is no folder for languages		$row->set('folder', '');		$row->set('enabled', 1);		$row->set('protected', 0);		$row->set('access', 0);		$row->set('client_id', $clientId);		$row->set('params', $this->parent->getParams());		$row->set('manifest_cache', $this->parent->generateManifestCache());		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', $row->getError()));			return false;		}		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('tag'), 'type' => 'language', 'client_id' => '', 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		return $row->get('extension_id');	}	/**	 * Custom update method	 *	 * @return  boolean  True on success, false on failure	 *	 * @since   3.1	 */	public function update()	{		$xml = $this->parent->getManifest();		$this->manifest = $xml;		$cname = $xml->attributes()->client;		// Attempt to map the client to a base path		$client = JApplicationHelper::getClientInfo($cname, true);		if ($client === null || (empty($cname) && $cname !== 0))		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_UNKNOWN_CLIENT_TYPE', $cname)));			return false;		}		$basePath = $client->path;		$clientId = $client->id;		// Get the language name		// Set the extensions name		$name = (string) $this->manifest->name;		$name = JFilterInput::getInstance()->clean($name, 'cmd');		$this->set('name', $name);		// Get the Language tag [ISO tag, eg. en-GB]		$tag = (string) $xml->tag;		// Check if we found the tag - if we didn't, we may be trying to install from an older language package		if (!$tag)		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::_('JLIB_INSTALLER_ERROR_NO_LANGUAGE_TAG')));			return false;		}		$this->set('tag', $tag);		$folder = $tag;		// Set the language installation path		$this->parent->setPath('extension_site', $basePath . '/language/' . $this->get('tag'));		// Do we have a meta file in the file list?  In other words... is this a core language pack?		if (count($xml->files->children()))		{			foreach ($xml->files->children() as $file)			{				if ((string) $file->attributes()->file == 'meta')				{					$this->core = true;					break;				}			}		}		// Copy all the necessary files		if ($this->parent->parseFiles($xml->files) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseMedia($xml->media);		// Copy all the necessary font files to the common pdf_fonts directory		$this->parent->setPath('extension_site', $basePath . '/language/pdf_fonts');		$overwrite = $this->parent->setOverwrite(true);		if ($this->parent->parseFiles($xml->fonts) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		$this->parent->setOverwrite($overwrite);		// Get the language description and set it as message		$this->parent->set('message', (string) $xml->description);		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('tag'), 'type' => 'language', 'client_id' => $clientId));		if ($uid)		{			$update->delete($uid);		}		// Update an entry to the extension table		$row = JTable::getInstance('extension');		$eid = $row->find(array('element' => strtolower($this->get('tag')), 'type' => 'language', 'client_id' => $clientId));		if ($eid)		{			$row->load($eid);		}		else		{			// Set the defaults			// There is no folder for language			$row->set('folder', '');			$row->set('enabled', 1);			$row->set('protected', 0);			$row->set('access', 0);			$row->set('client_id', $clientId);			$row->set('params', $this->parent->getParams());		}		$row->set('name', $this->get('name'));		$row->set('type', 'language');		$row->set('element', $this->get('tag'));		$row->set('manifest_cache', $this->parent->generateManifestCache());		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', $row->getError()));			return false;		}		return $row->get('extension_id');	}	/**	 * Custom uninstall method	 *	 * @param   string  $eid  The tag of the language to uninstall	 *	 * @return  mixed  Return value for uninstall method in component uninstall file	 *	 * @since   3.1	 */	public function uninstall($eid)	{		// Load up the extension details		$extension = JTable::getInstance('extension');		$extension->load($eid);		// Grab a copy of the client details		$client = JApplicationHelper::getClientInfo($extension->get('client_id'));		// Check the element isn't blank to prevent nuking the languages directory...just in case		$element = $extension->get('element');		if (empty($element))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_ELEMENT_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		// Check that the language is not protected, Normally en-GB.		$protected = $extension->get('protected');		if ($protected == 1)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_PROTECTED'), JLog::WARNING, 'jerror');			return false;		}		// Verify that it's not the default language for that client		$params = JComponentHelper::getParams('com_languages');		if ($params->get($client->name) == $element)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_DEFAULT'), JLog::WARNING, 'jerror');			return false;		}		// Construct the path from the client, the language and the extension element name		$path = $client->path . '/language/' . $element;		// Get the package manifest object and remove media		$this->parent->setPath('source', $path);		// We do findManifest to avoid problem when uninstalling a list of extension: getManifest cache its manifest file		$this->parent->findManifest();		$this->manifest = $this->parent->getManifest();		$this->parent->removeFiles($this->manifest->media);		// Check it exists		if (!JFolder::exists($path))		{			// If the folder doesn't exist lets just nuke the row as well and presume the user killed it for us			$extension->delete();			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_PATH_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		if (!JFolder::delete($path))		{			// If deleting failed we'll leave the extension entry in tact just in case			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_DIRECTORY'), JLog::WARNING, 'jerror');			return false;		}		// Remove the extension table entry		$extension->delete();		// Setting the language of users which have this language as the default language		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->from('#__users')			->select('*');		$db->setQuery($query);		$users = $db->loadObjectList();		if ($client->name == 'administrator')		{			$param_name = 'admin_language';		}		else		{			$param_name = 'language';		}		$count = 0;		foreach ($users as $user)		{			$registry = new JRegistry;			$registry->loadString($user->params);			if ($registry->get($param_name) == $element)			{				$registry->set($param_name, '');				$query = $db->getQuery(true)					->update('#__users')					->set('params=' . $db->quote($registry))					->where('id=' . (int) $user->id);				$db->setQuery($query);				$db->execute();				$count++;			}		}		if (!empty($count))		{			JLog::add(JText::plural('JLIB_INSTALLER_NOTICE_LANG_RESET_USERS', $count), JLog::NOTICE, 'jerror');		}		// All done!		return true;	}	/**	 * Custom discover method	 * Finds language files	 *	 * @return  boolean  True on success	 *	 * @since  3.1	 */	public function discover()	{		$results = array();		$site_languages = JFolder::folders(JPATH_SITE . '/language');		$admin_languages = JFolder::folders(JPATH_ADMINISTRATOR . '/language');		foreach ($site_languages as $language)		{			if (file_exists(JPATH_SITE . '/language/' . $language . '/' . $language . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(JPATH_SITE . '/language/' . $language . '/' . $language . '.xml');				$extension = JTable::getInstance('extension');				$extension->set('type', 'language');				$extension->set('client_id', 0);				$extension->set('element', $language);				$extension->set('folder', '');				$extension->set('name', $language);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		foreach ($admin_languages as $language)		{			if (file_exists(JPATH_ADMINISTRATOR . '/language/' . $language . '/' . $language . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(JPATH_ADMINISTRATOR . '/language/' . $language . '/' . $language . '.xml');				$extension = JTable::getInstance('extension');				$extension->set('type', 'language');				$extension->set('client_id', 1);				$extension->set('element', $language);				$extension->set('folder', '');				$extension->set('name', $language);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		return $results;	}	/**	 * Custom discover install method	 * Basically updates the manifest cache and leaves everything alone	 *	 * @return  integer  The extension id	 *	 * @since   3.1	 */	public function discover_install()	{		// Need to find to find where the XML file is since we don't store this normally		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$short_element = $this->parent->extension->element;		$manifestPath = $client->path . '/language/' . $short_element . '/' . $short_element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$this->parent->setPath('source', $client->path . '/language/' . $short_element);		$this->parent->setPath('extension_root', $this->parent->getPath('source'));		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		// @todo remove code: $this->parent->extension->params = $this->parent->getParams();		try		{			$this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}		return $this->parent->extension->get('extension_id');	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/language/' . $this->parent->extension->element . '/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		if ($this->parent->extension->store())		{			return true;		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_MOD_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterLanguage instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerLanguage extends JInstallerAdapterLanguage{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Component Languages Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesModelInstalled extends JModelList{	/**	 * @var object client object	 */	protected $client = null;	/**	 * @var object user object	 */	protected $user = null;	/**	 * @var boolean|JExeption True, if FTP settings should be shown, or an exeption	 */	protected $ftp = null;	/**	 * @var string option name	 */	protected $option = null;	/**	 * @var array languages description	 */	protected $data = null;	/**	 * @var int total number pf languages	 */	protected $total = null;	/**	 * @var int total number pf languages installed	 */	protected $langlist = null;	/**	 * @var string language path	 */	protected $path = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$clientId = $app->input->getInt('client');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_languages');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Method to get the client object	 *	 * @return  object	 * @since   1.6	 */	public function &getClient()	{		if (is_null($this->client))		{			$this->client = JApplicationHelper::getClientInfo($this->getState('filter.client_id', 0));		}		return $this->client;	}	/**	 * Method to get the ftp credentials	 *	 * @return  object	 * @since   1.6	 */	public function &getFtp()	{		if (is_null($this->ftp))		{			$this->ftp = JClientHelper::setCredentialsFromRequest('ftp');		}		return $this->ftp;	}	/**	 * Method to get the option	 *	 * @return  object	 * @since   1.6	 */	public function &getOption()	{		$option = $this->getState('option');		return $option;	}	/**	 * Method to get Languages item data	 *	 * @return  array	 * @since   1.6	 */	public function &getData()	{		if (is_null($this->data)) {			// Get information			$path		= $this->getPath();			$client		= $this->getClient();			$langlist   = $this->getLanguageList();			// Compute all the languages			$data	= array ();			foreach ($langlist as $lang) {				$file = $path . '/' . $lang . '/' . $lang.'.xml';				$info = JApplicationHelper::parseXMLLangMetaFile($file);				$row = new JObject;				$row->language = $lang;				if (!is_array($info))				{					continue;				}				foreach ($info as $key => $value)				{					$row->$key = $value;				}				// if current than set published				$params = JComponentHelper::getParams('com_languages');				if ($params->get($client->name, 'en-GB') == $row->language)				{					$row->published	= 1;				}				else {					$row->published = 0;				}				$row->checked_out = 0;				$data[] = $row;			}			usort($data, array($this, 'compareLanguages'));			// Prepare data			$limit = $this->getState('list.limit');			$start = $this->getState('list.start');			$total = $this->getTotal();			if ($limit == 0)			{				$start = 0;				$end = $total;			}			else {				if ($start > $total)				{					$start = $total - $total % $limit;				}				$end = $start + $limit;				if ($end > $total)				{					$end = $total;				}			}			// Compute the displayed languages			$this->data	= array();			for ($i = $start;$i < $end;$i++)			{				$this->data[] = & $data[$i];			}		}		return $this->data;	}	/**	 * Method to get installed languages data.	 *	 * @return  string	An SQL query	 * @since   1.6	 */	protected function getLanguageList()	{		// Create a new db object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$client = $this->getState('filter.client_id');		$type = "language";		// Select field element from the extensions table.		$query->select($this->getState('list.select', 'a.element'))			->from('#__extensions AS a');		$type = $db->quote($type);		$query->where('(a.type = '.$type.')')			->where('state = 0')			->where('enabled = 1')			->where('client_id=' . (int) $client);		// for client_id = 1 do we need to check language table also ?		$db->setQuery($query);		$this->langlist = $db->loadColumn();		return $this->langlist;	}	/**	 * Method to get the total number of Languages items	 *	 * @return  integer	 * @since   1.6	 */	public function getTotal()	{		if (is_null($this->total))		{			$langlist = $this->getLanguageList();			$this->total = count($langlist);		}		return $this->total;	}	/**	 * Method to set the default language	 *	 * @return  boolean	 * @since   1.6	 */	public function publish($cid)	{		if ($cid)		{			$client	= $this->getClient();			$params = JComponentHelper::getParams('com_languages');			$params->set($client->name, $cid);			$table = JTable::getInstance('extension');			$id = $table->find(array('element' => 'com_languages'));			// Load			if (!$table->load($id))			{				$this->setError($table->getError());				return false;			}			$table->params = (string) $params;			// pre-save checks			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// save the changes			if (!$table->store())			{				$this->setError($table->getError());				return false;			}		}		else		{			$this->setError(JText::_('COM_LANGUAGES_ERR_NO_LANGUAGE_SELECTED'));			return false;		}		// Clean the cache of com_languages and component cache.		$this->cleanCache();		$this->cleanCache('_system');		return true;	}	/**	 * Method to get the folders	 *	 * @return  array  Languages folders	 * @since   1.6	 */	protected function getFolders()	{		if (is_null($this->folders))		{			$path = $this->getPath();			jimport('joomla.filesystem.folder');			$this->folders = JFolder::folders($path, '.', false, false, array('.svn', 'CVS', '.DS_Store', '__MACOSX', 'pdf_fonts', 'overrides'));		}		return $this->folders;	}	/**	 * Method to get the path	 *	 * @return  string	The path to the languages folders	 * @since   1.6	 */	protected function getPath()	{		if (is_null($this->path))		{			$client = $this->getClient();			$this->path = JLanguage::getLanguagePath($client->path);		}		return $this->path;	}	/**	 * Method to compare two languages in order to sort them	 *	 * @param   object	$lang1 the first language	 * @param   object	$lang2 the second language	 *	 * @return  integer	 * @since   1.6	 */	protected function compareLanguages($lang1, $lang2)	{		return strcmp($lang1->name, $lang2->name);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * ToolBar handler * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       1.5 */class JToolbar{	/**	 * Toolbar name	 *	 * @var    string	 */	protected $_name = array();	/**	 * Toolbar array	 *	 * @var    array	 */	protected $_bar = array();	/**	 * Loaded buttons	 *	 * @var    array	 */	protected $_buttons = array();	/**	 * Directories, where button types can be stored.	 *	 * @var    array	 */	protected $_buttonPath = array();	/**	 * Stores the singleton instances of various toolbar.	 *	 * @var    JToolbar	 * @since  2.5	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   string  $name  The toolbar name.	 *	 * @since   1.5	 */	public function __construct($name = 'toolbar')	{		$this->_name = $name;		// Set base path to find buttons.		$this->_buttonPath[] = __DIR__ . '/button';	}	/**	 * Returns the global JToolbar object, only creating it if it	 * doesn't already exist.	 *	 * @param   string  $name  The name of the toolbar.	 *	 * @return  JToolbar  The JToolbar object.	 *	 * @since   1.5	 */	public static function getInstance($name = 'toolbar')	{		if (empty(self::$instances[$name]))		{			self::$instances[$name] = new JToolbar($name);		}		return self::$instances[$name];	}	/**	 * Set a value	 *	 * @return  string  The set value.	 *	 * @since   1.5	 */	public function appendButton()	{		// Push button onto the end of the toolbar array.		$btn = func_get_args();		array_push($this->_bar, $btn);		return true;	}	/**	 * Get the list of toolbar links.	 *	 * @return  array	 *	 * @since   1.6	 */	public function getItems()	{		return $this->_bar;	}	/**	 * Get the name of the toolbar.	 *	 * @return  string	 *	 * @since   1.6	 */	public function getName()	{		return $this->_name;	}	/**	 * Get a value.	 *	 * @return  string	 *	 * @since   1.5	 */	public function prependButton()	{		// Insert button into the front of the toolbar array.		$btn = func_get_args();		array_unshift($this->_bar, $btn);		return true;	}	/**	 * Render a tool bar.	 *	 * @return  string  HTML for the toolbar.	 *	 * @since   1.5	 */	public function render()	{		$html = array();		// Start toolbar div.		$html[] = '<div class="btn-toolbar" id="' . $this->_name . '">';		// Render each button in the toolbar.		foreach ($this->_bar as $button)		{			$html[] = $this->renderButton($button);		}		// End toolbar div.		$html[] = '</div>';		return implode("\n", $html);	}	/**	 * Render a button.	 *	 * @param   object  &$node  A toolbar node.	 *	 * @return  string	 *	 * @since   1.5	 */	public function renderButton(&$node)	{		// Get the button type.		$type = $node[0];		$button = $this->loadButtonType($type);		// Check for error.		if ($button === false)		{			return JText::sprintf('JLIB_HTML_BUTTON_NOT_DEFINED', $type);		}		return $button->render($node);	}	/**	 * Loads a button type.	 *	 * @param   string   $type  Button Type	 * @param   boolean  $new   False by default	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function loadButtonType($type, $new = false)	{		$signature = md5($type);		if (isset($this->_buttons[$signature]) && $new === false)		{			return $this->_buttons[$signature];		}		if (!class_exists('JToolbarButton'))		{			JLog::add(JText::_('JLIB_HTML_BUTTON_BASE_CLASS'), JLog::WARNING, 'jerror');			return false;		}		$buttonClass = 'JToolbarButton' . ucfirst($type);		// @deprecated 12.3 Remove the acceptance of legacy classes starting with JButton.		$buttonClassOld = 'JButton' . ucfirst($type);		if (!class_exists($buttonClass))		{			if (!class_exists($buttonClassOld))			{				if (isset($this->_buttonPath))				{					$dirs = $this->_buttonPath;				}				else				{					$dirs = array();				}				$file = JFilterInput::getInstance()->clean(str_replace('_', DIRECTORY_SEPARATOR, strtolower($type)) . '.php', 'path');				jimport('joomla.filesystem.path');				if ($buttonFile = JPath::find($dirs, $file))				{					include_once $buttonFile;				}				else				{					JLog::add(JText::sprintf('JLIB_HTML_BUTTON_NO_LOAD', $buttonClass, $buttonFile), JLog::WARNING, 'jerror');					return false;				}			}		}		if (!class_exists($buttonClass) && !class_exists($buttonClassOld))		{			// @todo remove code: return	JError::raiseError('SOME_ERROR_CODE', "Module file $buttonFile does not contain class $buttonClass.");			return false;		}		$this->_buttons[$signature] = new $buttonClass($this);		return $this->_buttons[$signature];	}	/**	 * Add a directory where JToolbar should search for button types in LIFO order.	 *	 * You may either pass a string or an array of directories.	 *	 * JToolbar will be searching for an element type in the same order you	 * added them. If the parameter type cannot be found in the custom folders,	 * it will look in libraries/joomla/html/toolbar/button.	 *	 * @param   mixed  $path  Directory or directories to search.	 *	 * @return  void	 *	 * @since   boolean	 * @see     JToolbar	 */	public function addButtonPath($path)	{		// Just force path to array.		settype($path, 'array');		// Loop through the path directories.		foreach ($path as $dir)		{			// No surrounding spaces allowed!			$dir = trim($dir);			// Add trailing separators as needed.			if (substr($dir, -1) != DIRECTORY_SEPARATOR)			{				// Directory				$dir .= DIRECTORY_SEPARATOR;			}			// Add to the top of the search dirs.			array_unshift($this->_buttonPath, $dir);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$ordering 	= ($listOrder == 'a.lft');$canOrder	= $user->authorise('core.edit.state',	'com_tags');$saveOrder 	= ($listOrder == 'a.lft' && $listDirn == 'asc');if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_tags&task=tags.saveOrderAjax';	JHtml::_('sortablelist.sortable', 'categoryList', 'adminForm', strtolower($listDirn), $saveOrderingUrl, false, true);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function() {		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		} else {			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_tags&view=tags');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)): ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER'); ?>" />			</div>			<div class="btn-group hidden-phone">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>			<div class="clearfix"></div>		</div>		<table class="table table-striped" id="categoryList">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>				<th width="10%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort',  'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>				</th>					<th width="1%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php			$originalOrders = array();			foreach ($this->items as $i => $item) :				$orderkey   = array_search($item->id, $this->ordering[$item->parent_id]);				$canCreate  = $user->authorise('core.create',     'com_tags');				$canEdit    = $user->authorise('core.edit',       'com_tags');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_tags') && $canCheckin;				// Get the parents of item for sorting				if ($item->level > 1)				{					$parentsStr = "";					$_currentParentId = $item->parent_id;					$parentsStr = " ".$_currentParentId;					for ($j = 0; $j < $item->level; $j++)					{						foreach ($this->ordering as $k => $v)						{							$v = implode("-", $v);							$v = "-" . $v . "-";							if (strpos($v, "-" . $_currentParentId . "-") !== false)							{								$parentsStr .= " " . $k;								$_currentParentId = $k;								break;							}						}					}				}				else				{					$parentsStr = "";				}				?>					<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->parent_id;?>" item-id="<?php echo $item->id?>" parents="<?php echo $parentsStr?>" level="<?php echo $item->level?>">						<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel    = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>						<?php else : ?>							<span class="sortable-handler inactive">								<i class="icon-menu"></i>							</span>						<?php endif; ?>							<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $orderkey + 1;?>" />						</td>						<td class="center hidden-phone">							<?php echo JHtml::_('grid.id', $i, $item->id); ?>						</td>						<td class="center">							<?php echo JHtml::_('jgrid.published', $item->published, $i, 'tags.', $canChange);?>						</td>						<td>							<?php if ($item->level > 0): ?>							<?php echo str_repeat('<span class="gi">&mdash;</span>', $item->level - 1) ?>							<?php endif; ?>							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'tags.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit || $canEditOwn) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_tags&task=tag.edit&id='.$item->id);?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>								<?php echo $this->escape($item->title); ?>							<?php endif; ?>							<span class="small" title="<?php echo $this->escape($item->path); ?>">								<?php if (empty($item->note)) : ?>									<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>								<?php else : ?>									<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS_NOTE', $this->escape($item->alias), $this->escape($item->note));?>								<?php endif; ?>							</span>						</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_title); ?>					</td>					<td class="small nowrap hidden-phone">					<?php if ($item->language == '*') : ?>						<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>						</td>						<td class="center hidden-phone">							<span title="<?php echo sprintf('%d-%d', $item->lft, $item->rgt); ?>">								<?php echo (int) $item->id; ?></span>						</td>					</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<input type="hidden" name="original_order_values" value="<?php echo implode($originalOrders, ','); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a standard button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonStandard extends JToolbarButton{	/**	 * Button type	 *	 * @var    string	 */	protected $_name = 'Standard';	/**	 * Fetch the HTML for the button	 *	 * @param   string   $type  Unused string.	 * @param   string   $name  The name of the button icon class.	 * @param   string   $text  Button text.	 * @param   string   $task  Task associated with the button.	 * @param   boolean  $list  True to allow lists	 *	 * @return  string  HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Standard', $name = '', $text = '', $task = '', $list = true)	{		$i18n_text = JText::_($text);		$class = $this->fetchIconClass($name);		$doTask = $this->_getCommand($text, $task, $list);		if ($name == "apply" || $name == "new")		{			$btnClass = "btn btn-small btn-success";			$iconWhite = "icon-white";		}		else		{			$btnClass = "btn btn-small";			$iconWhite = "";		}		$html = "<button href=\"#\" onclick=\"$doTask\" class=\"" . $btnClass . "\">\n";		$html .= "<i class=\"$class $iconWhite\">\n";		$html .= "</i>\n";		$html .= "$i18n_text\n";		$html .= "</button>\n";		return $html;	}	/**	 * Get the button CSS Id	 *	 * @param   string   $type      Unused string.	 * @param   string   $name      Name to be used as apart of the id	 * @param   string   $text      Button text	 * @param   string   $task      The task associated with the button	 * @param   boolean  $list      True to allow use of lists	 * @param   boolean  $hideMenu  True to hide the menu on click	 *	 * @return  string  Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type = 'Standard', $name = '', $text = '', $task = '', $list = true, $hideMenu = false)	{		return $this->_parent->getName() . '-' . $name;	}	/**	 * Get the JavaScript command for the button	 *	 * @param   string   $name  The task name as seen by the user	 * @param   string   $task  The task used by the application	 * @param   boolean  $list  True is requires a list confirmation.	 *	 * @return  string   JavaScript command string	 *	 * @since   3.0	 */	protected function _getCommand($name, $task, $list)	{		JHtml::_('behavior.framework');		$message = JText::_('JLIB_HTML_PLEASE_MAKE_A_SELECTION_FROM_THE_LIST');		$message = addslashes($message);		if ($list)		{			$cmd = "if (document.adminForm.boxchecked.value==0){alert('$message');}else{ Joomla.submitbutton('$task')}";		}		else		{			$cmd = "Joomla.submitbutton('$task')";		}		return $cmd;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * User notes list view * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersViewNotes extends JViewLegacy{	/**	 * A list of user note objects.	 *	 * @var    array	 * @since  2.5	 */	protected $items;	/**	 * The pagination object.	 *	 * @var    JPagination	 * @since  2.5	 */	protected $pagination;	/**	 * The model state.	 *	 * @var    JObject	 * @since  2.5	 */	protected $state;	/**	 * The model state.	 *	 * @var    JUser	 * @since  2.5	 */	protected $user;	/**	 * Override the display method for the view.	 *	 * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Initialise view variables.		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->state      = $this->get('State');		$this->user       = $this->get('User');		UsersHelper::addSubmenu('notes');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			throw new Exception(implode("\n", $errors), 500);		}		// Get the component HTML helpers		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// turn parameters into registry objects		foreach ($this->items as $item)		{			$item->cparams = new JRegistry;			$item->cparams->loadString($item->category_params);		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Display the toolbar.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		$canDo = UsersHelper::getActions();		JToolbarHelper::title(JText::_('COM_USERS_VIEW_NOTES_TITLE'), 'user');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('note.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('note.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::divider();			JToolbarHelper::publish('notes.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('notes.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::divider();			JToolbarHelper::archiveList('notes.archive');			JToolbarHelper::checkin('notes.checkin');		}		if ($this->state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'notes.delete', 'JTOOLBAR_EMPTY_TRASH');			JToolbarHelper::divider();		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('notes.trash');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_users');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_USERS_USER_NOTES');		JHtmlSidebar::setAction('index.php?option=com_users&view=notes');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_users.notes'), 'value', 'text', $this->state->get('filter.category_id'))		);	}}
<?php/** * @package    Joomla.Site * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */if (version_compare(PHP_VERSION, '5.3.1', '<')){	die('Your host needs to use PHP 5.3.1 or higher to run this version of Joomla!');}/** * Constant that is checked in included files to prevent direct access. * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower */define('_JEXEC', 1);if (file_exists(__DIR__ . '/defines.php')){	include_once __DIR__ . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', __DIR__);	require_once JPATH_BASE . '/includes/defines.php';}require_once JPATH_BASE . '/includes/framework.php';// Mark afterLoad in the profiler.JDEBUG ? $_PROFILER->mark('afterLoad') : null;// Instantiate the application.$app = JFactory::getApplication('site');// Initialise the application.$app->initialise();// Mark afterIntialise in the profiler.JDEBUG ? $_PROFILER->mark('afterInitialise') : null;// Route the application.$app->route();// Mark afterRoute in the profiler.JDEBUG ? $_PROFILER->mark('afterRoute') : null;// Dispatch the application.$app->dispatch();// Mark afterDispatch in the profiler.JDEBUG ? $_PROFILER->mark('afterDispatch') : null;// Render the application.$app->render();// Mark afterRender in the profiler.JDEBUG ? $_PROFILER->mark('afterRender') : null;// Return the response.echo $app;
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die();/** * Maps model for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelMaps extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An associative array of configuration settings. [optional]	 *	 * @since   2.5	 * @see     JController	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'state', 'a.state',				'title', 'a.title'			);		}		parent::__construct($config);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission for the component.	 *	 * @since   2.5	 */	protected function canDelete($record)	{		$user = JFactory::getUser();		return $user->authorise('core.delete', $this->option);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission for the component.	 *	 * @since   2.5	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return $user->authorise('core.edit.state', $this->option);	}	/**	 * Method to delete one or more records.	 *	 * @param   array  &$pks  An array of record primary keys.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   2.5	 */	public function delete(&$pks)	{		$dispatcher = JEventDispatcher::getInstance();		$pks = (array) $pks;		$table = $this->getTable();		// Include the content plugins for the on delete events.		JPluginHelper::importPlugin('content');		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if ($this->canDelete($table))				{					$context = $this->option . '.' . $this->name;					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger('onContentBeforeDelete', array($context, $table));					if (in_array(false, $result, true))					{						$this->setError($table->getError());						return false;					}					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					// Trigger the onContentAfterDelete event.					$dispatcher->trigger('onContentAfterDelete', array($context, $table));				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					$error = $this->getError();					if ($error)					{						$this->setError($error);					}					else					{						$this->setError(JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'));					}				}			}			else			{				$this->setError($table->getError());				return false;			}		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery  A JDatabaseQuery object	 *	 * @since   2.5	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select all fields from the table.		$query->select('a.*')			->from($db->quoteName('#__finder_taxonomy') . ' AS a');		// Self-join to get children.		$query->select('COUNT(b.id) AS num_children')			->join('LEFT', $db->quoteName('#__finder_taxonomy') . ' AS b ON b.parent_id=a.id');		// Join to get the map links		$query->select('COUNT(c.node_id) AS num_nodes')			->join('LEFT', $db->quoteName('#__finder_taxonomy_map') . ' AS c ON c.node_id=a.id')			->group('a.id, a.parent_id, a.title, a.state, a.access, a.ordering');		// If the model is set to check item state, add to the query.		if (is_numeric($this->getState('filter.state')))		{			$query->where('a.state = ' . (int) $this->getState('filter.state'));		}		// Filter the maps over the branch if set.		$branch_id = $this->getState('filter.branch');		if (!empty($branch_id))		{			$query->where('a.parent_id = ' . (int) $branch_id);		}		// Filter the maps over the search string if set.		$search = $this->getState('filter.search');		if (!empty($search))		{			$query->where('a.title LIKE ' . $db->quote('%' . $search . '%'));		}		// Handle the list ordering.		$ordering = $this->getState('list.ordering');		$direction = $this->getState('list.direction');		if (!empty($ordering))		{			$query->order($db->escape($ordering) . ' ' . $db->escape($direction));		}		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id. [optional]	 *	 * @return  string  A store id.	 *	 * @since   2.5	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.branch');		return parent::getStoreId($id);	}	/**	 * Returns a JTable object, always creating it.	 *	 * @param   string  $type    The table type to instantiate. [optional]	 * @param   string  $prefix  A prefix for the table class name. [optional]	 * @param   array   $config  Configuration array for model. [optional]	 *	 * @return  JTable  A database object	 *	 * @since   2.5	 */	public function getTable($type = 'Map', $prefix = 'FinderTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to auto-populate the model state.  Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field. [optional]	 * @param   string  $direction  An optional direction. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState($ordering = null, $direction = null)	{		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$branch = $this->getUserStateFromRequest($this->context . '.filter.branch', 'filter_branch', '1', 'string');		$this->setState('filter.branch', $branch);		// Load the parameters.		$params = JComponentHelper::getParams('com_finder');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    &$pks   A list of the primary keys to change.	 * @param   integer  $value  The value of the published state. [optional]	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function publish(&$pks, $value = 1)	{		$dispatcher = JEventDispatcher::getInstance();		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Include the content plugins for the change of state event.		JPluginHelper::importPlugin('content');		// Access checks.		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));					return false;				}			}		}		// Attempt to change the state of the records.		if (!$table->publish($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		$context = $this->option . '.' . $this->name;		// Trigger the onContentChangeState event.		$result = $dispatcher->trigger('onContentChangeState', array($context, $pks, $value));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Method to purge all maps from the taxonomy.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   2.5	 */	public function purge()	{		$db = $this->getDbo();		$query = $db->getQuery(true)			->delete($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' > 1');		$db->setQuery($query);		$db->execute();		$query->clear()			->delete($db->quoteName('#__finder_taxonomy_map'))			->where('1');		$db->setQuery($query);		$db->execute();		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_users');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_users&view=levels');?>" method="post" id="adminForm" name="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_ACCESS_LEVELS'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_TITLE_LEVELS'); ?>" />			</div>			<div class="filter-search btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_RESET'); ?>"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LEVEL_NAME', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>						<?php if ($canOrder && $saveOrder) :?>							<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'levels.saveorder'); ?>						<?php endif; ?>					</th>					<th width="5%" class="nowrap center hidden-phone">						<?php echo JText::_('JGRID_HEADING_ID'); ?>					</th>					<th width="40%">						&#160;					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php $count = count($this->items); ?>			<?php foreach ($this->items as $i => $item) :				$ordering  = ($listOrder == 'a.ordering');				$canCreate = $user->authorise('core.create',     'com_users');				$canEdit   = $user->authorise('core.edit',       'com_users');				$canChange = $user->authorise('core.edit.state', 'com_users');				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td>						<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=level.edit&id='.$item->id);?>">							<?php echo $this->escape($item->title); ?></a>						<?php else : ?>							<?php echo $this->escape($item->title); ?>						<?php endif; ?>					</td>					<td class="order">						<?php if ($canChange) : ?>							<div class="input-prepend">							<?php if ($saveOrder) :?>								<?php if ($listDirn == 'asc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'levels.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php elseif ($listDirn == 'desc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'levels.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php endif; ?>							<?php endif; ?>							<?php $disabled = $saveOrder ? '' : 'disabled="disabled"'; ?>						 	<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="width-20 text-area-order" />						 </div>						<?php else : ?>							<?php echo $item->ordering; ?>						<?php endif; ?>					</td>					<td class="center">						<?php echo (int) $item->id; ?>					</td>					<td>						&#160;					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * * Provides a pop up date picker linked to a button. * Optionally may be filtered to use user's or server's time zone. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldCalendar extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Calendar';	/**	 * Method to get the field input markup.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$format = $this->element['format'] ? (string) $this->element['format'] : '%Y-%m-%d';		// Build the attributes array.		$attributes = array();		if ($this->element['size'])		{			$attributes['size'] = (int) $this->element['size'];		}		if ($this->element['maxlength'])		{			$attributes['maxlength'] = (int) $this->element['maxlength'];		}		if ($this->element['class'])		{			$attributes['class'] = (string) $this->element['class'];		}		if ((string) $this->element['readonly'] == 'true')		{			$attributes['readonly'] = 'readonly';		}		if ((string) $this->element['disabled'] == 'true')		{			$attributes['disabled'] = 'disabled';		}		if ($this->element['onchange'])		{			$attributes['onchange'] = (string) $this->element['onchange'];		}		if ($this->required)		{			$attributes['required'] = 'required';			$attributes['aria-required'] = 'true';		}		// Handle the special case for "now".		if (strtoupper($this->value) == 'NOW')		{			$this->value = strftime($format);		}		// Get some system objects.		$config = JFactory::getConfig();		$user = JFactory::getUser();		// If a known filter is given use it.		switch (strtoupper((string) $this->element['filter']))		{			case 'SERVER_UTC':				// Convert a date to UTC based on the server timezone.				if ((int) $this->value)				{					// Get a date object based on the correct timezone.					$date = JFactory::getDate($this->value, 'UTC');					$date->setTimezone(new DateTimeZone($config->get('offset')));					// Transform the date string.					$this->value = $date->format('Y-m-d H:i:s', true, false);				}				break;			case 'USER_UTC':				// Convert a date to UTC based on the user timezone.				if ((int) $this->value)				{					// Get a date object based on the correct timezone.					$date = JFactory::getDate($this->value, 'UTC');					$date->setTimezone(new DateTimeZone($user->getParam('timezone', $config->get('offset'))));					// Transform the date string.					$this->value = $date->format('Y-m-d H:i:s', true, false);				}				break;		}		return JHtml::_('calendar', $this->value, $this->name, $this->id, $format, $attributes);	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Sites class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiSites extends JMediawikiObject{	/**     * Method to get site information.     *     * @param   array    $siprop            The sysinfo properties to get.     * @param   string   $sifilteriw        Only local or only non local entries to return.     * @param   boolean  $sishowalldb       List all database servers.     * @param   boolean  $sinumberingroup   List the number of users in usergroups.     * @param   array    $siinlanguagecode  Language code for localized languages.     *     * @return  object     *     * @since   12.3     */	public function getSiteInfo(array $siprop = null, $sifilteriw = null, $sishowalldb = false, $sinumberingroup = false, array $siinlanguagecode = null)	{		// Build the request.		$path = '?action=query&meta=siteinfo';		if (isset($siprop))		{			$path .= '&siprop=' . $this->buildParameter($siprop);		}		if (isset($sifilteriw))		{			$path .= '&sifilteriw=' . $sifilteriw;		}		if ($sishowalldb)		{			$path .= '&sishowalldb=';		}		if ($sinumberingroup)		{			$path .= '&sinumberingroup=';		}		if (isset($siinlanguagecode))		{			$path .= '&siinlanguagecode=' . $this->buildParameter($siinlanguagecode);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get events from logs.     *     * @param   array    $leprop    List of properties to get.     * @param   string   $letype    Filter log actions to only this type.     * @param   string   $leaction  Filter log actions to only this type.     * @param   string   $letitle   Filter entries to those related to a page.     * @param   string   $leprefix  Filter entries that start with this prefix.     * @param   string   $letag     Filter entries with tag.     * @param   string   $leuser    Filter entries made by the given user.     * @param   string   $lestart   Starting timestamp.     * @param   string   $leend     Ending timestamp.     * @param   string   $ledir     Direction of enumeration.     * @param   integer  $lelimit   Event limit to return.     *     * @return  object     *     * @since   12.3     */	public function getEvents(array $leprop = null, $letype = null, $leaction = null, $letitle = null, $leprefix = null, $letag = null,		$leuser = null, $lestart = null, $leend = null, $ledir = null, $lelimit = null)	{		// Build the request		$path = '?action=query&list=logevents';		if (isset($leprop))		{			$path .= '&leprop=' . $this->buildParameter($leprop);		}		if (isset($letype))		{			$path .= '&letype=' . $letype;		}		if (isset($leaction))		{			$path .= '&leaction=' . $leaction;		}		if (isset($letitle))		{			$path .= '&letitle=' . $letitle;		}		if (isset($leprefix))		{			$path .= '&leprefix=' . $leprefix;		}		if (isset($letag))		{			$path .= '&letag=' . $letag;		}		if (isset($leuser))		{			$path .= '&leuser=' . $leuser;		}		if (isset($lestart))		{			$path .= '&lestart=' . $lestart;		}		if (isset($leend))		{			$path .= '&leend=' . $leend;		}		if (isset($ledir))		{			$path .= '&ledir=' . $ledir;		}		if (isset($lelimit))		{			$path .= '&lelimit=' . $lelimit;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get recent changes on a site.     *     * @param   string  $rcstart        Starting timestamp.     * @param   string  $rcend          Ending timestamp.     * @param   string  $rcdir          Direction of enumeration.     * @param   array   $rcnamespace    Filter changes to only this namespace(s).     * @param   string  $rcuser         Filter changes by this user.     * @param   string  $rcexcludeuser  Filter changes to exclude changes by this user.     * @param   string  $rctag          Filter changes by this tag.     * @param   array   $rcprop         Filter log actions to only this type.     * @param   array   $rctoken        Which token to obtain for each change.     * @param   array   $rcshow         Filter changes by this criteria.     * @param   string  $rclimit        Changes limit to return.     * @param   string  $rctype         Filter event by type of changes.     * @param   string  $rctoponly      Filter changes which are latest revision.     *     * @return  object     *     * @since   12.3     */	public function getRecentChanges($rcstart = null, $rcend = null, $rcdir = null, array $rcnamespace = null, $rcuser = null, $rcexcludeuser = null,		$rctag = null, array $rcprop = null, array $rctoken = null, array $rcshow = null, $rclimit = null, $rctype = null, $rctoponly = null)	{		// Build the request.		$path = '?action=query&list=recentchanges';		if (isset($rcstart))		{			$path .= '&rcstart=' . $rcstart;		}		if (isset($rcend))		{			$path .= '&rcend=' . $rcend;		}		if (isset($rcdir))		{			$path .= '&rcdir=' . $rcdir;		}		if (isset($rcnamespace))		{			$path .= '&rcnamespaces=' . $this->buildParameter($rcnamespace);		}		if (isset($rcuser))		{			$path .= '&rcuser=' . $rcuser;		}		if (isset($rcexcludeuser))		{			$path .= '&rcexcludeuser=' . $rcexcludeuser;		}		if (isset($rctag))		{			$path .= '&rctag=' . $rctag;		}		if (isset($rcprop))		{			$path .= '&rcprop=' . $this->buildParameter($rcprop);		}		if (isset($rctoken))		{			$path .= '&rctoken=' . $this->buildParameter($rctoken);		}		if (isset($rcshow))		{			$path .= '&rcshow=' . $this->buildParameter($rcshow);		}		if (isset($rclimit))		{			$path .= '&rclimit=' . $rclimit;		}		if (isset($rctype))		{			$path .= '&rctype=' . $rctype;		}		if (isset($rctoponly))		{			$path .= '&rctoponly=' . $rctoponly;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get protected titles on a site.     *     * @param   array    $ptnamespace  Only list titles in this namespace.     * @param   array    $ptlevel      Only list titles with these protection level.     * @param   integer  $ptlimit      Limit of pages to return.     * @param   string   $ptdir        Direction of enumeration.     * @param   string   $ptstart      Starting timestamp.     * @param   string   $ptend        Ending timestamp.     * @param   array    $ptprop       List of properties to get.     *     * @return  object     *     * @since   12.3     */	public function getProtectedTitles(array $ptnamespace = null, array $ptlevel = null, $ptlimit = null, $ptdir = null, $ptstart = null,		$ptend = null, array $ptprop = null)	{		// Build the request.		$path = '?action=query&list=protectedtitles';		if (isset($ptnamespace))		{			$path .= '&ptnamespace=' . $this->buildParameter($ptnamespace);		}		if (isset($ptlevel))		{			$path .= '&ptlevel=' . $this->buildParameter($ptlevel);		}		if (isset($ptlimit))		{			$path .= '&ptlimit=' . $ptlimit;		}		if (isset($ptdir))		{			$path .= '&ptdir=' . $ptdir;		}		if (isset($ptstart))		{			$path .= '&ptstart=' . $ptstart;		}		if (isset($ptend))		{			$path .= '&ptend=' . $ptend;		}		if (isset($ptprop))		{			$path .= '&ptprop=' . $this->buildParameter($ptprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Template installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterTemplate extends JAdapterInstance{	/**	 * Copy of the XML manifest file	 *	 * @var    string	 * @since  3.1	 */	protected $manifest = null;	/**	 * Name of the extension	 *	 * @var    string	 * @since  3.1	 * */	protected $name = null;	/**	 * The unique identifier for the extension (e.g. mod_login)	 *	 * @var    string	 * @since  3.1	 * */	protected $element = null;	/**	 * Method of system	 *	 * @var    string	 *	 * @since  3.1	 */	protected $route = 'install';	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path where to find language files.	 *	 * @return  JInstallerTemplate	 *	 * @since   3.1	 */	public function loadLanguage($path = null)	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent				->setPath(				'source',				($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/templates/' . $this->parent->extension->element			);		}		$this->manifest = $this->parent->getManifest();		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		$client = (string) $this->manifest->attributes()->client;		// Load administrator language if not set.		if (!$client)		{			$client = 'ADMINISTRATOR';		}		$extension = "tpl_$name";		$lang = JFactory::getLanguage();		$source = $path ? $path : ($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/templates/' . $name;		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', constant('JPATH_' . strtoupper($client)), null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', constant('JPATH_' . strtoupper($client)), $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get a database connector object		$db = $this->parent->getDbo();		$lang = JFactory::getLanguage();		$xml = $this->parent->getManifest();		// Get the client application target		if ($cname = (string) $xml->attributes()->client)		{			// Attempt to map the client to a base path			$client = JApplicationHelper::getClientInfo($cname, true);			if ($client === false)			{				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_UNKNOWN_CLIENT', $cname));				return false;			}			$basePath = $client->path;			$clientId = $client->id;		}		else		{			// No client attribute was found so we assume the site as the client			$cname = 'site';			$basePath = JPATH_SITE;			$clientId = 0;		}		// Set the extension's name		$name = JFilterInput::getInstance()->clean((string) $xml->name, 'cmd');		$element = strtolower(str_replace(" ", "_", $name));		$this->set('name', $name);		$this->set('element', $element);		// Check to see if a template by the same name is already installed.		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('template'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		try		{			$id = $db->loadResult();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_ROLLBACK'), $e->getMessage());			return false;		}		// Set the template root path		$this->parent->setPath('extension_root', $basePath . '/templates/' . $element);		// If it's on the fs...		if (file_exists($this->parent->getPath('extension_root')) && (!$this->parent->isOverwrite() || $this->parent->isUpgrade()))		{			$updateElement = $xml->update;			// Upgrade manually set or update tag detected			if ($this->parent->isUpgrade() || $updateElement)			{				// Force this one				$this->parent->setOverwrite(true);				$this->parent->setUpgrade(true);				if ($id)				{					// If there is a matching extension mark this as an update; semantics really					$this->route = 'update';				}			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is not set				// If we didn't have overwrite set, find an update function or find an update tag so let's call it safe				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT_TPL_INSTALL_ANOTHER_TEMPLATE_USING_DIRECTORY', JText::_('JLIB_INSTALLER_' . $this->route),						$this->parent->getPath('extension_root')					)				);				return false;			}		}		/*		 * If the template directory already exists, then we will assume that the template is already		 * installed or another template is using that directory.		 */		if (file_exists($this->parent->getPath('extension_root')) && !$this->parent->isOverwrite())		{			JLog::add(				JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_ANOTHER_TEMPLATE_USING_DIRECTORY', $this->parent->getPath('extension_root')),				JLog::WARNING, 'jerror'			);			return false;		}		// If the template directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_root')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_root')))			{				$this->parent					->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_FAILED_CREATE_DIRECTORY', $this->parent->getPath('extension_root')));				return false;			}		}		// If we created the template directory and will want to remove it if we have to roll back		// the installation, let's add it to the installation step stack		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_root')));		}		// Copy all the necessary files		if ($this->parent->parseFiles($xml->files, -1) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		if ($this->parent->parseFiles($xml->images, -1) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		if ($this->parent->parseFiles($xml->css, -1) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseMedia($xml->media);		$this->parent->parseLanguages($xml->languages, $clientId);		// Get the template description		$this->parent->set('message', JText::_((string) $xml->description));		// Lastly, we will copy the manifest file to its appropriate place.		if (!$this->parent->copyManifest(-1))		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_TPL_INSTALL_COPY_SETUP'));			return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Extension Registration		 * ---------------------------------------------------------------------------------------------		 */		$row = JTable::getInstance('extension');		if ($this->route == 'update' && $id)		{			$row->load($id);		}		else		{			$row->type = 'template';			$row->element = $this->get('element');			// There is no folder for templates			$row->folder = '';			$row->enabled = 1;			$row->protected = 0;			$row->access = 1;			$row->client_id = $clientId;			$row->params = $this->parent->getParams();			// Custom data			$row->custom_data = '';		}		// Name might change in an update		$row->name = $this->get('name');		$row->manifest_cache = $this->parent->generateManifestCache();		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_ROLLBACK', $db->stderr(true)));			return false;		}		if ($this->route == 'install')		{			$debug = $lang->setDebug(false);			$columns = array($db->quoteName('template'),				$db->quoteName('client_id'),				$db->quoteName('home'),				$db->quoteName('title'),				$db->quoteName('params')			);			$values = array(				$db->quote($row->element), $clientId, $db->quote(0),				$db->quote(JText::sprintf('JLIB_INSTALLER_DEFAULT_STYLE', JText::_($this->get('name')))),				$db->quote($row->params) );			$lang->setDebug($debug);			// Insert record in #__template_styles			$query = $db->getQuery(true)				->insert($db->quoteName('#__template_styles'))				->columns($columns)				->values(implode(',', $values));			$db->setQuery($query);			// There is a chance this could fail but we don't care...			$db->execute();		}		return $row->get('extension_id');	}	/**	 * Custom update method for components	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function update()	{		$this->route = 'update';		return $this->install();	}	/**	 * Custom uninstall method	 *	 * @param   integer  $id  The extension ID	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$retval = true;		// First order of business will be to load the template object table from the database.		// This should give us the necessary information to proceed.		$row = JTable::getInstance('extension');		if (!$row->load((int) $id) || !strlen($row->element))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_ERRORUNKOWNEXTENSION'), JLog::WARNING, 'jerror');			return false;		}		// Is the template we are trying to uninstall a core one?		// Because that is not a good idea...		if ($row->protected)		{			JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_WARNCORETEMPLATE', $row->name), JLog::WARNING, 'jerror');			return false;		}		$name = $row->element;		$clientId = $row->client_id;		// For a template the id will be the template name which represents the subfolder of the templates folder that the template resides in.		if (!$name)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_TEMPLATE_ID_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		// Deny remove default template		$db = $this->parent->getDbo();		$query = "SELECT COUNT(*) FROM #__template_styles WHERE home = '1' AND template = " . $db->quote($name);		$db->setQuery($query);		if ($db->loadResult() != 0)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_TEMPLATE_DEFAULT'), JLog::WARNING, 'jerror');			return false;		}		// Get the template root path		$client = JApplicationHelper::getClientInfo($clientId);		if (!$client)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_INVALID_CLIENT'), JLog::WARNING, 'jerror');			return false;		}		$this->parent->setPath('extension_root', $client->path . '/templates/' . strtolower($name));		$this->parent->setPath('source', $this->parent->getPath('extension_root'));		// We do findManifest to avoid problem when uninstalling a list of extensions: getManifest cache its manifest file		$this->parent->findManifest();		$manifest = $this->parent->getManifest();		if (!($manifest instanceof SimpleXMLElement))		{			// Kill the extension entry			$row->delete($row->extension_id);			unset($row);			// Make sure we delete the folders			JFolder::delete($this->parent->getPath('extension_root'));			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_INVALID_NOTFOUND_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// Remove files		$this->parent->removeFiles($manifest->media);		$this->parent->removeFiles($manifest->languages, $clientId);		// Delete the template directory		if (JFolder::exists($this->parent->getPath('extension_root')))		{			$retval = JFolder::delete($this->parent->getPath('extension_root'));		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_TEMPLATE_DIRECTORY'), JLog::WARNING, 'jerror');			$retval = false;		}		// Set menu that assigned to the template back to default template		$query = 'UPDATE #__menu'			. ' SET template_style_id = 0'			. ' WHERE template_style_id in ('			. '	SELECT s.id FROM #__template_styles s'			. ' WHERE s.template = ' . $db->quote(strtolower($name)) . ' AND s.client_id = ' . $clientId . ')';		$db->setQuery($query);		$db->execute();		$query = 'DELETE FROM #__template_styles WHERE template = ' . $db->quote($name) . ' AND client_id = ' . $clientId;		$db->setQuery($query);		$db->execute();		$row->delete($row->extension_id);		unset($row);		return $retval;	}	/**	 * Discover existing but uninstalled templates	 *	 * @return  array  JExtensionTable list	 */	public function discover()	{		$results = array();		$site_list = JFolder::folders(JPATH_SITE . '/templates');		$admin_list = JFolder::folders(JPATH_ADMINISTRATOR . '/templates');		$site_info = JApplicationHelper::getClientInfo('site', true);		$admin_info = JApplicationHelper::getClientInfo('administrator', true);		foreach ($site_list as $template)		{			if ($template == 'system')			{				// Ignore special system template				continue;			}			$manifest_details = JInstaller::parseXMLInstallFile(JPATH_SITE . "/templates/$template/templateDetails.xml");			$extension = JTable::getInstance('extension');			$extension->set('type', 'template');			$extension->set('client_id', $site_info->id);			$extension->set('element', $template);			$extension->set('folder', '');			$extension->set('name', $template);			$extension->set('state', -1);			$extension->set('manifest_cache', json_encode($manifest_details));			$extension->set('params', '{}');			$results[] = $extension;		}		foreach ($admin_list as $template)		{			if ($template == 'system')			{				// Ignore special system template				continue;			}			$manifest_details = JInstaller::parseXMLInstallFile(JPATH_ADMINISTRATOR . "/templates/$template/templateDetails.xml");			$extension = JTable::getInstance('extension');			$extension->set('type', 'template');			$extension->set('client_id', $admin_info->id);			$extension->set('element', $template);			$extension->set('folder', '');			$extension->set('name', $template);			$extension->set('state', -1);			$extension->set('manifest_cache', json_encode($manifest_details));			$extension->set('params', '{}');			$results[] = $extension;		}		return $results;	}	/**	 * Discover_install	 * Perform an install for a discovered extension	 *	 * @return boolean	 *	 * @since 3.1	 */	public function discover_install()	{		// Templates are one of the easiest		// If its not in the extensions table we just add it		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/templates/' . $this->parent->extension->element . '/templateDetails.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$description = (string) $this->parent->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		$data = new JObject;		foreach ($manifest_details as $key => $value)		{			$data->set($key, $value);		}		$this->parent->extension->params = $this->parent->getParams();		if ($this->parent->extension->store())		{			$db = $this->parent->getDbo();			// Insert record in #__template_styles			$lang = JFactory::getLanguage();			$debug = $lang->setDebug(false);			$columns = array($db->quoteName('template'),				$db->quoteName('client_id'),				$db->quoteName('home'),				$db->quoteName('title'),				$db->quoteName('params')			);			$query = $db->getQuery(true)				->insert($db->quoteName('#__template_styles'))				->columns($columns)				->values(					$db->quote($this->parent->extension->element)						. ',' . $db->quote($this->parent->extension->client_id)						. ',' . $db->quote(0)						. ',' . $db->quote(JText::sprintf('JLIB_INSTALLER_DEFAULT_STYLE', $this->parent->extension->name))						. ',' . $db->quote($this->parent->extension->params)				);			$lang->setDebug($debug);			$db->setQuery($query);			$db->execute();			return $this->parent->extension->get('extension_id');		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally.		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/templates/' . $this->parent->extension->element . '/templateDetails.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterTemplate instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerTemplate extends JInstallerAdapterTemplate{}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Set the available masks for the routing mode */const JROUTER_MODE_RAW = 0;const JROUTER_MODE_SEF = 1;/** * Class to create and parse routes * * @package     Joomla.Platform * @subpackage  Application * @since       11.1 */class JRouter{	/**	 * The rewrite mode	 *	 * @var    integer	 * @since  11.1	 */	protected $mode = null;	/**	 * The rewrite mode	 *	 * @var    integer	 * @since  11.1	 * @deprecated use $mode declare as private	 */	protected $_mode = null;	/**	 * An array of variables	 *	 * @var     array	 * @since   11.1	 */	protected $vars = array();	/**	 * An array of variables	 *	 * @var     array	 * @since   11.1	 * @deprecated use $vars declare as private	 */	protected $_vars = array();	/**	 * An array of rules	 *	 * @var    array	 * @since  11.1	 */	protected $rules = array(		'build' => array(),		'parse' => array()	);	/**	 * An array of rules	 *	 * @var    array	 * @since  11.1	 * @deprecated use $rules declare as private	 */	protected $_rules = array(		'build' => array(),		'parse' => array()	);	/**	 * @var    array  JRouter instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor	 *	 * @param   array  $options  Array of options	 *	 * @since 11.1	 */	public function __construct($options = array())	{		if (array_key_exists('mode', $options))		{			$this->_mode = $options['mode'];		}		else		{			$this->_mode = JROUTER_MODE_RAW;		}	}	/**	 * Returns the global JRouter object, only creating it if it	 * doesn't already exist.	 *	 * @param   string  $client   The name of the client	 * @param   array   $options  An associative array of options	 *	 * @return  JRouter A JRouter object.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($client, $options = array())	{		if (empty(self::$instances[$client]))		{			// Create a JRouter object			$classname = 'JRouter' . ucfirst($client);			if (!class_exists($classname))			{				JLog::add('Non-autoloadable JRouter subclasses are deprecated.', JLog::WARNING, 'deprecated');				// Load the router object				$info = JApplicationHelper::getClientInfo($client, true);				if (is_object($info))				{					$path = $info->path . '/includes/router.php';					if (file_exists($path))					{						include_once $path;					}				}			}			if (class_exists($classname))			{				self::$instances[$client] = new $classname($options);			}			else			{				throw new RuntimeException(JText::sprintf('JLIB_APPLICATION_ERROR_ROUTER_LOAD', $client), 500);			}		}		return self::$instances[$client];	}	/**	 * Function to convert a route to an internal URI	 *	 * @param   JURI  $uri  The uri.	 *	 * @return  array	 *	 * @since   11.1	 */	public function parse($uri)	{		$vars = array();		// Process the parsed variables based on custom defined rules		$vars = $this->_processParseRules($uri);		// Parse RAW URL		if ($this->_mode == JROUTER_MODE_RAW)		{			$vars += $this->_parseRawRoute($uri);		}		// Parse SEF URL		if ($this->_mode == JROUTER_MODE_SEF)		{			$vars += $this->_parseSefRoute($uri);		}		return array_merge($this->getVars(), $vars);	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 *	 * @since   11.1	 */	public function build($url)	{		// Create the URI object		$uri = $this->_createURI($url);		// Process the uri information based on custom defined rules		$this->_processBuildRules($uri);		// Build RAW URL		if ($this->_mode == JROUTER_MODE_RAW)		{			$this->_buildRawRoute($uri);		}		// Build SEF URL : mysite/route/index.php?var=x		if ($this->_mode == JROUTER_MODE_SEF)		{			$this->_buildSefRoute($uri);		}		return $uri;	}	/**	 * Get the router mode	 *	 * @return  integer	 *	 * @since   11.1	 */	public function getMode()	{		return $this->_mode;	}	/**	 * Set the router mode	 *	 * @param   integer  $mode  The routing mode.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setMode($mode)	{		$this->_mode = $mode;	}	/**	 * Set a router variable, creating it if it doesn't exist	 *	 * @param   string   $key     The name of the variable	 * @param   mixed    $value   The value of the variable	 * @param   boolean  $create  If True, the variable will be created if it doesn't exist yet	 *	 * @return  void	 *	 * @since   11.1	 */	public function setVar($key, $value, $create = true)	{		if ($create || array_key_exists($key, $this->_vars))		{			$this->_vars[$key] = $value;		}	}	/**	 * Set the router variable array	 *	 * @param   array    $vars   An associative array with variables	 * @param   boolean  $merge  If True, the array will be merged instead of overwritten	 *	 * @return  void	 *	 * @since   11.1	 */	public function setVars($vars = array(), $merge = true)	{		if ($merge)		{			$this->_vars = array_merge($this->_vars, $vars);		}		else		{			$this->_vars = $vars;		}	}	/**	 * Get a router variable	 *	 * @param   string  $key  The name of the variable	 *	 * @return  mixed  Value of the variable	 *	 * @since   11.1	 */	public function getVar($key)	{		$result = null;		if (isset($this->_vars[$key]))		{			$result = $this->_vars[$key];		}		return $result;	}	/**	 * Get the router variable array	 *	 * @return  array  An associative array of router variables	 *	 * @since   11.1	 */	public function getVars()	{		return $this->_vars;	}	/**	 * Attach a build rule	 *	 * @param   callback  $callback  The function to be called	 *	 * @return  void	 *	 * @since   11.1.	 */	public function attachBuildRule($callback)	{		$this->_rules['build'][] = $callback;	}	/**	 * Attach a parse rule	 *	 * @param   callback  $callback  The function to be called.	 *	 * @return  void	 *	 * @since   11.1	 */	public function attachParseRule($callback)	{		$this->_rules['parse'][] = $callback;	}	/**	 * Function to convert a raw route to an internal URI	 *	 * @param   JURI  $uri  The raw route	 *	 * @return  boolean	 *	 * @since   11.1	 */	protected function _parseRawRoute($uri)	{		return false;	}	/**	 * Function to convert a sef route to an internal URI	 *	 * @param   JURI  $uri  The sef URI	 *	 * @return  string  Internal URI	 *	 * @since   11.1	 */	protected function _parseSefRoute($uri)	{		return false;	}	/**	 * Function to build a raw route	 *	 * @param   JURI  $uri  The internal URL	 *	 * @return  string  Raw Route	 *	 * @since   11.1	 */	protected function _buildRawRoute($uri)	{	}	/**	 * Function to build a sef route	 *	 * @param   JURI  $uri  The uri	 *	 * @return  string  The SEF route	 *	 * @since   11.1	 */	protected function _buildSefRoute($uri)	{	}	/**	 * Process the parsed router variables based on custom defined rules	 *	 * @param   JURI  $uri  The URI to parse	 *	 * @return  array  The array of processed URI variables	 *	 * @since   11.1	 */	protected function _processParseRules($uri)	{		$vars = array();		foreach ($this->_rules['parse'] as $rule)		{			$vars += call_user_func_array($rule, array(&$this, &$uri));		}		return $vars;	}	/**	 * Process the build uri query data based on custom defined rules	 *	 * @param   JURI  $uri  The URI	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _processBuildRules($uri)	{		foreach ($this->_rules['build'] as $rule)		{			call_user_func_array($rule, array(&$this, &$uri));		}	}	/**	 * Create a uri based on a full or partial url string	 *	 * @param   string  $url  The URI	 *	 * @return  JURI	 *	 * @since   11.1	 */	protected function _createURI($url)	{		// Create full URL if we are only appending variables to it		if (substr($url, 0, 1) == '&')		{			$vars = array();			if (strpos($url, '&amp;') !== false)			{				$url = str_replace('&amp;', '&', $url);			}			parse_str($url, $vars);			$vars = array_merge($this->getVars(), $vars);			foreach ($vars as $key => $var)			{				if ($var == "")				{					unset($vars[$key]);				}			}			$url = 'index.php?' . JURI::buildQuery($vars);		}		// Decompose link into url component parts		return new JURI($url);	}	/**	 * Encode route segments	 *	 * @param   array  $segments  An array of route segments	 *	 * @return  array  Array of encoded route segments	 *	 * @since   11.1	 */	protected function _encodeSegments($segments)	{		$total = count($segments);		for ($i = 0; $i < $total; $i++)		{			$segments[$i] = str_replace(':', '-', $segments[$i]);		}		return $segments;	}	/**	 * Decode route segments	 *	 * @param   array  $segments  An array of route segments	 *	 * @return  array  Array of decoded route segments	 *	 * @since 11.1	 */	protected function _decodeSegments($segments)	{		$total = count($segments);		for ($i = 0; $i < $total; $i++)		{			$segments[$i] = preg_replace('/-/', ':', $segments[$i], 1);		}		return $segments;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */abstract class JHtmlModules{	/**	 * Builds an array of template options	 *	 * @param   integer  $clientId  The client id	 * @param   string   $state     The state of the template	 *	 * @return  array	 */	public static function templates($clientId = 0, $state = '')	{		$options   = array();		$templates = ModulesHelper::getTemplates($clientId, $state);		foreach ($templates as $template)		{			$options[]	= JHtml::_('select.option', $template->element, $template->name);		}		return $options;	}	/**	 * Builds an array of template type options	 *	 * @return  array	 */	public static function types()	{		$options = array();		$options[] = JHtml::_('select.option', 'user', 'COM_MODULES_OPTION_POSITION_USER_DEFINED');		$options[] = JHtml::_('select.option', 'template', 'COM_MODULES_OPTION_POSITION_TEMPLATE_DEFINED');		return $options;	}	/**	 * Builds an array of template state options	 *	 * @return  array	 */	public static function templateStates()	{		$options = array();		$options[] = JHtml::_('select.option', '1', 'JENABLED');		$options[] = JHtml::_('select.option', '0', 'JDISABLED');		return $options;	}	/**	 * Returns a published state on a grid	 *	 * @param   integer  $value     The state value.	 * @param   integer  $i         The row index	 * @param   boolean  $enabled   An optional setting for access control on the action.	 * @param   string   $checkbox  An optional prefix for checkboxes.	 *	 * @return  string        The Html code	 *	 * @see     JHtmlJGrid::state	 * @since   1.7.1	 */	public static function state($value, $i, $enabled = true, $checkbox = 'cb')	{		$states	= array(			1 => array(				'unpublish',				'COM_MODULES_EXTENSION_PUBLISHED_ENABLED',				'COM_MODULES_HTML_UNPUBLISH_ENABLED',				'COM_MODULES_EXTENSION_PUBLISHED_ENABLED',				true,				'publish',				'publish'			),			0 => array(				'publish',				'COM_MODULES_EXTENSION_UNPUBLISHED_ENABLED',				'COM_MODULES_HTML_PUBLISH_ENABLED',				'COM_MODULES_EXTENSION_UNPUBLISHED_ENABLED',				true,				'unpublish',				'unpublish'			),			-1 => array(				'unpublish',				'COM_MODULES_EXTENSION_PUBLISHED_DISABLED',				'COM_MODULES_HTML_UNPUBLISH_DISABLED',				'COM_MODULES_EXTENSION_PUBLISHED_DISABLED',				true,				'warning',				'warning'			),			-2 => array(				'publish',				'COM_MODULES_EXTENSION_UNPUBLISHED_DISABLED',				'COM_MODULES_HTML_PUBLISH_DISABLED',				'COM_MODULES_EXTENSION_UNPUBLISHED_DISABLED',				true,				'unpublish',				'unpublish'			),		);		return JHtml::_('jgrid.state', $states, $value, $i, 'modules.', $enabled, true, $checkbox);	}	/**	 * Display a batch widget for the module position selector.	 *	 * @param   integer  $clientId  The client ID	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function positions($clientId)	{		// Create the copy/move options.		$options = array(			JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),			JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE'))		);		// Create the batch selector to change select the category by which to move or copy.		$lines = array(			'<label id="batch-choose-action-lbl" for="batch-choose-action">',			JText::_('COM_MODULES_BATCH_POSITION_LABEL'),			'</label>',			'<div id="batch-choose-action" class="control-group">',			'<select name="batch[position_id]" class="inputbox" id="batch-position-id">',			'<option value="">' . JText::_('JSELECT') . '</option>',			'<option value="nochange">' . JText::_('COM_MODULES_BATCH_POSITION_NOCHANGE') . '</option>',			'<option value="noposition">' . JText::_('COM_MODULES_BATCH_POSITION_NOPOSITION') . '</option>',			JHtml::_('select.options',	self::positionList($clientId)),			'</select>',			'</div>', '<div id="batch-move-copy" class="control-group radio">',			JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'),			'</div>'		);		return implode("\n", $lines);	}	/**	 * Method to get the field options.	 *	 * @param   integer  $clientId  The client ID	 *	 * @return  array  The field option objects.	 *	 * @since   2.5	 */	public static function positionList($clientId = 0)	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('DISTINCT(position) as value')			->select('position as text')			->from($db->quoteName('#__modules'))			->where($db->quoteName('client_id') . ' = ' . (int) $clientId)			->order('position');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pop the first item off the array if it's blank		if (count($options))		{			if (strlen($options[0]->text) < 1)			{				array_shift($options);			}		}		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$canDo = UsersHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'group.cancel' || document.formvalidator.isValid(document.id('group-form')))		{			Joomla.submitform(task, document.getElementById('group-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_users&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="group-form" class="form-validate form-horizontal">	<fieldset>		<legend><?php echo JText::_('COM_USERS_USERGROUP_DETAILS');?></legend>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('title'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('title'); ?>			</div>		</div>		<div class="control-group">			<?php $parent_id = $this->form->getField('parent_id');?>			<?php if (!$parent_id->hidden) : ?>				<div class="control-label">					<?php echo $parent_id->label; ?>				</div>			<?php endif;?>			<div class="controls">				<?php echo $parent_id->input; ?>			</div>		</div>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.combobox');$hasContent = empty($this->item->module) || $this->item->module == 'custom' || $this->item->module == 'mod_custom';$script = "Joomla.submitbutton = function(task)	{			if (task == 'module.cancel' || document.formvalidator.isValid(document.id('module-form'))) {";if ($hasContent){	$script .= $this->form->getField('content')->save();}$script .= "	Joomla.submitform(task, document.getElementById('module-form'));				if (self != top)				{					window.top.setTimeout('window.parent.SqueezeBox.close()', 1000);				}			}	}";JFactory::getDocument()->addScriptDeclaration($script);?><div class="module-edit"><form action="<?php echo JRoute::_('index.php?option=com_modules&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="module-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('JDETAILS'); ?></legend>			<ul class="adminformlist">			<li><?php echo $this->form->getLabel('title'); ?>			<?php echo $this->form->getInput('title'); ?></li>			<li><?php echo $this->form->getLabel('showtitle'); ?>			<?php echo $this->form->getInput('showtitle'); ?></li>			<li><?php echo $this->form->getLabel('position'); ?>			<?php echo $this->form->getInput('custom_position'); ?>			<label id="jform_custom_position-lbl" for="jform_custom_position" class="element-invisible"><?php echo JText::_('TPL_HATHOR_COM_MODULES_CUSTOM_POSITION_LABEL');?></label>			<?php echo $this->form->getInput('position'); ?></li>			<?php if ((string) $this->item->xml->name != 'Login Form') : ?>			<li><?php echo $this->form->getLabel('published'); ?>			<?php echo $this->form->getInput('published'); ?></li>			<?php endif; ?>			<li><?php echo $this->form->getLabel('access'); ?>			<?php echo $this->form->getInput('access'); ?></li>			<li><?php echo $this->form->getLabel('ordering'); ?>			<?php echo $this->form->getInput('ordering'); ?></li>			<?php if ((string) $this->item->xml->name != 'Login Form') : ?>			<li><?php echo $this->form->getLabel('publish_up'); ?>			<?php echo $this->form->getInput('publish_up'); ?></li>			<li><?php echo $this->form->getLabel('publish_down'); ?>			<?php echo $this->form->getInput('publish_down'); ?></li>			<?php endif; ?>			<li><?php echo $this->form->getLabel('language'); ?>			<?php echo $this->form->getInput('language'); ?></li>			<li><?php echo $this->form->getLabel('note'); ?>			<?php echo $this->form->getInput('note'); ?></li>			<?php if ($this->item->id) : ?>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>			<?php endif; ?>			<li><?php echo $this->form->getLabel('module'); ?>			<?php echo $this->form->getInput('module'); ?>			<span class="faux-input"><?php if ($this->item->xml) echo ($text = (string) $this->item->xml->name) ? JText::_($text) : $this->item->module;else echo JText::_(COM_MODULES_ERR_XML);?></span></li>			<li><?php echo $this->form->getLabel('client_id'); ?>			<input type="text" size="35" id="jform_client_id" value="<?php echo $this->item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>	" class="readonly" readonly="readonly" />			<?php echo $this->form->getInput('client_id'); ?></li>			</ul>			<div class="clr"></div>			<?php if ($this->item->xml) : ?>				<?php if ($text = trim($this->item->xml->description)) : ?>					<span class="faux-label">						<?php echo JText::_('COM_MODULES_MODULE_DESCRIPTION'); ?>					</span>					<div class="clr"></div>					<div class="readonly mod-desc extdescript">						<?php echo JText::_($text); ?>					</div>				<?php endif; ?>			<?php else : ?>				<?php echo JText::_('COM_MODULES_ERR_XML'); ?>			<?php endif; ?>			<div class="clr"></div>		</fieldset>	</div>	<div class="col options-section">	<?php echo JHtml::_('sliders.start', 'module-sliders'); ?>		<?php echo $this->loadTemplate('options'); ?>	<?php echo JHtml::_('sliders.end'); ?>	</div>	<?php if ($hasContent) : ?>		<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('COM_MODULES_CUSTOM_OUTPUT'); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('content'); ?>			<div class="clr"></div>				<?php echo $this->form->getInput('content'); ?></li>			</ul>		</fieldset>		</div>	<?php endif; ?>	<?php if ($this->item->client_id == 0) :?>	<div class="col main-section">		<?php echo $this->loadTemplate('assignment'); ?>	</div>	<?php endif; ?>	<div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content categories view. * * @package     Joomla.Site * @subpackage  com_contact * @since       1.6 */class ContactViewCategories extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	protected $pagination = null;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		$parent		= $this->get('Parent');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		if ($items === false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		$params = &$state->params;		$items = array($parent->id => $items);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevelcat = $params->get('maxLevelcat', -1);		$this->params = &$params;		$this->parent = &$parent;		$this->items = &$items;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->def('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTACT_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Authentication.joomla * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla Authentication plugin * * @package     Joomla.Plugin * @subpackage  Authentication.joomla * @since       1.5 */class PlgAuthenticationJoomla extends JPlugin{	/**	 * This method should handle any authentication and report back to the subject	 *	 * @access	public	 * @param   array  Array holding the user credentials	 * @param   array  Array of extra options	 * @param   object	Authentication response object	 * @return  boolean	 * @since 1.5	 */	public function onUserAuthenticate($credentials, $options, &$response)	{		$response->type = 'Joomla';		// Joomla does not like blank passwords		if (empty($credentials['password']))		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_EMPTY_PASS_NOT_ALLOWED');			return false;		}		// Get a database object		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('id, password')			->from('#__users')			->where('username=' . $db->quote($credentials['username']));		$db->setQuery($query);		$result = $db->loadObject();		if ($result)		{			$parts	= explode(':', $result->password);			$crypt	= $parts[0];			$salt	= @$parts[1];			$testcrypt = JUserHelper::getCryptedPassword($credentials['password'], $salt);			if ($crypt == $testcrypt)			{				$user = JUser::getInstance($result->id); // Bring this in line with the rest of the system				$response->email = $user->email;				$response->fullname = $user->name;				if (JFactory::getApplication()->isAdmin())				{					$response->language = $user->getParam('admin_language');				}				else {					$response->language = $user->getParam('language');				}				$response->status = JAuthentication::STATUS_SUCCESS;				$response->error_message = '';			} else {				$response->status = JAuthentication::STATUS_FAILURE;				$response->error_message = JText::_('JGLOBAL_AUTH_INVALID_PASS');			}		}		else		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_NO_USER');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink controller class. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.6 */class WeblinksControllerWeblink extends JControllerForm{	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('filter_category_id'), 'int');		$allow = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow = $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method to check if you can add a new record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return JFactory::getUser()->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   1.7	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Weblink', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_weblinks&view=weblinks' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return	void	 * @since	1.6	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		if ($task == 'save')		{			$this->setRedirect(JRoute::_('index.php?option=com_weblinks&view=weblinks', false));		}	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.sef * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! SEF Plugin * * @package     Joomla.Plugin * @subpackage  System.sef * @since       1.5 */class PlgSystemSef extends JPlugin{	/**	 * Add the canonical uri to the head	 *	 * @return  void	 *	 * @since   3.0	 */	public function onAfterRoute()	{		$app = JFactory::getApplication();		$doc = JFactory::getDocument();		if ($app->getName() != 'site' || $doc->getType() !== 'html')		{			return true;		}		$router = $app->getRouter();		$uri     = JUri::getInstance();		$domain  = $this->params->get('domain');		if ($domain === null || $domain === '')		{			$domain = $uri->toString(array('scheme', 'host', 'port'));		}		$parsed = $router->parse($uri);		$fakelink = 'index.php?' . http_build_query($parsed);		$link = $domain . JRoute::_($fakelink, false);		if ($uri !== $link)		{			$doc->addHeadLink(htmlspecialchars($link), 'canonical');		}	}	/**	 * Converting the site URL to fit to the HTTP request	 *	 * @return  void	 */	public function onAfterRender()	{		$app = JFactory::getApplication();		if ($app->getName() != 'site' || $app->getCfg('sef') == '0')		{			return true;		}		// Replace src links		$base   = JURI::base(true).'/';		$buffer = JResponse::getBody();		$regex  = '#href="index.php\?([^"]*)#m';		$buffer = preg_replace_callback($regex, array('PlgSystemSef', 'route'), $buffer);		$this->checkBuffer($buffer);		$protocols = '[a-zA-Z0-9]+:'; //To check for all unknown protocals (a protocol must contain at least one alpahnumeric fillowed by :		$regex     = '#(src|href|poster)="(?!/|' . $protocols . '|\#|\')([^"]*)"#m';		$buffer    = preg_replace($regex, "$1=\"$base\$2\"", $buffer);		$this->checkBuffer($buffer);		$regex  = '#(onclick="window.open\(\')(?!/|' . $protocols . '|\#)([^/]+[^\']*?\')#m';		$buffer = preg_replace($regex, '$1' . $base . '$2', $buffer);		$this->checkBuffer($buffer);		// ONMOUSEOVER / ONMOUSEOUT		$regex  = '#(onmouseover|onmouseout)="this.src=([\']+)(?!/|' . $protocols . '|\#|\')([^"]+)"#m';		$buffer = preg_replace($regex, '$1="this.src=$2' . $base .'$3$4"', $buffer);		$this->checkBuffer($buffer);		// Background image		$regex  = '#style\s*=\s*[\'\"](.*):\s*url\s*\([\'\"]?(?!/|' . $protocols . '|\#)([^\)\'\"]+)[\'\"]?\)#m';		$buffer = preg_replace($regex, 'style="$1: url(\'' . $base .'$2$3\')', $buffer);		$this->checkBuffer($buffer);		// OBJECT <param name="xx", value="yy"> -- fix it only inside the <param> tag		$regex  = '#(<param\s+)name\s*=\s*"(movie|src|url)"[^>]\s*value\s*=\s*"(?!/|' . $protocols . '|\#|\')([^"]*)"#m';		$buffer = preg_replace($regex, '$1name="$2" value="' . $base . '$3"', $buffer);		$this->checkBuffer($buffer);		// OBJECT <param value="xx", name="yy"> -- fix it only inside the <param> tag		$regex  = '#(<param\s+[^>]*)value\s*=\s*"(?!/|' . $protocols . '|\#|\')([^"]*)"\s*name\s*=\s*"(movie|src|url)"#m';		$buffer = preg_replace($regex, '<param value="' . $base .'$2" name="$3"', $buffer);		$this->checkBuffer($buffer);		// OBJECT data="xx" attribute -- fix it only in the object tag		$regex  = '#(<object\s+[^>]*)data\s*=\s*"(?!/|' . $protocols . '|\#|\')([^"]*)"#m';		$buffer = preg_replace($regex, '$1data="' . $base . '$2"$3', $buffer);		$this->checkBuffer($buffer);		JResponse::setBody($buffer);		return true;	}	/**	 * @param   string  $buffer	 *	 * @return  void	 */	private function checkBuffer($buffer)	{		if ($buffer === null)		{			switch (preg_last_error())			{				case PREG_BACKTRACK_LIMIT_ERROR:					$message = "PHP regular expression limit reached (pcre.backtrack_limit)";					break;				case PREG_RECURSION_LIMIT_ERROR:					$message = "PHP regular expression limit reached (pcre.recursion_limit)";					break;				case PREG_BAD_UTF8_ERROR:					$message = "Bad UTF8 passed to PCRE function";					break;				default:					$message = "Unknown PCRE error calling PCRE function";			}			throw new RuntimeException($message);		}	}	/**	 * Replaces the matched tags	 *	 * @param   array  &$matches  An array of matches (see preg_match_all)	 *	 * @return  string	 */	protected static function route(&$matches)	{		$url   = $matches[1];		$url   = str_replace('&amp;', '&', $url);		$route = JRoute::_('index.php?'.$url);		return 'href="' . $route;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.state');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" role="presentation" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_WEBLINKS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_WEBLINKS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_weblinks');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value='';document.id('batch-tag-id)').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('weblink.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a help popup window button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonHelp extends JToolbarButton{	/**	 * @var    string	Button type	 */	protected $_name = 'Help';	/**	 * Fetches the button HTML code.	 *	 * @param   string   $type       Unused string.	 * @param   string   $ref        The name of the help screen (its key reference).	 * @param   boolean  $com        Use the help file in the component directory.	 * @param   string   $override   Use this URL instead of any other.	 * @param   string   $component  Name of component to get Help (null for current component)	 *	 * @return  string	 *	 * @since   3.0	 */	public function fetchButton($type = 'Help', $ref = '', $com = false, $override = null, $component = null)	{		$text = JText::_('JTOOLBAR_HELP');		$class = 'question-sign';		$doTask = $this->_getCommand($ref, $com, $override, $component);		$html = "<button href=\"#\" onclick=\"$doTask\" rel=\"help\" class=\"btn btn-small\">\n";		$html .= "<i class=\"icon-$class\">\n";		$html .= "</i>\n";		$html .= "$text\n";		$html .= "</button>\n";		return $html;	}	/**	 * Get the button id	 *	 * Redefined from JButton class	 *	 * @return  string	Button CSS Id	 *	 * @since   3.0	 */	public function fetchId()	{		return $this->_parent->getName() . '-' . "help";	}	/**	 * Get the JavaScript command for the button	 *	 * @param   string   $ref        The name of the help screen (its key reference).	 * @param   boolean  $com        Use the help file in the component directory.	 * @param   string   $override   Use this URL instead of any other.	 * @param   string   $component  Name of component to get Help (null for current component)	 *	 * @return  string   JavaScript command string	 *	 * @since   3.0	 */	protected function _getCommand($ref, $com, $override, $component)	{		JHtml::_('behavior.framework');		// Get Help URL		$url = JHelp::createURL($ref, $com, $override, $component);		$url = htmlspecialchars($url, ENT_QUOTES);		$cmd = "Joomla.popupWindow('$url', '" . JText::_('JHELP', true) . "', 700, 500, 1)";		return $cmd;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User groups list controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerGroups extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_GROUPS';	/**	 * Proxy for getModel.	 *	 * @since   1.6	 */	public function getModel($name = 'Group', $prefix = 'UsersModel')	{		return parent::getModel($name, $prefix, array('ignore_request' => true));	}	/**	 * Removes an item.	 *	 * Overrides JControllerAdmin::delete to check the core.admin permission.	 *	 * @since   1.6	 */	public function delete()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::delete();	}	/**	 * Method to publish a list of records.	 *	 * Overrides JControllerAdmin::publish to check the core.admin permission.	 *	 * @since   1.6	 */	public function publish()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::publish();	}	/**	 * Changes the order of one or more records.	 *	 * Overrides JControllerAdmin::reorder to check the core.admin permission.	 *	 * @since   1.6	 */	public function reorder()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::reorder();	}	/**	 * Method to save the submitted ordering values for records.	 *	 * Overrides JControllerAdmin::saveorder to check the core.admin permission.	 *	 * @since   1.6	 */	public function saveorder()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::saveorder();	}	/**	 * Check in of one or more records.	 *	 * Overrides JControllerAdmin::checkin to check the core.admin permission.	 *	 * @since   1.6	 */	public function checkin()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::checkin();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @return  array  A named array * @return  array */function BannersBuildRoute(&$query){	$segments = array();	if (isset($query['task']))	{		$segments[] = $query['task'];		unset($query['task']);	}	if (isset($query['id']))	{		$segments[] = $query['id'];		unset($query['id']);	}	return $segments;}/** * @return  array  A named array * @param   array * * Formats: * * index.php?/banners/task/id/Itemid * * index.php?/banners/id/Itemid */function BannersParseRoute($segments){	$vars = array();	// view is always the first element of the array	$count = count($segments);	if ($count)	{		$count--;		$segment = array_shift($segments);		if (is_numeric($segment))		{			$vars['id'] = $segment;		}		else		{			$vars['task'] = $segment;		}	}	if ($count)	{		$count--;		$segment = array_shift($segments);		if (is_numeric($segment))		{			$vars['id'] = $segment;		}	}	return $vars;}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');/** * Package installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterPackage extends JAdapterInstance{	/**	 * Method of system	 *	 * @var    string	 *	 * @since  3.1	 */	protected $route = 'install';	/**	 * Load language from a path	 *	 * @param   string  $path  The path of the language.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path)	{		$this->manifest = $this->parent->getManifest();		$extension = 'pkg_' . strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->packagename, 'cmd'));		$lang = JFactory::getLanguage();		$source = $path;		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  int  The extension id	 *	 * @since   3.1	 */	public function install()	{		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extensions name		$filter = JFilterInput::getInstance();		$name = (string) $this->manifest->packagename;		$name = $filter->clean($name, 'cmd');		$this->set('name', $name);		$element = 'pkg_' . $filter->clean($this->manifest->packagename, 'cmd');		$this->set('element', $element);		// Get the component description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Set the installation path		$files = $this->manifest->files;		$group = (string) $this->manifest->packagename;		if (!empty($group))		{			$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/packages/' . implode(DIRECTORY_SEPARATOR, explode('/', $group)));		}		else		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_NO_PACK', JText::_('JLIB_INSTALLER_' . strtoupper($this->route))));			return false;		}		/*		 * If the package manifest already exists, then we will assume that the package is already		 * installed.		 */		if (file_exists(JPATH_MANIFESTS . '/packages/' . basename($this->parent->getPath('manifest'))))		{			// Look for an update function or update tag			$updateElement = $this->manifest->update;			// If $this->upgrade has already been set, or an update property exists in the manifest, update the extensions			if ($this->parent->isUpgrade() || $updateElement)			{				// Use the update route for all packaged extensions				$this->route = 'update';			}		}		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$this->scriptElement = $this->manifest->scriptfile;		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight($this->route, $this) === false)			{				// Preflight failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PACKAGE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		if ($folder = $files->attributes()->folder)		{			$source = $this->parent->getPath('source') . '/' . $folder;		}		else		{			$source = $this->parent->getPath('source');		}		// Install all necessary files		if (count($this->manifest->files->children()))		{			$i = 0;			foreach ($this->manifest->files->children() as $child)			{				$file = $source . '/' . $child;				if (is_dir($file))				{					// If it's actually a directory then fill it up					$package = array();					$package['dir'] = $file;					$package['type'] = JInstallerHelper::detectType($file);				}				else				{					// If it's an archive					$package = JInstallerHelper::unpack($file);				}				$tmpInstaller = new JInstaller;				$installResult = $tmpInstaller->{$this->route}($package['dir']);				if (!$installResult)				{					$this->parent->abort(						JText::sprintf(							'JLIB_INSTALLER_ABORT_PACK_INSTALL_ERROR_EXTENSION', JText::_('JLIB_INSTALLER_' . strtoupper($this->route)),							basename($file)						)					);					return false;				}				else				{					$results[$i] = array(						'name' => $tmpInstaller->manifest->name,						'result' => $installResult					);				}				$i++;			}		}		else		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_NO_FILES', JText::_('JLIB_INSTALLER_' . strtoupper($this->route))));			return false;		}		// Parse optional tags		$this->parent->parseLanguages($this->manifest->languages);		/*		 * ---------------------------------------------------------------------------------------------		 * Extension Registration		 * ---------------------------------------------------------------------------------------------		 */		$row = JTable::getInstance('extension');		$eid = $row->find(array('element' => strtolower($this->get('element')), 'type' => 'package'));		if ($eid)		{			$row->load($eid);		}		else		{			$row->name = $this->get('name');			$row->type = 'package';			$row->element = $this->get('element');			// There is no folder for modules			$row->folder = '';			$row->enabled = 1;			$row->protected = 0;			$row->access = 1;			$row->client_id = 0;			// Custom data			$row->custom_data = '';			$row->params = $this->parent->getParams();		}		// Update the manifest cache for the entry		$row->manifest_cache = $this->parent->generateManifestCache();		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_ROLLBACK', $row->getError()));			return false;		}		/*		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Run the custom method based on the route		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, $this->route))		{			if ($this->parent->manifestClass->{$this->route}($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		// Lastly, we will copy the manifest file to its appropriate place.		$manifest = array();		$manifest['src'] = $this->parent->getPath('manifest');		$manifest['dest'] = JPATH_MANIFESTS . '/packages/' . basename($this->parent->getPath('manifest'));		if (!$this->parent->copyFiles(array($manifest), true))		{			// Install failed, rollback changes			$this->parent->abort(				JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_COPY_SETUP', JText::_('JLIB_INSTALLER_ABORT_PACK_INSTALL_NO_FILES'))			);			return false;		}		// If there is a manifest script, let's copy it.		if ($this->get('manifest_script'))		{			// First, we have to create a folder for the script if one isn't present			if (!file_exists($this->parent->getPath('extension_root')))			{				JFolder::create($this->parent->getPath('extension_root'));			}			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_root') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']) || $this->parent->isOverwrite())			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PACKAGE_INSTALL_MANIFEST'));					return false;				}			}		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight($this->route, $this, $results);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $row->extension_id;	}	/**	 * Updates a package	 *	 * The only difference between an update and a full install	 * is how we handle the database	 *	 * @return  void	 *	 * @since   3.1	 */	public function update()	{		$this->route = 'update';		$this->install();	}	/**	 * Custom uninstall method	 *	 * @param   integer  $id  The id of the package to uninstall.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$row = null;		$retval = true;		$row = JTable::getInstance('extension');		$row->load($id);		if ($row->protected)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_WARNCOREPACK'), JLog::WARNING, 'jerror');			return false;		}		$manifestFile = JPATH_MANIFESTS . '/packages/' . $row->get('element') . '.xml';		$manifest = new JInstallerManifestPackage($manifestFile);		// Set the package root path		$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/packages/' . $manifest->packagename);		// Because packages may not have their own folders we cannot use the standard method of finding an installation manifest		if (!file_exists($manifestFile))		{			// TODO: Fail?			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_MISSINGMANIFEST'), JLog::WARNING, 'jerror');			return false;		}		$xml = simplexml_load_file($manifestFile);		// If we cannot load the XML file return false		if (!$xml)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_LOAD_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// Check for a valid XML root tag.		if ($xml->getName() != 'extension')		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_INVALID_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// If there is an manifest class file, let's load it		$this->scriptElement = $manifest->scriptfile;		$manifestScript = (string) $manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('extension_root') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $row->element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		ob_start();		ob_implicit_flush(false);		// Run uninstall if possible		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'uninstall'))		{			$this->parent->manifestClass->uninstall($this);		}		$msg = ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		$error = false;		foreach ($manifest->filelist as $extension)		{			$tmpInstaller = new JInstaller;			$id = $this->_getExtensionID($extension->type, $extension->id, $extension->client, $extension->group);			$client = JApplicationHelper::getClientInfo($extension->client, true);			if ($id)			{				if (!$tmpInstaller->uninstall($extension->type, $id, $client->id))				{					$error = true;					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_NOT_PROPER', basename($extension->filename)), JLog::WARNING, 'jerror');				}			}			else			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_UNKNOWN_EXTENSION'), JLog::WARNING, 'jerror');			}		}		// Remove any language files		$this->parent->removeFiles($xml->languages);		// Clean up manifest file after we're done if there were no errors		if (!$error)		{			JFile::delete($manifestFile);			$folder = $this->parent->getPath('extension_root');			if (JFolder::exists($folder))			{				JFolder::delete($folder);			}			$row->delete();		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_MANIFEST_NOT_REMOVED'), JLog::WARNING, 'jerror');		}		// Return the result up the line		return $retval;	}	/**	 * Gets the extension id.	 *	 * @param   string   $type    The extension type.	 * @param   string   $id      The name of the extension (the element field).	 * @param   integer  $client  The application id (0: Joomla CMS site; 1: Joomla CMS administrator).	 * @param   string   $group   The extension group (mainly for plugins).	 *	 * @return  integer	 *	 * @since   3.1	 */	protected function _getExtensionID($type, $id, $client, $group)	{		$db = $this->parent->getDbo();		$query = $db->getQuery(true)			->select('extension_id')			->from('#__extensions')			->where('type = ' . $db->quote($type))			->where('element = ' . $db->quote($id));		switch ($type)		{			case 'plugin':				// Plugins have a folder but not a client				$query->where('folder = ' . $db->quote($group));				break;			case 'library':			case 'package':			case 'component':				// Components, packages and libraries don't have a folder or client.				// Included for completeness.				break;			case 'language':			case 'module':			case 'template':				// Languages, modules and templates have a client but not a folder				$client = JApplicationHelper::getClientInfo($client, true);				$query->where('client_id = ' . (int) $client->id);				break;		}		$db->setQuery($query);		$result = $db->loadResult();		// Note: For templates, libraries and packages their unique name is their key.		// This means they come out the same way they came in.		return $result;	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally		$manifestPath = JPATH_MANIFESTS . '/packages/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterPackage instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerPackage extends JInstallerAdapterPackage{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_redirect&view=links'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC'); ?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_OLD_URL', 'a.old_url', $listDirn, $listOrder); ?>					</th>					<th width="30%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_NEW_URL', 'a.new_url', $listDirn, $listOrder); ?>					</th>					<th width="30%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_REFERRER', 'a.referer', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_CREATED_DATE', 'a.created_date', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="7">						<?php echo $this->pagination->getListFooter(); ?>						<p class="footer-tip">							<?php if ($this->enabled) : ?>								<span class="enabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_ENABLED'); ?></span>							<?php else : ?>								<span class="disabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_DISABLED'); ?></span>							<?php endif; ?>						</p>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create',     'com_redirect');				$canEdit   = $user->authorise('core.edit',       'com_redirect');				$canChange = $user->authorise('core.edit.state', 'com_redirect');				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td>						<?php echo JHtml::_('redirect.published', $item->published, $i); ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_redirect&task=link.edit&id='.$item->id);?>" title="<?php echo $this->escape($item->old_url); ?>">								<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?></a>						<?php else : ?>								<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?>						<?php endif; ?>					</td>					<td class="small">						<?php echo $this->escape($item->new_url); ?>					</td>					<td class="small">						<?php echo $this->escape($item->referer); ?>					</td>					<td class="small">						<?php echo JHtml::_('date', $item->created_date, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php if (!empty($this->items)) : ?>			<?php echo $this->loadTemplate('addform'); ?>		<?php endif; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to pagination rendering. * * pagination_list_footer *	Input variable $list is an array with offsets: *		$list[prefix]		: string *		$list[limit]		: int *		$list[limitstart]	: int *		$list[total]		: int *		$list[limitfield]	: string *		$list[pagescounter]	: string *		$list[pageslinks]	: string * * pagination_list_render *	Input variable $list is an array with offsets: *		$list[all] *			[data]		: string *			[active]	: boolean *		$list[start] *			[data]		: string *			[active]	: boolean *		$list[previous] *			[data]		: string *			[active]	: boolean *		$list[next] *			[data]		: string *			[active]	: boolean *		$list[end] *			[data]		: string *			[active]	: boolean *		$list[pages] *			[{PAGE}][data]		: string *			[{PAGE}][active]	: boolean * * pagination_item_active *	Input variable $item is an object with fields: *		$item->base	: integer *		$item->prefix	: string *		$item->link	: string *		$item->text	: string * * pagination_item_inactive *	Input variable $item is an object with fields: *		$item->base	: integer *		$item->prefix	: string *		$item->link	: string *		$item->text	: string * * This gives template designers ultimate control over how pagination is rendered. * * NOTE: If you override pagination_item_active OR pagination_item_inactive you MUST override them both */function pagination_list_footer($list){	$lang = JFactory::getLanguage();	/**	 * Fix javascript jump menu	 *	 * Remove the onchange=Joomla.submitform from the select tag	 * Add in a button with onclick instead	 */	$fixlimit = $list['limitfield'];	$fixlimit = preg_replace('/onchange="Joomla.submitform\(\);"/', '', $fixlimit);	$html = "<div class=\"containerpg\"><div class=\"pagination\">\n";	$html .= "\n<div class=\"limit\"><label for=\"limit\">".JText::_('JGLOBAL_DISPLAY_NUM')." </label>";	$html .= "\n".$fixlimit;	$html .= "\n<button id=\"pagination-go\" type=\"button\" onclick=\"Joomla.submitform()\">" . JText::_('JSUBMIT') . "</button></div>";	$html .= "\n" . $list['pageslinks'];	$html .= "\n<div class=\"limit\">".$list['pagescounter']."</div>";	$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"".$list['limitstart']."\" />";	$html .= "\n<div class=\"clr\"></div></div></div>";	return $html;}function pagination_list_render($list){	$html = null;	if ($list['start']['active'])	{		$html .= "<div class=\"button2-right\"><div class=\"start\">".$list['start']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-right off\"><div class=\"start\">".$list['start']['data']."</div></div>";	}	if ($list['previous']['active'])	{		$html .= "<div class=\"button2-right\"><div class=\"prev\">".$list['previous']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-right off\"><div class=\"prev\">".$list['previous']['data']."</div></div>";	}	$html .= "\n<div class=\"button2-left\"><div class=\"page\">";	foreach ($list['pages'] as $page)	{		$html .= $page['data'];	}	$html .= "\n</div></div>";	if ($list['next']['active'])	{		$html .= "<div class=\"button2-left\"><div class=\"next\">".$list['next']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-left off\"><div class=\"next\">".$list['next']['data']."</div></div>";	}	if ($list['end']['active'])	{		$html .= "<div class=\"button2-left\"><div class=\"end\">".$list['end']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-left off\"><div class=\"end\">".$list['end']['data']."</div></div>";	}	return $html;}function pagination_item_active(&$item){	if ($item->base > 0)	{		return "<a href=\"#\" title=\"".$item->text."\" onclick=\"document.adminForm." . $item->prefix . "limitstart.value=".$item->base."; Joomla.submitform();return false;\">".$item->text."</a>";	}	else	{		return "<a href=\"#\" title=\"".$item->text."\" onclick=\"document.adminForm." . $item->prefix . "limitstart.value=0; Joomla.submitform();return false;\">".$item->text."</a>";	}}function pagination_item_inactive(&$item){	if ($item->active)	{		$class = 'class="active"';	}	else	{		$class = '';	}	return '<span ' . $class . '>' . $item->text . '</span>';}
<?php/** * @package     Joomla.Platform * @subpackage  Date * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDate is a class that stores a date and provides logic to manipulate * and render that date in a variety of formats. * * @property-read  string   $daysinmonth   t - Number of days in the given month. * @property-read  string   $dayofweek     N - ISO-8601 numeric representation of the day of the week. * @property-read  string   $dayofyear     z - The day of the year (starting from 0). * @property-read  boolean  $isleapyear    L - Whether it's a leap year. * @property-read  string   $day           d - Day of the month, 2 digits with leading zeros. * @property-read  string   $hour          H - 24-hour format of an hour with leading zeros. * @property-read  string   $minute        i - Minutes with leading zeros. * @property-read  string   $second        s - Seconds with leading zeros. * @property-read  string   $month         m - Numeric representation of a month, with leading zeros. * @property-read  string   $ordinal       S - English ordinal suffix for the day of the month, 2 characters. * @property-read  string   $week          W - Numeric representation of the day of the week. * @property-read  string   $year          Y - A full numeric representation of a year, 4 digits. * * @package     Joomla.Platform * @subpackage  Date * @since       11.1 */class JDate extends DateTime{	const DAY_ABBR = "\x021\x03";	const DAY_NAME = "\x022\x03";	const MONTH_ABBR = "\x023\x03";	const MONTH_NAME = "\x024\x03";	/**	 * The format string to be applied when using the __toString() magic method.	 *	 * @var    string	 * @since  11.1	 */	public static $format = 'Y-m-d H:i:s';	/**	 * Placeholder for a DateTimeZone object with GMT as the time zone.	 *	 * @var    object	 * @since  11.1	 */	protected static $gmt;	/**	 * Placeholder for a DateTimeZone object with the default server	 * time zone as the time zone.	 *	 * @var    object	 * @since  11.1	 */	protected static $stz;	/**	 * The DateTimeZone object for usage in rending dates as strings.	 *	 * @var    DateTimeZone	 * @since  12.1	 */	protected $tz;	/**	 * Constructor.	 *	 * @param   string  $date  String in a format accepted by strtotime(), defaults to "now".	 * @param   mixed   $tz    Time zone to be used for the date. Might be a string or a DateTimeZone object.	 *	 * @since   11.1	 */	public function __construct($date = 'now', $tz = null)	{		// Create the base GMT and server time zone objects.		if (empty(self::$gmt) || empty(self::$stz))		{			self::$gmt = new DateTimeZone('GMT');			self::$stz = new DateTimeZone(@date_default_timezone_get());		}		// If the time zone object is not set, attempt to build it.		if (!($tz instanceof DateTimeZone))		{			if ($tz === null)			{				$tz = self::$gmt;			}			elseif (is_string($tz))			{				$tz = new DateTimeZone($tz);			}		}		// If the date is numeric assume a unix timestamp and convert it.		date_default_timezone_set('UTC');		$date = is_numeric($date) ? date('c', $date) : $date;		// Call the DateTime constructor.		parent::__construct($date, $tz);		// Reset the timezone for 3rd party libraries/extension that does not use JDate		date_default_timezone_set(self::$stz->getName());		// Set the timezone object for access later.		$this->tz = $tz;	}	/**	 * Magic method to access properties of the date given by class to the format method.	 *	 * @param   string  $name  The name of the property.	 *	 * @return  mixed   A value if the property name is valid, null otherwise.	 *	 * @since   11.1	 */	public function __get($name)	{		$value = null;		switch ($name)		{			case 'daysinmonth':				$value = $this->format('t', true);				break;			case 'dayofweek':				$value = $this->format('N', true);				break;			case 'dayofyear':				$value = $this->format('z', true);				break;			case 'isleapyear':				$value = (boolean) $this->format('L', true);				break;			case 'day':				$value = $this->format('d', true);				break;			case 'hour':				$value = $this->format('H', true);				break;			case 'minute':				$value = $this->format('i', true);				break;			case 'second':				$value = $this->format('s', true);				break;			case 'month':				$value = $this->format('m', true);				break;			case 'ordinal':				$value = $this->format('S', true);				break;			case 'week':				$value = $this->format('W', true);				break;			case 'year':				$value = $this->format('Y', true);				break;			default:				$trace = debug_backtrace();				trigger_error(					'Undefined property via __get(): ' . $name . ' in ' . $trace[0]['file'] . ' on line ' . $trace[0]['line'],					E_USER_NOTICE				);		}		return $value;	}	/**	 * Magic method to render the date object in the format specified in the public	 * static member JDate::$format.	 *	 * @return  string  The date as a formatted string.	 *	 * @since   11.1	 */	public function __toString()	{		return (string) parent::format(self::$format);	}	/**	 * Proxy for new JDate().	 *	 * @param   string  $date  String in a format accepted by strtotime(), defaults to "now".	 * @param   mixed   $tz    Time zone to be used for the date.	 *	 * @return  JDate	 *	 * @since   11.3	 */	public static function getInstance($date = 'now', $tz = null)	{		return new JDate($date, $tz);	}	/**	 * Translates day of week number to a string.	 *	 * @param   integer  $day   The numeric day of the week.	 * @param   boolean  $abbr  Return the abbreviated day string?	 *	 * @return  string  The day of the week.	 *	 * @since   11.1	 */	public function dayToString($day, $abbr = false)	{		switch ($day)		{			case 0:				return $abbr ? JText::_('SUN') : JText::_('SUNDAY');			case 1:				return $abbr ? JText::_('MON') : JText::_('MONDAY');			case 2:				return $abbr ? JText::_('TUE') : JText::_('TUESDAY');			case 3:				return $abbr ? JText::_('WED') : JText::_('WEDNESDAY');			case 4:				return $abbr ? JText::_('THU') : JText::_('THURSDAY');			case 5:				return $abbr ? JText::_('FRI') : JText::_('FRIDAY');			case 6:				return $abbr ? JText::_('SAT') : JText::_('SATURDAY');		}	}	/**	 * Gets the date as a formatted string in a local calendar.	 *	 * @param   string   $format     The date format specification string (see {@link PHP_MANUAL#date})	 * @param   boolean  $local      True to return the date string in the local time zone, false to return it in GMT.	 * @param   boolean  $translate  True to translate localised strings	 *	 * @return  string   The date string in the specified format format.	 *	 * @since   11.1	 */	public function calendar($format, $local = false, $translate = true)	{		return $this->format($format, $local, $translate);	}	/**	 * Gets the date as a formatted string.	 *	 * @param   string   $format     The date format specification string (see {@link PHP_MANUAL#date})	 * @param   boolean  $local      True to return the date string in the local time zone, false to return it in GMT.	 * @param   boolean  $translate  True to translate localised strings	 *	 * @return  string   The date string in the specified format format.	 *	 * @since   11.1	 */	public function format($format, $local = false, $translate = true)	{		if ($translate)		{			// Do string replacements for date format options that can be translated.			$format = preg_replace('/(^|[^\\\])D/', "\\1" . self::DAY_ABBR, $format);			$format = preg_replace('/(^|[^\\\])l/', "\\1" . self::DAY_NAME, $format);			$format = preg_replace('/(^|[^\\\])M/', "\\1" . self::MONTH_ABBR, $format);			$format = preg_replace('/(^|[^\\\])F/', "\\1" . self::MONTH_NAME, $format);		}		// If the returned time should not be local use GMT.		if ($local == false)		{			parent::setTimezone(self::$gmt);		}		// Format the date.		$return = parent::format($format);		if ($translate)		{			// Manually modify the month and day strings in the formatted time.			if (strpos($return, self::DAY_ABBR) !== false)			{				$return = str_replace(self::DAY_ABBR, $this->dayToString(parent::format('w'), true), $return);			}			if (strpos($return, self::DAY_NAME) !== false)			{				$return = str_replace(self::DAY_NAME, $this->dayToString(parent::format('w')), $return);			}			if (strpos($return, self::MONTH_ABBR) !== false)			{				$return = str_replace(self::MONTH_ABBR, $this->monthToString(parent::format('n'), true), $return);			}			if (strpos($return, self::MONTH_NAME) !== false)			{				$return = str_replace(self::MONTH_NAME, $this->monthToString(parent::format('n')), $return);			}		}		if ($local == false)		{			parent::setTimezone($this->tz);		}		return $return;	}	/**	 * Get the time offset from GMT in hours or seconds.	 *	 * @param   boolean  $hours  True to return the value in hours.	 *	 * @return  float  The time offset from GMT either in hours or in seconds.	 *	 * @since   11.1	 */	public function getOffsetFromGMT($hours = false)	{		return (float) $hours ? ($this->tz->getOffset($this) / 3600) : $this->tz->getOffset($this);	}	/**	 * Translates month number to a string.	 *	 * @param   integer  $month  The numeric month of the year.	 * @param   boolean  $abbr   If true, return the abbreviated month string	 *	 * @return  string  The month of the year.	 *	 * @since   11.1	 */	public function monthToString($month, $abbr = false)	{		switch ($month)		{			case 1:				return $abbr ? JText::_('JANUARY_SHORT') : JText::_('JANUARY');			case 2:				return $abbr ? JText::_('FEBRUARY_SHORT') : JText::_('FEBRUARY');			case 3:				return $abbr ? JText::_('MARCH_SHORT') : JText::_('MARCH');			case 4:				return $abbr ? JText::_('APRIL_SHORT') : JText::_('APRIL');			case 5:				return $abbr ? JText::_('MAY_SHORT') : JText::_('MAY');			case 6:				return $abbr ? JText::_('JUNE_SHORT') : JText::_('JUNE');			case 7:				return $abbr ? JText::_('JULY_SHORT') : JText::_('JULY');			case 8:				return $abbr ? JText::_('AUGUST_SHORT') : JText::_('AUGUST');			case 9:				return $abbr ? JText::_('SEPTEMBER_SHORT') : JText::_('SEPTEMBER');			case 10:				return $abbr ? JText::_('OCTOBER_SHORT') : JText::_('OCTOBER');			case 11:				return $abbr ? JText::_('NOVEMBER_SHORT') : JText::_('NOVEMBER');			case 12:				return $abbr ? JText::_('DECEMBER_SHORT') : JText::_('DECEMBER');		}	}	/**	 * Method to wrap the setTimezone() function and set the internal time zone object.	 *	 * @param   DateTimeZone  $tz  The new DateTimeZone object.	 *	 * @return  JDate	 *	 * @since   11.1	 */	public function setTimezone($tz)	{		$this->tz = $tz;		return parent::setTimezone($tz);	}	/**	 * Gets the date as an ISO 8601 string.  IETF RFC 3339 defines the ISO 8601 format	 * and it can be found at the IETF Web site.	 *	 * @param   boolean  $local  True to return the date string in the local time zone, false to return it in GMT.	 *	 * @return  string  The date string in ISO 8601 format.	 *	 * @link    http://www.ietf.org/rfc/rfc3339.txt	 * @since   11.1	 */	public function toISO8601($local = false)	{		return $this->format(DateTime::RFC3339, $local, false);	}	/**	 * Gets the date as an SQL datetime string.	 *	 * @param   boolean          $local  True to return the date string in the local time zone, false to return it in GMT.	 * @param   JDatabaseDriver  $db     The database driver or null to use JFactory::getDbo()	 *	 * @return  string     The date string in SQL datetime format.	 *	 * @link http://dev.mysql.com/doc/refman/5.0/en/datetime.html	 * @since   11.4	 */	public function toSql($local = false, JDatabaseDriver $db = null)	{		if ($db === null)		{			$db = JFactory::getDbo();		}		return $this->format($db->getDateFormat(), $local, false);	}	/**	 * Gets the date as an RFC 822 string.  IETF RFC 2822 supercedes RFC 822 and its definition	 * can be found at the IETF Web site.	 *	 * @param   boolean  $local  True to return the date string in the local time zone, false to return it in GMT.	 *	 * @return  string   The date string in RFC 822 format.	 *	 * @link    http://www.ietf.org/rfc/rfc2822.txt	 * @since   11.1	 */	public function toRFC822($local = false)	{		return $this->format(DateTime::RFC2822, $local, false);	}	/**	 * Gets the date as UNIX time stamp.	 *	 * @return  integer  The date as a UNIX timestamp.	 *	 * @since   11.1	 */	public function toUnix()	{		return (int) parent::format('U');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with system * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */abstract class JHtmlSystem{	/**	 * Method to generate a string message for a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 */	public static function server($val)	{		if (empty($val))		{			return JText::_('COM_ADMIN_NA');		}		else		{			return $val;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * APC cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @see         http://php.net/manual/en/book.apc.php * @since       11.1 */class JCacheStorageApc extends JCacheStorage{	/**	 * Get cached data from APC by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed    Boolean     False on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_fetch($cache_id);	}	/**	 * Get all cached data	 *	 * @return  array  data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		$data = array();		foreach ($keys as $key)		{			$name = $key['info'];			$namearr = explode('-', $name);			if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')			{				$group = $namearr[2];				if (!isset($data[$group]))				{					$item = new JCacheStorageHelper($group);				}				else				{					$item = $data[$group];				}				$item->updateSize($key['mem_size'] / 1024);				$data[$group] = $item;			}		}		return $data;	}	/**	 * Store the data to APC by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_store($cache_id, $data, $this->_lifetime);	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_delete($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * group mode    : cleans all cache in the group	 * notgroup mode : cleans all cache not in the group	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['info'], $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				apc_delete($key['info']);			}		}		return true;	}	/**	 * Force garbage collect expired cache data as items are removed only on fetch!	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['info'], $secret . '-cache-'))			{				apc_fetch($key['info']);			}		}	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return extension_loaded('apc');	}	/**	 * Lock cached item - override parent as this is more efficient	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  object   Properties are lock and locklooped	 *	 * @since   11.1	 */	public function lock($id, $group, $locktime)	{		$returning = new stdClass;		$returning->locklooped = false;		$looptime = $locktime * 10;		$cache_id = $this->_getCacheId($id, $group) . '_lock';		$data_lock = apc_add($cache_id, 1, $locktime);		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = apc_add($cache_id, 1, $locktime);				$lock_counter++;			}		}		$returning->locked = $data_lock;		return $returning;	}	/**	 * Unlock cached item - override parent for cacheid compatibility with lock	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		$unlock = false;		$cache_id = $this->_getCacheId($id, $group) . '_lock';		$unlock = apc_delete($cache_id);		return $unlock;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Login Model * * @package     Joomla.Administrator * @subpackage  com_login * @since       1.5 */class LoginModelLogin extends JModelLegacy{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$credentials = array(			'username' => JRequest::getVar('username', '', 'method', 'username'),			'password' => JRequest::getVar('passwd', '', 'post', 'string', JREQUEST_ALLOWRAW)		);		$this->setState('credentials', $credentials);		// check for return URL from the request first		if ($return = JRequest::getVar('return', '', 'method', 'base64'))		{			$return = base64_decode($return);			if (!JURI::isInternal($return))			{				$return = '';			}		}		// Set the return URL if empty.		if (empty($return))		{			$return = 'index.php';		}		$this->setState('return', $return);	}	/**	 * Get the administrator login module by name (real, eg 'login' or folder, eg 'mod_login')	 *	 * @param   string  $name   The name of the module	 * @param   string  $title  The title of the module, optional	 *	 * @return  object  The Module object	 *	 * @since   11.1	 */	public static function getLoginModule($name = 'mod_login', $title = null)	{		$result = null;		$modules = self::_load($name);		$total = count($modules);		for ($i = 0; $i < $total; $i++)		{			// Match the title if we're looking for a specific instance of the module			if (!$title || $modules[$i]->title == $title)			{				$result = $modules[$i];				break; // Found it			}		}		// If we didn't find it, and the name is mod_something, create a dummy object		if (is_null($result) && substr($name, 0, 4) == 'mod_')		{			$result = new stdClass;			$result->id = 0;			$result->title = '';			$result->module = $name;			$result->position = '';			$result->content = '';			$result->showtitle = 0;			$result->control = '';			$result->params = '';			$result->user = 0;		}		return $result;	}	/**	 * Load login modules.	 *	 * Note that we load regardless of state or access level since access	 * for public is the only thing that makes sense since users are not logged in	 * and the module lets them log in.	 * This is put in as a failsafe to avoid super user lock out caused by an unpublished	 * login module or by a module set to have a viewing access level that is not Public.	 *	 * @param   string  $name   The name of the module	 *	 * @return  array	 *	 * @since   11.1	 */	protected static function _load($module)	{		static $clean;		if (isset($clean))		{			return $clean;		}		$app = JFactory::getApplication();		$lang = JFactory::getLanguage()->getTag();		$clientId = (int) $app->getClientId();		$cache = JFactory::getCache('com_modules', '');		$cacheid = md5(serialize(array($clientId, $lang)));		$loginmodule = array();		if (!($clean = $cache->get($cacheid)))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('m.id, m.title, m.module, m.position, m.showtitle, m.params')				->from('#__modules AS m')				->where('m.module =' . $db->quote($module) . ' AND m.client_id = 1')				->join('LEFT', '#__extensions AS e ON e.element = m.module AND e.client_id = m.client_id')				->where('e.enabled = 1');			// Filter by language			if ($app->isSite() && $app->getLanguageFilter())			{				$query->where('m.language IN (' . $db->quote($lang) . ',' . $db->quote('*') . ')');			}			$query->order('m.position, m.ordering');			// Set the query			$db->setQuery($query);			try			{				$modules = $db->loadObjectList();			}			catch (RuntimeException $e)			{				JError::raiseWarning(500, JText::sprintf('JLIB_APPLICATION_ERROR_MODULE_LOAD', $e->getMessage()));				return $loginmodule;			}			// Return to simple indexing that matches the query order.			$loginmodule = $modules;			$cache->store($loginmodule, $cacheid);		}		return $loginmodule;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JFormRule for com_contact to make sure the subject contains no banned word. * * @package     Joomla.Site * @subpackage  com_contact */class JFormRuleContactEmailSubject extends JFormRule{	/**	 * Method to test for a valid color in hexadecimal.	 *	 * @param   SimpleXMLElement  &$element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value     The form field value to validate.	 * @param   string            $group     The field name group control value. This acts as as an array container for the field.	 *                                       For example if the field has name="foo" and the group value is set to "bar" then the	 *                                       full field name would end up being "bar[foo]".	 * @param   object            &$input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   object            &$form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 */	public function test(&$element, $value, $group = null, &$input = null, &$form = null)	{		$params = JComponentHelper::getParams('com_contact');		$banned = $params->get('banned_subject');		foreach (explode(';', $banned) as $item) {			if (JString::stristr($item, $value) !== false)					return false;		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentError class, provides an easy interface to parse and display an error page * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentError extends JDocument{	/**	 * Error Object	 *	 * @var    object	 * @since  11.1	 */	protected $_error;	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of attributes	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'text/html';		// Set document type		$this->_type = 'error';	}	/**	 * Set error object	 *	 * @param   object  $error  Error object to set	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function setError($error)	{		if ($error instanceof Exception)		{			$this->_error = & $error;			return true;		}		else		{			return false;		}	}	/**	 * Render the document	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  string   The rendered data	 *	 * @since   11.1	 */	public function render($cache = false, $params = array())	{		// If no error object is set return null		if (!isset($this->_error))		{			return;		}		// Set the status header		JResponse::setHeader('status', $this->_error->getCode() . ' ' . str_replace("\n", ' ', $this->_error->getMessage()));		$file = 'error.php';		// Check template		$directory = isset($params['directory']) ? $params['directory'] : 'templates';		$template = isset($params['template']) ? JFilterInput::getInstance()->clean($params['template'], 'cmd') : 'system';		if (!file_exists($directory . '/' . $template . '/' . $file))		{			$template = 'system';		}		// Set variables		$this->baseurl = JURI::base(true);		$this->template = $template;		$this->debug = isset($params['debug']) ? $params['debug'] : false;		$this->error = $this->_error;		// Load		$data = $this->_loadTemplate($directory . '/' . $template, $file);		parent::render();		return $data;	}	/**	 * Load a template file	 *	 * @param   string  $directory  The name of the template	 * @param   string  $filename   The actual filename	 *	 * @return  string  The contents of the template	 *	 * @since   11.1	 */	public function _loadTemplate($directory, $filename)	{		$contents = '';		// Check to see if we have a valid template file		if (file_exists($directory . '/' . $filename))		{			// Store the file path			$this->_file = $directory . '/' . $filename;			// Get the file content			ob_start();			require_once $directory . '/' . $filename;			$contents = ob_get_contents();			ob_end_clean();		}		return $contents;	}	/**	 * Render the backtrace	 *	 * @return  string  The contents of the backtrace	 *	 * @since   11.1	 */	public function renderBacktrace()	{		$contents = null;		$backtrace = $this->_error->getTrace();		if (is_array($backtrace))		{			ob_start();			$j = 1;			echo '<table cellpadding="0" cellspacing="0" class="Table">';			echo '	<tr>';			echo '		<td colspan="3" class="TD"><strong>Call stack</strong></td>';			echo '	</tr>';			echo '	<tr>';			echo '		<td class="TD"><strong>#</strong></td>';			echo '		<td class="TD"><strong>Function</strong></td>';			echo '		<td class="TD"><strong>Location</strong></td>';			echo '	</tr>';			for ($i = count($backtrace) - 1; $i >= 0; $i--)			{				echo '	<tr>';				echo '		<td class="TD">' . $j . '</td>';				if (isset($backtrace[$i]['class']))				{					echo '	<td class="TD">' . $backtrace[$i]['class'] . $backtrace[$i]['type'] . $backtrace[$i]['function'] . '()</td>';				}				else				{					echo '	<td class="TD">' . $backtrace[$i]['function'] . '()</td>';				}				if (isset($backtrace[$i]['file']))				{					echo '		<td class="TD">' . $backtrace[$i]['file'] . ':' . $backtrace[$i]['line'] . '</td>';				}				else				{					echo '		<td class="TD">&#160;</td>';				}				echo '	</tr>';				$j++;			}			echo '</table>';			$contents = ob_get_contents();			ob_end_clean();		}		return $contents;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_NEWSFEEDS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_NEWSFEEDS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_newsfeeds');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value='';document.id('batch-tag-id)').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('newsfeed.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('behavior.modal');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'config.cancel' || document.formvalidator.isValid(document.id('config-form')))		{			Joomla.submitform(task, document.getElementById('config-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_messages'); ?>" method="post" name="adminForm" id="message-form" class="form-validate form-horizontal">	<fieldset>		<div>			<div class="modal-header">				<h3><?php echo JText::_('COM_MESSAGES_MY_SETTINGS');?></h3>			</div>			<div class="modal-body">				<button class="btn btn-primary" type="submit" onclick="Joomla.submitform('config.save', this.form);window.top.setTimeout('window.parent.SqueezeBox.close()', 700);">					<?php echo JText::_('JSAVE');?></button>				<button class="btn" type="button" onclick="window.parent.SqueezeBox.close();">					<?php echo JText::_('JCANCEL');?></button>				<hr />				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lock'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lock'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('mail_on_new'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('mail_on_new'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('auto_purge'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('auto_purge'); ?>					</div>				</div>			</div>		</div>		</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Joomla Platform class for generating Facebook API access token. * * @package     Joomla.Platform * @subpackage  Facebook * * @since       13.1 */class JFacebookOAuth extends JOAuth2Client{	/**	 * @var JRegistry Options for the JFacebookOAuth object.	 * @since 13.1	 */	protected $options;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  JFacebookOauth options object.	 * @param   JHttp      $client   The HTTP client object.	 * @param   JInput     $input    The input object.	 *	 * @since   13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JInput $input = null)	{		$this->options = isset($options) ? $options : new JRegistry;		// Setup the authentication and token urls if not already set.		$this->options->def('authurl', 'http://www.facebook.com/dialog/oauth');		$this->options->def('tokenurl', 'https://graph.facebook.com/oauth/access_token');		// Call the JOauthOauth2client constructor to setup the object.		parent::__construct($this->options, $client, $input);	}	/**	 * Method used to set permissions.	 *	 * @param   string  $scope  Comma separated list of permissions.	 *	 * @return  JFacebookOauth  This object for method chaining	 *	 * @since   13.1	 */	public function setScope($scope)	{		$this->setOption('scope', $scope);		return $this;	}	/**	 * Method to get the current scope	 *	 * @return  string Comma separated list of permissions.	 *	 * @since   13.1	 */	public function getScope()	{		return $this->getOption('scope');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('NewsfeedsHelper', JPATH_ADMINISTRATOR . '/components/com_newsfeeds/helpers/newsfeeds.php');/** * Utility class for creating HTML Grids * * @static * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.5 */class JHtmlNewsfeed{	/**	 * Get the associated language flags	 *	 * @param   int  $newsfeedid  The item id to search associations	 *	 * @return  string  The language HTML	 */	public static function association($newsfeedid)	{		// Defaults		$html = '';		// Get the associations		if ($associations = JLanguageAssociations::getAssociations('com_newsfeeds', '#__newsfeeds', 'com_newsfeeds.item', $newsfeedid))		{			foreach ($associations as $tag => $associated)			{				$associations[$tag] = (int) $associated->id;			}			// Get the associated newsfeed items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('c.*')				->from('#__newsfeeds as c')				->select('cat.title as category_title')				->join('LEFT', '#__categories as cat ON cat.id=c.catid')				->where('c.id IN (' . implode(',', array_values($associations)) . ')')				->join('LEFT', '#__languages as l ON c.language=l.lang_code')				->select('l.image')				->select('l.title as language_title');			$db->setQuery($query);			try			{				$items = $db->loadObjectList('id');			}			catch (runtimeException $e)			{				throw new Exception($e->getMessage(), 500);				return false;			}			$tags = array();			// Construct html			foreach ($associations as $tag => $associated)			{				if ($associated != $newsfeedid)				{					$tags[] = JText::sprintf('COM_NEWSFEEDS_TIP_ASSOCIATED_LANGUAGE',						JHtml::_('image', 'mod_languages/' . $items[$associated]->image . '.gif',							$items[$associated]->language_title,							array('title' => $items[$associated]->language_title),							true						),						$items[$associated]->name, $items[$associated]->category_title					);				}			}			$html = JHtml::_('tooltip', implode('<br />', $tags), JText::_('COM_NEWSFEEDS_TIP_ASSOCIATION'), 'admin/icon-16-links.png');		}		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'weblink.cancel' || document.formvalidator.isValid(document.id('weblink-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('weblink-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_weblinks&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="weblink-form" class="form-validate">	<div class="row-fluid">		<!-- Begin Weblinks -->		<div class="span10 form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_WEBLINKS_NEW_WEBLINK', true) : JText::sprintf('COM_WEBLINKS_EDIT_WEBLINK', $this->item->id, true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('title'); ?></div>					<div class="controls"><?php echo $this->form->getInput('title'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('url'); ?></div>					<div class="controls"><?php echo $this->form->getInput('url'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>					<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>					<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('description'); ?></div>					<div class="controls"><?php echo $this->form->getInput('description'); ?></div>				</div>				<h4><?php echo JText::_('COM_WEBLINKS_FIELDSET_IMAGES');?></h4>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('images'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('images'); ?>					</div>				</div>				<?php foreach ($this->form->getGroup('images') as $field) : ?>					<div class="control-group">						<?php if (!$field->hidden) : ?>							<div class="control-label">								<?php echo $field->label; ?>							</div>						<?php endif; ?>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('id'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('version'); ?></div>					<div class="controls"><?php echo $this->form->getInput('version'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>				</div>				<?php if ($this->item->hits) : ?>					<div class="control-group">						<div class="control-label"><?php echo $this->form->getLabel('hits'); ?></div>						<div class="controls"><?php echo $this->form->getInput('hits'); ?></div>					</div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php $fieldSets = $this->form->getFieldsets('params'); ?>			<?php foreach ($fieldSets as $name => $fieldSet) : ?>				<?php $paramstabs = 'params-' . $name; ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true)); ?>					<?php echo $this->loadTemplate('params'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endforeach; ?>			<?php $fieldSets = $this->form->getFieldsets('metadata'); ?>			<?php foreach ($fieldSets as $name => $fieldSet) : ?>				<?php $metadatatabs = 'metadata-' . $name; ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', $metadatatabs, JText::_($fieldSet->label, true)); ?>					<?php echo $this->loadTemplate('metadata'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endforeach; ?>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>		</fieldset>		</div>		<!-- End Weblinks -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><form action="<?php echo JRoute::_('index.php?option=com_finder&view=filter&layout=edit&filter_id=' . (int) $this->item->filter_id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'basic')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic', JText::_('COM_FINDER_EDIT_FILTER', true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('title'); ?></div>					<div class="controls"><?php echo $this->form->getInput('title'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('state'); ?></div>					<div class="controls"><?php echo $this->form->getInput('state'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('map_count'); ?></div>					<div class="controls"><?php echo $this->form->getInput('map_count'); ?></div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'params', JText::_('COM_FINDER_FILTER_FIELDSET_PARAMS', true)); ?>				<?php foreach ($this->form->getGroup('params') as $field) : ?>					<div class="control-group">						<?php if (!$field->hidden) : ?>							<div class="control-label"><?php echo $field->label; ?></div>						<?php endif; ?>						<div class="controls"><?php echo $field->input; ?></div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('COM_FINDER_FILTER_FIELDSET_DETAILS', true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created'); ?></div>				</div>				<?php if ($this->item->modified_by) : ?>					<div class="control-group">						<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>						<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>					</div>					<div class="control-group">						<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>						<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>					</div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<div id="finder-filter-window">		<?php echo JHtml::_('filter.slider', array('selected_nodes' => $this->filter->data)); ?>	</div>	<input type="hidden" name="task" value="" />	<input type="hidden" name="return" value="<?php echo JFactory::getApplication()->input->get('return', '', 'cmd');?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a weblink. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewWeblink extends JViewLegacy{	protected $state;	protected $item;	protected $form;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state	= $this->get('State');		$this->item		= $this->get('Item');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		// Since we don't track these assets at the item level, use the category id.		$canDo		= WeblinksHelper::getActions($this->item->catid, 0);		JToolbarHelper::title(JText::_('COM_WEBLINKS_MANAGER_WEBLINK'), 'weblinks.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit')||(count($user->getAuthorisedCategories('com_weblinks', 'core.create')))))		{			JToolbarHelper::apply('weblink.apply');			JToolbarHelper::save('weblink.save');		}		if (!$checkedOut && (count($user->getAuthorisedCategories('com_weblinks', 'core.create')))){			JToolbarHelper::save2new('weblink.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && (count($user->getAuthorisedCategories('com_weblinks', 'core.create')) > 0))		{			JToolbarHelper::save2copy('weblink.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('weblink.cancel');		}		else		{			JToolbarHelper::cancel('weblink.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_WEBLINKS_LINKS_EDIT');	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include __DIR__ . '/component.php';
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_languages')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Languages');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of modules. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewModules extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items)){			JFactory::getApplication()->enqueueMessage(				JText::_('COM_MODULES_MSG_MANAGE_NO_MODULES'),				'warning'			);		}		$this->addToolbar();		// Include the component HTML helpers.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= ModulesHelper::getActions();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_MODULES_MANAGER_MODULES'), 'module.png');		if ($canDo->get('core.create'))		{			$title = JText::_('JTOOLBAR_NEW');			$dhtml = "<button onClick=\"location.href='index.php?option=com_modules&amp;view=select'\" class=\"btn btn-small btn-success\">						<i class=\"icon-plus icon-white\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'new');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('module.edit');		}		if ($canDo->get('core.create'))		{			JToolbarHelper::custom('modules.duplicate', 'copy.png', 'copy_f2.png', 'JTOOLBAR_DUPLICATE', true);		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('modules.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('modules.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::checkin('modules.checkin');		}		if ($state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'modules.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('modules.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_modules');		}		JToolbarHelper::help('JHELP_EXTENSIONS_MODULE_MANAGER');		JHtmlSidebar::addEntry(			JText::_('JSITE'),			'index.php?option=com_modules&filter_client_id=0',			$this->state->get('filter.client_id') == 0		);		JHtmlSidebar::addEntry(			JText::_('JADMINISTRATOR'),			'index.php?option=com_modules&filter_client_id=1',			$this->state->get('filter.client_id') == 1		);		JHtmlSidebar::setAction('index.php?option=com_modules');		JHtmlSidebar::addFilter(			// @todo we need a label for this			'',			'filter_client_id',			JHtml::_('select.options', ModulesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id')),			false		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', ModulesHelper::getStateOptions(), 'value', 'text', $this->state->get('filter.state'))		);		JHtmlSidebar::addFilter(			JText::_('COM_MODULES_OPTION_SELECT_POSITION'),			'filter_position',			JHtml::_('select.options', ModulesHelper::getPositions($this->state->get('filter.client_id')), 'value', 'text', $this->state->get('filter.position'))		);		JHtmlSidebar::addFilter(			JText::_('COM_MODULES_OPTION_SELECT_MODULE'),			'filter_module',			JHtml::_('select.options', ModulesHelper::getModules($this->state->get('filter.client_id')), 'value', 'text', $this->state->get('filter.module'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		$this->sidebar = JHtmlSidebar::render();	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'position' => JText::_('COM_MODULES_HEADING_POSITION'),			'name' => JText::_('COM_MODULES_HEADING_MODULE'),			'pages' => JText::_('COM_MODULES_HEADING_PAGES'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'language_title' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JSON Response class * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class JJsonResponse{	/**	 * Determines whether the request was successful	 *	 * @var		boolean	 * @since	2.5	 */	public $success = true;	/**	 * Determines whether the request wasn't successful.	 * This is always the negation of $this->success,	 * so you can use both flags equivalently.	 *	 * @var		boolean	 * @since	2.5	 */	public $error = false;	/**	 * The main response message	 *	 * @var		string	 * @since	2.5	 */	public $message = null;	/**	 * Array of messages gathered in the JApplication object	 *	 * @var		array	 * @since	2.5	 */	public $messages = null;	/**	 * The response data	 *	 * var		array/object	 * @since	2.5	 */	public $data = null;	/**	 * Constructor	 *	 * @param   	array/object	$response	The Response data	 * @param   	string				$message	The main response message	 * @param   	boolean				$error		True, if the success flag shall be set to false, defaults to false	 *	 * @return  void	 *	 * @since		2.5	 */	public function __construct($response = null, $message = null, $error = false)	{		$this->message = $message;		// Get the message queue		$messages = JFactory::getApplication()->getMessageQueue();		// Build the sorted messages list		if (is_array($messages) && count($messages))		{			foreach ($messages as $message)			{				if (isset($message['type']) && isset($message['message']))				{					$lists[$message['type']][] = $message['message'];				}			}		}		// If messages exist add them to the output		if (isset($lists) && is_array($lists))		{			$this->messages = $lists;		}		// Check if we are dealing with an error		if ($response instanceof Exception)		{			// Prepare the error response			$this->success = false;			$this->error = true;			$this->message	= $response->getMessage();		}		else		{			// Prepare the response data			$this->success = !$error;			$this->error = $error;			$this->data = $response;		}	}	/**	 * Magic toString method for sending the response in JSON format	 *	 * @return  string	The response in JSON format	 *	 * @since		2.5	 */	public function __toString()	{		return json_encode($this);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a generic list of options. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldList extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'List';	/**	 * Method to get the field input markup for a generic list.	 * Use the multiple attribute to enable multiselect.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		// To avoid user's confusion, readonly="true" should imply disabled="true".		if ((string) $this->element['readonly'] == 'true' || (string) $this->element['disabled'] == 'true')		{			$attr .= ' disabled="disabled"';		}		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->multiple ? ' multiple="multiple"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Get the field options.		$options = (array) $this->getOptions();		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('select.genericlist', $options, '', trim($attr), 'value', 'text', $this->value, $this->id);			$html[] = '<input type="hidden" name="' . $this->name . '" value="' . $this->value . '"/>';		}		// Create a regular list.		else		{			$html[] = JHtml::_('select.genericlist', $options, $this->name, trim($attr), 'value', 'text', $this->value, $this->id);		}		return implode($html);	}	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		foreach ($this->element->children() as $option)		{			// Only add <option /> elements.			if ($option->getName() != 'option')			{				continue;			}			// Create a new option object based on the <option /> element.			$tmp = JHtml::_(				'select.option', (string) $option['value'],				JText::alt(trim((string) $option), preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)), 'value', 'text',				((string) $option['disabled'] == 'true')			);			// Set some option attributes.			$tmp->class = (string) $option['class'];			// Set some JavaScript option attributes.			$tmp->onclick = (string) $option['onclick'];			// Add the option object to the result set.			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_TAGS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_TAGS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access'); ?>			</div>		</div>	<div class="modal-body">		<p><?php echo JText::_('COM_TAGS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-tag-id').value='';document.id('batch-client-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('tag.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>		</button>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Pages class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiPages extends JMediawikiObject{	/**     * Method to edit a page.	 *	 * @param   string  $title         Page title.	 * @param   int     $section       Section number.	 * @param   string  $sectiontitle  The title for a new section.	 * @param   string  $text          Page content.	 * @param   string  $summary       Title of the page you want to delete.     *     * @return  object     *     * @since   12.3     */	public function editPage($title, $section = null, $sectiontitle = null, $text = null, $summary = null)	{		// Get the token.		$token = $this->getToken($title, 'edit');		// Build the request path.		$path = '?action=edit';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'section' => $section,			'sectiontitle' => $section,			'text' => $text,			'summary' => $summary		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to delete a page.	 *	 * @param   string  $title      Title of the page you want to delete.	 * @param   string  $reason     Reason for the deletion.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlis.	 * @param   string  $oldimage   The name of the old image to delete.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deletePageByName($title, $reason = null, $watchlist = null, $oldimage = null)	{		// Get the token.		$token = $this->getToken($title, 'delete');		// Build the request path.		$path = '?action=delete';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'reason' => $reason,			'watchlist' => $watchlist,			'oldimage' => $oldimage		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to delete a page.	 *	 * @param   string  $pageid     Page ID of the page you want to delete.	 * @param   string  $reason     Reason for the deletion.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlis.	 * @param   string  $oldimage   The name of the old image to delete.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deletePageByID($pageid,  $reason = null, $watchlist = null, $oldimage = null)	{		// Get the token.		$token = $this->getToken($pageid, 'delete');		// Build the request path.		$path = '?action=delete';		// Build the request data.		$data = array(			'pageid' => $pageid,			'token' => $token,			'reason' => $reason,			'watchlist' => $watchlist,			'oldimage' => $oldimage		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to restore certain revisions of a deleted page.	 *	 * @param   string  $title      Title of the page you want to restore.	 * @param   string  $reason     Reason for restoring (optional).	 * @param   string  $timestamp  Timestamps of the revisions to restore.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function undeletePage($title, $reason = null, $timestamp = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'undelete');		// Build the request path.		$path = '?action=undelete';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'reason' => $reason,			'timestamp' => $timestamp,			'watchlist' => $watchlist,		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to move a page.	 *	 * @param   string   $from            Title of the page you want to move.	 * @param   string   $to              Title you want to rename the page to.	 * @param   string   $reason          Reason for the move (optional).	 * @param   string   $movetalk        Move the talk page, if it exists.	 * @param   string   $movesubpages    Move subpages, if applicable.	 * @param   boolean  $noredirect      Don't create a redirect.	 * @param   string   $watchlist       Unconditionally add or remove the page from your watchlist.	 * @param   boolean  $ignorewarnings  Ignore any warnings.     *     * @return  object     *     * @since   12.3     */	public function movePageByName($from, $to, $reason = null, $movetalk = null, $movesubpages = null, $noredirect = null,		$watchlist =null, $ignorewarnings = null)	{		// Get the token.		$token = $this->getToken($from, 'move');		// Build the request path.		$path = '?action=move';		// Build the request data.		$data = array(			'from' => $from,			'to' => $reason,			'token' => $token,			'reason' => $reason,			'movetalk' => $movetalk,			'movesubpages' => $movesubpages,			'noredirect' => $noredirect,			'watchlist' => $watchlist,			'ignorewarnings' => $ignorewarnings		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to move a page.	 *	 * @param   int      $fromid          Page ID of the page you want to move.	 * @param   string   $to              Title you want to rename the page to.	 * @param   string   $reason          Reason for the move (optional).	 * @param   string   $movetalk        Move the talk page, if it exists.	 * @param   string   $movesubpages    Move subpages, if applicable.	 * @param   boolean  $noredirect      Don't create a redirect.	 * @param   string   $watchlist       Unconditionally add or remove the page from your watchlist.	 * @param   boolean  $ignorewarnings  Ignore any warnings.	 *	 * @return  object	 *	 * @since   12.3	 */	public function movePageByID($fromid, $to, $reason = null, $movetalk = null, $movesubpages = null, $noredirect = null,		$watchlist =null, $ignorewarnings = null)	{		// Get the token.		$token = $this->getToken($fromid, 'move');		// Build the request path.		$path = '?action=move';		// Build the request data.		$data = array(			'fromid' => $fromid,			'to' => $reason,			'token' => $token,			'reason' => $reason,			'movetalk' => $movetalk,			'movesubpages' => $movesubpages,			'noredirect' => $noredirect,			'watchlist' => $watchlist,			'ignorewarnings' => $ignorewarnings		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to undo the last edit to the page.	 *	 * @param   string  $title      Title of the page you want to rollback.	 * @param   string  $user       Name of the user whose edits are to be rolled back.	 * @param   string  $summary    Custom edit summary. If not set, default summary will be used.	 * @param   string  $markbot    Mark the reverted edits and the revert as bot edits.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function rollback($title, $user, $summary = null, $markbot = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'rollback');		// Build the request path.		$path = '?action=rollback';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'user' => $user,			'expiry' => $summary,			'markbot' => $markbot,			'watchlist' => $watchlist		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to change the protection level of a page.	 *	 * @param   string  $title        Title of the page you want to (un)protect.	 * @param   string  $protections  Pipe-separated list of protection levels.	 * @param   string  $expiry       Expiry timestamps.	 * @param   string  $reason       Reason for (un)protecting (optional).	 * @param   string  $cascade      Enable cascading protection.	 * @param   string  $watchlist    Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function changeProtection($title, $protections, $expiry = null, $reason = null, $cascade = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'unblock');		// Build the request path.		$path = '?action=protect';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'protections' => $protections,			'expiry' => $expiry,			'reason' => $reason,			'cascade' => $cascade,			'watchlist' => $watchlist		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to get basic page information.     *     * @param   array    $titles      Page titles to retrieve info.     * @param   array    $inprop      Which additional properties to get.     * @param   array    $intoken     Request a token to perform a data-modifying action on a page     * @param   boolean  $incontinue  When more results are available, use this to continue.     *     * @return  object     *     * @since   12.3     */	public function getPageInfo(array $titles, array $inprop = null, array $intoken = null, $incontinue = null)	{		// Build the request		$path = '?action=query&prop=info';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($inprop))		{			$path .= '&inprop=' . $this->buildParameter($inprop);		}		if (isset($intoken))		{			$path .= '&intoken=' . $this->buildParameter($intoken);		}		if ($incontinue)		{			$path .= '&incontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get various properties defined in the page content.     *     * @param   array    $titles      Page titles to retrieve properties.     * @param   boolean  $ppcontinue  When more results are available, use this to continue.     * @param   string   $ppprop      Page prop to look on the page for.     *     * @return  object     *     * @since   12.3     */	public function getPageProperties(array $titles, $ppcontinue = null, $ppprop = null)	{		// Build the request		$path = '?action=query&prop=pageprops';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if ($ppcontinue)		{			$path .= '&ppcontinue=';		}		if (isset($ppprop))		{			$path .= '&ppprop=' . $ppprop;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get a list of revisions.     *	 * @param   array    $titles   Page titles to retrieve revisions.	 * @param   array    $rvprop   Which properties to get for each revision.	 * @param   boolean  $rvparse  Parse revision content.	 * @param   int      $rvlimit  Limit how many revisions will be returned.	 *     * @return  object     *     * @since   12.3     */	public function getRevisions(array $titles, array $rvprop = null, $rvparse = null, $rvlimit = null)	{		// Build the request		$path = '?action=query&prop=revisions';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($rvprop))		{			$path .= '&rvprop=' . $this->buildParameter($rvprop);		}		if ($rvparse)		{			$path .= '&rvparse=';		}		if (isset($rvlimit))		{			$path .= '&rvlimit=' . $rvlimit;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all page templates from the given page.     *     * @param   array    $titles       Page titles to retrieve templates.     * @param   array    $tlnamespace  Show templates in this namespace(s) only.     * @param   integer  $tllimit      How many templates to return.     * @param   boolean  $tlcontinue   When more results are available, use this to continue.     * @param   string   $tltemplates  Only list these templates.     * @param   string   $tldir        The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getPageTemplates(array $titles, array $tlnamespace = null, $tllimit = null, $tlcontinue = null, $tltemplates = null, $tldir = null)	{		// Build the request.		$path = '?action=query&prop=templates';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($tlnamespace))		{			$path .= '&tlnamespace=' . $this->buildParameter($tlnamespace);		}		if (isset($tllimit))		{			$path .= '&tllimit=' . $tllimit;		}		if ($tlcontinue)		{			$path .= '&tlcontinue=';		}		if (isset($tltemplates))		{			$path .= '&tltemplates=' . $tltemplates;		}		if (isset($tldir))		{			$path .= '&tldir=' . $tldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all pages that link to the given page.     *     * @param   string   $bltitle           Title to search.     * @param   integer  $blpageid          Pageid to search.     * @param   boolean  $blcontinue        When more results are available, use this to continue.     * @param   array    $blnamespace       The namespace to enumerate.     * @param   string   $blfilterredirect  How to filter for redirects..     * @param   integer  $bllimit           How many total pages to return.     * @param   boolean  $blredirect        If linking page is a redirect, find all pages that link to that redirect as well.     *     * @return  object     *     * @since   12.3     */	public function getBackLinks($bltitle, $blpageid = null, $blcontinue = null, array $blnamespace = null, $blfilterredirect = null,		$bllimit = null, $blredirect = null)	{		// Build the request.		$path = '?action=query&list=backlinks';		if (isset($bltitle))		{			$path .= '&bltitle=' . $bltitle;		}		if (isset($blpageid))		{			$path .= '&blpageid=' . $blpageid;		}		if ($blcontinue)		{			$path .= '&blcontinue=';		}		if (isset($blnamespace))		{			$path .= '&blnamespace=' . $this->buildParameter($blnamespace);		}		if (isset($blfilterredirect))		{			$path .= '&blfilterredirect=' . $blfilterredirect;		}		if (isset($bllimit))		{			$path .= '&bllimit=' . $bllimit;		}		if ($blredirect)		{			$path .= '&blredirect=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all pages that link to the given interwiki link.     *     * @param   string   $iwbltitle     Interwiki link to search for. Must be used with iwblprefix.     * @param   string   $iwblprefix    Prefix for the interwiki.     * @param   boolean  $iwblcontinue  When more results are available, use this to continue.     * @param   integer  $iwbllimit     How many total pages to return.     * @param   array    $iwblprop      Which properties to get.     *     * @return  object     *     * @since   12.3     */	public function getIWBackLinks($iwbltitle, $iwblprefix = null, $iwblcontinue = null, $iwbllimit = null, array $iwblprop = null)	{		// Build the request		$path = '?action=query&list=iwbacklinks';		if (isset($iwbltitle))		{			$path .= '&iwbltitle=' . $iwbltitle;		}		if (isset($iwblprefix))		{			$path .= '&iwblprefix=' . $iwblprefix;		}		if ($iwblcontinue)		{			$path .= '&iwblcontinue=';		}		if (isset($iwbllimit))		{			$path .= '&bllimit=' . $iwbllimit;		}		if (isset($iwblprop))		{			$path .= '&iwblprop=' . $this->buildParameter($iwblprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**	 * Method to get access token.	 *	 * @param   string  $user     The User to get token.	 * @param   string  $intoken  The type of token.	 *	 * @return  object	 *	 * @since   12.1	 */	public function getToken($user, $intoken)	{		// Build the request path.		$path = '?action=query&prop=info&intoken=' . $intoken . '&titles=User:' . $user;		// Send the request.		$response = $this->client->post($this->fetchUrl($path), null);		return (string) $this->validateResponse($response)->query->pages->page[$intoken . 'token'];	}}
<?php/** * @package    Joomla.Language * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * en-GB localise class * * @package  Joomla.Language * @since    1.6 */abstract class En_GBLocalise{	/**	 * Returns the potential suffixes for a specific number of items	 *	 * @param   int $count  The number of items.	 * @return  array  An array of potential suffixes.	 * @since   1.6	 */	public static function getPluralSuffixes($count)	{		if ($count == 0)		{			$return = array('0');		}		elseif ($count == 1)		{			$return = array('1');		}		else		{			$return = array('MORE');		}		return $return;	}	/**	 * Returns the ignored search words	 *	 * @return  array  An array of ignored search words.	 * @since   1.6	 */	public static function getIgnoredSearchWords()	{		$search_ignore = array();		$search_ignore[] = "and";		$search_ignore[] = "in";		$search_ignore[] = "on";		return $search_ignore;	}	/**	 * Returns the lower length limit of search words	 *	 * @return  integer  The lower length limit of search words.	 * @since   1.6	 */	public static function getLowerLimitSearchWord()	{		return 3;	}	/**	 * Returns the upper length limit of search words	 *	 * @return  integer  The upper length limit of search words.	 * @since   1.6	 */	public static function getUpperLimitSearchWord()	{		return 20;	}	/**	 * Returns the number of chars to display when searching	 *	 * @return  integer  The number of chars to display when searching.	 * @since   1.6	 */	public static function getSearchDisplayedCharactersNumber()	{		return 200;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Model for the display of system information. * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminModelSysInfo extends JModelLegacy{	/**	 * @var array Some PHP settings	 * @since  1.6	 */	protected $php_settings = null;	/**	 * @var array Config values	 * @since  1.6	 */	protected $config = null;	/**	 * @var array Some system values	 * @since  1.6	 */	protected $info = null;	/**	 * @var string PHP info	 * @since  1.6	 */	protected $php_info = null;	/**	 * Information about writable state of directories	 *	 * @var array	 * @since  1.6	 */	protected $directories = null;	/**	 * The current editor.	 *	 * @var string	 * @since  1.6	 */	protected $editor = null;	/**	 * Method to get the ChangeLog	 *	 * @return array some php settings	 *	 * @since  1.6	 */	public function &getPhpSettings()	{		if (is_null($this->php_settings))		{			$this->php_settings = array();			$this->php_settings['safe_mode']			= ini_get('safe_mode') == '1';			$this->php_settings['display_errors']		= ini_get('display_errors') == '1';			$this->php_settings['short_open_tag']		= ini_get('short_open_tag') == '1';			$this->php_settings['file_uploads']			= ini_get('file_uploads') == '1';			$this->php_settings['magic_quotes_gpc']		= ini_get('magic_quotes_gpc') == '1';			$this->php_settings['register_globals']		= ini_get('register_globals') == '1';			$this->php_settings['output_buffering']		= (bool) ini_get('output_buffering');			$this->php_settings['open_basedir']			= ini_get('open_basedir');			$this->php_settings['session.save_path']	= ini_get('session.save_path');			$this->php_settings['session.auto_start']	= ini_get('session.auto_start');			$this->php_settings['disable_functions']	= ini_get('disable_functions');			$this->php_settings['xml']					= extension_loaded('xml');			$this->php_settings['zlib']					= extension_loaded('zlib');			$this->php_settings['zip']					= function_exists('zip_open') && function_exists('zip_read');			$this->php_settings['mbstring']				= extension_loaded('mbstring');			$this->php_settings['iconv']				= function_exists('iconv');		}		return $this->php_settings;	}	/**	 * Method to get the config	 *	 * @return  array  config values	 *	 * @since  1.6	 */	public function &getConfig()	{		if (is_null($this->config))		{			$registry = new JRegistry(new JConfig);			$this->config = $registry->toArray();			$hidden = array('host', 'user', 'password', 'ftp_user', 'ftp_pass', 'smtpuser', 'smtppass');			foreach ($hidden as $key)			{				$this->config[$key] = 'xxxxxx';			}		}		return $this->config;	}	/**	 * Method to get the system information	 *	 * @return  array system information values	 *	 * @since   1.6	 */	public function &getInfo()	{		if (is_null($this->info))		{			$this->info = array();			$version = new JVersion;			$platform = new JPlatform;			$db = JFactory::getDbo();			if (isset($_SERVER['SERVER_SOFTWARE']))			{				$sf = $_SERVER['SERVER_SOFTWARE'];			}			else {				$sf = getenv('SERVER_SOFTWARE');			}			$this->info['php']			= php_uname();			$this->info['dbversion']	= $db->getVersion();			$this->info['dbcollation']	= $db->getCollation();			$this->info['phpversion']	= phpversion();			$this->info['server']		= $sf;			$this->info['sapi_name']	= php_sapi_name();			$this->info['version']		= $version->getLongVersion();			$this->info['platform']		= $platform->getLongVersion();			$this->info['useragent']	= $_SERVER['HTTP_USER_AGENT'];		}		return $this->info;	}	/**	 * Method to get the PHP info	 *	 * @return  string PHP info	 *	 * @since  1.6	 */	public function &getPHPInfo()	{		if (is_null($this->php_info))		{			ob_start();			date_default_timezone_set('UTC');			phpinfo(INFO_GENERAL | INFO_CONFIGURATION | INFO_MODULES);			$phpinfo = ob_get_contents();			ob_end_clean();			preg_match_all('#<body[^>]*>(.*)</body>#siU', $phpinfo, $output);			$output = preg_replace('#<table[^>]*>#', '<table class="table table-striped adminlist">', $output[1][0]);			$output = preg_replace('#(\w),(\w)#', '\1, \2', $output);			$output = preg_replace('#<hr />#', '', $output);			$output = str_replace('<div class="center">', '', $output);			$output = preg_replace('#<tr class="h">(.*)<\/tr>#', '<thead><tr class="h">$1</tr></thead><tbody>', $output);			$output = str_replace('</table>', '</tbody></table>', $output);			$output = str_replace('</div>', '', $output);			$this->php_info = $output;		}		return $this->php_info;	}	/**	 * Method to get the directory states	 *	 * @return array States of directories	 *	 * @since  1.6	 */	public function getDirectory()	{		if (is_null($this->directories))		{			$this->directories = array();			$registry = JFactory::getConfig();			$cparams = JComponentHelper::getParams('com_media');			$this->_addDirectory('administrator/components', JPATH_ADMINISTRATOR . '/components');			$this->_addDirectory('administrator/language', JPATH_ADMINISTRATOR . '/language');			// List all admin languages			$admin_langs = new DirectoryIterator(JPATH_ADMINISTRATOR . '/language');			foreach ($admin_langs as $alang)			{				if (!$alang->isDir() || $alang->isDot())				{					continue;				}				$name = $alang->getFilename();				$this->_addDirectory('administrator/language/' . $name, JPATH_ADMINISTRATOR . '/language/' . $name);			}			// List all manifests folders			$manifests = new DirectoryIterator(JPATH_ADMINISTRATOR . '/manifests');			foreach ($manifests as $manifest)			{				if (!$manifest->isDir() || $manifest->isDot())				{					continue;				}				$name = $manifest->getFilename();				$this->_addDirectory('administrator/manifests/' . $name, JPATH_ADMINISTRATOR . '/manifests/' . $name);			}			$this->_addDirectory('administrator/modules', JPATH_ADMINISTRATOR . '/modules');			$this->_addDirectory('administrator/templates', JPATH_THEMES);			$this->_addDirectory('components', JPATH_SITE . '/components');			$this->_addDirectory($cparams->get('image_path'), JPATH_SITE . '/' . $cparams->get('image_path'));			// List all images folders			$image_folders = new DirectoryIterator(JPATH_SITE . '/' . $cparams->get('image_path'));			foreach ($image_folders as $folder)			{				if (!$folder->isDir() || $folder->isDot())				{					continue;				}				$name = $manifest->getFilename();				$this->_addDirectory('images/' . $name, JPATH_SITE . '/' . $cparams->get('image_path') . '/' . $name);			}			$this->_addDirectory('language', JPATH_SITE . '/language');			// List all site languages			$site_langs = new DirectoryIterator(JPATH_SITE . '/language');			foreach ($site_langs as $alang)			{				if (!$alang->isDir() || $alang->isDot())				{					continue;				}				$name = $alang->getFilename();				$this->_addDirectory('language/' . $name, JPATH_SITE . '/language/' . $name);			}			$this->_addDirectory('libraries', JPATH_LIBRARIES);			$this->_addDirectory('media', JPATH_SITE . '/media');			$this->_addDirectory('modules', JPATH_SITE . '/modules');			$this->_addDirectory('plugins', JPATH_PLUGINS);			$plugin_groups = new DirectoryIterator(JPATH_SITE . '/language');			foreach ($plugin_groups as $folder)			{				if (!$alang->isDir() || $alang->isDot())				{					continue;				}				$name = $alang->getFilename();				$this->_addDirectory('plugins/' . $name, JPATH_PLUGINS . '/' . $name);			}			$this->_addDirectory('templates', JPATH_SITE . '/templates');			$this->_addDirectory('configuration.php', JPATH_CONFIGURATION . '/configuration.php');			$this->_addDirectory('cache', JPATH_SITE.'/cache', 'COM_ADMIN_CACHE_DIRECTORY');			$this->_addDirectory('administrator/cache', JPATH_CACHE, 'COM_ADMIN_CACHE_DIRECTORY');			$this->_addDirectory($registry->get('log_path', JPATH_ROOT . '/log'), $registry->get('log_path', JPATH_ROOT . '/log'), 'COM_ADMIN_LOG_DIRECTORY');			$this->_addDirectory($registry->get('tmp_path', JPATH_ROOT . '/tmp'), $registry->get('tmp_path', JPATH_ROOT . '/tmp'), 'COM_ADMIN_TEMP_DIRECTORY');		}		return $this->directories;	}	/**	 * Method to add a directory	 *	 * @return void	 * @since  1.6	 */	private function _addDirectory($name, $path, $message = '')	{		$this->directories[$name] = array('writable' => is_writable($path), 'message' => $message);	}	/**	 * Method to get the editor	 *	 * @return  string The default editor	 *	 * @note: has to be removed (it is present in the config...)	 *	 * @since  1.6	 */	public function &getEditor()	{		if (is_null($this->editor))		{			$config = JFactory::getConfig();			$this->editor = $config->get('editor');		}		return $this->editor;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');JHtml::_('bootstrap.tooltip');JHtml::addIncludePath(JPATH_SITE . '/components/com_finder/helpers/html');// Load the smart search component language file.$lang = JFactory::getLanguage();$lang->load('com_finder', JPATH_SITE);$suffix = $params->get('moduleclass_sfx');$output = '<input type="text" name="q" id="mod-finder-searchword" class="search-query input-medium" size="' . $params->get('field_size', 20) . '" value="' . htmlspecialchars(JFactory::getApplication()->input->get('q', '', 'string')) . '" />';$button = '';$label = '';if ($params->get('show_label', 1)){	$label = '<label for="mod-finder-searchword" class="finder' . $suffix . '">' . $params->get('alt_label', JText::_('JSEARCH_FILTER_SUBMIT')) . '</label>';	switch ($params->get('label_pos', 'left')):		case 'top' :			$label = $label . '<br />';			$output = $label . $output;			break;		case 'bottom' :			$label = '<br />' . $label;			$output = $output . $label;			break;		case 'right' :			$output = $output . $label;			break;		case 'left' :		default :			$output = $label . $output;			break;	endswitch;}if ($params->get('show_button', 1)){	$button = '<button class="btn btn-primary hasTooltip ' . $suffix . ' finder' . $suffix . '" type="submit" title="' . JText::_('MOD_FINDER_SEARCH_BUTTON') . '"><i class="icon-search icon-white"></i></button>';	switch ($params->get('button_pos', 'right')):		case 'top' :			$button = $button . '<br />';			$output = $button . $output;			break;		case 'bottom' :			$button = '<br />' . $button;			$output = $output . $button;			break;		case 'right' :			$output = $output . $button;			break;		case 'left' :		default :			$output = $button . $output;			break;	endswitch;}JHtml::stylesheet('com_finder/finder.css', false, true, false);?><script type="text/javascript">//<![CDATA[	window.addEvent('domready', function()	{		var value;		// Set the input value if not already set.		if (!document.id('mod-finder-searchword').getProperty('value'))		{			document.id('mod-finder-searchword').setProperty('value', '<?php echo JText::_('MOD_FINDER_SEARCH_VALUE', true); ?>');		}		// Get the current value.		value = document.id('mod-finder-searchword').getProperty('value');		// If the current value equals the default value, clear it.		document.id('mod-finder-searchword').addEvent('focus', function()		{			if (this.getProperty('value') == '<?php echo JText::_('MOD_FINDER_SEARCH_VALUE', true); ?>')			{				this.setProperty('value', '');			}		});		// If the current value is empty, set the previous value.		document.id('mod-finder-searchword').addEvent('blur', function()		{			if (!this.getProperty('value'))			{				this.setProperty('value', value);			}		});		document.id('mod-finder-searchform').addEvent('submit', function(e){			e = new Event(e);			e.stop();			// Disable select boxes with no value selected.			if (document.id('mod-finder-advanced') != null)			{				document.id('mod-finder-advanced').getElements('select').each(function(s){					if (!s.getProperty('value'))					{						s.setProperty('disabled', 'disabled');					}				});			}			document.id('mod-finder-searchform').submit();		});		/*		 * This segment of code sets up the autocompleter.		 */		<?php if ($params->get('show_autosuggest', 1)) : ?>			<?php JHtml::_('script', 'com_finder/autocompleter.js', false, true); ?>			var url = '<?php echo JRoute::_('index.php?option=com_finder&task=suggestions.display&format=json&tmpl=component', false); ?>';			var ModCompleter = new Autocompleter.Request.JSON(document.id('mod-finder-searchword'), url, {'postVar': 'q'});		<?php endif; ?>	});//]]></script><form id="mod-finder-searchform" action="<?php echo JRoute::_($route); ?>" method="get" class="form-search">	<div class="finder<?php echo $suffix; ?>">		<?php		// Show the form fields.		echo $output;		?>		<?php if ($params->get('show_advanced', 1)) : ?>			<?php if ($params->get('show_advanced', 1) == 2) : ?>				<br />				<a href="<?php echo JRoute::_($route); ?>"><?php echo JText::_('COM_FINDER_ADVANCED_SEARCH'); ?></a>			<?php elseif ($params->get('show_advanced', 1) == 1) : ?>				<div id="mod-finder-advanced">					<?php echo JHtml::_('filter.select', $query, $params); ?>				</div>			<?php endif; ?>		<?php endif; ?>		<?php echo modFinderHelper::getGetFields($route); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Adsense data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataAdsense extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/adsense');		}	}	/**	 * Method to get an Adsense account's settings from Google	 *	 * @param   string   $accountID    ID of account to get	 * @param   boolean  $subaccounts  Include list of subaccounts	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getAccount($accountID, $subaccounts = true)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . ($subaccounts ? '?tree=true' : '');			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense accounts from Google	 *	 * @param   array  $options   Search settings	 * @param   int    $maxpages  Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listAccounts($options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense clients from Google	 *	 * @param   string  $accountID  ID of account to list the clients from	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listClients($accountID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an AdSense AdUnit	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $adunitID    ID of adunit to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getUnit($accountID, $adclientID, $adunitID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels for a specific Adunit	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $adunitID    ID of adunit to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUnitChannels($accountID, $adclientID, $adunitID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID) . '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an Adsense Channel	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $channelID   ID of channel to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getChannel($accountID, $adclientID, $channelID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/';			$url .= urlencode($adclientID) . '/customchannels/' . urlencode($channelID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Adunits for a specific Custom Channel	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $channelID   ID of channel to list units from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannelUnits($accountID, $adclientID, $channelID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels/' . urlencode($channelID) . '/adunits?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to generate a report from Google AdSense	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUrlChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/urlchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Channel URLs	 *	 * @param   string  $accountID  ID of account	 * @param   mixed   $start      Start day	 * @param   mixed   $end        End day	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function generateReport($accountID, $start, $end = false, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			if (is_int($start))			{				$startobj = new DateTime;				$startobj->setTimestamp($start);			}			elseif (is_string($start))			{				$startobj = new DateTime($start);			}			elseif (is_a($start, 'DateTime'))			{				$startobj = $start;			}			else			{				throw new InvalidArgumentException('Invalid start time.');			}			if (!$end)			{				$endobj = new DateTime;			}			elseif (is_int($end))			{				$endobj = new DateTime;				$endobj->setTimestamp($end);			}			elseif (is_string($end))			{				$endobj = new DateTime($end);			}			elseif (is_a($end, 'DateTime'))			{				$endobj = $end;			}			else			{				throw new InvalidArgumentException('Invalid end time.');			}			$options['startDate'] = $startobj->format('Y-m-d');			$options['endDate'] = $endobj->format('Y-m-d');			$begin = array_key_exists('startIndex', $options) ? $options['startIndex'] : 0;			unset($options['startIndex']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/reports?' . http_build_query($options);			if (strpos($url, '&'))			{				$url .= '&';			}			$i = 0;			$data['rows'] = array();			do			{				$jdata = $this->query($url . 'startIndex=' . count($data['rows']));				$newdata = json_decode($jdata->body, true);				if ($newdata && array_key_exists('rows', $newdata))				{					$newdata['rows'] = array_merge($data['rows'], $newdata['rows']);					$data = $newdata;				}				else				{					throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");				}				$i++;			}			while (count($data['rows']) < $data['totalMatchedRows'] && $i < $maxpages);			return $data;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (isset($fieldSet->description) && trim($fieldSet->description)) :	echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';endif;?><fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>	<ul class="adminformlist">			<li><?php echo $this->form->getLabel('created_user_id'); ?>			<?php echo $this->form->getInput('created_user_id'); ?></li>			<li><?php echo $this->form->getLabel('created_by_alias'); ?>			<?php echo $this->form->getInput('created_by_alias'); ?></li>			<li><?php echo $this->form->getLabel('created_time'); ?>			<?php echo $this->form->getInput('created_time'); ?></li>			<li><?php echo $this->form->getLabel('publish_up'); ?>			<?php echo $this->form->getInput('publish_up'); ?></li>			<li><?php echo $this->form->getLabel('publish_down'); ?>			<?php echo $this->form->getInput('publish_down'); ?></li>			<li><?php echo $this->form->getLabel('modified_user_id'); ?>			<?php echo $this->form->getInput('modified_user_id'); ?></li>			<li><?php echo $this->form->getLabel('modified_time'); ?>			<?php echo $this->form->getInput('modified_time'); ?></li>			<li><?php echo $this->form->getLabel('version'); ?>			<?php echo $this->form->getInput('version'); ?></li>			</ul></fieldset><?php $fieldSets = $this->form->getFieldsets('params'); foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-params');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>		<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>		<?php endforeach; ?>		</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$html = JHtml::_('icons.buttons', $buttons);?><?php if (!empty($html)) : ?>	<div class="row-striped">		<?php echo $html;?>	</div><?php endif;?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=styles'); ?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<div id="filter-bar" class="btn-toolbar">		<div class="filter-search btn-group pull-left">			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TEMPLATES_STYLES_FILTER_SEARCH_DESC'); ?>" />		</div>		<div class="btn-group pull-left">			<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>			<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>		</div>		<div class="btn-group pull-right hidden-phone">			<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>			<?php echo $this->pagination->getLimitBox(); ?>		</div>	</div>	<div class="clear"> </div>	<table class="table table-striped">		<thead>			<tr>				<th width="5">					&#160;				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_STYLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_DEFAULT', 'a.home', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap center">					<?php echo JText::_('COM_TEMPLATES_HEADING_ASSIGNED'); ?>				</th>				<th width="10%" class="nowrap">					<?php echo JHtml::_('grid.sort', 'JCLIENT', 'a.client_id', $listDirn, $listOrder); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_TEMPLATE', 'a.template', $listDirn, $listOrder); ?>				</th>				<th width="1%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="8">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create',     'com_templates');				$canEdit   = $user->authorise('core.edit',       'com_templates');				$canChange = $user->authorise('core.edit.state', 'com_templates');			?>			<tr class="row<?php echo $i % 2; ?>">				<td width="1%" class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($this->preview && $item->client_id == '0') : ?>						<a target="_blank"href="<?php echo JURI::root().'index.php?tp=1&templateStyle='.(int) $item->id ?>"  class="jgrid" title="<?php echo  htmlspecialchars(JText::_('COM_TEMPLATES_TEMPLATE_PREVIEW')); ?>::<?php echo htmlspecialchars($item->title);?>" >						<i class="icon-eye-open tip hasTooltip" data-original-title="<?php echo  htmlspecialchars(JText::_('COM_TEMPLATES_TEMPLATE_PREVIEW')); ?>" ></i></a>					<?php elseif ($item->client_id == '1') : ?>						<span class="disabled"><i class="icon-eye-close tip hasTooltip" data-original-title="<?php echo  htmlspecialchars(JText::_('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_ADMIN')); ?>" ></i></span>					<?php else: ?>						<span class="disabled"><i class="icon-eye-close tip hasTooltip" data-original-title="<?php echo  htmlspecialchars(JText::_('COM_TEMPLATES_TEMPLATE_NO_PREVIEW')); ?>" ></i></span>					<?php endif; ?>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_templates&task=style.edit&id='.(int) $item->id); ?>">						<?php echo $this->escape($item->title);?></a>					<?php else : ?>						<?php echo $this->escape($item->title);?>					<?php endif; ?>				</td>				<td class="center">					<?php if ($item->home == '0' || $item->home == '1'):?>						<?php echo JHtml::_('jgrid.isdefault', $item->home != '0', $i, 'styles.', $canChange && $item->home != '1');?>					<?php elseif ($canChange):?>						<a href="<?php echo JRoute::_('index.php?option=com_templates&task=styles.unsetDefault&cid[]='.$item->id.'&'.JSession::getFormToken().'=1');?>">							<?php echo JHtml::_('image', 'mod_languages/'.$item->image.'.gif', $item->language_title, array('title' => JText::sprintf('COM_TEMPLATES_GRID_UNSET_LANGUAGE', $item->language_title)), true);?>						</a>					<?php else:?>						<?php echo JHtml::_('image', 'mod_languages/'.$item->image.'.gif', $item->language_title, array('title' => $item->language_title), true);?>					<?php endif;?>				</td>				<td class="center">					<?php if ($item->assigned > 0) : ?>						<i class="icon-ok tip hasTooltip" title="<?php echo JText::plural('COM_TEMPLATES_ASSIGNED', $item->assigned)?>"></i>					<?php else : ?>						&#160;					<?php endif; ?>				</td>				<td class="small">					<?php echo $item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>				</td>				<td>					<label for="cb<?php echo $i;?>" class="small">						<a href="<?php echo JRoute::_('index.php?option=com_templates&view=template&id='.(int) $item->e_id); ?>  ">							<?php echo ucfirst($this->escape($item->template));?>						</a>					</label>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;jimport('joomla.filesystem.folder');jimport('joomla.filesystem.file');JFormHelper::loadFieldClass('radio');/** * Sample data Form Field class. * * @package  Joomla.Installation * @since    1.6 */class JFormFieldSample extends JFormFieldRadio{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Sample';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   1.6	 */	protected function getOptions()	{		$lang = JFactory::getLanguage();		$options = array();		$type = $this->form->getValue('db_type');		// Some database drivers share DDLs; point these drivers to the correct parent		if ($type == 'mysqli')		{			$type = 'mysql';		}		elseif ($type == 'sqlsrv')		{			$type = 'sqlazure';		}		// Get a list of files in the search path with the given filter.		$files = JFolder::files(JPATH_INSTALLATION . '/sql/' . $type, '^sample.*\.sql$');		// Add option to not install sampledata.		$options[] = JHtml::_('select.option', '', 'INSTL_SITE_INSTALL_SAMPLE_NONE');		// Build the options list from the list of files.		if (is_array($files))		{			foreach ($files as $file)			{				$options[] = JHtml::_('select.option', $file, $lang->hasKey($key = 'INSTL_' . ($file = JFile::stripExt($file)) . '_SET') ? $key : $file);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		if (!$this->value)		{			$conf = JFactory::getConfig();			if ($conf->get('sampledata'))			{				$this->value = $conf->get('sampledata');			}			else			{				$this->value = '';			}		}		return parent::getInput();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');$user = JFactory::getUser();$canDo = TemplatesHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'style.cancel' || document.formvalidator.isValid(document.id('style-form')))		{			Joomla.submitform(task, document.getElementById('style-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_templates&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="style-form" class="form-validate">	<div class="width-60 fltlft">		<fieldset class="adminform">			<legend><?php echo JText::_('JDETAILS');?></legend>			<ul class="adminformlist">			<li><?php echo $this->form->getLabel('title'); ?>			<?php echo $this->form->getInput('title'); ?></li>			<li><?php echo $this->form->getLabel('template'); ?>			<?php echo $this->form->getInput('template'); ?>			<?php echo $this->form->getLabel('client_id'); ?>			<?php echo $this->form->getInput('client_id'); ?>			<input type="text" size="35" value="<?php echo $this->item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>	" class="readonly" readonly="readonly" /></li>			<li><?php echo $this->form->getLabel('home'); ?>			<?php echo $this->form->getInput('home'); ?></li>			<?php if ($this->item->id) : ?>				<li><?php echo $this->form->getLabel('id'); ?>				<span class="readonly"><?php echo $this->item->id; ?></span></li>			<?php endif; ?>			</ul>			<div class="clr"></div>			<?php if ($this->item->xml) : ?>				<?php if ($text = trim($this->item->xml->description)) : ?>					<label>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_DESCRIPTION'); ?>					</label>					<span class="readonly mod-desc"><?php echo JText::_($text); ?></span>				<?php endif; ?>			<?php else : ?>				<p class="error"><?php echo JText::_('COM_TEMPLATES_ERR_XML'); ?></p>			<?php endif; ?>			<div class="clr"></div>		</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<div class="width-40 fltrt">	<?php echo JHtml::_('sliders.start', 'template-sliders-'.$this->item->id); ?>		<?php //get the menu parameters that are automatically set but may be modified.			echo $this->loadTemplate('options'); ?>		<div class="clr"></div>	<?php echo JHtml::_('sliders.end'); ?>	</div>	<?php if ($user->authorise('core.edit', 'com_menu') && $this->item->client_id == 0):?>		<?php if ($canDo->get('core.edit.state')) : ?>			<div class="width-60 fltlft">			<?php echo $this->loadTemplate('assignment'); ?>			</div>			<?php endif; ?>		<?php endif;?>	<div class="clr"></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$client		= $this->state->get('filter.client_id') ? 'administrator' : 'site';$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_modules');$saveOrder	= $listOrder == 'ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_modules&task=modules.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_modules'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="15%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_POSITION', 'position', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone" >						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_MODULE', 'name', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_PAGES', 'pages', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language_title', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'ordering');				$canCreate  = $user->authorise('core.create',     'com_modules');				$canEdit    = $user->authorise('core.edit',       'com_modules');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_modules') && $canCheckin;			?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->position?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>						<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order" />					<?php else : ?>						<span class="sortable-handler inactive" >							<i class="icon-menu"></i>						</span>					<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('modules.state', $item->published, $i, $canChange, 'cb'); ?>					</td>					<td class="has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'modules.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.(int) $item->id); ?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>									<?php echo $this->escape($item->title); ?>							<?php endif; ?>							<?php if (!empty($item->note)) : ?>								<div class="small">									<?php echo JText::sprintf('JGLOBAL_LIST_NOTE', $this->escape($item->note));?>								</div>							<?php endif; ?>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'module.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'modules.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'modules.');								endif;								JHtml::_('dropdown.divider');								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'modules.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'modules.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'modules.');								endif;								// Render dropdown list								echo JHtml::_('dropdown.render');								?>						</div>					</td>					<td class="small hidden-phone">						<?php if ($item->position) : ?>							<span class="label label-info">								<?php echo $item->position; ?>							</span>						<?php else : ?>							<span class="label">								<?php echo JText::_('JNONE'); ?>							</span>						<?php endif; ?>					</td>					<td class="small hidden-phone">						<?php echo $item->name;?>					</td>					<td class="small hidden-phone">						<?php echo $item->pages; ?>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="small hidden-phone">						<?php if ($item->language == ''):?>							<?php echo JText::_('JDEFAULT'); ?>						<?php elseif ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JFormHelper::loadRuleClass('email');/** * JFormRule for com_contact to make sure the E-Mail adress is not blocked. * * @package     Joomla.Site * @subpackage  com_contact */class JFormRuleContactEmail extends JFormRuleEmail{	/**	 * Method to test for a valid color in hexadecimal.	 *	 * @param   SimpleXMLElement  &$element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value     The form field value to validate.	 * @param   string            $group     The field name group control value. This acts as as an array container for the field.	 *                                       For example if the field has name="foo" and the group value is set to "bar" then the	 *                                       full field name would end up being "bar[foo]".	 * @param   object            &$input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   object            &$form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 */	public function test(& $element, $value, $group = null, &$input = null, &$form = null)	{		if (!parent::test($element, $value, $group, $input, $form)){			return false;		}		$params = JComponentHelper::getParams('com_contact');		$banned = $params->get('banned_email');		foreach (explode(';', $banned) as $item) {			if (JString::stristr($item, $value) !== false)					return false;		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract Form Field class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */abstract class JFormField{	/**	 * The description text for the form field.  Usually used in tooltips.	 *	 * @var    string	 * @since  11.1	 */	protected $description;	/**	 * The SimpleXMLElement object of the <field /> XML element that describes the form field.	 *	 * @var    SimpleXMLElement	 * @since  11.1	 */	protected $element;	/**	 * The JForm object of the form attached to the form field.	 *	 * @var    JForm	 * @since  11.1	 */	protected $form;	/**	 * The form control prefix for field names from the JForm object attached to the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $formControl;	/**	 * The hidden state for the form field.	 *	 * @var    boolean	 * @since  11.1	 */	protected $hidden = false;	/**	 * True to translate the field label string.	 *	 * @var    boolean	 * @since  11.1	 */	protected $translateLabel = true;	/**	 * True to translate the field description string.	 *	 * @var    boolean	 * @since  11.1	 */	protected $translateDescription = true;	/**	 * The document id for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $id;	/**	 * The input for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $input;	/**	 * The label for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $label;	/**	 * The multiple state for the form field.  If true then multiple values are allowed for the	 * field.  Most often used for list field types.	 *	 * @var    boolean	 * @since  11.1	 */	protected $multiple = false;	/**	 * The name of the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $name;	/**	 * The name of the field.	 *	 * @var    string	 * @since  11.1	 */	protected $fieldname;	/**	 * The group of the field.	 *	 * @var    string	 * @since  11.1	 */	protected $group;	/**	 * The required state for the form field.  If true then there must be a value for the field to	 * be considered valid.	 *	 * @var    boolean	 * @since  11.1	 */	protected $required = false;	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type;	/**	 * The validation method for the form field.  This value will determine which method is used	 * to validate the value for a field.	 *	 * @var    string	 * @since  11.1	 */	protected $validate;	/**	 * The value of the form field.	 *	 * @var    mixed	 * @since  11.1	 */	protected $value;	/**	 * The label's CSS class of the form field	 *	 * @var    mixed	 * @since  11.1	 */	protected $labelClass;	/**	 * The count value for generated name field	 *	 * @var    integer	 * @since  11.1	 */	protected static $count = 0;	/**	 * The string used for generated fields names	 *	 * @var    integer	 * @since  11.1	 */	protected static $generated_fieldname = '__field';	/**	 * Method to instantiate the form field object.	 *	 * @param   JForm  $form  The form to attach to the form field object.	 *	 * @since   11.1	 */	public function __construct($form = null)	{		// If there is a form passed into the constructor set the form and form control properties.		if ($form instanceof JForm)		{			$this->form = $form;			$this->formControl = $form->getFormControl();		}		// Detect the field type if not set		if (!isset($this->type))		{			$parts = JStringNormalise::fromCamelCase(get_called_class(), true);			if ($parts[0] == 'J')			{				$this->type = JString::ucfirst($parts[count($parts) - 1], '_');			}			else			{				$this->type = JString::ucfirst($parts[0], '_') . JString::ucfirst($parts[count($parts) - 1], '_');			}		}	}	/**	 * Method to get certain otherwise inaccessible properties from the form field object.	 *	 * @param   string  $name  The property name for which to the the value.	 *	 * @return  mixed  The property value or null.	 *	 * @since   11.1	 */	public function __get($name)	{		switch ($name)		{			case 'description':			case 'formControl':			case 'hidden':			case 'id':			case 'multiple':			case 'name':			case 'required':			case 'type':			case 'validate':			case 'value':			case 'labelClass':			case 'fieldname':			case 'group':				return $this->$name;			case 'input':				// If the input hasn't yet been generated, generate it.				if (empty($this->input))				{					$this->input = $this->getInput();				}				return $this->input;			case 'label':				// If the label hasn't yet been generated, generate it.				if (empty($this->label))				{					$this->label = $this->getLabel();				}				return $this->label;			case 'title':				return $this->getTitle();		}		return null;	}	/**	 * Method to attach a JForm object to the field.	 *	 * @param   JForm  $form  The JForm object to attach to the form field.	 *	 * @return  JFormField  The form field object so that the method can be used in a chain.	 *	 * @since   11.1	 */	public function setForm(JForm $form)	{		$this->form = $form;		$this->formControl = $form->getFormControl();		return $this;	}	/**	 * Method to attach a JForm object to the field.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function setup(SimpleXMLElement $element, $value, $group = null)	{		// Make sure there is a valid JFormField XML element.		if ((string) $element->getName() != 'field')		{			return false;		}		// Reset the input and label values.		$this->input = null;		$this->label = null;		// Set the XML element object.		$this->element = $element;		// Get some important attributes from the form field element.		$class = (string) $element['class'];		$id = (string) $element['id'];		$multiple = (string) $element['multiple'];		$name = (string) $element['name'];		$required = (string) $element['required'];		// Set the required and validation options.		$this->required = ($required == 'true' || $required == 'required' || $required == '1');		$this->validate = (string) $element['validate'];		// Add the required class if the field is required.		if ($this->required)		{			if ($class)			{				if (strpos($class, 'required') === false)				{					$this->element['class'] = $class . ' required';				}			}			else			{				$this->element['class'] = 'required';			}		}		// Set the multiple values option.		$this->multiple = ($multiple == 'true' || $multiple == 'multiple');		// Allow for field classes to force the multiple values option.		if (isset($this->forceMultiple))		{			$this->multiple = (bool) $this->forceMultiple;		}		// Set the field description text.		$this->description = (string) $element['description'];		// Set the visibility.		$this->hidden = ((string) $element['type'] == 'hidden' || (string) $element['hidden'] == 'true');		// Determine whether to translate the field label and/or description.		$this->translateLabel = !((string) $this->element['translate_label'] == 'false' || (string) $this->element['translate_label'] == '0');		$this->translateDescription = !((string) $this->element['translate_description'] == 'false'			|| (string) $this->element['translate_description'] == '0');		// Set the group of the field.		$this->group = $group;		// Set the field name and id.		$this->fieldname = $this->getFieldName($name);		$this->name = $this->getName($this->fieldname);		$this->id = $this->getId($id, $this->fieldname);		// Set the field default value.		$this->value = $value;		// Set the CSS class of field label		$this->labelClass = (string) $element['labelclass'];		return true;	}	/**	 * Method to get the id used for the field input tag.	 *	 * @param   string  $fieldId    The field element id.	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The id to be used for the field input tag.	 *	 * @since   11.1	 */	protected function getId($fieldId, $fieldName)	{		$id = '';		// If there is a form control set for the attached form add it first.		if ($this->formControl)		{			$id .= $this->formControl;		}		// If the field is in a group add the group control to the field id.		if ($this->group)		{			// If we already have an id segment add the group control as another level.			if ($id)			{				$id .= '_' . str_replace('.', '_', $this->group);			}			else			{				$id .= str_replace('.', '_', $this->group);			}		}		// If we already have an id segment add the field id/name as another level.		if ($id)		{			$id .= '_' . ($fieldId ? $fieldId : $fieldName);		}		else		{			$id .= ($fieldId ? $fieldId : $fieldName);		}		// Clean up any invalid characters.		$id = preg_replace('#\W#', '_', $id);		return $id;	}	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	abstract protected function getInput();	/**	 * Method to get the field title.	 *	 * @return  string  The field title.	 *	 * @since   11.1	 */	protected function getTitle()	{		$title = '';		if ($this->hidden)		{			return $title;		}		// Get the label text from the XML element, defaulting to the element name.		$title = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$title = $this->translateLabel ? JText::_($title) : $title;		return $title;	}	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   11.1	 */	protected function getLabel()	{		$label = '';		if ($this->hidden)		{			return $label;		}		// Get the label text from the XML element, defaulting to the element name.		$text = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$text = $this->translateLabel ? JText::_($text) : $text;		// Build the class for the label.		$class = !empty($this->description) ? 'hasTip' : '';		$class = $this->required == true ? $class . ' required' : $class;		$class = !empty($this->labelClass) ? $class . ' ' . $this->labelClass : $class;		// Add the opening label tag and main attributes attributes.		$label .= '<label id="' . $this->id . '-lbl" for="' . $this->id . '" class="' . $class . '"';		// If a description is specified, use it to build a tooltip.		if (!empty($this->description))		{			$label .= ' title="'				. htmlspecialchars(				trim($text, ':') . '::' . ($this->translateDescription ? JText::_($this->description) : $this->description),				ENT_COMPAT, 'UTF-8'			) . '"';		}		// Add the label text and closing tag.		if ($this->required)		{			$label .= '>' . $text . '<span class="star">&#160;*</span></label>';		}		else		{			$label .= '>' . $text . '</label>';		}		return $label;	}	/**	 * Method to get the name used for the field input tag.	 *	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The name to be used for the field input tag.	 *	 * @since   11.1	 */	protected function getName($fieldName)	{		$name = '';		// If there is a form control set for the attached form add it first.		if ($this->formControl)		{			$name .= $this->formControl;		}		// If the field is in a group add the group control to the field name.		if ($this->group)		{			// If we already have a name segment add the group control as another level.			$groups = explode('.', $this->group);			if ($name)			{				foreach ($groups as $group)				{					$name .= '[' . $group . ']';				}			}			else			{				$name .= array_shift($groups);				foreach ($groups as $group)				{					$name .= '[' . $group . ']';				}			}		}		// If we already have a name segment add the field name as another level.		if ($name)		{			$name .= '[' . $fieldName . ']';		}		else		{			$name .= $fieldName;		}		// If the field should support multiple values add the final array segment.		if ($this->multiple)		{			switch (strtolower((string) $this->element['type']))			{				case 'text':				case 'textarea':				case 'email':				case 'password':				case 'radio':				case 'calendar':				case 'editor':				case 'hidden':					break;				default:					$name .= '[]';			}		}		return $name;	}	/**	 * Method to get the field name used.	 *	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The field name	 *	 * @since   11.1	 */	protected function getFieldName($fieldName)	{		if ($fieldName)		{			return $fieldName;		}		else		{			self::$count = self::$count + 1;			return self::$generated_fieldname . self::$count;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of users. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewDebugUser extends JViewLegacy{	protected $actions;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Access check.		if (!JFactory::getUser()->authorise('core.manage', 'com_users') || !JFactory::getConfig()->get('debug'))		{			return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));		}		$this->actions		= $this->get('DebugActions');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->user			= $this->get('User');		$this->levels		= UsersHelperDebug::getLevelsOptions();		$this->components	= UsersHelperDebug::getComponents();		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::sprintf('COM_USERS_VIEW_DEBUG_USER_TITLE', $this->user->id, $this->user->name), 'user');		JToolbarHelper::help('JHELP_USERS_DEBUG_USERS');		JHtmlSidebar::setAction('index.php?option=com_users&view=debuguser&user_id=' . (int) $this->state->get('filter.user_id'));		$option = '';		if (!empty($this->components))		{			$option = JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));		}		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_COMPONENT'),			'filter_component',			$option		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'),			'filter_level_start',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'))		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'),			'filter_level_end',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'))		);		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules Component Module Model * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.5 */class ModulesModelModules extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'published', 'a.published',				'access', 'a.access', 'access_level',				'ordering', 'a.ordering',				'module', 'a.module',				'language', 'a.language', 'language_title',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'client_id', 'a.client_id',				'position', 'a.position',				'pages',				'name', 'e.name',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$position = $this->getUserStateFromRequest($this->context . '.filter.position', 'filter_position', '', 'string');		$this->setState('filter.position', $position);		$module = $this->getUserStateFromRequest($this->context . '.filter.module', 'filter_module', '', 'string');		$this->setState('filter.module', $module);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', 0, 'int', false);		$previousId = $app->getUserState($this->context . '.filter.client_id_previous', null);		if ($previousId != $clientId || $previousId === null)		{			$this->getUserStateFromRequest($this->context . '.filter.client_id_previous', 'filter_client_id_previous', 0, 'int', true);			$app->setUserState($this->context . '.filter.client_id_previous', $clientId);		}		$this->setState('filter.client_id', $clientId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_modules');		$this->setState('params', $params);		// List state information.		parent::populateState('position', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.position');		$id .= ':' . $this->getState('filter.module');		$id .= ':' . $this->getState('filter.client_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Returns an object list	 *	 * @param   string The query	 * @param   int    Offset	 * @param   int    The number of records	 * @return  array	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$ordering = $this->getState('list.ordering', 'ordering');		if (in_array($ordering, array('pages', 'name')))		{			$this->_db->setQuery($query);			$result = $this->_db->loadObjectList();			$this->translate($result);			$lang = JFactory::getLanguage();			JArrayHelper::sortObjects($result, $ordering, $this->getState('list.direction') == 'desc' ? -1 : 1, true, $lang->getLocale());			$total = count($result);			$this->cache[$this->getStoreId('getTotal')] = $total;			if ($total < $limitstart)			{				$limitstart = 0;				$this->setState('list.start', 0);			}			return array_slice($result, $limitstart, $limit ? $limit : null);		}		else		{			if ($ordering == 'ordering')			{				$query->order('a.position ASC');				$ordering = 'a.ordering';			}			if ($ordering == 'language_title')			{				$ordering = 'l.title';			}			$query->order($this->_db->quoteName($ordering) . ' ' . $this->getState('list.direction'));			if ($ordering == 'position')			{				$query->order('a.ordering ASC');			}			$result = parent::_getList($query, $limitstart, $limit);			$this->translate($result);			return $result;		}	}	/**	 * Translate a list of objects	 *	 * @param   array The array of objects	 * @return  array The array of translated objects	 */	protected function translate(&$items)	{		$lang = JFactory::getLanguage();		$client = $this->getState('filter.client_id') ? 'administrator' : 'site';		foreach ($items as $item)		{			$extension = $item->module;			$source = constant('JPATH_' . strtoupper($client)) . "/modules/$extension";			$lang->load("$extension.sys", constant('JPATH_' . strtoupper($client)), null, false, false)				|| $lang->load("$extension.sys", $source, null, false, false)				|| $lang->load("$extension.sys", constant('JPATH_' . strtoupper($client)), $lang->getDefault(), false, false)				|| $lang->load("$extension.sys", $source, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);			if (is_null($item->pages))			{				$item->pages = JText::_('JNONE');			}			elseif ($item->pages < 0)			{				$item->pages = JText::_('COM_MODULES_ASSIGNED_VARIES_EXCEPT');			}			elseif ($item->pages > 0)			{				$item->pages = JText::_('COM_MODULES_ASSIGNED_VARIES_ONLY');			}			else			{				$item->pages = JText::_('JALL');			}		}	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.note, a.position, a.module, a.language,' .					'a.checked_out, a.checked_out_time, a.published+2*(e.enabled-1) as published, a.access, a.ordering, a.publish_up, a.publish_down'			)		);		$query->from($db->quoteName('#__modules') . ' AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the module menus		$query->select('MIN(mm.menuid) AS pages')			->join('LEFT', '#__modules_menu AS mm ON mm.moduleid = a.id');		// Join over the extensions		$query->select('e.name AS name')			->join('LEFT', '#__extensions AS e ON e.element = a.module')			->group(				'a.id, a.title, a.note, a.position, a.module, a.language,a.checked_out,' .					'a.checked_out_time, a.published, a.access, a.ordering,l.title, uc.name, ag.title, e.name,' .					'l.lang_code, uc.id, ag.id, mm.moduleid, e.element, a.publish_up, a.publish_down,e.enabled'			);		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Filter by published state		$state = $this->getState('filter.state');		if (is_numeric($state))		{			$query->where('a.published = ' . (int) $state);		}		elseif ($state === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by position		$position = $this->getState('filter.position');		if ($position && $position != 'none')		{			$query->where('a.position = ' . $db->quote($position));		}		elseif ($position == 'none')		{			$query->where('a.position = ' . $db->quote(''));		}		// Filter by module		$module = $this->getState('filter.module');		if ($module)		{			$query->where('a.module = ' . $db->quote($module));		}		// Filter by client.		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('a.client_id = ' . (int) $clientId . ' AND e.client_id =' . (int) $clientId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(' . 'a.title LIKE ' . $search . ' OR a.note LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;//Global definitions.//Joomla framework path definitions.$parts = explode(DIRECTORY_SEPARATOR, JPATH_BASE);array_pop($parts);//Defines.define('JPATH_ROOT',           implode(DIRECTORY_SEPARATOR, $parts));define('JPATH_SITE',          JPATH_ROOT);define('JPATH_CONFIGURATION', JPATH_ROOT);define('JPATH_ADMINISTRATOR', JPATH_ROOT . '/administrator');define('JPATH_LIBRARIES',     JPATH_ROOT . '/libraries');define('JPATH_PLUGINS',       JPATH_ROOT . '/plugins');define('JPATH_INSTALLATION',  JPATH_ROOT . '/installation');define('JPATH_THEMES',        JPATH_BASE . '/templates');define('JPATH_CACHE',         JPATH_ROOT . '/cache');define('JPATH_MANIFESTS',     JPATH_ADMINISTRATOR . '/manifests');
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'newsfeed.cancel' || document.formvalidator.isValid(document.id('newsfeed-form')))		{			Joomla.submitform(task, document.getElementById('newsfeed-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="newsfeed-form" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin Newsfeed -->		<div class="span10 form-horizontal">	<fieldset>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_NEWSFEEDS_NEW_NEWSFEED', true) : JText::sprintf('COM_NEWSFEEDS_EDIT_NEWSFEED', $this->item->id, true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('name'); ?></div>				<div class="controls"><?php echo $this->form->getInput('name'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('link'); ?></div>				<div class="controls"><?php echo $this->form->getInput('link'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>				<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('description'); ?></div>				<div class="controls"><?php echo $this->form->getInput('description'); ?></div>			</div>			<div class="span6">				<h4><?php echo JText::_('COM_NEWSFEEDS_FIELDSET_IMAGES');?></h4>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('images'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('images'); ?>					</div>				</div>				<?php foreach ($this->form->getGroup('images') as $field) : ?>					<div class="control-group">						<?php if (!$field->hidden) : ?>							<div class="control-label">								<?php echo $field->label; ?>							</div>						<?php endif; ?>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>				<div class="controls"><?php echo $this->form->getInput('id'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>			</div>			<?php if ($this->item->modified_by) : ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>				</div>			<?php endif; ?>			<?php if ($this->item->version) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('version'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('version'); ?>					</div>				</div>			<?php endif; ?>			<?php if ($this->item->hits) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('hits'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('hits'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>				<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('numarticles'); ?></div>				<div class="controls"><?php echo $this->form->getInput('numarticles'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('cache_time'); ?></div>				<div class="controls"><?php echo $this->form->getInput('cache_time'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('rtl'); ?></div>				<div class="controls"><?php echo $this->form->getInput('rtl'); ?></div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php $fieldSets = $this->form->getFieldsets('params'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $paramstabs = 'params-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php $fieldSets = $this->form->getFieldsets('metadata'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $metadatatabs = 'metadata-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $metadatatabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('metadata'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php if ($assoc) : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>				<?php echo $this->loadTemplate('associations'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Newsfeed -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags table * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsTableTag extends JTableNested{	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct($db)	{		parent::__construct('#__tags', 'id', $db);	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 * to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error string	 *	 * @see     JTable::bind	 * @since   3.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['urls']) && $array['urls'])		{			$registry = new JRegistry;			$registry->loadArray($array['urls']);			$array['urls'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function check()	{		// Check for valid name.		if (trim($this->title) == '')		{			throw new UnexpectedValueException(sprintf('The title is empty'));		}		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ((int) $this->publish_down > 0 && $this->publish_down < $this->publish_up)		{			throw new UnexpectedValueException(sprintf('End publish date is before start publish date.'));		}		// Clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// Only process if not empty			// Define array of characters to remove			$bad_characters = array("\n", "\r", "\"", "<", ">");			// Remove bad characters			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey);			// Create array using commas as delimiter			$keys = explode(',', $after_clean);			$clean_keys = array();			foreach($keys as $key)			{				if (trim($key))				{					// Ignore blank keywords					$clean_keys[] = trim($key);				}			}			// Put array back together delimited by ", "			$this->metakey = implode(", ", $clean_keys);		}		// Clean up description -- eliminate quotes and <> brackets		if (!empty($this->metadesc)) {			// Only process if not empty			$bad_characters = array("\"", "<", ">");			$this->metadesc = JString::str_ireplace($bad_characters, "", $this->metadesc);		}		return true;	}	/**	 * Overriden JTable::store to set modified data and user id.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id) {			// Existing item			$this->modified_time		= $date->toSql();			$this->modified_user_id	= $user->get('id');		}		else		{			// New tag. A tag created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created_time) {				$this->created_time = $date->toSql();			}			if (empty($this->created_user_id)) {				$this->created_user_id = $user->get('id');			}		}		// Verify that the alias is unique		$table = JTable::getInstance('Tag', 'TagsTable');		if ($table->load(array('alias' => $this->alias)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_TAGS_ERROR_UNIQUE_ALIAS'));			return false;		}		return parent::store($updateNulls);	}	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @see     http://docs.joomla.org/JTableNested/delete	 */	public function delete($pk = null, $children = false)	{		return parent::delete($pk, $children);		$helper = new JHelperTags;		$helper->tagDeleteInstances($pk);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_NEWSFEEDS_NO_ARTICLES'); ?></p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search"><span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php echo JText::_('COM_NEWSFEEDS_FILTER_LABEL').'&#160;'; ?></label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>	</fieldset>	<?php endif; ?>		<ul class="category list-striped list-condensed">			<?php foreach ($this->items as $i => $item) : ?>				<?php if ($this->items[$i]->published == 0) : ?>					<li class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>					<li class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>				<?php  if ($this->params->get('show_articles')) : ?>					<span class="list-hits badge badge-info pull-right">						<?php echo  JText::sprintf('COM_NEWSFEEDS_NUM_ARTICLES_COUNT', $item->numarticles); ?>					</span>				<?php  endif; ?>				<span class="list pull-left">					<strong class="list-title">						<a href="<?php echo JRoute::_(NewsFeedsHelperRoute::getNewsfeedRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</strong>				</span>				<?php if ($this->items[$i]->published == 0) : ?>					<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>				<?php endif; ?>				<br />				<?php  if ($this->params->get('show_link')) : ?>					<span class="list pull-left">							<a href="<?php echo $item->link; ?>"><?php echo $item->link; ?></a>					</span>					<br/>				<?php  endif; ?>				</li>			<?php endforeach; ?>		</ul>		<?php // Add pagination links ?>		<?php if (!empty($this->items)) : ?>			<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>				<div class="pagination">					<?php if ($this->params->def('show_pagination_results', 1)) : ?>						<p class="counter pull-right">							<?php echo $this->pagination->getPagesCounter(); ?>						</p>					<?php endif; ?>					<?php echo $this->pagination->getPagesLinks(); ?>				</div>			<?php endif; ?>		<?php  endif; ?>	</form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.folder');jimport('joomla.filesystem.file');/** * Joomla! update overview Model * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @author      nikosdion <nicholas@dionysopoulos.me> * @since       2.5.4 */class JoomlaupdateModelDefault extends JModelLegacy{	/**	 * Detects if the Joomla! update site currently in use matches the one	 * configured in this component. If they don't match, it changes it.	 *	 * @return  void	 *	 * @since    2.5.4	 */	public function applyUpdateSite()	{		// Determine the intended update URL		$params = JComponentHelper::getParams('com_joomlaupdate');		switch ($params->get('updatesource', 'nochange'))		{			// "Long Term Support (LTS) branch - Recommended"			case 'lts':				$updateURL = 'http://update.joomla.org/core/list.xml';				break;			// "Short term support (STS) branch"			case 'sts':				$updateURL = 'http://update.joomla.org/core/sts/list_sts.xml';				break;			// "Testing"			case 'testing':				$updateURL = 'http://update.joomla.org/core/test/list_test.xml';				break;			// "Custom"			case 'custom':				$updateURL = $params->get('customurl', '');				break;			// "Do not change"			case 'nochange':			default:				return;				break;		}		$db = $this->getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('us') . '.*')			->from($db->quoteName('#__update_sites_extensions') . ' AS ' . $db->quoteName('map'))			->join(				'INNER', $db->quoteName('#__update_sites') . ' AS ' . $db->quoteName('us')				. ' ON (' . 'us.update_site_id = map.update_site_id)'			)			->where('map.extension_id = ' . $db->quote(700));		$db->setQuery($query);		$update_site = $db->loadObject();		if ($update_site->location != $updateURL)		{			// Modify the database record			$update_site->last_check_timestamp = 0;			$update_site->location = $updateURL;			$db->updateObject('#__update_sites', $update_site, 'update_site_id');			// Remove cached updates			$query = $db->getQuery(true)				->delete($db->quoteName('#__updates'))				->where($db->quoteName('extension_id') . ' = ' . $db->quote('700'));			$db->setQuery($query);			$db->execute();		}	}	/**	 * Makes sure that the Joomla! update cache is up-to-date	 *	 * @param   boolean  $force  Force reload, ignoring the cache timeout	 *	 * @return  void	 *	 * @since    2.5.4	 */	public function refreshUpdates($force = false)	{		if ($force)		{			$cache_timeout = 0;		}		else		{			$update_params = JComponentHelper::getParams('com_installer');			$cache_timeout = $update_params->get('cachetimeout', 6, 'int');			$cache_timeout = 3600 * $cache_timeout;		}		$updater = JUpdater::getInstance();		$results = $updater->findUpdates(700, $cache_timeout);	}	/**	 * Returns an array with the Joomla! update information	 *	 * @return  array	 *	 * @since   2.5.4	 */	public function getUpdateInformation()	{		// Initialise the return array		$ret = array(			'installed' => JVERSION,			'latest' => null,			'object' => null		);		// Fetch the update information from the database		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('*')			->from($db->quoteName('#__updates'))			->where($db->quoteName('extension_id') . ' = ' . $db->quote(700));		$db->setQuery($query);		$updateObject = $db->loadObject();		if (is_null($updateObject))		{			$ret['latest'] = JVERSION;			return $ret;		}		else		{			$ret['latest'] = $updateObject->version;		}		// Fetch the full udpate details from the update details URL		jimport('joomla.updater.update');		$update = new JUpdate;		$update->loadFromXML($updateObject->detailsurl);		// Pass the update object		if ($ret['latest'] == JVERSION)		{			$ret['object'] = null;		}		else		{			$ret['object'] = $update;		}		return $ret;	}	/**	 * Returns an array with the configured FTP options	 *	 * @return  array	 *	 * @since   2.5.4	 */	public function getFTPOptions()	{		$config = JFactory::getConfig();		return array(			'host' => $config->get('ftp_host'),			'port' => $config->get('ftp_port'),			'username' => $config->get('ftp_user'),			'password' => $config->get('ftp_pass'),			'directory' => $config->get('ftp_root'),			'enabled' => $config->get('ftp_enable'),		);	}	/**	 * Removes all of the updates from the table and enable all update streams.	 *	 * @return  boolean  Result of operation	 *	 * @since   3.0	 */	public function purge()	{		$db = JFactory::getDbo();		// Modify the database record		$update_site = new stdClass;		$update_site->last_check_timestamp = 0;		$update_site->enabled = 1;		$update_site->update_site_id = 1;		$db->updateObject('#__update_sites', $update_site, 'update_site_id');		$query = $db->getQuery(true)			->delete($db->quoteName('#__updates'))			->where($db->quoteName('update_site_id') . ' = ' . $db->quote('1'));		$db->setQuery($query);		if ($db->execute())		{			$this->_message = JText::_('JLIB_INSTALLER_PURGED_UPDATES');			return true;		}		else		{			$this->_message = JText::_('JLIB_INSTALLER_FAILED_TO_PURGE_UPDATES');			return false;		}	}	/**	 * Downloads the update package to the site	 *	 * @return  bool|string False on failure, basename of the file in any other case	 *	 * @since   2.5.4	 */	public function download()	{		$updateInfo = $this->getUpdateInformation();		$packageURL = $updateInfo['object']->downloadurl->_data;		$basename = basename($packageURL);		// Find the path to the temp directory and the local package		$config = JFactory::getConfig();		$tempdir = $config->get('tmp_path');		$target = $tempdir . '/' . $basename;		// Do we have a cached file?		$exists = JFile::exists($target);		if (!$exists)		{			// Not there, let's fetch it			return $this->downloadPackage($packageURL, $target);		}		else		{			// Is it a 0-byte file? If so, re-download please.			$filesize = @filesize($target);			if (empty($filesize))			{				return $this->downloadPackage($packageURL, $target);			}			// Yes, it's there, skip downloading			return $basename;		}	}	/**	 * Downloads a package file to a specific directory	 *	 * @param   string  $url     The URL to download from	 * @param   string  $target  The directory to store the file	 *	 * @return  boolean True on success	 *	 * @since   2.5.4	 */	protected function downloadPackage($url, $target)	{		JLoader::import('helpers.download', JPATH_COMPONENT_ADMINISTRATOR);		$result = AdmintoolsHelperDownload::download($url, $target);		if (!$result)		{			return false;		}		else		{			return basename($target);		}	}	/**	 * @since  2.5.4	 */	public function createRestorationFile($basename = null)	{		// Get a password		$password = JUserHelper::genRandomPassword(32);		$app = JFactory::getApplication();		$app->setUserState('com_joomlaupdate.password', $password);		// Do we have to use FTP?		$method = $app->input->get('method', 'direct');		// Get the absolute path to site's root		$siteroot = JPATH_SITE;		// If the package name is not specified, get it from the update info		if (empty($basename))		{			$updateInfo = $this->getUpdateInformation();			$packageURL = $updateInfo['object']->downloadurl->_data;			$basename = basename($packageURL);		}		// Get the package name		$config = JFactory::getConfig();		$tempdir = $config->get('tmp_path');		$file = $tempdir . '/' . $basename;		$filesize = @filesize($file);		$app->setUserState('com_joomlaupdate.password', $password);		$app->setUserState('com_joomlaupdate.filesize', $filesize);		$data = "<?php\ndefined('_AKEEBA_RESTORATION') or die('Restricted access');\n";		$data .= '$restoration_setup = array(' . "\n";		$data .= <<<ENDDATA	'kickstart.security.password' => '$password',	'kickstart.tuning.max_exec_time' => '5',	'kickstart.tuning.run_time_bias' => '75',	'kickstart.tuning.min_exec_time' => '0',	'kickstart.procengine' => '$method',	'kickstart.setup.sourcefile' => '$file',	'kickstart.setup.destdir' => '$siteroot',	'kickstart.setup.restoreperms' => '0',	'kickstart.setup.filetype' => 'zip',	'kickstart.setup.dryrun' => '0'ENDDATA;		if ($method == 'ftp')		{			// Fetch the FTP parameters from the request. Note: The password should be			// allowed as raw mode, otherwise something like !@<sdf34>43H% would be			// sanitised to !@43H% which is just plain wrong.			$ftp_host = $app->input->get('ftp_host', '');			$ftp_port = $app->input->get('ftp_port', '21');			$ftp_user = $app->input->get('ftp_user', '');			$ftp_pass = $app->input->get('ftp_pass', '', 'default', 'none', 2);			$ftp_root = $app->input->get('ftp_root', '');			// Is the tempdir really writable?			$writable = @is_writeable($tempdir);			if ($writable)			{				// Let's be REALLY sure				$fp = @fopen($tempdir . '/test.txt', 'w');				if ($fp === false)				{					$writable = false;				}				else				{					fclose($fp);					unlink($tempdir . '/test.txt');				}			}			// If the tempdir is not writable, create a new writable subdirectory			if (!$writable)			{				$FTPOptions = JClientHelper::getCredentials('ftp');				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], null, $FTPOptions['user'], $FTPOptions['pass']);				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $tempdir . '/admintools'), '/');				if (!@mkdir($tempdir . '/admintools'))				{					$ftp->mkdir($dest);				}				if (!@chmod($tempdir . '/admintools', 511))				{					$ftp->chmod($dest, 511);				}				$tempdir .= '/admintools';			}			// Just in case the temp-directory was off-root, try using the default tmp directory			$writable = @is_writeable($tempdir);			if (!$writable)			{				$tempdir = JPATH_ROOT . '/tmp';				// Does the JPATH_ROOT/tmp directory exist?				if (!is_dir($tempdir))				{					JFolder::create($tempdir, 511);					JFile::write($tempdir . '/.htaccess', "order deny, allow\ndeny from all\nallow from none\n");				}				// If it exists and it is unwritable, try creating a writable admintools subdirectory				if (!is_writable($tempdir))				{					$FTPOptions = JClientHelper::getCredentials('ftp');					$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], null, $FTPOptions['user'], $FTPOptions['pass']);					$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $tempdir . '/admintools'), '/');					if (!@mkdir($tempdir . '/admintools'))					{						$ftp->mkdir($dest);					}					if (!@chmod($tempdir . '/admintools', 511))					{						$ftp->chmod($dest, 511);					}					$tempdir .= '/admintools';				}			}			// If we still have no writable directory, we'll try /tmp and the system's temp-directory			$writable = @is_writeable($tempdir);			if (!$writable)			{				if (@is_dir('/tmp') && @is_writable('/tmp'))				{					$tempdir = '/tmp';				}				else				{					// Try to find the system temp path					$tmpfile = @tempnam("dummy", "");					$systemp = @dirname($tmpfile);					@unlink($tmpfile);					if (!empty($systemp))					{						if (@is_dir($systemp) && @is_writable($systemp))						{							$tempdir = $systemp;						}					}				}			}			$data .= <<<ENDDATA	,	'kickstart.ftp.ssl' => '0',	'kickstart.ftp.passive' => '1',	'kickstart.ftp.host' => '$ftp_host',	'kickstart.ftp.port' => '$ftp_port',	'kickstart.ftp.user' => '$ftp_user',	'kickstart.ftp.pass' => '$ftp_pass',	'kickstart.ftp.dir' => '$ftp_root',	'kickstart.ftp.tempdir' => '$tempdir'ENDDATA;		}		$data .= ');';		// Remove the old file, if it's there...		$configpath = JPATH_COMPONENT_ADMINISTRATOR . '/restoration.php';		if (JFile::exists($configpath))		{			JFile::delete($configpath);		}		// Write new file. First try with JFile.		$result = JFile::write($configpath, $data);		// In case JFile used FTP but direct access could help		if (!$result)		{			if (function_exists('file_put_contents'))			{				$result = @file_put_contents($configpath, $data);				if ($result !== false)				{					$result = true;				}			}			else			{				$fp = @fopen($configpath, 'wt');				if ($fp !== false)				{					$result = @fwrite($fp, $data);					if ($result !== false)					{						$result = true;					}					@fclose($fp);				}			}		}		return $result;	}	/**	 * Runs the schema update SQL files, the PHP update script and updates the	 * manifest cache and #__extensions entry. Essentially, it is identical to	 * JInstallerFile::install() without the file copy.	 *	 * @return  boolean True on success	 *	 * @since   2.5.4	 */	public function finaliseUpgrade()	{		$installer = JInstaller::getInstance();		$installer->setPath('source', JPATH_ROOT);		$installer->setPath('extension_root', JPATH_ROOT);		if (!$installer->setupInstall())		{			$installer->abort(JText::_('JLIB_INSTALLER_ABORT_DETECTMANIFEST'));			return false;		}		$installer->extension = JTable::getInstance('extension');		$installer->extension->load(700);		$installer->setAdapter($installer->extension->type);		$manifest = $installer->getManifest();		$manifestPath = JPath::clean($installer->getPath('manifest'));		$element = preg_replace('/\.xml/', '', basename($manifestPath));		// Run the script file		$scriptElement = $manifest->scriptfile;		$manifestScript = (string) $manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = JPATH_ROOT . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// load the file				include_once $manifestScriptFile;			}			$classname = 'JoomlaInstallerScript';			if (class_exists($classname))			{				$manifestClass = new $classname($this);			}		}		ob_start();		ob_implicit_flush(false);		if ($manifestClass && method_exists($manifestClass, 'preflight'))		{			if ($manifestClass->preflight('update', $this) === false)			{				$installer->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		$msg = ob_get_contents(); // create msg object; first use here		ob_end_clean();		// Get a database connector object		$db = JFactory::getDbo();		// Check to see if a file extension by the same name is already installed		// If it is, then update the table because if the files aren't there		// we can assume that it was (badly) uninstalled		// If it isn't, add an entry to extensions		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('file'))			->where($db->quoteName('element') . ' = ' . $db->quote('joomla'));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$installer->abort(				JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', JText::_('JLIB_INSTALLER_UPDATE'), $db->stderr(true))			);			return false;		}		$id = $db->loadResult();		$row = JTable::getInstance('extension');		if ($id)		{			// Load the entry and update the manifest_cache			$row->load($id);			// Update name			$row->set('name', 'files_joomla');			// Update manifest			$row->manifest_cache = $installer->generateManifestCache();			if (!$row->store())			{				// Install failed, roll back changes				$installer->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', JText::_('JLIB_INSTALLER_UPDATE'), $db->stderr(true))				);				return false;			}		}		else		{			// Add an entry to the extension table with a whole heap of defaults			$row->set('name', 'files_joomla');			$row->set('type', 'file');			$row->set('element', 'joomla');			// There is no folder for files so leave it blank			$row->set('folder', '');			$row->set('enabled', 1);			$row->set('protected', 0);			$row->set('access', 0);			$row->set('client_id', 0);			$row->set('params', '');			$row->set('system_data', '');			$row->set('manifest_cache', $installer->generateManifestCache());			if (!$row->store())			{				// Install failed, roll back changes				$installer->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_ROLLBACK', $db->stderr(true)));				return false;			}			// Set the insert id			$row->set('extension_id', $db->insertid());			// Since we have created a module item, we add it to the installation step stack			// so that if we have to rollback the changes we can undo it.			$installer->pushStep(array('type' => 'extension', 'extension_id' => $row->extension_id));		}		/*		 * Let's run the queries for the file		 */		if ($manifest->update)		{			$result = $installer->parseSchemaUpdates($manifest->update->schemas, $row->extension_id);			if ($result === false)			{				// Install failed, rollback changes				$installer->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_UPDATE_SQL_ERROR', $db->stderr(true)));				return false;			}		}		// Start Joomla! 1.6		ob_start();		ob_implicit_flush(false);		if ($manifestClass && method_exists($manifestClass, 'update'))		{			if ($manifestClass->update($installer) === false)			{				// Install failed, rollback changes				$installer->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		$msg .= ob_get_contents(); // append messages		ob_end_clean();		// Lastly, we will copy the manifest file to its appropriate place.		$manifest = array();		$manifest['src'] = $installer->getPath('manifest');		$manifest['dest'] = JPATH_MANIFESTS . '/files/' . basename($installer->getPath('manifest'));		if (!$installer->copyFiles(array($manifest), true))		{			// Install failed, rollback changes			$installer->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_COPY_SETUP'));			return false;		}		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(			array('element' => $element, 'type' => 'file', 'client_id' => '0', 'folder' => '')		);		if ($uid)		{			$update->delete($uid);		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($manifestClass && method_exists($manifestClass, 'postflight'))		{			$manifestClass->postflight('update', $this);		}		$msg .= ob_get_contents(); // append messages		ob_end_clean();		if ($msg != '')		{			$installer->set('extension_message', $msg);		}		return true;	}	/**	 * Removes the extracted package file	 *	 * @return  void	 *	 * @since   2.5.4	 */	public function cleanUp()	{		// Remove the update package		$config = JFactory::getConfig();		$tempdir = $config->get('tmp_path');		$file = JFactory::getApplication()->getUserState('com_joomlaupdate.file', null);		$target = $tempdir . '/' . $file;		if (!@unlink($target))		{			JFile::delete($target);		}		// Remove the restoration.php file		$target = JPATH_COMPONENT_ADMINISTRATOR . '/restoration.php';		if (!@unlink($target))		{			JFile::delete($target);		}		// Remove joomla.xml from the site's root		$target = JPATH_ROOT . '/joomla.xml';		if (!@unlink($target))		{			JFile::delete($target);		}		// Unset the update filename from the session		JFactory::getApplication()->setUserState('com_joomlaupdate.file', null);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Module model. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesModelSelect extends JModelList{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$clientId = $app->getUserState('com_modules.modules.filter.client_id', 0);		$this->setState('filter.client_id', (int) $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_modules');		$this->setState('params', $params);		// Manually set limits to get all modules.		$this->setState('list.limit', 0);		$this->setState('list.start', 0);		$this->setState('list.ordering', 'a.name');		$this->setState('list.direction', 'ASC');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.extension_id, a.name, a.element AS module'			)		);		$query->from($db->quoteName('#__extensions') . ' AS a');		// Filter by module		$query->where('a.type = ' . $db->quote('module'));		// Filter by client.		$clientId = $this->getState('filter.client_id');		$query->where('a.client_id = ' . (int) $clientId);		// Filter by enabled		$query->where('a.enabled = 1');		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function &getItems()	{		// Get the list of items from the database.		$items = parent::getItems();		$client = JApplicationHelper::getClientInfo($this->getState('filter.client_id', 0));		$lang = JFactory::getLanguage();		// Loop through the results to add the XML metadata,		// and load language support.		foreach ($items as &$item)		{			$path = JPath::clean($client->path . '/modules/' . $item->module . '/' . $item->module . '.xml');			if (file_exists($path))			{				$item->xml = simplexml_load_file($path);			}			else			{				$item->xml = null;			}			// 1.5 Format; Core files or language packs then			// 1.6 3PD Extension Support			$lang->load($item->module . '.sys', $client->path, null, false, false)				|| $lang->load($item->module . '.sys', $client->path . '/modules/' . $item->module, null, false, false)				|| $lang->load($item->module . '.sys', $client->path, $lang->getDefault(), false, false)				|| $lang->load($item->module . '.sys', $client->path . '/modules/' . $item->module, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);			if (isset($item->xml) && $text = trim($item->xml->description))			{				$item->desc = JText::_($text);			}			else			{				$item->desc = JText::_('COM_MODULES_NODESCRIPTION');			}		}		$items = JArrayHelper::sortObjects($items, 'name', 1, true, $lang->getLocale());		// TODO: Use the cached XML from the extensions table?		return $items;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewCategory extends JViewLegacy{	public function display($tpl = null)	{		$app       = JFactory::getApplication();		$doc       = JFactory::getDocument();		$params    = $app->getParams();		$feedEmail = $app->getCfg('feed_email', 'author');		$siteEmail = $app->getCfg('mailfrom');		// Get some data from the model		$app->input->set('limit', $app->getCfg('feed_limit'));		$category = $this->get('Category');		$rows     = $this->get('Items');		$doc->link = JRoute::_(ContentHelperRoute::getCategoryRoute($category->id));		foreach ($rows as $row)		{			// Strip html from feed item title			$title = $this->escape($row->title);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// Compute the article slug			$row->slug = $row->alias ? ($row->id . ':' . $row->alias) : $row->id;			// Url link to article			$link = JRoute::_(ContentHelperRoute::getArticleRoute($row->slug, $row->catid));			// Get row fulltext			$db = JFactory::getDbo();			$query = 'SELECT' .$db->quoteName('fulltext'). 'FROM #__content WHERE id ='.$row->id;			$db->setQuery($query);			$row->fulltext = $db->loadResult();			// Get description, author and date			$description = ($params->get('feed_summary', 0) ? $row->introtext.$row->fulltext : $row->introtext);			$author = $row->created_by_alias ? $row->created_by_alias : $row->author;			@$date = ($row->publish_up ? date('r', strtotime($row->publish_up)) : '');			// Load individual item creator class			$item           = new JFeedItem;			$item->title    = $title;			$item->link     = $link;			$item->date     = $date;			$item->category = $row->category_title;			$item->author   = $author;			if ($feedEmail == 'site')			{				$item->authorEmail = $siteEmail;			}			elseif ($feedEmail === 'author')			{				$item->authorEmail = $row->author_email;			}			// Add readmore link to description if introtext is shown, show_readmore is true and fulltext exists			if (!$params->get('feed_summary', 0) && $params->get('feed_show_readmore', 0) && $row->fulltext)			{				$description .= '<p class="feed-readmore"><a target="_blank" href ="' . $item->link . '">' . JText::_('COM_CONTENT_FEED_READMORE') . '</a></p>';			}			// Load item description and add div			$item->description	= '<div class="feed-description">'.$description.'</div>';			// Loads item info into rss array			$doc->addItem($item);		}	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Content.pagenavigation * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Pagenavigation plugin class. * * @package     Joomla.Plugin * @subpackage  Content.pagenavigation * @since       1.5 */class PlgContentPagenavigation extends JPlugin{	/**	 * @since   1.6	 */	public function onContentBeforeDisplay($context, &$row, &$params, $page = 0)	{		$app = JFactory::getApplication();		$view = $app->input->get('view');		$print = $app->input->getBool('print');		if ($print)		{			return false;		}		if ($params->get('show_item_navigation') && ($context == 'com_content.article') && ($view == 'article'))		{			$db = JFactory::getDbo();			$user = JFactory::getUser();			$lang = JFactory::getLanguage();			$nullDate = $db->getNullDate();			$date = JFactory::getDate();			$now = $date->toSql();			$uid = $row->id;			$option = 'com_content';			$canPublish = $user->authorise('core.edit.state', $option . '.article.' . $row->id);			// The following is needed as different menu items types utilise a different param to control ordering.			// For Blogs the `orderby_sec` param is the order controlling param.			// For Table and List views it is the `orderby` param.			$params_list = $params->toArray();			if (array_key_exists('orderby_sec', $params_list))			{				$order_method = $params->get('orderby_sec', '');			}			else			{				$order_method = $params->get('orderby', '');			}			// Additional check for invalid sort ordering.			if ($order_method == 'front')			{				$order_method = '';			}			// Determine sort order.			switch ($order_method)			{				case 'date' :					$orderby = 'a.created';					break;				case 'rdate' :					$orderby = 'a.created DESC';					break;				case 'alpha' :					$orderby = 'a.title';					break;				case 'ralpha' :					$orderby = 'a.title DESC';					break;				case 'hits' :					$orderby = 'a.hits';					break;				case 'rhits' :					$orderby = 'a.hits DESC';					break;				case 'order' :					$orderby = 'a.ordering';					break;				case 'author' :					$orderby = 'a.created_by_alias, u.name';					break;				case 'rauthor' :					$orderby = 'a.created_by_alias DESC, u.name DESC';					break;				case 'front' :					$orderby = 'f.ordering';					break;				default :					$orderby = 'a.ordering';					break;			}			$xwhere = ' AND (a.state = 1 OR a.state = -1)' .				' AND (publish_up = ' . $db->quote($nullDate) . ' OR publish_up <= ' . $db->quote($now) . ')' .				' AND (publish_down = ' . $db->quote($nullDate) . ' OR publish_down >= ' . $db->quote($now) . ')';			// Array of articles in same category correctly ordered.			$query = $db->getQuery(true);			// Sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id . ' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('cc.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('cc.id');			$case_when1 .= $query->concatenate(array($c_id, 'cc.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id . ' END as catslug';			$query->select('a.id,' . $case_when . ',' . $case_when1)				->from('#__content AS a')				->join('LEFT', '#__categories AS cc ON cc.id = a.catid')				->where(					'a.catid = ' . (int) $row->catid . ' AND a.state = ' . (int) $row->state						. ($canPublish ? '' : ' AND a.access = ' . (int) $row->access) . $xwhere				);			$query->order($orderby);			if ($app->isSite() && $app->getLanguageFilter())			{				$query->where('a.language in (' . $db->quote($lang->getTag()) . ',' . $db->quote('*') . ')');			}			$db->setQuery($query);			$list = $db->loadObjectList('id');			// This check needed if incorrect Itemid is given resulting in an incorrect result.			if (!is_array($list))			{				$list = array();			}			reset($list);			// Location of current content item in array list.			$location = array_search($uid, array_keys($list));			$rows = array_values($list);			$row->prev = null;			$row->next = null;			if ($location - 1 >= 0)			{				// The previous content item cannot be in the array position -1.				$row->prev = $rows[$location - 1];			}			if (($location + 1) < count($rows))			{				// The next content item cannot be in an array position greater than the number of array postions.				$row->next = $rows[$location + 1];			}			$pnSpace = "";			if (JText::_('JGLOBAL_LT') || JText::_('JGLOBAL_GT'))			{				$pnSpace = " ";			}			if ($row->prev)			{				$row->prev = JRoute::_(ContentHelperRoute::getArticleRoute($row->prev->slug, $row->prev->catslug));			}			else			{				$row->prev = '';			}			if ($row->next)			{				$row->next = JRoute::_(ContentHelperRoute::getArticleRoute($row->next->slug, $row->next->catslug));			}			else			{				$row->next = '';			}			// Output.			if ($row->prev || $row->next)			{				// Get the path for the layout file				$path = JPluginHelper::getLayoutPath('content', 'pagenavigation');				// Render the pagenav				ob_start();				include $path;				$row->pagination = ob_get_clean();				$row->paginationposition = $this->params->get('position', 1);				// This will default to the 1.5 and 1.6-1.7 behavior.				$row->paginationrelative = $this->params->get('relative', 0);			}		}		return;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for creating different select lists * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlList{	/**	 * Build the select list to choose an image	 *	 * @param   string  $name        The name of the field	 * @param   string  $active      The selected item	 * @param   string  $javascript  Alternative javascript	 * @param   string  $directory   Directory the images are stored in	 * @param   string  $extensions  Allowed extensions	 *	 * @return  array  Image names	 *	 * @since   11.1	 */	public static function images($name, $active = null, $javascript = null, $directory = null, $extensions = "bmp|gif|jpg|png")	{		if (!$directory)		{			$directory = '/images/';		}		if (!$javascript)		{			$javascript = "onchange=\"if (document.forms.adminForm." . $name				. ".options[selectedIndex].value!='') {document.imagelib.src='..$directory' + document.forms.adminForm." . $name				. ".options[selectedIndex].value} else {document.imagelib.src='media/system/images/blank.png'}\"";		}		$imageFiles = new DirectoryIterator(JPATH_SITE . '/' . $directory);		$images = array(JHtml::_('select.option', '', JText::_('JOPTION_SELECT_IMAGE')));		foreach ($imageFiles as $file)		{			$fileName = $file->getFilename();			if (!$file->isFile())			{				continue;			}			if (preg_match('#(' . $extensions . ')$#', $fileName))			{				$images[] = JHtml::_('select.option', $fileName);			}		}		$images = JHtml::_(			'select.genericlist',			$images,			$name,			array(				'list.attr' => 'class="inputbox" size="1" ' . $javascript,				'list.select' => $active			)		);		return $images;	}	/**	 * Returns an array of options	 *	 * @param   string   $query  SQL with 'ordering' AS value and 'name field' AS text	 * @param   integer  $chop   The length of the truncated headline	 *	 * @return  array  An array of objects formatted for JHtml list processing	 *	 * @since   11.1	 */	public static function genericordering($query, $chop = 30)	{		$db = JFactory::getDbo();		$options = array();		$db->setQuery($query);		$items = $db->loadObjectList();		if (empty($items))		{			$options[] = JHtml::_('select.option', 1, JText::_('JOPTION_ORDER_FIRST'));			return $options;		}		$options[] = JHtml::_('select.option', 0, '0 ' . JText::_('JOPTION_ORDER_FIRST'));		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$items[$i]->text = JText::_($items[$i]->text);			if (JString::strlen($items[$i]->text) > $chop)			{				$text = JString::substr($items[$i]->text, 0, $chop) . "...";			}			else			{				$text = $items[$i]->text;			}			$options[] = JHtml::_('select.option', $items[$i]->value, $items[$i]->value . '. ' . $text);		}		$options[] = JHtml::_('select.option', $items[$i - 1]->value + 1, ($items[$i - 1]->value + 1) . ' ' . JText::_('JOPTION_ORDER_LAST'));		return $options;	}	/**	 * Build the select list for Ordering derived from a query	 *	 * @param   integer  $name      The scalar value	 * @param   string   $query     The query	 * @param   string   $attribs   HTML tag attributes	 * @param   string   $selected  The selected item	 * @param   integer  $neworder  1 if new and first, -1 if new and last, 0  or null if existing item	 *	 * @return  string   Html for the select list	 *	 * @since   11.1	 */	public static function ordering($name, $query, $attribs = null, $selected = null, $neworder = null)	{		if (empty($attribs))		{			$attribs = 'class="inputbox" size="1"';		}		if (empty($neworder))		{			$orders = JHtml::_('list.genericordering', $query);			$html = JHtml::_('select.genericlist', $orders, $name, array('list.attr' => $attribs, 'list.select' => (int) $selected));		}		else		{			if ($neworder > 0)			{				$text = JText::_('JGLOBAL_NEWITEMSLAST_DESC');			}			elseif ($neworder <= 0)			{				$text = JText::_('JGLOBAL_NEWITEMSFIRST_DESC');			}			$html = '<input type="hidden" name="' . $name . '" value="' . (int) $selected . '" /><span class="readonly">' . $text . '</span>';		}		return $html;	}	/**	 * Select list of active users	 *	 * @param   string   $name        The name of the field	 * @param   string   $active      The active user	 * @param   integer  $nouser      If set include an option to select no user	 * @param   string   $javascript  Custom javascript	 * @param   string   $order       Specify a field to order by	 *	 * @return  string   The HTML for a list of users list of users	 *	 * @since  11.1	 */	public static function users($name, $active, $nouser = 0, $javascript = null, $order = 'name')	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('u.id AS value, u.name AS text')			->from('#__users AS u')			->join('LEFT', '#__user_usergroup_map AS m ON m.user_id = u.id')			->where('u.block = 0')			->order($order)			->group('u.id');		$db->setQuery($query);		if ($nouser)		{			$users[] = JHtml::_('select.option', '0', JText::_('JOPTION_NO_USER'));			$users = array_merge($users, $db->loadObjectList());		}		else		{			$users = $db->loadObjectList();		}		$users = JHtml::_(			'select.genericlist',			$users,			$name,			array(				'list.attr' => 'class="inputbox" size="1" ' . $javascript,				'list.select' => $active			)		);		return $users;	}	/**	 * Select list of positions - generally used for location of images	 *	 * @param   string   $name        Name of the field	 * @param   string   $active      The active value	 * @param   string   $javascript  Alternative javascript	 * @param   boolean  $none        Null if not assigned	 * @param   boolean  $center      Null if not assigned	 * @param   boolean  $left        Null if not assigned	 * @param   boolean  $right       Null if not assigned	 * @param   boolean  $id          Null if not assigned	 *	 * @return  array  The positions	 *	 * @since   11.1	 */	public static function positions($name, $active = null, $javascript = null, $none = true, $center = true, $left = true, $right = true,		$id = false)	{		$pos = array();		if ($none)		{			$pos[''] = JText::_('JNONE');		}		if ($center)		{			$pos['center'] = JText::_('JGLOBAL_CENTER');		}		if ($left)		{			$pos['left'] = JText::_('JGLOBAL_LEFT');		}		if ($right)		{			$pos['right'] = JText::_('JGLOBAL_RIGHT');		}		$positions = JHtml::_(			'select.genericlist', $pos, $name,			array(				'id' => $id,				'list.attr' => 'class="inputbox" size="1"' . $javascript,				'list.select' => $active,				'option.key' => null,			)		);		return $positions;	}}
<?php/** * @package     Joomla.Platform * @subpackage  User * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Authorisation helper class, provides static methods to perform various tasks relevant * to the Joomla user and authorisation classes * * This class has influences and some method logic from the Horde Auth package * * @package     Joomla.Platform * @subpackage  User * @since       11.1 */abstract class JUserHelper{	/**	 * Method to add a user to a group.	 *	 * @param   integer  $userId   The id of the user.	 * @param   integer  $groupId  The id of the group.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function addUserToGroup($userId, $groupId)	{		// Get the user object.		$user = new JUser((int) $userId);		// Add the user to the group if necessary.		if (!in_array($groupId, $user->groups))		{			// Get the title of the group.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select($db->quoteName('title'))				->from($db->quoteName('#__usergroups'))				->where($db->quoteName('id') . ' = ' . (int) $groupId);			$db->setQuery($query);			$title = $db->loadResult();			// If the group does not exist, return an exception.			if (!$title)			{				throw new RuntimeException('Access Usergroup Invalid');			}			// Add the group data to the user object.			$user->groups[$title] = $groupId;			// Store the user object.			$user->save();		}		if (session_id())		{			// Set the group data for any preloaded user objects.			$temp = JFactory::getUser((int) $userId);			$temp->groups = $user->groups;			// Set the group data for the user object in the session.			$temp = JFactory::getUser();			if ($temp->id == $userId)			{				$temp->groups = $user->groups;			}		}		return true;	}	/**	 * Method to get a list of groups a user is in.	 *	 * @param   integer  $userId  The id of the user.	 *	 * @return  array    List of groups	 *	 * @since   11.1	 */	public static function getUserGroups($userId)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		return isset($user->groups) ? $user->groups : array();	}	/**	 * Method to remove a user from a group.	 *	 * @param   integer  $userId   The id of the user.	 * @param   integer  $groupId  The id of the group.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function removeUserFromGroup($userId, $groupId)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		// Remove the user from the group if necessary.		$key = array_search($groupId, $user->groups);		if ($key !== false)		{			// Remove the user from the group.			unset($user->groups[$key]);			// Store the user object.			$user->save();		}		// Set the group data for any preloaded user objects.		$temp = JFactory::getUser((int) $userId);		$temp->groups = $user->groups;		// Set the group data for the user object in the session.		$temp = JFactory::getUser();		if ($temp->id == $userId)		{			$temp->groups = $user->groups;		}		return true;	}	/**	 * Method to set the groups for a user.	 *	 * @param   integer  $userId  The id of the user.	 * @param   array    $groups  An array of group ids to put the user in.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function setUserGroups($userId, $groups)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		// Set the group ids.		JArrayHelper::toInteger($groups);		$user->groups = $groups;		// Get the titles for the user groups.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('id') . ', ' . $db->quoteName('title'))			->from($db->quoteName('#__usergroups'))			->where($db->quoteName('id') . ' = ' . implode(' OR ' . $db->quoteName('id') . ' = ', $user->groups));		$db->setQuery($query);		$results = $db->loadObjectList();		// Set the titles for the user groups.		for ($i = 0, $n = count($results); $i < $n; $i++)		{			$user->groups[$results[$i]->id] = $results[$i]->id;		}		// Store the user object.		$user->save();		if ($session_id())		{			// Set the group data for any preloaded user objects.			$temp = JFactory::getUser((int) $userId);			$temp->groups = $user->groups;			// Set the group data for the user object in the session.			$temp = JFactory::getUser();			if ($temp->id == $userId)			{				$temp->groups = $user->groups;			}		}		return true;	}	/**	 * Gets the user profile information	 *	 * @param   integer  $userId  The id of the user.	 *	 * @return  object	 *	 * @since   11.1	 */	public static function getProfile($userId = 0)	{		if ($userId == 0)		{			$user	= JFactory::getUser();			$userId	= $user->id;		}		// Get the dispatcher and load the user's plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		$data = new JObject;		$data->id = $userId;		// Trigger the data preparation event.		$dispatcher->trigger('onContentPrepareData', array('com_users.profile', &$data));		return $data;	}	/**	 * Method to activate a user	 *	 * @param   string  $activation  Activation string	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function activateUser($activation)	{		// Initialize some variables.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Let's get the id of the user we want to activate		$query->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('activation') . ' = ' . $db->quote($activation))			->where($db->quoteName('block') . ' = 1')			->where($db->quoteName('lastvisitDate') . ' = ' . $db->quote('0000-00-00 00:00:00'));		$db->setQuery($query);		$id = (int) $db->loadResult();		// Is it a valid user to activate?		if ($id)		{			$user = JUser::getInstance((int) $id);			$user->set('block', '0');			$user->set('activation', '');			// Time to take care of business.... store the user.			if (!$user->save())			{				JLog::add($user->getError(), JLog::WARNING, 'jerror');				return false;			}		}		else		{			JLog::add(JText::_('JLIB_USER_ERROR_UNABLE_TO_FIND_USER'), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Returns userid if a user exists	 *	 * @param   string  $username  The username to search on.	 *	 * @return  integer  The user id or 0 if not found.	 *	 * @since   11.1	 */	public static function getUserId($username)	{		// Initialise some variables		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('username') . ' = ' . $db->quote($username));		$db->setQuery($query, 0, 1);		return $db->loadResult();	}	/**	 * Formats a password using the current encryption.	 *	 * @param   string   $plaintext     The plaintext password to encrypt.	 * @param   string   $salt          The salt to use to encrypt the password. []	 *                                  If not present, a new salt will be	 *                                  generated.	 * @param   string   $encryption    The kind of password encryption to use.	 *                                  Defaults to md5-hex.	 * @param   boolean  $show_encrypt  Some password systems prepend the kind of	 *                                  encryption to the crypted password ({SHA},	 *                                  etc). Defaults to false.	 *	 * @return  string  The encrypted password.	 *	 * @since   11.1	 */	public static function getCryptedPassword($plaintext, $salt = '', $encryption = 'md5-hex', $show_encrypt = false)	{		// Get the salt to use.		$salt = self::getSalt($encryption, $salt, $plaintext);		// Encrypt the password.		switch ($encryption)		{			case 'plain':				return $plaintext;			case 'sha':				$encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext));				return ($show_encrypt) ? '{SHA}' . $encrypted : $encrypted;			case 'crypt':			case 'crypt-des':			case 'crypt-md5':			case 'crypt-blowfish':				return ($show_encrypt ? '{crypt}' : '') . crypt($plaintext, $salt);			case 'md5-base64':				$encrypted = base64_encode(mhash(MHASH_MD5, $plaintext));				return ($show_encrypt) ? '{MD5}' . $encrypted : $encrypted;			case 'ssha':				$encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext . $salt) . $salt);				return ($show_encrypt) ? '{SSHA}' . $encrypted : $encrypted;			case 'smd5':				$encrypted = base64_encode(mhash(MHASH_MD5, $plaintext . $salt) . $salt);				return ($show_encrypt) ? '{SMD5}' . $encrypted : $encrypted;			case 'aprmd5':				$length = strlen($plaintext);				$context = $plaintext . '$apr1$' . $salt;				$binary = self::_bin(md5($plaintext . $salt . $plaintext));				for ($i = $length; $i > 0; $i -= 16)				{					$context .= substr($binary, 0, ($i > 16 ? 16 : $i));				}				for ($i = $length; $i > 0; $i >>= 1)				{					$context .= ($i & 1) ? chr(0) : $plaintext[0];				}				$binary = self::_bin(md5($context));				for ($i = 0; $i < 1000; $i++)				{					$new = ($i & 1) ? $plaintext : substr($binary, 0, 16);					if ($i % 3)					{						$new .= $salt;					}					if ($i % 7)					{						$new .= $plaintext;					}					$new .= ($i & 1) ? substr($binary, 0, 16) : $plaintext;					$binary = self::_bin(md5($new));				}				$p = array();				for ($i = 0; $i < 5; $i++)				{					$k = $i + 6;					$j = $i + 12;					if ($j == 16)					{						$j = 5;					}					$p[] = self::_toAPRMD5((ord($binary[$i]) << 16) | (ord($binary[$k]) << 8) | (ord($binary[$j])), 5);				}				return '$apr1$' . $salt . '$' . implode('', $p) . self::_toAPRMD5(ord($binary[11]), 3);			case 'md5-hex':			default:				$encrypted = ($salt) ? md5($plaintext . $salt) : md5($plaintext);				return ($show_encrypt) ? '{MD5}' . $encrypted : $encrypted;		}	}	/**	 * Returns a salt for the appropriate kind of password encryption.	 * Optionally takes a seed and a plaintext password, to extract the seed	 * of an existing password, or for encryption types that use the plaintext	 * in the generation of the salt.	 *	 * @param   string  $encryption  The kind of password encryption to use.	 *                               Defaults to md5-hex.	 * @param   string  $seed        The seed to get the salt from (probably a	 *                               previously generated password). Defaults to	 *                               generating a new seed.	 * @param   string  $plaintext   The plaintext password that we're generating	 *                               a salt for. Defaults to none.	 *	 * @return  string  The generated or extracted salt.	 *	 * @since   11.1	 */	public static function getSalt($encryption = 'md5-hex', $seed = '', $plaintext = '')	{		// Encrypt the password.		switch ($encryption)		{			case 'crypt':			case 'crypt-des':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 2);				}				else				{					return substr(md5(mt_rand()), 0, 2);				}				break;			case 'crypt-md5':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 12);				}				else				{					return '$1$' . substr(md5(mt_rand()), 0, 8) . '$';				}				break;			case 'crypt-blowfish':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 16);				}				else				{					return '$2$' . substr(md5(mt_rand()), 0, 12) . '$';				}				break;			case 'ssha':				if ($seed)				{					return substr(preg_replace('|^{SSHA}|', '', $seed), -20);				}				else				{					return mhash_keygen_s2k(MHASH_SHA1, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);				}				break;			case 'smd5':				if ($seed)				{					return substr(preg_replace('|^{SMD5}|', '', $seed), -16);				}				else				{					return mhash_keygen_s2k(MHASH_MD5, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);				}				break;			case 'aprmd5': /* 64 characters that are valid for APRMD5 passwords. */				$APRMD5 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';				if ($seed)				{					return substr(preg_replace('/^\$apr1\$(.{8}).*/', '\\1', $seed), 0, 8);				}				else				{					$salt = '';					for ($i = 0; $i < 8; $i++)					{						$salt .= $APRMD5{rand(0, 63)};					}					return $salt;				}				break;			default:				$salt = '';				if ($seed)				{					$salt = $seed;				}				return $salt;				break;		}	}	/**	 * Generate a random password	 *	 * @param   integer  $length  Length of the password to generate	 *	 * @return  string  Random Password	 *	 * @since   11.1	 */	public static function genRandomPassword($length = 8)	{		$salt = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";		$base = strlen($salt);		$makepass = '';		/*		 * Start with a cryptographic strength random string, then convert it to		 * a string with the numeric base of the salt.		 * Shift the base conversion on each character so the character		 * distribution is even, and randomize the start shift so it's not		 * predictable.		 */		$random = JCrypt::genRandomBytes($length + 1);		$shift = ord($random[0]);		for ($i = 1; $i <= $length; ++$i)		{			$makepass .= $salt[($shift + ord($random[$i])) % $base];			$shift += ord($random[$i]);		}		return $makepass;	}	/**	 * Converts to allowed 64 characters for APRMD5 passwords.	 *	 * @param   string   $value  The value to convert.	 * @param   integer  $count  The number of characters to convert.	 *	 * @return  string  $value converted to the 64 MD5 characters.	 *	 * @since   11.1	 */	protected static function _toAPRMD5($value, $count)	{		/* 64 characters that are valid for APRMD5 passwords. */		$APRMD5 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';		$aprmd5 = '';		$count = abs($count);		while (--$count)		{			$aprmd5 .= $APRMD5[$value & 0x3f];			$value >>= 6;		}		return $aprmd5;	}	/**	 * Converts hexadecimal string to binary data.	 *	 * @param   string  $hex  Hex data.	 *	 * @return  string  Binary data.	 *	 * @since   11.1	 */	private static function _bin($hex)	{		$bin = '';		$length = strlen($hex);		for ($i = 0; $i < $length; $i += 2)		{			$tmp = sscanf(substr($hex, $i, 2), '%x');			$bin .= chr(array_shift($tmp));		}		return $bin;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.path');require_once JPATH_COMPONENT . '/helpers/menus.php';/** * Menu Item Model for Menus. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusModelItem extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_MENUS_ITEM';	/**	 * @var        string    The help screen key for the menu item.	 * @since   1.6	 */	protected $helpKey = 'JHELP_MENUS_MENU_ITEM_MANAGER_EDIT';	/**	 * @var        string    The help screen base URL for the menu item.	 * @since   1.6	 */	protected $helpURL;	/**	 * @var        boolean    True to use local lookup for the help screen.	 * @since   1.6	 */	protected $helpLocal = false;	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return $user->authorise('core.delete', 'com_menus.item.' . (int) $record->id);		}	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		if (!empty($record->id))		{			return $user->authorise('core.edit.state', 'com_menus.item.' . (int) $record->id);		}		// Default to component settings if menu item not known.		else		{			return parent::canEditState($record);		}	}	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.6	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('COM_MENUS_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['menu_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['menu_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['menu_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		return true;	}	/**	 * Batch copy menu items to a new menu or parent.	 *	 * @param   integer  $value     The new menu or sub-item.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   1.6	 */	protected function batchCopy($value, $pks, $contexts)	{		// $value comes as {menutype}.{parent_id}		$parts = explode('.', $value);		$menuType = $parts[0];		$parentId = (int) JArrayHelper::getValue($parts, 1, 0);		$table = $this->getTable();		$db = $this->getDbo();		$query = $db->getQuery(true);		$i = 0;		// Check that the parent exists		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}		}		// If the parent is 0, set it to the ID of the root item in the tree		if (empty($parentId))		{			if (!$parentId = $table->getRootId())			{				$this->setError($db->getErrorMsg());				return false;			}		}		// Check that user has create permission for menus		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_CREATE'));			return false;		}		// We need to log the parent ID		$parents = array();		// Calculate the emergency stop count as a precaution against a runaway loop bug		$query->select('COUNT(id)')			->from($db->quoteName('#__menu'));		$db->setQuery($query);		try		{			$count = $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Parent exists so we let's proceed		while (!empty($pks) && $count > 0)		{			// Pop the first id off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Copy is a bit tricky, because we also need to copy the children			$query->clear()				->select('id')				->from($db->quoteName('#__menu'))				->where('lft > ' . (int) $table->lft)				->where('rgt < ' . (int) $table->rgt);			$db->setQuery($query);			$childIds = $db->loadColumn();			// Add child ID's to the array only if they aren't already there.			foreach ($childIds as $childId)			{				if (!in_array($childId, $pks))				{					array_push($pks, $childId);				}			}			// Make a copy of the old ID and Parent ID			$oldId = $table->id;			$oldParentId = $table->parent_id;			// Reset the id because we are making a copy.			$table->id = 0;			// If we a copying children, the Old ID will turn up in the parents list			// otherwise it's a new top level item			$table->parent_id = isset($parents[$oldParentId]) ? $parents[$oldParentId] : $parentId;			$table->menutype = $menuType;			// Set the new location in the tree for the node.			$table->setLocation($table->parent_id, 'last-child');			// TODO: Deal with ordering?			//$table->ordering	= 1;			$table->level = null;			$table->lft = null;			$table->rgt = null;			$table->home = 0;			// Alter the title & alias			list($title, $alias) = $this->generateNewTitle($table->parent_id, $table->alias, $table->title);			$table->title = $title;			$table->alias = $alias;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;			// Now we log the old 'parent' to the new 'parent'			$parents[$oldId] = $table->id;			$count--;		}		// Rebuild the hierarchy.		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Rebuild the tree path.		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch move menu items to a new menu or parent.	 *	 * @param   integer  $value     The new menu or sub-item.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	protected function batchMove($value, $pks, $contexts)	{		// $value comes as {menutype}.{parent_id}		$parts = explode('.', $value);		$menuType = $parts[0];		$parentId = (int) JArrayHelper::getValue($parts, 1, 0);		$table = $this->getTable();		$db = $this->getDbo();		$query = $db->getQuery(true);		// Check that the parent exists.		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}		}		// Check that user has create and edit permission for menus		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_CREATE'));			return false;		}		if (!$user->authorise('core.edit', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_EDIT'));			return false;		}		// We are going to store all the children and just moved the menutype		$children = array();		// Parent exists so we let's proceed		foreach ($pks as $pk)		{			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Set the new location in the tree for the node.			$table->setLocation($parentId, 'last-child');			// Set the new Parent Id			$table->parent_id = $parentId;			// Check if we are moving to a different menu			if ($menuType != $table->menutype)			{				// Add the child node ids to the children array.				$query->clear()					->select($db->quoteName('id'))					->from($db->quoteName('#__menu'))					->where($db->quoteName('lft') . ' BETWEEN ' . (int) $table->lft . ' AND ' . (int) $table->rgt);				$db->setQuery($query);				$children = array_merge($children, (array) $db->loadColumn());			}			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Rebuild the tree path.			if (!$table->rebuildPath())			{				$this->setError($table->getError());				return false;			}		}		// Process the child rows		if (!empty($children))		{			// Remove any duplicates and sanitize ids.			$children = array_unique($children);			JArrayHelper::toInteger($children);			// Update the menutype field in all nodes where necessary.			$query->clear()				->update($db->quoteName('#__menu'))				->set($db->quoteName('menutype') . ' = ' . $db->quote($menuType))				->where($db->quoteName('id') . ' IN (' . implode(',', $children) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to check if you can save a record.	 *	 * @param   array     $data    An array of input data.	 * @param   string    $key     The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function canSave($data = array(), $key = 'id')	{		return JFactory::getUser()->authorise('core.edit', $this->option);	}	/**	 * Method to get the row form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item = $this->getItem();			$this->setState('item.link', $item->link);			// The type should already be set.		}		else		{			$this->setState('item.link', JArrayHelper::getValue($data, 'link'));			$this->setState('item.type', JArrayHelper::getValue($data, 'type'));		}		// Get the form.		$form = $this->loadForm('com_menus.item', 'item', array('control' => 'jform', 'load_data' => $loadData), true);		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('menuordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is an article you can edit.			$form->setFieldAttribute('menuordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = array_merge((array) $this->getItem(), (array) JFactory::getApplication()->getUserState('com_menus.edit.item.data', array()));		$this->preprocessData('com_menus.item', $data);		return $data;	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL, 'local' => $this->helpLocal);	}	/**	 * Method to get a menu item.	 *	 * @param   integer    $pk    An optional id of the object to get, otherwise the id from the model state is used.	 *	 * @return  mixed  Menu item data object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('item.id');		// Get a level row instance.		$table = $this->getTable();		// Attempt to load the row.		$table->load($pk);		// Check for a table object error.		if ($error = $table->getError())		{			$this->setError($error);			return false;		}		// Prime required properties.		if ($type = $this->getState('item.type'))		{			$table->type = $type;		}		if (empty($table->id))		{			$table->parent_id = $this->getState('item.parent_id');			$table->menutype = $this->getState('item.menutype');			$table->params = '{}';		}		// If the link has been set in the state, possibly changing link type.		if ($link = $this->getState('item.link'))		{			// Check if we are changing away from the actual link type.			if (MenusHelper::getLinkKey($table->link) != MenusHelper::getLinkKey($link))			{				$table->link = $link;			}		}		switch ($table->type)		{			case 'alias':				$table->component_id = 0;				$args = array();				parse_str(parse_url($table->link, PHP_URL_QUERY), $args);				break;			case 'separator':			case 'heading':				$table->link = '';				$table->component_id = 0;				break;			case 'url':				$table->component_id = 0;				parse_str(parse_url($table->link, PHP_URL_QUERY));				break;			case 'component':			default:				// Enforce a valid type.				$table->type = 'component';				// Ensure the integrity of the component_id field is maintained, particularly when changing the menu item type.				$args = array();				parse_str(parse_url($table->link, PHP_URL_QUERY), $args);				if (isset($args['option']))				{					// Load the language file for the component.					$lang = JFactory::getLanguage();					$lang->load($args['option'], JPATH_ADMINISTRATOR, null, false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR . '/components/' . $args['option'], null, false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR . '/components/' . $args['option'], $lang->getDefault(), false, false);					// Determine the component id.					$component = JComponentHelper::getComponent($args['option']);					if (isset($component->id))					{						$table->component_id = $component->id;					}				}				break;		}		// We have a valid type, inject it into the state for forms to use.		$this->setState('item.type', $table->type);		// Convert to the JObject before adding the params.		$properties = $table->getProperties(1);		$result = JArrayHelper::toObject($properties);		// Convert the params field to an array.		$registry = new JRegistry;		$registry->loadString($table->params);		$result->params = $registry->toArray();		// Merge the request arguments in to the params for a component.		if ($table->type == 'component')		{			// Note that all request arguments become reserved parameter names.			$result->request = $args;			$result->params = array_merge($result->params, $args);		}		if ($table->type == 'alias')		{			// Note that all request arguments become reserved parameter names.			$args = array();			parse_str(parse_url($table->link, PHP_URL_QUERY), $args);			$result->params = array_merge($result->params, $args);		}		if ($table->type == 'url')		{			// Note that all request arguments become reserved parameter names.			$args = array();			parse_str(parse_url($table->link, PHP_URL_QUERY), $args);			$result->params = array_merge($result->params, $args);		}		// Load associated menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			if ($pk != null)			{				$result->associations = MenusHelper::getAssociations($pk);			}			else			{				$result->associations = array();			}		}		$result->menuordering = $pk;		return $result;	}	/**	 * Get the list of modules not in trash.	 *	 * @return  mixed  An array of module records (id, title, position), or false on error.	 * @since   1.6	 */	public function getModules()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		// Join on the module-to-menu mapping table.		// We are only interested if the module is displayed on ALL or THIS menu item (or the inverse ID number).		//sqlsrv changes for modulelink to menu manager		$query->select('a.id, a.title, a.position, a.published, map.menuid')			->from('#__modules AS a')			->join('LEFT', sprintf('#__modules_menu AS map ON map.moduleid = a.id AND map.menuid IN (0, %1$d, -%1$d)', $this->getState('item.id')))			->select('(SELECT COUNT(*) FROM #__modules_menu WHERE moduleid = a.id AND menuid < 0) AS ' . $db->quoteName('except'));		// Join on the asset groups table.		$query->select('ag.title AS access_title')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access')			->where('a.published >= 0')			->where('a.client_id = 0')			->order('a.position, a.ordering');		$db->setQuery($query);		try		{			$result = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		return $result;	}	/**	 * A protected method to get the where clause for the reorder	 * This ensures that the row will be moved relative to a row with the same menutype	 *	 * @param   JTableMenu $table instance	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		return 'menutype = ' . $this->_db->quote($table->menutype);	}	/**	 * Returns a Table object, always creating it	 *	 * @param   type      $type      The table type to instantiate	 * @param   string    $prefix    A prefix for the table class name. Optional.	 * @param   array     $config    Configuration array for model. Optional.	 *	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Menu', $prefix = 'MenusTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState('item.id', $pk);		if (!($parentId = $app->getUserState('com_menus.edit.item.parent_id')))		{			$parentId = $app->input->getInt('parent_id');		}		$this->setState('item.parent_id', $parentId);		$menuType = $app->getUserState('com_menus.edit.item.menutype');		if ($app->input->getString('menutype', false))		{			$menuType = $app->input->getString('menutype', 'mainmenu');		}		$this->setState('item.menutype', $menuType);		if (!($type = $app->getUserState('com_menus.edit.item.type')))		{			$type = $app->input->get('type');			// Note a new menu item will have no field type.			// The field is required so the user has to change it.		}		$this->setState('item.type', $type);		if ($link = $app->getUserState('com_menus.edit.item.link'))		{			$this->setState('item.link', $link);		}		// Load the parameters.		$params = JComponentHelper::getParams('com_menus');		$this->setState('params', $params);	}	/**	 * @param   object    $form    A form object.	 * @param   mixed     $data    The data expected for the form.	 *	 * @return  void	 * @since   1.6	 * @throws    Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		$link = $this->getState('item.link');		$type = $this->getState('item.type');		$formFile = false;		// Initialise form with component view params if available.		if ($type == 'component')		{			$link = htmlspecialchars_decode($link);			// Parse the link arguments.			$args = array();			parse_str(parse_url(htmlspecialchars_decode($link), PHP_URL_QUERY), $args);			// Confirm that the option is defined.			$option = '';			$base = '';			if (isset($args['option']))			{				// The option determines the base path to work with.				$option = $args['option'];				$base = JPATH_SITE . '/components/' . $option;			}			// Confirm a view is defined.			$formFile = false;			if (isset($args['view']))			{				$view = $args['view'];				// Determine the layout to search for.				if (isset($args['layout']))				{					$layout = $args['layout'];				}				else				{					$layout = 'default';				}				$formFile = false;				// Check for the layout XML file. Use standard xml file if it exists.				$path = JPath::clean($base . '/views/' . $view . '/tmpl/' . $layout . '.xml');				if (is_file($path))				{					$formFile = $path;				}				// if custom layout, get the xml file from the template folder				// template folder is first part of file name -- template:folder				if (!$formFile && (strpos($layout, ':') > 0))				{					$temp = explode(':', $layout);					$templatePath = JPATH::clean(JPATH_SITE . '/templates/' . $temp[0] . '/html/' . $option . '/' . $view . '/' . $temp[1] . '.xml');					if (is_file($templatePath))					{						$formFile = $templatePath;					}				}			}			//Now check for a view manifest file			if (!$formFile)			{				if (isset($view) && is_file($path = JPath::clean($base . '/views/' . $view . '/metadata.xml')))				{					$formFile = $path;				}				else				{					//Now check for a component manifest file					$path = JPath::clean($base . '/metadata.xml');					if (is_file($path))					{						$formFile = $path;					}				}			}		}		if ($formFile)		{			// If an XML file was found in the component, load it first.			// We need to qualify the full path to avoid collisions with component file names.			if ($form->loadFile($formFile, true, '/metadata') == false)			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Attempt to load the xml file.			if (!$xml = simplexml_load_file($formFile))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Get the help data from the XML file if present.			$help = $xml->xpath('/metadata/layout/help');		}		else		{			// We don't have a component. Load the form XML to get the help path			$xmlFile = JPath::find(JPATH_ROOT . '/administrator/components/com_menus/models/forms', 'item_' . $type . '.xml');			// Attempt to load the xml file.			if ($xmlFile && !$xml = simplexml_load_file($xmlFile))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Get the help data from the XML file if present.			$help = $xml->xpath('/form/help');		}		if (!empty($help))		{			$helpKey = trim((string) $help[0]['key']);			$helpURL = trim((string) $help[0]['url']);			$helpLoc = trim((string) $help[0]['local']);			$this->helpKey = $helpKey ? $helpKey : $this->helpKey;			$this->helpURL = $helpURL ? $helpURL : $this->helpURL;			$this->helpLocal = (($helpLoc == 'true') || ($helpLoc == '1') || ($helpLoc == 'local')) ? true : false;		}		// Now load the component params.		// TODO: Work out why 'fixing' this breaks JForm		if ($isNew = false)		{			$path = JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $option . '/config.xml');		}		else		{			$path = 'null';		}		if (is_file($path))		{			// Add the component params last of all to the existing form.			if (!$form->load($path, true, '/config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Load the specific type file		if (!$form->loadFile('item_' . $type, false, false))		{			throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));		}		// Association menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_MENUS_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if ($tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'menuitem');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');					$option = $field->addChild('option', 'COM_MENUS_ITEM_FIELD_ASSOCIATION_NO_VALUE');					$option->addAttribute('value', '');				}			}			if ($add)			{				$form->load($addform, false);			}		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method rebuild the entire nested set tree.	 *	 * @return  boolean  False on failure or error, true otherwise.	 * @since   1.6	 */	public function rebuild()	{		// Initialiase variables.		$db = $this->getDbo();		$table = $this->getTable();		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Convert the parameters not in JSON format.		$db->setQuery(			'SELECT id, params' .				' FROM #__menu' .				' WHERE params NOT LIKE ' . $db->quote('{%') .				'  AND params <> ' . $db->quote('')		);		try		{			$items = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		foreach ($items as &$item)		{			$registry = new JRegistry;			$registry->loadString($item->params);			$params = (string) $registry;			$db->setQuery(				'UPDATE #__menu' .					' SET params = ' . $db->quote($params) .					' WHERE id = ' . (int) $item->id			);			if (!$db->execute())			{				$this->setError($error);				return false;			}			unset($registry);		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to save the form data.	 *	 * @param   array  $data    The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$pk = (!empty($data['id'])) ? $data['id'] : (int) $this->getState('item.id');		$isNew = true;		$table = $this->getTable();		// Load the row if saving an existing item.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		if (!$isNew && $table->menutype == $data['menutype'])		{			if ($table->parent_id == $data['parent_id'])			{				// If first is chosen make the item the first child of the selected parent.				if ($data['menuordering'] == -1)				{					$table->setLocation($data['parent_id'], 'first-child');				}				// If last is chosen make it the last child of the selected parent.				elseif ($data['menuordering'] == -2)				{					$table->setLocation($data['parent_id'], 'last-child');				}				// Don't try to put an item after itself. All other ones put after the selected item.				// $data['id'] is empty means it's a save as copy				elseif ($data['menuordering'] && $table->id != $data['menuordering'] || empty($data['id']))				{					$table->setLocation($data['menuordering'], 'after');				}				// Just leave it where it is if no change is made.				elseif ($data['menuordering'] && $table->id == $data['menuordering'])				{					unset($data['menuordering']);				}			}			// Set the new parent id if parent id not matched and put in last position			else			{				$table->setLocation($data['parent_id'], 'last-child');			}		}		// We have a new item, so it is not a change.		elseif ($isNew)		{			$table->setLocation($data['parent_id'], 'last-child');		}		// The menu type has changed so we need to just put this at the bottom		// of the root level.		else		{			$table->setLocation(1, 'last-child');		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Alter the title & alias for save as copy.  Also, unset the home record.		if (!$isNew && $data['id'] == 0)		{			list($title, $alias) = $this->generateNewTitle($table->parent_id, $table->alias, $table->title);			$table->title = $title;			$table->alias = $alias;			$table->published = 0;			$table->home = 0;		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Rebuild the tree path.		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		$this->setState('item.id', $table->id);		$this->setState('item.menutype', $table->menutype);		// Load associated menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			// Adding self to the association			$associations = $data['associations'];			foreach ($associations as $tag => $id)			{				if (empty($id))				{					unset($associations[$tag]);				}			}			// Detecting all item menus			$all_language = $table->language == '*';			if ($all_language && !empty($associations))			{				JError::raiseNotice(403, JText::_('COM_MENUS_ERROR_ALL_LANGUAGE_ASSOCIATED'));			}			$associations[$table->language] = $table->id;			// Deleting old association for these items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->delete('#__associations')				->where('context=' . $db->quote('com_menus.item'))				->where('id IN (' . implode(',', $associations) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}			if (!$all_language && count($associations) > 1)			{				// Adding new association for these items				$key = md5(json_encode($associations));				$query->clear()					->insert('#__associations');				foreach ($associations as $tag => $id)				{					$query->values($id . ',' . $db->quote('com_menus.item') . ',' . $db->quote($key));				}				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}		}		// Clean the cache		$this->cleanCache();		if (isset($data['link']))		{			$base = JURI::base();			$juri = JURI::getInstance($base . $data['link']);			$option = $juri->getVar('option');			// Clean the cache			parent::cleanCache($option);		}		return true;	}	/**	 * Method to save the reordered nested set tree.	 * First we save the new order values in the lft values of the changed ids.	 * Then we invoke the table rebuild to implement the new ordering.	 *	 * @param   array  $idArray      id's of rows to be reordered	 * @param   array  $lft_array    lft values of rows to be reordered	 *	 * @return  boolean false on failuer or error, true otherwise	 * @since   1.6	 */	public function saveorder($idArray = null, $lft_array = null)	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->saveorder($idArray, $lft_array))		{			$this->setError($table->getError());			return false;		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the home state of one or more items.	 *	 * @param   array    $pks      A list of the primary keys to change.	 * @param   integer  $value    The value of the home state.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function setHome(&$pks, $value = 1)	{		$table = $this->getTable();		$pks = (array) $pks;		$user = JFactory::getUser();		$languages = array();		$onehome = false;		// Remember that we can set a home page for different languages,		// so we need to loop through the primary key array.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if (!array_key_exists($table->language, $languages))				{					$languages[$table->language] = true;					if ($table->home == $value)					{						unset($pks[$i]);						JError::raiseNotice(403, JText::_('COM_MENUS_ERROR_ALREADY_HOME'));					}					else					{						$table->home = $value;						if ($table->language == '*')						{							$table->published = 1;						}						if (!$this->canSave($table))						{							// Prune items that you can't change.							unset($pks[$i]);							JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));						}						elseif (!$table->check())						{							// Prune the items that failed pre-save checks.							unset($pks[$i]);							JError::raiseWarning(403, $table->getError());						}						elseif (!$table->store())						{							// Prune the items that could not be stored.							unset($pks[$i]);							JError::raiseWarning(403, $table->getError());						}					}				}				else				{					unset($pks[$i]);					if (!$onehome)					{						$onehome = true;						JError::raiseNotice(403, JText::sprintf('COM_MENUS_ERROR_ONE_HOME'));					}				}			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array       &$pks   A list of the primary keys to change.	 * @param   integer     $value  The value of the published state.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function publish(&$pks, $value = 1)	{		$table = $this->getTable();		$pks = (array) $pks;		// Default menu item existence checks.		if ($value != 1)		{			foreach ($pks as $i => $pk)			{				if ($table->load($pk) && $table->home && $table->language == '*')				{					// Prune items that you can't change.					JError::raiseWarning(403, JText::_('JLIB_DATABASE_ERROR_MENU_UNPUBLISH_DEFAULT_HOME'));					unset($pks[$i]);					break;				}			}		}		// Clean the cache		$this->cleanCache();		// Ensure that previous checks doesn't empty the array		if (empty($pks))		{			return true;		}		return parent::publish($pks, $value);	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   1.6	 */	protected function generateNewTitle($parent_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'parent_id' => $parent_id)))		{			if ($title == $table->title)			{				$title = JString::increment($title);			}			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}	/**	 * Custom clean cache method	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_modules');		parent::cleanCache('mod_menu');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// No access check.$controller	= JControllerLegacy::getInstance('Admin');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Libraries * @subpackage  Helper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for standard content style extensions. * * @package     Joomla.Libraries * @subpackage  Helper * @since       3.1 */class JHelperContent{	/**	 * Configure the Linkbar. Must be implemented by each extension.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   3.1	 */	public static function addSubmenu($vName)	{	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  $categoryId  The category ID.	 * @param   integer  $id          The item ID.	 * @param   string   $assetName   The asset name	 *	 * @return  JObject	 *	 * @since   3.1	 */	public static function getActions($categoryId = 0, $id = 0, $assetName = '')	{		// Reverted a change for version 2.5.6		$user	= JFactory::getUser();		$result	= new JObject;		$actions = array(			'core.admin', 'core.manage', 'core.create', 'core.edit', 'core.edit.own', 'core.edit.state', 'core.delete'		);		foreach ($actions as $action)		{			$result->set($action, $user->authorise($action, $assetName));		}		return $result;	}	/**	 * Gets the current language	 *	 * @param   boolean  $detectBrowser  Flag indicating whether to use the browser language as a fallback.	 *	 * @return  string  The language string	 *	 * @since   3.1	 */	public static function getCurrentLanguage($detectBrowser = true)	{		$app = JFactory::getApplication();		$langCode = $app->input->cookie->getString(JApplication::getHash('language'));		// No cookie - let's try to detect browser language or use site default		if (!$langCode)		{			if ($detectBrowser)			{				$langCode = JLanguageHelper::detectLanguage();			}			else			{				$langCode = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');			}		}		return $langCode;	}	/**	* Gets the associated language ID	*	* @param   string  $langCode  The language code to look up	*	* @return  integer  The language ID	*	* @since   3.1	*/	public static function getLanguageId($langCode)	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('lang_id')			->from('#__languages')			->where($db->quoteName('lang_code') . ' = ' . $db->quote($langCode));		$db->setQuery($query);		$id = $db->loadResult();		return $id;	}	/**	 * Gets a row of data from a table	 *	 * @param   JTable  $table  JTable instance for a row.	 *	 * @return  array  Associative array of all columns and values for a row in a table.	 *	 * @since   3.1	 */	public function getRowData($table)	{		$fields = $table->getFields();		$data = array();		foreach ($fields as &$field)		{			$columnName = $field->Field;			$value = $table->$columnName;			$data[$columnName] = $value;		}		return $data;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Field to select a user id from a modal list. * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6.0 */class JFormFieldUser extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6.0	 */	public $type = 'User';	/**	 * Method to get the user field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   1.6.0	 */	protected function getInput()	{		$html = array();		$groups = $this->getGroups();		$excluded = $this->getExcluded();		$link = 'index.php?option=com_users&amp;view=users&amp;layout=modal&amp;tmpl=component&amp;field=' . $this->id			. (isset($groups) ? ('&amp;groups=' . base64_encode(json_encode($groups))) : '')			. (isset($excluded) ? ('&amp;excluded=' . base64_encode(json_encode($excluded))) : '');		// Initialize some field attributes.		$attr = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		// Initialize JavaScript field attributes.		$onchange = (string) $this->element['onchange'];		// Load the modal behavior script.		JHtml::_('behavior.modal', 'a.modal_' . $this->id);		// Build the script.		$script = array();		$script[] = '	function jSelectUser_' . $this->id . '(id, title) {';		$script[] = '		var old_id = document.getElementById("' . $this->id . '_id").value;';		$script[] = '		if (old_id != id) {';		$script[] = '			document.getElementById("' . $this->id . '_id").value = id;';		$script[] = '			document.getElementById("' . $this->id . '_name").value = title;';		$script[] = '			' . $onchange;		$script[] = '		}';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Load the current username if available.		$table = JTable::getInstance('user');		if ($this->value)		{			$table->load($this->value);		}		else		{			$table->username = JText::_('JLIB_FORM_SELECT_USER');		}		// Create a dummy text field with the user name.		$html[] = '<div class="input-append">';		$html[] = '	<input class="input-medium" type="text" id="' . $this->id . '_name" value="' . htmlspecialchars($table->name, ENT_COMPAT, 'UTF-8') . '"'			. ' disabled="disabled"' . $attr . ' />';		// Create the user select button.		if ($this->element['readonly'] != 'true')		{			$html[] = '		<a class="btn btn-primary modal_' . $this->id . '" title="' . JText::_('JLIB_FORM_CHANGE_USER') . '" href="' . $link . '"'				. ' rel="{handler: \'iframe\', size: {x: 800, y: 500}}">';			$html[] = '<i class="icon-user"></i></a>';		}		$html[] = '</div>';		// Create the real field, hidden, that stored the user id.		$html[] = '<input type="hidden" id="' . $this->id . '_id" name="' . $this->name . '" value="' . (int) $this->value . '" />';		return implode("\n", $html);	}	/**	 * Method to get the filtering groups (null means no filtering)	 *	 * @return  mixed  array of filtering groups or null.	 *	 * @since   1.6.0	 */	protected function getGroups()	{		return null;	}	/**	 * Method to get the users to exclude from the list of users	 *	 * @return  mixed  Array of users to exclude or null to to not exclude them	 *	 * @since   1.6.0	 */	protected function getExcluded()	{		return null;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// JLayout for standard handling of metadata fields in the administrator content edit screens.$fieldSets = $displayData->get('form')->getFieldsets('metadata');foreach ($fieldSets as $name => $fieldSet) :	$metadatatabs = 'metadata-' . $name;	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<?php if ($name == 'jmetadata') : // Include the real fields in this panel.	?>		<div class="control-group">			<div class="control-label"><?php echo $displayData->get('form')->getLabel('metadesc'); ?></div>			<div class="controls"><?php echo $displayData->get('form')->getInput('metadesc'); ?></div>		</div>		<div class="control-group">			<div class="control-label"><?php echo $displayData->get('form')->getLabel('metakey'); ?></div>			<div class="controls"><?php echo $displayData->get('form')->getInput('metakey'); ?></div>		</div>		<?php if ($displayData->get('form')->getLabel('xreference')):?>			<div class="control-group">				<div class="control-label"><?php echo $displayData->get('form')->getLabel('xreference'); ?></div>				<div class="controls"><?php echo $displayData->get('form')->getInput('xreference'); ?></div>			</div>		<?php endif; ?>	<?php endif; ?>	<?php foreach ($displayData->get('form')->getFieldset($name) as $field) : ?>		<?php if ($field->name != 'jform[metadata][tags][]') :?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>		<?php endif; ?>	<?php endforeach; ?><?php endforeach; ?>
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to initialise the database for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallDatabase extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the options from the session		$options = $model->getOptions();		// Get the database model.		$db = new InstallationModelDatabase;		// Attempt to create the database tables.		$return = $db->createTables($options);		$r = new stdClass;		$r->view = 'install';		// Check if the database was initialised		if (!$return)		{			$r->view = 'database';		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/manual/en/book.mysqli.php * @since       12.1 */class JDatabaseDriverMysqli extends JDatabaseDriver{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'mysqli';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc. The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.2	 */	protected $nameQuote = '`';	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 * @since  12.2	 */	protected $nullDate = '0000-00-00 00:00:00';	/**	 * @var    string  The minimum supported database version.	 * @since  12.2	 */	protected static $dbMinimum = '5.0.4';	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		// Get some basic values from the options.		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['user'] = (isset($options['user'])) ? $options['user'] : 'root';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		$options['select'] = (isset($options['select'])) ? (bool) $options['select'] : true;		$options['port'] = null;		$options['socket'] = null;		// Finalize initialisation.		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		if (is_callable(array($this->connection, 'close')))		{			mysqli_close($this->connection);		}	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		/*		 * Unlike mysql_connect(), mysqli_connect() takes the port and socket as separate arguments. Therefore, we		 * have to extract them from the host string.		 */		$tmp = substr(strstr($this->options['host'], ':'), 1);		if (!empty($tmp))		{			// Get the port number or socket name			if (is_numeric($tmp))			{				$this->options['port'] = $tmp;			}			else			{				$this->options['socket'] = $tmp;			}			// Extract the host name only			$this->options['host'] = substr($this->options['host'], 0, strlen($this->options['host']) - (strlen($tmp) + 1));			// This will take care of the following notation: ":3306"			if ($this->options['host'] == '')			{				$this->options['host'] = 'localhost';			}		}		// Make sure the MySQLi extension for PHP is installed and enabled.		if (!function_exists('mysqli_connect'))		{			throw new RuntimeException('The MySQL adapter mysqli is not available');		}		$this->connection = @mysqli_connect(			$this->options['host'], $this->options['user'], $this->options['password'], null, $this->options['port'], $this->options['socket']		);		// Attempt to connect to the server.		if (!$this->connection)		{			throw new RuntimeException('Could not connect to MySQL.');		}		// Set sql_mode to non_strict mode		mysqli_query($this->connection, "SET @@SESSION.sql_mode = '';");		// If auto-select is enabled select the given database.		if ($this->options['select'] && !empty($this->options['database']))		{			$this->select($this->options['database']);		}		// Set charactersets (needed for MySQL 4.1.2+).		$this->setUTF();	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		if (is_callable($this->connection, 'close'))		{			mysqli_close($this->connection);		}		$this->connection = null;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		$this->connect();		$result = mysqli_real_escape_string($this->getConnection(), $text);		if ($extra)		{			$result = addcslashes($result, '%_');		}		return $result;	}	/**	 * Test to see if the MySQL connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (function_exists('mysqli_connect'));	}	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   12.1	 */	public function connected()	{		if (is_object($this->connection))		{			return mysqli_ping($this->connection);		}		return false;	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true);		$this->setQuery('DROP TABLE ' . ($ifExists ? 'IF EXISTS ' : '') . $query->quoteName($tableName));		$this->execute();		return $this;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   12.1	 */	public function getAffectedRows()	{		$this->connect();		return mysqli_affected_rows($this->connection);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database (string) or boolean false if not supported.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getCollation()	{		$this->connect();		$this->setQuery('SHOW FULL COLUMNS FROM #__users');		$array = $this->loadAssocList();		return $array['2']['Collation'];	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows($cursor = null)	{		return mysqli_num_rows($cursor ? $cursor : $this->cursor);	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		$result = array();		// Sanitize input to an array and iterate over the list.		settype($tables, 'array');		foreach ($tables as $table)		{			// Set the query to get the table CREATE statement.			$this->setQuery('SHOW CREATE table ' . $this->quoteName($this->escape($table)));			$row = $this->loadRow();			// Populate the result array based on the create statements.			$result[$table] = $row[1];		}		return $result;	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$result = array();		// Set the query to get the table fields statement.		$this->setQuery('SHOW FULL COLUMNS FROM ' . $this->quoteName($this->escape($table)));		$fields = $this->loadObjectList();		// If we only want the type as the value add just that to the list.		if ($typeOnly)		{			foreach ($fields as $field)			{				$result[$field->Field] = preg_replace("/[(0-9)]/", '', $field->Type);			}		}		// If we want the whole field data object add that to the list.		else		{			foreach ($fields as $field)			{				$result[$field->Field] = $field;			}		}		return $result;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		// Get the details columns information.		$this->setQuery('SHOW KEYS FROM ' . $this->quoteName($table));		$keys = $this->loadObjectList();		return $keys;	}	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		// Set the query to get the tables statement.		$this->setQuery('SHOW TABLES');		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		return mysqli_get_server_info($this->connection);	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		return mysqli_insert_id($this->connection);	}	/**	 * Locks a table in the database.	 *	 * @param   string  $table  The name of the table to unlock.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function lockTable($table)	{		$this->setQuery('LOCK TABLES ' . $this->quoteName($table) . ' WRITE')->execute();		return $this;	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function execute()	{		$this->connect();		if (!is_object($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			$query .= ' LIMIT ' . $this->offset . ', ' . $this->limit;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query. Error suppression is used here to prevent warnings/notices that the connection has been lost.		$this->cursor = @mysqli_query($this->connection, $query);		// If an error occurred handle it.		if (!$this->cursor)		{			$this->errorNum = (int) mysqli_errno($this->connection);			$this->errorMsg = (string) mysqli_error($this->connection) . ' SQL=' . $query;			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg, $this->errorNum);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg, $this->errorNum);			}		}		return $this->cursor;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by MySQL.	 * @param   string  $prefix    Not used by MySQL.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->setQuery('RENAME TABLE ' . $oldTable . ' TO ' . $newTable)->execute();		return $this;	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		if (!$database)		{			return false;		}		if (!mysqli_select_db($this->connection, $database))		{			throw new RuntimeException('Could not connect to database.');		}		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return $this->connection->set_charset('utf8');	}	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		$this->setQuery('COMMIT');		$this->execute();	}	/**	 * Method to roll back a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionRollback()	{		$this->connect();		$this->setQuery('ROLLBACK');		$this->execute();	}	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		$this->setQuery('START TRANSACTION');		$this->execute();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		return mysqli_fetch_row($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		return mysqli_fetch_assoc($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		return mysqli_fetch_object($cursor ? $cursor : $this->cursor, $class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		mysqli_free_result($cursor ? $cursor : $this->cursor);	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		$this->setQuery('UNLOCK TABLES')->execute();		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto * @since       1.5 */class MailtoController extends JControllerLegacy{	/**	 * Show the form so that the user can send the link to someone	 *	 * @access public	 * @since 1.5	 */	public function mailto()	{		$session = JFactory::getSession();		$session->set('com_mailto.formtime', time());		$this->input->set('view', 'mailto');		$this->display();	}	/**	 * Send the message and display a notice	 *	 * @access public	 * @since 1.5	 */	public function send()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$session = JFactory::getSession();		$timeout = $session->get('com_mailto.formtime', 0);		if ($timeout == 0 || time() - $timeout < 20)		{			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		$SiteName = $app->getCfg('sitename');		$link     = MailtoHelper::validateHash($this->input->get('link', '', 'post'));		// Verify that this is a local link		if (!$link || !JURI::isInternal($link))		{			//Non-local url...			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		// An array of email headers we do not want to allow as input		$headers = array (	'Content-Type:',							'MIME-Version:',							'Content-Transfer-Encoding:',							'bcc:',							'cc:');		// An array of the input fields to scan for injected headers		$fields = array(			'mailto',			'sender',			'from',			'subject',		);		/*		 * Here is the meat and potatoes of the header injection test.  We		 * iterate over the array of form input and check for header strings.		 * If we find one, send an unauthorized header and die.		 */		foreach ($fields as $field)		{			foreach ($headers as $header)			{				if (strpos($_POST[$field], $header) !== false)				{					JError::raiseError(403, '');				}			}		}		/*		 * Free up memory		 */		unset ($headers, $fields);		$email           = $this->input->post->getString('mailto', '');		$sender          = $this->input->post->getString('sender', '');		$from            = $this->input->post->getString('from', '');		$subject_default = JText::sprintf('COM_MAILTO_SENT_BY', $sender);		$subject         = $this->input->post->getString('subject', $subject_default);		// Check for a valid to address		$error	= false;		if (! $email  || ! JMailHelper::isEmailAddress($email))		{			$error	= JText::sprintf('COM_MAILTO_EMAIL_INVALID', $email);			JError::raiseWarning(0, $error);		}		// Check for a valid from address		if (! $from || ! JMailHelper::isEmailAddress($from))		{			$error	= JText::sprintf('COM_MAILTO_EMAIL_INVALID', $from);			JError::raiseWarning(0, $error);		}		if ($error)		{			return $this->mailto();		}		// Build the message to send		$msg	= JText::_('COM_MAILTO_EMAIL_MSG');		$body	= sprintf($msg, $SiteName, $sender, $from, $link);		// Clean the email data		$subject = JMailHelper::cleanSubject($subject);		$body	 = JMailHelper::cleanBody($body);		$sender	 = JMailHelper::cleanAddress($sender);		// Send the email		if (JFactory::getMailer()->sendMail($from, $sender, $email, $subject, $body) !== true)		{			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		$this->input->set('view', 'sent');		$this->display();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Registration controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerUser extends UsersController{	/**	 * Method to log in a user.	 *	 * @since   1.6	 */	public function login()	{		JSession::checkToken('post') or jexit(JText::_('JInvalid_Token'));		$app = JFactory::getApplication();		// Populate the data array:		$data = array();		$data['return'] = base64_decode($app->input->post->get('return', '', 'BASE64'));		$data['username'] = JRequest::getVar('username', '', 'method', 'username');		$data['password'] = JRequest::getString('password', '', 'post', JREQUEST_ALLOWRAW);		// Set the return URL if empty.		if (empty($data['return']))		{			$data['return'] = 'index.php?option=com_users&view=profile';		}		// Set the return URL in the user state to allow modification by plugins		$app->setUserState('users.login.form.return', $data['return']);		// Get the log in options.		$options = array();		$options['remember'] = $this->input->getBool('remember', false);		$options['return'] = $data['return'];		// Get the log in credentials.		$credentials = array();		$credentials['username'] = $data['username'];		$credentials['password'] = $data['password'];		// Perform the log in.		if (true === $app->login($credentials, $options))		{			// Success			$app->setUserState('users.login.form.data', array());			$app->redirect(JRoute::_($app->getUserState('users.login.form.return'), false));		}		else		{			// Login failed !			$data['remember'] = (int) $options['remember'];			$app->setUserState('users.login.form.data', $data);			$app->redirect(JRoute::_('index.php?option=com_users&view=login', false));		}	}	/**	 * Method to log out a user.	 *	 * @since   1.6	 */	public function logout()	{		JSession::checkToken('request') or jexit(JText::_('JInvalid_Token'));		$app = JFactory::getApplication();		// Perform the log in.		$error = $app->logout();		// Check if the log out succeeded.		if (!($error instanceof Exception))		{			// Get the return url from the request and validate that it is internal.			$return = JRequest::getVar('return', '', 'method', 'base64');			$return = base64_decode($return);			if (!JURI::isInternal($return))			{				$return = '';			}			// Redirect the user.			$app->redirect(JRoute::_($return, false));		}		else		{			$app->redirect(JRoute::_('index.php?option=com_users&view=login', false));		}	}	/**	 * Method to register a user.	 *	 * @since   1.6	 */	public function register()	{		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		// Get the form data.		$data  = $this->input->post->get('user', array(), 'array');		// Get the model and validate the data.		$model  = $this->getModel('Registration', 'UsersModel');		$return	= $model->validate($data);		// Check for errors.		if ($return === false)		{			// Get the validation messages.			$app	= &JFactory::getApplication();			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'notice');				} else {					$app->enqueueMessage($errors[$i], 'notice');				}			}			// Save the data in the session.			$app->setUserState('users.registration.form.data', $data);			// Redirect back to the registration form.			$this->setRedirect('index.php?option=com_users&view=registration');			return false;		}		// Finish the registration.		$return	= $model->register($data);		// Check for errors.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('users.registration.form.data', $data);			// Redirect back to the registration form.			$message = JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $model->getError());			$this->setRedirect('index.php?option=com_users&view=registration', $message, 'error');			return false;		}		// Flush the data from the session.		$app->setUserState('users.registration.form.data', null);		exit;	}	/**	 * Method to login a user.	 *	 * @since   1.6	 */	public function remind()	{		// Check the request token.		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('User', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Submit the username remind request.		$return	= $model->processRemindRequest($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_REMIND_REQUEST_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=remind'.$itemid;			// Go back to the complete form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// Complete failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=remind'.$itemid;			// Go back to the complete form.			$message = JText::sprintf('COM_USERS_REMIND_REQUEST_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// Complete succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getLoginRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=login'.$itemid;			// Proceed to the login form.			$message = JText::_('COM_USERS_REMIND_REQUEST_SUCCESS');			$this->setRedirect(JRoute::_($route, false), $message);			return true;		}	}	/**	 * Method to login a user.	 *	 * @since   1.6	 */	public function resend()	{		// Check for request forgeries		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include __DIR__ . '/component.php';
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugin model. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsModelPlugin extends JModelAdmin{	/**	 * @var		string	The help screen key for the module.	 * @since   1.6	 */	protected $helpKey = 'JHELP_EXTENSIONS_PLUGIN_MANAGER_EDIT';	/**	 * @var		string	The help screen base URL for the module.	 * @since   1.6	 */	protected $helpURL;	protected $_cache;	/**	 * @var		string	The event to trigger after saving the data.	 * @since   1.6	 */	protected $event_after_save = 'onExtensionAfterSave';	/**	 * @var		string	The event to trigger after before the data.	 * @since   1.6	 */	protected $event_before_save = 'onExtensionBeforeSave';	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item		= $this->getItem();			$folder		= $item->folder;			$element	= $item->element;		}		else		{			$folder		= JArrayHelper::getValue($data, 'folder', '', 'cmd');			$element	= JArrayHelper::getValue($data, 'element', '', 'cmd');		}		// These variables are used to add data from the plugin XML files.		$this->setState('item.folder',	$folder);		$this->setState('item.element',	$element);		// Get the form.		$form = $this->loadForm('com_plugins.plugin', 'plugin', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('enabled', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('enabled', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_plugins.edit.plugin.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_plugins.plugin', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('plugin.id');		if (!isset($this->_cache[$pk]))		{			$false	= false;			// Get a row instance.			$table = $this->getTable();			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $table->getError())			{				$this->setError($table->getError());				return $false;			}			// Convert to the JObject before adding other data.			$properties = $table->getProperties(1);			$this->_cache[$pk] = JArrayHelper::toObject($properties, 'JObject');			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($table->params);			$this->_cache[$pk]->params = $registry->toArray();			// Get the plugin XML.			$path = JPath::clean(JPATH_PLUGINS.'/'.$table->folder.'/'.$table->element.'/'.$table->element.'.xml');			if (file_exists($path))			{				$this->_cache[$pk]->xml = simplexml_load_file($path);			} else {				$this->_cache[$pk]->xml = null;			}		}		return $this->_cache[$pk];	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	*/	public function getTable($type = 'Extension', $prefix = 'JTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		// Execute the parent method.		parent::populateState();		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('extension_id');		$this->setState('plugin.id', $pk);	}	/**	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @return  mixed  True if successful.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		jimport('joomla.filesystem.path');		$folder		= $this->getState('item.folder');		$element	= $this->getState('item.element');		$lang		= JFactory::getLanguage();		$client		= JApplicationHelper::getClientInfo(0);		// Load the core and/or local language sys file(s) for the ordering field.		$db = JFactory::getDbo();		$query = 'SELECT element' .				' FROM #__extensions' .				' WHERE (type =' .$db->quote('plugin'). 'AND folder='. $db->quote($folder) . ')';		$db->setQuery($query);		$elements = $db->loadColumn();		foreach ($elements as $elementa)		{				$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_ADMINISTRATOR, null, false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_PLUGINS.'/'.$folder.'/'.$elementa, null, false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_PLUGINS.'/'.$folder.'/'.$elementa, $lang->getDefault(), false, false);		}		if (empty($folder) || empty($element))		{			$app = JFactory::getApplication();			$app->redirect(JRoute::_('index.php?option=com_plugins&view=plugins', false));		}		$formFile = JPath::clean(JPATH_PLUGINS . '/' . $folder . '/' . $element . '/' . $element . '.xml');		if (!file_exists($formFile))		{			throw new Exception(JText::sprintf('COM_PLUGINS_ERROR_FILE_NOT_FOUND', $element . '.xml'));		}		// Load the core and/or local language file(s).			$lang->load('plg_'.$folder.'_'.$element, JPATH_ADMINISTRATOR, null, false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_PLUGINS.'/'.$folder.'/'.$element, null, false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_PLUGINS.'/'.$folder.'/'.$element, $lang->getDefault(), false, false);		if (file_exists($formFile))		{			// Get the plugin form.			if (!$form->loadFile($formFile, false, '//config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Attempt to load the xml file.		if (!$xml = simplexml_load_file($formFile))		{			throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));		}		// Get the help data from the XML file if present.		$help = $xml->xpath('/extension/help');		if (!empty($help))		{			$helpKey = trim((string) $help[0]['key']);			$helpURL = trim((string) $help[0]['url']);			$this->helpKey = $helpKey ? $helpKey : $this->helpKey;			$this->helpURL = $helpURL ? $helpURL : $this->helpURL;		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object	A record object.	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'type = '. $this->_db->quote($table->type);		$condition[] = 'folder = '. $this->_db->quote($table->folder);		return $condition;	}	/**	 * Override method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		// Load the extension plugin group.		JPluginHelper::importPlugin('extension');		// Setup type		$data['type'] = 'plugin';		return parent::save($data);	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL);	}	/**	 * Custom clean cache method, plugins are cached in 2 places for different clients	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_plugins');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tag Model * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsModelTag extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  3.1	 */	protected $text_prefix = 'COM_TAGS';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 *	 * @since   3.1	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return parent::canDelete($record);		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 *	 * @since   3.1	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return parent::canEditState($record);	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   3.1	*/	public function getTable($type = 'Tag', $prefix = 'TagsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		$parentId = $app->input->getInt('parent_id');		$this->setState('tag.parent_id', $parentId);		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState($this->getName() . '.id', $pk);		// Load the parameters.		$params = JComponentHelper::getParams('com_tags');		$this->setState('params', $params);	}	/**	 * Method to get a tag.	 *	 * @param   integer  $pk  An optional id of the object to get, otherwise the id from the model state is used.	 *	 * @return  mixed  Tag data object on success, false on failure.	 *	 * @since   3.1	 */	public function getItem($pk = null)	{		if ($result = parent::getItem($pk))		{			// Prime required properties.			if (empty($result->id))			{				$result->parent_id = $this->getState('tag.parent_id');			}			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($result->metadata);			$result->metadata = $registry->toArray();			// Convert the images field to an array.			$registry = new JRegistry;			$registry->loadString($result->images);			$result->images = $registry->toArray();			// Convert the urls field to an array.			$registry = new JRegistry;			$registry->loadString($result->urls);			$result->urls = $registry->toArray();			// Convert the created and modified dates to local user time for display in the form.			$tz = new DateTimeZone(JFactory::getApplication()->getCfg('offset'));			if ((int) $result->created_time)			{				$date = new JDate($result->created_time);				$date->setTimezone($tz);				$result->created_time = $date->toSql(true);			}			else			{				$result->created_time = null;			}			if ((int) $result->modified_time)			{				$date = new JDate($result->modified_time);				$date->setTimezone($tz);				$result->modified_time = $date->toSql(true);			}			else			{				$result->modified_time = null;			}		}		return $result;	}	/**	 * Method to get the row form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   3.1	 */	public function getForm($data = array(), $loadData = true)	{		$extension = $this->getState('tag');		$jinput = JFactory::getApplication()->input;		// Get the form.		$form = $this->loadForm('com_tags.tag', 'tag', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		$user = JFactory::getUser();		if (!$user->authorise('core.edit.state', 'com_tags' . $jinput->get('id')))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   3.1	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_tags.edit.tag.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_tags.tag', $data);		return $data;	}	/**	 * Method to preprocess the form.	 *	 * @param   JForm   $form    A JForm object.	 * @param   mixed   $data    The data expected for the form.	 * @param   string  $group  The name of the plugin group to import.	 *	 * @return  void	 *	 * @see     JFormField	 * @since   3.1	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$table = $this->getTable();		$input = JFactory::getApplication()->input;		$pk = (!empty($data['id'])) ? $data['id'] : (int) $this->getState($this->getName() . '.id');		$isNew = true;		// Include the content plugins for the on save events.		JPluginHelper::importPlugin('content');		// Load the row if saving an existing tag.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		// Set the new parent id if parent id not matched OR while New/Save as Copy .		if ($table->parent_id != $data['parent_id'] || $data['id'] == 0)		{			$table->setLocation($data['parent_id'], 'last-child');		}		if (isset($data['images']) && is_array($data['images']))		{			$registry = new JRegistry;			$registry->loadArray($data['images']);			$data['images'] = (string) $registry;		}		if (isset($data['urls']) && is_array($data['urls']))		{			$registry = new JRegistry;			$registry->loadArray($data['urls']);			$data['urls'] = (string) $registry;		}		// Alter the title for save as copy		if ($input->get('task') == 'save2copy')		{			list($title, $alias) = $this->generateNewTitle($data['parent_id'], $data['alias'], $data['title']);			$data['title'] = $title;			$data['alias'] = $alias;		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Bind the rules.		if (isset($data['rules']))		{			$rules = new JAccessRules($data['rules']);			$table->setRules($rules);		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentBeforeSave event.		$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, &$table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentAfterSave event.		$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, &$table, $isNew));		// Rebuild the path for the tag:		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		// Rebuild the paths of the tag's children:		if (!$table->rebuild($table->id, $table->lft, $table->level, $table->path))		{			$this->setError($table->getError());			return false;		}		$this->setState($this->getName() . '.id', $table->id);		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method rebuild the entire nested set tree.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   3.1	 */	public function rebuild()	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to save the reordered nested set tree.	 * First we save the new order values in the lft values of the changed ids.	 * Then we invoke the table rebuild to implement the new ordering.	 *	 * @param   array    $idArray    An array of primary key ids.	 * @param   integer  $lft_array  The lft value	 *	 * @return  boolean  False on failure or error, True otherwise	 *	 * @since   3.1	*/	public function saveorder($idArray = null, $lft_array = null)	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->saveorder($idArray, $lft_array))		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   3.1	 */	protected function generateNewTitle($parent_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'parent_id' => $parent_id)))		{			$title = ($table->title != $title) ? $title : JString::increment($title);			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('text');/** * Form Field class for the Joomla Platform. * Supports a text field telephone numbers. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.tel.html * @see         JFormRuleTel for telephone number validation * @see         JHtmlTel for rendering of telephone numbers * @since       11.1 */class JFormFieldTel extends JFormFieldText{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Tel';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports a modal newsfeeds picker. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class JFormFieldModal_Newsfeeds extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Modal_Newsfeeds';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		// Load the javascript		JHtml::_('behavior.framework');		JHtml::_('behavior.modal', 'input.modal');		// Build the script.		$script = array();		$script[] = '	function jSelectChart_'.$this->id.'(id, name, object) {';		$script[] = '		document.id("'.$this->id.'_id").value = id;';		$script[] = '		document.id("'.$this->id.'_name").value = name;';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Build the script.		$script = array();		$script[] = '	window.addEvent("domready", function() {';		$script[] = '		var div = new Element("div").setStyle("display", "none").inject(document.id("menu-types"), "before");';		$script[] = '		document.id("menu-types").inject(div, "bottom");';		$script[] = '	});';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Get the title of the linked chart		$db = JFactory::getDbo();		$db->setQuery(			'SELECT name' .			' FROM #__newsfeeds' .			' WHERE id = '.(int) $this->value		);		try		{			$title = $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage);		}		if (empty($title))		{			$title = JText::_('COM_NEWSFEEDS_SELECT_A_FEED');		}		$link = 'index.php?option=com_newsfeeds&amp;view=newsfeeds&amp;layout=modal&amp;tmpl=component&amp;function=jSelectChart_'.$this->id;		if (isset($this->element['language']))		{			$link .= '&amp;forcedLanguage='.$this->element['language'];		}		JHtml::_('behavior.modal', 'a.modal');		$html = "\n".'<div class="input-append"><input type="text" class="input-medium" id="'.$this->id.'_name" value="'.htmlspecialchars($title, ENT_QUOTES, 'UTF-8').'" disabled="disabled" />';		$html .= '<a class="modal btn" title="'.JText::_('COM_NEWSFEEDS_CHANGE_FEED_BUTTON').'"  href="'.$link.'" rel="{handler: \'iframe\', size: {x: 800, y: 450}}"><i class="icon-feed" title="'.JText::_('COM_NEWSFEEDS_CHANGE_FEED_BUTTON').'"></i> '.JText::_('JSELECT').'</a></div>'."\n";		// The active newsfeed id field.		if (0 == (int) $this->value)		{			$value = '';		}		else		{			$value = (int) $this->value;		}		// class='required' for client side validation		$class = '';		if ($this->required)		{			$class = ' class="required modal-value"';		}		$html .= '<input type="hidden" id="'.$this->id.'_id"'.$class.' name="'.$this->name.'" value="'.$value.'" />';		return $html;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Plugin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Plugin helper class * * @package     Joomla.Platform * @subpackage  Plugin * @since       11.1 */abstract class JPluginHelper{	/**	 * A persistent cache of the loaded plugins.	 *	 * @var    array	 * @since  11.3	 */	protected static $plugins = null;	/**	 * Get the path to a layout from a Plugin	 *	 * @param   string  $type    Plugin type	 * @param   string  $name    Plugin name	 * @param   string  $layout  Layout name	 *	 * @return  string  Layout path	 *	 * @since   12.2	 */	public static function getLayoutPath($type, $name, $layout = 'default')	{		$template = JFactory::getApplication()->getTemplate();		$defaultLayout = $layout;		if (strpos($layout, ':') !== false)		{			// Get the template and file name from the string			$temp = explode(':', $layout);			$template = ($temp[0] == '_') ? $template : $temp[0];			$layout = $temp[1];			$defaultLayout = ($temp[1]) ? $temp[1] : 'default';		}		// Build the template and base path for the layout		$tPath = JPATH_THEMES . '/' . $template . '/html/plg_' . $type . '_' . $name . '/' . $layout . '.php';		$bPath = JPATH_BASE . '/plugins/' . $type . '/' . $name . '/tmpl/' . $defaultLayout . '.php';		$dPath = JPATH_BASE . '/plugins/' . $type . '/' . $name . '/tmpl/default.php';		// If the template has a layout override use it		if (file_exists($tPath))		{			return $tPath;		}		elseif (file_exists($bPath))		{			return $bPath;		}		else		{			return $dPath;		}	}	/**	 * Get the plugin data of a specific type if no specific plugin is specified	 * otherwise only the specific plugin data is returned.	 *	 * @param   string  $type    The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string  $plugin  The plugin name.	 *	 * @return  mixed  An array of plugin data objects, or a plugin data object.	 *	 * @since   11.1	 */	public static function getPlugin($type, $plugin = null)	{		$result = array();		$plugins = self::_load();		// Find the correct plugin(s) to return.		if (!$plugin)		{			foreach ($plugins as $p)			{				// Is this the right plugin?				if ($p->type == $type)				{					$result[] = $p;				}			}		}		else		{			foreach ($plugins as $p)			{				// Is this plugin in the right group?				if ($p->type == $type && $p->name == $plugin)				{					$result = $p;					break;				}			}		}		return $result;	}	/**	 * Checks if a plugin is enabled.	 *	 * @param   string  $type    The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string  $plugin  The plugin name.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public static function isEnabled($type, $plugin = null)	{		$result = self::getPlugin($type, $plugin);		return (!empty($result));	}	/**	 * Loads all the plugin files for a particular type if no specific plugin is specified	 * otherwise only the specific plugin is loaded.	 *	 * @param   string            $type        The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string            $plugin      The plugin name.	 * @param   boolean           $autocreate  Autocreate the plugin.	 * @param   JEventDispatcher  $dispatcher  Optionally allows the plugin to use a different dispatcher.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public static function importPlugin($type, $plugin = null, $autocreate = true, JEventDispatcher $dispatcher = null)	{		static $loaded = array();		// Check for the default args, if so we can optimise cheaply		$defaults = false;		if (is_null($plugin) && $autocreate == true && is_null($dispatcher))		{			$defaults = true;		}		if (!isset($loaded[$type]) || !$defaults)		{			$results = null;			// Load the plugins from the database.			$plugins = self::_load();			// Get the specified plugin(s).			for ($i = 0, $t = count($plugins); $i < $t; $i++)			{				if ($plugins[$i]->type == $type && ($plugin === null || $plugins[$i]->name == $plugin))				{					self::_import($plugins[$i], $autocreate, $dispatcher);					$results = true;				}			}			// Bail out early if we're not using default args			if (!$defaults)			{				return $results;			}			$loaded[$type] = $results;		}		return $loaded[$type];	}	/**	 * Loads the plugin file.	 *	 * @param   object            $plugin      The plugin.	 * @param   boolean           $autocreate  True to autocreate.	 * @param   JEventDispatcher  $dispatcher  Optionally allows the plugin to use a different dispatcher.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function _import($plugin, $autocreate = true, JEventDispatcher $dispatcher = null)	{		static $paths = array();		$plugin->type = preg_replace('/[^A-Z0-9_\.-]/i', '', $plugin->type);		$plugin->name = preg_replace('/[^A-Z0-9_\.-]/i', '', $plugin->name);		$path = JPATH_PLUGINS . '/' . $plugin->type . '/' . $plugin->name . '/' . $plugin->name . '.php';		if (!isset($paths[$path]))		{			if (file_exists($path))			{				if (!isset($paths[$path]))				{					require_once $path;				}				$paths[$path] = true;				if ($autocreate)				{					// Makes sure we have an event dispatcher					if (!is_object($dispatcher))					{						$dispatcher = JEventDispatcher::getInstance();					}					$className = 'plg' . $plugin->type . $plugin->name;					if (class_exists($className))					{						// Load the plugin from the database.						if (!isset($plugin->params))						{							// Seems like this could just go bye bye completely							$plugin = self::getPlugin($plugin->type, $plugin->name);						}						// Instantiate and register the plugin.						new $className($dispatcher, (array) ($plugin));					}				}			}			else			{				$paths[$path] = false;			}		}	}	/**	 * Loads the published plugins.	 *	 * @return  array  An array of published plugins	 *	 * @since   11.1	 */	protected static function _load()	{		if (self::$plugins !== null)		{			return self::$plugins;		}		$user = JFactory::getUser();		$cache = JFactory::getCache('com_plugins', '');		$levels = implode(',', $user->getAuthorisedViewLevels());		if (!self::$plugins = $cache->get($levels))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('folder AS type, element AS name, params')				->from('#__extensions')				->where('enabled >= 1')				->where('type =' . $db->quote('plugin'))				->where('state >= 0')				->where('access IN (' . $levels . ')')				->order('ordering');			self::$plugins = $db->setQuery($query)->loadObjectList();			$cache->store(self::$plugins, $levels);		}		return self::$plugins;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$langs  = ModLoginHelper::getLanguageList();$return = ModLoginHelper::getReturnURI();require JModuleHelper::getLayoutPath('mod_login', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Tag Controller * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsControllerTag extends JControllerForm{	/**	 * Method to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   3.1	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		return ($user->authorise('core.create', 'com_tags'));	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   3.1	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user = JFactory::getUser();		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		// Since there is no asset tracking and no categories, revert to the component permissions.		return parent::allowEdit($data, $key);	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean	 True if successful, false otherwise and internal error is set.	 *	 * @since   3.1	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Tag');		// Preset the redirect		$this->setRedirect('index.php?option=com_tags&view=tags');		return parent::batch($model);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Helper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Tags helper class, provides methods to perform various tasks relevant * tagging of content. * * @package     Joomla.Libraries * @subpackage  Helper * @since       3.1 */class JHelperTags{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    boolean	 * @since  3.1	 */	protected $tagsChanged = false;	/**	 * Whether up replace all tags or just add tags	 *	 * @var    boolean	 * @since  3.1	 */	protected $replaceTags = false;	/**	 * Alias for quering mapping and content type table.	 *	 * @var    string	 * @since  3.1	 */	public $typeAlias = null;	/**	 * Method to add tag rows to mapping table.	 *	 * @param   integer  $ucmId    Id of the #__ucm_content item being tagged	 * @param   JTable   $table    JTable object being tagged	 * @param   array    $tags     Array of tags to be applied.	 *	 * @return  boolean  true on success, otherwise false.	 *	 * @since   3.1	 */	public function addTagMapping($ucmId, $table, $tags = array())	{		$typeId = $this->typeAlias;		$db = $table->getDbo();		$key = $table->getKeyName();		$item = $table->$key;		$typeId = $this->getTypeId($this->typeAlias);		// Insert the new tag maps		$query = $db->getQuery(true);		$query->insert('#__contentitem_tag_map');		$query->columns(array($db->quoteName('type_alias'), $db->quoteName('core_content_id'), $db->quoteName('content_item_id'), $db->quoteName('tag_id'), $db->quoteName('tag_date'),  $db->quoteName('type_id')));		foreach ($tags as $tag)		{			$query->values($db->quote($this->typeAlias) . ', ' . (int) $ucmId . ', ' . (int) $item . ', ' . $db->quote($tag) . ', ' . $query->currentTimestamp() . ', ' . (int) $typeId);		}		$db->setQuery($query);		return (boolean) $db->execute();	}	/**	 * Function that converts tags paths into paths of names	 *	 * @param   array  $tags  Array of tags	 *	 * @return  array	 *	 * @since   3.1	 */	public static function convertPathsToNames($tags)	{		// We will replace path aliases with tag names		if ($tags)		{			// Create an array with all the aliases of the results			$aliases = array();			foreach ($tags as $tag)			{				if (!empty($tag->path))				{					if ($pathParts = explode('/', $tag->path))					{						$aliases = array_merge($aliases, $pathParts);					}				}			}			// Get the aliases titles in one single query and map the results			if ($aliases)			{				// Remove duplicates				$aliases = array_unique($aliases);				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->select('alias, title')					->from('#__tags')					->where('alias IN (' . implode(',', array_map(array($db, 'quote'), $aliases)) . ')');				$db->setQuery($query);				try				{					$aliasesMapper = $db->loadAssocList('alias');				}				catch (RuntimeException $e)				{					return false;				}				// Rebuild the items path				if ($aliasesMapper)				{					foreach ($tags as $tag)					{						$namesPath = array();						if (!empty($tag->path))						{							if ($pathParts = explode('/', $tag->path))							{								foreach ($pathParts as $alias)								{									if (isset($aliasesMapper[$alias]))									{										$namesPath[] = $aliasesMapper[$alias]['title'];									}									else									{										$namesPath[] = $alias;									}								}								$tag->text = implode('/', $namesPath);							}						}					}				}			}		}		return $tags;	}	/**	 * Create any new tags by looking for #new# in the metadata	 *	 * @param   string  $metadata   Metadata JSON string	 *	 * @return  mixed   If successful, metadata with new tag titles replaced by tag ids. Otherwise false.	 *	 * @since   3.1	 */	public function createTagsFromMetadata($metadata)	{		$metaObject = json_decode($metadata);		$tags = $metaObject->tags;		if (empty($tags) || !is_array($tags))		{			$result = $metadata;		}		else		{			// We will use the tags table to store them			JTable::addIncludePath(JPATH_ADMINISTRATOR . '/components/com_tags/tables');			$tagTable = JTable::getInstance('Tag', 'TagsTable');			$newTags = array();			foreach ($tags as $key => $tag)			{				// Remove the #new# prefix that identifies new tags				$tagText = str_replace('#new#', '', $tag);				if ($tagText == $tag)				{					$newTags[] = (int) $tag;				}				else				{					// Clear old data if exist					$tagTable->reset();					// Try to load the selected tag					if ($tagTable->load(array('title' => $tagText)))					{						$newTags[] = (int) $tagTable->id;					}					else					{						// Prepare tag data						$tagTable->id = 0;						$tagTable->title = $tagText;						$tagTable->published = 1;						// $tagTable->language = property_exists ($item, 'language') ? $item->language : '*';						$tagTable->language = '*';						$tagTable->access = 1;						// Make this item a child of the root tag						$tagTable->setLocation($tagTable->getRootId(), 'last-child');						// Try to store tag						if ($tagTable->check())						{							// Assign the alias as path (autogenerated tags have always level 1)							$tagTable->path = $tagTable->alias;							if ($tagTable->store())							{								$newTags[] = (int) $tagTable->id;							}						}					}				}			}			// At this point $tags is an array of all tag ids			$metaObject->tags = $newTags;			$result = json_encode($metaObject);		}		return $result;	}	/**	 * Method to delete the tag mappings and #__ucm_content record for for an item	 *	 * @param   JTable   $table             JTable object of content table where delete occurred	 * @param   integer  $contentItemId     Id of the content item.	 *	 * @return  boolean  true on success, false on failure	 *	 * @since   3.1	 */	public function deleteTagData(JTable $table, $contentItemId)	{		$result = $this->unTagItem($contentItemId, $table);		$ucmContentTable = JTable::getInstance('Corecontent');		return $result && $ucmContentTable->deleteByContentId($contentItemId);	}	/**	 * Method to get a list of tags for an item, optionally with the tag data.	 *	 * @param   integer  $contentType  Content type alias. Dot separated.	 * @param   integer  $id           Id of the item to retrieve tags for.	 * @param   boolean  $getTagData   If true, data from the tags table will be included, defaults to true.	 *	 * @return  array    Array of of tag objects	 *	 * @since   3.1	 */	public function getItemTags($contentType, $id, $getTagData = true)	{		if (is_array($id))		{			$id = implode($id);		}		// Initialize some variables.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('m.tag_id'))			->from($db->quoteName('#__contentitem_tag_map') . ' AS m ')			->where(				array(					$db->quoteName('m.type_alias') . ' = ' . $db->quote($contentType),					$db->quoteName('m.content_item_id') . ' = ' . $id,					$db->quoteName('t.published') . ' = 1'				)			);		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		$query->where('t.access IN (' . $groups . ')');		// Optionally filter on language		if (empty($language))		{			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');		}		if ($language != 'all')		{			if ($language == 'current_language')			{				$language = JHelperContent::getCurrentLanguage();			}			$query->where($db->quoteName('language') . ' IN (' . $db->quote($language) . ', ' . $db->quote('*') . ')');		}		if ($getTagData)		{			$query->select($db->quoteName('t') . '.*');		}		$query->join('INNER', $db->quoteName('#__tags') . ' AS t ' . ' ON ' . $db->quoteName('m.tag_id') . ' = ' . $db->quoteName('t.id'));		$db->setQuery($query);		$this->itemTags = $db->loadObjectList();		return $this->itemTags;	}	/**	 * Method to get a list of tags for a given item.	 * Normally used for displaying a list of tags within a layout	 *	 * @param   integer  $id      The id (primary key) of the item to be tagged.	 * @param   string   $prefix  Dot separated string with the option and view to be used for a url.	 *	 * @return  string   Comma separated list of tag Ids.	 *	 * @since   3.1	 */	public function getTagIds($id, $prefix)	{		if (!empty($id))		{			if (is_array($id))			{				$id = implode(',', $id);			}			$db = JFactory::getDbo();			$query = $db->getQuery(true);			// Load the tags.			$query->clear()				->select($db->quoteName('t.id'))				->from($db->quoteName('#__tags') . ' AS t ')				->join(					'INNER', $db->quoteName('#__contentitem_tag_map') . ' AS m'					. ' ON ' . $db->quoteName('m.tag_id') . ' = ' . $db->quoteName('t.id')					. ' AND ' . $db->quoteName('m.type_alias') . ' = ' . $db->quote($prefix)					. ' AND ' . $db->quoteName('m.content_item_id') . ' IN ( ' . $id . ')'				);			$db->setQuery($query);			// Add the tags to the content data.			$tagsList = $db->loadColumn();			$this->tags = implode(',', $tagsList);		}		else		{			$this->tags = null;		}		return $this->tags;	}	/**	 * Method to get a query to retrieve a detailed list of items for a tag.	 *	 * @param   mixed    $tagId            Tag or array of tags to be matched	 * @param   mixed    $typesr           Null, type or array of type aliases for content types to be included in the results	 * @param   boolean  $includeChildren  True to include the results from child tags	 * @param   string   $orderByOption    Column to order the results by	 * @param   string   $orderDir         Direction to sort the results in	 * @param   boolean  $anyOrAll         True to include items matching at least one tag, false to include	 *                                     items all tags in the array.	 * @param   string   $languageFilter   Optional filter on language. Options are 'all', 'current' or any string.	 * @param   string   $stateFilter      Optional filtering on publication state, defaults to published or unpublished.	 *	 * @return  JDatabaseQuery  Query to retrieve a list of tags	 *	 * @since   3.1	 */	public function getTagItemsQuery($tagId, $typesr = null, $includeChildren = false, $orderByOption = 'c.core_title', $orderDir = 'ASC',		$anyOrAll = true, $languageFilter = 'all', $stateFilter = '0,1')	{		// Create a new query object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$nullDate = $db->quote($db->getNullDate());		$ntagsr = substr_count($tagId, ',') + 1;		// If we want to include children we have to adjust the list of tags.		// We do not search child tags when the match all option is selected.		if ($includeChildren)		{			if (!is_array($tagId))			{				$tagIdArray = explode(',', $tagId);			}			else			{				$tagIdArray = $tagId;			}			$tagTreeList = '';			foreach ($tagIdArray as $tag)			{				if ($this->getTagTreeArray($tag, $tagTreeArray))				{					$tagTreeList .= implode(',', $this->getTagTreeArray($tag, $tagTreeArray)) . ',';				}			}			if ($tagTreeList)			{				$tagId = trim($tagTreeList, ',');			}		}		if (is_array($tagId))		{			$tagId = implode(',', $tagId);		}		// M is the mapping table. C is the core_content table. Ct is the content_types table.		$query->select('m.type_alias, m.content_item_id, m.core_content_id, count(m.tag_id) AS match_count,  MAX(m.tag_date) as tag_date, MAX(c.core_title) AS core_title')			->select('MAX(c.core_alias) AS core_alias, MAX(c.core_body) AS core_body, MAX(c.core_state) AS core_state, MAX(c.core_access) AS core_access')			->select('MAX(c.core_metadata) AS core_metadata, MAX(c.core_created_user_id) AS core_created_user_id, MAX(c.core_created_by_alias) AS core_created_by_alias')			->select('MAX(c.core_created_time) as core_created_time, MAX(c.core_images) as core_images')			->select('CASE WHEN c.core_modified_time = ' . $nullDate . ' THEN c.core_created_time ELSE c.core_modified_time END as core_modified_time')			->select('MAX(c.core_language) AS core_language, MAX(c.core_catid) AS core_catid')			->select('MAX(c.core_publish_up) AS core_publish_up, MAX(c.core_publish_down) as core_publish_down')			->select('MAX(ct.type_title) AS content_type_title, MAX(ct.router) AS router')			->from('#__contentitem_tag_map AS m')			->join('INNER', '#__ucm_content AS c ON m.type_alias = c.core_type_alias AND m.core_content_id = c.core_content_id')			->join('INNER', '#__content_types AS ct ON ct.type_alias = m.type_alias')			// Join over the users for the author and email			->select("CASE WHEN c.core_created_by_alias > ' ' THEN c.core_created_by_alias ELSE ua.name END AS author")			->select("ua.email AS author_email")			->join('LEFT', '#__users AS ua ON ua.id = c.core_created_user_id')			->where('m.tag_id IN (' . $tagId . ')')			->where('c.core_state IN (' . $stateFilter . ')');		// Optionally filter on language		if (empty($language))		{			$language = $languageFilter;		}		if ($language != 'all')		{			if ($language == 'current_language')			{				$language = JHelperContent::getCurrentLanguage();			}			$query->where($db->quoteName('c.core_language') . ' IN (' . $db->quote($language) . ', ' . $db->quote('*') . ')');		}		// Get the type data, limited to types in the request if there are any specified.		$typesarray = self::getTypes('assocList', $typesr, false);		$typeAliases = '';		foreach ($typesarray as $type)		{			$typeAliases .= "'" . $type['type_alias'] . "'" . ',';		}		$typeAliases = rtrim($typeAliases, ',');		$query->where('m.type_alias IN (' . $typeAliases . ')');		$groups = '0,' . implode(',', array_unique($user->getAuthorisedViewLevels()));		$query->where('c.core_access IN (' . $groups . ')')			->group('m.type_alias, m.content_item_id, m.core_content_id');		// Use HAVING if matching all tags and we are matching more than one tag.		if ($ntagsr > 1 && $anyOrAll != 1 && $includeChildren != 1)		{			// The number of results should equal the number of tags requested.			$query->having("COUNT('m.tag_id') = " . $ntagsr);		}		// Set up the order by using the option chosen		if ($orderByOption == 'match_count')		{			$orderBy = 'COUNT(m.tag_id)';		}		else		{			$orderBy = 'MAX(' . $orderByOption . ')';		}		$query->order($orderBy . ' ' . $orderDir);		return $query;	}	/**	 * Function that converts tag ids to their tag names	 *	 * @param   array  $tagIds   array of integer tag ids.	 *	 * @return  array  An array of tag names.	 *	 * @since   3.1	 */	public function getTagNames($tagIds)	{		$tagNames = array();		if (is_array($tagIds) && count($tagIds) > 0)		{			JArrayHelper::toInteger($tagIds);			$tagIds = implode(',', $tagIds);			$db = JFactory::getDbo();			$query = $db->getQuery(true);			$query->select($db->quoteName('title'))				->from($db->quoteName('#__tags'))				->where($db->quoteName('id') . ' IN (' . $tagIds . ')');			$query->order($db->quoteName('title'));			$db->setQuery($query);			$tagNames = $db->loadColumn();		}		return $tagNames;	}	/**	 * Method to get an array of tag ids for the current tag and its children	 *	 * @param   integer  $id             An optional ID	 * @param   array    &$tagTreeArray  Array containing the tag tree	 *	 * @return  mixed	 *	 * @since   3.1	 */	public function getTagTreeArray($id, &$tagTreeArray = array())	{		// Get a level row instance.		$table = JTable::getInstance('Tag', 'TagsTable');		if ($table->isLeaf($id))		{			$tagTreeArray[] .= $id;			return $tagTreeArray;		}		$tagTree = $table->getTree($id);		// Attempt to load the tree		if ($tagTree)		{			foreach ($tagTree as $tag)			{				$tagTreeArray[] = $tag->id;			}			return $tagTreeArray;		}	}	/**	 * Method to get the type id for a type alias.	 *	 * @param   string  $typeAlias  A type alias.	 *	 * @return  string  Name of the table for a type	 *	 * @since   3.1	 */	public function getTypeId($typeAlias)	{		// Initialize some variables.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('type_id'))			->from($db->quoteName('#__content_types'))			->where($db->quoteName('type_alias') . ' = ' . $db->quote($typeAlias));		$db->setQuery($query);		$this->type_id = $db->loadResult();		return $this->type_id;	}	/**	 * Method to get a list of types with associated data.	 *	 * @param   string   $arrayType    Optionally specify that the returned list consist of objects, associative arrays, or arrays.	 *                                 Options are: rowList, assocList, and objectList	 * @param   array    $selectTypes  Optional array of type ids to limit the results to. Often from a request.	 * @param   boolean  $useAlias     If true, the alias is used to match, if false the type_id is used.	 *	 * @return  array   Array of of types	 *	 * @since   3.1	 */	public static function getTypes($arrayType = 'objectList', $selectTypes = null, $useAlias = true)	{		// Initialize some variables.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		$query->select('*');		if (!empty($selectTypes))		{			if (is_array($selectTypes))			{				$selectTypes = implode(',', $selectTypes);			}			if ($useAlias)			{				$query->where($db->quoteName('type_alias') . ' IN (' . $db->quote($selectTypes) . ')');			}			else			{				$query->where($db->quoteName('type_id') . ' IN (' . $selectTypes . ')');			}		}		$query->from($db->quoteName('#__content_types'));		$db->setQuery($query);		switch ($arrayType)		{			case 'assocList':				$types = $db->loadAssocList();			break;			case 'rowList':				$types = $db->loadRowList();			break;			case 'objectList':			default:				$types = $db->loadObjectList();			break;		}		return $types;	}	/**	 * Function that handles saving tags used in a table class after a store()	 *	 * @param   JTable  $table      JTable being processed	 *	 * @return  null	 *	 * @since   3.1	 */	public function postStoreProcess($table)	{		$metaObject = json_decode($table->get('metadata'));		$tags = (isset($metaObject->tags)) ? $metaObject->tags : null;		$result = true;		// Process ucm_content and ucm_base if either tags have changed or we have some tags.		if ($this->tagsChanged || $tags)		{			if (!$tags)			{				// Delete all tags data				$key = $table->getKeyName();				$result = $this->deleteTagData($table, $table->$key);			}			else			{				// Process the tags				$rowdata = new JHelperContent;				$data = $rowdata->getRowData($table);				$ucmContentTable = JTable::getInstance('Corecontent');				$ucm = new JUcmContent($table, $this->typeAlias);				$ucmData = $data ? $ucm->mapData($data) : $ucm->ucmData;				$primaryId = $ucm->getPrimaryKey($ucmData['common']['core_type_id'], $ucmData['common']['core_content_item_id']);				$result = $ucmContentTable->load($primaryId);				$result = $result && $ucmContentTable->bind($ucmData['common']);				$result = $result && $ucmContentTable->check();				$result = $result && $ucmContentTable->store();				$ucmId = $ucmContentTable->core_content_id;				// Store the tag data if the article data was saved and run related methods.				$result = $result && $this->tagItem($ucmId, $table, json_decode($table->metadata)->tags, true);			}		}		return $result;	}	/**	 * Function that preProcesses data from a table prior to a store() to ensure proper tag handling	 *	 * @param   JTable  $table      JTable being processed	 *	 * @return  null	 *	 * @since   3.1	 */	public function preStoreProcess($table)	{		if ($newMetadata = $this->createTagsFromMetadata($table->metadata))		{			$table->metadata = $newMetadata;		}		// If existing row, check to see if tags have changed.		$oldTable = clone $table;		$oldTable->reset();		$key = $oldTable->getKeyName();		if ($oldTable->$key && $oldTable->load())		{			$oldMetaObject = json_decode($oldTable->get('metadata'));			$oldTags = (isset($oldMetaObject->tags)) ? $oldMetaObject->tags : null;			$newMetaObject = json_decode($table->get('metadata'));			$newTags = (isset($newMetaObject->tags)) ? $newMetaObject->tags : null;		}		// We need to process tags if the tags have changed or if we have a new row		$this->tagsChanged = ($oldTags != $newTags) || !$table->$key;	}	/**	 * Function to search tags	 *	 * @param   array  $filters  Filter to apply to the search	 *	 * @return  array	 *	 * @since   3.1	 */	public static function searchTags($filters = array())	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value')			->select('a.path AS text')			->select('a.path')			->from('#__tags AS a')			->join('LEFT', $db->quoteName('#__tags', 'b') . ' ON a.lft > b.lft AND a.rgt < b.rgt');		// Filter language		if (!empty($filters['flanguage']))		{			$query->where('a.language IN (' . $db->quote($filters['flanguage']) . ',' . $db->quote('*') . ') ');		}		// Do not return root		$query->where($db->quoteName('a.alias') . ' <> ' . $db->quote('root'));		// Search in title or path		if (!empty($filters['like']))		{			$query->where(				'(' . $db->quoteName('a.title') . ' LIKE ' . $db->quote('%' . $filters['like'] . '%')					. ' OR ' . $db->quoteName('a.path') . ' LIKE ' . $db->quote('%' . $filters['like'] . '%') . ')'			);		}		// Filter title		if (!empty($filters['title']))		{			$query->where($db->quoteName('a.title') . ' = ' . $db->quote($filters['title']));		}		// Filter on the published state		if (is_numeric($filters['published']))		{			$query->where('a.published = ' . (int) $filters['published']);		}		// Filter by parent_id		if (!empty($filters['parent_id']))		{			JTable::addIncludePath(JPATH_ADMINISTRATOR . '/components/com_tags/tables');			$tagTable = JTable::getInstance('Tag', 'TagsTable');			if ($children = $tagTable->getTree($filters['parent_id']))			{				foreach ($children as $child)				{					$childrenIds[] = $child->id;				}				$query->where('a.id IN (' . implode(',', $childrenIds) . ')');			}		}		$query->group('a.id, a.title, a.level, a.lft, a.rgt, a.parent_id, a.published, a.path')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$results = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return false;		}		// We will replace path aliases with tag names		$results = self::convertPathsToNames($results);		return $results;	}	/**	 * Method to delete all instances of a tag from the mapping table. Generally used when a tag is deleted.	 *	 * @param   integer  $tag_id  The tag_id (primary key) for the deleted tag.	 *	 * @return  void	 *	 * @since   3.1	 */	public function tagDeleteInstances($tag_id)	{		// Delete the old tag maps.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->delete($db->quoteName('#__contentitem_tag_map'))			->where($db->quoteName('tag_id') . ' = ' . (int) $tag_id);		$db->setQuery($query);		$db->execute();	}	/**	 * Method to add or update tags associated with an item.	 *	 * @param   integer  $ucmId    Id of the #__ucm_content item being tagged	 * @param   JTable   $table    JTable object being tagged	 * @param   array    $tags     Array of tags to be applied.	 * @param   boolean  $replace  Flag indicating if all exising tags should be replaced	 *	 * @return  boolean  true on success, otherwise false.	 *	 * @since   3.1	 */	public function tagItem($ucmId, $table, $tags = array(), $replace = true)	{		$result = $this->unTagItem($ucmId, $table);		if ($replace)		{			$newTags = $tags;		}		else		{			$oldTags = json_decode($table->metadata)->tags;			$newTags = array_unique(array_merge($tags, $oldTags));		}		if (is_array($newTags) && count($newTags) > 0)		{			$result = $result && $this->addTagMapping($ucmId, $table, $newTags);		}		return $result;	}	/**	 * @param   integer  $contentId    Id of the content item being untagged	 * @param   JTable   $table        JTable object being untagged	 * @param   array    $tags         Array of tags to be untagged. Use an empty array to untag all existing tags.	 *	 * @return  boolean  true on success, otherwise false.	 *	 * @since   3.1	 */	public function unTagItem($contentId, $table, $tags = array())	{		$key = $table->getKeyName();		$id = $table->$key;		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->delete('#__contentitem_tag_map')			->where($db->quoteName('type_alias') . ' = ' . $db->quote($this->typeAlias))			->where($db->quoteName('content_item_id') . ' = ' . (int) $id);		if (is_array($tags) && count($tags) > 0)		{			$query->where($db->quoteName('tag_id') . ' IN ' . implode(',', $tags));		}		$db->setQuery($query);		return (boolean) $db->execute();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?phpif (is_string($feed)){	echo $feed;}else{	$lang      = JFactory::getLanguage();	$myrtl     = $params->get('rssrtl');	$direction = '';	if ($lang->isRTL() && $myrtl == 0)	{		$direction = " redirect-rtl";	}	elseif ($lang->isRTL() && $myrtl == 1)	{		$direction = " redirect-ltr";	}	elseif ($lang->isRTL() && $myrtl == 2)	{		$direction = " redirect-rtl";	}	elseif ($myrtl == 0)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 1)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 2)	{		$direction = " redirect-rtl";	}	?>	<?php if ($feed != false) : ?>	<?php	// Image handling	$iUrl   = isset($feed->image) ? $feed->image : null;	$iTitle = isset($feed->imagetitle) ? $feed->imagetitle : null;	?>	<div class="row-striped">	<div style="direction: <?php echo $rssrtl ? 'rtl' : 'ltr'; ?>; text-align: <?php echo $rssrtl ? 'right' : 'left'; ?> ! important"  class="feed<?php echo $moduleclass_sfx; ?>">	<?php if (!is_null($feed->title) && $params->get('rsstitle', 1)) : ?>		<h2 class="redirect-ltr">			<a href="<?php echo str_replace('&', '&amp', $feed->link); ?>" target="_blank">				<?php echo $feed->title; ?></a>		</h2>	<?php endif; ?>	<?php if ($params->get('rssdesc', 1)) : ?>		<?php echo $feed->description; ?>	<?php endif; ?>	<?php if ($params->get('rssimage', 1) && $iUrl) : ?>		<img src="<?php echo $iUrl; ?>" alt="<?php echo @$iTitle; ?>"/>	<?php endif; ?>	<ul class="newsfeed<?php echo $params->get('moduleclass_sfx'); ?>">	<?php if (!empty($feed)) : ?>		<?php for ($i = 0; $i < $params->get('rssitems', 5); $i++) : ?>			<?php			$uri  = (!empty($feed[$i]->guid) || !is_null($feed[$i]->guid)) ? $feed[$i]->guid : $feed[$i]->uri;			$uri  = substr($uri, 0, 4) != 'http' ? $params->get('rsslink') : $uri;			$text = !empty($feed[$i]->content) || !is_null($feed[$i]->content) ? $feed[$i]->content : $feed[$i]->description;			?>			<li>				<?php if (!empty($uri)) : ?>					<h5 class="feed-link">						<a href="<?php echo $uri; ?>" target="_blank">							<?php  echo $feed[$i]->title; ?></a></h5>				<?php else : ?>					<h5 class="feed-link"><?php  echo $feed[$i]->title; ?></h5>				<?php  endif; ?>				<?php if ($params->get('rssitemdesc') && !empty($text)) : ?>					<div class="feed-item-description">						<?php						// Strip the images.						$text = JFilterOutput::stripImages($text);						$text = JHtml::_('string.truncate', $text, $params->get('word_count'));						echo str_replace('&apos;', "'", $text);						?>					</div>				<?php endif; ?>			</li>		<?php endfor; ?>	</ul>	<?php endif; ?>	<?php endif; ?>	</div>	</div><?php}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'message.cancel' || document.formvalidator.isValid(document.id('message-form')))		{			Joomla.submitform(task, document.getElementById('message-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_messages'); ?>" method="post" name="adminForm" id="message-form" class="form-validate form-horizontal">	<fieldset class="adminform">		<ul class="adminformlist">			<li><?php echo $this->form->getLabel('user_id_to'); ?>				<?php echo $this->form->getInput('user_id_to'); ?></li>			<li><?php echo $this->form->getLabel('subject'); ?>				<?php echo $this->form->getInput('subject'); ?></li>		</ul>	</fieldset>	<fieldset class="adminform">		<legend><?php echo $this->form->getLabel('message'); ?></legend>		<ul class="adminformlist">			<li><?php echo $this->form->getInput('message'); ?> </li>		</ul>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi export driver. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseExporterMysqli extends JDatabaseExporter{	/**	 * An array of cached data.	 *	 * @var    array	 * @since  11.1	 */	protected $cache = array();	/**	 * The database connector to use for exporting structure and/or data.	 *	 * @var    JDatabaseDriverMysql	 * @since  11.1	 */	protected $db = null;	/**	 * An array input sources (table names).	 *	 * @var    array	 * @since  11.1	 */	protected $from = array();	/**	 * The type of output format (xml).	 *	 * @var    string	 * @since  11.1	 */	protected $asFormat = 'xml';	/**	 * An array of options for the exporter.	 *	 * @var    object	 * @since  11.1	 */	protected $options = null;	/**	 * Constructor.	 *	 * Sets up the default options for the exporter.	 *	 * @since   11.1	 */	public function __construct()	{		$this->options = new stdClass;		$this->cache = array('columns' => array(), 'keys' => array());		// Set up the class defaults:		// Export with only structure		$this->withStructure();		// Export as xml.		$this->asXml();		// Default destination is a string using $output = (string) $exporter;	}	/**	 * Magic function to exports the data to a string.	 *	 * @return  string	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function __toString()	{		// Check everything is ok to run first.		$this->check();		$buffer = '';		// Get the format.		switch ($this->asFormat)		{			case 'xml':			default:				$buffer = $this->buildXml();				break;		}		return $buffer;	}	/**	 * Set the output option for the exporter to XML format.	 *	 * @return  JDatabaseExporterMySQL  Method supports chaining.	 *	 * @since   11.1	 */	public function asXml()	{		$this->asFormat = 'xml';		return $this;	}	/**	 * Builds the XML data for the tables to export.	 *	 * @return  string  An XML string	 *	 * @since   11.1	 * @throws  Exception if an error occurs.	 */	protected function buildXml()	{		$buffer = array();		$buffer[] = '<?xml version="1.0"?>';		$buffer[] = '<mysqldump xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">';		$buffer[] = ' <database name="">';		$buffer = array_merge($buffer, $this->buildXmlStructure());		$buffer[] = ' </database>';		$buffer[] = '</mysqldump>';		return implode("\n", $buffer);	}	/**	 * Builds the XML structure to export.	 *	 * @return  array  An array of XML lines (strings).	 *	 * @since   11.1	 * @throws  Exception if an error occurs.	 */	protected function buildXmlStructure()	{		$buffer = array();		foreach ($this->from as $table)		{			// Replace the magic prefix if found.			$table = $this->getGenericTableName($table);			// Get the details columns information.			$fields = $this->db->getTableColumns($table, false);			$keys = $this->db->getTableKeys($table);			$buffer[] = '  <table_structure name="' . $table . '">';			foreach ($fields as $field)			{				$buffer[] = '   <field Field="' . $field->Field . '" Type="' . $field->Type . '" Null="' . $field->Null . '" Key="' .					$field->Key . '"' . (isset($field->Default) ? ' Default="' . $field->Default . '"' : '') . ' Extra="' . $field->Extra . '"' .					' />';			}			foreach ($keys as $key)			{				$buffer[] = '   <key Table="' . $table . '" Non_unique="' . $key->Non_unique . '" Key_name="' . $key->Key_name . '"' .					' Seq_in_index="' . $key->Seq_in_index . '" Column_name="' . $key->Column_name . '" Collation="' . $key->Collation . '"' .					' Null="' . $key->Null . '" Index_type="' . $key->Index_type . '" Comment="' . htmlspecialchars($key->Comment) . '"' .					' />';			}			$buffer[] = '  </table_structure>';		}		return $buffer;	}	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseExporterMysqli  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverMysqli))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Get the generic name of the table, converting the database prefix to the wildcard string.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  string  The name of the table with the database prefix replaced with #__.	 *	 * @since   11.1	 */	protected function getGenericTableName($table)	{		// TODO Incorporate into parent class and use $this.		$prefix = $this->db->getPrefix();		// Replace the magic prefix if found.		$table = preg_replace("|^$prefix|", '#__', $table);		return $table;	}	/**	 * Specifies a list of table names to export.	 *	 * @param   mixed  $from  The name of a single table, or an array of the table names to export.	 *	 * @return  JDatabaseExporterMysql  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if input is not a string or array.	 */	public function from($from)	{		if (is_string($from))		{			$this->from = array($from);		}		elseif (is_array($from))		{			$this->from = $from;		}		else		{			throw new Exception('JPLATFORM_ERROR_INPUT_REQUIRES_STRING_OR_ARRAY');		}		return $this;	}	/**	 * Sets the database connector to use for exporting structure and/or data from MySQL.	 *	 * @param   JDatabaseDriverMysqli  $db  The database connector.	 *	 * @return  JDatabaseExporterMysqli  Method supports chaining.	 *	 * @since   11.1	 */	public function setDbo(JDatabaseDriverMysqli $db)	{		$this->db = $db;		return $this;	}	/**	 * Sets an internal option to export the structure of the input table(s).	 *	 * @param   boolean  $setting  True to export the structure, false to not.	 *	 * @return  JDatabaseExporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function withStructure($setting = true)	{		$this->options->withStructure = (boolean) $setting;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');$app = JFactory::getApplication();$input = $app->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'category.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_categories&extension=' . $input->getCmd('extension', 'com_content') . '&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<div class="row-fluid">	<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_CATEGORIES_FIELDSET_DETAILS', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('title'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('title'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('alias'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('description'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('description'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('extension'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('extension'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_CATEGORIES_FIELDSET_PUBLISHING', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('id'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('hits'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('hits'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('created_user_id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('created_user_id'); ?>						</div>					</div>					<?php if (intval($this->item->created_time)) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('created_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('created_time'); ?>							</div>						</div>					<?php endif; ?>					<?php if ($this->item->modified_user_id) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_user_id'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_user_id'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_time'); ?>							</div>						</div>					<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'options', JText::_('CATEGORIES_FIELDSET_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('options'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('metadata'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo $this->loadTemplate('extrafields'); ?>				<?php if ($this->assoc) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>						<fieldset>							<?php echo $this->loadTemplate('associations'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>				<?php if ($this->canDo->get('core.admin')) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'rules', JText::_('COM_CATEGORIES_FIELDSET_RULES', true)); ?>						<fieldset>							<?php echo $this->form->getInput('rules'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->		<div class="span2">			<h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('title'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('parent_id'); ?>					<div class="controls">						<?php echo $this->form->getInput('parent_id'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('published'); ?>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('access'); ?>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('language'); ?>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<?php foreach ($this->form->getFieldset('jmetadata') as $field) : ?>						<?php if ($field->name == 'jform[metadata][tags][]') :?>						<div class="control-group">							<div class="control-label"><?php echo $field->label; ?></div>							<div class="controls"><?php echo $field->input; ?></div>						</div>						<?php endif; ?>					<?php endforeach; ?>				</div>			</fieldset>		</div>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_SERVER_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('server') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$client    = $this->state->get('filter.client') == 'site' ? JText::_('JSITE') : JText::_('JADMINISTRATOR');$language  = $this->state->get('filter.language');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction')); ?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=overrides'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDES_FILTER_SEARCH_DESC'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDES_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"></div>		<table class="adminlist">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="30%" class="left">						<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_KEY', 'key', $listDirn, $listOrder); ?>					</th>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_TEXT', 'text', $listDirn, $listOrder); ?>					</th>					<th class="nowrap">						<?php echo JText::_('COM_LANGUAGES_FIELD_LANG_TAG_LABEL'); ?>					</th>					<th>						<?php echo JText::_('JCLIENT'); ?>					</th>					<th class="right" width="20">						<?php echo JText::_('COM_LANGUAGES_HEADING_NUM'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="6">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php $canEdit = JFactory::getUser()->authorise('core.edit', 'com_languages');			$i = 0;			foreach ($this->items as $key => $text) : ?>				<tr class="row<?php echo $i % 2; ?>" id="overriderrow<?php echo $i; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $key); ?>					</td>					<td>						<?php if ($canEdit) : ?>							<a id="key[<?php echo $this->escape($key); ?>]" href="<?php echo JRoute::_('index.php?option=com_languages&task=override.edit&id='.$key); ?>"><?php echo $this->escape($key); ?></a>						<?php else: ?>							<?php echo $this->escape($key); ?>						<?php endif; ?>					</td>					<td>						<span id="string[<?php	echo $this->escape($key); ?>]"><?php echo $this->escape($text); ?></span>					</td>					<td class="center">						<?php echo $language; ?>					</td>					<td class="center">						<?php echo $client; ?>					</td>					<td class="right">						<?php echo $this->pagination->getRowOffset($i); ?>					</td>				</tr>			<?php $i++;			endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API Changesets class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */class JOpenstreetmapChangesets extends JOpenstreetmapObject{	/**	 * Method to create a changeset	 * 	 * @param   array  $changesets  array which contains changeset data	 * 	 * @return  array  The xml response	 * 	 * @since   13.1	 */	public function createChangeset($changesets=array())	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key'],				'oauth_token_secret' => $token['secret']		);		// Set the API base		$base = 'changeset/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$xml = '<?xml version="1.0" encoding="UTF-8"?>			<osm version="0.6" generator="JOpenstreetmap">';		if (!empty($changesets))		{			// Create Changeset element for every changeset			foreach ($changesets as $tags)			{				$xml .= '<changeset>';				$tag_list = '';				if (!empty($tags))				{					// Create a list of tags for each changeset					foreach ($tags as $key => $value)					{						$xml .= '<tag k="' . $key . '" v="' . $value . '"/>';					}				}				$xml .= '</changeset>';			}		}		$xml .= '</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to read a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  array    The xml response about a changeset	 *  	 * @since   13.1	 */	public function readChangeset($id)	{		// Set the API base		$base = 'changeset/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->changeset;	}	/**	 * Method to update a changeset	 * 	 * @param   int    $id    identifier of the changeset	 * @param   array  $tags  array of tags to update	 * 	 * @return  array    The xml response of updated changeset	 * 	 * @since   13.1 	 */	public function updateChangeset($id, $tags=array() )	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create a list of tags to update changeset		$tag_list = '';		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<changeset>'				. $tag_list .				'</changeset>  				</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->changeset;	}	/**	 * Method to close a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  No value returns	 * 	 * @since   13.1	 */	public function closeChangeset($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/close';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['format'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $header);	}	/**	 * Method to download a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  array	The xml response of requested changeset	 * 	 * @since   13.1	 */	public function downloadChangeset($id)	{		// Set the API base		$base = 'changeset/' . $id . '/download';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->create;	}	/**	 * Method to expand the bounding box of a changeset	 * 	 * @param   int    $id     identifier of the changeset	 * @param   array  $nodes  list of lat lon about nodes	 * 	 * @return  array    The xml response of changed changeset	 * 	 * @since   13.1	 */	public function expandBBoxChangeset($id, $nodes)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/expand_bbox';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create a list of tags to update changeset		$node_list = '';		if (!empty($nodes))		{			foreach ($nodes as $node)			{				$node_list .= '<node lat="' . $node[0] . '" lon="' . $node[1] . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<changeset>'				. $node_list .				'</changeset>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->changeset;	}	/**	 * Method to Query on changesets	 *  	 * @param   string  $param  parameters for query	 * 	 * @return  array    The xml response	 * 	 * @since   13.1	 */	public function queryChangeset($param)	{		// Set the API base		$base = 'changesets/' . $param;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->osm;	}	/**	 * Method to upload a diff to a changeset	 * 	 * @param   string  $xml  diff data to upload	 * @param   int     $id   identifier of the changeset	 * 	 * @return  array    The xml response of result	 * 	 * @since   13.1	 */	public function diffUploadChangeset($xml, $id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/upload';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->diffResult;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Post class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/post/ * @since       13.1 */class JFacebookPost extends JFacebookObject{	/**	 * Method to get a post. Requires authentication and read_stream permission for all data.	 *	 * @param   string  $post  The post id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPost($post)	{		return $this->get($post);	}	/**	 * Method to delete a post if it was created by this application. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deletePost($post)	{		return $this->deleteConnection($post);	}	/**	 * Method to get a post's comments. Requires authentication and read_stream permission.	 *	 * @param   string   $post    The post id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($post, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($post, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post     The post id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($post, $message)	{		// Set POST request parameters.		$data['message'] = $message;		return $this->createConnection($post, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get post's likes. Requires authentication and read_stream permission.	 *	 * @param   string   $post    The post id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($post, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($post, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($post)	{		return $this->createConnection($post, 'likes');	}	/**	 * Method to unlike a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($post)	{		return $this->deleteConnection($post, 'likes');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_weblinks.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_weblinks&task=weblinks.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'weblinkList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_weblinks&view=weblinks'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_WEBLINKS_SEARCH_IN_TITLE');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_WEBLINKS_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_WEBLINKS_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="weblinkList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" style="min-width:55px" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'a.ordering');				$item->cat_link	= JRoute::_('index.php?option=com_categories&extension=com_weblinks&task=edit&type=other&cid[]='. $item->catid);				$canCreate  = $user->authorise('core.create',     'com_weblinks.category.' . $item->catid);				$canEdit    = $user->authorise('core.edit',       'com_weblinks.category.' . $item->catid);				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_weblinks.category.' . $item->catid) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>						<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />					<?php else : ?>						<span class="sortable-handler inactive" >							<i class="icon-menu"></i>						</span>					<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->state, $i, 'weblinks.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'weblinks.', $canCheckin); ?>						<?php endif; ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_weblinks&task=weblink.edit&id='.(int) $item->id); ?>">								<?php echo $this->escape($item->title); ?></a>						<?php else : ?>								<?php echo $this->escape($item->title); ?>						<?php endif; ?>						<span class="small">							<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>						</span>						<div class="small">							<?php echo $this->escape($item->category_title); ?>						</div>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="center hidden-phone">						<?php echo $item->hits; ?>					</td>					<td class="small nowrap hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Plugin * @subpackage  User.contactcreator * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Class for Contact Creator * * A tool to automatically create and synchronise contacts with a user * * @package     Joomla.Plugin * @subpackage  User.contactcreator * @since       1.6 */class PlgUserContactCreator extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	public function onUserAfterSave($user, $isnew, $success, $msg)	{		if (!$success)		{			return false; // if the user wasn't stored we don't resync		}		if (!$isnew)		{			return false; // if the user isn't new we don't sync		}		// ensure the user id is really an int		$user_id = (int) $user['id'];		if (empty($user_id))		{			die('invalid userid');			return false; // if the user id appears invalid then bail out just in case		}		$category = $this->params->get('category', 0);		if (empty($category))		{			JError::raiseWarning(41, JText::_('PLG_CONTACTCREATOR_ERR_NO_CATEGORY'));			return false; // bail out if we don't have a category		}		$db = JFactory::getDbo();		// grab the contact ID for this user; note $user_id is cleaned above		$db->setQuery('SELECT id FROM #__contact_details WHERE user_id = '. $user_id);		$id = $db->loadResult();		JTable::addIncludePath(JPATH_ADMINISTRATOR.'/components/com_contact/tables');		$contact = JTable::getInstance('contact', 'ContactTable');		if (!$contact)		{			return false;		}		if ($id)		{			$contact->load($id);		}		elseif ($this->params->get('autopublish', 0))		{			$contact->published = 1;		}		$contact->name = $user['name'];		$contact->user_id = $user_id;		$contact->email_to = $user['email'];		$contact->catid = $category;		$contact->language = '*';		$autowebpage = $this->params->get('autowebpage', '');		if (!empty($autowebpage))		{			// search terms			$search_array = array('[name]', '[username]', '[userid]', '[email]');			// replacement terms, urlencoded			$replace_array = array_map('urlencode', array($user['name'], $user['username'], $user['id'], $user['email']));			// now replace it in together			$contact->webpage = str_replace($search_array, $replace_array, $autowebpage);		}		if ($contact->check())		{			$result = $contact->store();		}		if (!(isset($result)) || !$result)		{			JError::raiseError(42, JText::sprintf('PLG_CONTACTCREATOR_ERR_FAILED_UPDATE', $contact->getError()));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a newsfeed. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsViewNewsfeed extends JViewLegacy{	protected $item;	protected $form;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state	= $this->get('State');		$this->item		= $this->get('Item');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		// Since we don't track these assets at the item level, use the category id.		$canDo		= NewsfeedsHelper::getActions($this->item->catid, 0);		JToolbarHelper::title(JText::_('COM_NEWSFEEDS_MANAGER_NEWSFEED'), 'newsfeeds.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit') || count($user->getAuthorisedCategories('com_newsfeeds', 'core.create')) > 0))		{			JToolbarHelper::apply('newsfeed.apply');			JToolbarHelper::save('newsfeed.save');		}		if (!$checkedOut && count($user->getAuthorisedCategories('com_newsfeeds', 'core.create')) > 0){			JToolbarHelper::save2new('newsfeed.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('newsfeed.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('newsfeed.cancel');		}		else		{			JToolbarHelper::cancel('newsfeed.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_NEWSFEEDS_FEEDS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a template style. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesViewStyle extends JViewLegacy{	protected $item;	protected $form;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = TemplatesHelper::getActions();		JToolbarHelper::title(			$isNew ? JText::_('COM_TEMPLATES_MANAGER_ADD_STYLE')			: JText::_('COM_TEMPLATES_MANAGER_EDIT_STYLE'), 'thememanager'		);		// If not checked out, can save the item.		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('style.apply');			JToolbarHelper::save('style.save');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('style.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('style.cancel');		}		else		{			JToolbarHelper::cancel('style.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		// Get the help information for the template item.		$lang = JFactory::getLanguage();		$help = $this->get('Help');		if ($lang->hasKey($help->url))		{			$debug = $lang->setDebug(false);			$url = JText::_($help->url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($help->key, false, $url);	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Search class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiSearch extends JMediawikiObject{	/**     * Method to perform a full text search.     *     * @param   string   $srsearch     Search for all page titles (or content) that has this value.     * @param   array    $srnamespace  The namespace(s) to enumerate.     * @param   string   $srwhat       Search inside the text or titles.     * @param   array    $srinfo       What metadata to return.     * @param   array    $srprop       What properties to return.     * @param   boolean  $srredirects  Include redirect pages in the search.     * @param   integer  $sroffest     Use this value to continue paging.     * @param   integer  $srlimit      How many total pages to return.     *     * @return  object     *     * @since   12.3     */	public function search($srsearch, array $srnamespace = null, $srwhat = null, array $srinfo = null, array $srprop = null,		$srredirects = null, $sroffest = null, $srlimit = null)	{		// Build the request.		$path = '?action=query&list=search';		if (isset($srsearch))		{			$path .= '&srsearch=' . $srsearch;		}		if (isset($srnamespace))		{			$path .= '&srnamespace=' . $this->buildParameter($srnamespace);		}		if (isset($srwhat))		{			$path .= '&srwhat=' . $srwhat;		}		if (isset($srinfo))		{			$path .= '&srinfo=' . $this->buildParameter($srinfo);		}		if (isset($srprop))		{			$path .= '&srprop=' . $this->buildParameter($srprop);		}		if ($srredirects)		{			$path .= '&srredirects=';		}		if (isset($sroffest))		{			$path .= '&sroffest=' . $sroffest;		}		if (isset($srlimit))		{			$path .= '&srlimit=' . $srlimit;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to search the wiki using opensearch protocol.     *     * @param   string   $search     Search string.	 * @param   integer  $limit	     Maximum amount of results to return.     * @param   array    $namespace  Namespaces to search.     * @param   string   $suggest    Do nothing if $wgEnableOpenSearchSuggest is false.     * @param   string   $format     Output format.     *     * @return  object     *     * @since   12.3     */	public function openSearch($search, $limit = null, array $namespace = null, $suggest = null, $format = null)	{		// Build the request.		$path = '?action=query&list=search';		if (isset($search))		{			$path .= '&search=' . $search;		}		if (isset($limit))		{			$path .= '&limit=' . $limit;		}		if (isset($namespace))		{			$path .= '&namespace=' . $this->buildParameter($namespace);		}		if (isset($suggest))		{			$path .= '&suggest=' . $suggest;		}		if (isset($format))		{			$path .= '&format=' . $format;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  UCM * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Base class for implementing UCM * * @package     Joomla.Libraries * @subpackage  UCM * @since       3.1 */class JUcmBase implements JUcm{	/**	 * The UCM type object	 *	 * @var    JUcmType	 * @since  3.1	 */	protected $type;	/**	 * The alias for the content table	 *	 * @var    string	 * @since  3.1	 */	protected $alias;	/**	 * Instantiate the UcmBase.	 *	 * @param   string    $alias  The alias string	 * @param   JUcmType  $type   The type object	 *	 * @since   3.1	 */	public function __construct($alias = null, JUcmType $type = null)	{		// Setup dependencies.		$input = JFactory::getApplication()->input;		$this->alias = isset($alias) ? $alias : $input->get('option') . '.' . $input->get('view');		$this->type = isset($type) ? $type : $this->getType();	}	/**	 * Store data to the appropriate table	 *	 * @param   array   $data        Data to be stored	 * @param   JTable  $table       JTable Object	 * @param   string  $primaryKey  The primary key name	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 * @throws  Exception	 */	protected function store($data, JTable $table = null, $primaryKey = null)	{		if (!$table)		{			$table = JTable::getInstance('Ucm');		}		$ucmId		= isset($data['ucm_id']) ? $data['ucm_id'] : null;		$primaryKey	= $primaryKey ? $primaryKey : $ucmId;		if (isset($primaryKey))		{			$table->load($primaryKey);		}		try		{			$table->bind($data);		}		catch (RuntimeException $e)		{			throw new Exception($e->getMessage(), 500);		}		try		{			$table->store();		}		catch (RuntimeException $e)		{			throw new Exception($e->getMessage(), 500);		}		return true;	}	/**	 * Get the UCM Content type.	 *	 * @return  object  The UCM content type	 *	 * @since   3.1	 */	public function getType()	{		$type = new JUcmType($this->alias);		return $type;	}	/**	 * Method to map the base ucm fields	 *	 * @param   array     $original  Data array	 * @param   JUcmType  $type      UCM Content Type	 *	 * @return  array  Data array of UCM mappings	 *	 * @since   3.1	 */	public function mapBase($original, JUcmType $type = null)	{		$type = $type ? $type : $this->type;		$data = array(			'ucm_type_id' => $type->id,			'ucm_item_id' => $original[$type->primary_key],			'ucm_language_id' => JHelperContent::getLanguageId($original['language'])		);		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('metadata');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-options');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>		<ul class="adminformlist">			<?php if ($name == 'jmetadata') : // Include the real fields in this panel. ?>				<li><?php echo $this->form->getLabel('metadesc'); ?>				<?php echo $this->form->getInput('metadesc'); ?></li>				<li><?php echo $this->form->getLabel('metakey'); ?>				<?php echo $this->form->getInput('metakey'); ?></li>				<li><?php echo $this->form->getLabel('xreference'); ?>				<?php echo $this->form->getInput('xreference'); ?></li>			<?php endif; ?>			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endforeach; ?>		</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Base class for rendering a display layout * loaded from from a layout file * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.0 */class JLayoutFile extends JLayoutBase{	/**	 * @var    string  Dot separated path to the layout file, relative to base path	 * @since  3.0	 */	protected $layoutId = '';	/**	 * @var    string  Base path to use when loading layout files	 * @since  3.0	 */	protected $basePath = null;	/**	 * @var    string  Full path to actual layout files, after possible template override check	 * @since  3.0.3	 */	protected $fullPath = null;	/**	 * Method to instantiate the file-based layout.	 *	 * @param   string  $layoutId  Dot separated path to the layout file, relative to base path	 * @param   string  $basePath  Base path to use when loading layout files	 *	 * @since   3.0	 */	public function __construct($layoutId, $basePath = null)	{		$this->layoutId = $layoutId;		$this->basePath = is_null($basePath) ? JPATH_ROOT . '/layouts' : rtrim($basePath, DIRECTORY_SEPARATOR);	}	/**	 * Method to render the layout.	 *	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 *	 * @return  string  The necessary HTML to display the layout	 *	 * @since   3.0	 */	public function render($displayData)	{		$layoutOutput = '';		// Check possible overrides, and build the full path to layout file		$path = $this->getPath();		// If there exists such a layout file, include it and collect its output		if (!empty($path))		{			ob_start();			include $path;			$layoutOutput = ob_get_contents();			ob_end_clean();		}		return $layoutOutput;	}	/**	 * Method to finds the full real file path, checking possible overrides	 *	 * @return  string  The full path to the layout file	 *	 * @since   3.0	 */	protected function getPath()	{		if (is_null($this->fullPath) && !empty($this->layoutId))		{			$rawPath = str_replace('.', '/', $this->layoutId) . '.php';			$fileName = basename($rawPath);			$filePath = dirname($rawPath);			$possiblePaths = array(				JPATH_THEMES . '/' . JFactory::getApplication()->getTemplate() . '/html/layouts/' . $filePath,				$this->basePath . '/' . $filePath			);			$this->fullPath = JPath::find($possiblePaths, $fileName);		}		return $this->fullPath;	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Images class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiImages extends JMediawikiObject{	/**     * Method to get all images contained on the given page(s).     *     * @param   array    $titles         Page titles to retrieve images.     * @param   integer  $imagelimit     How many images to return.     * @param   boolean  $imagecontinue  When more results are available, use this to continue.     * @param   integer  $imimages       Only list these images.     * @param   string   $imdir          The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getImages(array $titles, $imagelimit = null, $imagecontinue = null, $imimages = null, $imdir = null)	{		// Build the request.		$path = '?action=query&prop=images';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($imagelimit))		{			$path .= '&imagelimit=' . $imagelimit;		}		if ($imagecontinue)		{			$path .= '&imagecontinue=';		}		if (isset($imimages))		{			$path .= '&imimages=' . $imimages;		}		if (isset($imdir))		{			$path .= '&imdir=' . $imdir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all images contained on the given page(s).     *     * @param   array  $titles  Page titles to retrieve links.     *     * @return  object     *     * @since   12.3     */	public function getImagesUsed(array $titles)	{		// Build the request.		$path = '?action=query&generator=images&prop=info';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all image information and upload history.     *     * @param   array    $liprop             What image information to get.     * @param   integer  $lilimit            How many image revisions to return.     * @param   string   $listart            Timestamp to start listing from.     * @param   string   $liend              Timestamp to stop listing at.     * @param   integer  $liurlwidth         URL to an image scaled to this width will be returned..     * @param   integer  $liurlheight        URL to an image scaled to this height will be returned.     * @param   string   $limetadataversion  Version of metadata to use.     * @param   string   $liurlparam         A handler specific parameter string.     * @param   boolean  $licontinue         When more results are available, use this to continue.     *     * @return  object     *     * @since   12.3     */	public function getImageInfo(array $liprop = null, $lilimit = null, $listart = null, $liend = null, $liurlwidth = null,		$liurlheight = null, $limetadataversion = null, $liurlparam = null, $licontinue = null)	{		// Build the request.		$path = '?action=query&prop=imageinfo';		if (isset($liprop))		{			$path .= '&liprop=' . $this->buildParameter($liprop);		}		if (isset($lilimit))		{			$path .= '&lilimit=' . $lilimit;		}		if (isset($listart))		{			$path .= '&listart=' . $listart;		}		if (isset($liend))		{			$path .= '&liend=' . $liend;		}		if (isset($liurlwidth))		{			$path .= '&liurlwidth=' . $liurlwidth;		}		if (isset($liurlheight))		{			$path .= '&liurlheight=' . $liurlheight;		}		if (isset($limetadataversion))		{			$path .= '&limetadataversion=' . $limetadataversion;		}		if (isset($liurlparam))		{			$path .= '&liurlparam=' . $liurlparam;		}		if ($licontinue)		{			$path .= '&alcontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to enumerate all images.     *     * @param   string   $aifrom        The image title to start enumerating from.     * @param   string   $aito          The image title to stop enumerating at.     * @param   string   $aiprefix      Search for all image titles that begin with this value.     * @param   integer  $aiminsize     Limit to images with at least this many bytes.     * @param   integer  $aimaxsize     Limit to images with at most this many bytes.     * @param   integer  $ailimit       How many images in total to return.     * @param   string   $aidir         The direction in which to list.     * @param   string   $aisha1        SHA1 hash of image.     * @param   string   $aisha1base36  SHA1 hash of image in base 36.     * @param   array    $aiprop        What image information to get.     * @param   string   $aimime        What MIME type to search for.     *     * @return  object     *     * @since   12.3     */	public function enumerateImages($aifrom = null, $aito = null, $aiprefix = null, $aiminsize = null, $aimaxsize = null, $ailimit = null,		$aidir = null, $aisha1 = null, $aisha1base36 = null, array $aiprop = null, $aimime = null)	{		// Build the request.		$path = '?action=query&list=allimages';		if (isset($aifrom))		{			$path .= '&aifrom=' . $aifrom;		}		if (isset($aito))		{			$path .= '&aito=' . $aito;		}		if (isset($aiprefix))		{			$path .= '&aiprefix=' . $aiprefix;		}		if (isset($aiminsize))		{			$path .= '&aiminsize=' . $aiminsize;		}		if (isset($aimaxsize))		{			$path .= '&aimaxsize=' . $aimaxsize;		}		if (isset($ailimit))		{			$path .= '&ailimit=' . $ailimit;		}		if (isset($aidir))		{			$path .= '&aidir=' . $aidir;		}		if (isset($aisha1))		{			$path .= '&aisha1=' . $aisha1;		}		if (isset($aisha1base36))		{			$path .= '&$aisha1base36=' . $aisha1base36;		}		if (isset($aiprop))		{			$path .= '&aiprop=' . $this->buildParameter($aiprop);		}		if (isset($aimime))		{			$path .= '&aimime=' . $aimime;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$template = $app->getTemplate();// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('bootstrap.framework');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (document.formvalidator.isValid(document.id('component-form')))		{			Joomla.submitform(task, document.getElementById('component-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_config');?>" id="component-form" method="post" name="adminForm" autocomplete="off" class="form-validate">	<?php	echo JHtml::_('tabs.start', 'config-tabs-' . $this->component->option.'_configuration', array('useCookie' => 1));		$fieldSets = $this->form->getFieldsets();		foreach ($fieldSets as $name => $fieldSet) :			$label = empty($fieldSet->label) ? 'COM_CONFIG_'.$name.'_FIELDSET_LABEL' : $fieldSet->label;			echo JHtml::_('tabs.panel', JText::_($label), 'publishing-details');			if (isset($fieldSet->description) && !empty($fieldSet->description)) :				echo '<p class="tab-description">'.JText::_($fieldSet->description).'</p>';			endif;	?>		<ul class="config-option-list">		<?php		foreach ($this->form->getFieldset($name) as $field):		?>			<li>			<?php if (!$field->hidden) : ?>			<?php echo $field->label; ?>			<?php endif; ?>			<?php echo $field->input; ?>			</li>		<?php		endforeach;		?>		</ul>	<div class="clr"></div>	<?php		endforeach;	echo JHtml::_('tabs.end');	?>	<div>		<input type="hidden" name="id" value="<?php echo $this->component->id;?>" />		<input type="hidden" name="component" value="<?php echo $this->component->option;?>" />		<input type="hidden" name="return" value="<?php echo $this->return;?>" />		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();JHtml::_('bootstrap.tooltip');?>		<tr>			<td class="imgTotal">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe">					<i class="icon-folder-2"></i></a>			</td>			<td class="description">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe"><?php echo $this->_tmp_folder->name; ?></a>			</td>			<td>&#160;			</td>			<td>&#160;			</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>				<a class="delete-item" target="_top" href="index.php?option=com_media&amp;task=folder.delete&amp;tmpl=index&amp;folder=<?php echo $this->state->folder; ?>&amp;<?php echo JSession::getFormToken(); ?>=1&amp;rm[]=<?php echo $this->_tmp_folder->name; ?>" rel="<?php echo $this->_tmp_folder->name; ?>' :: <?php echo $this->_tmp_folder->files + $this->_tmp_folder->folders; ?>"><i class="icon-remove hasTooltip" title="<?php echo JText::_('JACTION_DELETE');?>"></i></a>				<input type="checkbox" name="rm[]" value="<?php echo $this->_tmp_folder->name; ?>" />			</td>		<?php endif;?>		</tr>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link model. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectModelLink extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_REDIRECT';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if ($record->published != -2)		{			return false;		}		$user = JFactory::getUser();		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check the component since there are no categories or other assets.		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Link', $prefix = 'RedirectTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_redirect.link', 'link', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if ($this->canEditState((object) $data) != true)		{			// Disable fields for display.			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_redirect.edit.link.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_redirect.link', $data);		return $data;	}	/**	 * Method to activate links.	 *	 * @param   array     An array of link ids.	 * @param   string    The new URL to set for the redirect.	 * @param   string    A comment for the redirect links.	 * @return  boolean  Returns true on success, false on failure.	 * @since   1.6	 */	public function activate(&$pks, $url, $comment = null)	{		$user = JFactory::getUser();		$db = $this->getDbo();		// Sanitize the ids.		$pks = (array) $pks;		JArrayHelper::toInteger($pks);		// Populate default comment if necessary.		$comment = (!empty($comment)) ? $comment : JText::sprintf('COM_REDIRECT_REDIRECTED_ON', JHtml::_('date', time()));		// Access checks.		if (!$user->authorise('core.admin', 'com_redirect'))		{			$pks = array();			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			return false;		}		if (!empty($pks))		{			// Update the link rows.			$query = $db->getQuery(true)				->update($db->quoteName('#__redirect_links'))				->set($db->quoteName('new_url') . ' = ' . $db->quote($url))				->set($db->quoteName('published') . ' = ' . $db->quote(1))				->set($db->quoteName('comment') . ' = ' . $db->quote($comment))				->where($db->quoteName('id') . ' IN (' . implode(',', $pks) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app	= JFactory::getApplication();$doc	= JFactory::getDocument();$lang	= JFactory::getLanguage();$input	= $app->input;$user	= JFactory::getUser();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Load template javascript$doc->addScript('templates/'.$this->template.'/js/template.js', 'text/javascript');// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo  $this->language; ?>" lang="<?php echo  $this->language; ?>" dir="<?php echo  $this->direction; ?>"><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<jdoc:include type="head" /><!-- Load additional CSS styles for Internet Explorer --><!--[if IE 8]>	<link href="templates/<?php echo  $this->template ?>/css/ie8.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if IE 7]>	<link href="templates/<?php echo  $this->template ?>/css/ie7.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--></head><body id="minwidth-body"><div id="containerwrap">	<!-- Header Logo -->	<div id="header">		<!-- Site Title and Skip to Content -->		<div class="title-ua">			<h1 class="title"><?php echo $this->params->get('showSiteName') ? $app->getCfg('sitename') . " " . JText::_('JADMINISTRATION') : JText::_('JADMINISTRATION'); ?></h1>			<div id="skiplinkholder"><p><a id="skiplink" href="#skiptarget"><?php echo JText::_('TPL_HATHOR_SKIP_TO_MAIN_CONTENT'); ?></a></p></div>		</div>	</div><!-- end header -->	<!-- Main Menu Navigation -->	<div id="nav">		<div id="module-menu">			<h2 class="element-invisible"><?php echo JText::_('TPL_HATHOR_MAIN_MENU'); ?></h2>			<jdoc:include type="modules" name="menu" />		</div>		<div class="clr"></div>	</div><!-- end nav -->	<!-- Status Module -->	<div id="module-status">		<jdoc:include type="modules" name="status"/>			<?php			//Display an harcoded logout			$task = $app->input->get('task');			if ($task == 'edit' || $task == 'editA' || $app->input->getInt('hidemainmenu'))			{				$logoutLink = '';			} else {				$logoutLink = JRoute::_('index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1');			}			$hideLinks = $app->input->getBool('hidemainmenu');			$output = array();			// Print the Preview link to Main site.			//$output[] = '<span class="viewsite"><a href="'.JURI::root().'" target="_blank">'.JText::_('JGLOBAL_VIEW_SITE').'</a></span>';			// Print the logout link.			//$output[] = '<span class="logout">' .($hideLinks ? '' : '<a href="'.$logoutLink.'">').JText::_('JLOGOUT').($hideLinks ? '' : '</a>').'</span>';			// Output the items.			foreach ($output as $item) :			echo $item;			endforeach;			?>	</div>	<!-- Content Area -->	<div id="content">		<!-- Component Title -->		<jdoc:include type="modules" name="title" />		<!-- System Messages -->		<jdoc:include type="message" />		<!-- Sub Menu Navigation -->		<div class="subheader">			<?php if (!$app->input->getInt('hidemainmenu')) : ?>				<h3 class="element-invisible"><?php echo JText::_('TPL_HATHOR_SUB_MENU'); ?></h3>				<jdoc:include type="modules" name="submenu" style="xhtmlid" id="submenu-box" />			<?php echo " " ?>			<?php else : ?>				<div id="no-submenu"></div>			<?php endif; ?>		</div>		<!-- Toolbar Icon Buttons -->		<div class="toolbar-box">			<jdoc:include type="modules" name="toolbar" style="xhtml" />			<div class="clr"></div>		</div>		<!-- Beginning of Actual Content -->		<div id="element-box">			<div id="container-collapse" class="container-collapse"></div>			<p id="skiptargetholder"><a id="skiptarget" class="skip" tabindex="-1"></a></p>			<!-- The main component -->			<jdoc:include type="component" />			<div class="clr"></div>		</div><!-- end of element-box -->		<noscript>			<?php echo  JText::_('JGLOBAL_WARNJAVASCRIPT') ?>		</noscript>		<div class="clr"></div>	</div><!-- end of content -->	<div class="clr"></div></div><!-- end of containerwrap --><!-- Footer --><div id="footer">	<jdoc:include type="modules" name="footer" style="none"  />	<p class="copyright">		<?php $joomla = '<a href="http://www.joomla.org">Joomla!&#174;</a>';			echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla) ?>	</p></div><script type="text/javascript">	(function($){		$(document).ready(function () {			// Patches to fix some wrong render of chosen fields			$('.chzn-container, .chzn-drop, .chzn-choices .search-field input').each(function (index) {				$(this).css({					'width': 'auto'				});			});		});	})(jQuery);</script></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=templates'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('Filters'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TEMPLATES_TEMPLATES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_client_id">				<?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<option value="*"><?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?></option>				<?php echo JHtml::_('select.options', TemplatesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist" id="template-mgr">		<thead>			<tr>				<th class="checkmark-col">					&#160;				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_TEMPLATE', 'a.element', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'JCLIENT', 'a.client_id', $listDirn, $listOrder); ?>				</th>				<th class="center width-10">					<?php echo JText::_('JVERSION'); ?>				</th>				<th class="width-15">					<?php echo JText::_('JDATE'); ?>				</th>				<th class="width-25">					<?php echo JText::_('JAUTHOR'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('templates.thumb', $item->element, $item->client_id); ?>				</td>				<td class="template-name">					<a href="<?php echo JRoute::_('index.php?option=com_templates&view=template&id='.(int) $item->extension_id); ?>">						<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_DETAILS', $item->name); ?></a>					<p>					<?php if ($this->preview && $item->client_id == '0') : ?>						<a href="<?php echo JURI::root().'index.php?tp=1&template='.$item->element; ?>" target="_blank">							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_PREVIEW'); ?></a>					<?php elseif ($item->client_id == '1') : ?>						<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_ADMIN'); ?>					<?php else: ?>						<span class="hasTip" title="<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?>::<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_DESC'); ?>">							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?></span>					<?php endif; ?>					</p>				</td>				<td class="center">					<?php echo $item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>				</td>				<td class="center">					<?php echo $this->escape($item->xmldata->get('version')); ?>				</td>				<td class="center">					<?php echo $this->escape($item->xmldata->get('creationDate')); ?>				</td>				<td>					<?php if ($author = $item->xmldata->get('author')) : ?>						<p><?php echo $this->escape($author); ?></p>					<?php else : ?>						&mdash;					<?php endif; ?>					<?php if ($email = $item->xmldata->get('authorEmail')) : ?>						<p><?php echo $this->escape($email); ?></p>					<?php endif; ?>					<?php if ($url = $item->xmldata->get('authorUrl')) : ?>						<p><a href="<?php echo $this->escape($url); ?>">							<?php echo $this->escape($url); ?></a></p>					<?php endif; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a redirect link. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectViewLink extends JViewLegacy{	protected $item;	protected $form;	protected $state;	/**	 * Display the view	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$isNew		= ($this->item->id == 0);		$canDo		= RedirectHelper::getActions();		JToolbarHelper::title(JText::_('COM_REDIRECT_MANAGER_LINK'), 'redirect');		// If not checked out, can save the item.		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('link.apply');			JToolbarHelper::save('link.save');		}		// This component does not support Save as Copy due to uniqueness checks.		// While it can be done, it causes too much confusion if the user does		// not change the Old URL.		if ($canDo->get('core.edit') && $canDo->get('core.create'))		{			JToolbarHelper::save2new('link.save2new');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('link.cancel');		}		else		{			JToolbarHelper::cancel('link.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::help('JHELP_COMPONENTS_REDIRECT_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsViewTag extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form  = $this->get('Form');		$this->item  = $this->get('Item');		$this->state = $this->get('State');		$this->canDo = TagsHelper::getActions($this->state->get('tags.component'));		$input = JFactory::getApplication()->input;		// Check for errors.		if (count($errors = $this->get('Errors'))) {			JError::raiseError(500, implode("\n", $errors));			return false;		}		$input->set('hidemainmenu', true);		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since  3.1	 */	protected function addToolbar()	{		$input      = JFactory::getApplication()->input;		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Need to load the menu language file as mod_menu hasn't been loaded yet.		$lang = JFactory::getLanguage();			$lang->load('com_tags', JPATH_BASE, null, false, false)		||	$lang->load('com_tags', JPATH_ADMINISTRATOR.'/components/com_tags', null, false, false)		||	$lang->load('com_tags', JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load('com_tags', JPATH_ADMINISTRATOR.'/components/com_tags', $lang->getDefault(), false, false);		// Load the tags helper.		require_once JPATH_COMPONENT.'/helpers/tags.php';		// Get the results for each action.		$canDo = TagsHelper::getActions('com_tags', $this->item->id);		$title = JText::_('COM_TAGS_BASE_'.($isNew?'ADD':'EDIT').'_TITLE');		// Prepare the toolbar.		JToolbarHelper::title($title, 'tag-'.($isNew?'add':'edit').($isNew?'add':'edit'));		// For new records, check the create permission.		if ($isNew)		{			JToolbarHelper::apply('tag.apply');			JToolbarHelper::save('tag.save');			JToolbarHelper::save2new('tag.save2new');		}		// If not checked out, can save the item.		elseif (!$checkedOut && ($canDo->get('core.edit') || ($canDo->get('core.edit.own') && $this->item->created_user_id == $userId))) {			JToolbarHelper::apply('tag.apply');			JToolbarHelper::save('tag.save');			if ($canDo->get('core.create')) {				JToolbarHelper::save2new('tag.save2new');			}		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create')) {			JToolbarHelper::save2copy('tag.save2copy');		}		if (empty($this->item->id))  {			JToolbarHelper::cancel('tag.cancel');		}		else {			JToolbarHelper::cancel('tag.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::help('JHELP_COMPONENTS_TAGS_MANAGER_EDIT');		JToolbarHelper::divider();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extension table * Replaces plugins table * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableExtension extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__extensions', 'extension_id', $db);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True if the object is ok	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// Check for valid name		if (trim($this->name) == '' || trim($this->element) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MUSTCONTAIN_A_TITLE_EXTENSION'));			return false;		}		return true;	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 * to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['control']) && is_array($array['control']))		{			$registry = new JRegistry;			$registry->loadArray($array['control']);			$array['control'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Method to create and execute a SELECT WHERE query.	 *	 * @param   array  $options  Array of options	 *	 * @return  string  The database query result	 *	 * @since   11.1	 */	public function find($options = array())	{		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		foreach ($options as $col => $val)		{			$query->where($col . ' = ' . $this->_db->quote($val));		}		$query->select($this->_db->quoteName('extension_id'))			->from($this->_db->quoteName('#__extensions'));		$this->_db->setQuery($query);		return $this->_db->loadResult();	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not	 *                            set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k . '=' . implode(' OR ' . $k . '=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) $userId . ')';		}		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		// Update the publishing state for rows with the given primary keys.		$query->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('enabled') . ' = ' . (int) $state)			->where('(' . $where . ')' . $checkin);		$this->_db->setQuery($query);		$this->_db->execute();		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->enabled = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Usergroup table class. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableUsergroup extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__usergroups', 'id', $db);	}	/**	 * Method to check the current record to save	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		// Validate the title.		if ((trim($this->title)) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_USERGROUP_TITLE'));			return false;		}		// Check for a duplicate parent_id, title.		// There is a unique index on the (parent_id, title) field in the table.		$db = $this->_db;		$query = $db->getQuery(true)			->select('COUNT(title)')			->from($this->_tbl)			->where('title = ' . $db->quote(trim($this->title)))			->where('parent_id = ' . (int) $this->parent_id)			->where('id <> ' . (int) $this->id);		$db->setQuery($query);		if ($db->loadResult() > 0)		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_USERGROUP_TITLE_EXISTS'));			return false;		}		return true;	}	/**	 * Method to recursively rebuild the nested set tree.	 *	 * @param   integer  $parent_id  The root of the tree to rebuild.	 * @param   integer  $left       The left id to start with in building the tree.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function rebuild($parent_id = 0, $left = 0)	{		// Get the database object		$db = $this->_db;		// Get all children of this node		$db->setQuery('SELECT id FROM ' . $this->_tbl . ' WHERE parent_id=' . (int) $parent_id . ' ORDER BY parent_id, title');		$children = $db->loadColumn();		// The right value of this node is the left value + 1		$right = $left + 1;		// Execute this function recursively over all children		for ($i = 0, $n = count($children); $i < $n; $i++)		{			// $right is the current right value, which is incremented on recursion return			$right = $this->rebuild($children[$i], $right);			// If there is an update failure, return false to break out of the recursion			if ($right === false)			{				return false;			}		}		// We've got the left value, and now that we've processed		// the children of this node we also know the right value		$db->setQuery('UPDATE ' . $this->_tbl . ' SET lft=' . (int) $left . ', rgt=' . (int) $right . ' WHERE id=' . (int) $parent_id);		// If there is an update failure, return false to break out of the recursion		if (!$db->execute())		{			return false;		}		// Return the right value of this node + 1		return $right + 1;	}	/**	 * Inserts a new row if id is zero or updates an existing row in the database table	 *	 * @param   boolean  $updateNulls  If false, null object variables are not updated	 *	 * @return  boolean  True if successful, false otherwise and an internal error message is set	 *	 * @since   11.1	 */	public function store($updateNulls = false)	{		if ($result = parent::store($updateNulls))		{			// Rebuild the nested set tree.			$this->rebuild();		}		return $result;	}	/**	 * Delete this object and its dependencies	 *	 * @param   integer  $oid  The primary key of the user group to delete.	 *	 * @return  mixed  Boolean or Exception.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 * @throws  UnexpectedValueException on data error.	 */	public function delete($oid = null)	{		if ($oid)		{			$this->load($oid);		}		if ($this->id == 0)		{			throw new UnexpectedValueException('Global Category not found');		}		if ($this->parent_id == 0)		{			throw new UnexpectedValueException('Root categories cannot be deleted.');		}		if ($this->lft == 0 || $this->rgt == 0)		{			throw new UnexpectedValueException('Left-Right data inconsistency. Cannot delete usergroup.');		}		$db = $this->_db;		// Select the usergroup ID and its children		$query = $db->getQuery(true)			->select($db->quoteName('c.id'))			->from($db->quoteName($this->_tbl) . 'AS c')			->where($db->quoteName('c.lft') . ' >= ' . (int) $this->lft)			->where($db->quoteName('c.rgt') . ' <= ' . (int) $this->rgt);		$db->setQuery($query);		$ids = $db->loadColumn();		if (empty($ids))		{			throw new UnexpectedValueException('Left-Right data inconsistency. Cannot delete usergroup.');		}		// Delete the category dependencies		// @todo Remove all related threads, posts and subscriptions		// Delete the usergroup and its children		$query->clear()			->delete($db->quoteName($this->_tbl))			->where($db->quoteName('id') . ' IN (' . implode(',', $ids) . ')');		$db->setQuery($query);		$db->execute();		// Delete the usergroup in view levels		$replace = array();		foreach ($ids as $id)		{			$replace[] = ',' . $db->quote("[$id,") . ',' . $db->quote("[") . ')';			$replace[] = ',' . $db->quote(",$id,") . ',' . $db->quote(",") . ')';			$replace[] = ',' . $db->quote(",$id]") . ',' . $db->quote("]") . ')';			$replace[] = ',' . $db->quote("[$id]") . ',' . $db->quote("[]") . ')';		}		// SQLSsrv change. Alternative for regexp		$query->clear()			->select('id, rules')			->from('#__viewlevels');		$db->setQuery($query);		$rules = $db->loadObjectList();		$match_ids = array();		foreach ($rules as $rule)		{			foreach ($ids as $id)			{				if (strstr($rule->rules, '[' . $id) || strstr($rule->rules, ',' . $id) || strstr($rule->rules, $id . ']'))				{					$match_ids[] = $rule->id;				}			}		}		if (!empty($match_ids))		{			$query = $db->getQuery(true)				->set('rules=' . str_repeat('replace(', 4 * count($ids)) . 'rules' . implode('', $replace))				->update('#__viewlevels')				->where('id IN (' . implode(',', $match_ids) . ')');			$db->setQuery($query);			$db->execute();		}		// Delete the user to usergroup mappings for the group(s) from the database.		$query->clear()			->delete($db->quoteName('#__user_usergroup_map'))			->where($db->quoteName('group_id') . ' IN (' . implode(',', $ids) . ')');		$db->setQuery($query);		$db->execute();		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JMenu class * * @package     Joomla.Libraries * @subpackage  Menu * @since       1.5 */class JMenuSite extends JMenu{	/**	 * Loads the entire menu table into memory.	 *	 * @return  array	 */	public function load()	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('m.id, m.menutype, m.title, m.alias, m.note, m.path AS route, m.link, m.type, m.level, m.language')			->select($db->quoteName('m.browserNav') . ', m.access, m.params, m.home, m.img, m.template_style_id, m.component_id, m.parent_id')			->select('e.element as component')			->from('#__menu AS m')			->join('LEFT', '#__extensions AS e ON m.component_id = e.extension_id')			->where('m.published = 1')			->where('m.parent_id > 0')			->where('m.client_id = 0')			->order('m.lft');		// Set the query		$db->setQuery($query);		try		{			$this->_items = $db->loadObjectList('id');		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, JText::sprintf('JERROR_LOADING_MENUS', $e->getMessage()));			return false;		}		foreach ($this->_items as &$item)		{			// Get parent information.			$parent_tree = array();			if (isset($this->_items[$item->parent_id]))			{				$parent_tree  = $this->_items[$item->parent_id]->tree;			}			// Create tree.			$parent_tree[] = $item->id;			$item->tree = $parent_tree;			// Create the query array.			$url = str_replace('index.php?', '', $item->link);			$url = str_replace('&amp;', '&', $url);			parse_str($url, $item->query);		}	}	/**	 * Gets menu items by attribute	 *	 * @param   string   $attributes  The field name	 * @param   string   $values      The value of the field	 * @param   boolean  $firstonly   If true, only returns the first item found	 *	 * @return  array	 */	public function getItems($attributes, $values, $firstonly = false)	{		$attributes = (array) $attributes;		$values 	= (array) $values;		$app		= JApplication::getInstance('site');		if ($app->isSite())		{			// Filter by language if not set			if (($key = array_search('language', $attributes)) === false)			{				if (JLanguageMultilang::isEnabled())				{					$attributes[] 	= 'language';					$values[] 		= array(JFactory::getLanguage()->getTag(), '*');				}			}			elseif ($values[$key] === null)			{				unset($attributes[$key]);				unset($values[$key]);			}			// Filter by access level if not set			if (($key = array_search('access', $attributes)) === false)			{				$attributes[] = 'access';				$values[] = JFactory::getUser()->getAuthorisedViewLevels();			}			elseif ($values[$key] === null)			{				unset($attributes[$key]);				unset($values[$key]);			}		}		// Reset arrays or we get a notice if some values were unset		$attributes = array_values($attributes);		$values = array_values($values);		return parent::getItems($attributes, $values, $firstonly);	}	/**	 * Get menu item by id	 *	 * @param   string  $language  The language code.	 *	 * @return  object  The item object	 *	 * @since   1.5	 */	public function getDefault($language = '*')	{		if (array_key_exists($language, $this->_default) && JApplication::getInstance('site')->getLanguageFilter())		{			return $this->_items[$this->_default[$language]];		}		elseif (array_key_exists('*', $this->_default))		{			return $this->_items[$this->_default['*']];		}		else		{			return 0;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component all tags view * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsViewTags extends JViewLegacy{	public function display($tpl = null)	{		$app      = JFactory::getApplication();		$document = JFactory::getDocument();		$document->link = JRoute::_('index.php?option=com_tags&view=tags');		$app->input->set('limit', $app->getCfg('feed_limit'));		$params = $app->getParams();		$siteEmail = $app->getCfg('mailfrom');		$fromName  = $app->getCfg('fromname');		$feedEmail = $app->getCfg('feed_email', 'author');		$document->editor = $fromName;		if ($feedEmail != "none")		{			$document->editorEmail = $siteEmail;		}		// Get some data from the model		$items    = $this->get('Items');		$tag = $this->get('Item');		foreach ($items as $item)		{			// Strip HTML from feed item title			$title = $this->escape($item->title);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// URL link to tagged item			// Change to new routing once it is merged			$link = JRoute::_($item->link);			// Strip HTML from feed item description text			$description = $item->description;			$author			= $item->created_by_alias ? $item->created_by_alias : $item->author;			$date = ($item->displayDate ? date('r', strtotime($item->displayDate)) : '');			// Load individual item creator class			$feeditem = new JFeedItem;			$feeditem->title       = $title;			$feeditem->link        = '/index.php?option=com_tags&view=tag&id=' . (int) $item->id;			$feeditem->description = $description;			$feeditem->date        = $date;			$feeditem->category    = 'All Tags';			$feeditem->author      = $author;			if ($feedEmail == 'site')			{				$item->authorEmail = $siteEmail;			}			elseif ($feedEmail === 'author')			{				$item->authorEmail = $row->author_email;			}			// Loads item info into RSS array			$document->addItem($feeditem);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Adapter Class * Retains common adapter pattern functions * Class harvested from joomla.installer.installer * * @package     Joomla.Platform * @subpackage  Base * @since       11.1 */class JAdapter extends JObject{	/**	 * Associative array of adapters	 *	 * @var    array	 * @since  11.1	 */	protected $_adapters = array();	/**	 * Adapter Folder	 * @var    string	 * @since  11.1	 */	protected $_adapterfolder = 'adapters';	/**	 * @var    string	Adapter Class Prefix	 * @since  11.1	 */	protected $_classprefix = 'J';	/**	 * Base Path for the adapter instance	 *	 * @var    string	 * @since  11.1	 */	protected $_basepath = null;	/**	 * Database Connector Object	 *	 * @var    JDatabaseDriver	 * @since  11.1	 */	protected $_db;	/**	 * Constructor	 *	 * @param   string  $basepath       Base Path of the adapters	 * @param   string  $classprefix    Class prefix of adapters	 * @param   string  $adapterfolder  Name of folder to append to base path	 *	 * @since   11.1	 */	public function __construct($basepath, $classprefix = null, $adapterfolder = null)	{		$this->_basepath = $basepath;		$this->_classprefix = $classprefix ? $classprefix : 'J';		$this->_adapterfolder = $adapterfolder ? $adapterfolder : 'adapters';		$this->_db = JFactory::getDbo();	}	/**	 * Get the database connector object	 *	 * @return  JDatabaseDriver  Database connector object	 *	 * @since   11.1	 */	public function getDBO()	{		return $this->_db;	}	/**	 * Set an adapter by name	 *	 * @param   string  $name      Adapter name	 * @param   object  &$adapter  Adapter object	 * @param   array   $options   Adapter options	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 */	public function setAdapter($name, &$adapter = null, $options = array())	{		if (!is_object($adapter))		{			$fullpath = $this->_basepath . '/' . $this->_adapterfolder . '/' . strtolower($name) . '.php';			if (!file_exists($fullpath))			{				return false;			}			// Try to load the adapter object			require_once $fullpath;			$class = $this->_classprefix . ucfirst($name);			if (!class_exists($class))			{				return false;			}			$adapter = new $class($this, $this->_db, $options);		}		$this->_adapters[$name] = &$adapter;		return true;	}	/**	 * Return an adapter.	 *	 * @param   string  $name     Name of adapter to return	 * @param   array   $options  Adapter options	 *	 * @return  object  Adapter of type 'name' or false	 *	 * @since   11.1	 */	public function getAdapter($name, $options = array())	{		if (!array_key_exists($name, $this->_adapters))		{			if (!$this->setAdapter($name, $options))			{				$false = false;				return $false;			}		}		return $this->_adapters[$name];	}	/**	 * Loads all adapters.	 *	 * @param   array  $options  Adapter options	 *	 * @return  void	 *	 * @since   11.1	 */	public function loadAllAdapters($options = array())	{		$files = new DirectoryIterator($this->_basepath . '/' . $this->_adapterfolder);		foreach ($files as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Try to load the adapter object			require_once $this->_basepath . '/' . $this->_adapterfolder . '/' . $fileName;			// Derive the class name from the filename.			$name = str_ireplace('.php', '', ucfirst(trim($fileName)));			$class = $this->_classprefix . ucfirst($name);			if (!class_exists($class))			{				// Skip to next one				continue;			}			$adapter = new $class($this, $this->_db, $options);			$this->_adapters[$name] = clone $adapter;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_SITE_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('site') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul class="list-striped list-condensed"><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :		if (!isset($this->children[$this->category->id][$id + 1]))		{			$class = ' class="last"';		}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<h4 class="item-title">				<a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($child->id)); ?>">				<?php echo $this->escape($child->title); ?>				</a>				<?php if ($this->params->get('show_cat_items') == 1) :?>					<span class="badge badge-info pull-right" title="<?php echo JText::_('COM_CONTACT_CAT_NUM'); ?>"><?php echo $child->numitems; ?></span>				<?php endif; ?>			</h4>			<?php if ($this->params->get('show_subcat_desc') == 1) : ?>				<?php if ($child->description) : ?>					<small class="category-desc">						<?php echo JHtml::_('content.prepare', $child->description, '', 'com_contact.category'); ?>					</small>				<?php endif; ?>			<?php endif; ?>			<?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * An editarea field for content creation * * @package     Joomla.Libraries * @subpackage  Form * @see         JEditor * @since       1.6 */class JFormFieldEditor extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'Editor';	/**	 * The JEditor object.	 *	 * @var    JEditor	 * @since  1.6	 */	protected $editor;	/**	 * Method to get the field input markup for the editor area	 *	 * @return  string  The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		$rows        = (int) $this->element['rows'];		$cols        = (int) $this->element['cols'];		$height      = ((string) $this->element['height']) ? (string) $this->element['height'] : '250';		$width       = ((string) $this->element['width']) ? (string) $this->element['width'] : '100%';		$assetField  = $this->element['asset_field'] ? (string) $this->element['asset_field'] : 'asset_id';		$authorField = $this->element['created_by_field'] ? (string) $this->element['created_by_field'] : 'created_by';		$asset       = $this->form->getValue($assetField) ? $this->form->getValue($assetField) : (string) $this->element['asset_id'];		// Build the buttons array.		$buttons = (string) $this->element['buttons'];		if ($buttons == 'true' || $buttons == 'yes' || $buttons == '1')		{			$buttons = true;		}		elseif ($buttons == 'false' || $buttons == 'no' || $buttons == '0')		{			$buttons = false;		}		else		{			$buttons = explode(',', $buttons);		}		$hide = ((string) $this->element['hide']) ? explode(',', (string) $this->element['hide']) : array();		// Get an editor object.		$editor = $this->getEditor();		return $editor			->display(			$this->name, htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8'), $width, $height, $cols, $rows,			$buttons ? (is_array($buttons) ? array_merge($buttons, $hide) : $hide) : false, $this->id, $asset,			$this->form->getValue($authorField)		);	}	/**	 * Method to get a JEditor object based on the form field.	 *	 * @return  JEditor  The JEditor object.	 *	 * @since   1.6	 */	protected function getEditor()	{		// Only create the editor if it is not already created.		if (empty($this->editor))		{			$editor = null;			// Get the editor type attribute. Can be in the form of: editor="desired|alternative".			$type = trim((string) $this->element['editor']);			if ($type)			{				// Get the list of editor types.				$types = explode('|', $type);				// Get the database object.				$db = JFactory::getDbo();				// Iterate over teh types looking for an existing editor.				foreach ($types as $element)				{					// Build the query.					$query = $db->getQuery(true)						->select('element')						->from('#__extensions')						->where('element = ' . $db->quote($element))						->where('folder = ' . $db->quote('editors'))						->where('enabled = 1');					// Check of the editor exists.					$db->setQuery($query, 0, 1);					$editor = $db->loadResult();					// If an editor was found stop looking.					if ($editor)					{						break;					}				}			}			// Create the JEditor instance based on the given editor.			if (is_null($editor))			{				$conf = JFactory::getConfig();				$editor = $conf->get('editor');			}			$this->editor = JEditor::getInstance($editor);		}		return $this->editor;	}	/**	 * Method to get the JEditor output for an onSave event.	 *	 * @return  string  The JEditor object output.	 *	 * @since   1.6	 */	public function save()	{		return $this->getEditor()->save($this->id);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the WebLinks component * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewWeblink extends JViewLegacy{	protected $state;	protected $item;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$item		= $this->get('Item');		$category	= $this->get('Category');		if ($this->getLayout() == 'edit')		{			$this->_displayEdit($tpl);			return;		}		if ($item->url)		{			// redirects to url if matching id found			$app->redirect($item->url);		}		else		{			//TODO create proper error handling			$app->redirect(JRoute::_('index.php'), JText::_('COM_WEBLINKS_ERROR_WEBLINK_NOT_FOUND'), 'notice');		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class working with users * * @package     Joomla.Platform * @subpackage  HTML * @since       11.4 */abstract class JHtmlUser{	/**	 * Displays a list of user groups.	 *	 * @param   boolean  $includeSuperAdmin  true to include super admin groups, false to exclude them	 *	 * @return  array  An array containing a list of user groups.	 *	 * @since   11.4	 */	public static function groups($includeSuperAdmin = false)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level')			->from($db->quoteName('#__usergroups') . ' AS a')			->join('LEFT', $db->quoteName('#__usergroups') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		for ($i = 0, $n = count($options); $i < $n; $i++)		{			$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;			$groups[] = JHtml::_('select.option', $options[$i]->value, $options[$i]->text);		}		// Exclude super admin groups if requested		if (!$includeSuperAdmin)		{			$filteredGroups = array();			foreach ($groups as $group)			{				if (!JAccess::checkGroup($group->value, 'core.admin'))				{					$filteredGroups[] = $group;				}			}			$groups = $filteredGroups;		}		return $groups;	}	/**	 * Get a list of users.	 *	 * @return  string	 *	 * @since   11.4	 */	public static function userlist()	{		// Get the database object and a new query object.		$db    = JFactory::getDbo();		$query = $db->getQuery(true);		// Build the query.		$query->select('a.id AS value, a.name AS text')			->from('#__users AS a')			->where('a.block = 0')			->order('a.name');		// Set the query and load the options.		$db->setQuery($query);		$items = $db->loadObjectList();		return $items;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocumentJSON class, provides an easy interface to parse and display JSON output * * @package     Joomla.Platform * @subpackage  Document * @see         http://www.json.org/ * @since       11.1 */class JDocumentJSON extends JDocument{	/**	 * Document name	 *	 * @var    string	 * @since  11.1	 */	protected $_name = 'joomla';	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since  11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'application/json';		// Set document type		$this->_type = 'json';	}	/**	 * Render the document.	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since  11.1	 */	public function render($cache = false, $params = array())	{		JResponse::allowCache(false);		JResponse::setHeader('Content-disposition', 'attachment; filename="' . $this->getName() . '.json"', true);		parent::render();		return $this->getBuffer();	}	/**	 * Returns the document name	 *	 * @return  string	 *	 * @since  11.1	 */	public function getName()	{		return $this->_name;	}	/**	 * Sets the document name	 *	 * @param   string  $name  Document name	 *	 * @return  JDocumentJSON instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setName($name = 'joomla')	{		$this->_name = $name;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags helper. * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsHelper{	/**	 * Configure the Submenu links.	 *	 * @param   string  The extension.	 *	 * @return  void	 *	 * @since   3.1	 */	public static function addSubmenu($extension)	{		$parts = explode('.', $extension);		$component = $parts[0];		if (count($parts) > 1)		{			$section = $parts[1];		}		// Try to find the component helper.		$file = JPath::clean(JPATH_ADMINISTRATOR . '/components/com_tags/helpers/tags.php');		if (file_exists($file))		{			require_once $file;			$cName = 'TagsHelper';			if (class_exists($cName))			{				if (is_callable(array($cName, 'addSubmenu')))				{					$lang = JFactory::getLanguage();					// loading language file from the administrator/language directory then					// loading language file from the administrator/components/*extension*/language directory						$lang->load($component, JPATH_BASE, null, false, false)					||	$lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), null, false, false)					||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)					||	$lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), $lang->getDefault(), false, false);				}			}		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since   3.1	 */	public static function getActions()	{		$user   = JFactory::getUser();		$result = new JObject;		$assetName = 'com_tags';		$level     = 'component';		$actions   = JAccess::getActions('com_tags', $level);		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides a grouped list select field. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldGroupedList extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'GroupedList';	/**	 * Method to get the field option groups.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	protected function getGroups()	{		$groups = array();		$label = 0;		foreach ($this->element->children() as $element)		{			switch ($element->getName())			{				// The element is an <option />				case 'option':					// Initialize the group if necessary.					if (!isset($groups[$label]))					{						$groups[$label] = array();					}					// Create a new option object based on the <option /> element.					$tmp = JHtml::_(						'select.option', ($element['value']) ? (string) $element['value'] : trim((string) $element),						JText::alt(trim((string) $element), preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)), 'value', 'text',						((string) $element['disabled'] == 'true')					);					// Set some option attributes.					$tmp->class = (string) $element['class'];					// Set some JavaScript option attributes.					$tmp->onclick = (string) $element['onclick'];					// Add the option.					$groups[$label][] = $tmp;					break;				// The element is a <group />				case 'group':					// Get the group label.					if ($groupLabel = (string) $element['label'])					{						$label = JText::_($groupLabel);					}					// Initialize the group if necessary.					if (!isset($groups[$label]))					{						$groups[$label] = array();					}					// Iterate through the children and build an array of options.					foreach ($element->children() as $option)					{						// Only add <option /> elements.						if ($option->getName() != 'option')						{							continue;						}						// Create a new option object based on the <option /> element.						$tmp = JHtml::_(							'select.option', ($option['value']) ? (string) $option['value'] : JText::_(trim((string) $option)),							JText::_(trim((string) $option)), 'value', 'text', ((string) $option['disabled'] == 'true')						);						// Set some option attributes.						$tmp->class = (string) $option['class'];						// Set some JavaScript option attributes.						$tmp->onclick = (string) $option['onclick'];						// Add the option.						$groups[$label][] = $tmp;					}					if ($groupLabel)					{						$label = count($groups);					}					break;				// Unknown element type.				default:					throw new UnexpectedValueException(sprintf('Unsupported element %s in JFormFieldGroupedList', $element->getName()), 500);			}		}		reset($groups);		return $groups;	}	/**	 * Method to get the field input markup fora grouped list.	 * Multiselect is enabled by using the multiple attribute.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->multiple ? ' multiple="multiple"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Get the field groups.		$groups = (array) $this->getGroups();		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_(				'select.groupedlist', $groups, null,				array(					'list.attr' => $attr, 'id' => $this->id, 'list.select' => $this->value, 'group.items' => null, 'option.key.toHtml' => false,					'option.text.toHtml' => false				)			);			$html[] = '<input type="hidden" name="' . $this->name . '" value="' . $this->value . '"/>';		}		// Create a regular list.		else		{			$html[] = JHtml::_(				'select.groupedlist', $groups, $this->name,				array(					'list.attr' => $attr, 'id' => $this->id, 'list.select' => $this->value, 'group.items' => null, 'option.key.toHtml' => false,					'option.text.toHtml' => false				)			);		}		return implode($html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');JHtml::_('formbehavior.chosen', 'select');$canDo = TemplatesHelper::getActions();$input = JFactory::getApplication()->input;?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=template'); ?>" method="post" name="adminForm" id="adminForm" class="form-horizontal">		<fieldset id="template-manager">			<div class="pull-left">				<?php echo JHtml::_('templates.thumb', $this->template->element, $this->template->client_id); ?>			</div>			<h2><?php echo ucfirst($this->template->element); ?></h2>			<?php $client = JApplicationHelper::getClientInfo($this->template->client_id); ?>			<p><?php $this->template->xmldata = TemplatesHelper::parseXMLTemplateFile($client->path, $this->template->element);?></p>			<p><?php  echo JText::_($this->template->xmldata->description); ?></p>			<div class="clearfix"></div>			<hr />			<div class="row-fluid">				<div class="span6">					<div class="page-header">						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_MASTER_FILES');?>					</div>					<ul class="nav nav-tabs nav-stacked">						<li>							<?php $id = $this->files['main']['index']->id; ?>							<?php if ($canDo->get('core.edit')) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">								<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_MAIN');?>							<?php if ($canDo->get('core.edit')) : ?>								</a>							<?php endif; ?>						</li>						<?php if ($this->files['main']['error']->exists) : ?>						<li>							<?php $id = $this->files['main']['error']->id; ?>							<?php if ($canDo->get('core.edit')) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">									<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_ERROR');?>							<?php if ($canDo->get('core.edit')) : ?>								</a>							<?php endif; ?>						</li>						<?php endif; ?>						<?php if ($this->files['main']['offline']->exists) : ?>							<li>								<?php $id = $this->files['main']['offline']->id; ?>								<?php if ($canDo->get('core.edit')) : ?>									<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">										<i class="icon-edit"></i>								<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_OFFLINEVIEW');?>								<?php if ($canDo->get('core.edit')) : ?>									</a>								<?php endif; ?>							</li>						<?php endif; ?>						<?php if ($this->files['main']['print']->exists) : ?>						<li>							<?php $id = $this->files['main']['print']->id; ?>							<?php if ($canDo->get('core.edit')) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">									<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_PRINTVIEW');?>							<?php if ($canDo->get('core.edit')) : ?>								</a>							<?php endif; ?>						</li>						<?php endif; ?>					</ul>				</div>				<div class="span6">					<div class="page-header">						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_CSS');?>					</div>					<?php if (!empty($this->files['css'])) : ?>					<ul class="nav nav-tabs nav-stacked">						<?php foreach ($this->files['css'] as $file) : ?>						<li>							<?php if ($canDo->get('core.edit')) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$file->id);?>">								<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_EDIT_CSS', $file->name);?>							<?php if ($canDo->get('core.edit')) : ?>							</a>							<?php endif; ?>						</li>						<?php endforeach; ?>					</ul>					<?php endif; ?>				</div>			</div>			<!--<div>				<a href="#" class="modal">					<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_ADD_CSS');?></a>			</div>-->		</fieldset>		<input type="hidden" name="task" value="" /></form><form action="<?php echo JRoute::_('index.php?option=com_templates&task=template.copy&id=' . $input->getInt('id')); ?>"			method="post" name="adminForm" id="adminForm">	<div  id="collapseModal" class="modal hide fade">		<div class="modal-header">			<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>			<h3><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY');?></h3>		</div>		<div class="modal-body">			<div id="template-manager-css" class="form-horizontal">				<div class="control-group">					<label for="new_name" class="control-label hasTip" title="<?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_DESC'); ?>"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_LABEL')?></label>					<div class="controls">						<input class="input-xlarge" type="text" id="new_name" name="new_name"  />					</div>				</div>			</div>		</div>		<div class="modal-footer">			<a href="#" class="btn" data-dismiss="modal">Close</a>			<button class="btn btn-primary" type="submit"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY'); ?></button>		</div>	</div>	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$client			= $this->state->get('filter.client') == 'site' ? JText::_('JSITE') : JText::_('JADMINISTRATOR');$language		= $this->state->get('filter.language');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn		= $this->escape($this->state->get('list.direction')); ?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=overrides'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select fltrt">			<select name="filter_language_client" class="inputbox" onchange="this.form.submit()">				<?php echo JHtml::_('select.options', $this->languages, null, 'text', $this->state->get('filter.language_client')); ?>			</select>		</div>	</fieldset>	<div class="clr"></div>	<table class="adminlist">		<thead>			<tr>				<th width="1%">					<input type="checkbox" name="checkall-toggle" value="" onclick="Joomla.checkAll(this)" />				</th>				<th width="30%" class="left">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_KEY', 'key', $listDirn, $listOrder); ?>				</th>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_TEXT', 'text', $listDirn, $listOrder); ?>				</th>				<th class="nowrap">					<?php echo JText::_('COM_LANGUAGES_FIELD_LANG_TAG_LABEL'); ?>				</th>				<th>					<?php echo JText::_('JCLIENT'); ?>				</th>				<th class="right" width="20">					<?php echo JText::_('COM_LANGUAGES_HEADING_NUM'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="6">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php $canEdit = JFactory::getUser()->authorise('core.edit', 'com_languages');		$i = 0;		foreach ($this->items as $key => $text) : ?>			<tr class="row<?php echo $i % 2; ?>" id="overriderrow<?php echo $i; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $key); ?>				</td>				<td>					<?php if ($canEdit) : ?>						<a id="key[<?php	echo $this->escape($key); ?>]" href="<?php echo JRoute::_('index.php?option=com_languages&task=override.edit&id='.$key); ?>"><?php echo $this->escape($key); ?></a>					<?php else: ?>						<?php echo $this->escape($key); ?>					<?php endif; ?>				</td>				<td>					<span id="string[<?php	echo $this->escape($key); ?>]"><?php echo $this->escape($text); ?></span>				</td>				<td class="center">					<?php echo $language; ?>				</td>				<td class="center">					<?php echo $client; ?>				</td>				<td class="right">					<?php echo $this->pagination->getRowOffset($i); ?>				</td>			</tr>			<?php $i++;		endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');jimport('legacy.application.helper');/** * Database configuration model for the Joomla Core Installer. * * @package  Joomla.Installation * @since    3.1 */class InstallationModelDatabase extends JModelBase{	/**	 * The generated user ID	 *	 * @var    integer	 * @since  3.1	 */	protected static $userId = 0;	/**	 * Generates the user ID	 *	 * @return  integer  The user ID	 *	 * @since   3.1	 */	protected static function generateRandUserId()	{		$session = JFactory::getSession();		$randUserId = $session->get('randUserId');		if (empty($randUserId))		{			// Create the ID for the root user only once and store in session			$randUserId = mt_rand(1, 1000);			$session->set('randUserId', $randUserId);		}		return $randUserId;	}	/**	 * Resets the user ID	 *	 * @return  void	 *	 * @since   3.1	 */	public static function resetRandUserId()	{		self::$userId = 0;		$session = JFactory::getSession();		$session->set('randUserId', self::$userId);	}	/**	 * Retrieves the default user ID and sets it if necessary	 *	 * @return  integer  The user ID	 *	 * @since   3.1	 */	public static function getUserId()	{		if (!self::$userId)		{			self::$userId = self::generateRandUserId();		}		return self::$userId;	}	/**	 * Method to initialise the database	 *	 * @param   array  $options  The options to use for configuration	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function initialise($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Load the back-end language files so that the DB error messages work		$lang = JFactory::getLanguage();		$currentLang = $lang->getTag();		// Load the selected language		if (JLanguage::exists($currentLang, JPATH_ADMINISTRATOR))		{			$lang->load('joomla', JPATH_ADMINISTRATOR, $currentLang, true);		}		// Pre-load en-GB in case the chosen language files do not exist		else		{			$lang->load('joomla', JPATH_ADMINISTRATOR, 'en-GB', true);		}		// Ensure a database type was selected.		if (empty($options->db_type))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_INVALID_TYPE'), 'notice');			return false;		}		// Ensure that a hostname and user name were input.		if (empty($options->db_host) || empty($options->db_user))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_INVALID_DB_DETAILS'), 'notice');			return false;		}		// Ensure that a database name was input.		if (empty($options->db_name))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_EMPTY_NAME'), 'notice');			return false;		}		// Validate database table prefix.		if (!preg_match('#^[a-zA-Z]+[a-zA-Z0-9_]*$#', $options->db_prefix))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_PREFIX_INVALID_CHARS'), 'notice');			return false;		}		// Validate length of database table prefix.		if (strlen($options->db_prefix) > 15)		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_FIX_TOO_LONG'), 'notice');			return false;		}		// Validate length of database name.		if (strlen($options->db_name) > 64)		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_NAME_TOO_LONG'), 'notice');			return false;		}		// Get a database object.		try		{			return InstallationHelperDatabase::getDbo(				$options->db_type, $options->db_host, $options->db_user, $options->db_pass, $options->db_name, $options->db_prefix, $options->db_select			);		}		catch (RuntimeException $e)		{			$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_COULD_NOT_CONNECT', $e->getMessage()), 'notice');			return false;		}	}	/**	 * Method to create a new database.	 *	 * @param   array  $options  The configuration options	 *	 * @return    boolean    True on success.	 *	 * @since    3.1	 */	public function createDatabase($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Disable autoselect database before it's created		$tmpSelect = true;		if (isset($options['db_select']))		{			$tmpSelect = $options['db_select'];		}		$options['db_select'] = false;		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Check database version.		$type = $options->db_type;		try		{			$db_version = $db->getVersion();		}		catch (RuntimeException $e)		{			$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_COULD_NOT_CONNECT', $e->getMessage()), 'notice');			return false;		}		if (!$db->isMinimumVersion())		{			$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_INVALID_' . strtoupper($type) . '_VERSION', $db_version), 'notice');			return false;		}		if (($type == 'mysql') || ($type == 'mysqli'))		{			// @internal MySQL versions pre 5.1.6 forbid . / or \ or NULL			if ((preg_match('#[\\\/\.\0]#', $options->db_name)) && (!version_compare($db_version, '5.1.6', '>=')))			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_INVALID_NAME', $db_version), 'notice');				return false;			}		}		// @internal Check for spaces in beginning or end of name		if (strlen(trim($options->db_name)) <> strlen($options->db_name))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_NAME_INVALID_SPACES'), 'notice');			return false;		}		// @internal Check for asc(00) Null in name		if (strpos($options->db_name, chr(00)) !== false)		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_NAME_INVALID_CHAR'), 'notice');			return false;		}		// PostgreSQL database older than version 9.0.0 needs to run 'CREATE LANGUAGE' to create function.		if (($options->db_type == 'postgresql') && (version_compare($db_version, '9.0.0', '<')))		{			$db->setQuery("CREATE LANGUAGE plpgsql");			$db->execute();		}		// Get database's UTF support		$utfSupport = $db->hasUTFSupport();		// Try to select the database		try		{			$db->select($options->db_name);		}		catch (RuntimeException $e)		{			// If the database could not be selected, attempt to create it and then select it.			if ($this->createDB($db, $options, $utfSupport))			{				$db->select($options->db_name);			}			else			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_CREATE', $options->db_name), 'notice');				return false;			}		}		$options = (array) $options;		// Remove *_errors value		foreach ($options as $i => $option)		{			if (isset($i['1']) && $i['1'] == '*')			{				unset($options[$i]);				break;			}		}		$options = array_merge(array('db_created' => 1), $options);		// Restore autoselect value after database creation		$options['db_select'] = $tmpSelect;		$session = JFactory::getSession();		$session->set('setup.options', $options);		return true;	}	/**	 * Method to process the old database	 *	 * @param   array  $options  The options array	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function handleOldDatabase($options)	{		if (!isset($options['db_created']) || !$options['db_created'])		{			return $this->createDatabase($options);		}		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Set the character set to UTF-8 for pre-existing databases.		$this->setDatabaseCharset($db, $options->db_name);		// Should any old database tables be removed or backed up?		if ($options->db_old == 'remove')		{			// Attempt to delete the old database tables.			if (!$this->deleteDatabase($db, $options->db_prefix))			{				// Message queued by method, simply return				return false;			}		}		else		{			// If the database isn't being deleted, back it up.			if (!$this->backupDatabase($db, $options->db_prefix))			{				return false;			}		}		return true;	}	/**	 * Method to create the database tables	 *	 * @param   array  $options  The options array	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function createTables($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		if (!isset($options['db_created']) || !$options['db_created'])		{			return $this->createDatabase($options);		}		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Check database type.		$type = $options->db_type;		// Set the character set to UTF-8 for pre-existing databases.		$this->setDatabaseCharset($db, $options->db_name);		// Set the appropriate schema script based on UTF-8 support.		if ($type == 'mysqli' || $type == 'mysql')		{			$schema = 'sql/mysql/joomla.sql';		}		elseif ($type == 'sqlsrv' || $type == 'sqlazure')		{			$schema = 'sql/sqlazure/joomla.sql';		}		else		{			$schema = 'sql/' . $type . '/joomla.sql';		}		// Check if the schema is a valid file		if (!is_file($schema))		{			$app->enqueueMessage(JText::sprintf('INSTL_ERROR_DB', JText::_('INSTL_DATABASE_NO_SCHEMA')), 'notice');			return false;		}		// Attempt to import the database schema.		if (!$this->populateDatabase($db, $schema))		{			return false;		}		// Attempt to update the table #__schema.		$pathPart = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		if ($type == 'mysqli' || $type == 'mysql')		{			$pathPart .= 'mysql/';		}		elseif ($type == 'sqlsrv' || $type == 'sqlazure')		{			$pathPart .= 'sqlazure/';		}		else		{			$pathPart .= $type . '/';		}		$files = JFolder::files($pathPart, '\.sql$');		if (empty($files))		{			$app->enqueueMessage(JText::_('INSTL_ERROR_INITIALISE_SCHEMA'), 'notice');			return false;		}		$version = '';		foreach ($files as $file)		{			if (version_compare($version, JFile::stripExt($file)) < 0)			{				$version = JFile::stripExt($file);			}		}		$query = $db->getQuery(true)			->insert($db->quoteName('#__schemas'))			->columns(				array(					$db->quoteName('extension_id'),					$db->quoteName('version_id')				)			)			->values('700, ' . $db->quote($version));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$app->enqueueMessage($e->getMessage(), 'notice');			return false;		}		// Attempt to refresh manifest caches		$query = $db->getQuery(true)			->select('*')			->from('#__extensions');		$db->setQuery($query);		$return = true;		try		{			$extensions = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$app->enqueueMessage($e->getMessage(), 'notice');			$return = false;		}		JFactory::$database = $db;		$installer = JInstaller::getInstance();		foreach ($extensions as $extension)		{			if (!$installer->refreshManifestCache($extension->extension_id))			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_COULD_NOT_REFRESH_MANIFEST_CACHE', $extension->name), 'notice');				return false;			}		}		// Load the localise.sql for translating the data in joomla.sql		if ($type == 'mysqli' || $type == 'mysql')		{			$dblocalise = 'sql/mysql/localise.sql';		}		elseif ($type == 'sqlsrv' || $type == 'sqlazure')		{			$dblocalise = 'sql/sqlazure/localise.sql';		}		else		{			$dblocalise = 'sql/' . $type . '/localise.sql';		}		if (is_file($dblocalise))		{			if (!$this->populateDatabase($db, $dblocalise))			{				return false;			}		}		// Handle default backend language setting. This feature is available for localized versions of Joomla.		$app = JFactory::getApplication();		$languages = $app->getLocaliseAdmin($db);		if (in_array($options->language, $languages['admin']) || in_array($options->language, $languages['site']))		{			// Build the language parameters for the language manager.			$params = array();			// Set default administrator/site language to sample data values:			$params['administrator'] = 'en-GB';			$params['site'] = 'en-GB';			if (in_array($options->language, $languages['admin']))			{				$params['administrator'] = $options->language;			}			if (in_array($options->language, $languages['site']))			{				$params['site'] = $options->language;			}			$params = json_encode($params);			// Update the language settings in the language manager.			$query = $db->getQuery(true)				->update($db->quoteName('#__extensions'))				->set($db->quoteName('params') . ' = ' . $db->quote($params))				->where($db->quoteName('element') . ' = ' . $db->quote('com_languages'));			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$app->enqueueMessage($e->getMessage(), 'notice');				$return = false;			}		}		return $return;	}	/**	 * Method to install the sample data	 *	 * @param   array  $options  The options array	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function installSampleData($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		if (!isset($options['db_created']) || !$options['db_created'])		{			return $this->createDatabase($options);		}		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Build the path to the sample data file.		$type = $options->db_type;		if ($type == 'mysqli')		{			$type = 'mysql';		}		elseif ($type == 'sqlsrv')		{			$type = 'sqlazure';		}		$data = JPATH_INSTALLATION . '/sql/' . $type . '/' . $options->sample_file;		// Attempt to import the database schema if one is chosen.		if ($options->sample_file != '')		{			if (!file_exists($data))			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_FILE_DOES_NOT_EXIST', $data), 'notice');				return false;			}			elseif (!$this->populateDatabase($db, $data))			{				return false;			}			$this->postInstallSampleData($db);		}		return true;	}	/**	 * Method to update the user id of the sample data content to the new rand user id	 *	 * @param   JDatabaseDriver  $db  Database connector object $db*	 *	 * @return  void	 *	 * @since   3.1	 */	protected function postInstallSampleData($db)	{		// Create the ID for the root user		$userId = self::getUserId();		// Update all created_by field of the tables with the random user id		// categories (created_user_id), contact_details, content, newsfeeds, weblinks		$updates_array = array(			'categories' => 'created_user_id',			'contact_details' => 'created_by',			'content' => 'created_by',			'newsfeeds' => 'created_by',			'weblinks' => 'created_by',		);		foreach ($updates_array as $table => $field)		{			$db->setQuery(				'UPDATE ' . $db->quoteName('#__' . $table) .					' SET ' . $db->quoteName($field) . ' = ' . $db->quote($userId)			);			$db->execute();		}	}	/**	 * Method to backup all tables in a database with a given prefix.	 *	 * @param   JDatabaseDriver  $db      JDatabaseDriver object.	 * @param   string           $prefix  Database table prefix.	 *	 * @return  boolean  True on success.	 *	 * @since    3.1	 */	public function backupDatabase($db, $prefix)	{		$return = true;		$backup = 'bak_' . $prefix;		// Get the tables in the database.		$tables = $db->getTableList();		if ($tables)		{			foreach ($tables as $table)			{				// If the table uses the given prefix, back it up.				if (strpos($table, $prefix) === 0)				{					// Backup table name.					$backupTable = str_replace($prefix, $backup, $table);					// Drop the backup table.					try					{						$db->dropTable($backupTable, true);					}					catch (RuntimeException $e)					{						JFactory::getApplication()->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_BACKINGUP', $e->getMessage()), 'notice');						$return = false;					}					// Rename the current table to the backup table.					try					{						$db->renameTable($table, $backupTable, $backup, $prefix);					}					catch (RuntimeException $e)					{						JFactory::getApplication()->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_BACKINGUP', $e->getMessage()), 'notice');						$return = false;					}				}			}		}		return $return;	}	/**	 * Method to create a new database.	 *	 * @param   JDatabaseDriver  $db       JDatabase object.	 * @param   JObject          $options  JObject coming from "initialise" function to pass user	 *                                     and database name to database driver.	 * @param   boolean          $utf      True if the database supports the UTF-8 character set.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function createDB($db, $options, $utf)	{		// Build the create database query.		try		{			// Run the create database query.			$db->createDatabase($options, $utf);		}		catch (RuntimeException $e)		{			// If an error occurred return false.			return false;		}		return true;	}	/**	 * Method to delete all tables in a database with a given prefix.	 *	 * @param   JDatabaseDriver  $db      JDatabaseDriver object.	 * @param   string           $prefix  Database table prefix.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function deleteDatabase($db, $prefix)	{		$return = true;		// Get the tables in the database.		$tables = $db->getTableList();		if ($tables)		{			foreach ($tables as $table)			{				// If the table uses the given prefix, drop it.				if (strpos($table, $prefix) === 0)				{					// Drop the table.					try					{						$db->dropTable($table);					}					catch (RuntimeException $e)					{						JFactory::getApplication()->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_DELETE', $e->getMessage()), 'notice');						$return = false;					}				}			}		}		return $return;	}	/**	 * Method to import a database schema from a file.	 *	 * @param   JDatabaseDriver  $db      JDatabase object.	 * @param   string           $schema  Path to the schema file.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function populateDatabase($db, $schema)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		$return = true;		// Get the contents of the schema file.		if (!($buffer = file_get_contents($schema)))		{			$app->enqueueMessage($db->getErrorMsg(), 'notice');			return false;		}		// Get an array of queries from the schema and process them.		$queries = $this->_splitQueries($buffer);		foreach ($queries as $query)		{			// Trim any whitespace.			$query = trim($query);			// If the query isn't empty and is not a MySQL or PostgreSQL comment, execute it.			if (!empty($query) && ($query{0} != '#') && ($query{0} != '-'))			{				// Execute the query.				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$app->enqueueMessage($e->getMessage(), 'notice');					$return = false;				}			}		}		return $return;	}	/**	 * Method to set the database character set to UTF-8.	 *	 * @param   JDatabaseDriver  $db    JDatabaseDriver object.	 * @param   string           $name  Name of the database to process.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function setDatabaseCharset($db, $name)	{		// Run the create database query.		$db->setQuery($db->getAlterDbCharacterSet($name));		try		{			$db->execute();		}		catch (RuntimeException $e)		{			return false;		}		return true;	}	/**	 * Method to split up queries from a schema file into an array.	 *	 * @param   string  $query  SQL schema.	 *	 * @return  array  Queries to perform.	 *	 * @since   3.1	 */	protected function _splitQueries($query)	{		$buffer = array();		$queries = array();		$in_string = false;		// Trim any whitespace.		$query = trim($query);		// Remove comment lines.		$query = preg_replace("/\n\#[^\n]*/", '', "\n" . $query);		// Remove PostgreSQL comment lines.		$query = preg_replace("/\n\--[^\n]*/", '', "\n" . $query);		// Find function		$funct = explode('CREATE OR REPLACE FUNCTION', $query);		// Save sql before function and parse it		$query = $funct[0];		// Parse the schema file to break up queries.		for ($i = 0; $i < strlen($query) - 1; $i++)		{			if ($query[$i] == ";" && !$in_string)			{				$queries[] = substr($query, 0, $i);				$query = substr($query, $i + 1);				$i = 0;			}			if ($in_string && ($query[$i] == $in_string) && $buffer[1] != "\\")			{				$in_string = false;			}			elseif (!$in_string && ($query[$i] == '"' || $query[$i] == "'") && (!isset ($buffer[0]) || $buffer[0] != "\\"))			{				$in_string = $query[$i];			}			if (isset ($buffer[1]))			{				$buffer[0] = $buffer[1];			}			$buffer[1] = $query[$i];		}		// If the is anything left over, add it to the queries.		if (!empty($query))		{			$queries[] = $query;		}		// Add function part as is		for ($f = 1; $f < count($funct); $f++)		{			$queries[] = 'CREATE OR REPLACE FUNCTION ' . $funct[$f];		}		return $queries;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Utility class for tags * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.1 */abstract class JHtmlTag{	/**	 * Cached array of the tag items.	 *	 * @var    array	 * @since  3.1	 */	protected static $items = array();	/**	 * Returns an array of tags.	 *	 * @param   array  $config  An array of configuration options. By default, only	 *                          published and unpublished categories are returned.	 *	 * @return  array	 *	 * @since   3.1	 */	public static function options($config = array('filter.published' => array(0, 1)))	{		$hash = md5(serialize($config));		if (!isset(self::$items[$hash]))		{			$config = (array) $config;			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id, a.title, a.level')				->from('#__tags AS a')				->where('a.parent_id > 0');			// Filter on the published state			if (isset($config['filter.published']))			{				if (is_numeric($config['filter.published']))				{					$query->where('a.published = ' . (int) $config['filter.published']);				}				elseif (is_array($config['filter.published']))				{					JArrayHelper::toInteger($config['filter.published']);					$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');				}			}			// Filter on the language			if (isset($config['filter.language']))			{				if (is_string($config['filter.language']))				{					$query->where('a.language = ' . $db->quote($config['filter.language']));				}				elseif (is_array($config['filter.language']))				{					foreach ($config['filter.language'] as &$language)					{						$language = $db->quote($language);					}					$query->where('a.language IN (' . implode(',', $config['filter.language']) . ')');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Assemble the list options.			self::$items[$hash] = array();			foreach ($items as &$item)			{				$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;				$item->title = str_repeat('- ', $repeat) . $item->title;				self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);			}		}		return self::$items[$hash];	}	/**	 * Returns an array of tags.	 *	 * @param   array  $config  An array of configuration options. By default, only published and unpublished tags are returned.	 *	 * @return  array  Tag data	 *	 * @since   3.1	 */	public static function tags($config = array('filter.published' => array(0, 1)))	{		$hash = md5(serialize($config));		$config = (array) $config;		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id, a.title, a.level, a.parent_id')			->from('#__tags AS a')			->where('a.parent_id > 0');		// Filter on the published state		if (isset($config['filter.published']))		{			if (is_numeric($config['filter.published']))			{				$query->where('a.published = ' . (int) $config['filter.published']);			}			elseif (is_array($config['filter.published']))			{				JArrayHelper::toInteger($config['filter.published']);				$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');			}		}		$query->order('a.lft');		$db->setQuery($query);		$items = $db->loadObjectList();		// Assemble the list options.		self::$items[$hash] = array();		foreach ($items as &$item)		{			$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;			$item->title = str_repeat('- ', $repeat) . $item->title;			self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);		}		return self::$items[$hash];	}	/**	 * This is just a proxy for the formbehavior.ajaxchosen method	 *	 * @param   string   $selector     DOM id of the tag field	 * @param   boolean  $allowCustom  Flag to allow custom values	 *	 * @return  void	 *	 * @since   3.1	 */	public static function ajaxfield($selector='#jform_tags', $allowCustom = true)	{		// Tags field ajax		$chosenAjaxSettings = new JRegistry(			array(				'selector'    => $selector,				'type'        => 'GET',				'url'         => JURI::root() . 'index.php?option=com_tags&task=tags.searchAjax',				'dataType'    => 'json',				'jsonTermKey' => 'like'			)		);		JHtml::_('formbehavior.ajaxchosen', $chosenAjaxSettings);		// Allow custom values ?		if ($allowCustom)		{			JFactory::getDocument()->addScriptDeclaration("				(function($){					$(document).ready(function () {						var customTagPrefix = '#new#';						// Method to add tags pressing enter						$('" . $selector . "_chzn input').keydown(function(event) {							// Tag is greater than 3 chars and enter pressed							if (this.value.length >= 3 && (event.which === 13 || event.which === 188)) {								// Search an highlighted result								var highlighted = $('" . $selector . "_chzn').find('li.active-result.highlighted').first();								// Add the highlighted option								if (event.which === 13 && highlighted.text() !== '')								{									// Extra check. If we have added a custom tag with this text remove it									var customOptionValue = customTagPrefix + highlighted.text();									$('" . $selector . " option').filter(function () { return $(this).val() == customOptionValue; }).remove();									// Select the highlighted result									var tagOption = $('" . $selector . " option').filter(function () { return $(this).html() == highlighted.text(); });									tagOption.attr('selected', 'selected');								}								// Add the custom tag option								else								{									var customTag = this.value;									// Extra check. Search if the custom tag already exists (typed faster than AJAX ready)									var tagOption = $('" . $selector . " option').filter(function () { return $(this).html() == customTag; });									if (tagOption.text() !== '')									{										tagOption.attr('selected', 'selected');									}									else									{										var option = $('<option>');										option.text(this.value).val(customTagPrefix + this.value);										option.attr('selected','selected');										// Append the option an repopulate the chosen field										$('" . $selector . "').append(option);									}								}								this.value = '';								$('" . $selector . "').trigger('liszt:updated');								event.preventDefault();							}						});					});				})(jQuery);				"			);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class for managing HTTP sessions * * Provides access to session-state values as well as session-level * settings and lifetime management methods. * Based on the standard PHP session handling mechanism it provides * more advanced features such as expire timeouts. * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSession implements IteratorAggregate{	/**	 * Internal state.	 * One of 'inactive'|'active'|'expired'|'destroyed'|'error'	 *	 * @var    string	 * @see    getState()	 * @since  11.1	 */	protected $_state = 'inactive';	/**	 * Maximum age of unused session in minutes	 *	 * @var    string	 * @since  11.1	 */	protected $_expire = 15;	/**	 * The session store object.	 *	 * @var    JSessionStorage	 * @since  11.1	 */	protected $_store = null;	/**	 * Security policy.	 * List of checks that will be done.	 *	 * Default values:	 * - fix_browser	 * - fix_adress	 *	 * @var array	 * @since  11.1	 */	protected $_security = array('fix_browser');	/**	 * Force cookies to be SSL only	 * Default  false	 *	 * @var    boolean	 * @since  11.1	 */	protected $_force_ssl = false;	/**	 * @var    JSession  JSession instances container.	 * @since  11.3	 */	protected static $instance;	/**	 * @var    string	 * @since  12.2	 */	protected $storeName;	/**	 * Holds the JInput object	 *	 * @var    JInput	 * @since  12.2	 */	private $_input = null;	/**	 * Holds the event dispatcher object	 *	 * @var    JEventDispatcher	 * @since  12.2	 */	private $_dispatcher = null;	/**	 * Constructor	 *	 * @param   string  $store    The type of storage for the session.	 * @param   array   $options  Optional parameters	 *	 * @since   11.1	 */	public function __construct($store = 'none', array $options = array())	{		// Need to destroy any existing sessions started with session.auto_start		if (session_id())		{			session_unset();			session_destroy();		}		// Disable transparent sid support		ini_set('session.use_trans_sid', '0');		// Only allow the session ID to come from cookies and nothing else.		ini_set('session.use_only_cookies', '1');		// Create handler		$this->_store = JSessionStorage::getInstance($store, $options);		$this->storeName = $store;		// Set options		$this->_setOptions($options);		$this->_setCookieParams();		$this->_state = 'inactive';	}	/**	 * Magic method to get read-only access to properties.	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  mixed   The value of the property	 *	 * @since   12.2	 */	public function __get($name)	{		if ($name === 'storeName')		{			return $this->$name;		}		if ($name === 'state' || $name === 'expire')		{			$property = '_' . $name;			return $this->$property;		}	}	/**	 * Returns the global Session object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $handler  The type of session handler.	 * @param   array   $options  An array of configuration options.	 *	 * @return  JSession  The Session object.	 *	 * @since   11.1	 */	public static function getInstance($handler, $options)	{		if (!is_object(self::$instance))		{			self::$instance = new JSession($handler, $options);		}		return self::$instance;	}	/**	 * Get current state of session	 *	 * @return  string  The session state	 *	 * @since   11.1	 */	public function getState()	{		return $this->_state;	}	/**	 * Get expiration time in minutes	 *	 * @return  integer  The session expiration time in minutes	 *	 * @since   11.1	 */	public function getExpire()	{		return $this->_expire;	}	/**	 * Get a session token, if a token isn't set yet one will be generated.	 *	 * Tokens are used to secure forms from spamming attacks. Once a token	 * has been generated the system will check the post request to see if	 * it is present, if not it will invalidate the session.	 *	 * @param   boolean  $forceNew  If true, force a new token to be created	 *	 * @return  string  The session token	 *	 * @since   11.1	 */	public function getToken($forceNew = false)	{		$token = $this->get('session.token');		// Create a token		if ($token === null || $forceNew)		{			$token = $this->_createToken(12);			$this->set('session.token', $token);		}		return $token;	}	/**	 * Method to determine if a token exists in the session. If not the	 * session will be set to expired	 *	 * @param   string   $tCheck       Hashed token to be verified	 * @param   boolean  $forceExpire  If true, expires the session	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function hasToken($tCheck, $forceExpire = true)	{		// Check if a token exists in the session		$tStored = $this->get('session.token');		// Check token		if (($tStored !== $tCheck))		{			if ($forceExpire)			{				$this->_state = 'expired';			}			return false;		}		return true;	}	/**	 * Method to determine a hash for anti-spoofing variable names	 *	 * @param   boolean  $forceNew  If true, force a new token to be created	 *	 * @return  string  Hashed var name	 *	 * @since   11.1	 */	public static function getFormToken($forceNew = false)	{		$user    = JFactory::getUser();		$session = JFactory::getSession();		// TODO: Decouple from legacy JApplication class.		if (is_callable(array('JApplication', 'getHash')))		{			$hash = JApplication::getHash($user->get('id', 0) . $session->getToken($forceNew));		}		else		{			$hash = md5(JFactory::getApplication()->get('secret') . $user->get('id', 0) . $session->getToken($forceNew));		}		return $hash;	}	/**	 * Retrieve an external iterator.	 *	 * @return  ArrayIterator  Return an ArrayIterator of $_SESSION.	 *	 * @since   12.2	 */	public function getIterator()	{		return new ArrayIterator($_SESSION);	}	/**	 * Checks for a form token in the request.	 *	 * Use in conjunction with JHtml::_('form.token') or JSession::getFormToken.	 *	 * @param   string  $method  The request method in which to look for the token key.	 *	 * @return  boolean  True if found and valid, false otherwise.	 *	 * @since   12.1	 */	public static function checkToken($method = 'post')	{		$token = self::getFormToken();		$app = JFactory::getApplication();		if (!$app->input->$method->get($token, '', 'alnum'))		{			$session = JFactory::getSession();			if ($session->isNew())			{				// Redirect to login screen.				$app->redirect(JRoute::_('index.php'), JText::_('JLIB_ENVIRONMENT_SESSION_EXPIRED'));				$app->close();			}			else			{				return false;			}		}		else		{			return true;		}	}	/**	 * Get session name	 *	 * @return  string  The session name	 *	 * @since   11.1	 */	public function getName()	{		if ($this->_state === 'destroyed')		{			// @TODO : raise error			return null;		}		return session_name();	}	/**	 * Get session id	 *	 * @return  string  The session name	 *	 * @since   11.1	 */	public function getId()	{		if ($this->_state === 'destroyed')		{			// @TODO : raise error			return null;		}		return session_id();	}	/**	 * Get the session handlers	 *	 * @return  array  An array of available session handlers	 *	 * @since   11.1	 */	public static function getStores()	{		$connectors = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/storage');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JSessionStorage' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$connectors[] = str_ireplace('.php', '', $fileName);			}		}		return $connectors;	}	/**	 * Shorthand to check if the session is active	 *	 * @return  boolean	 *	 * @since   12.2	 */	public function isActive()	{		return (bool) ($this->_state == 'active');	}	/**	 * Check whether this session is currently created	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function isNew()	{		$counter = $this->get('session.counter');		return (bool) ($counter === 1);	}	/**	 * Check whether this session is currently created	 *	 * @param   JInput            $input       JInput object for the session to use.	 * @param   JEventDispatcher  $dispatcher  Dispatcher object for the session to use.	 *	 * @return  void.	 *	 * @since   12.2	 */	public function initialise(JInput $input, JEventDispatcher $dispatcher = null)	{		$this->_input      = $input;		$this->_dispatcher = $dispatcher;	}	/**	 * Get data from the session store	 *	 * @param   string  $name       Name of a variable	 * @param   mixed   $default    Default value of a variable if not set	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  mixed  Value of a variable	 *	 * @since   11.1	 */	public function get($name, $default = null, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active' && $this->_state !== 'expired')		{			// @TODO :: generated error here			$error = null;			return $error;		}		if (isset($_SESSION[$namespace][$name]))		{			return $_SESSION[$namespace][$name];		}		return $default;	}	/**	 * Set data into the session store.	 *	 * @param   string  $name       Name of a variable.	 * @param   mixed   $value      Value of a variable.	 * @param   string  $namespace  Namespace to use, default to 'default'.	 *	 * @return  mixed  Old value of a variable.	 *	 * @since   11.1	 */	public function set($name, $value = null, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		$old = isset($_SESSION[$namespace][$name]) ? $_SESSION[$namespace][$name] : null;		if (null === $value)		{			unset($_SESSION[$namespace][$name]);		}		else		{			$_SESSION[$namespace][$name] = $value;		}		return $old;	}	/**	 * Check whether data exists in the session store	 *	 * @param   string  $name       Name of variable	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  boolean  True if the variable exists	 *	 * @since   11.1	 */	public function has($name, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions.		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		return isset($_SESSION[$namespace][$name]);	}	/**	 * Unset data from the session store	 *	 * @param   string  $name       Name of variable	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  mixed   The value from session or NULL if not set	 *	 * @since   11.1	 */	public function clear($name, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		$value = null;		if (isset($_SESSION[$namespace][$name]))		{			$value = $_SESSION[$namespace][$name];			unset($_SESSION[$namespace][$name]);		}		return $value;	}	/**	 * Start a session.	 *	 * @return  void	 *	 * @since   12.2	 */	public function start()	{		if ($this->_state === 'active')		{			return;		}		$this->_start();		$this->_state = 'active';		// Initialise the session		$this->_setCounter();		$this->_setTimers();		// Perform security checks		$this->_validate();		if ($this->_dispatcher instanceof JEventDispatcher)		{			$this->_dispatcher->trigger('onAfterSessionStart');		}	}	/**	 * Start a session.	 *	 * Creates a session (or resumes the current one based on the state of the session)	 *	 * @return  boolean  true on success	 *	 * @since   11.1	 */	protected function _start()	{		// Start session if not started		if ($this->_state === 'restart')		{			session_regenerate_id(true);		}		else		{			$session_name = session_name();			// Get the JInputCookie object			$cookie = $this->_input->cookie;			if (is_null($cookie->get($session_name)))			{				$session_clean = $this->_input->get($session_name, false, 'string');				if ($session_clean)				{					session_id($session_clean);					$cookie->set($session_name, '', time() - 3600);				}			}		}		/**		 * Write and Close handlers are called after destructing objects since PHP 5.0.5.		 * Thus destructors can use sessions but session handler can't use objects.		 * So we are moving session closure before destructing objects.		 *		 * Replace with session_register_shutdown() when dropping compatibility with PHP 5.3		 */		register_shutdown_function('session_write_close');		session_cache_limiter('none');		session_start();		return true;	}	/**	 * Frees all session variables and destroys all data registered to a session	 *	 * This method resets the $_SESSION variable and destroys all of the data associated	 * with the current session in its storage (file or DB). It forces new session to be	 * started after this method is called. It does not unset the session cookie.	 *	 * @return  boolean  True on success	 *	 * @see     session_destroy()	 * @see     session_unset()	 * @since   11.1	 */	public function destroy()	{		// Session was already destroyed		if ($this->_state === 'destroyed')		{			return true;		}		/*		 * In order to kill the session altogether, such as to log the user out, the session id		 * must also be unset. If a cookie is used to propagate the session id (default behavior),		 * then the session cookie must be deleted.		 */		if (isset($_COOKIE[session_name()]))		{			$config = JFactory::getConfig();			$cookie_domain = $config->get('cookie_domain', '');			$cookie_path = $config->get('cookie_path', '/');			setcookie(session_name(), '', time() - 42000, $cookie_path, $cookie_domain);		}		session_unset();		session_destroy();		$this->_state = 'destroyed';		return true;	}	/**	 * Restart an expired or locked session.	 *	 * @return  boolean  True on success	 *	 * @see     destroy	 * @since   11.1	 */	public function restart()	{		$this->destroy();		if ($this->_state !== 'destroyed')		{			// @TODO :: generated error here			return false;		}		// Re-register the session handler after a session has been destroyed, to avoid PHP bug		$this->_store->register();		$this->_state = 'restart';		// Regenerate session id		session_regenerate_id(true);		$this->_start();		$this->_state = 'active';		$this->_validate();		$this->_setCounter();		return true;	}	/**	 * Create a new session and copy variables from the old one	 *	 * @return  boolean $result true on success	 *	 * @since   11.1	 */	public function fork()	{		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return false;		}		// Save values		$values = $_SESSION;		// Keep session config		$cookie = session_get_cookie_params();		// Kill session		session_destroy();		// Re-register the session store after a session has been destroyed, to avoid PHP bug		$this->_store->register();		// Restore config		session_set_cookie_params($cookie['lifetime'], $cookie['path'], $cookie['domain'], $cookie['secure'], true);		// Restart session with new id		session_regenerate_id(true);		session_start();		return true;	}	/**	 * Writes session data and ends session	 *	 * Session data is usually stored after your script terminated without the need	 * to call JSession::close(), but as session data is locked to prevent concurrent	 * writes only one script may operate on a session at any time. When using	 * framesets together with sessions you will experience the frames loading one	 * by one due to this locking. You can reduce the time needed to load all the	 * frames by ending the session as soon as all changes to session variables are	 * done.	 *	 * @return  void	 *	 * @see     session_write_close()	 * @since   11.1	 */	public function close()	{		session_write_close();	}	/**	 * Set session cookie parameters	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _setCookieParams()	{		$cookie = session_get_cookie_params();		if ($this->_force_ssl)		{			$cookie['secure'] = true;		}		$config = JFactory::getConfig();		if ($config->get('cookie_domain', '') != '')		{			$cookie['domain'] = $config->get('cookie_domain');		}		if ($config->get('cookie_path', '') != '')		{			$cookie['path'] = $config->get('cookie_path');		}		session_set_cookie_params($cookie['lifetime'], $cookie['path'], $cookie['domain'], $cookie['secure'], true);	}	/**	 * Create a token-string	 *	 * @param   integer  $length  Length of string	 *	 * @return  string  Generated token	 *	 * @since   11.1	 */	protected function _createToken($length = 32)	{		static $chars = '0123456789abcdef';		$max = strlen($chars) - 1;		$token = '';		$name = session_name();		for ($i = 0; $i < $length; ++$i)		{			$token .= $chars[(rand(0, $max))];		}		return md5($token . $name);	}	/**	 * Set counter of session usage	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setCounter()	{		$counter = $this->get('session.counter', 0);		++$counter;		$this->set('session.counter', $counter);		return true;	}	/**	 * Set the session timers	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setTimers()	{		if (!$this->has('session.timer.start'))		{			$start = time();			$this->set('session.timer.start', $start);			$this->set('session.timer.last', $start);			$this->set('session.timer.now', $start);		}		$this->set('session.timer.last', $this->get('session.timer.now'));		$this->set('session.timer.now', time());		return true;	}	/**	 * Set additional session options	 *	 * @param   array  $options  List of parameter	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setOptions(array $options)	{		// Set name		if (isset($options['name']))		{			session_name(md5($options['name']));		}		// Set id		if (isset($options['id']))		{			session_id($options['id']);		}		// Set expire time		if (isset($options['expire']))		{			$this->_expire = $options['expire'];		}		// Get security options		if (isset($options['security']))		{			$this->_security = explode(',', $options['security']);		}		if (isset($options['force_ssl']))		{			$this->_force_ssl = (bool) $options['force_ssl'];		}		// Sync the session maxlifetime		ini_set('session.gc_maxlifetime', $this->_expire);		return true;	}	/**	 * Do some checks for security reason	 *	 * - timeout check (expire)	 * - ip-fixiation	 * - browser-fixiation	 *	 * If one check failed, session data has to be cleaned.	 *	 * @param   boolean  $restart  Reactivate session	 *	 * @return  boolean  True on success	 *	 * @see     http://shiflett.org/articles/the-truth-about-sessions	 * @since   11.1	 */	protected function _validate($restart = false)	{		// Allow to restart a session		if ($restart)		{			$this->_state = 'active';			$this->set('session.client.address', null);			$this->set('session.client.forwarded', null);			$this->set('session.client.browser', null);			$this->set('session.token', null);		}		// Check if session has expired		if ($this->_expire)		{			$curTime = $this->get('session.timer.now', 0);			$maxTime = $this->get('session.timer.last', 0) + $this->_expire;			// Empty session variables			if ($maxTime < $curTime)			{				$this->_state = 'expired';				return false;			}		}		// Record proxy forwarded for in the session in case we need it later		if (isset($_SERVER['HTTP_X_FORWARDED_FOR']))		{			$this->set('session.client.forwarded', $_SERVER['HTTP_X_FORWARDED_FOR']);		}		// Check for client address		if (in_array('fix_adress', $this->_security) && isset($_SERVER['REMOTE_ADDR']))		{			$ip = $this->get('session.client.address');			if ($ip === null)			{				$this->set('session.client.address', $_SERVER['REMOTE_ADDR']);			}			elseif ($_SERVER['REMOTE_ADDR'] !== $ip)			{				$this->_state = 'error';				return false;			}		}		// Check for clients browser		if (in_array('fix_browser', $this->_security) && isset($_SERVER['HTTP_USER_AGENT']))		{			$browser = $this->get('session.client.browser');			if ($browser === null)			{				$this->set('session.client.browser', $_SERVER['HTTP_USER_AGENT']);			}			elseif ($_SERVER['HTTP_USER_AGENT'] !== $browser)			{				// @todo remove code: 				$this->_state	=	'error';				// @todo remove code: 				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of clients. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewClients extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		BannersHelper::addSubmenu('clients');		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/banners.php';		$canDo	= BannersHelper::getActions();		JToolbarHelper::title(JText::_('COM_BANNERS_MANAGER_CLIENTS'), 'banners-clients.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('client.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('client.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('clients.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('clients.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('clients.archive');			JToolbarHelper::checkin('clients.checkin');		}		if ($this->state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'clients.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('clients.trash');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_banners');		}		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_CLIENTS');		JHtmlSidebar::setAction('index.php?option=com_banners&view=clients');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.status' => JText::_('JSTATUS'),			'a.name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'contact' => JText::_('COM_BANNERS_HEADING_CONTACT'),			'client_name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'nbanners' => JText::_('COM_BANNERS_HEADING_ACTIVE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_newsfeeds.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_newsfeeds&task=newsfeeds.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="5%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_NUM_ARTICLES_HEADING', 'numarticles', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_CACHE_TIME_HEADING', 'a.cache_time', $listDirn, $listOrder); ?>					</th>					<?php if ($assoc) : ?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="11">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'a.ordering');				$canCreate  = $user->authorise('core.create',     'com_newsfeeds.category.' . $item->catid);				$canEdit    = $user->authorise('core.edit',       'com_newsfeeds.category.' . $item->catid);				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_newsfeeds.category.' . $item->catid) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel	  = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>							<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order" />						<?php else : ?>							<span class="sortable-handler inactive" >								<i class="icon-menu"></i>							</span>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'newsfeeds.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'newsfeeds.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_newsfeeds&task=newsfeed.edit&id='.(int) $item->id); ?>">									<?php echo $this->escape($item->name); ?></a>							<?php else : ?>									<?php echo $this->escape($item->name); ?>							<?php endif; ?>							<span class="small">								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							</span>							<div class="small">								<?php echo $this->escape($item->category_title); ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'newsfeed.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'newsfeeds.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'newsfeeds.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'newsfeeds.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'newsfeeds.');								endif;								// render dropdown list								echo JHtml::_('dropdown.render');								?>						</div>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->numarticles; ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->cache_time; ?>					</td>					<?php if ($assoc) : ?>					<td class="hidden-phone">						<?php if ($item->association) : ?>							<?php echo JHtml::_('newsfeed.association', $item->id); ?>						<?php endif; ?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_stats_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  mod_stats_admin * @since       3.0 */class ModStatsHelper{	/**	 * Method to retrieve information about the site	 *	 * @param   JObject  $params  Params object	 *	 * @return  array  Array containing site information	 *	 * @since   3.0	 */	public static function getStats(&$params)	{		$app   = JFactory::getApplication();		$db    = JFactory::getDbo();		$rows  = array();		$query = $db->getQuery(true);		$serverinfo = $params->get('serverinfo');		$siteinfo   = $params->get('siteinfo');		$counter    = $params->get('counter');		$increase   = $params->get('increase');		$i = 0;		if ($serverinfo)		{			$rows[$i]        = new stdClass;			$rows[$i]->title = JText::_('MOD_STATS_OS');			$rows[$i]->icon  = 'screen';			$rows[$i]->data  = substr(php_uname(), 0, 7);			$i++;			$rows[$i]        = new stdClass;			$rows[$i]->title = JText::_('MOD_STATS_PHP');			$rows[$i]->icon  = 'cogs';			$rows[$i]->data  = phpversion();			$i++;			$rows[$i]        = new stdClass;			$rows[$i]->title = JText::_($db->name);			$rows[$i]->icon  = 'database';			$rows[$i]->data  = $db->getVersion();			$i++;			$rows[$i]        = new stdClass;			$rows[$i]->title = JTEXT::_('MOD_STATS_TIME');			$rows[$i]->icon  = 'clock';			$rows[$i]->data  = JHtml::_('date', 'now', 'H:i');			$i++;			$rows[$i]        = new stdClass;			$rows[$i]->title = JText::_('MOD_STATS_CACHING');			$rows[$i]->icon  = 'dashboard';			$rows[$i]->data  = $app->getCfg('caching') ? JText::_('JENABLED') : JText::_('JDISABLED');			$i++;			$rows[$i]        = new stdClass;			$rows[$i]->title = JText::_('MOD_STATS_GZIP');			$rows[$i]->icon  = 'lightning';			$rows[$i]->data  = $app->getCfg('gzip') ? JText::_('JENABLED') : JText::_('JDISABLED');			$i++;		}		if ($siteinfo)		{			$query->select('COUNT(id) AS count_users')				->from('#__users');			$db->setQuery($query);			$users = $db->loadResult();			$query->clear()				->select('COUNT(id) AS count_items')				->from('#__content')				->where('state = 1');			$db->setQuery($query);			$items = $db->loadResult();			$query->clear()				->select('COUNT(id) AS count_links ')				->from('#__weblinks')				->where('state = 1');			$db->setQuery($query);			$links = $db->loadResult();			if ($users)			{				$rows[$i]        = new stdClass;				$rows[$i]->title = JText::_('MOD_STATS_USERS');				$rows[$i]->icon  = 'users';				$rows[$i]->data  = $users;				$i++;			}			if ($items)			{				$rows[$i]        = new stdClass;				$rows[$i]->title = JText::_('MOD_STATS_ARTICLES');				$rows[$i]->icon  = 'file';				$rows[$i]->data  = $items;				$i++;			}			if ($links)			{				$rows[$i]        = new stdClass;				$rows[$i]->title = JText::_('MOD_STATS_WEBLINKS');				$rows[$i]->icon  = 'out-2';				$rows[$i]->data  = $links;				$i++;			}		}		if ($counter)		{			$query->clear()				->select('SUM(hits) AS count_hits')				->from('#__content')				->where('state = 1');			$db->setQuery($query);			$hits = $db->loadResult();			if ($hits)			{				$rows[$i]        = new stdClass;				$rows[$i]->title = JText::_('MOD_STATS_ARTICLES_VIEW_HITS');				$rows[$i]->icon  = 'eye';				$rows[$i]->data  = $hits + $increase;			}		}		return $rows;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelUser extends JModelAdmin{	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   string  $type    The table type to instantiate	 * @param   string  $prefix  A prefix for the table class name. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A database object	 *	 * @since   1.6	*/	public function getTable($type = 'User', $prefix = 'JTable', $config = array())	{		$table = JTable::getInstance($type, $prefix, $config);		return $table;	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   1.6	 */	public function getItem($pk = null)	{		$result = parent::getItem($pk);		$result->tags = new JHelperTags;		$result->tags->getTagIds($result->id, 'com_users.user');		// Get the dispatcher and load the users plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		// Trigger the data preparation event.		$results = $dispatcher->trigger('onContentPrepareData', array('com_users.user', $result));		return $result;	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      An optional array of data for the form to interogate.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		$plugin = JPluginHelper::getPlugin('user', 'joomla');		$pluginParams = new JRegistry($plugin->params);		// Get the form.		$form = $this->loadForm('com_users.user', 'user', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Passwords fields are required when mail to user is set to No in joomla user plugin		$userId = $form->getValue('id');		if ($userId === 0 && $pluginParams->get('mail_to_user') === "0")		{			$form->setFieldAttribute('password', 'required', 'true');			$form->setFieldAttribute('password2', 'required', 'true');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_users.edit.user.data', array());		if (empty($data))		{			$data = $this->getItem();		}		JPluginHelper::importPlugin('user');		$this->preprocessData('com_users.profile', $data);		return $data;	}	/**	 * Override JModelAdmin::preprocessForm to ensure the correct plugin group is loaded.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function save($data)	{		$pk			= (!empty($data['id'])) ? $data['id'] : (int) $this->getState('user.id');		$user		= JUser::getInstance($pk);		$my = JFactory::getUser();		if ($data['block'] && $pk == $my->id && !$my->block)		{			$this->setError(JText::_('COM_USERS_USERS_ERROR_CANNOT_BLOCK_SELF'));			return false;		}		// Make sure that we are not removing ourself from Super Admin group		$iAmSuperAdmin = $my->authorise('core.admin');		if ($iAmSuperAdmin && $my->get('id') == $pk)		{			// Check that at least one of our new groups is Super Admin			$stillSuperAdmin = false;			$myNewGroups = $data['groups'];			foreach ($myNewGroups as $group)			{				$stillSuperAdmin = ($stillSuperAdmin) ? ($stillSuperAdmin) : JAccess::checkGroup($group, 'core.admin');			}			if (!$stillSuperAdmin)			{				$this->setError(JText::_('COM_USERS_USERS_ERROR_CANNOT_DEMOTE_SELF'));				return false;			}		}		// Bind the data.		if (!$user->bind($data))		{			$this->setError($user->getError());			return false;		}		// Store the data.		if (!$user->save())		{			$this->setError($user->getError());			return false;		}		$this->setState('user.id', $user->id);		return true;	}	/**	 * Method to delete rows.	 *	 * @param   array  &$pks  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.6	 */	public function delete(&$pks)	{		$user	= JFactory::getUser();		$table	= $this->getTable();		$pks	= (array) $pks;		// Check if I am a Super Admin		$iAmSuperAdmin	= $user->authorise('core.admin');		// Trigger the onUserBeforeSave event.		JPluginHelper::importPlugin('user');		$dispatcher = JEventDispatcher::getInstance();		if (in_array($user->id, $pks))		{			$this->setError(JText::_('COM_USERS_USERS_ERROR_CANNOT_DELETE_SELF'));			return false;		}		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				// Access checks.				$allow = $user->authorise('core.delete', 'com_users');				// Don't allow non-super-admin to delete a super admin				$allow = (!$iAmSuperAdmin && JAccess::check($pk, 'core.admin')) ? false : $allow;				if ($allow)				{					// Get users data for the users to delete.					$user_to_delete = JFactory::getUser($pk);					// Fire the onUserBeforeDelete event.					$dispatcher->trigger('onUserBeforeDelete', array($table->getProperties()));					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					else					{						// Trigger the onUserAfterDelete event.						$dispatcher->trigger('onUserAfterDelete', array($user_to_delete->getProperties(), true, $this->getError()));					}				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return true;	}	/**	 * Method to block user records.	 *	 * @param   array    &$pks   The ids of the items to publish.	 * @param   integer  $value  The value of the published state	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function block(&$pks, $value = 1)	{		$app		= JFactory::getApplication();		$dispatcher	= JEventDispatcher::getInstance();		$user		= JFactory::getUser();		// Check if I am a Super Admin		$iAmSuperAdmin	= $user->authorise('core.admin');		$table		= $this->getTable();		$pks		= (array) $pks;		JPluginHelper::importPlugin('user');		// Access checks.		foreach ($pks as $i => $pk)		{			if ($value == 1 && $pk == $user->get('id'))			{				// Cannot block yourself.				unset($pks[$i]);				JError::raiseWarning(403, JText::_('COM_USERS_USERS_ERROR_CANNOT_BLOCK_SELF'));			}			elseif ($table->load($pk))			{				$old	= $table->getProperties();				$allow	= $user->authorise('core.edit.state', 'com_users');				// Don't allow non-super-admin to delete a super admin				$allow = (!$iAmSuperAdmin && JAccess::check($pk, 'core.admin')) ? false : $allow;				// Prepare the logout options.				$options = array(					'clientid' => 0				);				if ($allow)				{					// Skip changing of same state					if ($table->block == $value)					{						unset($pks[$i]);						continue;					}					$table->block = (int) $value;				// If unblocking, also change password reset count to zero to unblock reset					if ($table->block === 0)					{						$table->resetCount = 0;					}					// Allow an exception to be thrown.					try					{						if (!$table->check())						{							$this->setError($table->getError());							return false;						}						// Trigger the onUserBeforeSave event.						$result = $dispatcher->trigger('onUserBeforeSave', array($old, false, $table->getProperties()));						if (in_array(false, $result, true))						{							// Plugin will have to raise it's own error or throw an exception.							return false;						}						// Store the table.						if (!$table->store())						{							$this->setError($table->getError());							return false;						}						// Trigger the onAftereStoreUser event						$dispatcher->trigger('onUserAfterSave', array($table->getProperties(), false, true, null));					}					catch (Exception $e)					{						$this->setError($e->getMessage());						return false;					}					// Log the user out.					if ($value)					{						$app->logout($table->id, $options);					}				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));				}			}		}		return true;	}	/**	 * Method to activate user records.	 *	 * @param   array  &$pks  The ids of the items to activate.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function activate(&$pks)	{		$dispatcher	= JEventDispatcher::getInstance();		$user		= JFactory::getUser();		// Check if I am a Super Admin		$iAmSuperAdmin	= $user->authorise('core.admin');		$table		= $this->getTable();		$pks		= (array) $pks;		JPluginHelper::importPlugin('user');		// Access checks.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				$old	= $table->getProperties();				$allow	= $user->authorise('core.edit.state', 'com_users');				// Don't allow non-super-admin to delete a super admin				$allow = (!$iAmSuperAdmin && JAccess::check($pk, 'core.admin')) ? false : $allow;				if (empty($table->activation))				{					// Ignore activated accounts.					unset($pks[$i]);				}				elseif ($allow)				{					$table->block		= 0;					$table->activation	= '';					// Allow an exception to be thrown.					try					{						if (!$table->check())						{							$this->setError($table->getError());							return false;						}						// Trigger the onUserBeforeSave event.						$result = $dispatcher->trigger('onUserBeforeSave', array($old, false, $table->getProperties()));						if (in_array(false, $result, true))						{							// Plugin will have to raise it's own error or throw an exception.							return false;						}						// Store the table.						if (!$table->store())						{							$this->setError($table->getError());							return false;						}						// Fire the onAftereStoreUser event						$dispatcher->trigger('onUserAfterSave', array($table->getProperties(), false, true, null));					}					catch (Exception $e)					{						$this->setError($e->getMessage());						return false;					}				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));				}			}		}		return true;	}	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   2.5	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('COM_USERS_USERS_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['group_id']))		{			$cmd = JArrayHelper::getValue($commands, 'group_action', 'add');			if (!$this->batchUser((int) $commands['group_id'], $pks, $cmd))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Perform batch operations	 *	 * @param   integer  $group_id  The group ID which assignments are being edited	 * @param   array    $user_ids  An array of user IDs on which to operate	 * @param   string   $action    The action to perform	 *	 * @return  boolean  True on success, false on failure	 *	 * @since   1.6	 */	public function batchUser($group_id, $user_ids, $action)	{		// Get the DB object		$db = $this->getDbo();		JArrayHelper::toInteger($user_ids);		// Non-super admin cannot work with super-admin group		if ((!JFactory::getUser()->get('isRoot') && JAccess::checkGroup($group_id, 'core.admin')) || $group_id < 1)		{			$this->setError(JText::_('COM_USERS_ERROR_INVALID_GROUP'));			return false;		}		switch ($action)		{			// Sets users to a selected group			case 'set':				$doDelete	= 'all';				$doAssign	= true;				break;			// Remove users from a selected group			case 'del':				$doDelete	= 'group';				break;			// Add users to a selected group			case 'add':			default:				$doAssign	= true;				break;		}		// Remove the users from the group if requested.		if (isset($doDelete))		{			$query = $db->getQuery(true);			// Remove users from the group			$query->delete($db->quoteName('#__user_usergroup_map'))				->where($db->quoteName('user_id') . ' IN (' . implode(',', $user_ids) . ')');			// Only remove users from selected group			if ($doDelete == 'group')			{				$query->where($db->quoteName('group_id') . ' = ' . (int) $group_id);			}			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		// Assign the users to the group if requested.		if (isset($doAssign))		{			$query = $db->getQuery(true);			// First, we need to check if the user is already assigned to a group			$query->select($db->quoteName('user_id'))				->from($db->quoteName('#__user_usergroup_map'))				->where($db->quoteName('group_id') . ' = ' . (int) $group_id);			$db->setQuery($query);			$users = $db->loadColumn();			// Build the values clause for the assignment query.			$query->clear();			$groups = false;			foreach ($user_ids as $id)			{				if (!in_array($id, $users))				{					$query->values($id . ',' . $group_id);					$groups = true;				}			}			// If we have no users to process, throw an error to notify the user			if (!$groups)			{				$this->setError(JText::_('COM_USERS_ERROR_NO_ADDITIONS'));				return false;			}			$query->insert($db->quoteName('#__user_usergroup_map'))				->columns(array($db->quoteName('user_id'), $db->quoteName('group_id')));			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}	/**	 * Gets the available groups.	 *	 * @return  array  An array of groups	 *	 * @since   1.6	 */	public function getGroups()	{		$user = JFactory::getUser();		if ($user->authorise('core.edit', 'com_users') && $user->authorise('core.manage', 'com_users'))		{			$model = JModelLegacy::getInstance('Groups', 'UsersModel', array('ignore_request' => true));			return $model->getItems();		}		else		{			return null;		}	}	/**	 * Gets the groups this object is assigned to	 *	 * @param   integer  $userId  The user ID to retrieve the groups for	 *	 * @return  array  An array of assigned groups	 *	 * @since   1.6	 */	public function getAssignedGroups($userId = null)	{		$userId = (!empty($userId)) ? $userId : (int) $this->getState('user.id');		if (empty($userId))		{			$result = array();			$config = JComponentHelper::getParams('com_users');			if ($groupId = $config->get('new_usertype'))			{				$result[] = $groupId;			}		}		else		{			$result = JUserHelper::getUserGroups($userId);		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform class for interacting with a Mediawiki server instance. * * @property-read  JMediawikiSites          $sites          MediaWiki API object for sites. * @property-read  JMediawikiPages          $pages          MediaWiki API object for pages. * @property-read  JMediawikiUsers          $users          MediaWiki API object for users. * @property-read  JMediawikiLinks          $links          MediaWiki API object for links. * @property-read  JMediawikiCategories     $categories     MediaWiki API object for categories. * @property-read  JMediawikiImages         $images         MediaWiki API object for images. * @property-read  JMediawikiSearch         $search         MediaWiki API object for search. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawiki{	/**	 * @var    JRegistry  Options for the MediaWiki object.	 * @since  12.1	 */	protected $options;	/**	 * @var    JMediawikiHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $client;	/**	 * @var    JMediawikiSites  MediaWiki API object for Site.	 * @since  12.3	 */	protected $sites;	/**	 * @var    JMediawikiPages  MediaWiki API object for pages.	 * @since  12.1	 */	protected $pages;	/**	 * @var    JMediawikiUsers  MediaWiki API object for users.	 * @since  12.3	 */	protected $users;	/**	 * @var    JMediawikiLinks  MediaWiki API object for links.	 * @since  12.3	 */	protected $links;	/**	 * @var    JMediawikiCategories  MediaWiki API object for categories.	 * @since  12.3	 */	protected $categories;	/**	 * @var    JMediawikiImages  MediaWiki API object for images.	 * @since  12.3	 */	protected $images;	/**	 * @var    JMediawikiSearch  MediaWiki API object for search.	 * @since  12.1	 */	protected $search;	/**     * Constructor.     *     * @param   JRegistry       $options  MediaWiki options object.     * @param   JMediawikiHttp  $client   The HTTP client object.     *     * @since   12.3     */	public function __construct(JRegistry $options = null, JMediawikiHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JMediawikiHttp($this->options);	}	/**     * Magic method to lazily create API objects     *     * @param   string  $name  Name of property to retrieve     *     * @return  JMediaWikiObject  MediaWiki API object (users, reviews, etc).     *     * @since   12.3     * @throws  InvalidArgumentException     */	public function __get($name)	{		$name = strtolower($name);		$class = 'JMediawiki' . ucfirst($name);		$accessible = array(			'categories',			'images',			'links',			'pages',			'search',			'sites',			'users'		);		if (class_exists($class) && in_array($name, $accessible))		{			if (!isset($this->$name))			{				$this->$name = new $class($this->options, $this->client);			}			return $this->$name;		}		throw new InvalidArgumentException(sprintf('Property %s is not accessible.', $name));	}	/**     * Get an option from the JMediawiki instance.     *     * @param   string  $key  The name of the option to get.     *     * @return  mixed  The option value.     *     * @since   12.3     */	public function getOption($key)	{		return $this->options->get($key);	}	/**     * Set an option for the JMediawiki instance.     *     * @param   string  $key    The name of the option to set.     * @param   mixed   $value  The option value to set.     *     * @return  JMediawiki  This object for method chaining.     *     * @since   12.3     */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_DATABASE_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('database') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       12.1 */class JDatabaseDriverMysql extends JDatabaseDriverMysqli{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'mysql';	/**	 * Constructor.	 *	 * @param   array  $options  Array of database options with keys: host, user, password, database, select.	 *	 * @since   12.1	 */	public function __construct($options)	{		// Get some basic values from the options.		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['user'] = (isset($options['user'])) ? $options['user'] : 'root';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		$options['select'] = (isset($options['select'])) ? (bool) $options['select'] : true;		// Finalize initialisation.		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		if (is_resource($this->connection))		{			mysql_close($this->connection);		}	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		// Make sure the MySQL extension for PHP is installed and enabled.		if (!function_exists('mysql_connect'))		{			throw new RuntimeException('Could not connect to MySQL.');		}		// Attempt to connect to the server.		if (!($this->connection = @ mysql_connect($this->options['host'], $this->options['user'], $this->options['password'], true)))		{			throw new RuntimeException('Could not connect to MySQL.');		}		// Set sql_mode to non_strict mode		mysql_query("SET @@SESSION.sql_mode = '';", $this->connection);		// If auto-select is enabled select the given database.		if ($this->options['select'] && !empty($this->options['database']))		{			$this->select($this->options['database']);		}		// Set charactersets (needed for MySQL 4.1.2+).		$this->setUTF();	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		mysql_close($this->connection);		$this->connection = null;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		$this->connect();		$result = mysql_real_escape_string($text, $this->getConnection());		if ($extra)		{			$result = addcslashes($result, '%_');		}		return $result;	}	/**	 * Test to see if the MySQL connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (function_exists('mysql_connect'));	}	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   12.1	 */	public function connected()	{		if (is_resource($this->connection))		{			return @mysql_ping($this->connection);		}		return false;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   12.1	 */	public function getAffectedRows()	{		$this->connect();		return mysql_affected_rows($this->connection);	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows($cursor = null)	{		$this->connect();		return mysql_num_rows($cursor ? $cursor : $this->cursor);	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		return mysql_get_server_info($this->connection);	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		return mysql_insert_id($this->connection);	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function execute()	{		$this->connect();		if (!is_resource($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			$query .= ' LIMIT ' . $this->offset . ', ' . $this->limit;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query. Error suppression is used here to prevent warnings/notices that the connection has been lost.		$this->cursor = @mysql_query($query, $this->connection);		// If an error occurred handle it.		if (!$this->cursor)		{			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					// Get the error number and message.					$this->errorNum = (int) mysql_errno($this->connection);					$this->errorMsg = (string) mysql_error($this->connection) . ' SQL=' . $query;					// Throw the normal query exception.					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg, $this->errorNum);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				// Get the error number and message.				$this->errorNum = (int) mysql_errno($this->connection);				$this->errorMsg = (string) mysql_error($this->connection) . ' SQL=' . $query;				// Throw the normal query exception.				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg, $this->errorNum);			}		}		return $this->cursor;	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		if (!$database)		{			return false;		}		if (!mysql_select_db($database, $this->connection))		{			throw new RuntimeException('Could not connect to database');		}		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return mysql_set_charset('utf8', $this->connection);	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		return mysql_fetch_row($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		return mysql_fetch_assoc($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		return mysql_fetch_object($cursor ? $cursor : $this->cursor, $class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		mysql_free_result($cursor ? $cursor : $this->cursor);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();if ($app->isSite()){	JSession::checkToken('get') or die(JText::_('JINVALID_TOKEN'));}require_once JPATH_ROOT . '/components/com_content/helpers/route.php';JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = $app->input->getCmd('function', 'jSelectArticle');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_content&view=articles&layout=modal&tmpl=component&function='.$function.'&'.JSession::getFormToken().'=1');?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search">				<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>			</label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<label class="selectlabel" for="filter_category_id"><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>			<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />			<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<?php endif; ?>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist modal">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th class="title language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<th>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->title)); ?>', '<?php echo $this->escape($item->catid); ?>', null, '<?php echo $this->escape(ContentHelperRoute::getArticleRoute($item->id, $item->catid)); ?>');">						<?php echo $this->escape($item->title); ?></a>				</th>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table><?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_feed * * @package     Joomla.Administrator * @subpackage  mod_feed * @since       1.5 */class ModFeedHelper{	/**	 * Method to load a feed.	 *	 * @param   JRegisty  $params  The parameters object.	 *	 * @return  JFeedReader|string  Return a JFeedReader object or a string message if error.	 */	static function getFeed($params)	{		// Module params		$rssurl = $params->get('rssurl', '');		// Get RSS parsed object		$cache_time = 0;		if ($params->get('cache'))		{			$cache_time = $params->get('cache_time', 15) * 60;		}		try		{			jimport('joomla.feed.factory');			$feed   = new JFeedFactory;			$rssDoc = $feed->getFeed($rssurl);		}		catch (InvalidArgumentException $e)		{			$msg = JText::_('MOD_NEWSFEEDS_ERRORS_FEED_NOT_RETRIEVED');		}		catch (RunTimeException $e)		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');		}		if (empty($rssDoc))		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');			return $msg;		}		$lists = array();		if ($rssDoc)		{			return $rssDoc;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('text');/** * Supports a modal article picker. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class JFormFieldModulePosition extends JFormFieldText{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ModulePosition';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		// Get the client id.		$clientId = $this->element['client_id'];		if (!isset($clientId))		{			$clientName = $this->element['client'];			if (isset($clientName))			{				$client = JApplicationHelper::getClientInfo($clientName, true);				$clientId = $client->id;			}		}		if (!isset($clientId) && $this->form instanceof JForm)		{			$clientId = $this->form->getValue('client_id');		}		$clientId = (int) $clientId;		// Load the modal behavior script.		JHtml::_('behavior.modal', 'a.modal');		// Build the script.		$script = array();		$script[] = '	function jSelectPosition_' . $this->id . '(name) {';		$script[] = '		document.id("' . $this->id . '").value = name;';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Setup variables for display.		$html = array();		$link = 'index.php?option=com_modules&view=positions&layout=modal&tmpl=component&function=jSelectPosition_' . $this->id . '&amp;client_id=' . $clientId;		// The current user display field.		$html[] = '<div class="input-append">';		$html[] = parent::getInput()			. '<a class="btn modal" title="' . JText::_('COM_MODULES_CHANGE_POSITION_TITLE') . '"  href="' . $link . '" rel="{handler: \'iframe\', size: {x: 800, y: 450}}">'			. '<i class="icon-screenshot"></i> '			. JText::_('COM_MODULES_CHANGE_POSITION_BUTTON') . '</a>';		$html[] = '</div>';		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller for global configuration * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.5 */class ConfigControllerApplication extends JControllerLegacy{	/**	 * Class Constructor	 *	 * @param   array  $config		An optional associative array of configuration settings.	 * @return  void	 * @since   1.5	 */	public function __construct($config = array())	{		parent::__construct($config);		// Map the apply task to the save method.		$this->registerTask('apply', 'save');	}	/**	 * Method to save the configuration.	 *	 * @return  bool	True on success, false on failure.	 * @since   1.5	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Check if the user is authorized to do this.		if (!JFactory::getUser()->authorise('core.admin'))		{			JFactory::getApplication()->redirect('index.php', JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Set FTP credentials, if given.		JClientHelper::setCredentialsFromRequest('ftp');		$app   = JFactory::getApplication();		$model = $this->getModel('Application');		$form  = $model->getForm();		$data  = $this->input->post->get('jform', array(), 'array');		// Validate the posted data.		$return = $model->validate($form, $data);		// Check for validation errors.		if ($return === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_config.config.global.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_config&view=application', false));			return false;		}		// Attempt to save the configuration.		$data	= $return;		$return = $model->save($data);		// Check the return value.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('com_config.config.global.data', $data);			// Save failed, go back to the screen and display a notice.			$message = JText::sprintf('JERROR_SAVE_FAILED', $model->getError());			$this->setRedirect('index.php?option=com_config&view=application', $message, 'error');			return false;		}		// Set the success message.		$message = JText::_('COM_CONFIG_SAVE_SUCCESS');		// Set the redirect based on the task.		switch ($this->getTask())		{			case 'apply':				$this->setRedirect('index.php?option=com_config', $message);				break;			case 'save':			default:				$this->setRedirect('index.php', $message);				break;		}		return true;	}	/**	 * Cancel operation	 */	public function cancel()	{		// Check if the user is authorized to do this.		if (!JFactory::getUser()->authorise('core.admin', 'com_config'))		{			JFactory::getApplication()->redirect('index.php', JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		// Clean the session data.		$app = JFactory::getApplication();		$app->setUserState('com_config.config.global.data',	null);		$this->setRedirect('index.php');	}	public function refreshHelp()	{		jimport('joomla.filesystem.file');		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		if (($data = file_get_contents('http://help.joomla.org/helpsites.xml')) === false)		{			$this->setRedirect('index.php?option=com_config', JText::_('COM_CONFIG_ERROR_HELPREFRESH_FETCH'), 'error');		} elseif (!JFile::write(JPATH_BASE . '/help/helpsites.xml', $data))		{			$this->setRedirect('index.php?option=com_config', JText::_('COM_CONFIG_ERROR_HELPREFRESH_ERROR_STORE'), 'error');		}		else		{			$this->setRedirect('index.php?option=com_config', JText::_('COM_CONFIG_HELPREFRESH_SUCCESS'));		}	}	/**	 * Method to remove the root property from the configuration.	 *	 * @return  bool	True on success, false on failure.	 * @since   1.5	 */	public function removeroot()	{		// Check for request forgeries.		JSession::checkToken('get') or die('Invalid Token');		// Check if the user is authorized to do this.		if (!JFactory::getUser()->authorise('core.admin'))		{			JFactory::getApplication()->redirect('index.php', JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Initialise model.		$model	= $this->getModel('Application');		// Attempt to save the configuration and remove root.		$return = $model->removeroot();		// Check the return value.		if ($return === false)		{			// Save failed, go back to the screen and display a notice.			$this->setMessage(JText::sprintf('JERROR_SAVE_FAILED', $model->getError()), 'error');			$this->setRedirect('index.php');			return false;		}		// Set the success message.		$message = JText::_('COM_CONFIG_SAVE_SUCCESS');		// Set the redirect based on the task.		$this->setRedirect('index.php', $message);		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');$published	= $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_TAGS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_TAGS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-tag-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('tag.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Contact component helper. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	$vName	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_CONTACT_SUBMENU_CONTACTS'),			'index.php?option=com_contact&view=contacts',			$vName == 'contacts'		);		JHtmlSidebar::addEntry(			JText::_('COM_CONTACT_SUBMENU_CATEGORIES'),			'index.php?option=com_categories&extension=com_contact',			$vName == 'categories'		);		if ($vName == 'categories')		{			JToolbarHelper::title(				JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', JText::_('com_contact')),				'contact-categories');		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The category ID.	 * @param   integer  The contact ID.	 *	 * @return  JObject	 * @since   1.6	 */	public static function getActions($categoryId = 0, $contactId = 0)	{		$user	= JFactory::getUser();		$result	= new JObject;		if (empty($contactId) && empty($categoryId))		{			$assetName = 'com_contact';			$level = 'component';		}		elseif (empty($contactId))		{			$assetName = 'com_contact.category.'.(int) $categoryId;			$level = 'category';		}		else		{			$assetName = 'com_contact.contact.'.(int) $contactId;			$level = 'category';		}		$actions = JAccess::getActions('com_contact', $level);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Group class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/group/ * @since       13.1 */class JFacebookGroup extends JFacebookObject{	/**	 * Method to read a group. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string  $group  The group id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getGroup($group)	{		return $this->get($group);	}	/**	 * Method to get the group's wall. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string   $group   The group id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getFeed($group, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($group, 'feed', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the group's members. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string   $group   The group id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getMembers($group, $limit = 0, $offset = 0)	{		return $this->getConnection($group, 'members', '', $limit, $offset);	}	/**	 * Method to get the group's docs. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string   $group   The group id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getDocs($group, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($group, 'docs', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the groups's picture. Requires authentication and user_groups or friends_groups permission.	 *	 * @param   string  $group  The group id.	 * @param   string  $type   To request a different photo use square | small | normal | large.	 *	 * @return  string   The URL to the group's picture.	 *	 * @since   13.1	 */	public function getPicture($group, $type = null)	{		if ($type)		{			$type = '?type=' . $type;		}		return $this->getConnection($group, 'picture', $type);	}	/**	 * Method to post a link on group's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $group    The group id.	 * @param   string  $link     Link URL.	 * @param   strin   $message  Link message.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createLink($group, $link, $message = null)	{		// Set POST request parameters.		$data = array();		$data['link'] = $link;		if ($message)		{			$data['message'] = $message;		}		return $this->createConnection($group, 'feed', $data);	}	/**	 * Method to delete a link. Requires authentication.	 *	 * @param   mixed  $link  The Link ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLink($link)	{		return $this->deleteConnection($link);	}	/**	 * Method to post on group's wall. Message or link parameter is required. Requires authentication and publish_stream permission.	 *	 * @param   string  $group        The group id.	 * @param   string  $message      Post message.	 * @param   string  $link         Post URL.	 * @param   string  $picture      Post thumbnail image (can only be used if link is specified)	 * @param   string  $name         Post name (can only be used if link is specified).	 * @param   string  $caption      Post caption (can only be used if link is specified).	 * @param   string  $description  Post description (can only be used if link is specified).	 * @param   array   $actions      Post actions array of objects containing name and link.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createPost($group, $message = null, $link = null, $picture = null, $name = null, $caption = null,		$description = null, $actions = null)	{		// Set POST request parameters.		if ($message)		{			$data['message'] = $message;		}		if ($link)		{			$data['link'] = $link;		}		if ($name)		{			$data['name'] = $name;		}		if ($caption)		{			$data['caption'] = $caption;		}		if ($description)		{			$data['description'] = $description;		}		if ($actions)		{			$data['actions'] = $actions;		}		if ($picture)		{			$data['picture'] = $picture;		}		return $this->createConnection($group, 'feed', $data);	}	/**	 * Method to delete a post. Note: you can only delete the post if it was created by the current user. Requires authentication.	 *	 * @param   string  $post  The Post ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deletePost($post)	{		return $this->deleteConnection($post);	}	/**	 * Method to post a status message on behalf of the user on the group's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $group    The group id.	 * @param   string  $message  Status message content.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createStatus($group, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($group, 'feed', $data);	}	/**	 * Method to delete a status. Note: you can only delete the status if it was created by the current user. Requires authentication.	 *	 * @param   string  $status  The Status ID.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteStatus($status)	{		return $this->deleteConnection($status);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Public cache handler * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheController{	/**	 * @var    JCache	 * @since  11.1	 */	public $cache;	/**	 * @var    array  Array of options	 * @since  11.1	 */	public $options;	/**	 * Constructor	 *	 * @param   array  $options  Array of options	 *	 * @since   11.1	 */	public function __construct($options)	{		$this->cache = new JCache($options);		$this->options = & $this->cache->_options;		// Overwrite default options with given options		foreach ($options as $option => $value)		{			if (isset($options[$option]))			{				$this->options[$option] = $options[$option];			}		}	}	/**	 * Magic method to proxy JCacheControllerMethods	 *	 * @param   string  $name       Name of the function	 * @param   array   $arguments  Array of arguments for the function	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function __call($name, $arguments)	{		$nazaj = call_user_func_array(array($this->cache, $name), $arguments);		return $nazaj;	}	/**	 * Returns a reference to a cache adapter object, always creating it	 *	 * @param   string  $type     The cache object type to instantiate; default is output.	 * @param   array   $options  Array of options	 *	 * @return  JCache  A JCache object	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($type = 'output', $options = array())	{		self::addIncludePath(JPATH_PLATFORM . '/joomla/cache/controller');		$type = strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $type));		$class = 'JCacheController' . ucfirst($type);		if (!class_exists($class))		{			// Search for the class file in the JCache include paths.			jimport('joomla.filesystem.path');			if ($path = JPath::find(self::addIncludePath(), strtolower($type) . '.php'))			{				include_once $path;			}			else			{				throw new RuntimeException('Unable to load Cache Controller: ' . $type, 500);			}		}		return new $class($options);	}	/**	 * Set caching enabled state	 *	 * @param   boolean  $enabled  True to enable caching	 *	 * @return  void	 *	 * @since   11.1	 */	public function setCaching($enabled)	{		$this->cache->setCaching($enabled);	}	/**	 * Set cache lifetime	 *	 * @param   integer  $lt  Cache lifetime	 *	 * @return  void	 *	 * @since   11.1	 */	public function setLifeTime($lt)	{		$this->cache->setLifeTime($lt);	}	/**	 * Add a directory where JCache should search for controllers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array   An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!empty($path) && !in_array($path, $paths))		{			jimport('joomla.filesystem.path');			array_unshift($paths, JPath::clean($path));		}		return $paths;	}	/**	 * Get stored cached data by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  mixed   False on no result, cached object otherwise	 *	 * @since   11.1	 */	public function get($id, $group = null)	{		$data = false;		$data = $this->cache->get($id, $group);		if ($data === false)		{			$locktest = new stdClass;			$locktest->locked = null;			$locktest->locklooped = null;			$locktest = $this->cache->lock($id, $group);			if ($locktest->locked == true && $locktest->locklooped == true)			{				$data = $this->cache->get($id, $group);			}			if ($locktest->locked == true)			{				$this->cache->unlock($id, $group);			}		}		// Check again because we might get it from second attempt		if ($data !== false)		{			// Trim to fix unserialize errors			$data = unserialize(trim($data));		}		return $data;	}	/**	 * Store data to cache by id and group	 *	 * @param   mixed    $data        The data to store	 * @param   string   $id          The cache data id	 * @param   string   $group       The cache data group	 * @param   boolean  $wrkarounds  True to use wrkarounds	 *	 * @return  boolean  True if cache stored	 * 	 * @since   11.1	 */	public function store($data, $id, $group = null, $wrkarounds = true)	{		$locktest = new stdClass;		$locktest->locked = null;		$locktest->locklooped = null;		$locktest = $this->cache->lock($id, $group);		if ($locktest->locked == false && $locktest->locklooped == true)		{			$locktest = $this->cache->lock($id, $group);		}		$sucess = $this->cache->store(serialize($data), $id, $group);		if ($locktest->locked == true)		{			$this->cache->unlock($id, $group);		}		return $sucess;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>		<li class="imgOutline thumbnail height-80 width-80 center">			<?php if ($user->authorise('core.delete', 'com_media')):?>				<a class="close delete-item" target="_top" href="index.php?option=com_media&amp;task=file.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_img->name; ?>" rel="<?php echo $this->_tmp_img->name; ?>" title="<?php echo JText::_('JACTION_DELETE');?>">x</a>				<input class="pull-left" type="checkbox" name="rm[]" value="<?php echo $this->_tmp_img->name; ?>" />				<div class="clearfix"></div>			<?php endif;?>			<div class="height-50">				<a class="img-preview" href="<?php echo COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>" >					<?php echo JHtml::_('image', COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative, JText::sprintf('COM_MEDIA_IMAGE_TITLE', $this->_tmp_img->title, JHtml::_('number.bytes', $this->_tmp_img->size)), array('width' => $this->_tmp_img->width_60, 'height' => $this->_tmp_img->height_60)); ?>				</a>			</div>			<div class="small">				<a href="<?php echo COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>" class="preview"><?php echo JHtml::_('string.truncate', $this->_tmp_img->name, 10, false); ?></a>			</div>		</li><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API User class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1*/class JOpenstreetmapUser extends JOpenstreetmapObject{	/**	 * Method to get user details	 *  	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function getDetails()	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/details';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters);		return $response->body;	}	/**	 * Method to get preferences	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function getPreferences()	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/preferences';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters);		return $response->body;	}	/**	 * Method to replace user preferences	 * 	 * @param   array  $preferences  array of new preferences	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function replacePreferences($preferences)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/preferences';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create a list of preferences		$preference_list = '';		if (!empty($preferences))		{			foreach ($preferences as $key => $value)			{				$preference_list .= '<preference k="' . $key . '" v="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>			<osm version="0.6" generator="JOpenstreetmap">				<preferences>'				. $preference_list .				'</preferences>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to change user preferences	 * 	 * @param   string  $key         key of the preference	 * @param   string  $preference  new value for preference	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function changePreference($key, $preference)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/preferences/' . $key;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $preference);		return $response->body;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_status * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$config	= JFactory::getConfig();$user   = JFactory::getUser();$db     = JFactory::getDbo();$lang   = JFactory::getLanguage();$input  = JFactory::getApplication()->input;// Get the number of unread messages in your inbox.$query	= $db->getQuery(true)	->select('COUNT(*)')	->from('#__messages')	->where('state = 0 AND user_id_to = '.(int) $user->get('id'));$db->setQuery($query);$unread = (int) $db->loadResult();// Get the number of back-end logged in users.$query->clear()	->select('COUNT(session_id)')	->from('#__session')	->where('guest = 0 AND client_id = 1');$db->setQuery($query);$count = '<span class="badge">' . (int) $db->loadResult() . '</span>';// Set the inbox link.if ($input->getBool('hidemainmenu')){	$inboxLink = '';}else{	$inboxLink = JRoute::_('index.php?option=com_messages');}// Set the inbox class.if ($unread){	$inboxClass = 'unread-messages';} else {	$inboxClass = 'no-unread-messages';}// Get the number of frontend logged in users.$query->clear()	->select('COUNT(session_id)')	->from('#__session')	->where('guest = 0 AND client_id = 0');$db->setQuery($query);$online_num = '<span class="badge">' . (int) $db->loadResult() . '</span>';require JModuleHelper::getLayoutPath('mod_status', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Parser class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */abstract class JFeedParser{	/**	 * @var    string  The feed element name for the entry elements.	 * @since  12.3	 */	protected $entryElementName = 'entry';	/**	 * @var    array	 * @since  12.3	 */	protected $namespaces = array();	/**	 * @var    XMLReader	 * @since  12.3	 */	protected $stream;	/**	 * Constructor.	 *	 * @param   XMLReader  $stream  The XMLReader stream object for the feed.	 *	 * @since   12.3	 */	public function __construct(XMLReader $stream)	{		$this->stream  = $stream;	}	/**	 * Method to parse the feed into a JFeed object.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function parse()	{		$feed = new JFeed;		// Detect the feed version.		$this->initialise();		// Let's get this party started...		do		{			// Expand the element for processing.			$el = new SimpleXMLElement($this->stream->readOuterXml());			// Get the list of namespaces used within this element.			$ns = $el->getNamespaces(true);			// Get an array of available namespace objects for the element.			$namespaces = array();			foreach ($ns as $prefix => $uri)			{				// Ignore the empty namespace prefix.				if (empty($prefix))				{					continue;				}				// Get the necessary namespace objects for the element.				$namespace = $this->fetchNamespace($prefix);				if ($namespace)				{					$namespaces[] = $namespace;				}			}			// Process the element.			$this->processElement($feed, $el, $namespaces);			// Skip over this element's children since it has been processed.			$this->moveToClosingElement();		}		while ($this->moveToNextElement());		return $feed;	}	/**	 * Method to register a namespace handler object.	 *	 * @param   string                $prefix     The XML namespace prefix for which to register the namespace object.	 * @param   JFeedParserNamespace  $namespace  The namespace object to register.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function registerNamespace($prefix, JFeedParserNamespace $namespace)	{		$this->namespaces[$prefix] = $namespace;		return $this;	}	/**	 * Method to initialise the feed for parsing.  If child parsers need to detect versions or other	 * such things this is where you'll want to implement that logic.	 *	 * @return  void	 *	 * @since   12.3	 */	abstract protected function initialise();	/**	 * Method to parse a specific feed element.	 *	 * @param   JFeed             $feed        The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el          The current XML element object to handle.	 * @param   array             $namespaces  The array of relevant namespace objects to process for the element.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function processElement(JFeed $feed, SimpleXMLElement $el, array $namespaces)	{		// Build the internal method name.		$method = 'handle' . ucfirst($el->getName());		// If we are dealing with an item then it is feed entry time.		if ($el->getName() == $this->entryElementName)		{			// Create a new feed entry for the item.			$entry = new JFeedEntry;			// First call the internal method.			$this->processFeedEntry($entry, $el);			foreach ($namespaces as $namespace)			{				if ($namespace instanceof JFeedParserNamespace)				{					$namespace->processElementForFeedEntry($entry, $el);				}			}			// Add the new entry to the feed.			$feed->addEntry($entry);		}		// Otherwise we treat it like any other element.		else		{			// First call the internal method.			if (is_callable(array($this, $method)))			{				$this->$method($feed, $el);			}			foreach ($namespaces as $namespace)			{				if ($namespace instanceof JFeedParserNamespace)				{					$namespace->processElementForFeed($feed, $el);				}			}		}	}	/**	 * Method to get a namespace object for a given namespace prefix.	 *	 * @param   string  $prefix  The XML prefix for which to fetch the namespace object.	 *	 * @return  mixed  JFeedParserNamespace or false if none exists.	 *	 * @since   12.3	 */	protected function fetchNamespace($prefix)	{		if (isset($this->namespaces[$prefix]))		{			return $this->namespaces[$prefix];		}		$className = get_class($this) . ucfirst($prefix);		if (class_exists($className))		{			$this->namespaces[$prefix] = new $className;			return $this->namespaces[$prefix];		}		return false;	}	/**	 * Method to move the stream parser to the next XML element node.	 *	 * @param   string  $name  The name of the element for which to move the stream forward until is found.	 *	 * @return  boolean  True if the stream parser is on an XML element node.	 *	 * @since   12.3	 */	protected function moveToNextElement($name = null)	{		// Only keep looking until the end of the stream.		while ($this->stream->read())		{			// As soon as we get to the next ELEMENT node we are done.			if ($this->stream->nodeType == XMLReader::ELEMENT)			{				// If we are looking for a specific name make sure we have it.				if (isset($name) && ($this->stream->name != $name))				{					continue;				}				return true;			}		}		return false;	}	/**	 * Method to move the stream parser to the closing XML node of the current element.	 *	 * @return  void	 *	 * @since   12.3	 * @throws  RuntimeException  If the closing tag cannot be found.	 */	protected function moveToClosingElement()	{		// If we are on a self-closing tag then there is nothing to do.		if ($this->stream->isEmptyElement)		{			return;		}		// Get the name and depth for the current node so that we can match the closing node.		$name  = $this->stream->name;		$depth = $this->stream->depth;		// Only keep looking until the end of the stream.		while ($this->stream->read())		{			// If we have an END_ELEMENT node with the same name and depth as the node we started with we have a bingo. :-)			if (($this->stream->name == $name) && ($this->stream->depth == $depth) && ($this->stream->nodeType == XMLReader::END_ELEMENT))			{				return;			}		}		throw new RuntimeException('Unable to find the closing XML node.');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of weblinks. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewWeblinks extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @return  void	 */	public function display($tpl = null)	{		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		WeblinksHelper::addSubmenu('weblinks');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/weblinks.php';		$state	= $this->get('State');		$canDo	= WeblinksHelper::getActions($state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_WEBLINKS_MANAGER_WEBLINKS'), 'weblinks.png');		if (count($user->getAuthorisedCategories('com_weblinks', 'core.create')) > 0)		{			JToolbarHelper::addNew('weblink.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('weblink.edit');		}		if ($canDo->get('core.edit.state')) {			JToolbarHelper::publish('weblinks.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('weblinks.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('weblinks.archive');			JToolbarHelper::checkin('weblinks.checkin');		}		if ($state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'weblinks.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('weblinks.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_weblinks');		}		JToolbarHelper::help('JHELP_COMPONENTS_WEBLINKS_LINKS');		JHtmlSidebar::setAction('index.php?option=com_weblinks&view=weblinks');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_weblinks'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'a.hits' => JText::_('JGLOBAL_HITS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users mail model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelMail extends JModelAdmin{	/**	 * Method to get the row form.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// Get the form.		$form = $this->loadForm('com_users.mail', 'mail', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_users.display.mail.data', array());		$this->preprocessData('com_users.mail', $data);		return $data;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}	public function send()	{		$app    = JFactory::getApplication();		$data   = $app->input->post->get('jform', array(), 'array');		$user   = JFactory::getUser();		$access = new JAccess;		$db     = $this->getDbo();		$mode		= array_key_exists('mode', $data) ? (int) $data['mode'] : 0;		$subject	= array_key_exists('subject', $data) ? $data['subject'] : '';		$grp		= array_key_exists('group', $data) ? (int) $data['group'] : 0;		$recurse	= array_key_exists('recurse', $data) ? (int) $data['recurse'] : 0;		$bcc		= array_key_exists('bcc', $data) ? (int) $data['bcc'] : 0;		$disabled	= array_key_exists('disabled', $data) ? (int) $data['disabled'] : 0;		$message_body = array_key_exists('message', $data) ? $data['message'] : '';		// automatically removes html formatting		if (!$mode)		{			$message_body = JFilterInput::getInstance()->clean($message_body, 'string');		}		// Check for a message body and subject		if (!$message_body || !$subject)		{			$app->setUserState('com_users.display.mail.data', $data);			$this->setError(JText::_('COM_USERS_MAIL_PLEASE_FILL_IN_THE_FORM_CORRECTLY'));			return false;		}		// get users in the group out of the acl		$to = $access->getUsersByGroup($grp, $recurse);		// Get all users email and group except for senders		$query	= $db->getQuery(true)			->select('email')			->from('#__users')			->where('id != '.(int) $user->get('id'));		if ($grp !== 0)		{			if (empty($to))			{				$query->where('0');			} else {				$query->where('id IN (' . implode(',', $to) . ')');			}		}		if ($disabled == 0){			$query->where("block = 0");		}		$db->setQuery($query);		$rows = $db->loadColumn();		// Check to see if there are any users in this group before we continue		if (!count($rows))		{			$app->setUserState('com_users.display.mail.data', $data);			if (in_array($user->id, $to))			{				$this->setError(JText::_('COM_USERS_MAIL_ONLY_YOU_COULD_BE_FOUND_IN_THIS_GROUP'));			}			else			{				$this->setError(JText::_('COM_USERS_MAIL_NO_USERS_COULD_BE_FOUND_IN_THIS_GROUP'));			}			return false;		}		// Get the Mailer		$mailer = JFactory::getMailer();		$params = JComponentHelper::getParams('com_users');		// Build email message format.		$mailer->setSender(array($app->getCfg('mailfrom'), $app->getCfg('fromname')));		$mailer->setSubject($params->get('mailSubjectPrefix') . stripslashes($subject));		$mailer->setBody($message_body . $params->get('mailBodySuffix'));		$mailer->IsHTML($mode);		// Add recipients		if ($bcc)		{			$mailer->addBCC($rows);			$mailer->addRecipient($app->getCfg('mailfrom'));		}		else		{			$mailer->addRecipient($rows);		}		// Send the Mail		$rs	= $mailer->Send();		// Check for an error		if ($rs instanceof Exception)		{			$app->setUserState('com_users.display.mail.data', $data);			$this->setError($rs->getError());			return false;		} elseif (empty($rs))		{			$app->setUserState('com_users.display.mail.data', $data);			$this->setError(JText::_('COM_USERS_MAIL_THE_MAIL_COULD_NOT_BE_SENT'));			return false;		}		else		{			// Fill the data (specially for the 'mode', 'group' and 'bcc': they could not exist in the array			// when the box is not checked and in this case, the default value would be used instead of the '0'			// one)			$data['mode'] = $mode;			$data['subject'] = $subject;			$data['group'] = $grp;			$data['recurse'] = $recurse;			$data['bcc'] = $bcc;			$data['message'] = $message_body;			$app->setUserState('com_users.display.mail.data', array());			$app->enqueueMessage(JText::plural('COM_USERS_MAIL_EMAIL_SENT_TO_N_USERS', count($rows)), 'message');			return true;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * About Page Model * * @package     Joomla.Administrator * @subpackage  com_content */class ContentModelFeatured extends ContentModelArticles{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'state', 'a.state',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'created_by_alias', 'a.created_by_alias',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'hits', 'a.hits',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'fp.ordering',			);		}		parent::__construct($config);	}	/**	 * @param   boolean    True to join selected foreign information	 *	 * @return  string	 */	protected function getListQuery($resolveFKs = true)	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.checked_out, a.checked_out_time, a.catid, a.state, a.access, a.created, a.hits,' .					'a.language, a.created_by_alias, a.publish_up, a.publish_down'			)		);		$query->from('#__content AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the content table.		$query->select('fp.ordering')			->join('INNER', '#__content_frontpage AS fp ON fp.content_id = a.id');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the users for the author.		$query->select('ua.name AS author_name')			->join('LEFT', '#__users AS ua ON ua.id = a.created_by');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state = 0 OR a.state = 1)');		}		// Filter by a single or group of categories.		$baselevel = 1;		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$cat_tbl = JTable::getInstance('Category', 'JTable');			$cat_tbl->load($categoryId);			$rgt = $cat_tbl->rgt;			$lft = $cat_tbl->lft;			$baselevel = (int) $cat_tbl->level;			$query->where('c.lft >= ' . (int) $lft)				->where('c.rgt <= ' . (int) $rgt);		}		elseif (is_array($categoryId))		{			JArrayHelper::toInteger($categoryId);			$categoryId = implode(',', $categoryId);			$query->where('a.catid IN (' . $categoryId . ')');		}		// Filter on the level.		if ($level = $this->getState('filter.level'))		{			$query->where('c.level <= ' . ((int) $level + (int) $baselevel - 1));		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search);			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.title')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',(string)$query));		return $query;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * INI format handler for JRegistry. * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistryFormatINI extends JRegistryFormat{	protected static $cache = array();	/**	 * Converts an object into an INI formatted string	 * -	Unfortunately, there is no way to have ini values nested further than two	 * levels deep.  Therefore we will only go through the first two levels of	 * the object.	 *	 * @param   object  $object   Data source object.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  string  INI formatted string.	 *	 * @since   11.1	 */	public function objectToString($object, $options = array())	{		$local = array();		$global = array();		// Iterate over the object to set the properties.		foreach (get_object_vars($object) as $key => $value)		{			// If the value is an object then we need to put it in a local section.			if (is_object($value))			{				// Add the section line.				$local[] = '';				$local[] = '[' . $key . ']';				// Add the properties for this section.				foreach (get_object_vars($value) as $k => $v)				{					$local[] = $k . '=' . $this->getValueAsINI($v);				}			}			else			{				// Not in a section so add the property to the global array.				$global[] = $key . '=' . $this->getValueAsINI($value);			}		}		return implode("\n", array_merge($global, $local));	}	/**	 * Parse an INI formatted string and convert it into an object.	 *	 * @param   string  $data     INI formatted string to convert.	 * @param   mixed   $options  An array of options used by the formatter, or a boolean setting to process sections.	 *	 * @return  object   Data object.	 *	 * @since   11.1	 */	public function stringToObject($data, array $options = array())	{		$sections = (isset($options['processSections'])) ? $options['processSections'] : false;		// Check the memory cache for already processed strings.		$hash = md5($data . ':' . (int) $sections);		if (isset(self::$cache[$hash]))		{			return self::$cache[$hash];		}		// If no lines present just return the object.		if (empty($data))		{			return new stdClass;		}		$obj = new stdClass;		$section = false;		$lines = explode("\n", $data);		// Process the lines.		foreach ($lines as $line)		{			// Trim any unnecessary whitespace.			$line = trim($line);			// Ignore empty lines and comments.			if (empty($line) || ($line{0} == ';'))			{				continue;			}			if ($sections)			{				$length = strlen($line);				// If we are processing sections and the line is a section add the object and continue.				if (($line[0] == '[') && ($line[$length - 1] == ']'))				{					$section = substr($line, 1, $length - 2);					$obj->$section = new stdClass;					continue;				}			}			elseif ($line{0} == '[')			{				continue;			}			// Check that an equal sign exists and is not the first character of the line.			if (!strpos($line, '='))			{				// Maybe throw exception?				continue;			}			// Get the key and value for the line.			list ($key, $value) = explode('=', $line, 2);			// Validate the key.			if (preg_match('/[^A-Z0-9_]/i', $key))			{				// Maybe throw exception?				continue;			}			// If the value is quoted then we assume it is a string.			$length = strlen($value);			if ($length && ($value[0] == '"') && ($value[$length - 1] == '"'))			{				// Strip the quotes and Convert the new line characters.				$value = stripcslashes(substr($value, 1, ($length - 2)));				$value = str_replace('\n', "\n", $value);			}			else			{				// If the value is not quoted, we assume it is not a string.				// If the value is 'false' assume boolean false.				if ($value == 'false')				{					$value = false;				}				// If the value is 'true' assume boolean true.				elseif ($value == 'true')				{					$value = true;				}				// If the value is numeric than it is either a float or int.				elseif (is_numeric($value))				{					// If there is a period then we assume a float.					if (strpos($value, '.') !== false)					{						$value = (float) $value;					}					else					{						$value = (int) $value;					}				}			}			// If a section is set add the key/value to the section, otherwise top level.			if ($section)			{				$obj->$section->$key = $value;			}			else			{				$obj->$key = $value;			}		}		// Cache the string to save cpu cycles -- thus the world :)		self::$cache[$hash] = clone ($obj);		return $obj;	}	/**	 * Method to get a value in an INI format.	 *	 * @param   mixed  $value  The value to convert to INI format.	 *	 * @return  string  The value in INI format.	 *	 * @since   11.1	 */	protected function getValueAsINI($value)	{		$string = '';		switch (gettype($value))		{			case 'integer':			case 'double':				$string = $value;				break;			case 'boolean':				$string = $value ? 'true' : 'false';				break;			case 'string':				// Sanitize any CRLF characters..				$string = '"' . str_replace(array("\r\n", "\n"), '\\n', $value) . '"';				break;		}		return $string;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Map table class for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderTableMap extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  &$db  JDatabaseDriver connector object.	 *	 * @since   2.5	 */	public function __construct(&$db)	{		parent::__construct('#__finder_taxonomy', 'id', $db);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table. The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An array of primary key values to update.  If not	 *                            set the instance property value is used. [optional]	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published] [optional]	 * @param   integer  $userId  The user id of the user performing the operation. [optional]	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k . '=' . implode(' OR ' . $k . '=', $pks);		// Update the publishing state for rows with the given primary keys.		$query = $this->_db->getQuery(true)			->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('state') . ' = ' . (int) $state)			->where($where);		$this->_db->setQuery($query);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Components helper for com_config * * @package     Joomla.Administrator * @subpackage  com_config * @since       3.0 */class ConfigHelperComponent{	/**	 * Get an array of all enabled components.	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getAllComponents()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('element')			->from('#__extensions')			->where('type = ' . $db->quote('component'))			->where('enabled = 1');		$db->setQuery($query);		$result = $db->loadColumn();		return $result;	}	/**	 * Returns true if the component has configuration options.	 *	 * @param   string  $components	 *	 * @return  boolean	 *	 * @since   3.0	 */	public static function hasComponentConfig($component)	{		return is_file(JPATH_ADMINISTRATOR . '/components/' . $component . '/config.xml');	}	/**	 * Returns an array of all components with configuration options. By only	 * components for which the current user has 'core.manage' rights are returned.	 *	 * @param   boolean  $authCheck	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getComponentsWithConfig($authCheck = true)	{		$result = array();		$components = self::getAllComponents();		$user = JFactory::getUser();		// Remove com_config from the array as that may have weird side effects		$components = array_diff($components, array('com_config'));		foreach ($components as $component)		{			if (self::hasComponentConfig($component) && (!$authCheck || $user->authorise('core.manage', $component)))			{				$result[] = $component;			}		}		return $result;	}	/**	 * Load the sys language for the given component.	 *	 * @param   string  $components	 *	 * @return  void	 *	 * @since   3.0	 */	public static function loadLanguageForComponents($components)	{		$lang = JFactory::getLanguage();		foreach ($components as $component)		{			if (!empty($component))				{					// Load the core file then					// Load extension-local file.					$lang->load($component . '.sys', JPATH_BASE, null, false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, null, false, false)				||	$lang->load($component . '.sys', JPATH_BASE, $lang->getDefault(), false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, $lang->getDefault(), false, false);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'plugin.cancel' || document.formvalidator.isValid(document.id('style-form')))		{			Joomla.submitform(task, document.getElementById('style-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_plugins&layout=edit&extension_id='.(int) $this->item->extension_id); ?>" method="post" name="adminForm" id="style-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('JDETAILS') ?></legend>			<ul class="adminformlist">			<li><?php echo $this->form->getLabel('name'); ?>			<?php echo $this->form->getInput('name'); ?>			<span class="readonly plg-name"><?php echo JText::_($this->item->name);?></span></li>			<li><?php echo $this->form->getLabel('enabled'); ?>			<?php echo $this->form->getInput('enabled'); ?></li>			<li><?php echo $this->form->getLabel('access'); ?>			<?php echo $this->form->getInput('access'); ?></li>			<li><?php echo $this->form->getLabel('ordering'); ?>			<?php echo $this->form->getInput('ordering'); ?></li>			<li><?php echo $this->form->getLabel('folder'); ?>			<?php echo $this->form->getInput('folder'); ?></li>			<li><?php echo $this->form->getLabel('element'); ?>			<?php echo $this->form->getInput('element'); ?></li>			<?php if ($this->item->extension_id) : ?>				<li><?php echo $this->form->getLabel('extension_id'); ?>				<?php echo $this->form->getInput('extension_id'); ?></li>			<?php endif; ?>			</ul>			<!-- Plugin metadata -->			<?php if ($this->item->xml) : ?>				<?php if ($text = trim($this->item->xml->description)) : ?>					<label id="jform_extdescription-lbl">						<?php echo JText::_('JGLOBAL_DESCRIPTION'); ?>					</label>					<div class="clr"></div>					<div class="readonly plg-desc extdescript">						<?php echo JText::_($text); ?>					</div>				<?php endif; ?>			<?php else : ?>				<?php echo JText::_('COM_PLUGINS_XML_ERR'); ?>			<?php endif; ?>		</fieldset>	</div>	<div class="col options-section">	<?php echo JHtml::_('sliders.start', 'plugin-sliders-'.$this->item->extension_id); ?>		<?php echo $this->loadTemplate('options'); ?>		<div class="clr"></div>	<?php echo JHtml::_('sliders.end'); ?>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?>	</div>	<div class="clr"></div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Contacts component * * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactViewCategory extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $categories;	protected $pagination;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		if ($category == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		// Check whether category access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Prepare the data.		// Compute the contact slug.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			$temp		= new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);			if ($item->params->get('show_email', 0) == 1)			{				$item->email_to = trim($item->email_to);				if (!empty($item->email_to) && JMailHelper::isEmailAddress($item->email_to))				{					$item->email_to = JHtml::_('email.cloak', $item->email_to);				}				else {					$item->email_to = '';				}			}		}		// Setup the category parameters.		$cparams = $category->getParams();		$category->params = clone($params);		$category->params->merge($cparams);		$children = array($category->id => $children);		$maxLevel = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=category') === false) || (strpos($active->link, '&id=' . (string) $this->category->id) === false)))		{			if ($layout = $category->params->get('category_layout'))			{				$this->setLayout($layout);			}		}		elseif (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$category->tags = new JHelperTags;		$category->tags->getItemTags('com_contact.category', $category->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTACT_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_contact' || $menu->query['view'] == 'contact' || $id != $this->category->id))		{			$path = array(array('title' => $this->category->title, 'link' => ''));			$category = $this->category->getParent();			while (($menu->query['option'] != 'com_contact' || $menu->query['view'] == 'contact' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => ContactHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->category->metadesc)		{			$this->document->setDescription($this->category->metadesc);		}		elseif (!$this->category->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->category->metakey)		{			$this->document->setMetadata('keywords', $this->category->metakey);		}		elseif (!$this->category->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->category->getMetadata()->get('author'));		}		$mdata = $this->category->getMetadata()->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}		// Add alternative feed link		if ($this->params->get('show_feed_link', 1) == 1)		{			$link	= '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link.'&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link.'&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');JHtml::_('behavior.tooltip');if (isset($this->error)) : ?>	<div class="contact-error">		<?php echo $this->error; ?>	</div><?php endif; ?><div class="contact-form">	<form id="contact-form" action="<?php echo JRoute::_('index.php'); ?>" method="post" class="form-validate form-horizontal">		<fieldset>			<legend><?php echo JText::_('COM_CONTACT_FORM_LABEL'); ?></legend>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_name'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_name'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_email'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_email'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_subject'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_subject'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_message'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_message'); ?></div>			</div>			<?php if ($this->params->get('show_email_copy')) { ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('contact_email_copy'); ?></div>					<div class="controls"><?php echo $this->form->getInput('contact_email_copy'); ?></div>				</div>			<?php } ?>			<?php //Dynamically load any additional fields from plugins. ?>			<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>				<?php if ($fieldset->name != 'contact'):?>					<?php $fields = $this->form->getFieldset($fieldset->name);?>					<?php foreach ($fields as $field) : ?>						<div class="control-group">							<?php if ($field->hidden) : ?>								<div class="controls">									<?php echo $field->input;?>								</div>							<?php else:?>								<div class="control-label">									<?php echo $field->label; ?>									<?php if (!$field->required && $field->type != "Spacer") : ?>										<span class="optional"><?php echo JText::_('COM_CONTACT_OPTIONAL');?></span>									<?php endif; ?>								</div>								<div class="controls"><?php echo $field->input;?></div>							<?php endif;?>						</div>					<?php endforeach;?>				<?php endif ?>			<?php endforeach;?>			<div class="form-actions"><button class="btn btn-primary validate" type="submit"><?php echo JText::_('COM_CONTACT_CONTACT_SEND'); ?></button>				<input type="hidden" name="option" value="com_contact" />				<input type="hidden" name="task" value="contact.submit" />				<input type="hidden" name="return" value="<?php echo $this->return_page;?>" />				<input type="hidden" name="id" value="<?php echo $this->contact->slug; ?>" />				<?php echo JHtml::_('form.token'); ?>			</div>		</fieldset>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugins component helper. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsHelper{	public static $extension = 'com_plugins';	/**	 * Configure the Linkbar.	 *	 * @param   string    The name of the active view.	 */	public static function addSubmenu($vName)	{		// No submenu for this component.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user = JFactory::getUser();		$result = new JObject;		$assetName = 'com_plugins';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string    The HTML code for the select tag	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options = array();		$options[] = JHtml::_('select.option', '1', 'JENABLED');		$options[] = JHtml::_('select.option', '0', 'JDISABLED');		return $options;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string    The HTML code for the select tag	 */	public static function folderOptions()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('DISTINCT(folder) AS value, folder AS text')			->from('#__extensions')			->where($db->quoteName('type') . ' = ' . $db->quote('plugin'))			->order('folder');		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		return $options;	}	public function parseXMLTemplateFile($templateBaseDir, $templateDir)	{		$data = new JObject;		// Check of the xml file exists		$filePath = JPath::clean($templateBaseDir . '/templates/' . $templateDir . '/templateDetails.xml');		if (is_file($filePath))		{			$xml = JInstaller::parseXMLInstallFile($filePath);			if ($xml['type'] != 'template')			{				return false;			}			foreach ($xml as $key => $value)			{				$data->set($key, $value);			}		}		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with phpsetting * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */abstract class JHtmlPhpSetting{	/**	 * Method to generate a boolean message for a value	 *	 * @param boolean $val is the value set?	 *	 * @return  string html code	 */	public static function boolean($val)	{		if ($val)		{			return JText::_('JON');		}		else		{			return JText::_('JOFF');		}	}	/**	 * Method to generate a boolean message for a value	 *	 * @param boolean $val is the value set?	 *	 * @return  string html code	 */	public static function set($val)	{		if ($val)		{			return JText::_('JYES');		}		else		{			return JText::_('JNO');		}	}	/**	 * Method to generate a string message for a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 */	public static function string($val)	{		if (empty($val))		{			return JText::_('JNONE');		}		else		{			return $val;		}	}	/**	 * Method to generate an integer from a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 *	 * @deprecated  4.0  Use intval() or casting instead.	 */	public static function integer($val)	{		JLog::add('JHtmlPhpSetting::integer() is deprecated. Use intval() or casting instead.', JLog::WARNING, 'deprecated');		return (int) $val;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to module rendering.  To use it you would * set the style attribute for the given module(s) include in your template to use the style * for each given modChrome function. * * eg.  To render a module mod_test in the submenu style, you would use the following include: * <jdoc:include type="module" name="test" style="submenu" /> * * This gives template designers ultimate control over how modules are rendered. * * NOTICE: All chrome wrapping methods should be named: modChrome_{STYLE} and take the same * two arguments. *//* * Module chrome for rendering the module in a submenu */function modChrome_no($module, &$params, &$attribs){	if ($module->content)	{		echo $module->content;	}}function modChrome_well($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"well " . htmlspecialchars($params->get('moduleclass_sfx')) . "\">";		if ($module->showtitle)		{			echo "<h3 class=\"page-header\">" . $module->title . "</h3>";		}		echo $module->content;		echo "</div>";	}}?>
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract Format for JRegistry * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */abstract class JRegistryFormat{	/**	 * @var    array  JRegistryFormat instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Returns a reference to a Format object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $type  The format to load	 *	 * @return  JRegistryFormat  Registry format handler	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public static function getInstance($type)	{		// Sanitize format type.		$type = strtolower(preg_replace('/[^A-Z0-9_]/i', '', $type));		// Only instantiate the object if it doesn't already exist.		if (!isset(self::$instances[$type]))		{			// Only load the file the class does not exist.			$class = 'JRegistryFormat' . $type;			if (!class_exists($class))			{				$path = __DIR__ . '/format/' . $type . '.php';				if (is_file($path))				{					include_once $path;				}				else				{					throw new InvalidArgumentException('Unable to load format class.', 500);				}			}			self::$instances[$type] = new $class;		}		return self::$instances[$type];	}	/**	 * Converts an object into a formatted string.	 *	 * @param   object  $object   Data Source Object.	 * @param   array   $options  An array of options for the formatter.	 *	 * @return  string  Formatted string.	 *	 * @since   11.1	 */	abstract public function objectToString($object, $options = null);	/**	 * Converts a formatted string into an object.	 *	 * @param   string  $data     Formatted string	 * @param   array   $options  An array of options for the formatter.	 *	 * @return  object  Data Object	 *	 * @since   11.1	 */	abstract public function stringToObject($data, array $options = array());}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$userId		= $user->get('id');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_languages');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=languages'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_LANGS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('languages.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist">		<thead>			<tr>				<th class="row-number-col">					<?php echo JText::_('JGRID_HEADING_ROW_NUMBER'); ?>				</th>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HEADING_TITLE_NATIVE', 'a.title_native', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_FIELD_LANG_TAG_LABEL', 'a.lang_code', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_FIELD_LANG_CODE_LABEL', 'a.sef', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HEADING_LANG_IMAGE', 'a.image', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th width="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'languages.saveorder'); ?>					<?php endif; ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HOMEPAGE', '', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.lang_id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php		foreach ($this->items as $i => $item) :			$ordering  = ($listOrder == 'a.ordering');			$canCreate = $user->authorise('core.create',     'com_languages');			$canEdit   = $user->authorise('core.edit',       'com_languages');			$canChange = $user->authorise('core.edit.state', 'com_languages');		?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo $this->pagination->getRowOffset($i); ?>				</td>				<td>					<?php echo JHtml::_('grid.id', $i, $item->lang_id); ?>				</td>				<td>					<span class="editlinktip hasTip" title="<?php echo JText::_('JGLOBAL_EDIT_ITEM');?>::<?php echo $this->escape($item->title); ?>">					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_languages&task=language.edit&lang_id='.(int) $item->lang_id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>							<?php echo $this->escape($item->title); ?>					<?php endif; ?>					</span>				</td>				<td class="center">					<?php echo $this->escape($item->title_native); ?>				</td>				<td class="center">					<?php echo $this->escape($item->lang_code); ?>				</td>				<td class="center">					<?php echo $this->escape($item->sef); ?>				</td>				<td class="center">					<?php echo $this->escape($item->image); ?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'languages.', $canChange);?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'languages.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'languages.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'languages.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'languages.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php if ($item->home == '1') : ?>						<?php echo JText::_('JYES');?>					<?php else:?>						<?php echo JText::_('JNO');?>					<?php endif;?>				</td>				<td class="center">					<?php echo $this->escape($item->lang_id); ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * RSS Feed Parser Namespace handler for iTunes. * * @package     Joomla.Platform * @subpackage  Feed * @see         http://www.apple.com/itunes/podcasts/specs.html * @since       12.3 */class JFeedParserRssItunes implements JFeedParserNamespace{	/**	 * Method to handle an element for the feed given that the itunes namespace is present.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeed(JFeed $feed, SimpleXMLElement $el)	{	}	/**	 * Method to handle the feed entry element for the feed given that the itunes namespace is present.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeedEntry(JFeedEntry $entry, SimpleXMLElement $el)	{	}}
<?php/** * @package     Joomla.Libraries * @subpackage  UCM * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Interface to handle UCM * * @package     Joomla.Libraries * @subpackage  UCM * @since       3.1 */interface JUcm{}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$lang = JFactory::getLanguage();JText::script('COM_FINDER_MAPS_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'map.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_MAPS_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=maps');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_MAPS')); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_MAPS')); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_branch"><?php echo JText::sprintf('COM_FINDER_FILTER_BY', JText::_('COM_FINDER_MAPS')); ?></label>			<select name="filter_branch" class="inputbox" id="filter_branch">				<?php echo JHtml::_('select.options', JHtml::_('finder.mapslist'), 'value', 'text', $this->state->get('filter.branch'));?>			</select>			<label class="selectlabel" for="filter_state"><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'); ?></label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?>			</button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php if (count($this->items) == 0) : ?>			<tr class="row0">				<td class="center" colspan="5">					<?php echo JText::_('COM_FINDER_MAPS_NO_CONTENT'); ?>				</td>			</tr>		<?php endif; ?>		<?php if ($this->state->get('filter.branch') != 1) : ?>			<tr class="row1">				<td colspan="5" class="center">					<a href="#" onclick="document.id('filter_branch').value='1';document.adminForm.submit();">						<?php echo JText::_('COM_FINDER_MAPS_RETURN_TO_BRANCHES'); ?></a>				</td>			</tr>		<?php endif; ?>		<?php $canChange	= JFactory::getUser()->authorise('core.manage',	'com_finder'); ?>		<?php foreach ($this->items as $i => $item) :?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php					$key = FinderHelperLanguage::branchSingular($item->title);					$title = $lang->hasKey($key) ? JText::_($key) : $item->title;					?>					<?php if ($this->state->get('filter.branch') == 1 && $item->num_children) : ?>						<a href="#" onclick="document.id('filter_branch').value='<?php echo (int) $item->id;?>';document.adminForm.submit();" title="<?php echo JText::_('COM_FINDER_MAPS_BRANCH_LINK'); ?>">							<?php echo $this->escape($title); ?></a>					<?php else: ?>						<?php echo $this->escape($title); ?>					<?php endif; ?>					<?php if ($item->num_children > 0) : ?>						<small>(<?php echo $item->num_children; ?>)</small>					<?php elseif ($item->num_nodes > 0) : ?>						<small>(<?php echo $item->num_nodes; ?>)</small>					<?php endif; ?>									</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'maps.', $canChange, 'cb'); ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Users access levels view. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewLevels extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		UsersHelper::addSubmenu('levels');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= UsersHelper::getActions();		JToolbarHelper::title(JText::_('COM_USERS_VIEW_LEVELS_TITLE'), 'levels');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('level.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('level.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'level.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_users');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_USERS_ACCESS_LEVELS');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Frontpage View class * * @package     Joomla.Site * @subpackage  com_contact * @since       1.6 */class ContactViewFeatured extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $categories;	protected $pagination;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Check whether category access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		// Prepare the data.		// Compute the contact slug.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			$temp		= new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);			if ($item->params->get('show_email', 0) == 1)			{				$item->email_to = trim($item->email_to);				if (!empty($item->email_to) && JMailHelper::isEmailAddress($item->email_to))				{					$item->email_to = JHtml::_('email.cloak', $item->email_to);				} else {					$item->email_to = '';				}			}		}		// Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$maxLevel         = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTACT_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API User class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/event/ * @since       13.1 */class JFacebookEvent extends JFacebookObject{	/**	 * Method to get information about an event visible to the current user. Requires authentication.	 *	 * @param   string  $event  The event id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getEvent($event)	{		return $this->get($event);	}	/**	 * Method to get the event's wall. Requires authentication.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getFeed($event, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($event, 'feed', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a link on event's feed which the current_user is or maybe attending. Requires authentication and publish_stream permission.	 *	 * @param   string  $event    The event id.	 * @param   string  $link     Link URL.	 * @param   string  $message  Link message.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createLink($event, $link, $message = null)	{		// Set POST request parameters.		$data = array();		$data['link'] = $link;		$data['message'] = $message;		return $this->createConnection($event, 'feed', $data);	}	/**	 * Method to delete a link. Requires authentication and publish_stream permission.	 *	 * @param   mixed  $link  The Link ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLink($link)	{		return $this->deleteConnection($link);	}	/**	 * Method to post on event's wall. Message or link parameter is required. Requires authentication and publish_stream permission.	 *	 * @param   string  $event        The event id.	 * @param   string  $message      Post message.	 * @param   string  $link         Post URL.	 * @param   string  $picture      Post thumbnail image (can only be used if link is specified)	 * @param   string  $name         Post name (can only be used if link is specified).	 * @param   string  $caption      Post caption (can only be used if link is specified).	 * @param   string  $description  Post description (can only be used if link is specified).	 * @param   array   $actions      Post actions array of objects containing name and link.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createPost($event, $message = null, $link = null, $picture = null, $name = null, $caption = null,		$description = null, $actions = null)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		$data['link'] = $link;		$data['name'] = $name;		$data['caption'] = $caption;		$data['description'] = $description;		$data['actions'] = $actions;		$data['picture'] = $picture;		return $this->createConnection($event, 'feed', $data);	}	/**	 * Method to delete a post. Note: you can only delete the post if it was created by the current user.	 * Requires authentication and publish_stream permission.	 *	 * @param   string  $post  The Post ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deletePost($post)	{		return $this->deleteConnection($post);	}	/**	 * Method to post a status message on behalf of the user on the event's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $event    The event id.	 * @param   string  $message  Status message content.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createStatus($event, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($event, 'feed', $data);	}	/**	 * Method to delete a status. Note: you can only delete the post if it was created by the current user.	 * Requires authentication and publish_stream permission.	 *	 * @param   string  $status  The Status ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteStatus($status)	{		return $this->deleteConnection($status);	}	/**	 * Method to get the list of invitees for the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getInvited($event, $limit = 0, $offset = 0)	{		return $this->getConnection($event, 'invited', '', $limit, $offset);	}	/**	 * Method to check if a user is invited to the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string  $event  The event id.	 * @param   mixed   $user   Either an integer containing the user ID or a string containing the username.	 *	 * @return  array   The decoded JSON response or an empty array if the user is not invited.	 *	 * @since   13.1	 */	public function isInvited($event, $user)	{		return $this->getConnection($event, 'invited/' . $user);	}	/**	 * Method to invite users to the event. Requires authentication and create_event permission.	 *	 * @param   string  $event  The event id.	 * @param   string  $users  Comma separated list of user ids.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createInvite($event, $users)	{		// Set POST request parameters.		$data = array();		$data['users'] = $users;		return $this->createConnection($event, 'invited', $data);	}	/**	 * Method to delete a invitation. Note: you can only delete the invite if the current user is the event admin.	 * Requires authentication and rsvp_event permission.	 *	 * @param   string  $event  The event id.	 * @param   string  $user   The user id.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteInvite($event, $user)	{		return $this->deleteConnection($event, 'invited/' . $user);	}	/**	 * Method to get the list of attending users. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getAttending($event, $limit = 0, $offset = 0)	{		return $this->getConnection($event, 'attending', '', $limit, $offset);	}	/**	 * Method to check if a user is attending an event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string  $event  The event id.	 * @param   mixed   $user   Either an integer containing the user ID or a string containing the username.	 *	 * @return  array   The decoded JSON response or an empty array if the user is not invited.	 *	 * @since   13.1	 */	public function isAttending($event, $user)	{		return $this->getConnection($event, 'attending/' . $user);	}	/**	 * Method to set the current user as attending. Requires authentication and rsvp_event permission.	 *	 * @param   string  $event  The event id.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createAttending($event)	{		return $this->createConnection($event, 'attending');	}	/**	 * Method to get the list of maybe attending users. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getMaybe($event, $limit = 0, $offset = 0)	{		return $this->getConnection($event, 'maybe', '', $limit, $offset);	}	/**	 * Method to check if a user is maybe attending an event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string  $event  The event id.	 * @param   mixed   $user   Either an integer containing the user ID or a string containing the username.	 *	 * @return  array   The decoded JSON response or an empty array if the user is not invited.	 *	 * @since   13.1	 */	public function isMaybe($event, $user)	{		return $this->getConnection($event, 'maybe/' . $user);	}	/**	 * Method to set the current user as maybe attending. Requires authentication and rscp_event permission.	 *	 * @param   string  $event  The event id.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createMaybe($event)	{		return $this->createConnection($event, 'maybe');	}	/**	 * Method to get the list of users which declined the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getDeclined($event, $limit = 0, $offset = 0)	{		return $this->getConnection($event, 'declined', '', $limit, $offset);	}	/**	 * Method to check if a user responded 'no' to the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string  $event  The event id.	 * @param   mixed   $user   Either an integer containing the user ID or a string containing the username.	 *	 * @return  array   The decoded JSON response or an empty array if the user is not invited.	 *	 * @since   13.1	 */	public function isDeclined($event, $user)	{		return $this->getConnection($event, 'declined/' . $user);	}	/**	 * Method to set the current user as declined. Requires authentication and rscp_event permission.	 *	 * @param   string  $event  The event id.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createDeclined($event)	{		return $this->createConnection($event, 'declined');	}	/**	 * Method to get the list of users which have not replied to the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getNoreply($event, $limit = 0, $offset = 0)	{		return $this->getConnection($event, 'noreply', '', $limit, $offset);	}	/**	 * Method to check if a user has not replied to the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string  $event  The event id.	 * @param   mixed   $user   Either an integer containing the user ID or a string containing the username.	 *	 * @return  array   The decoded JSON response or an empty array if the user is not invited.	 *	 * @since   13.1	 */	public function isNoreply($event, $user)	{		return $this->getConnection($event, 'noreply/' . $user);	}	/**	 * Method to get the event's profile picture. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event     The event id.	 * @param   boolean  $redirect  If false this will return the URL of the picture without a 302 redirect.	 * @param   string   $type      To request a different photo use square | small | normal | large.	 *	 * @return  string   The URL to the event's profile picture.	 *	 * @since   13.1	 */	public function getPicture($event, $redirect = true, $type = null)	{		$extra_fields = '';		if ($redirect == false)		{			$extra_fields = '?redirect=false';		}		if ($type)		{			$extra_fields .= (strpos($extra_fields, '?') === false) ? '?type=' . $type : '&type=' . $type;		}		return $this->getConnection($event, 'picture', $extra_fields);	}	/**	 * Method to get photos published on event's wall. Requires authentication.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPhotos($event, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($event, 'photos', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a photo on event's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $event    The event id.	 * @param   string  $source   Path to photo.	 * @param   string  $message  Photo description.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createPhoto($event, $source, $message = null)	{		// Set POST request parameters.		$data = array();		$data[basename($source)] = '@' . realpath($source);		if ($message)		{			$data['message'] = $message;		}		return $this->createConnection($event, 'photos', $data, array('Content-Type' => 'multipart/form-data'));	}	/**	 * Method to get videos published on event's wall. Requires authentication.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getVideos($event, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($event, 'videos', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a video on event's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $event        The event id.	 * @param   string  $source       Path to photo.	 * @param   string  $title        Video title.	 * @param   string  $description  Video description.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createVideo($event, $source, $title = null, $description = null)	{		// Set POST request parameters.		$data = array();		$data[basename($source)] = '@' . realpath($source);		if ($title)		{			$data['title'] = $title;		}		if ($description)		{			$data['description'] = $description;		}		return $this->createConnection($event, 'videos', $data, array('Content-Type' => 'multipart/form-data'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$extension	= $this->escape($this->state->get('filter.extension'));$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$ordering 	= ($listOrder == 'a.lft');$saveOrder 	= ($listOrder == 'a.lft' && $listDirn == 'asc');$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><div class="categories"><form action="<?php echo JRoute::_('index.php?option=com_categories&view=categories');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">		<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CATEGORIES_ITEMS_SEARCH_FILTER'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_level"><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></label>			<select name="filter_level" class="inputbox" id="filter_level">				<option value=""><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS');?></option>				<?php echo JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'));?>			</select>			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>            <label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.lft', $listDirn, $listOrder); ?>					<?php if ($saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'categories.saveorder'); ?>					<?php endif; ?>				</th>				<th class="access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>				<th width="5%">					<?php echo JHtml::_('grid.sort', 'COM_CATEGORY_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>				</th>				<?php endif;?>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>			<?php			$originalOrders = array();			foreach ($this->items as $i => $item) :				$orderkey   = array_search($item->id, $this->ordering[$item->parent_id]);				$canEdit    = $user->authorise('core.edit',       $extension . '.category.' . $item->id);				$canCheckin = $user->authorise('core.admin',      'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canEditOwn = $user->authorise('core.edit.own',   $extension . '.category.' . $item->id) && $item->created_user_id == $userId;				$canChange  = $user->authorise('core.edit.state', $extension . '.category.' . $item->id) && $canCheckin;			?>				<tr class="row<?php echo $i % 2; ?>">					<th class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</th>					<td>						<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level - 1) ?>						<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'categories.', $canCheckin); ?>						<?php endif; ?>						<?php if ($canEdit || $canEditOwn) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_categories&task=category.edit&id='.$item->id.'&extension='.$extension);?>">								<?php echo $this->escape($item->title); ?></a>						<?php else : ?>							<?php echo $this->escape($item->title); ?>						<?php endif; ?>						<p class="smallsub" title="<?php echo $this->escape($item->path);?>">							<?php echo str_repeat('<span class="gtr">|&mdash;</span>', $item->level - 1) ?>							<?php if (empty($item->note)) : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							<?php else : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS_NOTE', $this->escape($item->alias), $this->escape($item->note));?>							<?php endif; ?></p>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'categories.', $canChange);?>					</td>					<td class="order">						<?php if ($canChange) : ?>							<?php if ($saveOrder) : ?>								<span><?php echo $this->pagination->orderUpIcon($i, isset($this->ordering[$item->parent_id][$orderkey - 1]), 'categories.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, isset($this->ordering[$item->parent_id][$orderkey + 1]), 'categories.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>							<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>							<input type="text" name="order[]" value="<?php echo $orderkey + 1;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->title; ?> order" />							<?php $originalOrders[] = $orderkey + 1; ?>						<?php else : ?>							<?php echo $orderkey + 1;?>						<?php endif; ?>					</td>					<td class="center">						<?php echo $this->escape($item->access_level); ?>					</td>					<?php if ($assoc) : ?>					<td class="center">						<?php if ($item->association):?>							<?php echo JHtml::_('CategoriesAdministrator.association', $item->id, $extension);?>						<?php endif;?>					</td>					<?php endif;?>					<td class="center nowrap">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>					</td>					<td class="center">						<span title="<?php echo sprintf('%d-%d', $item->lft, $item->rgt);?>">							<?php echo (int) $item->id; ?></span>					</td>				</tr>			<?php endforeach; ?>		</tbody>	</table><?php echo $this->pagination->getListFooter(); ?>	<div class="clr"> </div>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<input type="hidden" name="extension" value="<?php echo $extension;?>" />	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<input type="hidden" name="original_order_values" value="<?php echo implode($originalOrders, ','); ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input = JFactory::getApplication()->input;if (!JFactory::getUser()->authorise('core.manage', $input->get('extension'))){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}JLoader::register('JHtmlCategoriesAdministrator', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/html/categoriesadministrator.php');$task = $input->get('task');$controller	= JControllerLegacy::getInstance('Categories');$controller->execute($input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><div id="installer-update"><form action="<?php echo JRoute::_('index.php?option=com_installer&view=update');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<?php if ($this->showMessage) : ?>		<?php echo $this->loadTemplate('message'); ?>	<?php endif; ?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<?php if (count($this->items)) : ?>	<table class="adminlist" cellspacing="1">		<thead>			<tr>				<th class="checkmark-col"><input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" /></th>				<th class="nowrap"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?></th>				<th class="nowrap"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_INSTALLTYPE', 'extension_id', $listDirn, $listOrder); ?></th>				<th ><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_TYPE', 'type', $listDirn, $listOrder); ?></th>				<th class="width-10" class="center"><?php echo JText::_('JVERSION'); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_FOLDER', 'folder', $listDirn, $listOrder); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_CLIENT', 'client_id', $listDirn, $listOrder); ?></th>				<th class="width-25"><?php echo JText::_('COM_INSTALLER_HEADING_DETAILSURL'); ?></th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item):			$client	= $item->client_id ? JText::_('JADMINISTRATOR') : JText::_('JSITE');		?>			<tr class="row<?php echo $i % 2; ?>">				<td><?php echo JHtml::_('grid.id', $i, $item->update_id); ?></td>				<td>					<span class="editlinktip hasTip" title="<?php echo JText::_('JGLOBAL_DESCRIPTION');?>::<?php echo $item->description ? $item->description : JText::_('COM_INSTALLER_MSG_UPDATE_NODESC'); ?>">					<?php echo $item->name; ?>					</span>				</td>				<td class="center">					<?php echo $item->extension_id ? JText::_('COM_INSTALLER_MSG_UPDATE_UPDATE') : JText::_('COM_INSTALLER_NEW_INSTALL') ?>				</td>				<td><?php echo JText::_('COM_INSTALLER_TYPE_' . $item->type) ?></td>				<td class="center"><?php echo $item->version ?></td>				<td class="center"><?php echo @$item->folder != '' ? $item->folder : JText::_('COM_INSTALLER_TYPE_NONAPPLICABLE'); ?></td>				<td class="center"><?php echo $client; ?></td>				<td><?php echo $item->detailsurl ?>					<?php if (isset($item->infourl)) : ?>					<br /><a href="<?php echo $item->infourl;?>"><?php echo $item->infourl;?></a>					<?php endif; ?>				</td>			</tr>		<?php endforeach;?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<?php else : ?>		<p class="nowarning"><?php echo JText::_('COM_INSTALLER_MSG_UPDATE_NOUPDATES'); ?></p>	<?php endif; ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelTracks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'name', 'b.name',				'cl.name', 'client_name',				'cat.title', 'category_title',				'track_type', 'a.track_type',				'count', 'a.count',				'track_date', 'a.track_date',			);		}		parent::__construct($config);	}	/**	 * @since   1.6	 */	protected $basename;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$type = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type');		$this->setState('filter.type', $type);		$begin = $this->getUserStateFromRequest($this->context . '.filter.begin', 'filter_begin', '', 'string');		$this->setState('filter.begin', $begin);		$end = $this->getUserStateFromRequest($this->context . '.filter.end', 'filter_end', '', 'string');		$this->setState('filter.end', $end);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('b.name', 'asc');	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		require_once JPATH_COMPONENT . '/helpers/banners.php';		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			'a.track_date as track_date,'				. 'a.track_type as track_type,'				. $db->quoteName('a.count') . ' as ' . $db->quoteName('count')		);		$query->from($db->quoteName('#__banner_tracks') . ' AS a');		// Join with the banners		$query->join('LEFT', $db->quoteName('#__banners') . ' as b ON b.id=a.banner_id')			->select('b.name as name');		// Join with the client		$query->join('LEFT', $db->quoteName('#__banner_clients') . ' as cl ON cl.id=b.cid')			->select('cl.name as client_name');		// Join with the category		$query->join('LEFT', $db->quoteName('#__categories') . ' as cat ON cat.id=b.catid')			->select('cat.title as category_title');		// Filter by type		$type = $this->getState('filter.type');		if (!empty($type))		{			$query->where('a.track_type = ' . (int) $type);		}		// Filter by client		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('b.cid = ' . (int) $clientId);		}		// Filter by category		$catedoryId = $this->getState('filter.category_id');		if (is_numeric($catedoryId))		{			$query->where('b.catid = ' . (int) $catedoryId);		}		// Filter by begin date		$begin = $this->getState('filter.begin');		if (!empty($begin))		{			$query->where('a.track_date >= ' . $db->quote($begin));		}		// Filter by end date		$end = $this->getState('filter.end');		if (!empty($end))		{			$query->where('a.track_date <= ' . $db->quote($end));		}		// Add the list ordering clause.		$orderCol = $this->getState('list.ordering', 'name');		$query->order($db->escape($orderCol) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to delete rows.	 *	 * @param   array  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 */	public function delete()	{		$user = JFactory::getUser();		$categoryId = $this->getState('category_id');		// Access checks.		if ($categoryId)		{			$allow = $user->authorise('core.delete', 'com_banners.category.' . (int) $categoryId);		}		else		{			$allow = $user->authorise('core.delete', 'com_banners');		}		if ($allow)		{			// Delete tracks from this banner			$db = $this->getDbo();			$query = $db->getQuery(true)				->delete($db->quoteName('#__banner_tracks'));			// Filter by type			$type = $this->getState('filter.type');			if (!empty($type))			{				$query->where('track_type = ' . (int) $type);			}			// Filter by begin date			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$query->where('track_date >= ' . $db->quote($begin));			}			// Filter by end date			$end = $this->getState('filter.end');			if (!empty($end))			{				$query->where('track_date <= ' . $db->quote($end));			}			$where = '1';			// Filter by client			$clientId = $this->getState('filter.client_id');			if (!empty($clientId))			{				$where .= ' AND cid = ' . (int) $clientId;			}			// Filter by category			if (!empty($categoryId))			{				$where .= ' AND catid = ' . (int) $categoryId;			}			$query->where('banner_id IN (SELECT id FROM ' . $db->quoteName('#__banners') . ' WHERE ' . $where . ')');			$db->setQuery($query);			$this->setError((string) $query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));		}		return true;	}	/**	 * Get file name	 *	 * @return  string    The file name	 * @since   1.6	 */	public function getBaseName()	{		if (!isset($this->basename))		{			$app = JFactory::getApplication();			$basename = $this->getState('basename');			$basename = str_replace('__SITE__', $app->getCfg('sitename'), $basename);			$categoryId = $this->getState('filter.category_id');			if (is_numeric($categoryId))			{				if ($categoryId > 0)				{					$basename = str_replace('__CATID__', $categoryId, $basename);				}				else				{					$basename = str_replace('__CATID__', '', $basename);				}				$categoryName = $this->getCategoryName();				$basename = str_replace('__CATNAME__', $categoryName, $basename);			}			else			{				$basename = str_replace('__CATID__', '', $basename);				$basename = str_replace('__CATNAME__', '', $basename);			}			$clientId = $this->getState('filter.client_id');			if (is_numeric($clientId))			{				if ($clientId > 0)				{					$basename = str_replace('__CLIENTID__', $clientId, $basename);				}				else				{					$basename = str_replace('__CLIENTID__', '', $basename);				}				$clientName = $this->getClientName();				$basename = str_replace('__CLIENTNAME__', $clientName, $basename);			}			else			{				$basename = str_replace('__CLIENTID__', '', $basename);				$basename = str_replace('__CLIENTNAME__', '', $basename);			}			$type = $this->getState('filter.type');			if ($type > 0)			{				$basename = str_replace('__TYPE__', $type, $basename);				$typeName = JText::_('COM_BANNERS_TYPE' . $type);				$basename = str_replace('__TYPENAME__', $typeName, $basename);			}			else			{				$basename = str_replace('__TYPE__', '', $basename);				$basename = str_replace('__TYPENAME__', '', $basename);			}			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$basename = str_replace('__BEGIN__', $begin, $basename);			}			else			{				$basename = str_replace('__BEGIN__', '', $basename);			}			$end = $this->getState('filter.end');			if (!empty($end))			{				$basename = str_replace('__END__', $end, $basename);			}			else			{				$basename = str_replace('__END__', '', $basename);			}			$this->basename = $basename;		}		return $this->basename;	}	/**	 * Get the category name.	 *	 * @return  string    The category name	 * @since   1.6	 */	protected function getCategoryName()	{		$categoryId = $this->getState('filter.category_id');		if ($categoryId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('title')				->from($db->quoteName('#__categories'))				->where($db->quoteName('id') . '=' . $db->quote($categoryId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCATEGORYNAME');		}		return $name;	}	/**	 * Get the category name	 *	 * @return  string    The category name.	 * @since   1.6	 */	protected function getClientName()	{		$clientId = $this->getState('filter.client_id');		if ($clientId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('name')				->from($db->quoteName('#__banner_clients'))				->where($db->quoteName('id') . '=' . $db->quote($clientId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCLIENTNAME');		}		return $name;	}	/**	 * Get the file type.	 *	 * @return  string    The file type	 * @since   1.6	 */	public function getFileType()	{		return $this->getState('compressed') ? 'zip' : 'csv';	}	/**	 * Get the mime type.	 *	 * @return  string    The mime type.	 * @since   1.6	 */	public function getMimeType()	{		return $this->getState('compressed') ? 'application/zip' : 'text/csv';	}	/**	 * Get the content	 *	 * @return  string    The content.	 * @since   1.6	 */	public function getContent()	{		if (!isset($this->content))		{			$this->content = '';			$this->content .=				'"' . str_replace('"', '""', JText::_('COM_BANNERS_HEADING_NAME')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_CLIENT')) . '","' .					str_replace('"', '""', JText::_('JCATEGORY')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_TYPE')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_COUNT')) . '","' .					str_replace('"', '""', JText::_('JDATE')) . '"' . "\n";			foreach ($this->getItems() as $item)			{				$this->content .=					'"' . str_replace('"', '""', $item->name) . '","' .						str_replace('"', '""', $item->client_name) . '","' .						str_replace('"', '""', $item->category_title) . '","' .						str_replace('"', '""', ($item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION') : JText::_('COM_BANNERS_CLICK'))) . '","' .						str_replace('"', '""', $item->count) . '","' .						str_replace('"', '""', $item->track_date) . '"' . "\n";			}			if ($this->getState('compressed'))			{				$app = JFactory::getApplication('administrator');				$files = array();				$files['track'] = array();				$files['track']['name'] = $this->getBasename() . '.csv';				$files['track']['data'] = $this->content;				$files['track']['time'] = time();				$ziproot = $app->getCfg('tmp_path') . '/' . uniqid('banners_tracks_') . '.zip';				// run the packager				jimport('joomla.filesystem.folder');				jimport('joomla.filesystem.file');				$delete = JFolder::files($app->getCfg('tmp_path') . '/', uniqid('banners_tracks_'), false, true);				if (!empty($delete))				{					if (!JFile::delete($delete))					{						// JFile::delete throws an error						$this->setError(JText::_('COM_BANNERS_ERR_ZIP_DELETE_FAILURE'));						return false;					}				}				if (!$packager = JArchive::getAdapter('zip'))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_ADAPTER_FAILURE'));					return false;				}				elseif (!$packager->create($ziproot, $files))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_CREATE_FAILURE'));					return false;				}				$this->content = file_get_contents($ziproot);			}		}		return $this->content;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Component Route Helper * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */abstract class NewsfeedsHelperRoute{	protected static $lookup;	/**	 * @param   integer  The route of the newsfeed	 */	public static function getNewsfeedRoute($id, $catid, $language = 0)	{		$needles = array(			'newsfeed'  => array((int) $id)		);		//Create the link		$link = 'index.php?option=com_newsfeeds&view=newsfeed&id='. $id;		if ((int) $catid > 1)		{			$categories = JCategories::getInstance('Newsfeeds');			$category = $categories->get((int) $catid);			if ($category)			{				//TODO Throw error that the category either not exists or is unpublished				$needles['category'] = array_reverse($category->getPath());				$needles['categories'] = $needles['category'];				$link .= '&catid='.$catid;			}		}		if ($language && $language != "*" && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang='.$lang->sef;					$needles['language'] = $language;				}			}		}		if ($item = self::_findItem($needles))		{			$link .= '&Itemid='.$item;		}		elseif ($item = self::_findItem())		{			$link .= '&Itemid='.$item;		}		return $link;	}	public static function getCategoryRoute($catid, $language = 0)	{		if ($catid instanceof JCategoryNode)		{			$id = $catid->id;			$category = $catid;		}		else		{			$id = (int) $catid;			$category = JCategories::getInstance('Newsfeeds')->get($id);		}		if ($id < 1)		{			$link = '';		}		else		{			//Create the link			$link = 'index.php?option=com_newsfeeds&view=category&id='.$id;			$needles = array(				'category' => array($id)			);			if ($language && $language != "*" && JLanguageMultilang::isEnabled())			{				$db		= JFactory::getDbo();				$query	= $db->getQuery(true)					->select('a.sef AS sef')					->select('a.lang_code AS lang_code')					->from('#__languages AS a');				$db->setQuery($query);				$langs = $db->loadObjectList();				foreach ($langs as $lang)				{					if ($language == $lang->lang_code)					{						$link .= '&lang='.$lang->sef;						$needles['language'] = $language;					}				}			}			if ($item = self::_findItem($needles))			{				$link .= '&Itemid='.$item;			}			else			{				if ($category)				{					$catids = array_reverse($category->getPath());					$needles = array(						'category' => $catids,						'categories' => $catids					);					if ($item = self::_findItem($needles))					{						$link .= '&Itemid='.$item;					}					elseif ($item = self::_findItem())					{						$link .= '&Itemid='.$item;					}				}			}		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component	= JComponentHelper::getComponent('com_newsfeeds');			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items = $menus->getItems($attributes, $values);			foreach ($items as $item)			{				if (isset($item->query) && isset($item->query['view']))				{					$view = $item->query['view'];				if (!isset(self::$lookup[$language][$view]))					{						self::$lookup[$language][$view] = array();					}					if (isset($item->query['id']))					{						// here it will become a bit tricky						// language != * can override existing entries						// language == * cannot override existing entries						if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')						{							self::$lookup[$language][$view][$item->query['id']] = $item->id;						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// if not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('behavior.modal', 'a.modal');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_banners&view=tracks'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_BANNERS_BEGIN_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-hide-lbl" for="filter_begin"><?php echo JText::_('COM_BANNERS_BEGIN_LABEL'); ?></label>			<?php echo JHtml::_('calendar', $this->state->get('filter.begin'), 'filter_begin', 'filter_begin', '%Y-%m-%d', array('size' => 10));?>			<label class="filter-hide-lbl" for="filter_end"><?php echo JText::_('COM_BANNERS_END_LABEL'); ?></label>			<?php echo JHtml::_('calendar', $this->state->get('filter.end'), 'filter_end', 'filter_end', '%Y-%m-%d', array('size' => 10));?>		</div>		<div class="filter-select">            <label class="selectlabel" for="filter_client_id">				<?php echo JText::_('COM_BANNERS_SELECT_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<option value=""><?php echo JText::_('COM_BANNERS_SELECT_CLIENT');?></option>				<?php echo JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<?php $category = $this->state->get('filter.category_id');?>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $category);?>			</select>			<label class="selectlabel" for="filter_type">				<?php echo JText::_('BANNERS_SELECT_TYPE'); ?>			</label>			<select name="filter_type" class="inputbox" id="filter_type">				<?php echo JHtml::_('select.options', array(JHtml::_('select.option', '0', JText::_('COM_BANNERS_SELECT_TYPE')), JHtml::_('select.option', 1, JText::_('COM_BANNERS_IMPRESSION')), JHtml::_('select.option', 2, JText::_('COM_BANNERS_CLICK'))), 'value', 'text', $this->state->get('filter.type'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_NAME', 'name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-20">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLIENT', 'client_name', $listDirn, $listOrder); ?>				</th>				<th class="width-20">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_TYPE', 'track_type', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_COUNT', 'count', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'JDATE', 'track_date', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo $item->name;?>				</td>				<td>					<?php echo $item->client_name;?>				</td>				<td>					<?php echo $item->category_title;?>				</td>				<td>					<?php echo $item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION'): JText::_('COM_BANNERS_CLICK');?>				</td>				<td>					<?php echo $item->count;?>				</td>				<td>					<?php echo JHtml::_('date', $item->track_date, JText::_('DATE_FORMAT_LC4').' H:i');?>				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');/** * Abstract Table class * * Parent class to all tables. * * @package     Joomla.Platform * @subpackage  Table * @link        http://docs.joomla.org/JTable * @since       11.1 * @tutorial	Joomla.Platform/jtable.cls */abstract class JTable extends JObject{	/**	 * Include paths for searching for JTable classes.	 *	 * @var    array	 * @since  12.1	 */	private static $_includePaths = array();	/**	 * Name of the database table to model.	 *	 * @var    string	 * @since  11.1	 */	protected $_tbl = '';	/**	 * Name of the primary key field in the table.	 *	 * @var    string	 * @since  11.1	 */	protected $_tbl_key = '';	/**	 * JDatabaseDriver object.	 *	 * @var    JDatabaseDriver	 * @since  11.1	 */	protected $_db;	/**	 * Should rows be tracked as ACL assets?	 *	 * @var    boolean	 * @since  11.1	 */	protected $_trackAssets = false;	/**	 * The rules associated with this record.	 *	 * @var    JAccessRules  A JAccessRules object.	 * @since  11.1	 */	protected $_rules;	/**	 * Indicator that the tables have been locked.	 *	 * @var    boolean	 * @since  11.1	 */	protected $_locked = false;	/**	 * Object constructor to set table and key fields.  In most cases this will	 * be overridden by child classes to explicitly set the table and key fields	 * for a particular database table.	 *	 * @param   string           $table  Name of the table to model.	 * @param   string           $key    Name of the primary key field in the table.	 * @param   JDatabaseDriver  $db     JDatabaseDriver object.	 *	 * @since   11.1	 */	public function __construct($table, $key, $db)	{		// Set internal variables.		$this->_tbl = $table;		$this->_tbl_key = $key;		$this->_db = $db;		// Initialise the table properties.		$fields = $this->getFields();		if ($fields)		{			foreach ($fields as $name => $v)			{				// Add the field if it is not already present.				if (!property_exists($this, $name))				{					$this->$name = null;				}			}		}		// If we are tracking assets, make sure an access field exists and initially set the default.		if (property_exists($this, 'asset_id'))		{			$this->_trackAssets = true;		}		// If the access property exists, set the default.		if (property_exists($this, 'access'))		{			$this->access = (int) JFactory::getConfig()->get('access');		}	}	/**	 * Get the columns from database table.	 *	 * @return  mixed  An array of the field names, or false if an error occurs.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function getFields()	{		static $cache = null;		if ($cache === null)		{			// Lookup the fields for this table only once.			$name = $this->_tbl;			$fields = $this->_db->getTableColumns($name, false);			if (empty($fields))			{				throw new UnexpectedValueException(sprintf('No columns found for %s table', $name));			}			$cache = $fields;		}		return $cache;	}	/**	 * Static method to get an instance of a JTable class if it can be found in	 * the table include paths.  To add include paths for searching for JTable	 * classes @see JTable::addIncludePath().	 *	 * @param   string  $type    The type (name) of the JTable class to get an instance of.	 * @param   string  $prefix  An optional prefix for the table class name.	 * @param   array   $config  An optional array of configuration values for the JTable object.	 *	 * @return  mixed    A JTable object if found or boolean false if one could not be found.	 *	 * @link    http://docs.joomla.org/JTable/getInstance	 * @since   11.1	 */	public static function getInstance($type, $prefix = 'JTable', $config = array())	{		// Sanitize and prepare the table class name.		$type = preg_replace('/[^A-Z0-9_\.-]/i', '', $type);		$tableClass = $prefix . ucfirst($type);		// Only try to load the class if it doesn't already exist.		if (!class_exists($tableClass))		{			// Search for the class file in the JTable include paths.			$path = JPath::find(self::addIncludePath(), strtolower($type) . '.php');			if ($path)			{				// Import the class file.				include_once $path;				// If we were unable to load the proper class, raise a warning and return false.				if (!class_exists($tableClass))				{					JLog::add(JText::sprintf('JLIB_DATABASE_ERROR_CLASS_NOT_FOUND_IN_FILE', $tableClass), JLog::WARNING, 'jerror');					return false;				}			}			else			{				// If we were unable to find the class file in the JTable include paths, raise a warning and return false.				JLog::add(JText::sprintf('JLIB_DATABASE_ERROR_NOT_SUPPORTED_FILE_NOT_FOUND', $type), JLog::WARNING, 'jerror');				return false;			}		}		// If a database object was passed in the configuration array use it, otherwise get the global one from JFactory.		$db = isset($config['dbo']) ? $config['dbo'] : JFactory::getDbo();		// Instantiate a new table class and return it.		return new $tableClass($db);	}	/**	 * Add a filesystem path where JTable should search for table class files.	 * You may either pass a string or an array of paths.	 *	 * @param   mixed  $path  A filesystem path or array of filesystem paths to add.	 *	 * @return  array  An array of filesystem paths to find JTable classes in.	 *	 * @link    http://docs.joomla.org/JTable/addIncludePath	 * @since   11.1	 */	public static function addIncludePath($path = null)	{		// If the internal paths have not been initialised, do so with the base table path.		if (empty(self::$_includePaths))		{			self::$_includePaths = array(__DIR__);		}		// Convert the passed path(s) to add to an array.		settype($path, 'array');		// If we have new paths to add, do so.		if (!empty($path) && !in_array($path, self::$_includePaths))		{			// Check and add each individual new path.			foreach ($path as $dir)			{				// Sanitize path.				$dir = trim($dir);				// Add to the front of the list so that custom paths are searched first.				array_unshift(self::$_includePaths, $dir);			}		}		return self::$_includePaths;	}	/**	 * Method to compute the default name of the asset.	 * The default name is in the form table_name.id	 * where id is the value of the primary key of the table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetName()	{		$k = $this->_tbl_key;		return $this->_tbl . '.' . (int) $this->$k;	}	/**	 * Method to return the title to use for the asset table.  In	 * tracking the assets a title is kept for each asset so that there is some	 * context available in a unified access manager.  Usually this would just	 * return $this->title or $this->name or whatever is being used for the	 * primary name of the row. If this method is not overridden, the asset name is used.	 *	 * @return  string  The string to use as the title in the asset table.	 *	 * @link    http://docs.joomla.org/JTable/getAssetTitle	 * @since   11.1	 */	protected function _getAssetTitle()	{		return $this->_getAssetName();	}	/**	 * Method to get the parent asset under which to register this one.	 * By default, all assets are registered to the ROOT node with ID,	 * which will default to 1 if none exists.	 * The extended class can define a table and id to lookup.  If the	 * asset does not exist it will be created.	 *	 * @param   JTable   $table  A JTable object for the asset parent.	 * @param   integer  $id     Id to look up	 *	 * @return  integer	 *	 * @since   11.1	 */	protected function _getAssetParentId($table = null, $id = null)	{		// For simple cases, parent to the asset root.		$assets = self::getInstance('Asset', 'JTable', array('dbo' => $this->getDbo()));		$rootId = $assets->getRootId();		if (!empty($rootId))		{			return $rootId;		}		return 1;	}	/**	 * Method to get the database table name for the class.	 *	 * @return  string  The name of the database table being modeled.	 *	 * @since   11.1	 *	 * @link    http://docs.joomla.org/JTable/getTableName	 */	public function getTableName()	{		return $this->_tbl;	}	/**	 * Method to get the primary key field name for the table.	 *	 * @return  string  The name of the primary key for the table.	 *	 * @link    http://docs.joomla.org/JTable/getKeyName	 * @since   11.1	 */	public function getKeyName()	{		return $this->_tbl_key;	}	/**	 * Method to get the JDatabaseDriver object.	 *	 * @return  JDatabaseDriver  The internal database driver object.	 *	 * @link    http://docs.joomla.org/JTable/getDBO	 * @since   11.1	 */	public function getDbo()	{		return $this->_db;	}	/**	 * Method to set the JDatabaseDriver object.	 *	 * @param   JDatabaseDriver  $db  A JDatabaseDriver object to be used by the table object.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/setDBO	 * @since   11.1	 */	public function setDBO(JDatabaseDriver $db)	{		$this->_db = $db;		return true;	}	/**	 * Method to set rules for the record.	 *	 * @param   mixed  $input  A JAccessRules object, JSON string, or array.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setRules($input)	{		if ($input instanceof JAccessRules)		{			$this->_rules = $input;		}		else		{			$this->_rules = new JAccessRules($input);		}	}	/**	 * Method to get the rules for the record.	 *	 * @return  JAccessRules object	 *	 * @since   11.1	 */	public function getRules()	{		return $this->_rules;	}	/**	 * Method to reset class properties to the defaults set in the class	 * definition. It will ignore the primary key as well as any private class	 * properties.	 *	 * @return  void	 *	 * @link    http://docs.joomla.org/JTable/reset	 * @since   11.1	 */	public function reset()	{		// Get the default values for the class from the table.		foreach ($this->getFields() as $k => $v)		{			// If the property is not the primary key or private, reset it.			if ($k != $this->_tbl_key && (strpos($k, '_') !== 0))			{				$this->$k = $v->Default;			}		}	}	/**	 * Method to bind an associative array or object to the JTable instance.This	 * method only binds properties that are publicly accessible and optionally	 * takes an array of properties to ignore when binding.	 *	 * @param   mixed  $src     An associative array or object to bind to the JTable instance.	 * @param   mixed  $ignore  An optional array or space separated list of properties to ignore while binding.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/bind	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function bind($src, $ignore = array())	{		// If the source value is not an array or object return false.		if (!is_object($src) && !is_array($src))		{			throw new InvalidArgumentException(sprintf('%s::bind(*%s*)', get_class($this), gettype($src)));		}		// If the source value is an object, get its accessible properties.		if (is_object($src))		{			$src = get_object_vars($src);		}		// If the ignore value is a string, explode it over spaces.		if (!is_array($ignore))		{			$ignore = explode(' ', $ignore);		}		// Bind the source value, excluding the ignored fields.		foreach ($this->getProperties() as $k => $v)		{			// Only process fields not in the ignore array.			if (!in_array($k, $ignore))			{				if (isset($src[$k]))				{					$this->$k = $src[$k];				}			}		}		return true;	}	/**	 * Method to load a row from the database by primary key and bind the fields	 * to the JTable instance properties.	 *	 * @param   mixed    $keys   An optional primary key value to load the row by, or an array of fields to match.  If not	 *                           set the instance property value is used.	 * @param   boolean  $reset  True to reset the default values before loading the new row.	 *	 * @return  boolean  True if successful. False if row not found.	 *	 * @link    http://docs.joomla.org/JTable/load	 * @since   11.1	 * @throws  RuntimeException	 * @throws  UnexpectedValueException	 */	public function load($keys = null, $reset = true)	{		if (empty($keys))		{			// If empty, use the value of the current key			$keyName = $this->_tbl_key;			$keyValue = $this->$keyName;			// If empty primary key there's is no need to load anything			if (empty($keyValue))			{				return true;			}			$keys = array($keyName => $keyValue);		}		elseif (!is_array($keys))		{			// Load by primary key.			$keys = array($this->_tbl_key => $keys);		}		if ($reset)		{			$this->reset();		}		// Initialise the query.		$query = $this->_db->getQuery(true)			->select('*')			->from($this->_tbl);		$fields = array_keys($this->getProperties());		foreach ($keys as $field => $value)		{			// Check that $field is in the table.			if (!in_array($field, $fields))			{				throw new UnexpectedValueException(sprintf('Missing field in database: %s &#160; %s.', get_class($this), $field));			}			// Add the search tuple to the query.			$query->where($this->_db->quoteName($field) . ' = ' . $this->_db->quote($value));		}		$this->_db->setQuery($query);		$row = $this->_db->loadAssoc();		// Check that we have a result.		if (empty($row))		{			return false;		}		// Bind the object with the row and return.		return $this->bind($row);	}	/**	 * Method to perform sanity checks on the JTable instance properties to ensure	 * they are safe to store in the database.  Child classes should override this	 * method to make sure the data they are storing in the database is safe and	 * as expected before storage.	 *	 * @return  boolean  True if the instance is sane and able to be stored in the database.	 *	 * @link    http://docs.joomla.org/JTable/check	 * @since   11.1	 */	public function check()	{		return true;	}	/**	 * Method to store a row in the database from the JTable instance properties.	 * If a primary key value is set the row with that primary key value will be	 * updated with the instance property values.  If no primary key value is set	 * a new row will be inserted into the database with the properties from the	 * JTable instance.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/store	 * @since   11.1	 */	public function store($updateNulls = false)	{		$k = $this->_tbl_key;		if (!empty($this->asset_id))		{			$currentAssetId = $this->asset_id;		}		if (0 == $this->$k)		{			$this->$k = null;		}		// The asset id field is managed privately by this class.		if ($this->_trackAssets)		{			unset($this->asset_id);		}		// If a primary key exists update the object, otherwise insert it.		if ($this->$k)		{			$this->_db->updateObject($this->_tbl, $this, $this->_tbl_key, $updateNulls);		}		else		{			$this->_db->insertObject($this->_tbl, $this, $this->_tbl_key);		}		// If the table is not set to track assets return true.		if (!$this->_trackAssets)		{			return true;		}		if ($this->_locked)		{			$this->_unlock();		}		/*		 * Asset Tracking		 */		$parentId = $this->_getAssetParentId();		$name = $this->_getAssetName();		$title = $this->_getAssetTitle();		$asset = self::getInstance('Asset', 'JTable', array('dbo' => $this->getDbo()));		$asset->loadByName($name);		// Re-inject the asset id.		$this->asset_id = $asset->id;		// Check for an error.		$error = $asset->getError();		if ($error)		{			$this->setError($error);			return false;		}		// Specify how a new or moved node asset is inserted into the tree.		if (empty($this->asset_id) || $asset->parent_id != $parentId)		{			$asset->setLocation($parentId, 'last-child');		}		// Prepare the asset to be stored.		$asset->parent_id = $parentId;		$asset->name = $name;		$asset->title = $title;		if ($this->_rules instanceof JAccessRules)		{			$asset->rules = (string) $this->_rules;		}		if (!$asset->check() || !$asset->store($updateNulls))		{			$this->setError($asset->getError());			return false;		}		// Create an asset_id or heal one that is corrupted.		if (empty($this->asset_id) || ($currentAssetId != $this->asset_id && !empty($this->asset_id)))		{			// Update the asset_id field in this table.			$this->asset_id = (int) $asset->id;			$query = $this->_db->getQuery(true)				->update($this->_db->quoteName($this->_tbl))				->set('asset_id = ' . (int) $this->asset_id)				->where($this->_db->quoteName($k) . ' = ' . (int) $this->$k);			$this->_db->setQuery($query);			$this->_db->execute();		}		return true;	}	/**	 * Method to provide a shortcut to binding, checking and storing a JTable	 * instance to the database table.  The method will check a row in once the	 * data has been stored and if an ordering filter is present will attempt to	 * reorder the table rows based on the filter.  The ordering filter is an instance	 * property name.  The rows that will be reordered are those whose value matches	 * the JTable instance for the property specified.	 *	 * @param   mixed   $src             An associative array or object to bind to the JTable instance.	 * @param   string  $orderingFilter  Filter for the order updating	 * @param   mixed   $ignore          An optional array or space separated list of properties	 *                                   to ignore while binding.	 *	 * @return  boolean  True on success.	 *	 * @link	http://docs.joomla.org/JTable/save	 * @since   11.1	 */	public function save($src, $orderingFilter = '', $ignore = '')	{		// Attempt to bind the source to the instance.		if (!$this->bind($src, $ignore))		{			return false;		}		// Run any sanity checks on the instance and verify that it is ready for storage.		if (!$this->check())		{			return false;		}		// Attempt to store the properties to the database table.		if (!$this->store())		{			return false;		}		// Attempt to check the row in, just in case it was checked out.		if (!$this->checkin())		{			return false;		}		// If an ordering filter is set, attempt reorder the rows in the table based on the filter and value.		if ($orderingFilter)		{			$filterValue = $this->$orderingFilter;			$this->reorder($orderingFilter ? $this->_db->quoteName($orderingFilter) . ' = ' . $this->_db->quote($filterValue) : '');		}		// Set the error to empty and return true.		$this->setError('');		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   mixed  $pk  An optional primary key value to delete.  If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/delete	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			throw new UnexpectedValueException('Null primary key not allowed.');		}		// If tracking assets, remove the asset first.		if ($this->_trackAssets)		{			// Get and the asset name.			$this->$k = $pk;			$name = $this->_getAssetName();			$asset = self::getInstance('Asset');			if ($asset->loadByName($name))			{				if (!$asset->delete())				{					$this->setError($asset->getError());					return false;				}			}			else			{				$this->setError($asset->getError());				return false;			}		}		// Delete the row by primary key.		$query = $this->_db->getQuery(true)			->delete($this->_tbl)			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		// Check for a database error.		$this->_db->execute();		return true;	}	/**	 * Method to check a row out if the necessary properties/fields exist.  To	 * prevent race conditions while editing rows in a database, a row can be	 * checked out if the fields 'checked_out' and 'checked_out_time' are available.	 * While a row is checked out, any attempt to store the row by a user other	 * than the one who checked the row out should be held until the row is checked	 * in again.	 *	 * @param   integer  $userId  The Id of the user checking out the row.	 * @param   mixed    $pk      An optional primary key value to check out.  If not set	 *                            the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/checkOut	 * @since   11.1	 */	public function checkOut($userId, $pk = null)	{		// If there is no checked_out or checked_out_time field, just return true.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			return true;		}		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			throw new UnexpectedValueException('Null primary key not allowed.');		}		// Get the current time in MySQL format.		$time = JFactory::getDate()->toSql();		// Check the row out by primary key.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set($this->_db->quoteName('checked_out') . ' = ' . (int) $userId)			->set($this->_db->quoteName('checked_out_time') . ' = ' . $this->_db->quote($time))			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		$this->_db->execute();		// Set table values in the object.		$this->checked_out = (int) $userId;		$this->checked_out_time = $time;		return true;	}	/**	 * Method to check a row in if the necessary properties/fields exist.  Checking	 * a row in will allow other users the ability to edit the row.	 *	 * @param   mixed  $pk  An optional primary key value to check out.  If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/checkIn	 * @since   11.1	 */	public function checkIn($pk = null)	{		// If there is no checked_out or checked_out_time field, just return true.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			return true;		}		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			throw new UnexpectedValueException('Null primary key not allowed.');		}		// Check the row in by primary key.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set($this->_db->quoteName('checked_out') . ' = 0')			->set($this->_db->quoteName('checked_out_time') . ' = ' . $this->_db->quote($this->_db->getNullDate()))			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		// Check for a database error.		$this->_db->execute();		// Set table values in the object.		$this->checked_out = 0;		$this->checked_out_time = '';		return true;	}	/**	 * Method to increment the hits for a row if the necessary property/field exists.	 *	 * @param   mixed  $pk  An optional primary key value to increment. If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/hit	 * @since   11.1	 */	public function hit($pk = null)	{		// If there is no hits field, just return true.		if (!property_exists($this, 'hits'))		{			return true;		}		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			return false;		}		// Check the row in by primary key.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set($this->_db->quoteName('hits') . ' = (' . $this->_db->quoteName('hits') . ' + 1)')			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		$this->_db->execute();		// Set table values in the object.		$this->hits++;		return true;	}	/**	 * Method to determine if a row is checked out and therefore uneditable by	 * a user. If the row is checked out by the same user, then it is considered	 * not checked out -- as the user can still edit it.	 *	 * @param   integer  $with     The userid to preform the match with, if an item is checked	 *                             out by this user the function will return false.	 * @param   integer  $against  The userid to perform the match against when the function	 *                             is used as a static function.	 *	 * @return  boolean  True if checked out.	 *	 * @link    http://docs.joomla.org/JTable/isCheckedOut	 * @since   11.1	 */	public function isCheckedOut($with = 0, $against = null)	{		// Handle the non-static case.		if (isset($this) && ($this instanceof JTable) && is_null($against))		{			$against = $this->get('checked_out');		}		// The item is not checked out or is checked out by the same user.		if (!$against || ($against == $with))		{			return false;		}		$db = JFactory::getDbo();		$db->setQuery('SELECT COUNT(userid) FROM ' . $db->quoteName('#__session') . ' WHERE ' . $db->quoteName('userid') . ' = ' . (int) $against);		$checkedOut = (boolean) $db->loadResult();		// If a session exists for the user then it is checked out.		return $checkedOut;	}	/**	 * Method to get the next ordering value for a group of rows defined by an SQL WHERE clause.	 * This is useful for placing a new item last in a group of items in the table.	 *	 * @param   string  $where  WHERE clause to use for selecting the MAX(ordering) for the table.	 *	 * @return  mixed  Boolean false an failure or the next ordering value as an integer.	 *	 * @link    http://docs.joomla.org/JTable/getNextOrder	 * @since   11.1	 */	public function getNextOrder($where = '')	{		// If there is no ordering field set an error and return false.		if (!property_exists($this, 'ordering'))		{			throw new UnexpectedValueException(sprintf('%s does not support ordering.', get_class($this)));		}		// Get the largest ordering value for a given where clause.		$query = $this->_db->getQuery(true)			->select('MAX(ordering)')			->from($this->_tbl);		if ($where)		{			$query->where($where);		}		$this->_db->setQuery($query);		$max = (int) $this->_db->loadResult();		// Return the largest ordering value + 1.		return ($max + 1);	}	/**	 * Method to compact the ordering values of rows in a group of rows	 * defined by an SQL WHERE clause.	 *	 * @param   string  $where  WHERE clause to use for limiting the selection of rows to compact the ordering values.	 *	 * @return  mixed  Boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/reorder	 * @since   11.1	 */	public function reorder($where = '')	{		// If there is no ordering field set an error and return false.		if (!property_exists($this, 'ordering'))		{			throw new UnexpectedValueException(sprintf('%s does not support ordering.', get_class($this)));		}		$k = $this->_tbl_key;		// Get the primary keys and ordering values for the selection.		$query = $this->_db->getQuery(true)			->select($this->_tbl_key . ', ordering')			->from($this->_tbl)			->where('ordering >= 0')			->order('ordering');		// Setup the extra where and ordering clause data.		if ($where)		{			$query->where($where);		}		$this->_db->setQuery($query);		$rows = $this->_db->loadObjectList();		// Compact the ordering values.		foreach ($rows as $i => $row)		{			// Make sure the ordering is a positive integer.			if ($row->ordering >= 0)			{				// Only update rows that are necessary.				if ($row->ordering != $i + 1)				{					// Update the row ordering field.					$query = $this->_db->getQuery(true)						->update($this->_tbl)						->set('ordering = ' . ($i + 1))						->where($this->_tbl_key . ' = ' . $this->_db->quote($row->$k));					$this->_db->setQuery($query);					$this->_db->execute();				}			}		}		return true;	}	/**	 * Method to move a row in the ordering sequence of a group of rows defined by an SQL WHERE clause.	 * Negative numbers move the row up in the sequence and positive numbers move it down.	 *	 * @param   integer  $delta  The direction and magnitude to move the row in the ordering sequence.	 * @param   string   $where  WHERE clause to use for limiting the selection of rows to compact the	 *                           ordering values.	 *	 * @return  mixed    Boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/move	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function move($delta, $where = '')	{		// If there is no ordering field set an error and return false.		if (!property_exists($this, 'ordering'))		{			throw new UnexpectedValueException(sprintf('%s does not support ordering.', get_class($this)));		}		// If the change is none, do nothing.		if (empty($delta))		{			return true;		}		$k = $this->_tbl_key;		$row = null;		$query = $this->_db->getQuery(true);		// Select the primary key and ordering values from the table.		$query->select($this->_tbl_key . ', ordering')			->from($this->_tbl);		// If the movement delta is negative move the row up.		if ($delta < 0)		{			$query->where('ordering < ' . (int) $this->ordering)				->order('ordering DESC');		}		// If the movement delta is positive move the row down.		elseif ($delta > 0)		{			$query->where('ordering > ' . (int) $this->ordering)				->order('ordering ASC');		}		// Add the custom WHERE clause if set.		if ($where)		{			$query->where($where);		}		// Select the first row with the criteria.		$this->_db->setQuery($query, 0, 1);		$row = $this->_db->loadObject();		// If a row is found, move the item.		if (!empty($row))		{			// Update the ordering field for this instance to the row's ordering value.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('ordering = ' . (int) $row->ordering)				->where($this->_tbl_key . ' = ' . $this->_db->quote($this->$k));			$this->_db->setQuery($query);			$this->_db->execute();			// Update the ordering field for the row to this instance's ordering value.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('ordering = ' . (int) $this->ordering)				->where($this->_tbl_key . ' = ' . $this->_db->quote($row->$k));			$this->_db->setQuery($query);			$this->_db->execute();			// Update the instance value.			$this->ordering = $row->ordering;		}		else		{			// Update the ordering field for this instance.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('ordering = ' . (int) $this->ordering)				->where($this->_tbl_key . ' = ' . $this->_db->quote($this->$k));			$this->_db->setQuery($query);			$this->_db->execute();		}		return true;	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.	 *                            If not set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success; false if $pks is empty.	 *	 * @link    http://docs.joomla.org/JTable/publish	 * @since   11.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				return false;			}		}		// Update the publishing state for rows with the given primary keys.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('published = ' . (int) $state);		// Determine if there is checkin support for the table.		if (property_exists($this, 'checked_out') || property_exists($this, 'checked_out_time'))		{			$query->where('(checked_out = 0 OR checked_out = ' . (int) $userId . ')');			$checkin = true;		}		else		{			$checkin = false;		}		// Build the WHERE clause for the primary keys.		$query->where($k . ' = ' . implode(' OR ' . $k . ' = ', $pks));		$this->_db->setQuery($query);		$this->_db->execute();		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->published = $state;		}		$this->setError('');		return true;	}	/**	 * Method to lock the database table for writing.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function _lock()	{		$this->_db->lockTable($this->_tbl);		$this->_locked = true;		return true;	}	/**	 * Method to unlock the database table for writing.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	protected function _unlock()	{		$this->_db->unlockTables();		$this->_locked = false;		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Item View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewMenu extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form	 = $this->get('Form');		$this->item	 = $this->get('Item');		$this->state = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$input = JFactory::getApplication()->input;		$input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = MenusHelper::getActions($this->state->get('filter.parent_id'));		JToolbarHelper::title(JText::_($isNew ? 'COM_MENUS_VIEW_NEW_MENU_TITLE' : 'COM_MENUS_VIEW_EDIT_MENU_TITLE'), 'menu.png');		// If a new item, can save the item.  Allow users with edit permissions to apply changes to prevent returning to grid.		if ($isNew && $canDo->get('core.create'))		{			if ($canDo->get('core.edit'))			{				JToolbarHelper::apply('menu.apply');			}			JToolbarHelper::save('menu.save');		}		// If user can edit, can save the item.		if (!$isNew && $canDo->get('core.edit'))		{			JToolbarHelper::apply('menu.apply');			JToolbarHelper::save('menu.save');		}		// If the user can create new items, allow them to see Save & New		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('menu.save2new');		}		if ($isNew)		{			JToolbarHelper::cancel('menu.cancel');		}		else		{			JToolbarHelper::cancel('menu.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_MENUS_MENU_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Pathway * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Class to manage the site application pathway. * * @package     Joomla.Libraries * @subpackage  Pathway * @since       1.5 */class JPathwaySite extends JPathway{	/**	 * Class constructor.	 *	 * @param   array  $options  The class options.	 *	 * @since   1.5	 */	public function __construct($options = array())	{		$this->_pathway = array();		$app  = JApplication::getInstance('site');		$menu = $app->getMenu();		if ($item = $menu->getActive())		{			$menus = $menu->getMenu();			$home  = $menu->getDefault();			if (is_object($home) && ($item->id != $home->id))			{				foreach ($item->tree as $menupath)				{					$url = '';					$link = $menu->getItem($menupath);					switch ($link->type)					{						case 'separator':						case 'heading':							$url = null;							break;						case 'url':							if ((strpos($link->link, 'index.php?') === 0) && (strpos($link->link, 'Itemid=') === false))							{								// If this is an internal Joomla link, ensure the Itemid is set.								$url = $link->link . '&Itemid=' . $link->id;							}							else							{								$url = $link->link;							}							break;						case 'alias':							// If this is an alias use the item id stored in the parameters to make the link.							$url = 'index.php?Itemid=' . $link->params->get('aliasoptions');							break;						default:							$router = JSite::getRouter();							if ($router->getMode() == JROUTER_MODE_SEF)							{								$url = 'index.php?Itemid=' . $link->id;							}							else							{								$url .= $link->link . '&Itemid=' . $link->id;							}							break;					}					$this->addItem($menus[$menupath]->title, $url);				}			}		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :			if (!isset($this->items[$this->parent->id][$id + 1]))			{				$class = ' class="last"';			}			?>			<div <?php echo $class; ?> >			<?php $class = ''; ?>				<h3 class="page-header item-title">				<a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($item->id));?>">					<?php echo $this->escape($item->title); ?></a>					<?php if ($this->params->get('show_cat_items_cat') == 1) :?>						<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_NEWSFEEDS_NUM_ITEMS'); ?>">							<?php echo $item->numitems; ?>						</span>					<?php endif; ?>					<?php if (count($item->getChildren()) > 0) : ?>						<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>					<?php endif;?>				</h3>				<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>					<?php if ($item->description) : ?>						<div class="category-desc">					<?php echo JHtml::_('content.prepare', $item->description, '', 'com_newsfeeds.categories'); ?>							<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>						</div>					<?php endif; ?>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) :?>					<div class="collapse fade" id="category-<?php echo $item->id;?>">					<?php					$this->items[$item->id] = $item->getChildren();					$this->parent = $item;					$this->maxLevelcat--;					echo $this->loadTemplate('items');					$this->parent = $item->getParent();					$this->maxLevelcat++;					?>					</div>				<?php endif; ?>			</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  mod_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('MenusHelper', JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Helper for mod_languages * * @package     Joomla.Site * @subpackage  mod_languages */abstract class ModLanguagesHelper{	public static function getList(&$params)	{		$user	= JFactory::getUser();		$lang 	= JFactory::getLanguage();		$app	= JFactory::getApplication();		$menu 	= $app->getMenu();		// Get menu home items		$homes = array();		foreach ($menu->getMenu() as $item)		{			if ($item->home)			{				$homes[$item->language] = $item;			}		}		// Load associations		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$active = $menu->getActive();			if ($active)			{				$associations = MenusHelper::getAssociations($active->id);			}			// load component associations			$option = $app->input->get('option');			$eName = JString::ucfirst(JString::str_ireplace('com_', '', $option));			$cName = JString::ucfirst($eName.'HelperAssociation');			JLoader::register($cName, JPath::clean(JPATH_COMPONENT_SITE . '/helpers/association.php'));			if (class_exists($cName) && is_callable(array($cName, 'getAssociations')))			{				$cassociations = call_user_func(array($cName, 'getAssociations'));			}		}		$levels		= $user->getAuthorisedViewLevels();		$languages	= JLanguageHelper::getLanguages();		// Filter allowed languages		foreach ($languages as $i => &$language) {			// Do not display language without frontend UI			if (!JLanguage::exists($language->lang_code))			{				unset($languages[$i]);			}			// Do not display language without specific home menu			elseif (!isset($homes[$language->lang_code]))			{				unset($languages[$i]);			}			// Do not display language without authorized access level			elseif (isset($language->access) && $language->access && !in_array($language->access, $levels))			{				unset($languages[$i]);			}			else {				$language->active = $language->lang_code == $lang->getTag();				if (JLanguageMultilang::isEnabled())				{					if (isset($cassociations[$language->lang_code]))					{						$language->link = JRoute::_($cassociations[$language->lang_code].'&lang='.$language->sef);					}					elseif (isset($associations[$language->lang_code]) && $menu->getItem($associations[$language->lang_code]))					{						$itemid = $associations[$language->lang_code];						if ($app->getCfg('sef') == '1')						{							$language->link = JRoute::_('index.php?lang='.$language->sef.'&Itemid='.$itemid);						}						else {							$language->link = 'index.php?lang='.$language->sef.'&amp;Itemid='.$itemid;						}					}					else {						if ($app->getCfg('sef') == '1')						{							$itemid = isset($homes[$language->lang_code]) ? $homes[$language->lang_code]->id : $homes['*']->id;							$language->link = JRoute::_('index.php?lang='.$language->sef.'&Itemid='.$itemid);						}						else {							$language->link = 'index.php?lang='.$language->sef;						}					}				}				else {					$language->link = JRoute::_('&Itemid='.$homes['*']->id);				}			}		}		return $languages;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewInstallHtml $this */?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal x">	<h3><?php echo JText::_('INSTL_INSTALLING'); ?></h3>	<hr class="hr-condensed" />	<div class="progress progress-striped active" id="install_progress">		<div class="bar" style="width: 0%;"></div>	</div>	<table class="table">		<tbody>		<?php foreach ($this->tasks as $task) : ?>			<tr id="install_<?php echo $task; ?>">				<td class="item" nowrap="nowrap" width="10%">				<?php if ($task == 'email') :					echo JText::sprintf('INSTL_INSTALLING_EMAIL', '<span class="label">' . $this->options['admin_email'] . '</span>');				else :					echo JText::_('INSTL_INSTALLING_' . strtoupper($task));				endif; ?>				</td>				<td>					<div class="spinner spinner-img" style="visibility: hidden;"></div>				</td>			</tr>		<?php endforeach; ?>		</tbody>		<tfoot>			<tr>				<td colspan="2"></td>			</tr>		</tfoot>	</table>	<?php echo JHtml::_('form.token'); ?></form><script type="text/javascript">	window.addEvent('domready', function()	{		doInstall();	});	function doInstall() {		if(document.id('install_progress') != null) {			Install.install(['<?php echo implode("','", $this->tasks); ?>']);		} else {			(function(){doInstall();}).delay(500);		}	}</script>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Override Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesControllerOverride extends JControllerForm{	/**	 * Method to edit an existing override	 *	 * @param   	string	$key		The name of the primary key of the URL variable (not used here).	 * @param   	string	$urlVar	The name of the URL variable if different from the primary key (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function edit($key = null, $urlVar = null)	{		$app     = JFactory::getApplication();		$cid     = $this->input->post->get('cid', array(), 'array');		$context = "$this->option.edit.$this->context";		// Get the constant name		$recordId = (count($cid) ? $cid[0] : $this->input->get('id'));		// Access check		if (!$this->allowEdit())		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));			return;		}		$app->setUserState($context.'.data', null);		$this->setRedirect('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'));	}	/**	 * Method to save an override	 *	 * @param   	string	$key		The name of the primary key of the URL variable (not used here).	 * @param   	string	$urlVar	The name of the URL variable if different from the primary key (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$model   = $this->getModel();		$data    = $this->input->post->get('jform', array(), 'array');		$context = "$this->option.edit.$this->context";		$task    = $this->getTask();		$recordId = $this->input->get('id');		$data['id'] = $recordId;		// Access check		if (!$this->allowSave($data, 'id'))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));			return;		}		// Validate the posted data		$form = $model->getForm($data, false);		if (!$form)		{			$app->enqueueMessage($model->getError(), 'error');			return;		}		// Require helper for filter functions called by JForm		require_once JPATH_COMPONENT.'/helpers/languages.php';		// Test whether the data is valid.		$validData = $model->validate($form, $data);		// Check for validation errors.		if ($validData === false)		{			// Get the validation messages			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session			$app->setUserState($context.'.data', $data);			// Redirect back to the edit screen			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'), false));			return;		}		// Attempt to save the data		if (!$model->save($validData))		{			// Save the data in the session			$app->setUserState($context.'.data', $validData);			// Redirect back to the edit screen			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'), false));			return;		}		// Add message of success		$this->setMessage(JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task		switch ($task)		{			case 'apply':				// Set the record data in the session				$recordId = $model->getState($this->context.'.id');				$app->setUserState($context.'.data', null);				// Redirect back to the edit screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($validData['key'], 'id'), false));				break;			case 'save2new':				// Clear the record id and data from the session				$app->setUserState($context.'.data', null);				// Redirect back to the edit screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend(null, 'id'), false));				break;			default:				// Clear the record id and data from the session				$app->setUserState($context.'.data', null);				// Redirect to the list screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));				break;		}	}	/**	 * Method to cancel an edit	 *	 * @param   	string	$key	The name of the primary key of the URL variable (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function cancel($key = null, $test = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$context = "$this->option.edit.$this->context";		$app->setUserState($context.'.data',	null);		$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');$n = count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<?php if ($this->params->get('show_no_articles', 1)) : ?>		<p><?php echo JText::_('COM_CONTENT_NO_ARTICLES'); ?></p>	<?php endif; ?><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide') : ?>	<fieldset class="filters">		<legend class="hidelabeltxt">			<?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?>		</legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter-search"><?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?></label>			<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />		</div>	<?php endif; ?>	<?php if ($this->params->get('show_pagination_limit')) : ?>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	<?php endif; ?>	<?php if ($this->params->get('filter_field') != 'hide') :?>	</fieldset>	<?php endif; ?>	<div class="clr"></div>	<table class="category">		<?php if ($this->params->get('show_headings')) :?>		<thead>			<tr>				<th class="list-title" id="tableOrdering">					<?php echo JHtml::_('grid.sort', 'COM_CONTENT_HEADING_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<?php if ($date = $this->params->get('list_show_date')) : ?>				<th class="list-date" id="tableOrdering2">					<?php if ($date == "created") : ?>						<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.created', $listDirn, $listOrder); ?>					<?php elseif ($date == "modified") : ?>						<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.modified', $listDirn, $listOrder); ?>					<?php elseif ($date == "published") : ?>						<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.publish_up', $listDirn, $listOrder); ?>					<?php endif; ?>				</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_author', 1)) : ?>				<th class="list-author" id="tableOrdering3">					<?php echo JHtml::_('grid.sort', 'JAUTHOR', 'author', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_hits', 1)) : ?>				<th class="list-hits" id="tableOrdering4">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => &$article) : ?>			<tr class="cat-list-row<?php echo $i % 2; ?>">				<?php if (in_array($article->access, $this->user->getAuthorisedViewLevels())) : ?>					<td class="list-title">						<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid)); ?>">							<?php echo $this->escape($article->title); ?></a>					</td>					<?php if ($this->params->get('list_show_date')) : ?>					<td class="list-date">						<?php						echo JHtml::_(							'date', $article->displayDate, $this->escape(								$this->params->get('date_format', JText::_('DATE_FORMAT_LC3'))							)						); ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_author', 1)) : ?>					<td class="list-author">						<?php if (!empty($article->author) || !empty($article->created_by_alias)) : ?>							<?php $author = $article->author ?>							<?php $author = ($article->created_by_alias ? $article->created_by_alias : $author);?>							<?php if (!empty($article->contactid ) &&  $this->params->get('link_author') == true):?>								<?php echo JHtml::_(										'link',										JRoute::_('index.php?option=com_contact&view=contact&id='.$article->contactid),										$author								); ?>							<?php else :?>								<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>							<?php endif; ?>						<?php endif; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_hits', 1)) : ?>					<td class="list-hits">						<?php echo $article->hits; ?>					</td>					<?php endif; ?>				<?php else : ?>				<td>					<?php						echo $this->escape($article->title).' : ';						$menu		= JFactory::getApplication()->getMenu();						$active		= $menu->getActive();						$itemId		= $active->id;						$link = JRoute::_('index.php?option=com_users&view=login&Itemid='.$itemId);						$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($article->slug));						$fullURL = new JURI($link);						$fullURL->setVar('return', base64_encode($returnURL));					?>					<a href="<?php echo $fullURL; ?>" class="register">					<?php echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE'); ?></a>				</td>				<?php endif; ?>			</tr>			<?php endforeach; ?>		</tbody>	</table><?php endif; ?><?php // Code to add a link to submit an article. ?><?php if ($this->category->getParams()->get('access-create')) : ?>	<?php echo JHtml::_('icon.create', $this->category, $this->category->params, array(), true); ?><?php  endif; ?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>		 	<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />	</div></form><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactModelCategory extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * The category that applies.	 *	 * @access    protected	 * @var        object	 */	protected $_category = null;	/**	 * The list of other newfeed categories.	 *	 * @access    protected	 * @var        array	 */	protected $_categories = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'con_position', 'a.con_position',				'suburb', 'a.suburb',				'state', 'a.state',				'country', 'a.country',				'ordering', 'a.ordering',				'sortname',				'sortname1', 'a.sortname1',				'sortname2', 'a.sortname2',				'sortname3', 'a.sortname3'			);		}		parent::__construct($config);	}	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		// Convert the params field into an object, saving original in _params		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item = & $items[$i];			if (!isset($this->_params))			{				$params = new JRegistry;				$params->loadString($item->params);				$item->params = $params;			}		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select required fields from the categories.		//sqlsrv changes		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('a.alias', '!=', '0');		$case_when .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $a_id . ' END as slug';		$case_when1 = ' CASE WHEN ';		$case_when1 .= $query->charLength('c.alias', '!=', '0');		$case_when1 .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when1 .= ' ELSE ';		$case_when1 .= $c_id . ' END as catslug';		$query->select($this->getState('list.select', 'a.*') . ',' . $case_when . ',' . $case_when1)		// TODO: we actually should be doing it but it's wrong this way		//	. ' CASE WHEN CHAR_LENGTH(a.alias) THEN CONCAT_WS(\':\', a.id, a.alias) ELSE a.id END as slug, '		//	. ' CASE WHEN CHAR_LENGTH(c.alias) THEN CONCAT_WS(\':\', c.id, c.alias) ELSE c.id END AS catslug ');			->from($db->quoteName('#__contact_details') . ' AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid')			->where('a.access IN (' . $groups . ')');		// Filter by category.		if ($categoryId = $this->getState('category.id'))		{			$query->where('a.catid = ' . (int) $categoryId)				->where('c.access IN (' . $groups . ')');		}		// Join over the users for the author and modified_by names.		$query->select("CASE WHEN a.created_by_alias > ' ' THEN a.created_by_alias ELSE ua.name END AS author")			->select("ua.email AS author_email")			->join('LEFT', '#__users AS ua ON ua.id = a.created_by')			->join('LEFT', '#__users AS uam ON uam.id = a.modified_by');		// Filter by state		$state = $this->getState('filter.published');		if (is_numeric($state))		{			$query->where('a.published = ' . (int) $state);		}		// Filter by start and end dates.		$nullDate = $db->quote($db->getNullDate());		$nowDate = $db->quote(JFactory::getDate()->toSql());		if ($this->getState('filter.publish_date'))		{			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');		}		// Filter by search in title		$search = $this->getState('list.filter');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%');			$query->where('(a.name LIKE ' . $search . ')');		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		// Set sortname ordering if selected		if ($this->getState('list.ordering') == 'sortname')		{			$query->order($db->escape('a.sortname1') . ' ' . $db->escape($this->getState('list.direction', 'ASC')))				->order($db->escape('a.sortname2') . ' ' . $db->escape($this->getState('list.direction', 'ASC')))				->order($db->escape('a.sortname3') . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		}		else		{			$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		}		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_contact');		$db = $this->getDbo();		// List state information		$format = $app->input->getWord('format');		if ($format == 'feed')		{			$limit = $app->getCfg('feed_limit');		}		else		{			$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');		}		$this->setState('list.limit', $limit);		$limitstart = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $limitstart);		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		// Get list ordering default from the parameters		$menuParams = new JRegistry;		if ($menu = $app->getMenu()->getActive())		{			$menuParams->loadString($menu->params);		}		$mergedParams = clone $params;		$mergedParams->merge($menuParams);		$orderCol = $app->input->get('filter_order', $mergedParams->get('initial_sort', 'ordering'));		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->input->get('filter_order_Dir', 'ASC');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$id = $app->input->get('id', 0, 'int');		$this->setState('category.id', $id);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_contact')) && (!$user->authorise('core.edit', 'com_contact')))		{			// limit to published for people who can't edit or edit.state.			$this->setState('filter.published', 1);			// Filter by start and end dates.			$this->setState('filter.publish_date', true);		}		$this->setState('filter.language', $app->getLanguageFilter());		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get category data for the current category	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   1.5	 */	public function getCategory()	{		if (!is_object($this->_item))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_items', 1) || $params->get('show_empty_categories', 0);			$categories = JCategories::getInstance('Contact', $options);			$this->_item = $categories->get($this->getState('category.id', 'root'));			if (is_object($this->_item))			{				$this->_children = $this->_item->getChildren();				$this->_parent = false;				if ($this->_item->getParent())				{					$this->_parent = $this->_item->getParent();				}				$this->_rightsibling = $this->_item->getSibling();				$this->_leftsibling = $this->_item->getSibling(false);			}			else			{				$this->_children = false;				$this->_parent = false;			}		}		$this->tags = new JHelperTags;		$this->tags->getItemTags('com_contact.category', $this->_item->get('id'));		return $this->_item;	}	/**	 * Get the parent category.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	public function getParent()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_parent;	}	/**	 * Get the sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getLeftSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_leftsibling;	}	function &getRightSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_rightsibling;	}	/**	 * Get the child categories.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getChildren()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_children;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/debug.php';/** * Methods supporting a list of user records. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelDebugGroup extends JModelList{	/**	 * Get a list of the actions.	 *	 * @return  array	 * @since   1.6	 */	public function getDebugActions()	{		$component = $this->getState('filter.component');		return UsersHelperDebug::getDebugActions($component);	}	/**	 * Override getItems method.	 *	 * @return  array	 * @since   1.6	 */	public function getItems()	{		$groupId = $this->getState('filter.group_id');		if (($assets = parent::getItems()) && $groupId)		{			$actions = $this->getDebugActions();			foreach ($assets as &$asset)			{				$asset->checks = array();				foreach ($actions as $action)				{					$name = $action[0];					$level = $action[1];					// Check that we check this action for the level of the asset.					if ($action[1] === null || $action[1] >= $asset->level)					{						// We need to test this action.						$asset->checks[$name] = JAccess::checkGroup($groupId, $action[0], $asset->name);					}					else					{						// We ignore this action.						$asset->checks[$name] = 'skip';					}				}			}		}		return $assets;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Adjust the context to support modal layouts.		$layout = $app->input->get('layout', 'default');		if ($layout)		{			$this->context .= '.' . $layout;		}		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$value = $this->getUserStateFromRequest($this->context . '.filter.group_id', 'group_id', 0, 'int', false);		$this->setState('filter.group_id', $value);		$levelStart = $this->getUserStateFromRequest($this->context . '.filter.level_start', 'filter_level_start', 0, 'int');		$this->setState('filter.level_start', $levelStart);		$value = $this->getUserStateFromRequest($this->context . '.filter.level_end', 'filter_level_end', 0, 'int');		if ($value > 0 && $value < $levelStart)		{			$value = $levelStart;		}		$this->setState('filter.level_end', $value);		$component = $this->getUserStateFromRequest($this->context . '.filter.component', 'filter_component');		$this->setState('filter.component', $component);		// Load the parameters.		$params = JComponentHelper::getParams('com_users');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.level_start');		$id .= ':' . $this->getState('filter.level_end');		$id .= ':' . $this->getState('filter.component');		return parent::getStoreId($id);	}	/**	 * Get the group being debugged.	 *	 * @return  JObject	 * @since   1.6	 */	public function getGroup()	{		$groupId = (int) $this->getState('filter.group_id');		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('id, title')			->from('#__usergroups')			->where('id = ' . $groupId);		$db->setQuery($query);		try		{			$group = $db->loadObject();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		return $group;	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.name, a.title, a.level, a.lft, a.rgt'			)		);		$query->from($db->quoteName('#__assets') . ' AS a');		// Filter the items over the search string if set.		if ($this->getState('filter.search'))		{			// Escape the search token.			$token = $db->quote('%' . $db->escape($this->getState('filter.search')) . '%');			// Compile the different search clauses.			$searches = array();			$searches[] = 'a.name LIKE ' . $token;			$searches[] = 'a.title LIKE ' . $token;			// Add the clauses to the query.			$query->where('(' . implode(' OR ', $searches) . ')');		}		// Filter on the start and end levels.		$levelStart = (int) $this->getState('filter.level_start');		$levelEnd = (int) $this->getState('filter.level_end');		if ($levelEnd > 0 && $levelEnd < $levelStart)		{			$levelEnd = $levelStart;		}		if ($levelStart > 0)		{			$query->where('a.level >= ' . $levelStart);		}		if ($levelEnd > 0)		{			$query->where('a.level <= ' . $levelEnd);		}		// Filter the items over the component if set.		if ($this->getState('filter.component'))		{			$component = $this->getState('filter.component');			$query->where('(a.name = ' . $db->quote($component) . ' OR a.name LIKE ' . $db->quote($component . '.%') . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filters view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewFilters extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load the view data.		$this->items = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->total = $this->get('Total');		$this->state = $this->get('State');		FinderHelper::addSubmenu('filters');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// Configure the toolbar.		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Method to configure the toolbar for this view.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		$canDo = FinderHelper::getActions();		JToolbarHelper::title(JText::_('COM_FINDER_FILTERS_TOOLBAR_TITLE'), 'finder');		$toolbar = JToolbar::getInstance('toolbar');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('filter.add');			JToolbarHelper::editList('filter.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publishList('filters.publish');			JToolbarHelper::unpublishList('filters.unpublish');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'filters.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_finder');		}		JToolbarHelper::divider();		$toolbar->appendButton('Popup', 'stats', 'COM_FINDER_STATISTICS', 'index.php?option=com_finder&view=statistics&tmpl=component', 550, 350);		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_FINDER_MANAGE_SEARCH_FILTERS');		JHtmlSidebar::setAction('index.php?option=com_finder&view=filters');		JHtmlSidebar::addFilter(			JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'),			'filter_state',			JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'))		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink Table class * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksTableWeblink extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__weblinks', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_weblinks.weblink';	}	/**	 * Overloaded bind function to pre-process the params.	 *	 * @param   array  Named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see     JTable:bind	 * @since   1.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overload the store method for the Weblinks table.	 *	 * @param   boolean	Toggle whether null values should be updated.	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified		= $date->toSql();			$this->modified_by	= $user->get('id');		}		else		{			// New weblink. A weblink created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Set publish_up to null date if not set		if (!$this->publish_up)		{			$this->publish_up = $this->_db->getNullDate();		}		// Set publish_down to null date if not set		if (!$this->publish_down)		{			$this->publish_down = $this->_db->getNullDate();		}		// Verify that the alias is unique		$table = JTable::getInstance('Weblink', 'WeblinksTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_WEBLINKS_ERROR_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 */	public function check()	{		if (JFilterInput::checkAttribute(array ('href', $this->url)))		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_PROVIDE_URL'));			return false;		}		// check for valid name		if (trim($this->title) == '')		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_TITLE'));			return false;		}		// check for existing name		$query = 'SELECT id FROM #__weblinks WHERE title = '.$this->_db->quote($this->title).' AND catid = '.(int) $this->catid;		$this->_db->setQuery($query);		$xid = (int) $this->_db->loadResult();		if ($xid && $xid != (int) $this->id)		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_NAME'));			return false;		}		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ($this->publish_down > $this->_db->getNullDate() && $this->publish_down < $this->publish_up)		{			$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));			return false;		}		// clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// only process if not empty			$bad_characters = array("\n", "\r", "\"", "<", ">"); // array of characters to remove			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey); // remove bad characters			$keys = explode(',', $after_clean); // create array using commas as delimiter			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key)) {  // ignore blank keywords					$clean_keys[] = trim($key);				}			}			$this->metakey = implode(", ", $clean_keys); // put array back together delimited by ", "		}		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.0.4	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.'='.implode(' OR '.$k.'=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = '.(int) $userId.')';		}		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl) .			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')' .			$checkin		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform PDO Database Driver Class * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/pdo * @since       12.1 */abstract class JDatabaseDriverPdo extends JDatabaseDriver{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'pdo';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = "'";	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 * @since  12.1	 */	protected $nullDate = '0000-00-00 00:00:00';	/**	 * @var    resource  The prepared statement.	 * @since  12.1	 */	protected $prepared;	/**	 * Contains the current query execution status	 *	 * @var array	 * @since 12.1	 */	protected $executed = false;	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		// Get some basic values from the options.		$options['driver'] = (isset($options['driver'])) ? $options['driver'] : 'odbc';		$options['dsn'] = (isset($options['dsn'])) ? $options['dsn'] : '';		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		$options['user'] = (isset($options['user'])) ? $options['user'] : '';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['driverOptions'] = (isset($options['driverOptions'])) ? $options['driverOptions'] : array();		// Finalize initialisation		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		// Initialize the connection string variable:		$connectionString = '';		$replace = array();		$with = array();		// Find the correct PDO DSN Format to use:		switch ($this->options['driver'])		{			case 'cubrid':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 33000;				$format = 'cubrid:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'dblib':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1433;				$format = 'dblib:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'firebird':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 3050;				$format = 'firebird:dbname=#DBNAME#';				$replace = array('#DBNAME#');				$with = array($this->options['database']);				break;			case 'ibm':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 56789;				if (!empty($this->options['dsn']))				{					$format = 'ibm:DSN=#DSN#';					$replace = array('#DSN#');					$with = array($this->options['dsn']);				}				else				{					$format = 'ibm:hostname=#HOST#;port=#PORT#;database=#DBNAME#';					$replace = array('#HOST#', '#PORT#', '#DBNAME#');					$with = array($this->options['host'], $this->options['port'], $this->options['database']);				}				break;			case 'informix':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1526;				$this->options['protocol'] = (isset($this->options['protocol'])) ? $this->options['protocol'] : 'onsoctcp';				if (!empty($this->options['dsn']))				{					$format = 'informix:DSN=#DSN#';					$replace = array('#DSN#');					$with = array($this->options['dsn']);				}				else				{					$format = 'informix:host=#HOST#;service=#PORT#;database=#DBNAME#;server=#SERVER#;protocol=#PROTOCOL#';					$replace = array('#HOST#', '#PORT#', '#DBNAME#', '#SERVER#', '#PROTOCOL#');					$with = array($this->options['host'], $this->options['port'], $this->options['database'], $this->options['server'], $this->options['protocol']);				}				break;			case 'mssql':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1433;				$format = 'mssql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'mysql':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 3306;				$format = 'mysql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'oci':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1521;				$this->options['charset'] = (isset($this->options['charset'])) ? $this->options['charset'] : 'AL32UTF8';				if (!empty($this->options['dsn']))				{					$format = 'oci:dbname=#DSN#';					$replace = array('#DSN#');					$with = array($this->options['dsn']);				}				else				{					$format = 'oci:dbname=//#HOST#:#PORT#/#DBNAME#';					$replace = array('#HOST#', '#PORT#', '#DBNAME#');					$with = array($this->options['host'], $this->options['port'], $this->options['database']);				}				$format .= ';charset=' . $this->options['charset'];				break;			case 'odbc':				$format = 'odbc:DSN=#DSN#;UID:#USER#;PWD=#PASSWORD#';				$replace = array('#DSN#', '#USER#', '#PASSWORD#');				$with = array($this->options['dsn'], $this->options['user'], $this->options['password']);				break;			case 'pgsql':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 5432;				$format = 'pgsql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'sqlite':				if (isset($this->options['version']) && $this->options['version'] == 2)				{					$format = 'sqlite2:#DBNAME#';				}				else				{					$format = 'sqlite:#DBNAME#';				}				$replace = array('#DBNAME#');				$with = array($this->options['database']);				break;			case 'sybase':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1433;				$format = 'mssql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;		}		// Create the connection string:		$connectionString = str_replace($replace, $with, $format);		// Make sure the PDO extension for PHP is installed and enabled.		if (!self::isSupported())		{			throw new RuntimeException('PDO Extension is not available.', 1);		}		try		{			$this->connection = new PDO(				$connectionString,				$this->options['user'],				$this->options['password'],				$this->options['driverOptions']			);		}		catch (PDOException $e)		{			throw new RuntimeException('Could not connect to PDO: ' . $e->getMessage(), 2, $e);		}	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * Oracle escaping reference:	 * http://www.orafaq.com/wiki/SQL_FAQ#How_does_one_escape_special_characters_when_writing_SQL_queries.3F	 *	 * SQLite escaping notes:	 * http://www.sqlite.org/faq.html#q14	 *	 * Method body is as implemented by the Zend Framework	 *	 * Note: Using query objects with bound variables is	 * preferable to the below.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Unused optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		if (is_int($text) || is_float($text))		{			return $text;		}		$text = str_replace("'", "''", $text);		return addcslashes($text, "\000\n\r\\\032");	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 * @throws  Exception	 */	public function execute()	{		$this->connect();		if (!is_object($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			// @TODO			$query .= ' LIMIT ' . $this->offset . ', ' . $this->limit;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query.		$this->executed = false;		if ($this->prepared instanceof PDOStatement)		{			// Bind the variables:			if ($this->sql instanceof JDatabaseQueryPreparable)			{				$bounded =& $this->sql->getBounded();				foreach ($bounded as $key => $obj)				{					$this->prepared->bindParam($key, $obj->value, $obj->dataType, $obj->length, $obj->driverOptions);				}			}			$this->executed = $this->prepared->execute();		}		// If an error occurred handle it.		if (!$this->executed)		{			// Get the error number and message before we execute any more queries.			$errorNum = (int) $this->connection->errorCode();			$errorMsg = (string) 'SQL: ' . implode(", ", $this->connection->errorInfo());			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					// Get the error number and message.					$this->errorNum = (int) $this->connection->errorCode();					$this->errorMsg = (string) 'SQL: ' . implode(", ", $this->connection->errorInfo());					// Throw the normal query exception.					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg, $this->errorNum);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				// Get the error number and message from before we tried to reconnect.				$this->errorNum = $errorNum;				$this->errorMsg = $errorMsg;				// Throw the normal query exception.				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg, $this->errorNum);			}		}		return $this->prepared;	}	/**	 * Retrieve a PDO database connection attribute	 * http://www.php.net/manual/en/pdo.getattribute.php	 *	 * Usage: $db->getOption(PDO::ATTR_CASE);	 *	 * @param   mixed  $key  One of the PDO::ATTR_* Constants	 *	 * @return mixed	 *	 * @since  12.1	 */	public function getOption($key)	{		$this->connect();		return $this->connection->getAttribute($key);	}	/**	 * Get a query to run and verify the database is operational.	 *	 * @return  string  The query to check the health of the DB.	 *	 * @since   12.2	 */	public function getConnectedQuery()	{		return 'SELECT 1';	}	/**	 * Sets an attribute on the PDO database handle.	 * http://www.php.net/manual/en/pdo.setattribute.php	 *	 * Usage: $db->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);	 *	 * @param   integer  $key    One of the PDO::ATTR_* Constants	 * @param   mixed    $value  One of the associated PDO Constants	 *                           related to the particular attribute	 *                           key.	 *	 * @return boolean	 *	 * @since  12.1	 */	public function setOption($key, $value)	{		$this->connect();		return $this->connection->setAttribute($key, $value);	}	/**	 * Test to see if the PDO extension is available.	 * Override as needed to check for specific PDO Drivers.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return defined('PDO::ATTR_DRIVER_NAME');	}	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   12.1	 */	public function connected()	{		// Flag to prevent recursion into this function.		static $checkingConnected = false;		if ($checkingConnected)		{			// Reset this flag and throw an exception.			$checkingConnected = true;			die('Recursion trying to check if connected.');		}		// Backup the query state.		$query = $this->sql;		$limit = $this->limit;		$offset = $this->offset;		$prepared = $this->prepared;		try		{			// Set the checking connection flag.			$checkingConnected = true;			// Run a simple query to check the connection.			$this->setQuery($this->getConnectedQuery());			$status = (bool) $this->loadResult();		}		// If we catch an exception here, we must not be connected.		catch (Exception $e)		{			$status = false;		}		// Restore the query state.		$this->sql = $query;		$this->limit = $limit;		$this->offset = $offset;		$this->prepared = $prepared;		$checkingConnected = false;		return $status;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 * Only applicable for DELETE, INSERT, or UPDATE statements.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   12.1	 */	public function getAffectedRows()	{		$this->connect();		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->rowCount();		}		else		{			return 0;		}	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows($cursor = null)	{		$this->connect();		if ($cursor instanceof PDOStatement)		{			return $cursor->rowCount();		}		elseif ($this->prepared instanceof PDOStatement)		{			return $this->prepared->rowCount();		}		else		{			return 0;		}	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		// Error suppress this to prevent PDO warning us that the driver doesn't support this operation.		return @$this->connection->lastInsertId();	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		return true;	}	/**	 * Sets the SQL statement string for later execution.	 *	 * @param   mixed    $query          The SQL statement to set either as a JDatabaseQuery object or a string.	 * @param   integer  $offset         The affected row offset to set.	 * @param   integer  $limit          The maximum affected rows to set.	 * @param   array    $driverOptions  The optional PDO driver options	 *	 * @return  JDatabaseDriver  This object to support method chaining.	 *	 * @since   12.1	 */	public function setQuery($query, $offset = null, $limit = null, $driverOptions = array())	{		$this->connect();		$this->freeResult();		if (is_string($query))		{			// Allows taking advantage of bound variables in a direct query:			$query = $this->getQuery(true)->setQuery($query);		}		if ($query instanceof JDatabaseQueryLimitable && !is_null($offset) && !is_null($limit))		{			$query->setLimit($limit, $offset);		}		$query = $this->replacePrefix((string) $query);		$this->prepared = $this->connection->prepare($query, $driverOptions);		// Store reference to the JDatabaseQuery instance:		parent::setQuery($query, $offset, $limit);		return $this;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		return false;	}	/**	 * Method to commit a transaction.	 *	 * @return  bool	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		return $this->connection->commit();	}	/**	 * Method to roll back a transaction.	 *	 * @return  bool	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionRollback()	{		$this->connect();		return $this->connection->rollBack();	}	/**	 * Method to initialize a transaction.	 *	 * @return  bool	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		return $this->connection->beginTransaction();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		if (!empty($cursor) && $cursor instanceof PDOStatement)		{			return $cursor->fetch(PDO::FETCH_NUM);		}		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->fetch(PDO::FETCH_NUM);		}	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		if (!empty($cursor) && $cursor instanceof PDOStatement)		{			return $cursor->fetch(PDO::FETCH_ASSOC);		}		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->fetch(PDO::FETCH_ASSOC);		}	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   Unused, only necessary so method signature will be the same as parent.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		if (!empty($cursor) && $cursor instanceof PDOStatement)		{			return $cursor->fetchObject($class);		}		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->fetchObject($class);		}	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		$this->executed = false;		if ($cursor instanceof PDOStatement)		{			$cursor->closeCursor();			$cursor = null;		}		if ($this->prepared instanceof PDOStatement)		{			$this->prepared->closeCursor();			$this->prepared = null;		}	}	/**	 * Method to get the next row in the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The result of the query as an array, false if there are no more rows.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function loadNextObject($class = 'stdClass')	{		$this->connect();		// Execute the query and get the result set cursor.		if (!$this->executed)		{			if (!($this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchObject(null, $class))		{			return $row;		}		// Free up system resources and return.		$this->freeResult();		return false;	}	/**	 * Method to get the next row in the result set from the database query as an array.	 *	 * @return  mixed  The result of the query as an array, false if there are no more rows.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function loadNextAssoc()	{		$this->connect();		// Execute the query and get the result set cursor.		if (!$this->executed)		{			if (!($this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchAssoc())		{			return $row;		}		// Free up system resources and return.		$this->freeResult();		return false;	}	/**	 * Method to get the next row in the result set from the database query as an array.	 *	 * @return  mixed  The result of the query as an array, false if there are no more rows.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function loadNextRow()	{		$this->connect();		// Execute the query and get the result set cursor.		if (!$this->executed)		{			if (!($this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchArray())		{			return $row;		}		// Free up system resources and return.		$this->freeResult();		return false;	}	/**	 * PDO does not support serialize	 *	 * @return  array	 *	 * @since   12.3	 */	public function __sleep()	{		$serializedProperties = array();		$reflect = new ReflectionClass($this);		// Get properties of the current class		$properties = $reflect->getProperties();		foreach ($properties as $key => $property)		{			// Do not serialize properties that are PDO			if ($property->isStatic() == false && !($this->{$property->name} instanceof PDO))			{				array_push($serializedProperties, $property->name);			}		}		return $serializedProperties;	}	/**	 * Wake up after serialization	 *	 * @return  array	 *	 * @since   12.3	 */	public function __wakeup()	{		// Get connection back		$this->__construct($this->options);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><div class="reset <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<form id="user-registration" action="<?php echo JRoute::_('index.php?option=com_users&task=reset.request'); ?>" method="post" class="form-validate form-horizontal">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		</fieldset>		<?php endforeach; ?>		<div class="form-actions">			<button type="submit" class="btn btn-primary validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Interface * * @package     Joomla.Platform * @subpackage  Database * @since       11.2 */interface JDatabaseInterface{	/**	 * Test to see if the connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.2	 */	public static function isSupported();}/** * Joomla Platform Database Driver Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 * * @method      string  q()   q($text, $escape = true)  Alias for quote method * @method      string  qn()  qn($name, $as = null)     Alias for quoteName method */abstract class JDatabaseDriver extends JDatabase implements JDatabaseInterface{	/**	 * The name of the database.	 *	 * @var    string	 * @since  11.4	 */	private $_database;	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  11.1	 */	public $name;	/**	 * @var    resource  The database connection resource.	 * @since  11.1	 */	protected $connection;	/**	 * @var    integer  The number of SQL statements executed by the database driver.	 * @since  11.1	 */	protected $count = 0;	/**	 * @var    resource  The database connection cursor from the last query.	 * @since  11.1	 */	protected $cursor;	/**	 * @var    boolean  The database driver debugging state.	 * @since  11.1	 */	protected $debug = false;	/**	 * @var    integer  The affected row limit for the current SQL statement.	 * @since  11.1	 */	protected $limit = 0;	/**	 * @var    array  The log of executed SQL statements by the database driver.	 * @since  11.1	 */	protected $log = array();	/**	 * @var    string  The character(s) used to quote SQL statement names such as table names or field names,	 *                 etc.  The child classes should define this as necessary.  If a single character string the	 *                 same character is used for both sides of the quoted name, else the first character will be	 *                 used for the opening quote and the second for the closing quote.	 * @since  11.1	 */	protected $nameQuote;	/**	 * @var    string  The null or zero representation of a timestamp for the database driver.  This should be	 *                 defined in child classes to hold the appropriate value for the engine.	 * @since  11.1	 */	protected $nullDate;	/**	 * @var    integer  The affected row offset to apply for the current SQL statement.	 * @since  11.1	 */	protected $offset = 0;	/**	 * @var    array  Passed in upon instantiation and saved.	 * @since  11.1	 */	protected $options;	/**	 * @var    mixed  The current SQL statement to execute.	 * @since  11.1	 */	protected $sql;	/**	 * @var    string  The common database table prefix.	 * @since  11.1	 */	protected $tablePrefix;	/**	 * @var    boolean  True if the database engine supports UTF-8 character encoding.	 * @since  11.1	 */	protected $utf = true;	/**	 * @var         integer  The database error number	 * @since       11.1	 * @deprecated  12.1	 */	protected $errorNum = 0;	/**	 * @var         string  The database error message	 * @since       11.1	 * @deprecated  12.1	 */	protected $errorMsg;	/**	 * @var    array  JDatabaseDriver instances container.	 * @since  11.1	 */	protected static $instances = array();	/**	 * @var    string  The minimum supported database version.	 * @since  12.1	 */	protected static $dbMinimum;	/**	 * Get a list of available database connectors.  The list will only be populated with connectors that both	 * the class exists and the static test method returns true.  This gives us the ability to have a multitude	 * of connector classes that are self-aware as to whether or not they are able to be used on a given system.	 *	 * @return  array  An array of available database connectors.	 *	 * @since   11.1	 */	public static function getConnectors()	{		$connectors = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/driver');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JDatabaseDriver' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$connectors[] = str_ireplace('.php', '', $fileName);			}		}		return $connectors;	}	/**	 * Method to return a JDatabaseDriver instance based on the given options.  There are three global options and then	 * the rest are specific to the database driver.  The 'driver' option defines which JDatabaseDriver class is	 * used for the connection -- the default is 'mysqli'.  The 'database' option determines which database is to	 * be used for the connection.  The 'select' option determines whether the connector should automatically select	 * the chosen database.	 *	 * Instances are unique to the given options and new objects are only created when a unique options array is	 * passed into the method.  This ensures that we don't end up with unnecessary database connection resources.	 *	 * @param   array  $options  Parameters to be passed to the database driver.	 *	 * @return  JDatabaseDriver  A database object.	 *	 * @since   11.1	 */	public static function getInstance($options = array())	{		// Sanitize the database connector options.		$options['driver']   = (isset($options['driver'])) ? preg_replace('/[^A-Z0-9_\.-]/i', '', $options['driver']) : 'mysqli';		$options['database'] = (isset($options['database'])) ? $options['database'] : null;		$options['select']   = (isset($options['select'])) ? $options['select'] : true;		// Get the options signature for the database connector.		$signature = md5(serialize($options));		// If we already have a database connector instance for these options then just use that.		if (empty(self::$instances[$signature]))		{			// Derive the class name from the driver.			$class = 'JDatabaseDriver' . ucfirst(strtolower($options['driver']));			// If the class still doesn't exist we have nothing left to do but throw an exception.  We did our best.			if (!class_exists($class))			{				throw new RuntimeException(sprintf('Unable to load Database Driver: %s', $options['driver']));			}			// Create our new JDatabaseDriver connector based on the options given.			try			{				$instance = new $class($options);			}			catch (RuntimeException $e)			{				throw new RuntimeException(sprintf('Unable to connect to the Database: %s', $e->getMessage()));			}			// Set the new connector to the global instances based on signature.			self::$instances[$signature] = $instance;		}		return self::$instances[$signature];	}	/**	 * Splits a string of multiple queries into an array of individual queries.	 *	 * @param   string  $query  Input SQL string with which to split into individual queries.	 *	 * @return  array  The queries from the input string separated into an array.	 *	 * @since   11.1	 */	public static function splitSql($query)	{		$start = 0;		$open = false;		$char = '';		$end = strlen($query);		$queries = array();		for ($i = 0; $i < $end; $i++)		{			$current = substr($query, $i, 1);			if (($current == '"' || $current == '\''))			{				$n = 2;				while (substr($query, $i - $n + 1, 1) == '\\' && $n < $i)				{					$n++;				}				if ($n % 2 == 0)				{					if ($open)					{						if ($current == $char)						{							$open = false;							$char = '';						}					}					else					{						$open = true;						$char = $current;					}				}			}			if (($current == ';' && !$open) || $i == $end - 1)			{				$queries[] = substr($query, $start, ($i - $start + 1));				$start = $i + 1;			}		}		return $queries;	}	/**	 * Magic method to provide method alias support for quote() and quoteName().	 *	 * @param   string  $method  The called method.	 * @param   array   $args    The array of arguments passed to the method.	 *	 * @return  string  The aliased method's return value or null.	 *	 * @since   11.1	 */	public function __call($method, $args)	{		if (empty($args))		{			return;		}		switch ($method)		{			case 'q':				return $this->quote($args[0], isset($args[1]) ? $args[1] : true);				break;			case 'qn':				return $this->quoteName($args[0], isset($args[1]) ? $args[1] : null);				break;		}	}	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   11.1	 */	public function __construct($options)	{		// Initialise object variables.		$this->_database = (isset($options['database'])) ? $options['database'] : '';		$this->tablePrefix = (isset($options['prefix'])) ? $options['prefix'] : 'jos_';		$this->count = 0;		$this->errorNum = 0;		$this->log = array();		// Set class options.		$this->options = $options;	}	/**	 * Alter database's character set, obtaining query string from protected member.	 *	 * @param   string  $dbName  The database name that will be altered	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function alterDbCharacterSet($dbName)	{		if (is_null($dbName))		{			throw new RuntimeException('Database name must not be null.');		}		$this->setQuery($this->getAlterDbCharacterSet($dbName));		return $this->execute();	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	abstract public function connect();	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   11.1	 */	abstract public function connected();	/**	 * Create a new database using information from $options object, obtaining query string	 * from protected member.	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function createDatabase($options, $utf = true)	{		if (is_null($options))		{			throw new RuntimeException('$options object must not be null.');		}		elseif (empty($options->db_name))		{			throw new RuntimeException('$options object must have db_name set.');		}		elseif (empty($options->db_user))		{			throw new RuntimeException('$options object must have db_user set.');		}		$this->setQuery($this->getCreateDatabaseQuery($options, $utf));		return $this->execute();	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	abstract public function disconnect();	/**	 * Drops a table from the database.	 *	 * @param   string   $table     The name of the database table to drop.	 * @param   boolean  $ifExists  Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriver     Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function dropTable($table, $ifExists = true);	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string   The escaped string.	 *	 * @since   11.1	 */	abstract public function escape($text, $extra = false);	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchArray($cursor = null);	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchAssoc($cursor = null);	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchObject($cursor = null, $class = 'stdClass');	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   11.1	 */	abstract protected function freeResult($cursor = null);	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   11.1	 */	abstract public function getAffectedRows();	/**	 * Return the query string to alter the database character set.	 *	 * @param   string  $dbName  The database name	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 */	protected function getAlterDbCharacterSet($dbName)	{		$query = 'ALTER DATABASE ' . $this->quoteName($dbName) . ' CHARACTER SET `utf8`';		return $query;	}	/**	 * Return the query string to create new Database.	 * Each database driver, other than MySQL, need to override this member to return correct string.	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database	 *	 * @since   12.2	 */	protected function getCreateDatabaseQuery($options, $utf)	{		if ($utf)		{			$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name) . ' CHARACTER SET `utf8`';		}		else		{			$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name);		}		return $query;	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   11.1	 */	abstract public function getCollation();	/**	 * Method that provides access to the underlying database connection. Useful for when you need to call a	 * proprietary method such as postgresql's lo_* methods.	 *	 * @return  resource  The underlying database connection resource.	 *	 * @since   11.1	 */	public function getConnection()	{		return $this->connection;	}	/**	 * Get the total number of SQL statements executed by the database driver.	 *	 * @return  integer	 *	 * @since   11.1	 */	public function getCount()	{		return $this->count;	}	/**	 * Gets the name of the database used by this conneciton.	 *	 * @return  string	 *	 * @since   11.4	 */	protected function getDatabase()	{		return $this->_database;	}	/**	 * Returns a PHP date() function compliant date format for the database driver.	 *	 * @return  string  The format string.	 *	 * @since   11.1	 */	public function getDateFormat()	{		return 'Y-m-d H:i:s';	}	/**	 * Get the database driver SQL statement log.	 *	 * @return  array  SQL statements executed by the database driver.	 *	 * @since   11.1	 */	public function getLog()	{		return $this->log;	}	/**	 * Get the minimum supported database version.	 *	 * @return  string  The minimum version number for the database driver.	 *	 * @since   12.1	 */	public function getMinimum()	{		return static::$dbMinimum;	}	/**	 * Get the null or zero representation of a timestamp for the database driver.	 *	 * @return  string  Null or zero representation of a timestamp.	 *	 * @since   11.1	 */	public function getNullDate()	{		return $this->nullDate;	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   11.1	 */	abstract public function getNumRows($cursor = null);	/**	 * Get the common table prefix for the database driver.	 *	 * @return  string  The common database table prefix.	 *	 * @since   11.1	 */	public function getPrefix()	{		return $this->tablePrefix;	}	/**	 * Gets an exporter class object.	 *	 * @return  JDatabaseExporter  An exporter object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getExporter()	{		// Derive the class name from the driver.		$class = 'JDatabaseExporter' . ucfirst($this->name);		// Make sure we have an exporter class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Exporter not found.');		}		$o = new $class;		$o->setDbo($this);		return $o;	}	/**	 * Gets an importer class object.	 *	 * @return  JDatabaseImporter  An importer object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getImporter()	{		// Derive the class name from the driver.		$class = 'JDatabaseImporter' . ucfirst($this->name);		// Make sure we have an importer class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Importer not found');		}		$o = new $class;		$o->setDbo($this);		return $o;	}	/**	 * Get the current query object or a new JDatabaseQuery object.	 *	 * @param   boolean  $new  False to return the current query object, True to return a new JDatabaseQuery object.	 *	 * @return  JDatabaseQuery  The current query object or a new object extending the JDatabaseQuery class.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function getQuery($new = false)	{		if ($new)		{			// Derive the class name from the driver.			$class = 'JDatabaseQuery' . ucfirst($this->name);			// Make sure we have a query class for this driver.			if (!class_exists($class))			{				// If it doesn't exist we are at an impasse so throw an exception.				throw new RuntimeException('Database Query Class not found.');			}			return new $class($this);		}		else		{			return $this->sql;		}	}	/**	 * Get a new iterator on the current query.	 *	 * @param   string  $column  An option column to use as the iterator key.	 * @param   string  $class   The class of object that is returned.	 *	 * @return  JDatabaseIterator  A new database iterator.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getIterator($column = null, $class = 'stdClass')	{		// Derive the class name from the driver.		$iteratorClass = 'JDatabaseIterator' . ucfirst($this->name);		// Make sure we have an iterator class for this driver.		if (!class_exists($iteratorClass))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException(sprintf('class *%s* is not defined', $iteratorClass));		}		// Return a new iterator		return new $iteratorClass($this->execute(), $column, $class);	}	/**	 * Retrieves field information about the given tables.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True (default) to only return field types.	 *	 * @return  array  An array of fields by table.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableColumns($table, $typeOnly = true);	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableCreate($tables);	/**	 * Retrieves field information about the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  An array of keys for the table(s).	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableKeys($tables);	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableList();	/**	 * Determine whether or not the database engine supports UTF-8 character encoding.	 *	 * @return  boolean  True if the database engine supports UTF-8 character encoding.	 *	 * @since   11.1	 * @deprecated 12.3 Use hasUTFSupport() instead	 */	public function getUTFSupport()	{		JLog::add('JDatabase::getUTFSupport() is deprecated. Use JDatabase::hasUTFSupport() instead.', JLog::WARNING, 'deprecated');		return $this->hasUTFSupport();	}	/**	 * Determine whether or not the database engine supports UTF-8 character encoding.	 *	 * @return  boolean  True if the database engine supports UTF-8 character encoding.	 *	 * @since   12.1	 */	public function hasUTFSupport()	{		return $this->utf;	}	/**	 * Get the version of the database connector	 *	 * @return  string  The database connector version.	 *	 * @since   11.1	 */	abstract public function getVersion();	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   11.1	 */	abstract public function insertid();	/**	 * Inserts a row into a table based on an object's properties.	 *	 * @param   string  $table    The name of the database table to insert into.	 * @param   object  &$object  A reference to an object whose public properties match the table fields.	 * @param   string  $key      The name of the primary key. If provided the object property is updated.	 *	 * @return  boolean    True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function insertObject($table, &$object, $key = null)	{		$fields = array();		$values = array();		// Iterate over the object variables to build the query fields and values.		foreach (get_object_vars($object) as $k => $v)		{			// Only process non-null scalars.			if (is_array($v) or is_object($v) or $v === null)			{				continue;			}			// Ignore any internal fields.			if ($k[0] == '_')			{				continue;			}			// Prepare and sanitize the fields and values for the database query.			$fields[] = $this->quoteName($k);			$values[] = $this->quote($v);		}		// Create the base insert statement.		$query = $this->getQuery(true)			->insert($this->quoteName($table))				->columns($fields)				->values(implode(',', $values));		// Set the query and execute the insert.		$this->setQuery($query);		if (!$this->execute())		{			return false;		}		// Update the primary key if it exists.		$id = $this->insertid();		if ($key && $id && is_string($key))		{			$object->$key = $id;		}		return true;	}	/**	 * Method to check whether the installed database version is supported by the database driver	 *	 * @return  boolean  True if the database version is supported	 *	 * @since   12.1	 */	public function isMinimumVersion()	{		return version_compare($this->getVersion(), static::$dbMinimum) >= 0;	}	/**	 * Method to get the first row of the result set from the database query as an associative array	 * of ['field_name' => 'row_value'].	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadAssoc()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an associative array.		if ($array = $this->fetchAssoc($cursor))		{			$ret = $array;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an associative array	 * of ['field_name' => 'row_value'].  The array of rows can optionally be keyed by a field name, but defaults to	 * a sequential numeric array.	 *	 * NOTE: Chosing to key the result array by a non-unique field name can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key     The name of a field on which to key the result array.	 * @param   string  $column  An optional column name. Instead of the whole row, only this column value will be in	 * the result array.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadAssocList($key = null, $column = null)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set.		while ($row = $this->fetchAssoc($cursor))		{			$value = ($column) ? (isset($row[$column]) ? $row[$column] : $row) : $row;			if ($key)			{				$array[$row[$key]] = $value;			}			else			{				$array[] = $value;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get an array of values from the <var>$offset</var> field in each row of the result set from	 * the database query.	 *	 * @param   integer  $offset  The row offset to use to build the result array.	 *	 * @return  mixed    The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadColumn($offset = 0)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as arrays.		while ($row = $this->fetchArray($cursor))		{			$array[] = $row[$offset];		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get the next row in the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The result of the query as an array, false if there are no more rows.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadNextObject($class = 'stdClass')	{		JLog::add(__METHOD__ . '() is deprecated. Use JDatabase::getIterator() instead.', JLog::WARNING, 'deprecated');		$this->connect();		static $cursor = null;		// Execute the query and get the result set cursor.		if ( is_null($cursor) )		{			if (!($cursor = $this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchObject($cursor, $class))		{			return $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		$cursor = null;		return false;	}	/**	 * Method to get the next row in the result set from the database query as an array.	 *	 * @return  mixed  The result of the query as an array, false if there are no more rows.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadNextRow()	{		JLog::add('JDatabase::loadNextRow() is deprecated. Use JDatabase::getIterator() instead.', JLog::WARNING, 'deprecated');		$this->connect();		static $cursor = null;		// Execute the query and get the result set cursor.		if ( is_null($cursor) )		{			if (!($cursor = $this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchArray($cursor))		{			return $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		$cursor = null;		return false;	}	/**	 * Method to get the first row of the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadObject($class = 'stdClass')	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an object of type $class.		if ($object = $this->fetchObject($cursor, $class))		{			$ret = $object;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an object.  The array	 * of objects can optionally be keyed by a field name, but defaults to a sequential numeric array.	 *	 * NOTE: Choosing to key the result array by a non-unique field name can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key    The name of a field on which to key the result array.	 * @param   string  $class  The class name to use for the returned row objects.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadObjectList($key = '', $class = 'stdClass')	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as objects of type $class.		while ($row = $this->fetchObject($cursor, $class))		{			if ($key)			{				$array[$row->$key] = $row;			}			else			{				$array[] = $row;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get the first field of the first row of the result set from the database query.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadResult()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = $this->fetchArray($cursor))		{			$ret = $row[0];		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get the first row of the result set from the database query as an array.  Columns are indexed	 * numerically so the first column in the result set would be accessible via <var>$row[0]</var>, etc.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRow()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = $this->fetchArray($cursor))		{			$ret = $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an array.  The array	 * of objects can optionally be keyed by a field offset, but defaults to a sequential numeric array.	 *	 * NOTE: Choosing to key the result array by a non-unique field can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key  The name of a field on which to key the result array.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRowList($key = null)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as arrays.		while ($row = $this->fetchArray($cursor))		{			if ($key !== null)			{				$array[$row[$key]] = $row;			}			else			{				$array[] = $row;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $tableName  The name of the table to unlock.	 *	 * @return  JDatabaseDriver     Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function lockTable($tableName);	/**	 * Method to quote and optionally escape a string to database requirements for insertion into the database.	 *	 * @param   string   $text    The string to quote.	 * @param   boolean  $escape  True (default) to escape the string, false to leave it unchanged.	 *	 * @return  string  The quoted input string.	 *	 * @since   11.1	 */	public function quote($text, $escape = true)	{		return '\'' . ($escape ? $this->escape($text) : $text) . '\'';	}	/**	 * Wrap an SQL statement identifier name such as column, table or database names in quotes to prevent injection	 * risks and reserved word conflicts.	 *	 * @param   mixed  $name  The identifier name to wrap in quotes, or an array of identifier names to wrap in quotes.	 *                        Each type supports dot-notation name.	 * @param   mixed  $as    The AS query part associated to $name. It can be string or array, in latter case it has to be	 *                        same length of $name; if is null there will not be any AS part for string or array element.	 *	 * @return  mixed  The quote wrapped name, same type of $name.	 *	 * @since   11.1	 */	public function quoteName($name, $as = null)	{		if (is_string($name))		{			$quotedName = $this->quoteNameStr(explode('.', $name));			$quotedAs = '';			if (!is_null($as))			{				settype($as, 'array');				$quotedAs .= ' AS ' . $this->quoteNameStr($as);			}			return $quotedName . $quotedAs;		}		else		{			$fin = array();			if (is_null($as))			{				foreach ($name as $str)				{					$fin[] = $this->quoteName($str);				}			}			elseif (is_array($name) && (count($name) == count($as)))			{				$count = count($name);				for ($i = 0; $i < $count; $i++)				{					$fin[] = $this->quoteName($name[$i], $as[$i]);				}			}			return $fin;		}	}	/**	 * Quote strings coming from quoteName call.	 *	 * @param   array  $strArr  Array of strings coming from quoteName dot-explosion.	 *	 * @return  string  Dot-imploded string of quoted parts.	 *	 * @since 11.3	 */	protected function quoteNameStr($strArr)	{		$parts = array();		$q = $this->nameQuote;		foreach ($strArr as $part)		{			if (is_null($part))			{				continue;			}			if (strlen($q) == 1)			{				$parts[] = $q . $part . $q;			}			else			{				$parts[] = $q{0} . $part . $q{1};			}		}		return implode('.', $parts);	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   11.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$escaped = false;		$startPos = 0;		$quoteChar = '';		$literal = '';		$query = trim($query);		$n = strlen($query);		while ($startPos < $n)		{			$ip = strpos($query, $prefix, $startPos);			if ($ip === false)			{				break;			}			$j = strpos($query, "'", $startPos);			$k = strpos($query, '"', $startPos);			if (($k !== false) && (($k < $j) || ($j === false)))			{				$quoteChar = '"';				$j = $k;			}			else			{				$quoteChar = "'";			}			if ($j === false)			{				$j = $n;			}			$literal .= str_replace($prefix, $this->tablePrefix, substr($query, $startPos, $j - $startPos));			$startPos = $j;			$j = $startPos + 1;			if ($j >= $n)			{				break;			}			// Quote comes first, find end of quote			while (true)			{				$k = strpos($query, $quoteChar, $j);				$escaped = false;				if ($k === false)				{					break;				}				$l = $k - 1;				while ($l >= 0 && $query{$l} == '\\')				{					$l--;					$escaped = !$escaped;				}				if ($escaped)				{					$j = $k + 1;					continue;				}				break;			}			if ($k === false)			{				// Error in the query - no end quote; ignore it				break;			}			$literal .= substr($query, $startPos, $k - $startPos + 1);			$startPos = $k + 1;		}		if ($startPos < $n)		{			$literal .= substr($query, $startPos, $n - $startPos);		}		return $literal;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Table prefix	 * @param   string  $prefix    For the table - used to rename constraints in non-mysql databases	 *	 * @return  JDatabaseDriver    Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function renameTable($oldTable, $newTable, $backup = null, $prefix = null);	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function select($database);	/**	 * Sets the database debugging state for the driver.	 *	 * @param   boolean  $level  True to enable debugging.	 *	 * @return  boolean  The old debugging level.	 *	 * @since   11.1	 */	public function setDebug($level)	{		$previous = $this->debug;		$this->debug = (bool) $level;		return $previous;	}	/**	 * Sets the SQL statement string for later execution.	 *	 * @param   mixed    $query   The SQL statement to set either as a JDatabaseQuery object or a string.	 * @param   integer  $offset  The affected row offset to set.	 * @param   integer  $limit   The maximum affected rows to set.	 *	 * @return  JDatabaseDriver  This object to support method chaining.	 *	 * @since   11.1	 */	public function setQuery($query, $offset = 0, $limit = 0)	{		$this->sql = $query;		$this->limit = (int) max(0, $limit);		$this->offset = (int) max(0, $offset);		return $this;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	abstract public function setUTF();	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionCommit();	/**	 * Method to roll back a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionRollback();	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionStart();	/**	 * Method to truncate a table.	 *	 * @param   string  $table  The table to truncate	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function truncateTable($table)	{		$this->setQuery('TRUNCATE TABLE ' . $this->quoteName($table));		$this->execute();	}	/**	 * Updates a row in a table based on an object's properties.	 *	 * @param   string   $table    The name of the database table to update.	 * @param   object   &$object  A reference to an object whose public properties match the table fields.	 * @param   array    $key      The name of the primary key.	 * @param   boolean  $nulls    True to update null fields or false to ignore them.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function updateObject($table, &$object, $key, $nulls = false)	{		$fields = array();		$where = array();		if (is_string($key))		{			$key = array($key);		}		if (is_object($key))		{			$key = (array) $key;		}		// Create the base update statement.		$statement = 'UPDATE ' . $this->quoteName($table) . ' SET %s WHERE %s';		// Iterate over the object variables to build the query fields/value pairs.		foreach (get_object_vars($object) as $k => $v)		{			// Only process scalars that are not internal fields.			if (is_array($v) or is_object($v) or $k[0] == '_')			{				continue;			}			// Set the primary key to the WHERE clause instead of a field to update.			if (in_array($k, $key))			{				$where[] = $this->quoteName($k) . '=' . $this->quote($v);				continue;			}			// Prepare and sanitize the fields and values for the database query.			if ($v === null)			{				// If the value is null and we want to update nulls then set it.				if ($nulls)				{					$val = 'NULL';				}				// If the value is null and we do not want to update nulls then ignore this field.				else				{					continue;				}			}			// The field is not null so we prep it for update.			else			{				$val = $this->quote($v);			}			// Add the field to be updated.			$fields[] = $this->quoteName($k) . '=' . $val;		}		// We don't have any fields to update.		if (empty($fields))		{			return true;		}		// Set the query and execute the update.		$this->setQuery(sprintf($statement, implode(",", $fields), implode(' AND ', $where)));		return $this->execute();	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	abstract public function execute();	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriver  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function unlockTables();}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tag Model * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsModelTag extends JModelList{	/**	 * The tags that apply.	 *	 * @var    object	 * @since  3.1	 */	protected $tag = null;	/**	 * The list of items associated with the tags.	 *	 * @var    array	 * @since  3.1	 */	protected $items = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   3.1	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'core_content_id', 'c.core_content_id',				'core_title', 'c.core_title',				'core_type_alias', 'c.core_type_alias',				'core_checked_out_user_id', 'c.core_checked_out_user_id',				'core_checked_out_time', 'c.core_checked_out_time',				'core_catid', 'c.core_catid',				'core_state', 'c.core_state',				'core_access', 'c.core_access',				'core_created_user_id', 'c.core_created_user_id',				'core_created_time', 'c.core_created_time',				'core_modified_time', 'c.core_modified_time',				'core_ordering', 'c.core_ordering',				'core_featured', 'c.core_featured',				'core_language', 'c.core_language',				'core_hits', 'c.core_hits',				'core_publish_up', 'c.core_publish_up',				'core_publish_down', 'c.core_publish_down',				'core_images', 'c.core_images',				'core_urls', 'c.core_urls',				'match_count',			);		}		parent::__construct($config);	}	/**	 * Method to get a list of items for a list of tags.	 *	 * @return  mixed  An array of objects on success, false on failure.	 *	 * @since   3.1	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		if (!empty($items))		{			foreach ($items as $item)			{				$explodedTypeAlias = explode('.', $item->type_alias);				$item->link = 'index.php?option=' . $explodedTypeAlias[0] . '&view=' . $explodedTypeAlias[1] . '&id=' . $item->content_item_id . ':' . $item->core_alias;				// Get display date				switch ($this->state->params->get('tag_list_show_date'))				{					case 'modified':						$item->displayDate = $item->core_modified_time;						break;					case 'created':						$item->displayDate = $item->core_created_time;						break;					default:					case 'published':						$item->displayDate = ($item->core_publish_up == 0) ? $item->core_created_time : $item->core_publish_up;						break;				}			}			return $items;		}		else		{			return false;		}	}	/**	 * Method to build an SQL query to load the list data of all items with a given tag.	 *	 * @return  string  An SQL query	 *	 * @since   3.1	 */	protected function getListQuery()	{		$tagId  = $this->getState('tag.id') ? : '';		$typesr = $this->getState('tag.typesr');		$orderByOption = $this->getState('list.ordering', 'c.core_title');		$includeChildren = $this->state->params->get('include_children', 0);		$orderDir = $this->getState('list.direction', 'ASC');		$matchAll = $this->getState('params')->get('return_any_or_all', 1);		$language = $this->getState('tag.language');		$stateFilter = $this->getState('tag.state');	// Optionally filter on language		if (empty($language))		{			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');		}		$listQuery = New JHelperTags;		$query = $listQuery->getTagItemsQuery($tagId, $typesr, $includeChildren, $orderByOption, $orderDir, $matchAll, $language, $stateFilter);		if ($this->state->get('list.filter'))		{			$query->where($this->_db->quoteName('c.core_title') . ' LIKE ' . $this->_db->quote('%' . $this->state->get('list.filter') . '%'));		}		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState($ordering = 'c.core_title', $direction = 'ASC')	{		$app = JFactory::getApplication('site');		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		// Load state from the request.		$pk = $app->input->getObject('id');		$pk = (array) $pk;		$pkString = '';		foreach ($pk as $id)		{			$pkString .= (int) $id . ',';		}		$pkString = rtrim($pkString, ',');		$this->setState('tag.id', $pkString);		// Get the selected list of types from the request. If none are specified all are used.		$typesr = $app->input->getObject('types');		if ($typesr)		{			$typesr = (array) $typesr;			$this->setState('tag.typesr', $typesr);		}		$language = $app->input->getString('tag_list_language_filter');		$this->setState('tag.language', $language);		// List state information		$format = $app->input->getWord('format');		if ($format == 'feed')		{			$limit = $app->getCfg('feed_limit');		}		else		{			if ($this->state->params->get('show_pagination_limit'))			{				$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');			}			else			{				$limit = $this->state->params->get('maximum', 20);			}		}		$this->setState('list.limit', $limit);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $offset);		$itemid = $pkString . ':' . $app->input->get('Itemid', 0, 'int');		$orderCol = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');		$orderCol = !$orderCol ? $this->state->params->get('tag_list_orderby', 'c.core_title') : $orderCol;		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'c.core_title';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_order_direction', 'filter_order_Dir', '', 'string');		$listOrder = !$listOrder ? $this->state->params->get('tag_list_orderby_direction', 'ASC') : $listOrder;		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$this->setState('tag.state', 1);		// Optional filter text		$filterSearch = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_search', 'filter-search', '', 'string');		$this->setState('list.filter', $filterSearch);	}	/**	 * Method to get tag data for the current tag or tags	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   3.1	 */	public function getItem($pk = null)	{		if (!isset($this->item) ||$this->item === null)		{			$this->item = false;			if (empty($id))			{				$id = $this->getState('tag.id');			}			// Get a level row instance.			$table = JTable::getInstance('Tag', 'TagsTable');			$idsArray = explode(',', $id);			// Attempt to load the rows into an array.			foreach ($idsArray as $id)			{				try				{					$table->load($id);					// Check published state.					if ($published = $this->getState('filter.published'))					{						if ($table->published != $published)						{							return $this->item;						}					}					// Convert the JTable to a clean JObject.					$properties = $table->getProperties(1);					$this->item[] = JArrayHelper::toObject($properties, 'JObject');				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}		}		return $this->item;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Libraries * @subpackage  Form * @since       3.1 */class JFormFieldContenttype extends JFormFieldList{	/**	 * A flexible tag list that respects access controls	 *	 * @var    string	 * @since  3.1	 */	public $type = 'Contenttype';	/**	 * Method to get the field input for a list of content types.	 *	 * @return  string  The field input.	 *	 * @since   3.1	 */	protected function getInput()	{		if (!is_array($this->value))		{			if (is_object($this->value))			{				$this->value = $this->value->tags;			}			if (is_string($this->value))			{				$this->value = explode(',', $this->value);			}		}		$input = parent::getInput();		return $input;	}	/**	 * Method to get a list of content types	 *	 * @return  array  The field option objects.	 *	 * @since   3.1	 */	protected function getOptions()	{		$options = array();		$name = (string) $this->element['name'];		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('a.type_id AS value, a.type_title AS text')			->from('#__content_types AS a')			->order('a.type_title ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return false;		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		foreach ($options as $option)		{			$option->text = mb_strtoupper(str_replace(' ', '_', $option->text), 'UTF-8');			$option->text = 'COM_TAGS_CONTENT_TYPE_' . $option->text;			$option->text = JText::_($option->text);		}		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Comment class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/Comment/ * @since       13.1 */class JFacebookComment extends JFacebookObject{	/**	 * Method to get a comment. Requires authentication.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComment($comment)	{		return $this->get($comment);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get a comment's comments. Requires authentication.	 *	 * @param   string   $comment  The comment id.	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($comment, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($comment, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a comment. Requires authentication with publish_stream permission.	 *	 * @param   string  $comment  The comment id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($comment, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($comment, 'comments', $data);	}	/**	 * Method to get comment's likes. Requires authentication.	 *	 * @param   string   $comment  The comment id.	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($comment, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($comment, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a comment. Requires authentication and publish_stram permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($comment)	{		return $this->createConnection($comment, 'likes');	}	/**	 * Method to unlike a comment. Requires authentication and publish_stram permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($comment)	{		return $this->deleteConnection($comment, 'likes');	}}
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');/** * Configuration setup model for the Joomla Core Installer. * * @package     Joomla.Installation * @subpackage  Model * @since       3.1 */class InstallationModelConfiguration extends JModelBase{	/**	 * Method to setup the configuration file	 *	 * @param   array  $options  The session options	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function setup($options)	{		// Get the options as an object for easier handling.		$options = JArrayHelper::toObject($options);		// Attempt to create the root user.		if (!$this->_createConfiguration($options))		{			return false;		}		// Attempt to create the root user.		if (!$this->_createRootUser($options))		{			return false;		}		return true;	}	/**	 * Method to create the configuration file	 *	 * @param   array  $options  The session options	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	function _createConfiguration($options)	{		// Create a new registry to build the configuration options.		$registry = new JRegistry;		/* Site Settings */		$registry->set('offline', $options->site_offline);		$registry->set('offline_message', JText::_('INSTL_STD_OFFLINE_MSG'));		$registry->set('display_offline_message', 1);		$registry->set('offline_image', '');		$registry->set('sitename', $options->site_name);		$registry->set('editor', 'tinymce');		$registry->set('captcha', '0');		$registry->set('list_limit', 20);		$registry->set('access', 1);		/* Debug Settings */		$registry->set('debug', 0);		$registry->set('debug_lang', 0);		/* Database Settings */		$registry->set('dbtype', $options->db_type);		$registry->set('host', $options->db_host);		$registry->set('user', $options->db_user);		$registry->set('password', $options->db_pass);		$registry->set('db', $options->db_name);		$registry->set('dbprefix', $options->db_prefix);		/* Server Settings */		$registry->set('live_site', '');		$registry->set('secret', JUserHelper::genRandomPassword(16));		$registry->set('gzip', 0);		$registry->set('error_reporting', 'default');		$registry->set('helpurl', 'http://help.joomla.org/proxy/index.php?option=com_help&amp;keyref=Help{major}{minor}:{keyref}');		$registry->set('ftp_host', isset($options->ftp_host) ? $options->ftp_host : '');		$registry->set('ftp_port', isset($options->ftp_host) ? $options->ftp_port : '');		$registry->set('ftp_user', (isset($options->ftp_save) && $options->ftp_save && isset($options->ftp_user)) ? $options->ftp_user : '');		$registry->set('ftp_pass', (isset($options->ftp_save) && $options->ftp_save && isset($options->ftp_pass)) ? $options->ftp_pass : '');		$registry->set('ftp_root', (isset($options->ftp_save) && $options->ftp_save && isset($options->ftp_root)) ? $options->ftp_root : '');		$registry->set('ftp_enable', isset($options->ftp_host) ? $options->ftp_enable : '');		/* Locale Settings */		$registry->set('offset', 'UTC');		/* Mail Settings */		$registry->set('mailer', 'mail');		$registry->set('mailfrom', $options->admin_email);		$registry->set('fromname', $options->site_name);		$registry->set('sendmail', '/usr/sbin/sendmail');		$registry->set('smtpauth', 0);		$registry->set('smtpuser', '');		$registry->set('smtppass', '');		$registry->set('smtphost', 'localhost');		$registry->set('smtpsecure', 'none');		$registry->set('smtpport', '25');		/* Cache Settings */		$registry->set('caching', 0);		$registry->set('cache_handler', 'file');		$registry->set('cachetime', 15);		/* Meta Settings */		$registry->set('MetaDesc', $options->site_metadesc);		$registry->set('MetaKeys', '');		$registry->set('MetaTitle', 1);		$registry->set('MetaAuthor', 1);		$registry->set('MetaVersion', 0);		$registry->set('robots', '');		/* SEO Settings */		$registry->set('sef', 1);		$registry->set('sef_rewrite', 0);		$registry->set('sef_suffix', 0);		$registry->set('unicodeslugs', 0);		/* Feed Settings */		$registry->set('feed_limit', 10);		$registry->set('log_path', JPATH_ROOT . '/logs');		$registry->set('tmp_path', JPATH_ROOT . '/tmp');		/* Session Setting */		$registry->set('lifetime', 15);		$registry->set('session_handler', 'database');		// Generate the configuration class string buffer.		$buffer = $registry->toString('PHP', array('class' => 'JConfig', 'closingtag' => false));		// Build the configuration file path.		$path = JPATH_CONFIGURATION . '/configuration.php';		// Determine if the configuration file path is writable.		if (file_exists($path))		{			$canWrite = is_writable($path);		}		else		{			$canWrite = is_writable(JPATH_CONFIGURATION . '/');		}		/*		 * If the file exists but isn't writable OR if the file doesn't exist and the parent directory		 * is not writable we need to use FTP		 */		$useFTP = false;		if ((file_exists($path) && !is_writable($path)) || (!file_exists($path) && !is_writable(dirname($path) . '/')))		{			$useFTP = true;		}		// Check for safe mode		if (ini_get('safe_mode'))		{			$useFTP = true;		}		// Enable/Disable override		if (!isset($options->ftpEnable) || ($options->ftpEnable != 1))		{			$useFTP = false;		}		if ($useFTP == true)		{			// Connect the FTP client			jimport('joomla.filesystem.path');			$ftp = JClientFtp::getInstance($options->ftp_host, $options->ftp_port);			$ftp->login($options->ftp_user, $options->ftp_pass);			// Translate path for the FTP account			$file = JPath::clean(str_replace(JPATH_CONFIGURATION, $options->ftp_root, $path), '/');			// Use FTP write buffer to file			if (!$ftp->write($file, $buffer))			{				// Set the config string to the session.				$session = JFactory::getSession();				$session->set('setup.config', $buffer);			}			$ftp->quit();		}		else		{			if ($canWrite)			{				file_put_contents($path, $buffer);				$session = JFactory::getSession();				$session->set('setup.config', null);			}			else			{				// Set the config string to the session.				$session = JFactory::getSession();				$session->set('setup.config', $buffer);			}		}		return true;	}	/**	 * Method to create the root user for the site	 *	 * @param   array  $options  The session options	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	private function _createRootUser($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get a database object.		try		{			$db = InstallationHelperDatabase::getDBO($options->db_type, $options->db_host, $options->db_user, $options->db_pass, $options->db_name, $options->db_prefix);		}		catch (RuntimeException $e)		{			$app->enqueueMessage(JText::sprintf('INSTL_ERROR_CONNECT_DB', $e->getMessage()), 'notice');			return false;		}		// Create random salt/password for the admin user		$salt = JUserHelper::genRandomPassword(32);		$crypt = JUserHelper::getCryptedPassword($options->admin_password, $salt);		$cryptpass = $crypt . ':' . $salt;		// Take the admin user id		$userId = InstallationModelDatabase::getUserId();		// We don't need the randUserId in the session any longer, let's remove it		InstallationModelDatabase::resetRandUserId();		// Create the admin user		date_default_timezone_set('UTC');		$installdate = date('Y-m-d H:i:s');		$nullDate    = $db->getNullDate();		// Sqlsrv change		$query = $db->getQuery(true)			->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('id') . ' = ' . $db->quote($userId));		$db->setQuery($query);		if ($db->loadResult())		{			$query = $db->getQuery(true)				->update($db->quoteName('#__users'))				->set($db->quoteName('name') . ' = ' . $db->quote('Super User'))				->set($db->quoteName('username') . ' = ' . $db->quote($options->admin_user))				->set($db->quoteName('email') . ' = ' . $db->quote($options->admin_email))				->set($db->quoteName('password') . ' = ' . $db->quote($cryptpass))				->set($db->quoteName('block') . ' = 0')				->set($db->quoteName('sendEmail') . ' = 1')				->set($db->quoteName('registerDate') . ' = ' . $db->quote($installdate))				->set($db->quoteName('lastvisitDate') . ' = ' . $db->quote($nullDate))				->set($db->quoteName('activation') . ' = ' . $db->quote('0'))				->set($db->quoteName('params') . ' = ' . $db->quote(''))				->where($db->quoteName('id') . ' = ' . $db->quote($userId));		}		else		{			$query = $db->getQuery(true);			$columns = array($db->quoteName('id'), $db->quoteName('name'), $db->quoteName('username'),							$db->quoteName('email'), $db->quoteName('password'),							$db->quoteName('block'),							$db->quoteName('sendEmail'), $db->quoteName('registerDate'),							$db->quoteName('lastvisitDate'), $db->quoteName('activation'), $db->quoteName('params'));			$query->insert('#__users', true)				->columns($columns)				->values(				$db->quote($userId) . ', ' . $db->quote('Super User') . ', ' . $db->quote($options->admin_user) . ', ' .				$db->quote($options->admin_email) . ', ' . $db->quote($cryptpass) . ', ' .				$db->quote('0') . ', ' . $db->quote('1') . ', ' . $db->quote($installdate) . ', ' . $db->quote($nullDate) . ', ' .				$db->quote('0') . ', ' . $db->quote('')			);		}		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$app->enqueueMessage($e->getMessage(), 'notice');			return false;		}		// Map the super admin to the Super Admin Group		$query = $db->getQuery(true)			->select($db->quoteName('user_id'))			->from($db->quoteName('#__user_usergroup_map'))			->where($db->quoteName('user_id') . ' = ' . $db->quote($userId));		$db->setQuery($query);		if ($db->loadResult())		{			$query = $db->getQuery(true)				->update($db->quoteName('#__user_usergroup_map'))				->set($db->quoteName('user_id') . ' = ' . $db->quote($userId))				->set($db->quoteName('group_id') . ' = 8');		}		else		{			$query = $db->getQuery(true)				->insert($db->quoteName('#__user_usergroup_map'), false)				->columns(array($db->quoteName('user_id'), $db->quoteName('group_id')))				->values($db->quote($userId) . ', 8');		}		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$app->enqueueMessage($e->getMessage(), 'notice');			return false;		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-vertical">	<legend><?php echo JText::_('COM_CONFIG_PERMISSION_SETTINGS'); ?></legend>	<?php foreach ($this->form->getFieldset('permissions') as $field) : ?>		<div class="control-group">			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the default application languages for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSetdefaultlanguage extends JControllerBase{	/**	 * Constructor.	 *	 * @since   3.1	 */	public function __construct()	{		parent::__construct();		// Overrides application config and set the configuration.php file so tokens and database works		JFactory::$config = null;		JFactory::getConfig(JPATH_SITE . '/configuration.php');		JFactory::$session = null;	}	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the languages model.		$model = new InstallationModelLanguages;		// Check for request forgeries in the administrator language		$admin_lang = $this->input->getString('administratorlang', false);		// Check that the string is an ISO Language Code avoiding any injection.		if (!preg_match('/^[a-z]{2}(\-[A-Z]{2})?$/', $admin_lang))		{			$admin_lang = 'en-GB';		}		// Attempt to set the default administrator language		if (!$model->setDefault($admin_lang, 'administrator'))		{			// Create a error response message.			$app->enqueueMessage(JText::_('INSTL_DEFAULTLANGUAGE_ADMIN_COULDNT_SET_DEFAULT'), 'error');		}		else		{			// Create a response body.			$app->enqueueMessage(JText::sprintf('INSTL_DEFAULTLANGUAGE_ADMIN_SET_DEFAULT', $admin_lang));		}		// Check for request forgeries in the site language		$frontend_lang = $this->input->getString('frontendlang', false);		// Check that the string is an ISO Language Code avoiding any injection.		if (!preg_match('/^[a-z]{2}(\-[A-Z]{2})?$/', $frontend_lang))		{			$frontend_lang = 'en-GB';		}		// Attempt to set the default site language		if (!$model->setDefault($frontend_lang, 'site'))		{			// Create a error response message.			$app->enqueueMessage(JText::_('INSTL_DEFAULTLANGUAGE_FRONTEND_COULDNT_SET_DEFAULT'), 'error');		}		else		{			// Create a response body.			$app->enqueueMessage(JText::sprintf('INSTL_DEFAULTLANGUAGE_FRONTEND_SET_DEFAULT', $frontend_lang));		}		$r = new stdClass;		// Redirect to the final page.		$r->view = 'remove';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a list of available database connections, optionally limiting to * a given list. * * @package     Joomla.Platform * @subpackage  Form * @see         JDatabaseDriver * @since       11.3 */class JFormFieldDatabaseConnection extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.3	 */	public $type = 'DatabaseConnection';	/**	 * Method to get the list of database options.	 *	 * This method produces a drop down list of available databases supported	 * by JDatabaseDriver classes that are also supported by the application.	 *	 * @return  array    The field option objects.	 *	 * @since   11.3	 * @see		JDatabaseDriver	 */	protected function getOptions()	{		// This gets the connectors available in the platform and supported by the server.		$available = JDatabaseDriver::getConnectors();		/**		 * This gets the list of database types supported by the application.		 * This should be entered in the form definition as a comma separated list.		 * If no supported databases are listed, it is assumed all available databases		 * are supported.		 */		$supported = $this->element['supported'];		if (!empty($supported))		{			$supported = explode(',', $supported);			foreach ($supported as $support)			{				if (in_array($support, $available))				{					$options[$support] = JText::_(ucfirst($support));				}			}		}		else		{			foreach ($available as $support)			{				$options[$support] = JText::_(ucfirst($support));			}		}		// This will come into play if an application is installed that requires		// a database that is not available on the server.		if (empty($options))		{			$options[''] = JText::_('JNONE');		}		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Modules component * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewSelect extends JViewLegacy{	protected $state;	protected $items;	/**	 * Display the view	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->state = &$state;		$this->items = &$items;		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   3.0	 */	protected function addToolbar()	{		// Add page title		JToolbarHelper::title(JText::_('COM_MODULES_MANAGER_MODULES'), 'module.png');		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Cancel		$title = JText::_('JTOOLBAR_CANCEL');		$dhtml = "<button onClick=\"location.href='index.php?option=com_modules'\" class=\"btn\">					<i class=\"icon-remove\" title=\"$title\"></i>					$title</button>";		$bar->appendButton('Custom', $dhtml, 'new');	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// No direct access.defined('_JEXEC') or die;JLoader::import('joomla.filesystem.file');// Check modules$showRightColumn	= ($this->countModules('position-3') or $this->countModules('position-6') or $this->countModules('position-8'));$showbottom			= ($this->countModules('position-9') or $this->countModules('position-10') or $this->countModules('position-11'));$showleft			= ($this->countModules('position-4') or $this->countModules('position-7') or $this->countModules('position-5'));if ($showRightColumn == 0 and $showleft == 0){	$showno = 0;}JHtml::_('behavior.framework', true);// Get params$color				= $this->params->get('templatecolor');$logo				= $this->params->get('logo');$navposition		= $this->params->get('navposition');$headerImage		= $this->params->get('headerImage');$app				= JFactory::getApplication();$doc				= JFactory::getDocument();$templateparams		= $app->getTemplate(true)->params;$config = JFactory::getConfig();$bootstrap = explode(',', $templateparams->get('bootstrap'));$jinput = JFactory::getApplication()->input;$option = $jinput->get('option', '', 'cmd');if (in_array($option, $bootstrap)){	// Load optional rtl Bootstrap css and Bootstrap bugfixes	JHtml::_('bootstrap.loadCss', true, $this->direction);}$doc->addStyleSheet(JURI::base() . 'templates/system/css/system.css');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/position.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/layout.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/print.css', $type = 'text/css', $media = 'print');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/general.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/' . htmlspecialchars($color) . '.css', $type = 'text/css', $media = 'screen,projection');if ($this->direction == 'rtl'){	$doc->addStyleSheet($this->baseurl . '/templates/' . $this->template . '/css/template_rtl.css');	if (file_exists(JPATH_SITE . '/templates/' . $this->template . '/css/' . $color . '_rtl.css'))	{		$doc->addStyleSheet($this->baseurl . '/templates/' . $this->template . '/css/' . htmlspecialchars($color) . '_rtl.css');	}}JHtml::_('bootstrap.framework');$doc->addScript($this->baseurl . '/templates/' . $this->template . '/javascript/md_stylechanger.js', 'text/javascript');$doc->addScript($this->baseurl . '/templates/' . $this->template . '/javascript/hide.js', 'text/javascript');$doc->addScript($this->baseurl . '/templates/' . $this->template . '/javascript/respond.src.js', 'text/javascript');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" >	<head>		<?php require __DIR__ . '/jsstrings.php';?>		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=3.0, user-scalable=yes"/>		<meta name="HandheldFriendly" content="true" />		<meta name="apple-mobile-web-app-capable" content="YES" />		<jdoc:include type="head" />		<!--[if IE 7]>		<link href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/ie7only.css" rel="stylesheet" type="text/css" />		<![endif]-->	</head>	<body id="shadow">		<?php if ($color == 'image'):?>			<style type="text/css">				.logoheader {					background:url('<?php echo $this->baseurl . '/' . htmlspecialchars($headerImage); ?>') no-repeat right;				}				body {					background: <?php echo $templateparams->get('backgroundcolor'); ?>;				}			</style>		<?php endif; ?>		<div id="all">			<div id="back">				<header id="header">					<div class="logoheader">						<h1 id="logo">						<?php if ($logo) : ?>							<img src="<?php echo $this->baseurl ?>/<?php echo htmlspecialchars($logo); ?>"  alt="<?php echo htmlspecialchars($templateparams->get('sitetitle'));?>" />						<?php endif;?>						<?php if (!$logo AND $templateparams->get('sitetitle')) : ?>							<?php echo htmlspecialchars($templateparams->get('sitetitle'));?>						<?php elseif (!$logo AND $config->get('sitename')) : ?>							<?php echo htmlspecialchars($config->get('sitename'));?>						<?php endif; ?>						<span class="header1">						<?php echo htmlspecialchars($templateparams->get('sitedescription'));?>						</span></h1>					</div><!-- end logoheader -->					<ul class="skiplinks">						<li><a href="#main" class="u2"><?php echo JText::_('TPL_BEEZ3_SKIP_TO_CONTENT'); ?></a></li>						<li><a href="#nav" class="u2"><?php echo JText::_('TPL_BEEZ3_JUMP_TO_NAV'); ?></a></li>						<?php if ($showRightColumn) : ?>							<li><a href="#right" class="u2"><?php echo JText::_('TPL_BEEZ3_JUMP_TO_INFO'); ?></a></li>						<?php endif; ?>					</ul>					<h2 class="unseen"><?php echo JText::_('TPL_BEEZ3_NAV_VIEW_SEARCH'); ?></h2>					<h3 class="unseen"><?php echo JText::_('TPL_BEEZ3_NAVIGATION'); ?></h3>					<jdoc:include type="modules" name="position-1" />					<div id="line">						<div id="fontsize"></div>						<h3 class="unseen"><?php echo JText::_('TPL_BEEZ3_SEARCH'); ?></h3>						<jdoc:include type="modules" name="position-0" />					</div> <!-- end line -->				</header><!-- end header -->				<div id="<?php echo $showRightColumn ? 'contentarea2' : 'contentarea'; ?>">					<div id="breadcrumbs">						<jdoc:include type="modules" name="position-2" />					</div>					<?php if ($navposition == 'left' and $showleft) : ?>						<nav class="left1 <?php if ($showRightColumn == null){ echo 'leftbigger';} ?>" id="nav">							<jdoc:include type="modules" name="position-7" style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-4" style="beezHide" headerLevel="3" state="0 " />							<jdoc:include type="modules" name="position-5" style="beezTabs" headerLevel="2"  id="3" />						</nav><!-- end navi -->					<?php endif; ?>					<div id="<?php echo $showRightColumn ? 'wrapper' : 'wrapper2'; ?>" <?php if (isset($showno)){echo 'class="shownocolumns"';}?>>						<div id="main">							<?php if ($this->countModules('position-12')) : ?>								<div id="top">									<jdoc:include type="modules" name="position-12" />								</div>							<?php endif; ?>							<jdoc:include type="message" />							<jdoc:include type="component" />						</div><!-- end main -->					</div><!-- end wrapper -->					<?php if ($showRightColumn) : ?>						<div id="close">							<a href="#" onclick="auf('right')">							<span id="bild">								<?php echo JText::_('TPL_BEEZ3_TEXTRIGHTCLOSE'); ?>							</span>							</a>						</div>						<aside id="right">							<h2 class="unseen"><?php echo JText::_('TPL_BEEZ3_ADDITIONAL_INFORMATION'); ?></h2>							<jdoc:include type="modules" name="position-6" style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-8" style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-3" style="beezDivision" headerLevel="3" />						</aside><!-- end right -->					<?php endif; ?>					<?php if ($navposition == 'center' and $showleft) : ?>						<nav class="left <?php if ($showRightColumn == null) { echo 'leftbigger'; } ?>" id="nav" >							<jdoc:include type="modules" name="position-7"  style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-4" style="beezHide" headerLevel="3" state="0 " />							<jdoc:include type="modules" name="position-5" style="beezTabs" headerLevel="2"  id="3" />						</nav><!-- end navi -->					<?php endif; ?>					<div class="wrap"></div>				</div> <!-- end contentarea -->			</div><!-- back -->		</div><!-- all -->		<div id="footer-outer">			<?php if ($showbottom) : ?>				<div id="footer-inner" >					<div id="bottom">						<div class="box box1"> <jdoc:include type="modules" name="position-9" style="beezDivision" headerlevel="3" /></div>						<div class="box box2"> <jdoc:include type="modules" name="position-10" style="beezDivision" headerlevel="3" /></div>						<div class="box box3"> <jdoc:include type="modules" name="position-11" style="beezDivision" headerlevel="3" /></div>					</div>				</div>			<?php endif; ?>			<div id="footer-sub">				<footer id="footer">					<jdoc:include type="modules" name="position-14" />				</footer><!-- end footer -->			</div>		</div>		<jdoc:include type="modules" name="debug" />	</body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=templates'); ?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>    	<div id="filter-bar" class="btn-toolbar">  		<div class="filter-search btn-group pull-left">  			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_TEMPLATES_TEMPLATES_FILTER_SEARCH_DESC'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TEMPLATES_TEMPLATES_FILTER_SEARCH_DESC'); ?>" />  		</div>  		<div class="btn-group pull-left">  			<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>  			<button class="btn tip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>  		</div>  	</div>  	<div class="clearfix"> </div>  	<table class="table table-striped" id="template-mgr">  		<thead>  			<tr>  				<th class="col1template">  					&#160;  				</th>  				<th>  					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_TEMPLATE', 'a.element', $listDirn, $listOrder); ?>  				</th>  				<th width="10%">  					<?php echo JHtml::_('grid.sort', 'JCLIENT', 'a.client_id', $listDirn, $listOrder); ?>  				</th>  				<th width="10%">  					<?php echo JText::_('JVERSION'); ?>  				</th>  				<th width="15%">  					<?php echo JText::_('JDATE'); ?>  				</th>  				<th width="25%" >  					<?php echo JText::_('JAUTHOR'); ?>  				</th>  			</tr>  		</thead>  		<tfoot>  			<tr>  				<td colspan="8">  					<?php echo $this->pagination->getListFooter(); ?>  				</td>  			</tr>  		</tfoot>  		<tbody>  		<?php foreach ($this->items as $i => $item) : ?>  			<tr class="row<?php echo $i % 2; ?>">  				<td class="center">  					<?php echo JHtml::_('templates.thumb', $item->element, $item->client_id); ?>  				</td>  				<td class="template-name">  					<a href="<?php echo JRoute::_('index.php?option=com_templates&view=template&id='.(int) $item->extension_id); ?>">  						<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_DETAILS', ucfirst($item->name)); ?></a>  					<p>  					<?php if ($this->preview && $item->client_id == '0') : ?>  						<a href="<?php echo JURI::root().'index.php?tp=1&template='.$item->element; ?>" target="_blank">  							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_PREVIEW'); ?></a>  					<?php elseif ($item->client_id == '1') : ?>  						<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_ADMIN'); ?>  					<?php else: ?>  						<span class="hasTip" title="<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?>::<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_DESC'); ?>">  							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?></span>  					<?php endif; ?>  					</p>  				</td>  				<td class="small">  					<?php echo $item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>  				</td>  				<td class="small">  					<?php echo $this->escape($item->xmldata->get('version')); ?>  				</td>  				<td class="small">  					<?php echo $this->escape($item->xmldata->get('creationDate')); ?>  				</td>  				<td>  					<?php if ($author = $item->xmldata->get('author')) : ?>  						<p><?php echo $this->escape($author); ?></p>  					<?php else : ?>  						&mdash;  					<?php endif; ?>  					<?php if ($email = $item->xmldata->get('authorEmail')) : ?>  						<p><?php echo $this->escape($email); ?></p>  					<?php endif; ?>  					<?php if ($url = $item->xmldata->get('authorUrl')) : ?>  						<p><a href="<?php echo $this->escape($url); ?>">  							<?php echo $this->escape($url); ?></a></p>  					<?php endif; ?>  				</td>  			</tr>  			<?php endforeach; ?>  		</tbody>  	</table>    	<input type="hidden" name="task" value="" />  	<input type="hidden" name="boxchecked" value="0" />  	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'moduleOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MODULES_'.$name.'_FIELDSET_LABEL';		$class = isset($fieldSet->class) && !empty($fieldSet->class) ? $fieldSet->class : '';		echo JHtml::_('bootstrap.addSlide', 'moduleOptions', JText::_($label), 'collapse' . $i++, $class);			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach;		echo JHtml::_('bootstrap.endSlide');	endforeach;echo JHtml::_('bootstrap.endAccordion');
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banner table * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersTableBanner extends JTable{	/**	 * Constructor	 *	 * @since   1.5	 */	public function __construct(&$_db)	{		parent::__construct('#__banners', 'id', $_db);		$date = JFactory::getDate();		$this->created = $date->toSql();	}	public function clicks()	{		$query = 'UPDATE #__banners'		. ' SET clicks = (clicks + 1)'		. ' WHERE id = ' . (int) $this->id;		$this->_db->setQuery($query);		$this->_db->execute();	}	/**	 * Overloaded check function	 *	 * @return  boolean	 * @see     JTable::check	 * @since   1.5	 */	public function check()	{		// Set name		$this->name = htmlspecialchars_decode($this->name, ENT_QUOTES);		// Set alias		$this->alias = JApplication::stringURLSafe($this->alias);		if (empty($this->alias))		{			$this->alias = JApplication::stringURLSafe($this->name);		}		// Check the publish down date is not earlier than publish up.		if ($this->publish_down > $this->_db->getNullDate() && $this->publish_down < $this->publish_up)		{			$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));			return false;		}		// Set ordering		if ($this->state < 0)		{			// Set ordering to 0 if state is archived or trashed			$this->ordering = 0;		} elseif (empty($this->ordering))		{			// Set ordering to last if ordering was 0			$this->ordering = self::getNextOrder($this->_db->quoteName('catid').'=' . $this->_db->quote($this->catid).' AND state>=0');		}		return true;	}	/**	 * Overloaded bind function	 *	 * @param   array  $hash named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see JTable:bind	 * @since 1.5	 */	public function bind($array, $ignore = array())	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			if ((int) $registry->get('width', 0) < 0){				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_NEGATIVE_NOT_PERMITTED', JText::_('COM_BANNERS_FIELD_WIDTH_LABEL')));				return false;			}			if ((int) $registry->get('height', 0) < 0){				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_NEGATIVE_NOT_PERMITTED', JText::_('COM_BANNERS_FIELD_HEIGHT_LABEL')));				return false;			}			// Converts the width and height to an absolute numeric value:			$width = abs((int) $registry->get('width', 0));			$height = abs((int) $registry->get('height', 0));			// Sets the width and height to an empty string if = 0			$registry->set('width', ($width ? $width : ''));			$registry->set('height', ($height ? $height : ''));			$array['params'] = (string) $registry;		}		if (isset($array['imptotal']))		{			$array['imptotal'] = abs((int) $array['imptotal']);		}		return parent::bind($array, $ignore);	}	/**	 * Method to store a row	 *	 * @param boolean $updateNulls True to update fields even if they are null.	 */	public function store($updateNulls = false)	{		if (empty($this->id))		{			$purchase_type = $this->purchase_type;			if ($purchase_type < 0 && $this->cid)			{				$client = JTable::getInstance('Client', 'BannersTable');				$client->load($this->cid);				$purchase_type = $client->purchase_type;			}			if ($purchase_type < 0)			{				$params = JComponentHelper::getParams('com_banners');				$purchase_type = $params->get('purchase_type');			}			switch($purchase_type)			{				case 1:					$this->reset = $this->_db->getNullDate();					break;				case 2:					$date = JFactory::getDate('+1 year '.date('Y-m-d', strtotime('now')));					$reset = $this->_db->quote($date->toSql());					break;				case 3:					$date = JFactory::getDate('+1 month '.date('Y-m-d', strtotime('now')));					$reset = $this->_db->quote($date->toSql());					break;				case 4:					$date = JFactory::getDate('+7 day '.date('Y-m-d', strtotime('now')));					$reset = $this->_db->quote($date->toSql());					break;				case 5:					$date = JFactory::getDate('+1 day '.date('Y-m-d', strtotime('now')));					$reset = $this->_db->quote($date->toSql());					break;			}			// Store the row			parent::store($updateNulls);		}		else		{			// Get the old row			$oldrow = JTable::getInstance('Banner', 'BannersTable');			if (!$oldrow->load($this->id) && $oldrow->getError())			{				$this->setError($oldrow->getError());			}			// Verify that the alias is unique			$table = JTable::getInstance('Banner', 'BannersTable');			if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))			{				$this->setError(JText::_('COM_BANNERS_ERROR_UNIQUE_ALIAS'));				return false;			}			// Store the new row			parent::store($updateNulls);			// Need to reorder ?			if ($oldrow->state >= 0 && ($this->state < 0 || $oldrow->catid != $this->catid))			{				// Reorder the oldrow				$this->reorder($this->_db->quoteName('catid').'=' . $this->_db->quote($oldrow->catid).' AND state>=0');			}		}		return count($this->getErrors()) == 0;	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published, 2=archived, -2=trashed]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Get an instance of the table		$table = JTable::getInstance('Banner', 'BannersTable');		// For all keys		foreach ($pks as $pk)		{			// Load the banner			if (!$table->load($pk))			{				$this->setError($table->getError());			}			// Verify checkout			if ($table->checked_out == 0 || $table->checked_out == $userId)			{				// Change the state				$table->state = $state;				$table->checked_out = 0;				$table->checked_out_time = $this->_db->getNullDate();				// Check the row				$table->check();				// Store the row				if (!$table->store())				{					$this->setError($table->getError());				}			}		}		return count($this->getErrors()) == 0;	}	/**	 * Method to set the sticky state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The sticky state. eg. [0 = unsticked, 1 = sticked]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function stick($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Get an instance of the table		$table = JTable::getInstance('Banner', 'BannersTable');		// For all keys		foreach ($pks as $pk)		{			// Load the banner			if (!$table->load($pk))			{				$this->setError($table->getError());			}			// Verify checkout			if ($table->checked_out == 0 || $table->checked_out == $userId)			{				// Change the state				$table->sticky = $state;				$table->checked_out = 0;				$table->checked_out_time = $this->_db->getNullDate();				// Check the row				$table->check();				// Store the row				if (!$table->store())				{					$this->setError($table->getError());				}			}		}		return count($this->getErrors()) == 0;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_weblinks')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Weblinks');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for parse XML module files * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.5 */class ModulesHelperXML{	/**	 * @since  1.5	 */	public function parseXMLModuleFile(&$rows)	{		foreach ($rows as $i => $row)		{			if ($row->module == '')			{				$rows[$i]->name    = 'custom';				$rows[$i]->module  = 'custom';				$rows[$i]->descrip = 'Custom created module, using Module Manager New function';			}			else			{				$data = JInstaller::parseXMLInstallFile($row->path . '/' . $row->file);				if ($data['type'] == 'module')				{					$rows[$i]->name    = $data['name'];					$rows[$i]->descrip = $data['description'];				}			}		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');?><div class="profile <?php echo $this->pageclass_sfx?>"><?php if (JFactory::getUser()->id == $this->data->id) : ?><ul class="btn-toolbar pull-right">	<li class="btn-group">		<a class="btn" href="<?php echo JRoute::_('index.php?option=com_users&task=profile.edit&user_id='.(int) $this->data->id);?>">			<span class="icon-user"></span> <?php echo JText::_('COM_USERS_EDIT_PROFILE'); ?></a>	</li></ul><?php endif; ?><?php if ($this->params->get('show_page_heading')) : ?><div class="page-header">	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1></div><?php endif; ?><?php echo $this->loadTemplate('core'); ?><?php echo $this->loadTemplate('params'); ?><?php echo $this->loadTemplate('custom'); ?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of articles. * * @package     Joomla.Site * @subpackage  com_content * @since       1.6 */class ContentModelArticles extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'state', 'a.state',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'hits', 'a.hits',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'images', 'a.images',				'urls', 'a.urls',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = 'ordering', $direction = 'ASC')	{		$app = JFactory::getApplication();		// List state information		$value = $app->input->get('limit', $app->getCfg('list_limit', 0), 'uint');		$this->setState('list.limit', $value);		$value = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $value);		$orderCol = $app->input->get('filter_order', 'a.ordering');		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'a.ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->input->get('filter_order_Dir', 'ASC');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$params = $app->getParams();		$this->setState('params', $params);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_content')) && (!$user->authorise('core.edit', 'com_content')))		{			// filter on published for those who do not have edit or edit.state rights.			$this->setState('filter.published', 1);		}		$this->setState('filter.language', JLanguageMultilang::isEnabled());		// process show_noauth parameter		if (!$params->get('show_noauth'))		{			$this->setState('filter.access', true);		}		else		{			$this->setState('filter.access', false);		}		$this->setState('layout', $app->input->get('layout'));	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . serialize($this->getState('filter.published'));		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.featured');		$id .= ':' . $this->getState('filter.article_id');		$id .= ':' . $this->getState('filter.article_id.include');		$id .= ':' . serialize($this->getState('filter.category_id'));		$id .= ':' . $this->getState('filter.category_id.include');		$id .= ':' . serialize($this->getState('filter.author_id'));		$id .= ':' . $this->getState('filter.author_id.include');		$id .= ':' . serialize($this->getState('filter.author_alias'));		$id .= ':' . $this->getState('filter.author_alias.include');		$id .= ':' . $this->getState('filter.date_filtering');		$id .= ':' . $this->getState('filter.date_field');		$id .= ':' . $this->getState('filter.start_date_range');		$id .= ':' . $this->getState('filter.end_date_range');		$id .= ':' . $this->getState('filter.relative_date');		return parent::getStoreId($id);	}	/**	 * Get the master query for retrieving a list of articles subject to the model state.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.introtext, ' .					'a.checked_out, a.checked_out_time, ' .					'a.catid, a.created, a.created_by, a.created_by_alias, ' .					// use created if modified is 0					'CASE WHEN a.modified = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.modified END as modified, ' .					'a.modified_by, uam.name as modified_by_name,' .					// use created if publish_up is 0					'CASE WHEN a.publish_up = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.publish_up END as publish_up,' .					'a.publish_down, a.images, a.urls, a.attribs, a.metadata, a.metakey, a.metadesc, a.access, ' .					'a.hits, a.xreference, a.featured,' . ' ' . $query->length('a.fulltext') . ' AS readmore'			)		);		// Process an Archived Article layout		if ($this->getState('filter.published') == 2)		{			// If badcats is not null, this means that the article is inside an archived category			// In this case, the state is set to 2 to indicate Archived (even if the article state is Published)			$query->select($this->getState('list.select', 'CASE WHEN badcats.id is null THEN a.state ELSE 2 END AS state'));		}		else		{			// Process non-archived layout			// If badcats is not null, this means that the article is inside an unpublished category			// In this case, the state is set to 0 to indicate Unpublished (even if the article state is Published)			$query->select($this->getState('list.select', 'CASE WHEN badcats.id is not null THEN 0 ELSE a.state END AS state'));		}		$query->from('#__content AS a');		// Join over the frontpage articles.		if ($this->context != 'com_content.featured')		{			$query->join('LEFT', '#__content_frontpage AS fp ON fp.content_id = a.id');		}		// Join over the categories.		$query->select('c.title AS category_title, c.path AS category_route, c.access AS category_access, c.alias AS category_alias')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the users for the author and modified_by names.		$query->select("CASE WHEN a.created_by_alias > ' ' THEN a.created_by_alias ELSE ua.name END AS author")			->select("ua.email AS author_email")			->join('LEFT', '#__users AS ua ON ua.id = a.created_by')			->join('LEFT', '#__users AS uam ON uam.id = a.modified_by');		// Join on contact table		$subQuery = $db->getQuery(true)			->select('contact.user_id, MAX(contact.id) AS id, contact.language')			->from('#__contact_details AS contact')			->where('contact.published = 1')			->group('contact.user_id, contact.language');		$query->select('contact.id as contactid')			->join('LEFT', '(' . $subQuery . ') AS contact ON contact.user_id = a.created_by');		// Join over the categories to get parent category titles		$query->select('parent.title as parent_title, parent.id as parent_id, parent.path as parent_route, parent.alias as parent_alias')			->join('LEFT', '#__categories as parent ON parent.id = c.parent_id');		// Join on voting table		$query->select('ROUND(v.rating_sum / v.rating_count, 0) AS rating, v.rating_count as rating_count')			->join('LEFT', '#__content_rating AS v ON a.id = v.content_id');		// Join to check for category published state in parent categories up the tree		$query->select('c.published, CASE WHEN badcats.id is null THEN c.published ELSE 0 END AS parents_published');		$subquery = 'SELECT cat.id as id FROM #__categories AS cat JOIN #__categories AS parent ';		$subquery .= 'ON cat.lft BETWEEN parent.lft AND parent.rgt ';		$subquery .= 'WHERE parent.extension = ' . $db->quote('com_content');		if ($this->getState('filter.published') == 2)		{			// Find any up-path categories that are archived			// If any up-path categories are archived, include all children in archived layout			$subquery .= ' AND parent.published = 2 GROUP BY cat.id ';			// Set effective state to archived if up-path category is archived			$publishedWhere = 'CASE WHEN badcats.id is null THEN a.state ELSE 2 END';		}		else		{			// Find any up-path categories that are not published			// If all categories are published, badcats.id will be null, and we just use the article state			$subquery .= ' AND parent.published != 1 GROUP BY cat.id ';			// Select state to unpublished if up-path category is unpublished			$publishedWhere = 'CASE WHEN badcats.id is null THEN a.state ELSE 0 END';		}		$query->join('LEFT OUTER', '(' . $subquery . ') AS badcats ON badcats.id = c.id');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$user = JFactory::getUser();			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')')				->where('c.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			// Use article state if badcats.id is null, otherwise, force 0 for unpublished			$query->where($publishedWhere . ' = ' . (int) $published);		}		elseif (is_array($published))		{			JArrayHelper::toInteger($published);			$published = implode(',', $published);			// Use article state if badcats.id is null, otherwise, force 0 for unpublished			$query->where($publishedWhere . ' IN (' . $published . ')');		}		// Filter by featured state		$featured = $this->getState('filter.featured');		switch ($featured)		{			case 'hide':				$query->where('a.featured = 0');				break;			case 'only':				$query->where('a.featured = 1');				break;			case 'show':			default:				// Normally we do not discriminate				// between featured/unfeatured items.				break;		}		// Filter by a single or group of articles.		$articleId = $this->getState('filter.article_id');		if (is_numeric($articleId))		{			$type = $this->getState('filter.article_id.include', true) ? '= ' : '<> ';			$query->where('a.id ' . $type . (int) $articleId);		}		elseif (is_array($articleId))		{			JArrayHelper::toInteger($articleId);			$articleId = implode(',', $articleId);			$type = $this->getState('filter.article_id.include', true) ? 'IN' : 'NOT IN';			$query->where('a.id ' . $type . ' (' . $articleId . ')');		}		// Filter by a single or group of categories		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$type = $this->getState('filter.category_id.include', true) ? '= ' : '<> ';			// Add subcategory check			$includeSubcategories = $this->getState('filter.subcategories', false);			$categoryEquals = 'a.catid ' . $type . (int) $categoryId;			if ($includeSubcategories)			{				$levels = (int) $this->getState('filter.max_category_levels', '1');				// Create a subquery for the subcategory list				$subQuery = $db->getQuery(true)					->select('sub.id')					->from('#__categories as sub')					->join('INNER', '#__categories as this ON sub.lft > this.lft AND sub.rgt < this.rgt')					->where('this.id = ' . (int) $categoryId);				if ($levels >= 0)				{					$subQuery->where('sub.level <= this.level + ' . $levels);				}				// Add the subquery to the main query				$query->where('(' . $categoryEquals . ' OR a.catid IN (' . $subQuery->__toString() . '))');			}			else			{				$query->where($categoryEquals);			}		}		elseif (is_array($categoryId) && (count($categoryId) > 0))		{			JArrayHelper::toInteger($categoryId);			$categoryId = implode(',', $categoryId);			if (!empty($categoryId))			{				$type = $this->getState('filter.category_id.include', true) ? 'IN' : 'NOT IN';				$query->where('a.catid ' . $type . ' (' . $categoryId . ')');			}		}		// Filter by author		$authorId = $this->getState('filter.author_id');		$authorWhere = '';		if (is_numeric($authorId))		{			$type = $this->getState('filter.author_id.include', true) ? '= ' : '<> ';			$authorWhere = 'a.created_by ' . $type . (int) $authorId;		}		elseif (is_array($authorId))		{			JArrayHelper::toInteger($authorId);			$authorId = implode(',', $authorId);			if ($authorId)			{				$type = $this->getState('filter.author_id.include', true) ? 'IN' : 'NOT IN';				$authorWhere = 'a.created_by ' . $type . ' (' . $authorId . ')';			}		}		// Filter by author alias		$authorAlias = $this->getState('filter.author_alias');		$authorAliasWhere = '';		if (is_string($authorAlias))		{			$type = $this->getState('filter.author_alias.include', true) ? '= ' : '<> ';			$authorAliasWhere = 'a.created_by_alias ' . $type . $db->quote($authorAlias);		}		elseif (is_array($authorAlias))		{			$first = current($authorAlias);			if (!empty($first))			{				JArrayHelper::toString($authorAlias);				foreach ($authorAlias as $key => $alias)				{					$authorAlias[$key] = $db->quote($alias);				}				$authorAlias = implode(',', $authorAlias);				if ($authorAlias)				{					$type = $this->getState('filter.author_alias.include', true) ? 'IN' : 'NOT IN';					$authorAliasWhere = 'a.created_by_alias ' . $type . ' (' . $authorAlias .						')';				}			}		}		if (!empty($authorWhere) && !empty($authorAliasWhere))		{			$query->where('(' . $authorWhere . ' OR ' . $authorAliasWhere . ')');		}		elseif (empty($authorWhere) && empty($authorAliasWhere))		{			// If both are empty we don't want to add to the query		}		else		{			// One of these is empty, the other is not so we just add both			$query->where($authorWhere . $authorAliasWhere);		}		// Filter by start and end dates.		$nullDate = $db->quote($db->getNullDate());		$nowDate = $db->quote(JFactory::getDate()->toSql());		$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')			->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');		// Filter by Date Range or Relative Date		$dateFiltering = $this->getState('filter.date_filtering', 'off');		$dateField = $this->getState('filter.date_field', 'a.created');		switch ($dateFiltering)		{			case 'range':				$startDateRange = $db->quote($this->getState('filter.start_date_range', $nullDate));				$endDateRange = $db->quote($this->getState('filter.end_date_range', $nullDate));				$query->where(					'(' . $dateField . ' >= ' . $startDateRange . ' AND ' . $dateField .						' <= ' . $endDateRange . ')'				);				break;			case 'relative':				$relativeDate = (int) $this->getState('filter.relative_date', 0);				$query->where(					$dateField . ' >= DATE_SUB(' . $nowDate . ', INTERVAL ' .						$relativeDate . ' DAY)'				);				break;			case 'off':			default:				break;		}		// process the filter for list views with user-entered filters		$params = $this->getState('params');		if ((is_object($params)) && ($params->get('filter_field') != 'hide') && ($filter = $this->getState('list.filter')))		{			// clean filter variable			$filter = JString::strtolower($filter);			$hitsFilter = (int) $filter;			$filter = $db->quote('%' . $db->escape($filter, true) . '%', false);			switch ($params->get('filter_field'))			{				case 'author':					$query->where(						'LOWER( CASE WHEN a.created_by_alias > ' . $db->quote(' ') .							' THEN a.created_by_alias ELSE ua.name END ) LIKE ' . $filter . ' '					);					break;				case 'hits':					$query->where('a.hits >= ' . $hitsFilter . ' ');					break;				case 'title':				default: // default to 'title' if parameter is not valid					$query->where('LOWER( a.title ) LIKE ' . $filter);					break;			}		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')')				->where('(contact.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ') OR contact.language IS NULL)');		}		// Add the list ordering clause.		$query->order($this->getState('list.ordering', 'a.ordering') . ' ' . $this->getState('list.direction', 'ASC'))			->group('a.id, a.title, a.alias, a.introtext, a.checked_out, a.checked_out_time, a.catid, a.created, a.created_by, a.created_by_alias, a.created, a.modified, a.modified_by, uam.name, a.publish_up, a.attribs, a.metadata, a.metakey, a.metadesc, a.access, a.hits, a.xreference, a.featured, a.fulltext, a.state, a.publish_down, badcats.id, c.title, c.path, c.access, c.alias, uam.id, ua.name, ua.email, contact.id, parent.title, parent.id, parent.path, parent.alias, v.rating_sum, v.rating_count, c.published, c.lft, a.ordering, parent.lft, fp.ordering, c.id, a.images, a.urls');		return $query;	}	/**	 * Method to get a list of articles.	 *	 * Overriden to inject convert the attribs field into a JParameter object.	 *	 * @return  mixed  An array of objects on success, false on failure.	 * @since   1.6	 */	public function getItems()	{		$items = parent::getItems();		$user = JFactory::getUser();		$userId = $user->get('id');		$guest = $user->get('guest');		$groups = $user->getAuthorisedViewLevels();		$input = JFactory::getApplication()->input;		// Get the global params		$globalParams = JComponentHelper::getParams('com_content', true);		// Convert the parameter fields into objects.		foreach ($items as &$item)		{			$articleParams = new JRegistry;			$articleParams->loadString($item->attribs);			// Unpack readmore and layout params			$item->alternative_readmore = $articleParams->get('alternative_readmore');			$item->layout = $articleParams->get('layout');			$item->params = clone $this->getState('params');			// For blogs, article params override menu item params only if menu param = 'use_article'			// Otherwise, menu item params control the layout			// If menu item is 'use_article' and there is no article param, use global			if (($input->getString('layout') == 'blog') || ($input->getString('view') == 'featured')				|| ($this->getState('params')->get('layout_type') == 'blog')			)			{				// create an array of just the params set to 'use_article'				$menuParamsArray = $this->getState('params')->toArray();				$articleArray = array();				foreach ($menuParamsArray as $key => $value)				{					if ($value === 'use_article')					{						// if the article has a value, use it						if ($articleParams->get($key) != '')						{							// get the value from the article							$articleArray[$key] = $articleParams->get($key);						}						else						{							// otherwise, use the global value							$articleArray[$key] = $globalParams->get($key);						}					}				}				// merge the selected article params				if (count($articleArray) > 0)				{					$articleParams = new JRegistry;					$articleParams->loadArray($articleArray);					$item->params->merge($articleParams);				}			}			else			{				// For non-blog layouts, merge all of the article params				$item->params->merge($articleParams);			}			// get display date			switch ($item->params->get('list_show_date'))			{				case 'modified':					$item->displayDate = $item->modified;					break;				case 'published':					$item->displayDate = ($item->publish_up == 0) ? $item->created : $item->publish_up;					break;				default:				case 'created':					$item->displayDate = $item->created;					break;			}			// Compute the asset access permissions.			// Technically guest could edit an article, but lets not check that to improve performance a little.			if (!$guest)			{				$asset = 'com_content.article.' . $item->id;				// Check general edit permission first.				if ($user->authorise('core.edit', $asset))				{					$item->params->set('access-edit', true);				}				// Now check if edit.own is available.				elseif (!empty($userId) && $user->authorise('core.edit.own', $asset))				{					// Check for a valid user and that they are the owner.					if ($userId == $item->created_by)					{						$item->params->set('access-edit', true);					}				}			}			$access = $this->getState('filter.access');			if ($access)			{				// If the access filter has been set, we already have only the articles this user can view.				$item->params->set('access-view', true);			}			else			{				// If no access filter is set, the layout takes some responsibility for display of limited information.				if ($item->catid == 0 || $item->category_access === null)				{					$item->params->set('access-view', in_array($item->access, $groups));				}				else				{					$item->params->set('access-view', in_array($item->access, $groups) && in_array($item->category_access, $groups));				}			}			// Get the tags			$item->tags = new JHelperTags;			$item->tags->getItemTags('com_content.article', $item->id);		}		return $items;	}	public function getStart()	{		return $this->getState('list.start');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Cache output type object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheControllerOutput extends JCacheController{	/**	 * @since   11.1	 */	protected $_id;	/**	 * @since   11.1	 */	protected $_group;	/**	 * @since   11.1	 */	protected $_locktest = null;	/**	 * Start the cache	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True if the cache is hit (false else)	 *	 * @since   11.1	 */	public function start($id, $group = null)	{		// If we have data in cache use that.		$data = $this->cache->get($id, $group);		$this->_locktest = new stdClass;		$this->_locktest->locked = null;		$this->_locktest->locklooped = null;		if ($data === false)		{			$this->_locktest = $this->cache->lock($id, $group);			if ($this->_locktest->locked == true && $this->_locktest->locklooped == true)			{				$data = $this->cache->get($id, $group);			}		}		if ($data !== false)		{			$data = unserialize(trim($data));			echo $data;			if ($this->_locktest->locked == true)			{				$this->cache->unlock($id, $group);			}			return true;		}		else		{			// Nothing in cache... let's start the output buffer and start collecting data for next time.			if ($this->_locktest->locked == false)			{				$this->_locktest = $this->cache->lock($id, $group);			}			ob_start();			ob_implicit_flush(false);			// Set id and group placeholders			$this->_id = $id;			$this->_group = $group;			return false;		}	}	/**	 * Stop the cache buffer and store the cached data	 *	 * @return  boolean  True if cache stored	 *	 * @since   11.1	 */	public function end()	{		// Get data from output buffer and echo it		$data = ob_get_contents();		ob_end_clean();		echo $data;		// Get id and group and reset them placeholders		$id = $this->_id;		$group = $this->_group;		$this->_id = null;		$this->_group = null;		// Get the storage handler and store the cached data		$ret = $this->cache->store(serialize($data), $id, $group);		if ($this->_locktest->locked == true)		{			$this->cache->unlock($id, $group);		}		return $ret;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports a modal contact picker. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class JFormFieldModal_Contacts extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Modal_Contacts';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		// Load the javascript		JHtml::_('behavior.framework');		JHtml::_('behavior.modal', 'a.modal');		JHtml::_('bootstrap.tooltip');		// Build the script.		$script = array();		$script[] = '	function jSelectChart_'.$this->id.'(id, name, object) {';		$script[] = '		document.id("'.$this->id.'_id").value = id;';		$script[] = '		document.id("'.$this->id.'_name").value = name;';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Get the title of the linked chart		$db = JFactory::getDbo();		$db->setQuery(			'SELECT name' .			' FROM #__contact_details' .			' WHERE id = '.(int) $this->value		);		try		{			$title = $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage);		}		if (empty($title))		{			$title = JText::_('COM_CONTACT_SELECT_A_CONTACT');		}		$link = 'index.php?option=com_contact&amp;view=contacts&amp;layout=modal&amp;tmpl=component&amp;function=jSelectChart_'.$this->id;		if (isset($this->element['language']))		{			$link .= '&amp;forcedLanguage='.$this->element['language'];		}		$html = "\n".'<div class="input-append"><input type="text" class="input-medium" id="'.$this->id.'_name" value="'.htmlspecialchars($title, ENT_QUOTES, 'UTF-8').'" disabled="disabled" /><a class="modal btn" title="'.JText::_('COM_CONTACT_CHANGE_CONTACT_BUTTON').'"  href="'.$link.'" rel="{handler: \'iframe\', size: {x: 800, y: 450}}"><i class="icon-address hasTooltip" title="'.JText::_('COM_CONTACT_CHANGE_CONTACT_BUTTON').'"></i> '.JText::_('JSELECT').'</a></div>'."\n";		// The active contact id field.		if (0 == (int) $this->value)		{			$value = '';		}		else		{			$value = (int) $this->value;		}		// class='required' for client side validation		$class = '';		if ($this->required)		{			$class = ' class="required modal-value"';		}		$html .= '<input type="hidden" id="'.$this->id.'_id"'.$class.' name="'.$this->name.'" value="'.$value.'" />';		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input = JFactory::getApplication()->input;// Checking if loaded via index.php or component.php$tmpl = $input->getCmd('tmpl', '');$document = JFactory::getDocument();?><script type="text/javascript">	setmenutype = function(type)	{		<?php if ($tmpl) : ?>			window.parent.Joomla.submitbutton('item.setType', type);			window.parent.SqueezeBox.close();		<?php else : ?>			window.location="index.php?option=com_menus&view=item&task=item.setType&layout=edit&type="+('item.setType', type);		<?php endif; ?>	}</script><?php echo JHtml::_('bootstrap.startAccordion', 'collapseTypes', array('active' => 'slide1')); ?>	<?php		$i = 0;		foreach ($this->types as $name => $list) : ?>		<?php echo JHtml::_('bootstrap.addSlide', 'collapseTypes', JText::_($name), 'collapse' . $i++); ?>			<ul class="nav nav-tabs nav-stacked">				<?php foreach ($list as $item) : ?>					<li>						<a class="choose_type" href="#" title="<?php echo JText::_($item->description); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => $item->title, 'request' => $item->request))); ?>')">							<?php echo JText::_($item->title);?> <small class="muted"><?php echo JText::_($item->description); ?></small>						</a>					</li>				<?php endforeach; ?>			</ul>		<?php echo JHtml::_('bootstrap.endSlide'); ?>	<?php endforeach; ?>	<?php echo JHtml::_('bootstrap.addSlide', 'collapseTypes', JText::_('COM_MENUS_TYPE_SYSTEM'), 'collapse-system'); ?>		<ul class="nav nav-tabs nav-stacked">			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'url'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL_DESC'); ?></small>				</a>			</li>			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_ALIAS_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'alias'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_ALIAS'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_ALIAS_DESC'); ?></small>				</a>			</li>			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_SEPARATOR_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'separator'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_SEPARATOR'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_SEPARATOR_DESC'); ?></small>				</a>			</li>			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_HEADING_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'heading'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_HEADING'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_HEADING_DESC'); ?></small>			</li>		</ul>	<?php echo JHtml::_('bootstrap.endSlide'); ?><?php echo JHtml::_('bootstrap.endAccordion'); ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Template style controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerSource extends JControllerLegacy{	/**	 * Constructor.	 *	 * @param   array An optional associative array of configuration settings.	 * @see     JController	 */	public function __construct($config = array())	{		parent::__construct($config);		// Apply, Save & New, and Save As copy should be standard on forms.		$this->registerTask('apply', 'save');	}	/**	 * Method to check if you can add a new record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 */	protected function allowEdit()	{		return JFactory::getUser()->authorise('core.edit', 'com_templates');	}	/**	 * Method to check if you can save a new or existing record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 */	protected function allowSave()	{		return $this->allowEdit();	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string	The model name. Optional.	 * @param   string	The class prefix. Optional.	 * @param   array  Configuration array for model. Optional (note, the empty array is atypical compared to other models).	 *	 * @return  object  The model.	 */	public function getModel($name = 'Source', $prefix = 'TemplatesModel', $config = array())	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * This controller does not have a display method. Redirect back to the list view of the component.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$this->setRedirect(JRoute::_('index.php?option=com_templates&view=templates', false));	}	/**	 * Method to edit an existing record.	 *	 * @return  void	 */	public function edit()	{		$app		= JFactory::getApplication();		$model		= $this->getModel();		$recordId	= JRequest::getVar('id');		$context	= 'com_templates.edit.source';		if (preg_match('#\.\.#', base64_decode($recordId)))		{			return JError::raiseError(500, JText::_('COM_TEMPLATES_ERROR_SOURCE_FILE_NOT_FOUND'));		}		// Access check.		if (!$this->allowEdit())		{			return JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));		}		// Check-out succeeded, push the new record id into the session.		$app->setUserState($context.'.id',	$recordId);		$app->setUserState($context.'.data', null);		$this->setRedirect('index.php?option=com_templates&view=source&layout=edit');		return true;	}	/**	 * Method to cancel an edit	 *	 * @return  void	 */	public function cancel()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app		= JFactory::getApplication();		$model		= $this->getModel();		$context	= 'com_templates.edit.source';		$returnId	= (int) $model->getState('extension.id');		// Clean the session data and redirect.		$app->setUserState($context . '.id', null);		$app->setUserState($context . '.data', null);		$this->setRedirect(JRoute::_('index.php?option=com_templates&view=template&id='.$returnId, false));	}	/**	 * Saves a template source file.	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$data    = $this->input->post->get('jform', array(), 'array');		$context = 'com_templates.edit.source';		$task    = $this->getTask();		$model   = $this->getModel();		// Access check.		if (!$this->allowSave())		{			return JError::raiseWarning(403, JText::_('JERROR_SAVE_NOT_PERMITTED'));		}		// Match the stored id's with the submitted.		if (empty($data['extension_id']) || empty($data['filename']))		{			return JError::raiseError(500, JText::_('COM_TEMPLATES_ERROR_SOURCE_ID_FILENAME_MISMATCH'));		}		elseif ($data['extension_id'] != $model->getState('extension.id'))		{			return JError::raiseError(500, JText::_('COM_TEMPLATES_ERROR_SOURCE_ID_FILENAME_MISMATCH'));		}		elseif ($data['filename'] != $model->getState('filename'))		{			return JError::raiseError(500, JText::_('COM_TEMPLATES_ERROR_SOURCE_ID_FILENAME_MISMATCH'));		}		// Validate the posted data.		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data = $model->validate($form, $data);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState($context.'.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_templates&view=source&layout=edit', false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Save the data in the session.			$app->setUserState($context.'.data', $data);			// Redirect back to the edit screen.			$this->setMessage(JText::sprintf('JERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_templates&view=source&layout=edit', false));			return false;		}		$this->setMessage(JText::_('COM_TEMPLATES_FILE_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Reset the record data in the session.				$app->setUserState($context.'.data',	null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=com_templates&view=source&layout=edit', false));				break;			default:				// Clear the record id and data from the session.				$app->setUserState($context.'.id', null);				$app->setUserState($context.'.data', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=com_templates&view=template&id='.$model->getState('extension.id'), false));				break;		}	}}
