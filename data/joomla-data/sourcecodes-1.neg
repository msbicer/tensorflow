<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';JHtml::_('bootstrap.tooltip');if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :		if (!isset($this->items[$this->parent->id][$id + 1]))		{			$class = ' class="last"';		}		?>		<div <?php echo $class; ?> >		<?php $class = ''; ?>			<h3 class="page-header item-title">				<a href="<?php echo JRoute::_(WeblinksHelperRoute::getCategoryRoute($item->id));?>">					<?php echo $this->escape($item->title); ?></a>					<?php if ($this->params->get('show_cat_num_articles_cat') == 1) :?>						<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_WEBLINKS_NUM_ITEMS'); ?>">							<?php echo $item->numitems; ?>						</span>					<?php endif; ?>					<?php if (count($item->getChildren()) > 0) : ?>						<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>					<?php endif;?>				</h3>				<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>					<?php if ($item->description) : ?>						<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_weblinks.categories'); ?>						</div>					<?php endif; ?>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) :?>					<div class="collapse fade" id="category-<?php echo $item->id;?>">						<?php						$this->items[$item->id] = $item->getChildren();						$this->parent = $item;						$this->maxLevelcat--;						echo $this->loadTemplate('items');						$this->parent = $item->getParent();						$this->maxLevelcat++;						?>					</div>				<?php endif; ?>			</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$uri		= JUri::getInstance();$return		= base64_encode($uri);$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task != 'menus.delete' || confirm('<?php echo JText::_('COM_MENUS_MENU_CONFIRM_DELETE', true);?>'))		{			Joomla.submitform(task);		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_menus&view=menus');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_MENUS_MENU_SEARCH_FILTER'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clearfix"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col" rowspan="2">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th rowspan="2">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="width-30" colspan="3">					<?php echo JText::_('COM_MENUS_HEADING_NUMBER_MENU_ITEMS'); ?>				</th>				<th class="width-20" rowspan="2">					<?php echo JText::_('COM_MENUS_HEADING_LINKED_MODULES'); ?>				</th>				<th class="nowrap id-col" rowspan="2">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>			<tr>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_PUBLISHED_ITEMS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_UNPUBLISHED_ITEMS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_TRASHED_ITEMS'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canCreate = $user->authorise('core.create',     'com_menus');			$canEdit   = $user->authorise('core.edit',       'com_menus');			$canChange = $user->authorise('core.edit.state', 'com_menus');		?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype) ?> ">						<?php echo $this->escape($item->title); ?></a>					<p class="smallsub">(<span><?php echo JText::_('COM_MENUS_MENU_MENUTYPE_LABEL') ?></span>						<?php if ($canEdit) : ?>							<?php echo '<a href="'.JRoute::_('index.php?option=com_menus&task=menu.edit&id='.$item->id).' title='.$this->escape($item->description).'">'.							$this->escape($item->menutype).'</a>'; ?>)						<?php else : ?>							<?php echo $this->escape($item->menutype)?>)						<?php endif; ?>					</p>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=1');?>">						<?php echo $item->count_published; ?></a>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=0');?>">						<?php echo $item->count_unpublished; ?></a>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=-2');?>">						<?php echo $item->count_trashed; ?></a>				</td>				<td class="left">				<ul class="menu-module-list">					<?php					if (isset($this->modules[$item->menutype])) :						foreach ($this->modules[$item->menutype] as &$module) :						?>						<li>							<?php if ($canEdit) : ?>								<a class="modal" href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.$module->id.'&return='.$return.'&tmpl=component&layout=modal');?>" rel="{handler: 'iframe', size: {x: 1024, y: 450}}"  title="<?php echo JText::_('COM_MENUS_EDIT_MODULE_SETTINGS');?>">								<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?></a>							<?php else :?>								<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?>							<?php endif; ?>						</li>						<?php						endforeach;					endif;					?>				</ul>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexer', __DIR__ . '/indexer.php');JLoader::register('FinderIndexerHelper', __DIR__ . '/helper.php');JLoader::register('FinderIndexerResult', __DIR__ . '/result.php');JLoader::register('FinderIndexerTaxonomy', __DIR__ . '/taxonomy.php');/** * Prototype adapter class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexerAdapter extends JPlugin{	/**	 * The context is somewhat arbitrary but it must be unique or there will be	 * conflicts when managing plugin/indexer state. A good best practice is to	 * use the plugin name suffix as the context. For example, if the plugin is	 * named 'plgFinderContent', the context could be 'Content'.	 *	 * @var    string	 * @since  2.5	 */	protected $context;	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension;	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout;	/**	 * The mime type of the content the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $mime;	/**	 * The access level of an item before save.	 *	 * @var    integer	 * @since  2.5	 */	protected $old_access;	/**	 * The access level of a category before save.	 *	 * @var    integer	 * @since  2.5	 */	protected $old_cataccess;	/**	 * The type of content the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title;	/**	 * The type id of the content.	 *	 * @var    integer	 * @since  2.5	 */	protected $type_id;	/**	 * The database object.	 *	 * @var    object	 * @since  2.5	 */	protected $db;	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table;	/**	 * The indexer object.	 *	 * @var    FinderIndexer	 * @since  3.0	 */	protected $indexer;	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'state';	/**	 * Method to instantiate the indexer adapter.	 *	 * @param   object  &$subject  The object to observe.	 * @param   array   $config    An array that holds the plugin configuration.	 *	 * @since   2.5	 */	public function __construct(&$subject, $config)	{		// Get the database object.		$this->db = JFactory::getDbo();		// Call the parent constructor.		parent::__construct($subject, $config);		// Get the type id.		$this->type_id = $this->getTypeId();		// Add the content type if it doesn't exist and is set.		if (empty($this->type_id) && !empty($this->type_title))		{			$this->type_id = FinderIndexerHelper::addContentType($this->type_title, $this->mime);		}		// Check for a layout override.		if ($this->params->get('layout'))		{			$this->layout = $this->params->get('layout');		}		// Get the indexer object		$this->indexer = FinderIndexer::getInstance();	}	/**	 * Method to get the adapter state and push it into the indexer.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws    Exception on error.	 */	public function onStartIndex()	{		// Get the indexer state.		$iState = FinderIndexer::getState();		// Get the number of content items.		$total = (int) $this->getContentCount();		// Add the content count to the total number of items.		$iState->totalItems += $total;		// Populate the indexer state information for the adapter.		$iState->pluginState[$this->context]['total'] = $total;		$iState->pluginState[$this->context]['offset'] = 0;		// Set the indexer state.		FinderIndexer::setState($iState);	}	/**	 * Method to prepare for the indexer to be run. This method will often	 * be used to include dependencies and things of that nature.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on error.	 */	public function onBeforeIndex()	{		// Get the indexer and adapter state.		$iState = FinderIndexer::getState();		$aState = $iState->pluginState[$this->context];		// Check the progress of the indexer and the adapter.		if ($iState->batchOffset == $iState->batchSize || $aState['offset'] == $aState['total'])		{			return true;		}		// Run the setup method.		return $this->setup();	}	/**	 * Method to index a batch of content items. This method can be called by	 * the indexer many times throughout the indexing process depending on how	 * much content is available for indexing. It is important to track the	 * progress correctly so we can display it to the user.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on error.	 */	public function onBuildIndex()	{		// Get the indexer and adapter state.		$iState = FinderIndexer::getState();		$aState = $iState->pluginState[$this->context];		// Check the progress of the indexer and the adapter.		if ($iState->batchOffset == $iState->batchSize || $aState['offset'] == $aState['total'])		{			return true;		}		// Get the batch offset and size.		$offset = (int) $aState['offset'];		$limit = (int) ($iState->batchSize - $iState->batchOffset);		// Get the content items to index.		$items = $this->getItems($offset, $limit);		// Iterate through the items and index them.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			// Index the item.			$this->index($items[$i]);			// Adjust the offsets.			$offset++;			$iState->batchOffset++;			$iState->totalItems--;		}		// Update the indexer state.		$aState['offset'] = $offset;		$iState->pluginState[$this->context] = $aState;		FinderIndexer::setState($iState);		return true;	}	/**	 * Method to change the value of a content item's property in the links	 * table. This is used to synchronize published and access states that	 * are changed when not editing an item directly.	 *	 * @param   string   $id        The ID of the item to change.	 * @param   string   $property  The property that is being changed.	 * @param   integer  $value     The new value of that property.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws    Exception on database error.	 */	protected function change($id, $property, $value)	{		// Check for a property we know how to handle.		if ($property !== 'state' && $property !== 'access')		{			return true;		}		// Get the url for the content id.		$item = $this->db->quote($this->getUrl($id, $this->extension, $this->layout));		// Update the content items.		$query = $this->db->getQuery(true)			->update($this->db->quoteName('#__finder_links'))			->set($this->db->quoteName($property) . ' = ' . (int) $value)			->where($this->db->quoteName('url') . ' = ' . $item);		$this->db->setQuery($query);		$this->db->execute();		return true;	}	/**	 * Method to index an item.	 *	 * @param   FinderIndexerResult  $item  The item to index as a FinderIndexerResult object.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function index(FinderIndexerResult $item);	/**	 * Method to reindex an item.	 *	 * @param   integer  $id  The ID of the item to reindex.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function reindex($id)	{		// Run the setup method.		$this->setup();		// Get the item.		$item = $this->getItem($id);		// Index the item.		$this->index($item);	}	/**	 * Method to remove an item from the index.	 *	 * @param   string  $id  The ID of the item to remove.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function remove($id)	{		// Get the item's URL		$url = $this->db->quote($this->getUrl($id, $this->extension, $this->layout));		// Get the link ids for the content items.		$query = $this->db->getQuery(true)			->select($this->db->quoteName('link_id'))			->from($this->db->quoteName('#__finder_links'))			->where($this->db->quoteName('url') . ' = ' . $url);		$this->db->setQuery($query);		$items = $this->db->loadColumn();		// Check the items.		if (empty($items))		{			return true;		}		// Remove the items.		foreach ($items as $item)		{			$this->indexer->remove($item);		}		return true;	}	/**	 * Method to setup the adapter before indexing.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function setup();	/**	 * Method to update index data on category access level changes	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function categoryAccessChange($row)	{		$query = clone($this->getStateQuery());		$query->where('c.id = ' . (int) $row->id);		// Get the access level.		$this->db->setQuery($query);		$items = $this->db->loadObjectList();		// Adjust the access level for each item within the category.		foreach ($items as $item)		{			// Set the access level.			$temp = max($item->access, $row->access);			// Update the item.			$this->change((int) $item->id, 'access', $temp);			// Reindex the item			$this->reindex($row->id);		}	}	/**	 * Method to update index data on category access level changes	 *	 * @param   array    $pks    A list of primary key ids of the content that has changed state.	 * @param   integer  $value  The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function categoryStateChange($pks, $value)	{		// The item's published state is tied to the category		// published state so we need to look up all published states		// before we change anything.		foreach ($pks as $pk)		{			$query = clone($this->getStateQuery());			$query->where('c.id = ' . (int) $pk);			// Get the published states.			$this->db->setQuery($query);			$items = $this->db->loadObjectList();			// Adjust the state for each item within the category.			foreach ($items as $item)			{				// Translate the state.				$temp = $this->translateState($item->state, $value);				// Update the item.				$this->change($item->id, 'state', $temp);				// Reindex the item				$this->reindex($item->id);			}		}	}	/**	 * Method to check the existing access level for categories	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function checkCategoryAccess($row)	{		$query = $this->db->getQuery(true)			->select($this->db->quoteName('access'))			->from($this->db->quoteName('#__categories'))			->where($this->db->quoteName('id') . ' = ' . (int) $row->id);		$this->db->setQuery($query);		// Store the access level to determine if it changes		$this->old_cataccess = $this->db->loadResult();	}	/**	 * Method to check the existing access level for items	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function checkItemAccess($row)	{		$query = $this->db->getQuery(true)			->select($this->db->quoteName('access'))			->from($this->db->quoteName($this->table))			->where($this->db->quoteName('id') . ' = ' . (int) $row->id);		$this->db->setQuery($query);		// Store the access level to determine if it changes		$this->old_access = $this->db->loadResult();	}	/**	 * Method to get the number of content items available to index.	 *	 * @return  integer  The number of content items available to index.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getContentCount()	{		$return = 0;		// Get the list query.		$query = $this->getListQuery();		// Check if the query is valid.		if (empty($query))		{			return $return;		}		// Tweak the SQL query to make the total lookup faster.		if ($query instanceof JDatabaseQuery)		{			$query = clone($query);			$query->clear('select')				->select('COUNT(*)')				->clear('order');		}		// Get the total number of content items to index.		$this->db->setQuery($query);		$return = (int) $this->db->loadResult();		return $return;	}	/**	 * Method to get a content item to index.	 *	 * @param   integer  $id  The id of the content item.	 *	 * @return  FinderIndexerResult  A FinderIndexerResult object.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getItem($id)	{		// Get the list query and add the extra WHERE clause.		$query = $this->getListQuery();		$query->where('a.id = ' . (int) $id);		// Get the item to index.		$this->db->setQuery($query);		$row = $this->db->loadAssoc();		// Convert the item to a result object.		$item = JArrayHelper::toObject($row, 'FinderIndexerResult');		// Set the item type.		$item->type_id = $this->type_id;		// Set the item layout.		$item->layout = $this->layout;		return $item;	}	/**	 * Method to get a list of content items to index.	 *	 * @param   integer         $offset  The list offset.	 * @param   integer         $limit   The list limit.	 * @param   JDatabaseQuery  $query   A JDatabaseQuery object. [optional]	 *	 * @return  array  An array of FinderIndexerResult objects.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getItems($offset, $limit, $query = null)	{		$items = array();		// Get the content items to index.		$this->db->setQuery($this->getListQuery($query), $offset, $limit);		$rows = $this->db->loadAssocList();		// Convert the items to result objects.		foreach ($rows as $row)		{			// Convert the item to a result object.			$item = JArrayHelper::toObject($row, 'FinderIndexerResult');			// Set the item type.			$item->type_id = $this->type_id;			// Set the mime type.			$item->mime = $this->mime;			// Set the item layout.			$item->layout = $this->layout;			// Set the extension if present			if (isset($row->extension))			{				$item->extension = $row->extension;			}			// Add the item to the stack.			$items[] = $item;		}		return $items;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object. [optional]	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $this->db->getQuery(true);		return $query;	}	/**	 * Method to get the plugin type	 *	 * @param   integer  $id  The plugin ID	 *	 * @return  string  The plugin type	 *	 * @since   2.5	 */	protected function getPluginType($id)	{		// Prepare the query		$query = $this->db->getQuery(true)			->select($this->db->quoteName('element'))			->from($this->db->quoteName('#__extensions'))			->where($this->db->quoteName('extension_id') . ' = ' . (int) $id);		$this->db->setQuery($query);		$type = $this->db->loadResult();		return $type;	}	/**	 * Method to get a SQL query to load the published and access states for	 * an article and category.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getStateQuery()	{		$query = $this->db->getQuery(true);		// Item ID		$query->select('a.id');		// Item and category published state		$query->select('a.' . $this->state_field . ' AS state, c.published AS cat_state');		// Item and category access levels		$query->select('a.access, c.access AS cat_access')			->from($this->table . ' AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		return $query;	}	/**	 * Method to get the query clause for getting items to update by time.	 *	 * @param   string  $time  The modified timestamp.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getUpdateQueryByTime($time)	{		// Build an SQL query based on the modified time.		$query = $this->db->getQuery(true)			->where('a.modified >= ' . $this->db->quote($time));		return $query;	}	/**	 * Method to get the query clause for getting items to update by id.	 *	 * @param   array  $ids  The ids to load.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getUpdateQueryByIds($ids)	{		// Build an SQL query based on the item ids.		$query = $this->db->getQuery(true)			->where('a.id IN(' . implode(',', $ids) . ')');		return $query;	}	/**	 * Method to get the type id for the adapter content.	 *	 * @return  integer  The numeric type id for the content.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getTypeId()	{		// Get the type id from the database.		$query = $this->db->getQuery(true)			->select($this->db->quoteName('id'))			->from($this->db->quoteName('#__finder_types'))			->where($this->db->quoteName('title') . ' = ' . $this->db->quote($this->type_title));		$this->db->setQuery($query);		$result = (int) $this->db->loadResult();		return $result;	}	/**	 * Method to get the URL for the item. The URL is how we look up the link	 * in the Finder index.	 *	 * @param   integer  $id         The id of the item.	 * @param   string   $extension  The extension the category is in.	 * @param   string   $view       The view for the URL.	 *	 * @return  string  The URL of the item.	 *	 * @since   2.5	 */	protected function getURL($id, $extension, $view)	{		return 'index.php?option=' . $extension . '&view=' . $view . '&id=' . $id;	}	/**	 * Method to get the page title of any menu item that is linked to the	 * content item, if it exists and is set.	 *	 * @param   string  $url  The url of the item.	 *	 * @return  mixed  The title on success, null if not found.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getItemMenuTitle($url)	{		$return = null;		// Set variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Build a query to get the menu params.		$query = $this->db->getQuery(true)			->select($this->db->quoteName('params'))			->from($this->db->quoteName('#__menu'))			->where($this->db->quoteName('link') . ' = ' . $this->db->quote($url))			->where($this->db->quoteName('published') . ' = 1')			->where($this->db->quoteName('access') . ' IN (' . $groups . ')');		// Get the menu params from the database.		$this->db->setQuery($query);		$params = $this->db->loadResult();		// Check the results.		if (empty($params))		{			return $return;		}		// Instantiate the params.		$params = json_decode($params);		// Get the page title if it is set.		if ($params->page_title)		{			$return = $params->page_title;		}		return $return;	}	/**	 * Method to update index data on access level changes	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function itemAccessChange($row)	{		$query = clone($this->getStateQuery());		$query->where('a.id = ' . (int) $row->id);		// Get the access level.		$this->db->setQuery($query);		$item = $this->db->loadObject();		// Set the access level.		$temp = max($row->access, $item->cat_access);		// Update the item.		$this->change((int) $row->id, 'access', $temp);	}	/**	 * Method to update index data on published state changes	 *	 * @param   array    $pks    A list of primary key ids of the content that has changed state.	 * @param   integer  $value  The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function itemStateChange($pks, $value)	{		// The item's published state is tied to the category		// published state so we need to look up all published states		// before we change anything.		foreach ($pks as $pk)		{			$query = clone($this->getStateQuery());			$query->where('a.id = ' . (int) $pk);			// Get the published states.			$this->db->setQuery($query);			$item = $this->db->loadObject();			// Translate the state.			$temp = $this->translateState($value, $item->cat_state);			// Update the item.			$this->change($pk, 'state', $temp);			// Reindex the item			$this->reindex($pk);		}	}	/**	 * Method to update index data when a plugin is disabled	 *	 * @param   array  $pks  A list of primary key ids of the content that has changed state.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function pluginDisable($pks)	{		// Since multiple plugins may be disabled at a time, we need to check first		// that we're handling the appropriate one for the context		foreach ($pks as $pk)		{			if ($this->getPluginType($pk) == strtolower($this->context))			{				// Get all of the items to unindex them				$query = clone($this->getStateQuery());				$this->db->setQuery($query);				$items = $this->db->loadColumn();				// Remove each item				foreach ($items as $item)				{					$this->remove($item);				}			}		}	}	/**	 * Method to translate the native content states into states that the	 * indexer can use.	 *	 * @param   integer  $item      The item state.	 * @param   integer  $category  The category state. [optional]	 *	 * @return  integer  The translated indexer state.	 *	 * @since   2.5	 */	protected function translateState($item, $category = null)	{		// If category is present, factor in its states as well		if ($category !== null)		{			if ($category == 0)			{				$item = 0;			}		}		// Translate the state		switch ($item)		{			// Published and archived items only should return a published state			case 1;			case 2:				return 1;			// All other states should return a unpublished state			default:			case 0:				return 0;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.framework');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.modal');$canDo = MenusHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task, type)	{		if (task == 'item.setType' || task == 'item.setMenuType')		{			if (task == 'item.setType')			{				document.id('item-form').elements['jform[type]'].value = type;				document.id('fieldtype').value = 'type';			} else {				document.id('item-form').elements['jform[menutype]'].value = type;			}			Joomla.submitform('item.setType', document.id('item-form'));		} else if (task == 'item.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			Joomla.submitform(task, document.id('item-form'));		}		else		{			// special case for modal popups validation response			$$('#item-form .modal-value.invalid').each(function(field){				var idReversed = field.id.split("").reverse().join("");				var separatorLocation = idReversed.indexOf('_');				var name = idReversed.substr(separatorLocation).split("").reverse().join("")+'name';				document.id(name).addClass('invalid');			});		}	}</script><div class="menuitem-edit"><form action="<?php echo JRoute::_('index.php?option=com_menus&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate"><div class="col main-section">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_MENUS_ITEM_DETAILS');?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('type'); ?>				<?php echo $this->form->getInput('type'); ?></li>				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<?php if ($this->item->type == 'url') : ?>					<?php $this->form->setFieldAttribute('link', 'readonly', 'false');?>					<li><?php echo $this->form->getLabel('link'); ?>					<?php echo $this->form->getInput('link'); ?></li>				<?php endif; ?>				<?php if ($this->item->type == 'alias') : ?>					<li> <?php echo $this->form->getLabel('aliastip'); ?></li>				<?php endif; ?>				<?php if ($this->item->type != 'url') : ?>					<li><?php echo $this->form->getLabel('alias'); ?>					<?php echo $this->form->getInput('alias'); ?></li>				<?php endif; ?>				<li><?php echo $this->form->getLabel('note'); ?>				<?php echo $this->form->getInput('note'); ?></li>				<?php if ($this->item->type !== 'url') : ?>					<li><?php echo $this->form->getLabel('link'); ?>					<?php echo $this->form->getInput('link'); ?></li>				<?php endif ?>				<?php if ($canDo->get('core.edit.state')) : ?>					<li><?php echo $this->form->getLabel('published'); ?>					<?php echo $this->form->getInput('published'); ?></li>				<?php endif ?>				<li><?php echo $this->form->getLabel('access'); ?>				<?php echo $this->form->getInput('access'); ?></li>				<li><?php echo $this->form->getLabel('menutype'); ?>				<?php echo $this->form->getInput('menutype'); ?></li>				<li><?php echo $this->form->getLabel('parent_id'); ?>				<?php echo $this->form->getInput('parent_id'); ?></li>				<li><?php echo $this->form->getLabel('menuordering'); ?>				<?php echo $this->form->getInput('menuordering'); ?></li>				<li><?php echo $this->form->getLabel('browserNav'); ?>				<?php echo $this->form->getInput('browserNav'); ?></li>				<?php if ($canDo->get('core.edit.state')) : ?>					<?php if ($this->item->type == 'component') : ?>					<li><?php echo $this->form->getLabel('home'); ?>					<?php echo $this->form->getInput('home'); ?></li>					<?php endif; ?>				<?php endif; ?>				<li><?php echo $this->form->getLabel('language'); ?>				<?php echo $this->form->getInput('language'); ?></li>				<li><?php echo $this->form->getLabel('template_style_id'); ?>				<?php echo $this->form->getInput('template_style_id'); ?></li>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>		</ul>	</fieldset></div><div class="col options-section">	<?php echo JHtml::_('sliders.start', 'menu-sliders-'.$this->item->id); ?>	<?php //Load  parameters.		echo $this->loadTemplate('options'); ?>		<div class="clr"></div>		<?php if (!empty($this->modules)) : ?>			<?php echo JHtml::_('sliders.panel', JText::_('COM_MENUS_ITEM_MODULE_ASSIGNMENT'), 'module-options'); ?>			<fieldset>				<?php echo $this->loadTemplate('modules'); ?>			</fieldset>		<?php endif; ?>	<?php echo JHtml::_('sliders.end'); ?>	<input type="hidden" name="task" value="" />	<?php echo $this->form->getInput('component_id'); ?>	<?php echo JHtml::_('form.token'); ?>	<input type="hidden" id="fieldtype" name="fieldtype" value="" /></div></form><div class="clr"></div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');/** * Abstract Table class * * Parent class to all tables. * * @package     Joomla.Platform * @subpackage  Table * @link        http://docs.joomla.org/JTable * @since       11.1 * @tutorial	Joomla.Platform/jtable.cls */abstract class JTable extends JObject{	/**	 * Include paths for searching for JTable classes.	 *	 * @var    array	 * @since  12.1	 */	private static $_includePaths = array();	/**	 * Name of the database table to model.	 *	 * @var    string	 * @since  11.1	 */	protected $_tbl = '';	/**	 * Name of the primary key field in the table.	 *	 * @var    string	 * @since  11.1	 */	protected $_tbl_key = '';	/**	 * JDatabaseDriver object.	 *	 * @var    JDatabaseDriver	 * @since  11.1	 */	protected $_db;	/**	 * Should rows be tracked as ACL assets?	 *	 * @var    boolean	 * @since  11.1	 */	protected $_trackAssets = false;	/**	 * The rules associated with this record.	 *	 * @var    JAccessRules  A JAccessRules object.	 * @since  11.1	 */	protected $_rules;	/**	 * Indicator that the tables have been locked.	 *	 * @var    boolean	 * @since  11.1	 */	protected $_locked = false;	/**	 * Object constructor to set table and key fields.  In most cases this will	 * be overridden by child classes to explicitly set the table and key fields	 * for a particular database table.	 *	 * @param   string           $table  Name of the table to model.	 * @param   string           $key    Name of the primary key field in the table.	 * @param   JDatabaseDriver  $db     JDatabaseDriver object.	 *	 * @since   11.1	 */	public function __construct($table, $key, $db)	{		// Set internal variables.		$this->_tbl = $table;		$this->_tbl_key = $key;		$this->_db = $db;		// Initialise the table properties.		$fields = $this->getFields();		if ($fields)		{			foreach ($fields as $name => $v)			{				// Add the field if it is not already present.				if (!property_exists($this, $name))				{					$this->$name = null;				}			}		}		// If we are tracking assets, make sure an access field exists and initially set the default.		if (property_exists($this, 'asset_id'))		{			$this->_trackAssets = true;		}		// If the access property exists, set the default.		if (property_exists($this, 'access'))		{			$this->access = (int) JFactory::getConfig()->get('access');		}	}	/**	 * Get the columns from database table.	 *	 * @return  mixed  An array of the field names, or false if an error occurs.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function getFields()	{		static $cache = null;		if ($cache === null)		{			// Lookup the fields for this table only once.			$name = $this->_tbl;			$fields = $this->_db->getTableColumns($name, false);			if (empty($fields))			{				throw new UnexpectedValueException(sprintf('No columns found for %s table', $name));			}			$cache = $fields;		}		return $cache;	}	/**	 * Static method to get an instance of a JTable class if it can be found in	 * the table include paths.  To add include paths for searching for JTable	 * classes @see JTable::addIncludePath().	 *	 * @param   string  $type    The type (name) of the JTable class to get an instance of.	 * @param   string  $prefix  An optional prefix for the table class name.	 * @param   array   $config  An optional array of configuration values for the JTable object.	 *	 * @return  mixed    A JTable object if found or boolean false if one could not be found.	 *	 * @link    http://docs.joomla.org/JTable/getInstance	 * @since   11.1	 */	public static function getInstance($type, $prefix = 'JTable', $config = array())	{		// Sanitize and prepare the table class name.		$type = preg_replace('/[^A-Z0-9_\.-]/i', '', $type);		$tableClass = $prefix . ucfirst($type);		// Only try to load the class if it doesn't already exist.		if (!class_exists($tableClass))		{			// Search for the class file in the JTable include paths.			$path = JPath::find(self::addIncludePath(), strtolower($type) . '.php');			if ($path)			{				// Import the class file.				include_once $path;				// If we were unable to load the proper class, raise a warning and return false.				if (!class_exists($tableClass))				{					JLog::add(JText::sprintf('JLIB_DATABASE_ERROR_CLASS_NOT_FOUND_IN_FILE', $tableClass), JLog::WARNING, 'jerror');					return false;				}			}			else			{				// If we were unable to find the class file in the JTable include paths, raise a warning and return false.				JLog::add(JText::sprintf('JLIB_DATABASE_ERROR_NOT_SUPPORTED_FILE_NOT_FOUND', $type), JLog::WARNING, 'jerror');				return false;			}		}		// If a database object was passed in the configuration array use it, otherwise get the global one from JFactory.		$db = isset($config['dbo']) ? $config['dbo'] : JFactory::getDbo();		// Instantiate a new table class and return it.		return new $tableClass($db);	}	/**	 * Add a filesystem path where JTable should search for table class files.	 * You may either pass a string or an array of paths.	 *	 * @param   mixed  $path  A filesystem path or array of filesystem paths to add.	 *	 * @return  array  An array of filesystem paths to find JTable classes in.	 *	 * @link    http://docs.joomla.org/JTable/addIncludePath	 * @since   11.1	 */	public static function addIncludePath($path = null)	{		// If the internal paths have not been initialised, do so with the base table path.		if (empty(self::$_includePaths))		{			self::$_includePaths = array(__DIR__);		}		// Convert the passed path(s) to add to an array.		settype($path, 'array');		// If we have new paths to add, do so.		if (!empty($path) && !in_array($path, self::$_includePaths))		{			// Check and add each individual new path.			foreach ($path as $dir)			{				// Sanitize path.				$dir = trim($dir);				// Add to the front of the list so that custom paths are searched first.				array_unshift(self::$_includePaths, $dir);			}		}		return self::$_includePaths;	}	/**	 * Method to compute the default name of the asset.	 * The default name is in the form table_name.id	 * where id is the value of the primary key of the table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetName()	{		$k = $this->_tbl_key;		return $this->_tbl . '.' . (int) $this->$k;	}	/**	 * Method to return the title to use for the asset table.  In	 * tracking the assets a title is kept for each asset so that there is some	 * context available in a unified access manager.  Usually this would just	 * return $this->title or $this->name or whatever is being used for the	 * primary name of the row. If this method is not overridden, the asset name is used.	 *	 * @return  string  The string to use as the title in the asset table.	 *	 * @link    http://docs.joomla.org/JTable/getAssetTitle	 * @since   11.1	 */	protected function _getAssetTitle()	{		return $this->_getAssetName();	}	/**	 * Method to get the parent asset under which to register this one.	 * By default, all assets are registered to the ROOT node with ID,	 * which will default to 1 if none exists.	 * The extended class can define a table and id to lookup.  If the	 * asset does not exist it will be created.	 *	 * @param   JTable   $table  A JTable object for the asset parent.	 * @param   integer  $id     Id to look up	 *	 * @return  integer	 *	 * @since   11.1	 */	protected function _getAssetParentId($table = null, $id = null)	{		// For simple cases, parent to the asset root.		$assets = self::getInstance('Asset', 'JTable', array('dbo' => $this->getDbo()));		$rootId = $assets->getRootId();		if (!empty($rootId))		{			return $rootId;		}		return 1;	}	/**	 * Method to get the database table name for the class.	 *	 * @return  string  The name of the database table being modeled.	 *	 * @since   11.1	 *	 * @link    http://docs.joomla.org/JTable/getTableName	 */	public function getTableName()	{		return $this->_tbl;	}	/**	 * Method to get the primary key field name for the table.	 *	 * @return  string  The name of the primary key for the table.	 *	 * @link    http://docs.joomla.org/JTable/getKeyName	 * @since   11.1	 */	public function getKeyName()	{		return $this->_tbl_key;	}	/**	 * Method to get the JDatabaseDriver object.	 *	 * @return  JDatabaseDriver  The internal database driver object.	 *	 * @link    http://docs.joomla.org/JTable/getDBO	 * @since   11.1	 */	public function getDbo()	{		return $this->_db;	}	/**	 * Method to set the JDatabaseDriver object.	 *	 * @param   JDatabaseDriver  $db  A JDatabaseDriver object to be used by the table object.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/setDBO	 * @since   11.1	 */	public function setDBO(JDatabaseDriver $db)	{		$this->_db = $db;		return true;	}	/**	 * Method to set rules for the record.	 *	 * @param   mixed  $input  A JAccessRules object, JSON string, or array.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setRules($input)	{		if ($input instanceof JAccessRules)		{			$this->_rules = $input;		}		else		{			$this->_rules = new JAccessRules($input);		}	}	/**	 * Method to get the rules for the record.	 *	 * @return  JAccessRules object	 *	 * @since   11.1	 */	public function getRules()	{		return $this->_rules;	}	/**	 * Method to reset class properties to the defaults set in the class	 * definition. It will ignore the primary key as well as any private class	 * properties.	 *	 * @return  void	 *	 * @link    http://docs.joomla.org/JTable/reset	 * @since   11.1	 */	public function reset()	{		// Get the default values for the class from the table.		foreach ($this->getFields() as $k => $v)		{			// If the property is not the primary key or private, reset it.			if ($k != $this->_tbl_key && (strpos($k, '_') !== 0))			{				$this->$k = $v->Default;			}		}	}	/**	 * Method to bind an associative array or object to the JTable instance.This	 * method only binds properties that are publicly accessible and optionally	 * takes an array of properties to ignore when binding.	 *	 * @param   mixed  $src     An associative array or object to bind to the JTable instance.	 * @param   mixed  $ignore  An optional array or space separated list of properties to ignore while binding.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/bind	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function bind($src, $ignore = array())	{		// If the source value is not an array or object return false.		if (!is_object($src) && !is_array($src))		{			throw new InvalidArgumentException(sprintf('%s::bind(*%s*)', get_class($this), gettype($src)));		}		// If the source value is an object, get its accessible properties.		if (is_object($src))		{			$src = get_object_vars($src);		}		// If the ignore value is a string, explode it over spaces.		if (!is_array($ignore))		{			$ignore = explode(' ', $ignore);		}		// Bind the source value, excluding the ignored fields.		foreach ($this->getProperties() as $k => $v)		{			// Only process fields not in the ignore array.			if (!in_array($k, $ignore))			{				if (isset($src[$k]))				{					$this->$k = $src[$k];				}			}		}		return true;	}	/**	 * Method to load a row from the database by primary key and bind the fields	 * to the JTable instance properties.	 *	 * @param   mixed    $keys   An optional primary key value to load the row by, or an array of fields to match.  If not	 *                           set the instance property value is used.	 * @param   boolean  $reset  True to reset the default values before loading the new row.	 *	 * @return  boolean  True if successful. False if row not found.	 *	 * @link    http://docs.joomla.org/JTable/load	 * @since   11.1	 * @throws  RuntimeException	 * @throws  UnexpectedValueException	 */	public function load($keys = null, $reset = true)	{		if (empty($keys))		{			// If empty, use the value of the current key			$keyName = $this->_tbl_key;			$keyValue = $this->$keyName;			// If empty primary key there's is no need to load anything			if (empty($keyValue))			{				return true;			}			$keys = array($keyName => $keyValue);		}		elseif (!is_array($keys))		{			// Load by primary key.			$keys = array($this->_tbl_key => $keys);		}		if ($reset)		{			$this->reset();		}		// Initialise the query.		$query = $this->_db->getQuery(true)			->select('*')			->from($this->_tbl);		$fields = array_keys($this->getProperties());		foreach ($keys as $field => $value)		{			// Check that $field is in the table.			if (!in_array($field, $fields))			{				throw new UnexpectedValueException(sprintf('Missing field in database: %s &#160; %s.', get_class($this), $field));			}			// Add the search tuple to the query.			$query->where($this->_db->quoteName($field) . ' = ' . $this->_db->quote($value));		}		$this->_db->setQuery($query);		$row = $this->_db->loadAssoc();		// Check that we have a result.		if (empty($row))		{			return false;		}		// Bind the object with the row and return.		return $this->bind($row);	}	/**	 * Method to perform sanity checks on the JTable instance properties to ensure	 * they are safe to store in the database.  Child classes should override this	 * method to make sure the data they are storing in the database is safe and	 * as expected before storage.	 *	 * @return  boolean  True if the instance is sane and able to be stored in the database.	 *	 * @link    http://docs.joomla.org/JTable/check	 * @since   11.1	 */	public function check()	{		return true;	}	/**	 * Method to store a row in the database from the JTable instance properties.	 * If a primary key value is set the row with that primary key value will be	 * updated with the instance property values.  If no primary key value is set	 * a new row will be inserted into the database with the properties from the	 * JTable instance.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/store	 * @since   11.1	 */	public function store($updateNulls = false)	{		$k = $this->_tbl_key;		if (!empty($this->asset_id))		{			$currentAssetId = $this->asset_id;		}		if (0 == $this->$k)		{			$this->$k = null;		}		// The asset id field is managed privately by this class.		if ($this->_trackAssets)		{			unset($this->asset_id);		}		// If a primary key exists update the object, otherwise insert it.		if ($this->$k)		{			$this->_db->updateObject($this->_tbl, $this, $this->_tbl_key, $updateNulls);		}		else		{			$this->_db->insertObject($this->_tbl, $this, $this->_tbl_key);		}		// If the table is not set to track assets return true.		if (!$this->_trackAssets)		{			return true;		}		if ($this->_locked)		{			$this->_unlock();		}		/*		 * Asset Tracking		 */		$parentId = $this->_getAssetParentId();		$name = $this->_getAssetName();		$title = $this->_getAssetTitle();		$asset = self::getInstance('Asset', 'JTable', array('dbo' => $this->getDbo()));		$asset->loadByName($name);		// Re-inject the asset id.		$this->asset_id = $asset->id;		// Check for an error.		$error = $asset->getError();		if ($error)		{			$this->setError($error);			return false;		}		// Specify how a new or moved node asset is inserted into the tree.		if (empty($this->asset_id) || $asset->parent_id != $parentId)		{			$asset->setLocation($parentId, 'last-child');		}		// Prepare the asset to be stored.		$asset->parent_id = $parentId;		$asset->name = $name;		$asset->title = $title;		if ($this->_rules instanceof JAccessRules)		{			$asset->rules = (string) $this->_rules;		}		if (!$asset->check() || !$asset->store($updateNulls))		{			$this->setError($asset->getError());			return false;		}		// Create an asset_id or heal one that is corrupted.		if (empty($this->asset_id) || ($currentAssetId != $this->asset_id && !empty($this->asset_id)))		{			// Update the asset_id field in this table.			$this->asset_id = (int) $asset->id;			$query = $this->_db->getQuery(true)				->update($this->_db->quoteName($this->_tbl))				->set('asset_id = ' . (int) $this->asset_id)				->where($this->_db->quoteName($k) . ' = ' . (int) $this->$k);			$this->_db->setQuery($query);			$this->_db->execute();		}		return true;	}	/**	 * Method to provide a shortcut to binding, checking and storing a JTable	 * instance to the database table.  The method will check a row in once the	 * data has been stored and if an ordering filter is present will attempt to	 * reorder the table rows based on the filter.  The ordering filter is an instance	 * property name.  The rows that will be reordered are those whose value matches	 * the JTable instance for the property specified.	 *	 * @param   mixed   $src             An associative array or object to bind to the JTable instance.	 * @param   string  $orderingFilter  Filter for the order updating	 * @param   mixed   $ignore          An optional array or space separated list of properties	 *                                   to ignore while binding.	 *	 * @return  boolean  True on success.	 *	 * @link	http://docs.joomla.org/JTable/save	 * @since   11.1	 */	public function save($src, $orderingFilter = '', $ignore = '')	{		// Attempt to bind the source to the instance.		if (!$this->bind($src, $ignore))		{			return false;		}		// Run any sanity checks on the instance and verify that it is ready for storage.		if (!$this->check())		{			return false;		}		// Attempt to store the properties to the database table.		if (!$this->store())		{			return false;		}		// Attempt to check the row in, just in case it was checked out.		if (!$this->checkin())		{			return false;		}		// If an ordering filter is set, attempt reorder the rows in the table based on the filter and value.		if ($orderingFilter)		{			$filterValue = $this->$orderingFilter;			$this->reorder($orderingFilter ? $this->_db->quoteName($orderingFilter) . ' = ' . $this->_db->quote($filterValue) : '');		}		// Set the error to empty and return true.		$this->setError('');		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   mixed  $pk  An optional primary key value to delete.  If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/delete	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			throw new UnexpectedValueException('Null primary key not allowed.');		}		// If tracking assets, remove the asset first.		if ($this->_trackAssets)		{			// Get and the asset name.			$this->$k = $pk;			$name = $this->_getAssetName();			$asset = self::getInstance('Asset');			if ($asset->loadByName($name))			{				if (!$asset->delete())				{					$this->setError($asset->getError());					return false;				}			}			else			{				$this->setError($asset->getError());				return false;			}		}		// Delete the row by primary key.		$query = $this->_db->getQuery(true)			->delete($this->_tbl)			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		// Check for a database error.		$this->_db->execute();		return true;	}	/**	 * Method to check a row out if the necessary properties/fields exist.  To	 * prevent race conditions while editing rows in a database, a row can be	 * checked out if the fields 'checked_out' and 'checked_out_time' are available.	 * While a row is checked out, any attempt to store the row by a user other	 * than the one who checked the row out should be held until the row is checked	 * in again.	 *	 * @param   integer  $userId  The Id of the user checking out the row.	 * @param   mixed    $pk      An optional primary key value to check out.  If not set	 *                            the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/checkOut	 * @since   11.1	 */	public function checkOut($userId, $pk = null)	{		// If there is no checked_out or checked_out_time field, just return true.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			return true;		}		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			throw new UnexpectedValueException('Null primary key not allowed.');		}		// Get the current time in MySQL format.		$time = JFactory::getDate()->toSql();		// Check the row out by primary key.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set($this->_db->quoteName('checked_out') . ' = ' . (int) $userId)			->set($this->_db->quoteName('checked_out_time') . ' = ' . $this->_db->quote($time))			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		$this->_db->execute();		// Set table values in the object.		$this->checked_out = (int) $userId;		$this->checked_out_time = $time;		return true;	}	/**	 * Method to check a row in if the necessary properties/fields exist.  Checking	 * a row in will allow other users the ability to edit the row.	 *	 * @param   mixed  $pk  An optional primary key value to check out.  If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/checkIn	 * @since   11.1	 */	public function checkIn($pk = null)	{		// If there is no checked_out or checked_out_time field, just return true.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			return true;		}		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			throw new UnexpectedValueException('Null primary key not allowed.');		}		// Check the row in by primary key.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set($this->_db->quoteName('checked_out') . ' = 0')			->set($this->_db->quoteName('checked_out_time') . ' = ' . $this->_db->quote($this->_db->getNullDate()))			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		// Check for a database error.		$this->_db->execute();		// Set table values in the object.		$this->checked_out = 0;		$this->checked_out_time = '';		return true;	}	/**	 * Method to increment the hits for a row if the necessary property/field exists.	 *	 * @param   mixed  $pk  An optional primary key value to increment. If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/hit	 * @since   11.1	 */	public function hit($pk = null)	{		// If there is no hits field, just return true.		if (!property_exists($this, 'hits'))		{			return true;		}		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			return false;		}		// Check the row in by primary key.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set($this->_db->quoteName('hits') . ' = (' . $this->_db->quoteName('hits') . ' + 1)')			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		$this->_db->execute();		// Set table values in the object.		$this->hits++;		return true;	}	/**	 * Method to determine if a row is checked out and therefore uneditable by	 * a user. If the row is checked out by the same user, then it is considered	 * not checked out -- as the user can still edit it.	 *	 * @param   integer  $with     The userid to preform the match with, if an item is checked	 *                             out by this user the function will return false.	 * @param   integer  $against  The userid to perform the match against when the function	 *                             is used as a static function.	 *	 * @return  boolean  True if checked out.	 *	 * @link    http://docs.joomla.org/JTable/isCheckedOut	 * @since   11.1	 */	public function isCheckedOut($with = 0, $against = null)	{		// Handle the non-static case.		if (isset($this) && ($this instanceof JTable) && is_null($against))		{			$against = $this->get('checked_out');		}		// The item is not checked out or is checked out by the same user.		if (!$against || ($against == $with))		{			return false;		}		$db = JFactory::getDbo();		$db->setQuery('SELECT COUNT(userid) FROM ' . $db->quoteName('#__session') . ' WHERE ' . $db->quoteName('userid') . ' = ' . (int) $against);		$checkedOut = (boolean) $db->loadResult();		// If a session exists for the user then it is checked out.		return $checkedOut;	}	/**	 * Method to get the next ordering value for a group of rows defined by an SQL WHERE clause.	 * This is useful for placing a new item last in a group of items in the table.	 *	 * @param   string  $where  WHERE clause to use for selecting the MAX(ordering) for the table.	 *	 * @return  mixed  Boolean false an failure or the next ordering value as an integer.	 *	 * @link    http://docs.joomla.org/JTable/getNextOrder	 * @since   11.1	 */	public function getNextOrder($where = '')	{		// If there is no ordering field set an error and return false.		if (!property_exists($this, 'ordering'))		{			throw new UnexpectedValueException(sprintf('%s does not support ordering.', get_class($this)));		}		// Get the largest ordering value for a given where clause.		$query = $this->_db->getQuery(true)			->select('MAX(ordering)')			->from($this->_tbl);		if ($where)		{			$query->where($where);		}		$this->_db->setQuery($query);		$max = (int) $this->_db->loadResult();		// Return the largest ordering value + 1.		return ($max + 1);	}	/**	 * Method to compact the ordering values of rows in a group of rows	 * defined by an SQL WHERE clause.	 *	 * @param   string  $where  WHERE clause to use for limiting the selection of rows to compact the ordering values.	 *	 * @return  mixed  Boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/reorder	 * @since   11.1	 */	public function reorder($where = '')	{		// If there is no ordering field set an error and return false.		if (!property_exists($this, 'ordering'))		{			throw new UnexpectedValueException(sprintf('%s does not support ordering.', get_class($this)));		}		$k = $this->_tbl_key;		// Get the primary keys and ordering values for the selection.		$query = $this->_db->getQuery(true)			->select($this->_tbl_key . ', ordering')			->from($this->_tbl)			->where('ordering >= 0')			->order('ordering');		// Setup the extra where and ordering clause data.		if ($where)		{			$query->where($where);		}		$this->_db->setQuery($query);		$rows = $this->_db->loadObjectList();		// Compact the ordering values.		foreach ($rows as $i => $row)		{			// Make sure the ordering is a positive integer.			if ($row->ordering >= 0)			{				// Only update rows that are necessary.				if ($row->ordering != $i + 1)				{					// Update the row ordering field.					$query = $this->_db->getQuery(true)						->update($this->_tbl)						->set('ordering = ' . ($i + 1))						->where($this->_tbl_key . ' = ' . $this->_db->quote($row->$k));					$this->_db->setQuery($query);					$this->_db->execute();				}			}		}		return true;	}	/**	 * Method to move a row in the ordering sequence of a group of rows defined by an SQL WHERE clause.	 * Negative numbers move the row up in the sequence and positive numbers move it down.	 *	 * @param   integer  $delta  The direction and magnitude to move the row in the ordering sequence.	 * @param   string   $where  WHERE clause to use for limiting the selection of rows to compact the	 *                           ordering values.	 *	 * @return  mixed    Boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/move	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function move($delta, $where = '')	{		// If there is no ordering field set an error and return false.		if (!property_exists($this, 'ordering'))		{			throw new UnexpectedValueException(sprintf('%s does not support ordering.', get_class($this)));		}		// If the change is none, do nothing.		if (empty($delta))		{			return true;		}		$k = $this->_tbl_key;		$row = null;		$query = $this->_db->getQuery(true);		// Select the primary key and ordering values from the table.		$query->select($this->_tbl_key . ', ordering')			->from($this->_tbl);		// If the movement delta is negative move the row up.		if ($delta < 0)		{			$query->where('ordering < ' . (int) $this->ordering)				->order('ordering DESC');		}		// If the movement delta is positive move the row down.		elseif ($delta > 0)		{			$query->where('ordering > ' . (int) $this->ordering)				->order('ordering ASC');		}		// Add the custom WHERE clause if set.		if ($where)		{			$query->where($where);		}		// Select the first row with the criteria.		$this->_db->setQuery($query, 0, 1);		$row = $this->_db->loadObject();		// If a row is found, move the item.		if (!empty($row))		{			// Update the ordering field for this instance to the row's ordering value.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('ordering = ' . (int) $row->ordering)				->where($this->_tbl_key . ' = ' . $this->_db->quote($this->$k));			$this->_db->setQuery($query);			$this->_db->execute();			// Update the ordering field for the row to this instance's ordering value.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('ordering = ' . (int) $this->ordering)				->where($this->_tbl_key . ' = ' . $this->_db->quote($row->$k));			$this->_db->setQuery($query);			$this->_db->execute();			// Update the instance value.			$this->ordering = $row->ordering;		}		else		{			// Update the ordering field for this instance.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('ordering = ' . (int) $this->ordering)				->where($this->_tbl_key . ' = ' . $this->_db->quote($this->$k));			$this->_db->setQuery($query);			$this->_db->execute();		}		return true;	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.	 *                            If not set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success; false if $pks is empty.	 *	 * @link    http://docs.joomla.org/JTable/publish	 * @since   11.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				return false;			}		}		// Update the publishing state for rows with the given primary keys.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('published = ' . (int) $state);		// Determine if there is checkin support for the table.		if (property_exists($this, 'checked_out') || property_exists($this, 'checked_out_time'))		{			$query->where('(checked_out = 0 OR checked_out = ' . (int) $userId . ')');			$checkin = true;		}		else		{			$checkin = false;		}		// Build the WHERE clause for the primary keys.		$query->where($k . ' = ' . implode(' OR ' . $k . ' = ', $pks));		$this->_db->setQuery($query);		$this->_db->execute();		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->published = $state;		}		$this->setError('');		return true;	}	/**	 * Method to lock the database table for writing.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function _lock()	{		$this->_db->lockTable($this->_tbl);		$this->_locked = true;		return true;	}	/**	 * Method to unlock the database table for writing.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	protected function _unlock()	{		$this->_db->unlockTables();		$this->_locked = false;		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to encapsulate a feed entry for the Joomla Platform. * * @property  JFeedPerson  $author         Person responsible for feed entry content. * @property  array        $categories     Categories to which the feed entry belongs. * @property  string       $content        The content of the feed entry. * @property  array        $contributors   People who contributed to the feed entry content. * @property  string       $copyright      Information about rights, e.g. copyrights, held in and over the feed entry. * @property  array        $links          Links associated with the feed entry. * @property  JDate        $publishedDate  The publication date for the feed entry. * @property  JFeed        $source         The feed from which the entry is sourced. * @property  string       $title          A human readable title for the feed entry. * @property  JDate        $updatedDate    The last time the content of the feed entry changed. * @property  string       $uri            Universal, permanent identifier for the feed entry. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedEntry{	/**	 * @var    array  The entry properties.	 * @since  12.3	 */	protected $properties = array(		'uri'  => '',		'title' => '',		'updatedDate' => '',		'content' => '',		'categories' => array(),		'contributors' => array(),		'links' => array()	);	/**	 * Magic method to return values for feed entry properties.	 *	 * @param   string  $name  The name of the property.	 *	 * @return  mixed	 *	 * @since   12.3	 */	public function __get($name)	{		return (isset($this->properties[$name])) ? $this->properties[$name] : null;	}	/**	 * Magic method to set values for feed properties.	 *	 * @param   string  $name   The name of the property.	 * @param   mixed   $value  The value to set for the property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __set($name, $value)	{		// Ensure that setting a date always sets a JDate instance.		if ((($name == 'updatedDate') || ($name == 'publishedDate')) && !($value instanceof JDate))		{			$value = new JDate($value);		}		// Validate that any authors that are set are instances of JFeedPerson or null.		if (($name == 'author') && (!($value instanceof JFeedPerson) || ($value === null)))		{			throw new InvalidArgumentException('JFeedEntry "author" must be of type JFeedPerson. ' . gettype($value) . 'given.');		}		// Validate that any sources that are set are instances of JFeed or null.		if (($name == 'source') && (!($value instanceof JFeed) || ($value === null)))		{			throw new InvalidArgumentException('JFeedEntry "source" must be of type JFeed. ' . gettype($value) . 'given.');		}		// Disallow setting categories, contributors, or links directly.		if (($name == 'categories') || ($name == 'contributors') || ($name == 'links'))		{			throw new InvalidArgumentException('Cannot directly set JFeedEntry property "' . $name . '".');		}		$this->properties[$name] = $value;	}	/**	 * Method to add a category to the feed entry object.	 *	 * @param   string  $name  The name of the category to add.	 * @param   string  $uri   The optional URI for the category to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addCategory($name, $uri = '')	{		$this->properties['categories'][$name] = $uri;		return $this;	}	/**	 * Method to add a contributor to the feed entry object.	 *	 * @param   string  $name   The full name of the person to add.	 * @param   string  $email  The email address of the person to add.	 * @param   string  $uri    The optional URI for the person to add.	 * @param   string  $type   The optional type of person to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addContributor($name, $email, $uri = null, $type = null)	{		$contributor = new JFeedPerson($name, $email, $uri, $type);		// If the new contributor already exists then there is nothing to do, so just return.		foreach ($this->properties['contributors'] as $c)		{			if ($c == $contributor)			{				return $this;			}		}		// Add the new contributor.		$this->properties['contributors'][] = $contributor;		return $this;	}	/**	 * Method to add a link to the feed entry object.	 *	 * @param   JFeedLink  $link  The link object to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addLink(JFeedLink $link)	{		// If the new link already exists then there is nothing to do, so just return.		foreach ($this->properties['links'] as $l)		{			if ($l == $link)			{				return $this;			}		}		// Add the new link.		$this->properties['links'][] = $link;		return $this;	}	/**	 * Method to remove a category from the feed entry object.	 *	 * @param   string  $name  The name of the category to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeCategory($name)	{		unset($this->properties['categories'][$name]);		return $this;	}	/**	 * Method to remove a contributor from the feed entry object.	 *	 * @param   JFeedPerson  $contributor  The person object to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeContributor(JFeedPerson $contributor)	{		// If the contributor exists remove it.		foreach ($this->properties['contributors'] as $k => $c)		{			if ($c == $contributor)			{				unset($this->properties['contributors'][$k]);				$this->properties['contributors'] = array_values($this->properties['contributors']);				return $this;			}		}		return $this;	}	/**	 * Method to remove a link from the feed entry object.	 *	 * @param   JFeedLink  $link  The link object to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeLink(JFeedLink $link)	{		// If the link exists remove it.		foreach ($this->properties['links'] as $k => $l)		{			if ($l == $link)			{				unset($this->properties['links'][$k]);				$this->properties['links'] = array_values($this->properties['links']);				return $this;			}		}		return $this;	}	/**	 * Shortcut method to set the author for the feed entry object.	 *	 * @param   string  $name   The full name of the person to set.	 * @param   string  $email  The email address of the person to set.	 * @param   string  $uri    The optional URI for the person to set.	 * @param   string  $type   The optional type of person to set.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function setAuthor($name, $email, $uri = null, $type = null)	{		$author = new JFeedPerson($name, $email, $uri, $type);		$this->properties['author'] = $author;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_content')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}JLoader::register('ContentHelper', __DIR__ . '/helpers/content.php');$controller = JControllerLegacy::getInstance('Content');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseQuerySqlite extends JDatabaseQueryPdo implements JDatabaseQueryPreparable, JDatabaseQueryLimitable{	/**	 * @var integer	 * @since 12.1	 */	protected $limit;	/**	 * @var integer	 * @since 12.1	 */	protected $offset;	/**	 * @var mixed	 * @since 12.1	 */	protected $bounded = array();	/**	 * Method to add a variable to an internal array that will be bound to a prepared SQL statement before query execution. Also	 * removes a variable that has been bounded from the internal bounded array when the passed in value is null.	 *	 * @param   string|integer  $key            The key that will be used in your SQL query to reference the value. Usually of	 *                                          the form ':key', but can also be an integer.	 * @param   mixed           &$value         The value that will be bound. The value is passed by reference to support output	 *                                          parameters such as those possible with stored procedures.	 * @param   integer         $dataType       Constant corresponding to a SQL datatype.	 * @param   integer         $length         The length of the variable. Usually required for OUTPUT parameters.	 * @param   array           $driverOptions  Optional driver options to be used.	 *	 * @return  JDatabaseQuery	 *	 * @since   12.1	 */	public function bind($key = null, &$value = null, $dataType = PDO::PARAM_STR, $length = 0, $driverOptions = array())	{		// Case 1: Empty Key (reset $bounded array)		if (empty($key))		{			$this->bounded = array();			return $this;		}		// Case 2: Key Provided, null value (unset key from $bounded array)		if (is_null($value))		{			if (isset($this->bounded[$key]))			{				unset($this->bounded[$key]);			}			return $this;		}		$obj = new stdClass;		$obj->value = &$value;		$obj->dataType = $dataType;		$obj->length = $length;		$obj->driverOptions = $driverOptions;		// Case 3: Simply add the Key/Value into the bounded array		$this->bounded[$key] = $obj;		return $this;	}	/**	 * Retrieves the bound parameters array when key is null and returns it by reference. If a key is provided then that item is	 * returned.	 *	 * @param   mixed  $key  The bounded variable key to retrieve.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function &getBounded($key = null)	{		if (empty($key))		{			return $this->bounded;		}		else		{			if (isset($this->bounded[$key]))			{				return $this->bounded[$key];			}		}	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function clear($clause = null)	{		switch ($clause)		{			case null:				$this->bounded = array();				break;		}		parent::clear($clause);		return $this;	}	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		if ($limit > 0 || $offset > 0)		{			$query .= ' LIMIT ' . $offset . ', ' . $limit;		}		return $query;	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit = (int) $limit;		$this->offset = (int) $offset;		return $this;	}	/**	 * Add to the current date and time.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date or datetime to add to	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @link http://www.sqlite.org/lang_datefunc.html	 */	public function dateAdd($date, $interval, $datePart)	{		// SQLite does not support microseconds as a separate unit. Convert the interval to seconds		if (strcasecmp($datePart, 'microseconds') == 0)		{			$interval = .001 * $interval;			$datePart = 'seconds';		}		if (substr($interval, 0, 1) != '-')		{			return "datetime('" . $date . "', '+" . $interval . " " . $datePart . "')";		}		else		{			return "datetime('" . $date . "', '" . $interval . " " . $datePart . "')";		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.folder');jimport('joomla.filesystem.file');/** * Joomla! update overview Model * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @author      nikosdion <nicholas@dionysopoulos.me> * @since       2.5.4 */class JoomlaupdateModelDefault extends JModelLegacy{	/**	 * Detects if the Joomla! update site currently in use matches the one	 * configured in this component. If they don't match, it changes it.	 *	 * @return  void	 *	 * @since    2.5.4	 */	public function applyUpdateSite()	{		// Determine the intended update URL		$params = JComponentHelper::getParams('com_joomlaupdate');		switch ($params->get('updatesource', 'nochange'))		{			// "Long Term Support (LTS) branch - Recommended"			case 'lts':				$updateURL = 'http://update.joomla.org/core/list.xml';				break;			// "Short term support (STS) branch"			case 'sts':				$updateURL = 'http://update.joomla.org/core/sts/list_sts.xml';				break;			// "Testing"			case 'testing':				$updateURL = 'http://update.joomla.org/core/test/list_test.xml';				break;			// "Custom"			case 'custom':				$updateURL = $params->get('customurl', '');				break;			// "Do not change"			case 'nochange':			default:				return;				break;		}		$db = $this->getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('us') . '.*')			->from($db->quoteName('#__update_sites_extensions') . ' AS ' . $db->quoteName('map'))			->join(				'INNER', $db->quoteName('#__update_sites') . ' AS ' . $db->quoteName('us')				. ' ON (' . 'us.update_site_id = map.update_site_id)'			)			->where('map.extension_id = ' . $db->quote(700));		$db->setQuery($query);		$update_site = $db->loadObject();		if ($update_site->location != $updateURL)		{			// Modify the database record			$update_site->last_check_timestamp = 0;			$update_site->location = $updateURL;			$db->updateObject('#__update_sites', $update_site, 'update_site_id');			// Remove cached updates			$query = $db->getQuery(true)				->delete($db->quoteName('#__updates'))				->where($db->quoteName('extension_id') . ' = ' . $db->quote('700'));			$db->setQuery($query);			$db->execute();		}	}	/**	 * Makes sure that the Joomla! update cache is up-to-date	 *	 * @param   boolean  $force  Force reload, ignoring the cache timeout	 *	 * @return  void	 *	 * @since    2.5.4	 */	public function refreshUpdates($force = false)	{		if ($force)		{			$cache_timeout = 0;		}		else		{			$update_params = JComponentHelper::getParams('com_installer');			$cache_timeout = $update_params->get('cachetimeout', 6, 'int');			$cache_timeout = 3600 * $cache_timeout;		}		$updater = JUpdater::getInstance();		$results = $updater->findUpdates(700, $cache_timeout);	}	/**	 * Returns an array with the Joomla! update information	 *	 * @return  array	 *	 * @since   2.5.4	 */	public function getUpdateInformation()	{		// Initialise the return array		$ret = array(			'installed' => JVERSION,			'latest' => null,			'object' => null		);		// Fetch the update information from the database		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('*')			->from($db->quoteName('#__updates'))			->where($db->quoteName('extension_id') . ' = ' . $db->quote(700));		$db->setQuery($query);		$updateObject = $db->loadObject();		if (is_null($updateObject))		{			$ret['latest'] = JVERSION;			return $ret;		}		else		{			$ret['latest'] = $updateObject->version;		}		// Fetch the full udpate details from the update details URL		jimport('joomla.updater.update');		$update = new JUpdate;		$update->loadFromXML($updateObject->detailsurl);		// Pass the update object		if ($ret['latest'] == JVERSION)		{			$ret['object'] = null;		}		else		{			$ret['object'] = $update;		}		return $ret;	}	/**	 * Returns an array with the configured FTP options	 *	 * @return  array	 *	 * @since   2.5.4	 */	public function getFTPOptions()	{		$config = JFactory::getConfig();		return array(			'host' => $config->get('ftp_host'),			'port' => $config->get('ftp_port'),			'username' => $config->get('ftp_user'),			'password' => $config->get('ftp_pass'),			'directory' => $config->get('ftp_root'),			'enabled' => $config->get('ftp_enable'),		);	}	/**	 * Removes all of the updates from the table and enable all update streams.	 *	 * @return  boolean  Result of operation	 *	 * @since   3.0	 */	public function purge()	{		$db = JFactory::getDbo();		// Modify the database record		$update_site = new stdClass;		$update_site->last_check_timestamp = 0;		$update_site->enabled = 1;		$update_site->update_site_id = 1;		$db->updateObject('#__update_sites', $update_site, 'update_site_id');		$query = $db->getQuery(true)			->delete($db->quoteName('#__updates'))			->where($db->quoteName('update_site_id') . ' = ' . $db->quote('1'));		$db->setQuery($query);		if ($db->execute())		{			$this->_message = JText::_('JLIB_INSTALLER_PURGED_UPDATES');			return true;		}		else		{			$this->_message = JText::_('JLIB_INSTALLER_FAILED_TO_PURGE_UPDATES');			return false;		}	}	/**	 * Downloads the update package to the site	 *	 * @return  bool|string False on failure, basename of the file in any other case	 *	 * @since   2.5.4	 */	public function download()	{		$updateInfo = $this->getUpdateInformation();		$packageURL = $updateInfo['object']->downloadurl->_data;		$basename = basename($packageURL);		// Find the path to the temp directory and the local package		$config = JFactory::getConfig();		$tempdir = $config->get('tmp_path');		$target = $tempdir . '/' . $basename;		// Do we have a cached file?		$exists = JFile::exists($target);		if (!$exists)		{			// Not there, let's fetch it			return $this->downloadPackage($packageURL, $target);		}		else		{			// Is it a 0-byte file? If so, re-download please.			$filesize = @filesize($target);			if (empty($filesize))			{				return $this->downloadPackage($packageURL, $target);			}			// Yes, it's there, skip downloading			return $basename;		}	}	/**	 * Downloads a package file to a specific directory	 *	 * @param   string  $url     The URL to download from	 * @param   string  $target  The directory to store the file	 *	 * @return  boolean True on success	 *	 * @since   2.5.4	 */	protected function downloadPackage($url, $target)	{		JLoader::import('helpers.download', JPATH_COMPONENT_ADMINISTRATOR);		$result = AdmintoolsHelperDownload::download($url, $target);		if (!$result)		{			return false;		}		else		{			return basename($target);		}	}	/**	 * @since  2.5.4	 */	public function createRestorationFile($basename = null)	{		// Get a password		$password = JUserHelper::genRandomPassword(32);		$app = JFactory::getApplication();		$app->setUserState('com_joomlaupdate.password', $password);		// Do we have to use FTP?		$method = $app->input->get('method', 'direct');		// Get the absolute path to site's root		$siteroot = JPATH_SITE;		// If the package name is not specified, get it from the update info		if (empty($basename))		{			$updateInfo = $this->getUpdateInformation();			$packageURL = $updateInfo['object']->downloadurl->_data;			$basename = basename($packageURL);		}		// Get the package name		$config = JFactory::getConfig();		$tempdir = $config->get('tmp_path');		$file = $tempdir . '/' . $basename;		$filesize = @filesize($file);		$app->setUserState('com_joomlaupdate.password', $password);		$app->setUserState('com_joomlaupdate.filesize', $filesize);		$data = "<?php\ndefined('_AKEEBA_RESTORATION') or die('Restricted access');\n";		$data .= '$restoration_setup = array(' . "\n";		$data .= <<<ENDDATA	'kickstart.security.password' => '$password',	'kickstart.tuning.max_exec_time' => '5',	'kickstart.tuning.run_time_bias' => '75',	'kickstart.tuning.min_exec_time' => '0',	'kickstart.procengine' => '$method',	'kickstart.setup.sourcefile' => '$file',	'kickstart.setup.destdir' => '$siteroot',	'kickstart.setup.restoreperms' => '0',	'kickstart.setup.filetype' => 'zip',	'kickstart.setup.dryrun' => '0'ENDDATA;		if ($method == 'ftp')		{			// Fetch the FTP parameters from the request. Note: The password should be			// allowed as raw mode, otherwise something like !@<sdf34>43H% would be			// sanitised to !@43H% which is just plain wrong.			$ftp_host = $app->input->get('ftp_host', '');			$ftp_port = $app->input->get('ftp_port', '21');			$ftp_user = $app->input->get('ftp_user', '');			$ftp_pass = $app->input->get('ftp_pass', '', 'default', 'none', 2);			$ftp_root = $app->input->get('ftp_root', '');			// Is the tempdir really writable?			$writable = @is_writeable($tempdir);			if ($writable)			{				// Let's be REALLY sure				$fp = @fopen($tempdir . '/test.txt', 'w');				if ($fp === false)				{					$writable = false;				}				else				{					fclose($fp);					unlink($tempdir . '/test.txt');				}			}			// If the tempdir is not writable, create a new writable subdirectory			if (!$writable)			{				$FTPOptions = JClientHelper::getCredentials('ftp');				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], null, $FTPOptions['user'], $FTPOptions['pass']);				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $tempdir . '/admintools'), '/');				if (!@mkdir($tempdir . '/admintools'))				{					$ftp->mkdir($dest);				}				if (!@chmod($tempdir . '/admintools', 511))				{					$ftp->chmod($dest, 511);				}				$tempdir .= '/admintools';			}			// Just in case the temp-directory was off-root, try using the default tmp directory			$writable = @is_writeable($tempdir);			if (!$writable)			{				$tempdir = JPATH_ROOT . '/tmp';				// Does the JPATH_ROOT/tmp directory exist?				if (!is_dir($tempdir))				{					JFolder::create($tempdir, 511);					JFile::write($tempdir . '/.htaccess', "order deny, allow\ndeny from all\nallow from none\n");				}				// If it exists and it is unwritable, try creating a writable admintools subdirectory				if (!is_writable($tempdir))				{					$FTPOptions = JClientHelper::getCredentials('ftp');					$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], null, $FTPOptions['user'], $FTPOptions['pass']);					$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $tempdir . '/admintools'), '/');					if (!@mkdir($tempdir . '/admintools'))					{						$ftp->mkdir($dest);					}					if (!@chmod($tempdir . '/admintools', 511))					{						$ftp->chmod($dest, 511);					}					$tempdir .= '/admintools';				}			}			// If we still have no writable directory, we'll try /tmp and the system's temp-directory			$writable = @is_writeable($tempdir);			if (!$writable)			{				if (@is_dir('/tmp') && @is_writable('/tmp'))				{					$tempdir = '/tmp';				}				else				{					// Try to find the system temp path					$tmpfile = @tempnam("dummy", "");					$systemp = @dirname($tmpfile);					@unlink($tmpfile);					if (!empty($systemp))					{						if (@is_dir($systemp) && @is_writable($systemp))						{							$tempdir = $systemp;						}					}				}			}			$data .= <<<ENDDATA	,	'kickstart.ftp.ssl' => '0',	'kickstart.ftp.passive' => '1',	'kickstart.ftp.host' => '$ftp_host',	'kickstart.ftp.port' => '$ftp_port',	'kickstart.ftp.user' => '$ftp_user',	'kickstart.ftp.pass' => '$ftp_pass',	'kickstart.ftp.dir' => '$ftp_root',	'kickstart.ftp.tempdir' => '$tempdir'ENDDATA;		}		$data .= ');';		// Remove the old file, if it's there...		$configpath = JPATH_COMPONENT_ADMINISTRATOR . '/restoration.php';		if (JFile::exists($configpath))		{			JFile::delete($configpath);		}		// Write new file. First try with JFile.		$result = JFile::write($configpath, $data);		// In case JFile used FTP but direct access could help		if (!$result)		{			if (function_exists('file_put_contents'))			{				$result = @file_put_contents($configpath, $data);				if ($result !== false)				{					$result = true;				}			}			else			{				$fp = @fopen($configpath, 'wt');				if ($fp !== false)				{					$result = @fwrite($fp, $data);					if ($result !== false)					{						$result = true;					}					@fclose($fp);				}			}		}		return $result;	}	/**	 * Runs the schema update SQL files, the PHP update script and updates the	 * manifest cache and #__extensions entry. Essentially, it is identical to	 * JInstallerFile::install() without the file copy.	 *	 * @return  boolean True on success	 *	 * @since   2.5.4	 */	public function finaliseUpgrade()	{		$installer = JInstaller::getInstance();		$installer->setPath('source', JPATH_ROOT);		$installer->setPath('extension_root', JPATH_ROOT);		if (!$installer->setupInstall())		{			$installer->abort(JText::_('JLIB_INSTALLER_ABORT_DETECTMANIFEST'));			return false;		}		$installer->extension = JTable::getInstance('extension');		$installer->extension->load(700);		$installer->setAdapter($installer->extension->type);		$manifest = $installer->getManifest();		$manifestPath = JPath::clean($installer->getPath('manifest'));		$element = preg_replace('/\.xml/', '', basename($manifestPath));		// Run the script file		$scriptElement = $manifest->scriptfile;		$manifestScript = (string) $manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = JPATH_ROOT . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// load the file				include_once $manifestScriptFile;			}			$classname = 'JoomlaInstallerScript';			if (class_exists($classname))			{				$manifestClass = new $classname($this);			}		}		ob_start();		ob_implicit_flush(false);		if ($manifestClass && method_exists($manifestClass, 'preflight'))		{			if ($manifestClass->preflight('update', $this) === false)			{				$installer->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		$msg = ob_get_contents(); // create msg object; first use here		ob_end_clean();		// Get a database connector object		$db = JFactory::getDbo();		// Check to see if a file extension by the same name is already installed		// If it is, then update the table because if the files aren't there		// we can assume that it was (badly) uninstalled		// If it isn't, add an entry to extensions		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('file'))			->where($db->quoteName('element') . ' = ' . $db->quote('joomla'));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$installer->abort(				JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', JText::_('JLIB_INSTALLER_UPDATE'), $db->stderr(true))			);			return false;		}		$id = $db->loadResult();		$row = JTable::getInstance('extension');		if ($id)		{			// Load the entry and update the manifest_cache			$row->load($id);			// Update name			$row->set('name', 'files_joomla');			// Update manifest			$row->manifest_cache = $installer->generateManifestCache();			if (!$row->store())			{				// Install failed, roll back changes				$installer->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', JText::_('JLIB_INSTALLER_UPDATE'), $db->stderr(true))				);				return false;			}		}		else		{			// Add an entry to the extension table with a whole heap of defaults			$row->set('name', 'files_joomla');			$row->set('type', 'file');			$row->set('element', 'joomla');			// There is no folder for files so leave it blank			$row->set('folder', '');			$row->set('enabled', 1);			$row->set('protected', 0);			$row->set('access', 0);			$row->set('client_id', 0);			$row->set('params', '');			$row->set('system_data', '');			$row->set('manifest_cache', $installer->generateManifestCache());			if (!$row->store())			{				// Install failed, roll back changes				$installer->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_ROLLBACK', $db->stderr(true)));				return false;			}			// Set the insert id			$row->set('extension_id', $db->insertid());			// Since we have created a module item, we add it to the installation step stack			// so that if we have to rollback the changes we can undo it.			$installer->pushStep(array('type' => 'extension', 'extension_id' => $row->extension_id));		}		/*		 * Let's run the queries for the file		 */		if ($manifest->update)		{			$result = $installer->parseSchemaUpdates($manifest->update->schemas, $row->extension_id);			if ($result === false)			{				// Install failed, rollback changes				$installer->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_UPDATE_SQL_ERROR', $db->stderr(true)));				return false;			}		}		// Start Joomla! 1.6		ob_start();		ob_implicit_flush(false);		if ($manifestClass && method_exists($manifestClass, 'update'))		{			if ($manifestClass->update($installer) === false)			{				// Install failed, rollback changes				$installer->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		$msg .= ob_get_contents(); // append messages		ob_end_clean();		// Lastly, we will copy the manifest file to its appropriate place.		$manifest = array();		$manifest['src'] = $installer->getPath('manifest');		$manifest['dest'] = JPATH_MANIFESTS . '/files/' . basename($installer->getPath('manifest'));		if (!$installer->copyFiles(array($manifest), true))		{			// Install failed, rollback changes			$installer->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_COPY_SETUP'));			return false;		}		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(			array('element' => $element, 'type' => 'file', 'client_id' => '0', 'folder' => '')		);		if ($uid)		{			$update->delete($uid);		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($manifestClass && method_exists($manifestClass, 'postflight'))		{			$manifestClass->postflight('update', $this);		}		$msg .= ob_get_contents(); // append messages		ob_end_clean();		if ($msg != '')		{			$installer->set('extension_message', $msg);		}		return true;	}	/**	 * Removes the extracted package file	 *	 * @return  void	 *	 * @since   2.5.4	 */	public function cleanUp()	{		// Remove the update package		$config = JFactory::getConfig();		$tempdir = $config->get('tmp_path');		$file = JFactory::getApplication()->getUserState('com_joomlaupdate.file', null);		$target = $tempdir . '/' . $file;		if (!@unlink($target))		{			JFile::delete($target);		}		// Remove the restoration.php file		$target = JPATH_COMPONENT_ADMINISTRATOR . '/restoration.php';		if (!@unlink($target))		{			JFile::delete($target);		}		// Remove joomla.xml from the site's root		$target = JPATH_ROOT . '/joomla.xml';		if (!@unlink($target))		{			JFile::delete($target);		}		// Unset the update filename from the session		JFactory::getApplication()->setUserState('com_joomlaupdate.file', null);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a template style. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesViewTemplate extends JViewLegacy{	protected $files;	protected $state;	protected $template;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->files	= $this->get('Files');		$this->state	= $this->get('State');		$this->template	= $this->get('Template');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		$user  = JFactory::getUser();		$canDo = TemplatesHelper::getActions();		JToolbarHelper::title(JText::_('COM_TEMPLATES_MANAGER_VIEW_TEMPLATE'), 'thememanager');		JToolbarHelper::cancel('template.cancel', 'JTOOLBAR_CLOSE');		// Add a copy button		if ($user->authorise('core.create', 'com_templates'))		{			$title = JText::_('JLIB_HTML_BATCH_COPY');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-copy\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'upload');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_TEMPLATE_MANAGER_TEMPLATES_EDIT');	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$doc = JFactory::getDocument();// Add Stylesheets$doc->addStyleSheet('../media/jui/css/bootstrap.css');$doc->addStyleSheet('../media/jui/css/bootstrap-extended.css');$doc->addStyleSheet('../media/jui/css/bootstrap-responsive.css');$doc->addStyleSheet('template/css/template.css');if ($this->direction === 'rtl'){	$doc->addStyleSheet('../media/jui/css/bootstrap-rtl.css');}// Load the JavaScript behaviorsJHtml::_('bootstrap.framework');JHtml::_('formbehavior.chosen', 'select');JHtml::_('behavior.framework', true);JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');JHtml::_('script', 'installation/template/js/installation.js', true, false, false, false);// Load the JavaScript translated messagesJText::script('INSTL_PROCESS_BUSY');JText::script('INSTL_FTP_SETTINGS_CORRECT');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>">	<head>		<jdoc:include type="head" />		<!--[if lt IE 9]>			<script src="../media/jui/js/html5.js"></script>		<![endif]-->		<script type="text/javascript">			window.addEvent('domready', function()			{				window.Install = new Installation('container-installation', '<?php echo JURI::current(); ?>');			});		</script>	</head>	<body>		<!-- Header -->		<div class="header">			<img src="<?php echo $this->baseurl ?>/template/images/joomla.png" alt="Joomla" />			<hr />			<h5>				<?php				$joomla = '<a href="http://www.joomla.org">Joomla!<sup>&#174;</sup></a>';				$license = '<a data-toggle="modal" href="#licenseModal">' . JText::_('INSTL_GNU_GPL_LICENSE') . '</a>';				echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla, $license);				?>			</h5>		</div>		<!-- Container -->		<div class="container">			<jdoc:include type="message" />			<div id="container-installation">				<jdoc:include type="component" />			</div>			<hr />		</div>		<div id="licenseModal" class="modal fade">			<div class="modal-header">				<button type="button" class="close" data-dismiss="modal"></button>				<h3><?php echo JText::_('INSTL_GNU_GPL_LICENSE'); ?></h3>			</div>			<div class="modal-body">				<iframe src="gpl.html" class="thumbnail span6 license" height="250" marginwidth="25" scrolling="auto"></iframe>			</div>		</div>		<script>			function initElements()			{				(function($){					$('.hasTooltip').tooltip()					// Chosen select boxes					$("select").chosen({						disable_search_threshold : 10,						allow_single_deselect : true					});					// Turn radios into btn-group				    $('.radio.btn-group label').addClass('btn');				    $(".btn-group label:not(.active)").click(function()					{				        var label = $(this);				        var input = $('#' + label.attr('for'));				        if (!input.prop('checked'))						{				            label.closest('.btn-group').find("label").removeClass('active btn-success btn-danger btn-primary');				            if(input.val()== '')							{				                    label.addClass('active btn-primary');				             } else if(input.val()==0 || input.val()=='remove')							{				                    label.addClass('active btn-danger');				             } else {				            label.addClass('active btn-success');				             }				            input.prop('checked', true);				        }				    });				    $(".btn-group input[checked=checked]").each(function()					{						if ($(this).val()== '')						{				           $("label[for=" + $(this).attr('id') + "]").addClass('active btn-primary');				        } else if($(this).val()==0 || $(this).val()=='remove')						{				           $("label[for=" + $(this).attr('id') + "]").addClass('active btn-danger');				        } else {				            $("label[for=" + $(this).attr('id') + "]").addClass('active btn-success');				        }				    });				})(jQuery);			}			initElements();		</script>	</body></html>
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;// Register dependent classes.define('FINDER_PATH_INDEXER', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer');JLoader::register('FinderIndexerHelper', FINDER_PATH_INDEXER . '/helper.php');JLoader::register('FinderIndexerQuery', FINDER_PATH_INDEXER . '/query.php');JLoader::register('FinderIndexerResult', FINDER_PATH_INDEXER . '/result.php');JLoader::register('FinderIndexerStemmer', FINDER_PATH_INDEXER . '/stemmer.php');/** * Search model class for the Finder package. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderModelSearch extends JModelList{	/**	 * Context string for the model type	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'com_finder.search';	/**	 * The query object is an instance of FinderIndexerQuery which contains and	 * models the entire search query including the text input; static and	 * dynamic taxonomy filters; date filters; etc.	 *	 * @var    FinderIndexerQuery	 * @since  2.5	 */	protected $query;	/**	 * An array of all excluded terms ids.	 *	 * @var    array	 * @since  2.5	 */	protected $excludedTerms = array();	/**	 * An array of all included terms ids.	 *	 * @var    array	 * @since  2.5	 */	protected $includedTerms = array();	/**	 * An array of all required terms ids.	 *	 * @var    array	 * @since  2.5	 */	protected $requiredTerms = array();	/**	 * Method to get the results of the query.	 *	 * @return  array  An array of FinderIndexerResult objects.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function getResults()	{		// Check if the search query is valid.		if (empty($this->query->search))		{			return null;		}		// Check if we should return results.		if (empty($this->includedTerms) && (empty($this->query->filters) || !$this->query->empty))		{			return null;		}		// Get the store id.		$store = $this->getStoreId('getResults');		// Use the cached data if possible.		if ($this->retrieve($store))		{			return $this->retrieve($store);		}		// Get the row data.		$items = $this->getResultsData();		// Check the data.		if (empty($items))		{			return null;		}		// Create the query to get the search results.		$db = $this->getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('link_id') . ', ' . $db->quoteName('object'))			->from($db->quoteName('#__finder_links'))			->where($db->quoteName('link_id') . ' IN (' . implode(',', array_keys($items)) . ')');		// Load the results from the database.		$db->setQuery($query);		$rows = $db->loadObjectList('link_id');		// Set up our results container.		$results = $items;		// Convert the rows to result objects.		foreach ($rows as $rk => $row)		{			// Build the result object.			$result = unserialize($row->object);			$result->weight = $results[$rk];			$result->link_id = $rk;			// Add the result back to the stack.			$results[$rk] = $result;		}		// Switch to a non-associative array.		$results = array_values($results);		// Push the results into cache.		$this->store($store, $results);		// Return the results.		return $this->retrieve($store);	}	/**	 * Method to get the total number of results.	 *	 * @return  integer  The total number of results.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function getTotal()	{		// Check if the search query is valid.		if (empty($this->query->search))		{			return null;		}		// Check if we should return results.		if (empty($this->includedTerms) && (empty($this->query->filters) || !$this->query->empty))		{			return null;		}		// Get the store id.		$store = $this->getStoreId('getTotal');		// Use the cached data if possible.		if ($this->retrieve($store))		{			return $this->retrieve($store);		}		// Get the results total.		$total = $this->getResultsTotal();		// Push the total into cache.		$this->store($store, $total);		// Return the total.		return $this->retrieve($store);	}	/**	 * Method to get the query object.	 *	 * @return  FinderIndexerQuery  A query object.	 *	 * @since   2.5	 */	public function getQuery()	{		// Return the query object.		return $this->query;	}	/**	 * Method to build a database query to load the list data.	 *	 * @return  JDatabaseQuery  A database query.	 *	 * @since   2.5	 */	protected function getListQuery()	{		// Get the store id.		$store = $this->getStoreId('getListQuery');		// Use the cached data if possible.		if ($this->retrieve($store, false))		{			return clone($this->retrieve($store, false));		}		// Set variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('l.link_id')			->from($db->quoteName('#__finder_links') . ' AS l')			->where('l.access IN (' . $groups . ')')			->where('l.state = 1');		// Get the null date and the current date, minus seconds.		$nullDate = $db->quote($db->getNullDate());		$nowDate = $db->quote(substr_replace(JFactory::getDate()->toSQL(), '00', -2));		// Add the publish up and publish down filters.		$query->where('(l.publish_start_date = ' . $nullDate . ' OR l.publish_end_date <= ' . $nowDate . ')')			->where('(l.publish_end_date = ' . $nullDate . ' OR l.publish_end_date >= ' . $nowDate . ')');		/*		 * Add the taxonomy filters to the query. We have to join the taxonomy		 * map table for each group so that we can use AND clauses across		 * groups. Within each group there can be an array of values that will		 * use OR clauses.		 */		if (!empty($this->query->filters))		{			// Convert the associative array to a numerically indexed array.			$groups = array_values($this->query->filters);			// Iterate through each taxonomy group and add the join and where.			for ($i = 0, $c = count($groups); $i < $c; $i++)			{				// We use the offset because each join needs a unique alias.				$query->join('INNER', $db->quoteName('#__finder_taxonomy_map') . ' AS t' . $i . ' ON t' . $i . '.link_id = l.link_id')					->where('t' . $i . '.node_id IN (' . implode(',', $groups[$i]) . ')');			}		}		// Add the start date filter to the query.		if (!empty($this->query->date1))		{			// Escape the date.			$date1 = $db->quote($this->query->date1);			// Add the appropriate WHERE condition.			if ($this->query->when1 == 'before')			{				$query->where($db->quoteName('l.start_date') . ' <= ' . $date1);			}			elseif ($this->query->when1 == 'after')			{				$query->where($db->quoteName('l.start_date') . ' >= ' . $date1);			}			else			{				$query->where($db->quoteName('l.start_date') . ' = ' . $date1);			}		}		// Add the end date filter to the query.		if (!empty($this->query->date2))		{			// Escape the date.			$date2 = $db->quote($this->query->date2);			// Add the appropriate WHERE condition.			if ($this->query->when2 == 'before')			{				$query->where($db->quoteName('l.start_date') . ' <= ' . $date2);			}			elseif ($this->query->when2 == 'after')			{				$query->where($db->quoteName('l.start_date') . ' >= ' . $date2);			}			else			{				$query->where($db->quoteName('l.start_date') . ' = ' . $date2);			}		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('l.language IN (' . $db->quote(JFactory::getLanguage()->getTag()) . ', ' . $db->quote('*') . ')');		}		// Push the data into cache.		$this->store($store, $query, false);		// Return a copy of the query object.		return clone($this->retrieve($store, false));	}	/**	 * Method to get the total number of results for the search query.	 *	 * @return  integer  The results total.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getResultsTotal()	{		// Get the store id.		$store = $this->getStoreId('getResultsTotal', false);		// Use the cached data if possible.		if ($this->retrieve($store))		{			return $this->retrieve($store);		}		// Get the base query and add the ordering information.		$base = $this->getListQuery();		$base->select('0 AS ordering');		// Get the maximum number of results.		$limit = (int) $this->getState('match.limit');		/*		 * If there are no optional or required search terms in the query,		 * we can get the result total in one relatively simple database query.		 */		if (empty($this->includedTerms))		{			// Adjust the query to join on the appropriate mapping table.			$query = clone($base);			$query->clear('select')				->select('COUNT(DISTINCT l.link_id)');			// Get the total from the database.			$this->_db->setQuery($query);			$total = $this->_db->loadResult();			// Push the total into cache.			$this->store($store, min($total, $limit));			// Return the total.			return $this->retrieve($store);		}		/*		 * If there are optional or required search terms in the query, the		 * process of getting the result total is more complicated.		 */		$start = 0;		$more = false;		$items = array();		$sorted = array();		$maps = array();		$excluded = $this->getExcludedLinkIds();		/*		 * Iterate through the included search terms and group them by mapping		 * table suffix. This ensures that we never have to do more than 16		 * queries to get a batch. This may seem like a lot but it is rarely		 * anywhere near 16 because of the improved mapping algorithm.		 */		foreach ($this->includedTerms as $token => $ids)		{			// Get the mapping table suffix.			$suffix = JString::substr(md5(JString::substr($token, 0, 1)), 0, 1);			// Initialize the mapping group.			if (!array_key_exists($suffix, $maps))			{				$maps[$suffix] = array();			}			// Add the terms to the mapping group.			$maps[$suffix] = array_merge($maps[$suffix], $ids);		}		/*		 * When the query contains search terms we need to find and process the		 * result total iteratively using a do-while loop.		 */		do		{			// Create a container for the fetched results.			$results = array();			$more = false;			/*			 * Iterate through the mapping groups and load the total from each			 * mapping table.			 */			foreach ($maps as $suffix => $ids)			{				// Create a storage key for this set.				$setId = $this->getStoreId('getResultsTotal:' . serialize(array_values($ids)) . ':' . $start . ':' . $limit);				// Use the cached data if possible.				if ($this->retrieve($setId))				{					$temp = $this->retrieve($setId);				}				// Load the data from the database.				else				{					// Adjust the query to join on the appropriate mapping table.					$query = clone($base);					$query->join('INNER', '#__finder_links_terms' . $suffix . ' AS m ON m.link_id = l.link_id')						->where('m.term_id IN (' . implode(',', $ids) . ')');					// Load the results from the database.					$this->_db->setQuery($query, $start, $limit);					$temp = $this->_db->loadObjectList();					// Set the more flag to true if any of the sets equal the limit.					$more = (count($temp) === $limit) ? true : false;					// We loaded the data unkeyed but we need it to be keyed for later.					$junk = $temp;					$temp = array();					// Convert to an associative array.					for ($i = 0, $c = count($junk); $i < $c; $i++)					{						$temp[$junk[$i]->link_id] = $junk[$i];					}					// Store this set in cache.					$this->store($setId, $temp);				}				// Merge the results.				$results = array_merge($results, $temp);			}			// Check if there are any excluded terms to deal with.			if (count($excluded))			{				// Remove any results that match excluded terms.				for ($i = 0, $c = count($results); $i < $c; $i++)				{					if (in_array($results[$i]->link_id, $excluded))					{						unset($results[$i]);					}				}				// Reset the array keys.				$results = array_values($results);			}			// Iterate through the set to extract the unique items.			for ($i = 0, $c = count($results); $i < $c; $i++)			{				if (!isset($sorted[$results[$i]->link_id]))				{					$sorted[$results[$i]->link_id] = $results[$i]->ordering;				}			}			/*			 * If the query contains just optional search terms and we have			 * enough items for the page, we can stop here.			 */			if (empty($this->requiredTerms))			{				// If we need more items and they're available, make another pass.				if ($more && count($sorted) < $limit)				{					// Increment the batch starting point and continue.					$start += $limit;					continue;				}				// Push the total into cache.				$this->store($store, min(count($sorted), $limit));				// Return the total.				return $this->retrieve($store);			}			/*			 * The query contains required search terms so we have to iterate			 * over the items and remove any items that do not match all of the			 * required search terms. This is one of the most expensive steps			 * because a required token could theoretically eliminate all of			 * current terms which means we would have to loop through all of			 * the possibilities.			 */			foreach ($this->requiredTerms as $token => $required)			{				// Create a storage key for this set.				$setId = $this->getStoreId('getResultsTotal:required:' . serialize(array_values($required)) . ':' . $start . ':' . $limit);				// Use the cached data if possible.				if ($this->retrieve($setId))				{					$reqTemp = $this->retrieve($setId);				}					// Check if the token was matched.				elseif (empty($required))				{					return null;				}					// Load the data from the database.				else				{					// Setup containers in case we have to make multiple passes.					$reqMore = false;					$reqStart = 0;					$reqTemp = array();					do					{						// Get the map table suffix.						$suffix = JString::substr(md5(JString::substr($token, 0, 1)), 0, 1);						// Adjust the query to join on the appropriate mapping table.						$query = clone($base);						$query->join('INNER', '#__finder_links_terms' . $suffix . ' AS m ON m.link_id = l.link_id')							->where('m.term_id IN (' . implode(',', $required) . ')');						// Load the results from the database.						$this->_db->setQuery($query, $reqStart, $limit);						$temp = $this->_db->loadObjectList('link_id');						// Set the required token more flag to true if the set equal the limit.						$reqMore = (count($temp) === $limit) ? true : false;						// Merge the matching set for this token.						$reqTemp = $reqTemp + $temp;						// Increment the term offset.						$reqStart += $limit;					}					while ($reqMore == true);					// Store this set in cache.					$this->store($setId, $reqTemp);				}				// Remove any items that do not match the required term.				$sorted = array_intersect_key($sorted, $reqTemp);			}			// If we need more items and they're available, make another pass.			if ($more && count($sorted) < $limit)			{				// Increment the batch starting point.				$start += $limit;				// Merge the found items.				$items = $items + $sorted;				continue;			}			// Otherwise, end the loop.			{				// Merge the found items.				$items = $items + $sorted;				$more = false;			}			// End do-while loop.		}		while ($more === true);		// Set the total.		$total = count($items);		$total = min($total, $limit);		// Push the total into cache.		$this->store($store, $total);		// Return the total.		return $this->retrieve($store);	}	/**	 * Method to get the results for the search query.	 *	 * @return  array  An array of result data objects.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getResultsData()	{		// Get the store id.		$store = $this->getStoreId('getResultsData', false);		// Use the cached data if possible.		if ($this->retrieve($store))		{			return $this->retrieve($store);		}		// Get the result ordering and direction.		$ordering = $this->getState('list.ordering', 'l.start_date');		$direction = $this->getState('list.direction', 'DESC');		// Get the base query and add the ordering information.		$base = $this->getListQuery();		$base->select($this->_db->escape($ordering) . ' AS ordering');		$base->order($this->_db->escape($ordering) . ' ' . $this->_db->escape($direction));		/*		 * If there are no optional or required search terms in the query, we		 * can get the results in one relatively simple database query.		 */		if (empty($this->includedTerms))		{			// Get the results from the database.			$this->_db->setQuery($base, (int) $this->getState('list.start'), (int) $this->getState('list.limit'));			$return = $this->_db->loadObjectList('link_id');			// Get a new store id because this data is page specific.			$store = $this->getStoreId('getResultsData', true);			// Push the results into cache.			$this->store($store, $return);			// Return the results.			return $this->retrieve($store);		}		/*		 * If there are optional or required search terms in the query, the		 * process of getting the results is more complicated.		 */		$start = 0;		$limit = (int) $this->getState('match.limit');		$items = array();		$sorted = array();		$maps = array();		$excluded = $this->getExcludedLinkIds();		/*		 * Iterate through the included search terms and group them by mapping		 * table suffix. This ensures that we never have to do more than 16		 * queries to get a batch. This may seem like a lot but it is rarely		 * anywhere near 16 because of the improved mapping algorithm.		 */		foreach ($this->includedTerms as $token => $ids)		{			// Get the mapping table suffix.			$suffix = JString::substr(md5(JString::substr($token, 0, 1)), 0, 1);			// Initialize the mapping group.			if (!array_key_exists($suffix, $maps))			{				$maps[$suffix] = array();			}			// Add the terms to the mapping group.			$maps[$suffix] = array_merge($maps[$suffix], $ids);		}		/*		 * When the query contains search terms we need to find and process the		 * results iteratively using a do-while loop.		 */		do		{			// Create a container for the fetched results.			$results = array();			$more = false;			/*			 * Iterate through the mapping groups and load the results from each			 * mapping table.			 */			foreach ($maps as $suffix => $ids)			{				// Create a storage key for this set.				$setId = $this->getStoreId('getResultsData:' . serialize(array_values($ids)) . ':' . $start . ':' . $limit);				// Use the cached data if possible.				if ($this->retrieve($setId))				{					$temp = $this->retrieve($setId);				}				// Load the data from the database.				else				{					// Adjust the query to join on the appropriate mapping table.					$query = clone($base);					$query->join('INNER', $this->_db->quoteName('#__finder_links_terms' . $suffix) . ' AS m ON m.link_id = l.link_id')						->where('m.term_id IN (' . implode(',', $ids) . ')');					// Load the results from the database.					$this->_db->setQuery($query, $start, $limit);					$temp = $this->_db->loadObjectList('link_id');					// Store this set in cache.					$this->store($setId, $temp);					// The data is keyed by link_id to ease caching, we don't need it till later.					$temp = array_values($temp);				}				// Set the more flag to true if any of the sets equal the limit.				$more = (count($temp) === $limit) ? true : false;				// Merge the results.				$results = array_merge($results, $temp);			}			// Check if there are any excluded terms to deal with.			if (count($excluded))			{				// Remove any results that match excluded terms.				for ($i = 0, $c = count($results); $i < $c; $i++)				{					if (in_array($results[$i]->link_id, $excluded))					{						unset($results[$i]);					}				}				// Reset the array keys.				$results = array_values($results);			}			/*			 * If we are ordering by relevance we have to add up the relevance			 * scores that are contained in the ordering field.			 */			if ($ordering === 'm.weight')			{				// Iterate through the set to extract the unique items.				for ($i = 0, $c = count($results); $i < $c; $i++)				{					// Add the total weights for all included search terms.					if (isset($sorted[$results[$i]->link_id]))					{						$sorted[$results[$i]->link_id] += (float) $results[$i]->ordering;					}					else					{						$sorted[$results[$i]->link_id] = (float) $results[$i]->ordering;					}				}			}			/*			 * If we are ordering by start date we have to add convert the			 * dates to unix timestamps.			 */			elseif ($ordering === 'l.start_date')			{				// Iterate through the set to extract the unique items.				for ($i = 0, $c = count($results); $i < $c; $i++)				{					if (!isset($sorted[$results[$i]->link_id]))					{						$sorted[$results[$i]->link_id] = strtotime($results[$i]->ordering);					}				}			}			/*			 * If we are not ordering by relevance or date, we just have to add			 * the unique items to the set.			 */			else			{				// Iterate through the set to extract the unique items.				for ($i = 0, $c = count($results); $i < $c; $i++)				{					if (!isset($sorted[$results[$i]->link_id]))					{						$sorted[$results[$i]->link_id] = $results[$i]->ordering;					}				}			}			// Sort the results.			natcasesort($items);			if ($direction === 'DESC')			{				$items = array_reverse($items, true);			}			/*			 * If the query contains just optional search terms and we have			 * enough items for the page, we can stop here.			 */			if (empty($this->requiredTerms))			{				// If we need more items and they're available, make another pass.				if ($more && count($sorted) < ($this->getState('list.start') + $this->getState('list.limit')))				{					// Increment the batch starting point and continue.					$start += $limit;					continue;				}				// Push the results into cache.				$this->store($store, $sorted);				// Return the requested set.				return array_slice($this->retrieve($store), (int) $this->getState('list.start'), (int) $this->getState('list.limit'), true);			}			/*			 * The query contains required search terms so we have to iterate			 * over the items and remove any items that do not match all of the			 * required search terms. This is one of the most expensive steps			 * because a required token could theoretically eliminate all of			 * current terms which means we would have to loop through all of			 * the possibilities.			 */			foreach ($this->requiredTerms as $token => $required)			{				// Create a storage key for this set.				$setId = $this->getStoreId('getResultsData:required:' . serialize(array_values($required)) . ':' . $start . ':' . $limit);				// Use the cached data if possible.				if ($this->retrieve($setId))				{					$reqTemp = $this->retrieve($setId);				}				// Check if the token was matched.				elseif (empty($required))				{					return null;				}				// Load the data from the database.				else				{					// Setup containers in case we have to make multiple passes.					$reqMore = false;					$reqStart = 0;					$reqTemp = array();					do					{						// Get the map table suffix.						$suffix = JString::substr(md5(JString::substr($token, 0, 1)), 0, 1);						// Adjust the query to join on the appropriate mapping table.						$query = clone($base);						$query->join('INNER', $this->_db->quoteName('#__finder_links_terms' . $suffix) . ' AS m ON m.link_id = l.link_id')							->where('m.term_id IN (' . implode(',', $required) . ')');						// Load the results from the database.						$this->_db->setQuery($query, $reqStart, $limit);						$temp = $this->_db->loadObjectList('link_id');						// Set the required token more flag to true if the set equal the limit.						$reqMore = (count($temp) === $limit) ? true : false;						// Merge the matching set for this token.						$reqTemp = $reqTemp + $temp;						// Increment the term offset.						$reqStart += $limit;					}					while ($reqMore == true);					// Store this set in cache.					$this->store($setId, $reqTemp);				}				// Remove any items that do not match the required term.				$sorted = array_intersect_key($sorted, $reqTemp);			}			// If we need more items and they're available, make another pass.			if ($more && count($sorted) < ($this->getState('list.start') + $this->getState('list.limit')))			{				// Increment the batch starting point.				$start += $limit;				// Merge the found items.				$items = array_merge($items, $sorted);				continue;			}			// Otherwise, end the loop.			else			{				// Set the found items.				$items = $sorted;				$more = false;			}		// End do-while loop.		}		while ($more === true);		// Push the results into cache.		$this->store($store, $items);		// Return the requested set.		return array_slice($this->retrieve($store), (int) $this->getState('list.start'), (int) $this->getState('list.limit'), true);	}	/**	 * Method to get an array of link ids that match excluded terms.	 *	 * @return  array  An array of links ids.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getExcludedLinkIds()	{		// Check if the search query has excluded terms.		if (empty($this->excludedTerms))		{			return array();		}		// Get the store id.		$store = $this->getStoreId('getExcludedLinkIds', false);		// Use the cached data if possible.		if ($this->retrieve($store))		{			return $this->retrieve($store);		}		// Initialize containers.		$links = array();		$maps = array();		/*		 * Iterate through the excluded search terms and group them by mapping		 * table suffix. This ensures that we never have to do more than 16		 * queries to get a batch. This may seem like a lot but it is rarely		 * anywhere near 16 because of the improved mapping algorithm.		 */		foreach ($this->excludedTerms as $token => $id)		{			// Get the mapping table suffix.			$suffix = JString::substr(md5(JString::substr($token, 0, 1)), 0, 1);			// Initialize the mapping group.			if (!array_key_exists($suffix, $maps))			{				$maps[$suffix] = array();			}			// Add the terms to the mapping group.			$maps[$suffix][] = (int) $id;		}		/*		 * Iterate through the mapping groups and load the excluded links ids		 * from each mapping table.		 */		foreach ($maps as $suffix => $ids)		{			// Create a new query object.			$db = $this->getDbo();			$query = $db->getQuery(true);			// Create the query to get the links ids.			$query->select('link_id')				->from($db->quoteName('#__finder_links_terms' . $suffix))				->where($db->quoteName('term_id') . ' IN (' . implode(',', $ids) . ')')				->group($db->quoteName('link_id'));			// Load the link ids from the database.			$db->setQuery($query);			$temp = $db->loadColumn();			// Merge the link ids.			$links = array_merge($links, $temp);		}		// Sanitize the link ids.		$links = array_unique($links);		JArrayHelper::toInteger($links);		// Push the link ids into cache.		$this->store($store, $links);		return $links;	}	/**	 * Method to get a subquery for filtering link ids mapped to specific	 * terms ids.	 *	 * @param   array  $terms  An array of search term ids.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getTermsQuery($terms)	{		// Create the SQL query to get the matching link ids.		//@TODO: Impact of removing SQL_NO_CACHE?		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('SQL_NO_CACHE link_id')			->from('#__finder_links_terms')			->where('term_id IN (' . implode(',', $terms) . ')');		return $query;	}	/**	 * Method to get a store id based on model the configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string   $id    An identifier string to generate the store id. [optional]	 * @param   boolean  $page  True to store the data paged, false to store all data. [optional]	 *	 * @return  string  A store id.	 *	 * @since   2.5	 */	protected function getStoreId($id = '', $page = true)	{		// Get the query object.		$query = $this->getQuery();		// Add the search query state.		$id .= ':' . $query->input;		$id .= ':' . $query->language;		$id .= ':' . $query->filter;		$id .= ':' . serialize($query->filters);		$id .= ':' . $query->date1;		$id .= ':' . $query->date2;		$id .= ':' . $query->when1;		$id .= ':' . $query->when2;		if ($page)		{			// Add the list state for page specific data.			$id .= ':' . $this->getState('list.start');			$id .= ':' . $this->getState('list.limit');			$id .= ':' . $this->getState('list.ordering');			$id .= ':' . $this->getState('list.direction');		}		return parent::getStoreId($id);	}	/**	 * Method to auto-populate the model state.  Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field. [optional]	 * @param   string  $direction  An optional direction. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState($ordering = null, $direction = null)	{		// Get the configuration options.		$app = JFactory::getApplication();		$input = $app->input;		$params = $app->getParams();		$user = JFactory::getUser();		$filter = JFilterInput::getInstance();		$this->setState('filter.language', $app->getLanguageFilter());		// Setup the stemmer.		if ($params->get('stem', 1) && $params->get('stemmer', 'porter_en'))		{			FinderIndexerHelper::$stemmer = FinderIndexerStemmer::getInstance($params->get('stemmer', 'porter_en'));		}		$request = $input->request;		$options = array();		// Get the query string.		$options['input'] = !is_null($request->get('q')) ? $request->get('q', '', 'string') : $params->get('q');		$options['input'] = $filter->clean($options['input'], 'string');		// Get the empty query setting.		$options['empty'] = $params->get('allow_empty_query', 0);		// Get the query language.		$options['language'] = !is_null($request->get('l')) ? $request->get('l', '', 'cmd') : $params->get('l');		$options['language'] = $filter->clean($options['language'], 'cmd');		// Get the static taxonomy filters.		$options['filter'] = !is_null($request->get('f')) ? $request->get('f', '', 'int') : $params->get('f');		$options['filter'] = $filter->clean($options['filter'], 'int');		// Get the dynamic taxonomy filters.		$options['filters'] = !is_null($request->get('t', '', 'array')) ? $request->get('t', '', 'array') : $params->get('t');		$options['filters'] = $filter->clean($options['filters'], 'array');		JArrayHelper::toInteger($options['filters']);		// Get the start date and start date modifier filters.		$options['date1'] = !is_null($request->get('d1')) ? $request->get('d1', '', 'string') : $params->get('d1');		$options['date1'] = $filter->clean($options['date1'], 'string');		$options['when1'] = !is_null($request->get('w1')) ? $request->get('w1', '', 'string') : $params->get('w1');		$options['when1'] = $filter->clean($options['when1'], 'string');		// Get the end date and end date modifier filters.		$options['date2'] = !is_null($request->get('d2')) ? $request->get('d2', '', 'string') : $params->get('d2');		$options['date2'] = $filter->clean($options['date2'], 'string');		$options['when2'] = !is_null($request->get('w2')) ? $request->get('w2', '', 'string') : $params->get('w2');		$options['when2'] = $filter->clean($options['when2'], 'string');		// Load the query object.		$this->query = new FinderIndexerQuery($options);		// Load the query token data.		$this->excludedTerms = $this->query->getExcludedTermIds();		$this->includedTerms = $this->query->getIncludedTermIds();		$this->requiredTerms = $this->query->getRequiredTermIds();		// Load the list state.		$this->setState('list.start', $input->get('limitstart', 0, 'uint'));		$this->setState('list.limit', $input->get('limit', $app->getCfg('list_limit', 20), 'uint'));		// Load the sort ordering.		$order = $params->get('sort_order', 'relevance');		switch ($order)		{			case 'date':				$this->setState('list.ordering', 'l.start_date');				break;			case 'price':				$this->setState('list.ordering', 'l.list_price');				break;			case ($order == 'relevance' && !empty($this->includedTerms)):				$this->setState('list.ordering', 'm.weight');				break;			default:				$this->setState('list.ordering', 'l.link_id');				break;		}		// Load the sort direction.		$dirn = $params->get('sort_direction', 'desc');		switch ($dirn)		{			case 'asc':				$this->setState('list.direction', 'ASC');				break;			default:			case 'desc':				$this->setState('list.direction', 'DESC');				break;		}		// Set the match limit.		$this->setState('match.limit', 1000);		// Load the parameters.		$this->setState('params', $params);		// Load the user state.		$this->setState('user.id', (int) $user->get('id'));		$this->setState('user.groups', $user->getAuthorisedViewLevels());	}	/**	 * Method to retrieve data from cache.	 *	 * @param   string   $id          The cache store id.	 * @param   boolean  $persistent  Flag to enable the use of external cache. [optional]	 *	 * @return  mixed  The cached data if found, null otherwise.	 *	 * @since   2.5	 */	protected function retrieve($id, $persistent = true)	{		$data = null;		// Use the internal cache if possible.		if (isset($this->cache[$id]))		{			return $this->cache[$id];		}		// Use the external cache if data is persistent.		if ($persistent)		{			$data = JFactory::getCache($this->context, 'output')->get($id);			$data = $data ? unserialize($data) : null;		}		// Store the data in internal cache.		if ($data)		{			$this->cache[$id] = $data;		}		return $data;	}	/**	 * Method to store data in cache.	 *	 * @param   string   $id          The cache store id.	 * @param   mixed    $data        The data to cache.	 * @param   boolean  $persistent  Flag to enable the use of external cache. [optional]	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 */	protected function store($id, $data, $persistent = true)	{		// Store the data in internal cache.		$this->cache[$id] = $data;		// Store the data in external cache if data is persistent.		if ($persistent)		{			return JFactory::getCache($this->context, 'output')->store(serialize($data), $id);		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// No direct access.defined('_JEXEC') or die;JLoader::import('joomla.filesystem.file');// Check modules$showRightColumn	= ($this->countModules('position-3') or $this->countModules('position-6') or $this->countModules('position-8'));$showbottom			= ($this->countModules('position-9') or $this->countModules('position-10') or $this->countModules('position-11'));$showleft			= ($this->countModules('position-4') or $this->countModules('position-7') or $this->countModules('position-5'));if ($showRightColumn == 0 and $showleft == 0){	$showno = 0;}JHtml::_('behavior.framework', true);// Get params$color				= $this->params->get('templatecolor');$logo				= $this->params->get('logo');$navposition		= $this->params->get('navposition');$headerImage		= $this->params->get('headerImage');$app				= JFactory::getApplication();$doc				= JFactory::getDocument();$templateparams		= $app->getTemplate(true)->params;$config = JFactory::getConfig();$bootstrap = explode(',', $templateparams->get('bootstrap'));$jinput = JFactory::getApplication()->input;$option = $jinput->get('option', '', 'cmd');if (in_array($option, $bootstrap)){	// Load optional rtl Bootstrap css and Bootstrap bugfixes	JHtml::_('bootstrap.loadCss', true, $this->direction);}$doc->addStyleSheet(JURI::base() . 'templates/system/css/system.css');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/position.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/layout.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/print.css', $type = 'text/css', $media = 'print');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/general.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/' . htmlspecialchars($color) . '.css', $type = 'text/css', $media = 'screen,projection');if ($this->direction == 'rtl'){	$doc->addStyleSheet($this->baseurl . '/templates/' . $this->template . '/css/template_rtl.css');	if (file_exists(JPATH_SITE . '/templates/' . $this->template . '/css/' . $color . '_rtl.css'))	{		$doc->addStyleSheet($this->baseurl . '/templates/' . $this->template . '/css/' . htmlspecialchars($color) . '_rtl.css');	}}JHtml::_('bootstrap.framework');$doc->addScript($this->baseurl . '/templates/' . $this->template . '/javascript/md_stylechanger.js', 'text/javascript');$doc->addScript($this->baseurl . '/templates/' . $this->template . '/javascript/hide.js', 'text/javascript');$doc->addScript($this->baseurl . '/templates/' . $this->template . '/javascript/respond.src.js', 'text/javascript');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" >	<head>		<?php require __DIR__ . '/jsstrings.php';?>		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=3.0, user-scalable=yes"/>		<meta name="HandheldFriendly" content="true" />		<meta name="apple-mobile-web-app-capable" content="YES" />		<jdoc:include type="head" />		<!--[if IE 7]>		<link href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/ie7only.css" rel="stylesheet" type="text/css" />		<![endif]-->	</head>	<body id="shadow">		<?php if ($color == 'image'):?>			<style type="text/css">				.logoheader {					background:url('<?php echo $this->baseurl . '/' . htmlspecialchars($headerImage); ?>') no-repeat right;				}				body {					background: <?php echo $templateparams->get('backgroundcolor'); ?>;				}			</style>		<?php endif; ?>		<div id="all">			<div id="back">				<header id="header">					<div class="logoheader">						<h1 id="logo">						<?php if ($logo) : ?>							<img src="<?php echo $this->baseurl ?>/<?php echo htmlspecialchars($logo); ?>"  alt="<?php echo htmlspecialchars($templateparams->get('sitetitle'));?>" />						<?php endif;?>						<?php if (!$logo AND $templateparams->get('sitetitle')) : ?>							<?php echo htmlspecialchars($templateparams->get('sitetitle'));?>						<?php elseif (!$logo AND $config->get('sitename')) : ?>							<?php echo htmlspecialchars($config->get('sitename'));?>						<?php endif; ?>						<span class="header1">						<?php echo htmlspecialchars($templateparams->get('sitedescription'));?>						</span></h1>					</div><!-- end logoheader -->					<ul class="skiplinks">						<li><a href="#main" class="u2"><?php echo JText::_('TPL_BEEZ3_SKIP_TO_CONTENT'); ?></a></li>						<li><a href="#nav" class="u2"><?php echo JText::_('TPL_BEEZ3_JUMP_TO_NAV'); ?></a></li>						<?php if ($showRightColumn) : ?>							<li><a href="#right" class="u2"><?php echo JText::_('TPL_BEEZ3_JUMP_TO_INFO'); ?></a></li>						<?php endif; ?>					</ul>					<h2 class="unseen"><?php echo JText::_('TPL_BEEZ3_NAV_VIEW_SEARCH'); ?></h2>					<h3 class="unseen"><?php echo JText::_('TPL_BEEZ3_NAVIGATION'); ?></h3>					<jdoc:include type="modules" name="position-1" />					<div id="line">						<div id="fontsize"></div>						<h3 class="unseen"><?php echo JText::_('TPL_BEEZ3_SEARCH'); ?></h3>						<jdoc:include type="modules" name="position-0" />					</div> <!-- end line -->				</header><!-- end header -->				<div id="<?php echo $showRightColumn ? 'contentarea2' : 'contentarea'; ?>">					<div id="breadcrumbs">						<jdoc:include type="modules" name="position-2" />					</div>					<?php if ($navposition == 'left' and $showleft) : ?>						<nav class="left1 <?php if ($showRightColumn == null){ echo 'leftbigger';} ?>" id="nav">							<jdoc:include type="modules" name="position-7" style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-4" style="beezHide" headerLevel="3" state="0 " />							<jdoc:include type="modules" name="position-5" style="beezTabs" headerLevel="2"  id="3" />						</nav><!-- end navi -->					<?php endif; ?>					<div id="<?php echo $showRightColumn ? 'wrapper' : 'wrapper2'; ?>" <?php if (isset($showno)){echo 'class="shownocolumns"';}?>>						<div id="main">							<?php if ($this->countModules('position-12')) : ?>								<div id="top">									<jdoc:include type="modules" name="position-12" />								</div>							<?php endif; ?>							<jdoc:include type="message" />							<jdoc:include type="component" />						</div><!-- end main -->					</div><!-- end wrapper -->					<?php if ($showRightColumn) : ?>						<div id="close">							<a href="#" onclick="auf('right')">							<span id="bild">								<?php echo JText::_('TPL_BEEZ3_TEXTRIGHTCLOSE'); ?>							</span>							</a>						</div>						<aside id="right">							<h2 class="unseen"><?php echo JText::_('TPL_BEEZ3_ADDITIONAL_INFORMATION'); ?></h2>							<jdoc:include type="modules" name="position-6" style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-8" style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-3" style="beezDivision" headerLevel="3" />						</aside><!-- end right -->					<?php endif; ?>					<?php if ($navposition == 'center' and $showleft) : ?>						<nav class="left <?php if ($showRightColumn == null) { echo 'leftbigger'; } ?>" id="nav" >							<jdoc:include type="modules" name="position-7"  style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-4" style="beezHide" headerLevel="3" state="0 " />							<jdoc:include type="modules" name="position-5" style="beezTabs" headerLevel="2"  id="3" />						</nav><!-- end navi -->					<?php endif; ?>					<div class="wrap"></div>				</div> <!-- end contentarea -->			</div><!-- back -->		</div><!-- all -->		<div id="footer-outer">			<?php if ($showbottom) : ?>				<div id="footer-inner" >					<div id="bottom">						<div class="box box1"> <jdoc:include type="modules" name="position-9" style="beezDivision" headerlevel="3" /></div>						<div class="box box2"> <jdoc:include type="modules" name="position-10" style="beezDivision" headerlevel="3" /></div>						<div class="box box3"> <jdoc:include type="modules" name="position-11" style="beezDivision" headerlevel="3" /></div>					</div>				</div>			<?php endif; ?>			<div id="footer-sub">				<footer id="footer">					<jdoc:include type="modules" name="position-14" />				</footer><!-- end footer -->			</div>		</div>		<jdoc:include type="modules" name="debug" />	</body></html>
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Administrator Application helper class. * Provide many supporting API functions. * * @package     Joomla.Administrator * @subpackage  Application * @since       1.5 */class JAdministratorHelper{	/**	 * Return the application option string [main component].	 *	 * @return  string  The component to access.	 *	 * @since   1.5	 */	public static function findOption()	{		$app = JFactory::getApplication();		$option = strtolower($app->input->get('option'));		$app->loadIdentity();		$user = $app->getIdentity();		if ($user->get('guest') || !$user->authorise('core.login.admin'))		{			$option = 'com_login';		}		if (empty($option))		{			$option = 'com_cpanel';		}		$app->input->set('option', $option);		return $option;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Content.pagenavigation * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Pagenavigation plugin class. * * @package     Joomla.Plugin * @subpackage  Content.pagenavigation * @since       1.5 */class PlgContentPagenavigation extends JPlugin{	/**	 * @since   1.6	 */	public function onContentBeforeDisplay($context, &$row, &$params, $page = 0)	{		$app = JFactory::getApplication();		$view = $app->input->get('view');		$print = $app->input->getBool('print');		if ($print)		{			return false;		}		if ($params->get('show_item_navigation') && ($context == 'com_content.article') && ($view == 'article'))		{			$db = JFactory::getDbo();			$user = JFactory::getUser();			$lang = JFactory::getLanguage();			$nullDate = $db->getNullDate();			$date = JFactory::getDate();			$now = $date->toSql();			$uid = $row->id;			$option = 'com_content';			$canPublish = $user->authorise('core.edit.state', $option . '.article.' . $row->id);			// The following is needed as different menu items types utilise a different param to control ordering.			// For Blogs the `orderby_sec` param is the order controlling param.			// For Table and List views it is the `orderby` param.			$params_list = $params->toArray();			if (array_key_exists('orderby_sec', $params_list))			{				$order_method = $params->get('orderby_sec', '');			}			else			{				$order_method = $params->get('orderby', '');			}			// Additional check for invalid sort ordering.			if ($order_method == 'front')			{				$order_method = '';			}			// Determine sort order.			switch ($order_method)			{				case 'date' :					$orderby = 'a.created';					break;				case 'rdate' :					$orderby = 'a.created DESC';					break;				case 'alpha' :					$orderby = 'a.title';					break;				case 'ralpha' :					$orderby = 'a.title DESC';					break;				case 'hits' :					$orderby = 'a.hits';					break;				case 'rhits' :					$orderby = 'a.hits DESC';					break;				case 'order' :					$orderby = 'a.ordering';					break;				case 'author' :					$orderby = 'a.created_by_alias, u.name';					break;				case 'rauthor' :					$orderby = 'a.created_by_alias DESC, u.name DESC';					break;				case 'front' :					$orderby = 'f.ordering';					break;				default :					$orderby = 'a.ordering';					break;			}			$xwhere = ' AND (a.state = 1 OR a.state = -1)' .				' AND (publish_up = ' . $db->quote($nullDate) . ' OR publish_up <= ' . $db->quote($now) . ')' .				' AND (publish_down = ' . $db->quote($nullDate) . ' OR publish_down >= ' . $db->quote($now) . ')';			// Array of articles in same category correctly ordered.			$query = $db->getQuery(true);			// Sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id . ' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('cc.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('cc.id');			$case_when1 .= $query->concatenate(array($c_id, 'cc.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id . ' END as catslug';			$query->select('a.id,' . $case_when . ',' . $case_when1)				->from('#__content AS a')				->join('LEFT', '#__categories AS cc ON cc.id = a.catid')				->where(					'a.catid = ' . (int) $row->catid . ' AND a.state = ' . (int) $row->state						. ($canPublish ? '' : ' AND a.access = ' . (int) $row->access) . $xwhere				);			$query->order($orderby);			if ($app->isSite() && $app->getLanguageFilter())			{				$query->where('a.language in (' . $db->quote($lang->getTag()) . ',' . $db->quote('*') . ')');			}			$db->setQuery($query);			$list = $db->loadObjectList('id');			// This check needed if incorrect Itemid is given resulting in an incorrect result.			if (!is_array($list))			{				$list = array();			}			reset($list);			// Location of current content item in array list.			$location = array_search($uid, array_keys($list));			$rows = array_values($list);			$row->prev = null;			$row->next = null;			if ($location - 1 >= 0)			{				// The previous content item cannot be in the array position -1.				$row->prev = $rows[$location - 1];			}			if (($location + 1) < count($rows))			{				// The next content item cannot be in an array position greater than the number of array postions.				$row->next = $rows[$location + 1];			}			$pnSpace = "";			if (JText::_('JGLOBAL_LT') || JText::_('JGLOBAL_GT'))			{				$pnSpace = " ";			}			if ($row->prev)			{				$row->prev = JRoute::_(ContentHelperRoute::getArticleRoute($row->prev->slug, $row->prev->catslug));			}			else			{				$row->prev = '';			}			if ($row->next)			{				$row->next = JRoute::_(ContentHelperRoute::getArticleRoute($row->next->slug, $row->next->catslug));			}			else			{				$row->next = '';			}			// Output.			if ($row->prev || $row->next)			{				// Get the path for the layout file				$path = JPluginHelper::getLayoutPath('content', 'pagenavigation');				// Render the pagenav				ob_start();				include $path;				$row->pagination = ob_get_clean();				$row->paginationposition = $this->params->get('position', 1);				// This will default to the 1.5 and 1.6-1.7 behavior.				$row->paginationrelative = $this->params->get('relative', 0);			}		}		return;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a link button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonLink extends JToolbarButton{	/**	 * Button type	 * @var    string	 */	protected $_name = 'Link';	/**	 * Fetch the HTML for the button	 *	 * @param   string  $type  Unused string.	 * @param   string  $name  Name to be used as apart of the id	 * @param   string  $text  Button text	 * @param   string  $url   The link url	 *	 * @return  string  HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Link', $name = 'back', $text = '', $url = null)	{		$text = JText::_($text);		$class = $this->fetchIconClass($name);		$doTask = $this->_getCommand($url);		$html = "<button class=\"btn btn-small\" onclick=\"location.href='$doTask';\">\n";		$html .= "<span class=\"$class\">\n";		$html .= "</span>\n";		$html .= "$text\n";		$html .= "</button>\n";		return $html;	}	/**	 * Get the button CSS Id	 *	 * @param   string  $type  The button type.	 * @param   string  $name  The name of the button.	 *	 * @return  string  Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type = 'Link', $name = '')	{		return $this->_parent->getName() . '-' . $name;	}	/**	 * Get the JavaScript command for the button	 *	 * @param   object  $url  Button definition	 *	 * @return  string  JavaScript command string	 *	 * @since   3.0	 */	protected function _getCommand($url)	{		return $url;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_redirect&view=links'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC'); ?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_OLD_URL', 'a.old_url', $listDirn, $listOrder); ?>					</th>					<th width="30%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_NEW_URL', 'a.new_url', $listDirn, $listOrder); ?>					</th>					<th width="30%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_REFERRER', 'a.referer', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_CREATED_DATE', 'a.created_date', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="7">						<?php echo $this->pagination->getListFooter(); ?>						<p class="footer-tip">							<?php if ($this->enabled) : ?>								<span class="enabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_ENABLED'); ?></span>							<?php else : ?>								<span class="disabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_DISABLED'); ?></span>							<?php endif; ?>						</p>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create',     'com_redirect');				$canEdit   = $user->authorise('core.edit',       'com_redirect');				$canChange = $user->authorise('core.edit.state', 'com_redirect');				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td>						<?php echo JHtml::_('redirect.published', $item->published, $i); ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_redirect&task=link.edit&id='.$item->id);?>" title="<?php echo $this->escape($item->old_url); ?>">								<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?></a>						<?php else : ?>								<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?>						<?php endif; ?>					</td>					<td class="small">						<?php echo $this->escape($item->new_url); ?>					</td>					<td class="small">						<?php echo $this->escape($item->referer); ?>					</td>					<td class="small">						<?php echo JHtml::_('date', $item->created_date, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php if (!empty($this->items)) : ?>			<?php echo $this->loadTemplate('addform'); ?>		<?php endif; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */abstract class JHtmlModules{	/**	 * Builds an array of template options	 *	 * @param   integer  $clientId  The client id	 * @param   string   $state     The state of the template	 *	 * @return  array	 */	public static function templates($clientId = 0, $state = '')	{		$options   = array();		$templates = ModulesHelper::getTemplates($clientId, $state);		foreach ($templates as $template)		{			$options[]	= JHtml::_('select.option', $template->element, $template->name);		}		return $options;	}	/**	 * Builds an array of template type options	 *	 * @return  array	 */	public static function types()	{		$options = array();		$options[] = JHtml::_('select.option', 'user', 'COM_MODULES_OPTION_POSITION_USER_DEFINED');		$options[] = JHtml::_('select.option', 'template', 'COM_MODULES_OPTION_POSITION_TEMPLATE_DEFINED');		return $options;	}	/**	 * Builds an array of template state options	 *	 * @return  array	 */	public static function templateStates()	{		$options = array();		$options[] = JHtml::_('select.option', '1', 'JENABLED');		$options[] = JHtml::_('select.option', '0', 'JDISABLED');		return $options;	}	/**	 * Returns a published state on a grid	 *	 * @param   integer  $value     The state value.	 * @param   integer  $i         The row index	 * @param   boolean  $enabled   An optional setting for access control on the action.	 * @param   string   $checkbox  An optional prefix for checkboxes.	 *	 * @return  string        The Html code	 *	 * @see     JHtmlJGrid::state	 * @since   1.7.1	 */	public static function state($value, $i, $enabled = true, $checkbox = 'cb')	{		$states	= array(			1 => array(				'unpublish',				'COM_MODULES_EXTENSION_PUBLISHED_ENABLED',				'COM_MODULES_HTML_UNPUBLISH_ENABLED',				'COM_MODULES_EXTENSION_PUBLISHED_ENABLED',				true,				'publish',				'publish'			),			0 => array(				'publish',				'COM_MODULES_EXTENSION_UNPUBLISHED_ENABLED',				'COM_MODULES_HTML_PUBLISH_ENABLED',				'COM_MODULES_EXTENSION_UNPUBLISHED_ENABLED',				true,				'unpublish',				'unpublish'			),			-1 => array(				'unpublish',				'COM_MODULES_EXTENSION_PUBLISHED_DISABLED',				'COM_MODULES_HTML_UNPUBLISH_DISABLED',				'COM_MODULES_EXTENSION_PUBLISHED_DISABLED',				true,				'warning',				'warning'			),			-2 => array(				'publish',				'COM_MODULES_EXTENSION_UNPUBLISHED_DISABLED',				'COM_MODULES_HTML_PUBLISH_DISABLED',				'COM_MODULES_EXTENSION_UNPUBLISHED_DISABLED',				true,				'unpublish',				'unpublish'			),		);		return JHtml::_('jgrid.state', $states, $value, $i, 'modules.', $enabled, true, $checkbox);	}	/**	 * Display a batch widget for the module position selector.	 *	 * @param   integer  $clientId  The client ID	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function positions($clientId)	{		// Create the copy/move options.		$options = array(			JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),			JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE'))		);		// Create the batch selector to change select the category by which to move or copy.		$lines = array(			'<label id="batch-choose-action-lbl" for="batch-choose-action">',			JText::_('COM_MODULES_BATCH_POSITION_LABEL'),			'</label>',			'<div id="batch-choose-action" class="control-group">',			'<select name="batch[position_id]" class="inputbox" id="batch-position-id">',			'<option value="">' . JText::_('JSELECT') . '</option>',			'<option value="nochange">' . JText::_('COM_MODULES_BATCH_POSITION_NOCHANGE') . '</option>',			'<option value="noposition">' . JText::_('COM_MODULES_BATCH_POSITION_NOPOSITION') . '</option>',			JHtml::_('select.options',	self::positionList($clientId)),			'</select>',			'</div>', '<div id="batch-move-copy" class="control-group radio">',			JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'),			'</div>'		);		return implode("\n", $lines);	}	/**	 * Method to get the field options.	 *	 * @param   integer  $clientId  The client ID	 *	 * @return  array  The field option objects.	 *	 * @since   2.5	 */	public static function positionList($clientId = 0)	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('DISTINCT(position) as value')			->select('position as text')			->from($db->quoteName('#__modules'))			->where($db->quoteName('client_id') . ' = ' . (int) $clientId)			->order('position');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pop the first item off the array if it's blank		if (count($options))		{			if (strlen($options[0]->text) < 1)			{				array_shift($options);			}		}		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugin model. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsModelPlugin extends JModelAdmin{	/**	 * @var		string	The help screen key for the module.	 * @since   1.6	 */	protected $helpKey = 'JHELP_EXTENSIONS_PLUGIN_MANAGER_EDIT';	/**	 * @var		string	The help screen base URL for the module.	 * @since   1.6	 */	protected $helpURL;	protected $_cache;	/**	 * @var		string	The event to trigger after saving the data.	 * @since   1.6	 */	protected $event_after_save = 'onExtensionAfterSave';	/**	 * @var		string	The event to trigger after before the data.	 * @since   1.6	 */	protected $event_before_save = 'onExtensionBeforeSave';	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item		= $this->getItem();			$folder		= $item->folder;			$element	= $item->element;		}		else		{			$folder		= JArrayHelper::getValue($data, 'folder', '', 'cmd');			$element	= JArrayHelper::getValue($data, 'element', '', 'cmd');		}		// These variables are used to add data from the plugin XML files.		$this->setState('item.folder',	$folder);		$this->setState('item.element',	$element);		// Get the form.		$form = $this->loadForm('com_plugins.plugin', 'plugin', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('enabled', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('enabled', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_plugins.edit.plugin.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_plugins.plugin', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('plugin.id');		if (!isset($this->_cache[$pk]))		{			$false	= false;			// Get a row instance.			$table = $this->getTable();			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $table->getError())			{				$this->setError($table->getError());				return $false;			}			// Convert to the JObject before adding other data.			$properties = $table->getProperties(1);			$this->_cache[$pk] = JArrayHelper::toObject($properties, 'JObject');			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($table->params);			$this->_cache[$pk]->params = $registry->toArray();			// Get the plugin XML.			$path = JPath::clean(JPATH_PLUGINS.'/'.$table->folder.'/'.$table->element.'/'.$table->element.'.xml');			if (file_exists($path))			{				$this->_cache[$pk]->xml = simplexml_load_file($path);			} else {				$this->_cache[$pk]->xml = null;			}		}		return $this->_cache[$pk];	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	*/	public function getTable($type = 'Extension', $prefix = 'JTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		// Execute the parent method.		parent::populateState();		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('extension_id');		$this->setState('plugin.id', $pk);	}	/**	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @return  mixed  True if successful.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		jimport('joomla.filesystem.path');		$folder		= $this->getState('item.folder');		$element	= $this->getState('item.element');		$lang		= JFactory::getLanguage();		$client		= JApplicationHelper::getClientInfo(0);		// Load the core and/or local language sys file(s) for the ordering field.		$db = JFactory::getDbo();		$query = 'SELECT element' .				' FROM #__extensions' .				' WHERE (type =' .$db->quote('plugin'). 'AND folder='. $db->quote($folder) . ')';		$db->setQuery($query);		$elements = $db->loadColumn();		foreach ($elements as $elementa)		{				$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_ADMINISTRATOR, null, false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_PLUGINS.'/'.$folder.'/'.$elementa, null, false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_PLUGINS.'/'.$folder.'/'.$elementa, $lang->getDefault(), false, false);		}		if (empty($folder) || empty($element))		{			$app = JFactory::getApplication();			$app->redirect(JRoute::_('index.php?option=com_plugins&view=plugins', false));		}		$formFile = JPath::clean(JPATH_PLUGINS . '/' . $folder . '/' . $element . '/' . $element . '.xml');		if (!file_exists($formFile))		{			throw new Exception(JText::sprintf('COM_PLUGINS_ERROR_FILE_NOT_FOUND', $element . '.xml'));		}		// Load the core and/or local language file(s).			$lang->load('plg_'.$folder.'_'.$element, JPATH_ADMINISTRATOR, null, false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_PLUGINS.'/'.$folder.'/'.$element, null, false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_PLUGINS.'/'.$folder.'/'.$element, $lang->getDefault(), false, false);		if (file_exists($formFile))		{			// Get the plugin form.			if (!$form->loadFile($formFile, false, '//config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Attempt to load the xml file.		if (!$xml = simplexml_load_file($formFile))		{			throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));		}		// Get the help data from the XML file if present.		$help = $xml->xpath('/extension/help');		if (!empty($help))		{			$helpKey = trim((string) $help[0]['key']);			$helpURL = trim((string) $help[0]['url']);			$this->helpKey = $helpKey ? $helpKey : $this->helpKey;			$this->helpURL = $helpURL ? $helpURL : $this->helpURL;		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object	A record object.	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'type = '. $this->_db->quote($table->type);		$condition[] = 'folder = '. $this->_db->quote($table->folder);		return $condition;	}	/**	 * Override method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		// Load the extension plugin group.		JPluginHelper::importPlugin('extension');		// Setup type		$data['type'] = 'plugin';		return parent::save($data);	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL);	}	/**	 * Custom clean cache method, plugins are cached in 2 places for different clients	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_plugins');	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Helper class for Joomla! Search components * * @package     Joomla.Libraries * @subpackage  Search * @since       3.0 */class JSearchHelper{	/**	 * Method to log search terms to the database	 *	 * @param   string  $term       The term being searched	 * @param   string  $component  The component being used for the search	 *	 * @return  void	 *	 * @since   3.0	 */	public static function logSearch($term, $component)	{		// Initialise our variables		$db = JFactory::getDbo();		$query = $db->getQuery(true);		$enable_log_searches = JComponentHelper::getParams($component)->get('enabled');		// Sanitise the term for the database		$search_term = $db->escape(trim(strtolower($term)));		if ($enable_log_searches)		{			// Query the table to determine if the term has been searched previously			$query->select($db->quoteName('hits'))				->from($db->quoteName('#__core_log_searches'))				->where($db->quoteName('search_term') . ' = ' . $db->quote($search_term));			$db->setQuery($query);			$hits = intval($db->loadResult());			// Reset the $query object			$query->clear();			// Update the table based on the results			if ($hits)			{				$query->update($db->quoteName('#__core_log_searches'))					->set('hits = (hits + 1)')					->where($db->quoteName('search_term') . ' = ' . $db->quote($search_term));			}			else			{				$query->insert($db->quoteName('#__core_log_searches'))					->columns(array($db->quoteName('search_term'), $db->quoteName('hits')))					->values($db->quote($search_term) . ', 1');			}			// Execute the update query			$db->setQuery($query);			$db->execute();		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('behavior.modal', 'a.modal');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_banners&view=tracks'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>  	<div id="filter-bar" class="btn-toolbar">  		<div class="filter-search btn-group pull-left">  			<label class="filter-hide-lbl" for="filter_begin"><?php echo JText::_('COM_BANNERS_BEGIN_LABEL'); ?></label>  			<?php echo JHtml::_('calendar', $this->state->get('filter.begin'), 'filter_begin', 'filter_begin', '%Y-%m-%d', array('size' => 10, 'onchange' => "this.form.fireEvent('submit');this.form.submit()"));?>  		</div>  		<div class="filter-search btn-group pull-left">  			<label class="filter-hide-lbl" for="filter_end"><?php echo JText::_('COM_BANNERS_END_LABEL'); ?></label>  			<?php echo JHtml::_('calendar', $this->state->get('filter.end'), 'filter_end', 'filter_end', '%Y-%m-%d', array('size' => 10, 'onchange' => "this.form.fireEvent('submit');this.form.submit()"));?>  		</div>  		<div class="btn-group pull-right hidden-phone">  			<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>  			<?php echo $this->pagination->getLimitBox(); ?>  		</div>  		<div class="btn-group pull-right hidden-phone">  			<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>  			<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">  				<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>  				<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>  				<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>  			</select>  		</div>  		<div class="btn-group pull-right">  			<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>  			<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">  				<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>  				<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>  			</select>  		</div>  	</div>  	<div class="clearfix"> </div>  	<table class="table table-striped">  		<thead>  			<tr>  				<th class="title">  					<?php echo JText::_('COM_BANNERS_HEADING_NAME');?>  				</th>  				<th width="20%" class="nowrap">  					<?php echo JText::_('COM_BANNERS_HEADING_CLIENT');?>  				</th>  				<th width="10%" class="nowrap hidden-phone">  					<?php echo JText::_('COM_BANNERS_HEADING_TYPE');?>  				</th>  				<th width="10%" class="nowrap hidden-phone">  					<?php echo JText::_('COM_BANNERS_HEADING_COUNT');?>  				</th>  				<th width="10%" class="nowrap hidden-phone">  					<?php echo JText::_('JDATE');?>  				</th>  			</tr>  		</thead>  		<tfoot>  			<tr>  				<td colspan="6">  					<?php echo $this->pagination->getListFooter(); ?>  				</td>  			</tr>  		</tfoot>  		<tbody>  		<?php foreach ($this->items as $i => $item) :?>  			<tr class="row<?php echo $i % 2; ?>">  				<td>  					<?php echo $item->name;?>  					<div class="small">  						<?php echo $item->category_title;?>  					</div>  				</td>  				<td>  					<?php echo $item->client_name;?>  				</td>  				<td class="small hidden-phone">  					<?php echo $item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION') : JText::_('COM_BANNERS_CLICK');?>  				</td>  				<td class="hidden-phone">  					<?php echo $item->count;?>  				</td>  				<td class="hidden-phone">  					<?php echo JHtml::_('date', $item->track_date, JText::_('DATE_FORMAT_LC4').' H:i');?>  				</td>  			</tr>  		<?php endforeach; ?>  		</tbody>  	</table>    	<input type="hidden" name="task" value="" />  	<input type="hidden" name="boxchecked" value="0" />  	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';JHtml::_('bootstrap.tooltip');$item = $displayData->item;$items = $displayData->get('items');$params = $displayData->params;$extension = $displayData->get('extension');$className = substr($extension, 4);// This will work for the core components but not necessarily for other components// that may have different pluralisation rules.if (substr($className, -1) == 's'){	$className = rtrim($className, 's');}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a user group. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewGroup extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state	= $this->get('State');		$this->item		= $this->get('Item');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = UsersHelper::getActions();		JToolbarHelper::title(JText::_($isNew ? 'COM_USERS_VIEW_NEW_GROUP_TITLE' : 'COM_USERS_VIEW_EDIT_GROUP_TITLE'), 'groups-add');		if ($canDo->get('core.edit') || $canDo->get('core.create'))		{			JToolbarHelper::apply('group.apply');			JToolbarHelper::save('group.save');		}		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('group.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('group.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('group.cancel');		}		else		{			JToolbarHelper::cancel('group.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_GROUPS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tree based class to render the admin menu * * @package     Joomla.Administrator * @subpackage  mod_menu * @since       1.5 */class JAdminCssMenu extends JObject{	/**	 * CSS string to add to document head	 * @var string	 */	protected $_css = null;	/**	 * Root node	 *	 * @var    object	 */	protected $_root = null;	/**	 * Current working node	 *	 * @var    object	 */	protected $_current = null;	/**	 * Constructor	 */	public function __construct()	{		$this->_root = new JMenuNode('ROOT');		$this->_current = & $this->_root;	}	/**	 * Method to add a child	 *	 * @param   JMenuNode  &$node       The node to process	 * @param   boolean    $setCurrent  True to set as current working node	 *	 * @return  void	 */	public function addChild(JMenuNode &$node, $setCurrent = false)	{		$this->_current->addChild($node);		if ($setCurrent)		{			$this->_current = &$node;		}	}	/**	 * Method to get the parent	 *	 * @return  void	 */	public function getParent()	{		$this->_current = &$this->_current->getParent();	}	/**	 * Method to get the parent	 *	 * @return  void	 */	public function reset()	{		$this->_current = &$this->_root;	}	public function addSeparator()	{		$this->addChild(new JMenuNode(null, null, 'separator', false));	}	public function renderMenu($id = 'menu', $class = '')	{		$depth = 1;		if (!empty($id))		{			$id = 'id="' . $id . '"';		}		if (!empty($class))		{			$class = 'class="' . $class . '"';		}		/*		 * Recurse through children if they exist		 */		while ($this->_current->hasChildren())		{			echo "<ul ".$id." ".$class.">\n";			foreach ($this->_current->getChildren() as $child)			{				$this->_current = & $child;				$this->renderLevel($depth++);			}			echo "</ul>\n";		}		if ($this->_css)		{			// Add style to document head			$doc = JFactory::getDocument();			$doc->addStyleDeclaration($this->_css);		}	}	public function renderLevel($depth)	{		/*		 * Build the CSS class suffix		 */		$class = '';		if ($this->_current->hasChildren())		{			$class = ' class="dropdown"';		}		if ($this->_current->class == 'separator')		{			$class = ' class="divider"';		}		if ($this->_current->hasChildren() && $this->_current->class)		{			$class = ' class="dropdown-submenu"';		}		if ($this->_current->class == 'disabled')		{			$class = ' class="disabled"';		}		/*		 * Print the item		 */		echo "<li".$class.">";		/*		 * Print a link if it exists		 */		$linkClass = array();		$dataToggle = '';		$dropdownCaret = '';		if ($this->_current->hasChildren())		{			$linkClass[] = 'dropdown-toggle';			$dataToggle = ' data-toggle="dropdown"';			if (!$this->_current->getParent()->hasParent())			{				$dropdownCaret = ' <span class="caret"></span>';			}		}		if ($this->_current->link != null && $this->_current->getParent()->title != 'ROOT')		{			$iconClass = $this->getIconClass($this->_current->class);			if (!empty($iconClass))			{				$linkClass[] = $iconClass;			}		}		// Implode out $linkClass for rendering		$linkClass = ' class="' . implode(' ', $linkClass) . '"';		if ($this->_current->link != null && $this->_current->target != null)		{			echo "<a" . $linkClass . " " . $dataToggle . " href=\"" . $this->_current->link . "\" target=\"" . $this->_current->target . "\" >" . $this->_current->title . $dropdownCaret . "</a>";		}		elseif ($this->_current->link != null && $this->_current->target == null)		{			echo "<a" . $linkClass . " " . $dataToggle . " href=\"" . $this->_current->link . "\">" . $this->_current->title . $dropdownCaret . "</a>";		}		elseif ($this->_current->title != null)		{			echo "<a" . $linkClass . " " . $dataToggle . ">" . $this->_current->title . $dropdownCaret . "</a>";		}		else		{			echo "<span></span>";		}		/*		 * Recurse through children if they exist		 */		while ($this->_current->hasChildren())		{			if ($this->_current->class)			{				$id = '';				if (!empty($this->_current->id))				{					$id = ' id="menu-'.strtolower($this->_current->id).'"';				}				echo '<ul'.$id.' class="dropdown-menu menu-component">'."\n";			} else {				echo '<ul class="dropdown-menu">'."\n";			}			foreach ($this->_current->getChildren() as $child)			{				$this->_current = & $child;				$this->renderLevel($depth++);			}			echo "</ul>\n";		}		echo "</li>\n";	}	/**	 * Method to get the CSS class name for an icon identifier or create one if	 * a custom image path is passed as the identifier	 *	 * @access	public	 * @param   string	$identifier	Icon identification string	 * @return  string	CSS class name	 * @since   1.5	 */	public function getIconClass($identifier)	{		static $classes;		// Initialise the known classes array if it does not exist		if (!is_array($classes))		{			$classes = array();		}		/*		 * If we don't already know about the class... build it and mark it		 * known so we don't have to build it again		 */		if (!isset($classes[$identifier]))		{			if (substr($identifier, 0, 6) == 'class:')			{				// We were passed a class name				$class = substr($identifier, 6);				$classes[$identifier] = "menu-$class";			} else {				if ($identifier == null)				{					return null;				}				// Build the CSS class for the icon				$class = preg_replace('#\.[^.]*$#', '', basename($identifier));				$class = preg_replace('#\.\.[^A-Za-z0-9\.\_\- ]#', '', $class);				$this->_css  .= "\n.menu-$class {\n" .						"\tbackground: url($identifier) no-repeat;\n" .						"}\n";				$classes[$identifier] = "menu-$class";			}		}		return $classes[$identifier];	}}/** * A Node for JAdminCssMenu * * @package     Joomla.Administrator * @subpackage  mod_menu * @since       1.5 * @see         JAdminCssMenu */class JMenuNode extends JObject{	/**	 * Node Title	 */	public $title = null;	/**	 * Node Id	 */	public $id = null;	/**	 * Node Link	 */	public $link = null;	/**	 * Link Target	 */	public $target = null;	/**	 * CSS Class for node	 */	public $class = null;	/**	 * Active Node?	 */	public $active = false;	/**	 * Parent node	 * @var    object	 */	protected $_parent = null;	/**	 * Array of Children	 *	 * @var    array	 */	protected $_children = array();	public function __construct($title, $link = null, $class = null, $active = false, $target = null, $titleicon = null)	{		$this->title	= $titleicon ? $title.$titleicon : $title;		$this->link		= JFilterOutput::ampReplace($link);		$this->class	= $class;		$this->active	= $active;		$this->id = null;		if (!empty($link) && $link !== '#')		{			$uri = new JURI($link);			$params = $uri->getQuery(true);			$parts = array();			foreach ($params as $name => $value)			{				$parts[] = str_replace(array('.', '_'), '-', $value);			}			$this->id = implode('-', $parts);		}		$this->target	= $target;	}	/**	 * Add child to this node	 *	 * If the child already has a parent, the link is unset	 *	 * @param   JMenuNode  &$child  The child to be added	 *	 * @return  void	 */	public function addChild(JMenuNode &$child)	{		$child->setParent($this);	}	/**	 * Set the parent of a this node	 *	 * If the node already has a parent, the link is unset	 *	 * @param   JMenuNode   &$parent  The JMenuNode for parent to be set or null	 *	 * @return  void	 */	public function setParent(JMenuNode &$parent = null)	{		$hash = spl_object_hash($this);		if (!is_null($this->_parent))		{			unset($this->_parent->children[$hash]);		}		if (!is_null($parent))		{			$parent->_children[$hash] = & $this;		}		$this->_parent = & $parent;	}	/**	 * Get the children of this node	 *	 * @return  array    The children	 */	public function &getChildren()	{		return $this->_children;	}	/**	 * Get the parent of this node	 *	 * @return  mixed   JMenuNode object with the parent or null for no parent	 */	public function &getParent()	{		return $this->_parent;	}	/**	 * Test if this node has children	 *	 * @return   boolean  True if there are children	 */	public function hasChildren()	{		return (bool) count($this->_children);	}	/**	 * Test if this node has a parent	 *	 * @return  boolean  True if there is a parent	 */	public function hasParent()	{		return $this->getParent() != null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Category Controller * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesControllerCategory extends JControllerForm{	/**	 * The extension for which the categories apply.	 *	 * @var    string	 * @since  1.6	 */	protected $extension;	/**	 * Constructor.	 *	 * @param  array  $config  An optional associative array of configuration settings.	 *	 * @since  1.6	 * @see    JController	 */	public function __construct($config = array())	{		parent::__construct($config);		// Guess the JText message prefix. Defaults to the option.		if (empty($this->extension))		{			$this->extension = $this->input->get('extension', 'com_content');		}	}	/**	 * Method to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		return ($user->authorise('core.create', $this->extension) || count($user->getAuthorisedCategories($this->extension, 'core.create')));	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'parent_id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$user = JFactory::getUser();		$userId = $user->get('id');		// Check general edit permission first.		if ($user->authorise('core.edit', $this->extension))		{			return true;		}		// Check specific edit permission.		if ($user->authorise('core.edit', $this->extension . '.category.' . $recordId))		{			return true;		}		// Fallback on edit.own.		// First test if the permission is available.		if ($user->authorise('core.edit.own', $this->extension . '.category.' . $recordId) || $user->authorise('core.edit.own', $this->extension))		{			// Now test the owner is the user.			$ownerId = (int) isset($data['created_user_id']) ? $data['created_user_id'] : 0;			if (empty($ownerId) && $recordId)			{				// Need to do a lookup from the model.				$record = $this->getModel()->getItem($recordId);				if (empty($record))				{					return false;				}				$ownerId = $record->created_user_id;			}			// If the owner matches 'me' then do the test.			if ($ownerId == $userId)			{				return true;			}		}		return false;	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   1.6	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Category');		// Preset the redirect		$this->setRedirect('index.php?option=com_categories&view=categories&extension=' . $this->extension);		return parent::batch($model);	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $urlVar    The name of the URL variable for the id.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = 'id')	{		$append = parent::getRedirectToItemAppend($recordId);		$append .= '&extension=' . $this->extension;		return $append;	}	/**	 * Gets the URL arguments to append to a list redirect.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToListAppend()	{		$append = parent::getRedirectToListAppend();		$append .= '&extension=' . $this->extension;		return $append;	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		$task = $this->getTask();		$item = $model->getItem();		if (isset($item->params) && is_array($item->params))		{			$registry = new JRegistry;			$registry->loadArray($item->params);			$item->params = (string) $registry;		}		if (isset($item->metadata) && is_array($item->metadata))		{			$registry = new JRegistry;			$registry->loadArray($item->metadata);			$item->metadata = (string) $registry;		}		$id = $item->id;		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'banner.cancel' || document.formvalidator.isValid(document.id('banner-form')))		{			Joomla.submitform(task, document.getElementById('banner-form'));		}	}	window.addEvent('domready', function()	{		document.id('jform_type0').addEvent('click', function(e){			document.id('image').setStyle('display', 'block');			document.id('url').setStyle('display', 'block');			document.id('custom').setStyle('display', 'none');		});		document.id('jform_type1').addEvent('click', function(e){			document.id('image').setStyle('display', 'none');			document.id('url').setStyle('display', 'block');			document.id('custom').setStyle('display', 'block');		});		if (document.id('jform_type0').checked==true)		{			document.id('jform_type0').fireEvent('click');		}		else		{			document.id('jform_type1').fireEvent('click');		}	});</script><form action="<?php echo JRoute::_('index.php?option=com_banners&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="banner-form" class="form-validate form-horizontal"><!-- Begin Banner --><div class="span10 form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('COM_BANNERS_BANNER_DETAILS', true)); ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('name'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('name'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('alias'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('alias'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('catid'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('catid'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('type'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('type'); ?>					</div>				</div>				<div id="image">						<?php foreach ($this->form->getFieldset('image') as $field) : ?>							<div class="control-group">								<div class="control-label">									<?php echo $field->label; ?>								</div>								<div class="controls">									<?php echo $field->input; ?>								</div>							</div>						<?php endforeach; ?>				</div>				<div class="control-group" id="custom">					<div class="control-label">						<?php echo $this->form->getLabel('custombannercode'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('custombannercode'); ?>					</div>				</div>				<div class="control-group" id="url">					<div class="control-label">						<?php echo $this->form->getLabel('clickurl'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('clickurl'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('description'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('description'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('id'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('id'); ?>					</div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_BANNERS_GROUP_LABEL_PUBLISHING_DETAILS', true)); ?>				<?php foreach ($this->form->getFieldset('publish') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'otherparams', JText::_('COM_BANNERS_GROUP_LABEL_BANNER_DETAILS', true)); ?>				<?php foreach ($this->form->getFieldset('otherparams') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>				<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?>	</div>	<!-- End Newsfeed -->	<!-- Begin Sidebar -->	<div class="span2">		<h4><?php echo JText::_('JDETAILS');?></h4>		<hr />		<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('name'); ?>					</div>				</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('sticky'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('sticky'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('language'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('language'); ?>				</div>			</div>		</fieldset>	</div>	<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectNewsfeed');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds&layout=modal&tmpl=component');?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select fltrt">			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>				<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />				<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>				<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>				<select name="filter_language" class="inputbox" id="filter_language">					<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>					<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>				</select>			<?php endif; ?>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist modal">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th class="title language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<th>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $this->escape($item->name); ?></a>				</th>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Plugin * @subpackage  System.sef * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! SEF Plugin * * @package     Joomla.Plugin * @subpackage  System.sef * @since       1.5 */class PlgSystemSef extends JPlugin{	/**	 * Add the canonical uri to the head	 *	 * @return  void	 *	 * @since   3.0	 */	public function onAfterRoute()	{		$app = JFactory::getApplication();		$doc = JFactory::getDocument();		if ($app->getName() != 'site' || $doc->getType() !== 'html')		{			return true;		}		$router = $app->getRouter();		$uri     = JUri::getInstance();		$domain  = $this->params->get('domain');		if ($domain === null || $domain === '')		{			$domain = $uri->toString(array('scheme', 'host', 'port'));		}		$parsed = $router->parse($uri);		$fakelink = 'index.php?' . http_build_query($parsed);		$link = $domain . JRoute::_($fakelink, false);		if ($uri !== $link)		{			$doc->addHeadLink(htmlspecialchars($link), 'canonical');		}	}	/**	 * Converting the site URL to fit to the HTTP request	 *	 * @return  void	 */	public function onAfterRender()	{		$app = JFactory::getApplication();		if ($app->getName() != 'site' || $app->getCfg('sef') == '0')		{			return true;		}		// Replace src links		$base   = JURI::base(true).'/';		$buffer = JResponse::getBody();		$regex  = '#href="index.php\?([^"]*)#m';		$buffer = preg_replace_callback($regex, array('PlgSystemSef', 'route'), $buffer);		$this->checkBuffer($buffer);		$protocols = '[a-zA-Z0-9]+:'; //To check for all unknown protocals (a protocol must contain at least one alpahnumeric fillowed by :		$regex     = '#(src|href|poster)="(?!/|' . $protocols . '|\#|\')([^"]*)"#m';		$buffer    = preg_replace($regex, "$1=\"$base\$2\"", $buffer);		$this->checkBuffer($buffer);		$regex  = '#(onclick="window.open\(\')(?!/|' . $protocols . '|\#)([^/]+[^\']*?\')#m';		$buffer = preg_replace($regex, '$1' . $base . '$2', $buffer);		$this->checkBuffer($buffer);		// ONMOUSEOVER / ONMOUSEOUT		$regex  = '#(onmouseover|onmouseout)="this.src=([\']+)(?!/|' . $protocols . '|\#|\')([^"]+)"#m';		$buffer = preg_replace($regex, '$1="this.src=$2' . $base .'$3$4"', $buffer);		$this->checkBuffer($buffer);		// Background image		$regex  = '#style\s*=\s*[\'\"](.*):\s*url\s*\([\'\"]?(?!/|' . $protocols . '|\#)([^\)\'\"]+)[\'\"]?\)#m';		$buffer = preg_replace($regex, 'style="$1: url(\'' . $base .'$2$3\')', $buffer);		$this->checkBuffer($buffer);		// OBJECT <param name="xx", value="yy"> -- fix it only inside the <param> tag		$regex  = '#(<param\s+)name\s*=\s*"(movie|src|url)"[^>]\s*value\s*=\s*"(?!/|' . $protocols . '|\#|\')([^"]*)"#m';		$buffer = preg_replace($regex, '$1name="$2" value="' . $base . '$3"', $buffer);		$this->checkBuffer($buffer);		// OBJECT <param value="xx", name="yy"> -- fix it only inside the <param> tag		$regex  = '#(<param\s+[^>]*)value\s*=\s*"(?!/|' . $protocols . '|\#|\')([^"]*)"\s*name\s*=\s*"(movie|src|url)"#m';		$buffer = preg_replace($regex, '<param value="' . $base .'$2" name="$3"', $buffer);		$this->checkBuffer($buffer);		// OBJECT data="xx" attribute -- fix it only in the object tag		$regex  = '#(<object\s+[^>]*)data\s*=\s*"(?!/|' . $protocols . '|\#|\')([^"]*)"#m';		$buffer = preg_replace($regex, '$1data="' . $base . '$2"$3', $buffer);		$this->checkBuffer($buffer);		JResponse::setBody($buffer);		return true;	}	/**	 * @param   string  $buffer	 *	 * @return  void	 */	private function checkBuffer($buffer)	{		if ($buffer === null)		{			switch (preg_last_error())			{				case PREG_BACKTRACK_LIMIT_ERROR:					$message = "PHP regular expression limit reached (pcre.backtrack_limit)";					break;				case PREG_RECURSION_LIMIT_ERROR:					$message = "PHP regular expression limit reached (pcre.recursion_limit)";					break;				case PREG_BAD_UTF8_ERROR:					$message = "Bad UTF8 passed to PCRE function";					break;				default:					$message = "Unknown PCRE error calling PCRE function";			}			throw new RuntimeException($message);		}	}	/**	 * Replaces the matched tags	 *	 * @param   array  &$matches  An array of matches (see preg_match_all)	 *	 * @return  string	 */	protected static function route(&$matches)	{		$url   = $matches[1];		$url   = str_replace('&amp;', '&', $url);		$route = JRoute::_('index.php?'.$url);		return 'href="' . $route;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Joomla Platform class for interact with Openstreetmap API. * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */class JOpenstreetmap{	/**	 * @var    JRegistry  Options for the Openstreetmap object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp      The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var   JOpenstreetmapOauth  The OAuth client.	 * @since 13.1	 */	protected $oauth;	/**	 * @var    JOpenstreetmapChangesets  Openstreetmap API object for changesets.	 * @since  13.1	 */	protected $changesets;	/**	 * @var    JOpenstreetmapElements  Openstreetmap API object for elements.	 * @since  13.1	 */	protected $elements;	/**	 * @var   JOpenstreetmapGps  Openstreetmap API object for gps.	 * @since  13.1	 */	protected $gps;	/**	 * @var    JOpenstreetmapInfo  Openstreetmap API object for info.	 * @since  13.1	 */	protected $info;	/**	 * @var    JOpenstreetmapUser  Openstreetmap API object for user.	 * @since  13.1	 */	protected $user;	/**	 * Constructor.	 *	 * @param   JOpenstreetmapOauth  $oauth    Openstreetmap oauth client.	 * @param   JRegistry            $options  Openstreetmap options object.	 * @param   JOpenstreetmapHttp   $client   The HTTP client object.	 *	 * @since   13.1	 */	public function __construct(JOpenstreetmapOauth $oauth = null, JRegistry $options = null, JHttp $client = null)	{		$this->oauth = $oauth;		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'http://api.openstreetmap.org/api/0.6/');		// $this->options->def('api.url', 'http://api06.dev.openstreetmap.org/api/0.6/');	}	/**		 * Method to get object instances	 * 	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JOpenstreetmapObject  Openstreetmap API object .	 *	 * @since   13.1	 */	public function __get($name)	{		switch ($name)		{			case 'changesets':				if ($this->changesets == null)				{					$this->changesets = new JOpenstreetmapChangesets($this->options, $this->client, $this->oauth);				}				return $this->changesets;			case 'elements':				if ($this->elements == null)				{					$this->elements = new JOpenstreetmapElements($this->options, $this->client, $this->oauth);				}				return $this->elements;			case 'gps':				if ($this->gps == null)				{					$this->gps = new JOpenstreetmapGps($this->options, $this->client, $this->oauth);				}				return $this->gps;			case 'info':				if ($this->info == null)				{					$this->info = new JOpenstreetmapInfo($this->options, $this->client, $this->oauth);				}				return $this->info;			case 'user':				if ($this->user == null)				{					$this->user = new JOpenstreetmapUser($this->options, $this->client, $this->oauth);				}				return $this->user;		}	}	/**	 * Get an option from the JOpenstreetmap instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the Openstreetmap instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JOpenstreetmap  This object for method chaining.	 *	 * @since   13.1	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeed controller class. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsControllerNewsfeed extends JControllerForm{	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('filter_category_id'), 'int');		$allow = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow = $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absence of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user = JFactory::getUser();		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return $user->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Newsfeed', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tags Model * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsModelTags extends JModelList{	/**	 * Constructor.	 *	 * @param    array    An optional associative array of configuration settings.	 * @see        JController	 * @since      3.0.3	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'published', 'a.published',				'access', 'a.access', 'access_level',				'language', 'a.language',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'created_time', 'a.created_time',				'created_user_id', 'a.created_user_id',				'lft', 'a.lft',				'rgt', 'a.rgt',				'level', 'a.level',				'path', 'a.path',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return    void	 * @since    3.1	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$context = $this->context;		$search = $this->getUserStateFromRequest($context . '.search', 'filter_search');		$this->setState('filter.search', $search);		$level = $this->getUserStateFromRequest($context . '.filter.level', 'filter_level', 0, 'int');		$this->setState('filter.level', $level);		$access = $this->getUserStateFromRequest($context . '.filter.access', 'filter_access', 0, 'int');		$this->setState('filter.access', $access);		$published = $this->getUserStateFromRequest($context . '.filter.published', 'filter_published', '');		$this->setState('filter.published', $published);		$language = $this->getUserStateFromRequest($context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_tags');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   3.1	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Method to create a query for a list of items.	 *	 * @return  string	 *	 * @since  3.1	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.note, a.published, a.access' .					', a.checked_out, a.checked_out_time, a.created_user_id' .					', a.path, a.parent_id, a.level, a.lft, a.rgt' .					', a.language'			)		);		$query->from('#__tags AS a')			->where('a.alias <> ' . $db->quote('root'));		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the users for the author.		$query->select('ua.name AS author_name')			->join('LEFT', '#__users AS ua ON ua.id = a.created_user_id')			->select('ug.title AS access_title')			->join('LEFT', '#__usergroups AS ug on ug.id = a.access');		// Filter on the level.		if ($level = $this->getState('filter.level'))		{			$query->where('a.level <= ' . (int) $level);		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'author:') === 0)			{				$search = $db->quote('%' . $db->escape(substr($search, 7), true) . '%');				$query->where('(ua.name LIKE ' . $search . ' OR ua.username LIKE ' . $search . ')');			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search . ' OR a.note LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Add the list ordering clause		$listOrdering = $this->getState('list.ordering', 'a.lft');		$listDirn = $db->escape($this->getState('list.direction', 'ASC'));		if ($listOrdering == 'a.access')		{			$query->order('a.access ' . $listDirn . ', a.lft ' . $listDirn);		}		else		{			$query->order($db->escape($listOrdering) . ' ' . $listDirn);		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method override to check-in a record or an array of record	 *	 * @param   mixed  $pks  The ID of the primary key or an array of IDs	 *	 * @return  mixed  Boolean false if there is an error, otherwise the count of records checked in.	 *	 * @since   12.2	 */	public function checkin($pks = array())	{		$pks = (array) $pks;		$table = $this->getTable();		$count = 0;		if (empty($pks))		{			$pks = array((int) $this->getState($this->getName() . '.id'));		}		// Check in all items.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				if ($table->checked_out > 0)				{					// Only attempt to check the row in if it exists.					if ($pk)					{						$user = JFactory::getUser();						// Get an instance of the row to checkin.						$table = $this->getTable();						if (!$table->load($pk))						{							$this->setError($table->getError());							return false;						}						// Check if this is the user having previously checked out the row.						if ($table->checked_out > 0 && $table->checked_out != $user->get('id') && !$user->authorise('core.admin', 'com_checkin'))						{							$this->setError(JText::_('JLIB_APPLICATION_ERROR_CHECKIN_USER_MISMATCH'));							return false;						}						// Attempt to check the row in.						if (!$table->checkin($pk))						{							$this->setError($table->getError());							return false;						}					}					$count++;				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return $count;	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   3.1	 */	public function getTable($type = 'Tag', $prefix = 'TagsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Libraries * @subpackage  Form * @since       3.1 */class JFormFieldContenttype extends JFormFieldList{	/**	 * A flexible tag list that respects access controls	 *	 * @var    string	 * @since  3.1	 */	public $type = 'Contenttype';	/**	 * Method to get the field input for a list of content types.	 *	 * @return  string  The field input.	 *	 * @since   3.1	 */	protected function getInput()	{		if (!is_array($this->value))		{			if (is_object($this->value))			{				$this->value = $this->value->tags;			}			if (is_string($this->value))			{				$this->value = explode(',', $this->value);			}		}		$input = parent::getInput();		return $input;	}	/**	 * Method to get a list of content types	 *	 * @return  array  The field option objects.	 *	 * @since   3.1	 */	protected function getOptions()	{		$options = array();		$name = (string) $this->element['name'];		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('a.type_id AS value, a.type_title AS text')			->from('#__content_types AS a')			->order('a.type_title ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return false;		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		foreach ($options as $option)		{			$option->text = mb_strtoupper(str_replace(' ', '_', $option->text), 'UTF-8');			$option->text = 'COM_TAGS_CONTENT_TYPE_' . $option->text;			$option->text = JText::_($option->text);		}		return $options;	}}
