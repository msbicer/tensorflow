<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Model Class * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */abstract class JModelDatabase extends JModelBase{	/**	 * The database driver.	 *	 * @var    JDatabaseDriver	 * @since  12.1	 */	protected $db;	/**	 * Instantiate the model.	 *	 * @param   JRegistry        $state  The model state.	 * @param   JDatabaseDriver  $db     The database adpater.	 *	 * @since   12.1	 */	public function __construct(JRegistry $state = null, JDatabaseDriver $db = null)	{		parent::__construct($state);		// Setup the model.		$this->db = isset($db) ? $db : $this->loadDb();	}	/**	 * Get the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	public function getDb()	{		return $this->db;	}	/**	 * Set the database driver.	 *	 * @param   JDatabaseDriver  $db  The database driver.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setDb(JDatabaseDriver $db)	{		$this->db = $db;	}	/**	 * Load the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	protected function loadDb()	{		return JFactory::getDbo();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Echo the toolbar.echo $toolbar;
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * XCache session storage handler * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSessionStorageXcache extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('XCache Extension is not available', 404);		}		parent::__construct($options);	}	/**	 * Read the data for a particular session identifier from the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		$sess_id = 'sess_' . $id;		// Check if id exists		if (!xcache_isset($sess_id))		{			return;		}		return (string) xcache_get($sess_id);	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id            The session identifier.	 * @param   string  $session_data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $session_data)	{		$sess_id = 'sess_' . $id;		return xcache_set($sess_id, $session_data, ini_get("session.gc_maxlifetime"));	}	/**	 * Destroy the data for a particular session identifier in the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		$sess_id = 'sess_' . $id;		if (!xcache_isset($sess_id))		{			return true;		}		return xcache_unset($sess_id);	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	static public function isSupported()	{		return (extension_loaded('xcache'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Manage View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewManage extends InstallerViewDefault{	protected $items;	protected $pagination;	protected $form;	protected $state;	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  mixed|void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		// Get data from the model		$this->state      = $this->get('State');		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_INSTALLER_MSG_MANAGE_NOEXTENSION'),				'warning'			);		}		// Include the component HTML helpers.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// Display the view		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= InstallerHelper::getActions();		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('manage.publish', 'JTOOLBAR_ENABLE', true);			JToolbarHelper::unpublish('manage.unpublish', 'JTOOLBAR_DISABLE', true);			JToolbarHelper::divider();		}		JToolbarHelper::custom('manage.refresh', 'refresh', 'refresh', 'JTOOLBAR_REFRESH_CACHE', true);		JToolbarHelper::divider();		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'manage.remove', 'JTOOLBAR_UNINSTALL');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_MANAGE');		JHtmlSidebar::setAction('index.php?option=com_installer&view=manage');		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_CLIENT_SELECT'),			'filter_client_id',			JHtml::_('select.options', array('0' => 'JSITE', '1' => 'JADMINISTRATOR'), 'value', 'text', $this->state->get('filter.client_id'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_STATE_SELECT'),			'filter_status',			JHtml::_('select.options', array('0' => 'JDISABLED', '1' => 'JENABLED', '2' => 'JPROTECTED'), 'value', 'text', $this->state->get('filter.status'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_TYPE_SELECT'),			'filter_type',			JHtml::_('select.options', InstallerHelper::getExtensionTypes(), 'value', 'text', $this->state->get('filter.type'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_FOLDER_SELECT'),			'filter_group',			JHtml::_('select.options', array_merge(InstallerHelper::getExtensionGroupes(), array('*' => JText::_('COM_INSTALLER_VALUE_FOLDER_NONAPPLICABLE'))), 'value', 'text', $this->state->get('filter.group'), true)		);		parent::addToolbar();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL database iterator. * * @package     Joomla.Platform * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       12.1 */class JDatabaseIteratorMysql extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return mysql_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return mysql_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		mysql_free_result($this->cursor);	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Complete View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewCompleteHtml extends JViewHtml{	/**	 * The JConfiguration data if present	 *	 * @var    JRegistry	 * @since  3.1	 */	protected $config;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelSetup	 * @since   3.1	 */	protected $model;	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options = $this->model->getOptions();		// Get the config string from the session.		$session = JFactory::getSession();		$this->config = $session->get('setup.config', null);		return parent::render();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Analytics embed class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleEmbedAnalytics extends JGoogleEmbed{	/**	 * Method to get the tracking code	 *	 * @return  string  The Google Analytics tracking code	 *	 * @since   12.3	 */	public function getCode()	{		return $this->getOption('code');	}	/**	 * Method to set the tracking code	 *	 * @param   string  $code  The Google Analytics tracking code	 *	 * @return  JGoogleEmbedAnalytics  The object for method chaining	 *	 * @since   12.3	 */	public function setCode($code)	{		$this->setOption('code', $code);		return $this;	}	/**	 * Checks if the javascript is set to be asynchronous	 *	 * @return  boolean  True if asynchronous	 *	 * @since   12.3	 */	public function isAsync()	{		return $this->getOption('async') === null ? true : $this->getOption('async');	}	/**	 * Load javascript asynchronously	 *	 * @return  JGoogleEmbedAnalytics  The object for method chaining	 *	 * @since   12.3	 */	public function useAsync()	{		$this->setOption('async', true);		return $this;	}	/**	 * Load javascript synchronously	 *	 * @return  JGoogleEmbedAnalytics  The object for method chaining	 *	 * @since   12.3	 */	public function useSync()	{		$this->setOption('async', false);		return $this;	}	/**	 * Add an analytics call	 *	 * @param   string  $method  The name of the function	 * @param   array   $params  The parameters for the call	 *	 * @return  array  The added call	 *	 * @since   12.3	 */	public function addCall($method, $params = array())	{		$call = array('name' => $method, 'params' => $params);		$calls = $this->listCalls();		$calls[] = $call;		$this->setOption('calls', $calls);		return $call;	}	/**	 * List the analytics calls to be executed	 *	 * @return  array  A list of calls	 *	 * @since   12.3	 */	public function listCalls()	{		return $this->getOption('calls') ? $this->getOption('calls') : array();	}	/**	 * Delete a call from the stack	 *	 * @param   int  $index  Index of call to delete (defaults to last added call)	 *	 * @return  array  The deleted call	 *	 * @since   12.3	 */	public function deleteCall($index = null)	{		$calls = $this->listCalls();		if ($index === null)		{			$index = count($calls) - 1;		}		$call = $calls[$index];		unset($calls[$index]);		$calls = array_values($calls);		$this->setOption('calls', $calls);		return $call;	}	/**	 * Create a javascript function from the call parameters	 *	 * @param   string  $method  The name of the function	 * @param   array   $params  The parameters for the call	 *	 * @return  string  The created call	 *	 * @since   12.3	 */	public function createCall($method, $params = array())	{		$params = array_values($params);		if ($this->isAsync())		{			$output = "_gaq.push(['{$method}',";			$output .= substr(json_encode($params), 1, -1);			$output .= ']);';		}		else		{			$output = "pageTracker.{$method}(";			$output .= substr(json_encode($params), 1, -1);			$output .= ');';		}		return $output;	}	/**	 * Add a custom variable to the analytics	 *	 * @param   int     $slot   The slot to store the variable in (1-5)	 * @param   string  $name   The variable name	 * @param   string  $value  The variable value	 * @param   int     $scope  The scope of the variable (1: visitor level, 2: session level, 3: page level)	 *	 * @return  array  The added call	 *	 * @since   12.3	 */	public function addCustomVar($slot, $name, $value, $scope = 3)	{		return $this->addCall('_setCustomVar', array($slot, $name, $value, $scope));	}	/**	 * Get the code to create a custom analytics variable	 *	 * @param   int     $slot   The slot to store the variable in (1-5)	 * @param   string  $name   The variable name	 * @param   string  $value  The variable value	 * @param   int     $scope  The scope of the variable (1: visitor level, 2: session level, 3: page level)	 *	 * @return  string  The created call	 *	 * @since   12.3	 */	public function createCustomVar($slot, $name, $value, $scope = 3)	{		return $this->createCall('_setCustomVar', array($slot, $name, $value, $scope));	}	/**	 * Track an analytics event	 *	 * @param   string   $category     The general event category	 * @param   string   $action       The event action	 * @param   string   $label        The event description	 * @param   string   $value        The value of the event	 * @param   boolean  $noninteract  Don't allow this event to impact bounce statistics	 *	 * @return  array  The added call	 *	 * @since   12.3	 */	public function addEvent($category, $action, $label = null, $value = null, $noninteract = false)	{		return $this->addCall('_trackEvent', array($category, $action, $label, $value, $noninteract));	}	/**	 * Get the code to track an analytics event	 *	 * @param   string   $category     The general event category	 * @param   string   $action       The event action	 * @param   string   $label        The event description	 * @param   string   $value        The value of the event	 * @param   boolean  $noninteract  Don't allow this event to impact bounce statistics	 *	 * @return  string  The created call	 *	 * @since   12.3	 */	public function createEvent($category, $action, $label = null, $value = null, $noninteract = false)	{		return $this->createCall('_trackEvent', array($category, $action, $label, $value, $noninteract));	}	/**	 * Get code to load Google Analytics javascript	 *	 * @return  string  Javascript code	 *	 * @since   12.3	 */	public function getHeader()	{		if (!$this->isAsync())		{			// Synchronous code is included only in the body			return '';		}		if (!$this->getOption('code'))		{			throw new UnexpectedValueException('A Google Analytics tracking code is required.');		}		$code = $this->getOption('code');		$output = '<script type="text/javascript">';		$output .= 'var _gaq = _gaq || [];';		$output .= "_gaq.push(['_setAccount', '{$code}']);";		foreach ($this->listCalls() as $call)		{			$output .= $this->createCall($call['name'], $call['params']);		}		$output .= '_gaq.push(["_trackPageview"]);';		$output .= '</script>';		return $output;	}	/**	 * Google Analytics only needs to be included in the header	 *	 * @return  null	 *	 * @since   12.3	 */	public function getBody()	{		if (!$this->getOption('code'))		{			throw new UnexpectedValueException('A Google Analytics tracking code is required.');		}		$prefix = $this->isSecure() ? 'https://ssl' : 'http://www';		$code = $this->getOption('code');		if ($this->isAsync())		{			$output = '<script type="text/javascript">';			$output .= '(function() {';			$output .= 'var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;';			$output .= "ga.src = '{$prefix}.google-analytics.com/ga.js';";			$output .= 'var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);';			$output .= '})();';			$output .= '</script>';		}		else		{			$output = '<script type="text/javascript">';			$output .= "document.write(unescape(\"%3Cscript src='{$prefix}.google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));";			$output .= '</script>';			$output .= '<script type="text/javascript">';			$output .= 'try{';			$output .= "var pageTracker = _gat._getTracker('{$code}');";			foreach ($this->listCalls() as $call)			{				$output .= $this->createCall($call['name'], $call['params']);			}			$output .= 'pageTracker._trackPageview();';			$output .= '} catch(err) {}</script>';		}		return $output;	}}
#!/usr/bin/php<?phpif (php_sapi_name() != "cli"){	echo "Error: phptidy has to be run on command line with CLI SAPI\n";	exit(1);}function getDirectory($path = '.', $level = 0){	$iterator  = new RecursiveDirectoryIterator($path, FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS);	$flattened = new RecursiveIteratorIterator($iterator, RecursiveIteratorIterator::SELF_FIRST);	foreach ($flattened as $path => $dir)	{		if (!$dir->isDir())		{			continue;		}		// Add an index.html if neither an index.html nor an index.php exist		if (!(file_exists($path . '/index.html') || file_exists($path . '/index.php')))		{			file_put_contents($path . '/index.html', '<!DOCTYPE html><title></title>' . "\n");		}	}}$work = $_SERVER['argv'][1];echo "Working on directory " . $work . "\n";getDirectory($_SERVER['argv'][1]);
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to str_split* Convert a string to an array* Note: requires utf8_strlen to be loaded* @param string UTF-8 encoded* @param int number to characters to split string by* @return string characters in string reverses* @see http://www.php.net/str_split* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_str_split($str, $split_len = 1) {    if ( !preg_match('/^[0-9]+$/',$split_len) || $split_len < 1 ) {        return FALSE;    }    $len = utf8_strlen($str);    if ( $len <= $split_len ) {        return array($str);    }    preg_match_all('/.{'.$split_len.'}|[^\x00]{1,'.$split_len.'}$/us', $str, $ar);    return $ar[0];}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note that there are certain parts of this layout used only when there is exactly one tag.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');$description = $this->params->get('all_tags_description');$descriptionImage = $this->params->get('all_tags_description_image');?><div class="tag-category<?php echo $this->pageclass_sfx; ?>">	<?php  if ($this->state->get('show_page_heading')) : ?>		<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif;?>	<?php if ($this->params->get('all_tags_show_description_image') && !empty($descriptionImage)):?>		<div><?php echo '<img src="' . $descriptionImage . '">';?></div>	<?php endif;?>	<?php if (!empty($description)):?>		<div><?php echo $description;?></div>	<?php endif;?>	<?php echo $this->loadTemplate('items'); ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Porter English stemmer class for the Finder indexer package. * * This class was adapted from one written by Richard Heyes. * See copyright and link information above. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerStemmerPorter_En extends FinderIndexerStemmer{	/**	 * Regex for matching a consonant.	 *	 * @var    string	 * @since  2.5	 */	private static $_regex_consonant = '(?:[bcdfghjklmnpqrstvwxz]|(?<=[aeiou])y|^y)';	/**	 * Regex for matching a vowel	 * @var    string	 * @since  2.5	 */	private static $_regex_vowel = '(?:[aeiou]|(?<![aeiou])y)';	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	public function stem($token, $lang)	{		// Check if the token is long enough to merit stemming.		if (strlen($token) <= 2)		{			return $token;		}		// Check if the language is English or All.		if ($lang !== 'en' && $lang != '*')		{			return $token;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Stem the token.			$result = $token;			$result = self::_step1ab($result);			$result = self::_step1c($result);			$result = self::_step2($result);			$result = self::_step3($result);			$result = self::_step4($result);			$result = self::_step5($result);			// Add the token to the cache.			$this->cache[$lang][$token] = $result;		}		return $this->cache[$lang][$token];	}	/**	 * Step 1	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step1ab($word)	{		// Part a		if (substr($word, -1) == 's')		{				self::_replace($word, 'sses', 'ss')			or self::_replace($word, 'ies', 'i')			or self::_replace($word, 'ss', 'ss')			or self::_replace($word, 's', '');		}		// Part b		if (substr($word, -2, 1) != 'e' or !self::_replace($word, 'eed', 'ee', 0))		{			// First rule			$v = self::$_regex_vowel;			// ing and ed			// Note use of && and OR, for precedence reasons			if (preg_match("#$v+#", substr($word, 0, -3)) && self::_replace($word, 'ing', '')				or preg_match("#$v+#", substr($word, 0, -2)) && self::_replace($word, 'ed', ''))			{				// If one of above two test successful				if (!self::_replace($word, 'at', 'ate') and !self::_replace($word, 'bl', 'ble') and !self::_replace($word, 'iz', 'ize'))				{					// Double consonant ending					if (self::_doubleConsonant($word) and substr($word, -2) != 'll' and substr($word, -2) != 'ss' and substr($word, -2) != 'zz')					{						$word = substr($word, 0, -1);					}					elseif (self::_m($word) == 1 and self::_cvc($word))					{						$word .= 'e';					}				}			}		}		return $word;	}	/**	 * Step 1c	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step1c($word)	{		$v = self::$_regex_vowel;		if (substr($word, -1) == 'y' && preg_match("#$v+#", substr($word, 0, -1)))		{			self::_replace($word, 'y', 'i');		}		return $word;	}	/**	 * Step 2	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step2($word)	{		switch (substr($word, -2, 1))		{			case 'a':					self::_replace($word, 'ational', 'ate', 0)				or self::_replace($word, 'tional', 'tion', 0);				break;			case 'c':					self::_replace($word, 'enci', 'ence', 0)				or self::_replace($word, 'anci', 'ance', 0);				break;			case 'e':				self::_replace($word, 'izer', 'ize', 0);				break;			case 'g':				self::_replace($word, 'logi', 'log', 0);				break;			case 'l':					self::_replace($word, 'entli', 'ent', 0)				or self::_replace($word, 'ousli', 'ous', 0)				or self::_replace($word, 'alli', 'al', 0)				or self::_replace($word, 'bli', 'ble', 0)				or self::_replace($word, 'eli', 'e', 0);				break;			case 'o':					self::_replace($word, 'ization', 'ize', 0)				or self::_replace($word, 'ation', 'ate', 0)				or self::_replace($word, 'ator', 'ate', 0);				break;			case 's':					self::_replace($word, 'iveness', 'ive', 0)				or self::_replace($word, 'fulness', 'ful', 0)				or self::_replace($word, 'ousness', 'ous', 0)				or self::_replace($word, 'alism', 'al', 0);				break;			case 't':					self::_replace($word, 'biliti', 'ble', 0)				or self::_replace($word, 'aliti', 'al', 0)				or self::_replace($word, 'iviti', 'ive', 0);				break;		}		return $word;	}	/**	 * Step 3	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step3($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'ical', 'ic', 0);				break;			case 's':				self::_replace($word, 'ness', '', 0);				break;			case 't':					self::_replace($word, 'icate', 'ic', 0)				or self::_replace($word, 'iciti', 'ic', 0);				break;			case 'u':				self::_replace($word, 'ful', '', 0);				break;			case 'v':				self::_replace($word, 'ative', '', 0);				break;			case 'z':				self::_replace($word, 'alize', 'al', 0);				break;		}		return $word;	}	/**	 * Step 4	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step4($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'al', '', 1);				break;			case 'c':					self::_replace($word, 'ance', '', 1)				or self::_replace($word, 'ence', '', 1);				break;			case 'e':				self::_replace($word, 'er', '', 1);				break;			case 'i':				self::_replace($word, 'ic', '', 1);				break;			case 'l':					self::_replace($word, 'able', '', 1)				or self::_replace($word, 'ible', '', 1);				break;			case 'n':					self::_replace($word, 'ant', '', 1)				or self::_replace($word, 'ement', '', 1)				or self::_replace($word, 'ment', '', 1)				or self::_replace($word, 'ent', '', 1);				break;			case 'o':				if (substr($word, -4) == 'tion' or substr($word, -4) == 'sion')				{					self::_replace($word, 'ion', '', 1);				}				else				{					self::_replace($word, 'ou', '', 1);				}				break;			case 's':				self::_replace($word, 'ism', '', 1);				break;			case 't':					self::_replace($word, 'ate', '', 1)				or self::_replace($word, 'iti', '', 1);				break;			case 'u':				self::_replace($word, 'ous', '', 1);				break;			case 'v':				self::_replace($word, 'ive', '', 1);				break;			case 'z':				self::_replace($word, 'ize', '', 1);				break;		}		return $word;	}	/**	 * Step 5	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step5($word)	{		// Part a		if (substr($word, -1) == 'e')		{			if (self::_m(substr($word, 0, -1)) > 1)			{				self::_replace($word, 'e', '');			}			elseif (self::_m(substr($word, 0, -1)) == 1)			{				if (!self::_cvc(substr($word, 0, -1)))				{					self::_replace($word, 'e', '');				}			}		}		// Part b		if (self::_m($word) > 1 and self::_doubleConsonant($word) and substr($word, -1) == 'l')		{			$word = substr($word, 0, -1);		}		return $word;	}	/**	 * Replaces the first string with the second, at the end of the string. If third	 * arg is given, then the preceding string must match that m count at least.	 *	 * @param   string   &$str   String to check	 * @param   string   $check  Ending to check for	 * @param   string   $repl   Replacement string	 * @param   integer  $m      Optional minimum number of m() to meet	 *	 * @return  boolean  Whether the $check string was at the end	 *                   of the $str string. True does not necessarily mean	 *                   that it was replaced.	 *	 * @since   2.5	 */	private static function _replace(&$str, $check, $repl, $m = null)	{		$len = 0 - strlen($check);		if (substr($str, $len) == $check)		{			$substr = substr($str, 0, $len);			if (is_null($m) or self::_m($substr) > $m)			{				$str = $substr . $repl;			}			return true;		}		return false;	}	/**	 * m() measures the number of consonant sequences in $str. if c is	 * a consonant sequence and v a vowel sequence, and <..> indicates arbitrary	 * presence,	 *	 * <c><v>       gives 0	 * <c>vc<v>     gives 1	 * <c>vcvc<v>   gives 2	 * <c>vcvcvc<v> gives 3	 *	 * @param   string  $str  The string to return the m count for	 *	 * @return  integer  The m count	 *	 * @since   2.5	 */	private static function _m($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		$str = preg_replace("#^$c+#", '', $str);		$str = preg_replace("#$v+$#", '', $str);		preg_match_all("#($v+$c+)#", $str, $matches);		return count($matches[1]);	}	/**	 * Returns true/false as to whether the given string contains two	 * of the same consonant next to each other at the end of the string.	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   2.5	 */	private static function _doubleConsonant($str)	{		$c = self::$_regex_consonant;		return preg_match("#$c{2}$#", $str, $matches) and $matches[0]{0} == $matches[0]{1};	}	/**	 * Checks for ending CVC sequence where second C is not W, X or Y	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   2.5	 */	private static function _cvc($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		return preg_match("#($c$v$c)$#", $str, $matches) and strlen($matches[1]) == 3 and $matches[1]{2} != 'w' and $matches[1]{2} != 'x' and $matches[1]{2} != 'y';	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for Tabs elements. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.2 */abstract class JHtmlTabs{	/**	 * Creates a panes and creates the JavaScript object for it.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  An array of option.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function start($group = 'tabs', $params = array())	{		self::_loadBehavior($group, $params);		return '<dl class="tabs" id="' . $group . '"><dt style="display:none;"></dt><dd style="display:none;">';	}	/**	 * Close the current pane	 *	 * @return  string  HTML to close the pane	 *	 * @since   11.1	 */	public static function end()	{		return '</dd></dl>';	}	/**	 * Begins the display of a new panel.	 *	 * @param   string  $text  Text to display.	 * @param   string  $id    Identifier of the panel.	 *	 * @return  string  HTML to start a new panel	 *	 * @since   11.1	 */	public static function panel($text, $id)	{		return '</dd><dt class="tabs ' . $id . '"><span><h3><a href="javascript:void(0);">' . $text . '</a></h3></span></dt><dd class="tabs">';	}	/**	 * Load the JavaScript behavior.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  Array of options.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function _loadBehavior($group, $params = array())	{		static $loaded = array();		if (!array_key_exists((string) $group, $loaded))		{			// Include MooTools framework			JHtml::_('behavior.framework', true);			$opt['onActive']            = (isset($params['onActive'])) ? '\\' . $params['onActive'] : null;			$opt['onBackground']        = (isset($params['onBackground'])) ? '\\' . $params['onBackground'] : null;			$opt['display']             = (isset($params['startOffset'])) ? (int) $params['startOffset'] : null;			$opt['useStorage']          = (isset($params['useCookie']) && $params['useCookie']) ? 'true' : 'false';			$opt['titleSelector']       = "dt.tabs";			$opt['descriptionSelector'] = "dd.tabs";			$options = JHtml::getJSObject($opt);			$js = '	window.addEvent(\'domready\', function(){						$$(\'dl#' . $group . '.tabs\').each(function(tabs){							new JTabs(tabs, ' . $options . ');						});					});';			$document = JFactory::getDocument();			$document->addScriptDeclaration($js);			JHtml::_('script', 'system/tabs.js', false, true);			$loaded[(string) $group] = true;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Captcha * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Joomla! Captcha base object * * @abstract * @package     Joomla.Libraries * @subpackage  Captcha * @since       2.5 */class JCaptcha extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  2.5	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  2.5	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  2.5	 */	protected $_methods = array();	/**	 * Captcha Plugin object	 *	 * @var	   JPlugin	 * @since  2.5	 */	private $_captcha;	/**	 * Editor Plugin name	 *	 * @var string	 * @since  2.5	 */	private $_name;	/**	 * Array of instances of this class.	 *	 * @var	array	 */	private static $_instances = array();	/**	 * Class constructor.	 *	 * @param   string  $captcha  The editor to use.	 * @param   array   $options  Associative array of options.	 *	 * @since 2.5	 */	public function __construct($captcha, $options)	{		$this->_name = $captcha;		$this->_load($options);	}	/**	 * Returns the global Captcha object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $captcha  The plugin to use.	 * @param   array   $options  Associative array of options.	 *	 * @return  JCaptcha  Instance of this class.	 *	 * @since 2.5	 */	public static function getInstance($captcha, array $options = array())	{		$signature = md5(serialize(array($captcha, $options)));		if (empty(self::$_instances[$signature]))		{			try			{				self::$_instances[$signature] = new JCaptcha($captcha, $options);			}			catch (RuntimeException $e)			{				JFactory::getApplication()->enqueueMessage($e->getMessage(), 'error');				return null;			}		}		return self::$_instances[$signature];	}	/**	 * Fire the onInit event to initialise the captcha plug-in.	 *	 * @param   string  $id  The id of the field.	 *	 * @return  boolean  True on success	 *	 * @since	2.5	 */	public function initialise($id)	{		$args['id']    = $id;		$args['event'] = 'onInit';		try		{			$this->_captcha->update($args);		}		catch (Exception $e)		{			JFactory::getApplication()->enqueueMessage($e->getMessage(), 'error');			return false;		}		return true;	}	/**	 * Get the HTML for the captcha.	 *	 * @param   string  $name   The control name.	 * @param   string  $id     The id for the control.	 * @param   string  $class  Value for the HTML class attribute	 *	 * @return  mixed  The return value of the function "onDisplay" of the selected Plugin.	 *	 * @since   2.5	 */	public function display($name, $id, $class = '')	{		// Check if captcha is already loaded.		if (is_null($this->_captcha))		{			return;		}		// Initialise the Captcha.		if (!$this->initialise($id))		{			return;		}		$args['name']  = $name;		$args['id']    = $id ? $id : $name;		$args['class'] = $class ? 'class="' . $class . '"' : '';		$args['event'] = 'onDisplay';		return $this->_captcha->update($args);	}	/**	 * Checks if the answer is correct.	 *	 * @param   string  $code  The answer.	 *	 * @return  mixed   The return value of the function "onCheckAnswer" of the selected Plugin.	 *	 * @since	2.5	 */	public function checkAnswer($code)	{		// Check if captcha is already loaded		if (is_null(($this->_captcha)))		{			return;		}		$args['code']  = $code;		$args['event'] = 'onCheckAnswer';		return $this->_captcha->update($args);	}	/**	 * Load the Captcha plug-in.	 *	 * @param   array  $options  Associative array of options.	 *	 * @return  void	 *	 * @since	2.5	 * @throws  RuntimeException	 */	private function _load(array $options = array())	{		// Build the path to the needed captcha plugin		$name = JFilterInput::getInstance()->clean($this->_name, 'cmd');		$path = JPATH_PLUGINS . '/captcha/' . $name . '/' . $name . '.php';		if (!is_file($path))		{			throw new RuntimeException(JText::sprintf('JLIB_CAPTCHA_ERROR_PLUGIN_NOT_FOUND', $name));		}		// Require plugin file		require_once $path;		// Get the plugin		$plugin = JPluginHelper::getPlugin('captcha', $this->_name);		if (!$plugin)		{			throw new RuntimeException(JText::sprintf('JLIB_CAPTCHA_ERROR_PLUGIN_NOT_FOUND', $name));		}		$params = new JRegistry($plugin->params);		$plugin->params = $params;		// Build captcha plugin classname		$name = 'plgCaptcha' . $this->_name;		$this->_captcha = new $name($this, (array) $plugin, $options);	}	/**	 * Get the state of the JEditor object	 *	 * @return  mixed  The state of the object.	 *	 * @since   2.5	 */	public function getState()	{		return $this->_state;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   2.5	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEditor))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   2.5	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML utility class for creating a sortable table list * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlSortablelist{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the Sortable script and make table sortable	 *	 * @param   string   $tableId                 DOM id of the table	 * @param   string   $formId                  DOM id of the form	 * @param   string   $sortDir                 Sort direction	 * @param   string   $saveOrderingUrl         Save ordering url, ajax-load after an item dropped	 * @param   boolean  $proceedSaveOrderButton  Set whether a save order button is displayed	 * @param   boolean  $nestedList              Set whether the list is a nested list	 *	 * @return  void	 *	 * @since   3.0	 */	public static function sortable($tableId, $formId, $sortDir = 'asc', $saveOrderingUrl, $proceedSaveOrderButton = true, $nestedList = false)	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Depends on jQuery UI		JHtml::_('jquery.ui', array('core', 'sortable'));		JHtml::_('script', 'jui/sortablelist.js', false, true);		JHtml::_('stylesheet', 'jui/sortablelist.css', false, true, false);		// Attach sortable to document		JFactory::getDocument()->addScriptDeclaration("			(function ($){				$(document).ready(function (){					var sortableList = new $.JSortableList('#" . $tableId . " tbody','" . $formId . "','" . $sortDir . "' , '" . $saveOrderingUrl . "','','" . $nestedList . "');				});			})(jQuery);			"		);		if ($proceedSaveOrderButton)		{			self::_proceedSaveOrderButton();		}		// Set static array		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to inject script for enabled and disable Save order button	 * when changing value of ordering input boxes	 *	 * @return  void	 *	 * @since   3.0	 */	public static function _proceedSaveOrderButton()	{		JFactory::getDocument()->addScriptDeclaration(			"(function ($){				$(document).ready(function (){					var saveOrderButton = $('.saveorder');					saveOrderButton.css({'opacity':'0.2', 'cursor':'default'}).attr('onclick','return false;');					var oldOrderingValue = '';					$('.text-area-order').focus(function ()					{						oldOrderingValue = $(this).attr('value');					})					.keyup(function (){						var newOrderingValue = $(this).attr('value');						if (oldOrderingValue != newOrderingValue)						{							saveOrderButton.css({'opacity':'1', 'cursor':'pointer'}).removeAttr('onclick')						}					});				});			})(jQuery);"		);		return;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$params =& $this->item->params;$app = JFactory::getApplication();JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');?><div class="items-more"><h3><?php echo JText::_('COM_CONTENT_MORE_ARTICLES'); ?></h3><ol><?php	foreach ($this->link_items as &$item) :?>		 <li>		  		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catid)); ?>">			<?php echo $item->title; ?></a>		</li><?php endforeach; ?>	</ol></div>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewPreinstallHtml $this */?><div class="btn-toolbar">	<div class="btn-group pull-right">		<a href="#" class="btn btn-primary" onclick="Install.submitform();" title="<?php echo JText::_('JCheck_Again'); ?>"><i class="icon-refresh icon-white"></i> <?php echo JText::_('JCheck_Again'); ?></a>	</div></div><form action="index.php" method="post" id="languageForm" class="form-horizontal">	<div class="control-group">		<label for="jform_language" class="control-label"><?php echo JText::_('INSTL_SELECT_LANGUAGE_TITLE'); ?></label>		<div class="controls">			<?php echo $this->form->getInput('language'); ?>		</div>	</div>	<input type="hidden" name="view" value="preinstall" />	<input type="hidden" name="task" value="setlanguage" />	<?php echo JHtml::_('form.token'); ?></form><form action="index.php" method="post" id="adminForm" class="form-horizontal">	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<tbody>					<?php foreach ($this->options as $option) : ?>					<tr>						<td class="item">							<?php echo $option->label; ?>						</td>						<td>							<span class="label label-<?php echo ($option->state) ? 'success' : 'important'; ?>">								<?php echo JText::_(($option->state) ? 'JYES' : 'JNO'); ?>								<?php if ($option->notice):?>									<i class="icon-info-sign icon-white hasTooltip" title="<?php echo $option->notice; ?>"></i>								<?php endif;?>							</span>						</td>					</tr>					<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<thead>					<tr>						<th>							<?php echo JText::_('INSTL_PRECHECK_DIRECTIVE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_ACTUAL'); ?>						</th>					</tr>				</thead>				<tbody>					<?php foreach ($this->settings as $setting) : ?>					<tr>						<td>							<?php echo $setting->label; ?>						</td>						<td>							<span class="label label-success disabled">								<?php echo JText::_(($setting->recommended) ? 'JON' : 'JOFF'); ?>							</span>						</td>						<td>							<span class="label label-<?php echo ($setting->state === $setting->recommended) ? 'success' : 'warning'; ?>">								<?php echo JText::_(($setting->state) ? 'JON' : 'JOFF'); ?>							</span>						</td>					</tr>				<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="3"></td>					</tr>				</tfoot>			</table>		</div>	</div>	<input type="hidden" name="task" value="preinstall" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for jQuery JavaScript behaviors * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlJquery{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the jQuery JavaScript framework into the document head	 *	 * If debugging mode is on an uncompressed version of jQuery is included for easier debugging.	 *	 * @param   boolean  $noConflict  True to load jQuery in noConflict mode [optional]	 * @param   mixed    $debug       Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function framework($noConflict = true, $debug = null)	{		// Only load once		if (!empty(self::$loaded[__METHOD__]))		{			return;		}		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug  = (boolean) $config->get('debug');		}		JHtml::_('script', 'jui/jquery.min.js', false, true, false, false, $debug);		// Check if we are loading in noConflict		if ($noConflict)		{			JHtml::_('script', 'jui/jquery-noconflict.js', false, true, false, false, false);		}		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to load the jQuery UI JavaScript framework into the document head	 *	 * If debugging mode is on an uncompressed version of jQuery UI is included for easier debugging.	 *	 * @param   array  $components  The jQuery UI components to load [optional]	 * @param   mixed  $debug       Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function ui(array $components = array('core'), $debug = null)	{		// Set an array containing the supported jQuery UI components handled by this method		$supported = array('core', 'sortable');		// Include jQuery		self::framework();		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug  = (boolean) $config->get('debug');		}		// Load each of the requested components		foreach ($components as $component)		{			// Only attempt to load the component if it's supported in core and hasn't already been loaded			if (in_array($component, $supported) && empty(self::$loaded[__METHOD__][$component]))			{				JHtml::_('script', 'jui/jquery.ui.' . $component . '.min.js', false, true, false, false, $debug);				self::$loaded[__METHOD__][$component] = true;			}		}		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Component Controller * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.5 */class ContentController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'articles';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 *	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$view   = $this->input->get('view', 'articles');		$layout = $this->input->get('layout', 'articles');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'article' && $layout == 'edit' && !$this->checkEditId('com_content.edit.article', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_content&view=articles', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of search terms. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.5 */class SearchViewSearches extends JViewLegacy{	protected $enabled;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->enabled		= $this->state->params->get('enabled');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= SearchHelper::getActions();		JToolbarHelper::title(JText::_('COM_SEARCH_MANAGER_SEARCHES'), 'search.png');		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::custom('searches.reset', 'refresh.png', 'refresh_f2.png', 'JSEARCH_RESET', false);		}		JToolbarHelper::divider();		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_search');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_SEARCH');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Overrides Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesControllerOverrides extends JControllerAdmin{	/**	 * The prefix to use with controller messages	 *	 * @var		string	 * @since	2.5	 */	protected $text_prefix = 'COM_LANGUAGES_VIEW_OVERRIDES';	/**	 * Method for deleting one or more overrides	 *	 * @return  void	 *	 * @since		2.5	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));		// Get items to dlete from the request		$cid = $this->input->get('cid', array(), 'array');		if (!is_array($cid) || count($cid) < 1)		{			$this->setMessage(JText::_($this->text_prefix.'_NO_ITEM_SELECTED'), 'warning');		}		else		{			// Get the model			$model = $this->getModel('overrides');			// Remove the items			if ($model->delete($cid))			{				$this->setMessage(JText::plural($this->text_prefix.'_N_ITEMS_DELETED', count($cid)));			}			else			{				$this->setMessage($model->getError());			}		}		$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input JSON Class * * This class decodes a JSON string from the raw request data and makes it available via * the standard JInput interface. * * @package     Joomla.Platform * @subpackage  Input * @since       12.2 */class JInputJSON extends JInput{	/**	 * @var    string  The raw JSON string from the request.	 * @since  12.2	 */	private $_raw;	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is the raw HTTP input decoded from JSON)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.2	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		if (is_null($source))		{			$this->_raw = file_get_contents('php://input');			$this->data = json_decode($this->_raw, true);		}		else		{			$this->data = & $source;		}		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets the raw JSON string from the request.	 *	 * @return  string  The raw JSON string from the request.	 *	 * @since   12.2	 */	public function getRaw()	{		return $this->_raw;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;$canEdit = $displayData['params']->get('access-edit');?><div id="icons">	<?php if (empty($displayData['print'])) : ?>		<?php if ($canEdit || $displayData['params']->get('show_print_icon') || $displayData['params']->get('show_email_icon')) : ?>			<div class="btn-group pull-right">				<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span> <span class="caret"></span> </a>				<?php // Note the actions class is deprecated. Use dropdown-menu instead. ?>				<ul class="dropdown-menu">					<?php if ($displayData['params']->get('show_print_icon')) : ?>						<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>					<?php if ($displayData['params']->get('show_email_icon')) : ?>						<li class="email-icon"> <?php echo JHtml::_('icon.email', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>					<?php if ($canEdit) : ?>						<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>				</ul>			</div>		<?php endif; ?>	<?php else : ?>		<div class="pull-right">			<?php echo JHtml::_('icon.print_screen', $displayData['item'], $displayData['params']); ?>		</div>	<?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google authentication class abstract * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleAuth{	/**	 * @var    JRegistry  Options for the Google authentication object.	 * @since  12.3	 */	protected $options;	/**	 * Abstract method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	abstract public function authenticate();	/**	 * Verify if the client has been authenticated	 *	 * @return  boolean  Is authenticated	 *	 * @since   12.3	 */	abstract public function isAuthenticated();	/**	 * Abstract method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	abstract public function query($url, $data = null, $headers = null, $method = 'get');	/**	 * Get an option from the JGoogleAuth object.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleAuth object.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleAuth  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	?>	<div class="tab-pane" id="params-<?php echo $name;?>">	<?php	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php endforeach; ?>	</div><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! update selection list helper. * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateHelperSelect{	/**	 * Returns an HTML select element with the different extraction modes	 *	 * @param   string  $default  The default value of the select element	 *	 * @return  string	 *	 * @since   2.5.4	 */	public static function getMethods($default = 'direct')	{		$options = array();		$options[] = JHtml::_('select.option', 'direct', JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_METHOD_DIRECT'));		$options[] = JHtml::_('select.option', 'ftp', JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_METHOD_FTP'));		return JHtml::_('select.genericlist', $options, 'method', '', 'value', 'text', $default, 'extraction_method');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Joomla! Formatted Text File Log class * * This class is designed to use as a base for building formatted text files for output. By * default it emulates the Syslog style format output. This is a disk based output format. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerFormattedtext extends JLogLogger{	/**	 * @var    resource  The file pointer for the log file.	 * @since  11.1	 */	protected $file;	/**	 * @var    string  The format for which each entry follows in the log file.  All fields must be named	 * in all caps and be within curly brackets eg. {FOOBAR}.	 * @since  11.1	 */	protected $format = '{DATETIME}	{PRIORITY}	{CATEGORY}	{MESSAGE}';	/**	 * @var    array  The parsed fields from the format string.	 * @since  11.1	 */	protected $fields = array();	/**	 * @var    string  The full filesystem path for the log file.	 * @since  11.1	 */	protected $path;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// The name of the text file defaults to 'error.php' if not explicitly given.		if (empty($this->options['text_file']))		{			$this->options['text_file'] = 'error.php';		}		// The name of the text file path defaults to that which is set in configuration if not explicitly given.		if (empty($this->options['text_file_path']))		{			$this->options['text_file_path'] = JFactory::getConfig()->get('log_path');		}		// False to treat the log file as a php file.		if (empty($this->options['text_file_no_php']))		{			$this->options['text_file_no_php'] = false;		}		// Build the full path to the log file.		$this->path = $this->options['text_file_path'] . '/' . $this->options['text_file'];		// Use the default entry format unless explicitly set otherwise.		if (!empty($this->options['text_entry_format']))		{			$this->format = (string) $this->options['text_entry_format'];		}		// Build the fields array based on the format string.		$this->parseFields();	}	/**	 * Destructor.	 *	 * @since   11.1	 */	public function __destruct()	{		if (is_resource($this->file))		{			fclose($this->file);		}	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function addEntry(JLogEntry $entry)	{		// Initialise the file if not already done.		if (!is_resource($this->file))		{			$this->initFile();		}		// Set some default field values if not already set.		if (!isset($entry->clientIP))		{			// Check for proxies as well.			if (isset($_SERVER['REMOTE_ADDR']))			{				$entry->clientIP = $_SERVER['REMOTE_ADDR'];			}			elseif (isset($_SERVER['HTTP_X_FORWARDED_FOR']))			{				$entry->clientIP = $_SERVER['HTTP_X_FORWARDED_FOR'];			}			elseif (isset($_SERVER['HTTP_CLIENT_IP']))			{				$entry->clientIP = $_SERVER['HTTP_CLIENT_IP'];			}		}		// If the time field is missing or the date field isn't only the date we need to rework it.		if ((strlen($entry->date) != 10) || !isset($entry->time))		{			// Get the date and time strings in GMT.			$entry->datetime = $entry->date->toISO8601();			$entry->time = $entry->date->format('H:i:s', false);			$entry->date = $entry->date->format('Y-m-d', false);		}		// Get a list of all the entry keys and make sure they are upper case.		$tmp = array_change_key_case(get_object_vars($entry), CASE_UPPER);		// Decode the entry priority into an English string.		$tmp['PRIORITY'] = $this->priorities[$entry->priority];		// Fill in field data for the line.		$line = $this->format;		foreach ($this->fields as $field)		{			$line = str_replace('{' . $field . '}', (isset($tmp[$field])) ? $tmp[$field] : '-', $line);		}		// Write the new entry to the file.		if (!fwrite($this->file, $line . "\n"))		{			throw new RuntimeException('Cannot write to log file.');		}	}	/**	 * Method to generate the log file header.	 *	 * @return  string  The log file header	 *	 * @since   11.1	 */	protected function generateFileHeader()	{		$head = array();		// Build the log file header.		// If the no php flag is not set add the php die statement.		if (empty($this->options['text_file_no_php']))		{			// Blank line to prevent information disclose: https://bugs.php.net/bug.php?id=60677			$head[] = '#';			$head[] = '#<?php die(\'Forbidden.\'); ?>';		}		$head[] = '#Date: ' . gmdate('Y-m-d H:i:s') . ' UTC';		$head[] = '#Software: ' . JPlatform::getLongVersion();		$head[] = '';		// Prepare the fields string		$head[] = '#Fields: ' . strtolower(str_replace('}', '', str_replace('{', '', $this->format)));		$head[] = '';		return implode("\n", $head);	}	/**	 * Method to initialise the log file.  This will create the folder path to the file if it doesn't already	 * exist and also get a new file header if the file doesn't already exist.  If the file already exists it	 * will simply open it for writing.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function initFile()	{		// If the file doesn't already exist we need to create it and generate the file header.		if (!is_file($this->path))		{			// Make sure the folder exists in which to create the log file.			JFolder::create(dirname($this->path));			// Build the log file header.			$head = $this->generateFileHeader();		}		else		{			$head = false;		}		// Open the file for writing (append mode).		if (!$this->file = fopen($this->path, 'a'))		{			throw new RuntimeException('Cannot open file for writing log');		}		if ($head)		{			if (!fwrite($this->file, $head))			{				throw new RuntimeException('Cannot fput file for log');			}		}	}	/**	 * Method to parse the format string into an array of fields.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function parseFields()	{		$this->fields = array();		$matches = array();		// Get all of the available fields in the format string.		preg_match_all("/{(.*?)}/i", $this->format, $matches);		// Build the parsed fields list based on the found fields.		foreach ($matches[1] as $match)		{			$this->fields[] = strtoupper($match);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">function iFrameHeight(){	var h = 0;	if (!document.all)	{		h = document.getElementById('blockrandom').contentDocument.height;		document.getElementById('blockrandom').style.height = h + 60 + 'px';	} else if (document.all)	{		h = document.frames('blockrandom').document.body.scrollHeight;		document.all.blockrandom.style.height = h + 20 + 'px';	}}</script><div class="contentpane<?php echo $this->pageclass_sfx; ?>"><?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php if ($this->escape($this->params->get('page_heading'))) :?>			<?php echo $this->escape($this->params->get('page_heading')); ?>		<?php else : ?>			<?php echo $this->escape($this->params->get('page_title')); ?>		<?php endif; ?>	</h1><?php endif; ?><iframe <?php echo $this->wrapper->load; ?>	id="blockrandom"	name="iframe"	src="<?php echo $this->escape($this->wrapper->url); ?>"	width="<?php echo $this->escape($this->params->get('width')); ?>"	height="<?php echo $this->escape($this->params->get('height')); ?>"	scrolling="<?php echo $this->escape($this->params->get('scrolling')); ?>"	frameborder="<?php echo $this->escape($this->params->get('frameborder', 1)); ?>"	class="wrapper<?php echo $this->pageclass_sfx; ?>">	<?php echo JText::_('COM_WRAPPER_NO_IFRAMES'); ?></iframe></div>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * Content Component Archive Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelArchive extends ContentModelArticles{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_content.archive';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		parent::populateState();		$app = JFactory::getApplication();		// Add archive properties		$params = $this->state->params;		// Filter on archived articles		$this->setState('filter.published', 2);		// Filter on month, year		$this->setState('filter.month', $app->input->getInt('month'));		$this->setState('filter.year', $app->input->getInt('year'));		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		// Get list limit		$itemid = $app->input->get('Itemid', 0, 'int');		$limit = $app->getUserStateFromRequest('com_content.archive.list' . $itemid . '.limit', 'limit', $params->get('display_num'), 'uint');		$this->setState('list.limit', $limit);	}	/**	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Set the archive ordering		$params = $this->state->params;		$articleOrderby = $params->get('orderby_sec', 'rdate');		$articleOrderDate = $params->get('order_date');		// No category ordering		$categoryOrderby = '';		$secondary = ContentHelperQuery::orderbySecondary($articleOrderby, $articleOrderDate) . ', ';		$primary = ContentHelperQuery::orderbyPrimary($categoryOrderby);		$orderby = $primary . ' ' . $secondary . ' a.created DESC ';		$this->setState('list.ordering', $orderby);		$this->setState('list.direction', '');		// Create a new query object.		$query = parent::getListQuery();			// Add routing for archive			//sqlsrv changes		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('a.alias', '!=', '0');		$case_when .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $a_id.' END as slug';		$query->select($case_when);		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('c.alias', '!=', '0');		$case_when .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $c_id.' END as catslug';		$query->select($case_when);		// Filter on month, year		// First, get the date field		$queryDate = ContentHelperQuery::getQueryDate($articleOrderDate);		if ($month = $this->getState('filter.month'))		{			$query->where('MONTH('. $queryDate . ') = ' . $month);		}		if ($year = $this->getState('filter.year'))		{			$query->where('YEAR('. $queryDate . ') = ' . $year);		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to get the archived article list	 *	 * @access public	 * @return array	 */	public function getData()	{		$app = JFactory::getApplication();		// Lets load the content if it doesn't already exist		if (empty($this->_data))		{			// Get the page/component configuration			$params = $app->getParams();			// Get the pagination request variables			$limit		= $app->input->get('limit', $params->get('display_num', 20), 'uint');			$limitstart	= $app->input->get('limitstart', 0, 'uint');			$query = $this->_buildQuery();			$this->_data = $this->_getList($query, $limitstart, $limit);		}		return $this->_data;	}	// JModelLegacy override to add alternating value for $odd	protected function _getList($query, $limitstart=0, $limit=0)	{		$result = parent::_getList($query, $limitstart, $limit);		$odd = 1;		foreach ($result as $k => $row)		{			$result[$k]->odd = $odd;			$odd = 1 - $odd;		}		return $result;	}}
