<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API References class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubRefs extends JGithubObject{	/**	 * Method to create an issue.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The name of the fully qualified reference.	 * @param   string  $sha   The SHA1 value to set this reference to.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $ref, $sha)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs';		// Build the request data.		$data = json_encode(			array(				'ref' => $ref,				'sha' => $sha			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a reference.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $ref    The reference to update.	 * @param   string  $sha    The SHA1 value to set the reference to.	 * @param   string  $force  Whether the update should be forced. Default to false.	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $ref, $sha, $force = false)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if ($force)		{			$data->force = true;		}		$data->sha = $sha;		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a reference.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The reference to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $ref)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list references for a repository.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $namespace  Optional sub-namespace to limit the returned references.	 * @param   integer  $page       Page to request	 * @param   integer  $limit      Number of results to return per page	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($user, $repo, $namespace = '', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs' . $namespace;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Text Parser class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerParserTxt extends FinderIndexerParser{	/**	 * Method to process Text input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	protected function process($input)	{		return $input;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;?><h3>	<?php echo JText::_('COM_FINDER_STATISTICS_TITLE') ?></h3><div class="row-fluid">	<div class="span6">		<p class="tab-description"><?php echo JText::sprintf('COM_FINDER_STATISTICS_STATS_DESCRIPTION', number_format($this->data->term_count), number_format($this->data->link_count), number_format($this->data->taxonomy_node_count), number_format($this->data->taxonomy_branch_count)); ?></p>		<table class="table table-striped table-condensed">			<thead>				<tr>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_HEADING');?>					</th>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_COUNT');?>					</th>				</tr>			</thead>			<tbody>				<?php foreach ($this->data->type_list as $type) :?>				<tr>					<td>						<?php echo $type->type_title;?>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($type->link_count);?></span>					</td>				</tr>				<?php endforeach; ?>				<tr>					<td>						<strong><?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_TOTAL'); ?></strong>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($this->data->link_count); ?></span>					</td>				</tr>			</tbody>		</table>	</div></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* marker_class: Class based on the selection of text, none, or icons * jicon-text, jicon-none, jicon-icon */?><dl class="contact-address dl-horizontal"><?php if (($this->params->get('address_check') > 0) &&  ($this->contact->address || $this->contact->suburb  || $this->contact->state || $this->contact->country || $this->contact->postcode)) : ?>	<?php if ($this->params->get('address_check') > 0) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_address'); ?>		</span>	</dt>	<dd>	<address>	<?php endif; ?>	<?php if ($this->contact->address && $this->params->get('show_street_address')) : ?>		<span class="contact-street">			<?php echo nl2br($this->contact->address); ?>		</span>	<?php endif; ?>	<?php if ($this->contact->suburb && $this->params->get('show_suburb')) : ?>		<span class="contact-suburb">			<?php echo $this->contact->suburb; ?>		</span>	<?php endif; ?>	<?php if ($this->contact->state && $this->params->get('show_state')) : ?>		<span class="contact-state">			<?php echo $this->contact->state; ?>		</span>	<?php endif; ?>	<?php if ($this->contact->postcode && $this->params->get('show_postcode')) : ?>		<span class="contact-postcode">			<?php echo $this->contact->postcode; ?>		</span>	<?php endif; ?>	<?php if ($this->contact->country && $this->params->get('show_country')) : ?>		<span class="contact-country">			<?php echo $this->contact->country; ?>		</span>	<?php endif; ?><?php endif; ?><?php if ($this->params->get('address_check') > 0) : ?>	</address>	</dd><?php endif; ?><?php if ($this->contact->email_to && $this->params->get('show_email')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_email'); ?>		</span>	</dt>	<dd>		<span class="contact-emailto">			<?php echo $this->contact->email_to; ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->telephone && $this->params->get('show_telephone')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_telephone'); ?>		</span>	</dt>	<dd>		<span class="contact-telephone">			<?php echo nl2br($this->contact->telephone); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->fax && $this->params->get('show_fax')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_fax'); ?>		</span>	</dt>	<dd>		<span class="contact-fax">		<?php echo nl2br($this->contact->fax); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->mobile && $this->params->get('show_mobile')) :?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_mobile'); ?>		</span>	</dt>	<dd>		<span class="contact-mobile">			<?php echo nl2br($this->contact->mobile); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->webpage && $this->params->get('show_webpage')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >		</span>	</dt>	<dd>		<span class="contact-webpage">			<a href="<?php echo $this->contact->webpage; ?>" target="_blank">			<?php echo $this->contact->webpage; ?></a>		</span>	</dd><?php endif; ?></dl>
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.stream');/** * Bzip2 format adapter for the JArchive class * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveBzip2 implements JArchiveExtractable{	/**	 * Bzip2 file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * Extract a Bzip2 compressed file to a given path	 *	 * @param   string  $archive      Path to Bzip2 archive to extract	 * @param   string  $destination  Path to extract archive to	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function extract($archive, $destination, array $options = array ())	{		$this->_data = null;		if (!extension_loaded('bz2'))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'The bz2 extension is not available.');			}			else			{				throw new RuntimeException('The bz2 extension is not available.');			}		}		if (!isset($options['use_streams']) || $options['use_streams'] == false)		{			// Old style: read the whole file and then parse it			$this->_data = file_get_contents($archive);			if (!$this->_data)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive');				}				else				{					throw new RuntimeException('Unable to read archive');				}			}			$buffer = bzdecompress($this->_data);			unset($this->_data);			if (empty($buffer))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to decompress data');				}				else				{					throw new RuntimeException('Unable to decompress data');				}			}			if (JFile::write($destination, $buffer) === false)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive');				}				else				{					throw new RuntimeException('Unable to write archive');				}			}		}		else		{			// New style! streams!			$input = JFactory::getStream();			// Use bzip			$input->set('processingmethod', 'bz');			if (!$input->open($archive))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive (bz2)');				}				else				{					throw new RuntimeException('Unable to read archive (bz2)');				}			}			$output = JFactory::getStream();			if (!$output->open($destination, 'w'))			{				$input->close();				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive (bz2)');				}				else				{					throw new RuntimeException('Unable to write archive (bz2)');				}			}			do			{				$this->_data = $input->read($input->get('chunksize', 8196));				if ($this->_data)				{					if (!$output->write($this->_data))					{						$input->close();						if (class_exists('JError'))						{							return JError::raiseWarning(100, 'Unable to write archive (bz2)');						}						else						{							throw new RuntimeException('Unable to write archive (bz2)');						}					}				}			}			while ($this->_data);			$output->close();			$input->close();		}		return true;	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return extension_loaded('bz2');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform" title="<?php echo JText::_('COM_TEMPLATES_FTP_TITLE'); ?>">	<legend><?php echo JText::_('COM_TEMPLATES_FTP_TITLE'); ?></legend>	<?php echo JText::_('COM_TEMPLATES_FTP_DESC'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p class="error"><?php echo JText::_($this->ftp->message); ?></p>	<?php endif; ?>	<table class="adminform">		<tbody>			<tr>				<td width="120">					<label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>				</td>				<td>					<input type="text" id="username" name="username" class="inputbox" size="70" value="" />				</td>			</tr>			<tr>				<td width="120">					<label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>				</td>				<td>					<input type="password" id="password" name="password" class="inputbox" size="70" value="" />				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Statistics view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewStatistics extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load the view data.		$this->data		= $this->get('Data');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('FinderHelperRoute', JPATH_SITE . '/components/com_finder/helpers/route.php');JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');// Include the helper.require_once __DIR__ . '/helper.php';if (!defined('FINDER_PATH_INDEXER')){	define('FINDER_PATH_INDEXER', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer');}JLoader::register('FinderIndexerQuery', FINDER_PATH_INDEXER . '/query.php');// Check for OpenSearchif ($params->get('opensearch', 1)){/*This code intentionally commented	$doc = JFactory::getDocument();	$app = JFactory::getApplication();	$ostitle = $params->get('opensearch_title', JText::_('MOD_FINDER_SEARCHBUTTON_TEXT') . ' ' . $app->getCfg('sitename'));	$doc->addHeadLink(						JURI::getInstance()->toString(array('scheme', 'host', 'port')) . JRoute::_('&option=com_finder&format=opensearch'),						'search', 'rel', array('title' => $ostitle, 'type' => 'application/opensearchdescription+xml')					);*/}// Initialize module parameters.$params->def('field_size', 20);// Get the route.$route = FinderHelperRoute::getSearchRoute($params->get('searchfilter', null));// Load component language file.FinderHelperLanguage::loadComponentLanguage();// Load plug-in language files.FinderHelperLanguage::loadPluginLanguage();// Get Smart Search query object.$query = modFinderHelper::getQuery($params);require JModuleHelper::getLayoutPath('mod_finder', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to manipulate an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */abstract class JImageFilter{	/**	 * @var    resource  The image resource handle.	 * @since  11.3	 */	protected $handle;	/**	 * Class constructor.	 *	 * @param   resource  $handle  The image resource on which to apply the filter.	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 */	public function __construct($handle)	{		// Make sure the file handle is valid.		if (!is_resource($handle) || (get_resource_type($handle) != 'gd'))		{			JLog::add('The image handle is invalid for the image filter.', JLog::ERROR);			throw new InvalidArgumentException('The image handle is invalid for the image filter.');		}		$this->handle = $handle;	}	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 */	abstract public function execute(array $options = array());}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleUrl extends JFormRule{	/**	 * Method to test an external url for a valid parts.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @link    http://www.w3.org/Addressing/URL/url-spec.txt	 * @see	    Jstring	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		$urlParts = JString::parse_url($value);		// See http://www.w3.org/Addressing/URL/url-spec.txt		// Use the full list or optionally specify a list of permitted schemes.		if ($element['schemes'] == '')		{			$scheme = array('http', 'https', 'ftp', 'ftps', 'gopher', 'mailto', 'news', 'prospero', 'telnet', 'rlogin', 'tn3270', 'wais', 'url',				'mid', 'cid', 'nntp', 'tel', 'urn', 'ldap', 'file', 'fax', 'modem', 'git');		}		else		{			$scheme = explode(',', $element['schemes']);		}		/*		 * This rule is only for full URLs with schemes because parse_url does not parse		 * accurately without a scheme.		 * @see http://php.net/manual/en/function.parse-url.php		 */		if ($urlParts && !array_key_exists('scheme', $urlParts))		{			return false;		}		$urlScheme = (string) $urlParts['scheme'];		$urlScheme = strtolower($urlScheme);		if (in_array($urlScheme, $scheme) == false)		{			return false;		}		// For some schemes here must be two slashes.		if (($urlScheme == 'http' || $urlScheme == 'https' || $urlScheme == 'ftp' || $urlScheme == 'sftp' || $urlScheme == 'gopher'			|| $urlScheme == 'wais' || $urlScheme == 'gopher' || $urlScheme == 'prospero' || $urlScheme == 'telnet' || $urlScheme == 'git')			&& ((substr($value, strlen($urlScheme), 3)) !== '://'))		{			return false;		}		// The best we can do for the rest is make sure that the strings are valid UTF-8		// and the port is an integer.		if (array_key_exists('host', $urlParts) && !JString::valid((string) $urlParts['host']))		{			return false;		}		if (array_key_exists('port', $urlParts) && !is_int((int) $urlParts['port']))		{			return false;		}		if (array_key_exists('path', $urlParts) && !JString::valid((string) $urlParts['path']))		{			return false;		}		return true;	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('site');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a  class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_DATABASE'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_type'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_type'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_TYPE_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_host'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_host'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_HOST_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_user'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_user'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_USER_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_pass'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_pass'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PASSWORD_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_name'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_name'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_NAME_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_prefix'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_prefix'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PREFIX_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_old'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_old'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_OLD_PROCESS_DESC'); ?>			</p>		</div>	</div>	<input type="hidden" name="task" value="database" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages list controller class. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerMessages extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Message', $prefix = 'MessagesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Snowball stemmer class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerStemmerSnowball extends FinderIndexerStemmer{	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	public function stem($token, $lang)	{		// Language to use if All is specified.		static $defaultLang = '';		// If language is All then try to get site default language.		if ($lang == '*' && $defaultLang == '')		{			$languages = JLanguageHelper::getLanguages();			$defaultLang = isset($languages[0]->sef) ? $languages[0]->sef : '*';			$lang = $defaultLang;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Get the stem function from the language string.			switch ($lang)			{				// Danish stemmer.				case 'da':					$function = 'stem_danish';					break;				// German stemmer.				case 'de':					$function = 'stem_german';					break;				// English stemmer.				default:				case 'en':					$function = 'stem_english';					break;				// Spanish stemmer.				case 'es':					$function = 'stem_spanish';					break;				// Finnish stemmer.				case 'fi':					$function = 'stem_finnish';					break;				// French stemmer.				case 'fr':					$function = 'stem_french';					break;				// Hungarian stemmer.				case 'hu':					$function = 'stem_hungarian';					break;				// Italian stemmer.				case 'it':					$function = 'stem_italian';					break;				// Norwegian stemmer.				case 'nb':					$function = 'stem_norwegian';					break;				// Dutch stemmer.				case 'nl':					$function = 'stem_dutch';					break;				// Portuguese stemmer.				case 'pt':					$function = 'stem_portuguese';					break;				// Romanian stemmer.				case 'ro':					$function = 'stem_romanian';					break;				// Russian stemmer.				case 'ru':					$function = 'stem_russian_unicode';					break;				// Swedish stemmer.				case 'sv':					$function = 'stem_swedish';					break;				// Turkish stemmer.				case 'tr':					$function = 'stem_turkish_unicode';					break;			}			// Stem the word if the stemmer method exists.			$this->cache[$lang][$token] = function_exists($function) ? $function($token) : $token;		}		return $this->cache[$lang][$token];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Parser base class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexerParser{	/**	 * Method to get a parser, creating it if necessary.	 *	 * @param   string  $format  The type of parser to load.	 *	 * @return  FinderIndexerParser  A FinderIndexerParser instance.	 *	 * @since   2.5	 * @throws  Exception on invalid parser.	 */	public static function getInstance($format)	{		static $instances;		// Only create one parser for each format.		if (isset($instances[$format]))		{			return $instances[$format];		}		// Create an array of instances if necessary.		if (!is_array($instances))		{			$instances = array();		}		// Setup the adapter for the parser.		$format = JFilterInput::getInstance()->clean($format, 'cmd');		$path = __DIR__ . '/parser/' . $format . '.php';		$class = 'FinderIndexerParser' . ucfirst($format);		// Check if a parser exists for the format.		if (file_exists($path))		{			// Instantiate the parser.			include_once $path;			$instances[$format] = new $class;		}		else		{			// Throw invalid format exception.			throw new Exception(JText::sprintf('COM_FINDER_INDEXER_INVALID_PARSER', $format));		}		return $instances[$format];	}	/**	 * Method to parse input and extract the plain text. Because this method is	 * called from both inside and outside the indexer, it needs to be able to	 * batch out its parsing functionality to deal with the inefficiencies of	 * regular expressions. We will parse recursively in 2KB chunks.	 *	 * @param   string  $input  The input to parse.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	public function parse($input)	{		$return = null;		// Parse the input in batches if bigger than 2KB.		if (strlen($input) > 2048)		{			$start = 0;			$end = strlen($input);			$chunk = 2048;			while ($start < $end)			{				// Setup the string.				$string = substr($input, $start, $chunk);				// Find the last space character if we aren't at the end.				$ls = (($start + $chunk) < $end ? strrpos($string, ' ') : false);				// Truncate to the last space character.				if ($ls !== false)				{					$string = substr($string, 0, $ls);				}				// Adjust the start position for the next iteration.				$start += ($ls !== false ? ($ls + 1 - $chunk) + $chunk : $chunk);				// Parse the chunk.				$return .= $this->process($string);			}		}		// The input is less than 2KB so we can parse it efficiently.		else		{			// Parse the chunk.			$return .= $this->process($input);		}		return $return;	}	/**	 * Method to process input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	abstract protected function process($input);}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller	= JControllerLegacy::getInstance('Banners');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller = JControllerLegacy::getInstance('Search');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewPositions extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/index.php';
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Database Query Preparable Interface. * Adds bind/unbind methods as well as a getBounded() method * to retrieve the stored bounded variables on demand prior to * query execution. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */interface JDatabaseQueryPreparable{	/**	 * Method to add a variable to an internal array that will be bound to a prepared SQL statement before query execution. Also	 * removes a variable that has been bounded from the internal bounded array when the passed in value is null.	 *	 * @param   string|integer  $key            The key that will be used in your SQL query to reference the value. Usually of	 *                                          the form ':key', but can also be an integer.	 * @param   mixed           &$value         The value that will be bound. The value is passed by reference to support output	 *                                          parameters such as those possible with stored procedures.	 * @param   integer         $dataType       Constant corresponding to a SQL datatype.	 * @param   integer         $length         The length of the variable. Usually required for OUTPUT parameters.	 * @param   array           $driverOptions  Optional driver options to be used.	 *	 * @return  JDatabaseQuery	 *	 * @since   12.1	 */	public function bind($key = null, &$value = null, $dataType = PDO::PARAM_STR, $length = 0, $driverOptions = array());	/**	 * Retrieves the bound parameters array when key is null and returns it by reference. If a key is provided then that item is	 * returned.	 *	 * @param   mixed  $key  The bounded variable key to retrieve.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function &getBounded($key = null);}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;// Activate the highlighter if enabled.if (!empty($this->query->highlight) && $this->params->get('highlight_terms', 1)){	JHtml::_('behavior.highlighter', $this->query->highlight);}// Get the application object.$app = JFactory::getApplication();// Display the suggested search if it is different from the current search.if (($this->suggested && $this->params->get('show_suggested_query', 1)) || ($this->explained && $this->params->get('show_explained_query', 1))):?>	<div id="search-query-explained">		<?php		// Display the suggested search query.		if ($this->suggested && $this->params->get('show_suggested_query', 1))		{			// Replace the base query string with the suggested query string.			$uri = JUri::getInstance($this->query->toURI());			$uri->setVar('q', $this->suggested);			// Compile the suggested query link.			$link	= '<a href="' . JRoute::_($uri->toString(array('path', 'query'))) . '">'					. $this->escape($this->suggested)					. '</a>';			echo JText::sprintf('COM_FINDER_SEARCH_SIMILAR', $link);		}		// Display the explained search query.		elseif ($this->explained && $this->params->get('show_explained_query', 1))		{			echo $this->explained;		}		?>	</div><?phpendif;if ($this->total == 0):?>	<div id="search-result-empty">		<h2><?php echo JText::_('COM_FINDER_SEARCH_NO_RESULTS_HEADING'); ?></h2>		<?php if ($app->getLanguageFilter()) : ?>		<p><?php echo JText::sprintf('COM_FINDER_SEARCH_NO_RESULTS_BODY_MULTILANG', $this->escape($this->query->input)); ?></p>		<?php else : ?>		<p><?php echo JText::sprintf('COM_FINDER_SEARCH_NO_RESULTS_BODY', $this->escape($this->query->input)); ?></p>		<?php endif; ?>	</div><?phpelse:	// Prepare the pagination string.  Results X - Y of Z	$start	= (int) $this->pagination->get('limitstart') + 1;	$total	= (int) $this->pagination->get('total');	$limit	= (int) $this->pagination->get('limit') * $this->pagination->pagesTotal;	$limit	= (int) ($limit > $total ? $total : $limit);	$pages	= JText::sprintf('COM_FINDER_SEARCH_RESULTS_OF', $start, $limit, $total);?>	<br id="highlighter-start" />	<ul class="search-results<?php echo $this->pageclass_sfx; ?> list-striped">		<?php		for ($i = 0, $n = count($this->results); $i < $n; $i++):			$this->result	= &$this->results[$i];			$layout			= $this->getLayoutFile($this->result->layout);		?>		<?php echo $this->loadTemplate($layout); ?>		<?php		endfor;		?>	</ul>	<br id="highlighter-end" />	<div class="search-pagination">		<div class="pagination">			<?php echo $this->pagination->getPagesLinks(); ?>		</div>		<div class="search-pages-counter">			<?php echo $pages; ?>		</div>	</div><?phpendif;
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Languages component * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesViewLanguage extends JViewLegacy{	public $item;	public $form;	public $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->item = $this->get('Item');		$this->form = $this->get('Form');		$this->state = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since  1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT . '/helpers/languages.php';		JFactory::getApplication()->input->set('hidemainmenu', 1);		$isNew = empty($this->item->lang_id);		$canDo = LanguagesHelper::getActions();		JToolbarHelper::title(JText::_($isNew ? 'COM_LANGUAGES_VIEW_LANGUAGE_EDIT_NEW_TITLE' : 'COM_LANGUAGES_VIEW_LANGUAGE_EDIT_EDIT_TITLE'), 'langmanager.png');		// If a new item, can save.		if ($isNew && $canDo->get('core.create'))		{			JToolbarHelper::save('language.save');		}		//If an existing item, allow to Apply and Save.		if (!$isNew && $canDo->get('core.edit'))		{			JToolbarHelper::apply('language.apply');			JToolbarHelper::save('language.save');		}		// If an existing item, can save to a copy only if we have create rights.		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('language.save2new');		}		if ($isNew)		{			JToolbarHelper::cancel('language.cancel');		}		else		{			JToolbarHelper::cancel('language.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_EDIT');		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php  $fieldSets = $this->form->getFieldsets('attribs'); ?>	<?php foreach ($fieldSets as $name => $fieldSet) : ?>		<?php $label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL'; ?>		<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'attrib-'.$name, trim($label)); ?>			<fieldset>			<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>				<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>			<?php endif;			foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach;?>			</fieldset>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$document = JFactory::getDocument();$direction = $document->direction == 'rtl' ? 'pull-right' : '';require JModuleHelper::getLayoutPath('mod_menu', $enabled ? 'default_enabled' : 'default_disabled');$menu->renderMenu('menu', $enabled ? 'nav ' . $direction : 'nav disabled ' . $direction);
<?php/** * @package     Joomla.Libraries * @subpackage  Editor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JEditor class to handle WYSIWYG editors * * @package     Joomla.Libraries * @subpackage  Editor * @since       1.5 */class JEditor extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  1.5	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  1.5	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  1.5	 */	protected $_methods = array();	/**	 * Editor Plugin object	 *	 * @var    object	 * @since  1.5	 */	protected $_editor = null;	/**	 * Editor Plugin name	 *	 * @var    string	 * @since  1.5	 */	protected $_name = null;	/**	 * Object asset	 *	 * @var    string	 * @since  1.6	 */	protected $asset = null;	/**	 * Object author	 *	 * @var    string	 * @since  1.6	 */	protected $author = null;	/**	 * @var    array  JEditor instances container.	 * @since  2.5	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   string  $editor  The editor name	 */	public function __construct($editor = 'none')	{		$this->_name = $editor;	}	/**	 * Returns the global Editor object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $editor  The editor to use.	 *	 * @return  JEditor The Editor object.	 *	 * @since   1.5	 */	public static function getInstance($editor = 'none')	{		$signature = serialize($editor);		if (empty(self::$instances[$signature]))		{			self::$instances[$signature] = new JEditor($editor);		}		return self::$instances[$signature];	}	/**	 * Get the state of the JEditor object	 *	 * @return  mixed    The state of the object.	 *	 * @since   1.5	 */	public function getState()	{		return $this->_state;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   1.5	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEditor))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   1.5	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}	/**	 * Initialise the editor	 *	 * @return  void	 *	 * @since   1.5	 */	public function initialise()	{		// Check if editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		$args['event'] = 'onInit';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				// @todo remove code: $return .= $result;				$return = $result;			}		}		$document = JFactory::getDocument();		$document->addCustomTag($return);	}	/**	 * Display the editor area.	 *	 * @param   string   $name     The control name.	 * @param   string   $html     The contents of the text area.	 * @param   string   $width    The width of the text area (px or %).	 * @param   string   $height   The height of the text area (px or %).	 * @param   integer  $col      The number of columns for the textarea.	 * @param   integer  $row      The number of rows for the textarea.	 * @param   boolean  $buttons  True and the editor buttons will be displayed.	 * @param   string   $id       An optional ID for the textarea (note: since 1.6). If not supplied the name is used.	 * @param   string   $asset    The object asset	 * @param   object   $author   The author.	 * @param   array    $params   Associative array of editor parameters.	 *	 * @return  string	 *	 * @since   1.5	 */	public function display($name, $html, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null, $params = array())	{		$this->asset = $asset;		$this->author = $author;		$this->_loadEditor($params);		// Check whether editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		// Backwards compatibility. Width and height should be passed without a semicolon from now on.		// If editor plugins need a unit like "px" for CSS styling, they need to take care of that		$width = str_replace(';', '', $width);		$height = str_replace(';', '', $height);		$return = null;		$args['name'] = $name;		$args['content'] = $html;		$args['width'] = $width;		$args['height'] = $height;		$args['col'] = $col;		$args['row'] = $row;		$args['buttons'] = $buttons;		$args['id'] = $id ? $id : $name;		$args['event'] = 'onDisplay';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Save the editor content	 *	 * @param   string  $editor  The name of the editor control	 *	 * @return  string	 *	 * @since   1.5	 */	public function save($editor)	{		$this->_loadEditor();		// Check whether editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		$args[] = $editor;		$args['event'] = 'onSave';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Get the editor contents	 *	 * @param   string  $editor  The name of the editor control	 *	 * @return  string	 *	 * @since   1.5	 */	public function getContent($editor)	{		$this->_loadEditor();		$args['name'] = $editor;		$args['event'] = 'onGetContent';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Set the editor contents	 *	 * @param   string  $editor  The name of the editor control	 * @param   string  $html    The contents of the text area	 *	 * @return  string	 *	 * @since   1.5	 */	public function setContent($editor, $html)	{		$this->_loadEditor();		$args['name'] = $editor;		$args['html'] = $html;		$args['event'] = 'onSetContent';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Get the editor extended buttons (usually from plugins)	 *	 * @param   string  $editor   The name of the editor.	 * @param   mixed   $buttons  Can be boolean or array, if boolean defines if the buttons are	 *                            displayed, if array defines a list of buttons not to show.	 *	 * @return  array	 *	 * @since   1.5	 */	public function getButtons($editor, $buttons = true)	{		$result = array();		if (is_bool($buttons) && !$buttons)		{			return $result;		}		// Get plugins		$plugins = JPluginHelper::getPlugin('editors-xtd');		foreach ($plugins as $plugin)		{			if (is_array($buttons) && in_array($plugin->name, $buttons))			{				continue;			}			JPluginHelper::importPlugin('editors-xtd', $plugin->name, false);			$className = 'plgButton' . $plugin->name;			if (class_exists($className))			{				$plugin = new $className($this, (array) $plugin);			}			// Try to authenticate			if ($temp = $plugin->onDisplay($editor, $this->asset, $this->author))			{				$result[] = $temp;			}		}		return $result;	}	/**	 * Load the editor	 *	 * @param   array  $config  Associative array of editor config paramaters	 *	 * @return  mixed	 *	 * @since   1.5	 */	protected function _loadEditor($config = array())	{		// Check whether editor is already loaded		if (!is_null(($this->_editor)))		{			return;		}		// Build the path to the needed editor plugin		$name = JFilterInput::getInstance()->clean($this->_name, 'cmd');		$path = JPATH_PLUGINS . '/editors/' . $name . '.php';		if (!is_file($path))		{			$path = JPATH_PLUGINS . '/editors/' . $name . '/' . $name . '.php';			if (!is_file($path))			{				JLog::add(JText::_('JLIB_HTML_EDITOR_CANNOT_LOAD'), JLog::WARNING, 'jerror');				return false;			}		}		// Require plugin file		require_once $path;		// Get the plugin		$plugin = JPluginHelper::getPlugin('editors', $this->_name);		$params = new JRegistry;		$params->loadString($plugin->params);		$params->loadArray($config);		$plugin->params = $params;		// Build editor plugin classname		$name = 'plgEditor' . $this->_name;		if ($this->_editor = new $name($this, (array) $plugin))		{			// Load plugin parameters			$this->initialise();			JPluginHelper::importPlugin('editors-xtd');		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="login-form" class="form-vertical"><?php if ($params->get('greeting')) : ?>	<div class="login-greeting">	<?php if ($params->get('name') == 0) : {		echo JText::sprintf('MOD_LOGIN_HINAME', htmlspecialchars($user->get('name')));	} else : {		echo JText::sprintf('MOD_LOGIN_HINAME', htmlspecialchars($user->get('username')));	} endif; ?>	</div><?php endif; ?>	<div class="logout-button">		<input type="submit" name="Submit" class="btn btn-primary" value="<?php echo JText::_('JLOGOUT'); ?>" />		<input type="hidden" name="option" value="com_users" />		<input type="hidden" name="task" value="user.logout" />		<input type="hidden" name="return" value="<?php echo $return; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.uri');/** * Google API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleEmbed{	/**	 * @var    JRegistry  Options for the Google data object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JURI  URI of the page being rendered.	 * @since  12.3	 */	protected $uri;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Google options object	 * @param   JURI       $uri      URL of the page being rendered	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JURI $uri = null)	{		$this->options = $options ? $options : new JRegistry;		$this->uri = $uri ? $uri : new JURI;	}	/**	 * Method to retrieve the javascript header for the embed API	 *	 * @return  string  The header	 *	 * @since   12.3	 */	public function isSecure()	{		return $this->uri->getScheme() == 'https';	}	/**	 * Method to retrieve the header for the API	 *	 * @return  string  The header	 *	 * @since   12.3	 */	abstract public function getHeader();	/**	 * Method to retrieve the body for the API	 *	 * @return  string  The body	 *	 * @since   12.3	 */	abstract public function getBody();	/**	 * Method to output the javascript header for the embed API	 *	 * @return  null	 *	 * @since   12.3	 */	public function echoHeader()	{		echo $this->getHeader();	}	/**	 * Method to output the body for the API	 *	 * @return  null	 *	 * @since   12.3	 */	public function echoBody()	{		echo $this->getBody();	}	/**	 * Get an option from the JGoogleEmbed instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleEmbed instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleEmbed  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/route.php';$controller = JControllerLegacy::getInstance('Contact');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.oauth.v2client');/** * Google OAuth authentication class * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleAuthOauth2 extends JGoogleAuth{	/**	 * @var    JOAuth2Client  OAuth client for the Google authentication object.	 * @since  12.3	 */	protected $client;	/**	 * Constructor.	 *	 * @param   JRegistry      $options  JGoogleAuth options object.	 * @param   JOAuth2Client  $client   OAuth client for Google authentication.	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JOAuth2Client $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JOAuth2Client($this->options);	}	/**	 * Method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	public function authenticate()	{		$this->googlize();		return $this->client->authenticate();	}	/**	 * Verify if the client has been authenticated	 *	 * @return  boolean  Is authenticated	 *	 * @since   12.3	 */	public function isAuthenticated()	{		return $this->client->isAuthenticated();	}	/**	 * Method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	public function query($url, $data = null, $headers = null, $method = 'get')	{		$this->googlize();		return $this->client->query($url, $data, $headers, $method);	}	/**	 * Method to fill in Google-specific OAuth settings	 *	 * @return  JOAuth2Client  Google-configured Oauth2 client.	 *	 * @since   12.3	 */	protected function googlize()	{		if (!$this->client->getOption('authurl'))		{			$this->client->setOption('authurl', 'https://accounts.google.com/o/oauth2/auth');		}		if (!$this->client->getOption('tokenurl'))		{			$this->client->setOption('tokenurl', 'https://accounts.google.com/o/oauth2/token');		}		if (!$this->client->getOption('requestparams'))		{			$this->client->setOption('requestparams', Array());		}		$params = $this->client->getOption('requestparams');		if (!array_key_exists('access_type', $params))		{			$params['access_type'] = 'offline';		}		if ($params['access_type'] == 'offline' && $this->client->getOption('userefresh') === null)		{			$this->client->setOption('userefresh', true);		}		if (!array_key_exists('approval_prompt', $params))		{			$params['approval_prompt'] = 'auto';		}		$this->client->setOption('requestparams', $params);		return $this->client;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_joomlaupdate')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Joomlaupdate');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_newsfeeds.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_items') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL database iterator. * * @package     Joomla.Platform * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       12.1 */class JDatabaseIteratorMysql extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return mysql_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return mysql_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		mysql_free_result($this->cursor);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Picasa data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataPicasaPhoto extends JGoogleData{	/**	 * @var    SimpleXMLElement  The photo's XML	 * @since  12.3	 */	protected $xml;	/**	 * Constructor.	 *	 * @param   SimpleXMLElement  $xml      XML from Google	 * @param   JRegistry         $options  Google options object	 * @param   JGoogleAuth       $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(SimpleXMLElement $xml, JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->xml = $xml;		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://picasaweb.google.com/data/');		}	}	/**	 * Method to delete a Picasa photo	 *	 * @param   mixed  $match  Check for most up to date photo	 *	 * @return  boolean  Success or failure.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function delete($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$jdata = $this->query($url, null, array('GData-Version' => 2, 'If-Match' => $match), 'delete');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			if ($jdata->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}			$this->xml = null;			return true;		}		else		{			return false;		}	}	/**	 * Method to get the photo link	 *	 * @param   string  $type  Type of link to return	 *	 * @return  string  Link or false on failure	 *	 * @since   12.3	 */	public function getLink($type = 'edit')	{		$links = $this->xml->link;		foreach ($links as $link)		{			if ($link->attributes()->rel == $type)			{				return (string) $link->attributes()->href;			}		}		return false;	}	/**	 * Method to get the photo's URL	 *	 * @return  string  Link	 *	 * @since   12.3	 */	public function getURL()	{		return (string) $this->xml->children()->content->attributes()->src;	}	/**	 * Method to get the photo's thumbnails	 *	 * @return  array  An array of thumbnails	 *	 * @since   12.3	 */	public function getThumbnails()	{		$thumbs = array();		foreach ($this->xml->children('media', true)->group->thumbnail as $item)		{			$url = (string) $item->attributes()->url;			$width = (int) $item->attributes()->width;			$height = (int) $item->attributes()->height;			$thumbs[$width] = array('url' => $url, 'w' => $width, 'h' => $height);		}		return $thumbs;	}	/**	 * Method to get the title of the photo	 *	 * @return  string  Photo title	 *	 * @since   12.3	 */	public function getTitle()	{		return (string) $this->xml->children()->title;	}	/**	 * Method to get the summary of the photo	 *	 * @return  string  Photo description	 *	 * @since   12.3	 */	public function getSummary()	{		return (string) $this->xml->children()->summary;	}	/**	 * Method to get the access level of the photo	 *	 * @return  string  Photo access level	 *	 * @since   12.3	 */	public function getAccess()	{		return (string) $this->xml->children('gphoto', true)->access;	}	/**	 * Method to get the time of the photo	 *	 * @return  double  Photo time	 *	 * @since   12.3	 */	public function getTime()	{		return (double) $this->xml->children('gphoto', true)->timestamp / 1000;	}	/**	 * Method to get the size of the photo	 *	 * @return  int  Photo size	 *	 * @since   12.3	 */	public function getSize()	{		return (int) $this->xml->children('gphoto', true)->size;	}	/**	 * Method to get the height of the photo	 *	 * @return  int  Photo height	 *	 * @since   12.3	 */	public function getHeight()	{		return (int) $this->xml->children('gphoto', true)->height;	}	/**	 * Method to get the width of the photo	 *	 * @return  int  Photo width	 *	 * @since   12.3	 */	public function getWidth()	{		return (int) $this->xml->children('gphoto', true)->width;	}	/**	 * Method to set the title of the photo	 *	 * @param   string  $title  New photo title	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setTitle($title)	{		$this->xml->children()->title = $title;		return $this;	}	/**	 * Method to set the summary of the photo	 *	 * @param   string  $summary  New photo description	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setSummary($summary)	{		$this->xml->children()->summary = $summary;		return $this;	}	/**	 * Method to set the access level of the photo	 *	 * @param   string  $access  New photo access level	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setAccess($access)	{		$this->xml->children('gphoto', true)->access = $access;		return $this;	}	/**	 * Method to set the time of the photo	 *	 * @param   int  $time  New photo time	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setTime($time)	{		$this->xml->children('gphoto', true)->timestamp = $time * 1000;		return $this;	}	/**	 * Method to modify a Picasa Photo	 *	 * @param   string  $match  Optional eTag matching parameter	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	public function save($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$headers = array('GData-Version' => 2, 'Content-type' => 'application/atom+xml', 'If-Match' => $match);				$jdata = $this->query($url, $this->xml->asXML(), $headers, 'put');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}	/**	 * Refresh photo data	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function refresh()	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			$jdata = $this->query($url, null, array('GData-Version' => 2));			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><form action="<?php echo JRoute::_('index.php?option=com_cache'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?><table class="adminlist">	<thead>		<tr>			<th>				<?php echo JText::_('COM_CACHE_PURGE_EXPIRED_ITEMS'); ?>			</th>		</tr>	</thead>	<tbody>		<tr>			<td>			<p class="mod-purge-instruct"><?php echo JText::_('COM_CACHE_PURGE_INSTRUCTIONS'); ?></p>			<p class="warning"><?php echo JText::_('COM_CACHE_RESOURCE_INTENSIVE_WARNING'); ?></p>			</td>		</tr>	</tbody></table><div>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></div></div></form>
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Module table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableModule extends JTable{	/**	 * Constructor.	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__modules', 'id', $db);		$this->access = (int) JFactory::getConfig()->get('access');	}	/**	 * Overloaded check function.	 *	 * @return  boolean  True if the instance is sane and able to be stored in the database.	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// Check for valid name		if (trim($this->title) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MUSTCONTAIN_A_TITLE_MODULE'));			return false;		}		// Check the publish down date is not earlier than publish up.		if ((int) $this->publish_down > 0 && $this->publish_down < $this->publish_up)		{			// Swap the dates.			$temp = $this->publish_up;			$this->publish_up = $this->publish_down;			$this->publish_down = $temp;		}		return true;	}	/**	 * Overloaded bind function.	 *	 * @param   array  $array   Named array.	 * @param   mixed  $ignore  An optional array or space separated list of properties to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		return parent::bind($array, $ignore);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Oracle database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorOracle extends JDatabaseIteratorPdo{}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to emboss an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterEmboss extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the emboss filter.		imagefilter($this->handle, IMG_FILTER_EMBOSS);	}}
<?php/** * Joomla_Sniffs_WhiteSpace_ObjectOperatorIndentSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ObjectOperatorIndentSniff.php 288251 2009-09-10 23:50:52Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_WhiteSpace_ObjectOperatorIndentSniff. * * Checks that object operators are indented 4 spaces if they are the first * thing on a line. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_ObjectOperatorIndentSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_OBJECT_OPERATOR);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile All the tokens found in the document.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Make sure this is the first object operator in a chain of them.        $varToken = $phpcsFile->findPrevious(T_WHITESPACE, ($stackPtr - 1), null, true);        if ($varToken === false || $tokens[$varToken]['code'] !== T_VARIABLE) {            return;        }        // Make sure this is a chained call.        $next = $phpcsFile->findNext(            T_OBJECT_OPERATOR,            ($stackPtr + 1),            null,            false,            null,            true        );        if ($next === false) {            // Not a chained call.            return;        }        // Determine correct indent.        for ($i = ($varToken - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$varToken]['line']) {                $i++;                break;            }        }        $requiredIndent = 0;        if ($i >= 0 && $tokens[$i]['code'] === T_WHITESPACE) {            $requiredIndent = strlen($tokens[$i]['content']);        }        $requiredIndent += 4;        // Determine the scope of the original object operator.        $origBrackets = null;        if (isset($tokens[$stackPtr]['nested_parenthesis']) === true) {            $origBrackets = $tokens[$stackPtr]['nested_parenthesis'];        }        $origConditions = null;        if (isset($tokens[$stackPtr]['conditions']) === true) {            $origConditions = $tokens[$stackPtr]['conditions'];        }        // Check indentation of each object operator in the chain.        // If the first object operator is on a different line than        // the variable, make sure we check its indentation too.        if ($tokens[$stackPtr]['line'] > $tokens[$varToken]['line']) {            $next = $stackPtr;        }        while ($next !== false) {            // Make sure it is in the same scope, otherwise dont check indent.            $brackets = null;            if (isset($tokens[$next]['nested_parenthesis']) === true) {                $brackets = $tokens[$next]['nested_parenthesis'];            }            $conditions = null;            if (isset($tokens[$next]['conditions']) === true) {                $conditions = $tokens[$next]['conditions'];            }            if ($origBrackets === $brackets && $origConditions === $conditions) {                // Make sure it starts a line, otherwise dont check indent.                $indent = $tokens[($next - 1)];                if ($indent['code'] === T_WHITESPACE) {                    if ($indent['line'] === $tokens[$next]['line']) {                        $foundIndent = strlen($indent['content']);                    } else {                        $foundIndent = 0;                    }                    if ($foundIndent !== $requiredIndent) {// TODO AJE Allow for tab indents instead of spaces//                        $error = 'Object operator not indented correctly; expected %s spaces but found %s';//                        $data  = array(//                                  $requiredIndent,//                                  $foundIndent,//                                 );//                        $phpcsFile->addError($error, $next, 'Incorrect', $data);                    }                }                // It can't be the last thing on the line either.                $content = $phpcsFile->findNext(T_WHITESPACE, ($next + 1), null, true);                if ($tokens[$content]['line'] !== $tokens[$next]['line']) {                    $error = 'Object operator must be at the start of the line, not the end';                    $phpcsFile->addError($error, $next, 'StartOfLine');                }            }//end if            $next = $phpcsFile->findNext(                T_OBJECT_OPERATOR,                ($next + 1),                null,                false,                null,                true            );        }//end while    }//end process()}//end class?>
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseMysqli is deprecated, use JDatabaseDriverMysqli instead.', JLog::WARNING, 'deprecated');/** * MySQLi database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://php.net/manual/en/book.mysqli.php * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverMysqli instead. */class JDatabaseMysqli extends JDatabaseDriverMysqli{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><p class="nowarning"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_INPROGRESS') ?></p><div class="joomlaupdate_spinner" ></div><div id="update-progress">	<div id="extprogress">		<div class="extprogrow">			<?php			echo JHtml::_(				'image', 'media/bar.gif', JText::_('COM_JOOMLAUPDATE_VIEW_PROGRESS'),				array('class' => 'progress', 'id' => 'progress'), true			); ?>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_PERCENT'); ?></span>			<span class="extvalue" id="extpercent"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_BYTESREAD'); ?></span>			<span class="extvalue" id="extbytesin"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_BYTESEXTRACTED'); ?></span>			<span class="extvalue" id="extbytesout"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_FILESEXTRACTED'); ?></span>			<span class="extvalue" id="extfiles"></span>		</div>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Viewlevels table class. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableViewlevel extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__viewlevels', 'id', $db);	}	/**	 * Method to bind the data.	 *	 * @param   array  $array   The data to bind.	 * @param   mixed  $ignore  An array or space separated list of fields to ignore.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Bind the rules as appropriate.		if (isset($array['rules']))		{			if (is_array($array['rules']))			{				$array['rules'] = json_encode($array['rules']);			}		}		return parent::bind($array, $ignore);	}	/**	 * Method to check the current record to save	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		// Validate the title.		if ((trim($this->title)) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_VIEWLEVEL'));			return false;		}		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one PostgreSQL DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       3.0 */class JSchemaChangeitemPostgresql extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  3.0	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand === 'ADD COLUMN')			{				$result = 'SELECT column_name FROM information_schema.columns WHERE table_name='				. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD_COLUMN';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand === 'ALTER COLUMN')			{				if (strtoupper($wordArray[6]) == 'TYPE')				{					$type = '';					for ($i = 7; $i < count($wordArray); $i++)					{						$type .= $wordArray[$i] . ' ';					}					if ($pos = strpos($type, '('))					{						$type = substr($type, 0, $pos);					}					if ($pos = strpos($type, ';'))					{						$type = substr($type, 0, $pos);					}					$result = 'SELECT column_name, data_type FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND data_type=' . $this->fixQuote($type);					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $type);				}				elseif (strtoupper($wordArray[7] . ' ' . $wordArray[8]) == 'NOT NULL')				{					if (strtoupper($wordArray[6]) == 'SET')					{						// SET NOT NULL						$isNullable = $this->fixQuote('NO');					}					else					{						// DROP NOT NULL						$isNullable = $this->fixQuote('YES');					}					$result = 'SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND is_nullable=' . $isNullable;					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->checkQueryExpected = 1;					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $isNullable);				}				elseif (strtoupper($wordArray[7]) === 'DEFAULT')				{					if (strtoupper($wordArray[6]) == 'SET')					{						$isNullDef = 'IS NOT NULL';					}					else					{						// DROP DEFAULT						$isNullDef = 'IS NULL';					}					$result = 'SELECT column_name, data_type, column_default FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND column_default ' . $isNullDef;					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->checkQueryExpected = 1;					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $isNullDef);				}			}		}		elseif ($command === 'DROP INDEX')		{			if (strtoupper($wordArray[2] . $wordArray[3]) == 'IFEXISTS')			{				$idx = $this->fixQuote($wordArray[4]);			}			else			{				$idx = $this->fixQuote($wordArray[2]);			}			$result = 'SELECT * FROM pg_indexes WHERE indexname=' . $idx;			$this->queryType = 'DROP_INDEX';			$this->checkQueryExpected = 0;			$this->msgElements = array($this->fixQuote($idx));		}		elseif ($command == 'CREATE INDEX' || (strtoupper($command . $wordArray[2]) == 'CREATE UNIQUE INDEX'))		{			if ($wordArray[1] === 'UNIQUE')			{				$idx = $this->fixQuote($wordArray[3]);				$table = $this->fixQuote($wordArray[5]);			}			else			{				$idx = $this->fixQuote($wordArray[2]);				$table = $this->fixQuote($wordArray[4]);			}			$result = 'SELECT * FROM pg_indexes WHERE indexname=' . $idx . ' AND tablename=' . $table;			$this->queryType = 'ADD_INDEX';			$this->checkQueryExpected = 1;			$this->msgElements = array($table, $idx);		}		if ($command == 'CREATE TABLE')		{			if (strtoupper($wordArray[2] . $wordArray[3] . $wordArray[4]) == 'IFNOTEXISTS')			{				$table = $this->fixQuote($wordArray[5]);			}			else			{				$table = $this->fixQuote($wordArray[2]);			}			$result = 'SELECT table_name FROM information_schema.tables WHERE table_name=' . $table;			$this->queryType = 'CREATE_TABLE';			$this->checkQueryExpected = 1;			$this->msgElements = array($table);		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with PostgreSQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   3.0	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == 'integer' && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'unsigned int(10)';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   3.0	 */	private function fixQuote($string)	{		$string = str_replace('"', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php JLoader::register('TagsHelperRoute', JPATH_BASE . '/components/com_tags/helpers/route.php'); ?><div class="tagssimilar<?php echo $moduleclass_sfx; ?>"><?php if ($list) : ?>	<ul>	<?php foreach ($list as $i => $item) : ?>		<li>			<?php $item->route = new JHelperRoute; ?>			<a href="<?php echo JRoute::_(TagsHelperRoute::getItemRoute($item->content_item_id, $item->core_alias, $item->core_catid, $item->core_language, $item->type_alias, $item->router)); ?>">				<?php if (!empty($item->core_title)) :					echo htmlspecialchars($item->core_title);				endif; ?>			</a>		</li>	<?php endforeach; ?>	</ul><?php else : ?>	<span><?php echo JText::_('MOD_TAGS_SIMILAR_NO_MATCHING_TAGS'); ?></span><?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->params->get('presentation_style') == 'sliders') : ?>	<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_LINKS'), 'display-links'); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'tabs') : ?>	<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-links', JText::_('COM_CONTACT_LINKS', true)); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'plain'):?>	<?php echo '<h3>'. JText::_('COM_CONTACT_LINKS').'</h3>';  ?><?php endif; ?><div class="contact-links">	<ul class="nav nav-tabs nav-stacked">		<?php		foreach (range('a', 'e') as $char) :// letters 'a' to 'e'			$link = $this->contact->params->get('link'.$char);			$label = $this->contact->params->get('link'.$char.'_name');			if (!$link) :				continue;			endif;			// Add 'http://' if not present			$link = (0 === strpos($link, 'http')) ? $link : 'http://'.$link;			// If no label is present, take the link			$label = ($label) ? $label : $link;			?>			<li>				<a href="<?php echo $link; ?>">					<?php echo $label; ?>				</a>			</li>		<?php endforeach; ?>	</ul></div><?php if ($this->params->get('presentation_style') == 'sliders') : ?>	<?php echo JHtml::_('bootstrap.endSlide'); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'tabs') : ?>	<?php echo JHtml::_('bootstrap.endTab'); ?><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages master display controller. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/messages.php';		$view   = $this->input->get('view', 'messages');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'message' && $layout == 'edit' && !$this->checkEditId('com_messages.edit.message', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Load the submenu.		MessagesHelper::addSubmenu($this->input->get('view', 'messages'));		parent::display();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Menu Type Controller * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusControllerMenu extends JControllerForm{	/**	 * Dummy method to redirect back to standard controller	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menus', false));	}	/**	 * Method to save a menu item.	 *	 * @return  void	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app      = JFactory::getApplication();		$data     = $this->input->post->get('jform', array(), 'array');		$context  = 'com_menus.edit.menu';		$task     = $this->getTask();		$recordId = $this->input->getInt('id');		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and saved it - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));			return false;		}		// Make sure we are not trying to modify an administrator menu.		if (isset($data['client_id']) && $data['client_id'] == 1){			JError::raiseNotice(0, JText::_('COM_MENUS_MENU_TYPE_NOT_ALLOWED'));			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));			return false;		}		// Populate the row id from the session.		$data['id'] = $recordId;		// Get the model and attempt to validate the posted data.		$model	= $this->getModel('Menu');		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data	= $model->validate($form, $data);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_menus.edit.menu.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Save the data in the session.			$app->setUserState('com_menus.edit.menu.data', $data);			// Redirect back to the edit screen.			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));			return false;		}		$this->setMessage(JText::_('COM_MENUS_MENU_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the record data in the session.				$recordId = $model->getState($this->context.'.id');				$this->holdEditId($context, $recordId);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit'.$this->getRedirectToItemAppend($recordId), false));				break;			case 'save2new':				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context.'.data', null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));				break;			default:				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context.'.data', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menus', false));				break;		}	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to detect the site's FTP root for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerDetectftproot extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the data		$data = $app->input->post->get('jform', array(), 'array');		// Store the options in the session.		$vars = $model->storeOptions($data);		// Get the database model.		$ftp = new InstallationModelFtp;		// Attempt to detect the Joomla root from the ftp account.		$return = $ftp->detectFtpRoot($vars);		// Build the response object		$r = new stdClass;		$r->view = 'ftp';		// If we got a FTP root, add it to the response object		if ($return)		{			$r->root = $return;		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_SESSION_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('session') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>			</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages list actions controller. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesControllerLanguage extends JControllerForm{	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   int      $recordId  The primary key id for the item.	 * @param   string  $key        The name of the primary key variable.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $key = 'lang_id')	{		return parent::getRedirectToItemAppend($recordId, $key);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view level controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerGroup extends JControllerForm{		/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_GROUP';	/**	 * Method to check if you can save a new or existing record.	 *	 * Overrides JControllerForm::allowSave to check the core.admin permission.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowSave($data, $key = 'id')	{		return (JFactory::getUser()->authorise('core.admin', $this->option) && parent::allowSave($data, $key));	}	/**	 * Overrides JControllerForm::allowEdit	 *	 * Checks that non-Super Admins are not editing Super Admins.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		// Check if this group is a Super Admin		if (JAccess::checkGroup($data[$key], 'core.admin'))		{			// If I'm not a Super Admin, then disallow the edit.			if (!JFactory::getUser()->authorise('core.admin'))			{				return false;			}		}		return parent::allowEdit($data, $key);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentTableFeatured extends JTable{	/**	 * @param   JDatabaseDriver  A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__content_frontpage', 'content_id', $db);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if ($params->def('prepare_content', 1)){	JPluginHelper::importPlugin('content');	$module->content = JHtml::_('content.prepare', $module->content, '', 'mod_custom.content');}require JModuleHelper::getLayoutPath('mod_custom');
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JApplicationWebClient instead. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.3 * @deprecated  12.3 */class JWebClient extends JApplicationWebClient{	/**	 * Class constructor.	 *	 * @param   mixed  $userAgent       The optional user-agent string to parse.	 * @param   mixed  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   mixed  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   11.3	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		JLog::add('JWebClient is deprecated. Use JApplicationWebClient instead.', JLog::WARNING, 'deprecated');		parent::__construct($userAgent, $acceptEncoding, $acceptLanguage);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Base Class * * This is an abstracted input class used to manage retrieving data from the application environment. * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 * * @method      integer  getInt()       getInt($name, $default = null)    Get a signed integer. * @method      integer  getUint()      getUint($name, $default = null)   Get an unsigned integer. * @method      float    getFloat()     getFloat($name, $default = null)  Get a floating-point number. * @method      boolean  getBool()      getBool($name, $default = null)   Get a boolean. * @method      string   getWord()      getWord($name, $default = null) * @method      string   getAlnum()     getAlnum($name, $default = null) * @method      string   getCmd()       getCmd($name, $default = null) * @method      string   getBase64()    getBase64($name, $default = null) * @method      string   getString()    getString($name, $default = null) * @method      string   getHtml()      getHtml($name, $default = null) * @method      string   getPath()      getPath($name, $default = null) * @method      string   getUsername()  getUsername($name, $default = null) */class JInput implements Serializable, Countable{	/**	 * Options array for the JInput instance.	 *	 * @var    array	 * @since  11.1	 */	protected $options = array();	/**	 * Filter object to use.	 *	 * @var    JFilterInput	 * @since  11.1	 */	protected $filter = null;	/**	 * Input data.	 *	 * @var    array	 * @since  11.1	 */	protected $data = array();	/**	 * Input objects	 *	 * @var    array	 * @since  11.1	 */	protected $inputs = array();	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is $_REQUEST)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   11.1	 */	public function __construct($source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		if (is_null($source))		{			$this->data = &$_REQUEST;		}		else		{			$this->data = $source;		}		// Set the options for the class.		$this->options = $options;	}	/**	 * Magic method to get an input object	 *	 * @param   mixed  $name  Name of the input object to retrieve.	 *	 * @return  JInput  The request input object	 *	 * @since   11.1	 */	public function __get($name)	{		if (isset($this->inputs[$name]))		{			return $this->inputs[$name];		}		$className = 'JInput' . ucfirst($name);		if (class_exists($className))		{			$this->inputs[$name] = new $className(null, $this->options);			return $this->inputs[$name];		}		$superGlobal = '_' . strtoupper($name);		if (isset($GLOBALS[$superGlobal]))		{			$this->inputs[$name] = new JInput($GLOBALS[$superGlobal], $this->options);			return $this->inputs[$name];		}		// TODO throw an exception	}	/**	 * Get the number of variables.	 *	 * @return  integer  The number of variables in the input.	 *	 * @since   12.2	 * @see     Countable::count()	 */	public function count()	{		return count($this->data);	}	/**	 * Gets a value from the input data.	 *	 * @param   string  $name     Name of the value to get.	 * @param   mixed   $default  Default value to return if variable does not exist.	 * @param   string  $filter   Filter to apply to the value.	 *	 * @return  mixed  The filtered input value.	 *	 * @since   11.1	 */	public function get($name, $default = null, $filter = 'cmd')	{		if (isset($this->data[$name]))		{			return $this->filter->clean($this->data[$name], $filter);		}		return $default;	}	/**	 * Gets an array of values from the request.	 *	 * @param   array  $vars        Associative array of keys and filter types to apply.	 * @param   mixed  $datasource  Array to retrieve data from, or null	 *	 * @return  mixed  The filtered input data.	 *	 * @since   11.1	 */	public function getArray(array $vars, $datasource = null)	{		$results = array();		foreach ($vars as $k => $v)		{			if (is_array($v))			{				if (is_null($datasource))				{					$results[$k] = $this->getArray($v, $this->get($k, null, 'array'));				}				else				{					$results[$k] = $this->getArray($v, $datasource[$k]);				}			}			else			{				if (is_null($datasource))				{					$results[$k] = $this->get($k, null, $v);				}				elseif (isset($datasource[$k]))				{					$results[$k] = $this->filter->clean($datasource[$k], $v);				}				else				{					$results[$k] = $this->filter->clean(null, $v);				}			}		}		return $results;	}	/**	 * Sets a value	 *	 * @param   string  $name   Name of the value to set.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   11.1	 */	public function set($name, $value)	{		$this->data[$name] = $value;	}	/**	 * Define a value. The value will only be set if there's no value for the name or if it is null.	 *	 * @param   string  $name   Name of the value to define.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   12.1	 */	public function def($name, $value)	{		if (isset($this->data[$name]))		{			return;		}		$this->data[$name] = $value;	}	/**	 * Magic method to get filtered input data.	 *	 * @param   string  $name       Name of the filter type prefixed with 'get'.	 * @param   array   $arguments  [0] The name of the variable [1] The default value.	 *	 * @return  mixed   The filtered input value.	 *	 * @since   11.1	 */	public function __call($name, $arguments)	{		if (substr($name, 0, 3) == 'get')		{			$filter = substr($name, 3);			$default = null;			if (isset($arguments[1]))			{				$default = $arguments[1];			}			return $this->get($arguments[0], $default, $filter);		}	}	/**	 * Gets the request method.	 *	 * @return  string   The request method.	 *	 * @since   11.1	 */	public function getMethod()	{		$method = strtoupper($_SERVER['REQUEST_METHOD']);		return $method;	}	/**	 * Method to serialize the input.	 *	 * @return  string  The serialized input.	 *	 * @since   12.1	 */	public function serialize()	{		// Load all of the inputs.		$this->loadAllInputs();		// Remove $_ENV and $_SERVER from the inputs.		$inputs = $this->inputs;		unset($inputs['env']);		unset($inputs['server']);		// Serialize the options, data, and inputs.		return serialize(array($this->options, $this->data, $inputs));	}	/**	 * Method to unserialize the input.	 *	 * @param   string  $input  The serialized input.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function unserialize($input)	{		// Unserialize the options, data, and inputs.		list($this->options, $this->data, $this->inputs) = unserialize($input);		// Load the filter.		if (isset($this->options['filter']))		{			$this->filter = $this->options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}	}	/**	 * Method to load all of the global inputs.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function loadAllInputs()	{		static $loaded = false;		if (!$loaded)		{			// Load up all the globals.			foreach ($GLOBALS as $global => $data)			{				// Check if the global starts with an underscore.				if (strpos($global, '_') === 0)				{					// Convert global name to input name.					$global = strtolower($global);					$global = substr($global, 1);					// Get the input.					$this->$global;				}			}			$loaded = true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$headerText	= JString::trim($params->get('header_text'));$footerText	= JString::trim($params->get('footer_text'));$list = ModLanguagesHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_languages', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extension Manager Templates Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelWarnings extends JModelList{	/**	 * Extension Type	 * @var	string	 */	public $type = 'warnings';	/**	 * Return the byte value of a particular string.	 *	 * @param   string  $val  String optionally with G, M or K suffix	 *	 * @return  integer   size in bytes	 *	 * @since 1.6	 */	public function return_bytes($val)	{		$val = trim($val);		$last = strtolower($val{strlen($val) - 1});		switch ($last)		{			// The 'G' modifier is available since PHP 5.1.0			case 'g':				$val *= 1024;			case 'm':				$val *= 1024;			case 'k':				$val *= 1024;		}		return $val;	}	/**	 * Load the data.	 *	 * @return  array  Messages	 *	 * @since   1.6	 */	public function getItems()	{		static $messages;		if ($messages)		{			return $messages;		}		$messages = array();		$file_uploads = ini_get('file_uploads');		if (!$file_uploads)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADSDISABLED'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADISDISABLEDDESC'));		}		$upload_dir = ini_get('upload_tmp_dir');		if (!$upload_dir)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSETDESC'));		}		else		{			if (!is_writeable($upload_dir))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLEDESC', $upload_dir));			}		}		$config = JFactory::getConfig();		$tmp_path = $config->get('tmp_path');		if (!$tmp_path)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSETDESC'));		}		else		{			if (!is_writeable($tmp_path))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLEDESC', $tmp_path));			}		}		$memory_limit = $this->return_bytes(ini_get('memory_limit'));		if ($memory_limit < (8 * 1024 * 1024))		{			// 8MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYDESC'));		}		elseif ($memory_limit < (16 * 1024 * 1024))		{			// 16MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYDESC'));		}		$post_max_size = $this->return_bytes(ini_get('post_max_size'));		$upload_max_filesize = $this->return_bytes(ini_get('upload_max_filesize'));		if ($post_max_size < $upload_max_filesize)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOST'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOSTDESC'));		}		if ($post_max_size < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZEDESC'));		}		if ($upload_max_filesize < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZEDESC'));		}		return $messages;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_SYSTEM_INFORMATION'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="250">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;				</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_BUILT_ON'); ?></strong>				</td>				<td>					<?php echo $this->info['php'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_COLLATION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbcollation'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['phpversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEB_SERVER'); ?></strong>				</td>				<td>					<?php echo JHtml::_('system.server', $this->info['server']); ?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEBSERVER_TO_PHP_INTERFACE'); ?></strong>				</td>				<td>					<?php echo $this->info['sapi_name'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_JOOMLA_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['version'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PLATFORM_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['platform'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_USER_AGENT'); ?></strong>				</td>				<td>					<?php echo $this->info['useragent'];?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Utility class for icons. * * @package     Joomla.Libraries * @subpackage  HTML * @since       2.5 */abstract class JHtmlIcons{	/**	 * Method to generate html code for a list of buttons	 *	 * @param   array  $buttons  Array of buttons	 *	 * @return  string	 *	 * @since   2.5	 */	public static function buttons($buttons)	{		$html = array();		foreach ($buttons as $button)		{			$html[] = JHtml::_('icons.button', $button);		}		return implode($html);	}	/**	 * Method to generate html code for a list of buttons	 *	 * @param   array  $button  Button properties	 *	 * @return  string	 *	 * @since   2.5	 */	public static function button($button)	{		if (isset($button['access']))		{			if (is_bool($button['access']))			{				if ($button['access'] == false)				{					return '';				}			}			else			{				// Get the user object to verify permissions				$user = JFactory::getUser();				// Take each pair of permission, context values.				for ($i = 0, $n = count($button['access']); $i < $n; $i += 2)				{					if (!$user->authorise($button['access'][$i], $button['access'][$i + 1]))					{						return '';					}				}			}		}		// Instantiate a new JLayoutFile instance and render the layout		$layout = new JLayoutFile('joomla.quickicons.icon');		return $layout->render($button);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (!empty($version)) : ?>	<p align="center"><?php echo $version ?></p><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of plugins. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.5 */class PluginsViewPlugins extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->state      = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_PLUGINS_MSG_MANAGE_NO_PLUGINS'),				'warning'			);		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo = PluginsHelper::getActions();		JToolbarHelper::title(JText::_('COM_PLUGINS_MANAGER_PLUGINS'), 'plugin');		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('plugin.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('plugins.publish', 'JTOOLBAR_ENABLE', true);			JToolbarHelper::unpublish('plugins.unpublish', 'JTOOLBAR_DISABLE', true);			JToolbarHelper::checkin('plugins.checkin');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_plugins');		}		JToolbarHelper::help('JHELP_EXTENSIONS_PLUGIN_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_plugins&view=plugins');		JHtmlSidebar::addFilter(				JText::_('JOPTION_SELECT_PUBLISHED'),				'filter_enabled',				JHtml::_('select.options', PluginsHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.enabled'), true)		);		JHtmlSidebar::addFilter(				JText::_('COM_PLUGINS_OPTION_FOLDER'),				'filter_folder',				JHtml::_('select.options', PluginsHelper::folderOptions(), 'value', 'text', $this->state->get('filter.folder'))		);		JHtmlSidebar::addFilter(				JText::_('JOPTION_SELECT_ACCESS'),				'filter_access',				JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		$this->sidebar = JHtmlSidebar::render();	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(				'ordering' => JText::_('JGRID_HEADING_ORDERING'),				'a.state' => JText::_('JSTATUS'),				'name' => JText::_('JGLOBAL_TITLE'),				'folder' => JText::_('COM_PLUGINS_FOLDER_HEADING'),				'element' => JText::_('COM_PLUGINS_ELEMENT_HEADING'),				'access' => JText::_('JGRID_HEADING_ACCESS'),				'extension_id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * Squiz_Sniffs_WhiteSpace_SemicolonSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: SemicolonSpacingSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Ensure there is no whitespace before a semicolon <b>;</b>. * * Example: * <b class="bad">echo $a ;</b> * <b class="good">echo $a;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SemicolonSpacingSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_SEMICOLON);    }//function    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param integer                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $prevType = $tokens[($stackPtr - 1)]['code'];        if(in_array($prevType, PHP_CodeSniffer_Tokens::$emptyTokens) === true)        {            $nonSpace = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$emptyTokens, ($stackPtr - 2), null, true);            $expected = $tokens[$nonSpace]['content'].';';            $found    = $phpcsFile->getTokensAsString($nonSpace, ($stackPtr - $nonSpace)).';';            $error    = sprintf('Space found before semicolon; expected "%s" but found "%s"'            , $expected, $found);            $phpcsFile->addError($error, $stackPtr, 'Incorrect');        }    }//function}//class
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JApplicationCli instead. * * @package     Joomla.Platform * @subpackage  Application * @since       11.1 * @deprecated  12.3 Use JApplicationCli instead. */class JCli extends JApplicationCli{	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @see     loadDispatcher()	 * @since   11.1	 * @deprecated  12.3 Use JApplicationCli instead.	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		JLog::add('JCli is deprecated. Use JApplicationCli instead.', JLog::WARNING, 'deprecated');		parent::__construct($input, $config, $dispatcher);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit messages user configuration. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesViewConfig extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Bind the record to the form.		$this->form->bind($this->item);		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Clients list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerClients extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_BANNERS_CLIENTS';	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Client', $prefix = 'BannersModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Download model. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersModelDownload extends JModelForm{	protected $_context = 'com_banners.tracks';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$input = JFactory::getApplication()->input;		$basename = $input->cookie->getString(JApplication::getHash($this->_context.'.basename'), '__SITE__');		$this->setState('basename', $basename);		$compressed = $input->cookie->getInt(JApplication::getHash($this->_context.'.compressed'), 1);		$this->setState('compressed', $compressed);	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_banners.download', 'download', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		$data = array(			'basename'		=> $this->getState('basename'),			'compressed'	=> $this->getState('compressed')		);		$this->preprocessData('com_banners.download', $data);		return $data;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to add an edge detect effect to an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterEdgedetect extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			// @codeCoverageIgnoreStart			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Perform the edge detection filter.		imagefilter($this->handle, IMG_FILTER_EDGEDETECT);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to negate the colors of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterNegate extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the negative filter.		imagefilter($this->handle, IMG_FILTER_NEGATE);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');/** * An Archive handling class * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchive{	/**	 * @var    array  The array of instantiated archive adapters.	 * @since  12.1	 */	protected static $adapters = array();	/**	 * Extract an archive file to a directory.	 *	 * @param   string  $archivename  The name of the archive file	 * @param   string  $extractdir   Directory to unpack into	 *	 * @return  boolean  True for success	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public static function extract($archivename, $extractdir)	{		$untar = false;		$result = false;		$ext = JFile::getExt(strtolower($archivename));		// Check if a tar is embedded...gzip/bzip2 can just be plain files!		if (JFile::getExt(JFile::stripExt(strtolower($archivename))) == 'tar')		{			$untar = true;		}		switch ($ext)		{			case 'zip':				$adapter = self::getAdapter('zip');				if ($adapter)				{					$result = $adapter->extract($archivename, $extractdir);				}				break;			case 'tar':				$adapter = self::getAdapter('tar');				if ($adapter)				{					$result = $adapter->extract($archivename, $extractdir);				}				break;			case 'tgz':				// This format is a tarball gzip'd				$untar = true;			case 'gz':			case 'gzip':				// This may just be an individual file (e.g. sql script)				$adapter = self::getAdapter('gzip');				if ($adapter)				{					$config = JFactory::getConfig();					$tmpfname = $config->get('tmp_path') . '/' . uniqid('gzip');					$gzresult = $adapter->extract($archivename, $tmpfname);					if ($gzresult instanceof Exception)					{						@unlink($tmpfname);						return false;					}					if ($untar)					{						// Try to untar the file						$tadapter = self::getAdapter('tar');						if ($tadapter)						{							$result = $tadapter->extract($tmpfname, $extractdir);						}					}					else					{						$path = JPath::clean($extractdir);						JFolder::create($path);						$result = JFile::copy($tmpfname, $path . '/' . JFile::stripExt(basename(strtolower($archivename))), null, 1);					}					@unlink($tmpfname);				}				break;			case 'tbz2':				// This format is a tarball bzip2'd				$untar = true;			case 'bz2':			case 'bzip2':				// This may just be an individual file (e.g. sql script)				$adapter = self::getAdapter('bzip2');				if ($adapter)				{					$config = JFactory::getConfig();					$tmpfname = $config->get('tmp_path') . '/' . uniqid('bzip2');					$bzresult = $adapter->extract($archivename, $tmpfname);					if ($bzresult instanceof Exception)					{						@unlink($tmpfname);						return false;					}					if ($untar)					{						// Try to untar the file						$tadapter = self::getAdapter('tar');						if ($tadapter)						{							$result = $tadapter->extract($tmpfname, $extractdir);						}					}					else					{						$path = JPath::clean($extractdir);						JFolder::create($path);						$result = JFile::copy($tmpfname, $path . '/' . JFile::stripExt(basename(strtolower($archivename))), null, 1);					}					@unlink($tmpfname);				}				break;			default:				throw new InvalidArgumentException('Unknown Archive Type');		}		if (!$result || $result instanceof Exception)		{			return false;		}		return true;	}	/**	 * Get a file compression adapter.	 *	 * @param   string  $type  The type of adapter (bzip2|gzip|tar|zip).	 *	 * @return  object  JArchiveExtractable	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public static function getAdapter($type)	{		if (!isset(self::$adapters[$type]))		{			// Try to load the adapter object			$class = 'JArchive' . ucfirst($type);			if (!class_exists($class))			{				throw new UnexpectedValueException('Unable to load archive', 500);			}			self::$adapters[$type] = new $class;		}		return self::$adapters[$type];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_version * * @package     Joomla.Administrator * @subpackage  mod_version * @since       1.6 */abstract class ModVersionHelper{	/**	 * Get the member items of the submenu.	 *	 * @param   JRegistry  &$params  The parameters object.	 *	 * @return  string  String containing the current Joomla version based on the selected format.	 */	public static function getVersion(&$params)	{		$format  = $params->get('format', 'short');		$product = $params->get('product', 0);		$method  = 'get' . ucfirst($format) . "Version";		// Get the joomla version		$instance = new JVersion;		$version  = call_user_func(array($instance, $method));		if ($format == 'short' && !empty($product))		{			// Add the product name to short format only (in long format it's included)			$version = $instance->PRODUCT . ' ' . $version;		}		return $version;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_CACHE_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('cache') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		<?php if (isset($this->data['cache_handler']) && $this->data['cache_handler'] == 'memcache' || $this->data['session_handler'] == 'memcache') : ?>					<?php			foreach ($this->form->getFieldset('memcache') as $mfield):			?>					<li><?php echo $mfield->label; ?>					<?php echo $mfield->input; ?></li>			<?php			endforeach;			?>		<?php endif; ?>		</ul></fieldset></div>
