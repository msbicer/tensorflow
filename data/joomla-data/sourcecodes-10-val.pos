<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexer', __DIR__ . '/indexer.php');/** * Result class for the Finder indexer package. * * This class uses magic __get() and __set() methods to prevent properties * being added that might confuse the system. All properties not explicitly * declared will be pushed into the elements array and can be accessed * explicitly using the getElement() method. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerResult{	/**	 * An array of extra result properties.	 *	 * @var    array	 * @since  2.5	 */	protected $elements = array();	/**	 * This array tells the indexer which properties should be indexed and what	 * weights to use for those properties.	 *	 * @var    array	 * @since  2.5	 */	protected $instructions = array(		FinderIndexer::TITLE_CONTEXT => array('title', 'subtitle', 'id'),		FinderIndexer::TEXT_CONTEXT => array('summary', 'body'),		FinderIndexer::META_CONTEXT => array('meta', 'list_price', 'sale_price'),		FinderIndexer::PATH_CONTEXT => array('path', 'alias'),		FinderIndexer::MISC_CONTEXT => array('comments')	);	/**	 * The indexer will use this data to create taxonomy mapping entries for	 * the item so that it can be filtered by type, label, category,	 * or whatever.	 *	 * @var    array	 * @since  2.5	 */	protected $taxonomy = array();	/**	 * The content URL.	 *	 * @var    string	 * @since  2.5	 */	public $url;	/**	 * The content route.	 *	 * @var    string	 * @since  2.5	 */	public $route;	/**	 * The content title.	 *	 * @var    string	 * @since  2.5	 */	public $title;	/**	 * The content description.	 *	 * @var    string	 * @since  2.5	 */	public $description;	/**	 * The published state of the result.	 *	 * @var    integer	 * @since  2.5	 */	public $published;	/**	 * The content published state.	 *	 * @var    integer	 * @since  2.5	 */	public $state;	/**	 * The content access level.	 *	 * @var    integer	 * @since  2.5	 */	public $access;	/**	 * The content language.	 *	 * @var    string	 * @since  2.5	 */	public $language = '*';	/**	 * The publishing start date.	 *	 * @var    string	 * @since  2.5	 */	public $publish_start_date;	/**	 * The publishing end date.	 *	 * @var    string	 * @since  2.5	 */	public $publish_end_date;	/**	 * The generic start date.	 *	 * @var    string	 * @since  2.5	 */	public $start_date;	/**	 * The generic end date.	 *	 * @var    string	 * @since  2.5	 */	public $end_date;	/**	 * The item list price.	 *	 * @var    mixed	 * @since  2.5	 */	public $list_price;	/**	 * The item sale price.	 *	 * @var    mixed	 * @since  2.5	 */	public $sale_price;	/**	 * The content type id. This is set by the adapter.	 *	 * @var    integer	 * @since  2.5	 */	public $type_id;	/**	 * The default language for content.	 *	 * @var    string	 * @since  3.0.2	 */	public $defaultLanguage;	/**	 * Constructor	 *	 * @since   3.0.3	 */	public function __construct()	{		$this->defaultLanguage = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');	}	/**	 * The magic set method is used to push additional values into the elements	 * array in order to preserve the cleanliness of the object.	 *	 * @param   string  $name   The name of the element.	 * @param   mixed   $value  The value of the element.	 *	 * @return  void	 *	 * @since   2.5	 */	public function __set($name, $value)	{		$this->elements[$name] = $value;	}	/**	 * The magic get method is used to retrieve additional element values	 * from the elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  mixed  The value of the element if set, null otherwise.	 *	 * @since   2.5	 */	public function __get($name)	{		// Get the element value if set.		if (array_key_exists($name, $this->elements))		{			return $this->elements[$name];		}		else		{			return null;		}	}	/**	 * The magic isset method is used to check the state of additional element	 * values in the elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  boolean  True if set, false otherwise.	 *	 * @since   2.5	 */	public function __isset($name)	{		return isset($this->elements[$name]);	}	/**	 * The magic unset method is used to unset additional element values in the	 * elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  void	 *	 * @since   2.5	 */	public function __unset($name)	{		unset($this->elements[$name]);	}	/**	 * Method to retrieve additional element values from the elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  mixed  The value of the element if set, null otherwise.	 *	 * @since   2.5	 */	public function getElement($name)	{		// Get the element value if set.		if (array_key_exists($name, $this->elements))		{			return $this->elements[$name];		}		else		{			return null;		}	}	/**	 * Method to set additional element values in the elements array.	 *	 * @param   string  $name   The name of the element.	 * @param   mixed   $value  The value of the element.	 *	 * @return  void	 *	 * @since   2.5	 */	public function setElement($name, $value)	{		$this->elements[$name] = $value;	}	/**	 * Method to get all processing instructions.	 *	 * @return  array  An array of processing instructions.	 *	 * @since   2.5	 */	public function getInstructions()	{		return $this->instructions;	}	/**	 * Method to add a processing instruction for an item property.	 *	 * @param   string  $group     The group to associate the property with.	 * @param   string  $property  The property to process.	 *	 * @return  void	 *	 * @since   2.5	 */	public function addInstruction($group, $property)	{		// Check if the group exists. We can't add instructions for unknown groups.		if (array_key_exists($group, $this->instructions))		{			// Check if the property exists in the group.			if (!in_array($property, $this->instructions[$group]))			{				// Add the property to the group.				$this->instructions[$group][] = $property;			}		}	}	/**	 * Method to remove a processing instruction for an item property.	 *	 * @param   string  $group     The group to associate the property with.	 * @param   string  $property  The property to process.	 *	 * @return  void	 *	 * @since   2.5	 */	public function removeInstruction($group, $property)	{		// Check if the group exists. We can't remove instructions for unknown groups.		if (array_key_exists($group, $this->instructions))		{			// Search for the property in the group.			$key = array_search($property, $this->instructions[$group]);			// If the property was found, remove it.			if ($key !== false)			{				unset($this->instructions[$group][$key]);			}		}	}	/**	 * Method to get the taxonomy maps for an item.	 *	 * @param   string  $branch  The taxonomy branch to get. [optional]	 *	 * @return  array  An array of taxonomy maps.	 *	 * @since   2.5	 */	public function getTaxonomy($branch = null)	{		// Get the taxonomy branch if available.		if ($branch !== null && isset($this->taxonomy[$branch]))		{			// Filter the input.			$branch = preg_replace('#[^\pL\pM\pN\p{Pi}\p{Pf}\'+-.,]+#mui', ' ', $branch);			return $this->taxonomy[$branch];		}		return $this->taxonomy;	}	/**	 * Method to add a taxonomy map for an item.	 *	 * @param   string   $branch  The title of the taxonomy branch to add the node to.	 * @param   string   $title   The title of the taxonomy node.	 * @param   integer  $state   The published state of the taxonomy node. [optional]	 * @param   integer  $access  The access level of the taxonomy node. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	public function addTaxonomy($branch, $title, $state = 1, $access = 1)	{		// Filter the input.		$branch = preg_replace('#[^\pL\pM\pN\p{Pi}\p{Pf}\'+-.,]+#mui', ' ', $branch);		// Create the taxonomy node.		$node = new JObject;		$node->title = $title;		$node->state = (int) $state;		$node->access = (int) $access;		// Add the node to the taxonomy branch.		$this->taxonomy[$branch][$node->title] = $node;	}	/**	 * Method to set the item language	 *	 * @return  void	 *	 * @since   3.0	 */	public function setLanguage()	{		if ($this->language == '*' || $this->language == '')		{			$this->language = $this->defaultLanguage;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Less * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('lessphp.lessc');/** * Help system class * * @package     Joomla.Libraries * @subpackage  Less * @since       3.0 */class JLessFormatterJoomla extends lessc_formatter_classic{	public $disableSingle = true;	public $breakSelectors = true;	public $assignSeparator = ": ";	public $selectorSeparator = ",";	public $indentChar = "\t";}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Admin Controller * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminController extends JControllerLegacy{}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Log Entry class * * This class is designed to hold log entries for either writing to an engine, or for * supported engines, retrieving lists and building in memory (PHP based) search operations. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogEntry{	/**	 * Application responsible for log entry.	 * @var    string	 * @since  11.1	 */	public $category;	/**	 * The date the message was logged.	 * @var    JDate	 * @since  11.1	 */	public $date;	/**	 * Message to be logged.	 * @var    string	 * @since  11.1	 */	public $message;	/**	 * The priority of the message to be logged.	 * @var    string	 * @since  11.1	 * @see    $priorities	 */	public $priority = JLog::INFO;	/**	 * List of available log priority levels [Based on the Syslog default levels].	 * @var    array	 * @since  11.1	 */	protected $priorities = array(		JLog::EMERGENCY,		JLog::ALERT,		JLog::CRITICAL,		JLog::ERROR,		JLog::WARNING,		JLog::NOTICE,		JLog::INFO,		JLog::DEBUG	);	/**	 * Constructor	 *	 * @param   string  $message   The message to log.	 * @param   string  $priority  Message priority based on {$this->priorities}.	 * @param   string  $category  Type of entry	 * @param   string  $date      Date of entry (defaults to now if not specified or blank)	 *	 * @since   11.1	 */	public function __construct($message, $priority = JLog::INFO, $category = '', $date = null)	{		$this->message = (string) $message;		// Sanitize the priority.		if (!in_array($priority, $this->priorities, true))		{			$priority = JLog::INFO;		}		$this->priority = $priority;		// Sanitize category if it exists.		if (!empty($category))		{			$this->category = (string) strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $category));		}		// Get the date as a JDate object.		$this->date = new JDate($date ? $date : 'now');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller = JControllerLegacy::getInstance('Search');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Each object represents one query, which is one line from a DDL SQL query. * This class is used to check the site's database to see if the DDL query has been run. * If not, it provides the ability to fix the database by re-running the DDL query. * The queries are parsed from the update files in the folder * administrator/components/com_admin/sql/updates/<database>. * These updates are run automatically if the site was updated using com_installer. * However, it is possible that the program files could be updated without udpating * the database (for example, if a user just copies the new files over the top of an * existing installation). * * This is an abstract class. We need to extend it for each database and add a * buildCheckQuery() method that creates the query to check that a DDL query has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */abstract class JSchemaChangeitem{	/**	 * Update file: full path file name where query was found	 *	 * @var    string	 * @since  2.5	 */	public $file = null;	/**	 * Update query: query used to change the db schema (one line from the file)	 *	 * @var    string	 * @since  2.5	 */	public $updateQuery = null;	/**	 * Check query: query used to check the db schema	 *	 * @var    string	 * @since  2.5	 */	public $checkQuery = null;	/**	 * Check query result: expected result of check query if database is up to date	 *	 * @var    string	 * @since  2.5	 */	public $checkQueryExpected = 1;	/**	 * JDatabaseDriver object	 *	 * @var    JDatabaseDriver	 * @since  2.5	 */	public $db = null;	/**	 * Query type: To be used in building a language key for a	 * message to tell user what was checked / changed	 * Possible values: ADD_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX	 *	 * @var    string	 * @since  2.5	 */	public $queryType = null;	/**	 * Array with values for use in a JText::sprintf statment indicating what was checked	 *	 * Tells you what the message should be, based on which elements are defined, as follows:	 *     For ADD_TABLE: table	 *     For ADD_COLUMN: table, column	 *     For CHANGE_COLUMN_TYPE: table, column, type	 *     For ADD_INDEX: table, index	 *	 * @var    array	 * @since  2.5	 */	public $msgElements = array();	/**	 * Checked status	 *	 * @var    integer   0=not checked, -1=skipped, -2=failed, 1=succeeded	 * @since  2.5	 */	public $checkStatus = 0;	/**	 * Rerun status	 *	 * @var    int   0=not rerun, -1=skipped, -2=failed, 1=succeeded	 * @since  2.5	 */	public $rerunStatus = 0;	/**	 * Constructor: builds check query and message from $updateQuery	 *	 * @param   JDatabaseDriver  $db     Database connector object	 * @param   string           $file   Full path name of the sql file	 * @param   string           $query  Text of the sql query (one line of the file)	 *	 * @since   2.5	 */	public function __construct($db, $file, $query)	{		$this->updateQuery = $query;		$this->file = $file;		$this->db = $db;		$this->buildCheckQuery();	}	/**	 * Returns a reference to the JSchemaChangeitem object.	 *	 * @param   JDatabaseDriver  $db     Database connector object	 * @param   string           $file   Full path name of the sql file	 * @param   string           $query  Text of the sql query (one line of the file)	 *	 * @return  JSchemaChangeitem instance based on the database driver	 *	 * @since   2.5	 * @throws  RuntimeException if class for database driver not found	 */	public static function getInstance($db, $file, $query)	{		// Get the class name		$dbname = $db->name;		if ($dbname == 'mysqli')		{			$dbname = 'mysql';		}		elseif ($dbname == 'sqlazure')		{			$dbname = 'sqlsrv';		}		$class = 'JSchemaChangeitem' . ucfirst($dbname);		// If the class exists, return it.		if (class_exists($class))		{			return new $class($db, $file, $query);		}		throw new RuntimeException(sprintf('JSchemaChangeitem child class not found for the %s database driver', $dbname), 500);	}	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	abstract protected function buildCheckQuery();	/**	 * Runs the check query and checks that 1 row is returned	 * If yes, return true, otherwise return false	 *	 * @return  boolean  true on success, false otherwise	 *	 * @since  2.5	 */	public function check()	{		$this->checkStatus = -1;		if ($this->checkQuery)		{			$this->db->setQuery($this->checkQuery);			$rows = $this->db->loadObject();			if ($rows !== false)			{				if (count($rows) === $this->checkQueryExpected)				{					$this->checkStatus = 1;				}				else				{					$this->checkStatus = -2;				}			}			else			{				$this->checkStatus = -2;			}		}		return $this->checkStatus;	}	/**	 * Runs the update query to apply the change to the database	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		if ($this->checkStatus === -2)		{			// At this point we have a failed query			$this->db->setQuery($this->updateQuery);			if ($this->db->execute())			{				if ($this->check())				{					$this->checkStatus = 1;					$this->rerunStatus = 1;				}				else				{					$this->rerunStatus = -2;				}			}			else			{				$this->rerunStatus = -2;			}		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="registration-complete<?php echo $this->pageclass_sfx;?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of search terms. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.5 */class SearchViewSearches extends JViewLegacy{	protected $enabled;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->enabled		= $this->state->params->get('enabled');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= SearchHelper::getActions();		JToolbarHelper::title(JText::_('COM_SEARCH_MANAGER_SEARCHES'), 'search.png');		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::custom('searches.reset', 'refresh.png', 'refresh_f2.png', 'JSEARCH_RESET', false);		}		JToolbarHelper::divider();		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_search');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_SEARCH');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Mail * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('phpmailer.phpmailer');/** * Email Class.  Provides a common interface to send email from the Joomla! Platform * * @package     Joomla.Platform * @subpackage  Mail * @since       11.1 */class JMail extends PHPMailer{	/**	 * @var    array  JMail instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * @var    string  Charset of the message.	 * @since  11.1	 */	public $CharSet = 'utf-8';	/**	 * Constructor	 */	public function __construct()	{		// PHPMailer has an issue using the relative path for its language files		$this->SetLanguage('joomla', JPATH_PLATFORM . '/phpmailer/language/');	}	/**	 * Returns the global email object, only creating it	 * if it doesn't already exist.	 *	 * NOTE: If you need an instance to use that does not have the global configuration	 * values, use an id string that is not 'Joomla'.	 *	 * @param   string  $id  The id string for the JMail instance [optional]	 *	 * @return  JMail  The global JMail object	 *	 * @since   11.1	 */	public static function getInstance($id = 'Joomla')	{		if (empty(self::$instances[$id]))		{			self::$instances[$id] = new JMail;		}		return self::$instances[$id];	}	/**	 * Send the mail	 *	 * @return  mixed  True if successful; JError if using legacy tree (no exception thrown in that case).	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function Send()	{		if (($this->Mailer == 'mail') && !function_exists('mail'))		{			if (class_exists('JError'))			{				return JError::raiseNotice(500, JText::_('JLIB_MAIL_FUNCTION_DISABLED'));			}			else			{				throw new RuntimeException(sprintf('%s::Send mail not enabled.', get_class($this)));			}		}		@$result = parent::Send();		if ($result == false)		{			if (class_exists('JError'))			{				$result = JError::raiseNotice(500, JText::_($this->ErrorInfo));			}			else			{				throw new RuntimeException(sprintf('%s::Send failed: "%s".', get_class($this), $this->ErrorInfo));			}		}		return $result;	}	/**	 * Set the email sender	 *	 * @param   array  $from  email address and Name of sender	 *                        <code>array([0] => email Address [1] => Name)</code>	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setSender($from)	{		if (is_array($from))		{			// If $from is an array we assume it has an address and a name			if (isset($from[2]))			{				// If it is an array with entries, use them				$this->SetFrom(JMailHelper::cleanLine($from[0]), JMailHelper::cleanLine($from[1]), (bool) $from[2]);			}			else			{				$this->SetFrom(JMailHelper::cleanLine($from[0]), JMailHelper::cleanLine($from[1]));			}		}		elseif (is_string($from))		{			// If it is a string we assume it is just the address			$this->SetFrom(JMailHelper::cleanLine($from));		}		else		{			// If it is neither, we throw a warning			JLog::add(JText::sprintf('JLIB_MAIL_INVALID_EMAIL_SENDER', $from), JLog::WARNING, 'jerror');		}		return $this;	}	/**	 * Set the email subject	 *	 * @param   string  $subject  Subject of the email	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setSubject($subject)	{		$this->Subject = JMailHelper::cleanLine($subject);		return $this;	}	/**	 * Set the email body	 *	 * @param   string  $content  Body of the email	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setBody($content)	{		/*		 * Filter the Body		 * TODO: Check for XSS		 */		$this->Body = JMailHelper::cleanText($content);		return $this;	}	/**	 * Add recipients to the email.	 *	 * @param   mixed   $recipient  Either a string or array of strings [email address(es)]	 * @param   mixed   $name       Either a string or array of strings [name(s)]	 * @param   string  $method     The parent method's name.	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	protected function add($recipient, $name = '', $method = 'AddAddress')	{		// If the recipient is an array, add each recipient... otherwise just add the one		if (is_array($recipient))		{			if (is_array($name))			{				$combined = array_combine($recipient, $name);				if ($combined === false)				{					throw new InvalidArgumentException("The number of elements for each array isn't equal.");				}				foreach ($combined as $recipientEmail => $recipientName)				{					$recipientEmail = JMailHelper::cleanLine($recipientEmail);					$recipientName = JMailHelper::cleanLine($recipientName);					call_user_func('parent::' . $method, $recipientEmail, $recipientName);				}			}			else			{				$name = JMailHelper::cleanLine($name);				foreach ($recipient as $to)				{					$to = JMailHelper::cleanLine($to);					call_user_func('parent::' . $method, $to, $name);				}			}		}		else		{			$recipient = JMailHelper::cleanLine($recipient);			call_user_func('parent::' . $method, $recipient, $name);		}		return $this;	}	/**	 * Add recipients to the email	 *	 * @param   mixed  $recipient  Either a string or array of strings [email address(es)]	 * @param   mixed  $name       Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addRecipient($recipient, $name = '')	{		$this->add($recipient, $name, 'AddAddress');		return $this;	}	/**	 * Add carbon copy recipients to the email	 *	 * @param   mixed  $cc    Either a string or array of strings [email address(es)]	 * @param   mixed  $name  Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addCC($cc, $name = '')	{		// If the carbon copy recipient is an array, add each recipient... otherwise just add the one		if (isset($cc))		{			$this->add($cc, $name, 'AddCC');		}		return $this;	}	/**	 * Add blind carbon copy recipients to the email	 *	 * @param   mixed  $bcc   Either a string or array of strings [email address(es)]	 * @param   mixed  $name  Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addBCC($bcc, $name = '')	{		// If the blind carbon copy recipient is an array, add each recipient... otherwise just add the one		if (isset($bcc))		{			$this->add($bcc, $name, 'AddBCC');		}		return $this;	}	/**	 * Add file attachments to the email	 *	 * @param   mixed  $attachment  Either a string or array of strings [filenames]	 * @param   mixed  $name        Either a string or array of strings [names]	 * @param   mixed  $encoding    The encoding of the attachment	 * @param   mixed  $type        The mime type	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 */	public function addAttachment($attachment, $name = '', $encoding = 'base64', $type = 'application/octet-stream')	{		// If the file attachments is an array, add each file... otherwise just add the one		if (isset($attachment))		{			if (is_array($attachment))			{				if (!empty($name) && count($attachment) != count($name))				{					throw new InvalidArgumentException("The number of attachments must be equal with the number of name");				}				foreach ($attachment as $key => $file)				{					if (!empty($name))					{						parent::AddAttachment($file, $name[$key], $encoding, $type);					}					else					{						parent::AddAttachment($file, $name, $encoding, $type);					}				}			}			else			{				parent::AddAttachment($attachment, $name, $encoding, $type);			}		}		return $this;	}	/**	 * Add Reply to email address(es) to the email	 *	 * @param   mixed  $replyto  Either a string or array of strings [email address(es)]	 * @param   mixed  $name     Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addReplyTo($replyto, $name = '')	{		$this->add($replyto, $name, 'AddReplyTo');		return $this;	}	/**	 * Use sendmail for sending the email	 *	 * @param   string  $sendmail  Path to sendmail [optional]	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function useSendmail($sendmail = null)	{		$this->Sendmail = $sendmail;		if (!empty($this->Sendmail))		{			$this->IsSendmail();			return true;		}		else		{			$this->IsMail();			return false;		}	}	/**	 * Use SMTP for sending the email	 *	 * @param   string   $auth    SMTP Authentication [optional]	 * @param   string   $host    SMTP Host [optional]	 * @param   string   $user    SMTP Username [optional]	 * @param   string   $pass    SMTP Password [optional]	 * @param   string   $secure  Use secure methods	 * @param   integer  $port    The SMTP port	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function useSMTP($auth = null, $host = null, $user = null, $pass = null, $secure = null, $port = 25)	{		$this->SMTPAuth = $auth;		$this->Host = $host;		$this->Username = $user;		$this->Password = $pass;		$this->Port = $port;		if ($secure == 'ssl' || $secure == 'tls')		{			$this->SMTPSecure = $secure;		}		if (($this->SMTPAuth !== null && $this->Host !== null && $this->Username !== null && $this->Password !== null)			|| ($this->SMTPAuth === null && $this->Host !== null))		{			$this->IsSMTP();			return true;		}		else		{			$this->IsMail();			return false;		}	}	/**	 * Function to send an email	 *	 * @param   string   $from         From email address	 * @param   string   $fromName     From name	 * @param   mixed    $recipient    Recipient email address(es)	 * @param   string   $subject      email subject	 * @param   string   $body         Message body	 * @param   boolean  $mode         false = plain text, true = HTML	 * @param   mixed    $cc           CC email address(es)	 * @param   mixed    $bcc          BCC email address(es)	 * @param   mixed    $attachment   Attachment file name(s)	 * @param   mixed    $replyTo      Reply to email address(es)	 * @param   mixed    $replyToName  Reply to name(s)	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function sendMail($from, $fromName, $recipient, $subject, $body, $mode = false, $cc = null, $bcc = null, $attachment = null,		$replyTo = null, $replyToName = null)	{		$this->setSubject($subject);		$this->setBody($body);		// Are we sending the email as HTML?		if ($mode)		{			$this->IsHTML(true);		}		$this->addRecipient($recipient);		$this->addCC($cc);		$this->addBCC($bcc);		$this->addAttachment($attachment);		// Take care of reply email addresses		if (is_array($replyTo))		{			$numReplyTo = count($replyTo);			for ($i = 0; $i < $numReplyTo; $i++)			{				$this->addReplyTo(array($replyTo[$i], $replyToName[$i]));			}		}		elseif (isset($replyTo))		{			$this->addReplyTo(array($replyTo, $replyToName));		}		// Add sender to replyTo only if no replyTo received		$autoReplyTo = (empty($this->ReplyTo)) ? true : false;		$this->setSender(array($from, $fromName, $autoReplyTo));		return $this->Send();	}	/**	 * Sends mail to administrator for approval of a user submission	 *	 * @param   string  $adminName   Name of administrator	 * @param   string  $adminEmail  Email address of administrator	 * @param   string  $email       [NOT USED TODO: Deprecate?]	 * @param   string  $type        Type of item to approve	 * @param   string  $title       Title of item to approve	 * @param   string  $author      Author of item to approve	 * @param   string  $url         A URL to included in the mail	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function sendAdminMail($adminName, $adminEmail, $email, $type, $title, $author, $url = null)	{		$subject = JText::sprintf('JLIB_MAIL_USER_SUBMITTED', $type);		$message = sprintf(JText::_('JLIB_MAIL_MSG_ADMIN'), $adminName, $type, $title, $author, $url, $url, 'administrator', $type);		$message .= JText::_('JLIB_MAIL_MSG') . "\n";		$this->addRecipient($adminEmail);		$this->setSubject($subject);		$this->setBody($message);		return $this->Send();	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="login-form" class="form-vertical"><?php if ($params->get('greeting')) : ?>	<div class="login-greeting">	<?php if ($params->get('name') == 0) : {		echo JText::sprintf('MOD_LOGIN_HINAME', htmlspecialchars($user->get('name')));	} else : {		echo JText::sprintf('MOD_LOGIN_HINAME', htmlspecialchars($user->get('username')));	} endif; ?>	</div><?php endif; ?>	<div class="logout-button">		<input type="submit" name="Submit" class="btn btn-primary" value="<?php echo JText::_('JLOGOUT'); ?>" />		<input type="hidden" name="option" value="com_users" />		<input type="hidden" name="task" value="user.logout" />		<input type="hidden" name="return" value="<?php echo $return; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Chrome Styles Form Field class for the Joomla Platform. * * @package     Joomla.Libraries * @subpackage  Form * @since       3.0 */class JFormFieldChromeStyle extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  3.0	 */	public $type = 'ChromeStyle';	/**	 * Method to get the list of template chrome style options	 * grouped by template.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   3.0	 */	protected function getGroups()	{		$groups = array();		// Add Module Style Field		$tmp = '---' . JText::_('JLIB_FORM_VALUE_FROM_TEMPLATE') . '---';		$groups[$tmp][] = JHtml::_('select.option', '0', JText::_('JLIB_FORM_VALUE_INHERITED'));		$templateStyles = $this->getTemplateModuleStyles();		// Create one new option object for each available style, grouped by templates		foreach ($templateStyles as $template => $styles)		{			$template = ucfirst($template);			$groups[$template] = array();			foreach ($styles as $style)			{				$tmp = JHtml::_('select.option', $template . '-' . $style, $style);				$groups[$template][] = $tmp;			}		}		reset($groups);		return $groups;	}	/**	 * Method to get the templates module styles.	 *	 * @return  array  The array of styles, grouped by templates.	 *	 * @since   3.0	 */	protected function getTemplateModuleStyles()	{		$moduleStyles = array();		$templates = array($this->getSystemTemplate());		$templates = array_merge($templates, ModulesHelper::getTemplates('site'));		foreach ($templates as $template)		{			$modulesFilePath = JPATH_SITE . '/templates/' . $template->element . '/html/modules.php';			// Is there modules.php for that template?			if (file_exists($modulesFilePath))			{				$modulesFileData = file_get_contents($modulesFilePath);				preg_match_all('/function[\s\t]*modChrome\_([a-z0-9\-\_]*)[\s\t]*\(/i', $modulesFileData, $styles);				if (!array_key_exists($template->element, $moduleStyles))				{					$moduleStyles[$template->element] = array();				}				$moduleStyles[$template->element] = $styles[1];			}		}		return $moduleStyles;	}	/**	 * Method to get the system template as an object.	 *	 * @return  array  The object of system template.	 *	 * @since   3.0	 */	protected function getSystemTemplate()	{		$template = new stdClass;		$template->element = 'system';		$template->name    = 'system';		$template->enabled = 1;		return $template;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$serverinfo = $params->get('serverinfo');$siteinfo	= $params->get('siteinfo');$list = ModStatsHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_stats', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banner controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerBanner extends JControllerForm{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_BANNERS_BANNER';	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user       = JFactory::getUser();		$filter     = $this->input->getInt('filter_category_id');		$categoryId = JArrayHelper::getValue($data, 'catid', $filter, 'int');		$allow      = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow	= $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absence of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method override to check if you can edit an existing record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user		= JFactory::getUser();		$recordId	= (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return $user->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   string  $model  The model	 *	 * @return  boolean  True on success.	 *	 * @since	2.5	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model	= $this->getModel('Banner', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_banners&view=banners' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Login view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersViewLogin extends JViewLegacy{	protected $form;	protected $params;	protected $state;	protected $user;	/**	 * Method to display the view.	 *	 * @param   string	The template file to include	 * @since   1.5	 */	public function display($tpl = null)	{		// Get the view data.		$this->user		= JFactory::getUser();		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->get('params');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$user		= JFactory::getUser();		$login		= $user->get('guest') ? true : false;		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', $login ? JText::_('JLOGIN') : JText::_('JLOGOUT'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */// Set the platform root path as a constant if necessary.if (!defined('JPATH_PLATFORM')){	define('JPATH_PLATFORM', __DIR__);}// Detect the native operating system type.$os = strtoupper(substr(PHP_OS, 0, 3));if (!defined('IS_WIN')){	define('IS_WIN', ($os === 'WIN') ? true : false);}if (!defined('IS_UNIX')){	define('IS_UNIX', (IS_WIN === false) ? true : false);}// Import the platform version library if necessary.if (!class_exists('JPlatform')){	require_once JPATH_PLATFORM . '/platform.php';}// Import the library loader if necessary.if (!class_exists('JLoader')){	require_once JPATH_PLATFORM . '/loader.php';}class_exists('JLoader') or die;// Setup the autoloaders.JLoader::setup();// Import the base Joomla Platform libraries.JLoader::import('joomla.factory');// Register classes for compatability with PHP 5.3if (version_compare(PHP_VERSION, '5.4.0', '<')){	JLoader::register('JsonSerializable', JPATH_PLATFORM . '/compat/jsonserializable.php');}// Register classes that don't follow one file per class naming conventions.JLoader::register('JText', JPATH_PLATFORM . '/joomla/language/text.php');JLoader::register('JRoute', JPATH_PLATFORM . '/joomla/application/route.php');
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_DEBUG_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('debug') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Installation * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Define the base path and require the other definesdefine('JPATH_BASE', dirname(__DIR__));require_once __DIR__ . '/defines.php';// Launch the applicationrequire_once __DIR__ . '/framework.php';// Register the Installation applicationJLoader::registerPrefix('Installation', JPATH_INSTALLATION);// Register the application's router due to non-standard includeJLoader::register('JRouterInstallation', __DIR__ . '/router.php');
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Component renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererComponent extends JDocumentRenderer{	/**	 * Renders a component script and returns the results as a string	 *	 * @param   string  $component  The name of the component to render	 * @param   array   $params     Associative array of values	 * @param   string  $content    Content script	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($component = null, $params = array(), $content = null)	{		return $content;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="custom<?php echo $moduleclass_sfx ?>" <?php if ($params->get('backgroundimage')) : ?> style="background-image:url(<?php echo $params->get('backgroundimage');?>)"<?php endif;?> >	<?php echo $module->content;?></div>
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */// We are a valid entry point.const _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}// Get the framework.require_once JPATH_LIBRARIES . '/import.legacy.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';// Configure error reporting to maximum for CLI output.error_reporting(E_ALL);ini_set('display_errors', 1);// Load Library language$lang = JFactory::getLanguage();// Try the files_joomla file in the current language (without allowing the loading of the file in the default language)$lang->load('files_joomla.sys', JPATH_SITE, null, false, false)// Fallback to the files_joomla file in the default language|| $lang->load('files_joomla.sys', JPATH_SITE, null, true);/** * A command line cron job to attempt to remove files that should have been deleted at update. * * @package  Joomla.CLI * @since    3.0 */class DeletefilesCli extends JApplicationCli{	/**	 * Entry point for CLI script	 *	 * @return  void	 *	 * @since   3.0	 */	public function doExecute()	{		// Import the dependencies		jimport('joomla.filesystem.file');		jimport('joomla.filesystem.folder');		// We need the update script		JLoader::register('JoomlaInstallerScript', JPATH_ADMINISTRATOR . '/components/com_admin/script.php');		// Instantiate the class		$class = new JoomlaInstallerScript;		// Run the delete method		$class->deleteUnexistingFiles();	}}// Instantiate the application object, passing the class name to JCli::getInstance// and use chaining to execute the application.JApplicationCli::getInstance('DeletefilesCli')->execute();
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_SITE_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('site') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>	</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Clicks Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldImpMade extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ImpMade';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$onclick	= ' onclick="document.id(\''.$this->id.'\').value=\'0\';"';		return '<input class="input-small" type="text" name="'.$this->name.'" id="'.$this->id.'" value="'.htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8').'" readonly="readonly" /> <a class="btn" '.$onclick.'><i class="icon-refresh"></i> '.JText::_('COM_BANNERS_RESET_IMPMADE').'</a>';	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="logout <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<?php if (($this->params->get('logoutdescription_show') == 1 && str_replace(' ', '', $this->params->get('logout_description')) != '')|| $this->params->get('logout_image') != '') : ?>	<div class="logout-description">	<?php endif; ?>		<?php if ($this->params->get('logoutdescription_show') == 1) : ?>			<?php echo $this->params->get('logout_description'); ?>		<?php endif; ?>		<?php if (($this->params->get('logout_image') != '')) :?>			<img src="<?php echo $this->escape($this->params->get('logout_image')); ?>" class="thumbnail pull-right logout-image" alt="<?php echo JTEXT::_('COM_USER_LOGOUT_IMAGE_ALT')?>"/>		<?php endif; ?>	<?php if (($this->params->get('logoutdescription_show') == 1 && str_replace(' ', '', $this->params->get('logout_description')) != '')|| $this->params->get('logout_image') != '') : ?>	</div>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=user.logout'); ?>" method="post" class="form-horizontal">		<div class="control-group">			<div class="controls">				<button type="submit" class="btn btn-primary"><span class="icon-arrow-left icon-white"></span> <?php echo JText::_('JLOGOUT'); ?></button>			</div>		</div>		<input type="hidden" name="return" value="<?php echo base64_encode($this->params->get('logout_redirect_url', $this->form->getValue('return'))); ?>" />		<?php echo JHtml::_('form.token'); ?>	</form></div>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_NEWSFEEDS_NO_ARTICLES'); ?>	 </p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>	<?php if ($this->params->get('show_pagination_limit')) : ?>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	<?php endif; ?>	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	</fieldset>	<table class="category">		<?php if ($this->params->get('show_headings') == 1) : ?>		<thead><tr>				<th class="item-title" id="tableOrdering">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_FEED_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<?php if ($this->params->get('show_articles')) : ?>				<th class="item-num-art" id="tableOrdering2">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_NUM_ARTICLES', 'a.numarticles', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>				<?php if ($this->params->get('show_link')) : ?>				<th class="item-link" id="tableOrdering3">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_FEED_LINK', 'a.link', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $item) : ?>		<?php if ($this->items[$i]->published == 0) : ?>			<tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">		<?php else: ?>			<tr class="cat-list-row<?php echo $i % 2; ?>" >		<?php endif; ?>					<td class="item-title">						<a href="<?php echo JRoute::_(NewsFeedsHelperRoute::getNewsfeedRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</td>					<?php  if ($this->params->get('show_articles')) : ?>						<td class="item-num-art">							<?php echo $item->numarticles; ?>						</td>					<?php  endif; ?>					<?php  if ($this->params->get('show_link')) : ?>						<td class="item-link">							<a href="<?php echo $item->link; ?>"><?php echo $item->link; ?></a>						</td>					<?php  endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php if ($this->params->get('show_pagination')) : ?>	<div class="pagination">	<?php if ($this->params->def('show_pagination_results', 1)) : ?>		<p class="counter">			<?php echo $this->pagination->getPagesCounter(); ?>		</p>	<?php endif; ?>	<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform String Normalise Class * * @package     Joomla.Platform * @subpackage  String * @since       11.3 */abstract class JStringNormalise{	/**	 * Method to convert a string from camel case.	 *	 * This method offers two modes. Grouped allows for splitting on groups of uppercase characters as follows:	 *	 * "FooBarABCDef"            becomes  array("Foo", "Bar", "ABC", "Def")	 * "JFooBar"                 becomes  array("J", "Foo", "Bar")	 * "J001FooBar002"           becomes  array("J001", "Foo", "Bar002")	 * "abcDef"                  becomes  array("abc", "Def")	 * "abc_defGhi_Jkl"          becomes  array("abc_def", "Ghi_Jkl")	 * "ThisIsA_NASAAstronaut"   becomes  array("This", "Is", "A_NASA", "Astronaut"))	 * "JohnFitzgerald_Kennedy"  becomes  array("John", "Fitzgerald_Kennedy"))	 *	 * Non-grouped will split strings at each uppercase character.	 *	 * @param   string   $input    The string input (ASCII only).	 * @param   boolean  $grouped  Optionally allows splitting on groups of uppercase characters.	 *	 * @return  string  The space separated string.	 *	 * @since   12.1	 */	public static function fromCamelCase($input, $grouped = false)	{		return $grouped			? preg_split('/(?<=[^A-Z_])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][^A-Z_])/x', $input)			: trim(preg_replace('#([A-Z])#', ' $1', $input));	}	/**	 * Method to convert a string into camel case.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The camel case string.	 *	 * @since   11.3	 */	public static function toCamelCase($input)	{		// Convert words to uppercase and then remove spaces.		$input = self::toSpaceSeparated($input);		$input = ucwords($input);		$input = str_ireplace(' ', '', $input);		return $input;	}	/**	 * Method to convert a string into dash separated form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The dash separated string.	 *	 * @since   11.3	 */	public static function toDashSeparated($input)	{		// Convert spaces and underscores to dashes.		$input = preg_replace('#[ \-_]+#', '-', $input);		return $input;	}	/**	 * Method to convert a string into space separated form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The space separated string.	 *	 * @since   11.3	 */	public static function toSpaceSeparated($input)	{		// Convert underscores and dashes to spaces.		$input = preg_replace('#[ \-_]+#', ' ', $input);		return $input;	}	/**	 * Method to convert a string into underscore separated form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The underscore separated string.	 *	 * @since   11.3	 */	public static function toUnderscoreSeparated($input)	{		// Convert spaces and dashes to underscores.		$input = preg_replace('#[ \-_]+#', '_', $input);		return $input;	}	/**	 * Method to convert a string into variable form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The variable string.	 *	 * @since   11.3	 */	public static function toVariable($input)	{		// Remove dashes and underscores, then convert to camel case.		$input = self::toSpaceSeparated($input);		$input = self::toCamelCase($input);		// Remove leading digits.		$input = preg_replace('#^[0-9]+.*$#', '', $input);		// Lowercase the first character.		$first = substr($input, 0, 1);		$first = strtolower($first);		// Replace the first character with the lowercase character.		$input = substr_replace($input, $first, 0, 1);		return $input;	}	/**	 * Method to convert a string into key form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The key string.	 *	 * @since   11.3	 */	public static function toKey($input)	{		// Remove spaces and dashes, then convert to lower case.		$input = self::toUnderscoreSeparated($input);		$input = strtolower($input);		return $input;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR.'/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();$user = JFactory::getUser();?><fieldset class="adminform">	<legend><?php echo JText::_('COM_TEMPLATES_MENUS_ASSIGNMENT'); ?></legend>		<label id="jform_menuselect-lbl" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label>		<button type="button" class="jform-rightbtn" onclick="$$('.chk-menulink').each(function(el) { el.checked = !el.checked; });">			<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>		</button>		<div class="clr"></div>		<div id="menu-assignment">		<?php foreach ($menuTypes as &$type) : ?>			<ul class="menu-links">				<button type="button" class="jform-rightbtn" onclick="$$('.<?php echo $type->menutype; ?>').each(function(el) { el.checked = !el.checked; });">					<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>				</button>				<div class="clr"></div>				<h3><?php echo $type->title ? $type->title : $type->menutype; ?></h3>				<?php foreach ($type->links as $link) : ?>					<li class="menu-link">						<input type="checkbox" name="jform[assigned][]" value="<?php echo (int) $link->value;?>" id="link<?php echo (int) $link->value;?>"<?php if ($link->template_style_id == $this->item->id):?> checked="checked"<?php endif;?><?php if ($link->checked_out && $link->checked_out != $user->id):?> disabled="disabled"<?php else:?> class="chk-menulink <?php echo $type->menutype; ?>"<?php endif;?> />						<label for="link<?php echo (int) $link->value;?>" >							<?php echo $link->text; ?>						</label>					</li>				<?php endforeach; ?>			</ul>		<?php endforeach; ?>		</div></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Calendar data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataCalendar extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/calendar');		}	}	/**	 * Method to remove a calendar from a user's calendar list	 *	 * @param   string  $calendarID  ID of calendar to delete	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function removeCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$jdata = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID), null, null, 'delete');			if ($jdata->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to get a calendar's settings from Google	 *	 * @param   string  $calendarID  ID of calendar to get.	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function getCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$jdata = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID));			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to add a calendar to a user's Google Calendar list	 *	 * @param   string  $calendarID  New calendar ID	 * @param   array   $options     New calendar settings	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function addCalendar($calendarID, $options = array())	{		if ($this->isAuthenticated())		{			$options['id'] = $calendarID;			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList';			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve calendar list from Google	 *	 * @param   array  $options   Search settings	 * @param   int    $maxpages  Maximum number of pages of calendars to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listCalendars($options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar's settings	 *	 * @param   string  $calendarID  Calendar ID	 * @param   array   $options     Calendar settings	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editCalendarSettings($calendarID, $options)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID);			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to clear a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar to clear	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function clearCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$data = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/clear', null, null, 'post');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to delete a calendar from Google	 *	 * @param   string  $calendarID  ID of calendar to delete.	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function deleteCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$data = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID), null, null, 'delete');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to create a Google Calendar	 *	 * @param   string  $title    New calendar title	 * @param   array   $options  New calendar settings	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function createCalendar($title, $options = array())	{		if ($this->isAuthenticated())		{			$options['summary'] = $title;			$url = 'https://www.googleapis.com/calendar/v3/calendars';			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar	 *	 * @param   string  $calendarID  Calendar ID.	 * @param   array   $options     Calendar settings.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editCalendar($calendarID, $options)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID);			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			$data = json_decode($jdata->body, true);			if ($data && array_key_exists('items', $data))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to delete an event from a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar to delete from	 * @param   string  $eventID     ID of event to delete.	 *	 * @return  boolean  Success or failure.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function deleteEvent($calendarID, $eventID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID);			$data = $this->query($url, null, null, 'delete');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to get an event from a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar	 * @param   string  $eventID     ID of event to get	 * @param   array   $options     Options to send to Google	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function getEvent($calendarID, $eventID, $options = array())	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList/';			$url .= urlencode($calendarID) . '/events/' . urlencode($eventID) . '?' . http_build_query($options);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to create a Google Calendar event	 *	 * @param   string   $calendarID  ID of calendar	 * @param   mixed    $start       Event start time	 * @param   mixed    $end         Event end time	 * @param   array    $options     New event settings	 * @param   mixed    $timezone    Timezone for event	 * @param   boolean  $allday      Treat event as an all-day event	 * @param   boolean  $notify      Notify participants	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws InvalidArgumentException	 * @throws UnexpectedValueException	 */	public function createEvent($calendarID, $start, $end = false, $options = array(), $timezone = false, $allday = false, $notify = false)	{		if ($this->isAuthenticated())		{			if (!$start)			{				$startobj = new DateTime;			}			elseif (is_int($start))			{				$startobj = new DateTime;				$startobj->setTimestamp($start);			}			elseif (is_string($start))			{				$startobj = new DateTime($start);			}			elseif (is_a($start, 'DateTime'))			{				$startobj = $start;			}			else			{				throw new InvalidArgumentException('Invalid event start time.');			}			if (!$end)			{				$endobj = $startobj;			}			elseif (is_int($end))			{				$endobj = new DateTime;				$endobj->setTimestamp($end);			}			elseif (is_string($end))			{				$endobj = new DateTime($end);			}			elseif (is_a($end, 'DateTime'))			{				$endobj = $end;			}			else			{				throw new InvalidArgumentException('Invalid event end time.');			}			if ($allday)			{				$options['start'] = array('date' => $startobj->format('Y-m-d'));				$options['end'] = array('date' => $endobj->format('Y-m-d'));			}			else			{				$options['start'] = array('dateTime' => $startobj->format(DateTime::RFC3339));				$options['end'] = array('dateTime' => $endobj->format(DateTime::RFC3339));			}			if ($timezone === true)			{				$options['start']['timeZone'] = $startobj->getTimezone()->getName();				$options['end']['timeZone'] = $endobj->getTimezone()->getName();			}			elseif (is_a($timezone, 'DateTimeZone'))			{				$options['start']['timeZone'] = $timezone->getName();				$options['end']['timeZone'] = $timezone->getName();			}			elseif (is_string($timezone))			{				$options['start']['timeZone'] = $timezone;				$options['end']['timeZone'] = $timezone;			}			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events' . ($notify ? '?sendNotifications=true' : '');			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of events on a Google calendar	 *	 * @param   string  $calendarID  Calendar ID	 * @param   string  $eventID     ID of the event to change	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Minimum number of events to retrieve (more may be retrieved depending on page size)	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listRecurrences($calendarID, $eventID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID) . '/instances';			$url .= '?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of events on a Google calendar	 *	 * @param   string  $calendarID  Calendar ID	 * @param   array   $options     Calendar settings	 * @param   int     $maxpages    Cycle through pages of data to generate a complete list	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listEvents($calendarID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to move an event from one calendar to another	 *	 * @param   string   $calendarID  Calendar ID	 * @param   string   $eventID     ID of the event to change	 * @param   string   $destID      Calendar ID	 * @param   boolean  $notify      Notify participants of changes	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function moveEvent($calendarID, $eventID, $destID, $notify = false)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID) . '/move';			$url .= '?destination=' . $destID . ($notify ? '&sendNotifications=true' : '');			$jdata = $this->query($url, null, null, 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar event	 *	 * @param   string   $calendarID  Calendar ID	 * @param   string   $eventID     ID of the event to change	 * @param   array    $options     Event settings	 * @param   boolean  $notify      Notify participants of changes	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editEvent($calendarID, $eventID, $options, $notify = false)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/calendars/';			$url .= urlencode($calendarID) . '/events/' . urlencode($eventID) . ($notify ? '?sendNotifications=true' : '');			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Install View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewInstallHtml extends JViewHtml{	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelSetup	 * @since   3.1	 */	protected $model;	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * The installation tasks to perform	 *	 * @var    array	 * @since  3.1	 */	protected $tasks = array();	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options = $this->model->getOptions();		/*		 * Prepare the tasks array		 * Note: The first character of the task *MUST* be capitalised or the application will not find the task		 */		$this->tasks[] = ($this->options['db_old'] == 'remove') ? 'Database_remove' : 'Database_backup';		$this->tasks[] = 'Database';		if ($this->options['sample_file'])		{			$this->tasks[] = 'Sample';		}		$this->tasks[] = 'Config';		if ($this->options['summary_email'])		{			$this->tasks[] = 'Email';		}		return parent::render();	}}
