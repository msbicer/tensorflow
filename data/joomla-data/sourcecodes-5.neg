<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Administrator Application helper class. * Provide many supporting API functions. * * @package     Joomla.Administrator * @subpackage  Application * @since       1.5 */class JAdministratorHelper{	/**	 * Return the application option string [main component].	 *	 * @return  string  The component to access.	 *	 * @since   1.5	 */	public static function findOption()	{		$app = JFactory::getApplication();		$option = strtolower($app->input->get('option'));		$app->loadIdentity();		$user = $app->getIdentity();		if ($user->get('guest') || !$user->authorise('core.login.admin'))		{			$option = 'com_login';		}		if (empty($option))		{			$option = 'com_cpanel';		}		$app->input->set('option', $option);		return $option;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a template style. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesViewSource extends JViewLegacy{	protected $form;	protected $ftp;	protected $source;	protected $state;	protected $template;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->ftp		= JClientHelper::setCredentialsFromRequest('ftp');		$this->source	= $this->get('Source');		$this->state	= $this->get('State');		$this->template	= $this->get('Template');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$canDo		= TemplatesHelper::getActions();		JToolbarHelper::title(JText::_('COM_TEMPLATES_MANAGER_EDIT_FILE'), 'thememanager');		// Can save the item.		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('source.apply');			JToolbarHelper::save('source.save');		}		JToolbarHelper::cancel('source.cancel');		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_TEMPLATE_MANAGER_TEMPLATES_EDIT_SOURCE');	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php $images = json_decode($displayData->images); ?><?php if (isset($images->image_intro) && !empty($images->image_intro)) : ?>	<?php $imgfloat = (empty($images->float_intro)) ? $params->get('float_intro') : $images->float_intro; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_intro_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_intro_caption) .'"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_intro); ?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>"/> </div><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Cache page type object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheControllerPage extends JCacheController{	/**	 * @var    integer  ID property for the cache page object.	 * @since  11.1	 */	protected $_id;	/**	 * @var    string  Cache group	 * @since  11.1	 */	protected $_group;	/**	 * @var    object  Cache lock test	 * @since  11.1	 */	protected $_locktest = null;	/**	 * Get the cached page data	 *	 * @param   string   $id          The cache data id	 * @param   string   $group       The cache data group	 * @param   boolean  $wrkarounds  True to use wrkarounds	 *	 * @return  boolean  True if the cache is hit (false else)	 *	 * @since   11.1	 */	public function get($id = false, $group = 'page', $wrkarounds = true)	{		// If an id is not given, generate it from the request		if ($id == false)		{			$id = $this->_makeId();		}		// If the etag matches the page id ... set a no change header and exit : utilize browser cache		if (!headers_sent() && isset($_SERVER['HTTP_IF_NONE_MATCH']))		{			$etag = stripslashes($_SERVER['HTTP_IF_NONE_MATCH']);			if ($etag == $id)			{				$browserCache = isset($this->options['browsercache']) ? $this->options['browsercache'] : false;				if ($browserCache)				{					$this->_noChange();				}			}		}		// We got a cache hit... set the etag header and echo the page data		$data = $this->cache->get($id, $group);		$this->_locktest = new stdClass;		$this->_locktest->locked = null;		$this->_locktest->locklooped = null;		if ($data === false)		{			$this->_locktest = $this->cache->lock($id, $group);			if ($this->_locktest->locked == true && $this->_locktest->locklooped == true)			{				$data = $this->cache->get($id, $group);			}		}		if ($data !== false)		{			$data = unserialize(trim($data));			if ($wrkarounds === true)			{				$data = JCache::getWorkarounds($data);			}			$this->_setEtag($id);			if ($this->_locktest->locked == true)			{				$this->cache->unlock($id, $group);			}			return $data;		}		// Set id and group placeholders		$this->_id = $id;		$this->_group = $group;		return false;	}	/**	 * Stop the cache buffer and store the cached data	 *	 * @param   mixed    $data        The data to store	 * @param   string   $id          The cache data id	 * @param   string   $group       The cache data group	 * @param   boolean  $wrkarounds  True to use wrkarounds	 *	 * @return  boolean  True if cache stored	 *	 * @since   11.1	 */	public function store($data, $id, $group = null, $wrkarounds = true)	{		// Get page data from JResponse body		$data = JResponse::getBody();		// Get id and group and reset the placeholders		$id = $this->_id;		$group = $this->_group;		$this->_id = null;		$this->_group = null;		// Only attempt to store if page data exists		if ($data)		{			$data = $wrkarounds == false ? $data : JCache::setWorkarounds($data);			if ($this->_locktest->locked == false)			{				$this->_locktest = $this->cache->lock($id, $group);			}			$sucess = $this->cache->store(serialize($data), $id, $group);			if ($this->_locktest->locked == true)			{				$this->cache->unlock($id, $group);			}			return $sucess;		}		return false;	}	/**	 * Generate a page cache id	 *	 * @return  string  MD5 Hash : page cache id	 *	 * @since   11.1	 * @todo    Discuss whether this should be coupled to a data hash or a request	 * hash ... perhaps hashed with a serialized request	 */	protected function _makeId()	{		return JCache::makeId();	}	/**	 * There is no change in page data so send an	 * unmodified header and die gracefully	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _noChange()	{		$app = JFactory::getApplication();		// Send not modified header and exit gracefully		header('HTTP/1.x 304 Not Modified', true);		$app->close();	}	/**	 * Set the ETag header in the response	 *	 * @param   string  $etag  The entity tag (etag) to set	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _setEtag($etag)	{		JResponse::setHeader('ETag', $etag, true);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving a category, the articles associated with the category, * sibling, child and parent categories. * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelCategory extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * Model context string.	 *	 * @var		string	 */	protected $_context = 'com_content.category';	/**	 * The category that applies.	 *	 * @access	protected	 * @var		object	 */	protected $_category = null;	/**	 * The list of other newfeed categories.	 *	 * @access	protected	 * @var		array	 */	protected $_categories = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'state', 'a.state',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'modified', 'a.modified',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'hits', 'a.hits',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'author', 'a.author'			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * return	void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('site');		$pk  = $app->input->getInt('id');		$this->setState('category.id', $pk);		// Load the parameters. Merge Global and Menu Item params into new object		$params = $app->getParams();		$menuParams = new JRegistry;		if ($menu = $app->getMenu()->getActive())		{			$menuParams->loadString($menu->params);		}		$mergedParams = clone $menuParams;		$mergedParams->merge($params);		$this->setState('params', $mergedParams);		$user		= JFactory::getUser();				// Create a new query object.		$db		= $this->getDbo();		$query	= $db->getQuery(true);		$groups	= implode(',', $user->getAuthorisedViewLevels());		if ((!$user->authorise('core.edit.state', 'com_content')) &&  (!$user->authorise('core.edit', 'com_content'))){			// limit to published for people who can't edit or edit.state.			$this->setState('filter.published', 1);			// Filter by start and end dates.			$nullDate = $db->quote($db->getNullDate());			$nowDate = $db->quote(JFactory::getDate()->toSQL());			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');		}		else		{			$this->setState('filter.published', array(0, 1, 2));		}		// process show_noauth parameter		if (!$params->get('show_noauth'))		{			$this->setState('filter.access', true);		}		else		{			$this->setState('filter.access', false);		}		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		// filter.order		$itemid = $app->input->get('id', 0, 'int') . ':' . $app->input->get('Itemid', 0, 'int');		$orderCol = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'a.ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order_Dir',			'filter_order_Dir', '', 'cmd');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$this->setState('list.start', $app->input->get('limitstart', 0, 'uint'));		// set limit for query. If list, use parameter. If blog, add blog parameters for limit.		if (($app->input->get('layout') == 'blog') || $params->get('layout_type') == 'blog')		{			$limit = $params->get('num_leading_articles') + $params->get('num_intro_articles') + $params->get('num_links');			$this->setState('list.links', $params->get('num_links'));		}		else		{			$limit = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.limit', 'limit', $params->get('display_num'), 'uint');		}		$this->setState('list.limit', $limit);		// set the depth of the category query based on parameter		$showSubcategories = $params->get('show_subcategory_content', '0');		if ($showSubcategories)		{			$this->setState('filter.max_category_levels', $params->get('show_subcategory_content', '1'));			$this->setState('filter.subcategories', true);		}		$this->setState('filter.language', JLanguageMultilang::isEnabled());		$this->setState('layout', $app->input->get('layout'));	}	/**	 * Get the articles in the category	 *	 * @return  mixed  An array of articles or false if an error occurs.	 * @since   1.5	 */	function getItems()	{		$params = $this->getState()->get('params');		$limit = $this->getState('list.limit');		if ($this->_articles === null && $category = $this->getCategory())		{			$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));			$model->setState('params', JFactory::getApplication()->getParams());			$model->setState('filter.category_id', $category->id);			$model->setState('filter.published', $this->getState('filter.published'));			$model->setState('filter.access', $this->getState('filter.access'));			$model->setState('filter.language', $this->getState('filter.language'));			$model->setState('list.ordering', $this->_buildContentOrderBy());			$model->setState('list.start', $this->getState('list.start'));			$model->setState('list.limit', $limit);			$model->setState('list.direction', $this->getState('list.direction'));			$model->setState('list.filter', $this->getState('list.filter'));			// filter.subcategories indicates whether to include articles from subcategories in the list or blog			$model->setState('filter.subcategories', $this->getState('filter.subcategories'));			$model->setState('filter.max_category_levels', $this->setState('filter.max_category_levels'));			$model->setState('list.links', $this->getState('list.links'));			if ($limit >= 0)			{				$this->_articles = $model->getItems();				if ($this->_articles === false)				{					$this->setError($model->getError());				}			}			else			{				$this->_articles = array();			}			$this->_pagination = $model->getPagination();		}		return $this->_articles;	}	/**	 * Build the orderby for the query	 *	 * @return  string	$orderby portion of query	 * @since   1.5	 */	protected function _buildContentOrderBy()	{		$app		= JFactory::getApplication('site');		$db			= $this->getDbo();		$params		= $this->state->params;		$itemid		= $app->input->get('id', 0, 'int') . ':' . $app->input->get('Itemid', 0, 'int');		$orderCol	= $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');		$orderDirn	= $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order_Dir', 'filter_order_Dir', '', 'cmd');		$orderby	= ' ';		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = null;		}		if (!in_array(strtoupper($orderDirn), array('ASC', 'DESC', '')))		{			$orderDirn = 'ASC';		}		if ($orderCol && $orderDirn)		{			$orderby .= $db->escape($orderCol) . ' ' . $db->escape($orderDirn) . ', ';		}		$articleOrderby		= $params->get('orderby_sec', 'rdate');		$articleOrderDate	= $params->get('order_date');		$categoryOrderby	= $params->def('orderby_pri', '');		$secondary			= ContentHelperQuery::orderbySecondary($articleOrderby, $articleOrderDate) . ', ';		$primary			= ContentHelperQuery::orderbyPrimary($categoryOrderby);		$orderby .= $primary . ' ' . $secondary . ' a.created ';		return $orderby;	}	public function getPagination()	{		if (empty($this->_pagination))		{			return null;		}		return $this->_pagination;	}	/**	 * Method to get category data for the current category	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   1.5	 */	public function getCategory()	{		if (!is_object($this->_item))		{			if ( isset( $this->state->params ) )			{				$params = $this->state->params;				$options = array();				$options['countItems'] = $params->get('show_cat_num_articles', 1) || !$params->get('show_empty_categories_cat', 0);			}			else {				$options['countItems'] = 0;			}			$categories = JCategories::getInstance('Content', $options);			$this->_item = $categories->get($this->getState('category.id', 'root'));			// Compute selected asset permissions.			if (is_object($this->_item))			{				$user	= JFactory::getUser();				$userId	= $user->get('id');				$asset	= 'com_content.category.'.$this->_item->id;				// Check general create permission.				if ($user->authorise('core.create', $asset))				{					$this->_item->getParams()->set('access-create', true);				}				// TODO: Why aren't we lazy loading the children and siblings?				$this->_children = $this->_item->getChildren();				$this->_parent = false;				if ($this->_item->getParent())				{					$this->_parent = $this->_item->getParent();				}				$this->_rightsibling = $this->_item->getSibling();				$this->_leftsibling = $this->_item->getSibling(false);			}			else {				$this->_children = false;				$this->_parent = false;			}		}		return $this->_item;	}	/**	 * Get the parent category.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	public function getParent()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_parent;	}	/**	 * Get the left sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	function &getLeftSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_leftsibling;	}	/**	 * Get the right sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	function &getRightSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_rightsibling;	}	/**	 * Get the child categories.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	function &getChildren()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		// Order subcategories		if (count($this->_children))		{			$params = $this->getState()->get('params');			if ($params->get('orderby_pri') == 'alpha' || $params->get('orderby_pri') == 'ralpha')			{				jimport('joomla.utilities.arrayhelper');				JArrayHelper::sortObjects($this->_children, 'title', ($params->get('orderby_pri') == 'alpha') ? 1 : -1);			}		}		return $this->_children;	}	/**	 * Increment the hit counter for the category.	 *	 * @param   int  $pk  Optional primary key of the category to increment.	 *	 * @return  boolean True if successful; false otherwise and internal error set.	 */	public function hit($pk = 0)	{		// Initialise variables.		$pk = (!empty($pk)) ? $pk : (int) $this->getState('category.id');		$db = $this->getDbo();		$query = $db->getQuery(true)			->update('#__categories')			->set('hits = hits + 1')			->where('id = ' . (int) $pk);		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		return true;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.p3p * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! P3P Header Plugin * * @package     Joomla.Plugin * @subpackage  System.p3p * @since       1.6 */class PlgSystemP3p extends JPlugin{	/*	 * @since   1.6	 */	public function onAfterInitialise()	{		// Get the header		$header = $this->params->get('header', 'NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM');		$header = trim($header);		// Bail out on empty header (why would anyone do that?!)		if ( empty($header) )		{			return;		}		// Replace any existing P3P headers in the response		JResponse::setHeader('P3P', 'CP="'.$header.'"', true);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Message Table class * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.5 */class MessagesTableMessage extends JTable{	/**	 * Constructor	 *	 * @param database A database connector object	 */	public function __construct(& $db)	{		parent::__construct('#__messages', 'message_id', $db);	}	/**	 * Validation and filtering.	 *	 * @return  boolean	 */	public function check()	{		// Check the to and from users.		$user = new JUser($this->user_id_from);		if (empty($user->id))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_FROM_USER'));			return false;		}		$user = new JUser($this->user_id_to);		if (empty($user->id))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_TO_USER'));			return false;		}		if (empty($this->subject))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_SUBJECT'));			return false;		}		if (empty($this->message))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_MESSAGE'));			return false;		}		return true;	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.' IN ('.implode(',', $pks).')';		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl).			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')'		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of user access level records. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelLevels extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'ordering', 'a.ordering',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		// Load the parameters.		$params = JComponentHelper::getParams('com_users');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.*'			)		);		$query->from($db->quoteName('#__viewlevels') . ' AS a');		// Add the level in the tree.		$query->group('a.id, a.title, a.ordering, a.rules');		// Filter the items over the search string if set.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.title LIKE ' . $search);			}		}		$query->group('a.id');		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to adjust the ordering of a row.	 *	 * @param   integer    The ID of the primary key to move.	 * @param   integer    Increment, usually +1 or -1	 * @return  boolean  False on failure or error, true otherwise.	 */	public function reorder($pk, $direction = 0)	{		// Sanitize the id and adjustment.		$pk = (!empty($pk)) ? $pk : (int) $this->getState('level.id');		$user = JFactory::getUser();		// Get an instance of the record's table.		$table = JTable::getInstance('viewlevel');		// Load the row.		if (!$table->load($pk))		{			$this->setError($table->getError());			return false;		}		// Access checks.		$allow = $user->authorise('core.edit.state', 'com_users');		if (!$allow)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			return false;		}		// Move the row.		// TODO: Where clause to restrict category.		$table->move($pk);		return true;	}	/**	 * Saves the manually set order of records.	 *	 * @param   array    An array of primary key ids.	 * @param   integer  +/-1	 */	public function saveorder($pks, $order)	{		$table = JTable::getInstance('viewlevel');		$user = JFactory::getUser();		$conditions = array();		if (empty($pks))		{			return JError::raiseWarning(500, JText::_('COM_USERS_ERROR_LEVELS_NOLEVELS_SELECTED'));		}		// update ordering values		foreach ($pks as $i => $pk)		{			$table->load((int) $pk);			// Access checks.			$allow = $user->authorise('core.edit.state', 'com_users');			if (!$allow)			{				// Prune items that you can't change.				unset($pks[$i]);				JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			}			elseif ($table->ordering != $order[$i])			{				$table->ordering = $order[$i];				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}		}		// Execute reorder for each category.		foreach ($conditions as $cond)		{			$table->load($cond[0]);			$table->reorder($cond[1]);		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view level controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerLevel extends JControllerForm{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_LEVEL';	/**	 * Method to check if you can save a new or existing record.	 *	 * Overrides JControllerForm::allowSave to check the core.admin permission.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowSave($data, $key = 'id')	{		return (JFactory::getUser()->authorise('core.admin', $this->option) && parent::allowSave($data, $key));	}	/**	 * Method to remove a record.	 */	public function delete()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$user = JFactory::getUser();		$ids  = $this->input->get('cid', array(), 'array');		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		elseif (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_USERS_NO_LEVELS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			JArrayHelper::toInteger($ids);			// Remove the items.			if (!$model->delete($ids))			{				JError::raiseWarning(500, $model->getError());			}			else {				$this->setMessage(JText::plural('COM_USERS_N_LEVELS_DELETED', count($ids)));			}		}		$this->setRedirect('index.php?option=com_users&view=levels');	}}
<?php/** * lessphp v0.3.8 * http://leafo.net/lessphp * * LESS css compiler, adapted from http://lesscss.org * * Copyright 2012, Leaf Corcoran <leafot@gmail.com> * Licensed under MIT or GPLv3, see LICENSE *//** * The less compiler and parser. * * Converting LESS to CSS is a three stage process. The incoming file is parsed * by `lessc_parser` into a syntax tree, then it is compiled into another tree * representing the CSS structure by `lessc`. The CSS tree is fed into a * formatter, like `lessc_formatter` which then outputs CSS as a string. * * During the first compile, all values are *reduced*, which means that their * types are brought to the lowest form before being dump as strings. This * handles math equations, variable dereferences, and the like. * * The `parse` function of `lessc` is the entry point. * * In summary: * * The `lessc` class creates an intstance of the parser, feeds it LESS code, * then transforms the resulting tree to a CSS tree. This class also holds the * evaluation context, such as all available mixins and variables at any given * time. * * The `lessc_parser` class is only concerned with parsing its input. * * The `lessc_formatter` takes a CSS tree, and dumps it to a formatted string, * handling things like indentation. */class lessc {	static public $VERSION = "v0.3.8";	static protected $TRUE = array("keyword", "true");	static protected $FALSE = array("keyword", "false");	protected $libFunctions = array();	protected $registeredVars = array();	protected $preserveComments = false;	public $vPrefix = '@'; // prefix of abstract properties	public $mPrefix = '$'; // prefix of abstract blocks	public $parentSelector = '&';	public $importDisabled = false;	public $importDir = '';	protected $numberPrecision = null;	// set to the parser that generated the current line when compiling	// so we know how to create error messages	protected $sourceParser = null;	protected $sourceLoc = null;	static public $defaultValue = array("keyword", "");	static protected $nextImportId = 0; // uniquely identify imports	// attempts to find the path of an import url, returns null for css files	protected function findImport($url)	{		foreach ((array)$this->importDir as $dir)		{			$full = $dir.(substr($dir, -1) != '/' ? '/' : '').$url;			if ($this->fileExists($file = $full.'.less') || $this->fileExists($file = $full))			{				return $file;			}		}		return null;	}	protected function fileExists($name)	{		return is_file($name);	}	static public function compressList($items, $delim)	{		if (!isset($items[1]) && isset($items[0])) return $items[0];		else return array('list', $delim, $items);	}	static public function preg_quote($what)	{		return preg_quote($what, '/');	}	protected function tryImport($importPath, $parentBlock, $out)	{		if ($importPath[0] == "function" && $importPath[1] == "url")		{			$importPath = $this->flattenList($importPath[2]);		}		$str = $this->coerceString($importPath);		if ($str === null) return false;		$url = $this->compileValue($this->lib_e($str));		// don't import if it ends in css		if (substr_compare($url, '.css', -4, 4) === 0) return false;		$realPath = $this->findImport($url);		if ($realPath === null) return false;		if ($this->importDisabled)		{			return array(false, "/* import disabled */");		}		$this->addParsedFile($realPath);		$parser = $this->makeParser($realPath);		$root = $parser->parse(file_get_contents($realPath));		// set the parents of all the block props		foreach ($root->props as $prop)		{			if ($prop[0] == "block")			{				$prop[1]->parent = $parentBlock;			}		}		// copy mixins into scope, set their parents		// bring blocks from import into current block		// TODO: need to mark the source parser	these came from this file		foreach ($root->children as $childName => $child)		{			if (isset($parentBlock->children[$childName]))			{				$parentBlock->children[$childName] = array_merge(					$parentBlock->children[$childName],					$child);			} else {				$parentBlock->children[$childName] = $child;			}		}		$pi = pathinfo($realPath);		$dir = $pi["dirname"];		list($top, $bottom) = $this->sortProps($root->props, true);		$this->compileImportedProps($top, $parentBlock, $out, $parser, $dir);		return array(true, $bottom, $parser, $dir);	}	protected function compileImportedProps($props, $block, $out, $sourceParser, $importDir)	{		$oldSourceParser = $this->sourceParser;		$oldImport = $this->importDir;		// TODO: this is because the importDir api is stupid		$this->importDir = (array)$this->importDir;		array_unshift($this->importDir, $importDir);		foreach ($props as $prop)		{			$this->compileProp($prop, $block, $out);		}		$this->importDir = $oldImport;		$this->sourceParser = $oldSourceParser;	}	/**	 * Recursively compiles a block.	 *	 * A block is analogous to a CSS block in most cases. A single LESS document	 * is encapsulated in a block when parsed, but it does not have parent tags	 * so all of it's children appear on the root level when compiled.	 *	 * Blocks are made up of props and children.	 *	 * Props are property instructions, array tuples which describe an action	 * to be taken, eg. write a property, set a variable, mixin a block.	 *	 * The children of a block are just all the blocks that are defined within.	 * This is used to look up mixins when performing a mixin.	 *	 * Compiling the block involves pushing a fresh environment on the stack,	 * and iterating through the props, compiling each one.	 *	 * See lessc::compileProp()	 *	 */	protected function compileBlock($block)	{		switch ($block->type)	{		case "root":			$this->compileRoot($block);			break;		case null:			$this->compileCSSBlock($block);			break;		case "media":			$this->compileMedia($block);			break;		case "directive":			$name = "@" . $block->name;			if (!empty($block->value))			{				$name .= " " . $this->compileValue($this->reduce($block->value));			}			$this->compileNestedBlock($block, array($name));			break;		default:			$this->throwError("unknown block type: $block->type\n");		}	}	protected function compileCSSBlock($block)	{		$env = $this->pushEnv();		$selectors = $this->compileSelectors($block->tags);		$env->selectors = $this->multiplySelectors($selectors);		$out = $this->makeOutputBlock(null, $env->selectors);		$this->scope->children[] = $out;		$this->compileProps($block, $out);		$block->scope = $env; // mixins carry scope with them!		$this->popEnv();	}	protected function compileMedia($media)	{		$env = $this->pushEnv($media);		$parentScope = $this->mediaParent($this->scope);		$query = $this->compileMediaQuery($this->multiplyMedia($env));		$this->scope = $this->makeOutputBlock($media->type, array($query));		$parentScope->children[] = $this->scope;		$this->compileProps($media, $this->scope);		if (count($this->scope->lines) > 0)		{			$orphanSelelectors = $this->findClosestSelectors();			if (!is_null($orphanSelelectors))			{				$orphan = $this->makeOutputBlock(null, $orphanSelelectors);				$orphan->lines = $this->scope->lines;				array_unshift($this->scope->children, $orphan);				$this->scope->lines = array();			}		}		$this->scope = $this->scope->parent;		$this->popEnv();	}	protected function mediaParent($scope)	{		while (!empty($scope->parent))		{			if (!empty($scope->type) && $scope->type != "media")			{				break;			}			$scope = $scope->parent;		}		return $scope;	}	protected function compileNestedBlock($block, $selectors)	{		$this->pushEnv($block);		$this->scope = $this->makeOutputBlock($block->type, $selectors);		$this->scope->parent->children[] = $this->scope;		$this->compileProps($block, $this->scope);		$this->scope = $this->scope->parent;		$this->popEnv();	}	protected function compileRoot($root)	{		$this->pushEnv();		$this->scope = $this->makeOutputBlock($root->type);		$this->compileProps($root, $this->scope);		$this->popEnv();	}	protected function compileProps($block, $out)	{		foreach ($this->sortProps($block->props) as $prop)		{			$this->compileProp($prop, $block, $out);		}	}	protected function sortProps($props, $split = false)	{		$vars = array();		$imports = array();		$other = array();		foreach ($props as $prop)		{			switch ($prop[0])		{			case "assign":				if (isset($prop[1][0]) && $prop[1][0] == $this->vPrefix)				{					$vars[] = $prop;				} else {					$other[] = $prop;				}				break;			case "import":				$id = self::$nextImportId++;				$prop[] = $id;				$imports[] = $prop;				$other[] = array("import_mixin", $id);				break;			default:				$other[] = $prop;			}		}		if ($split)		{			return array(array_merge($vars, $imports), $other);		}		else		{			return array_merge($vars, $imports, $other);		}	}	protected function compileMediaQuery($queries)	{		$compiledQueries = array();		foreach ($queries as $query)		{			$parts = array();			foreach ($query as $q)			{				switch ($q[0])			{				case "mediaType":					$parts[] = implode(" ", array_slice($q, 1));					break;				case "mediaExp":					if (isset($q[2]))					{						$parts[] = "($q[1]: " .							$this->compileValue($this->reduce($q[2])) . ")";					} else {						$parts[] = "($q[1])";					}					break;				}			}			if (count($parts) > 0)			{				$compiledQueries[] =  implode(" and ", $parts);			}		}		$out = "@media";		if (!empty($parts))		{			$out .= " " .				implode($this->formatter->selectorSeparator, $compiledQueries);		}		return $out;	}	protected function multiplyMedia($env, $childQueries = null)	{		if (is_null($env) ||			!empty($env->block->type) && $env->block->type != "media")		{			return $childQueries;		}		// plain old block, skip		if (empty($env->block->type))		{			return $this->multiplyMedia($env->parent, $childQueries);		}		$out = array();		$queries = $env->block->queries;		if (is_null($childQueries))		{			$out = $queries;		}		else		{			foreach ($queries as $parent)			{				foreach ($childQueries as $child)				{					$out[] = array_merge($parent, $child);				}			}		}		return $this->multiplyMedia($env->parent, $out);	}	protected function expandParentSelectors(&$tag, $replace)	{		$parts = explode("$&$", $tag);		$count = 0;		foreach ($parts as &$part)		{			$part = str_replace($this->parentSelector, $replace, $part, $c);			$count += $c;		}		$tag = implode($this->parentSelector, $parts);		return $count;	}	protected function findClosestSelectors()	{		$env = $this->env;		$selectors = null;		while ($env !== null)		{			if (isset($env->selectors))			{				$selectors = $env->selectors;				break;			}			$env = $env->parent;		}		return $selectors;	}	// multiply $selectors against the nearest selectors in env	protected function multiplySelectors($selectors)	{		// find parent selectors		$parentSelectors = $this->findClosestSelectors();		if (is_null($parentSelectors))		{			// kill parent reference in top level selector			foreach ($selectors as &$s)			{				$this->expandParentSelectors($s, "");			}			return $selectors;		}		$out = array();		foreach ($parentSelectors as $parent)		{			foreach ($selectors as $child)			{				$count = $this->expandParentSelectors($child, $parent);				// don't prepend the parent tag if & was used				if ($count > 0)				{					$out[] = trim($child);				} else {					$out[] = trim($parent . ' ' . $child);				}			}		}		return $out;	}	// reduces selector expressions	protected function compileSelectors($selectors)	{		$out = array();		foreach ($selectors as $s)		{			if (is_array($s))			{				list(, $value) = $s;				$out[] = $this->compileValue($this->reduce($value));			} else {				$out[] = $s;			}		}		return $out;	}	protected function eq($left, $right)	{		return $left == $right;	}	protected function patternMatch($block, $callingArgs)	{		// match the guards if it has them		// any one of the groups must have all its guards pass for a match		if (!empty($block->guards))		{			$groupPassed = false;			foreach ($block->guards as $guardGroup)			{				foreach ($guardGroup as $guard)				{					$this->pushEnv();					$this->zipSetArgs($block->args, $callingArgs);					$negate = false;					if ($guard[0] == "negate")					{						$guard = $guard[1];						$negate = true;					}					$passed = $this->reduce($guard) == self::$TRUE;					if ($negate) $passed = !$passed;					$this->popEnv();					if ($passed)					{						$groupPassed = true;					} else {						$groupPassed = false;						break;					}				}				if ($groupPassed) break;			}			if (!$groupPassed)			{				return false;			}		}		$numCalling = count($callingArgs);		if (empty($block->args))		{			return $block->isVararg || $numCalling == 0;		}		$i = -1; // no args		// try to match by arity or by argument literal		foreach ($block->args as $i => $arg)		{			switch ($arg[0])		{			case "lit":				if (empty($callingArgs[$i]) || !$this->eq($arg[1], $callingArgs[$i]))				{					return false;				}				break;			case "arg":				// no arg and no default value				if (!isset($callingArgs[$i]) && !isset($arg[2]))				{					return false;				}				break;			case "rest":				$i--; // rest can be empty				break 2;			}		}		if ($block->isVararg)		{			return true; // not having enough is handled above		}		else		{			$numMatched = $i + 1;			// greater than becuase default values always match			return $numMatched >= $numCalling;		}	}	protected function patternMatchAll($blocks, $callingArgs)	{		$matches = null;		foreach ($blocks as $block)		{			if ($this->patternMatch($block, $callingArgs))			{				$matches[] = $block;			}		}		return $matches;	}	// attempt to find blocks matched by path and args	protected function findBlocks($searchIn, $path, $args, $seen=array())	{		if ($searchIn == null) return null;		if (isset($seen[$searchIn->id])) return null;		$seen[$searchIn->id] = true;		$name = $path[0];		if (isset($searchIn->children[$name]))		{			$blocks = $searchIn->children[$name];			if (count($path) == 1)			{				$matches = $this->patternMatchAll($blocks, $args);				if (!empty($matches))				{					// This will return all blocks that match in the closest					// scope that has any matching block, like lessjs					return $matches;				}			} else {				$matches = array();				foreach ($blocks as $subBlock)				{					$subMatches = $this->findBlocks($subBlock,						array_slice($path, 1), $args, $seen);					if (!is_null($subMatches))					{						foreach ($subMatches as $sm)						{							$matches[] = $sm;						}					}				}				return count($matches) > 0 ? $matches : null;			}		}		if ($searchIn->parent === $searchIn) return null;		return $this->findBlocks($searchIn->parent, $path, $args, $seen);	}	// sets all argument names in $args to either the default value	// or the one passed in through $values	protected function zipSetArgs($args, $values)	{		$i = 0;		$assignedValues = array();		foreach ($args as $a)		{			if ($a[0] == "arg")			{				if ($i < count($values) && !is_null($values[$i]))				{					$value = $values[$i];				} elseif (isset($a[2]))				{					$value = $a[2];				} else $value = null;				$value = $this->reduce($value);				$this->set($a[1], $value);				$assignedValues[] = $value;			}			$i++;		}		// check for a rest		$last = end($args);		if ($last[0] == "rest")		{			$rest = array_slice($values, count($args) - 1);			$this->set($last[1], $this->reduce(array("list", " ", $rest)));		}		$this->env->arguments = $assignedValues;	}	// compile a prop and update $lines or $blocks appropriately	protected function compileProp($prop, $block, $out)	{		// set error position context		$this->sourceLoc = isset($prop[-1]) ? $prop[-1] : -1;		switch ($prop[0])	{		case 'assign':			list(, $name, $value) = $prop;			if ($name[0] == $this->vPrefix)			{				$this->set($name, $value);			} else {				$out->lines[] = $this->formatter->property($name,						$this->compileValue($this->reduce($value)));			}			break;		case 'block':			list(, $child) = $prop;			$this->compileBlock($child);			break;		case 'mixin':			list(, $path, $args, $suffix) = $prop;			$args = array_map(array($this, "reduce"), (array)$args);			$mixins = $this->findBlocks($block, $path, $args);			if ($mixins === null)			{				// fwrite(STDERR,"failed to find block: ".implode(" > ", $path)."\n");				break; // throw error here??			}			foreach ($mixins as $mixin)			{				$haveScope = false;				if (isset($mixin->parent->scope))				{					$haveScope = true;					$mixinParentEnv = $this->pushEnv();					$mixinParentEnv->storeParent = $mixin->parent->scope;				}				$haveArgs = false;				if (isset($mixin->args))				{					$haveArgs = true;					$this->pushEnv();					$this->zipSetArgs($mixin->args, $args);				}				$oldParent = $mixin->parent;				if ($mixin != $block) $mixin->parent = $block;				foreach ($this->sortProps($mixin->props) as $subProp)				{					if ($suffix !== null &&						$subProp[0] == "assign" &&						is_string($subProp[1]) &&						$subProp[1]{0} != $this->vPrefix)					{						$subProp[2] = array(							'list', ' ',							array($subProp[2], array('keyword', $suffix))						);					}					$this->compileProp($subProp, $mixin, $out);				}				$mixin->parent = $oldParent;				if ($haveArgs) $this->popEnv();				if ($haveScope) $this->popEnv();			}			break;		case 'raw':			$out->lines[] = $prop[1];			break;		case "directive":			list(, $name, $value) = $prop;			$out->lines[] = "@$name " . $this->compileValue($this->reduce($value)).';';			break;		case "comment":			$out->lines[] = $prop[1];			break;		case "import";			list(, $importPath, $importId) = $prop;			$importPath = $this->reduce($importPath);			if (!isset($this->env->imports))			{				$this->env->imports = array();			}			$result = $this->tryImport($importPath, $block, $out);			$this->env->imports[$importId] = $result === false ?				array(false, "@import " . $this->compileValue($importPath).";") :				$result;			break;		case "import_mixin":			list(,$importId) = $prop;			$import = $this->env->imports[$importId];			if ($import[0] === false)			{				$out->lines[] = $import[1];			} else {				list(, $bottom, $parser, $importDir) = $import;				$this->compileImportedProps($bottom, $block, $out, $parser, $importDir);			}			break;		default:			$this->throwError("unknown op: {$prop[0]}\n");		}	}	/**	 * Compiles a primitive value into a CSS property value.	 *	 * Values in lessphp are typed by being wrapped in arrays, their format is	 * typically:	 *	 *     array(type, contents [, additional_contents]*)	 *	 * The input is expected to be reduced. This function will not work on	 * things like expressions and variables.	 */	protected function compileValue($value)	{		switch ($value[0])	{		case 'list':			// [1] - delimiter			// [2] - array of values			return implode($value[1], array_map(array($this, 'compileValue'), $value[2]));		case 'raw_color':			if (!empty($this->formatter->compressColors))			{				return $this->compileValue($this->coerceColor($value));			}			return $value[1];		case 'keyword':			// [1] - the keyword			return $value[1];		case 'number':			list(, $num, $unit) = $value;			// [1] - the number			// [2] - the unit			if ($this->numberPrecision !== null)			{				$num = round($num, $this->numberPrecision);			}			return $num . $unit;		case 'string':			// [1] - contents of string (includes quotes)			list(, $delim, $content) = $value;			foreach ($content as &$part)			{				if (is_array($part))				{					$part = $this->compileValue($part);				}			}			return $delim . implode($content) . $delim;		case 'color':			// [1] - red component (either number or a %)			// [2] - green component			// [3] - blue component			// [4] - optional alpha component			list(, $r, $g, $b) = $value;			$r = round($r);			$g = round($g);			$b = round($b);			if (count($value) == 5 && $value[4] != 1) { // rgba				return 'rgba('.$r.','.$g.','.$b.','.$value[4].')';			}			$h = sprintf("#%02x%02x%02x", $r, $g, $b);			if (!empty($this->formatter->compressColors))			{				// Converting hex color to short notation (e.g. #003399 to #039)				if ($h[1] === $h[2] && $h[3] === $h[4] && $h[5] === $h[6])				{					$h = '#' . $h[1] . $h[3] . $h[5];				}			}			return $h;		case 'function':			list(, $name, $args) = $value;			return $name.'('.$this->compileValue($args).')';		default: // assumed to be unit			$this->throwError("unknown value type: $value[0]");		}	}	protected function lib_isnumber($value)	{		return $this->toBool($value[0] == "number");	}	protected function lib_isstring($value)	{		return $this->toBool($value[0] == "string");	}	protected function lib_iscolor($value)	{		return $this->toBool($this->coerceColor($value));	}	protected function lib_iskeyword($value)	{		return $this->toBool($value[0] == "keyword");	}	protected function lib_ispixel($value)	{		return $this->toBool($value[0] == "number" && $value[2] == "px");	}	protected function lib_ispercentage($value)	{		return $this->toBool($value[0] == "number" && $value[2] == "%");	}	protected function lib_isem($value)	{		return $this->toBool($value[0] == "number" && $value[2] == "em");	}	protected function lib_rgbahex($color)	{		$color = $this->coerceColor($color);		if (is_null($color))			$this->throwError("color expected for rgbahex");		return sprintf("#%02x%02x%02x%02x",			isset($color[4]) ? $color[4]*255 : 255,			$color[1],$color[2], $color[3]);	}	protected function lib_argb($color){		return $this->lib_rgbahex($color);	}	// utility func to unquote a string	protected function lib_e($arg)	{		switch ($arg[0])		{			case "list":				$items = $arg[2];				if (isset($items[0]))				{					return $this->lib_e($items[0]);				}				return self::$defaultValue;			case "string":				$arg[1] = "";				return $arg;			case "keyword":				return $arg;			default:				return array("keyword", $this->compileValue($arg));		}	}	protected function lib__sprintf($args)	{		if ($args[0] != "list") return $args;		$values = $args[2];		$string = array_shift($values);		$template = $this->compileValue($this->lib_e($string));		$i = 0;		if (preg_match_all('/%[dsa]/', $template, $m))		{			foreach ($m[0] as $match)			{				$val = isset($values[$i]) ?					$this->reduce($values[$i]) : array('keyword', '');				// lessjs compat, renders fully expanded color, not raw color				if ($color = $this->coerceColor($val))				{					$val = $color;				}				$i++;				$rep = $this->compileValue($this->lib_e($val));				$template = preg_replace('/'.self::preg_quote($match).'/',					$rep, $template, 1);			}		}		$d = $string[0] == "string" ? $string[1] : '"';		return array("string", $d, array($template));	}	protected function lib_floor($arg)	{		$value = $this->assertNumber($arg);		return array("number", floor($value), $arg[2]);	}	protected function lib_ceil($arg)	{		$value = $this->assertNumber($arg);		return array("number", ceil($value), $arg[2]);	}	protected function lib_round($arg)	{		$value = $this->assertNumber($arg);		return array("number", round($value), $arg[2]);	}	/**	 * Helper function to get arguments for color manipulation functions.	 * takes a list that contains a color like thing and a percentage	 */	protected function colorArgs($args)	{		if ($args[0] != 'list' || count($args[2]) < 2)		{			return array(array('color', 0, 0, 0), 0);		}		list($color, $delta) = $args[2];		$color = $this->assertColor($color);		$delta = floatval($delta[1]);		return array($color, $delta);	}	protected function lib_darken($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[3] = $this->clamp($hsl[3] - $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_lighten($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[3] = $this->clamp($hsl[3] + $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_saturate($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[2] = $this->clamp($hsl[2] + $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_desaturate($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[2] = $this->clamp($hsl[2] - $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_spin($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[1] = $hsl[1] + $delta % 360;		if ($hsl[1] < 0) $hsl[1] += 360;		return $this->toRGB($hsl);	}	protected function lib_fadeout($args)	{		list($color, $delta) = $this->colorArgs($args);		$color[4] = $this->clamp((isset($color[4]) ? $color[4] : 1) - $delta/100);		return $color;	}	protected function lib_fadein($args)	{		list($color, $delta) = $this->colorArgs($args);		$color[4] = $this->clamp((isset($color[4]) ? $color[4] : 1) + $delta/100);		return $color;	}	protected function lib_hue($color)	{		$hsl = $this->toHSL($this->assertColor($color));		return round($hsl[1]);	}	protected function lib_saturation($color)	{		$hsl = $this->toHSL($this->assertColor($color));		return round($hsl[2]);	}	protected function lib_lightness($color)	{		$hsl = $this->toHSL($this->assertColor($color));		return round($hsl[3]);	}	// get the alpha of a color	// defaults to 1 for non-colors or colors without an alpha	protected function lib_alpha($value)	{		if (!is_null($color = $this->coerceColor($value)))		{			return isset($color[4]) ? $color[4] : 1;		}	}	// set the alpha of the color	protected function lib_fade($args)	{		list($color, $alpha) = $this->colorArgs($args);		$color[4] = $this->clamp($alpha / 100.0);		return $color;	}	protected function lib_percentage($arg)	{		$num = $this->assertNumber($arg);		return array("number", $num*100, "%");	}	// mixes two colors by weight	// mix(@color1, @color2, @weight);	// http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#mix-instance_method	protected function lib_mix($args)	{		if ($args[0] != "list" || count($args[2]) < 3)			$this->throwError("mix expects (color1, color2, weight)");		list($first, $second, $weight) = $args[2];		$first = $this->assertColor($first);		$second = $this->assertColor($second);		$first_a = $this->lib_alpha($first);		$second_a = $this->lib_alpha($second);		$weight = $weight[1] / 100.0;		$w = $weight * 2 - 1;		$a = $first_a - $second_a;		$w1 = (($w * $a == -1 ? $w : ($w + $a)/(1 + $w * $a)) + 1) / 2.0;		$w2 = 1.0 - $w1;		$new = array('color',			$w1 * $first[1] + $w2 * $second[1],			$w1 * $first[2] + $w2 * $second[2],			$w1 * $first[3] + $w2 * $second[3],		);		if ($first_a != 1.0 || $second_a != 1.0)		{			$new[] = $first_a * $weight + $second_a * ($weight - 1);		}		return $this->fixColor($new);	}	protected function assertColor($value, $error = "expected color value")	{		$color = $this->coerceColor($value);		if (is_null($color)) $this->throwError($error);		return $color;	}	protected function assertNumber($value, $error = "expecting number")	{		if ($value[0] == "number") return $value[1];		$this->throwError($error);	}	protected function toHSL($color)	{		if ($color[0] == 'hsl') return $color;		$r = $color[1] / 255;		$g = $color[2] / 255;		$b = $color[3] / 255;		$min = min($r, $g, $b);		$max = max($r, $g, $b);		$L = ($min + $max) / 2;		if ($min == $max)		{			$S = $H = 0;		}		else		{			if ($L < 0.5)				$S = ($max - $min)/($max + $min);			else				$S = ($max - $min)/(2.0 - $max - $min);			if ($r == $max) $H = ($g - $b)/($max - $min);			elseif ($g == $max) $H = 2.0 + ($b - $r)/($max - $min);			elseif ($b == $max) $H = 4.0 + ($r - $g)/($max - $min);		}		$out = array('hsl',			($H < 0 ? $H + 6 : $H)*60,			$S*100,			$L*100,		);		if (count($color) > 4) $out[] = $color[4]; // copy alpha		return $out;	}	protected function toRGB_helper($comp, $temp1, $temp2)	{		if ($comp < 0) $comp += 1.0;		elseif ($comp > 1) $comp -= 1.0;		if (6 * $comp < 1) return $temp1 + ($temp2 - $temp1) * 6 * $comp;		if (2 * $comp < 1) return $temp2;		if (3 * $comp < 2) return $temp1 + ($temp2 - $temp1)*((2/3) - $comp) * 6;		return $temp1;	}	/**	 * Converts a hsl array into a color value in rgb.	 * Expects H to be in range of 0 to 360, S and L in 0 to 100	 */	protected function toRGB($color)	{		if ($color == 'color') return $color;		$H = $color[1] / 360;		$S = $color[2] / 100;		$L = $color[3] / 100;		if ($S == 0)		{			$r = $g = $b = $L;		}		else		{			$temp2 = $L < 0.5 ?				$L*(1.0 + $S) :				$L + $S - $L * $S;			$temp1 = 2.0 * $L - $temp2;			$r = $this->toRGB_helper($H + 1/3, $temp1, $temp2);			$g = $this->toRGB_helper($H, $temp1, $temp2);			$b = $this->toRGB_helper($H - 1/3, $temp1, $temp2);		}		// $out = array('color', round($r*255), round($g*255), round($b*255));		$out = array('color', $r*255, $g*255, $b*255);		if (count($color) > 4) $out[] = $color[4]; // copy alpha		return $out;	}	protected function clamp($v, $max = 1, $min = 0)	{		return min($max, max($min, $v));	}	/**	 * Convert the rgb, rgba, hsl color literals of function type	 * as returned by the parser into values of color type.	 */	protected function funcToColor($func)	{		$fname = $func[1];		if ($func[2][0] != 'list') return false; // need a list of arguments		$rawComponents = $func[2][2];		if ($fname == 'hsl' || $fname == 'hsla')		{			$hsl = array('hsl');			$i = 0;			foreach ($rawComponents as $c)			{				$val = $this->reduce($c);				$val = isset($val[1]) ? floatval($val[1]) : 0;				if ($i == 0) $clamp = 360;				elseif ($i < 3) $clamp = 100;				else $clamp = 1;				$hsl[] = $this->clamp($val, $clamp);				$i++;			}			while (count($hsl) < 4) $hsl[] = 0;			return $this->toRGB($hsl);		} elseif ($fname == 'rgb' || $fname == 'rgba')		{			$components = array();			$i = 1;			foreach	($rawComponents as $c)			{				$c = $this->reduce($c);				if ($i < 4)				{					if ($c[0] == "number" && $c[2] == "%")					{						$components[] = 255 * ($c[1] / 100);					} else {						$components[] = floatval($c[1]);					}				} elseif ($i == 4)				{					if ($c[0] == "number" && $c[2] == "%")					{						$components[] = 1.0 * ($c[1] / 100);					} else {						$components[] = floatval($c[1]);					}				} else break;				$i++;			}			while (count($components) < 3) $components[] = 0;			array_unshift($components, 'color');			return $this->fixColor($components);		}		return false;	}	protected function reduce($value, $forExpression = false)	{		switch ($value[0])	{		case "variable":			$key = $value[1];			if (is_array($key))			{				$key = $this->reduce($key);				$key = $this->vPrefix . $this->compileValue($this->lib_e($key));			}			$seen =& $this->env->seenNames;			if (!empty($seen[$key]))			{				$this->throwError("infinite loop detected: $key");			}			$seen[$key] = true;			$out = $this->reduce($this->get($key, self::$defaultValue));			$seen[$key] = false;			return $out;		case "list":			foreach ($value[2] as &$item)			{				$item = $this->reduce($item, $forExpression);			}			return $value;		case "expression":			return $this->evaluate($value);		case "string":			foreach ($value[2] as &$part)			{				if (is_array($part))				{					$strip = $part[0] == "variable";					$part = $this->reduce($part);					if ($strip) $part = $this->lib_e($part);				}			}			return $value;		case "escape":			list(,$inner) = $value;			return $this->lib_e($this->reduce($inner));		case "function":			$color = $this->funcToColor($value);			if ($color) return $color;			list(, $name, $args) = $value;			if ($name == "%") $name = "_sprintf";			$f = isset($this->libFunctions[$name]) ?				$this->libFunctions[$name] : array($this, 'lib_'.$name);			if (is_callable($f))			{				if ($args[0] == 'list')					$args = self::compressList($args[2], $args[1]);				$ret = call_user_func($f, $this->reduce($args, true), $this);				if (is_null($ret))				{					return array("string", "", array(						$name, "(", $args, ")"					));				}				// convert to a typed value if the result is a php primitive				if (is_numeric($ret)) $ret = array('number', $ret, "");				elseif (!is_array($ret)) $ret = array('keyword', $ret);				return $ret;			}			// plain function, reduce args			$value[2] = $this->reduce($value[2]);			return $value;		case "unary":			list(, $op, $exp) = $value;			$exp = $this->reduce($exp);			if ($exp[0] == "number")			{				switch ($op)			{				case "+":					return $exp;				case "-":					$exp[1] *= -1;					return $exp;				}			}			return array("string", "", array($op, $exp));		}		if ($forExpression)		{			switch ($value[0])		{			case "keyword":				if ($color = $this->coerceColor($value))				{					return $color;				}				break;			case "raw_color":				return $this->coerceColor($value);			}		}		return $value;	}	// coerce a value for use in color operation	protected function coerceColor($value)	{		switch($value[0])		{			case 'color': return $value;			case 'raw_color':				$c = array("color", 0, 0, 0);				$colorStr = substr($value[1], 1);				$num = hexdec($colorStr);				$width = strlen($colorStr) == 3 ? 16 : 256;				for ($i = 3; $i > 0; $i--) { // 3 2 1					$t = $num % $width;					$num /= $width;					$c[$i] = $t * (256/$width) + $t * floor(16/$width);				}				return $c;			case 'keyword':				$name = $value[1];				if (isset(self::$cssColors[$name]))				{					list($r, $g, $b) = explode(',', self::$cssColors[$name]);					return array('color', $r, $g, $b);				}				return null;		}	}	// make something string like into a string	protected function coerceString($value)	{		switch ($value[0])	{		case "string":			return $value;		case "keyword":			return array("string", "", array($value[1]));		}		return null;	}	// turn list of length 1 into value type	protected function flattenList($value)	{		if ($value[0] == "list" && count($value[2]) == 1)		{			return $this->flattenList($value[2][0]);		}		return $value;	}	protected function toBool($a)	{		if ($a) return self::$TRUE;		else return self::$FALSE;	}	// evaluate an expression	protected function evaluate($exp)	{		list(, $op, $left, $right, $whiteBefore, $whiteAfter) = $exp;		$left = $this->reduce($left, true);		$right = $this->reduce($right, true);		if ($leftColor = $this->coerceColor($left))		{			$left = $leftColor;		}		if ($rightColor = $this->coerceColor($right))		{			$right = $rightColor;		}		$ltype = $left[0];		$rtype = $right[0];		// operators that work on all types		if ($op == "and")		{			return $this->toBool($left == self::$TRUE && $right == self::$TRUE);		}		if ($op == "=")		{			return $this->toBool($this->eq($left, $right) );		}		if ($op == "+" && !is_null($str = $this->stringConcatenate($left, $right)))		{			return $str;		}		// type based operators		$fname = "op_${ltype}_${rtype}";		if (is_callable(array($this, $fname)))		{			$out = $this->$fname($op, $left, $right);			if (!is_null($out)) return $out;		}		// make the expression look it did before being parsed		$paddedOp = $op;		if ($whiteBefore) $paddedOp = " " . $paddedOp;		if ($whiteAfter) $paddedOp .= " ";		return array("string", "", array($left, $paddedOp, $right));	}	protected function stringConcatenate($left, $right)	{		if ($strLeft = $this->coerceString($left))		{			if ($right[0] == "string")			{				$right[1] = "";			}			$strLeft[2][] = $right;			return $strLeft;		}		if ($strRight = $this->coerceString($right))		{			array_unshift($strRight[2], $left);			return $strRight;		}	}	// make sure a color's components don't go out of bounds	protected function fixColor($c)	{		foreach (range(1, 3) as $i)		{			if ($c[$i] < 0) $c[$i] = 0;			if ($c[$i] > 255) $c[$i] = 255;		}		return $c;	}	protected function op_number_color($op, $lft, $rgt)	{		if ($op == '+' || $op == '*')		{			return $this->op_color_number($op, $rgt, $lft);		}	}	protected function op_color_number($op, $lft, $rgt)	{		if ($rgt[0] == '%') $rgt[1] /= 100;		return $this->op_color_color($op, $lft,			array_fill(1, count($lft) - 1, $rgt[1]));	}	protected function op_color_color($op, $left, $right)	{		$out = array('color');		$max = count($left) > count($right) ? count($left) : count($right);		foreach (range(1, $max - 1) as $i)		{			$lval = isset($left[$i]) ? $left[$i] : 0;			$rval = isset($right[$i]) ? $right[$i] : 0;			switch ($op)		{			case '+':				$out[] = $lval + $rval;				break;			case '-':				$out[] = $lval - $rval;				break;			case '*':				$out[] = $lval * $rval;				break;			case '%':				$out[] = $lval % $rval;				break;			case '/':				if ($rval == 0) $this->throwError("evaluate error: can't divide by zero");				$out[] = $lval / $rval;				break;			default:				$this->throwError('evaluate error: color op number failed on op '.$op);			}		}		return $this->fixColor($out);	}	// operator on two numbers	protected function op_number_number($op, $left, $right)	{		$unit = empty($left[2]) ? $right[2] : $left[2];		$value = 0;		switch ($op)	{		case '+':			$value = $left[1] + $right[1];			break;		case '*':			$value = $left[1] * $right[1];			break;		case '-':			$value = $left[1] - $right[1];			break;		case '%':			$value = $left[1] % $right[1];			break;		case '/':			if ($right[1] == 0) $this->throwError('parse error: divide by zero');			$value = $left[1] / $right[1];			break;		case '<':			return $this->toBool($left[1] < $right[1]);		case '>':			return $this->toBool($left[1] > $right[1]);		case '>=':			return $this->toBool($left[1] >= $right[1]);		case '=<':			return $this->toBool($left[1] <= $right[1]);		default:			$this->throwError('parse error: unknown number operator: '.$op);		}		return array("number", $value, $unit);	}	/* environment functions */	protected function makeOutputBlock($type, $selectors = null)	{		$b = new stdclass;		$b->lines = array();		$b->children = array();		$b->selectors = $selectors;		$b->type = $type;		$b->parent = $this->scope;		return $b;	}	// the state of execution	protected function pushEnv($block = null)	{		$e = new stdclass;		$e->parent = $this->env;		$e->store = array();		$e->block = $block;		$this->env = $e;		return $e;	}	// pop something off the stack	protected function popEnv()	{		$old = $this->env;		$this->env = $this->env->parent;		return $old;	}	// set something in the current env	protected function set($name, $value)	{		$this->env->store[$name] = $value;	}	// get the highest occurrence entry for a name	protected function get($name, $default=null)	{		$current = $this->env;		$isArguments = $name == $this->vPrefix . 'arguments';		while ($current)		{			if ($isArguments && isset($current->arguments))			{				return array('list', ' ', $current->arguments);			}			if (isset($current->store[$name]))				return $current->store[$name];			else {				$current = isset($current->storeParent) ?					$current->storeParent : $current->parent;			}		}		return $default;	}	// inject array of unparsed strings into environment as variables	protected function injectVariables($args)	{		$this->pushEnv();		$parser = new lessc_parser($this, __METHOD__);		foreach ($args as $name => $strValue)		{			if ($name{0} != '@') $name = '@'.$name;			$parser->count = 0;			$parser->buffer = (string)$strValue;			if (!$parser->propertyValue($value))			{				throw new Exception("failed to parse passed in variable $name: $strValue");			}			$this->set($name, $value);		}	}	/**	 * Initialize any static state, can initialize parser for a file	 * $opts isn't used yet	 */	public function __construct($fname = null)	{		if ($fname !== null)		{			// used for deprecated parse method			$this->_parseFile = $fname;		}	}	public function compile($string, $name = null)	{		$locale = setlocale(LC_NUMERIC, 0);		setlocale(LC_NUMERIC, "C");		$this->parser = $this->makeParser($name);		$root = $this->parser->parse($string);		$this->env = null;		$this->scope = null;		$this->formatter = $this->newFormatter();		if (!empty($this->registeredVars))		{			$this->injectVariables($this->registeredVars);		}		$this->sourceParser = $this->parser; // used for error messages		$this->compileBlock($root);		ob_start();		$this->formatter->block($this->scope);		$out = ob_get_clean();		setlocale(LC_NUMERIC, $locale);		return $out;	}	public function compileFile($fname, $outFname = null)	{		if (!is_readable($fname))		{			throw new Exception('load error: failed to find '.$fname);		}		$pi = pathinfo($fname);		$oldImport = $this->importDir;		$this->importDir = (array)$this->importDir;		$this->importDir[] = $pi['dirname'].'/';		$this->allParsedFiles = array();		$this->addParsedFile($fname);		$out = $this->compile(file_get_contents($fname), $fname);		$this->importDir = $oldImport;		if ($outFname !== null)		{			return file_put_contents($outFname, $out);		}		return $out;	}	// compile only if changed input has changed or output doesn't exist	public function checkedCompile($in, $out)	{		if (!is_file($out) || filemtime($in) > filemtime($out))		{			$this->compileFile($in, $out);			return true;		}		return false;	}	/**	 * Execute lessphp on a .less file or a lessphp cache structure	 *	 * The lessphp cache structure contains information about a specific	 * less file having been parsed. It can be used as a hint for future	 * calls to determine whether or not a rebuild is required.	 *	 * The cache structure contains two important keys that may be used	 * externally:	 *	 * compiled: The final compiled CSS	 * updated: The time (in seconds) the CSS was last compiled	 *	 * The cache structure is a plain-ol' PHP associative array and can	 * be serialized and unserialized without a hitch.	 *	 * @param mixed $in Input	 * @param bool $force Force rebuild?	 * @return array lessphp cache structure	 */	public function cachedCompile($in, $force = false)	{		// assume no root		$root = null;		if (is_string($in))		{			$root = $in;		} elseif (is_array($in) and isset($in['root']))		{			if ($force or ! isset($in['files']))			{				// If we are forcing a recompile or if for some reason the				// structure does not contain any file information we should				// specify the root to trigger a rebuild.				$root = $in['root'];			} elseif (isset($in['files']) and is_array($in['files']))			{				foreach ($in['files'] as $fname => $ftime )				{					if (!file_exists($fname) or filemtime($fname) > $ftime)					{						// One of the files we knew about previously has changed						// so we should look at our incoming root again.						$root = $in['root'];						break;					}				}			}		}		else		{			// TODO: Throw an exception? We got neither a string nor something			// that looks like a compatible lessphp cache structure.			return null;		}		if ($root !== null)		{			// If we have a root value which means we should rebuild.			$out = array();			$out['root'] = $root;			$out['compiled'] = $this->compileFile($root);			$out['files'] = $this->allParsedFiles();			$out['updated'] = time();			return $out;		}		else		{			// No changes, pass back the structure			// we were given initially.			return $in;		}	}	// parse and compile buffer	// This is deprecated	public function parse($str = null, $initialVariables = null)	{		if (is_array($str))		{			$initialVariables = $str;			$str = null;		}		$oldVars = $this->registeredVars;		if ($initialVariables !== null)		{			$this->setVariables($initialVariables);		}		if ($str == null)		{			if (empty($this->_parseFile))			{				throw new exception("nothing to parse");			}			$out = $this->compileFile($this->_parseFile);		}		else		{			$out = $this->compile($str);		}		$this->registeredVars = $oldVars;		return $out;	}	protected function makeParser($name)	{		$parser = new lessc_parser($this, $name);		$parser->writeComments = $this->preserveComments;		return $parser;	}	public function setFormatter($name)	{		$this->formatterName = $name;	}	protected function newFormatter()	{		$className = "lessc_formatter_lessjs";		if (!empty($this->formatterName))		{			if (!is_string($this->formatterName))				return $this->formatterName;			$className = "lessc_formatter_$this->formatterName";		}		return new $className;	}	public function setPreserveComments($preserve)	{		$this->preserveComments = $preserve;	}	public function registerFunction($name, $func)	{		$this->libFunctions[$name] = $func;	}	public function unregisterFunction($name)	{		unset($this->libFunctions[$name]);	}	public function setVariables($variables)	{		$this->registeredVars = array_merge($this->registeredVars, $variables);	}	public function unsetVariable($name)	{		unset($this->registeredVars[$name]);	}	public function setImportDir($dirs)	{		$this->importDir = (array)$dirs;	}	public function addImportDir($dir)	{		$this->importDir = (array)$this->importDir;		$this->importDir[] = $dir;	}	public function allParsedFiles()	{		return $this->allParsedFiles;	}	protected function addParsedFile($file)	{		$this->allParsedFiles[realpath($file)] = filemtime($file);	}	/**	 * Uses the current value of $this->count to show line and line number	 */	protected function throwError($msg = null)	{		if ($this->sourceLoc >= 0)		{			$this->sourceParser->throwError($msg, $this->sourceLoc);		}		throw new exception($msg);	}	// compile file $in to file $out if $in is newer than $out	// returns true when it compiles, false otherwise	public static function ccompile($in, $out, $less = null)	{		if ($less === null)		{			$less = new self;		}		return $less->checkedCompile($in, $out);	}	public static function cexecute($in, $force = false, $less = null)	{		if ($less === null)		{			$less = new self;		}		return $less->cachedCompile($in, $force);	}	static protected $cssColors = array(		'aliceblue' => '240,248,255',		'antiquewhite' => '250,235,215',		'aqua' => '0,255,255',		'aquamarine' => '127,255,212',		'azure' => '240,255,255',		'beige' => '245,245,220',		'bisque' => '255,228,196',		'black' => '0,0,0',		'blanchedalmond' => '255,235,205',		'blue' => '0,0,255',		'blueviolet' => '138,43,226',		'brown' => '165,42,42',		'burlywood' => '222,184,135',		'cadetblue' => '95,158,160',		'chartreuse' => '127,255,0',		'chocolate' => '210,105,30',		'coral' => '255,127,80',		'cornflowerblue' => '100,149,237',		'cornsilk' => '255,248,220',		'crimson' => '220,20,60',		'cyan' => '0,255,255',		'darkblue' => '0,0,139',		'darkcyan' => '0,139,139',		'darkgoldenrod' => '184,134,11',		'darkgray' => '169,169,169',		'darkgreen' => '0,100,0',		'darkgrey' => '169,169,169',		'darkkhaki' => '189,183,107',		'darkmagenta' => '139,0,139',		'darkolivegreen' => '85,107,47',		'darkorange' => '255,140,0',		'darkorchid' => '153,50,204',		'darkred' => '139,0,0',		'darksalmon' => '233,150,122',		'darkseagreen' => '143,188,143',		'darkslateblue' => '72,61,139',		'darkslategray' => '47,79,79',		'darkslategrey' => '47,79,79',		'darkturquoise' => '0,206,209',		'darkviolet' => '148,0,211',		'deeppink' => '255,20,147',		'deepskyblue' => '0,191,255',		'dimgray' => '105,105,105',		'dimgrey' => '105,105,105',		'dodgerblue' => '30,144,255',		'firebrick' => '178,34,34',		'floralwhite' => '255,250,240',		'forestgreen' => '34,139,34',		'fuchsia' => '255,0,255',		'gainsboro' => '220,220,220',		'ghostwhite' => '248,248,255',		'gold' => '255,215,0',		'goldenrod' => '218,165,32',		'gray' => '128,128,128',		'green' => '0,128,0',		'greenyellow' => '173,255,47',		'grey' => '128,128,128',		'honeydew' => '240,255,240',		'hotpink' => '255,105,180',		'indianred' => '205,92,92',		'indigo' => '75,0,130',		'ivory' => '255,255,240',		'khaki' => '240,230,140',		'lavender' => '230,230,250',		'lavenderblush' => '255,240,245',		'lawngreen' => '124,252,0',		'lemonchiffon' => '255,250,205',		'lightblue' => '173,216,230',		'lightcoral' => '240,128,128',		'lightcyan' => '224,255,255',		'lightgoldenrodyellow' => '250,250,210',		'lightgray' => '211,211,211',		'lightgreen' => '144,238,144',		'lightgrey' => '211,211,211',		'lightpink' => '255,182,193',		'lightsalmon' => '255,160,122',		'lightseagreen' => '32,178,170',		'lightskyblue' => '135,206,250',		'lightslategray' => '119,136,153',		'lightslategrey' => '119,136,153',		'lightsteelblue' => '176,196,222',		'lightyellow' => '255,255,224',		'lime' => '0,255,0',		'limegreen' => '50,205,50',		'linen' => '250,240,230',		'magenta' => '255,0,255',		'maroon' => '128,0,0',		'mediumaquamarine' => '102,205,170',		'mediumblue' => '0,0,205',		'mediumorchid' => '186,85,211',		'mediumpurple' => '147,112,219',		'mediumseagreen' => '60,179,113',		'mediumslateblue' => '123,104,238',		'mediumspringgreen' => '0,250,154',		'mediumturquoise' => '72,209,204',		'mediumvioletred' => '199,21,133',		'midnightblue' => '25,25,112',		'mintcream' => '245,255,250',		'mistyrose' => '255,228,225',		'moccasin' => '255,228,181',		'navajowhite' => '255,222,173',		'navy' => '0,0,128',		'oldlace' => '253,245,230',		'olive' => '128,128,0',		'olivedrab' => '107,142,35',		'orange' => '255,165,0',		'orangered' => '255,69,0',		'orchid' => '218,112,214',		'palegoldenrod' => '238,232,170',		'palegreen' => '152,251,152',		'paleturquoise' => '175,238,238',		'palevioletred' => '219,112,147',		'papayawhip' => '255,239,213',		'peachpuff' => '255,218,185',		'peru' => '205,133,63',		'pink' => '255,192,203',		'plum' => '221,160,221',		'powderblue' => '176,224,230',		'purple' => '128,0,128',		'red' => '255,0,0',		'rosybrown' => '188,143,143',		'royalblue' => '65,105,225',		'saddlebrown' => '139,69,19',		'salmon' => '250,128,114',		'sandybrown' => '244,164,96',		'seagreen' => '46,139,87',		'seashell' => '255,245,238',		'sienna' => '160,82,45',		'silver' => '192,192,192',		'skyblue' => '135,206,235',		'slateblue' => '106,90,205',		'slategray' => '112,128,144',		'slategrey' => '112,128,144',		'snow' => '255,250,250',		'springgreen' => '0,255,127',		'steelblue' => '70,130,180',		'tan' => '210,180,140',		'teal' => '0,128,128',		'thistle' => '216,191,216',		'tomato' => '255,99,71',		'turquoise' => '64,224,208',		'violet' => '238,130,238',		'wheat' => '245,222,179',		'white' => '255,255,255',		'whitesmoke' => '245,245,245',		'yellow' => '255,255,0',		'yellowgreen' => '154,205,50'	);}// responsible for taking a string of LESS code and converting it into a// syntax treeclass lessc_parser {	static protected $nextBlockId = 0; // used to uniquely identify blocks	static protected $precedence = array(		'=<' => 0,		'>=' => 0,		'=' => 0,		'<' => 0,		'>' => 0,		'+' => 1,		'-' => 1,		'*' => 2,		'/' => 2,		'%' => 2,	);	static protected $whitePattern;	static protected $commentMulti;	static protected $commentSingle = "//";	static protected $commentMultiLeft = "/*";	static protected $commentMultiRight = "*/";	// regex string to match any of the operators	static protected $operatorString;	// these properties will supress division unless it's inside parenthases	static protected $supressDivisionProps =		array('/border-radius$/i', '/^font$/i');	protected $blockDirectives = array("font-face", "keyframes", "page", "-moz-document");	protected $lineDirectives = array("charset");	/**	 * if we are in parens we can be more liberal with whitespace around	 * operators because it must evaluate to a single value and thus is less	 * ambiguous.	 *	 * Consider:	 *     property1: 10 -5; // is two numbers, 10 and -5	 *     property2: (10 -5); // should evaluate to 5	 */	protected $inParens = false;	// caches preg escaped literals	static protected $literalCache = array();	public function __construct($lessc, $sourceName = null)	{		$this->eatWhiteDefault = true;		// reference to less needed for vPrefix, mPrefix, and parentSelector		$this->lessc = $lessc;		$this->sourceName = $sourceName; // name used for error messages		$this->writeComments = false;		if (!self::$operatorString)		{			self::$operatorString =				'('.implode('|', array_map(array('lessc', 'preg_quote'),					array_keys(self::$precedence))).')';			$commentSingle = lessc::preg_quote(self::$commentSingle);			$commentMultiLeft = lessc::preg_quote(self::$commentMultiLeft);			$commentMultiRight = lessc::preg_quote(self::$commentMultiRight);			self::$commentMulti = $commentMultiLeft.'.*?'.$commentMultiRight;			self::$whitePattern = '/'.$commentSingle.'[^\n]*\s*|('.self::$commentMulti.')\s*|\s+/Ais';		}	}	public function parse($buffer)	{		$this->count = 0;		$this->line = 1;		$this->env = null; // block stack		$this->buffer = $this->writeComments ? $buffer : $this->removeComments($buffer);		$this->pushSpecialBlock("root");		$this->eatWhiteDefault = true;		$this->seenComments = array();		// trim whitespace on head		// if (preg_match('/^\s+/', $this->buffer, $m))		//{		// 	$this->line += substr_count($m[0], "\n");		// 	$this->buffer = ltrim($this->buffer);		// }		$this->whitespace();		// parse the entire file		$lastCount = $this->count;		while (false !== $this->parseChunk());		if ($this->count != strlen($this->buffer))			$this->throwError();		// TODO report where the block was opened		if (!is_null($this->env->parent))			throw new exception('parse error: unclosed block');		return $this->env;	}	/**	 * Parse a single chunk off the head of the buffer and append it to the	 * current parse environment.	 * Returns false when the buffer is empty, or when there is an error.	 *	 * This function is called repeatedly until the entire document is	 * parsed.	 *	 * This parser is most similar to a recursive descent parser. Single	 * functions represent discrete grammatical rules for the language, and	 * they are able to capture the text that represents those rules.	 *	 * Consider the function lessc::keyword(). (all parse functions are	 * structured the same)	 *	 * The function takes a single reference argument. When calling the	 * function it will attempt to match a keyword on the head of the buffer.	 * If it is successful, it will place the keyword in the referenced	 * argument, advance the position in the buffer, and return true. If it	 * fails then it won't advance the buffer and it will return false.	 *	 * All of these parse functions are powered by lessc::match(), which behaves	 * the same way, but takes a literal regular expression. Sometimes it is	 * more convenient to use match instead of creating a new function.	 *	 * Because of the format of the functions, to parse an entire string of	 * grammatical rules, you can chain them together using &&.	 *	 * But, if some of the rules in the chain succeed before one fails, then	 * the buffer position will be left at an invalid state. In order to	 * avoid this, lessc::seek() is used to remember and set buffer positions.	 *	 * Before parsing a chain, use $s = $this->seek() to remember the current	 * position into $s. Then if a chain fails, use $this->seek($s) to	 * go back where we started.	 */	protected function parseChunk()	{		if (empty($this->buffer)) return false;		$s = $this->seek();		// setting a property		if ($this->keyword($key) && $this->assign() &&			$this->propertyValue($value, $key) && $this->end())		{			$this->append(array('assign', $key, $value), $s);			return true;		}		else		{			$this->seek($s);		}		// look for special css blocks		if ($this->literal('@', false))		{			$this->count--;			// media			if ($this->literal('@media'))			{				if (($this->mediaQueryList($mediaQueries) || true)					&& $this->literal('{'))				{					$media = $this->pushSpecialBlock("media");					$media->queries = is_null($mediaQueries) ? array() : $mediaQueries;					return true;				} else {					$this->seek($s);					return false;				}			}			if ($this->literal("@", false) && $this->keyword($dirName))			{				if ($this->isDirective($dirName, $this->blockDirectives))				{					if (($this->openString("{", $dirValue, null, array(";")) || true) &&						$this->literal("{"))					{						$dir = $this->pushSpecialBlock("directive");						$dir->name = $dirName;						if (isset($dirValue)) $dir->value = $dirValue;						return true;					}				} elseif ($this->isDirective($dirName, $this->lineDirectives))				{					if ($this->propertyValue($dirValue) && $this->end())					{						$this->append(array("directive", $dirName, $dirValue));						return true;					}				}			}			$this->seek($s);		}		// setting a variable		if ($this->variable($var) && $this->assign() &&			$this->propertyValue($value) && $this->end())		{			$this->append(array('assign', $var, $value), $s);			return true;		}		else		{			$this->seek($s);		}		if ($this->import($importValue))		{			$this->append($importValue, $s);			return true;		}		// opening parametric mixin		if ($this->tag($tag, true) && $this->argumentDef($args, $isVararg) &&			($this->guards($guards) || true) &&			$this->literal('{'))		{			$block = $this->pushBlock($this->fixTags(array($tag)));			$block->args = $args;			$block->isVararg = $isVararg;			if (!empty($guards)) $block->guards = $guards;			return true;		}		else		{			$this->seek($s);		}		// opening a simple block		if ($this->tags($tags) && $this->literal('{'))		{			$tags = $this->fixTags($tags);			$this->pushBlock($tags);			return true;		}		else		{			$this->seek($s);		}		// closing a block		if ($this->literal('}', false))		{			try {				$block = $this->pop();			} catch (exception $e)			{				$this->seek($s);				$this->throwError($e->getMessage());			}			$hidden = false;			if (is_null($block->type))			{				$hidden = true;				if (!isset($block->args))				{					foreach ($block->tags as $tag)					{						if (!is_string($tag) || $tag{0} != $this->lessc->mPrefix)						{							$hidden = false;							break;						}					}				}				foreach ($block->tags as $tag)				{					if (is_string($tag))					{						$this->env->children[$tag][] = $block;					}				}			}			if (!$hidden)			{				$this->append(array('block', $block), $s);			}			// this is done here so comments aren't bundled into he block that			// was just closed			$this->whitespace();			return true;		}		// mixin		if ($this->mixinTags($tags) &&			($this->argumentValues($argv) || true) &&			($this->keyword($suffix) || true) && $this->end())		{			$tags = $this->fixTags($tags);			$this->append(array('mixin', $tags, $argv, $suffix), $s);			return true;		}		else		{			$this->seek($s);		}		// spare ;		if ($this->literal(';')) return true;		return false; // got nothing, throw error	}	protected function isDirective($dirname, $directives)	{		// TODO: cache pattern in parser		$pattern = implode("|",			array_map(array("lessc", "preg_quote"), $directives));		$pattern = '/^(-[a-z-]+-)?(' . $pattern . ')$/i';		return preg_match($pattern, $dirname);	}	protected function fixTags($tags)	{		// move @ tags out of variable namespace		foreach ($tags as &$tag)		{			if ($tag{0} == $this->lessc->vPrefix)				$tag[0] = $this->lessc->mPrefix;		}		return $tags;	}	// a list of expressions	protected function expressionList(&$exps)	{		$values = array();		while ($this->expression($exp))		{			$values[] = $exp;		}		if (count($values) == 0) return false;		$exps = lessc::compressList($values, ' ');		return true;	}	/**	 * Attempt to consume an expression.	 * @link http://en.wikipedia.org/wiki/Operator-precedence_parser#Pseudo-code	 */	protected function expression(&$out)	{		if ($this->value($lhs))		{			$out = $this->expHelper($lhs, 0);			// look for / shorthand			if (!empty($this->env->supressedDivision))			{				unset($this->env->supressedDivision);				$s = $this->seek();				if ($this->literal("/") && $this->value($rhs))				{					$out = array("list", "",						array($out, array("keyword", "/"), $rhs));				} else {					$this->seek($s);				}			}			return true;		}		return false;	}	/**	 * recursively parse infix equation with $lhs at precedence $minP	 */	protected function expHelper($lhs, $minP)	{		$this->inExp = true;		$ss = $this->seek();		while (true)		{			$whiteBefore = isset($this->buffer[$this->count - 1]) &&				ctype_space($this->buffer[$this->count - 1]);			// If there is whitespace before the operator, then we require			// whitespace after the operator for it to be an expression			$needWhite = $whiteBefore && !$this->inParens;			if ($this->match(self::$operatorString.($needWhite ? '\s' : ''), $m) && self::$precedence[$m[1]] >= $minP)			{				if (!$this->inParens && isset($this->env->currentProperty) && $m[1] == "/" && empty($this->env->supressedDivision))				{					foreach (self::$supressDivisionProps as $pattern)					{						if (preg_match($pattern, $this->env->currentProperty))						{							$this->env->supressedDivision = true;							break 2;						}					}				}				$whiteAfter = isset($this->buffer[$this->count - 1]) &&					ctype_space($this->buffer[$this->count - 1]);				if (!$this->value($rhs)) break;				// peek for next operator to see what to do with rhs				if ($this->peek(self::$operatorString, $next) && self::$precedence[$next[1]] > self::$precedence[$m[1]])				{					$rhs = $this->expHelper($rhs, self::$precedence[$next[1]]);				}				$lhs = array('expression', $m[1], $lhs, $rhs, $whiteBefore, $whiteAfter);				$ss = $this->seek();				continue;			}			break;		}		$this->seek($ss);		return $lhs;	}	// consume a list of values for a property	public function propertyValue(&$value, $keyName = null)	{		$values = array();		if ($keyName !== null) $this->env->currentProperty = $keyName;		$s = null;		while ($this->expressionList($v))		{			$values[] = $v;			$s = $this->seek();			if (!$this->literal(',')) break;		}		if ($s) $this->seek($s);		if ($keyName !== null) unset($this->env->currentProperty);		if (count($values) == 0) return false;		$value = lessc::compressList($values, ', ');		return true;	}	protected function parenValue(&$out)	{		$s = $this->seek();		// speed shortcut		if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] != "(")		{			return false;		}		$inParens = $this->inParens;		if ($this->literal("(") &&			($this->inParens = true) && $this->expression($exp) &&			$this->literal(")"))		{			$out = $exp;			$this->inParens = $inParens;			return true;		}		else		{			$this->inParens = $inParens;			$this->seek($s);		}		return false;	}	// a single value	protected function value(&$value)	{		$s = $this->seek();		// speed shortcut		if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] == "-")		{			// negation			if ($this->literal("-", false) &&				(($this->variable($inner) && $inner = array("variable", $inner)) ||				$this->unit($inner) ||				$this->parenValue($inner)))			{				$value = array("unary", "-", $inner);				return true;			} else {				$this->seek($s);			}		}		if ($this->parenValue($value)) return true;		if ($this->unit($value)) return true;		if ($this->color($value)) return true;		if ($this->func($value)) return true;		if ($this->string($value)) return true;		if ($this->keyword($word))		{			$value = array('keyword', $word);			return true;		}		// try a variable		if ($this->variable($var))		{			$value = array('variable', $var);			return true;		}		// unquote string (should this work on any type?		if ($this->literal("~") && $this->string($str))		{			$value = array("escape", $str);			return true;		}		else		{			$this->seek($s);		}		// css hack: \0		if ($this->literal('\\') && $this->match('([0-9]+)', $m))		{			$value = array('keyword', '\\'.$m[1]);			return true;		}		else		{			$this->seek($s);		}		return false;	}	// an import statement	protected function import(&$out)	{		$s = $this->seek();		if (!$this->literal('@import')) return false;		// @import "something.css" media;		// @import url("something.css") media;		// @import url(something.css) media;		if ($this->propertyValue($value))		{			$out = array("import", $value);			return true;		}	}	protected function mediaQueryList(&$out)	{		if ($this->genericList($list, "mediaQuery", ",", false))		{			$out = $list[2];			return true;		}		return false;	}	protected function mediaQuery(&$out)	{		$s = $this->seek();		$expressions = null;		$parts = array();		if (($this->literal("only") && ($only = true) || $this->literal("not") && ($not = true) || true) && $this->keyword($mediaType))		{			$prop = array("mediaType");			if (isset($only)) $prop[] = "only";			if (isset($not)) $prop[] = "not";			$prop[] = $mediaType;			$parts[] = $prop;		}		else		{			$this->seek($s);		}		if (!empty($mediaType) && !$this->literal("and"))		{			// ~		}		else		{			$this->genericList($expressions, "mediaExpression", "and", false);			if (is_array($expressions)) $parts = array_merge($parts, $expressions[2]);		}		if (count($parts) == 0)		{			$this->seek($s);			return false;		}		$out = $parts;		return true;	}	protected function mediaExpression(&$out)	{		$s = $this->seek();		$value = null;		if ($this->literal("(") &&			$this->keyword($feature) &&			($this->literal(":") && $this->expression($value) || true) &&			$this->literal(")"))		{			$out = array("mediaExp", $feature);			if ($value) $out[] = $value;			return true;		}		$this->seek($s);		return false;	}	// an unbounded string stopped by $end	protected function openString($end, &$out, $nestingOpen=null, $rejectStrs = null)	{		$oldWhite = $this->eatWhiteDefault;		$this->eatWhiteDefault = false;		$stop = array("'", '"', "@{", $end);		$stop = array_map(array("lessc", "preg_quote"), $stop);		// $stop[] = self::$commentMulti;		if (!is_null($rejectStrs))		{			$stop = array_merge($stop, $rejectStrs);		}		$patt = '(.*?)('.implode("|", $stop).')';		$nestingLevel = 0;		$content = array();		while ($this->match($patt, $m, false))		{			if (!empty($m[1]))			{				$content[] = $m[1];				if ($nestingOpen)				{					$nestingLevel += substr_count($m[1], $nestingOpen);				}			}			$tok = $m[2];			$this->count-= strlen($tok);			if ($tok == $end)			{				if ($nestingLevel == 0)				{					break;				} else {					$nestingLevel--;				}			}			if (($tok == "'" || $tok == '"') && $this->string($str))			{				$content[] = $str;				continue;			}			if ($tok == "@{" && $this->interpolation($inter))			{				$content[] = $inter;				continue;			}			if (in_array($tok, $rejectStrs))			{				$count = null;				break;			}			$content[] = $tok;			$this->count+= strlen($tok);		}		$this->eatWhiteDefault = $oldWhite;		if (count($content) == 0) return false;		// trim the end		if (is_string(end($content)))		{			$content[count($content) - 1] = rtrim(end($content));		}		$out = array("string", "", $content);		return true;	}	protected function string(&$out)	{		$s = $this->seek();		if ($this->literal('"', false))		{			$delim = '"';		} elseif ($this->literal("'", false))		{			$delim = "'";		}		else		{			return false;		}		$content = array();		// look for either ending delim , escape, or string interpolation		$patt = '([^\n]*?)(@\{|\\\\|' .			lessc::preg_quote($delim).')';		$oldWhite = $this->eatWhiteDefault;		$this->eatWhiteDefault = false;		while ($this->match($patt, $m, false))		{			$content[] = $m[1];			if ($m[2] == "@{")			{				$this->count -= strlen($m[2]);				if ($this->interpolation($inter, false))				{					$content[] = $inter;				} else {					$this->count += strlen($m[2]);					$content[] = "@{"; // ignore it				}			} elseif ($m[2] == '\\')			{				$content[] = $m[2];				if ($this->literal($delim, false))				{					$content[] = $delim;				}			} else {				$this->count -= strlen($delim);				break; // delim			}		}		$this->eatWhiteDefault = $oldWhite;		if ($this->literal($delim))		{			$out = array("string", $delim, $content);			return true;		}		$this->seek($s);		return false;	}	protected function interpolation(&$out)	{		$oldWhite = $this->eatWhiteDefault;		$this->eatWhiteDefault = true;		$s = $this->seek();		if ($this->literal("@{") &&			$this->keyword($var) &&			$this->literal("}", false))		{			$out = array("variable", $this->lessc->vPrefix . $var);			$this->eatWhiteDefault = $oldWhite;			if ($this->eatWhiteDefault) $this->whitespace();			return true;		}		$this->eatWhiteDefault = $oldWhite;		$this->seek($s);		return false;	}	protected function unit(&$unit)	{		// speed shortcut		if (isset($this->buffer[$this->count]))		{			$char = $this->buffer[$this->count];			if (!ctype_digit($char) && $char != ".") return false;		}		if ($this->match('([0-9]+(?:\.[0-9]*)?|\.[0-9]+)([%a-zA-Z]+)?', $m))		{			$unit = array("number", $m[1], empty($m[2]) ? "" : $m[2]);			return true;		}		return false;	}	// a # color	protected function color(&$out)	{		if ($this->match('(#(?:[0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{3}))', $m))		{			if (strlen($m[1]) > 7)			{				$out = array("string", "", array($m[1]));			} else {				$out = array("raw_color", $m[1]);			}			return true;		}		return false;	}	// consume a list of property values delimited by ; and wrapped in ()	protected function argumentValues(&$args, $delim = ',')	{		$s = $this->seek();		if (!$this->literal('(')) return false;		$values = array();		while (true)		{			if ($this->expressionList($value)) $values[] = $value;			if (!$this->literal($delim)) break;			else {				if ($value == null) $values[] = null;				$value = null;			}		}		if (!$this->literal(')'))		{			$this->seek($s);			return false;		}		$args = $values;		return true;	}	// consume an argument definition list surrounded by ()	// each argument is a variable name with optional value	// or at the end a ... or a variable named followed by ...	protected function argumentDef(&$args, &$isVararg, $delim = ',')	{		$s = $this->seek();		if (!$this->literal('(')) return false;		$values = array();		$isVararg = false;		while (true)		{			if ($this->literal("..."))			{				$isVararg = true;				break;			}			if ($this->variable($vname))			{				$arg = array("arg", $vname);				$ss = $this->seek();				if ($this->assign() && $this->expressionList($value))				{					$arg[] = $value;				} else {					$this->seek($ss);					if ($this->literal("..."))					{						$arg[0] = "rest";						$isVararg = true;					}				}				$values[] = $arg;				if ($isVararg) break;				continue;			}			if ($this->value($literal))			{				$values[] = array("lit", $literal);			}			if (!$this->literal($delim)) break;		}		if (!$this->literal(')'))		{			$this->seek($s);			return false;		}		$args = $values;		return true;	}	// consume a list of tags	// this accepts a hanging delimiter	protected function tags(&$tags, $simple = false, $delim = ',')	{		$tags = array();		while ($this->tag($tt, $simple))		{			$tags[] = $tt;			if (!$this->literal($delim)) break;		}		if (count($tags) == 0) return false;		return true;	}	// list of tags of specifying mixin path	// optionally separated by > (lazy, accepts extra >)	protected function mixinTags(&$tags)	{		$s = $this->seek();		$tags = array();		while ($this->tag($tt, true))		{			$tags[] = $tt;			$this->literal(">");		}		if (count($tags) == 0) return false;		return true;	}	// a bracketed value (contained within in a tag definition)	protected function tagBracket(&$value)	{		// speed shortcut		if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] != "[")		{			return false;		}		$s = $this->seek();		if ($this->literal('[') && $this->to(']', $c, true) && $this->literal(']', false))		{			$value = '['.$c.']';			// whitespace?			if ($this->whitespace()) $value .= " ";			// escape parent selector, (yuck)			$value = str_replace($this->lessc->parentSelector, "$&$", $value);			return true;		}		$this->seek($s);		return false;	}	protected function tagExpression(&$value)	{		$s = $this->seek();		if ($this->literal("(") && $this->expression($exp) && $this->literal(")"))		{			$value = array('exp', $exp);			return true;		}		$this->seek($s);		return false;	}	// a single tag	protected function tag(&$tag, $simple = false)	{		if ($simple)			$chars = '^,:;{}\][>\(\) "\'';		else			$chars = '^,;{}["\'';		if (!$simple && $this->tagExpression($tag))		{			return true;		}		$tag = '';		while ($this->tagBracket($first)) $tag .= $first;		while (true)		{			if ($this->match('(['.$chars.'0-9]['.$chars.']*)', $m))			{				$tag .= $m[1];				if ($simple) break;				while ($this->tagBracket($brack)) $tag .= $brack;				continue;			} elseif ($this->unit($unit)) { // for keyframes				$tag .= $unit[1] . $unit[2];				continue;			}			break;		}		$tag = trim($tag);		if ($tag == '') return false;		return true;	}	// a css function	protected function func(&$func)	{		$s = $this->seek();		if ($this->match('(%|[\w\-_][\w\-_:\.]+|[\w_])', $m) && $this->literal('('))		{			$fname = $m[1];			$sPreArgs = $this->seek();			$args = array();			while (true)			{				$ss = $this->seek();				// this ugly nonsense is for ie filter properties				if ($this->keyword($name) && $this->literal('=') && $this->expressionList($value))				{					$args[] = array("string", "", array($name, "=", $value));				} else {					$this->seek($ss);					if ($this->expressionList($value))					{						$args[] = $value;					}				}				if (!$this->literal(',')) break;			}			$args = array('list', ',', $args);			if ($this->literal(')'))			{				$func = array('function', $fname, $args);				return true;			} elseif ($fname == 'url')			{				// couldn't parse and in url? treat as string				$this->seek($sPreArgs);				if ($this->openString(")", $string) && $this->literal(")"))				{					$func = array('function', $fname, $string);					return true;				}			}		}		$this->seek($s);		return false;	}	// consume a less variable	protected function variable(&$name)	{		$s = $this->seek();		if ($this->literal($this->lessc->vPrefix, false) &&			($this->variable($sub) || $this->keyword($name)))		{			if (!empty($sub))			{				$name = array('variable', $sub);			} else {				$name = $this->lessc->vPrefix.$name;			}			return true;		}		$name = null;		$this->seek($s);		return false;	}	/**	 * Consume an assignment operator	 * Can optionally take a name that will be set to the current property name	 */	protected function assign($name = null)	{		if ($name) $this->currentProperty = $name;		return $this->literal(':') || $this->literal('=');	}	// consume a keyword	protected function keyword(&$word)	{		if ($this->match('([\w_\-\*!"][\w\-_"]*)', $m))		{			$word = $m[1];			return true;		}		return false;	}	// consume an end of statement delimiter	protected function end()	{		if ($this->literal(';'))		{			return true;		} elseif ($this->count == strlen($this->buffer) || $this->buffer{$this->count} == '}')		{			// if there is end of file or a closing block next then we don't need a ;			return true;		}		return false;	}	protected function guards(&$guards)	{		$s = $this->seek();		if (!$this->literal("when"))		{			$this->seek($s);			return false;		}		$guards = array();		while ($this->guardGroup($g))		{			$guards[] = $g;			if (!$this->literal(",")) break;		}		if (count($guards) == 0)		{			$guards = null;			$this->seek($s);			return false;		}		return true;	}	// a bunch of guards that are and'd together	// TODO rename to guardGroup	protected function guardGroup(&$guardGroup)	{		$s = $this->seek();		$guardGroup = array();		while ($this->guard($guard))		{			$guardGroup[] = $guard;			if (!$this->literal("and")) break;		}		if (count($guardGroup) == 0)		{			$guardGroup = null;			$this->seek($s);			return false;		}		return true;	}	protected function guard(&$guard)	{		$s = $this->seek();		$negate = $this->literal("not");		if ($this->literal("(") && $this->expression($exp) && $this->literal(")"))		{			$guard = $exp;			if ($negate) $guard = array("negate", $guard);			return true;		}		$this->seek($s);		return false;	}	/* raw parsing functions */	protected function literal($what, $eatWhitespace = null)	{		if ($eatWhitespace === null) $eatWhitespace = $this->eatWhiteDefault;		// shortcut on single letter		if (!isset($what[1]) && isset($this->buffer[$this->count]))		{			if ($this->buffer[$this->count] == $what)			{				if (!$eatWhitespace)				{					$this->count++;					return true;				}				// goes below...			} else {				return false;			}		}		if (!isset(self::$literalCache[$what]))		{			self::$literalCache[$what] = lessc::preg_quote($what);		}		return $this->match(self::$literalCache[$what], $m, $eatWhitespace);	}	protected function genericList(&$out, $parseItem, $delim="", $flatten=true)	{		$s = $this->seek();		$items = array();		while ($this->$parseItem($value))		{			$items[] = $value;			if ($delim)			{				if (!$this->literal($delim)) break;			}		}		if (count($items) == 0)		{			$this->seek($s);			return false;		}		if ($flatten && count($items) == 1)		{			$out = $items[0];		}		else		{			$out = array("list", $delim, $items);		}		return true;	}	// advance counter to next occurrence of $what	// $until - don't include $what in advance	// $allowNewline, if string, will be used as valid char set	protected function to($what, &$out, $until = false, $allowNewline = false)	{		if (is_string($allowNewline))		{			$validChars = $allowNewline;		}		else		{			$validChars = $allowNewline ? "." : "[^\n]";		}		if (!$this->match('('.$validChars.'*?)'.lessc::preg_quote($what), $m, !$until)) return false;		if ($until) $this->count -= strlen($what); // give back $what		$out = $m[1];		return true;	}	// try to match something on head of buffer	protected function match($regex, &$out, $eatWhitespace = null)	{		if ($eatWhitespace === null) $eatWhitespace = $this->eatWhiteDefault;		$r = '/'.$regex.($eatWhitespace && !$this->writeComments ? '\s*' : '').'/Ais';		if (preg_match($r, $this->buffer, $out, null, $this->count))		{			$this->count += strlen($out[0]);			if ($eatWhitespace && $this->writeComments) $this->whitespace();			return true;		}		return false;	}	// match some whitespace	protected function whitespace()	{		if ($this->writeComments)		{			$gotWhite = false;			while (preg_match(self::$whitePattern, $this->buffer, $m, null, $this->count))			{				if (isset($m[1]) && empty($this->commentsSeen[$this->count]))				{					$this->append(array("comment", $m[1]));					$this->commentsSeen[$this->count] = true;				}				$this->count += strlen($m[0]);				$gotWhite = true;			}			return $gotWhite;		}		else		{			$this->match("", $m);			return strlen($m[0]) > 0;		}	}	// match something without consuming it	protected function peek($regex, &$out = null, $from=null)	{		if (is_null($from)) $from = $this->count;		$r = '/'.$regex.'/Ais';		$result = preg_match($r, $this->buffer, $out, null, $from);		return $result;	}	// seek to a spot in the buffer or return where we are on no argument	protected function seek($where = null)	{		if ($where === null) return $this->count;		else $this->count = $where;		return true;	}	/* misc functions */	public function throwError($msg = "parse error", $count = null)	{		$count = is_null($count) ? $this->count : $count;		$line = $this->line +			substr_count(substr($this->buffer, 0, $count), "\n");		if (!empty($this->sourceName))		{			$loc = "$this->sourceName on line $line";		}		else		{			$loc = "line: $line";		}		// TODO this depends on $this->count		if ($this->peek("(.*?)(\n|$)", $m, $count))		{			throw new exception("$msg: failed at `$m[1]` $loc");		}		else		{			throw new exception("$msg: $loc");		}	}	protected function pushBlock($selectors=null, $type=null)	{		$b = new stdclass;		$b->parent = $this->env;		$b->type = $type;		$b->id = self::$nextBlockId++;		$b->isVararg = false; // TODO: kill me from here		$b->tags = $selectors;		$b->props = array();		$b->children = array();		$this->env = $b;		return $b;	}	// push a block that doesn't multiply tags	protected function pushSpecialBlock($type)	{		return $this->pushBlock(null, $type);	}	// append a property to the current block	protected function append($prop, $pos = null)	{		if ($pos !== null) $prop[-1] = $pos;		$this->env->props[] = $prop;	}	// pop something off the stack	protected function pop()	{		$old = $this->env;		$this->env = $this->env->parent;		return $old;	}	// remove comments from $text	// todo: make it work for all functions, not just url	protected function removeComments($text)	{		$look = array(			'url(', '//', '/*', '"', "'"		);		$out = '';		$min = null;		while (true)		{			// find the next item			foreach ($look as $token)			{				$pos = strpos($text, $token);				if ($pos !== false)				{					if (!isset($min) || $pos < $min[1]) $min = array($token, $pos);				}			}			if (is_null($min)) break;			$count = $min[1];			$skip = 0;			$newlines = 0;			switch ($min[0])		{			case 'url(':				if (preg_match('/url\(.*?\)/', $text, $m, 0, $count))					$count += strlen($m[0]) - strlen($min[0]);				break;			case '"':			case "'":				if (preg_match('/'.$min[0].'.*?'.$min[0].'/', $text, $m, 0, $count))					$count += strlen($m[0]) - 1;				break;			case '//':				$skip = strpos($text, "\n", $count);				if ($skip === false) $skip = strlen($text) - $count;				else $skip -= $count;				break;			case '/*':				if (preg_match('/\/\*.*?\*\//s', $text, $m, 0, $count))				{					$skip = strlen($m[0]);					$newlines = substr_count($m[0], "\n");				}				break;			}			if ($skip == 0) $count += strlen($min[0]);			$out .= substr($text, 0, $count).str_repeat("\n", $newlines);			$text = substr($text, $count + $skip);			$min = null;		}		return $out.$text;	}}class lessc_formatter_classic {	public $indentChar = "  ";	public $break = "\n";	public $open = " {";	public $close = "}";	public $selectorSeparator = ", ";	public $assignSeparator = ":";	public $openSingle = " { ";	public $closeSingle = " }";	public $disableSingle = false;	public $breakSelectors = false;	public $compressColors = false;	public function __construct()	{		$this->indentLevel = 0;	}	public function indentStr($n = 0)	{		return str_repeat($this->indentChar, max($this->indentLevel + $n, 0));	}	public function property($name, $value)	{		return $name . $this->assignSeparator . $value . ";";	}	protected function isEmpty($block)	{		if (empty($block->lines))		{			foreach ($block->children as $child)			{				if (!$this->isEmpty($child)) return false;			}			return true;		}		return false;	}	public function block($block)	{		if ($this->isEmpty($block)) return;		$inner = $pre = $this->indentStr();		$isSingle = !$this->disableSingle &&			is_null($block->type) && count($block->lines) == 1;		if (!empty($block->selectors))		{			$this->indentLevel++;			if ($this->breakSelectors)			{				$selectorSeparator = $this->selectorSeparator . $this->break . $pre;			} else {				$selectorSeparator = $this->selectorSeparator;			}			echo $pre .				implode($selectorSeparator, $block->selectors);			if ($isSingle)			{				echo $this->openSingle;				$inner = "";			} else {				echo $this->open . $this->break;				$inner = $this->indentStr();			}		}		if (!empty($block->lines))		{			$glue = $this->break.$inner;			echo $inner . implode($glue, $block->lines);			if (!$isSingle && !empty($block->children))			{				echo $this->break;			}		}		foreach ($block->children as $child)		{			$this->block($child);		}		if (!empty($block->selectors))		{			if (!$isSingle && empty($block->children)) echo $this->break;			if ($isSingle)			{				echo $this->closeSingle . $this->break;			} else {				echo $pre . $this->close . $this->break;			}			$this->indentLevel--;		}	}}class lessc_formatter_compressed extends lessc_formatter_classic {	public $disableSingle = true;	public $open = "{";	public $selectorSeparator = ",";	public $assignSeparator = ":";	public $break = "";	public $compressColors = true;	public function indentStr($n = 0)	{		return "";	}}class lessc_formatter_lessjs extends lessc_formatter_classic {	public $disableSingle = true;	public $breakSelectors = true;	public $assignSeparator = ": ";	public $selectorSeparator = ",";}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_MAIL_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('mail') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;foreach ($this->fieldsets as $name => $fieldset) :	$label = !empty($fieldset->label) ? JText::_($fieldset->label, true) : JText::_('COM_PLUGINS_'.$fieldset->name.'_FIELDSET_LABEL', true);	$optionsname = 'options-' . $fieldset->name;	echo JHtml::_('bootstrap.addTab', 'myTab', $optionsname,  $label);	if (isset($fieldset->description) && trim($fieldset->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldset->description)).'</p>';	endif;	?>	<?php $hidden_fields = ''; ?>	<?php foreach ($this->form->getFieldset($name) as $field) : ?>		<?php if (!$field->hidden) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label; ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>		<?php else : $hidden_fields .= $field->input; ?>		<?php endif; ?>	<?php endforeach; ?>	<?php echo $hidden_fields; ?><?php echo JHtml::_('bootstrap.endTab'); ?><?php endforeach; ?>
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Menu Types table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableMenuType extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since  11.1	 */	public function __construct($db)	{		parent::__construct('#__menu_types', 'id', $db);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success, false on failure	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		$this->menutype = JApplication::stringURLSafe($this->menutype);		if (empty($this->menutype))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENUTYPE_EMPTY'));			return false;		}		// Sanitise data.		if (trim($this->title) == '')		{			$this->title = $this->menutype;		}		// Check for unique menutype.		$query = $this->_db->getQuery(true)			->select('COUNT(id)')			->from($this->_db->quoteName('#__menu_types'))			->where($this->_db->quoteName('menutype') . ' = ' . $this->_db->quote($this->menutype))			->where($this->_db->quoteName('id') . ' <> ' . (int) $this->id);		$this->_db->setQuery($query);		if ($this->_db->loadResult())		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_MENUTYPE_EXISTS', $this->menutype));			return false;		}		return true;	}	/**	 * Method to store a row in the database from the JTable instance properties.	 * If a primary key value is set the row with that primary key value will be	 * updated with the instance property values.  If no primary key value is set	 * a new row will be inserted into the database with the properties from the	 * JTable instance.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/store	 * @since   11.1	 */	public function store($updateNulls = false)	{		if ($this->id)		{			// Get the user id			$userId = JFactory::getUser()->id;			// Get the old value of the table			$table = JTable::getInstance('Menutype', 'JTable');			$table->load($this->id);			// Verify that no items are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(					JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE_CHECKOUT'))				);				return false;			}			// Verify that no module for this menu are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(					JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE_CHECKOUT'))				);				return false;			}			// Update the menu items			$query = $this->_db->getQuery(true)				->update('#__menu')				->set('menutype=' . $this->_db->quote($this->menutype))				->where('menutype=' . $this->_db->quote($table->menutype));			$this->_db->setQuery($query);			$this->_db->execute();			// Update the module items			$query = $this->_db->getQuery(true)				->update('#__modules')				->set(				'params=REPLACE(params,' . $this->_db->quote('"menutype":' . json_encode($table->menutype)) . ',' .				$this->_db->quote('"menutype":' . json_encode($this->menutype)) . ')'			);			$query->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'));			$this->_db->setQuery($query);			$this->_db->execute();		}		return parent::store($updateNulls);	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   mixed  $pk  An optional primary key value to delete.  If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/delete	 * @since   11.1	 */	public function delete($pk = null)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk !== null)		{			// Get the user id			$userId = JFactory::getUser()->id;			// Get the old value of the table			$table = JTable::getInstance('Menutype', 'JTable');			$table->load($pk);			// Verify that no items are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('client_id=0')				->where('(checked_out NOT IN (0,' . (int) $userId . ') OR home=1 AND language=' . $this->_db->quote('*') . ')');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_DELETE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE')));				return false;			}			// Verify that no module for this menu are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_DELETE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE')));				return false;			}			// Delete the menu items			$query = $this->_db->getQuery(true)				->delete('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('client_id=0');			$this->_db->setQuery($query);			$this->_db->execute();			// Update the module items			$query = $this->_db->getQuery(true)				->delete('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'));			$this->_db->setQuery($query);			$this->_db->execute();		}		return parent::delete($pk);	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */if (version_compare(PHP_VERSION, '5.3.1', '<')){	die('Your host needs to use PHP 5.3.1 or higher to run this version of Joomla!');}/** * Constant that is checked in included files to prevent direct access. * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower */define('_JEXEC', 1);// Bootstrap the applicationrequire_once dirname(__FILE__) . '/application/bootstrap.php';// Get the application$app = JApplicationWeb::getInstance('InstallationApplicationWeb');// Execute the application$app->execute();
<?php/** * @package     Joomla.Legacy * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla Controller * * Controller (Controllers are where you put all the actual code.) Provides basic * functionality, such as rendering views (aka displaying templates). * * @package     Joomla.Legacy * @subpackage  Controller * @since       12.2 */class JControllerLegacy extends JObject{	/**	 * The base path of the controller	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _basePath.	 */	protected $basePath;	/**	 * The default view for the display method.	 *	 * @var    string	 * @since  12.2	 */	protected $default_view;	/**	 * The mapped task that was performed.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _doTask.	 */	protected $doTask;	/**	 * Redirect message.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _message.	 */	protected $message;	/**	 * Redirect message type.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _messageType.	 */	protected $messageType;	/**	 * Array of class methods	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _methods.	 */	protected $methods;	/**	 * The name of the controller	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _name.	 */	protected $name;	/**	 * The prefix of the models	 *	 * @var    string	 * @since  12.2	 */	protected $model_prefix;	/**	 * The set of search directories for resources (views).	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _path.	 */	protected $paths;	/**	 * URL for redirection.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _redirect.	 */	protected $redirect;	/**	 * Current or most recently performed task.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _task.	 */	protected $task;	/**	 * Array of class methods to call for a given task.	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _taskMap.	 */	protected $taskMap;	/**	 * Hold a JInput object for easier access to the input variables.	 *	 * @var    JInput	 * @since  12.2	 */	protected $input;	/**	 * Instance container.	 *	 * @var    JControllerLegacy	 * @since  12.2	 */	protected static $instance;	/**	 * Adds to the stack of model paths in LIFO order.	 *	 * @param   mixed   $path    The directory (string), or list of directories (array) to add.	 * @param   string  $prefix  A prefix for models	 *	 * @return  void	 */	public static function addModelPath($path, $prefix = '')	{		JModelLegacy::addIncludePath($path, $prefix);	}	/**	 * Create the filename for a resource.	 *	 * @param   string  $type   The resource type to create the filename for.	 * @param   array   $parts  An associative array of filename information. Optional.	 *	 * @return  string  The filename.	 *	 * @note    Replaced _createFileName.	 * @since   12.2	 */	protected static function createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'controller':				if (!empty($parts['format']))				{					if ($parts['format'] == 'html')					{						$parts['format'] = '';					}					else					{						$parts['format'] = '.' . $parts['format'];					}				}				else				{					$parts['format'] = '';				}				$filename = strtolower($parts['name'] . $parts['format'] . '.php');				break;			case 'view':				if (!empty($parts['type']))				{					$parts['type'] = '.' . $parts['type'];				}				else				{					$parts['type'] = '';				}				$filename = strtolower($parts['name'] . '/view' . $parts['type'] . '.php');				break;		}		return $filename;	}	/**	 * Method to get a singleton controller instance.	 *	 * @param   string  $prefix  The prefix for the controller.	 * @param   array   $config  An array of optional constructor options.	 *	 * @return  JControllerLegacy	 *	 * @since   12.2	 * @throws  Exception if the controller cannot be loaded.	 */	public static function getInstance($prefix, $config = array())	{		if (is_object(self::$instance))		{			return self::$instance;		}		$input = JFactory::getApplication()->input;		// Get the environment configuration.		$basePath = array_key_exists('base_path', $config) ? $config['base_path'] : JPATH_COMPONENT;		$format   = $input->getWord('format');		$command  = $input->get('task', 'display');		// Check for array format.		$filter = JFilterInput::getInstance();		if (is_array($command))		{			$command = $filter->clean(array_pop(array_keys($command)), 'cmd');		}		else		{			$command = $filter->clean($command, 'cmd');		}		// Check for a controller.task command.		if (strpos($command, '.') !== false)		{			// Explode the controller.task command.			list ($type, $task) = explode('.', $command);			// Define the controller filename and path.			$file = self::createFileName('controller', array('name' => $type, 'format' => $format));			$path = $basePath . '/controllers/' . $file;			// Reset the task without the controller context.			$input->set('task', $task);		}		else		{			// Base controller.			$type = null;			$task = $command;			// Define the controller filename and path.			$file       = self::createFileName('controller', array('name' => 'controller', 'format' => $format));			$path       = $basePath . '/' . $file;			$backupfile = self::createFileName('controller', array('name' => 'controller'));			$backuppath = $basePath . '/' . $backupfile;		}		// Get the controller class name.		$class = ucfirst($prefix) . 'Controller' . ucfirst($type);		// Include the class if not present.		if (!class_exists($class))		{			// If the controller file path exists, include it.			if (file_exists($path))			{				require_once $path;			}			elseif (isset($backuppath) && file_exists($backuppath))			{				require_once $backuppath;			}			else			{				throw new InvalidArgumentException(JText::sprintf('JLIB_APPLICATION_ERROR_INVALID_CONTROLLER', $type, $format));			}		}		// Instantiate the class.		if (class_exists($class))		{			self::$instance = new $class($config);		}		else		{			throw new InvalidArgumentException(JText::sprintf('JLIB_APPLICATION_ERROR_INVALID_CONTROLLER_CLASS', $class));		}		return self::$instance;	}	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 * Recognized key values include 'name', 'default_task', 'model_path', and	 * 'view_path' (this list is not meant to be comprehensive).	 *	 * @since   12.2	 */	public function __construct($config = array())	{		$this->methods = array();		$this->message = null;		$this->messageType = 'message';		$this->paths = array();		$this->redirect = null;		$this->taskMap = array();		if (defined('JDEBUG') && JDEBUG)		{			JLog::addLogger(array('text_file' => 'jcontroller.log.php'), JLog::ALL, array('controller'));		}		$this->input = JFactory::getApplication()->input;		// Determine the methods to exclude from the base class.		$xMethods = get_class_methods('JControllerLegacy');		// Get the public methods in this class using reflection.		$r = new ReflectionClass($this);		$rMethods = $r->getMethods(ReflectionMethod::IS_PUBLIC);		foreach ($rMethods as $rMethod)		{			$mName = $rMethod->getName();			// Add default display method if not explicitly declared.			if (!in_array($mName, $xMethods) || $mName == 'display')			{				$this->methods[] = strtolower($mName);				// Auto register the methods as tasks.				$this->taskMap[strtolower($mName)] = $mName;			}		}		// Set the view name		if (empty($this->name))		{			if (array_key_exists('name', $config))			{				$this->name = $config['name'];			}			else			{				$this->name = $this->getName();			}		}		// Set a base path for use by the controller		if (array_key_exists('base_path', $config))		{			$this->basePath = $config['base_path'];		}		else		{			$this->basePath = JPATH_COMPONENT;		}		// If the default task is set, register it as such		if (array_key_exists('default_task', $config))		{			$this->registerDefaultTask($config['default_task']);		}		else		{			$this->registerDefaultTask('display');		}		// Set the models prefix		if (empty($this->model_prefix))		{			if (array_key_exists('model_prefix', $config))			{				// User-defined prefix				$this->model_prefix = $config['model_prefix'];			}			else			{				$this->model_prefix = $this->name . 'Model';			}		}		// Set the default model search path		if (array_key_exists('model_path', $config))		{			// User-defined dirs			$this->addModelPath($config['model_path'], $this->model_prefix);		}		else		{			$this->addModelPath($this->basePath . '/models', $this->model_prefix);		}		// Set the default view search path		if (array_key_exists('view_path', $config))		{			// User-defined dirs			$this->setPath('view', $config['view_path']);		}		else		{			$this->setPath('view', $this->basePath . '/views');		}		// Set the default view.		if (array_key_exists('default_view', $config))		{			$this->default_view = $config['default_view'];		}		elseif (empty($this->default_view))		{			$this->default_view = $this->getName();		}	}	/**	 * Adds to the search path for templates and resources.	 *	 * @param   string  $type  The path type (e.g. 'model', 'view').	 * @param   mixed   $path  The directory string  or stream array to search.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 * @note    Replaces _addPath.	 */	protected function addPath($type, $path)	{		// Just force path to array		settype($path, 'array');		if (!isset($this->paths[$type]))		{			$this->paths[$type] = array();		}		// Loop through the path directories		foreach ($path as $dir)		{			// No surrounding spaces allowed!			$dir = rtrim(JPath::check($dir, '/'), '/') . '/';			// Add to the top of the search dirs			array_unshift($this->paths[$type], $dir);		}		return $this;	}	/**	 * Add one or more view paths to the controller's stack, in LIFO order.	 *	 * @param   mixed  $path  The directory (string) or list of directories (array) to add.	 *	 * @return  JControllerLegacy  This object to support chaining.	 */	public function addViewPath($path)	{		$this->addPath('view', $path);		return $this;	}	/**	 * Authorisation check	 *	 * @param   string  $task  The ACO Section Value to check access on.	 *	 * @return  boolean  True if authorised	 *	 * @since   12.2	 * @deprecated  13.3  Use JAccess instead.	 */	public function authorise($task)	{		JLog::add(__METHOD__ . ' is deprecated. Use JAccess instead.', JLog::WARNING, 'deprecated');		return true;	}	/**	 * Method to check whether an ID is in the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  boolean  True if the ID is in the edit list.	 *	 * @since   12.2	 */	protected function checkEditId($context, $id)	{		if ($id)		{			$app = JFactory::getApplication();			$values = (array) $app->getUserState($context . '.id');			$result = in_array((int) $id, $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Checking edit ID %s.%s: %d %s',						$context,						$id,						(int) $result,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}			return $result;		}		else		{			// No id for a new item.			return true;		}	}	/**	 * Method to load and return a model object.	 *	 * @param   string  $name    The name of the model.	 * @param   string  $prefix  Optional model prefix.	 * @param   array   $config  Configuration array for the model. Optional.	 *	 * @return  mixed   Model object on success; otherwise null failure.	 *	 * @since   12.2	 * @note    Replaces _createModel.	 */	protected function createModel($name, $prefix = '', $config = array())	{		// Clean the model name		$modelName = preg_replace('/[^A-Z0-9_]/i', '', $name);		$classPrefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		$result = JModelLegacy::getInstance($modelName, $classPrefix, $config);		return $result;	}	/**	 * Method to load and return a view object. This method first looks in the	 * current template directory for a match and, failing that, uses a default	 * set path to load the view class file.	 *	 * Note the "name, prefix, type" order of parameters, which differs from the	 * "name, type, prefix" order used in related public methods.	 *	 * @param   string  $name    The name of the view.	 * @param   string  $prefix  Optional prefix for the view class name.	 * @param   string  $type    The type of view.	 * @param   array   $config  Configuration array for the view. Optional.	 *	 * @return  mixed  View object on success; null or error result on failure.	 *	 * @since   12.2	 * @note    Replaces _createView.	 * @throws  Exception	 */	protected function createView($name, $prefix = '', $type = '', $config = array())	{		// Clean the view name		$viewName = preg_replace('/[^A-Z0-9_]/i', '', $name);		$classPrefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		$viewType = preg_replace('/[^A-Z0-9_]/i', '', $type);		// Build the view class name		$viewClass = $classPrefix . $viewName;		if (!class_exists($viewClass))		{			jimport('joomla.filesystem.path');			$path = JPath::find($this->paths['view'], $this->createFileName('view', array('name' => $viewName, 'type' => $viewType)));			if ($path)			{				require_once $path;				if (!class_exists($viewClass))				{					throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_VIEW_CLASS_NOT_FOUND', $viewClass, $path), 500);				}			}			else			{				return null;			}		}		return new $viewClass($config);	}	/**	 * Typical view method for MVC based architecture	 *	 * This function is provide as a default implementation, in most cases	 * you will need to override it in your own controllers.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function display($cachable = false, $urlparams = array())	{		$document = JFactory::getDocument();		$viewType = $document->getType();		$viewName = $this->input->get('view', $this->default_view);		$viewLayout = $this->input->get('layout', 'default');		$view = $this->getView($viewName, $viewType, '', array('base_path' => $this->basePath, 'layout' => $viewLayout));		// Get/Create the model		if ($model = $this->getModel($viewName))		{			// Push the model into the view (as default)			$view->setModel($model, true);		}		$view->document = $document;		$conf = JFactory::getConfig();		// Display the view		if ($cachable && $viewType != 'feed' && $conf->get('caching') >= 1)		{			$option = $this->input->get('option');			$cache = JFactory::getCache($option, 'view');			if (is_array($urlparams))			{				$app = JFactory::getApplication();				if (!empty($app->registeredurlparams))				{					$registeredurlparams = $app->registeredurlparams;				}				else				{					$registeredurlparams = new stdClass;				}				foreach ($urlparams as $key => $value)				{					// Add your safe url parameters with variable type as value {@see JFilterInput::clean()}.					$registeredurlparams->$key = $value;				}				$app->registeredurlparams = $registeredurlparams;			}			$cache->get($view, 'display');		}		else		{			$view->display();		}		return $this;	}	/**	 * Execute a task by triggering a method in the derived class.	 *	 * @param   string  $task  The task to perform. If no matching task is found, the '__default' task is executed, if defined.	 *	 * @return  mixed   The value returned by the called method, false in error case.	 *	 * @since   12.2	 * @throws  Exception	 */	public function execute($task)	{		$this->task = $task;		$task = strtolower($task);		if (isset($this->taskMap[$task]))		{			$doTask = $this->taskMap[$task];		}		elseif (isset($this->taskMap['__default']))		{			$doTask = $this->taskMap['__default'];		}		else		{			throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_TASK_NOT_FOUND', $task), 404);		}		// Record the actual task being fired		$this->doTask = $doTask;		return $this->$doTask();	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   12.2	 */	public function getModel($name = '', $prefix = '', $config = array())	{		if (empty($name))		{			$name = $this->getName();		}		if (empty($prefix))		{			$prefix = $this->model_prefix;		}		if ($model = $this->createModel($name, $prefix, $config))		{			// Task is a reserved state			$model->setState('task', $this->task);			// Let's get the application object and set menu information if it's available			$app = JFactory::getApplication();			$menu = $app->getMenu();			if (is_object($menu))			{				if ($item = $menu->getActive())				{					$params = $menu->getParams($item->id);					// Set default state data					$model->setState('parameters.menu', $params);				}			}		}		return $model;	}	/**	 * Method to get the controller name	 *	 * The dispatcher name is set by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the dispatcher	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->name))		{			$r = null;			if (!preg_match('/(.*)Controller/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_CONTROLLER_GET_NAME'), 500);			}			$this->name = strtolower($r[1]);		}		return $this->name;	}	/**	 * Get the last task that is being performed or was most recently performed.	 *	 * @return  string  The task that is being performed or was most recently performed.	 *	 * @since   12.2	 */	public function getTask()	{		return $this->task;	}	/**	 * Gets the available tasks in the controller.	 *	 * @return  array  Array[i] of task names.	 *	 * @since   12.2	 */	public function getTasks()	{		return $this->methods;	}	/**	 * Method to get a reference to the current view and load it if necessary.	 *	 * @param   string  $name    The view name. Optional, defaults to the controller name.	 * @param   string  $type    The view type. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for view. Optional.	 *	 * @return  JViewLegacy  Reference to the view or an error.	 *	 * @since   12.2	 * @throws  Exception	 */	public function getView($name = '', $type = '', $prefix = '', $config = array())	{		static $views;		if (!isset($views))		{			$views = array();		}		if (empty($name))		{			$name = $this->getName();		}		if (empty($prefix))		{			$prefix = $this->getName() . 'View';		}		if (empty($views[$name]))		{			if ($view = $this->createView($name, $prefix, $type, $config))			{				$views[$name] = & $view;			}			else			{				throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_VIEW_NOT_FOUND', $name, $type, $prefix), 500);			}		}		return $views[$name];	}	/**	 * Method to add a record ID to the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function holdEditId($context, $id)	{		$app = JFactory::getApplication();		$values = (array) $app->getUserState($context . '.id');		// Add the id to the list if non-zero.		if (!empty($id))		{			array_push($values, (int) $id);			$values = array_unique($values);			$app->setUserState($context . '.id', $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Holding edit ID %s.%s %s',						$context,						$id,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}		}	}	/**	 * Redirects the browser or returns false if no redirect is set.	 *	 * @return  boolean  False if no redirect exists.	 *	 * @since   12.2	 */	public function redirect()	{		if ($this->redirect)		{			$app = JFactory::getApplication();			$app->redirect($this->redirect, $this->message, $this->messageType);		}		return false;	}	/**	 * Register the default task to perform if a mapping is not found.	 *	 * @param   string  $method  The name of the method in the derived class to perform if a named task is not found.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function registerDefaultTask($method)	{		$this->registerTask('__default', $method);		return $this;	}	/**	 * Register (map) a task to a method in the class.	 *	 * @param   string  $task    The task.	 * @param   string  $method  The name of the method in the derived class to perform for this task.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function registerTask($task, $method)	{		if (in_array(strtolower($method), $this->methods))		{			$this->taskMap[strtolower($task)] = $method;		}		return $this;	}	/**	 * Unregister (unmap) a task in the class.	 *	 * @param   string  $task  The task.	 *	 * @return  JControllerLegacy  This object to support chaining.	 *	 * @since   12.2	 */	public function unregisterTask($task)	{		unset($this->taskMap[strtolower($task)]);		return $this;	}	/**	 * Method to check whether an ID is in the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function releaseEditId($context, $id)	{		$app = JFactory::getApplication();		$values = (array) $app->getUserState($context . '.id');		// Do a strict search of the edit list values.		$index = array_search((int) $id, $values, true);		if (is_int($index))		{			unset($values[$index]);			$app->setUserState($context . '.id', $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Releasing edit ID %s.%s %s',						$context,						$id,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}		}	}	/**	 * Sets the internal message that is passed with a redirect	 *	 * @param   string  $text  Message to display on redirect.	 * @param   string  $type  Message type. Optional, defaults to 'message'.	 *	 * @return  string  Previous message	 *	 * @since   12.2	 */	public function setMessage($text, $type = 'message')	{		$previous = $this->message;		$this->message = $text;		$this->messageType = $type;		return $previous;	}	/**	 * Sets an entire array of search paths for resources.	 *	 * @param   string  $type  The type of path to set, typically 'view' or 'model'.	 * @param   string  $path  The new set of search paths. If null or false, resets to the current directory only.	 *	 * @return  void	 *	 * @note    Replaces _setPath.	 * @since   12.2	 */	protected function setPath($type, $path)	{		// Clear out the prior search dirs		$this->paths[$type] = array();		// Actually add the user-specified directories		$this->addPath($type, $path);	}	/**	 * Set a URL for browser redirection.	 *	 * @param   string  $url   URL to redirect to.	 * @param   string  $msg   Message to display on redirect. Optional, defaults to value set internally by controller, if any.	 * @param   string  $type  Message type. Optional, defaults to 'message' or the type set by a previous call to setMessage.	 *	 * @return  JControllerLegacy  This object to support chaining.	 *	 * @since   12.2	 */	public function setRedirect($url, $msg = null, $type = null)	{		$this->redirect = $url;		if ($msg !== null)		{			// Controller may have set this directly			$this->message = $msg;		}		// Ensure the type is not overwritten by a previous call to setMessage.		if (empty($type))		{			if (empty($this->messageType))			{				$this->messageType = 'message';			}		}		// If the type is explicitly set, set it.		else		{			$this->messageType = $type;		}		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Allows for quoting in language .ini files. */define('_QQ_', '"');/** * Languages/translation handler class * * @package     Joomla.Platform * @subpackage  Language * @since       11.1 */class JLanguage{	protected static $languages = array();	/**	 * Debug language, If true, highlights if string isn't found.	 * @var    boolean	 * @since  11.1	 */	protected $debug = false;	/**	 * The default language, used when a language file in the requested language does not exist.	 * @var    string	 * @since  11.1	 */	protected $default = 'en-GB';	/**	 * An array of orphaned text.	 * @var    array	 * @since  11.1	 */	protected $orphans = array();	/**	 * Array holding the language metadata.	 * @var    array	 * @since  11.1	 */	protected $metadata = null;	/**	 * Array holding the language locale or boolean null if none.	 * @var    array|boolean	 * @since  11.1	 */	protected $locale = null;	/**	 * The language to load.	 * @var    string	 * @since  11.1	 */	protected $lang = null;	/**	 * A nested array of language files that have been loaded	 * @var    array	 * @since  11.1	 */	protected $paths = array();	/**	 * List of language files that are in error state	 * @var    array	 * @since  11.1	 */	protected $errorfiles = array();	/**	 * Translations	 * @var    array	 * @since  11.1	 */	protected $strings = null;	/**	 * An array of used text, used during debugging.	 * @var    array	 * @since  11.1	 */	protected $used = array();	/**	 * Counter for number of loads.	 * @var    integer	 * @since  11.1	 */	protected $counter = 0;	/**	 * An array used to store overrides.	 * @var    array	 * @since  11.1	 */	protected $override = array();	/**	 * Name of the transliterator function for this language.	 * @var    string	 * @since  11.1	 */	protected $transliterator = null;	/**	 * Name of the pluralSuffixesCallback function for this language.	 * @var    string	 * @since  11.1	 */	protected $pluralSuffixesCallback = null;	/**	 * Name of the ignoredSearchWordsCallback function for this language.	 * @var    string	 * @since  11.1	 */	protected $ignoredSearchWordsCallback = null;	/**	 * Name of the lowerLimitSearchWordCallback function for this language.	 * @var    string	 * @since  11.1	 */	protected $lowerLimitSearchWordCallback = null;	/**	 * Name of the uppperLimitSearchWordCallback function for this language	 * @var    string	 * @since  11.1	 */	protected $upperLimitSearchWordCallback = null;	/**	 * Name of the searchDisplayedCharactersNumberCallback function for this language.	 * @var    string	 * @since  11.1	 */	protected $searchDisplayedCharactersNumberCallback = null;	/**	 * Constructor activating the default information of the language.	 *	 * @param   string   $lang   The language	 * @param   boolean  $debug  Indicates if language debugging is enabled.	 *	 * @since   11.1	 */	public function __construct($lang = null, $debug = false)	{		$this->strings = array();		if ($lang == null)		{			$lang = $this->default;		}		$this->setLanguage($lang);		$this->setDebug($debug);		$filename = JPATH_BASE . "/language/overrides/$lang.override.ini";		if (file_exists($filename) && $contents = $this->parse($filename))		{			if (is_array($contents))			{				// Sort the underlying heap by key values to optimize merging				ksort($contents, SORT_STRING);				$this->override = $contents;			}			unset($contents);		}		// Look for a language specific localise class		$class = str_replace('-', '_', $lang . 'Localise');		$paths = array();		if (defined('JPATH_SITE'))		{			// Note: Manual indexing to enforce load order.			$paths[0] = JPATH_SITE . "/language/overrides/$lang.localise.php";			$paths[2] = JPATH_SITE . "/language/$lang/$lang.localise.php";		}		if (defined('JPATH_ADMINISTRATOR'))		{			// Note: Manual indexing to enforce load order.			$paths[1] = JPATH_ADMINISTRATOR . "/language/overrides/$lang.localise.php";			$paths[3] = JPATH_ADMINISTRATOR . "/language/$lang/$lang.localise.php";		}		ksort($paths);		$path = reset($paths);		while (!class_exists($class) && $path)		{			if (file_exists($path))			{				require_once $path;			}			$path = next($paths);		}		if (class_exists($class))		{			/* Class exists. Try to find			 * -a transliterate method,			 * -a getPluralSuffixes method,			 * -a getIgnoredSearchWords method			 * -a getLowerLimitSearchWord method			 * -a getUpperLimitSearchWord method			 * -a getSearchDisplayCharactersNumber method			 */			if (method_exists($class, 'transliterate'))			{				$this->transliterator = array($class, 'transliterate');			}			if (method_exists($class, 'getPluralSuffixes'))			{				$this->pluralSuffixesCallback = array($class, 'getPluralSuffixes');			}			if (method_exists($class, 'getIgnoredSearchWords'))			{				$this->ignoredSearchWordsCallback = array($class, 'getIgnoredSearchWords');			}			if (method_exists($class, 'getLowerLimitSearchWord'))			{				$this->lowerLimitSearchWordCallback = array($class, 'getLowerLimitSearchWord');			}			if (method_exists($class, 'getUpperLimitSearchWord'))			{				$this->upperLimitSearchWordCallback = array($class, 'getUpperLimitSearchWord');			}			if (method_exists($class, 'getSearchDisplayedCharactersNumber'))			{				$this->searchDisplayedCharactersNumberCallback = array($class, 'getSearchDisplayedCharactersNumber');			}		}		$this->load();	}	/**	 * Returns a language object.	 *	 * @param   string   $lang   The language to use.	 * @param   boolean  $debug  The debug mode.	 *	 * @return  JLanguage  The Language object.	 *	 * @since   11.1	 */	public static function getInstance($lang, $debug = false)	{		if (!isset(self::$languages[$lang . $debug]))		{			self::$languages[$lang . $debug] = new JLanguage($lang, $debug);		}		return self::$languages[$lang . $debug];	}	/**	 * Translate function, mimics the php gettext (alias _) function.	 *	 * The function checks if $jsSafe is true, then if $interpretBackslashes is true.	 *	 * @param   string   $string                The string to translate	 * @param   boolean  $jsSafe                Make the result javascript safe	 * @param   boolean  $interpretBackSlashes  Interpret \t and \n	 *	 * @return  string  The translation of the string	 *	 * @since   11.1	 */	public function _($string, $jsSafe = false, $interpretBackSlashes = true)	{		// Detect empty string		if ($string == '')		{			return '';		}		$key = strtoupper($string);		if (isset($this->strings[$key]))		{			$string = $this->debug ? '**' . $this->strings[$key] . '**' : $this->strings[$key];			// Store debug information			if ($this->debug)			{				$caller = $this->getCallerInfo();				if (!array_key_exists($key, $this->used))				{					$this->used[$key] = array();				}				$this->used[$key][] = $caller;			}		}		else		{			if ($this->debug)			{				$caller = $this->getCallerInfo();				$caller['string'] = $string;				if (!array_key_exists($key, $this->orphans))				{					$this->orphans[$key] = array();				}				$this->orphans[$key][] = $caller;				$string = '??' . $string . '??';			}		}		if ($jsSafe)		{			// Javascript filter			$string = addslashes($string);		}		elseif ($interpretBackSlashes)		{			// Interpret \n and \t characters			$string = str_replace(array('\\\\', '\t', '\n'), array("\\", "\t", "\n"), $string);		}		return $string;	}	/**	 * Transliterate function	 *	 * This method processes a string and replaces all accented UTF-8 characters by unaccented	 * ASCII-7 "equivalents".	 *	 * @param   string  $string  The string to transliterate.	 *	 * @return  string  The transliteration of the string.	 *	 * @since   11.1	 */	public function transliterate($string)	{		if ($this->transliterator !== null)		{			return call_user_func($this->transliterator, $string);		}		$string = JLanguageTransliterate::utf8_latin_to_ascii($string);		$string = JString::strtolower($string);		return $string;	}	/**	 * Getter for transliteration function	 *	 * @return  callable  The transliterator function	 *	 * @since   11.1	 */	public function getTransliterator()	{		return $this->transliterator;	}	/**	 * Set the transliteration function.	 *	 * @param   callable  $function  Function name or the actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setTransliterator($function)	{		$previous = $this->transliterator;		$this->transliterator = $function;		return $previous;	}	/**	 * Returns an array of suffixes for plural rules.	 *	 * @param   integer  $count  The count number the rule is for.	 *	 * @return  array    The array of suffixes.	 *	 * @since   11.1	 */	public function getPluralSuffixes($count)	{		if ($this->pluralSuffixesCallback !== null)		{			return call_user_func($this->pluralSuffixesCallback, $count);		}		else		{			return array((string) $count);		}	}	/**	 * Getter for pluralSuffixesCallback function.	 *	 * @return  callable  Function name or the actual function.	 *	 * @since   11.1	 */	public function getPluralSuffixesCallback()	{		return $this->pluralSuffixesCallback;	}	/**	 * Set the pluralSuffixes function.	 *	 * @param   callable  $function  Function name or actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setPluralSuffixesCallback($function)	{		$previous = $this->pluralSuffixesCallback;		$this->pluralSuffixesCallback = $function;		return $previous;	}	/**	 * Returns an array of ignored search words	 *	 * @return  array  The array of ignored search words.	 *	 * @since   11.1	 */	public function getIgnoredSearchWords()	{		if ($this->ignoredSearchWordsCallback !== null)		{			return call_user_func($this->ignoredSearchWordsCallback);		}		else		{			return array();		}	}	/**	 * Getter for ignoredSearchWordsCallback function.	 *	 * @return  callable  Function name or the actual function.	 *	 * @since   11.1	 */	public function getIgnoredSearchWordsCallback()	{		return $this->ignoredSearchWordsCallback;	}	/**	 * Setter for the ignoredSearchWordsCallback function	 *	 * @param   callable  $function  Function name or actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setIgnoredSearchWordsCallback($function)	{		$previous = $this->ignoredSearchWordsCallback;		$this->ignoredSearchWordsCallback = $function;		return $previous;	}	/**	 * Returns a lower limit integer for length of search words	 *	 * @return  integer  The lower limit integer for length of search words (3 if no value was set for a specific language).	 *	 * @since   11.1	 */	public function getLowerLimitSearchWord()	{		if ($this->lowerLimitSearchWordCallback !== null)		{			return call_user_func($this->lowerLimitSearchWordCallback);		}		else		{			return 3;		}	}	/**	 * Getter for lowerLimitSearchWordCallback function	 *	 * @return  callable  Function name or the actual function.	 *	 * @since   11.1	 */	public function getLowerLimitSearchWordCallback()	{		return $this->lowerLimitSearchWordCallback;	}	/**	 * Setter for the lowerLimitSearchWordCallback function.	 *	 * @param   callable  $function  Function name or actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setLowerLimitSearchWordCallback($function)	{		$previous = $this->lowerLimitSearchWordCallback;		$this->lowerLimitSearchWordCallback = $function;		return $previous;	}	/**	 * Returns an upper limit integer for length of search words	 *	 * @return  integer  The upper limit integer for length of search words (20 if no value was set for a specific language).	 *	 * @since   11.1	 */	public function getUpperLimitSearchWord()	{		if ($this->upperLimitSearchWordCallback !== null)		{			return call_user_func($this->upperLimitSearchWordCallback);		}		else		{			return 20;		}	}	/**	 * Getter for upperLimitSearchWordCallback function	 *	 * @return  callable  Function name or the actual function.	 *	 * @since   11.1	 */	public function getUpperLimitSearchWordCallback()	{		return $this->upperLimitSearchWordCallback;	}	/**	 * Setter for the upperLimitSearchWordCallback function	 *	 * @param   callable  $function  Function name or the actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setUpperLimitSearchWordCallback($function)	{		$previous = $this->upperLimitSearchWordCallback;		$this->upperLimitSearchWordCallback = $function;		return $previous;	}	/**	 * Returns the number of characters displayed in search results.	 *	 * @return  integer  The number of characters displayed (200 if no value was set for a specific language).	 *	 * @since   11.1	 */	public function getSearchDisplayedCharactersNumber()	{		if ($this->searchDisplayedCharactersNumberCallback !== null)		{			return call_user_func($this->searchDisplayedCharactersNumberCallback);		}		else		{			return 200;		}	}	/**	 * Getter for searchDisplayedCharactersNumberCallback function	 *	 * @return  callable  Function name or the actual function.	 *	 * @since   11.1	 */	public function getSearchDisplayedCharactersNumberCallback()	{		return $this->searchDisplayedCharactersNumberCallback;	}	/**	 * Setter for the searchDisplayedCharactersNumberCallback function.	 *	 * @param   callable  $function  Function name or the actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setSearchDisplayedCharactersNumberCallback($function)	{		$previous = $this->searchDisplayedCharactersNumberCallback;		$this->searchDisplayedCharactersNumberCallback = $function;		return $previous;	}	/**	 * Checks if a language exists.	 *	 * This is a simple, quick check for the directory that should contain language files for the given user.	 *	 * @param   string  $lang      Language to check.	 * @param   string  $basePath  Optional path to check.	 *	 * @return  boolean  True if the language exists.	 *	 * @since   11.1	 */	public static function exists($lang, $basePath = JPATH_BASE)	{		static $paths = array();		// Return false if no language was specified		if (!$lang)		{			return false;		}		$path = $basePath . '/language/' . $lang;		// Return previous check results if it exists		if (isset($paths[$path]))		{			return $paths[$path];		}		// Check if the language exists		$paths[$path] = is_dir($path);		return $paths[$path];	}	/**	 * Loads a single language file and appends the results to the existing strings	 *	 * @param   string   $extension  The extension for which a language file should be loaded.	 * @param   string   $basePath   The basepath to use.	 * @param   string   $lang       The language to load, default null for the current language.	 * @param   boolean  $reload     Flag that will force a language to be reloaded if set to true.	 * @param   boolean  $default    Flag that force the default language to be loaded if the current does not exist.	 *	 * @return  boolean  True if the file has successfully loaded.	 *	 * @since   11.1	 */	public function load($extension = 'joomla', $basePath = JPATH_BASE, $lang = null, $reload = false, $default = true)	{		if (!$lang)		{			$lang = $this->lang;		}		$path = self::getLanguagePath($basePath, $lang);		$internal = $extension == 'joomla' || $extension == '';		$filename = $internal ? $lang : $lang . '.' . $extension;		$filename = "$path/$filename.ini";		$result = false;		if (isset($this->paths[$extension][$filename]) && !$reload)		{			// This file has already been tested for loading.			$result = $this->paths[$extension][$filename];		}		else		{			// Load the language file			$result = $this->loadLanguage($filename, $extension);			// Check whether there was a problem with loading the file			if ($result === false && $default)			{				// No strings, so either file doesn't exist or the file is invalid				$oldFilename = $filename;				// Check the standard file name				$path = self::getLanguagePath($basePath, $this->default);				$filename = $internal ? $this->default : $this->default . '.' . $extension;				$filename = "$path/$filename.ini";				// If the one we tried is different than the new name, try again				if ($oldFilename != $filename)				{					$result = $this->loadLanguage($filename, $extension, false);				}			}		}		return $result;	}	/**	 * Loads a language file.	 *	 * This method will not note the successful loading of a file - use load() instead.	 *	 * @param   string  $filename   The name of the file.	 * @param   string  $extension  The name of the extension.	 *	 * @return  boolean  True if new strings have been added to the language	 *	 * @see     JLanguage::load()	 * @since   11.1	 */	protected function loadLanguage($filename, $extension = 'unknown')	{		$this->counter++;		$result = false;		$strings = false;		if (file_exists($filename))		{			$strings = $this->parse($filename);		}		if ($strings)		{			if (is_array($strings))			{				// Sort the underlying heap by key values to optimize merging				ksort($strings, SORT_STRING);				$this->strings = array_merge($this->strings, $strings);			}			if (is_array($strings) && count($strings))			{				// Do not bother with ksort here.  Since the originals were sorted, PHP will already have chosen the best heap.				$this->strings = array_merge($this->strings, $this->override);				$result = true;			}		}		// Record the result of loading the extension's file.		if (!isset($this->paths[$extension]))		{			$this->paths[$extension] = array();		}		$this->paths[$extension][$filename] = $result;		return $result;	}	/**	 * Parses a language file.	 *	 * @param   string  $filename  The name of the file.	 *	 * @return  array  The array of parsed strings.	 *	 * @since   11.1	 */	protected function parse($filename)	{		if ($this->debug)		{			// Capture hidden PHP errors from the parsing.			$php_errormsg = null;			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);		}		$contents = file_get_contents($filename);		$contents = str_replace('_QQ_', '"\""', $contents);		$strings = @parse_ini_string($contents);		if (!is_array($strings))		{			$strings = array();		}		if ($this->debug)		{			// Restore error tracking to what it was before.			ini_set('track_errors', $track_errors);			// Initialise variables for manually parsing the file for common errors.			$blacklist = array('YES', 'NO', 'NULL', 'FALSE', 'ON', 'OFF', 'NONE', 'TRUE');			$regex = '/^(|(\[[^\]]*\])|([A-Z][A-Z0-9_\-\.]*\s*=(\s*(("[^"]*")|(_QQ_)))+))\s*(;.*)?$/';			$this->debug = false;			$errors = array();			// Open the file as a stream.			$file = new SplFileObject($filename);			foreach ($file as $lineNumber => $line)			{				// Avoid BOM error as BOM is OK when using parse_ini				if ($lineNumber == 0)				{					$line = str_replace("\xEF\xBB\xBF", '', $line);				}				// Check that the key is not in the blacklist and that the line format passes the regex.				$key = strtoupper(trim(substr($line, 0, strpos($line, '='))));				// Workaround to reduce regex complexity when matching escaped quotes				$line = str_replace('\"', '_QQ_', $line);				if (!preg_match($regex, $line) || in_array($key, $blacklist))				{					$errors[] = $lineNumber;				}			}			// Check if we encountered any errors.			if (count($errors))			{				if (basename($filename) != $this->lang . '.ini')				{					$this->errorfiles[$filename] = $filename . JText::sprintf('JERROR_PARSING_LANGUAGE_FILE', implode(', ', $errors));				}				else				{					$this->errorfiles[$filename] = $filename . '&#160;: error(s) in line(s) ' . implode(', ', $errors);				}			}			elseif ($php_errormsg)			{				// We didn't find any errors but there's probably a parse notice.				$this->errorfiles['PHP' . $filename] = 'PHP parser errors :' . $php_errormsg;			}			$this->debug = true;		}		return $strings;	}	/**	 * Get a metadata language property.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed  The value of the property.	 *	 * @since   11.1	 */	public function get($property, $default = null)	{		if (isset($this->metadata[$property]))		{			return $this->metadata[$property];		}		return $default;	}	/**	 * Determine who called JLanguage or JText.	 *	 * @return  array  Caller information.	 *	 * @since   11.1	 */	protected function getCallerInfo()	{		// Try to determine the source if none was provided		if (!function_exists('debug_backtrace'))		{			return null;		}		$backtrace = debug_backtrace();		$info = array();		// Search through the backtrace to our caller		$continue = true;		while ($continue && next($backtrace))		{			$step = current($backtrace);			$class = @ $step['class'];			// We're looking for something outside of language.php			if ($class != 'JLanguage' && $class != 'JText')			{				$info['function'] = @ $step['function'];				$info['class'] = $class;				$info['step'] = prev($backtrace);				// Determine the file and name of the file				$info['file'] = @ $step['file'];				$info['line'] = @ $step['line'];				$continue = false;			}		}		return $info;	}	/**	 * Getter for Name.	 *	 * @return  string  Official name element of the language.	 *	 * @since   11.1	 */	public function getName()	{		return $this->metadata['name'];	}	/**	 * Get a list of language files that have been loaded.	 *	 * @param   string  $extension  An optional extension name.	 *	 * @return  array	 *	 * @since   11.1	 */	public function getPaths($extension = null)	{		if (isset($extension))		{			if (isset($this->paths[$extension]))			{				return $this->paths[$extension];			}			return null;		}		else		{			return $this->paths;		}	}	/**	 * Get a list of language files that are in error state.	 *	 * @return  array	 *	 * @since   11.1	 */	public function getErrorFiles()	{		return $this->errorfiles;	}	/**	 * Getter for the language tag (as defined in RFC 3066)	 *	 * @return  string  The language tag.	 *	 * @since   11.1	 */	public function getTag()	{		return $this->metadata['tag'];	}	/**	 * Get the RTL property.	 *	 * @return  boolean  True is it an RTL language.	 *	 * @since   11.1	 */	public function isRTL()	{		return (bool) $this->metadata['rtl'];	}	/**	 * Set the Debug property.	 *	 * @param   boolean  $debug  The debug setting.	 *	 * @return  boolean  Previous value.	 *	 * @since   11.1	 */	public function setDebug($debug)	{		$previous = $this->debug;		$this->debug = (boolean) $debug;		return $previous;	}	/**	 * Get the Debug property.	 *	 * @return  boolean  True is in debug mode.	 *	 * @since   11.1	 */	public function getDebug()	{		return $this->debug;	}	/**	 * Get the default language code.	 *	 * @return  string  Language code.	 *	 * @since   11.1	 */	public function getDefault()	{		return $this->default;	}	/**	 * Set the default language code.	 *	 * @param   string  $lang  The language code.	 *	 * @return  string  Previous value.	 *	 * @since   11.1	 */	public function setDefault($lang)	{		$previous = $this->default;		$this->default = $lang;		return $previous;	}	/**	 * Get the list of orphaned strings if being tracked.	 *	 * @return  array  Orphaned text.	 *	 * @since   11.1	 */	public function getOrphans()	{		return $this->orphans;	}	/**	 * Get the list of used strings.	 *	 * Used strings are those strings requested and found either as a string or a constant.	 *	 * @return  array  Used strings.	 *	 * @since   11.1	 */	public function getUsed()	{		return $this->used;	}	/**	 * Determines is a key exists.	 *	 * @param   string  $string  The key to check.	 *	 * @return  boolean  True, if the key exists.	 *	 * @since   11.1	 */	public function hasKey($string)	{		$key = strtoupper($string);		return isset($this->strings[$key]);	}	/**	 * Returns a associative array holding the metadata.	 *	 * @param   string  $lang  The name of the language.	 *	 * @return  mixed  If $lang exists return key/value pair with the language metadata, otherwise return NULL.	 *	 * @since   11.1	 */	public static function getMetadata($lang)	{		$path = self::getLanguagePath(JPATH_BASE, $lang);		$file = $lang . '.xml';		$result = null;		if (is_file("$path/$file"))		{			$result = self::parseXMLLanguageFile("$path/$file");		}		if (empty($result))		{			return null;		}		return $result;	}	/**	 * Returns a list of known languages for an area	 *	 * @param   string  $basePath  The basepath to use	 *	 * @return  array  key/value pair with the language file and real name.	 *	 * @since   11.1	 */	public static function getKnownLanguages($basePath = JPATH_BASE)	{		$dir = self::getLanguagePath($basePath);		$knownLanguages = self::parseLanguageFiles($dir);		return $knownLanguages;	}	/**	 * Get the path to a language	 *	 * @param   string  $basePath  The basepath to use.	 * @param   string  $language  The language tag.	 *	 * @return  string  language related path or null.	 *	 * @since   11.1	 */	public static function getLanguagePath($basePath = JPATH_BASE, $language = null)	{		$dir = $basePath . '/language';		if (!empty($language))		{			$dir .= '/' . $language;		}		return $dir;	}	/**	 * Set the language attributes to the given language.	 *	 * Once called, the language still needs to be loaded using JLanguage::load().	 *	 * @param   string  $lang  Language code.	 *	 * @return  string  Previous value.	 *	 * @since   11.1	 */	public function setLanguage($lang)	{		$previous = $this->lang;		$this->lang = $lang;		$this->metadata = $this->getMetadata($this->lang);		return $previous;	}	/**	 * Get the language locale based on current language.	 *	 * @return  array  The locale according to the language.	 *	 * @since   11.1	 */	public function getLocale()	{		if (!isset($this->locale))		{			$locale = str_replace(' ', '', isset($this->metadata['locale']) ? $this->metadata['locale'] : '');			if ($locale)			{				$this->locale = explode(',', $locale);			}			else			{				$this->locale = false;			}		}		return $this->locale;	}	/**	 * Get the first day of the week for this language.	 *	 * @return  integer  The first day of the week according to the language	 *	 * @since   11.1	 */	public function getFirstDay()	{		return (int) (isset($this->metadata['firstDay']) ? $this->metadata['firstDay'] : 0);	}	/**	 * Searches for language directories within a certain base dir.	 *	 * @param   string  $dir  directory of files.	 *	 * @return  array  Array holding the found languages as filename => real name pairs.	 *	 * @since   11.1	 */	public static function parseLanguageFiles($dir = null)	{		$languages = array();		$iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));		foreach ($iterator as $file)		{			$langs    = array();			$fileName = $file->getFilename();			if (!$file->isFile() || !preg_match("/^([-_A-Za-z]*)\.xml$/", $fileName))			{				continue;			}			try			{				$metadata = self::parseXMLLanguageFile($file->getRealPath());				if ($metadata)				{					$lang = str_replace('.xml', '', $fileName);					$langs[$lang] = $metadata;				}				$languages = array_merge($languages, $langs);			}			catch (RuntimeException $e)			{			}		}		return $languages;	}	/**	 * Parse XML file for language information.	 *	 * @param   string  $path  Path to the XML files.	 *	 * @return  array  Array holding the found metadata as a key => value pair.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function parseXMLLanguageFile($path)	{		if (!is_readable($path))		{			throw new RuntimeException('File not found or not readable');		}		// Try to load the file		$xml = simplexml_load_file($path);		if (!$xml)		{			return null;		}		// Check that it's a metadata file		if ((string) $xml->getName() != 'metafile')		{			return null;		}		$metadata = array();		foreach ($xml->metadata->children() as $child)		{			$metadata[$child->getName()] = (string) $child;		}		return $metadata;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla View * * Class holding methods for displaying presentation data. * * @package     Joomla.Legacy * @subpackage  View * @since       12.2 */class JViewLegacy extends JObject{	/**	 * The name of the view	 *	 * @var    array	 */	protected $_name = null;	/**	 * Registered models	 *	 * @var    array	 */	protected $_models = array();	/**	 * The base path of the view	 *	 * @var    string	 */	protected $_basePath = null;	/**	 * The default model	 *	 * @var	string	 */	protected $_defaultModel = null;	/**	 * Layout name	 *	 * @var    string	 */	protected $_layout = 'default';	/**	 * Layout extension	 *	 * @var    string	 */	protected $_layoutExt = 'php';	/**	 * Layout template	 *	 * @var    string	 */	protected $_layoutTemplate = '_';	/**	 * The set of search directories for resources (templates)	 *	 * @var array	 */	protected $_path = array('template' => array(), 'helper' => array());	/**	 * The name of the default template source file.	 *	 * @var string	 */	protected $_template = null;	/**	 * The output of the template script.	 *	 * @var string	 */	protected $_output = null;	/**	 * Callback for escaping.	 *	 * @var string	 * @deprecated 13.3	 */	protected $_escape = 'htmlspecialchars';	/**	 * Charset to use in escaping mechanisms; defaults to urf8 (UTF-8)	 *	 * @var string	 */	protected $_charset = 'UTF-8';	/**	 * Constructor	 *	 * @param   array  $config  A named configuration array for object construction.<br/>	 *                          name: the name (optional) of the view (defaults to the view class name suffix).<br/>	 *                          charset: the character set to use for display<br/>	 *                          escape: the name (optional) of the function to use for escaping strings<br/>	 *                          base_path: the parent path (optional) of the views directory (defaults to the component folder)<br/>	 *                          template_plath: the path (optional) of the layout directory (defaults to base_path + /views/ + view name<br/>	 *                          helper_path: the path (optional) of the helper files (defaults to base_path + /helpers/)<br/>	 *                          layout: the layout (optional) to use to display the view<br/>	 *	 * @since   12.2	 */	public function __construct($config = array())	{		// Set the view name		if (empty($this->_name))		{			if (array_key_exists('name', $config))			{				$this->_name = $config['name'];			}			else			{				$this->_name = $this->getName();			}		}		// Set the charset (used by the variable escaping functions)		if (array_key_exists('charset', $config))		{			JLog::add('Setting a custom charset for escaping is deprecated. Override JViewLegacy::escape() instead.', JLog::WARNING, 'deprecated');			$this->_charset = $config['charset'];		}		// User-defined escaping callback		if (array_key_exists('escape', $config))		{			$this->setEscape($config['escape']);		}		// Set a base path for use by the view		if (array_key_exists('base_path', $config))		{			$this->_basePath = $config['base_path'];		}		else		{			$this->_basePath = JPATH_COMPONENT;		}		// Set the default template search path		if (array_key_exists('template_path', $config))		{			// User-defined dirs			$this->_setPath('template', $config['template_path']);		}		else		{			$this->_setPath('template', $this->_basePath . '/views/' . $this->getName() . '/tmpl');		}		// Set the default helper search path		if (array_key_exists('helper_path', $config))		{			// User-defined dirs			$this->_setPath('helper', $config['helper_path']);		}		else		{			$this->_setPath('helper', $this->_basePath . '/helpers');		}		// Set the layout		if (array_key_exists('layout', $config))		{			$this->setLayout($config['layout']);		}		else		{			$this->setLayout('default');		}		$this->baseurl = JURI::base(true);	}	/**	 * Execute and display a template script.	 *	 * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.	 *	 * @return  mixed  A string if successful, otherwise a Error object.	 *	 * @see     fetch()	 * @since   12.2	 */	public function display($tpl = null)	{		$result = $this->loadTemplate($tpl);		if ($result instanceof Exception)		{			return $result;		}		echo $result;	}	/**	 * Assigns variables to the view script via differing strategies.	 *	 * This method is overloaded; you can assign all the properties of	 * an object, an associative array, or a single value by name.	 *	 * You are not allowed to set variables that begin with an underscore;	 * these are either private properties for JView or private variables	 * within the template script itself.	 *	 * <code>	 * $view = new JView;	 *	 * // Assign directly	 * $view->var1 = 'something';	 * $view->var2 = 'else';	 *	 * // Assign by name and value	 * $view->assign('var1', 'something');	 * $view->assign('var2', 'else');	 *	 * // Assign by assoc-array	 * $ary = array('var1' => 'something', 'var2' => 'else');	 * $view->assign($obj);	 *	 * // Assign by object	 * $obj = new stdClass;	 * $obj->var1 = 'something';	 * $obj->var2 = 'else';	 * $view->assign($obj);	 *	 * </code>	 *	 * @return  boolean  True on success, false on failure.	 *	 * @deprecated  13.3 Use native PHP syntax.	 */	public function assign()	{		JLog::add(__METHOD__ . ' is deprecated. Use native PHP syntax.', JLog::WARNING, 'deprecated');		// Get the arguments; there may be 1 or 2.		$arg0 = @func_get_arg(0);		$arg1 = @func_get_arg(1);		// Assign by object		if (is_object($arg0))		{			// Assign public properties			foreach (get_object_vars($arg0) as $key => $val)			{				if (substr($key, 0, 1) != '_')				{					$this->$key = $val;				}			}			return true;		}		// Assign by associative array		if (is_array($arg0))		{			foreach ($arg0 as $key => $val)			{				if (substr($key, 0, 1) != '_')				{					$this->$key = $val;				}			}			return true;		}		// Assign by string name and mixed value.		// We use array_key_exists() instead of isset() because isset()		// fails if the value is set to null.		if (is_string($arg0) && substr($arg0, 0, 1) != '_' && func_num_args() > 1)		{			$this->$arg0 = $arg1;			return true;		}		// $arg0 was not object, array, or string.		return false;	}	/**	 * Assign variable for the view (by reference).	 *	 * You are not allowed to set variables that begin with an underscore;	 * these are either private properties for JView or private variables	 * within the template script itself.	 *	 * <code>	 * $view = new JView;	 *	 * // Assign by name and value	 * $view->assignRef('var1', $ref);	 *	 * // Assign directly	 * $view->ref = &$var1;	 * </code>	 *	 * @param   string  $key   The name for the reference in the view.	 * @param   mixed   &$val  The referenced variable.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   12.2	 * @deprecated  13.3  Use native PHP syntax.	 */	public function assignRef($key, &$val)	{		JLog::add(__METHOD__ . ' is deprecated. Use native PHP syntax.', JLog::WARNING, 'deprecated');		if (is_string($key) && substr($key, 0, 1) != '_')		{			$this->$key = &$val;			return true;		}		return false;	}	/**	 * Escapes a value for output in a view script.	 *	 * If escaping mechanism is either htmlspecialchars or htmlentities, uses	 * {@link $_encoding} setting.	 *	 * @param   mixed  $var  The output to escape.	 *	 * @return  mixed  The escaped value.	 *	 * @since   12.2	 */	public function escape($var)	{		if (in_array($this->_escape, array('htmlspecialchars', 'htmlentities')))		{			return call_user_func($this->_escape, $var, ENT_COMPAT, $this->_charset);		}		return call_user_func($this->_escape, $var);	}	/**	 * Method to get data from a registered model or a property of the view	 *	 * @param   string  $property  The name of the method to call on the model or the property to get	 * @param   string  $default   The name of the model to reference or the default value [optional]	 *	 * @return  mixed  The return value of the method	 *	 * @since   12.2	 */	public function get($property, $default = null)	{		// If $model is null we use the default model		if (is_null($default))		{			$model = $this->_defaultModel;		}		else		{			$model = strtolower($default);		}		// First check to make sure the model requested exists		if (isset($this->_models[$model]))		{			// Model exists, let's build the method name			$method = 'get' . ucfirst($property);			// Does the method exist?			if (method_exists($this->_models[$model], $method))			{				// The method exists, let's call it and return what we get				$result = $this->_models[$model]->$method();				return $result;			}		}		// Degrade to JObject::get		$result = parent::get($property, $default);		return $result;	}	/**	 * Method to get the model object	 *	 * @param   string  $name  The name of the model (optional)	 *	 * @return  mixed  JModelLegacy object	 *	 * @since   12.2	 */	public function getModel($name = null)	{		if ($name === null)		{			$name = $this->_defaultModel;		}		return $this->_models[strtolower($name)];	}	/**	 * Get the layout.	 *	 * @return  string  The layout name	 */	public function getLayout()	{		return $this->_layout;	}	/**	 * Get the layout template.	 *	 * @return  string  The layout template name	 */	public function getLayoutTemplate()	{		return $this->_layoutTemplate;	}	/**	 * Method to get the view name	 *	 * The model name by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the model	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->_name))		{			$classname = get_class($this);			$viewpos = strpos($classname, 'View');			if ($viewpos === false)			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_VIEW_GET_NAME'), 500);			}			$this->_name = strtolower(substr($classname, $viewpos + 4));		}		return $this->_name;	}	/**	 * Method to add a model to the view.  We support a multiple model single	 * view system by which models are referenced by classname.  A caveat to the	 * classname referencing is that any classname prepended by JModel will be	 * referenced by the name without JModel, eg. JModelCategory is just	 * Category.	 *	 * @param   JModelLegacy  $model    The model to add to the view.	 * @param   boolean       $default  Is this the default model?	 *	 * @return  object   The added model.	 *	 * @since   12.2	 */	public function setModel($model, $default = false)	{		$name = strtolower($model->getName());		$this->_models[$name] = $model;		if ($default)		{			$this->_defaultModel = $name;		}		return $model;	}	/**	 * Sets the layout name to use	 *	 * @param   string  $layout  The layout name or a string in format <template>:<layout file>	 *	 * @return  string  Previous value.	 *	 * @since   12.2	 */	public function setLayout($layout)	{		$previous = $this->_layout;		if (strpos($layout, ':') === false)		{			$this->_layout = $layout;		}		else		{			// Convert parameter to array based on :			$temp = explode(':', $layout);			$this->_layout = $temp[1];			// Set layout template			$this->_layoutTemplate = $temp[0];		}		return $previous;	}	/**	 * Allows a different extension for the layout files to be used	 *	 * @param   string  $value  The extension.	 *	 * @return  string   Previous value	 *	 * @since   12.2	 */	public function setLayoutExt($value)	{		$previous = $this->_layoutExt;		if ($value = preg_replace('#[^A-Za-z0-9]#', '', trim($value)))		{			$this->_layoutExt = $value;		}		return $previous;	}	/**	 * Sets the _escape() callback.	 *	 * @param   mixed  $spec  The callback for _escape() to use.	 *	 * @return  void	 *	 * @since   12.2	 * @deprecated  13.3  Override JViewLegacy::escape() instead.	 */	public function setEscape($spec)	{		JLog::add(__METHOD__ . ' is deprecated. Override JViewLegacy::escape() instead.', JLog::WARNING, 'deprecated');		$this->_escape = $spec;	}	/**	 * Adds to the stack of view script paths in LIFO order.	 *	 * @param   mixed  $path  A directory path or an array of paths.	 *	 * @return  void	 *	 * @since   12.2	 */	public function addTemplatePath($path)	{		$this->_addPath('template', $path);	}	/**	 * Adds to the stack of helper script paths in LIFO order.	 *	 * @param   mixed  $path  A directory path or an array of paths.	 *	 * @return  void	 *	 * @since   12.2	 */	public function addHelperPath($path)	{		$this->_addPath('helper', $path);	}	/**	 * Load a template file -- first look in the templates folder for an override	 *	 * @param   string  $tpl  The name of the template source file; automatically searches the template paths and compiles as needed.	 *	 * @return  string  The output of the the template script.	 *	 * @since   12.2	 * @throws  Exception	 */	public function loadTemplate($tpl = null)	{		// Clear prior output		$this->_output = null;		$template = JFactory::getApplication()->getTemplate();		$layout = $this->getLayout();		$layoutTemplate = $this->getLayoutTemplate();		// Create the template file name based on the layout		$file = isset($tpl) ? $layout . '_' . $tpl : $layout;		// Clean the file name		$file = preg_replace('/[^A-Z0-9_\.-]/i', '', $file);		$tpl = isset($tpl) ? preg_replace('/[^A-Z0-9_\.-]/i', '', $tpl) : $tpl;		// Load the language file for the template		$lang = JFactory::getLanguage();		$lang->load('tpl_' . $template, JPATH_BASE, null, false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", null, false, false)			|| $lang->load('tpl_' . $template, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", $lang->getDefault(), false, false);		// Change the template folder if alternative layout is in different template		if (isset($layoutTemplate) && $layoutTemplate != '_' && $layoutTemplate != $template)		{			$this->_path['template'] = str_replace($template, $layoutTemplate, $this->_path['template']);		}		// Load the template script		jimport('joomla.filesystem.path');		$filetofind = $this->_createFileName('template', array('name' => $file));		$this->_template = JPath::find($this->_path['template'], $filetofind);		// If alternate layout can't be found, fall back to default layout		if ($this->_template == false)		{			$filetofind = $this->_createFileName('', array('name' => 'default' . (isset($tpl) ? '_' . $tpl : $tpl)));			$this->_template = JPath::find($this->_path['template'], $filetofind);		}		if ($this->_template != false)		{			// Unset so as not to introduce into template scope			unset($tpl);			unset($file);			// Never allow a 'this' property			if (isset($this->this))			{				unset($this->this);			}			// Start capturing output into a buffer			ob_start();			// Include the requested template filename in the local scope			// (this will execute the view logic).			include $this->_template;			// Done with the requested template; get the buffer and			// clear it.			$this->_output = ob_get_contents();			ob_end_clean();			return $this->_output;		}		else		{			throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_LAYOUTFILE_NOT_FOUND', $file), 500);		}	}	/**	 * Load a helper file	 *	 * @param   string  $hlp  The name of the helper source file automatically searches the helper paths and compiles as needed.	 *	 * @return  void	 *	 * @since   12.2	 */	public function loadHelper($hlp = null)	{		// Clean the file name		$file = preg_replace('/[^A-Z0-9_\.-]/i', '', $hlp);		// Load the template script		jimport('joomla.filesystem.path');		$helper = JPath::find($this->_path['helper'], $this->_createFileName('helper', array('name' => $file)));		if ($helper != false)		{			// Include the requested template filename in the local scope			include_once $helper;		}	}	/**	 * Sets an entire array of search paths for templates or resources.	 *	 * @param   string  $type  The type of path to set, typically 'template'.	 * @param   mixed   $path  The new search path, or an array of search paths.  If null or false, resets to the current directory only.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function _setPath($type, $path)	{		$component = JApplicationHelper::getComponentName();		$app = JFactory::getApplication();		// Clear out the prior search dirs		$this->_path[$type] = array();		// Actually add the user-specified directories		$this->_addPath($type, $path);		// Always add the fallback directories as last resort		switch (strtolower($type))		{			case 'template':				// Set the alternative template search dir				if (isset($app))				{					$component = preg_replace('/[^A-Z0-9_\.-]/i', '', $component);					$fallback = JPATH_THEMES . '/' . $app->getTemplate() . '/html/' . $component . '/' . $this->getName();					$this->_addPath('template', $fallback);				}				break;		}	}	/**	 * Adds to the search path for templates and resources.	 *	 * @param   string  $type  The type of path to add.	 * @param   mixed   $path  The directory or stream, or an array of either, to search.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function _addPath($type, $path)	{		// Just force to array		settype($path, 'array');		// Loop through the path directories		foreach ($path as $dir)		{			// No surrounding spaces allowed!			$dir = trim($dir);			// Add trailing separators as needed			if (substr($dir, -1) != DIRECTORY_SEPARATOR)			{				// Directory				$dir .= DIRECTORY_SEPARATOR;			}			// Add to the top of the search dirs			array_unshift($this->_path[$type], $dir);		}	}	/**	 * Create the filename for a resource	 *	 * @param   string  $type   The resource type to create the filename for	 * @param   array   $parts  An associative array of filename information	 *	 * @return  string  The filename	 *	 * @since   12.2	 */	protected function _createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'template':				$filename = strtolower($parts['name']) . '.' . $this->_layoutExt;				break;			default:				$filename = strtolower($parts['name']) . '.php';				break;		}		return $filename;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content categories view. * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewCategories extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		$parent		= $this->get('Parent');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		if ($items === false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		$params = &$state->params;		$items = array($parent->id => $items);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevelcat = $params->get('maxLevelcat', -1);		$this->params = &$params;		$this->parent = &$parent;		$this->items  = &$items;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_WEBLINKS_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Profile view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersViewProfile extends JViewLegacy{	protected $data;	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	$tpl	The template file to include	 * @since   1.6	 */	public function display($tpl = null)	{		// Get the view data.		$this->data		= $this->get('Data');		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->get('params');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check if a user was found.		if (!$this->data->id)		{			JError::raiseError(404, JText::_('JERROR_USERS_PROFILE_NOT_FOUND'));			return false;		}		$this->data->tags = new JHelperTags;		$this->data->tags->getItemTags('com_users.user.', $this->data->id);		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$user		= JFactory::getUser();		$login		= $user->get('guest') ? true : false;		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $user->name));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_PROFILE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Update's Update View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.4 */class JoomlaupdateViewUpdate extends JViewLegacy{	/**	 * Renders the view	 *	 * @param   string  $tpl  Template name	 *	 * @return void	 */	public function display($tpl=null)	{		$password = JFactory::getApplication()->getUserState('com_joomlaupdate.password', null);		$filesize = JFactory::getApplication()->getUserState('com_joomlaupdate.filesize', null);		$ajaxUrl = JURI::base().'components/com_joomlaupdate/restore.php';		$returnUrl = 'index.php?option=com_joomlaupdate&task=update.finalise';		// Set the toolbar information		JToolbarHelper::title(JText::_('COM_JOOMLAUPDATE_OVERVIEW'), 'install');		JToolBarHelper::divider();		JToolBarHelper::help('JHELP_COMPONENTS_JOOMLA_UPDATE');		// Add toolbar buttons		if (JFactory::getUser()->authorise('core.admin', 'com_joomlaupdate'))		{			JToolbarHelper::preferences('com_joomlaupdate');		}		// Load mooTools		JHtml::_('behavior.framework', true);		$updateScript = <<<ENDSCRIPTvar joomlaupdate_password = '$password';var joomlaupdate_totalsize = '$filesize';var joomlaupdate_ajax_url = '$ajaxUrl';var joomlaupdate_return_url = '$returnUrl';ENDSCRIPT;		// Load our Javascript		$document = JFactory::getDocument();		$document->addScript('../media/com_joomlaupdate/json2.js');		$document->addScript('../media/com_joomlaupdate/encryption.js');		$document->addScript('../media/com_joomlaupdate/update.js');		JHtml::_('script', 'system/progressbar.js', true, true);		JHtml::_('stylesheet', 'media/mediamanager.css', array(), true);		$document->addScriptDeclaration($updateScript);		// Render the view		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Message configuration model. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesModelConfig extends JModelForm{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app	= JFactory::getApplication('administrator');		$user	= JFactory::getUser();		$this->setState('user.id', $user->get('id'));		// Load the parameters.		$params	= JComponentHelper::getParams('com_messages');		$this->setState('params', $params);	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function &getItem()	{		$item = new JObject;		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('cfg_name, cfg_value')			->from('#__messages_cfg')			->where('user_id = '.(int) $this->getState('user.id'));		$db->setQuery($query);		try		{			$rows = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		foreach ($rows as $row)		{			$item->set($row->cfg_name, $row->cfg_value);		}		$this->preprocessData('com_messages.config', $item);		return $item;	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_messages.config', 'config', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 */	public function save($data)	{		$db = $this->getDbo();		if ($userId = (int) $this->getState('user.id'))		{			$db->setQuery(				'DELETE FROM #__messages_cfg'.				' WHERE user_id = '. $userId			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}			$tuples = array();			foreach ($data as $k => $v)			{				$tuples[] = '(' . $userId.', ' . $db->quote($k) . ', ' . $db->quote($v) . ')';			}			if ($tuples)			{				$db->setQuery(					'INSERT INTO #__messages_cfg'.					' (user_id, cfg_name, cfg_value)'.					' VALUES '.implode(',', $tuples)				);				try				{				$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}			return true;		}		else		{			$this->setError('COM_MESSAGES_ERR_INVALID_USER');			return false;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument head renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererHead extends JDocumentRenderer{	/**	 * Renders the document head and returns the results as a string	 *	 * @param   string  $head     (unused)	 * @param   array   $params   Associative array of values	 * @param   string  $content  The script	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 *	 * @note    Unused arguments are retained to preserve backward compatibility.	 */	public function render($head, $params = array(), $content = null)	{		ob_start();		echo $this->fetchHead($this->_doc);		$buffer = ob_get_contents();		ob_end_clean();		return $buffer;	}	/**	 * Generates the head HTML and return the results as a string	 *	 * @param   JDocument  $document  The document for which the head will be created	 *	 * @return  string  The head hTML	 *	 * @since   11.1	 */	public function fetchHead($document)	{		// Convert the tagids to titles		$tagsHelper = new JHelperTags();		if (isset($document->_metaTags['standard']['tags']))		{			$document->_metaTags['standard']['tags'] = implode(', ', $tagsHelper->getTagNames($document->_metaTags['standard']['tags']));		}		// Trigger the onBeforeCompileHead event		$app = JFactory::getApplication();		$app->triggerEvent('onBeforeCompileHead');		// Get line endings		$lnEnd = $document->_getLineEnd();		$tab = $document->_getTab();		$tagEnd = ' />';		$buffer = '';		// Generate charset when using HTML5 (should happen first)		if ($document->isHtml5())		{			$buffer .= $tab . '<meta charset="' . $document->getCharset() . '" />' . $lnEnd;		}		// Generate base tag (need to happen early)		$base = $document->getBase();		if (!empty($base))		{			$buffer .= $tab . '<base href="' . $document->getBase() . '" />' . $lnEnd;		}		// Generate META tags (needs to happen as early as possible in the head)		foreach ($document->_metaTags as $type => $tag)		{			foreach ($tag as $name => $content)			{				if ($type == 'http-equiv' && !($document->isHtml5() && $name == 'content-type'))				{					$buffer .= $tab . '<meta http-equiv="' . $name . '" content="' . htmlspecialchars($content) . '" />' . $lnEnd;				}				elseif ($type == 'standard' && !empty($content))				{					$buffer .= $tab . '<meta name="' . $name . '" content="' . htmlspecialchars($content) . '" />' . $lnEnd;				}			}		}		// Don't add empty descriptions		$documentDescription = $document->getDescription();		if ($documentDescription)		{			$buffer .= $tab . '<meta name="description" content="' . htmlspecialchars($documentDescription) . '" />' . $lnEnd;		}		// Don't add empty generators		$generator = $document->getGenerator();		if ($generator)		{			$buffer .= $tab . '<meta name="generator" content="' . htmlspecialchars($generator) . '" />' . $lnEnd;		}		$buffer .= $tab . '<title>' . htmlspecialchars($document->getTitle(), ENT_COMPAT, 'UTF-8') . '</title>' . $lnEnd;		// Generate link declarations		foreach ($document->_links as $link => $linkAtrr)		{			$buffer .= $tab . '<link href="' . $link . '" ' . $linkAtrr['relType'] . '="' . $linkAtrr['relation'] . '"';			if ($temp = JArrayHelper::toString($linkAtrr['attribs']))			{				$buffer .= ' ' . $temp;			}			$buffer .= ' />' . $lnEnd;		}		// Generate stylesheet links		foreach ($document->_styleSheets as $strSrc => $strAttr)		{			$buffer .= $tab . '<link rel="stylesheet" href="' . $strSrc . '" type="' . $strAttr['mime'] . '"';			if (!is_null($strAttr['media']))			{				$buffer .= ' media="' . $strAttr['media'] . '" ';			}			if ($temp = JArrayHelper::toString($strAttr['attribs']))			{				$buffer .= ' ' . $temp;			}			$buffer .= $tagEnd . $lnEnd;		}		// Generate stylesheet declarations		foreach ($document->_style as $type => $content)		{			$buffer .= $tab . '<style type="' . $type . '">' . $lnEnd;			// This is for full XHTML support.			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . '<![CDATA[' . $lnEnd;			}			$buffer .= $content . $lnEnd;			// See above note			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . ']]>' . $lnEnd;			}			$buffer .= $tab . '</style>' . $lnEnd;		}		// Generate script file links		foreach ($document->_scripts as $strSrc => $strAttr)		{			$buffer .= $tab . '<script src="' . $strSrc . '"';			if (!is_null($strAttr['mime']))			{				$buffer .= ' type="' . $strAttr['mime'] . '"';			}			if ($strAttr['defer'])			{				$buffer .= ' defer="defer"';			}			if ($strAttr['async'])			{				$buffer .= ' async="async"';			}			$buffer .= '></script>' . $lnEnd;		}		// Generate script declarations		foreach ($document->_script as $type => $content)		{			$buffer .= $tab . '<script type="' . $type . '">' . $lnEnd;			// This is for full XHTML support.			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . '<![CDATA[' . $lnEnd;			}			$buffer .= $content . $lnEnd;			// See above note			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . ']]>' . $lnEnd;			}			$buffer .= $tab . '</script>' . $lnEnd;		}		// Generate script language declarations.		if (count(JText::script()))		{			$buffer .= $tab . '<script type="text/javascript">' . $lnEnd;			$buffer .= $tab . $tab . '(function() {' . $lnEnd;			$buffer .= $tab . $tab . $tab . 'var strings = ' . json_encode(JText::script()) . ';' . $lnEnd;			$buffer .= $tab . $tab . $tab . 'if (typeof Joomla == \'undefined\') {' . $lnEnd;			$buffer .= $tab . $tab . $tab . $tab . 'Joomla = {};' . $lnEnd;			$buffer .= $tab . $tab . $tab . $tab . 'Joomla.JText = strings;' . $lnEnd;			$buffer .= $tab . $tab . $tab . '}' . $lnEnd;			$buffer .= $tab . $tab . $tab . 'else {' . $lnEnd;			$buffer .= $tab . $tab . $tab . $tab . 'Joomla.JText.load(strings);' . $lnEnd;			$buffer .= $tab . $tab . $tab . '}' . $lnEnd;			$buffer .= $tab . $tab . '})();' . $lnEnd;			$buffer .= $tab . '</script>' . $lnEnd;		}		foreach ($document->_custom as $custom)		{			$buffer .= $tab . $custom . $lnEnd;		}		return $buffer;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a standard button with a confirm dialog * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonConfirm extends JToolbarButton{	/**	 * Button type	 *	 * @var    string	 */	protected $_name = 'Confirm';	/**	 * Fetch the HTML for the button	 *	 * @param   string   $type      Unused string.	 * @param   string   $msg       Message to render	 * @param   string   $name      Name to be used as apart of the id	 * @param   string   $text      Button text	 * @param   string   $task      The task associated with the button	 * @param   boolean  $list      True to allow use of lists	 * @param   boolean  $hideMenu  True to hide the menu on click	 *	 * @return  string   HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Confirm', $msg = '', $name = '', $text = '', $task = '', $list = true, $hideMenu = false)	{		$text = JText::_($text);		$msg = JText::_($msg, true);		$class = $this->fetchIconClass($name);		$doTask = $this->_getCommand($msg, $name, $task, $list);		$html = "<button href=\"#\" onclick=\"$doTask\" class=\"btn btn-small\">\n";		$html .= "<span class=\"$class\">\n";		$html .= "</span>\n";		$html .= "$text\n";		$html .= "</button>\n";		return $html;	}	/**	 * Get the button CSS Id	 *	 * @param   string   $type      Button type	 * @param   string   $name      Name to be used as apart of the id	 * @param   string   $text      Button text	 * @param   string   $task      The task associated with the button	 * @param   boolean  $list      True to allow use of lists	 * @param   boolean  $hideMenu  True to hide the menu on click	 *	 * @return  string  Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type = 'Confirm', $name = '', $text = '', $task = '', $list = true, $hideMenu = false)	{		return $this->_parent->getName() . '-' . $name;	}	/**	 * Get the JavaScript command for the button	 *	 * @param   object   $msg   The message to display.	 * @param   string   $name  Not used.	 * @param   string   $task  The task used by the application	 * @param   boolean  $list  True is requires a list confirmation.	 *	 * @return  string  JavaScript command string	 *	 * @since   3.0	 */	protected function _getCommand($msg, $name, $task, $list)	{		JHtml::_('behavior.framework');		$message = JText::_('JLIB_HTML_PLEASE_MAKE_A_SELECTION_FROM_THE_LIST');		$message = addslashes($message);		if ($list)		{			$cmd = "if (document.adminForm.boxchecked.value==0){alert('$message');}else{if (confirm('$msg')){Joomla.submitbutton('$task');}}";		}		else		{			$cmd = "if (confirm('$msg')){Joomla.submitbutton('$task');}";		}		return $cmd;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Manage Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerControllerManage extends JControllerLegacy{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('unpublish', 'publish');		$this->registerTask('publish',   'publish');	}	/**	 * Enable/Disable an extension (if supported).	 *	 * @return  void	 *	 * @since   1.6	 */	public function publish()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids    = $this->input->get('cid', array(), 'array');		$values = array('publish' => 1, 'unpublish' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_INSTALLER_ERROR_NO_EXTENSIONS_SELECTED'));		}		else		{			// Get the model.			$model	= $this->getModel('manage');			// Change the state of the records.			if (!$model->publish($ids, $value))			{				JError::raiseWarning(500, implode('<br />', $model->getErrors()));			}			else			{				if ($value == 1)				{					$ntext = 'COM_INSTALLER_N_EXTENSIONS_PUBLISHED';				}				elseif ($value == 0)				{					$ntext = 'COM_INSTALLER_N_EXTENSIONS_UNPUBLISHED';				}				$this->setMessage(JText::plural($ntext, count($ids)));			}		}		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}	/**	 * Remove an extension (Uninstall).	 *	 * @return  void	 *	 * @since   1.5	 */	public function remove()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$eid   = $this->input->get('cid', array(), 'array');		$model = $this->getModel('manage');		JArrayHelper::toInteger($eid, array());		$result = $model->remove($eid);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}	/**	 * Refreshes the cached metadata about an extension.	 *	 * Useful for debugging and testing purposes when the XML file might change.	 *	 * @return  void	 *	 * @since   1.6	 */	public function refresh()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$uid   = $this->input->get('cid', array(), 'array');		$model = $this->getModel('manage');		JArrayHelper::toInteger($uid, array());		$result = $model->refresh($uid);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_METADATA_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('metadata') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Link class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedLink{	/**	 * @var    string	 * @since  12.3	 */	public $uri;	/**	 * @var    string	 * @since  12.3	 */	public $relation;	/**	 * @var    string	 * @since  12.3	 */	public $type;	/**	 * @var    string	 * @since  12.3	 */	public $language;	/**	 * @var    string	 * @since  12.3	 */	public $title;	/**	 * @var    integer	 * @since  12.3	 */	public $length;	/**	 * Constructor.	 *	 * @param   string   $uri       The URI to the linked resource.	 * @param   string   $relation  The relationship between the feed and the linked resource.	 * @param   string   $type      The resource type.	 * @param   string   $language  The language of the resource found at the given URI.	 * @param   string   $title     The title of the resource.	 * @param   integer  $length    The length of the resource in bytes.	 *	 * @since   12.3	 */	public function __construct($uri = null, $relation = null, $type = null, $language = null, $title = null, $length = null)	{		$this->uri = $uri;		$this->relation = $relation;		$this->type = $type;		$this->language = $language;		$this->title = $title;		// Validate the length input.		if (isset($length) && !is_numeric($length))		{			throw new InvalidArgumentException('Length must be numeric.');		}		$this->length = (int) $length;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Database connector class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 * @deprecated  13.1 */abstract class JDatabase{	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function query()	{		JLog::add('JDatabase::query() is deprecated, use JDatabaseDriver::execute() instead.', JLog::WARNING, 'deprecated');		return $this->execute();	}	/**	 * Get a list of available database connectors.  The list will only be populated with connectors that both	 * the class exists and the static test method returns true.  This gives us the ability to have a multitude	 * of connector classes that are self-aware as to whether or not they are able to be used on a given system.	 *	 * @return  array  An array of available database connectors.	 *	 * @since   11.1	 * @deprecated  13.1	 */	public static function getConnectors()	{		JLog::add('JDatabase::getConnectors() is deprecated, use JDatabaseDriver::getConnectors() instead.', JLog::WARNING, 'deprecated');		return JDatabaseDriver::getConnectors();	}	/**	 * Gets the error message from the database connection.	 *	 * @param   boolean  $escaped  True to escape the message string for use in JavaScript.	 *	 * @return  string  The error message for the most recent query.	 *	 * @deprecated  12.1	 * @since   11.1	 */	public function getErrorMsg($escaped = false)	{		JLog::add('JDatabase::getErrorMsg() is deprecated, use exception handling instead.', JLog::WARNING, 'deprecated');		if ($escaped)		{			return addslashes($this->errorMsg);		}		else		{			return $this->errorMsg;		}	}	/**	 * Gets the error number from the database connection.	 *	 * @return      integer  The error number for the most recent query.	 *	 * @since       11.1	 * @deprecated  12.1	 */	public function getErrorNum()	{		JLog::add('JDatabase::getErrorNum() is deprecated, use exception handling instead.', JLog::WARNING, 'deprecated');		return $this->errorNum;	}	/**	 * Method to return a JDatabaseDriver instance based on the given options.  There are three global options and then	 * the rest are specific to the database driver.  The 'driver' option defines which JDatabaseDriver class is	 * used for the connection -- the default is 'mysqli'.  The 'database' option determines which database is to	 * be used for the connection.  The 'select' option determines whether the connector should automatically select	 * the chosen database.	 *	 * Instances are unique to the given options and new objects are only created when a unique options array is	 * passed into the method.  This ensures that we don't end up with unnecessary database connection resources.	 *	 * @param   array  $options  Parameters to be passed to the database driver.	 *	 * @return  JDatabaseDriver  A database object.	 *	 * @since       11.1	 * @deprecated  13.1	 */	public static function getInstance($options = array())	{		JLog::add('JDatabase::getInstance() is deprecated, use JDatabaseDriver::getInstance() instead.', JLog::WARNING, 'deprecated');		return JDatabaseDriver::getInstance($options);	}	/**	 * Splits a string of multiple queries into an array of individual queries.	 *	 * @param   string  $query  Input SQL string with which to split into individual queries.	 *	 * @return  array  The queries from the input string separated into an array.	 *	 * @since   11.1	 * @deprecated  13.1	 */	public static function splitSql($query)	{		JLog::add('JDatabase::splitSql() is deprecated, use JDatabaseDriver::splitSql() instead.', JLog::WARNING, 'deprecated');		return JDatabaseDriver::splitSql($query);	}	/**	 * Return the most recent error message for the database connector.	 *	 * @param   boolean  $showSQL  True to display the SQL statement sent to the database as well as the error.	 *	 * @return  string  The error message for the most recent query.	 *	 * @since   11.1	 * @deprecated  12.1	 */	public function stderr($showSQL = false)	{		JLog::add('JDatabase::stderr() is deprecated.', JLog::WARNING, 'deprecated');		if ($this->errorNum != 0)		{			return JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $this->errorNum, $this->errorMsg)			. ($showSQL ? "<br />SQL = <pre>$this->sql</pre>" : '');		}		else		{			return JText::_('JLIB_DATABASE_FUNCTION_NOERROR');		}	}	/**	 * Test to see if the connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 * @deprecated  12.3 Use JDatabaseDriver::isSupported() instead.	 */	public static function test()	{		JLog::add('JDatabase::test() is deprecated. Use JDatabaseDriver::isSupported() instead.', JLog::WARNING, 'deprecated');		return static::isSupported();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_contact component * * @param   array  &$query  An array of URL arguments * * @return  array  The URL arguments to use to assemble the subsequent URL. */function ContactBuildRoute(&$query){	$segments = array();	// get a menu item based on Itemid or currently active	$app = JFactory::getApplication();	$menu = $app->getMenu();	$params = JComponentHelper::getParams('com_contact');	$advanced = $params->get('sef_advanced_link', 0);	if (empty($query['Itemid']))	{		$menuItem = $menu->getActive();	}	else	{		$menuItem = $menu->getItem($query['Itemid']);	}	$mView = (empty($menuItem->query['view'])) ? null : $menuItem->query['view'];	$mCatid = (empty($menuItem->query['catid'])) ? null : $menuItem->query['catid'];	$mId = (empty($menuItem->query['id'])) ? null : $menuItem->query['id'];	if (isset($query['view']))	{		$view = $query['view'];		if (empty($query['Itemid']) || empty($menuItem) || $menuItem->component != 'com_contact')		{			$segments[] = $query['view'];		}		unset($query['view']);	}	// are we dealing with a contact that is attached to a menu item?	if (isset($view) && ($mView == $view) and (isset($query['id'])) and ($mId == (int) $query['id']))	{		unset($query['view']);		unset($query['catid']);		unset($query['id']);		return $segments;	}	if (isset($view) and ($view == 'category' or $view == 'contact'))	{		if ($mId != (int) $query['id'] || $mView != $view)		{			if ($view == 'contact' && isset($query['catid']))			{				$catid = $query['catid'];			}			elseif (isset($query['id']))			{				$catid = $query['id'];			}			$menuCatid = $mId;			$categories = JCategories::getInstance('Contact');			$category = $categories->get($catid);			if ($category)			{				//TODO Throw error that the category either not exists or is unpublished				$path = array_reverse($category->getPath());				$array = array();				foreach ($path as $id)				{					if ((int) $id == (int) $menuCatid)					{						break;					}					if ($advanced)					{						list($tmp, $id) = explode(':', $id, 2);					}					$array[] = $id;				}				$segments = array_merge($segments, array_reverse($array));			}			if ($view == 'contact')			{				if ($advanced)				{					list($tmp, $id) = explode(':', $query['id'], 2);				}				else				{					$id = $query['id'];				}				$segments[] = $id;			}		}		unset($query['id']);		unset($query['catid']);	}	if (isset($query['layout']))	{		if (!empty($query['Itemid']) && isset($menuItem->query['layout']))		{			if ($query['layout'] == $menuItem->query['layout'])			{				unset($query['layout']);			}		}		else		{			if ($query['layout'] == 'default')			{				unset($query['layout']);			}		}	}	return $segments;}/** * Parse the segments of a URL. * * @param   array  $segments  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. */function ContactParseRoute($segments){	$vars = array();	//Get the active menu item.	$app = JFactory::getApplication();	$menu = $app->getMenu();	$item = $menu->getActive();	$params = JComponentHelper::getParams('com_contact');	$advanced = $params->get('sef_advanced_link', 0);	// Count route segments	$count = count($segments);	// Standard routing for newsfeeds.	if (!isset($item))	{		$vars['view'] = $segments[0];		$vars['id'] = $segments[$count - 1];		return $vars;	}	// From the categories view, we can only jump to a category.	$id = (isset($item->query['id']) && $item->query['id'] > 1) ? $item->query['id'] : 'root';	$contactCategory = JCategories::getInstance('Contact')->get($id);	$categories = ($contactCategory) ? $contactCategory->getChildren() : array();	$vars['catid'] = $id;	$vars['id'] = $id;	$found = 0;	foreach ($segments as $segment)	{		$segment = $advanced ? str_replace(':', '-', $segment) : $segment;		foreach ($categories as $category)		{			if ($category->slug == $segment || $category->alias == $segment)			{				$vars['id'] = $category->id;				$vars['catid'] = $category->id;				$vars['view'] = 'category';				$categories = $category->getChildren();				$found = 1;				break;			}		}		if ($found == 0)		{			if ($advanced)			{				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('id'))					->from('#__contact_details')					->where($db->quoteName('catid') . ' = ' . (int) $vars['catid'])					->where($db->quoteName('alias') . ' = ' . $db->quote($db->quote($segment)));				$db->setQuery($query);				$nid = $db->loadResult();			}			else			{				$nid = $segment;			}			$vars['id'] = $nid;			$vars['view'] = 'contact';		}		$found = 0;	}	return $vars;}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefaultlanguageHtml $this */?><?php echo JHtml::_('installation.stepbarlanguages'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a				class="btn"				href="#"				onclick="return Install.goToPage('languages');"				rel="prev"				title="<?php echo JText::_('JPREVIOUS'); ?>">				<i class="icon-arrow-left"></i>				<?php echo JText::_('JPREVIOUS'); ?>			</a>			<?php			// Check if ther is any languages to list, if not you cannot move forward			if ($this->items->administrator) :				?>				<a					class="btn btn-primary"					href="#"					onclick="Install.submitform();"					rel="next"					title="<?php echo JText::_('JNEXT'); ?>">					<i class="icon-arrow-right icon-white"></i>					<?php echo JText::_('JNEXT'); ?>				</a>				<?php endif; ?>		</div>	</div>	<h3><?php echo JText::_('INSTL_DEFAULTLANGUAGE_ADMINISTRATOR'); ?></h3>	<hr class="hr-condensed" />	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_DESC'); ?></p>	<table class="table table-striped table-condensed">		<tbody>		<tr>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_SELECT'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_LANGUAGE'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_TAG'); ?>			</th>		</tr>		</tbody>		<tbody>			<?php foreach ($this->items->administrator as $lang) : ?>			<tr>				<td>					<input						type="radio"						name="administratorlang"						value="<?php echo $lang->language; ?>"						<?php if ($lang->published) echo 'checked="checked"'; ?>					/>				</td>				<td align="center">					<?php echo $lang->name; ?>				</td>				<td align="center">					<?php echo $lang->language; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<h3><?php echo JText::_('INSTL_DEFAULTLANGUAGE_FRONTEND'); ?></h3>	<hr class="hr-condensed" />	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_DESC_FRONTEND'); ?></p>	<table class="table table-striped table-condensed">		<tbody>		<tr>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_SELECT'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_LANGUAGE'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_TAG'); ?>			</th>		</tr>		</tbody>		<tbody>		<?php foreach ($this->items->frontend as $lang) : ?>		<tr>			<td>				<input					type="radio"					name="frontendlang"					value="<?php echo $lang->language; ?>"					<?php if ($lang->published) echo 'checked="checked"'; ?>				/>			</td>			<td align="center">				<?php echo $lang->name; ?>			</td>			<td align="center">				<?php echo $lang->language; ?>			</td>		</tr>			<?php endforeach; ?>		</tbody>	</table>	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_NOTE'); ?></p>	<input type="hidden" name="task" value="setdefaultlanguage" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of users. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewUsers extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		UsersHelper::addSubmenu('users');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Include the component HTML helpers.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= UsersHelper::getActions();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_USERS_VIEW_USERS_TITLE'), 'user');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('user.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('user.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::divider();			JToolbarHelper::publish('users.activate', 'COM_USERS_TOOLBAR_ACTIVATE', true);			JToolbarHelper::unpublish('users.block', 'COM_USERS_TOOLBAR_BLOCK', true);			JToolbarHelper::custom('users.unblock', 'unblock.png', 'unblock_f2.png', 'COM_USERS_TOOLBAR_UNBLOCK', true);			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'users.delete');			JToolbarHelper::divider();		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">			<i class=\"icon-checkbox-partial\" title=\"$title\"></i>			$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_users');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_USERS_USER_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_users&view=users');		JHtmlSidebar::addFilter(			JText::_('COM_USERS_FILTER_STATE'),			'filter_state',			JHtml::_('select.options', UsersHelper::getStateOptions(), 'value', 'text', $this->state->get('filter.state'))		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_FILTER_ACTIVE'),			'filter_active',			JHtml::_('select.options', UsersHelper::getActiveOptions(), 'value', 'text', $this->state->get('filter.active'))		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_FILTER_USERGROUP'),			'filter_group_id',			JHtml::_('select.options', UsersHelper::getGroups(), 'value', 'text', $this->state->get('filter.group_id'))		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_FILTER_DATE'),			'filter_range',			JHtml::_('select.options', Usershelper::getRangeOptions(), 'value', 'text', $this->state->get('filter.range'))		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('InstallerModelInstall', JPATH_ADMINISTRATOR . '/components/com_installer/models/install.php');/** * Template style controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerTemplate extends JControllerLegacy{	/**	 */	public function cancel()	{		$this->setRedirect('index.php?option=com_templates&view=templates');	}	public function copy()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$this->input->set('installtype', 'folder');		$newName    = $this->input->get('new_name');		$newNameRaw = $this->input->get('new_name', null, 'string');		$templateID = $this->input->getInt('id', 0);		$this->setRedirect('index.php?option=com_templates&view=template&id=' . $templateID);		$model = $this->getModel('Template', 'TemplatesModel');		$model->setState('new_name', $newName);		$model->setState('tmp_prefix', uniqid('template_copy_'));		$model->setState('to_path', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));		// Process only if we have a new name entered		if (strlen($newName) > 0)		{			if (!JFactory::getUser()->authorise('core.create', 'com_templates'))			{				// User is not authorised to delete				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_CREATE_NOT_PERMITTED'));				return false;			}			// Set FTP credentials, if given			JClientHelper::setCredentialsFromRequest('ftp');			// Check that new name is valid			if (($newNameRaw !== null) && ($newName !== $newNameRaw))			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_TEMPLATE_NAME'));				return false;			}			// Check that new name doesn't already exist			if (!$model->checkNewName())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_DUPLICATE_TEMPLATE_NAME'));				return false;			}			// Check that from name does exist and get the folder name			$fromName = $model->getFromName();			if (!$fromName)			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_FROM_NAME'));				return false;			}			// Call model's copy method			if (!$model->copy())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_COPY'));				return false;			}			// Call installation model			$this->input->set('install_directory', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));			$installModel = $this->getModel('Install', 'InstallerModel');			JFactory::getLanguage()->load('com_installer');			if (!$installModel->install())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_INSTALL'));				return false;			}			$this->setMessage(JText::sprintf('COM_TEMPLATES_COPY_SUCCESS', $newName));			$model->cleanup();			return true;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Load tooltips behaviorJHtml::_('behavior.formvalidation');JHtml::_('behavior.tooltip');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'application.cancel' || document.formvalidator.isValid(document.id('application-form')))		{			Joomla.submitform(task, document.getElementById('application-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_config');?>" id="application-form" method="post" name="adminForm" class="form-validate">	<div class="row-fluid">		<!-- Begin Sidebar -->		<div id="sidebar" class="span2">			<div class="sidebar-nav">				<?php echo $this->loadTemplate('navigation'); ?>				<?php					// Display the submenu position modules					$this->submenumodules = JModuleHelper::getModules('submenu');					foreach ($this->submenumodules as $submenumodule)					{						$output = JModuleHelper::renderModule($submenumodule);						$params = new JRegistry;						$params->loadString($submenumodule->params);						echo $output;					}				?>			</div>		</div>		<!-- End Sidebar -->		<!-- Begin Content -->		<div class="span10">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'page-site')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-site', JText::_('JSITE', true)); ?>					<div class="row-fluid">						<div class="span6">							<?php echo $this->loadTemplate('site'); ?>							<?php echo $this->loadTemplate('metadata'); ?>						</div>						<div class="span6">							<?php echo $this->loadTemplate('seo'); ?>							<?php echo $this->loadTemplate('cookie'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-system', JText::_('COM_CONFIG_SYSTEM', true)); ?>					<div class="row-fluid">						<div class="span6">							<?php echo $this->loadTemplate('system'); ?>							<?php echo $this->loadTemplate('debug'); ?>						</div>						<div class="span6">							<?php echo $this->loadTemplate('cache'); ?>							<?php echo $this->loadTemplate('session'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-server', JText::_('COM_CONFIG_SERVER', true)); ?>					<div class="row-fluid">						<div class="span6">							<?php echo $this->loadTemplate('server'); ?>							<?php echo $this->loadTemplate('locale'); ?>							<?php echo $this->loadTemplate('ftp'); ?>						</div>						<div class="span6">							<?php echo $this->loadTemplate('database'); ?>							<?php echo $this->loadTemplate('mail'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-permissions', JText::_('COM_CONFIG_PERMISSIONS', true)); ?>					<div class="row-fluid">						<?php echo $this->loadTemplate('permissions'); ?>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-filters', JText::_('COM_CONFIG_TEXT_FILTERS', true)); ?>					<div class="row-fluid">						<?php echo $this->loadTemplate('filters'); ?>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php if ($this->ftp) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-ftp', JText::_('COM_CONFIG_FTP_SETTINGS', true)); ?>						<?php echo $this->loadTemplate('ftplogin'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTabSet'); ?>				<input type="hidden" name="task" value="" />				<?php echo JHtml::_('form.token'); ?>			</div>		<!-- End Content -->	</div></form>
