<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @param   array * @return  array */function SearchBuildRoute(&$query){	$segments = array();	if (isset($query['view']))	{		unset($query['view']);	}	return $segments;}/** * @param   array * @return  array */function SearchParseRoute($segments){	$vars = array();	$searchword	= array_shift($segments);	$vars['searchword'] = $searchword;	$vars['view'] = 'search';	return $vars;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?><form target="_parent" action="index.php?option=com_media&amp;tmpl=index&amp;folder=<?php echo $this->state->folder; ?>" method="post" id="mediamanager-form" name="mediamanager-form">	<div class="manager">	<table class="table table-striped table-condensed">	<thead>		<tr>			<th width="1%"><?php echo JText::_('JGLOBAL_PREVIEW'); ?></th>			<th><?php echo JText::_('COM_MEDIA_NAME'); ?></th>			<th width="15%"><?php echo JText::_('COM_MEDIA_PIXEL_DIMENSIONS'); ?></th>			<th width="8%"><?php echo JText::_('COM_MEDIA_FILESIZE'); ?></th>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<th width="8%"><?php echo JText::_('JACTION_DELETE'); ?></th>		<?php endif;?>		</tr>	</thead>	<tbody>		<?php echo $this->loadTemplate('up'); ?>		<?php for ($i = 0, $n = count($this->folders); $i < $n; $i++) :			$this->setFolder($i);			echo $this->loadTemplate('folder');		endfor; ?>		<?php for ($i = 0, $n = count($this->documents); $i < $n; $i++) :			$this->setDoc($i);			echo $this->loadTemplate('doc');		endfor; ?>		<?php for ($i = 0, $n = count($this->images); $i < $n; $i++) :			$this->setImage($i);			echo $this->loadTemplate('img');		endfor; ?>	</tbody>	</table>	<input type="hidden" name="task" value="list" />	<input type="hidden" name="username" value="" />	<input type="hidden" name="password" value="" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */// We are a valid entry point.const _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}// Get the framework.require_once JPATH_LIBRARIES . '/import.legacy.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';// Configure error reporting to maximum for CLI output.error_reporting(E_ALL);ini_set('display_errors', 1);// Load Library language$lang = JFactory::getLanguage();// Try the files_joomla file in the current language (without allowing the loading of the file in the default language)$lang->load('files_joomla.sys', JPATH_SITE, null, false, false)// Fallback to the files_joomla file in the default language|| $lang->load('files_joomla.sys', JPATH_SITE, null, true);/** * A command line cron job to attempt to remove files that should have been deleted at update. * * @package  Joomla.CLI * @since    3.0 */class DeletefilesCli extends JApplicationCli{	/**	 * Entry point for CLI script	 *	 * @return  void	 *	 * @since   3.0	 */	public function doExecute()	{		// Import the dependencies		jimport('joomla.filesystem.file');		jimport('joomla.filesystem.folder');		// We need the update script		JLoader::register('JoomlaInstallerScript', JPATH_ADMINISTRATOR . '/components/com_admin/script.php');		// Instantiate the class		$class = new JoomlaInstallerScript;		// Run the delete method		$class->deleteUnexistingFiles();	}}// Instantiate the application object, passing the class name to JCli::getInstance// and use chaining to execute the application.JApplicationCli::getInstance('DeletefilesCli')->execute();
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$id      = empty($displayData['id']) ? '' : (' id="' . $displayData['id'] . '"');$target  = empty($displayData['target']) ? '' : (' target="' . $displayData['target'] . '"');$onclick = empty($displayData['onclick']) ? '' : (' onclick="' . $displayData['onclick'] . '"');$title   = empty($displayData['title']) ? '' : (' title="' . $this->escape($displayData['title']) . '"');$text    = empty($displayData['text']) ? '' : ('<span>' . $displayData['text'] . '</span>')?><div class="row-fluid"<?php echo $id; ?>>	<div class="span12">		<a href="<?php echo $displayData['link']; ?>"<?php echo $target . $onclick . $title; ?>>			<i class="icon-<?php echo $displayData['image']; ?>"></i> <?php echo $text; ?>		</a>	</div></div>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Utility class to render a list view sidebar * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlSidebar{	/**	 * Menu entries	 *	 * @var    array	 * @since  3.0	 */	protected static $entries = array();	/**	 * Filters	 *	 * @var    array	 * @since  3.0	 */	protected static $filters = array();	/**	 * Value for the action attribute of the form.	 *	 * @var    string	 * @since  3.0	 */	protected static $action = '';	/**	 * Render the sidebar.	 *	 * @return  string  The necessary HTML to display the sidebar	 *	 * @since   3.0	 */	public static function render()	{		// Collect display data		$data                 = new stdClass;		$data->list           = self::getEntries();		$data->filters        = self::getFilters();		$data->action         = self::getAction();		$data->displayMenu    = count($data->list);		$data->displayFilters = count($data->filters);		$data->hide           = JFactory::getApplication()->input->getBool('hidemainmenu');		// Create a layout object and ask it to render the sidebar		$layout      = new JLayoutFile('joomla.sidebars.submenu');		$sidebarHtml = $layout->render($data);		return $sidebarHtml;	}	/**	 * Method to add a menu item to submenu.	 *	 * @param   string  $name    Name of the menu item.	 * @param   string  $link    URL of the menu item.	 * @param   bool    $active  True if the item is active, false otherwise.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function addEntry($name, $link = '', $active = false)	{		array_push(self::$entries, array($name, $link, $active));	}	/**	 * Returns an array of all submenu entries	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getEntries()	{		return self::$entries;	}	/**	 * Method to add a filter to the submenu	 *	 * @param   string  $label      Label for the menu item.	 * @param   string  $name       Name for the filter. Also used as id.	 * @param   string  $options    Options for the select field.	 * @param   bool    $noDefault  Don't the label as the empty option	 *	 * @return  void	 *	 * @since   3.0	 */	public static function addFilter($label, $name, $options, $noDefault = false)	{		array_push(self::$filters, array('label' => $label, 'name' => $name, 'options' => $options, 'noDefault' => $noDefault));	}	/**	 * Returns an array of all filters	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getFilters()	{		return self::$filters;	}	/**	 * Set value for the action attribute of the filter form	 *	 * @param   string  $action  Value for the action attribute of the form	 *	 * @return  void	 *	 * @since   3.0	 */	public static function setAction($action)	{		self::$action = $action;	}	/**	 * Get value for the action attribute of the filter form	 *	 * @return  string	 *	 * @since   3.0	 */	public static function getAction()	{		return self::$action;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_footer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app		= JFactory::getApplication();$date		= JFactory::getDate();$cur_year	= $date->format('Y');$csite_name	= $app->getCfg('sitename');if (JString::strpos(JText :: _('MOD_FOOTER_LINE1'), '%date%')){	$line1 = str_replace('%date%', $cur_year, JText :: _('MOD_FOOTER_LINE1'));}else {	$line1 = JText :: _('MOD_FOOTER_LINE1');}if (JString::strpos($line1, '%sitename%')){	$lineone = str_replace('%sitename%', $csite_name, $line1);}else {	$lineone = $line1;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_footer', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  mod_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the weblinks functions only oncerequire_once __DIR__ . '/helper.php';$list = ModWeblinksHelper::getList($params);if (!count($list)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_weblinks', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Contact Component Category Tree * * @package     Joomla.Site * @subpackage  com_contact * @since       1.6 */class ContactCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__contact_details';		$options['extension'] = 'com_contact';		$options['statefield'] = 'published';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php  $fieldSets = $this->form->getFieldsets('attribs'); ?>	<?php foreach ($fieldSets as $name => $fieldSet) : ?>		<?php $label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL'; ?>		<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'attrib-'.$name, trim($label)); ?>			<fieldset>			<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>				<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>			<?php endif;			foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach;?>			</fieldset>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_LOCATION_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('locale') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_items_cat') == 1) :?>			<dl><dt>				<?php echo JText::_('COM_CONTACT_COUNT'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL Server database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/ee336279.aspx * @since       12.1 */class JDatabaseDriverSqlazure extends JDatabaseDriverSqlsrv{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlzure';}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentFeed class, provides an easy interface to parse and display any feed document * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentFeed extends JDocument{	/**	 * Syndication URL feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $syndicationURL = "";	/**	 * Image feed element	 *	 * optional	 *	 * @var    object	 * @since  11.1	 */	public $image = null;	/**	 * Copyright feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $copyright = "";	/**	 * Published date feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $pubDate = "";	/**	 * Lastbuild date feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $lastBuildDate = "";	/**	 * Editor feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $editor = "";	/**	 * Docs feed element	 *	 * @var    string	 * @since  11.1	 */	public $docs = "";	/**	 * Editor email feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $editorEmail = "";	/**	 * Webmaster email feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $webmaster = "";	/**	 * Category feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $category = "";	/**	 * TTL feed attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $ttl = "";	/**	 * Rating feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $rating = "";	/**	 * Skiphours feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $skipHours = "";	/**	 * Skipdays feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $skipDays = "";	/**	 * The feed items collection	 *	 * @var    array	 * @since  11.1	 */	public $items = array();	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since  11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set document type		$this->_type = 'feed';	}	/**	 * Render the document	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since  11.1	 * @throws Exception	 * @todo   Make this cacheable	 */	public function render($cache = false, $params = array())	{		// Get the feed type		$type = JFactory::getApplication()->input->get('type', 'rss');		// Instantiate feed renderer and set the mime encoding		$renderer = $this->loadRenderer(($type) ? $type : 'rss');		if (!is_a($renderer, 'JDocumentRenderer'))		{			throw new Exception(JText::_('JGLOBAL_RESOURCE_NOT_FOUND'), 404);		}		$this->setMimeEncoding($renderer->getContentType());		// Output		// Generate prolog		$data = "<?xml version=\"1.0\" encoding=\"" . $this->_charset . "\"?>\n";		$data .= "<!-- generator=\"" . $this->getGenerator() . "\" -->\n";		// Generate stylesheet links		foreach ($this->_styleSheets as $src => $attr)		{			$data .= "<?xml-stylesheet href=\"$src\" type=\"" . $attr['mime'] . "\"?>\n";		}		// Render the feed		$data .= $renderer->render();		parent::render();		return $data;	}	/**	 * Adds an JFeedItem to the feed.	 *	 * @param   JFeedItem  $item  The feeditem to add to the feed.	 *	 * @return  JDocumentFeed  instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addItem(JFeedItem $item)	{		$item->source = $this->link;		$this->items[] = $item;		return $this;	}}/** * JFeedItem is an internal class that stores feed item information * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JFeedItem{	/**	 * Title item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $title;	/**	 * Link item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $link;	/**	 * Description item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $description;	/**	 * Author item element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $author;	/**	 * Author email element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $authorEmail;	/**	 * Category element	 *	 * optional	 *	 * @var    array or string	 * @since  11.1	 */	public $category;	/**	 * Comments element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $comments;	/**	 * Enclosure element	 *	 * @var    object	 * @since  11.1	 */	public $enclosure = null;	/**	 * Guid element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $guid;	/**	 * Published date	 *	 * optional	 *	 * May be in one of the following formats:	 *	 * RFC 822:	 * "Mon, 20 Jan 03 18:05:41 +0400"	 * "20 Jan 03 18:05:41 +0000"	 *	 * ISO 8601:	 * "2003-01-20T18:05:41+04:00"	 *	 * Unix:	 * 1043082341	 *	 * @var    string	 * @since  11.1	 */	public $date;	/**	 * Source element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $source;	/**	 * Set the JFeedEnclosure for this item	 *	 * @param   JFeedEnclosure  $enclosure  The JFeedEnclosure to add to the feed.	 *	 * @return  JFeedItem instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setEnclosure(JFeedEnclosure $enclosure)	{		$this->enclosure = $enclosure;		return $this;	}}/** * JFeedEnclosure is an internal class that stores feed enclosure information * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JFeedEnclosure{	/**	 * URL enclosure element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $url = "";	/**	 * Length enclosure element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $length = "";	/**	 * Type enclosure element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $type = "";}/** * JFeedImage is an internal class that stores feed image information * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JFeedImage{	/**	 * Title image attribute	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $title = "";	/**	 * URL image attribute	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $url = "";	/**	 * Link image attribute	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $link = "";	/**	 * Width image attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $width;	/**	 * Title feed attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $height;	/**	 * Title feed attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $description;}
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Text handling class. * * @package     Joomla.Platform * @subpackage  Language * @since       11.1 */class JText{	/**	 * javascript strings	 *	 * @var    array	 * @since  11.1	 */	protected static $strings = array();	/**	 * Translates a string into the current language.	 *	 * Examples:	 * <script>alert(Joomla.JText._('<?php echo JText::_("JDEFAULT", array("script"=>true));?>'));</script>	 * will generate an alert message containing 'Default'	 * <?php echo JText::_("JDEFAULT");?> it will generate a 'Default' string	 *	 * @param   string   $string                The string to translate.	 * @param   mixed    $jsSafe                Boolean: Make the result javascript safe.	 * @param   boolean  $interpretBackSlashes  To interpret backslashes (\\=\, \n=carriage return, \t=tabulation)	 * @param   boolean  $script                To indicate that the string will be push in the javascript language store	 *	 * @return  string  The translated string or the key is $script is true	 *	 * @since   11.1	 */	public static function _($string, $jsSafe = false, $interpretBackSlashes = true, $script = false)	{		$lang = JFactory::getLanguage();		if (is_array($jsSafe))		{			if (array_key_exists('interpretBackSlashes', $jsSafe))			{				$interpretBackSlashes = (boolean) $jsSafe['interpretBackSlashes'];			}			if (array_key_exists('script', $jsSafe))			{				$script = (boolean) $jsSafe['script'];			}			if (array_key_exists('jsSafe', $jsSafe))			{				$jsSafe = (boolean) $jsSafe['jsSafe'];			}			else			{				$jsSafe = false;			}		}		if ($script)		{			self::$strings[$string] = $lang->_($string, $jsSafe, $interpretBackSlashes);			return $string;		}		else		{			return $lang->_($string, $jsSafe, $interpretBackSlashes);		}	}	/**	 * Translates a string into the current language.	 *	 * Examples:	 * <?php echo JText::alt("JALL","language");?> it will generate a 'All' string in English but a "Toutes" string in French	 * <?php echo JText::alt("JALL","module");?> it will generate a 'All' string in English but a "Tous" string in French	 *	 * @param   string   $string                The string to translate.	 * @param   string   $alt                   The alternate option for global string	 * @param   mixed    $jsSafe                Boolean: Make the result javascript safe.	 * @param   boolean  $interpretBackSlashes  To interpret backslashes (\\=\, \n=carriage return, \t=tabulation)	 * @param   boolean  $script                To indicate that the string will be pushed in the javascript language store	 *	 * @return  string  The translated string or the key if $script is true	 *	 * @since   11.1	 */	public static function alt($string, $alt, $jsSafe = false, $interpretBackSlashes = true, $script = false)	{		$lang = JFactory::getLanguage();		if ($lang->hasKey($string . '_' . $alt))		{			return self::_($string . '_' . $alt, $jsSafe, $interpretBackSlashes);		}		else		{			return self::_($string, $jsSafe, $interpretBackSlashes);		}	}	/**	 * Like JText::sprintf but tries to pluralise the string.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * The last argument can take an array of options:	 *	 * array('jsSafe'=>boolean, 'interpretBackSlashes'=>boolean, 'script'=>boolean)	 *	 * where:	 *	 * jsSafe is a boolean to generate a javascript safe strings.	 * interpretBackSlashes is a boolean to interpret backslashes \\->\, \n->new line, \t->tabulation.	 * script is a boolean to indicate that the string will be push in the javascript language store.	 *	 * Examples:	 * <script>alert(Joomla.JText._('<?php echo JText::plural("COM_PLUGINS_N_ITEMS_UNPUBLISHED", 1, array("script"=>true));?>'));</script>	 * will generate an alert message containing '1 plugin successfully disabled'	 * <?php echo JText::plural("COM_PLUGINS_N_ITEMS_UNPUBLISHED", 1);?> it will generate a '1 plugin successfully disabled' string	 *	 * @param   string   $string  The format string.	 * @param   integer  $n       The number of items	 *	 * @return  string  The translated strings or the key if 'script' is true in the array of options	 *	 * @since   11.1	 */	public static function plural($string, $n)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 1)		{			// Try the key from the language plural potential suffixes			$found = false;			$suffixes = $lang->getPluralSuffixes((int) $n);			array_unshift($suffixes, (int) $n);			foreach ($suffixes as $suffix)			{				$key = $string . '_' . $suffix;				if ($lang->hasKey($key))				{					$found = true;					break;				}			}			if (!$found)			{				// Not found so revert to the original.				$key = $string;			}			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$key, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);				if (array_key_exists('script', $args[$count - 1]) && $args[$count - 1]['script'])				{					self::$strings[$key] = call_user_func_array('sprintf', $args);					return $key;				}			}			else			{				$args[0] = $lang->_($key);			}			return call_user_func_array('sprintf', $args);		}		elseif ($count > 0)		{			// Default to the normal sprintf handling.			$args[0] = $lang->_($string);			return call_user_func_array('sprintf', $args);		}		return '';	}	/**	 * Passes a string thru a sprintf.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * The last argument can take an array of options:	 *	 * array('jsSafe'=>boolean, 'interpretBackSlashes'=>boolean, 'script'=>boolean)	 *	 * where:	 *	 * jsSafe is a boolean to generate a javascript safe strings.	 * interpretBackSlashes is a boolean to interpret backslashes \\->\, \n->new line, \t->tabulation.	 * script is a boolean to indicate that the string will be push in the javascript language store.	 *	 * @param   string  $string  The format string.	 *	 * @return  string  The translated strings or the key if 'script' is true in the array of options.	 *	 * @since   11.1	 */	public static function sprintf($string)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 0)		{			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$string, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);				if (array_key_exists('script', $args[$count - 1]) && $args[$count - 1]['script'])				{					self::$strings[$string] = call_user_func_array('sprintf', $args);					return $string;				}			}			else			{				$args[0] = $lang->_($string);			}			return call_user_func_array('sprintf', $args);		}		return '';	}	/**	 * Passes a string thru an printf.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * @param   format  $string  The format string.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public static function printf($string)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 0)		{			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$string, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);			}			else			{				$args[0] = $lang->_($string);			}			return call_user_func_array('printf', $args);		}		return '';	}	/**	 * Translate a string into the current language and stores it in the JavaScript language store.	 *	 * @param   string   $string                The JText key.	 * @param   boolean  $jsSafe                Ensure the output is JavaScript safe.	 * @param   boolean  $interpretBackSlashes  Interpret \t and \n.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function script($string = null, $jsSafe = false, $interpretBackSlashes = true)	{		if (is_array($jsSafe))		{			if (array_key_exists('interpretBackSlashes', $jsSafe))			{				$interpretBackSlashes = (boolean) $jsSafe['interpretBackSlashes'];			}			if (array_key_exists('jsSafe', $jsSafe))			{				$jsSafe = (boolean) $jsSafe['jsSafe'];			}			else			{				$jsSafe = false;			}		}		// Add the string to the array if not null.		if ($string !== null)		{			// Normalize the key and translate the string.			self::$strings[strtoupper($string)] = JFactory::getLanguage()->_($string, $jsSafe, $interpretBackSlashes);		}		return self::$strings;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one MySQL DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeitemMysql extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand == 'ADD COLUMN')			{				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD_COLUMN';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand == 'ADD INDEX' || $alterCommand == 'ADD UNIQUE')			{				if ($pos = strpos($wordArray[5], '('))				{					$index = $this->fixQuote(substr($wordArray[5], 0, $pos));				}				else				{					$index = $this->fixQuote($wordArray[5]);				}				$result = 'SHOW INDEXES IN ' . $wordArray[2] . ' WHERE Key_name = ' . $index;				$this->queryType = 'ADD_INDEX';				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif ($alterCommand == 'DROP INDEX')			{				$index = $this->fixQuote($wordArray[5]);				$result = 'SHOW INDEXES IN ' . $wordArray[2] . ' WHERE Key_name = ' . $index;				$this->queryType = 'DROP_INDEX';				$this->checkQueryExpected = 0;				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif ($alterCommand == 'DROP COLUMN')			{				$index = $this->fixQuote($wordArray[5]);				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE Field = ' . $index;				$this->queryType = 'DROP_COLUMN';				$this->checkQueryExpected = 0;				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif (strtoupper($wordArray[3]) == 'MODIFY')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($wordArray[5]);				if (isset($wordArray[6]))				{					$type = $this->fixQuote($this->fixInteger($wordArray[5], $wordArray[6]));				}				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[4]) . ' AND type = ' . $type;				$this->queryType = 'CHANGE_COLUMN_TYPE';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]), $type);			}			elseif (strtoupper($wordArray[3]) == 'CHANGE')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($this->fixInteger($wordArray[6], $wordArray[7]));				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[4]) . ' AND type = ' . $type;				$this->queryType = 'CHANGE_COLUMN_TYPE';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]), $type);			}		}		if ($command == 'CREATE TABLE')		{			if (strtoupper($wordArray[2] . $wordArray[3] . $wordArray[4]) == 'IFNOTEXISTS')			{				$table = $wordArray[5];			}			else			{				$table = $wordArray[2];			}			$result = 'SHOW TABLES LIKE ' . $this->fixQuote($table);			$this->queryType = 'CREATE_TABLE';			$this->msgElements = array($this->fixQuote($table));		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with MySQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   2.5	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == "integer" && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'int(10) unsigned';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   2.5	 */	private function fixQuote($string)	{		$string = str_replace('`', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Issues class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubIssues extends JGithubObject{	/**	 * Method to create an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $title      The title of the new issue.	 * @param   string   $body       The body text for the new issue.	 * @param   string   $assignee   The login for the GitHub user that this issue should be assigned to.	 * @param   integer  $milestone  The milestone to associate this issue with.	 * @param   array    $labels     The labels to associate with this issue.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $title, $body = null, $assignee = null, $milestone = null, array $labels = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues';		// Ensure that we have a non-associative array.		if (isset($labels))		{			$labels = array_values($labels);		}		// Build the request data.		$data = json_encode(			array(				'title' => $title,				'assignee' => $assignee,				'milestone' => $milestone,				'labels' => $labels,				'body' => $body			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on an issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 * @param   string   $body     The comment body text.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createComment($user, $repo, $issueId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $name   The label name.	 * @param   string  $color  The label color.	 *	 * @return  object	 *	 * @since   12.3	 */	public function createLabel($user, $repo, $name, $color)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels';		// Build the request data.		$data = json_encode(			array(				'name' => $name,				'color' => $color			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to delete.	 *	 * @return  void	 *	 * @since   11.3	 */	public function deleteComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to delete a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $label  The label name.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deleteLabel($user, $repo, $label)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $label;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to update an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $issueId    The issue number.	 * @param   string   $state      The optional new state for the issue. [open, closed]	 * @param   string   $title      The title of the new issue.	 * @param   string   $body       The body text for the new issue.	 * @param   string   $assignee   The login for the GitHub user that this issue should be assigned to.	 * @param   integer  $milestone  The milestone to associate this issue with.	 * @param   array    $labels     The labels to associate with this issue.	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $issueId, $state = null, $title = null, $body = null, $assignee = null, $milestone = null, array $labels = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if (isset($title))		{			$data->title = $title;		}		// If a body is set add it to the data object.		if (isset($body))		{			$data->body = $body;		}		// If a state is set add it to the data object.		if (isset($state))		{			$data->state = $state;		}		// If an assignee is set add it to the data object.		if (isset($assignee))		{			$data->assignee = $assignee;		}		// If a milestone is set add it to the data object.		if (isset($milestone))		{			$data->milestone = $milestone;		}		// If labels are set add them to the data object.		if (isset($labels))		{			// Ensure that we have a non-associative array.			if (isset($labels))			{				$labels = array_values($labels);			}			$data->labels = $labels;		}		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to update.	 * @param   string   $body       The new body text for the comment.	 *	 * @return  object	 *	 * @since   11.3	 */	public function editComment($user, $repo, $commentId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Build the request data.		$data = json_encode(			array(				'body' => $body			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $label  The label name.	 * @param   string  $name   The label name.	 * @param   string  $color  The label color.	 *	 * @return  object	 *	 * @since   12.3	 */	public function editLabel($user, $repo, $label, $name, $color)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $label;		// Build the request data.		$data = json_encode(			array(				'name' => $name,				'color' => $color			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $issueId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The comment id to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function getComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of comments on an issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 * @param   integer  $page     The page number from which to get items.	 * @param   integer  $limit    The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getComments($user, $repo, $issueId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific label on a repo.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $name  The label name to get.	 *	 * @return  object	 *	 * @since   12.3	 */	public function getLabel($user, $repo, $name)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $name;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of labels on a repo.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 *	 * @return  array	 *	 * @since   12.3	 */	public function getLabels($user, $repo)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list an authenticated user's issues.	 *	 * @param   string   $filter     The filter type: assigned, created, mentioned, subscribed.	 * @param   string   $state      The optional state to filter requests by. [open, closed]	 * @param   string   $labels     The list of comma separated Label names. Example: bug,ui,@high.	 * @param   string   $sort       The sort order: created, updated, comments, default: created.	 * @param   string   $direction  The list direction: asc or desc, default: desc.	 * @param   JDate    $since      The date/time since when issues should be returned.	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($filter = null, $state = null, $labels = null, $sort = null, $direction = null, JDate $since = null, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/issues';		// TODO Implement the filtering options.		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list issues.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $milestone  The milestone number, 'none', or *.	 * @param   string   $state      The optional state to filter requests by. [open, closed]	 * @param   string   $assignee   The assignee name, 'none', or *.	 * @param   string   $mentioned  The GitHub user name.	 * @param   string   $labels     The list of comma separated Label names. Example: bug,ui,@high.	 * @param   string   $sort       The sort order: created, updated, comments, default: created.	 * @param   string   $direction  The list direction: asc or desc, default: desc.	 * @param   JDate    $since      The date/time since when issues should be returned.	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getListByRepository($user, $repo, $milestone = null, $state = null, $assignee = null, $mentioned = null, $labels = null,		$sort = null, $direction = null, JDate $since = null, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues';		$uri = new JUri($this->fetchUrl($path, $page, $limit));		if ($milestone)		{			$uri->setVar('milestone', $milestone);		}		if ($state)		{			$uri->setVar('state', $state);		}		if ($assignee)		{			$uri->setVar('assignee', $assignee);		}		if ($mentioned)		{			$uri->setVar('mentioned', $mentioned);		}		if ($labels)		{			$uri->setVar('labels', $labels);		}		if ($sort)		{			$uri->setVar('sort', $sort);		}		if ($direction)		{			$uri->setVar('direction', $direction);		}		if ($since)		{			$uri->setVar('since', $since->toISO8601());		}		// Send the request.		$response = $this->client->get((string) $uri);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto */abstract class MailtoHelper{	/**	 * Adds a URL to the mailto system and returns the hash	 *	 * @param string url	 * @return URL hash	 */	public static function addLink($url)	{		$hash = sha1($url);		self::cleanHashes();		$session = JFactory::getSession();		$mailto_links = $session->get('com_mailto.links', array());		if (!isset($mailto_links[$hash]))		{			$mailto_links[$hash] = new stdClass;		}		$mailto_links[$hash]->link = $url;		$mailto_links[$hash]->expiry = time();		$session->set('com_mailto.links', $mailto_links);		return $hash;	}	/**	 * Checks if a URL is a Flash file	 *	 * @param string	 * @return URL	 */	public static function validateHash($hash)	{		$retval = false;		$session = JFactory::getSession();		self::cleanHashes();		$mailto_links = $session->get('com_mailto.links', array());		if (isset($mailto_links[$hash]))		{			$retval = $mailto_links[$hash]->link;		}		return $retval;	}	/**	 * Cleans out old hashes	 *	 * @since 1.6.1	 */	public static function cleanHashes($lifetime = 1440)	{		// flag for if we've cleaned on this cycle		static $cleaned = false;		if (!$cleaned)		{			$past = time() - $lifetime;			$session = JFactory::getSession();			$mailto_links = $session->get('com_mailto.links', array());			foreach ($mailto_links as $index => $link)			{				if ($link->expiry < $past)				{					unset($mailto_links[$index]);				}			}			$session->set('com_mailto.links', $mailto_links);			$cleaned = true;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for mcrypt algorithm encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */abstract class JCryptCipherMcrypt implements JCryptCipher{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType;	/**	 * Constructor.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function __construct()	{		if (!is_callable('mcrypt_encrypt'))		{			throw new RuntimeException('The mcrypt extension is not available.');		}	}	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 */	public function decrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != $this->keyType)		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected ' . $this->keyType . '.');		}		// Decrypt the data.		$decrypted = trim(mcrypt_decrypt($this->type, $key->private, $data, $this->mode, $key->public));		return $decrypted;	}	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 */	public function encrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != $this->keyType)		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected ' . $this->keyType . '.');		}		// Encrypt the data.		$encrypted = mcrypt_encrypt($this->type, $key->private, $data, $this->mode, $key->public);		return $encrypted;	}	/**	 * Method to generate a new encryption key object.	 *	 * @param   array  $options  Key generation options.	 *	 * @return  JCryptKey	 *	 * @since   12.1	 */	public function generateKey(array $options = array())	{		// Create the new encryption key object.		$key = new JCryptKey($this->keyType);		// Generate an initialisation vector based on the algorithm.		$key->public = mcrypt_create_iv(mcrypt_get_iv_size($this->type, $this->mode));		// Get the salt and password setup.		$salt = (isset($options['salt'])) ? $options['salt'] : substr(pack("h*", md5(mt_rand())), 0, 16);		$password = (isset($options['password'])) ? $options['password'] : 'J00ml4R0ck$!';		// Generate the derived key.		$key->private = $this->pbkdf2($password, $salt, mcrypt_get_key_size($this->type, $this->mode));		return $key;	}	/**	 * PBKDF2 Implementation for deriving keys.	 *	 * @param   string   $p   Password	 * @param   string   $s   Salt	 * @param   integer  $kl  Key length	 * @param   integer  $c   Iteration count	 * @param   string   $a   Hash algorithm	 *	 * @return  string  The derived key.	 *	 * @see     http://en.wikipedia.org/wiki/PBKDF2	 * @see     http://www.ietf.org/rfc/rfc2898.txt	 * @since   12.1	 */	public function pbkdf2($p, $s, $kl, $c = 10000, $a = 'sha256')	{		// Hash length.		$hl = strlen(hash($a, null, true));		// Key blocks to compute.		$kb = ceil($kl / $hl);		// Derived key.		$dk = '';		// Create the key.		for ($block = 1; $block <= $kb; $block++)		{			// Initial hash for this block.			$ib = $b = hash_hmac($a, $s . pack('N', $block), $p, true);			// Perform block iterations.			for ($i = 1; $i < $c; $i++)			{				$ib ^= ($b = hash_hmac($a, $b, $p, true));			}			// Append the iterated block.			$dk .= $ib;		}		// Return derived key of correct length.		return substr($dk, 0, $kl);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$list		= ModMenuHelper::getList($params);$base		= ModMenuHelper::getBase($params);$active		= ModMenuHelper::getActive($params);$active_id 	= $active->id;$path		= $base->tree;$showAll	= $params->get('showAllChildren');$class_sfx	= htmlspecialchars($params->get('class_sfx'));if (count($list)){	require JModuleHelper::getLayoutPath('mod_menu', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users mail view. * * @package     Joomla.Administrator * @subpackage  com_users */class UsersViewMail extends JViewLegacy{	/**	 * @var object form object	 */	protected $form;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Get data from the model		$this->form = $this->get('Form');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		JToolbarHelper::title(JText::_('COM_USERS_MASS_MAIL'), 'massmail.png');		JToolbarHelper::custom('mail.send', 'envelope.png', 'send_f2.png', 'COM_USERS_TOOLBAR_MAIL_SEND_MAIL', false);		JToolbarHelper::cancel('mail.cancel');		JToolbarHelper::divider();		JToolbarHelper::preferences('com_users');		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_MASS_MAIL_USERS');	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="modified">				<span class="icon-calendar"></span>				<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $displayData['item']->modified, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract class for a renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRenderer{	/**	 * Reference to the JDocument object that instantiated the renderer	 *	 * @var    JDocument	 * @since  11.1	 */	protected $_doc = null;	/**	 * Renderer mime type	 *	 * @var    string	 * @since  11.1	 */	protected $_mime = "text/html";	/**	 * Class constructor	 *	 * @param   JDocument  $doc  A reference to the JDocument object that instantiated the renderer	 *	 * @since   11.1	 */	public function __construct(JDocument $doc)	{		$this->_doc = $doc;	}	/**	 * Renders a script and returns the results as a string	 *	 * @param   string  $name     The name of the element to render	 * @param   array   $params   Array of values	 * @param   string  $content  Override the output of the renderer	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($name, $params = null, $content = null)	{	}	/**	 * Return the content type of the renderer	 *	 * @return  string  The contentType	 *	 * @since   11.1	 */	public function getContentType()	{		return $this->_mime;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class for using sockets directly. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpTransportSocket implements JHttpTransport{	/**	 * @var    array  Reusable socket connections.	 * @since  11.3	 */	protected $connections;	/**	 * @var    JRegistry  The client options.	 * @since  11.3	 */	protected $options;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct(JRegistry $options)	{		if (!self::isSupported())		{			throw new RuntimeException('Cannot use a socket transport when fsockopen() is not available.');		}		$this->options = $options;	}	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null)	{		$connection = $this->connect($uri, $timeout);		// Make sure the connection is alive and valid.		if (is_resource($connection))		{			// Make sure the connection has not timed out.			$meta = stream_get_meta_data($connection);			if ($meta['timed_out'])			{				throw new RuntimeException('Server connection timed out.');			}		}		else		{			throw new RuntimeException('Not connected to server.');		}		// Get the request path from the URI object.		$path = $uri->toString(array('path', 'query'));		// If we have data to send make sure our request is setup for it.		if (!empty($data))		{			// If the data is not a scalar value encode it to be sent with the request.			if (!is_scalar($data))			{				$data = http_build_query($data);			}			if (!isset($headers['Content-Type']))			{				$headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';			}			// Add the relevant headers.			$headers['Content-Length'] = strlen($data);		}		// Build the request payload.		$request = array();		$request[] = strtoupper($method) . ' ' . ((empty($path)) ? '/' : $path) . ' HTTP/1.0';		$request[] = 'Host: ' . $uri->getHost();		// If an explicit user agent is given use it.		if (isset($userAgent))		{			$headers['User-Agent'] = $userAgent;		}		// If there are custom headers to send add them to the request payload.		if (is_array($headers))		{			foreach ($headers as $k => $v)			{				$request[] = $k . ': ' . $v;			}		}		// If we have data to send add it to the request payload.		if (!empty($data))		{			$request[] = null;			$request[] = $data;		}		// Send the request to the server.		fwrite($connection, implode("\r\n", $request) . "\r\n\r\n");		// Get the response data from the server.		$content = '';		while (!feof($connection))		{			$content .= fgets($connection, 4096);		}		return $this->getResponse($content);	}	/**	 * Method to get a response object from a server response.	 *	 * @param   string  $content  The complete server response, including headers.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  UnexpectedValueException	 */	protected function getResponse($content)	{		// Create the response object.		$return = new JHttpResponse;		// Split the response into headers and body.		$response = explode("\r\n\r\n", $content, 2);		// Get the response headers as an array.		$headers = explode("\r\n", $response[0]);		// Set the body for the response.		$return->body = $response[1];		// Get the response code from the first offset of the response headers.		preg_match('/[0-9]{3}/', array_shift($headers), $matches);		$code = $matches[0];		if (is_numeric($code))		{			$return->code = (int) $code;		}		// No valid response code was detected.		else		{			throw new UnexpectedValueException('No HTTP response code found.');		}		// Add the response headers to the response object.		foreach ($headers as $header)		{			$pos = strpos($header, ':');			$return->headers[trim(substr($header, 0, $pos))] = trim(substr($header, ($pos + 1)));		}		return $return;	}	/**	 * Method to connect to a server and get the resource.	 *	 * @param   JUri     $uri      The URI to connect with.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  resource  Socket connection resource.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	protected function connect(JUri $uri, $timeout = null)	{		$errno = null;		$err = null;		// Get the host from the uri.		$host = ($uri->isSSL()) ? 'ssl://' . $uri->getHost() : $uri->getHost();		// If the port is not explicitly set in the URI detect it.		if (!$uri->getPort())		{			$port = ($uri->getScheme() == 'https') ? 443 : 80;		}		// Use the set port.		else		{			$port = $uri->getPort();		}		// Build the connection key for resource memory caching.		$key = md5($host . $port);		// If the connection already exists, use it.		if (!empty($this->connections[$key]) && is_resource($this->connections[$key]))		{			// Connection reached EOF, cannot be used anymore			$meta = stream_get_meta_data($this->connections[$key]);			if ($meta['eof'])			{				if (!fclose($this->connections[$key]))				{					throw new RuntimeException('Cannot close connection');				}			}			// Make sure the connection has not timed out.			elseif (!$meta['timed_out'])			{				return $this->connections[$key];			}		}		if (!is_numeric($timeout))		{			$timeout = ini_get("default_socket_timeout");		}		// Attempt to connect to the server.		$connection = fsockopen($host, $port, $errno, $err, $timeout);		if (!$connection)		{			throw new RuntimeException($err, $errno);		}		// Since the connection was successful let's store it in case we need to use it later.		$this->connections[$key] = $connection;		// If an explicit timeout is set, set it.		if (isset($timeout))		{			stream_set_timeout($this->connections[$key], (int) $timeout);		}		return $this->connections[$key];	}	/**	 * method to check if http transport socket available for using	 *	 * @return bool true if available else false	 *	 * @since   12.1	 */	static public function isSupported()	{		return function_exists('fsockopen') && is_callable('fsockopen');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_checkin');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CHECKIN_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table id="global-checkin" class="adminlist">		<thead>			<tr>				<th width="1%">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="left"><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_DATABASE_TABLE', 'table', $listDirn, $listOrder); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_ITEMS_TO_CHECK_IN', 'count', $listDirn, $listOrder); ?></th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $table => $count): $i = 0;?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center"><?php echo JHtml::_('grid.id', $i, $table); ?></td>				<td><?php echo JText::sprintf('COM_CHECKIN_TABLE', $table); ?></td>				<td width="200" class="center"><?php echo $count; ?></td>			</tr>		<?php endforeach;?>		</tbody>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>	</table>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$images = json_decode($this->item->images);$urls = json_decode($this->item->urls);JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// Create shortcut to parameters.$params = $this->item->params;?><article class="item-page<?php echo $this->pageclass_sfx?>"><?php if ($this->params->get('show_page_heading')) : ?><?php if ($this->params->get('show_page_heading') and $params->get('show_title')) :?><hgroup><?php endif; ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?phpif (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && $this->item->paginationrelative){	echo $this->item->pagination;}if ($params->get('show_title')) : ?>		<h2>			<?php echo $this->escape($this->item->title); ?>		</h2><?php endif; ?><?php if ($this->params->get('show_page_heading') and $params->get('show_title')) :?></hgroup><?php endif; ?><?php if ($params->get('access-edit') ||  $params->get('show_print_icon') || $params->get('show_email_icon')) : ?>		<ul class="actions">		<?php if (!$this->print) : ?>				<?php if ($params->get('show_print_icon')) : ?>				<li class="print-icon">						<?php echo JHtml::_('icon.print_popup', $this->item, $params, array(), true); ?>				</li>				<?php endif; ?>				<?php if ($params->get('show_email_icon')) : ?>				<li class="email-icon">						<?php echo JHtml::_('icon.email', $this->item, $params, array(), true); ?>				</li>				<?php endif; ?>				<?php if ($this->user->authorise('core.edit', 'com_content.article.'.$this->item->id)) : ?>						<li class="edit-icon">							<?php echo JHtml::_('icon.edit', $this->item, $params, array(), true); ?>						</li>					<?php endif; ?>		<?php else : ?>				<li>						<?php echo JHtml::_('icon.print_screen', $this->item, $params, array(), true); ?>				</li>		<?php endif; ?>		</ul><?php endif; ?>	<?php  if (!$params->get('show_intro')) :		echo $this->item->event->afterDisplayTitle;	endif; ?>	<?php echo $this->item->event->beforeDisplayContent; ?><?php $useDefList = (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_parent_category'))	or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date'))	or ($params->get('show_hits'))); ?><?php if ($useDefList) : ?> <dl class="article-info"> <dt class="article-info-term"><?php  echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt><?php endif; ?><?php if ($params->get('show_parent_category') && $this->item->parent_slug != '1:root') : ?>		<dd class="parent-category-name">			<?php 	$title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_parent_category') and $this->item->parent_slug) : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_category')) : ?>		<dd class="category-name">			<?php 	$title = $this->escape($this->item->category_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_category') and $this->item->catslug) : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_create_date')) : ?>		<dd class="create">		<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_modify_date')) : ?>		<dd class="modified">		<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_publish_date')) : ?>		<dd class="published">		<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_author') && !empty($this->item->author )) : ?>	<dd class="createdby">		<?php $author = $this->item->author; ?>		<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author);?>			<?php if (!empty($this->item->contactid ) &&  $params->get('link_author') == true):?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY',					JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id=' . $this->item->contactid), $author)				); ?>			<?php else :?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>			<?php endif; ?>	</dd><?php endif; ?><?php if ($params->get('show_hits')) : ?>		<dd class="hits">		<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>		</dd><?php endif; ?><?php if ($useDefList) : ?> </dl><?php endif; ?>	<?php if (isset ($this->item->toc)) : ?>		<?php echo $this->item->toc; ?>	<?php endif; ?><?php if (isset($urls) AND ((!empty($urls->urls_position) AND ($urls->urls_position == '0')) OR ($params->get('urls_position') == '0' AND empty($urls->urls_position)))		OR (empty($urls->urls_position) AND (!$params->get('urls_position')))) : ?>	<?php echo $this->loadTemplate('links'); ?><?php endif; ?>	<?php  if (isset($images->image_fulltext) and !empty($images->image_fulltext)) : ?>	<?php $imgfloat = (empty($images->float_fulltext)) ? $params->get('float_fulltext') : $images->float_fulltext; ?>	<div class="img-fulltext-<?php echo htmlspecialchars($imgfloat); ?>">	<img		<?php if ($images->image_fulltext_caption):			echo 'class="caption"'.' title="' .htmlspecialchars($images->image_fulltext_caption) .'"';		endif; ?>		src="<?php echo htmlspecialchars($images->image_fulltext); ?>" alt="<?php echo htmlspecialchars($images->image_fulltext_alt); ?>"/>	</div>	<?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND !$this->item->paginationposition AND !$this->item->paginationrelative):	echo $this->item->pagination;endif;?>	<?php echo $this->item->text; ?><?php // TAGS ?><?php if ($params->get('show_tags', 1) && !empty($this->item->tags)) : ?>	<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>	<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?><?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND $this->item->paginationposition AND!$this->item->paginationrelative):	echo $this->item->pagination;?><?php endif; ?>	<?php if (isset($urls) AND ((!empty($urls->urls_position) AND ($urls->urls_position == '1')) OR ( $params->get('urls_position') == '1'))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND $this->item->paginationposition AND $this->item->paginationrelative):	echo $this->item->pagination;?><?php endif; ?>	<?php echo $this->item->event->afterDisplayContent; ?></article>
<?php/** * @package     Joomla.Site * @subpackage  mod_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$headerText	= trim($params->get('header_text'));$footerText	= trim($params->get('footer_text'));require_once JPATH_ADMINISTRATOR . '/components/com_banners/helpers/banners.php';BannersHelper::updateReset();$list = &ModBannersHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_banners', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheStorage{	/**	 * @var    string  Rawname	 * @since  11.1	 */	protected $rawname;	/**	 * @var    datetime  Now	 * @since  11.1	 */	public $_now;	/**	 * @var    integer  Cache lifetime	 * @since  11.1	 */	public $_lifetime;	/**	 * @var    boolean  Locking	 * @since  11.1	 */	public $_locking;	/**	 * @var    string  Language	 * @since  11.1	 */	public $_language;	/**	 * @var    string  Application name.	 * @since  11.1	 */	public $_application;	/**	 * @var    string  Hash	 * @since  11.1	 */	public $_hash;	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters	 *	 * @since   11.1	 */	public function __construct($options = array())	{		$config = JFactory::getConfig();		$this->_hash = md5($config->get('secret'));		$this->_application = (isset($options['application'])) ? $options['application'] : null;		$this->_language = (isset($options['language'])) ? $options['language'] : 'en-GB';		$this->_locking = (isset($options['locking'])) ? $options['locking'] : true;		$this->_lifetime = (isset($options['lifetime'])) ? $options['lifetime'] * 60 : $config->get('cachetime') * 60;		$this->_now = (isset($options['now'])) ? $options['now'] : time();		// Set time threshold value.  If the lifetime is not set, default to 60 (0 is BAD)		// _threshold is now available ONLY as a legacy (it's deprecated).  It's no longer used in the core.		if (empty($this->_lifetime))		{			$this->_threshold = $this->_now - 60;			$this->_lifetime = 60;		}		else		{			$this->_threshold = $this->_now - $this->_lifetime;		}	}	/**	 * Returns a cache storage handler object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $handler  The cache storage handler to instantiate	 * @param   array   $options  Array of handler options	 *	 * @return  JCacheStorage  A JCacheStorage instance	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 * @throws  RuntimeException	 */	public static function getInstance($handler = null, $options = array())	{		static $now = null;		self::addIncludePath(JPATH_PLATFORM . '/joomla/cache/storage');		if (!isset($handler))		{			$conf = JFactory::getConfig();			$handler = $conf->get('cache_handler');			if (empty($handler))			{				throw new UnexpectedValueException('Cache Storage Handler not set.');			}		}		if (is_null($now))		{			$now = time();		}		$options['now'] = $now;		// We can't cache this since options may change...		$handler = strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $handler));		$class = 'JCacheStorage' . ucfirst($handler);		if (!class_exists($class))		{			// Search for the class file in the JCacheStorage include paths.			jimport('joomla.filesystem.path');			if ($path = JPath::find(self::addIncludePath(), strtolower($handler) . '.php'))			{				include_once $path;			}			else			{				throw new RuntimeException(sprintf('Unable to load Cache Storage: %s', $handler));			}		}		return new $class($options);	}	/**	 * Get cached data by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean  false on failure or a cached data object	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		return false;	}	/**	 * Get all cached data	 *	 * @return  mixed    Boolean false on failure or a cached data object	 *	 * @since   11.1	 * @todo    Review this method. The docblock doesn't fit what it actually does.	 */	public function getAll()	{		if (!class_exists('JCacheStorageHelper', false))		{			include_once JPATH_PLATFORM . '/joomla/cache/storage/helper.php';		}		return;	}	/**	 * Store the data to cache by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		return true;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		return true;	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 *                          group mode     : cleans all cache in the group	 *                          notgroup mode  : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		return true;	}	/**	 * Garbage collect expired cache data	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		return true;	}	/**	 * Test to see if the storage handler is available.	 *	 * @return   boolean  True on success, false otherwise	 *	 * @since    12.1.	 */	public static function isSupported()	{		return true;	}	/**	 * Test to see if the storage handler is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public static function test()	{		JLog::add('JCacheStorage::test() is deprecated. Use JCacheStorage::isSupported() instead.', JLog::WARNING, 'deprecated');		return static::isSupported();	}	/**	 * Lock cached item	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function lock($id, $group, $locktime)	{		return false;	}	/**	 * Unlock cached item	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		return false;	}	/**	 * Get a cache_id string from an id/group pair	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  string   The cache_id string	 *	 * @since   11.1	 */	protected function _getCacheId($id, $group)	{		$name = md5($this->_application . '-' . $id . '-' . $this->_language);		$this->rawname = $this->_hash . '-' . $name;		return $this->_hash . '-cache-' . $group . '-' . $name;	}	/**	 * Add a directory where JCacheStorage should search for handlers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array  An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!empty($path) && !in_array($path, $paths))		{			jimport('joomla.filesystem.path');			array_unshift($paths, JPath::clean($path));		}		return $paths;	}}
<?php/** * Sniffs_Squiz_WhiteSpace_OperatorSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: OperatorSpacingSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Verifies that operators have valid spacing surrounding them. * * Example: * <b class="bad">$a=$b+$c;</b> * <b class="good">$a = $b + $c;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_OperatorSpacingSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        $comparison = PHP_CodeSniffer_Tokens::$comparisonTokens;        $operators  = PHP_CodeSniffer_Tokens::$operators;        $assignment = PHP_CodeSniffer_Tokens::$assignmentTokens;        return array_unique(array_merge($comparison, $operators, $assignment));    }//function    /**     * Processes this sniff, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The current file being checked.     * @param integer                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Skip default values in function declarations.        if($tokens[$stackPtr]['code'] === T_EQUAL        || $tokens[$stackPtr]['code'] === T_MINUS        )        {            if(isset($tokens[$stackPtr]['nested_parenthesis']) === true)            {                $bracket = end($tokens[$stackPtr]['nested_parenthesis']);                if(isset($tokens[$bracket]['parenthesis_owner']) === true)                {                    $function = $tokens[$bracket]['parenthesis_owner'];                    if($tokens[$function]['code'] === T_FUNCTION)                    {                        return;                    }                }            }        }        if($tokens[$stackPtr]['code'] === T_EQUAL)        {            // Skip for '=&' case.            if(isset($tokens[($stackPtr + 1)]) === true            && $tokens[($stackPtr + 1)]['code'] === T_BITWISE_AND            || $tokens[($stackPtr + 1)]['code'] === T_OPEN_PARENTHESIS)            {                return;            }        }        if($tokens[$stackPtr]['code'] === T_EQUAL        || $tokens[$stackPtr]['content'] === '.='        || $tokens[$stackPtr]['content'] === '+=')        {            // Skip for '=(' case.            // Skip also '.=('            if(isset($tokens[($stackPtr + 1)]) === true            && $tokens[($stackPtr + 1)]['code'] === T_OPEN_PARENTHESIS)            {                return;            }        }        if($tokens[$stackPtr]['code'] === T_BITWISE_AND)        {            // If its not a reference, then we expect one space either side of the            // bitwise operator.            if($phpcsFile->isReference($stackPtr) === false)            {                // Check there is one space before the & operator.                if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)                {                    $error = 'Expected 1 space before "&" operator; 0 found';                    $phpcsFile->addError($error, $stackPtr, 'NoSpaceBeforeAmp');                }                else                {                    if(strlen($tokens[($stackPtr - 1)]['content']) !== 1)                    {                        $found = strlen($tokens[($stackPtr - 1)]['content']);                        $error = sprintf('Expected 1 space before "&" operator; %s found'                        , $found);                        $phpcsFile->addError($error, $stackPtr, 'SpacingBeforeAmp');                    }                }                // Check there is one space after the & operator.                if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)                {                    $error = 'Expected 1 space after "&" operator; 0 found';                    $phpcsFile->addError($error, $stackPtr, 'NoSpaceAfterAmp');                }                else                {                    if(strlen($tokens[($stackPtr + 1)]['content']) !== 1)                    {                        $found = strlen($tokens[($stackPtr + 1)]['content']);                        $error = sprintf('Expected 1 space after "&" operator; %s found'                        , $found);                        $phpcsFile->addError($error, $stackPtr, 'SpacingAfterAmp');                    }                }            }        }        else        {            if($tokens[$stackPtr]['code'] === T_MINUS            || $tokens[$stackPtr]['code'] === T_PLUS)            {                // Check minus spacing, but make sure we aren't just assigning                // a minus value or returning one.                $prev = $phpcsFile->findPrevious(T_WHITESPACE, ($stackPtr - 1), null, true);                if($tokens[$prev]['code'] === T_RETURN)                {                    // Just returning a negative value; eg. return -1.                    return;                }                if(in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$operators) === true)                {                    // Just trying to operate on a negative value; eg. ($var * -1).                    return;                }                if(in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$comparisonTokens) === true)                {                    // Just trying to compare a negative value; eg. ($var === -1).                    return;                }                // A list of tokens that indicate that the token is not                // part of an arithmetic operation.                $invalidTokens = array(                T_COMMA,                T_OPEN_PARENTHESIS,                T_OPEN_SQUARE_BRACKET,                T_DOUBLE_ARROW,                T_COLON,                T_INLINE_THEN, // the ternary "?"                T_CASE                );                if(in_array($tokens[$prev]['code'], $invalidTokens) === true)                {                    // Just trying to use a negative value; eg. myFunction($var, -2).                    return;                }                $number = $phpcsFile->findNext(T_WHITESPACE, ($stackPtr + 1), null, true);                if(in_array($tokens[$number]['code'], array(T_LNUMBER, T_VARIABLE)) === true)                {                    $semi = $phpcsFile->findNext(T_WHITESPACE, ($number + 1), null, true);                    if($tokens[$semi]['code'] === T_SEMICOLON)                    {                        if($prev !== false                        && (in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$assignmentTokens) === true))                        {                            // This is a negative assignment.                            return;                        }                    }                }            }            $operator = $tokens[$stackPtr]['content'];            if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)            {                $error = "Expected 1 space before \"$operator\"; 0 found";                $phpcsFile->addError($error, $stackPtr, 'NoSpaceBefore');            }            else if(strlen($tokens[($stackPtr - 1)]['content']) !== 1)            {                // Don't throw an error for assignments, because other standards allow                // multiple spaces there to align multiple assignments.                if(in_array($tokens[$stackPtr]['code'], PHP_CodeSniffer_Tokens::$assignmentTokens) === false)                {                    $found = strlen($tokens[($stackPtr - 1)]['content']);                    $error = sprintf('Expected 1 space before "%s"; %s found'                    , $operator, $found);                    $phpcsFile->addError($error, $stackPtr, 'SpacingBefore');                }            }            if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)            {                $error = "Expected 1 space after \"$operator\"; 0 found";                $phpcsFile->addError($error, $stackPtr, 'NoSpaceAfter');            }            else if(strlen($tokens[($stackPtr + 1)]['content']) !== 1)            {                $found = strlen($tokens[($stackPtr + 1)]['content']);                $error = sprintf('Expected 1 space after "%s"; %s found'                , $operator, $found);                $phpcsFile->addError($error, $stackPtr, 'SpacingAfter');            }        }    }//function}//class
<?php/** * @package     Joomla.Installation * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * Joomla system checks. */error_reporting(E_ALL);ini_set('display_errors', true);const JDEBUG = false;@ini_set('magic_quotes_runtime', 0);/* * Check if a configuration file already exists. */if (file_exists(JPATH_CONFIGURATION . '/configuration.php')	&& (filesize(JPATH_CONFIGURATION . '/configuration.php') > 10)	&& !file_exists(JPATH_INSTALLATION . '/index.php')){	header('Location: ../index.php');	exit();}/* * Joomla system startup. */// Import the Joomla Platform.require_once JPATH_LIBRARIES . '/import.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to model a Web Client. * * @property-read  integer  $platform        The detected platform on which the web client runs. * @property-read  boolean  $mobile          True if the web client is a mobile device. * @property-read  integer  $engine          The detected rendering engine used by the web client. * @property-read  integer  $browser         The detected browser used by the web client. * @property-read  string   $browserVersion  The detected browser version used by the web client. * @property-read  array    $languages       The priority order detected accepted languages for the client. * @property-read  array    $encodings       The priority order detected accepted encodings for the client. * @property-read  string   $userAgent       The web client's user agent string. * @property-read  string   $acceptEncoding  The web client's accepted encoding string. * @property-read  string   $acceptLanguage  The web client's accepted languages string. * @property-read  array    $detection       An array of flags determining whether or not a detection routine has been run. * @property-read  boolean  $robot           True if the web client is a robot * * @package     Joomla.Platform * @subpackage  Application * @since       12.1 */class JApplicationWebClient{	const WINDOWS = 1;	const WINDOWS_PHONE = 2;	const WINDOWS_CE = 3;	const IPHONE = 4;	const IPAD = 5;	const IPOD = 6;	const MAC = 7;	const BLACKBERRY = 8;	const ANDROID = 9;	const LINUX = 10;	const TRIDENT = 11;	const WEBKIT = 12;	const GECKO = 13;	const PRESTO = 14;	const KHTML = 15;	const AMAYA = 16;	const IE = 17;	const FIREFOX = 18;	const CHROME = 19;	const SAFARI = 20;	const OPERA = 21;	const ANDROIDTABLET = 22;	/**	 * @var    integer  The detected platform on which the web client runs.	 * @since  12.1	 */	protected $platform;	/**	 * @var    boolean  True if the web client is a mobile device.	 * @since  12.1	 */	protected $mobile = false;	/**	 * @var    integer  The detected rendering engine used by the web client.	 * @since  12.1	 */	protected $engine;	/**	 * @var    integer  The detected browser used by the web client.	 * @since  12.1	 */	protected $browser;	/**	 * @var    string  The detected browser version used by the web client.	 * @since  12.1	 */	protected $browserVersion;	/**	 * @var    array  The priority order detected accepted languages for the client.	 * @since  12.1	 */	protected $languages = array();	/**	 * @var    array  The priority order detected accepted encodings for the client.	 * @since  12.1	 */	protected $encodings = array();	/**	 * @var    string  The web client's user agent string.	 * @since  12.1	 */	protected $userAgent;	/**	 * @var    string  The web client's accepted encoding string.	 * @since  12.1	 */	protected $acceptEncoding;	/**	 * @var    string  The web client's accepted languages string.	 * @since  12.1	 */	protected $acceptLanguage;	/**	 * @var    boolean  True if the web client is a robot.	 * @since  12.3	 */	protected $robot = false;	/**	 * @var    array  An array of flags determining whether or not a detection routine has been run.	 * @since  12.1	 */	protected $detection = array();	/**	 * Class constructor.	 *	 * @param   string  $userAgent       The optional user-agent string to parse.	 * @param   string  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   string  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   12.1	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		// If no explicit user agent string was given attempt to use the implicit one from server environment.		if (empty($userAgent) && isset($_SERVER['HTTP_USER_AGENT']))		{			$this->userAgent = $_SERVER['HTTP_USER_AGENT'];		}		else		{			$this->userAgent = $userAgent;		}		// If no explicit acceptable encoding string was given attempt to use the implicit one from server environment.		if (empty($acceptEncoding) && isset($_SERVER['HTTP_ACCEPT_ENCODING']))		{			$this->acceptEncoding = $_SERVER['HTTP_ACCEPT_ENCODING'];		}		else		{			$this->acceptEncoding = $acceptEncoding;		}		// If no explicit acceptable languages string was given attempt to use the implicit one from server environment.		if (empty($acceptLanguage) && isset($_SERVER['HTTP_ACCEPT_LANGUAGE']))		{			$this->acceptLanguage = $_SERVER['HTTP_ACCEPT_LANGUAGE'];		}		else		{			$this->acceptLanguage = $acceptLanguage;		}	}	/**	 * Magic method to get an object property's value by name.	 *	 * @param   string  $name  Name of the property for which to return a value.	 *	 * @return  mixed  The requested value if it exists.	 *	 * @since   12.1	 */	public function __get($name)	{		switch ($name)		{			case 'mobile':			case 'platform':				if (empty($this->detection['platform']))				{					$this->detectPlatform($this->userAgent);				}				break;			case 'engine':				if (empty($this->detection['engine']))				{					$this->detectEngine($this->userAgent);				}				break;			case 'browser':			case 'browserVersion':				if (empty($this->detection['browser']))				{					$this->detectBrowser($this->userAgent);				}				break;			case 'languages':				if (empty($this->detection['acceptLanguage']))				{					$this->detectLanguage($this->acceptLanguage);				}				break;			case 'encodings':				if (empty($this->detection['acceptEncoding']))				{					$this->detectEncoding($this->acceptEncoding);				}				break;			case 'robot':				if (empty($this->detection['robot']))				{					$this->detectRobot($this->userAgent);				}				break;		}		// Return the property if it exists.		if (isset($this->$name))		{			return $this->$name;		}	}	/**	 * Detects the client browser and version in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectBrowser($userAgent)	{		// Attempt to detect the browser type.  Obviously we are only worried about major browsers.		if ((stripos($userAgent, 'MSIE') !== false) && (stripos($userAgent, 'Opera') === false))		{			$this->browser = self::IE;			$patternBrowser = 'MSIE';		}		elseif ((stripos($userAgent, 'Firefox') !== false) && (stripos($userAgent, 'like Firefox') === false))		{			$this->browser = self::FIREFOX;			$patternBrowser = 'Firefox';		}		elseif (stripos($userAgent, 'Chrome') !== false)		{			$this->browser = self::CHROME;			$patternBrowser = 'Chrome';		}		elseif (stripos($userAgent, 'Safari') !== false)		{			$this->browser = self::SAFARI;			$patternBrowser = 'Safari';		}		elseif (stripos($userAgent, 'Opera') !== false)		{			$this->browser = self::OPERA;			$patternBrowser = 'Opera';		}		// If we detected a known browser let's attempt to determine the version.		if ($this->browser)		{			// Build the REGEX pattern to match the browser version string within the user agent string.			$pattern = '#(?<browser>Version|' . $patternBrowser . ')[/ ]+(?<version>[0-9.|a-zA-Z.]*)#';			// Attempt to find version strings in the user agent string.			$matches = array();			if (preg_match_all($pattern, $userAgent, $matches))			{				// Do we have both a Version and browser match?				if (count($matches['browser']) == 2)				{					// See whether Version or browser came first, and use the number accordingly.					if (strripos($userAgent, 'Version') < strripos($userAgent, $patternBrowser))					{						$this->browserVersion = $matches['version'][0];					}					else					{						$this->browserVersion = $matches['version'][1];					}				}				elseif (count($matches['browser']) > 2)				{						$key = array_search('Version', $matches['browser']);						if ($key)						{							$this->browserVersion = $matches['version'][$key];						}				}				// We only have a Version or a browser so use what we have.				else				{					$this->browserVersion = $matches['version'][0];				}			}		}		// Mark this detection routine as run.		$this->detection['browser'] = true;	}	/**	 * Method to detect the accepted response encoding by the client.	 *	 * @param   string  $acceptEncoding  The client accept encoding string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEncoding($acceptEncoding)	{		// Parse the accepted encodings.		$this->encodings = array_map('trim', (array) explode(',', $acceptEncoding));		// Mark this detection routine as run.		$this->detection['acceptEncoding'] = true;	}	/**	 * Detects the client rendering engine in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEngine($userAgent)	{		// Attempt to detect the client engine -- starting with the most popular ... for now.		if (stripos($userAgent, 'MSIE') !== false || stripos($userAgent, 'Trident') !== false)		{			$this->engine = self::TRIDENT;		}		// Evidently blackberry uses WebKit and doesn't necessarily report it.  Bad RIM.		elseif (stripos($userAgent, 'AppleWebKit') !== false || stripos($userAgent, 'blackberry') !== false)		{			$this->engine = self::WEBKIT;		}		// We have to check for like Gecko because some other browsers spoof Gecko.		elseif (stripos($userAgent, 'Gecko') !== false && stripos($userAgent, 'like Gecko') === false)		{			$this->engine = self::GECKO;		}		// Sometimes Opera browsers don't say Presto.		elseif (stripos($userAgent, 'Opera') !== false || stripos($userAgent, 'Presto') !== false)		{			$this->engine = self::PRESTO;		}		// *sigh*		elseif (stripos($userAgent, 'KHTML') !== false)		{			$this->engine = self::KHTML;		}		// Lesser known engine but it finishes off the major list from Wikipedia :-)		elseif (stripos($userAgent, 'Amaya') !== false)		{			$this->engine = self::AMAYA;		}		// Mark this detection routine as run.		$this->detection['engine'] = true;	}	/**	 * Method to detect the accepted languages by the client.	 *	 * @param   mixed  $acceptLanguage  The client accept language string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectLanguage($acceptLanguage)	{		// Parse the accepted encodings.		$this->languages = array_map('trim', (array) explode(',', $acceptLanguage));		// Mark this detection routine as run.		$this->detection['acceptLanguage'] = true;	}	/**	 * Detects the client platform in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectPlatform($userAgent)	{		// Attempt to detect the client platform.		if (stripos($userAgent, 'Windows') !== false)		{			$this->platform = self::WINDOWS;			// Let's look at the specific mobile options in the Windows space.			if (stripos($userAgent, 'Windows Phone') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_PHONE;			}			elseif (stripos($userAgent, 'Windows CE') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_CE;			}		}		// Interestingly 'iPhone' is present in all iOS devices so far including iPad and iPods.		elseif (stripos($userAgent, 'iPhone') !== false)		{			$this->mobile = true;			$this->platform = self::IPHONE;			// Let's look at the specific mobile options in the iOS space.			if (stripos($userAgent, 'iPad') !== false)			{				$this->platform = self::IPAD;			}			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->platform = self::IPOD;			}		}			// In case where iPhone is not mentioed in iPad user agent string			elseif (stripos($userAgent, 'iPad') !== false)			{				$this->mobile = true;				$this->platform = self::IPAD;			}			// In case where iPhone is not mentioed in iPod user agent string			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->mobile = true;				$this->platform = self::IPOD;			}		// This has to come after the iPhone check because mac strings are also present in iOS devices.		elseif (preg_match('/macintosh|mac os x/i', $userAgent))		{			$this->platform = self::MAC;		}		elseif (stripos($userAgent, 'Blackberry') !== false)		{			$this->mobile = true;			$this->platform = self::BLACKBERRY;		}		elseif (stripos($userAgent, 'Android') !== false)		{			$this->mobile = true;			$this->platform = self::ANDROID;			/**			 * Attempt to distinguish between Android phones and tablets			 * There is no totally foolproof method but certain rules almost always hold			 *   Android 3.x is only used for tablets			 *   Some devices and browsers encourage users to change their UA string to include Tablet.			 *   Google encourages manufacturers to exclude the string Mobile from tablet device UA strings.			 *   In some modes Kindle Android devices include the string Mobile but they include the string Silk.			 */			if (stripos($userAgent, 'Android 3') !== false || stripos($userAgent, 'Tablet') !== false				|| stripos($userAgent, 'Mobile') === false || stripos($userAgent, 'Silk') !== false )			{				$this->platform = self::ANDROIDTABLET;			}		}		elseif (stripos($userAgent, 'Linux') !== false)		{			$this->platform = self::LINUX;		}		// Mark this detection routine as run.		$this->detection['platform'] = true;	}	/**	 * Determines if the browser is a robot or not.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function detectRobot($userAgent)	{		if (preg_match('/http|bot|robot|spider|crawler|curl|^$/i', $userAgent))		{			$this->robot = true;		}		else		{			$this->robot = false;		}		$this->detection['robot'] = true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP client class for connecting to a GitHub instance. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubHttp extends JHttp{	/**	 * @const  integer  Use no authentication for HTTP connections.	 * @since  11.3	 */	const AUTHENTICATION_NONE = 0;	/**	 * @const  integer  Use basic authentication for HTTP connections.	 * @since  11.3	 */	const AUTHENTICATION_BASIC = 1;	/**	 * @const  integer  Use OAuth authentication for HTTP connections.	 * @since  11.3	 */	const AUTHENTICATION_OAUTH = 2;	/**	 * Constructor.	 *	 * @param   JRegistry       $options    Client options object.	 * @param   JHttpTransport  $transport  The HTTP transport object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JHttpTransport $transport = null)	{		// Call the JHttp constructor to setup the object.		parent::__construct($options, $transport);		// Make sure the user agent string is defined.		$this->options->def('userAgent', 'JGitHub/2.0');		// Set the default timeout to 120 seconds.		$this->options->def('timeout', 120);	}	/**	 * Method to send the PATCH command to the server.	 *	 * @param   string  $url      Path to the resource.	 * @param   mixed   $data     Either an associative array or a string to be sent with the request.	 * @param   array   $headers  An array of name-value pairs to include in the header of the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function patch($url, $data, array $headers = null)	{		return $this->transport->request('PATCH', new JUri($url), $data, $headers);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  User.profile * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('radio');/** * Provides input for TOS * * @package     Joomla.Plugin * @subpackage  User.profile * @since       2.5.5 */class JFormFieldTos extends JFormFieldRadio{	/**	 * The form field type.	 *	 * @var    string	 * @since  2.5.5	 */	protected $type = 'Tos';	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   2.5.5	 */	protected function getLabel()	{		$label = '';		if ($this->hidden)		{			return $label;		}		// Get the label text from the XML element, defaulting to the element name.		$text = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$text = $this->translateLabel ? JText::_($text) : $text;		// Set required to true as this field is not displayed at all if not required.		$this->required = true;		// Add CSS and JS for the TOS field		$doc = JFactory::getDocument();		$css = "#jform_profile_tos {width: 18em; margin: 0 !important; padding: 0 2px !important;}				#jform_profile_tos input {margin:0 5px 0 0 !important; width:10px !important;}				#jform_profile_tos label {margin:0 15px 0 0 !important; width:auto;}				";		$doc->addStyleDeclaration($css);		JHtml::_('behavior.modal');		// Build the class for the label.		$class = !empty($this->description) ? 'hasTip' : '';		$class = $class . ' required';		$class = !empty($this->labelClass) ? $class . ' ' . $this->labelClass : $class;		// Add the opening label tag and main attributes attributes.		$label .= '<label id="' . $this->id . '-lbl" for="' . $this->id . '" class="' . $class . '"';		// If a description is specified, use it to build a tooltip.		if (!empty($this->description))		{			$label .= ' title="'				. htmlspecialchars(				trim($text, ':') . '::' . ($this->translateDescription ? JText::_($this->description) : $this->description),				ENT_COMPAT, 'UTF-8'			) . '"';		}		$tosarticle = $this->element['article'] ? (int) $this->element['article'] : 1;		$link = '<a class="modal" title="" href="index.php?option=com_content&amp;view=article&amp;layout=modal&amp;id=' . $tosarticle . '&amp;tmpl=component" rel="{handler: \'iframe\', size: {x:800, y:500}}">' . $text . '</a>';		// Add the label text and closing tag.		$label .= '>' . $link . '<span class="star">&#160;*</span></label>';		return $label;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input  = JFactory::getApplication()->input;$user   = JFactory::getUser();$asset  = $input->get('asset');$author = $input->get('author');// Access check.if (!$user->authorise('core.manage', 'com_media')	&&	(!$asset or (			!$user->authorise('core.edit', $asset)		&&	!$user->authorise('core.create', $asset)		&& 	count($user->getAuthorisedCategories($asset, 'core.create')) == 0)		&&	!($user->id == $author && $user->authorise('core.edit.own', $asset)))){	return JError::raiseWarning(403, JText::_('JERROR_ALERTNOAUTHOR'));}$params = JComponentHelper::getParams('com_media');// Load the helper classrequire_once JPATH_COMPONENT_ADMINISTRATOR . '/helpers/media.php';// Set the path definitions$popup_upload = $input->get('pop_up', null);$path = 'file_path';$view = $input->get('view');if (substr(strtolower($view), 0, 6) == 'images' || $popup_upload == 1){	$path = 'image_path';}define('COM_MEDIA_BASE',    JPATH_ROOT . '/' . $params->get($path, 'images'));define('COM_MEDIA_BASEURL', JURI::root() . $params->get($path, 'images'));$controller	= JControllerLegacy::getInstance('Media', array('base_path' => JPATH_COMPONENT_ADMINISTRATOR));$controller->execute($input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Chrome Styles Form Field class for the Joomla Platform. * * @package     Joomla.Libraries * @subpackage  Form * @since       3.0 */class JFormFieldChromeStyle extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  3.0	 */	public $type = 'ChromeStyle';	/**	 * Method to get the list of template chrome style options	 * grouped by template.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   3.0	 */	protected function getGroups()	{		$groups = array();		// Add Module Style Field		$tmp = '---' . JText::_('JLIB_FORM_VALUE_FROM_TEMPLATE') . '---';		$groups[$tmp][] = JHtml::_('select.option', '0', JText::_('JLIB_FORM_VALUE_INHERITED'));		$templateStyles = $this->getTemplateModuleStyles();		// Create one new option object for each available style, grouped by templates		foreach ($templateStyles as $template => $styles)		{			$template = ucfirst($template);			$groups[$template] = array();			foreach ($styles as $style)			{				$tmp = JHtml::_('select.option', $template . '-' . $style, $style);				$groups[$template][] = $tmp;			}		}		reset($groups);		return $groups;	}	/**	 * Method to get the templates module styles.	 *	 * @return  array  The array of styles, grouped by templates.	 *	 * @since   3.0	 */	protected function getTemplateModuleStyles()	{		$moduleStyles = array();		$templates = array($this->getSystemTemplate());		$templates = array_merge($templates, ModulesHelper::getTemplates('site'));		foreach ($templates as $template)		{			$modulesFilePath = JPATH_SITE . '/templates/' . $template->element . '/html/modules.php';			// Is there modules.php for that template?			if (file_exists($modulesFilePath))			{				$modulesFileData = file_get_contents($modulesFilePath);				preg_match_all('/function[\s\t]*modChrome\_([a-z0-9\-\_]*)[\s\t]*\(/i', $modulesFileData, $styles);				if (!array_key_exists($template->element, $moduleStyles))				{					$moduleStyles[$template->element] = array();				}				$moduleStyles[$template->element] = $styles[1];			}		}		return $moduleStyles;	}	/**	 * Method to get the system template as an object.	 *	 * @return  array  The object of system template.	 *	 * @since   3.0	 */	protected function getSystemTemplate()	{		$template = new stdClass;		$template->element = 'system';		$template->name    = 'system';		$template->enabled = 1;		return $template;	}}
<?php// {{{ license/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 foldmethod=marker: *///// +----------------------------------------------------------------------+// | This library is free software; you can redistribute it and/or modify |// | it under the terms of the GNU Lesser General Public License as       |// | published by the Free Software Foundation; either version 2.1 of the |// | License, or (at your option) any later version.                      |// |                                                                      |// | This library is distributed in the hope that it will be useful, but  |// | WITHOUT ANY WARRANTY; without even the implied warranty of           |// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    |// | Lesser General Public License for more details.                      |// |                                                                      |// | You should have received a copy of the GNU Lesser General Public     |// | License along with this library; if not, write to the Free Software  |// | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 |// | USA.                                                                 |// +----------------------------------------------------------------------+//// }}}/** * Encode/decode Internationalized Domain Names. * * The class allows to convert internationalized domain names * (see RFC 3490 for details) as they can be used with various registries worldwide * to be translated between their original (localized) form and their encoded form * as it will be used in the DNS (Domain Name System). * * The class provides two public methods, encode() and decode(), which do exactly * what you would expect them to do. You are allowed to use complete domain names, * simple strings and complete email addresses as well. That means, that you might * use any of the following notations: * * - www.nrgler.com * - xn--nrgler-wxa * - xn--brse-5qa.xn--knrz-1ra.info * * Unicode input might be given as either UTF-8 string, UCS-4 string or UCS-4 * array. Unicode output is available in the same formats. * You can select your preferred format via {@link set_paramter()}. * * ACE input and output is always expected to be ASCII. * * @author  Matthias Sommerfeld <mso@phlylabs.de> * @copyright 2004-2007 phlyLabs Berlin, http://phlylabs.de * @version 0.5.1 * */class idna_convert{    /**     * Holds all relevant mapping tables, loaded from a seperate file on construct     * See RFC3454 for details     *     * @var array     * @access private     */    var $NP = array();    // Internal settings, do not mess with them    var $_punycode_prefix = 'xn--';    var $_invalid_ucs =     0x80000000;    var $_max_ucs =         0x10FFFF;    var $_base =            36;    var $_tmin =            1;    var $_tmax =            26;    var $_skew =            38;    var $_damp =            700;    var $_initial_bias =    72;    var $_initial_n =       0x80;    var $_sbase =           0xAC00;    var $_lbase =           0x1100;    var $_vbase =           0x1161;    var $_tbase =           0x11A7;    var $_lcount =          19;    var $_vcount =          21;    var $_tcount =          28;    var $_ncount =          588;   // _vcount * _tcount    var $_scount =          11172; // _lcount * _tcount * _vcount    var $_error =           false;    // See {@link set_paramter()} for details of how to change the following    // settings from within your script / application    var $_api_encoding   =  'utf8'; // Default input charset is UTF-8    var $_allow_overlong =  false;  // Overlong UTF-8 encodings are forbidden    var $_strict_mode    =  false;  // Behave strict or not    // The constructor    function idna_convert($options = false)    {        $this->slast = $this->_sbase + $this->_lcount * $this->_vcount * $this->_tcount;        if (function_exists('file_get_contents')) {            $this->NP = unserialize(file_get_contents(dirname(__FILE__).'/npdata.ser'));        } else {            $this->NP = unserialize(join('', file(dirname(__FILE__).'/npdata.ser')));        }        // If parameters are given, pass these to the respective method        if (is_array($options)) {            return $this->set_parameter($options);        }        return true;    }    /**     * Sets a new option value. Available options and values:     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input ('utf8' for UTF-8,     *         'ucs4_string' and 'ucs4_array' respectively for UCS4); The output is always UTF-8]     * [overlong - Unicode does not allow unnecessarily long encodings of chars,     *             to allow this, set this parameter to true, else to false;     *             default is false.]     * [strict - true: strict mode, good for registration purposes - Causes errors     *           on failures; false: loose mode, ideal for "wildlife" applications     *           by silently ignoring errors and returning the original input instead     *     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)     * @param    string    Value to use (if parameter 1 is a string)     * @return   boolean   true on success, false otherwise     * @access   public     */    function set_parameter($option, $value = false)    {        if (!is_array($option)) {            $option = array($option => $value);        }        foreach ($option as $k => $v) {            switch ($k) {            case 'encoding':                switch ($v) {                case 'utf8':                case 'ucs4_string':                case 'ucs4_array':                    $this->_api_encoding = $v;                    break;                default:                    $this->_error('Set Parameter: Unknown parameter '.$v.' for option '.$k);                    return false;                }                break;            case 'overlong':                $this->_allow_overlong = ($v) ? true : false;                break;            case 'strict':                $this->_strict_mode = ($v) ? true : false;                break;            default:                $this->_error('Set Parameter: Unknown option '.$k);                return false;            }        }        return true;    }    /**     * Decode a given ACE domain name     * @param    string   Domain name (ACE string)     * [@param    string   Desired output encoding, see {@link set_parameter}]     * @return   string   Decoded Domain name (UTF-8 or UCS-4)     * @access   public     */    function decode($input, $one_time_encoding = false)    {        // Optionally set        if ($one_time_encoding) {            switch ($one_time_encoding) {            case 'utf8':            case 'ucs4_string':            case 'ucs4_array':                break;            default:                $this->_error('Unknown encoding '.$one_time_encoding);                return false;            }        }        // Make sure to drop any newline characters around        $input = trim($input);        // Negotiate input and try to determine, whether it is a plain string,        // an email address or something like a complete URL        if (strpos($input, '@')) { // Maybe it is an email address            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            list ($email_pref, $input) = explode('@', $input, 2);            $arr = explode('.', $input);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $input = join('.', $arr);            $arr = explode('.', $email_pref);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $email_pref = join('.', $arr);            $return = $email_pref . '@' . $input;        } elseif (preg_match('![:\./]!', $input)) { // Or a complete domain name (with or without paths / parameters)            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            $parsed = parse_url($input);            if (isset($parsed['host'])) {                $arr = explode('.', $parsed['host']);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }                $parsed['host'] = join('.', $arr);                $return =                        (empty($parsed['scheme']) ? '' : $parsed['scheme'].(strtolower($parsed['scheme']) == 'mailto' ? ':' : '://'))                        .(empty($parsed['user']) ? '' : $parsed['user'].(empty($parsed['pass']) ? '' : ':'.$parsed['pass']).'@')                        .$parsed['host']                        .(empty($parsed['port']) ? '' : ':'.$parsed['port'])                        .(empty($parsed['path']) ? '' : $parsed['path'])                        .(empty($parsed['query']) ? '' : '?'.$parsed['query'])                        .(empty($parsed['fragment']) ? '' : '#'.$parsed['fragment']);            } else { // parse_url seems to have failed, try without it                $arr = explode('.', $input);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    $arr[$k] = ($conv) ? $conv : $v;                }                $return = join('.', $arr);            }        } else { // Otherwise we consider it being a pure domain name string            $return = $this->_decode($input);            if (!$return) $return = $input;        }        // The output is UTF-8 by default, other output formats need conversion here        // If one time encoding is given, use this, else the objects property        switch (($one_time_encoding) ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            return $return;            break;        case 'ucs4_string':           return $this->_ucs4_to_ucs4_string($this->_utf8_to_ucs4($return));           break;        case 'ucs4_array':            return $this->_utf8_to_ucs4($return);            break;        default:            $this->_error('Unsupported output format');            return false;        }    }    /**     * Encode a given UTF-8 domain name     * @param    string   Domain name (UTF-8 or UCS-4)     * [@param    string   Desired input encoding, see {@link set_parameter}]     * @return   string   Encoded Domain name (ACE string)     * @access   public     */    function encode($decoded, $one_time_encoding = false)    {        // Forcing conversion of input to UCS4 array        // If one time encoding is given, use this, else the objects property        switch ($one_time_encoding ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            $decoded = $this->_utf8_to_ucs4($decoded);            break;        case 'ucs4_string':           $decoded = $this->_ucs4_string_to_ucs4($decoded);        case 'ucs4_array':           break;        default:            $this->_error('Unsupported input format: '.($one_time_encoding ? $one_time_encoding : $this->_api_encoding));            return false;        }        // No input, no output, what else did you expect?        if (empty($decoded)) return '';        // Anchors for iteration        $last_begin = 0;        // Output string        $output = '';        foreach ($decoded as $k => $v) {            // Make sure to use just the plain dot            switch($v) {            case 0x3002:            case 0xFF0E:            case 0xFF61:                $decoded[$k] = 0x2E;                // Right, no break here, the above are converted to dots anyway            // Stumbling across an anchoring character            case 0x2E:            case 0x2F:            case 0x3A:            case 0x3F:            case 0x40:                // Neither email addresses nor URLs allowed in strict mode                if ($this->_strict_mode) {                   $this->_error('Neither email addresses nor URLs are allowed in strict mode.');                   return false;                } else {                    // Skip first char                    if ($k) {                        $encoded = '';                        $encoded = $this->_encode(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        if ($encoded) {                            $output .= $encoded;                        } else {                            $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        }                        $output .= chr($decoded[$k]);                    }                    $last_begin = $k + 1;                }            }        }        // Catch the rest of the string        if ($last_begin) {            $inp_len = sizeof($decoded);            $encoded = '';            $encoded = $this->_encode(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            if ($encoded) {                $output .= $encoded;            } else {                $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            }            return $output;        } else {            if ($output = $this->_encode($decoded)) {                return $output;            } else {                return $this->_ucs4_to_utf8($decoded);            }        }    }    /**     * Use this method to get the last error ocurred     * @param    void     * @return   string   The last error, that occured     * @access   public     */    function get_last_error()    {        return $this->_error;    }    /**     * The actual decoding algorithm     * @access   private     */    function _decode($encoded)    {        // We do need to find the Punycode prefix        if (!preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $encoded)) {            $this->_error('This is not a punycode string');            return false;        }        $encode_test = preg_replace('!^'.preg_quote($this->_punycode_prefix, '!').'!', '', $encoded);        // If nothing left after removing the prefix, it is hopeless        if (!$encode_test) {            $this->_error('The given encoded string was empty');            return false;        }        // Find last occurence of the delimiter        $delim_pos = strrpos($encoded, '-');        if ($delim_pos > strlen($this->_punycode_prefix)) {            for ($k = strlen($this->_punycode_prefix); $k < $delim_pos; ++$k) {                $decoded[] = ord($encoded{$k});            }        } else {            $decoded = array();        }        $deco_len = count($decoded);        $enco_len = strlen($encoded);        // Wandering through the strings; init        $is_first = true;        $bias     = $this->_initial_bias;        $idx      = 0;        $char     = $this->_initial_n;        for ($enco_idx = ($delim_pos) ? ($delim_pos + 1) : 0; $enco_idx < $enco_len; ++$deco_len) {            for ($old_idx = $idx, $w = 1, $k = $this->_base; 1 ; $k += $this->_base) {                $digit = $this->_decode_digit($encoded{$enco_idx++});                $idx += $digit * $w;                $t = ($k <= $bias) ? $this->_tmin :                        (($k >= $bias + $this->_tmax) ? $this->_tmax : ($k - $bias));                if ($digit < $t) break;                $w = (int) ($w * ($this->_base - $t));            }            $bias = $this->_adapt($idx - $old_idx, $deco_len + 1, $is_first);            $is_first = false;            $char += (int) ($idx / ($deco_len + 1));            $idx %= ($deco_len + 1);            if ($deco_len > 0) {                // Make room for the decoded char                for ($i = $deco_len; $i > $idx; $i--) {                    $decoded[$i] = $decoded[($i - 1)];                }            }            $decoded[$idx++] = $char;        }        return $this->_ucs4_to_utf8($decoded);    }    /**     * The actual encoding algorithm     * @access   private     */    function _encode($decoded)    {        // We cannot encode a domain name containing the Punycode prefix        $extract = strlen($this->_punycode_prefix);        $check_pref = $this->_utf8_to_ucs4($this->_punycode_prefix);        $check_deco = array_slice($decoded, 0, $extract);        if ($check_pref == $check_deco) {            $this->_error('This is already a punycode string');            return false;        }        // We will not try to encode strings consisting of basic code points only        $encodable = false;        foreach ($decoded as $k => $v) {            if ($v > 0x7a) {                $encodable = true;                break;            }        }        if (!$encodable) {            $this->_error('The given string does not contain encodable chars');            return false;        }        // Do NAMEPREP        $decoded = $this->_nameprep($decoded);        if (!$decoded || !is_array($decoded)) return false; // NAMEPREP failed        $deco_len  = count($decoded);        if (!$deco_len) return false; // Empty array        $codecount = 0; // How many chars have been consumed        $encoded = '';        // Copy all basic code points to output        for ($i = 0; $i < $deco_len; ++$i) {            $test = $decoded[$i];            // Will match [-0-9a-zA-Z]            if ((0x2F < $test && $test < 0x40) || (0x40 < $test && $test < 0x5B)                    || (0x60 < $test && $test <= 0x7B) || (0x2D == $test)) {                $encoded .= chr($decoded[$i]);                $codecount++;            }        }        if ($codecount == $deco_len) return $encoded; // All codepoints were basic ones        // Start with the prefix; copy it to output        $encoded = $this->_punycode_prefix.$encoded;        // If we have basic code points in output, add an hyphen to the end        if ($codecount) $encoded .= '-';        // Now find and encode all non-basic code points        $is_first  = true;        $cur_code  = $this->_initial_n;        $bias      = $this->_initial_bias;        $delta     = 0;        while ($codecount < $deco_len) {            // Find the smallest code point >= the current code point and            // remember the last ouccrence of it in the input            for ($i = 0, $next_code = $this->_max_ucs; $i < $deco_len; $i++) {                if ($decoded[$i] >= $cur_code && $decoded[$i] <= $next_code) {                    $next_code = $decoded[$i];                }            }            $delta += ($next_code - $cur_code) * ($codecount + 1);            $cur_code = $next_code;            // Scan input again and encode all characters whose code point is $cur_code            for ($i = 0; $i < $deco_len; $i++) {                if ($decoded[$i] < $cur_code) {                    $delta++;                } elseif ($decoded[$i] == $cur_code) {                    for ($q = $delta, $k = $this->_base; 1; $k += $this->_base) {                        $t = ($k <= $bias) ? $this->_tmin :                                (($k >= $bias + $this->_tmax) ? $this->_tmax : $k - $bias);                        if ($q < $t) break;                        $encoded .= $this->_encode_digit(intval($t + (($q - $t) % ($this->_base - $t)))); //v0.4.5 Changed from ceil() to intval()                        $q = (int) (($q - $t) / ($this->_base - $t));                    }                    $encoded .= $this->_encode_digit($q);                    $bias = $this->_adapt($delta, $codecount+1, $is_first);                    $codecount++;                    $delta = 0;                    $is_first = false;                }            }            $delta++;            $cur_code++;        }        return $encoded;    }    /**     * Adapt the bias according to the current code point and position     * @access   private     */    function _adapt($delta, $npoints, $is_first)    {        $delta = intval($is_first ? ($delta / $this->_damp) : ($delta / 2));        $delta += intval($delta / $npoints);        for ($k = 0; $delta > (($this->_base - $this->_tmin) * $this->_tmax) / 2; $k += $this->_base) {            $delta = intval($delta / ($this->_base - $this->_tmin));        }        return intval($k + ($this->_base - $this->_tmin + 1) * $delta / ($delta + $this->_skew));    }    /**     * Encoding a certain digit     * @access   private     */    function _encode_digit($d)    {        return chr($d + 22 + 75 * ($d < 26));    }    /**     * Decode a certain digit     * @access   private     */    function _decode_digit($cp)    {        $cp = ord($cp);        return ($cp - 48 < 10) ? $cp - 22 : (($cp - 65 < 26) ? $cp - 65 : (($cp - 97 < 26) ? $cp - 97 : $this->_base));    }    /**     * Internal error handling method     * @access   private     */    function _error($error = '')    {        $this->_error = $error;    }    /**     * Do Nameprep according to RFC3491 and RFC3454     * @param    array    Unicode Characters     * @return   string   Unicode Characters, Nameprep'd     * @access   private     */    function _nameprep($input)    {        $output = array();        $error = false;        //        // Mapping        // Walking through the input array, performing the required steps on each of        // the input chars and putting the result into the output array        // While mapping required chars we apply the cannonical ordering        foreach ($input as $v) {            // Map to nothing == skip that code point            if (in_array($v, $this->NP['map_nothing'])) continue;            // Try to find prohibited input            if (in_array($v, $this->NP['prohibit']) || in_array($v, $this->NP['general_prohibited'])) {                $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                return false;            }            foreach ($this->NP['prohibit_ranges'] as $range) {                if ($range[0] <= $v && $v <= $range[1]) {                    $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                    return false;                }            }            //            // Hangul syllable decomposition            if (0xAC00 <= $v && $v <= 0xD7AF) {                foreach ($this->_hangul_decompose($v) as $out) {                    $output[] = (int) $out;                }            // There's a decomposition mapping for that code point            } elseif (isset($this->NP['replacemaps'][$v])) {                foreach ($this->_apply_cannonical_ordering($this->NP['replacemaps'][$v]) as $out) {                    $output[] = (int) $out;                }            } else {                $output[] = (int) $v;            }        }        // Before applying any Combining, try to rearrange any Hangul syllables        $output = $this->_hangul_compose($output);        //        // Combine code points        //        $last_class   = 0;        $last_starter = 0;        $out_len      = count($output);        for ($i = 0; $i < $out_len; ++$i) {            $class = $this->_get_combining_class($output[$i]);            if ((!$last_class || $last_class > $class) && $class) {                // Try to match                $seq_len = $i - $last_starter;                $out = $this->_combine(array_slice($output, $last_starter, $seq_len));                // On match: Replace the last starter with the composed character and remove                // the now redundant non-starter(s)                if ($out) {                    $output[$last_starter] = $out;                    if (count($out) != $seq_len) {                        for ($j = $i+1; $j < $out_len; ++$j) {                            $output[$j-1] = $output[$j];                        }                        unset($output[$out_len]);                    }                    // Rewind the for loop by one, since there can be more possible compositions                    $i--;                    $out_len--;                    $last_class = ($i == $last_starter) ? 0 : $this->_get_combining_class($output[$i-1]);                    continue;                }            }            // The current class is 0            if (!$class) $last_starter = $i;            $last_class = $class;        }        return $output;    }    /**     * Decomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    integer  32bit UCS4 code point     * @return   array    Either Hangul Syllable decomposed or original 32bit value as one value array     * @access   private     */    function _hangul_decompose($char)    {        $sindex = (int) $char - $this->_sbase;        if ($sindex < 0 || $sindex >= $this->_scount) {            return array($char);        }        $result = array();        $result[] = (int) $this->_lbase + $sindex / $this->_ncount;        $result[] = (int) $this->_vbase + ($sindex % $this->_ncount) / $this->_tcount;        $T = intval($this->_tbase + $sindex % $this->_tcount);        if ($T != $this->_tbase) $result[] = $T;        return $result;    }    /**     * Ccomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    array    Decomposed UCS4 sequence     * @return   array    UCS4 sequence with syllables composed     * @access   private     */    function _hangul_compose($input)    {        $inp_len = count($input);        if (!$inp_len) return array();        $result = array();        $last = (int) $input[0];        $result[] = $last; // copy first char from input to output        for ($i = 1; $i < $inp_len; ++$i) {            $char = (int) $input[$i];            $sindex = $last - $this->_sbase;            $lindex = $last - $this->_lbase;            $vindex = $char - $this->_vbase;            $tindex = $char - $this->_tbase;            // Find out, whether two current characters are LV and T            if (0 <= $sindex && $sindex < $this->_scount && ($sindex % $this->_tcount == 0)                    && 0 <= $tindex && $tindex <= $this->_tcount) {                // create syllable of form LVT                $last += $tindex;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // Find out, whether two current characters form L and V            if (0 <= $lindex && $lindex < $this->_lcount && 0 <= $vindex && $vindex < $this->_vcount) {                // create syllable of form LV                $last = (int) $this->_sbase + ($lindex * $this->_vcount + $vindex) * $this->_tcount;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // if neither case was true, just add the character            $last = $char;            $result[] = $char;        }        return $result;    }    /**     * Returns the combining class of a certain wide char     * @param    integer    Wide char to check (32bit integer)     * @return   integer    Combining class if found, else 0     * @access   private     */    function _get_combining_class($char)    {        return isset($this->NP['norm_combcls'][$char]) ? $this->NP['norm_combcls'][$char] : 0;    }    /**     * Apllies the cannonical ordering of a decomposed UCS4 sequence     * @param    array      Decomposed UCS4 sequence     * @return   array      Ordered USC4 sequence     * @access   private     */    function _apply_cannonical_ordering($input)    {        $swap = true;        $size = count($input);        while ($swap) {            $swap = false;            $last = $this->_get_combining_class(intval($input[0]));            for ($i = 0; $i < $size-1; ++$i) {                $next = $this->_get_combining_class(intval($input[$i+1]));                if ($next != 0 && $last > $next) {                    // Move item leftward until it fits                    for ($j = $i + 1; $j > 0; --$j) {                        if ($this->_get_combining_class(intval($input[$j-1])) <= $next) break;                        $t = intval($input[$j]);                        $input[$j] = intval($input[$j-1]);                        $input[$j-1] = $t;                        $swap = true;                    }                    // Reentering the loop looking at the old character again                    $next = $last;                }                $last = $next;            }        }        return $input;    }    /**     * Do composition of a sequence of starter and non-starter     * @param    array      UCS4 Decomposed sequence     * @return   array      Ordered USC4 sequence     * @access   private     */    function _combine($input)    {        $inp_len = count($input);        foreach ($this->NP['replacemaps'] as $np_src => $np_target) {            if ($np_target[0] != $input[0]) continue;            if (count($np_target) != $inp_len) continue;            $hit = false;            foreach ($input as $k2 => $v2) {                if ($v2 == $np_target[$k2]) {                    $hit = true;                } else {                    $hit = false;                    break;                }            }            if ($hit) return $np_src;        }        return false;    }    /**     * This converts an UTF-8 encoded string to its UCS-4 representation     * By talking about UCS-4 "strings" we mean arrays of 32bit integers representing     * each of the "chars". This is due to PHP not being able to handle strings with     * bit depth different from 8. This apllies to the reverse method _ucs4_to_utf8(), too.     * The following UTF-8 encodings are supported:     * bytes bits  representation     * 1        7  0xxxxxxx     * 2       11  110xxxxx 10xxxxxx     * 3       16  1110xxxx 10xxxxxx 10xxxxxx     * 4       21  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx     * 5       26  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * 6       31  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * Each x represents a bit that can be used to store character data.     * The five and six byte sequences are part of Annex D of ISO/IEC 10646-1:2000     * @access   private     */    function _utf8_to_ucs4($input)    {        $output = array();        $out_len = 0;        $inp_len = strlen($input);        $mode = 'next';        $test = 'none';        for ($k = 0; $k < $inp_len; ++$k) {            $v = ord($input{$k}); // Extract byte from input string            if ($v < 128) { // We found an ASCII char - put into stirng as is                $output[$out_len] = $v;                ++$out_len;                if ('add' == $mode) {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                continue;            }            if ('next' == $mode) { // Try to find the next start byte; determine the width of the Unicode char                $start_byte = $v;                $mode = 'add';                $test = 'range';                if ($v >> 5 == 6) { // &110xxxxx 10xxxxx                    $next_byte = 0; // Tells, how many times subsequent bitmasks must rotate 6bits to the left                    $v = ($v - 192) << 6;                } elseif ($v >> 4 == 14) { // &1110xxxx 10xxxxxx 10xxxxxx                    $next_byte = 1;                    $v = ($v - 224) << 12;                } elseif ($v >> 3 == 30) { // &11110xxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 2;                    $v = ($v - 240) << 18;                } elseif ($v >> 2 == 62) { // &111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 3;                    $v = ($v - 248) << 24;                } elseif ($v >> 1 == 126) { // &1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 4;                    $v = ($v - 252) << 30;                } else {                    $this->_error('This might be UTF-8, but I don\'t understand it at byte '.$k);                    return false;                }                if ('add' == $mode) {                    $output[$out_len] = (int) $v;                    ++$out_len;                    continue;                }            }            if ('add' == $mode) {                if (!$this->_allow_overlong && $test == 'range') {                    $test = 'none';                    if (($v < 0xA0 && $start_byte == 0xE0) || ($v < 0x90 && $start_byte == 0xF0) || ($v > 0x8F && $start_byte == 0xF4)) {                        $this->_error('Bogus UTF-8 character detected (out of legal range) at byte '.$k);                        return false;                    }                }                if ($v >> 6 == 2) { // Bit mask must be 10xxxxxx                    $v = ($v - 128) << ($next_byte * 6);                    $output[($out_len - 1)] += $v;                    --$next_byte;                } else {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                if ($next_byte < 0) {                    $mode = 'next';                }            }        } // for        return $output;    }    /**     * Convert UCS-4 string into UTF-8 string     * See _utf8_to_ucs4() for details     * @access   private     */    function _ucs4_to_utf8($input)    {        $output = '';        $k = 0;        foreach ($input as $v) {            ++$k;            // $v = ord($v);            if ($v < 128) { // 7bit are transferred literally                $output .= chr($v);            } elseif ($v < (1 << 11)) { // 2 bytes                $output .= chr(192 + ($v >> 6)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 16)) { // 3 bytes                $output .= chr(224 + ($v >> 12)) . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 21)) { // 4 bytes                $output .= chr(240 + ($v >> 18)) . chr(128 + (($v >> 12) & 63))                         . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 26)) { // 5 bytes                $output .= chr(248 + ($v >> 24)) . chr(128 + (($v >> 18) & 63))                         . chr(128 + (($v >> 12) & 63)) . chr(128 + (($v >> 6) & 63))                         . chr(128 + ($v & 63));            } elseif ($v < (1 << 31)) { // 6 bytes                $output .= chr(252 + ($v >> 30)) . chr(128 + (($v >> 24) & 63))                         . chr(128 + (($v >> 18) & 63)) . chr(128 + (($v >> 12) & 63))                         . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } else {                $this->_error('Conversion from UCS-4 to UTF-8 failed: malformed input at byte '.$k);                return false;            }        }        return $output;    }    /**      * Convert UCS-4 array into UCS-4 string      *      * @access   private      */    function _ucs4_to_ucs4_string($input)    {        $output = '';        // Take array values and split output to 4 bytes per value        // The bit mask is 255, which reads &11111111        foreach ($input as $v) {            $output .= chr(($v >> 24) & 255).chr(($v >> 16) & 255).chr(($v >> 8) & 255).chr($v & 255);        }        return $output;    }    /**      * Convert UCS-4 strin into UCS-4 garray      *      * @access   private      */    function _ucs4_string_to_ucs4($input)    {        $output = array();        $inp_len = strlen($input);        // Input length must be dividable by 4        if ($inp_len % 4) {            $this->_error('Input UCS4 string is broken');            return false;        }        // Empty input - return empty output        if (!$inp_len) return $output;        for ($i = 0, $out_len = -1; $i < $inp_len; ++$i) {            // Increment output position every 4 input bytes            if (!($i % 4)) {                $out_len++;                $output[$out_len] = 0;            }            $output[$out_len] += ord($input{$i}) << (8 * (3 - ($i % 4) ) );        }        return $output;    }}/*** Adapter class for aligning the API of idna_convert with that of Net_IDNA* @author  Matthias Sommerfeld <mso@phlylabs.de>*/class Net_IDNA_php4 extends idna_convert{    /**     * Sets a new option value. Available options and values:     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input ('utf8' for UTF-8,     *         'ucs4_string' and 'ucs4_array' respectively for UCS4); The output is always UTF-8]     * [overlong - Unicode does not allow unnecessarily long encodings of chars,     *             to allow this, set this parameter to true, else to false;     *             default is false.]     * [strict - true: strict mode, good for registration purposes - Causes errors     *           on failures; false: loose mode, ideal for "wildlife" applications     *           by silently ignoring errors and returning the original input instead     *     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)     * @param    string    Value to use (if parameter 1 is a string)     * @return   boolean   true on success, false otherwise     * @access   public     */    function setParams($option, $param = false)    {        return $this->IC->set_parameters($option, $param);    }}?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link list controller class. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectControllerLinks extends JControllerAdmin{	/**	 * Method to update a record.	 * @since   1.6	 */	public function activate()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids     = $this->input->get('cid', array(), 'array');		$newUrl  = $this->input->getString('new_url');		$comment = $this->input->getString('comment');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_REDIRECT_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			JArrayHelper::toInteger($ids);			// Remove the items.			if (!$model->activate($ids, $newUrl, $comment))			{				JError::raiseWarning(500, $model->getError());			}			else {				$this->setMessage(JText::plural('COM_REDIRECT_N_LINKS_UPDATED', count($ids)));			}		}		$this->setRedirect('index.php?option=com_redirect&view=links');	}	/**	 * Proxy for getModel.	 * @since   1.6	 */	public function getModel($name = 'Link', $prefix = 'RedirectModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL azure database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorAzure extends JDatabaseIteratorSqlsrv{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds master display controller. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/newsfeeds.php';		$view   = $this->input->get('view', 'newsfeeds');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'newsfeed' && $layout == 'edit' && !$this->checkEditId('com_newsfeeds.edit.newsfeed', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Package Manifest File * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerManifestPackage extends JInstallerManifest{	/**	 * Unique name of the package	 *	 * @var    string	 * @since  3.1	 */	public $packagename = '';	/**	 * Website for the package	 *	 * @var    string	 * @since  3.1	 */	public $url = '';	/**	 * Scriptfile for the package	 *	 * @var    string	 * @since  3.1	 */	public $scriptfile = '';	/**	 * Apply manifest data from a SimpleXMLElement to the object.	 *	 * @param   SimpleXMLElement  $xml  Data to load	 *	 * @return  void	 *	 * @since   3.1	 */	protected function loadManifestFromData(SimpleXMLElement $xml)	{		$this->name        = (string) $xml->name;		$this->packagename = (string) $xml->packagename;		$this->update      = (string) $xml->update;		$this->authorurl   = (string) $xml->authorUrl;		$this->author      = (string) $xml->author;		$this->authoremail = (string) $xml->authorEmail;		$this->description = (string) $xml->description;		$this->packager    = (string) $xml->packager;		$this->packagerurl = (string) $xml->packagerurl;		$this->scriptfile  = (string) $xml->scriptfile;		$this->version     = (string) $xml->version;		if (isset($xml->files->file) && count($xml->files->file))		{			foreach ($xml->files->file as $file)			{				// NOTE: JInstallerExtension doesn't expect a string.				// DO NOT CAST $file				$this->filelist[] = new JInstallerExtension($file);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_CACHE_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('cache') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		<?php if (isset($this->data['cache_handler']) && $this->data['cache_handler'] == 'memcache' || $this->data['session_handler'] == 'memcache') : ?>					<?php			foreach ($this->form->getFieldset('memcache') as $mfield):			?>					<li><?php echo $mfield->label; ?>					<?php echo $mfield->input; ?></li>			<?php			endforeach;			?>		<?php endif; ?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * ZIP format adapter for the JArchive class * * The ZIP compression code is partially based on code from: * Eric Mueller <eric@themepark.com> * http://www.zend.com/codex.php?id=535&single=1 * * Deins125 <webmaster@atlant.ru> * http://www.zend.com/codex.php?id=470&single=1 * * The ZIP compression date code is partially based on code from * Peter Listiak <mlady@users.sourceforge.net> * * This class is inspired from and draws heavily in code and concept from the Compress package of * The Horde Project <http://www.horde.org> * * @contributor  Chuck Hagenbuch <chuck@horde.org> * @contributor  Michael Slusarz <slusarz@horde.org> * @contributor  Michael Cochrane <mike@graftonhall.co.nz> * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveZip implements JArchiveExtractable{	/**	 * ZIP compression methods.	 *	 * @var    array	 * @since  11.1	 */	private $_methods = array(0x0 => 'None', 0x1 => 'Shrunk', 0x2 => 'Super Fast', 0x3 => 'Fast', 0x4 => 'Normal', 0x5 => 'Maximum', 0x6 => 'Imploded',		0x8 => 'Deflated');	/**	 * Beginning of central directory record.	 *	 * @var    string	 * @since  11.1	 */	private $_ctrlDirHeader = "\x50\x4b\x01\x02";	/**	 * End of central directory record.	 *	 * @var    string	 * @since  11.1	 */	private $_ctrlDirEnd = "\x50\x4b\x05\x06\x00\x00\x00\x00";	/**	 * Beginning of file contents.	 *	 * @var    string	 * @since  11.1	 */	private $_fileHeader = "\x50\x4b\x03\x04";	/**	 * ZIP file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * ZIP file metadata array	 *	 * @var    array	 * @since  11.1	 */	private $_metadata = null;	/**	 * Create a ZIP compressed file from an array of file data.	 *	 * @param   string  $archive  Path to save archive.	 * @param   array   $files    Array of files to add to archive.	 * @param   array   $options  Compression options (unused).	 *	 * @return  boolean  True if successful.	 *	 * @since   11.1	 *	 * @todo    Finish Implementation	 */	public function create($archive, $files, array $options = array())	{		$contents = array();		$ctrldir = array();		foreach ($files as $file)		{			$this->_addToZIPFile($file, $contents, $ctrldir);		}		return $this->_createZIPFile($contents, $ctrldir, $archive);	}	/**	 * Extract a ZIP compressed file to a given path	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive into	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 * @throws RuntimeException	 */	public function extract($archive, $destination, array $options = array())	{		if (!is_file($archive))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Archive does not exist');			}			else			{				throw new RuntimeException('Archive does not exist');			}		}		if ($this->hasNativeSupport())		{			return $this->extractNative($archive, $destination, $options);		}		else		{			return $this->extractCustom($archive, $destination, $options);		}	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return (self::hasNativeSupport() || extension_loaded('zlib'));	}	/**	 * Method to determine if the server has native zip support for faster handling	 *	 * @return  boolean  True if php has native ZIP support	 *	 * @since   11.1	 */	public static function hasNativeSupport()	{		return (function_exists('zip_open') && function_exists('zip_read'));	}	/**	 * Checks to see if the data is a valid ZIP file.	 *	 * @param   string  &$data  ZIP archive data buffer.	 *	 * @return  boolean  True if valid, false if invalid.	 *	 * @since   11.1	 */	public function checkZipData(&$data)	{		if (strpos($data, $this->_fileHeader) === false)		{			return false;		}		else		{			return true;		}	}	/**	 * Extract a ZIP compressed file to a given path using a php based algorithm that only requires zlib support	 *	 * @param   string  $archive      Path to ZIP archive to extract.	 * @param   string  $destination  Path to extract archive into.	 * @param   array   $options      Extraction options [unused].	 *	 * @return  mixed   True if successful	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function extractCustom($archive, $destination, array $options)	{		$this->_data = null;		$this->_metadata = null;		if (!extension_loaded('zlib'))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Zlib not supported');			}			else			{				throw new RuntimeException('Zlib not supported');			}		}		$this->_data = file_get_contents($archive);		if (!$this->_data = JFile::read($archive))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to read archive (zip)');			}			else			{				throw new RuntimeException('Unable to read archive (zip)');			}		}		if (!$this->_readZipInfo($this->_data))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Get ZIP Information failed');			}			else			{				throw new RuntimeException('Get ZIP Information failed');			}		}		for ($i = 0, $n = count($this->_metadata); $i < $n; $i++)		{			$lastPathCharacter = substr($this->_metadata[$i]['name'], -1, 1);			if ($lastPathCharacter !== '/' && $lastPathCharacter !== '\\')			{				$buffer = $this->_getFileData($i);				$path = JPath::clean($destination . '/' . $this->_metadata[$i]['name']);				// Make sure the destination folder exists				if (!JFolder::create(dirname($path)))				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to create destination');					}					else					{						throw new RuntimeException('Unable to create destination');					}				}				if (JFile::write($path, $buffer) === false)				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to write entry');					}					else					{						throw new RuntimeException('Unable to write entry');					}				}			}		}		return true;	}	/**	 * Extract a ZIP compressed file to a given path using native php api calls for speed	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive into	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function extractNative($archive, $destination, array $options)	{		$zip = zip_open($archive);		if (is_resource($zip))		{			// Make sure the destination folder exists			if (!JFolder::create($destination))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to create destination');				}				else				{					throw new RuntimeException('Unable to create destination');				}			}			// Read files in the archive			while ($file = @zip_read($zip))			{				if (zip_entry_open($zip, $file, "r"))				{					if (substr(zip_entry_name($file), strlen(zip_entry_name($file)) - 1) != "/")					{						$buffer = zip_entry_read($file, zip_entry_filesize($file));						if (JFile::write($destination . '/' . zip_entry_name($file), $buffer) === false)						{							if (class_exists('JError'))							{								return JError::raiseWarning(100, 'Unable to write entry');							}							else							{								throw new RuntimeException('Unable to write entry');							}						}						zip_entry_close($file);					}				}				else				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to read entry');					}					else					{						throw new RuntimeException('Unable to read entry');					}				}			}			@zip_close($zip);		}		else		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to open archive');			}			else			{				throw new RuntimeException('Unable to open archive');			}		}		return true;	}	/**	 * Get the list of files/data from a ZIP archive buffer.	 *	 * <pre>	 * KEY: Position in zipfile	 * VALUES: 'attr'  --  File attributes	 * 'crc'   --  CRC checksum	 * 'csize' --  Compressed file size	 * 'date'  --  File modification time	 * 'name'  --  Filename	 * 'method'--  Compression method	 * 'size'  --  Original file size	 * 'type'  --  File type	 * </pre>	 *	 * @param   string  &$data  The ZIP archive buffer.	 *	 * @return  boolean True on success	 *	 * @since   11.1	 * @throws  RuntimeException	 */	private function _readZipInfo(&$data)	{		$entries = array();		// Find the last central directory header entry		$fhLast = strpos($data, $this->_ctrlDirEnd);		do		{			$last = $fhLast;		}		while (($fhLast = strpos($data, $this->_ctrlDirEnd, $fhLast + 1)) !== false);		// Find the central directory offset		$offset = 0;		if ($last)		{			$endOfCentralDirectory = unpack(				'vNumberOfDisk/vNoOfDiskWithStartOfCentralDirectory/vNoOfCentralDirectoryEntriesOnDisk/' .				'vTotalCentralDirectoryEntries/VSizeOfCentralDirectory/VCentralDirectoryOffset/vCommentLength',				substr($data, $last + 4)			);			$offset = $endOfCentralDirectory['CentralDirectoryOffset'];		}		// Get details from central directory structure.		$fhStart = strpos($data, $this->_ctrlDirHeader, $offset);		$dataLength = strlen($data);		do		{			if ($dataLength < $fhStart + 31)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Invalid Zip Data');				}				else				{					throw new RuntimeException('Invalid Zip Data');				}			}			$info = unpack('vMethod/VTime/VCRC32/VCompressed/VUncompressed/vLength', substr($data, $fhStart + 10, 20));			$name = substr($data, $fhStart + 46, $info['Length']);			$entries[$name] = array(				'attr' => null,				'crc' => sprintf("%08s", dechex($info['CRC32'])),				'csize' => $info['Compressed'],				'date' => null,				'_dataStart' => null,				'name' => $name,				'method' => $this->_methods[$info['Method']],				'_method' => $info['Method'],				'size' => $info['Uncompressed'],				'type' => null			);			$entries[$name]['date'] = mktime(				(($info['Time'] >> 11) & 0x1f),				(($info['Time'] >> 5) & 0x3f),				(($info['Time'] << 1) & 0x3e),				(($info['Time'] >> 21) & 0x07),				(($info['Time'] >> 16) & 0x1f),				((($info['Time'] >> 25) & 0x7f) + 1980)			);			if ($dataLength < $fhStart + 43)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Invalid ZIP data');				}				else				{					throw new RuntimeException('Invalid ZIP data');				}			}			$info = unpack('vInternal/VExternal/VOffset', substr($data, $fhStart + 36, 10));			$entries[$name]['type'] = ($info['Internal'] & 0x01) ? 'text' : 'binary';			$entries[$name]['attr'] = (($info['External'] & 0x10) ? 'D' : '-') . (($info['External'] & 0x20) ? 'A' : '-')				. (($info['External'] & 0x03) ? 'S' : '-') . (($info['External'] & 0x02) ? 'H' : '-') . (($info['External'] & 0x01) ? 'R' : '-');			$entries[$name]['offset'] = $info['Offset'];			// Get details from local file header since we have the offset			$lfhStart = strpos($data, $this->_fileHeader, $entries[$name]['offset']);			if ($dataLength < $lfhStart + 34)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Invalid Zip Data');				}				else				{					throw new RuntimeException('Invalid Zip Data');				}			}			$info = unpack('vMethod/VTime/VCRC32/VCompressed/VUncompressed/vLength/vExtraLength', substr($data, $lfhStart + 8, 25));			$name = substr($data, $lfhStart + 30, $info['Length']);			$entries[$name]['_dataStart'] = $lfhStart + 30 + $info['Length'] + $info['ExtraLength'];			// Bump the max execution time because not using the built in php zip libs makes this process slow.			@set_time_limit(ini_get('max_execution_time'));		}		while ((($fhStart = strpos($data, $this->_ctrlDirHeader, $fhStart + 46)) !== false));		$this->_metadata = array_values($entries);		return true;	}	/**	 * Returns the file data for a file by offsest in the ZIP archive	 *	 * @param   integer  $key  The position of the file in the archive.	 *	 * @return  string  Uncompressed file data buffer.	 *	 * @since   11.1	 */	private function _getFileData($key)	{		if ($this->_metadata[$key]['_method'] == 0x8)		{			return gzinflate(substr($this->_data, $this->_metadata[$key]['_dataStart'], $this->_metadata[$key]['csize']));		}		elseif ($this->_metadata[$key]['_method'] == 0x0)		{			/* Files that aren't compressed. */			return substr($this->_data, $this->_metadata[$key]['_dataStart'], $this->_metadata[$key]['csize']);		}		elseif ($this->_metadata[$key]['_method'] == 0x12)		{			// If bz2 extension is loaded use it			if (extension_loaded('bz2'))			{				return bzdecompress(substr($this->_data, $this->_metadata[$key]['_dataStart'], $this->_metadata[$key]['csize']));			}		}		return '';	}	/**	 * Converts a UNIX timestamp to a 4-byte DOS date and time format	 * (date in high 2-bytes, time in low 2-bytes allowing magnitude	 * comparison).	 *	 * @param   int  $unixtime  The current UNIX timestamp.	 *	 * @return  int  The current date in a 4-byte DOS format.	 *	 * @since   11.1	 */	protected function _unix2DOSTime($unixtime = null)	{		$timearray = (is_null($unixtime)) ? getdate() : getdate($unixtime);		if ($timearray['year'] < 1980)		{			$timearray['year'] = 1980;			$timearray['mon'] = 1;			$timearray['mday'] = 1;			$timearray['hours'] = 0;			$timearray['minutes'] = 0;			$timearray['seconds'] = 0;		}		return (($timearray['year'] - 1980) << 25) | ($timearray['mon'] << 21) | ($timearray['mday'] << 16) | ($timearray['hours'] << 11) | ($timearray['minutes'] << 5) | ($timearray['seconds'] >> 1);	}	/**	 * Adds a "file" to the ZIP archive.	 *	 * @param   array  &$file      File data array to add	 * @param   array  &$contents  An array of existing zipped files.	 * @param   array  &$ctrldir   An array of central directory information.	 *	 * @return  void	 *	 * @since   11.1	 *	 * @todo    Review and finish implementation	 */	private function _addToZIPFile(array &$file, array &$contents, array &$ctrldir)	{		$data = &$file['data'];		$name = str_replace('\\', '/', $file['name']);		/* See if time/date information has been provided. */		$ftime = null;		if (isset($file['time']))		{			$ftime = $file['time'];		}		// Get the hex time.		$dtime = dechex($this->_unix2DosTime($ftime));		$hexdtime = chr(hexdec($dtime[6] . $dtime[7])) . chr(hexdec($dtime[4] . $dtime[5])) . chr(hexdec($dtime[2] . $dtime[3]))			. chr(hexdec($dtime[0] . $dtime[1]));		/* Begin creating the ZIP data. */		$fr = $this->_fileHeader;		/* Version needed to extract. */		$fr .= "\x14\x00";		/* General purpose bit flag. */		$fr .= "\x00\x00";		/* Compression method. */		$fr .= "\x08\x00";		/* Last modification time/date. */		$fr .= $hexdtime;		/* "Local file header" segment. */		$unc_len = strlen($data);		$crc = crc32($data);		$zdata = gzcompress($data);		$zdata = substr(substr($zdata, 0, strlen($zdata) - 4), 2);		$c_len = strlen($zdata);		/* CRC 32 information. */		$fr .= pack('V', $crc);		/* Compressed filesize. */		$fr .= pack('V', $c_len);		/* Uncompressed filesize. */		$fr .= pack('V', $unc_len);		/* Length of filename. */		$fr .= pack('v', strlen($name));		/* Extra field length. */		$fr .= pack('v', 0);		/* File name. */		$fr .= $name;		/* "File data" segment. */		$fr .= $zdata;		/* Add this entry to array. */		$old_offset = strlen(implode('', $contents));		$contents[] = &$fr;		/* Add to central directory record. */		$cdrec = $this->_ctrlDirHeader;		/* Version made by. */		$cdrec .= "\x00\x00";		/* Version needed to extract */		$cdrec .= "\x14\x00";		/* General purpose bit flag */		$cdrec .= "\x00\x00";		/* Compression method */		$cdrec .= "\x08\x00";		/* Last mod time/date. */		$cdrec .= $hexdtime;		/* CRC 32 information. */		$cdrec .= pack('V', $crc);		/* Compressed filesize. */		$cdrec .= pack('V', $c_len);		/* Uncompressed filesize. */		$cdrec .= pack('V', $unc_len);		/* Length of filename. */		$cdrec .= pack('v', strlen($name));		/* Extra field length. */		$cdrec .= pack('v', 0);		/* File comment length. */		$cdrec .= pack('v', 0);		/* Disk number start. */		$cdrec .= pack('v', 0);		/* Internal file attributes. */		$cdrec .= pack('v', 0);		/* External file attributes -'archive' bit set. */		$cdrec .= pack('V', 32);		/* Relative offset of local header. */		$cdrec .= pack('V', $old_offset);		/* File name. */		$cdrec .= $name;		/* Optional extra field, file comment goes here. */		/* Save to central directory array. */		$ctrldir[] = &$cdrec;	}	/**	 * Creates the ZIP file.	 *	 * Official ZIP file format: http://www.pkware.com/appnote.txt	 *	 * @param   array   &$contents  An array of existing zipped files.	 * @param   array   &$ctrlDir   An array of central directory information.	 * @param   string  $path       The path to store the archive.	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 *	 * @todo	Review and finish implementation	 */	private function _createZIPFile(array &$contents, array &$ctrlDir, $path)	{		$data = implode('', $contents);		$dir = implode('', $ctrlDir);		$buffer = $data . $dir . $this->_ctrlDirEnd . /* Total # of entries "on this disk". */		pack('v', count($ctrlDir)) . /* Total # of entries overall. */		pack('v', count($ctrlDir)) . /* Size of central directory. */		pack('V', strlen($dir)) . /* Offset to start of central dir. */		pack('V', strlen($data)) . /* ZIP file comment length. */		"\x00\x00";		if (JFile::write($path, $buffer) === false)		{			return false;		}		else		{			return true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="weblinks<?php echo $moduleclass_sfx; ?>"><?php foreach ($list as $item) :	?><li>	<?php	$link = $item->link;	switch ($params->get('target', 3))	{		case 1:			// open in a new window			echo '<a href="'. $link .'" target="_blank" rel="'.$params->get('follow', 'nofollow').'">'.			htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;		case 2:			// open in a popup window			echo "<a href=\"#\" onclick=\"window.open('". $link ."', '', 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=550'); return false\">".				htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;		default:			// open in parent window			echo '<a href="'. $link .'" rel="'.$params->get('follow', 'nofollow').'">'.				htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;	}	?>	<?php if ($params->get('description', 0)) : ?>		<?php echo nl2br($item->description); ?>	<?php endif; ?>	<?php if ($params->get('hits', 0)) : ?>		<?php echo '(' . $item->hits . ' ' . JText::_('MOD_WEBLINKS_HITS') . ')'; ?>	<?php endif; ?></li><?php endforeach; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->showMessage) : ?><?php echo $this->loadTemplate('message'); ?><?php endif; ?><?php echo $this->loadTemplate('form'); ?>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Component renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererComponent extends JDocumentRenderer{	/**	 * Renders a component script and returns the results as a string	 *	 * @param   string  $component  The name of the component to render	 * @param   array   $params     Associative array of values	 * @param   string  $content    Content script	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($component = null, $params = array(), $content = null)	{		return $content;	}}
<?php/** * Joomla_Sniffs_Functions_FunctionDeclarationSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FunctionDeclarationSniff.php 308840 2011-03-02 05:32:18Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_Functions_FunctionDeclarationSniff. * * Ensure single and multi-line function declarations are defined correctly. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Functions_FunctionDeclarationSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_FUNCTION);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Check if this is a single line or multi-line declaration.        $openBracket  = $tokens[$stackPtr]['parenthesis_opener'];        $closeBracket = $tokens[$stackPtr]['parenthesis_closer'];        if ($tokens[$openBracket]['line'] === $tokens[$closeBracket]['line']) {            $this->processSingleLineDeclaration($phpcsFile, $stackPtr, $tokens);        } else {            $this->processMultiLineDeclaration($phpcsFile, $stackPtr, $tokens);        }    }//end process()    /**     * Processes single-line declarations.     *     * Just uses the Generic BSD-Allman brace sniff.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     * @param array                $tokens    The stack of tokens that make up     *                                        the file.     *     * @return void     */    public function processSingleLineDeclaration(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $tokens)    {        if (class_exists('Generic_Sniffs_Functions_OpeningFunctionBraceBsdAllmanSniff', true) === false) {            throw new PHP_CodeSniffer_Exception('Class Generic_Sniffs_Functions_OpeningFunctionBraceBsdAllmanSniff not found');        }        $sniff = new Generic_Sniffs_Functions_OpeningFunctionBraceBsdAllmanSniff();        $sniff->process($phpcsFile, $stackPtr);    }//end processSingleLineDeclaration()    /**     * Processes mutli-line declarations.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     * @param array                $tokens    The stack of tokens that make up     *                                        the file.     *     * @return void     */    public function processMultiLineDeclaration(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $tokens)    {        // We need to work out how far indented the function        // declaration itself is, so we can work out how far to        // indent parameters.        $functionIndent = 0;        for ($i = ($stackPtr - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$stackPtr]['line']) {                $i++;                break;            }        }        if ($tokens[$i]['code'] === T_WHITESPACE) {            $functionIndent = strlen($tokens[$i]['content']);        }        // Each line between the parenthesis should be indented 4 spaces.        $openBracket  = $tokens[$stackPtr]['parenthesis_opener'];        $closeBracket = $tokens[$stackPtr]['parenthesis_closer'];        $lastLine     = $tokens[$openBracket]['line'];        for ($i = ($openBracket + 1); $i < $closeBracket; $i++) {            if ($tokens[$i]['line'] !== $lastLine)            {                //-- elkuku: disabled//                 if ($tokens[$i]['line'] === $tokens[$closeBracket]['line']) {//                     // Closing brace needs to be indented to the same level//                     // as the function.//                     $expectedIndent = $functionIndent;//                 } else {//                     $expectedIndent = $functionIndent + 4;//                 }                $expectedIndent = $functionIndent + 1;                // We changed lines, so this should be a whitespace indent token.                if ($tokens[$i]['code'] !== T_WHITESPACE) {                    $foundIndent = 0;                } else {                    $foundIndent = strlen($tokens[$i]['content']);                }                if ($expectedIndent !== $foundIndent) {                    $error = 'Multi-line function declaration not indented correctly; expected %s spaces but found %s';                    $data  = array(                              $expectedIndent,                              $foundIndent,                             );                    $phpcsFile->addError($error, $i, 'Indent', $data);                }                $lastLine = $tokens[$i]['line'];            }//end if            if ($tokens[$i]['code'] === T_ARRAY) {                // Skip arrays as they have their own indentation rules.                $i        = $tokens[$i]['parenthesis_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }        }//end for        if (isset($tokens[$stackPtr]['scope_opener']) === true) {            // The openning brace needs to be one space away            // from the closing parenthesis.            $next = $tokens[($closeBracket + 1)];            if ($next['code'] !== T_WHITESPACE) {                $length = 0;            } else if ($next['content'] === $phpcsFile->eolChar) {                $length = -1;            } else {                $length = strlen($next['content']);            }            if (false)//$length !== 1) {            {                $data = array($length);                $code = 'SpaceBeforeOpenBrace';            //-- elkuku: nonsens ?//                 $error = 'There must be a single space between the closing parenthesis and the opening brace of a multi-line function declaration; found ';//                 if ($length === -1) {//                     $error .= 'newline';//                     $code   = 'NewlineBeforeOpenBrace';//                 } else {//                     $error .= '%s spaces';//                 }                $phpcsFile->addError($error, ($closeBracket + 1), $code, $data);                return;            }            // And just in case they do something funny before the brace...            $next = $phpcsFile->findNext(                T_WHITESPACE,                ($closeBracket + 1),                null,                true            );            //-- elkuku: nonsens ?//             if ($next !== false && $tokens[$next]['code'] !== T_OPEN_CURLY_BRACKET) {//                 $error = 'There must be a single space between the closing parenthesis and the opening brace of a multi-line function declaration';//                 $phpcsFile->addError($error, $next, 'NoSpaceBeforeOpenBrace');//             }        }//end if        // The closing parenthesis must be on a new line, even        // when checking abstract function definitions.        $prev = $phpcsFile->findPrevious(            T_WHITESPACE,            ($closeBracket - 1),            null,            true        );        if ($tokens[$prev]['line'] != $tokens[$closeBracket]['line']) {            $error = 'The closing parenthesis of a multi-line function declaration must be on the same line';            $phpcsFile->addError($error, $closeBracket, 'CloseBracketLine');        }    }//end processMultiLineDeclaration()}//end class?>
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ucwords* Uppercase the first character of each word in a string* Note: requires utf8_substr_replace and utf8_strtoupper* @param string* @return string with first char of each word uppercase* @see http://www.php.net/ucwords* @package utf8* @subpackage strings*/function utf8_ucwords($str) {    // Note: [\x0c\x09\x0b\x0a\x0d\x20] matches;    // form feeds, horizontal tabs, vertical tabs, linefeeds and carriage returns    // This corresponds to the definition of a "word" defined at http://www.php.net/ucwords    $pattern = '/(^|([\x0c\x09\x0b\x0a\x0d\x20]+))([^\x0c\x09\x0b\x0a\x0d\x20]{1})[^\x0c\x09\x0b\x0a\x0d\x20]*/u';    return preg_replace_callback($pattern, 'utf8_ucwords_callback',$str);}//---------------------------------------------------------------/*** Callback function for preg_replace_callback call in utf8_ucwords* You don't need to call this yourself* @param array of matches corresponding to a single word* @return string with first char of the word in uppercase* @see utf8_ucwords* @see utf8_strtoupper* @package utf8* @subpackage strings*/function utf8_ucwords_callback($matches) {    $leadingws = $matches[2];    $ucfirst = utf8_strtoupper($matches[3]);    $ucword = utf8_substr_replace(ltrim($matches[0]),$ucfirst,0,1);    return $leadingws . $ucword;}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to transform an image to grayscale. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterGrayscale extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the grayscale filter.		imagefilter($this->handle, IMG_FILTER_GRAYSCALE);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.stream');/** * Bzip2 format adapter for the JArchive class * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveBzip2 implements JArchiveExtractable{	/**	 * Bzip2 file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * Extract a Bzip2 compressed file to a given path	 *	 * @param   string  $archive      Path to Bzip2 archive to extract	 * @param   string  $destination  Path to extract archive to	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function extract($archive, $destination, array $options = array ())	{		$this->_data = null;		if (!extension_loaded('bz2'))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'The bz2 extension is not available.');			}			else			{				throw new RuntimeException('The bz2 extension is not available.');			}		}		if (!isset($options['use_streams']) || $options['use_streams'] == false)		{			// Old style: read the whole file and then parse it			$this->_data = file_get_contents($archive);			if (!$this->_data)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive');				}				else				{					throw new RuntimeException('Unable to read archive');				}			}			$buffer = bzdecompress($this->_data);			unset($this->_data);			if (empty($buffer))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to decompress data');				}				else				{					throw new RuntimeException('Unable to decompress data');				}			}			if (JFile::write($destination, $buffer) === false)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive');				}				else				{					throw new RuntimeException('Unable to write archive');				}			}		}		else		{			// New style! streams!			$input = JFactory::getStream();			// Use bzip			$input->set('processingmethod', 'bz');			if (!$input->open($archive))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive (bz2)');				}				else				{					throw new RuntimeException('Unable to read archive (bz2)');				}			}			$output = JFactory::getStream();			if (!$output->open($destination, 'w'))			{				$input->close();				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive (bz2)');				}				else				{					throw new RuntimeException('Unable to write archive (bz2)');				}			}			do			{				$this->_data = $input->read($input->get('chunksize', 8196));				if ($this->_data)				{					if (!$output->write($this->_data))					{						$input->close();						if (class_exists('JError'))						{							return JError::raiseWarning(100, 'Unable to write archive (bz2)');						}						else						{							throw new RuntimeException('Unable to write archive (bz2)');						}					}				}			}			while ($this->_data);			$output->close();			$input->close();		}		return true;	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return extension_loaded('bz2');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;?><h3>	<?php echo JText::_('COM_FINDER_STATISTICS_TITLE') ?></h3><div class="row-fluid">	<div class="span6">		<p class="tab-description"><?php echo JText::sprintf('COM_FINDER_STATISTICS_STATS_DESCRIPTION', number_format($this->data->term_count), number_format($this->data->link_count), number_format($this->data->taxonomy_node_count), number_format($this->data->taxonomy_branch_count)); ?></p>		<table class="table table-striped table-condensed">			<thead>				<tr>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_HEADING');?>					</th>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_COUNT');?>					</th>				</tr>			</thead>			<tbody>				<?php foreach ($this->data->type_list as $type) :?>				<tr>					<td>						<?php echo $type->type_title;?>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($type->link_count);?></span>					</td>				</tr>				<?php endforeach; ?>				<tr>					<td>						<strong><?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_TOTAL'); ?></strong>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($this->data->link_count); ?></span>					</td>				</tr>			</tbody>		</table>	</div></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE.'/components/com_content/helpers/route.php';JModelLegacy::addIncludePath(JPATH_SITE.'/components/com_content/models', 'ContentModel');/** * Helper for mod_articles_popular * * @package     Joomla.Site * @subpackage  mod_articles_popular */abstract class ModArticlesPopularHelper{	public static function getList(&$params)	{		// Get an instance of the generic articles model		$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));		// Set application parameters in model		$app = JFactory::getApplication();		$appParams = $app->getParams();		$model->setState('params', $appParams);		// Set the filters based on the module params		$model->setState('list.start', 0);		$model->setState('list.limit', (int) $params->get('count', 5));		$model->setState('filter.published', 1);		$model->setState('filter.featured', $params->get('show_front', 1) == 1 ? 'show' : 'hide');		// Access filter		$access = !JComponentHelper::getParams('com_content')->get('show_noauth');		$authorised = JAccess::getAuthorisedViewLevels(JFactory::getUser()->get('id'));		$model->setState('filter.access', $access);		// Category filter		$model->setState('filter.category_id', $params->get('catid', array()));		// Filter by language		$model->setState('filter.language', $app->getLanguageFilter());		// Ordering		$model->setState('list.ordering', 'a.hits');		$model->setState('list.direction', 'DESC');		$items = $model->getItems();		foreach ($items as &$item)		{			$item->slug = $item->id.':'.$item->alias;			$item->catslug = $item->catid.':'.$item->category_alias;			if ($access || in_array($item->access, $authorised))			{				// We know that user has the privilege to view the article				$item->link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug));			} else {				$item->link = JRoute::_('index.php?option=com_users&view=login');			}		}		return $items;	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Summary View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewSummaryHtml extends InstallationViewDefault{	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * The PHP options checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpoptions;	/**	 * The PHP settings checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpsettings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options     = $this->model->getOptions();		$this->phpoptions  = $this->model->getPhpOptions();		$this->phpsettings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FunctionCallSignatureSniff.php 284575 2009-07-22 02:58:19Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Functions_FunctionCallSignatureSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_STRING);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Find the next non-empty token.        $openBracket = $phpcsFile->findNext(PHP_CodeSniffer_Tokens::$emptyTokens, ($stackPtr + 1), null, true);        if ($tokens[$openBracket]['code'] !== T_OPEN_PARENTHESIS) {            // Not a function call.            return;        }        if (isset($tokens[$openBracket]['parenthesis_closer']) === false) {            // Not a function call.            return;        }        // Find the previous non-empty token.        $search   = PHP_CodeSniffer_Tokens::$emptyTokens;        $search[] = T_BITWISE_AND;        $previous = $phpcsFile->findPrevious($search, ($stackPtr - 1), null, true);        if ($tokens[$previous]['code'] === T_FUNCTION) {            // It's a function definition, not a function call.            return;        }        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        if (($stackPtr + 1) !== $openBracket) {            // Checking this: $value = my_function[*](...).            $error = 'Space before opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceBeforeOpenBracket');        }        $next = $phpcsFile->findNext(T_WHITESPACE, ($closeBracket + 1), null, true);        if ($tokens[$next]['code'] === T_SEMICOLON) {            if (in_array($tokens[($closeBracket + 1)]['code'], PHP_CodeSniffer_Tokens::$emptyTokens) === true) {                $error = 'Space after closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closeBracket, 'SpaceAfterCloseBracket');            }        }        // Check if this is a single line or multi-line function call.        if ($tokens[$openBracket]['line'] === $tokens[$closeBracket]['line']) {            $this->processSingleLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        } else {            $this->processMultiLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        }    }//end process()    /**     * Processes single-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processSingleLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        if ($tokens[($openBracket + 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function([*]...).            $error = 'Space after opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceAfterOpenBracket');        }        $closer = $tokens[$openBracket]['parenthesis_closer'];        if ($tokens[($closer - 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function(...[*]).            $between = $phpcsFile->findNext(T_WHITESPACE, ($openBracket + 1), null, true);            // Only throw an error if there is some content between the parenthesis.            // i.e., Checking for this: $value = my_function().            // If there is no content, then we would have thrown an error in the            // previous IF statement because it would look like this:            // $value = my_function( ).            if ($between !== $closer) {                $error = 'Space before closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closer, 'SpaceBeforeCloseBracket');            }        }    }//end processSingleLineCall()    /**     * Processes multi-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processMultiLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        // We need to work out how far indented the function        // call itself is, so we can work out how far to        // indent the arguments.        $functionIndent = 0;        for ($i = ($stackPtr - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$stackPtr]['line']) {                $i++;                break;            }        }        if ($tokens[$i]['code'] === T_WHITESPACE) {            $functionIndent = strlen($tokens[$i]['content']);        }        // Each line between the parenthesis should be indented 4 spaces.        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        $lastLine     = $tokens[$openBracket]['line'];        for ($i = ($openBracket + 1); $i < $closeBracket; $i++) {            // Skip nested function calls.            if ($tokens[$i]['code'] === T_OPEN_PARENTHESIS) {                $i        = $tokens[$i]['parenthesis_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }            if ($tokens[$i]['line'] !== $lastLine) {                $lastLine = $tokens[$i]['line'];                // We changed lines, so this should be a whitespace indent token.                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$heredocTokens) === true) {                    // Ignore heredoc indentation.                    continue;                }                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$stringTokens) === true) {                    if ($tokens[$i]['code'] === $tokens[($i - 1)]['code']) {                        // Ignore multi-line string indentation.                        continue;                    }                }                if ($tokens[$i]['line'] === $tokens[$closeBracket]['line']) {                    // Closing brace needs to be indented to the same level                    // as the function call.                    $expectedIndent = $functionIndent;                } else {                    $expectedIndent = ($functionIndent + 4);                }                if ($tokens[$i]['code'] !== T_WHITESPACE) {                    $foundIndent = 0;                } else {                    $foundIndent = strlen($tokens[$i]['content']);                }                if ($expectedIndent !== $foundIndent) {// TODO AJE Allow for tab indents instead of spaces//                    $error = 'Multi-line function call not indented correctly; expected %s spaces but found %s';//                    $data  = array(//                              $expectedIndent,//                              $foundIndent,//                             );//                    $phpcsFile->addError($error, $i, 'Indent', $data);                }            }//end if            // Skip the rest of a closure.            if ($tokens[$i]['code'] === T_CLOSURE) {                $i        = $tokens[$i]['scope_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }        }//end for        if ($tokens[($openBracket + 1)]['content'] !== $phpcsFile->eolChar        && T_CONSTANT_ENCAPSED_STRING != $tokens[($openBracket + 1)]['code'])// allow a '"'        {            $error = 'Opening parenthesis of a multi-line function call must be the last content on the line';            $phpcsFile->addError($error, $stackPtr, 'ContentAfterOpenBracket');        }        $prev = $phpcsFile->findPrevious(T_WHITESPACE, ($closeBracket - 1), null, true);        if ($tokens[$prev]['line'] === $tokens[$closeBracket]['line']        && T_CONSTANT_ENCAPSED_STRING != $tokens[$prev]['code'])// allow a '"'        {            $error = 'Closing parenthesis of a multi-line function call must be on a line by itself';            $phpcsFile->addError($error, $closeBracket, 'CloseBracketLine');        }    }//end processMultiLineCall()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentTableFeatured extends JTable{	/**	 * @param   JDatabaseDriver  A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__content_frontpage', 'content_id', $db);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentRAW class, provides an easy interface to parse and display raw output * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRaw extends JDocument{	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'text/html';		// Set document type		$this->_type = 'raw';	}	/**	 * Render the document.	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   11.1	 */	public function render($cache = false, $params = array())	{		parent::render();		return $this->getBuffer();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Rest model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersModelLogin extends JModelForm{	/**	 * Method to get the login form.	 *	 * The base form is loaded from XML and then an event is fired	 * for users plugins to extend the form with extra fields.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.login', 'login', array('load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  array  The default data is an empty array.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered login form data.		$app  = JFactory::getApplication();		$data = $app->getUserState('users.login.form.data', array());		// check for return URL from the request first		if ($return = JRequest::getVar('return', '', 'method', 'base64'))		{			$data['return'] = base64_decode($return);			if (!JURI::isInternal($data['return']))			{				$data['return'] = '';			}		}		// Set the return URL if empty.		if (!isset($data['return']) || empty($data['return']))		{			$data['return'] = 'index.php?option=com_users&view=profile';		}		$app->setUserState('users.login.form.data', $data);		$this->preprocessData('com_users.login', $data);		return $data;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$params	= JFactory::getApplication()->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Override JModelAdmin::preprocessForm to ensure the correct plugin group is loaded.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ucfirst* Make a string's first character uppercase* Note: requires utf8_strtoupper* @param string* @return string with first character as upper case (if applicable)* @see http://www.php.net/ucfirst* @see utf8_strtoupper* @package utf8* @subpackage strings*/function utf8_ucfirst($str){    switch ( utf8_strlen($str) ) {        case 0:            return '';        break;        case 1:            return utf8_strtoupper($str);        break;        default:            preg_match('/^(.{1})(.*)$/us', $str, $matches);            return utf8_strtoupper($matches[1]).$matches[2];        break;    }}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument Modules renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererModules extends JDocumentRenderer{	/**	 * Renders multiple modules script and returns the results as a string	 *	 * @param   string  $position  The position of the modules to render	 * @param   array   $params    Associative array of values	 * @param   string  $content   Module content	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($position, $params = array(), $content = null)	{		$renderer = $this->_doc->loadRenderer('module');		$buffer = '';		foreach (JModuleHelper::getModules($position) as $mod)		{			$buffer .= $renderer->render($mod, $params, $content);		}		return $buffer;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML utility class for the installation application * * @package  Joomla.Installation * @since    1.6 */class JHtmlInstallation{	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   1.6	 */	public static function stepbar()	{		// Determine if the configuration file path is writable.		$path = JPATH_CONFIGURATION . '/configuration.php';		$useftp = (file_exists($path)) ? !is_writable($path) : !is_writable(JPATH_CONFIGURATION . '/');		$tabs = array();		$tabs[] = 'site';		$tabs[] = 'database';		if ($useftp)		{			$tabs[] = 'ftp';		}		$tabs[] = 'summary';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   3.1	 */	public static function stepbarlanguages()	{		$tabs = array();		$tabs[] = 'languages';		$tabs[] = 'defaultlanguage';		$tabs[] = 'complete';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the navigation tab	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  string  Markup for the tab	 *	 * @since   3.1	 */	private static function getTab($id, $tabs)	{		$input = JFactory::getApplication()->input;		$num   = self::getTabNumber($id, $tabs);		$view  = self::getTabNumber($input->getWord('view'), $tabs);		$tab   = '<span class="badge">' . $num . '</span> ' . JText::_('INSTL_STEP_' . strtoupper($id) . '_LABEL');		if ($view + 1 == $num)		{			$tab = '<a href="#" onclick="Install.submitform();">' . $tab . '</a>';		}		elseif ($view < $num)		{			$tab = '<span>' . $tab . '</span>';		}		else		{			$tab = '<a href="#" onclick="return Install.goToPage(\'' . $id . '\')">' . $tab . '</a>';		}		return '<li class="step' . ($num == $view ? ' active' : '') . '" id="' . $id . '">' . $tab . '</li>';	}	/**	 * Method to determine the tab (step) number	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  integer  Tab number in navigation sequence	 *	 * @since   3.1	 */	private static function getTabNumber($id, $tabs)	{		$num = (int) array_search($id, $tabs);		$num++;		return $num;	}}
<?php/*** Locate a byte index given a UTF-8 character index* @version $Id$* @package utf8* @subpackage position*///--------------------------------------------------------------------/*** Given a string and a character index in the string, in* terms of the UTF-8 character position, returns the byte* index of that character. Can be useful when you want to* PHP's native string functions but we warned, locating* the byte can be expensive* Takes variable number of parameters - first must be* the search string then 1 to n UTF-8 character positions* to obtain byte indexes for - it is more efficient to search* the string for multiple characters at once, than make* repeated calls to this function** @author Chris Smith<chris@jalakai.co.uk>* @param string string to locate index in* @param int (n times)* @return mixed - int if only one input int, array if more* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage position*/function utf8_byte_position() {    $args = func_get_args();    $str =& array_shift($args);    if (!is_string($str)) return false;    $result = array();    // trivial byte index, character offset pair    $prev = array(0,0);    // use a short piece of str to estimate bytes per character    // $i (& $j) -> byte indexes into $str    $i = utf8_locate_next_chr($str, 300);    // $c -> character offset into $str    $c = strlen(utf8_decode(substr($str,0,$i)));    // deal with arguments from lowest to highest    sort($args);    foreach ($args as $offset) {        // sanity checks FIXME        // 0 is an easy check        if ($offset == 0) { $result[] = 0; continue; }        // ensure no endless looping        $safety_valve = 50;        do {            if ( ($c - $prev[1]) == 0 ) {                // Hack: gone past end of string                $error = 0;                $i = strlen($str);                break;            }            $j = $i + (int)(($offset-$c) * ($i - $prev[0]) / ($c - $prev[1]));            // correct to utf8 character boundary            $j = utf8_locate_next_chr($str, $j);            // save the index, offset for use next iteration            $prev = array($i,$c);            if ($j > $i) {                // determine new character offset                $c += strlen(utf8_decode(substr($str,$i,$j-$i)));            } else {                // ditto                $c -= strlen(utf8_decode(substr($str,$j,$i-$j)));            }            $error = abs($c-$offset);            // ready for next time around            $i = $j;        // from 7 it is faster to iterate over the string        } while ( ($error > 7) && --$safety_valve) ;        if ($error && $error <= 7) {            if ($c < $offset) {                // move up                while ($error--) { $i = utf8_locate_next_chr($str,++$i); }            } else {                // move down                while ($error--) { $i = utf8_locate_current_chr($str,--$i); }            }            // ready for next arg            $c = $offset;        }        $result[] = $i;    }    if ( count($result) == 1 ) {        return $result[0];    }    return $result;}//--------------------------------------------------------------------/*** Given a string and any byte index, returns the byte index* of the start of the current UTF-8 character, relative to supplied* position. If the current character begins at the same place as the* supplied byte index, that byte index will be returned. Otherwise* this function will step backwards, looking for the index where* curent UTF-8 character begins* @author Chris Smith<chris@jalakai.co.uk>* @param string* @param int byte index in the string* @return int byte index of start of next UTF-8 character* @package utf8* @subpackage position*/function utf8_locate_current_chr( &$str, $idx ) {    if ($idx <= 0) return 0;    $limit = strlen($str);    if ($idx >= $limit) return $limit;    // Binary value for any byte after the first in a multi-byte UTF-8 character    // will be like 10xxxxxx so & 0xC0 can be used to detect this kind    // of byte - assuming well formed UTF-8    while ($idx && ((ord($str[$idx]) & 0xC0) == 0x80)) $idx--;    return $idx;}//--------------------------------------------------------------------/*** Given a string and any byte index, returns the byte index* of the start of the next UTF-8 character, relative to supplied* position. If the next character begins at the same place as the* supplied byte index, that byte index will be returned.* @author Chris Smith<chris@jalakai.co.uk>* @param string* @param int byte index in the string* @return int byte index of start of next UTF-8 character* @package utf8* @subpackage position*/function utf8_locate_next_chr( &$str, $idx ) {    if ($idx <= 0) return 0;    $limit = strlen($str);    if ($idx >= $limit) return $limit;    // Binary value for any byte after the first in a multi-byte UTF-8 character    // will be like 10xxxxxx so & 0xC0 can be used to detect this kind    // of byte - assuming well formed UTF-8    while (($idx < $limit) && ((ord($str[$idx]) & 0xC0) == 0x80)) $idx++;    return $idx;}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset id="users-profile-core">	<legend>		<?php echo JText::_('COM_USERS_PROFILE_CORE_LEGEND'); ?>	</legend>	<dl class="dl-horizontal">		<dt>			<?php echo JText::_('COM_USERS_PROFILE_NAME_LABEL'); ?>		</dt>		<dd>			<?php echo $this->data->name; ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_USERNAME_LABEL'); ?>		</dt>		<dd>			<?php echo htmlspecialchars($this->data->username); ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_REGISTERED_DATE_LABEL'); ?>		</dt>		<dd>			<?php echo JHtml::_('date', $this->data->registerDate); ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_LAST_VISITED_DATE_LABEL'); ?>		</dt>		<?php if ($this->data->lastvisitDate != '0000-00-00 00:00:00'){?>			<dd>				<?php echo JHtml::_('date', $this->data->lastvisitDate); ?>			</dd>		<?php }		else		{?>			<dd>				<?php echo JText::_('COM_USERS_PROFILE_NEVER_VISITED'); ?>			</dd>		<?php } ?>	</dl></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * none (output raw module content) */function modChrome_none($module, &$params, &$attribs){	echo $module->content;}/* * html5 (chosen html5 tag and font headder tags) */function modChrome_html5($module, &$params, &$attribs){	$moduleTag      = $params->get('module_tag');	$headerTag      = htmlspecialchars($params->get('header_tag'));	$headerClass    = $params->get('header_class');	$bootstrapSize  = $params->get('bootstrap_size');	$moduleClass    = !empty($bootstrapSize) ? ' span' . (int) $bootstrapSize . '' : '';	$moduleClassSfx = htmlspecialchars($params->get('moduleclass_sfx'));	if (!empty ($module->content))	{		$html  = "<{$moduleTag} class=\"moduletable{$moduleClassSfx} {$moduleClass}\">";		if ((bool) $module->showtitle)		{			$html .= "<{$headerTag} class=\"{$headerClass}\">{$module->title}</{$headerTag}>";		}		$html .= $module->content;		$html .= "</{$moduleTag}>";		echo $html;	}}/* * xhtml (divs and font header tags) */function modChrome_xhtml($module, &$params, &$attribs){	$content = trim($module->content);	if (!empty ($content)) : ?>		<div class="module<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">		<?php if ($module->showtitle != 0) : ?>			<h3><?php echo $module->title; ?></h3>		<?php endif; ?>			<?php echo $content; ?>		</div>	<?php endif;}/* * allows sliders */function modChrome_sliders($module, &$params, &$attribs){	$content = trim($module->content);	if (!empty($content))	{		if ($params->get('automatic_title', '0') == '0')		{			echo JHtml::_('sliders.panel', $module->title, 'module' . $module->id);		}		elseif (method_exists('mod' . $module->name . 'Helper', 'getTitle'))		{			echo JHtml::_('sliders.panel', call_user_func_array(array('mod' . $module->name . 'Helper', 'getTitle'), array($params, $module)), 'module' . $module->id);		}		else		{			echo JHtml::_('sliders.panel', JText::_('MOD_' . $module->name . '_TITLE'), 'module' . $module->id);		}		echo $content;	}}/* * allows tabs */function modChrome_tabs($module, &$params, &$attribs){	$content = trim($module->content);	if (!empty($content))	{		if ($params->get('automatic_title', '0') == '0')		{			echo JHtml::_('tabs.panel', $module->title, 'module' . $module->id);		}		elseif (method_exists('mod' . $module->name . 'Helper', 'getTitle'))		{			echo JHtml::_('tabs.panel', call_user_func_array(array('mod' . $module->name . 'Helper', 'getTitle'), array($params)), 'module' . $module->id);		}		else		{			echo JHtml::_('tabs.panel', JText::_('MOD_' . $module->name . '_TITLE'), 'module' . $module->id);		}		echo $content;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="accordion" id="accordion1">	<div class="accordion-group">		<div class="accordion-heading">			<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#batch">				<?php echo JText::_('COM_REDIRECT_FIELD_NEW_URL_LABEL');?>			</a>		</div>		<div id="batch" class="accordion-body collapse">			<div class="accordion-inner">				<fieldset class="batch form-inline">					<div class="control-group">						<label for="new_url" class="control-label"><?php echo JText::_('COM_REDIRECT_FIELD_NEW_URL_LABEL'); ?></label>						<div class="controls">							<input type="text" name="new_url" id="new_url" value="" size="50" title="<?php echo JText::_('COM_REDIRECT_FIELD_NEW_URL_DESC'); ?>" />						</div>					</div>					<div class="control-group">						<label for="comment" class="control-label"><?php echo JText::_('COM_REDIRECT_FIELD_COMMENT_LABEL'); ?></label>						<div class="controls">							<input type="text" name="comment" id="comment" value="" size="50" title="<?php echo JText::_('COM_REDIRECT_FIELD_COMMENT_DESC'); ?>" />						</div>					</div>					<button class="btn btn-primary" type="button" onclick="this.form.task.value='links.activate';this.form.submit();"><?php echo JText::_('COM_REDIRECT_BUTTON_UPDATE_LINKS'); ?></button>				</fieldset>			</div>		</div>	</div></div>
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDaemon has been renamed to JApplicationDaemon.', JLog::WARNING, 'deprecated');/** * Backward Compatability Stub for JApplicationDaemon * * @package     Joomla.Legacy * @subpackage  Application * @since       11.1 * @deprecated  12.3 Use JApplicationDaemon instead. */class JDaemon extends JApplicationDaemon{	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @since   11.1	 * @deprecated  12.3 Use JApplicationDaemon instead.	 * @throws  RuntimeException	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		JLog::add('JDaemon is deprecated. Use JApplicationDaemon instead.', JLog::WARNING, 'deprecated');		parent::__construct($input, $config, $dispatcher);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_PLUGINS_'.$name.'_FIELDSET_LABEL';	echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($label) ?></legend>		<?php $hidden_fields = ''; ?>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<?php if (!$field->hidden) : ?>			<li>				<?php echo $field->label; ?>				<?php echo $field->input; ?>			</li>			<?php else : $hidden_fields .= $field->input; ?>			<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php echo $hidden_fields; ?>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// PHP mbstring and iconv local configuration// Check if mbstring extension is loaded and attempt to load it if not present except for windowsif (extension_loaded('mbstring')){	// Make sure to suppress the output in case ini_set is disabled	@ini_set('mbstring.internal_encoding', 'UTF-8');	@ini_set('mbstring.http_input', 'UTF-8');	@ini_set('mbstring.http_output', 'UTF-8');}// Same for iconvif (function_exists('iconv')){	// These are settings that can be set inside code	iconv_set_encoding("internal_encoding", "UTF-8");	iconv_set_encoding("input_encoding", "UTF-8");	iconv_set_encoding("output_encoding", "UTF-8");}/** * Include the utf8 package */jimport('phputf8.utf8');jimport('phputf8.strcasecmp');/** * String handling class for utf-8 data * Wraps the phputf8 library * All functions assume the validity of utf-8 strings. * * @package     Joomla.Platform * @subpackage  String * @since       11.1 */abstract class JString{	/**	 * Increment styles.	 *	 * @var    array	 * @since  11.3	 */	protected static $incrementStyles = array(		'dash' => array(			'#-(\d+)$#',			'-%d'		),		'default' => array(			array('#\((\d+)\)$#', '#\(\d+\)$#'),			array(' (%d)', '(%d)'),		),	);	/**	 * Split a string in camel case format	 *	 * "FooBarABCDef"            becomes  array("Foo", "Bar", "ABC", "Def");	 * "JFooBar"                 becomes  array("J", "Foo", "Bar");	 * "J001FooBar002"           becomes  array("J001", "Foo", "Bar002");	 * "abcDef"                  becomes  array("abc", "Def");	 * "abc_defGhi_Jkl"          becomes  array("abc_def", "Ghi_Jkl");	 * "ThisIsA_NASAAstronaut"   becomes  array("This", "Is", "A_NASA", "Astronaut")),	 * "JohnFitzgerald_Kennedy"  becomes  array("John", "Fitzgerald_Kennedy")),	 *	 * @param   string  $string  The source string.	 *	 * @return  array   The splitted string.	 *	 * @deprecated  12.3 Use JStringNormalise::fromCamelCase()	 * @since   11.3	 */	public static function splitCamelCase($string)	{		JLog::add('JString::splitCamelCase has been deprecated. Use JStringNormalise::fromCamelCase.', JLog::WARNING, 'deprecated');		return JStringNormalise::fromCamelCase($string, true);	}	/**	 * Increments a trailing number in a string.	 *	 * Used to easily create distinct labels when copying objects. The method has the following styles:	 *	 * default: "Label" becomes "Label (2)"	 * dash:    "Label" becomes "Label-2"	 *	 * @param   string   $string  The source string.	 * @param   string   $style   The the style (default|dash).	 * @param   integer  $n       If supplied, this number is used for the copy, otherwise it is the 'next' number.	 *	 * @return  string  The incremented string.	 *	 * @since   11.3	 */	public static function increment($string, $style = 'default', $n = 0)	{		$styleSpec = isset(self::$incrementStyles[$style]) ? self::$incrementStyles[$style] : self::$incrementStyles['default'];		// Regular expression search and replace patterns.		if (is_array($styleSpec[0]))		{			$rxSearch = $styleSpec[0][0];			$rxReplace = $styleSpec[0][1];		}		else		{			$rxSearch = $rxReplace = $styleSpec[0];		}		// New and old (existing) sprintf formats.		if (is_array($styleSpec[1]))		{			$newFormat = $styleSpec[1][0];			$oldFormat = $styleSpec[1][1];		}		else		{			$newFormat = $oldFormat = $styleSpec[1];		}		// Check if we are incrementing an existing pattern, or appending a new one.		if (preg_match($rxSearch, $string, $matches))		{			$n = empty($n) ? ($matches[1] + 1) : $n;			$string = preg_replace($rxReplace, sprintf($oldFormat, $n), $string);		}		else		{			$n = empty($n) ? 2 : $n;			$string .= sprintf($newFormat, $n);		}		return $string;	}	/**	 * UTF-8 aware alternative to strpos.	 *	 * Find position of first occurrence of a string.	 *	 * @param   string   $str     String being examined	 * @param   string   $search  String being searched for	 * @param   integer  $offset  Optional, specifies the position from which the search should be performed	 *	 * @return  mixed  Number of characters before the first match or FALSE on failure	 *	 * @see     http://www.php.net/strpos	 * @since   11.1	 */	public static function strpos($str, $search, $offset = false)	{		if ($offset === false)		{			return utf8_strpos($str, $search);		}		else		{			return utf8_strpos($str, $search, $offset);		}	}	/**	 * UTF-8 aware alternative to strrpos	 * Finds position of last occurrence of a string	 *	 * @param   string   $str     String being examined.	 * @param   string   $search  String being searched for.	 * @param   integer  $offset  Offset from the left of the string.	 *	 * @return  mixed  Number of characters before the last match or false on failure	 *	 * @see     http://www.php.net/strrpos	 * @since   11.1	 */	public static function strrpos($str, $search, $offset = 0)	{		return utf8_strrpos($str, $search, $offset);	}	/**	 * UTF-8 aware alternative to substr	 * Return part of a string given character offset (and optionally length)	 *	 * @param   string   $str     String being processed	 * @param   integer  $offset  Number of UTF-8 characters offset (from left)	 * @param   integer  $length  Optional length in UTF-8 characters from offset	 *	 * @return  mixed string or FALSE if failure	 *	 * @see     http://www.php.net/substr	 * @since   11.1	 */	public static function substr($str, $offset, $length = false)	{		if ($length === false)		{			return utf8_substr($str, $offset);		}		else		{			return utf8_substr($str, $offset, $length);		}	}	/**	 * UTF-8 aware alternative to strtlower	 *	 * Make a string lowercase	 * Note: The concept of a characters "case" only exists is some alphabets	 * such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	 * not exist in the Chinese alphabet, for example. See Unicode Standard	 * Annex #21: Case Mappings	 *	 * @param   string  $str  String being processed	 *	 * @return  mixed  Either string in lowercase or FALSE is UTF-8 invalid	 *	 * @see http://www.php.net/strtolower	 * @since   11.1	 */	public static function strtolower($str)	{		return utf8_strtolower($str);	}	/**	 * UTF-8 aware alternative to strtoupper	 * Make a string uppercase	 * Note: The concept of a characters "case" only exists is some alphabets	 * such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	 * not exist in the Chinese alphabet, for example. See Unicode Standard	 * Annex #21: Case Mappings	 *	 * @param   string  $str  String being processed	 *	 * @return  mixed  Either string in uppercase or FALSE is UTF-8 invalid	 *	 * @see     http://www.php.net/strtoupper	 * @since   11.1	 */	public static function strtoupper($str)	{		return utf8_strtoupper($str);	}	/**	 * UTF-8 aware alternative to strlen.	 *	 * Returns the number of characters in the string (NOT THE NUMBER OF BYTES),	 *	 * @param   string  $str  UTF-8 string.	 *	 * @return  integer  Number of UTF-8 characters in string.	 *	 * @see http://www.php.net/strlen	 * @since   11.1	 */	public static function strlen($str)	{		return utf8_strlen($str);	}	/**	 * UTF-8 aware alternative to str_ireplace	 * Case-insensitive version of str_replace	 *	 * @param   string   $search   String to search	 * @param   string   $replace  Existing string to replace	 * @param   string   $str      New string to replace with	 * @param   integer  $count    Optional count value to be passed by referene	 *	 * @return  string  UTF-8 String	 *	 * @see     http://www.php.net/str_ireplace	 * @since   11.1	 */	public static function str_ireplace($search, $replace, $str, $count = null)	{		jimport('phputf8.str_ireplace');		if ($count === false)		{			return utf8_ireplace($search, $replace, $str);		}		else		{			return utf8_ireplace($search, $replace, $str, $count);		}	}	/**	 * UTF-8 aware alternative to str_split	 * Convert a string to an array	 *	 * @param   string   $str        UTF-8 encoded string to process	 * @param   integer  $split_len  Number to characters to split string by	 *	 * @return  array	 *	 * @see     http://www.php.net/str_split	 * @since   11.1	 */	public static function str_split($str, $split_len = 1)	{		jimport('phputf8.str_split');		return utf8_str_split($str, $split_len);	}	/**	 * UTF-8/LOCALE aware alternative to strcasecmp	 * A case insensitive string comparison	 *	 * @param   string  $str1    string 1 to compare	 * @param   string  $str2    string 2 to compare	 * @param   mixed   $locale  The locale used by strcoll or false to use classical comparison	 *	 * @return  integer   < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.	 *	 * @see     http://www.php.net/strcasecmp	 * @see     http://www.php.net/strcoll	 * @see     http://www.php.net/setlocale	 * @since   11.1	 */	public static function strcasecmp($str1, $str2, $locale = false)	{		if ($locale)		{			// Get current locale			$locale0 = setlocale(LC_COLLATE, 0);			if (!$locale = setlocale(LC_COLLATE, $locale))			{				$locale = $locale0;			}			// See if we have successfully set locale to UTF-8			if (!stristr($locale, 'UTF-8') && stristr($locale, '_') && preg_match('~\.(\d+)$~', $locale, $m))			{				$encoding = 'CP' . $m[1];			}			elseif (stristr($locale, 'UTF-8') || stristr($locale, 'utf8'))			{				$encoding = 'UTF-8';			}			else			{				$encoding = 'nonrecodable';			}			// If we successfully set encoding it to utf-8 or encoding is sth weird don't recode			if ($encoding == 'UTF-8' || $encoding == 'nonrecodable')			{				return strcoll(utf8_strtolower($str1), utf8_strtolower($str2));			}			else			{				return strcoll(					self::transcode(utf8_strtolower($str1), 'UTF-8', $encoding),					self::transcode(utf8_strtolower($str2), 'UTF-8', $encoding)				);			}		}		else		{			return utf8_strcasecmp($str1, $str2);		}	}	/**	 * UTF-8/LOCALE aware alternative to strcmp	 * A case sensitive string comparison	 *	 * @param   string  $str1    string 1 to compare	 * @param   string  $str2    string 2 to compare	 * @param   mixed   $locale  The locale used by strcoll or false to use classical comparison	 *	 * @return  integer  < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.	 *	 * @see     http://www.php.net/strcmp	 * @see     http://www.php.net/strcoll	 * @see     http://www.php.net/setlocale	 * @since   11.1	 */	public static function strcmp($str1, $str2, $locale = false)	{		if ($locale)		{			// Get current locale			$locale0 = setlocale(LC_COLLATE, 0);			if (!$locale = setlocale(LC_COLLATE, $locale))			{				$locale = $locale0;			}			// See if we have successfully set locale to UTF-8			if (!stristr($locale, 'UTF-8') && stristr($locale, '_') && preg_match('~\.(\d+)$~', $locale, $m))			{				$encoding = 'CP' . $m[1];			}			elseif (stristr($locale, 'UTF-8') || stristr($locale, 'utf8'))			{				$encoding = 'UTF-8';			}			else			{				$encoding = 'nonrecodable';			}			// If we successfully set encoding it to utf-8 or encoding is sth weird don't recode			if ($encoding == 'UTF-8' || $encoding == 'nonrecodable')			{				return strcoll($str1, $str2);			}			else			{				return strcoll(self::transcode($str1, 'UTF-8', $encoding), self::transcode($str2, 'UTF-8', $encoding));			}		}		else		{			return strcmp($str1, $str2);		}	}	/**	 * UTF-8 aware alternative to strcspn	 * Find length of initial segment not matching mask	 *	 * @param   string   $str     The string to process	 * @param   string   $mask    The mask	 * @param   integer  $start   Optional starting character position (in characters)	 * @param   integer  $length  Optional length	 *	 * @return  integer  The length of the initial segment of str1 which does not contain any of the characters in str2	 *	 * @see     http://www.php.net/strcspn	 * @since   11.1	 */	public static function strcspn($str, $mask, $start = null, $length = null)	{		jimport('phputf8.strcspn');		if ($start === false && $length === false)		{			return utf8_strcspn($str, $mask);		}		elseif ($length === false)		{			return utf8_strcspn($str, $mask, $start);		}		else		{			return utf8_strcspn($str, $mask, $start, $length);		}	}	/**	 * UTF-8 aware alternative to stristr	 * Returns all of haystack from the first occurrence of needle to the end.	 * needle and haystack are examined in a case-insensitive manner	 * Find first occurrence of a string using case insensitive comparison	 *	 * @param   string  $str     The haystack	 * @param   string  $search  The needle	 *	 * @return string the sub string	 *	 * @see     http://www.php.net/stristr	 * @since   11.1	 */	public static function stristr($str, $search)	{		jimport('phputf8.stristr');		return utf8_stristr($str, $search);	}	/**	 * UTF-8 aware alternative to strrev	 * Reverse a string	 *	 * @param   string  $str  String to be reversed	 *	 * @return  string   The string in reverse character order	 *	 * @see     http://www.php.net/strrev	 * @since   11.1	 */	public static function strrev($str)	{		jimport('phputf8.strrev');		return utf8_strrev($str);	}	/**	 * UTF-8 aware alternative to strspn	 * Find length of initial segment matching mask	 *	 * @param   string   $str     The haystack	 * @param   string   $mask    The mask	 * @param   integer  $start   Start optional	 * @param   integer  $length  Length optional	 *	 * @return  integer	 *	 * @see     http://www.php.net/strspn	 * @since   11.1	 */	public static function strspn($str, $mask, $start = null, $length = null)	{		jimport('phputf8.strspn');		if ($start === null && $length === null)		{			return utf8_strspn($str, $mask);		}		elseif ($length === null)		{			return utf8_strspn($str, $mask, $start);		}		else		{			return utf8_strspn($str, $mask, $start, $length);		}	}	/**	 * UTF-8 aware substr_replace	 * Replace text within a portion of a string	 *	 * @param   string   $str     The haystack	 * @param   string   $repl    The replacement string	 * @param   integer  $start   Start	 * @param   integer  $length  Length (optional)	 *	 * @return  string	 *	 * @see     http://www.php.net/substr_replace	 * @since   11.1	 */	public static function substr_replace($str, $repl, $start, $length = null)	{		// Loaded by library loader		if ($length === false)		{			return utf8_substr_replace($str, $repl, $start);		}		else		{			return utf8_substr_replace($str, $repl, $start, $length);		}	}	/**	 * UTF-8 aware replacement for ltrim()	 *	 * Strip whitespace (or other characters) from the beginning of a string	 * You only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise ltrim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/ltrim	 * @since   11.1	 */	public static function ltrim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_ltrim($str);		}		else		{			return utf8_ltrim($str, $charlist);		}	}	/**	 * UTF-8 aware replacement for rtrim()	 * Strip whitespace (or other characters) from the end of a string	 * You only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise rtrim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/rtrim	 * @since   11.1	 */	public static function rtrim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_rtrim($str);		}		else		{			return utf8_rtrim($str, $charlist);		}	}	/**	 * UTF-8 aware replacement for trim()	 * Strip whitespace (or other characters) from the beginning and end of a string	 * Note: you only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise trim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/trim	 * @since   11.1	 */	public static function trim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_trim($str);		}		else		{			return utf8_trim($str, $charlist);		}	}	/**	 * UTF-8 aware alternative to ucfirst	 * Make a string's first character uppercase or all words' first character uppercase	 *	 * @param   string  $str           String to be processed	 * @param   string  $delimiter     The words delimiter (null means do not split the string)	 * @param   string  $newDelimiter  The new words delimiter (null means equal to $delimiter)	 *	 * @return  string  If $delimiter is null, return the string with first character as upper case (if applicable)	 *                  else consider the string of words separated by the delimiter, apply the ucfirst to each words	 *                  and return the string with the new delimiter	 *	 * @see     http://www.php.net/ucfirst	 * @since   11.1	 */	public static function ucfirst($str, $delimiter = null, $newDelimiter = null)	{		jimport('phputf8.ucfirst');		if ($delimiter === null)		{			return utf8_ucfirst($str);		}		else		{			if ($newDelimiter === null)			{				$newDelimiter = $delimiter;			}			return implode($newDelimiter, array_map('utf8_ucfirst', explode($delimiter, $str)));		}	}	/**	 * UTF-8 aware alternative to ucwords	 * Uppercase the first character of each word in a string	 *	 * @param   string  $str  String to be processed	 *	 * @return  string  String with first char of each word uppercase	 *	 * @see     http://www.php.net/ucwords	 * @since   11.1	 */	public static function ucwords($str)	{		jimport('phputf8.ucwords');		return utf8_ucwords($str);	}	/**	 * Transcode a string.	 *	 * @param   string  $source         The string to transcode.	 * @param   string  $from_encoding  The source encoding.	 * @param   string  $to_encoding    The target encoding.	 *	 * @return  mixed  The transcoded string, or null if the source was not a string.	 *	 * @link    https://bugs.php.net/bug.php?id=48147	 *	 * @since   11.1	 */	public static function transcode($source, $from_encoding, $to_encoding)	{		if (is_string($source))		{			switch (ICONV_IMPL)			{				case 'glibc':				return @iconv($from_encoding, $to_encoding . '//TRANSLIT,IGNORE', $source);				case 'libiconv':				default:				return iconv($from_encoding, $to_encoding . '//IGNORE//TRANSLIT', $source);			}		}		return null;	}	/**	 * Tests a string as to whether it's valid UTF-8 and supported by the Unicode standard.	 *	 * Note: this function has been modified to simple return true or false.	 *	 * @param   string  $str  UTF-8 encoded string.	 *	 * @return  boolean  true if valid	 *	 * @author  <hsivonen@iki.fi>	 * @see     http://hsivonen.iki.fi/php-utf8/	 * @see     compliant	 * @since   11.1	 */	public static function valid($str)	{		// Cached expected number of octets after the current octet		// until the beginning of the next UTF8 character sequence		$mState = 0;		// Cached Unicode character		$mUcs4 = 0;		// Cached expected number of octets in the current sequence		$mBytes = 1;		$len = strlen($str);		for ($i = 0; $i < $len; $i++)		{			$in = ord($str{$i});			if ($mState == 0)			{				// When mState is zero we expect either a US-ASCII character or a				// multi-octet sequence.				if (0 == (0x80 & ($in)))				{					// US-ASCII, pass straight through.					$mBytes = 1;				}				elseif (0xC0 == (0xE0 & ($in)))				{					// First octet of 2 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x1F) << 6;					$mState = 1;					$mBytes = 2;				}				elseif (0xE0 == (0xF0 & ($in)))				{					// First octet of 3 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x0F) << 12;					$mState = 2;					$mBytes = 3;				}				elseif (0xF0 == (0xF8 & ($in)))				{					// First octet of 4 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x07) << 18;					$mState = 3;					$mBytes = 4;				}				elseif (0xF8 == (0xFC & ($in)))				{					/* First octet of 5 octet sequence.					 *					 * This is illegal because the encoded codepoint must be either					 * (a) not the shortest form or					 * (b) outside the Unicode range of 0-0x10FFFF.					 * Rather than trying to resynchronize, we will carry on until the end					 * of the sequence and let the later error handling code catch it.					 */					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x03) << 24;					$mState = 4;					$mBytes = 5;				}				elseif (0xFC == (0xFE & ($in)))				{					// First octet of 6 octet sequence, see comments for 5 octet sequence.					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 1) << 30;					$mState = 5;					$mBytes = 6;				}				else				{					/* Current octet is neither in the US-ASCII range nor a legal first					 * octet of a multi-octet sequence.					 */					return false;				}			}			else			{				// When mState is non-zero, we expect a continuation of the multi-octet				// sequence				if (0x80 == (0xC0 & ($in)))				{					// Legal continuation.					$shift = ($mState - 1) * 6;					$tmp = $in;					$tmp = ($tmp & 0x0000003F) << $shift;					$mUcs4 |= $tmp;					/**					 * End of the multi-octet sequence. mUcs4 now contains the final					 * Unicode codepoint to be output					 */					if (0 == --$mState)					{						/*						 * Check for illegal sequences and codepoints.						 */						// From Unicode 3.1, non-shortest form is illegal						if (((2 == $mBytes) && ($mUcs4 < 0x0080)) || ((3 == $mBytes) && ($mUcs4 < 0x0800)) || ((4 == $mBytes) && ($mUcs4 < 0x10000))							|| (4 < $mBytes)							|| (($mUcs4 & 0xFFFFF800) == 0xD800) // From Unicode 3.2, surrogate characters are illegal							|| ($mUcs4 > 0x10FFFF)) // Codepoints outside the Unicode range are illegal						{							return false;						}						// Initialize UTF8 cache.						$mState = 0;						$mUcs4 = 0;						$mBytes = 1;					}				}				else				{					/**					 *((0xC0 & (*in) != 0x80) && (mState != 0))					 * Incomplete multi-octet sequence.					 */					return false;				}			}		}		return true;	}	/**	 * Tests whether a string complies as UTF-8. This will be much	 * faster than utf8_is_valid but will pass five and six octet	 * UTF-8 sequences, which are not supported by Unicode and	 * so cannot be displayed correctly in a browser. In other words	 * it is not as strict as utf8_is_valid but it's faster. If you use	 * it to validate user input, you place yourself at the risk that	 * attackers will be able to inject 5 and 6 byte sequences (which	 * may or may not be a significant risk, depending on what you are	 * are doing)	 *	 * @param   string  $str  UTF-8 string to check	 *	 * @return  boolean  TRUE if string is valid UTF-8	 *	 * @see     valid	 * @see     http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#54805	 * @since   11.1	 */	public static function compliant($str)	{		if (strlen($str) == 0)		{			return true;		}		/*		 * If even just the first character can be matched, when the /u		 * modifier is used, then it's valid UTF-8. If the UTF-8 is somehow		 * invalid, nothing at all will match, even if the string contains		 * some valid sequences		 */		return (preg_match('/^.{1}/us', $str, $ar) == 1);	}	/**	 * Does a UTF-8 safe version of PHP parse_url function	 *	 * @param   string  $url  URL to parse	 *	 * @return  mixed  Associative array or false if badly formed URL.	 *	 * @see     http://us3.php.net/manual/en/function.parse-url.php	 * @since   11.1	 */	public static function parse_url($url)	{		$result = false;		// Build arrays of values we need to decode before parsing		$entities = array('%21', '%2A', '%27', '%28', '%29', '%3B', '%3A', '%40', '%26', '%3D', '%24', '%2C', '%2F', '%3F', '%23', '%5B', '%5D');		$replacements = array('!', '*', "'", "(", ")", ";", ":", "@", "&", "=", "$", ",", "/", "?", "#", "[", "]");		// Create encoded URL with special URL characters decoded so it can be parsed		// All other characters will be encoded		$encodedURL = str_replace($entities, $replacements, urlencode($url));		// Parse the encoded URL		$encodedParts = parse_url($encodedURL);		// Now, decode each value of the resulting array		if ($encodedParts)		{			foreach ($encodedParts as $key => $value)			{				$result[$key] = urldecode(str_replace($replacements, $entities, $value));			}		}		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_title * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Get the component title divif (isset(JFactory::getApplication()->JComponentTitle)){	$title = JFactory::getApplication()->JComponentTitle;}require JModuleHelper::getLayoutPath('mod_title', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');?><div class="reset-complete<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=reset.complete'); ?>" method="post" class="form-validate">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<dl>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<dt><?php echo $field->label; ?></dt>				<dd><?php echo $field->input; ?></dd>			<?php endforeach; ?>			</dl>		</fieldset>		<?php endforeach; ?>		<div>			<button type="submit" class="validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base Application Class * * @package     Joomla.Platform * @subpackage  Application * @since       12.1 */abstract class JApplicationBase{	/**	 * The application dispatcher object.	 *	 * @var    JEventDispatcher	 * @since  12.1	 */	protected $dispatcher;	/**	 * The application identity object.	 *	 * @var    JUser	 * @since  12.1	 */	protected $identity;	/**	 * The application input object.	 *	 * @var    JInput	 * @since  12.1	 */	public $input = null;	/**	 * Method to close the application.	 *	 * @param   integer  $code  The exit code (optional; default is 0).	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   12.1	 */	public function close($code = 0)	{		exit($code);	}	/**	 * Get the application identity.	 *	 * @return  mixed  A JUser object or null.	 *	 * @since   12.1	 */	public function getIdentity()	{		return $this->identity;	}	/**	 * Registers a handler to a particular event group.	 *	 * @param   string    $event    The event name.	 * @param   callback  $handler  The handler, a function or an instance of a event object.	 *	 * @return  JApplicationBase  The application to allow chaining.	 *	 * @since   12.1	 */	public function registerEvent($event, $handler)	{		if ($this->dispatcher instanceof JEventDispatcher)		{			$this->dispatcher->register($event, $handler);		}		return $this;	}	/**	 * Calls all handlers associated with an event group.	 *	 * @param   string  $event  The event name.	 * @param   array   $args   An array of arguments (optional).	 *	 * @return  array   An array of results from each function call, or null if no dispatcher is defined.	 *	 * @since   12.1	 */	public function triggerEvent($event, array $args = null)	{		if ($this->dispatcher instanceof JEventDispatcher)		{			return $this->dispatcher->trigger($event, $args);		}		return null;	}	/**	 * Allows the application to load a custom or default dispatcher.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create event	 * dispatchers, if required, based on more specific needs.	 *	 * @param   JEventDispatcher  $dispatcher  An optional dispatcher object. If omitted, the factory dispatcher is created.	 *	 * @return  JApplicationBase This method is chainable.	 *	 * @since   12.1	 */	public function loadDispatcher(JEventDispatcher $dispatcher = null)	{		$this->dispatcher = ($dispatcher === null) ? JEventDispatcher::getInstance() : $dispatcher;		return $this;	}	/**	 * Allows the application to load a custom or default identity.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create an identity,	 * if required, based on more specific needs.	 *	 * @param   JUser  $identity  An optional identity object. If omitted, the factory user is created.	 *	 * @return  JApplicationBase This method is chainable.	 *	 * @since   12.1	 */	public function loadIdentity(JUser $identity = null)	{		$this->identity = ($identity === null) ? JFactory::getUser() : $identity;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages Component Message Model * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerConfig extends JControllerLegacy{	/**	 * Method to save a record.	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Config', 'MessagesModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Validate the posted data.		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data = $model->validate($form, $data);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Redirect back to the main list.			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Redirect back to the main list.			$this->setMessage(JText::sprintf('JERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Redirect to the list screen.		$this->setMessage(JText::_('COM_MESSAGES_CONFIG_SAVED'));		$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));		return true;	}}
