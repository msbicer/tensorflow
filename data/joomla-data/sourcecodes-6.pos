<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @param   array * @return  array */function SearchBuildRoute(&$query){	$segments = array();	if (isset($query['view']))	{		unset($query['view']);	}	return $segments;}/** * @param   array * @return  array */function SearchParseRoute($segments){	$vars = array();	$searchword	= array_shift($segments);	$vars['searchword'] = $searchword;	$vars['view'] = 'search';	return $vars;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?><form target="_parent" action="index.php?option=com_media&amp;tmpl=index&amp;folder=<?php echo $this->state->folder; ?>" method="post" id="mediamanager-form" name="mediamanager-form">	<div class="manager">	<table class="table table-striped table-condensed">	<thead>		<tr>			<th width="1%"><?php echo JText::_('JGLOBAL_PREVIEW'); ?></th>			<th><?php echo JText::_('COM_MEDIA_NAME'); ?></th>			<th width="15%"><?php echo JText::_('COM_MEDIA_PIXEL_DIMENSIONS'); ?></th>			<th width="8%"><?php echo JText::_('COM_MEDIA_FILESIZE'); ?></th>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<th width="8%"><?php echo JText::_('JACTION_DELETE'); ?></th>		<?php endif;?>		</tr>	</thead>	<tbody>		<?php echo $this->loadTemplate('up'); ?>		<?php for ($i = 0, $n = count($this->folders); $i < $n; $i++) :			$this->setFolder($i);			echo $this->loadTemplate('folder');		endfor; ?>		<?php for ($i = 0, $n = count($this->documents); $i < $n; $i++) :			$this->setDoc($i);			echo $this->loadTemplate('doc');		endfor; ?>		<?php for ($i = 0, $n = count($this->images); $i < $n; $i++) :			$this->setImage($i);			echo $this->loadTemplate('img');		endfor; ?>	</tbody>	</table>	<input type="hidden" name="task" value="list" />	<input type="hidden" name="username" value="" />	<input type="hidden" name="password" value="" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */// We are a valid entry point.const _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}// Get the framework.require_once JPATH_LIBRARIES . '/import.legacy.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';// Configure error reporting to maximum for CLI output.error_reporting(E_ALL);ini_set('display_errors', 1);// Load Library language$lang = JFactory::getLanguage();// Try the files_joomla file in the current language (without allowing the loading of the file in the default language)$lang->load('files_joomla.sys', JPATH_SITE, null, false, false)// Fallback to the files_joomla file in the default language|| $lang->load('files_joomla.sys', JPATH_SITE, null, true);/** * A command line cron job to attempt to remove files that should have been deleted at update. * * @package  Joomla.CLI * @since    3.0 */class DeletefilesCli extends JApplicationCli{	/**	 * Entry point for CLI script	 *	 * @return  void	 *	 * @since   3.0	 */	public function doExecute()	{		// Import the dependencies		jimport('joomla.filesystem.file');		jimport('joomla.filesystem.folder');		// We need the update script		JLoader::register('JoomlaInstallerScript', JPATH_ADMINISTRATOR . '/components/com_admin/script.php');		// Instantiate the class		$class = new JoomlaInstallerScript;		// Run the delete method		$class->deleteUnexistingFiles();	}}// Instantiate the application object, passing the class name to JCli::getInstance// and use chaining to execute the application.JApplicationCli::getInstance('DeletefilesCli')->execute();
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$id      = empty($displayData['id']) ? '' : (' id="' . $displayData['id'] . '"');$target  = empty($displayData['target']) ? '' : (' target="' . $displayData['target'] . '"');$onclick = empty($displayData['onclick']) ? '' : (' onclick="' . $displayData['onclick'] . '"');$title   = empty($displayData['title']) ? '' : (' title="' . $this->escape($displayData['title']) . '"');$text    = empty($displayData['text']) ? '' : ('<span>' . $displayData['text'] . '</span>')?><div class="row-fluid"<?php echo $id; ?>>	<div class="span12">		<a href="<?php echo $displayData['link']; ?>"<?php echo $target . $onclick . $title; ?>>			<i class="icon-<?php echo $displayData['image']; ?>"></i> <?php echo $text; ?>		</a>	</div></div>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Utility class to render a list view sidebar * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlSidebar{	/**	 * Menu entries	 *	 * @var    array	 * @since  3.0	 */	protected static $entries = array();	/**	 * Filters	 *	 * @var    array	 * @since  3.0	 */	protected static $filters = array();	/**	 * Value for the action attribute of the form.	 *	 * @var    string	 * @since  3.0	 */	protected static $action = '';	/**	 * Render the sidebar.	 *	 * @return  string  The necessary HTML to display the sidebar	 *	 * @since   3.0	 */	public static function render()	{		// Collect display data		$data                 = new stdClass;		$data->list           = self::getEntries();		$data->filters        = self::getFilters();		$data->action         = self::getAction();		$data->displayMenu    = count($data->list);		$data->displayFilters = count($data->filters);		$data->hide           = JFactory::getApplication()->input->getBool('hidemainmenu');		// Create a layout object and ask it to render the sidebar		$layout      = new JLayoutFile('joomla.sidebars.submenu');		$sidebarHtml = $layout->render($data);		return $sidebarHtml;	}	/**	 * Method to add a menu item to submenu.	 *	 * @param   string  $name    Name of the menu item.	 * @param   string  $link    URL of the menu item.	 * @param   bool    $active  True if the item is active, false otherwise.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function addEntry($name, $link = '', $active = false)	{		array_push(self::$entries, array($name, $link, $active));	}	/**	 * Returns an array of all submenu entries	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getEntries()	{		return self::$entries;	}	/**	 * Method to add a filter to the submenu	 *	 * @param   string  $label      Label for the menu item.	 * @param   string  $name       Name for the filter. Also used as id.	 * @param   string  $options    Options for the select field.	 * @param   bool    $noDefault  Don't the label as the empty option	 *	 * @return  void	 *	 * @since   3.0	 */	public static function addFilter($label, $name, $options, $noDefault = false)	{		array_push(self::$filters, array('label' => $label, 'name' => $name, 'options' => $options, 'noDefault' => $noDefault));	}	/**	 * Returns an array of all filters	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getFilters()	{		return self::$filters;	}	/**	 * Set value for the action attribute of the filter form	 *	 * @param   string  $action  Value for the action attribute of the form	 *	 * @return  void	 *	 * @since   3.0	 */	public static function setAction($action)	{		self::$action = $action;	}	/**	 * Get value for the action attribute of the filter form	 *	 * @return  string	 *	 * @since   3.0	 */	public static function getAction()	{		return self::$action;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_footer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app		= JFactory::getApplication();$date		= JFactory::getDate();$cur_year	= $date->format('Y');$csite_name	= $app->getCfg('sitename');if (JString::strpos(JText :: _('MOD_FOOTER_LINE1'), '%date%')){	$line1 = str_replace('%date%', $cur_year, JText :: _('MOD_FOOTER_LINE1'));}else {	$line1 = JText :: _('MOD_FOOTER_LINE1');}if (JString::strpos($line1, '%sitename%')){	$lineone = str_replace('%sitename%', $csite_name, $line1);}else {	$lineone = $line1;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_footer', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  mod_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the weblinks functions only oncerequire_once __DIR__ . '/helper.php';$list = ModWeblinksHelper::getList($params);if (!count($list)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_weblinks', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Contact Component Category Tree * * @package     Joomla.Site * @subpackage  com_contact * @since       1.6 */class ContactCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__contact_details';		$options['extension'] = 'com_contact';		$options['statefield'] = 'published';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php  $fieldSets = $this->form->getFieldsets('attribs'); ?>	<?php foreach ($fieldSets as $name => $fieldSet) : ?>		<?php $label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL'; ?>		<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'attrib-'.$name, trim($label)); ?>			<fieldset>			<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>				<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>			<?php endif;			foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach;?>			</fieldset>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_LOCATION_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('locale') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_items_cat') == 1) :?>			<dl><dt>				<?php echo JText::_('COM_CONTACT_COUNT'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL Server database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/ee336279.aspx * @since       12.1 */class JDatabaseDriverSqlazure extends JDatabaseDriverSqlsrv{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlzure';}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentFeed class, provides an easy interface to parse and display any feed document * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentFeed extends JDocument{	/**	 * Syndication URL feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $syndicationURL = "";	/**	 * Image feed element	 *	 * optional	 *	 * @var    object	 * @since  11.1	 */	public $image = null;	/**	 * Copyright feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $copyright = "";	/**	 * Published date feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $pubDate = "";	/**	 * Lastbuild date feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $lastBuildDate = "";	/**	 * Editor feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $editor = "";	/**	 * Docs feed element	 *	 * @var    string	 * @since  11.1	 */	public $docs = "";	/**	 * Editor email feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $editorEmail = "";	/**	 * Webmaster email feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $webmaster = "";	/**	 * Category feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $category = "";	/**	 * TTL feed attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $ttl = "";	/**	 * Rating feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $rating = "";	/**	 * Skiphours feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $skipHours = "";	/**	 * Skipdays feed element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $skipDays = "";	/**	 * The feed items collection	 *	 * @var    array	 * @since  11.1	 */	public $items = array();	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since  11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set document type		$this->_type = 'feed';	}	/**	 * Render the document	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since  11.1	 * @throws Exception	 * @todo   Make this cacheable	 */	public function render($cache = false, $params = array())	{		// Get the feed type		$type = JFactory::getApplication()->input->get('type', 'rss');		// Instantiate feed renderer and set the mime encoding		$renderer = $this->loadRenderer(($type) ? $type : 'rss');		if (!is_a($renderer, 'JDocumentRenderer'))		{			throw new Exception(JText::_('JGLOBAL_RESOURCE_NOT_FOUND'), 404);		}		$this->setMimeEncoding($renderer->getContentType());		// Output		// Generate prolog		$data = "<?xml version=\"1.0\" encoding=\"" . $this->_charset . "\"?>\n";		$data .= "<!-- generator=\"" . $this->getGenerator() . "\" -->\n";		// Generate stylesheet links		foreach ($this->_styleSheets as $src => $attr)		{			$data .= "<?xml-stylesheet href=\"$src\" type=\"" . $attr['mime'] . "\"?>\n";		}		// Render the feed		$data .= $renderer->render();		parent::render();		return $data;	}	/**	 * Adds an JFeedItem to the feed.	 *	 * @param   JFeedItem  $item  The feeditem to add to the feed.	 *	 * @return  JDocumentFeed  instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addItem(JFeedItem $item)	{		$item->source = $this->link;		$this->items[] = $item;		return $this;	}}/** * JFeedItem is an internal class that stores feed item information * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JFeedItem{	/**	 * Title item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $title;	/**	 * Link item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $link;	/**	 * Description item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $description;	/**	 * Author item element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $author;	/**	 * Author email element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $authorEmail;	/**	 * Category element	 *	 * optional	 *	 * @var    array or string	 * @since  11.1	 */	public $category;	/**	 * Comments element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $comments;	/**	 * Enclosure element	 *	 * @var    object	 * @since  11.1	 */	public $enclosure = null;	/**	 * Guid element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $guid;	/**	 * Published date	 *	 * optional	 *	 * May be in one of the following formats:	 *	 * RFC 822:	 * "Mon, 20 Jan 03 18:05:41 +0400"	 * "20 Jan 03 18:05:41 +0000"	 *	 * ISO 8601:	 * "2003-01-20T18:05:41+04:00"	 *	 * Unix:	 * 1043082341	 *	 * @var    string	 * @since  11.1	 */	public $date;	/**	 * Source element	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $source;	/**	 * Set the JFeedEnclosure for this item	 *	 * @param   JFeedEnclosure  $enclosure  The JFeedEnclosure to add to the feed.	 *	 * @return  JFeedItem instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setEnclosure(JFeedEnclosure $enclosure)	{		$this->enclosure = $enclosure;		return $this;	}}/** * JFeedEnclosure is an internal class that stores feed enclosure information * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JFeedEnclosure{	/**	 * URL enclosure element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $url = "";	/**	 * Length enclosure element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $length = "";	/**	 * Type enclosure element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $type = "";}/** * JFeedImage is an internal class that stores feed image information * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JFeedImage{	/**	 * Title image attribute	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $title = "";	/**	 * URL image attribute	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $url = "";	/**	 * Link image attribute	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $link = "";	/**	 * Width image attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $width;	/**	 * Title feed attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $height;	/**	 * Title feed attribute	 *	 * optional	 *	 * @var    string	 * @since  11.1	 */	public $description;}
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Text handling class. * * @package     Joomla.Platform * @subpackage  Language * @since       11.1 */class JText{	/**	 * javascript strings	 *	 * @var    array	 * @since  11.1	 */	protected static $strings = array();	/**	 * Translates a string into the current language.	 *	 * Examples:	 * <script>alert(Joomla.JText._('<?php echo JText::_("JDEFAULT", array("script"=>true));?>'));</script>	 * will generate an alert message containing 'Default'	 * <?php echo JText::_("JDEFAULT");?> it will generate a 'Default' string	 *	 * @param   string   $string                The string to translate.	 * @param   mixed    $jsSafe                Boolean: Make the result javascript safe.	 * @param   boolean  $interpretBackSlashes  To interpret backslashes (\\=\, \n=carriage return, \t=tabulation)	 * @param   boolean  $script                To indicate that the string will be push in the javascript language store	 *	 * @return  string  The translated string or the key is $script is true	 *	 * @since   11.1	 */	public static function _($string, $jsSafe = false, $interpretBackSlashes = true, $script = false)	{		$lang = JFactory::getLanguage();		if (is_array($jsSafe))		{			if (array_key_exists('interpretBackSlashes', $jsSafe))			{				$interpretBackSlashes = (boolean) $jsSafe['interpretBackSlashes'];			}			if (array_key_exists('script', $jsSafe))			{				$script = (boolean) $jsSafe['script'];			}			if (array_key_exists('jsSafe', $jsSafe))			{				$jsSafe = (boolean) $jsSafe['jsSafe'];			}			else			{				$jsSafe = false;			}		}		if ($script)		{			self::$strings[$string] = $lang->_($string, $jsSafe, $interpretBackSlashes);			return $string;		}		else		{			return $lang->_($string, $jsSafe, $interpretBackSlashes);		}	}	/**	 * Translates a string into the current language.	 *	 * Examples:	 * <?php echo JText::alt("JALL","language");?> it will generate a 'All' string in English but a "Toutes" string in French	 * <?php echo JText::alt("JALL","module");?> it will generate a 'All' string in English but a "Tous" string in French	 *	 * @param   string   $string                The string to translate.	 * @param   string   $alt                   The alternate option for global string	 * @param   mixed    $jsSafe                Boolean: Make the result javascript safe.	 * @param   boolean  $interpretBackSlashes  To interpret backslashes (\\=\, \n=carriage return, \t=tabulation)	 * @param   boolean  $script                To indicate that the string will be pushed in the javascript language store	 *	 * @return  string  The translated string or the key if $script is true	 *	 * @since   11.1	 */	public static function alt($string, $alt, $jsSafe = false, $interpretBackSlashes = true, $script = false)	{		$lang = JFactory::getLanguage();		if ($lang->hasKey($string . '_' . $alt))		{			return self::_($string . '_' . $alt, $jsSafe, $interpretBackSlashes);		}		else		{			return self::_($string, $jsSafe, $interpretBackSlashes);		}	}	/**	 * Like JText::sprintf but tries to pluralise the string.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * The last argument can take an array of options:	 *	 * array('jsSafe'=>boolean, 'interpretBackSlashes'=>boolean, 'script'=>boolean)	 *	 * where:	 *	 * jsSafe is a boolean to generate a javascript safe strings.	 * interpretBackSlashes is a boolean to interpret backslashes \\->\, \n->new line, \t->tabulation.	 * script is a boolean to indicate that the string will be push in the javascript language store.	 *	 * Examples:	 * <script>alert(Joomla.JText._('<?php echo JText::plural("COM_PLUGINS_N_ITEMS_UNPUBLISHED", 1, array("script"=>true));?>'));</script>	 * will generate an alert message containing '1 plugin successfully disabled'	 * <?php echo JText::plural("COM_PLUGINS_N_ITEMS_UNPUBLISHED", 1);?> it will generate a '1 plugin successfully disabled' string	 *	 * @param   string   $string  The format string.	 * @param   integer  $n       The number of items	 *	 * @return  string  The translated strings or the key if 'script' is true in the array of options	 *	 * @since   11.1	 */	public static function plural($string, $n)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 1)		{			// Try the key from the language plural potential suffixes			$found = false;			$suffixes = $lang->getPluralSuffixes((int) $n);			array_unshift($suffixes, (int) $n);			foreach ($suffixes as $suffix)			{				$key = $string . '_' . $suffix;				if ($lang->hasKey($key))				{					$found = true;					break;				}			}			if (!$found)			{				// Not found so revert to the original.				$key = $string;			}			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$key, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);				if (array_key_exists('script', $args[$count - 1]) && $args[$count - 1]['script'])				{					self::$strings[$key] = call_user_func_array('sprintf', $args);					return $key;				}			}			else			{				$args[0] = $lang->_($key);			}			return call_user_func_array('sprintf', $args);		}		elseif ($count > 0)		{			// Default to the normal sprintf handling.			$args[0] = $lang->_($string);			return call_user_func_array('sprintf', $args);		}		return '';	}	/**	 * Passes a string thru a sprintf.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * The last argument can take an array of options:	 *	 * array('jsSafe'=>boolean, 'interpretBackSlashes'=>boolean, 'script'=>boolean)	 *	 * where:	 *	 * jsSafe is a boolean to generate a javascript safe strings.	 * interpretBackSlashes is a boolean to interpret backslashes \\->\, \n->new line, \t->tabulation.	 * script is a boolean to indicate that the string will be push in the javascript language store.	 *	 * @param   string  $string  The format string.	 *	 * @return  string  The translated strings or the key if 'script' is true in the array of options.	 *	 * @since   11.1	 */	public static function sprintf($string)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 0)		{			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$string, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);				if (array_key_exists('script', $args[$count - 1]) && $args[$count - 1]['script'])				{					self::$strings[$string] = call_user_func_array('sprintf', $args);					return $string;				}			}			else			{				$args[0] = $lang->_($string);			}			return call_user_func_array('sprintf', $args);		}		return '';	}	/**	 * Passes a string thru an printf.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * @param   format  $string  The format string.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public static function printf($string)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 0)		{			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$string, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);			}			else			{				$args[0] = $lang->_($string);			}			return call_user_func_array('printf', $args);		}		return '';	}	/**	 * Translate a string into the current language and stores it in the JavaScript language store.	 *	 * @param   string   $string                The JText key.	 * @param   boolean  $jsSafe                Ensure the output is JavaScript safe.	 * @param   boolean  $interpretBackSlashes  Interpret \t and \n.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function script($string = null, $jsSafe = false, $interpretBackSlashes = true)	{		if (is_array($jsSafe))		{			if (array_key_exists('interpretBackSlashes', $jsSafe))			{				$interpretBackSlashes = (boolean) $jsSafe['interpretBackSlashes'];			}			if (array_key_exists('jsSafe', $jsSafe))			{				$jsSafe = (boolean) $jsSafe['jsSafe'];			}			else			{				$jsSafe = false;			}		}		// Add the string to the array if not null.		if ($string !== null)		{			// Normalize the key and translate the string.			self::$strings[strtoupper($string)] = JFactory::getLanguage()->_($string, $jsSafe, $interpretBackSlashes);		}		return self::$strings;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one MySQL DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeitemMysql extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand == 'ADD COLUMN')			{				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD_COLUMN';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand == 'ADD INDEX' || $alterCommand == 'ADD UNIQUE')			{				if ($pos = strpos($wordArray[5], '('))				{					$index = $this->fixQuote(substr($wordArray[5], 0, $pos));				}				else				{					$index = $this->fixQuote($wordArray[5]);				}				$result = 'SHOW INDEXES IN ' . $wordArray[2] . ' WHERE Key_name = ' . $index;				$this->queryType = 'ADD_INDEX';				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif ($alterCommand == 'DROP INDEX')			{				$index = $this->fixQuote($wordArray[5]);				$result = 'SHOW INDEXES IN ' . $wordArray[2] . ' WHERE Key_name = ' . $index;				$this->queryType = 'DROP_INDEX';				$this->checkQueryExpected = 0;				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif ($alterCommand == 'DROP COLUMN')			{				$index = $this->fixQuote($wordArray[5]);				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE Field = ' . $index;				$this->queryType = 'DROP_COLUMN';				$this->checkQueryExpected = 0;				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif (strtoupper($wordArray[3]) == 'MODIFY')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($wordArray[5]);				if (isset($wordArray[6]))				{					$type = $this->fixQuote($this->fixInteger($wordArray[5], $wordArray[6]));				}				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[4]) . ' AND type = ' . $type;				$this->queryType = 'CHANGE_COLUMN_TYPE';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]), $type);			}			elseif (strtoupper($wordArray[3]) == 'CHANGE')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($this->fixInteger($wordArray[6], $wordArray[7]));				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[4]) . ' AND type = ' . $type;				$this->queryType = 'CHANGE_COLUMN_TYPE';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]), $type);			}		}		if ($command == 'CREATE TABLE')		{			if (strtoupper($wordArray[2] . $wordArray[3] . $wordArray[4]) == 'IFNOTEXISTS')			{				$table = $wordArray[5];			}			else			{				$table = $wordArray[2];			}			$result = 'SHOW TABLES LIKE ' . $this->fixQuote($table);			$this->queryType = 'CREATE_TABLE';			$this->msgElements = array($this->fixQuote($table));		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with MySQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   2.5	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == "integer" && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'int(10) unsigned';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   2.5	 */	private function fixQuote($string)	{		$string = str_replace('`', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Issues class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubIssues extends JGithubObject{	/**	 * Method to create an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $title      The title of the new issue.	 * @param   string   $body       The body text for the new issue.	 * @param   string   $assignee   The login for the GitHub user that this issue should be assigned to.	 * @param   integer  $milestone  The milestone to associate this issue with.	 * @param   array    $labels     The labels to associate with this issue.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $title, $body = null, $assignee = null, $milestone = null, array $labels = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues';		// Ensure that we have a non-associative array.		if (isset($labels))		{			$labels = array_values($labels);		}		// Build the request data.		$data = json_encode(			array(				'title' => $title,				'assignee' => $assignee,				'milestone' => $milestone,				'labels' => $labels,				'body' => $body			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on an issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 * @param   string   $body     The comment body text.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createComment($user, $repo, $issueId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $name   The label name.	 * @param   string  $color  The label color.	 *	 * @return  object	 *	 * @since   12.3	 */	public function createLabel($user, $repo, $name, $color)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels';		// Build the request data.		$data = json_encode(			array(				'name' => $name,				'color' => $color			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to delete.	 *	 * @return  void	 *	 * @since   11.3	 */	public function deleteComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to delete a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $label  The label name.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deleteLabel($user, $repo, $label)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $label;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to update an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $issueId    The issue number.	 * @param   string   $state      The optional new state for the issue. [open, closed]	 * @param   string   $title      The title of the new issue.	 * @param   string   $body       The body text for the new issue.	 * @param   string   $assignee   The login for the GitHub user that this issue should be assigned to.	 * @param   integer  $milestone  The milestone to associate this issue with.	 * @param   array    $labels     The labels to associate with this issue.	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $issueId, $state = null, $title = null, $body = null, $assignee = null, $milestone = null, array $labels = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if (isset($title))		{			$data->title = $title;		}		// If a body is set add it to the data object.		if (isset($body))		{			$data->body = $body;		}		// If a state is set add it to the data object.		if (isset($state))		{			$data->state = $state;		}		// If an assignee is set add it to the data object.		if (isset($assignee))		{			$data->assignee = $assignee;		}		// If a milestone is set add it to the data object.		if (isset($milestone))		{			$data->milestone = $milestone;		}		// If labels are set add them to the data object.		if (isset($labels))		{			// Ensure that we have a non-associative array.			if (isset($labels))			{				$labels = array_values($labels);			}			$data->labels = $labels;		}		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to update.	 * @param   string   $body       The new body text for the comment.	 *	 * @return  object	 *	 * @since   11.3	 */	public function editComment($user, $repo, $commentId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Build the request data.		$data = json_encode(			array(				'body' => $body			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $label  The label name.	 * @param   string  $name   The label name.	 * @param   string  $color  The label color.	 *	 * @return  object	 *	 * @since   12.3	 */	public function editLabel($user, $repo, $label, $name, $color)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $label;		// Build the request data.		$data = json_encode(			array(				'name' => $name,				'color' => $color			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $issueId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The comment id to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function getComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of comments on an issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 * @param   integer  $page     The page number from which to get items.	 * @param   integer  $limit    The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getComments($user, $repo, $issueId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific label on a repo.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $name  The label name to get.	 *	 * @return  object	 *	 * @since   12.3	 */	public function getLabel($user, $repo, $name)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $name;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of labels on a repo.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 *	 * @return  array	 *	 * @since   12.3	 */	public function getLabels($user, $repo)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list an authenticated user's issues.	 *	 * @param   string   $filter     The filter type: assigned, created, mentioned, subscribed.	 * @param   string   $state      The optional state to filter requests by. [open, closed]	 * @param   string   $labels     The list of comma separated Label names. Example: bug,ui,@high.	 * @param   string   $sort       The sort order: created, updated, comments, default: created.	 * @param   string   $direction  The list direction: asc or desc, default: desc.	 * @param   JDate    $since      The date/time since when issues should be returned.	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($filter = null, $state = null, $labels = null, $sort = null, $direction = null, JDate $since = null, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/issues';		// TODO Implement the filtering options.		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list issues.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $milestone  The milestone number, 'none', or *.	 * @param   string   $state      The optional state to filter requests by. [open, closed]	 * @param   string   $assignee   The assignee name, 'none', or *.	 * @param   string   $mentioned  The GitHub user name.	 * @param   string   $labels     The list of comma separated Label names. Example: bug,ui,@high.	 * @param   string   $sort       The sort order: created, updated, comments, default: created.	 * @param   string   $direction  The list direction: asc or desc, default: desc.	 * @param   JDate    $since      The date/time since when issues should be returned.	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getListByRepository($user, $repo, $milestone = null, $state = null, $assignee = null, $mentioned = null, $labels = null,		$sort = null, $direction = null, JDate $since = null, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues';		$uri = new JUri($this->fetchUrl($path, $page, $limit));		if ($milestone)		{			$uri->setVar('milestone', $milestone);		}		if ($state)		{			$uri->setVar('state', $state);		}		if ($assignee)		{			$uri->setVar('assignee', $assignee);		}		if ($mentioned)		{			$uri->setVar('mentioned', $mentioned);		}		if ($labels)		{			$uri->setVar('labels', $labels);		}		if ($sort)		{			$uri->setVar('sort', $sort);		}		if ($direction)		{			$uri->setVar('direction', $direction);		}		if ($since)		{			$uri->setVar('since', $since->toISO8601());		}		// Send the request.		$response = $this->client->get((string) $uri);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto */abstract class MailtoHelper{	/**	 * Adds a URL to the mailto system and returns the hash	 *	 * @param string url	 * @return URL hash	 */	public static function addLink($url)	{		$hash = sha1($url);		self::cleanHashes();		$session = JFactory::getSession();		$mailto_links = $session->get('com_mailto.links', array());		if (!isset($mailto_links[$hash]))		{			$mailto_links[$hash] = new stdClass;		}		$mailto_links[$hash]->link = $url;		$mailto_links[$hash]->expiry = time();		$session->set('com_mailto.links', $mailto_links);		return $hash;	}	/**	 * Checks if a URL is a Flash file	 *	 * @param string	 * @return URL	 */	public static function validateHash($hash)	{		$retval = false;		$session = JFactory::getSession();		self::cleanHashes();		$mailto_links = $session->get('com_mailto.links', array());		if (isset($mailto_links[$hash]))		{			$retval = $mailto_links[$hash]->link;		}		return $retval;	}	/**	 * Cleans out old hashes	 *	 * @since 1.6.1	 */	public static function cleanHashes($lifetime = 1440)	{		// flag for if we've cleaned on this cycle		static $cleaned = false;		if (!$cleaned)		{			$past = time() - $lifetime;			$session = JFactory::getSession();			$mailto_links = $session->get('com_mailto.links', array());			foreach ($mailto_links as $index => $link)			{				if ($link->expiry < $past)				{					unset($mailto_links[$index]);				}			}			$session->set('com_mailto.links', $mailto_links);			$cleaned = true;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for mcrypt algorithm encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */abstract class JCryptCipherMcrypt implements JCryptCipher{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType;	/**	 * Constructor.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function __construct()	{		if (!is_callable('mcrypt_encrypt'))		{			throw new RuntimeException('The mcrypt extension is not available.');		}	}	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 */	public function decrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != $this->keyType)		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected ' . $this->keyType . '.');		}		// Decrypt the data.		$decrypted = trim(mcrypt_decrypt($this->type, $key->private, $data, $this->mode, $key->public));		return $decrypted;	}	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 */	public function encrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != $this->keyType)		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected ' . $this->keyType . '.');		}		// Encrypt the data.		$encrypted = mcrypt_encrypt($this->type, $key->private, $data, $this->mode, $key->public);		return $encrypted;	}	/**	 * Method to generate a new encryption key object.	 *	 * @param   array  $options  Key generation options.	 *	 * @return  JCryptKey	 *	 * @since   12.1	 */	public function generateKey(array $options = array())	{		// Create the new encryption key object.		$key = new JCryptKey($this->keyType);		// Generate an initialisation vector based on the algorithm.		$key->public = mcrypt_create_iv(mcrypt_get_iv_size($this->type, $this->mode));		// Get the salt and password setup.		$salt = (isset($options['salt'])) ? $options['salt'] : substr(pack("h*", md5(mt_rand())), 0, 16);		$password = (isset($options['password'])) ? $options['password'] : 'J00ml4R0ck$!';		// Generate the derived key.		$key->private = $this->pbkdf2($password, $salt, mcrypt_get_key_size($this->type, $this->mode));		return $key;	}	/**	 * PBKDF2 Implementation for deriving keys.	 *	 * @param   string   $p   Password	 * @param   string   $s   Salt	 * @param   integer  $kl  Key length	 * @param   integer  $c   Iteration count	 * @param   string   $a   Hash algorithm	 *	 * @return  string  The derived key.	 *	 * @see     http://en.wikipedia.org/wiki/PBKDF2	 * @see     http://www.ietf.org/rfc/rfc2898.txt	 * @since   12.1	 */	public function pbkdf2($p, $s, $kl, $c = 10000, $a = 'sha256')	{		// Hash length.		$hl = strlen(hash($a, null, true));		// Key blocks to compute.		$kb = ceil($kl / $hl);		// Derived key.		$dk = '';		// Create the key.		for ($block = 1; $block <= $kb; $block++)		{			// Initial hash for this block.			$ib = $b = hash_hmac($a, $s . pack('N', $block), $p, true);			// Perform block iterations.			for ($i = 1; $i < $c; $i++)			{				$ib ^= ($b = hash_hmac($a, $b, $p, true));			}			// Append the iterated block.			$dk .= $ib;		}		// Return derived key of correct length.		return substr($dk, 0, $kl);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$list		= ModMenuHelper::getList($params);$base		= ModMenuHelper::getBase($params);$active		= ModMenuHelper::getActive($params);$active_id 	= $active->id;$path		= $base->tree;$showAll	= $params->get('showAllChildren');$class_sfx	= htmlspecialchars($params->get('class_sfx'));if (count($list)){	require JModuleHelper::getLayoutPath('mod_menu', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users mail view. * * @package     Joomla.Administrator * @subpackage  com_users */class UsersViewMail extends JViewLegacy{	/**	 * @var object form object	 */	protected $form;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Get data from the model		$this->form = $this->get('Form');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		JToolbarHelper::title(JText::_('COM_USERS_MASS_MAIL'), 'massmail.png');		JToolbarHelper::custom('mail.send', 'envelope.png', 'send_f2.png', 'COM_USERS_TOOLBAR_MAIL_SEND_MAIL', false);		JToolbarHelper::cancel('mail.cancel');		JToolbarHelper::divider();		JToolbarHelper::preferences('com_users');		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_MASS_MAIL_USERS');	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="modified">				<span class="icon-calendar"></span>				<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $displayData['item']->modified, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract class for a renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRenderer{	/**	 * Reference to the JDocument object that instantiated the renderer	 *	 * @var    JDocument	 * @since  11.1	 */	protected $_doc = null;	/**	 * Renderer mime type	 *	 * @var    string	 * @since  11.1	 */	protected $_mime = "text/html";	/**	 * Class constructor	 *	 * @param   JDocument  $doc  A reference to the JDocument object that instantiated the renderer	 *	 * @since   11.1	 */	public function __construct(JDocument $doc)	{		$this->_doc = $doc;	}	/**	 * Renders a script and returns the results as a string	 *	 * @param   string  $name     The name of the element to render	 * @param   array   $params   Array of values	 * @param   string  $content  Override the output of the renderer	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($name, $params = null, $content = null)	{	}	/**	 * Return the content type of the renderer	 *	 * @return  string  The contentType	 *	 * @since   11.1	 */	public function getContentType()	{		return $this->_mime;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class for using sockets directly. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpTransportSocket implements JHttpTransport{	/**	 * @var    array  Reusable socket connections.	 * @since  11.3	 */	protected $connections;	/**	 * @var    JRegistry  The client options.	 * @since  11.3	 */	protected $options;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct(JRegistry $options)	{		if (!self::isSupported())		{			throw new RuntimeException('Cannot use a socket transport when fsockopen() is not available.');		}		$this->options = $options;	}	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null)	{		$connection = $this->connect($uri, $timeout);		// Make sure the connection is alive and valid.		if (is_resource($connection))		{			// Make sure the connection has not timed out.			$meta = stream_get_meta_data($connection);			if ($meta['timed_out'])			{				throw new RuntimeException('Server connection timed out.');			}		}		else		{			throw new RuntimeException('Not connected to server.');		}		// Get the request path from the URI object.		$path = $uri->toString(array('path', 'query'));		// If we have data to send make sure our request is setup for it.		if (!empty($data))		{			// If the data is not a scalar value encode it to be sent with the request.			if (!is_scalar($data))			{				$data = http_build_query($data);			}			if (!isset($headers['Content-Type']))			{				$headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';			}			// Add the relevant headers.			$headers['Content-Length'] = strlen($data);		}		// Build the request payload.		$request = array();		$request[] = strtoupper($method) . ' ' . ((empty($path)) ? '/' : $path) . ' HTTP/1.0';		$request[] = 'Host: ' . $uri->getHost();		// If an explicit user agent is given use it.		if (isset($userAgent))		{			$headers['User-Agent'] = $userAgent;		}		// If there are custom headers to send add them to the request payload.		if (is_array($headers))		{			foreach ($headers as $k => $v)			{				$request[] = $k . ': ' . $v;			}		}		// If we have data to send add it to the request payload.		if (!empty($data))		{			$request[] = null;			$request[] = $data;		}		// Send the request to the server.		fwrite($connection, implode("\r\n", $request) . "\r\n\r\n");		// Get the response data from the server.		$content = '';		while (!feof($connection))		{			$content .= fgets($connection, 4096);		}		return $this->getResponse($content);	}	/**	 * Method to get a response object from a server response.	 *	 * @param   string  $content  The complete server response, including headers.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  UnexpectedValueException	 */	protected function getResponse($content)	{		// Create the response object.		$return = new JHttpResponse;		// Split the response into headers and body.		$response = explode("\r\n\r\n", $content, 2);		// Get the response headers as an array.		$headers = explode("\r\n", $response[0]);		// Set the body for the response.		$return->body = $response[1];		// Get the response code from the first offset of the response headers.		preg_match('/[0-9]{3}/', array_shift($headers), $matches);		$code = $matches[0];		if (is_numeric($code))		{			$return->code = (int) $code;		}		// No valid response code was detected.		else		{			throw new UnexpectedValueException('No HTTP response code found.');		}		// Add the response headers to the response object.		foreach ($headers as $header)		{			$pos = strpos($header, ':');			$return->headers[trim(substr($header, 0, $pos))] = trim(substr($header, ($pos + 1)));		}		return $return;	}	/**	 * Method to connect to a server and get the resource.	 *	 * @param   JUri     $uri      The URI to connect with.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  resource  Socket connection resource.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	protected function connect(JUri $uri, $timeout = null)	{		$errno = null;		$err = null;		// Get the host from the uri.		$host = ($uri->isSSL()) ? 'ssl://' . $uri->getHost() : $uri->getHost();		// If the port is not explicitly set in the URI detect it.		if (!$uri->getPort())		{			$port = ($uri->getScheme() == 'https') ? 443 : 80;		}		// Use the set port.		else		{			$port = $uri->getPort();		}		// Build the connection key for resource memory caching.		$key = md5($host . $port);		// If the connection already exists, use it.		if (!empty($this->connections[$key]) && is_resource($this->connections[$key]))		{			// Connection reached EOF, cannot be used anymore			$meta = stream_get_meta_data($this->connections[$key]);			if ($meta['eof'])			{				if (!fclose($this->connections[$key]))				{					throw new RuntimeException('Cannot close connection');				}			}			// Make sure the connection has not timed out.			elseif (!$meta['timed_out'])			{				return $this->connections[$key];			}		}		if (!is_numeric($timeout))		{			$timeout = ini_get("default_socket_timeout");		}		// Attempt to connect to the server.		$connection = fsockopen($host, $port, $errno, $err, $timeout);		if (!$connection)		{			throw new RuntimeException($err, $errno);		}		// Since the connection was successful let's store it in case we need to use it later.		$this->connections[$key] = $connection;		// If an explicit timeout is set, set it.		if (isset($timeout))		{			stream_set_timeout($this->connections[$key], (int) $timeout);		}		return $this->connections[$key];	}	/**	 * method to check if http transport socket available for using	 *	 * @return bool true if available else false	 *	 * @since   12.1	 */	static public function isSupported()	{		return function_exists('fsockopen') && is_callable('fsockopen');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_checkin');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CHECKIN_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table id="global-checkin" class="adminlist">		<thead>			<tr>				<th width="1%">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="left"><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_DATABASE_TABLE', 'table', $listDirn, $listOrder); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_ITEMS_TO_CHECK_IN', 'count', $listDirn, $listOrder); ?></th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $table => $count): $i = 0;?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center"><?php echo JHtml::_('grid.id', $i, $table); ?></td>				<td><?php echo JText::sprintf('COM_CHECKIN_TABLE', $table); ?></td>				<td width="200" class="center"><?php echo $count; ?></td>			</tr>		<?php endforeach;?>		</tbody>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>	</table>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$images = json_decode($this->item->images);$urls = json_decode($this->item->urls);JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// Create shortcut to parameters.$params = $this->item->params;?><article class="item-page<?php echo $this->pageclass_sfx?>"><?php if ($this->params->get('show_page_heading')) : ?><?php if ($this->params->get('show_page_heading') and $params->get('show_title')) :?><hgroup><?php endif; ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?phpif (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && $this->item->paginationrelative){	echo $this->item->pagination;}if ($params->get('show_title')) : ?>		<h2>			<?php echo $this->escape($this->item->title); ?>		</h2><?php endif; ?><?php if ($this->params->get('show_page_heading') and $params->get('show_title')) :?></hgroup><?php endif; ?><?php if ($params->get('access-edit') ||  $params->get('show_print_icon') || $params->get('show_email_icon')) : ?>		<ul class="actions">		<?php if (!$this->print) : ?>				<?php if ($params->get('show_print_icon')) : ?>				<li class="print-icon">						<?php echo JHtml::_('icon.print_popup', $this->item, $params, array(), true); ?>				</li>				<?php endif; ?>				<?php if ($params->get('show_email_icon')) : ?>				<li class="email-icon">						<?php echo JHtml::_('icon.email', $this->item, $params, array(), true); ?>				</li>				<?php endif; ?>				<?php if ($this->user->authorise('core.edit', 'com_content.article.'.$this->item->id)) : ?>						<li class="edit-icon">							<?php echo JHtml::_('icon.edit', $this->item, $params, array(), true); ?>						</li>					<?php endif; ?>		<?php else : ?>				<li>						<?php echo JHtml::_('icon.print_screen', $this->item, $params, array(), true); ?>				</li>		<?php endif; ?>		</ul><?php endif; ?>	<?php  if (!$params->get('show_intro')) :		echo $this->item->event->afterDisplayTitle;	endif; ?>	<?php echo $this->item->event->beforeDisplayContent; ?><?php $useDefList = (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_parent_category'))	or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date'))	or ($params->get('show_hits'))); ?><?php if ($useDefList) : ?> <dl class="article-info"> <dt class="article-info-term"><?php  echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt><?php endif; ?><?php if ($params->get('show_parent_category') && $this->item->parent_slug != '1:root') : ?>		<dd class="parent-category-name">			<?php 	$title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_parent_category') and $this->item->parent_slug) : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_category')) : ?>		<dd class="category-name">			<?php 	$title = $this->escape($this->item->category_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_category') and $this->item->catslug) : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_create_date')) : ?>		<dd class="create">		<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_modify_date')) : ?>		<dd class="modified">		<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_publish_date')) : ?>		<dd class="published">		<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_author') && !empty($this->item->author )) : ?>	<dd class="createdby">		<?php $author = $this->item->author; ?>		<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author);?>			<?php if (!empty($this->item->contactid ) &&  $params->get('link_author') == true):?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY',					JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id=' . $this->item->contactid), $author)				); ?>			<?php else :?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>			<?php endif; ?>	</dd><?php endif; ?><?php if ($params->get('show_hits')) : ?>		<dd class="hits">		<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>		</dd><?php endif; ?><?php if ($useDefList) : ?> </dl><?php endif; ?>	<?php if (isset ($this->item->toc)) : ?>		<?php echo $this->item->toc; ?>	<?php endif; ?><?php if (isset($urls) AND ((!empty($urls->urls_position) AND ($urls->urls_position == '0')) OR ($params->get('urls_position') == '0' AND empty($urls->urls_position)))		OR (empty($urls->urls_position) AND (!$params->get('urls_position')))) : ?>	<?php echo $this->loadTemplate('links'); ?><?php endif; ?>	<?php  if (isset($images->image_fulltext) and !empty($images->image_fulltext)) : ?>	<?php $imgfloat = (empty($images->float_fulltext)) ? $params->get('float_fulltext') : $images->float_fulltext; ?>	<div class="img-fulltext-<?php echo htmlspecialchars($imgfloat); ?>">	<img		<?php if ($images->image_fulltext_caption):			echo 'class="caption"'.' title="' .htmlspecialchars($images->image_fulltext_caption) .'"';		endif; ?>		src="<?php echo htmlspecialchars($images->image_fulltext); ?>" alt="<?php echo htmlspecialchars($images->image_fulltext_alt); ?>"/>	</div>	<?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND !$this->item->paginationposition AND !$this->item->paginationrelative):	echo $this->item->pagination;endif;?>	<?php echo $this->item->text; ?><?php // TAGS ?><?php if ($params->get('show_tags', 1) && !empty($this->item->tags)) : ?>	<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>	<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?><?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND $this->item->paginationposition AND!$this->item->paginationrelative):	echo $this->item->pagination;?><?php endif; ?>	<?php if (isset($urls) AND ((!empty($urls->urls_position) AND ($urls->urls_position == '1')) OR ( $params->get('urls_position') == '1'))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?><?phpif (!empty($this->item->pagination) AND $this->item->pagination AND $this->item->paginationposition AND $this->item->paginationrelative):	echo $this->item->pagination;?><?php endif; ?>	<?php echo $this->item->event->afterDisplayContent; ?></article>
<?php/** * @package     Joomla.Site * @subpackage  mod_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$headerText	= trim($params->get('header_text'));$footerText	= trim($params->get('footer_text'));require_once JPATH_ADMINISTRATOR . '/components/com_banners/helpers/banners.php';BannersHelper::updateReset();$list = &ModBannersHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_banners', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheStorage{	/**	 * @var    string  Rawname	 * @since  11.1	 */	protected $rawname;	/**	 * @var    datetime  Now	 * @since  11.1	 */	public $_now;	/**	 * @var    integer  Cache lifetime	 * @since  11.1	 */	public $_lifetime;	/**	 * @var    boolean  Locking	 * @since  11.1	 */	public $_locking;	/**	 * @var    string  Language	 * @since  11.1	 */	public $_language;	/**	 * @var    string  Application name.	 * @since  11.1	 */	public $_application;	/**	 * @var    string  Hash	 * @since  11.1	 */	public $_hash;	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters	 *	 * @since   11.1	 */	public function __construct($options = array())	{		$config = JFactory::getConfig();		$this->_hash = md5($config->get('secret'));		$this->_application = (isset($options['application'])) ? $options['application'] : null;		$this->_language = (isset($options['language'])) ? $options['language'] : 'en-GB';		$this->_locking = (isset($options['locking'])) ? $options['locking'] : true;		$this->_lifetime = (isset($options['lifetime'])) ? $options['lifetime'] * 60 : $config->get('cachetime') * 60;		$this->_now = (isset($options['now'])) ? $options['now'] : time();		// Set time threshold value.  If the lifetime is not set, default to 60 (0 is BAD)		// _threshold is now available ONLY as a legacy (it's deprecated).  It's no longer used in the core.		if (empty($this->_lifetime))		{			$this->_threshold = $this->_now - 60;			$this->_lifetime = 60;		}		else		{			$this->_threshold = $this->_now - $this->_lifetime;		}	}	/**	 * Returns a cache storage handler object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $handler  The cache storage handler to instantiate	 * @param   array   $options  Array of handler options	 *	 * @return  JCacheStorage  A JCacheStorage instance	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 * @throws  RuntimeException	 */	public static function getInstance($handler = null, $options = array())	{		static $now = null;		self::addIncludePath(JPATH_PLATFORM . '/joomla/cache/storage');		if (!isset($handler))		{			$conf = JFactory::getConfig();			$handler = $conf->get('cache_handler');			if (empty($handler))			{				throw new UnexpectedValueException('Cache Storage Handler not set.');			}		}		if (is_null($now))		{			$now = time();		}		$options['now'] = $now;		// We can't cache this since options may change...		$handler = strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $handler));		$class = 'JCacheStorage' . ucfirst($handler);		if (!class_exists($class))		{			// Search for the class file in the JCacheStorage include paths.			jimport('joomla.filesystem.path');			if ($path = JPath::find(self::addIncludePath(), strtolower($handler) . '.php'))			{				include_once $path;			}			else			{				throw new RuntimeException(sprintf('Unable to load Cache Storage: %s', $handler));			}		}		return new $class($options);	}	/**	 * Get cached data by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean  false on failure or a cached data object	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		return false;	}	/**	 * Get all cached data	 *	 * @return  mixed    Boolean false on failure or a cached data object	 *	 * @since   11.1	 * @todo    Review this method. The docblock doesn't fit what it actually does.	 */	public function getAll()	{		if (!class_exists('JCacheStorageHelper', false))		{			include_once JPATH_PLATFORM . '/joomla/cache/storage/helper.php';		}		return;	}	/**	 * Store the data to cache by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		return true;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		return true;	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 *                          group mode     : cleans all cache in the group	 *                          notgroup mode  : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		return true;	}	/**	 * Garbage collect expired cache data	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		return true;	}	/**	 * Test to see if the storage handler is available.	 *	 * @return   boolean  True on success, false otherwise	 *	 * @since    12.1.	 */	public static function isSupported()	{		return true;	}	/**	 * Test to see if the storage handler is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public static function test()	{		JLog::add('JCacheStorage::test() is deprecated. Use JCacheStorage::isSupported() instead.', JLog::WARNING, 'deprecated');		return static::isSupported();	}	/**	 * Lock cached item	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function lock($id, $group, $locktime)	{		return false;	}	/**	 * Unlock cached item	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		return false;	}	/**	 * Get a cache_id string from an id/group pair	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  string   The cache_id string	 *	 * @since   11.1	 */	protected function _getCacheId($id, $group)	{		$name = md5($this->_application . '-' . $id . '-' . $this->_language);		$this->rawname = $this->_hash . '-' . $name;		return $this->_hash . '-cache-' . $group . '-' . $name;	}	/**	 * Add a directory where JCacheStorage should search for handlers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array  An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!empty($path) && !in_array($path, $paths))		{			jimport('joomla.filesystem.path');			array_unshift($paths, JPath::clean($path));		}		return $paths;	}}
<?php/** * Sniffs_Squiz_WhiteSpace_OperatorSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: OperatorSpacingSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Verifies that operators have valid spacing surrounding them. * * Example: * <b class="bad">$a=$b+$c;</b> * <b class="good">$a = $b + $c;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_OperatorSpacingSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        $comparison = PHP_CodeSniffer_Tokens::$comparisonTokens;        $operators  = PHP_CodeSniffer_Tokens::$operators;        $assignment = PHP_CodeSniffer_Tokens::$assignmentTokens;        return array_unique(array_merge($comparison, $operators, $assignment));    }//function    /**     * Processes this sniff, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The current file being checked.     * @param integer                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Skip default values in function declarations.        if($tokens[$stackPtr]['code'] === T_EQUAL        || $tokens[$stackPtr]['code'] === T_MINUS        )        {            if(isset($tokens[$stackPtr]['nested_parenthesis']) === true)            {                $bracket = end($tokens[$stackPtr]['nested_parenthesis']);                if(isset($tokens[$bracket]['parenthesis_owner']) === true)                {                    $function = $tokens[$bracket]['parenthesis_owner'];                    if($tokens[$function]['code'] === T_FUNCTION)                    {                        return;                    }                }            }        }        if($tokens[$stackPtr]['code'] === T_EQUAL)        {            // Skip for '=&' case.            if(isset($tokens[($stackPtr + 1)]) === true            && $tokens[($stackPtr + 1)]['code'] === T_BITWISE_AND            || $tokens[($stackPtr + 1)]['code'] === T_OPEN_PARENTHESIS)            {                return;            }        }        if($tokens[$stackPtr]['code'] === T_EQUAL        || $tokens[$stackPtr]['content'] === '.='        || $tokens[$stackPtr]['content'] === '+=')        {            // Skip for '=(' case.            // Skip also '.=('            if(isset($tokens[($stackPtr + 1)]) === true            && $tokens[($stackPtr + 1)]['code'] === T_OPEN_PARENTHESIS)            {                return;            }        }        if($tokens[$stackPtr]['code'] === T_BITWISE_AND)        {            // If its not a reference, then we expect one space either side of the            // bitwise operator.            if($phpcsFile->isReference($stackPtr) === false)            {                // Check there is one space before the & operator.                if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)                {                    $error = 'Expected 1 space before "&" operator; 0 found';                    $phpcsFile->addError($error, $stackPtr, 'NoSpaceBeforeAmp');                }                else                {                    if(strlen($tokens[($stackPtr - 1)]['content']) !== 1)                    {                        $found = strlen($tokens[($stackPtr - 1)]['content']);                        $error = sprintf('Expected 1 space before "&" operator; %s found'                        , $found);                        $phpcsFile->addError($error, $stackPtr, 'SpacingBeforeAmp');                    }                }                // Check there is one space after the & operator.                if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)                {                    $error = 'Expected 1 space after "&" operator; 0 found';                    $phpcsFile->addError($error, $stackPtr, 'NoSpaceAfterAmp');                }                else                {                    if(strlen($tokens[($stackPtr + 1)]['content']) !== 1)                    {                        $found = strlen($tokens[($stackPtr + 1)]['content']);                        $error = sprintf('Expected 1 space after "&" operator; %s found'                        , $found);                        $phpcsFile->addError($error, $stackPtr, 'SpacingAfterAmp');                    }                }            }        }        else        {            if($tokens[$stackPtr]['code'] === T_MINUS            || $tokens[$stackPtr]['code'] === T_PLUS)            {                // Check minus spacing, but make sure we aren't just assigning                // a minus value or returning one.                $prev = $phpcsFile->findPrevious(T_WHITESPACE, ($stackPtr - 1), null, true);                if($tokens[$prev]['code'] === T_RETURN)                {                    // Just returning a negative value; eg. return -1.                    return;                }                if(in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$operators) === true)                {                    // Just trying to operate on a negative value; eg. ($var * -1).                    return;                }                if(in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$comparisonTokens) === true)                {                    // Just trying to compare a negative value; eg. ($var === -1).                    return;                }                // A list of tokens that indicate that the token is not                // part of an arithmetic operation.                $invalidTokens = array(                T_COMMA,                T_OPEN_PARENTHESIS,                T_OPEN_SQUARE_BRACKET,                T_DOUBLE_ARROW,                T_COLON,                T_INLINE_THEN, // the ternary "?"                T_CASE                );                if(in_array($tokens[$prev]['code'], $invalidTokens) === true)                {                    // Just trying to use a negative value; eg. myFunction($var, -2).                    return;                }                $number = $phpcsFile->findNext(T_WHITESPACE, ($stackPtr + 1), null, true);                if(in_array($tokens[$number]['code'], array(T_LNUMBER, T_VARIABLE)) === true)                {                    $semi = $phpcsFile->findNext(T_WHITESPACE, ($number + 1), null, true);                    if($tokens[$semi]['code'] === T_SEMICOLON)                    {                        if($prev !== false                        && (in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$assignmentTokens) === true))                        {                            // This is a negative assignment.                            return;                        }                    }                }            }            $operator = $tokens[$stackPtr]['content'];            if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)            {                $error = "Expected 1 space before \"$operator\"; 0 found";                $phpcsFile->addError($error, $stackPtr, 'NoSpaceBefore');            }            else if(strlen($tokens[($stackPtr - 1)]['content']) !== 1)            {                // Don't throw an error for assignments, because other standards allow                // multiple spaces there to align multiple assignments.                if(in_array($tokens[$stackPtr]['code'], PHP_CodeSniffer_Tokens::$assignmentTokens) === false)                {                    $found = strlen($tokens[($stackPtr - 1)]['content']);                    $error = sprintf('Expected 1 space before "%s"; %s found'                    , $operator, $found);                    $phpcsFile->addError($error, $stackPtr, 'SpacingBefore');                }            }            if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)            {                $error = "Expected 1 space after \"$operator\"; 0 found";                $phpcsFile->addError($error, $stackPtr, 'NoSpaceAfter');            }            else if(strlen($tokens[($stackPtr + 1)]['content']) !== 1)            {                $found = strlen($tokens[($stackPtr + 1)]['content']);                $error = sprintf('Expected 1 space after "%s"; %s found'                , $operator, $found);                $phpcsFile->addError($error, $stackPtr, 'SpacingAfter');            }        }    }//function}//class
<?php/** * @package     Joomla.Installation * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * Joomla system checks. */error_reporting(E_ALL);ini_set('display_errors', true);const JDEBUG = false;@ini_set('magic_quotes_runtime', 0);/* * Check if a configuration file already exists. */if (file_exists(JPATH_CONFIGURATION . '/configuration.php')	&& (filesize(JPATH_CONFIGURATION . '/configuration.php') > 10)	&& !file_exists(JPATH_INSTALLATION . '/index.php')){	header('Location: ../index.php');	exit();}/* * Joomla system startup. */// Import the Joomla Platform.require_once JPATH_LIBRARIES . '/import.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to model a Web Client. * * @property-read  integer  $platform        The detected platform on which the web client runs. * @property-read  boolean  $mobile          True if the web client is a mobile device. * @property-read  integer  $engine          The detected rendering engine used by the web client. * @property-read  integer  $browser         The detected browser used by the web client. * @property-read  string   $browserVersion  The detected browser version used by the web client. * @property-read  array    $languages       The priority order detected accepted languages for the client. * @property-read  array    $encodings       The priority order detected accepted encodings for the client. * @property-read  string   $userAgent       The web client's user agent string. * @property-read  string   $acceptEncoding  The web client's accepted encoding string. * @property-read  string   $acceptLanguage  The web client's accepted languages string. * @property-read  array    $detection       An array of flags determining whether or not a detection routine has been run. * @property-read  boolean  $robot           True if the web client is a robot * * @package     Joomla.Platform * @subpackage  Application * @since       12.1 */class JApplicationWebClient{	const WINDOWS = 1;	const WINDOWS_PHONE = 2;	const WINDOWS_CE = 3;	const IPHONE = 4;	const IPAD = 5;	const IPOD = 6;	const MAC = 7;	const BLACKBERRY = 8;	const ANDROID = 9;	const LINUX = 10;	const TRIDENT = 11;	const WEBKIT = 12;	const GECKO = 13;	const PRESTO = 14;	const KHTML = 15;	const AMAYA = 16;	const IE = 17;	const FIREFOX = 18;	const CHROME = 19;	const SAFARI = 20;	const OPERA = 21;	const ANDROIDTABLET = 22;	/**	 * @var    integer  The detected platform on which the web client runs.	 * @since  12.1	 */	protected $platform;	/**	 * @var    boolean  True if the web client is a mobile device.	 * @since  12.1	 */	protected $mobile = false;	/**	 * @var    integer  The detected rendering engine used by the web client.	 * @since  12.1	 */	protected $engine;	/**	 * @var    integer  The detected browser used by the web client.	 * @since  12.1	 */	protected $browser;	/**	 * @var    string  The detected browser version used by the web client.	 * @since  12.1	 */	protected $browserVersion;	/**	 * @var    array  The priority order detected accepted languages for the client.	 * @since  12.1	 */	protected $languages = array();	/**	 * @var    array  The priority order detected accepted encodings for the client.	 * @since  12.1	 */	protected $encodings = array();	/**	 * @var    string  The web client's user agent string.	 * @since  12.1	 */	protected $userAgent;	/**	 * @var    string  The web client's accepted encoding string.	 * @since  12.1	 */	protected $acceptEncoding;	/**	 * @var    string  The web client's accepted languages string.	 * @since  12.1	 */	protected $acceptLanguage;	/**	 * @var    boolean  True if the web client is a robot.	 * @since  12.3	 */	protected $robot = false;	/**	 * @var    array  An array of flags determining whether or not a detection routine has been run.	 * @since  12.1	 */	protected $detection = array();	/**	 * Class constructor.	 *	 * @param   string  $userAgent       The optional user-agent string to parse.	 * @param   string  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   string  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   12.1	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		// If no explicit user agent string was given attempt to use the implicit one from server environment.		if (empty($userAgent) && isset($_SERVER['HTTP_USER_AGENT']))		{			$this->userAgent = $_SERVER['HTTP_USER_AGENT'];		}		else		{			$this->userAgent = $userAgent;		}		// If no explicit acceptable encoding string was given attempt to use the implicit one from server environment.		if (empty($acceptEncoding) && isset($_SERVER['HTTP_ACCEPT_ENCODING']))		{			$this->acceptEncoding = $_SERVER['HTTP_ACCEPT_ENCODING'];		}		else		{			$this->acceptEncoding = $acceptEncoding;		}		// If no explicit acceptable languages string was given attempt to use the implicit one from server environment.		if (empty($acceptLanguage) && isset($_SERVER['HTTP_ACCEPT_LANGUAGE']))		{			$this->acceptLanguage = $_SERVER['HTTP_ACCEPT_LANGUAGE'];		}		else		{			$this->acceptLanguage = $acceptLanguage;		}	}	/**	 * Magic method to get an object property's value by name.	 *	 * @param   string  $name  Name of the property for which to return a value.	 *	 * @return  mixed  The requested value if it exists.	 *	 * @since   12.1	 */	public function __get($name)	{		switch ($name)		{			case 'mobile':			case 'platform':				if (empty($this->detection['platform']))				{					$this->detectPlatform($this->userAgent);				}				break;			case 'engine':				if (empty($this->detection['engine']))				{					$this->detectEngine($this->userAgent);				}				break;			case 'browser':			case 'browserVersion':				if (empty($this->detection['browser']))				{					$this->detectBrowser($this->userAgent);				}				break;			case 'languages':				if (empty($this->detection['acceptLanguage']))				{					$this->detectLanguage($this->acceptLanguage);				}				break;			case 'encodings':				if (empty($this->detection['acceptEncoding']))				{					$this->detectEncoding($this->acceptEncoding);				}				break;			case 'robot':				if (empty($this->detection['robot']))				{					$this->detectRobot($this->userAgent);				}				break;		}		// Return the property if it exists.		if (isset($this->$name))		{			return $this->$name;		}	}	/**	 * Detects the client browser and version in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectBrowser($userAgent)	{		// Attempt to detect the browser type.  Obviously we are only worried about major browsers.		if ((stripos($userAgent, 'MSIE') !== false) && (stripos($userAgent, 'Opera') === false))		{			$this->browser = self::IE;			$patternBrowser = 'MSIE';		}		elseif ((stripos($userAgent, 'Firefox') !== false) && (stripos($userAgent, 'like Firefox') === false))		{			$this->browser = self::FIREFOX;			$patternBrowser = 'Firefox';		}		elseif (stripos($userAgent, 'Chrome') !== false)		{			$this->browser = self::CHROME;			$patternBrowser = 'Chrome';		}		elseif (stripos($userAgent, 'Safari') !== false)		{			$this->browser = self::SAFARI;			$patternBrowser = 'Safari';		}		elseif (stripos($userAgent, 'Opera') !== false)		{			$this->browser = self::OPERA;			$patternBrowser = 'Opera';		}		// If we detected a known browser let's attempt to determine the version.		if ($this->browser)		{			// Build the REGEX pattern to match the browser version string within the user agent string.			$pattern = '#(?<browser>Version|' . $patternBrowser . ')[/ ]+(?<version>[0-9.|a-zA-Z.]*)#';			// Attempt to find version strings in the user agent string.			$matches = array();			if (preg_match_all($pattern, $userAgent, $matches))			{				// Do we have both a Version and browser match?				if (count($matches['browser']) == 2)				{					// See whether Version or browser came first, and use the number accordingly.					if (strripos($userAgent, 'Version') < strripos($userAgent, $patternBrowser))					{						$this->browserVersion = $matches['version'][0];					}					else					{						$this->browserVersion = $matches['version'][1];					}				}				elseif (count($matches['browser']) > 2)				{						$key = array_search('Version', $matches['browser']);						if ($key)						{							$this->browserVersion = $matches['version'][$key];						}				}				// We only have a Version or a browser so use what we have.				else				{					$this->browserVersion = $matches['version'][0];				}			}		}		// Mark this detection routine as run.		$this->detection['browser'] = true;	}	/**	 * Method to detect the accepted response encoding by the client.	 *	 * @param   string  $acceptEncoding  The client accept encoding string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEncoding($acceptEncoding)	{		// Parse the accepted encodings.		$this->encodings = array_map('trim', (array) explode(',', $acceptEncoding));		// Mark this detection routine as run.		$this->detection['acceptEncoding'] = true;	}	/**	 * Detects the client rendering engine in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEngine($userAgent)	{		// Attempt to detect the client engine -- starting with the most popular ... for now.		if (stripos($userAgent, 'MSIE') !== false || stripos($userAgent, 'Trident') !== false)		{			$this->engine = self::TRIDENT;		}		// Evidently blackberry uses WebKit and doesn't necessarily report it.  Bad RIM.		elseif (stripos($userAgent, 'AppleWebKit') !== false || stripos($userAgent, 'blackberry') !== false)		{			$this->engine = self::WEBKIT;		}		// We have to check for like Gecko because some other browsers spoof Gecko.		elseif (stripos($userAgent, 'Gecko') !== false && stripos($userAgent, 'like Gecko') === false)		{			$this->engine = self::GECKO;		}		// Sometimes Opera browsers don't say Presto.		elseif (stripos($userAgent, 'Opera') !== false || stripos($userAgent, 'Presto') !== false)		{			$this->engine = self::PRESTO;		}		// *sigh*		elseif (stripos($userAgent, 'KHTML') !== false)		{			$this->engine = self::KHTML;		}		// Lesser known engine but it finishes off the major list from Wikipedia :-)		elseif (stripos($userAgent, 'Amaya') !== false)		{			$this->engine = self::AMAYA;		}		// Mark this detection routine as run.		$this->detection['engine'] = true;	}	/**	 * Method to detect the accepted languages by the client.	 *	 * @param   mixed  $acceptLanguage  The client accept language string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectLanguage($acceptLanguage)	{		// Parse the accepted encodings.		$this->languages = array_map('trim', (array) explode(',', $acceptLanguage));		// Mark this detection routine as run.		$this->detection['acceptLanguage'] = true;	}	/**	 * Detects the client platform in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectPlatform($userAgent)	{		// Attempt to detect the client platform.		if (stripos($userAgent, 'Windows') !== false)		{			$this->platform = self::WINDOWS;			// Let's look at the specific mobile options in the Windows space.			if (stripos($userAgent, 'Windows Phone') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_PHONE;			}			elseif (stripos($userAgent, 'Windows CE') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_CE;			}		}		// Interestingly 'iPhone' is present in all iOS devices so far including iPad and iPods.		elseif (stripos($userAgent, 'iPhone') !== false)		{			$this->mobile = true;			$this->platform = self::IPHONE;			// Let's look at the specific mobile options in the iOS space.			if (stripos($userAgent, 'iPad') !== false)			{				$this->platform = self::IPAD;			}			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->platform = self::IPOD;			}		}			// In case where iPhone is not mentioed in iPad user agent string			elseif (stripos($userAgent, 'iPad') !== false)			{				$this->mobile = true;				$this->platform = self::IPAD;			}			// In case where iPhone is not mentioed in iPod user agent string			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->mobile = true;				$this->platform = self::IPOD;			}		// This has to come after the iPhone check because mac strings are also present in iOS devices.		elseif (preg_match('/macintosh|mac os x/i', $userAgent))		{			$this->platform = self::MAC;		}		elseif (stripos($userAgent, 'Blackberry') !== false)		{			$this->mobile = true;			$this->platform = self::BLACKBERRY;		}		elseif (stripos($userAgent, 'Android') !== false)		{			$this->mobile = true;			$this->platform = self::ANDROID;			/**			 * Attempt to distinguish between Android phones and tablets			 * There is no totally foolproof method but certain rules almost always hold			 *   Android 3.x is only used for tablets			 *   Some devices and browsers encourage users to change their UA string to include Tablet.			 *   Google encourages manufacturers to exclude the string Mobile from tablet device UA strings.			 *   In some modes Kindle Android devices include the string Mobile but they include the string Silk.			 */			if (stripos($userAgent, 'Android 3') !== false || stripos($userAgent, 'Tablet') !== false				|| stripos($userAgent, 'Mobile') === false || stripos($userAgent, 'Silk') !== false )			{				$this->platform = self::ANDROIDTABLET;			}		}		elseif (stripos($userAgent, 'Linux') !== false)		{			$this->platform = self::LINUX;		}		// Mark this detection routine as run.		$this->detection['platform'] = true;	}	/**	 * Determines if the browser is a robot or not.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function detectRobot($userAgent)	{		if (preg_match('/http|bot|robot|spider|crawler|curl|^$/i', $userAgent))		{			$this->robot = true;		}		else		{			$this->robot = false;		}		$this->detection['robot'] = true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP client class for connecting to a GitHub instance. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubHttp extends JHttp{	/**	 * @const  integer  Use no authentication for HTTP connections.	 * @since  11.3	 */	const AUTHENTICATION_NONE = 0;	/**	 * @const  integer  Use basic authentication for HTTP connections.	 * @since  11.3	 */	const AUTHENTICATION_BASIC = 1;	/**	 * @const  integer  Use OAuth authentication for HTTP connections.	 * @since  11.3	 */	const AUTHENTICATION_OAUTH = 2;	/**	 * Constructor.	 *	 * @param   JRegistry       $options    Client options object.	 * @param   JHttpTransport  $transport  The HTTP transport object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JHttpTransport $transport = null)	{		// Call the JHttp constructor to setup the object.		parent::__construct($options, $transport);		// Make sure the user agent string is defined.		$this->options->def('userAgent', 'JGitHub/2.0');		// Set the default timeout to 120 seconds.		$this->options->def('timeout', 120);	}	/**	 * Method to send the PATCH command to the server.	 *	 * @param   string  $url      Path to the resource.	 * @param   mixed   $data     Either an associative array or a string to be sent with the request.	 * @param   array   $headers  An array of name-value pairs to include in the header of the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function patch($url, $data, array $headers = null)	{		return $this->transport->request('PATCH', new JUri($url), $data, $headers);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  User.profile * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('radio');/** * Provides input for TOS * * @package     Joomla.Plugin * @subpackage  User.profile * @since       2.5.5 */class JFormFieldTos extends JFormFieldRadio{	/**	 * The form field type.	 *	 * @var    string	 * @since  2.5.5	 */	protected $type = 'Tos';	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   2.5.5	 */	protected function getLabel()	{		$label = '';		if ($this->hidden)		{			return $label;		}		// Get the label text from the XML element, defaulting to the element name.		$text = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$text = $this->translateLabel ? JText::_($text) : $text;		// Set required to true as this field is not displayed at all if not required.		$this->required = true;		// Add CSS and JS for the TOS field		$doc = JFactory::getDocument();		$css = "#jform_profile_tos {width: 18em; margin: 0 !important; padding: 0 2px !important;}				#jform_profile_tos input {margin:0 5px 0 0 !important; width:10px !important;}				#jform_profile_tos label {margin:0 15px 0 0 !important; width:auto;}				";		$doc->addStyleDeclaration($css);		JHtml::_('behavior.modal');		// Build the class for the label.		$class = !empty($this->description) ? 'hasTip' : '';		$class = $class . ' required';		$class = !empty($this->labelClass) ? $class . ' ' . $this->labelClass : $class;		// Add the opening label tag and main attributes attributes.		$label .= '<label id="' . $this->id . '-lbl" for="' . $this->id . '" class="' . $class . '"';		// If a description is specified, use it to build a tooltip.		if (!empty($this->description))		{			$label .= ' title="'				. htmlspecialchars(				trim($text, ':') . '::' . ($this->translateDescription ? JText::_($this->description) : $this->description),				ENT_COMPAT, 'UTF-8'			) . '"';		}		$tosarticle = $this->element['article'] ? (int) $this->element['article'] : 1;		$link = '<a class="modal" title="" href="index.php?option=com_content&amp;view=article&amp;layout=modal&amp;id=' . $tosarticle . '&amp;tmpl=component" rel="{handler: \'iframe\', size: {x:800, y:500}}">' . $text . '</a>';		// Add the label text and closing tag.		$label .= '>' . $link . '<span class="star">&#160;*</span></label>';		return $label;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input  = JFactory::getApplication()->input;$user   = JFactory::getUser();$asset  = $input->get('asset');$author = $input->get('author');// Access check.if (!$user->authorise('core.manage', 'com_media')	&&	(!$asset or (			!$user->authorise('core.edit', $asset)		&&	!$user->authorise('core.create', $asset)		&& 	count($user->getAuthorisedCategories($asset, 'core.create')) == 0)		&&	!($user->id == $author && $user->authorise('core.edit.own', $asset)))){	return JError::raiseWarning(403, JText::_('JERROR_ALERTNOAUTHOR'));}$params = JComponentHelper::getParams('com_media');// Load the helper classrequire_once JPATH_COMPONENT_ADMINISTRATOR . '/helpers/media.php';// Set the path definitions$popup_upload = $input->get('pop_up', null);$path = 'file_path';$view = $input->get('view');if (substr(strtolower($view), 0, 6) == 'images' || $popup_upload == 1){	$path = 'image_path';}define('COM_MEDIA_BASE',    JPATH_ROOT . '/' . $params->get($path, 'images'));define('COM_MEDIA_BASEURL', JURI::root() . $params->get($path, 'images'));$controller	= JControllerLegacy::getInstance('Media', array('base_path' => JPATH_COMPONENT_ADMINISTRATOR));$controller->execute($input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Chrome Styles Form Field class for the Joomla Platform. * * @package     Joomla.Libraries * @subpackage  Form * @since       3.0 */class JFormFieldChromeStyle extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  3.0	 */	public $type = 'ChromeStyle';	/**	 * Method to get the list of template chrome style options	 * grouped by template.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   3.0	 */	protected function getGroups()	{		$groups = array();		// Add Module Style Field		$tmp = '---' . JText::_('JLIB_FORM_VALUE_FROM_TEMPLATE') . '---';		$groups[$tmp][] = JHtml::_('select.option', '0', JText::_('JLIB_FORM_VALUE_INHERITED'));		$templateStyles = $this->getTemplateModuleStyles();		// Create one new option object for each available style, grouped by templates		foreach ($templateStyles as $template => $styles)		{			$template = ucfirst($template);			$groups[$template] = array();			foreach ($styles as $style)			{				$tmp = JHtml::_('select.option', $template . '-' . $style, $style);				$groups[$template][] = $tmp;			}		}		reset($groups);		return $groups;	}	/**	 * Method to get the templates module styles.	 *	 * @return  array  The array of styles, grouped by templates.	 *	 * @since   3.0	 */	protected function getTemplateModuleStyles()	{		$moduleStyles = array();		$templates = array($this->getSystemTemplate());		$templates = array_merge($templates, ModulesHelper::getTemplates('site'));		foreach ($templates as $template)		{			$modulesFilePath = JPATH_SITE . '/templates/' . $template->element . '/html/modules.php';			// Is there modules.php for that template?			if (file_exists($modulesFilePath))			{				$modulesFileData = file_get_contents($modulesFilePath);				preg_match_all('/function[\s\t]*modChrome\_([a-z0-9\-\_]*)[\s\t]*\(/i', $modulesFileData, $styles);				if (!array_key_exists($template->element, $moduleStyles))				{					$moduleStyles[$template->element] = array();				}				$moduleStyles[$template->element] = $styles[1];			}		}		return $moduleStyles;	}	/**	 * Method to get the system template as an object.	 *	 * @return  array  The object of system template.	 *	 * @since   3.0	 */	protected function getSystemTemplate()	{		$template = new stdClass;		$template->element = 'system';		$template->name    = 'system';		$template->enabled = 1;		return $template;	}}
<?php// {{{ license/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 foldmethod=marker: *///// +----------------------------------------------------------------------+// | This library is free software; you can redistribute it and/or modify |// | it under the terms of the GNU Lesser General Public License as       |// | published by the Free Software Foundation; either version 2.1 of the |// | License, or (at your option) any later version.                      |// |                                                                      |// | This library is distributed in the hope that it will be useful, but  |// | WITHOUT ANY WARRANTY; without even the implied warranty of           |// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    |// | Lesser General Public License for more details.                      |// |                                                                      |// | You should have received a copy of the GNU Lesser General Public     |// | License along with this library; if not, write to the Free Software  |// | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 |// | USA.                                                                 |// +----------------------------------------------------------------------+//// }}}/** * Encode/decode Internationalized Domain Names. * * The class allows to convert internationalized domain names * (see RFC 3490 for details) as they can be used with various registries worldwide * to be translated between their original (localized) form and their encoded form * as it will be used in the DNS (Domain Name System). * * The class provides two public methods, encode() and decode(), which do exactly * what you would expect them to do. You are allowed to use complete domain names, * simple strings and complete email addresses as well. That means, that you might * use any of the following notations: * * - www.nrgler.com * - xn--nrgler-wxa * - xn--brse-5qa.xn--knrz-1ra.info * * Unicode input might be given as either UTF-8 string, UCS-4 string or UCS-4 * array. Unicode output is available in the same formats. * You can select your preferred format via {@link set_paramter()}. * * ACE input and output is always expected to be ASCII. * * @author  Matthias Sommerfeld <mso@phlylabs.de> * @copyright 2004-2007 phlyLabs Berlin, http://phlylabs.de * @version 0.5.1 * */class idna_convert{    /**     * Holds all relevant mapping tables, loaded from a seperate file on construct     * See RFC3454 for details     *     * @var array     * @access private     */    var $NP = array();    // Internal settings, do not mess with them    var $_punycode_prefix = 'xn--';    var $_invalid_ucs =     0x80000000;    var $_max_ucs =         0x10FFFF;    var $_base =            36;    var $_tmin =            1;    var $_tmax =            26;    var $_skew =            38;    var $_damp =            700;    var $_initial_bias =    72;    var $_initial_n =       0x80;    var $_sbase =           0xAC00;    var $_lbase =           0x1100;    var $_vbase =           0x1161;    var $_tbase =           0x11A7;    var $_lcount =          19;    var $_vcount =          21;    var $_tcount =          28;    var $_ncount =          588;   // _vcount * _tcount    var $_scount =          11172; // _lcount * _tcount * _vcount    var $_error =           false;    // See {@link set_paramter()} for details of how to change the following    // settings from within your script / application    var $_api_encoding   =  'utf8'; // Default input charset is UTF-8    var $_allow_overlong =  false;  // Overlong UTF-8 encodings are forbidden    var $_strict_mode    =  false;  // Behave strict or not    // The constructor    function idna_convert($options = false)    {        $this->slast = $this->_sbase + $this->_lcount * $this->_vcount * $this->_tcount;        if (function_exists('file_get_contents')) {            $this->NP = unserialize(file_get_contents(dirname(__FILE__).'/npdata.ser'));        } else {            $this->NP = unserialize(join('', file(dirname(__FILE__).'/npdata.ser')));        }        // If parameters are given, pass these to the respective method        if (is_array($options)) {            return $this->set_parameter($options);        }        return true;    }    /**     * Sets a new option value. Available options and values:     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input ('utf8' for UTF-8,     *         'ucs4_string' and 'ucs4_array' respectively for UCS4); The output is always UTF-8]     * [overlong - Unicode does not allow unnecessarily long encodings of chars,     *             to allow this, set this parameter to true, else to false;     *             default is false.]     * [strict - true: strict mode, good for registration purposes - Causes errors     *           on failures; false: loose mode, ideal for "wildlife" applications     *           by silently ignoring errors and returning the original input instead     *     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)     * @param    string    Value to use (if parameter 1 is a string)     * @return   boolean   true on success, false otherwise     * @access   public     */    function set_parameter($option, $value = false)    {        if (!is_array($option)) {            $option = array($option => $value);        }        foreach ($option as $k => $v) {            switch ($k) {            case 'encoding':                switch ($v) {                case 'utf8':                case 'ucs4_string':                case 'ucs4_array':                    $this->_api_encoding = $v;                    break;                default:                    $this->_error('Set Parameter: Unknown parameter '.$v.' for option '.$k);                    return false;                }                break;            case 'overlong':                $this->_allow_overlong = ($v) ? true : false;                break;            case 'strict':                $this->_strict_mode = ($v) ? true : false;                break;            default:                $this->_error('Set Parameter: Unknown option '.$k);                return false;            }        }        return true;    }    /**     * Decode a given ACE domain name     * @param    string   Domain name (ACE string)     * [@param    string   Desired output encoding, see {@link set_parameter}]     * @return   string   Decoded Domain name (UTF-8 or UCS-4)     * @access   public     */    function decode($input, $one_time_encoding = false)    {        // Optionally set        if ($one_time_encoding) {            switch ($one_time_encoding) {            case 'utf8':            case 'ucs4_string':            case 'ucs4_array':                break;            default:                $this->_error('Unknown encoding '.$one_time_encoding);                return false;            }        }        // Make sure to drop any newline characters around        $input = trim($input);        // Negotiate input and try to determine, whether it is a plain string,        // an email address or something like a complete URL        if (strpos($input, '@')) { // Maybe it is an email address            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            list ($email_pref, $input) = explode('@', $input, 2);            $arr = explode('.', $input);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $input = join('.', $arr);            $arr = explode('.', $email_pref);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $email_pref = join('.', $arr);            $return = $email_pref . '@' . $input;        } elseif (preg_match('![:\./]!', $input)) { // Or a complete domain name (with or without paths / parameters)            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            $parsed = parse_url($input);            if (isset($parsed['host'])) {                $arr = explode('.', $parsed['host']);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }                $parsed['host'] = join('.', $arr);                $return =                        (empty($parsed['scheme']) ? '' : $parsed['scheme'].(strtolower($parsed['scheme']) == 'mailto' ? ':' : '://'))                        .(empty($parsed['user']) ? '' : $parsed['user'].(empty($parsed['pass']) ? '' : ':'.$parsed['pass']).'@')                        .$parsed['host']                        .(empty($parsed['port']) ? '' : ':'.$parsed['port'])                        .(empty($parsed['path']) ? '' : $parsed['path'])                        .(empty($parsed['query']) ? '' : '?'.$parsed['query'])                        .(empty($parsed['fragment']) ? '' : '#'.$parsed['fragment']);            } else { // parse_url seems to have failed, try without it                $arr = explode('.', $input);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    $arr[$k] = ($conv) ? $conv : $v;                }                $return = join('.', $arr);            }        } else { // Otherwise we consider it being a pure domain name string            $return = $this->_decode($input);            if (!$return) $return = $input;        }        // The output is UTF-8 by default, other output formats need conversion here        // If one time encoding is given, use this, else the objects property        switch (($one_time_encoding) ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            return $return;            break;        case 'ucs4_string':           return $this->_ucs4_to_ucs4_string($this->_utf8_to_ucs4($return));           break;        case 'ucs4_array':            return $this->_utf8_to_ucs4($return);            break;        default:            $this->_error('Unsupported output format');            return false;        }    }    /**     * Encode a given UTF-8 domain name     * @param    string   Domain name (UTF-8 or UCS-4)     * [@param    string   Desired input encoding, see {@link set_parameter}]     * @return   string   Encoded Domain name (ACE string)     * @access   public     */    function encode($decoded, $one_time_encoding = false)    {        // Forcing conversion of input to UCS4 array        // If one time encoding is given, use this, else the objects property        switch ($one_time_encoding ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            $decoded = $this->_utf8_to_ucs4($decoded);            break;        case 'ucs4_string':           $decoded = $this->_ucs4_string_to_ucs4($decoded);        case 'ucs4_array':           break;        default:            $this->_error('Unsupported input format: '.($one_time_encoding ? $one_time_encoding : $this->_api_encoding));            return false;        }        // No input, no output, what else did you expect?        if (empty($decoded)) return '';        // Anchors for iteration        $last_begin = 0;        // Output string        $output = '';        foreach ($decoded as $k => $v) {            // Make sure to use just the plain dot            switch($v) {            case 0x3002:            case 0xFF0E:            case 0xFF61:                $decoded[$k] = 0x2E;                // Right, no break here, the above are converted to dots anyway            // Stumbling across an anchoring character            case 0x2E:            case 0x2F:            case 0x3A:            case 0x3F:            case 0x40:                // Neither email addresses nor URLs allowed in strict mode                if ($this->_strict_mode) {                   $this->_error('Neither email addresses nor URLs are allowed in strict mode.');                   return false;                } else {                    // Skip first char                    if ($k) {                        $encoded = '';                        $encoded = $this->_encode(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        if ($encoded) {                            $output .= $encoded;                        } else {                            $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        }                        $output .= chr($decoded[$k]);                    }                    $last_begin = $k + 1;                }            }        }        // Catch the rest of the string        if ($last_begin) {            $inp_len = sizeof($decoded);            $encoded = '';            $encoded = $this->_encode(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            if ($encoded) {                $output .= $encoded;            } else {                $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            }            return $output;        } else {            if ($output = $this->_encode($decoded)) {                return $output;            } else {                return $this->_ucs4_to_utf8($decoded);            }        }    }    /**     * Use this method to get the last error ocurred     * @param    void     * @return   string   The last error, that occured     * @access   public     */    function get_last_error()    {        return $this->_error;    }    /**     * The actual decoding algorithm     * @access   private     */    function _decode($encoded)    {        // We do need to find the Punycode prefix        if (!preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $encoded)) {            $this->_error('This is not a punycode string');            return false;        }        $encode_test = preg_replace('!^'.preg_quote($this->_punycode_prefix, '!').'!', '', $encoded);        // If nothing left after removing the prefix, it is hopeless        if (!$encode_test) {            $this->_error('The given encoded string was empty');            return false;        }        // Find last occurence of the delimiter        $delim_pos = strrpos($encoded, '-');        if ($delim_pos > strlen($this->_punycode_prefix)) {            for ($k = strlen($this->_punycode_prefix); $k < $delim_pos; ++$k) {                $decoded[] = ord($encoded{$k});            }        } else {            $decoded = array();        }        $deco_len = count($decoded);        $enco_len = strlen($encoded);        // Wandering through the strings; init        $is_first = true;        $bias     = $this->_initial_bias;        $idx      = 0;        $char     = $this->_initial_n;        for ($enco_idx = ($delim_pos) ? ($delim_pos + 1) : 0; $enco_idx < $enco_len; ++$deco_len) {            for ($old_idx = $idx, $w = 1, $k = $this->_base; 1 ; $k += $this->_base) {                $digit = $this->_decode_digit($encoded{$enco_idx++});                $idx += $digit * $w;                $t = ($k <= $bias) ? $this->_tmin :                        (($k >= $bias + $this->_tmax) ? $this->_tmax : ($k - $bias));                if ($digit < $t) break;                $w = (int) ($w * ($this->_base - $t));            }            $bias = $this->_adapt($idx - $old_idx, $deco_len + 1, $is_first);            $is_first = false;            $char += (int) ($idx / ($deco_len + 1));            $idx %= ($deco_len + 1);            if ($deco_len > 0) {                // Make room for the decoded char                for ($i = $deco_len; $i > $idx; $i--) {                    $decoded[$i] = $decoded[($i - 1)];                }            }            $decoded[$idx++] = $char;        }        return $this->_ucs4_to_utf8($decoded);    }    /**     * The actual encoding algorithm     * @access   private     */    function _encode($decoded)    {        // We cannot encode a domain name containing the Punycode prefix        $extract = strlen($this->_punycode_prefix);        $check_pref = $this->_utf8_to_ucs4($this->_punycode_prefix);        $check_deco = array_slice($decoded, 0, $extract);        if ($check_pref == $check_deco) {            $this->_error('This is already a punycode string');            return false;        }        // We will not try to encode strings consisting of basic code points only        $encodable = false;        foreach ($decoded as $k => $v) {            if ($v > 0x7a) {                $encodable = true;                break;            }        }        if (!$encodable) {            $this->_error('The given string does not contain encodable chars');            return false;        }        // Do NAMEPREP        $decoded = $this->_nameprep($decoded);        if (!$decoded || !is_array($decoded)) return false; // NAMEPREP failed        $deco_len  = count($decoded);        if (!$deco_len) return false; // Empty array        $codecount = 0; // How many chars have been consumed        $encoded = '';        // Copy all basic code points to output        for ($i = 0; $i < $deco_len; ++$i) {            $test = $decoded[$i];            // Will match [-0-9a-zA-Z]            if ((0x2F < $test && $test < 0x40) || (0x40 < $test && $test < 0x5B)                    || (0x60 < $test && $test <= 0x7B) || (0x2D == $test)) {                $encoded .= chr($decoded[$i]);                $codecount++;            }        }        if ($codecount == $deco_len) return $encoded; // All codepoints were basic ones        // Start with the prefix; copy it to output        $encoded = $this->_punycode_prefix.$encoded;        // If we have basic code points in output, add an hyphen to the end        if ($codecount) $encoded .= '-';        // Now find and encode all non-basic code points        $is_first  = true;        $cur_code  = $this->_initial_n;        $bias      = $this->_initial_bias;        $delta     = 0;        while ($codecount < $deco_len) {            // Find the smallest code point >= the current code point and            // remember the last ouccrence of it in the input            for ($i = 0, $next_code = $this->_max_ucs; $i < $deco_len; $i++) {                if ($decoded[$i] >= $cur_code && $decoded[$i] <= $next_code) {                    $next_code = $decoded[$i];                }            }            $delta += ($next_code - $cur_code) * ($codecount + 1);            $cur_code = $next_code;            // Scan input again and encode all characters whose code point is $cur_code            for ($i = 0; $i < $deco_len; $i++) {                if ($decoded[$i] < $cur_code) {                    $delta++;                } elseif ($decoded[$i] == $cur_code) {                    for ($q = $delta, $k = $this->_base; 1; $k += $this->_base) {                        $t = ($k <= $bias) ? $this->_tmin :                                (($k >= $bias + $this->_tmax) ? $this->_tmax : $k - $bias);                        if ($q < $t) break;                        $encoded .= $this->_encode_digit(intval($t + (($q - $t) % ($this->_base - $t)))); //v0.4.5 Changed from ceil() to intval()                        $q = (int) (($q - $t) / ($this->_base - $t));                    }                    $encoded .= $this->_encode_digit($q);                    $bias = $this->_adapt($delta, $codecount+1, $is_first);                    $codecount++;                    $delta = 0;                    $is_first = false;                }            }            $delta++;            $cur_code++;        }        return $encoded;    }    /**     * Adapt the bias according to the current code point and position     * @access   private     */    function _adapt($delta, $npoints, $is_first)    {        $delta = intval($is_first ? ($delta / $this->_damp) : ($delta / 2));        $delta += intval($delta / $npoints);        for ($k = 0; $delta > (($this->_base - $this->_tmin) * $this->_tmax) / 2; $k += $this->_base) {            $delta = intval($delta / ($this->_base - $this->_tmin));        }        return intval($k + ($this->_base - $this->_tmin + 1) * $delta / ($delta + $this->_skew));    }    /**     * Encoding a certain digit     * @access   private     */    function _encode_digit($d)    {        return chr($d + 22 + 75 * ($d < 26));    }    /**     * Decode a certain digit     * @access   private     */    function _decode_digit($cp)    {        $cp = ord($cp);        return ($cp - 48 < 10) ? $cp - 22 : (($cp - 65 < 26) ? $cp - 65 : (($cp - 97 < 26) ? $cp - 97 : $this->_base));    }    /**     * Internal error handling method     * @access   private     */    function _error($error = '')    {        $this->_error = $error;    }    /**     * Do Nameprep according to RFC3491 and RFC3454     * @param    array    Unicode Characters     * @return   string   Unicode Characters, Nameprep'd     * @access   private     */    function _nameprep($input)    {        $output = array();        $error = false;        //        // Mapping        // Walking through the input array, performing the required steps on each of        // the input chars and putting the result into the output array        // While mapping required chars we apply the cannonical ordering        foreach ($input as $v) {            // Map to nothing == skip that code point            if (in_array($v, $this->NP['map_nothing'])) continue;            // Try to find prohibited input            if (in_array($v, $this->NP['prohibit']) || in_array($v, $this->NP['general_prohibited'])) {                $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                return false;            }            foreach ($this->NP['prohibit_ranges'] as $range) {                if ($range[0] <= $v && $v <= $range[1]) {                    $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                    return false;                }            }            //            // Hangul syllable decomposition            if (0xAC00 <= $v && $v <= 0xD7AF) {                foreach ($this->_hangul_decompose($v) as $out) {                    $output[] = (int) $out;                }            // There's a decomposition mapping for that code point            } elseif (isset($this->NP['replacemaps'][$v])) {                foreach ($this->_apply_cannonical_ordering($this->NP['replacemaps'][$v]) as $out) {                    $output[] = (int) $out;                }            } else {                $output[] = (int) $v;            }        }        // Before applying any Combining, try to rearrange any Hangul syllables        $output = $this->_hangul_compose($output);        //        // Combine code points        //        $last_class   = 0;        $last_starter = 0;        $out_len      = count($output);        for ($i = 0; $i < $out_len; ++$i) {            $class = $this->_get_combining_class($output[$i]);            if ((!$last_class || $last_class > $class) && $class) {                // Try to match                $seq_len = $i - $last_starter;                $out = $this->_combine(array_slice($output, $last_starter, $seq_len));                // On match: Replace the last starter with the composed character and remove                // the now redundant non-starter(s)                if ($out) {                    $output[$last_starter] = $out;                    if (count($out) != $seq_len) {                        for ($j = $i+1; $j < $out_len; ++$j) {                            $output[$j-1] = $output[$j];                        }                        unset($output[$out_len]);                    }                    // Rewind the for loop by one, since there can be more possible compositions                    $i--;                    $out_len--;                    $last_class = ($i == $last_starter) ? 0 : $this->_get_combining_class($output[$i-1]);                    continue;                }            }            // The current class is 0            if (!$class) $last_starter = $i;            $last_class = $class;        }        return $output;    }    /**     * Decomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    integer  32bit UCS4 code point     * @return   array    Either Hangul Syllable decomposed or original 32bit value as one value array     * @access   private     */    function _hangul_decompose($char)    {        $sindex = (int) $char - $this->_sbase;        if ($sindex < 0 || $sindex >= $this->_scount) {            return array($char);        }        $result = array();        $result[] = (int) $this->_lbase + $sindex / $this->_ncount;        $result[] = (int) $this->_vbase + ($sindex % $this->_ncount) / $this->_tcount;        $T = intval($this->_tbase + $sindex % $this->_tcount);        if ($T != $this->_tbase) $result[] = $T;        return $result;    }    /**     * Ccomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    array    Decomposed UCS4 sequence     * @return   array    UCS4 sequence with syllables composed     * @access   private     */    function _hangul_compose($input)    {        $inp_len = count($input);        if (!$inp_len) return array();        $result = array();        $last = (int) $input[0];        $result[] = $last; // copy first char from input to output        for ($i = 1; $i < $inp_len; ++$i) {            $char = (int) $input[$i];            $sindex = $last - $this->_sbase;            $lindex = $last - $this->_lbase;            $vindex = $char - $this->_vbase;            $tindex = $char - $this->_tbase;            // Find out, whether two current characters are LV and T            if (0 <= $sindex && $sindex < $this->_scount && ($sindex % $this->_tcount == 0)                    && 0 <= $tindex && $tindex <= $this->_tcount) {                // create syllable of form LVT                $last += $tindex;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // Find out, whether two current characters form L and V            if (0 <= $lindex && $lindex < $this->_lcount && 0 <= $vindex && $vindex < $this->_vcount) {                // create syllable of form LV                $last = (int) $this->_sbase + ($lindex * $this->_vcount + $vindex) * $this->_tcount;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // if neither case was true, just add the character            $last = $char;            $result[] = $char;        }        return $result;    }    /**     * Returns the combining class of a certain wide char     * @param    integer    Wide char to check (32bit integer)     * @return   integer    Combining class if found, else 0     * @access   private     */    function _get_combining_class($char)    {        return isset($this->NP['norm_combcls'][$char]) ? $this->NP['norm_combcls'][$char] : 0;    }    /**     * Apllies the cannonical ordering of a decomposed UCS4 sequence     * @param    array      Decomposed UCS4 sequence     * @return   array      Ordered USC4 sequence     * @access   private     */    function _apply_cannonical_ordering($input)    {        $swap = true;        $size = count($input);        while ($swap) {            $swap = false;            $last = $this->_get_combining_class(intval($input[0]));            for ($i = 0; $i < $size-1; ++$i) {                $next = $this->_get_combining_class(intval($input[$i+1]));                if ($next != 0 && $last > $next) {                    // Move item leftward until it fits                    for ($j = $i + 1; $j > 0; --$j) {                        if ($this->_get_combining_class(intval($input[$j-1])) <= $next) break;                        $t = intval($input[$j]);                        $input[$j] = intval($input[$j-1]);                        $input[$j-1] = $t;                        $swap = true;                    }                    // Reentering the loop looking at the old character again                    $next = $last;                }                $last = $next;            }        }        return $input;    }    /**     * Do composition of a sequence of starter and non-starter     * @param    array      UCS4 Decomposed sequence     * @return   array      Ordered USC4 sequence     * @access   private     */    function _combine($input)    {        $inp_len = count($input);        foreach ($this->NP['replacemaps'] as $np_src => $np_target) {            if ($np_target[0] != $input[0]) continue;            if (count($np_target) != $inp_len) continue;            $hit = false;            foreach ($input as $k2 => $v2) {                if ($v2 == $np_target[$k2]) {                    $hit = true;                } else {                    $hit = false;                    break;                }            }            if ($hit) return $np_src;        }        return false;    }    /**     * This converts an UTF-8 encoded string to its UCS-4 representation     * By talking about UCS-4 "strings" we mean arrays of 32bit integers representing     * each of the "chars". This is due to PHP not being able to handle strings with     * bit depth different from 8. This apllies to the reverse method _ucs4_to_utf8(), too.     * The following UTF-8 encodings are supported:     * bytes bits  representation     * 1        7  0xxxxxxx     * 2       11  110xxxxx 10xxxxxx     * 3       16  1110xxxx 10xxxxxx 10xxxxxx     * 4       21  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx     * 5       26  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * 6       31  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * Each x represents a bit that can be used to store character data.     * The five and six byte sequences are part of Annex D of ISO/IEC 10646-1:2000     * @access   private     */    function _utf8_to_ucs4($input)    {        $output = array();        $out_len = 0;        $inp_len = strlen($input);        $mode = 'next';        $test = 'none';        for ($k = 0; $k < $inp_len; ++$k) {            $v = ord($input{$k}); // Extract byte from input string            if ($v < 128) { // We found an ASCII char - put into stirng as is                $output[$out_len] = $v;                ++$out_len;                if ('add' == $mode) {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                continue;            }            if ('next' == $mode) { // Try to find the next start byte; determine the width of the Unicode char                $start_byte = $v;                $mode = 'add';                $test = 'range';                if ($v >> 5 == 6) { // &110xxxxx 10xxxxx                    $next_byte = 0; // Tells, how many times subsequent bitmasks must rotate 6bits to the left                    $v = ($v - 192) << 6;                } elseif ($v >> 4 == 14) { // &1110xxxx 10xxxxxx 10xxxxxx                    $next_byte = 1;                    $v = ($v - 224) << 12;                } elseif ($v >> 3 == 30) { // &11110xxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 2;                    $v = ($v - 240) << 18;                } elseif ($v >> 2 == 62) { // &111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 3;                    $v = ($v - 248) << 24;                } elseif ($v >> 1 == 126) { // &1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 4;                    $v = ($v - 252) << 30;                } else {                    $this->_error('This might be UTF-8, but I don\'t understand it at byte '.$k);                    return false;                }                if ('add' == $mode) {                    $output[$out_len] = (int) $v;                    ++$out_len;                    continue;                }            }            if ('add' == $mode) {                if (!$this->_allow_overlong && $test == 'range') {                    $test = 'none';                    if (($v < 0xA0 && $start_byte == 0xE0) || ($v < 0x90 && $start_byte == 0xF0) || ($v > 0x8F && $start_byte == 0xF4)) {                        $this->_error('Bogus UTF-8 character detected (out of legal range) at byte '.$k);                        return false;                    }                }                if ($v >> 6 == 2) { // Bit mask must be 10xxxxxx                    $v = ($v - 128) << ($next_byte * 6);                    $output[($out_len - 1)] += $v;                    --$next_byte;                } else {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                if ($next_byte < 0) {                    $mode = 'next';                }            }        } // for        return $output;    }    /**     * Convert UCS-4 string into UTF-8 string     * See _utf8_to_ucs4() for details     * @access   private     */    function _ucs4_to_utf8($input)    {        $output = '';        $k = 0;        foreach ($input as $v) {            ++$k;            // $v = ord($v);            if ($v < 128) { // 7bit are transferred literally                $output .= chr($v);            } elseif ($v < (1 << 11)) { // 2 bytes                $output .= chr(192 + ($v >> 6)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 16)) { // 3 bytes                $output .= chr(224 + ($v >> 12)) . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 21)) { // 4 bytes                $output .= chr(240 + ($v >> 18)) . chr(128 + (($v >> 12) & 63))                         . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 26)) { // 5 bytes                $output .= chr(248 + ($v >> 24)) . chr(128 + (($v >> 18) & 63))                         . chr(128 + (($v >> 12) & 63)) . chr(128 + (($v >> 6) & 63))                         . chr(128 + ($v & 63));            } elseif ($v < (1 << 31)) { // 6 bytes                $output .= chr(252 + ($v >> 30)) . chr(128 + (($v >> 24) & 63))                         . chr(128 + (($v >> 18) & 63)) . chr(128 + (($v >> 12) & 63))                         . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } else {                $this->_error('Conversion from UCS-4 to UTF-8 failed: malformed input at byte '.$k);                return false;            }        }        return $output;    }    /**      * Convert UCS-4 array into UCS-4 string      *      * @access   private      */    function _ucs4_to_ucs4_string($input)    {        $output = '';        // Take array values and split output to 4 bytes per value        // The bit mask is 255, which reads &11111111        foreach ($input as $v) {            $output .= chr(($v >> 24) & 255).chr(($v >> 16) & 255).chr(($v >> 8) & 255).chr($v & 255);        }        return $output;    }    /**      * Convert UCS-4 strin into UCS-4 garray      *      * @access   private      */    function _ucs4_string_to_ucs4($input)    {        $output = array();        $inp_len = strlen($input);        // Input length must be dividable by 4        if ($inp_len % 4) {            $this->_error('Input UCS4 string is broken');            return false;        }        // Empty input - return empty output        if (!$inp_len) return $output;        for ($i = 0, $out_len = -1; $i < $inp_len; ++$i) {            // Increment output position every 4 input bytes            if (!($i % 4)) {                $out_len++;                $output[$out_len] = 0;            }            $output[$out_len] += ord($input{$i}) << (8 * (3 - ($i % 4) ) );        }        return $output;    }}/*** Adapter class for aligning the API of idna_convert with that of Net_IDNA* @author  Matthias Sommerfeld <mso@phlylabs.de>*/class Net_IDNA_php4 extends idna_convert{    /**     * Sets a new option value. Available options and values:     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input ('utf8' for UTF-8,     *         'ucs4_string' and 'ucs4_array' respectively for UCS4); The output is always UTF-8]     * [overlong - Unicode does not allow unnecessarily long encodings of chars,     *             to allow this, set this parameter to true, else to false;     *             default is false.]     * [strict - true: strict mode, good for registration purposes - Causes errors     *           on failures; false: loose mode, ideal for "wildlife" applications     *           by silently ignoring errors and returning the original input instead     *     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)     * @param    string    Value to use (if parameter 1 is a string)     * @return   boolean   true on success, false otherwise     * @access   public     */    function setParams($option, $param = false)    {        return $this->IC->set_parameters($option, $param);    }}?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link list controller class. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectControllerLinks extends JControllerAdmin{	/**	 * Method to update a record.	 * @since   1.6	 */	public function activate()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids     = $this->input->get('cid', array(), 'array');		$newUrl  = $this->input->getString('new_url');		$comment = $this->input->getString('comment');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_REDIRECT_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			JArrayHelper::toInteger($ids);			// Remove the items.			if (!$model->activate($ids, $newUrl, $comment))			{				JError::raiseWarning(500, $model->getError());			}			else {				$this->setMessage(JText::plural('COM_REDIRECT_N_LINKS_UPDATED', count($ids)));			}		}		$this->setRedirect('index.php?option=com_redirect&view=links');	}	/**	 * Proxy for getModel.	 * @since   1.6	 */	public function getModel($name = 'Link', $prefix = 'RedirectModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL azure database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorAzure extends JDatabaseIteratorSqlsrv{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds master display controller. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/newsfeeds.php';		$view   = $this->input->get('view', 'newsfeeds');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'newsfeed' && $layout == 'edit' && !$this->checkEditId('com_newsfeeds.edit.newsfeed', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Package Manifest File * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerManifestPackage extends JInstallerManifest{	/**	 * Unique name of the package	 *	 * @var    string	 * @since  3.1	 */	public $packagename = '';	/**	 * Website for the package	 *	 * @var    string	 * @since  3.1	 */	public $url = '';	/**	 * Scriptfile for the package	 *	 * @var    string	 * @since  3.1	 */	public $scriptfile = '';	/**	 * Apply manifest data from a SimpleXMLElement to the object.	 *	 * @param   SimpleXMLElement  $xml  Data to load	 *	 * @return  void	 *	 * @since   3.1	 */	protected function loadManifestFromData(SimpleXMLElement $xml)	{		$this->name        = (string) $xml->name;		$this->packagename = (string) $xml->packagename;		$this->update      = (string) $xml->update;		$this->authorurl   = (string) $xml->authorUrl;		$this->author      = (string) $xml->author;		$this->authoremail = (string) $xml->authorEmail;		$this->description = (string) $xml->description;		$this->packager    = (string) $xml->packager;		$this->packagerurl = (string) $xml->packagerurl;		$this->scriptfile  = (string) $xml->scriptfile;		$this->version     = (string) $xml->version;		if (isset($xml->files->file) && count($xml->files->file))		{			foreach ($xml->files->file as $file)			{				// NOTE: JInstallerExtension doesn't expect a string.				// DO NOT CAST $file				$this->filelist[] = new JInstallerExtension($file);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_CACHE_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('cache') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		<?php if (isset($this->data['cache_handler']) && $this->data['cache_handler'] == 'memcache' || $this->data['session_handler'] == 'memcache') : ?>					<?php			foreach ($this->form->getFieldset('memcache') as $mfield):			?>					<li><?php echo $mfield->label; ?>					<?php echo $mfield->input; ?></li>			<?php			endforeach;			?>		<?php endif; ?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * ZIP format adapter for the JArchive class * * The ZIP compression code is partially based on code from: * Eric Mueller <eric@themepark.com> * http://www.zend.com/codex.php?id=535&single=1 * * Deins125 <webmaster@atlant.ru> * http://www.zend.com/codex.php?id=470&single=1 * * The ZIP compression date code is partially based on code from * Peter Listiak <mlady@users.sourceforge.net> * * This class is inspired from and draws heavily in code and concept from the Compress package of * The Horde Project <http://www.horde.org> * * @contributor  Chuck Hagenbuch <chuck@horde.org> * @contributor  Michael Slusarz <slusarz@horde.org> * @contributor  Michael Cochrane <mike@graftonhall.co.nz> * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveZip implements JArchiveExtractable{	/**	 * ZIP compression methods.	 *	 * @var    array	 * @since  11.1	 */	private $_methods = array(0x0 => 'None', 0x1 => 'Shrunk', 0x2 => 'Super Fast', 0x3 => 'Fast', 0x4 => 'Normal', 0x5 => 'Maximum', 0x6 => 'Imploded',		0x8 => 'Deflated');	/**	 * Beginning of central directory record.	 *	 * @var    string	 * @since  11.1	 */	private $_ctrlDirHeader = "\x50\x4b\x01\x02";	/**	 * End of central directory record.	 *	 * @var    string	 * @since  11.1	 */	private $_ctrlDirEnd = "\x50\x4b\x05\x06\x00\x00\x00\x00";	/**	 * Beginning of file contents.	 *	 * @var    string	 * @since  11.1	 */	private $_fileHeader = "\x50\x4b\x03\x04";	/**	 * ZIP file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * ZIP file metadata array	 *	 * @var    array	 * @since  11.1	 */	private $_metadata = null;	/**	 * Create a ZIP compressed file from an array of file data.	 *	 * @param   string  $archive  Path to save archive.	 * @param   array   $files    Array of files to add to archive.	 * @param   array   $options  Compression options (unused).	 *	 * @return  boolean  True if successful.	 *	 * @since   11.1	 *	 * @todo    Finish Implementation	 */	public function create($archive, $files, array $options = array())	{		$contents = array();		$ctrldir = array();		foreach ($files as $file)		{			$this->_addToZIPFile($file, $contents, $ctrldir);		}		return $this->_createZIPFile($contents, $ctrldir, $archive);	}	/**	 * Extract a ZIP compressed file to a given path	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive into	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 * @throws RuntimeException	 */	public function extract($archive, $destination, array $options = array())	{		if (!is_file($archive))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Archive does not exist');			}			else			{				throw new RuntimeException('Archive does not exist');			}		}		if ($this->hasNativeSupport())		{			return $this->extractNative($archive, $destination, $options);		}		else		{			return $this->extractCustom($archive, $destination, $options);		}	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return (self::hasNativeSupport() || extension_loaded('zlib'));	}	/**	 * Method to determine if the server has native zip support for faster handling	 *	 * @return  boolean  True if php has native ZIP support	 *	 * @since   11.1	 */	public static function hasNativeSupport()	{		return (function_exists('zip_open') && function_exists('zip_read'));	}	/**	 * Checks to see if the data is a valid ZIP file.	 *	 * @param   string  &$data  ZIP archive data buffer.	 *	 * @return  boolean  True if valid, false if invalid.	 *	 * @since   11.1	 */	public function checkZipData(&$data)	{		if (strpos($data, $this->_fileHeader) === false)		{			return false;		}		else		{			return true;		}	}	/**	 * Extract a ZIP compressed file to a given path using a php based algorithm that only requires zlib support	 *	 * @param   string  $archive      Path to ZIP archive to extract.	 * @param   string  $destination  Path to extract archive into.	 * @param   array   $options      Extraction options [unused].	 *	 * @return  mixed   True if successful	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function extractCustom($archive, $destination, array $options)	{		$this->_data = null;		$this->_metadata = null;		if (!extension_loaded('zlib'))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Zlib not supported');			}			else			{				throw new RuntimeException('Zlib not supported');			}		}		$this->_data = file_get_contents($archive);		if (!$this->_data = JFile::read($archive))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to read archive (zip)');			}			else			{				throw new RuntimeException('Unable to read archive (zip)');			}		}		if (!$this->_readZipInfo($this->_data))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Get ZIP Information failed');			}			else			{				throw new RuntimeException('Get ZIP Information failed');			}		}		for ($i = 0, $n = count($this->_metadata); $i < $n; $i++)		{			$lastPathCharacter = substr($this->_metadata[$i]['name'], -1, 1);			if ($lastPathCharacter !== '/' && $lastPathCharacter !== '\\')			{				$buffer = $this->_getFileData($i);				$path = JPath::clean($destination . '/' . $this->_metadata[$i]['name']);				// Make sure the destination folder exists				if (!JFolder::create(dirname($path)))				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to create destination');					}					else					{						throw new RuntimeException('Unable to create destination');					}				}				if (JFile::write($path, $buffer) === false)				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to write entry');					}					else					{						throw new RuntimeException('Unable to write entry');					}				}			}		}		return true;	}	/**	 * Extract a ZIP compressed file to a given path using native php api calls for speed	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive into	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function extractNative($archive, $destination, array $options)	{		$zip = zip_open($archive);		if (is_resource($zip))		{			// Make sure the destination folder exists			if (!JFolder::create($destination))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to create destination');				}				else				{					throw new RuntimeException('Unable to create destination');				}			}			// Read files in the archive			while ($file = @zip_read($zip))			{				if (zip_entry_open($zip, $file, "r"))				{					if (substr(zip_entry_name($file), strlen(zip_entry_name($file)) - 1) != "/")					{						$buffer = zip_entry_read($file, zip_entry_filesize($file));						if (JFile::write($destination . '/' . zip_entry_name($file), $buffer) === false)						{							if (class_exists('JError'))							{								return JError::raiseWarning(100, 'Unable to write entry');							}							else							{								throw new RuntimeException('Unable to write entry');							}						}						zip_entry_close($file);					}				}				else				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to read entry');					}					else					{						throw new RuntimeException('Unable to read entry');					}				}			}			@zip_close($zip);		}		else		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to open archive');			}			else			{				throw new RuntimeException('Unable to open archive');			}		}		return true;	}	/**	 * Get the list of files/data from a ZIP archive buffer.	 *	 * <pre>	 * KEY: Position in zipfile	 * VALUES: 'attr'  --  File attributes	 * 'crc'   --  CRC checksum	 * 'csize' --  Compressed file size	 * 'date'  --  File modification time	 * 'name'  --  Filename	 * 'method'--  Compression method	 * 'size'  --  Original file size	 * 'type'  --  File type	 * </pre>	 *	 * @param   string  &$data  The ZIP archive buffer.	 *	 * @return  boolean True on success	 *	 * @since   11.1	 * @throws  RuntimeException	 */	private function _readZipInfo(&$data)	{		$entries = array();		// Find the last central directory header entry		$fhLast = strpos($data, $this->_ctrlDirEnd);		do		{			$last = $fhLast;		}		while (($fhLast = strpos($data, $this->_ctrlDirEnd, $fhLast + 1)) !== false);		// Find the central directory offset		$offset = 0;		if ($last)		{			$endOfCentralDirectory = unpack(				'vNumberOfDisk/vNoOfDiskWithStartOfCentralDirectory/vNoOfCentralDirectoryEntriesOnDisk/' .				'vTotalCentralDirectoryEntries/VSizeOfCentralDirectory/VCentralDirectoryOffset/vCommentLength',				substr($data, $last + 4)			);			$offset = $endOfCentralDirectory['CentralDirectoryOffset'];		}		// Get details from central directory structure.		$fhStart = strpos($data, $this->_ctrlDirHeader, $offset);		$dataLength = strlen($data);		do		{			if ($dataLength < $fhStart + 31)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Invalid Zip Data');				}				else				{					throw new RuntimeException('Invalid Zip Data');				}			}			$info = unpack('vMethod/VTime/VCRC32/VCompressed/VUncompressed/vLength', substr($data, $fhStart + 10, 20));			$name = substr($data, $fhStart + 46, $info['Length']);			$entries[$name] = array(				'attr' => null,				'crc' => sprintf("%08s", dechex($info['CRC32'])),				'csize' => $info['Compressed'],				'date' => null,				'_dataStart' => null,				'name' => $name,				'method' => $this->_methods[$info['Method']],				'_method' => $info['Method'],				'size' => $info['Uncompressed'],				'type' => null			);			$entries[$name]['date'] = mktime(				(($info['Time'] >> 11) & 0x1f),				(($info['Time'] >> 5) & 0x3f),				(($info['Time'] << 1) & 0x3e),				(($info['Time'] >> 21) & 0x07),				(($info['Time'] >> 16) & 0x1f),				((($info['Time'] >> 25) & 0x7f) + 1980)			);			if ($dataLength < $fhStart + 43)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Invalid ZIP data');				}				else				{					throw new RuntimeException('Invalid ZIP data');				}			}			$info = unpack('vInternal/VExternal/VOffset', substr($data, $fhStart + 36, 10));			$entries[$name]['type'] = ($info['Internal'] & 0x01) ? 'text' : 'binary';			$entries[$name]['attr'] = (($info['External'] & 0x10) ? 'D' : '-') . (($info['External'] & 0x20) ? 'A' : '-')				. (($info['External'] & 0x03) ? 'S' : '-') . (($info['External'] & 0x02) ? 'H' : '-') . (($info['External'] & 0x01) ? 'R' : '-');			$entries[$name]['offset'] = $info['Offset'];			// Get details from local file header since we have the offset			$lfhStart = strpos($data, $this->_fileHeader, $entries[$name]['offset']);			if ($dataLength < $lfhStart + 34)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Invalid Zip Data');				}				else				{					throw new RuntimeException('Invalid Zip Data');				}			}			$info = unpack('vMethod/VTime/VCRC32/VCompressed/VUncompressed/vLength/vExtraLength', substr($data, $lfhStart + 8, 25));			$name = substr($data, $lfhStart + 30, $info['Length']);			$entries[$name]['_dataStart'] = $lfhStart + 30 + $info['Length'] + $info['ExtraLength'];			// Bump the max execution time because not using the built in php zip libs makes this process slow.			@set_time_limit(ini_get('max_execution_time'));		}		while ((($fhStart = strpos($data, $this->_ctrlDirHeader, $fhStart + 46)) !== false));		$this->_metadata = array_values($entries);		return true;	}	/**	 * Returns the file data for a file by offsest in the ZIP archive	 *	 * @param   integer  $key  The position of the file in the archive.	 *	 * @return  string  Uncompressed file data buffer.	 *	 * @since   11.1	 */	private function _getFileData($key)	{		if ($this->_metadata[$key]['_method'] == 0x8)		{			return gzinflate(substr($this->_data, $this->_metadata[$key]['_dataStart'], $this->_metadata[$key]['csize']));		}		elseif ($this->_metadata[$key]['_method'] == 0x0)		{			/* Files that aren't compressed. */			return substr($this->_data, $this->_metadata[$key]['_dataStart'], $this->_metadata[$key]['csize']);		}		elseif ($this->_metadata[$key]['_method'] == 0x12)		{			// If bz2 extension is loaded use it			if (extension_loaded('bz2'))			{				return bzdecompress(substr($this->_data, $this->_metadata[$key]['_dataStart'], $this->_metadata[$key]['csize']));			}		}		return '';	}	/**	 * Converts a UNIX timestamp to a 4-byte DOS date and time format	 * (date in high 2-bytes, time in low 2-bytes allowing magnitude	 * comparison).	 *	 * @param   int  $unixtime  The current UNIX timestamp.	 *	 * @return  int  The current date in a 4-byte DOS format.	 *	 * @since   11.1	 */	protected function _unix2DOSTime($unixtime = null)	{		$timearray = (is_null($unixtime)) ? getdate() : getdate($unixtime);		if ($timearray['year'] < 1980)		{			$timearray['year'] = 1980;			$timearray['mon'] = 1;			$timearray['mday'] = 1;			$timearray['hours'] = 0;			$timearray['minutes'] = 0;			$timearray['seconds'] = 0;		}		return (($timearray['year'] - 1980) << 25) | ($timearray['mon'] << 21) | ($timearray['mday'] << 16) | ($timearray['hours'] << 11) | ($timearray['minutes'] << 5) | ($timearray['seconds'] >> 1);	}	/**	 * Adds a "file" to the ZIP archive.	 *	 * @param   array  &$file      File data array to add	 * @param   array  &$contents  An array of existing zipped files.	 * @param   array  &$ctrldir   An array of central directory information.	 *	 * @return  void	 *	 * @since   11.1	 *	 * @todo    Review and finish implementation	 */	private function _addToZIPFile(array &$file, array &$contents, array &$ctrldir)	{		$data = &$file['data'];		$name = str_replace('\\', '/', $file['name']);		/* See if time/date information has been provided. */		$ftime = null;		if (isset($file['time']))		{			$ftime = $file['time'];		}		// Get the hex time.		$dtime = dechex($this->_unix2DosTime($ftime));		$hexdtime = chr(hexdec($dtime[6] . $dtime[7])) . chr(hexdec($dtime[4] . $dtime[5])) . chr(hexdec($dtime[2] . $dtime[3]))			. chr(hexdec($dtime[0] . $dtime[1]));		/* Begin creating the ZIP data. */		$fr = $this->_fileHeader;		/* Version needed to extract. */		$fr .= "\x14\x00";		/* General purpose bit flag. */		$fr .= "\x00\x00";		/* Compression method. */		$fr .= "\x08\x00";		/* Last modification time/date. */		$fr .= $hexdtime;		/* "Local file header" segment. */		$unc_len = strlen($data);		$crc = crc32($data);		$zdata = gzcompress($data);		$zdata = substr(substr($zdata, 0, strlen($zdata) - 4), 2);		$c_len = strlen($zdata);		/* CRC 32 information. */		$fr .= pack('V', $crc);		/* Compressed filesize. */		$fr .= pack('V', $c_len);		/* Uncompressed filesize. */		$fr .= pack('V', $unc_len);		/* Length of filename. */		$fr .= pack('v', strlen($name));		/* Extra field length. */		$fr .= pack('v', 0);		/* File name. */		$fr .= $name;		/* "File data" segment. */		$fr .= $zdata;		/* Add this entry to array. */		$old_offset = strlen(implode('', $contents));		$contents[] = &$fr;		/* Add to central directory record. */		$cdrec = $this->_ctrlDirHeader;		/* Version made by. */		$cdrec .= "\x00\x00";		/* Version needed to extract */		$cdrec .= "\x14\x00";		/* General purpose bit flag */		$cdrec .= "\x00\x00";		/* Compression method */		$cdrec .= "\x08\x00";		/* Last mod time/date. */		$cdrec .= $hexdtime;		/* CRC 32 information. */		$cdrec .= pack('V', $crc);		/* Compressed filesize. */		$cdrec .= pack('V', $c_len);		/* Uncompressed filesize. */		$cdrec .= pack('V', $unc_len);		/* Length of filename. */		$cdrec .= pack('v', strlen($name));		/* Extra field length. */		$cdrec .= pack('v', 0);		/* File comment length. */		$cdrec .= pack('v', 0);		/* Disk number start. */		$cdrec .= pack('v', 0);		/* Internal file attributes. */		$cdrec .= pack('v', 0);		/* External file attributes -'archive' bit set. */		$cdrec .= pack('V', 32);		/* Relative offset of local header. */		$cdrec .= pack('V', $old_offset);		/* File name. */		$cdrec .= $name;		/* Optional extra field, file comment goes here. */		/* Save to central directory array. */		$ctrldir[] = &$cdrec;	}	/**	 * Creates the ZIP file.	 *	 * Official ZIP file format: http://www.pkware.com/appnote.txt	 *	 * @param   array   &$contents  An array of existing zipped files.	 * @param   array   &$ctrlDir   An array of central directory information.	 * @param   string  $path       The path to store the archive.	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 *	 * @todo	Review and finish implementation	 */	private function _createZIPFile(array &$contents, array &$ctrlDir, $path)	{		$data = implode('', $contents);		$dir = implode('', $ctrlDir);		$buffer = $data . $dir . $this->_ctrlDirEnd . /* Total # of entries "on this disk". */		pack('v', count($ctrlDir)) . /* Total # of entries overall. */		pack('v', count($ctrlDir)) . /* Size of central directory. */		pack('V', strlen($dir)) . /* Offset to start of central dir. */		pack('V', strlen($data)) . /* ZIP file comment length. */		"\x00\x00";		if (JFile::write($path, $buffer) === false)		{			return false;		}		else		{			return true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="weblinks<?php echo $moduleclass_sfx; ?>"><?php foreach ($list as $item) :	?><li>	<?php	$link = $item->link;	switch ($params->get('target', 3))	{		case 1:			// open in a new window			echo '<a href="'. $link .'" target="_blank" rel="'.$params->get('follow', 'nofollow').'">'.			htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;		case 2:			// open in a popup window			echo "<a href=\"#\" onclick=\"window.open('". $link ."', '', 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=550'); return false\">".				htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;		default:			// open in parent window			echo '<a href="'. $link .'" rel="'.$params->get('follow', 'nofollow').'">'.				htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;	}	?>	<?php if ($params->get('description', 0)) : ?>		<?php echo nl2br($item->description); ?>	<?php endif; ?>	<?php if ($params->get('hits', 0)) : ?>		<?php echo '(' . $item->hits . ' ' . JText::_('MOD_WEBLINKS_HITS') . ')'; ?>	<?php endif; ?></li><?php endforeach; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->showMessage) : ?><?php echo $this->loadTemplate('message'); ?><?php endif; ?><?php echo $this->loadTemplate('form'); ?>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Component renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererComponent extends JDocumentRenderer{	/**	 * Renders a component script and returns the results as a string	 *	 * @param   string  $component  The name of the component to render	 * @param   array   $params     Associative array of values	 * @param   string  $content    Content script	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($component = null, $params = array(), $content = null)	{		return $content;	}}
<?php/** * Joomla_Sniffs_Functions_FunctionDeclarationSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FunctionDeclarationSniff.php 308840 2011-03-02 05:32:18Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_Functions_FunctionDeclarationSniff. * * Ensure single and multi-line function declarations are defined correctly. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Functions_FunctionDeclarationSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_FUNCTION);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Check if this is a single line or multi-line declaration.        $openBracket  = $tokens[$stackPtr]['parenthesis_opener'];        $closeBracket = $tokens[$stackPtr]['parenthesis_closer'];        if ($tokens[$openBracket]['line'] === $tokens[$closeBracket]['line']) {            $this->processSingleLineDeclaration($phpcsFile, $stackPtr, $tokens);        } else {            $this->processMultiLineDeclaration($phpcsFile, $stackPtr, $tokens);        }    }//end process()    /**     * Processes single-line declarations.     *     * Just uses the Generic BSD-Allman brace sniff.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     * @param array                $tokens    The stack of tokens that make up     *                                        the file.     *     * @return void     */    public function processSingleLineDeclaration(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $tokens)    {        if (class_exists('Generic_Sniffs_Functions_OpeningFunctionBraceBsdAllmanSniff', true) === false) {            throw new PHP_CodeSniffer_Exception('Class Generic_Sniffs_Functions_OpeningFunctionBraceBsdAllmanSniff not found');        }        $sniff = new Generic_Sniffs_Functions_OpeningFunctionBraceBsdAllmanSniff();        $sniff->process($phpcsFile, $stackPtr);    }//end processSingleLineDeclaration()    /**     * Processes mutli-line declarations.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     * @param array                $tokens    The stack of tokens that make up     *                                        the file.     *     * @return void     */    public function processMultiLineDeclaration(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $tokens)    {        // We need to work out how far indented the function        // declaration itself is, so we can work out how far to        // indent parameters.        $functionIndent = 0;        for ($i = ($stackPtr - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$stackPtr]['line']) {                $i++;                break;            }        }        if ($tokens[$i]['code'] === T_WHITESPACE) {            $functionIndent = strlen($tokens[$i]['content']);        }        // Each line between the parenthesis should be indented 4 spaces.        $openBracket  = $tokens[$stackPtr]['parenthesis_opener'];        $closeBracket = $tokens[$stackPtr]['parenthesis_closer'];        $lastLine     = $tokens[$openBracket]['line'];        for ($i = ($openBracket + 1); $i < $closeBracket; $i++) {            if ($tokens[$i]['line'] !== $lastLine)            {                //-- elkuku: disabled//                 if ($tokens[$i]['line'] === $tokens[$closeBracket]['line']) {//                     // Closing brace needs to be indented to the same level//                     // as the function.//                     $expectedIndent = $functionIndent;//                 } else {//                     $expectedIndent = $functionIndent + 4;//                 }                $expectedIndent = $functionIndent + 1;                // We changed lines, so this should be a whitespace indent token.                if ($tokens[$i]['code'] !== T_WHITESPACE) {                    $foundIndent = 0;                } else {                    $foundIndent = strlen($tokens[$i]['content']);                }                if ($expectedIndent !== $foundIndent) {                    $error = 'Multi-line function declaration not indented correctly; expected %s spaces but found %s';                    $data  = array(                              $expectedIndent,                              $foundIndent,                             );                    $phpcsFile->addError($error, $i, 'Indent', $data);                }                $lastLine = $tokens[$i]['line'];            }//end if            if ($tokens[$i]['code'] === T_ARRAY) {                // Skip arrays as they have their own indentation rules.                $i        = $tokens[$i]['parenthesis_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }        }//end for        if (isset($tokens[$stackPtr]['scope_opener']) === true) {            // The openning brace needs to be one space away            // from the closing parenthesis.            $next = $tokens[($closeBracket + 1)];            if ($next['code'] !== T_WHITESPACE) {                $length = 0;            } else if ($next['content'] === $phpcsFile->eolChar) {                $length = -1;            } else {                $length = strlen($next['content']);            }            if (false)//$length !== 1) {            {                $data = array($length);                $code = 'SpaceBeforeOpenBrace';            //-- elkuku: nonsens ?//                 $error = 'There must be a single space between the closing parenthesis and the opening brace of a multi-line function declaration; found ';//                 if ($length === -1) {//                     $error .= 'newline';//                     $code   = 'NewlineBeforeOpenBrace';//                 } else {//                     $error .= '%s spaces';//                 }                $phpcsFile->addError($error, ($closeBracket + 1), $code, $data);                return;            }            // And just in case they do something funny before the brace...            $next = $phpcsFile->findNext(                T_WHITESPACE,                ($closeBracket + 1),                null,                true            );            //-- elkuku: nonsens ?//             if ($next !== false && $tokens[$next]['code'] !== T_OPEN_CURLY_BRACKET) {//                 $error = 'There must be a single space between the closing parenthesis and the opening brace of a multi-line function declaration';//                 $phpcsFile->addError($error, $next, 'NoSpaceBeforeOpenBrace');//             }        }//end if        // The closing parenthesis must be on a new line, even        // when checking abstract function definitions.        $prev = $phpcsFile->findPrevious(            T_WHITESPACE,            ($closeBracket - 1),            null,            true        );        if ($tokens[$prev]['line'] != $tokens[$closeBracket]['line']) {            $error = 'The closing parenthesis of a multi-line function declaration must be on the same line';            $phpcsFile->addError($error, $closeBracket, 'CloseBracketLine');        }    }//end processMultiLineDeclaration()}//end class?>
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ucwords* Uppercase the first character of each word in a string* Note: requires utf8_substr_replace and utf8_strtoupper* @param string* @return string with first char of each word uppercase* @see http://www.php.net/ucwords* @package utf8* @subpackage strings*/function utf8_ucwords($str) {    // Note: [\x0c\x09\x0b\x0a\x0d\x20] matches;    // form feeds, horizontal tabs, vertical tabs, linefeeds and carriage returns    // This corresponds to the definition of a "word" defined at http://www.php.net/ucwords    $pattern = '/(^|([\x0c\x09\x0b\x0a\x0d\x20]+))([^\x0c\x09\x0b\x0a\x0d\x20]{1})[^\x0c\x09\x0b\x0a\x0d\x20]*/u';    return preg_replace_callback($pattern, 'utf8_ucwords_callback',$str);}//---------------------------------------------------------------/*** Callback function for preg_replace_callback call in utf8_ucwords* You don't need to call this yourself* @param array of matches corresponding to a single word* @return string with first char of the word in uppercase* @see utf8_ucwords* @see utf8_strtoupper* @package utf8* @subpackage strings*/function utf8_ucwords_callback($matches) {    $leadingws = $matches[2];    $ucfirst = utf8_strtoupper($matches[3]);    $ucword = utf8_substr_replace(ltrim($matches[0]),$ucfirst,0,1);    return $leadingws . $ucword;}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to transform an image to grayscale. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterGrayscale extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the grayscale filter.		imagefilter($this->handle, IMG_FILTER_GRAYSCALE);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.stream');/** * Bzip2 format adapter for the JArchive class * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveBzip2 implements JArchiveExtractable{	/**	 * Bzip2 file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * Extract a Bzip2 compressed file to a given path	 *	 * @param   string  $archive      Path to Bzip2 archive to extract	 * @param   string  $destination  Path to extract archive to	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function extract($archive, $destination, array $options = array ())	{		$this->_data = null;		if (!extension_loaded('bz2'))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'The bz2 extension is not available.');			}			else			{				throw new RuntimeException('The bz2 extension is not available.');			}		}		if (!isset($options['use_streams']) || $options['use_streams'] == false)		{			// Old style: read the whole file and then parse it			$this->_data = file_get_contents($archive);			if (!$this->_data)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive');				}				else				{					throw new RuntimeException('Unable to read archive');				}			}			$buffer = bzdecompress($this->_data);			unset($this->_data);			if (empty($buffer))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to decompress data');				}				else				{					throw new RuntimeException('Unable to decompress data');				}			}			if (JFile::write($destination, $buffer) === false)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive');				}				else				{					throw new RuntimeException('Unable to write archive');				}			}		}		else		{			// New style! streams!			$input = JFactory::getStream();			// Use bzip			$input->set('processingmethod', 'bz');			if (!$input->open($archive))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive (bz2)');				}				else				{					throw new RuntimeException('Unable to read archive (bz2)');				}			}			$output = JFactory::getStream();			if (!$output->open($destination, 'w'))			{				$input->close();				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive (bz2)');				}				else				{					throw new RuntimeException('Unable to write archive (bz2)');				}			}			do			{				$this->_data = $input->read($input->get('chunksize', 8196));				if ($this->_data)				{					if (!$output->write($this->_data))					{						$input->close();						if (class_exists('JError'))						{							return JError::raiseWarning(100, 'Unable to write archive (bz2)');						}						else						{							throw new RuntimeException('Unable to write archive (bz2)');						}					}				}			}			while ($this->_data);			$output->close();			$input->close();		}		return true;	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return extension_loaded('bz2');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;?><h3>	<?php echo JText::_('COM_FINDER_STATISTICS_TITLE') ?></h3><div class="row-fluid">	<div class="span6">		<p class="tab-description"><?php echo JText::sprintf('COM_FINDER_STATISTICS_STATS_DESCRIPTION', number_format($this->data->term_count), number_format($this->data->link_count), number_format($this->data->taxonomy_node_count), number_format($this->data->taxonomy_branch_count)); ?></p>		<table class="table table-striped table-condensed">			<thead>				<tr>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_HEADING');?>					</th>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_COUNT');?>					</th>				</tr>			</thead>			<tbody>				<?php foreach ($this->data->type_list as $type) :?>				<tr>					<td>						<?php echo $type->type_title;?>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($type->link_count);?></span>					</td>				</tr>				<?php endforeach; ?>				<tr>					<td>						<strong><?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_TOTAL'); ?></strong>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($this->data->link_count); ?></span>					</td>				</tr>			</tbody>		</table>	</div></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE.'/components/com_content/helpers/route.php';JModelLegacy::addIncludePath(JPATH_SITE.'/components/com_content/models', 'ContentModel');/** * Helper for mod_articles_popular * * @package     Joomla.Site * @subpackage  mod_articles_popular */abstract class ModArticlesPopularHelper{	public static function getList(&$params)	{		// Get an instance of the generic articles model		$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));		// Set application parameters in model		$app = JFactory::getApplication();		$appParams = $app->getParams();		$model->setState('params', $appParams);		// Set the filters based on the module params		$model->setState('list.start', 0);		$model->setState('list.limit', (int) $params->get('count', 5));		$model->setState('filter.published', 1);		$model->setState('filter.featured', $params->get('show_front', 1) == 1 ? 'show' : 'hide');		// Access filter		$access = !JComponentHelper::getParams('com_content')->get('show_noauth');		$authorised = JAccess::getAuthorisedViewLevels(JFactory::getUser()->get('id'));		$model->setState('filter.access', $access);		// Category filter		$model->setState('filter.category_id', $params->get('catid', array()));		// Filter by language		$model->setState('filter.language', $app->getLanguageFilter());		// Ordering		$model->setState('list.ordering', 'a.hits');		$model->setState('list.direction', 'DESC');		$items = $model->getItems();		foreach ($items as &$item)		{			$item->slug = $item->id.':'.$item->alias;			$item->catslug = $item->catid.':'.$item->category_alias;			if ($access || in_array($item->access, $authorised))			{				// We know that user has the privilege to view the article				$item->link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug));			} else {				$item->link = JRoute::_('index.php?option=com_users&view=login');			}		}		return $items;	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Summary View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewSummaryHtml extends InstallationViewDefault{	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * The PHP options checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpoptions;	/**	 * The PHP settings checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpsettings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options     = $this->model->getOptions();		$this->phpoptions  = $this->model->getPhpOptions();		$this->phpsettings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FunctionCallSignatureSniff.php 284575 2009-07-22 02:58:19Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Functions_FunctionCallSignatureSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_STRING);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Find the next non-empty token.        $openBracket = $phpcsFile->findNext(PHP_CodeSniffer_Tokens::$emptyTokens, ($stackPtr + 1), null, true);        if ($tokens[$openBracket]['code'] !== T_OPEN_PARENTHESIS) {            // Not a function call.            return;        }        if (isset($tokens[$openBracket]['parenthesis_closer']) === false) {            // Not a function call.            return;        }        // Find the previous non-empty token.        $search   = PHP_CodeSniffer_Tokens::$emptyTokens;        $search[] = T_BITWISE_AND;        $previous = $phpcsFile->findPrevious($search, ($stackPtr - 1), null, true);        if ($tokens[$previous]['code'] === T_FUNCTION) {            // It's a function definition, not a function call.            return;        }        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        if (($stackPtr + 1) !== $openBracket) {            // Checking this: $value = my_function[*](...).            $error = 'Space before opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceBeforeOpenBracket');        }        $next = $phpcsFile->findNext(T_WHITESPACE, ($closeBracket + 1), null, true);        if ($tokens[$next]['code'] === T_SEMICOLON) {            if (in_array($tokens[($closeBracket + 1)]['code'], PHP_CodeSniffer_Tokens::$emptyTokens) === true) {                $error = 'Space after closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closeBracket, 'SpaceAfterCloseBracket');            }        }        // Check if this is a single line or multi-line function call.        if ($tokens[$openBracket]['line'] === $tokens[$closeBracket]['line']) {            $this->processSingleLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        } else {            $this->processMultiLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        }    }//end process()    /**     * Processes single-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processSingleLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        if ($tokens[($openBracket + 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function([*]...).            $error = 'Space after opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceAfterOpenBracket');        }        $closer = $tokens[$openBracket]['parenthesis_closer'];        if ($tokens[($closer - 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function(...[*]).            $between = $phpcsFile->findNext(T_WHITESPACE, ($openBracket + 1), null, true);            // Only throw an error if there is some content between the parenthesis.            // i.e., Checking for this: $value = my_function().            // If there is no content, then we would have thrown an error in the            // previous IF statement because it would look like this:            // $value = my_function( ).            if ($between !== $closer) {                $error = 'Space before closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closer, 'SpaceBeforeCloseBracket');            }        }    }//end processSingleLineCall()    /**     * Processes multi-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processMultiLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        // We need to work out how far indented the function        // call itself is, so we can work out how far to        // indent the arguments.        $functionIndent = 0;        for ($i = ($stackPtr - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$stackPtr]['line']) {                $i++;                break;            }        }        if ($tokens[$i]['code'] === T_WHITESPACE) {            $functionIndent = strlen($tokens[$i]['content']);        }        // Each line between the parenthesis should be indented 4 spaces.        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        $lastLine     = $tokens[$openBracket]['line'];        for ($i = ($openBracket + 1); $i < $closeBracket; $i++) {            // Skip nested function calls.            if ($tokens[$i]['code'] === T_OPEN_PARENTHESIS) {                $i        = $tokens[$i]['parenthesis_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }            if ($tokens[$i]['line'] !== $lastLine) {                $lastLine = $tokens[$i]['line'];                // We changed lines, so this should be a whitespace indent token.                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$heredocTokens) === true) {                    // Ignore heredoc indentation.                    continue;                }                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$stringTokens) === true) {                    if ($tokens[$i]['code'] === $tokens[($i - 1)]['code']) {                        // Ignore multi-line string indentation.                        continue;                    }                }                if ($tokens[$i]['line'] === $tokens[$closeBracket]['line']) {                    // Closing brace needs to be indented to the same level                    // as the function call.                    $expectedIndent = $functionIndent;                } else {                    $expectedIndent = ($functionIndent + 4);                }                if ($tokens[$i]['code'] !== T_WHITESPACE) {                    $foundIndent = 0;                } else {                    $foundIndent = strlen($tokens[$i]['content']);                }                if ($expectedIndent !== $foundIndent) {// TODO AJE Allow for tab indents instead of spaces//                    $error = 'Multi-line function call not indented correctly; expected %s spaces but found %s';//                    $data  = array(//                              $expectedIndent,//                              $foundIndent,//                             );//                    $phpcsFile->addError($error, $i, 'Indent', $data);                }            }//end if            // Skip the rest of a closure.            if ($tokens[$i]['code'] === T_CLOSURE) {                $i        = $tokens[$i]['scope_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }        }//end for        if ($tokens[($openBracket + 1)]['content'] !== $phpcsFile->eolChar        && T_CONSTANT_ENCAPSED_STRING != $tokens[($openBracket + 1)]['code'])// allow a '"'        {            $error = 'Opening parenthesis of a multi-line function call must be the last content on the line';            $phpcsFile->addError($error, $stackPtr, 'ContentAfterOpenBracket');        }        $prev = $phpcsFile->findPrevious(T_WHITESPACE, ($closeBracket - 1), null, true);        if ($tokens[$prev]['line'] === $tokens[$closeBracket]['line']        && T_CONSTANT_ENCAPSED_STRING != $tokens[$prev]['code'])// allow a '"'        {            $error = 'Closing parenthesis of a multi-line function call must be on a line by itself';            $phpcsFile->addError($error, $closeBracket, 'CloseBracketLine');        }    }//end processMultiLineCall()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentTableFeatured extends JTable{	/**	 * @param   JDatabaseDriver  A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__content_frontpage', 'content_id', $db);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentRAW class, provides an easy interface to parse and display raw output * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRaw extends JDocument{	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'text/html';		// Set document type		$this->_type = 'raw';	}	/**	 * Render the document.	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   11.1	 */	public function render($cache = false, $params = array())	{		parent::render();		return $this->getBuffer();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Rest model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersModelLogin extends JModelForm{	/**	 * Method to get the login form.	 *	 * The base form is loaded from XML and then an event is fired	 * for users plugins to extend the form with extra fields.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.login', 'login', array('load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  array  The default data is an empty array.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered login form data.		$app  = JFactory::getApplication();		$data = $app->getUserState('users.login.form.data', array());		// check for return URL from the request first		if ($return = JRequest::getVar('return', '', 'method', 'base64'))		{			$data['return'] = base64_decode($return);			if (!JURI::isInternal($data['return']))			{				$data['return'] = '';			}		}		// Set the return URL if empty.		if (!isset($data['return']) || empty($data['return']))		{			$data['return'] = 'index.php?option=com_users&view=profile';		}		$app->setUserState('users.login.form.data', $data);		$this->preprocessData('com_users.login', $data);		return $data;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$params	= JFactory::getApplication()->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Override JModelAdmin::preprocessForm to ensure the correct plugin group is loaded.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ucfirst* Make a string's first character uppercase* Note: requires utf8_strtoupper* @param string* @return string with first character as upper case (if applicable)* @see http://www.php.net/ucfirst* @see utf8_strtoupper* @package utf8* @subpackage strings*/function utf8_ucfirst($str){    switch ( utf8_strlen($str) ) {        case 0:            return '';        break;        case 1:            return utf8_strtoupper($str);        break;        default:            preg_match('/^(.{1})(.*)$/us', $str, $matches);            return utf8_strtoupper($matches[1]).$matches[2];        break;    }}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument Modules renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererModules extends JDocumentRenderer{	/**	 * Renders multiple modules script and returns the results as a string	 *	 * @param   string  $position  The position of the modules to render	 * @param   array   $params    Associative array of values	 * @param   string  $content   Module content	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($position, $params = array(), $content = null)	{		$renderer = $this->_doc->loadRenderer('module');		$buffer = '';		foreach (JModuleHelper::getModules($position) as $mod)		{			$buffer .= $renderer->render($mod, $params, $content);		}		return $buffer;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML utility class for the installation application * * @package  Joomla.Installation * @since    1.6 */class JHtmlInstallation{	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   1.6	 */	public static function stepbar()	{		// Determine if the configuration file path is writable.		$path = JPATH_CONFIGURATION . '/configuration.php';		$useftp = (file_exists($path)) ? !is_writable($path) : !is_writable(JPATH_CONFIGURATION . '/');		$tabs = array();		$tabs[] = 'site';		$tabs[] = 'database';		if ($useftp)		{			$tabs[] = 'ftp';		}		$tabs[] = 'summary';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   3.1	 */	public static function stepbarlanguages()	{		$tabs = array();		$tabs[] = 'languages';		$tabs[] = 'defaultlanguage';		$tabs[] = 'complete';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the navigation tab	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  string  Markup for the tab	 *	 * @since   3.1	 */	private static function getTab($id, $tabs)	{		$input = JFactory::getApplication()->input;		$num   = self::getTabNumber($id, $tabs);		$view  = self::getTabNumber($input->getWord('view'), $tabs);		$tab   = '<span class="badge">' . $num . '</span> ' . JText::_('INSTL_STEP_' . strtoupper($id) . '_LABEL');		if ($view + 1 == $num)		{			$tab = '<a href="#" onclick="Install.submitform();">' . $tab . '</a>';		}		elseif ($view < $num)		{			$tab = '<span>' . $tab . '</span>';		}		else		{			$tab = '<a href="#" onclick="return Install.goToPage(\'' . $id . '\')">' . $tab . '</a>';		}		return '<li class="step' . ($num == $view ? ' active' : '') . '" id="' . $id . '">' . $tab . '</li>';	}	/**	 * Method to determine the tab (step) number	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  integer  Tab number in navigation sequence	 *	 * @since   3.1	 */	private static function getTabNumber($id, $tabs)	{		$num = (int) array_search($id, $tabs);		$num++;		return $num;	}}
<?php/*** Locate a byte index given a UTF-8 character index* @version $Id$* @package utf8* @subpackage position*///--------------------------------------------------------------------/*** Given a string and a character index in the string, in* terms of the UTF-8 character position, returns the byte* index of that character. Can be useful when you want to* PHP's native string functions but we warned, locating* the byte can be expensive* Takes variable number of parameters - first must be* the search string then 1 to n UTF-8 character positions* to obtain byte indexes for - it is more efficient to search* the string for multiple characters at once, than make* repeated calls to this function** @author Chris Smith<chris@jalakai.co.uk>* @param string string to locate index in* @param int (n times)* @return mixed - int if only one input int, array if more* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage position*/function utf8_byte_position() {    $args = func_get_args();    $str =& array_shift($args);    if (!is_string($str)) return false;    $result = array();    // trivial byte index, character offset pair    $prev = array(0,0);    // use a short piece of str to estimate bytes per character    // $i (& $j) -> byte indexes into $str    $i = utf8_locate_next_chr($str, 300);    // $c -> character offset into $str    $c = strlen(utf8_decode(substr($str,0,$i)));    // deal with arguments from lowest to highest    sort($args);    foreach ($args as $offset) {        // sanity checks FIXME        // 0 is an easy check        if ($offset == 0) { $result[] = 0; continue; }        // ensure no endless looping        $safety_valve = 50;        do {            if ( ($c - $prev[1]) == 0 ) {                // Hack: gone past end of string                $error = 0;                $i = strlen($str);                break;            }            $j = $i + (int)(($offset-$c) * ($i - $prev[0]) / ($c - $prev[1]));            // correct to utf8 character boundary            $j = utf8_locate_next_chr($str, $j);            // save the index, offset for use next iteration            $prev = array($i,$c);            if ($j > $i) {                // determine new character offset                $c += strlen(utf8_decode(substr($str,$i,$j-$i)));            } else {                // ditto                $c -= strlen(utf8_decode(substr($str,$j,$i-$j)));            }            $error = abs($c-$offset);            // ready for next time around            $i = $j;        // from 7 it is faster to iterate over the string        } while ( ($error > 7) && --$safety_valve) ;        if ($error && $error <= 7) {            if ($c < $offset) {                // move up                while ($error--) { $i = utf8_locate_next_chr($str,++$i); }            } else {                // move down                while ($error--) { $i = utf8_locate_current_chr($str,--$i); }            }            // ready for next arg            $c = $offset;        }        $result[] = $i;    }    if ( count($result) == 1 ) {        return $result[0];    }    return $result;}//--------------------------------------------------------------------/*** Given a string and any byte index, returns the byte index* of the start of the current UTF-8 character, relative to supplied* position. If the current character begins at the same place as the* supplied byte index, that byte index will be returned. Otherwise* this function will step backwards, looking for the index where* curent UTF-8 character begins* @author Chris Smith<chris@jalakai.co.uk>* @param string* @param int byte index in the string* @return int byte index of start of next UTF-8 character* @package utf8* @subpackage position*/function utf8_locate_current_chr( &$str, $idx ) {    if ($idx <= 0) return 0;    $limit = strlen($str);    if ($idx >= $limit) return $limit;    // Binary value for any byte after the first in a multi-byte UTF-8 character    // will be like 10xxxxxx so & 0xC0 can be used to detect this kind    // of byte - assuming well formed UTF-8    while ($idx && ((ord($str[$idx]) & 0xC0) == 0x80)) $idx--;    return $idx;}//--------------------------------------------------------------------/*** Given a string and any byte index, returns the byte index* of the start of the next UTF-8 character, relative to supplied* position. If the next character begins at the same place as the* supplied byte index, that byte index will be returned.* @author Chris Smith<chris@jalakai.co.uk>* @param string* @param int byte index in the string* @return int byte index of start of next UTF-8 character* @package utf8* @subpackage position*/function utf8_locate_next_chr( &$str, $idx ) {    if ($idx <= 0) return 0;    $limit = strlen($str);    if ($idx >= $limit) return $limit;    // Binary value for any byte after the first in a multi-byte UTF-8 character    // will be like 10xxxxxx so & 0xC0 can be used to detect this kind    // of byte - assuming well formed UTF-8    while (($idx < $limit) && ((ord($str[$idx]) & 0xC0) == 0x80)) $idx++;    return $idx;}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset id="users-profile-core">	<legend>		<?php echo JText::_('COM_USERS_PROFILE_CORE_LEGEND'); ?>	</legend>	<dl class="dl-horizontal">		<dt>			<?php echo JText::_('COM_USERS_PROFILE_NAME_LABEL'); ?>		</dt>		<dd>			<?php echo $this->data->name; ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_USERNAME_LABEL'); ?>		</dt>		<dd>			<?php echo htmlspecialchars($this->data->username); ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_REGISTERED_DATE_LABEL'); ?>		</dt>		<dd>			<?php echo JHtml::_('date', $this->data->registerDate); ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_LAST_VISITED_DATE_LABEL'); ?>		</dt>		<?php if ($this->data->lastvisitDate != '0000-00-00 00:00:00'){?>			<dd>				<?php echo JHtml::_('date', $this->data->lastvisitDate); ?>			</dd>		<?php }		else		{?>			<dd>				<?php echo JText::_('COM_USERS_PROFILE_NEVER_VISITED'); ?>			</dd>		<?php } ?>	</dl></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * none (output raw module content) */function modChrome_none($module, &$params, &$attribs){	echo $module->content;}/* * html5 (chosen html5 tag and font headder tags) */function modChrome_html5($module, &$params, &$attribs){	$moduleTag      = $params->get('module_tag');	$headerTag      = htmlspecialchars($params->get('header_tag'));	$headerClass    = $params->get('header_class');	$bootstrapSize  = $params->get('bootstrap_size');	$moduleClass    = !empty($bootstrapSize) ? ' span' . (int) $bootstrapSize . '' : '';	$moduleClassSfx = htmlspecialchars($params->get('moduleclass_sfx'));	if (!empty ($module->content))	{		$html  = "<{$moduleTag} class=\"moduletable{$moduleClassSfx} {$moduleClass}\">";		if ((bool) $module->showtitle)		{			$html .= "<{$headerTag} class=\"{$headerClass}\">{$module->title}</{$headerTag}>";		}		$html .= $module->content;		$html .= "</{$moduleTag}>";		echo $html;	}}/* * xhtml (divs and font header tags) */function modChrome_xhtml($module, &$params, &$attribs){	$content = trim($module->content);	if (!empty ($content)) : ?>		<div class="module<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">		<?php if ($module->showtitle != 0) : ?>			<h3><?php echo $module->title; ?></h3>		<?php endif; ?>			<?php echo $content; ?>		</div>	<?php endif;}/* * allows sliders */function modChrome_sliders($module, &$params, &$attribs){	$content = trim($module->content);	if (!empty($content))	{		if ($params->get('automatic_title', '0') == '0')		{			echo JHtml::_('sliders.panel', $module->title, 'module' . $module->id);		}		elseif (method_exists('mod' . $module->name . 'Helper', 'getTitle'))		{			echo JHtml::_('sliders.panel', call_user_func_array(array('mod' . $module->name . 'Helper', 'getTitle'), array($params, $module)), 'module' . $module->id);		}		else		{			echo JHtml::_('sliders.panel', JText::_('MOD_' . $module->name . '_TITLE'), 'module' . $module->id);		}		echo $content;	}}/* * allows tabs */function modChrome_tabs($module, &$params, &$attribs){	$content = trim($module->content);	if (!empty($content))	{		if ($params->get('automatic_title', '0') == '0')		{			echo JHtml::_('tabs.panel', $module->title, 'module' . $module->id);		}		elseif (method_exists('mod' . $module->name . 'Helper', 'getTitle'))		{			echo JHtml::_('tabs.panel', call_user_func_array(array('mod' . $module->name . 'Helper', 'getTitle'), array($params)), 'module' . $module->id);		}		else		{			echo JHtml::_('tabs.panel', JText::_('MOD_' . $module->name . '_TITLE'), 'module' . $module->id);		}		echo $content;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="accordion" id="accordion1">	<div class="accordion-group">		<div class="accordion-heading">			<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#batch">				<?php echo JText::_('COM_REDIRECT_FIELD_NEW_URL_LABEL');?>			</a>		</div>		<div id="batch" class="accordion-body collapse">			<div class="accordion-inner">				<fieldset class="batch form-inline">					<div class="control-group">						<label for="new_url" class="control-label"><?php echo JText::_('COM_REDIRECT_FIELD_NEW_URL_LABEL'); ?></label>						<div class="controls">							<input type="text" name="new_url" id="new_url" value="" size="50" title="<?php echo JText::_('COM_REDIRECT_FIELD_NEW_URL_DESC'); ?>" />						</div>					</div>					<div class="control-group">						<label for="comment" class="control-label"><?php echo JText::_('COM_REDIRECT_FIELD_COMMENT_LABEL'); ?></label>						<div class="controls">							<input type="text" name="comment" id="comment" value="" size="50" title="<?php echo JText::_('COM_REDIRECT_FIELD_COMMENT_DESC'); ?>" />						</div>					</div>					<button class="btn btn-primary" type="button" onclick="this.form.task.value='links.activate';this.form.submit();"><?php echo JText::_('COM_REDIRECT_BUTTON_UPDATE_LINKS'); ?></button>				</fieldset>			</div>		</div>	</div></div>
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDaemon has been renamed to JApplicationDaemon.', JLog::WARNING, 'deprecated');/** * Backward Compatability Stub for JApplicationDaemon * * @package     Joomla.Legacy * @subpackage  Application * @since       11.1 * @deprecated  12.3 Use JApplicationDaemon instead. */class JDaemon extends JApplicationDaemon{	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @since   11.1	 * @deprecated  12.3 Use JApplicationDaemon instead.	 * @throws  RuntimeException	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		JLog::add('JDaemon is deprecated. Use JApplicationDaemon instead.', JLog::WARNING, 'deprecated');		parent::__construct($input, $config, $dispatcher);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_PLUGINS_'.$name.'_FIELDSET_LABEL';	echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($label) ?></legend>		<?php $hidden_fields = ''; ?>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<?php if (!$field->hidden) : ?>			<li>				<?php echo $field->label; ?>				<?php echo $field->input; ?>			</li>			<?php else : $hidden_fields .= $field->input; ?>			<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php echo $hidden_fields; ?>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// PHP mbstring and iconv local configuration// Check if mbstring extension is loaded and attempt to load it if not present except for windowsif (extension_loaded('mbstring')){	// Make sure to suppress the output in case ini_set is disabled	@ini_set('mbstring.internal_encoding', 'UTF-8');	@ini_set('mbstring.http_input', 'UTF-8');	@ini_set('mbstring.http_output', 'UTF-8');}// Same for iconvif (function_exists('iconv')){	// These are settings that can be set inside code	iconv_set_encoding("internal_encoding", "UTF-8");	iconv_set_encoding("input_encoding", "UTF-8");	iconv_set_encoding("output_encoding", "UTF-8");}/** * Include the utf8 package */jimport('phputf8.utf8');jimport('phputf8.strcasecmp');/** * String handling class for utf-8 data * Wraps the phputf8 library * All functions assume the validity of utf-8 strings. * * @package     Joomla.Platform * @subpackage  String * @since       11.1 */abstract class JString{	/**	 * Increment styles.	 *	 * @var    array	 * @since  11.3	 */	protected static $incrementStyles = array(		'dash' => array(			'#-(\d+)$#',			'-%d'		),		'default' => array(			array('#\((\d+)\)$#', '#\(\d+\)$#'),			array(' (%d)', '(%d)'),		),	);	/**	 * Split a string in camel case format	 *	 * "FooBarABCDef"            becomes  array("Foo", "Bar", "ABC", "Def");	 * "JFooBar"                 becomes  array("J", "Foo", "Bar");	 * "J001FooBar002"           becomes  array("J001", "Foo", "Bar002");	 * "abcDef"                  becomes  array("abc", "Def");	 * "abc_defGhi_Jkl"          becomes  array("abc_def", "Ghi_Jkl");	 * "ThisIsA_NASAAstronaut"   becomes  array("This", "Is", "A_NASA", "Astronaut")),	 * "JohnFitzgerald_Kennedy"  becomes  array("John", "Fitzgerald_Kennedy")),	 *	 * @param   string  $string  The source string.	 *	 * @return  array   The splitted string.	 *	 * @deprecated  12.3 Use JStringNormalise::fromCamelCase()	 * @since   11.3	 */	public static function splitCamelCase($string)	{		JLog::add('JString::splitCamelCase has been deprecated. Use JStringNormalise::fromCamelCase.', JLog::WARNING, 'deprecated');		return JStringNormalise::fromCamelCase($string, true);	}	/**	 * Increments a trailing number in a string.	 *	 * Used to easily create distinct labels when copying objects. The method has the following styles:	 *	 * default: "Label" becomes "Label (2)"	 * dash:    "Label" becomes "Label-2"	 *	 * @param   string   $string  The source string.	 * @param   string   $style   The the style (default|dash).	 * @param   integer  $n       If supplied, this number is used for the copy, otherwise it is the 'next' number.	 *	 * @return  string  The incremented string.	 *	 * @since   11.3	 */	public static function increment($string, $style = 'default', $n = 0)	{		$styleSpec = isset(self::$incrementStyles[$style]) ? self::$incrementStyles[$style] : self::$incrementStyles['default'];		// Regular expression search and replace patterns.		if (is_array($styleSpec[0]))		{			$rxSearch = $styleSpec[0][0];			$rxReplace = $styleSpec[0][1];		}		else		{			$rxSearch = $rxReplace = $styleSpec[0];		}		// New and old (existing) sprintf formats.		if (is_array($styleSpec[1]))		{			$newFormat = $styleSpec[1][0];			$oldFormat = $styleSpec[1][1];		}		else		{			$newFormat = $oldFormat = $styleSpec[1];		}		// Check if we are incrementing an existing pattern, or appending a new one.		if (preg_match($rxSearch, $string, $matches))		{			$n = empty($n) ? ($matches[1] + 1) : $n;			$string = preg_replace($rxReplace, sprintf($oldFormat, $n), $string);		}		else		{			$n = empty($n) ? 2 : $n;			$string .= sprintf($newFormat, $n);		}		return $string;	}	/**	 * UTF-8 aware alternative to strpos.	 *	 * Find position of first occurrence of a string.	 *	 * @param   string   $str     String being examined	 * @param   string   $search  String being searched for	 * @param   integer  $offset  Optional, specifies the position from which the search should be performed	 *	 * @return  mixed  Number of characters before the first match or FALSE on failure	 *	 * @see     http://www.php.net/strpos	 * @since   11.1	 */	public static function strpos($str, $search, $offset = false)	{		if ($offset === false)		{			return utf8_strpos($str, $search);		}		else		{			return utf8_strpos($str, $search, $offset);		}	}	/**	 * UTF-8 aware alternative to strrpos	 * Finds position of last occurrence of a string	 *	 * @param   string   $str     String being examined.	 * @param   string   $search  String being searched for.	 * @param   integer  $offset  Offset from the left of the string.	 *	 * @return  mixed  Number of characters before the last match or false on failure	 *	 * @see     http://www.php.net/strrpos	 * @since   11.1	 */	public static function strrpos($str, $search, $offset = 0)	{		return utf8_strrpos($str, $search, $offset);	}	/**	 * UTF-8 aware alternative to substr	 * Return part of a string given character offset (and optionally length)	 *	 * @param   string   $str     String being processed	 * @param   integer  $offset  Number of UTF-8 characters offset (from left)	 * @param   integer  $length  Optional length in UTF-8 characters from offset	 *	 * @return  mixed string or FALSE if failure	 *	 * @see     http://www.php.net/substr	 * @since   11.1	 */	public static function substr($str, $offset, $length = false)	{		if ($length === false)		{			return utf8_substr($str, $offset);		}		else		{			return utf8_substr($str, $offset, $length);		}	}	/**	 * UTF-8 aware alternative to strtlower	 *	 * Make a string lowercase	 * Note: The concept of a characters "case" only exists is some alphabets	 * such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	 * not exist in the Chinese alphabet, for example. See Unicode Standard	 * Annex #21: Case Mappings	 *	 * @param   string  $str  String being processed	 *	 * @return  mixed  Either string in lowercase or FALSE is UTF-8 invalid	 *	 * @see http://www.php.net/strtolower	 * @since   11.1	 */	public static function strtolower($str)	{		return utf8_strtolower($str);	}	/**	 * UTF-8 aware alternative to strtoupper	 * Make a string uppercase	 * Note: The concept of a characters "case" only exists is some alphabets	 * such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	 * not exist in the Chinese alphabet, for example. See Unicode Standard	 * Annex #21: Case Mappings	 *	 * @param   string  $str  String being processed	 *	 * @return  mixed  Either string in uppercase or FALSE is UTF-8 invalid	 *	 * @see     http://www.php.net/strtoupper	 * @since   11.1	 */	public static function strtoupper($str)	{		return utf8_strtoupper($str);	}	/**	 * UTF-8 aware alternative to strlen.	 *	 * Returns the number of characters in the string (NOT THE NUMBER OF BYTES),	 *	 * @param   string  $str  UTF-8 string.	 *	 * @return  integer  Number of UTF-8 characters in string.	 *	 * @see http://www.php.net/strlen	 * @since   11.1	 */	public static function strlen($str)	{		return utf8_strlen($str);	}	/**	 * UTF-8 aware alternative to str_ireplace	 * Case-insensitive version of str_replace	 *	 * @param   string   $search   String to search	 * @param   string   $replace  Existing string to replace	 * @param   string   $str      New string to replace with	 * @param   integer  $count    Optional count value to be passed by referene	 *	 * @return  string  UTF-8 String	 *	 * @see     http://www.php.net/str_ireplace	 * @since   11.1	 */	public static function str_ireplace($search, $replace, $str, $count = null)	{		jimport('phputf8.str_ireplace');		if ($count === false)		{			return utf8_ireplace($search, $replace, $str);		}		else		{			return utf8_ireplace($search, $replace, $str, $count);		}	}	/**	 * UTF-8 aware alternative to str_split	 * Convert a string to an array	 *	 * @param   string   $str        UTF-8 encoded string to process	 * @param   integer  $split_len  Number to characters to split string by	 *	 * @return  array	 *	 * @see     http://www.php.net/str_split	 * @since   11.1	 */	public static function str_split($str, $split_len = 1)	{		jimport('phputf8.str_split');		return utf8_str_split($str, $split_len);	}	/**	 * UTF-8/LOCALE aware alternative to strcasecmp	 * A case insensitive string comparison	 *	 * @param   string  $str1    string 1 to compare	 * @param   string  $str2    string 2 to compare	 * @param   mixed   $locale  The locale used by strcoll or false to use classical comparison	 *	 * @return  integer   < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.	 *	 * @see     http://www.php.net/strcasecmp	 * @see     http://www.php.net/strcoll	 * @see     http://www.php.net/setlocale	 * @since   11.1	 */	public static function strcasecmp($str1, $str2, $locale = false)	{		if ($locale)		{			// Get current locale			$locale0 = setlocale(LC_COLLATE, 0);			if (!$locale = setlocale(LC_COLLATE, $locale))			{				$locale = $locale0;			}			// See if we have successfully set locale to UTF-8			if (!stristr($locale, 'UTF-8') && stristr($locale, '_') && preg_match('~\.(\d+)$~', $locale, $m))			{				$encoding = 'CP' . $m[1];			}			elseif (stristr($locale, 'UTF-8') || stristr($locale, 'utf8'))			{				$encoding = 'UTF-8';			}			else			{				$encoding = 'nonrecodable';			}			// If we successfully set encoding it to utf-8 or encoding is sth weird don't recode			if ($encoding == 'UTF-8' || $encoding == 'nonrecodable')			{				return strcoll(utf8_strtolower($str1), utf8_strtolower($str2));			}			else			{				return strcoll(					self::transcode(utf8_strtolower($str1), 'UTF-8', $encoding),					self::transcode(utf8_strtolower($str2), 'UTF-8', $encoding)				);			}		}		else		{			return utf8_strcasecmp($str1, $str2);		}	}	/**	 * UTF-8/LOCALE aware alternative to strcmp	 * A case sensitive string comparison	 *	 * @param   string  $str1    string 1 to compare	 * @param   string  $str2    string 2 to compare	 * @param   mixed   $locale  The locale used by strcoll or false to use classical comparison	 *	 * @return  integer  < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.	 *	 * @see     http://www.php.net/strcmp	 * @see     http://www.php.net/strcoll	 * @see     http://www.php.net/setlocale	 * @since   11.1	 */	public static function strcmp($str1, $str2, $locale = false)	{		if ($locale)		{			// Get current locale			$locale0 = setlocale(LC_COLLATE, 0);			if (!$locale = setlocale(LC_COLLATE, $locale))			{				$locale = $locale0;			}			// See if we have successfully set locale to UTF-8			if (!stristr($locale, 'UTF-8') && stristr($locale, '_') && preg_match('~\.(\d+)$~', $locale, $m))			{				$encoding = 'CP' . $m[1];			}			elseif (stristr($locale, 'UTF-8') || stristr($locale, 'utf8'))			{				$encoding = 'UTF-8';			}			else			{				$encoding = 'nonrecodable';			}			// If we successfully set encoding it to utf-8 or encoding is sth weird don't recode			if ($encoding == 'UTF-8' || $encoding == 'nonrecodable')			{				return strcoll($str1, $str2);			}			else			{				return strcoll(self::transcode($str1, 'UTF-8', $encoding), self::transcode($str2, 'UTF-8', $encoding));			}		}		else		{			return strcmp($str1, $str2);		}	}	/**	 * UTF-8 aware alternative to strcspn	 * Find length of initial segment not matching mask	 *	 * @param   string   $str     The string to process	 * @param   string   $mask    The mask	 * @param   integer  $start   Optional starting character position (in characters)	 * @param   integer  $length  Optional length	 *	 * @return  integer  The length of the initial segment of str1 which does not contain any of the characters in str2	 *	 * @see     http://www.php.net/strcspn	 * @since   11.1	 */	public static function strcspn($str, $mask, $start = null, $length = null)	{		jimport('phputf8.strcspn');		if ($start === false && $length === false)		{			return utf8_strcspn($str, $mask);		}		elseif ($length === false)		{			return utf8_strcspn($str, $mask, $start);		}		else		{			return utf8_strcspn($str, $mask, $start, $length);		}	}	/**	 * UTF-8 aware alternative to stristr	 * Returns all of haystack from the first occurrence of needle to the end.	 * needle and haystack are examined in a case-insensitive manner	 * Find first occurrence of a string using case insensitive comparison	 *	 * @param   string  $str     The haystack	 * @param   string  $search  The needle	 *	 * @return string the sub string	 *	 * @see     http://www.php.net/stristr	 * @since   11.1	 */	public static function stristr($str, $search)	{		jimport('phputf8.stristr');		return utf8_stristr($str, $search);	}	/**	 * UTF-8 aware alternative to strrev	 * Reverse a string	 *	 * @param   string  $str  String to be reversed	 *	 * @return  string   The string in reverse character order	 *	 * @see     http://www.php.net/strrev	 * @since   11.1	 */	public static function strrev($str)	{		jimport('phputf8.strrev');		return utf8_strrev($str);	}	/**	 * UTF-8 aware alternative to strspn	 * Find length of initial segment matching mask	 *	 * @param   string   $str     The haystack	 * @param   string   $mask    The mask	 * @param   integer  $start   Start optional	 * @param   integer  $length  Length optional	 *	 * @return  integer	 *	 * @see     http://www.php.net/strspn	 * @since   11.1	 */	public static function strspn($str, $mask, $start = null, $length = null)	{		jimport('phputf8.strspn');		if ($start === null && $length === null)		{			return utf8_strspn($str, $mask);		}		elseif ($length === null)		{			return utf8_strspn($str, $mask, $start);		}		else		{			return utf8_strspn($str, $mask, $start, $length);		}	}	/**	 * UTF-8 aware substr_replace	 * Replace text within a portion of a string	 *	 * @param   string   $str     The haystack	 * @param   string   $repl    The replacement string	 * @param   integer  $start   Start	 * @param   integer  $length  Length (optional)	 *	 * @return  string	 *	 * @see     http://www.php.net/substr_replace	 * @since   11.1	 */	public static function substr_replace($str, $repl, $start, $length = null)	{		// Loaded by library loader		if ($length === false)		{			return utf8_substr_replace($str, $repl, $start);		}		else		{			return utf8_substr_replace($str, $repl, $start, $length);		}	}	/**	 * UTF-8 aware replacement for ltrim()	 *	 * Strip whitespace (or other characters) from the beginning of a string	 * You only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise ltrim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/ltrim	 * @since   11.1	 */	public static function ltrim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_ltrim($str);		}		else		{			return utf8_ltrim($str, $charlist);		}	}	/**	 * UTF-8 aware replacement for rtrim()	 * Strip whitespace (or other characters) from the end of a string	 * You only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise rtrim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/rtrim	 * @since   11.1	 */	public static function rtrim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_rtrim($str);		}		else		{			return utf8_rtrim($str, $charlist);		}	}	/**	 * UTF-8 aware replacement for trim()	 * Strip whitespace (or other characters) from the beginning and end of a string	 * Note: you only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise trim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/trim	 * @since   11.1	 */	public static function trim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_trim($str);		}		else		{			return utf8_trim($str, $charlist);		}	}	/**	 * UTF-8 aware alternative to ucfirst	 * Make a string's first character uppercase or all words' first character uppercase	 *	 * @param   string  $str           String to be processed	 * @param   string  $delimiter     The words delimiter (null means do not split the string)	 * @param   string  $newDelimiter  The new words delimiter (null means equal to $delimiter)	 *	 * @return  string  If $delimiter is null, return the string with first character as upper case (if applicable)	 *                  else consider the string of words separated by the delimiter, apply the ucfirst to each words	 *                  and return the string with the new delimiter	 *	 * @see     http://www.php.net/ucfirst	 * @since   11.1	 */	public static function ucfirst($str, $delimiter = null, $newDelimiter = null)	{		jimport('phputf8.ucfirst');		if ($delimiter === null)		{			return utf8_ucfirst($str);		}		else		{			if ($newDelimiter === null)			{				$newDelimiter = $delimiter;			}			return implode($newDelimiter, array_map('utf8_ucfirst', explode($delimiter, $str)));		}	}	/**	 * UTF-8 aware alternative to ucwords	 * Uppercase the first character of each word in a string	 *	 * @param   string  $str  String to be processed	 *	 * @return  string  String with first char of each word uppercase	 *	 * @see     http://www.php.net/ucwords	 * @since   11.1	 */	public static function ucwords($str)	{		jimport('phputf8.ucwords');		return utf8_ucwords($str);	}	/**	 * Transcode a string.	 *	 * @param   string  $source         The string to transcode.	 * @param   string  $from_encoding  The source encoding.	 * @param   string  $to_encoding    The target encoding.	 *	 * @return  mixed  The transcoded string, or null if the source was not a string.	 *	 * @link    https://bugs.php.net/bug.php?id=48147	 *	 * @since   11.1	 */	public static function transcode($source, $from_encoding, $to_encoding)	{		if (is_string($source))		{			switch (ICONV_IMPL)			{				case 'glibc':				return @iconv($from_encoding, $to_encoding . '//TRANSLIT,IGNORE', $source);				case 'libiconv':				default:				return iconv($from_encoding, $to_encoding . '//IGNORE//TRANSLIT', $source);			}		}		return null;	}	/**	 * Tests a string as to whether it's valid UTF-8 and supported by the Unicode standard.	 *	 * Note: this function has been modified to simple return true or false.	 *	 * @param   string  $str  UTF-8 encoded string.	 *	 * @return  boolean  true if valid	 *	 * @author  <hsivonen@iki.fi>	 * @see     http://hsivonen.iki.fi/php-utf8/	 * @see     compliant	 * @since   11.1	 */	public static function valid($str)	{		// Cached expected number of octets after the current octet		// until the beginning of the next UTF8 character sequence		$mState = 0;		// Cached Unicode character		$mUcs4 = 0;		// Cached expected number of octets in the current sequence		$mBytes = 1;		$len = strlen($str);		for ($i = 0; $i < $len; $i++)		{			$in = ord($str{$i});			if ($mState == 0)			{				// When mState is zero we expect either a US-ASCII character or a				// multi-octet sequence.				if (0 == (0x80 & ($in)))				{					// US-ASCII, pass straight through.					$mBytes = 1;				}				elseif (0xC0 == (0xE0 & ($in)))				{					// First octet of 2 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x1F) << 6;					$mState = 1;					$mBytes = 2;				}				elseif (0xE0 == (0xF0 & ($in)))				{					// First octet of 3 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x0F) << 12;					$mState = 2;					$mBytes = 3;				}				elseif (0xF0 == (0xF8 & ($in)))				{					// First octet of 4 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x07) << 18;					$mState = 3;					$mBytes = 4;				}				elseif (0xF8 == (0xFC & ($in)))				{					/* First octet of 5 octet sequence.					 *					 * This is illegal because the encoded codepoint must be either					 * (a) not the shortest form or					 * (b) outside the Unicode range of 0-0x10FFFF.					 * Rather than trying to resynchronize, we will carry on until the end					 * of the sequence and let the later error handling code catch it.					 */					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x03) << 24;					$mState = 4;					$mBytes = 5;				}				elseif (0xFC == (0xFE & ($in)))				{					// First octet of 6 octet sequence, see comments for 5 octet sequence.					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 1) << 30;					$mState = 5;					$mBytes = 6;				}				else				{					/* Current octet is neither in the US-ASCII range nor a legal first					 * octet of a multi-octet sequence.					 */					return false;				}			}			else			{				// When mState is non-zero, we expect a continuation of the multi-octet				// sequence				if (0x80 == (0xC0 & ($in)))				{					// Legal continuation.					$shift = ($mState - 1) * 6;					$tmp = $in;					$tmp = ($tmp & 0x0000003F) << $shift;					$mUcs4 |= $tmp;					/**					 * End of the multi-octet sequence. mUcs4 now contains the final					 * Unicode codepoint to be output					 */					if (0 == --$mState)					{						/*						 * Check for illegal sequences and codepoints.						 */						// From Unicode 3.1, non-shortest form is illegal						if (((2 == $mBytes) && ($mUcs4 < 0x0080)) || ((3 == $mBytes) && ($mUcs4 < 0x0800)) || ((4 == $mBytes) && ($mUcs4 < 0x10000))							|| (4 < $mBytes)							|| (($mUcs4 & 0xFFFFF800) == 0xD800) // From Unicode 3.2, surrogate characters are illegal							|| ($mUcs4 > 0x10FFFF)) // Codepoints outside the Unicode range are illegal						{							return false;						}						// Initialize UTF8 cache.						$mState = 0;						$mUcs4 = 0;						$mBytes = 1;					}				}				else				{					/**					 *((0xC0 & (*in) != 0x80) && (mState != 0))					 * Incomplete multi-octet sequence.					 */					return false;				}			}		}		return true;	}	/**	 * Tests whether a string complies as UTF-8. This will be much	 * faster than utf8_is_valid but will pass five and six octet	 * UTF-8 sequences, which are not supported by Unicode and	 * so cannot be displayed correctly in a browser. In other words	 * it is not as strict as utf8_is_valid but it's faster. If you use	 * it to validate user input, you place yourself at the risk that	 * attackers will be able to inject 5 and 6 byte sequences (which	 * may or may not be a significant risk, depending on what you are	 * are doing)	 *	 * @param   string  $str  UTF-8 string to check	 *	 * @return  boolean  TRUE if string is valid UTF-8	 *	 * @see     valid	 * @see     http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#54805	 * @since   11.1	 */	public static function compliant($str)	{		if (strlen($str) == 0)		{			return true;		}		/*		 * If even just the first character can be matched, when the /u		 * modifier is used, then it's valid UTF-8. If the UTF-8 is somehow		 * invalid, nothing at all will match, even if the string contains		 * some valid sequences		 */		return (preg_match('/^.{1}/us', $str, $ar) == 1);	}	/**	 * Does a UTF-8 safe version of PHP parse_url function	 *	 * @param   string  $url  URL to parse	 *	 * @return  mixed  Associative array or false if badly formed URL.	 *	 * @see     http://us3.php.net/manual/en/function.parse-url.php	 * @since   11.1	 */	public static function parse_url($url)	{		$result = false;		// Build arrays of values we need to decode before parsing		$entities = array('%21', '%2A', '%27', '%28', '%29', '%3B', '%3A', '%40', '%26', '%3D', '%24', '%2C', '%2F', '%3F', '%23', '%5B', '%5D');		$replacements = array('!', '*', "'", "(", ")", ";", ":", "@", "&", "=", "$", ",", "/", "?", "#", "[", "]");		// Create encoded URL with special URL characters decoded so it can be parsed		// All other characters will be encoded		$encodedURL = str_replace($entities, $replacements, urlencode($url));		// Parse the encoded URL		$encodedParts = parse_url($encodedURL);		// Now, decode each value of the resulting array		if ($encodedParts)		{			foreach ($encodedParts as $key => $value)			{				$result[$key] = urldecode(str_replace($replacements, $entities, $value));			}		}		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_title * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Get the component title divif (isset(JFactory::getApplication()->JComponentTitle)){	$title = JFactory::getApplication()->JComponentTitle;}require JModuleHelper::getLayoutPath('mod_title', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');?><div class="reset-complete<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=reset.complete'); ?>" method="post" class="form-validate">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<dl>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<dt><?php echo $field->label; ?></dt>				<dd><?php echo $field->input; ?></dd>			<?php endforeach; ?>			</dl>		</fieldset>		<?php endforeach; ?>		<div>			<button type="submit" class="validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base Application Class * * @package     Joomla.Platform * @subpackage  Application * @since       12.1 */abstract class JApplicationBase{	/**	 * The application dispatcher object.	 *	 * @var    JEventDispatcher	 * @since  12.1	 */	protected $dispatcher;	/**	 * The application identity object.	 *	 * @var    JUser	 * @since  12.1	 */	protected $identity;	/**	 * The application input object.	 *	 * @var    JInput	 * @since  12.1	 */	public $input = null;	/**	 * Method to close the application.	 *	 * @param   integer  $code  The exit code (optional; default is 0).	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   12.1	 */	public function close($code = 0)	{		exit($code);	}	/**	 * Get the application identity.	 *	 * @return  mixed  A JUser object or null.	 *	 * @since   12.1	 */	public function getIdentity()	{		return $this->identity;	}	/**	 * Registers a handler to a particular event group.	 *	 * @param   string    $event    The event name.	 * @param   callback  $handler  The handler, a function or an instance of a event object.	 *	 * @return  JApplicationBase  The application to allow chaining.	 *	 * @since   12.1	 */	public function registerEvent($event, $handler)	{		if ($this->dispatcher instanceof JEventDispatcher)		{			$this->dispatcher->register($event, $handler);		}		return $this;	}	/**	 * Calls all handlers associated with an event group.	 *	 * @param   string  $event  The event name.	 * @param   array   $args   An array of arguments (optional).	 *	 * @return  array   An array of results from each function call, or null if no dispatcher is defined.	 *	 * @since   12.1	 */	public function triggerEvent($event, array $args = null)	{		if ($this->dispatcher instanceof JEventDispatcher)		{			return $this->dispatcher->trigger($event, $args);		}		return null;	}	/**	 * Allows the application to load a custom or default dispatcher.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create event	 * dispatchers, if required, based on more specific needs.	 *	 * @param   JEventDispatcher  $dispatcher  An optional dispatcher object. If omitted, the factory dispatcher is created.	 *	 * @return  JApplicationBase This method is chainable.	 *	 * @since   12.1	 */	public function loadDispatcher(JEventDispatcher $dispatcher = null)	{		$this->dispatcher = ($dispatcher === null) ? JEventDispatcher::getInstance() : $dispatcher;		return $this;	}	/**	 * Allows the application to load a custom or default identity.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create an identity,	 * if required, based on more specific needs.	 *	 * @param   JUser  $identity  An optional identity object. If omitted, the factory user is created.	 *	 * @return  JApplicationBase This method is chainable.	 *	 * @since   12.1	 */	public function loadIdentity(JUser $identity = null)	{		$this->identity = ($identity === null) ? JFactory::getUser() : $identity;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages Component Message Model * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerConfig extends JControllerLegacy{	/**	 * Method to save a record.	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Config', 'MessagesModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Validate the posted data.		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data = $model->validate($form, $data);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Redirect back to the main list.			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Redirect back to the main list.			$this->setMessage(JText::sprintf('JERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Redirect to the list screen.		$this->setMessage(JText::_('COM_MESSAGES_CONFIG_SAVED'));		$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Model Class * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */abstract class JModelDatabase extends JModelBase{	/**	 * The database driver.	 *	 * @var    JDatabaseDriver	 * @since  12.1	 */	protected $db;	/**	 * Instantiate the model.	 *	 * @param   JRegistry        $state  The model state.	 * @param   JDatabaseDriver  $db     The database adpater.	 *	 * @since   12.1	 */	public function __construct(JRegistry $state = null, JDatabaseDriver $db = null)	{		parent::__construct($state);		// Setup the model.		$this->db = isset($db) ? $db : $this->loadDb();	}	/**	 * Get the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	public function getDb()	{		return $this->db;	}	/**	 * Set the database driver.	 *	 * @param   JDatabaseDriver  $db  The database driver.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setDb(JDatabaseDriver $db)	{		$this->db = $db;	}	/**	 * Load the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	protected function loadDb()	{		return JFactory::getDbo();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Echo the toolbar.echo $toolbar;
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * XCache session storage handler * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSessionStorageXcache extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('XCache Extension is not available', 404);		}		parent::__construct($options);	}	/**	 * Read the data for a particular session identifier from the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		$sess_id = 'sess_' . $id;		// Check if id exists		if (!xcache_isset($sess_id))		{			return;		}		return (string) xcache_get($sess_id);	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id            The session identifier.	 * @param   string  $session_data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $session_data)	{		$sess_id = 'sess_' . $id;		return xcache_set($sess_id, $session_data, ini_get("session.gc_maxlifetime"));	}	/**	 * Destroy the data for a particular session identifier in the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		$sess_id = 'sess_' . $id;		if (!xcache_isset($sess_id))		{			return true;		}		return xcache_unset($sess_id);	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	static public function isSupported()	{		return (extension_loaded('xcache'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Manage View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewManage extends InstallerViewDefault{	protected $items;	protected $pagination;	protected $form;	protected $state;	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  mixed|void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		// Get data from the model		$this->state      = $this->get('State');		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_INSTALLER_MSG_MANAGE_NOEXTENSION'),				'warning'			);		}		// Include the component HTML helpers.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// Display the view		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= InstallerHelper::getActions();		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('manage.publish', 'JTOOLBAR_ENABLE', true);			JToolbarHelper::unpublish('manage.unpublish', 'JTOOLBAR_DISABLE', true);			JToolbarHelper::divider();		}		JToolbarHelper::custom('manage.refresh', 'refresh', 'refresh', 'JTOOLBAR_REFRESH_CACHE', true);		JToolbarHelper::divider();		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'manage.remove', 'JTOOLBAR_UNINSTALL');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_MANAGE');		JHtmlSidebar::setAction('index.php?option=com_installer&view=manage');		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_CLIENT_SELECT'),			'filter_client_id',			JHtml::_('select.options', array('0' => 'JSITE', '1' => 'JADMINISTRATOR'), 'value', 'text', $this->state->get('filter.client_id'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_STATE_SELECT'),			'filter_status',			JHtml::_('select.options', array('0' => 'JDISABLED', '1' => 'JENABLED', '2' => 'JPROTECTED'), 'value', 'text', $this->state->get('filter.status'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_TYPE_SELECT'),			'filter_type',			JHtml::_('select.options', InstallerHelper::getExtensionTypes(), 'value', 'text', $this->state->get('filter.type'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_FOLDER_SELECT'),			'filter_group',			JHtml::_('select.options', array_merge(InstallerHelper::getExtensionGroupes(), array('*' => JText::_('COM_INSTALLER_VALUE_FOLDER_NONAPPLICABLE'))), 'value', 'text', $this->state->get('filter.group'), true)		);		parent::addToolbar();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL database iterator. * * @package     Joomla.Platform * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       12.1 */class JDatabaseIteratorMysql extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return mysql_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return mysql_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		mysql_free_result($this->cursor);	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Complete View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewCompleteHtml extends JViewHtml{	/**	 * The JConfiguration data if present	 *	 * @var    JRegistry	 * @since  3.1	 */	protected $config;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelSetup	 * @since   3.1	 */	protected $model;	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options = $this->model->getOptions();		// Get the config string from the session.		$session = JFactory::getSession();		$this->config = $session->get('setup.config', null);		return parent::render();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Analytics embed class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleEmbedAnalytics extends JGoogleEmbed{	/**	 * Method to get the tracking code	 *	 * @return  string  The Google Analytics tracking code	 *	 * @since   12.3	 */	public function getCode()	{		return $this->getOption('code');	}	/**	 * Method to set the tracking code	 *	 * @param   string  $code  The Google Analytics tracking code	 *	 * @return  JGoogleEmbedAnalytics  The object for method chaining	 *	 * @since   12.3	 */	public function setCode($code)	{		$this->setOption('code', $code);		return $this;	}	/**	 * Checks if the javascript is set to be asynchronous	 *	 * @return  boolean  True if asynchronous	 *	 * @since   12.3	 */	public function isAsync()	{		return $this->getOption('async') === null ? true : $this->getOption('async');	}	/**	 * Load javascript asynchronously	 *	 * @return  JGoogleEmbedAnalytics  The object for method chaining	 *	 * @since   12.3	 */	public function useAsync()	{		$this->setOption('async', true);		return $this;	}	/**	 * Load javascript synchronously	 *	 * @return  JGoogleEmbedAnalytics  The object for method chaining	 *	 * @since   12.3	 */	public function useSync()	{		$this->setOption('async', false);		return $this;	}	/**	 * Add an analytics call	 *	 * @param   string  $method  The name of the function	 * @param   array   $params  The parameters for the call	 *	 * @return  array  The added call	 *	 * @since   12.3	 */	public function addCall($method, $params = array())	{		$call = array('name' => $method, 'params' => $params);		$calls = $this->listCalls();		$calls[] = $call;		$this->setOption('calls', $calls);		return $call;	}	/**	 * List the analytics calls to be executed	 *	 * @return  array  A list of calls	 *	 * @since   12.3	 */	public function listCalls()	{		return $this->getOption('calls') ? $this->getOption('calls') : array();	}	/**	 * Delete a call from the stack	 *	 * @param   int  $index  Index of call to delete (defaults to last added call)	 *	 * @return  array  The deleted call	 *	 * @since   12.3	 */	public function deleteCall($index = null)	{		$calls = $this->listCalls();		if ($index === null)		{			$index = count($calls) - 1;		}		$call = $calls[$index];		unset($calls[$index]);		$calls = array_values($calls);		$this->setOption('calls', $calls);		return $call;	}	/**	 * Create a javascript function from the call parameters	 *	 * @param   string  $method  The name of the function	 * @param   array   $params  The parameters for the call	 *	 * @return  string  The created call	 *	 * @since   12.3	 */	public function createCall($method, $params = array())	{		$params = array_values($params);		if ($this->isAsync())		{			$output = "_gaq.push(['{$method}',";			$output .= substr(json_encode($params), 1, -1);			$output .= ']);';		}		else		{			$output = "pageTracker.{$method}(";			$output .= substr(json_encode($params), 1, -1);			$output .= ');';		}		return $output;	}	/**	 * Add a custom variable to the analytics	 *	 * @param   int     $slot   The slot to store the variable in (1-5)	 * @param   string  $name   The variable name	 * @param   string  $value  The variable value	 * @param   int     $scope  The scope of the variable (1: visitor level, 2: session level, 3: page level)	 *	 * @return  array  The added call	 *	 * @since   12.3	 */	public function addCustomVar($slot, $name, $value, $scope = 3)	{		return $this->addCall('_setCustomVar', array($slot, $name, $value, $scope));	}	/**	 * Get the code to create a custom analytics variable	 *	 * @param   int     $slot   The slot to store the variable in (1-5)	 * @param   string  $name   The variable name	 * @param   string  $value  The variable value	 * @param   int     $scope  The scope of the variable (1: visitor level, 2: session level, 3: page level)	 *	 * @return  string  The created call	 *	 * @since   12.3	 */	public function createCustomVar($slot, $name, $value, $scope = 3)	{		return $this->createCall('_setCustomVar', array($slot, $name, $value, $scope));	}	/**	 * Track an analytics event	 *	 * @param   string   $category     The general event category	 * @param   string   $action       The event action	 * @param   string   $label        The event description	 * @param   string   $value        The value of the event	 * @param   boolean  $noninteract  Don't allow this event to impact bounce statistics	 *	 * @return  array  The added call	 *	 * @since   12.3	 */	public function addEvent($category, $action, $label = null, $value = null, $noninteract = false)	{		return $this->addCall('_trackEvent', array($category, $action, $label, $value, $noninteract));	}	/**	 * Get the code to track an analytics event	 *	 * @param   string   $category     The general event category	 * @param   string   $action       The event action	 * @param   string   $label        The event description	 * @param   string   $value        The value of the event	 * @param   boolean  $noninteract  Don't allow this event to impact bounce statistics	 *	 * @return  string  The created call	 *	 * @since   12.3	 */	public function createEvent($category, $action, $label = null, $value = null, $noninteract = false)	{		return $this->createCall('_trackEvent', array($category, $action, $label, $value, $noninteract));	}	/**	 * Get code to load Google Analytics javascript	 *	 * @return  string  Javascript code	 *	 * @since   12.3	 */	public function getHeader()	{		if (!$this->isAsync())		{			// Synchronous code is included only in the body			return '';		}		if (!$this->getOption('code'))		{			throw new UnexpectedValueException('A Google Analytics tracking code is required.');		}		$code = $this->getOption('code');		$output = '<script type="text/javascript">';		$output .= 'var _gaq = _gaq || [];';		$output .= "_gaq.push(['_setAccount', '{$code}']);";		foreach ($this->listCalls() as $call)		{			$output .= $this->createCall($call['name'], $call['params']);		}		$output .= '_gaq.push(["_trackPageview"]);';		$output .= '</script>';		return $output;	}	/**	 * Google Analytics only needs to be included in the header	 *	 * @return  null	 *	 * @since   12.3	 */	public function getBody()	{		if (!$this->getOption('code'))		{			throw new UnexpectedValueException('A Google Analytics tracking code is required.');		}		$prefix = $this->isSecure() ? 'https://ssl' : 'http://www';		$code = $this->getOption('code');		if ($this->isAsync())		{			$output = '<script type="text/javascript">';			$output .= '(function() {';			$output .= 'var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;';			$output .= "ga.src = '{$prefix}.google-analytics.com/ga.js';";			$output .= 'var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);';			$output .= '})();';			$output .= '</script>';		}		else		{			$output = '<script type="text/javascript">';			$output .= "document.write(unescape(\"%3Cscript src='{$prefix}.google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));";			$output .= '</script>';			$output .= '<script type="text/javascript">';			$output .= 'try{';			$output .= "var pageTracker = _gat._getTracker('{$code}');";			foreach ($this->listCalls() as $call)			{				$output .= $this->createCall($call['name'], $call['params']);			}			$output .= 'pageTracker._trackPageview();';			$output .= '} catch(err) {}</script>';		}		return $output;	}}
#!/usr/bin/php<?phpif (php_sapi_name() != "cli"){	echo "Error: phptidy has to be run on command line with CLI SAPI\n";	exit(1);}function getDirectory($path = '.', $level = 0){	$iterator  = new RecursiveDirectoryIterator($path, FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS);	$flattened = new RecursiveIteratorIterator($iterator, RecursiveIteratorIterator::SELF_FIRST);	foreach ($flattened as $path => $dir)	{		if (!$dir->isDir())		{			continue;		}		// Add an index.html if neither an index.html nor an index.php exist		if (!(file_exists($path . '/index.html') || file_exists($path . '/index.php')))		{			file_put_contents($path . '/index.html', '<!DOCTYPE html><title></title>' . "\n");		}	}}$work = $_SERVER['argv'][1];echo "Working on directory " . $work . "\n";getDirectory($_SERVER['argv'][1]);
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to str_split* Convert a string to an array* Note: requires utf8_strlen to be loaded* @param string UTF-8 encoded* @param int number to characters to split string by* @return string characters in string reverses* @see http://www.php.net/str_split* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_str_split($str, $split_len = 1) {    if ( !preg_match('/^[0-9]+$/',$split_len) || $split_len < 1 ) {        return FALSE;    }    $len = utf8_strlen($str);    if ( $len <= $split_len ) {        return array($str);    }    preg_match_all('/.{'.$split_len.'}|[^\x00]{1,'.$split_len.'}$/us', $str, $ar);    return $ar[0];}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note that there are certain parts of this layout used only when there is exactly one tag.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');$description = $this->params->get('all_tags_description');$descriptionImage = $this->params->get('all_tags_description_image');?><div class="tag-category<?php echo $this->pageclass_sfx; ?>">	<?php  if ($this->state->get('show_page_heading')) : ?>		<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif;?>	<?php if ($this->params->get('all_tags_show_description_image') && !empty($descriptionImage)):?>		<div><?php echo '<img src="' . $descriptionImage . '">';?></div>	<?php endif;?>	<?php if (!empty($description)):?>		<div><?php echo $description;?></div>	<?php endif;?>	<?php echo $this->loadTemplate('items'); ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Porter English stemmer class for the Finder indexer package. * * This class was adapted from one written by Richard Heyes. * See copyright and link information above. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerStemmerPorter_En extends FinderIndexerStemmer{	/**	 * Regex for matching a consonant.	 *	 * @var    string	 * @since  2.5	 */	private static $_regex_consonant = '(?:[bcdfghjklmnpqrstvwxz]|(?<=[aeiou])y|^y)';	/**	 * Regex for matching a vowel	 * @var    string	 * @since  2.5	 */	private static $_regex_vowel = '(?:[aeiou]|(?<![aeiou])y)';	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	public function stem($token, $lang)	{		// Check if the token is long enough to merit stemming.		if (strlen($token) <= 2)		{			return $token;		}		// Check if the language is English or All.		if ($lang !== 'en' && $lang != '*')		{			return $token;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Stem the token.			$result = $token;			$result = self::_step1ab($result);			$result = self::_step1c($result);			$result = self::_step2($result);			$result = self::_step3($result);			$result = self::_step4($result);			$result = self::_step5($result);			// Add the token to the cache.			$this->cache[$lang][$token] = $result;		}		return $this->cache[$lang][$token];	}	/**	 * Step 1	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step1ab($word)	{		// Part a		if (substr($word, -1) == 's')		{				self::_replace($word, 'sses', 'ss')			or self::_replace($word, 'ies', 'i')			or self::_replace($word, 'ss', 'ss')			or self::_replace($word, 's', '');		}		// Part b		if (substr($word, -2, 1) != 'e' or !self::_replace($word, 'eed', 'ee', 0))		{			// First rule			$v = self::$_regex_vowel;			// ing and ed			// Note use of && and OR, for precedence reasons			if (preg_match("#$v+#", substr($word, 0, -3)) && self::_replace($word, 'ing', '')				or preg_match("#$v+#", substr($word, 0, -2)) && self::_replace($word, 'ed', ''))			{				// If one of above two test successful				if (!self::_replace($word, 'at', 'ate') and !self::_replace($word, 'bl', 'ble') and !self::_replace($word, 'iz', 'ize'))				{					// Double consonant ending					if (self::_doubleConsonant($word) and substr($word, -2) != 'll' and substr($word, -2) != 'ss' and substr($word, -2) != 'zz')					{						$word = substr($word, 0, -1);					}					elseif (self::_m($word) == 1 and self::_cvc($word))					{						$word .= 'e';					}				}			}		}		return $word;	}	/**	 * Step 1c	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step1c($word)	{		$v = self::$_regex_vowel;		if (substr($word, -1) == 'y' && preg_match("#$v+#", substr($word, 0, -1)))		{			self::_replace($word, 'y', 'i');		}		return $word;	}	/**	 * Step 2	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step2($word)	{		switch (substr($word, -2, 1))		{			case 'a':					self::_replace($word, 'ational', 'ate', 0)				or self::_replace($word, 'tional', 'tion', 0);				break;			case 'c':					self::_replace($word, 'enci', 'ence', 0)				or self::_replace($word, 'anci', 'ance', 0);				break;			case 'e':				self::_replace($word, 'izer', 'ize', 0);				break;			case 'g':				self::_replace($word, 'logi', 'log', 0);				break;			case 'l':					self::_replace($word, 'entli', 'ent', 0)				or self::_replace($word, 'ousli', 'ous', 0)				or self::_replace($word, 'alli', 'al', 0)				or self::_replace($word, 'bli', 'ble', 0)				or self::_replace($word, 'eli', 'e', 0);				break;			case 'o':					self::_replace($word, 'ization', 'ize', 0)				or self::_replace($word, 'ation', 'ate', 0)				or self::_replace($word, 'ator', 'ate', 0);				break;			case 's':					self::_replace($word, 'iveness', 'ive', 0)				or self::_replace($word, 'fulness', 'ful', 0)				or self::_replace($word, 'ousness', 'ous', 0)				or self::_replace($word, 'alism', 'al', 0);				break;			case 't':					self::_replace($word, 'biliti', 'ble', 0)				or self::_replace($word, 'aliti', 'al', 0)				or self::_replace($word, 'iviti', 'ive', 0);				break;		}		return $word;	}	/**	 * Step 3	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step3($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'ical', 'ic', 0);				break;			case 's':				self::_replace($word, 'ness', '', 0);				break;			case 't':					self::_replace($word, 'icate', 'ic', 0)				or self::_replace($word, 'iciti', 'ic', 0);				break;			case 'u':				self::_replace($word, 'ful', '', 0);				break;			case 'v':				self::_replace($word, 'ative', '', 0);				break;			case 'z':				self::_replace($word, 'alize', 'al', 0);				break;		}		return $word;	}	/**	 * Step 4	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step4($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'al', '', 1);				break;			case 'c':					self::_replace($word, 'ance', '', 1)				or self::_replace($word, 'ence', '', 1);				break;			case 'e':				self::_replace($word, 'er', '', 1);				break;			case 'i':				self::_replace($word, 'ic', '', 1);				break;			case 'l':					self::_replace($word, 'able', '', 1)				or self::_replace($word, 'ible', '', 1);				break;			case 'n':					self::_replace($word, 'ant', '', 1)				or self::_replace($word, 'ement', '', 1)				or self::_replace($word, 'ment', '', 1)				or self::_replace($word, 'ent', '', 1);				break;			case 'o':				if (substr($word, -4) == 'tion' or substr($word, -4) == 'sion')				{					self::_replace($word, 'ion', '', 1);				}				else				{					self::_replace($word, 'ou', '', 1);				}				break;			case 's':				self::_replace($word, 'ism', '', 1);				break;			case 't':					self::_replace($word, 'ate', '', 1)				or self::_replace($word, 'iti', '', 1);				break;			case 'u':				self::_replace($word, 'ous', '', 1);				break;			case 'v':				self::_replace($word, 'ive', '', 1);				break;			case 'z':				self::_replace($word, 'ize', '', 1);				break;		}		return $word;	}	/**	 * Step 5	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step5($word)	{		// Part a		if (substr($word, -1) == 'e')		{			if (self::_m(substr($word, 0, -1)) > 1)			{				self::_replace($word, 'e', '');			}			elseif (self::_m(substr($word, 0, -1)) == 1)			{				if (!self::_cvc(substr($word, 0, -1)))				{					self::_replace($word, 'e', '');				}			}		}		// Part b		if (self::_m($word) > 1 and self::_doubleConsonant($word) and substr($word, -1) == 'l')		{			$word = substr($word, 0, -1);		}		return $word;	}	/**	 * Replaces the first string with the second, at the end of the string. If third	 * arg is given, then the preceding string must match that m count at least.	 *	 * @param   string   &$str   String to check	 * @param   string   $check  Ending to check for	 * @param   string   $repl   Replacement string	 * @param   integer  $m      Optional minimum number of m() to meet	 *	 * @return  boolean  Whether the $check string was at the end	 *                   of the $str string. True does not necessarily mean	 *                   that it was replaced.	 *	 * @since   2.5	 */	private static function _replace(&$str, $check, $repl, $m = null)	{		$len = 0 - strlen($check);		if (substr($str, $len) == $check)		{			$substr = substr($str, 0, $len);			if (is_null($m) or self::_m($substr) > $m)			{				$str = $substr . $repl;			}			return true;		}		return false;	}	/**	 * m() measures the number of consonant sequences in $str. if c is	 * a consonant sequence and v a vowel sequence, and <..> indicates arbitrary	 * presence,	 *	 * <c><v>       gives 0	 * <c>vc<v>     gives 1	 * <c>vcvc<v>   gives 2	 * <c>vcvcvc<v> gives 3	 *	 * @param   string  $str  The string to return the m count for	 *	 * @return  integer  The m count	 *	 * @since   2.5	 */	private static function _m($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		$str = preg_replace("#^$c+#", '', $str);		$str = preg_replace("#$v+$#", '', $str);		preg_match_all("#($v+$c+)#", $str, $matches);		return count($matches[1]);	}	/**	 * Returns true/false as to whether the given string contains two	 * of the same consonant next to each other at the end of the string.	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   2.5	 */	private static function _doubleConsonant($str)	{		$c = self::$_regex_consonant;		return preg_match("#$c{2}$#", $str, $matches) and $matches[0]{0} == $matches[0]{1};	}	/**	 * Checks for ending CVC sequence where second C is not W, X or Y	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   2.5	 */	private static function _cvc($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		return preg_match("#($c$v$c)$#", $str, $matches) and strlen($matches[1]) == 3 and $matches[1]{2} != 'w' and $matches[1]{2} != 'x' and $matches[1]{2} != 'y';	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for Tabs elements. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.2 */abstract class JHtmlTabs{	/**	 * Creates a panes and creates the JavaScript object for it.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  An array of option.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function start($group = 'tabs', $params = array())	{		self::_loadBehavior($group, $params);		return '<dl class="tabs" id="' . $group . '"><dt style="display:none;"></dt><dd style="display:none;">';	}	/**	 * Close the current pane	 *	 * @return  string  HTML to close the pane	 *	 * @since   11.1	 */	public static function end()	{		return '</dd></dl>';	}	/**	 * Begins the display of a new panel.	 *	 * @param   string  $text  Text to display.	 * @param   string  $id    Identifier of the panel.	 *	 * @return  string  HTML to start a new panel	 *	 * @since   11.1	 */	public static function panel($text, $id)	{		return '</dd><dt class="tabs ' . $id . '"><span><h3><a href="javascript:void(0);">' . $text . '</a></h3></span></dt><dd class="tabs">';	}	/**	 * Load the JavaScript behavior.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  Array of options.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function _loadBehavior($group, $params = array())	{		static $loaded = array();		if (!array_key_exists((string) $group, $loaded))		{			// Include MooTools framework			JHtml::_('behavior.framework', true);			$opt['onActive']            = (isset($params['onActive'])) ? '\\' . $params['onActive'] : null;			$opt['onBackground']        = (isset($params['onBackground'])) ? '\\' . $params['onBackground'] : null;			$opt['display']             = (isset($params['startOffset'])) ? (int) $params['startOffset'] : null;			$opt['useStorage']          = (isset($params['useCookie']) && $params['useCookie']) ? 'true' : 'false';			$opt['titleSelector']       = "dt.tabs";			$opt['descriptionSelector'] = "dd.tabs";			$options = JHtml::getJSObject($opt);			$js = '	window.addEvent(\'domready\', function(){						$$(\'dl#' . $group . '.tabs\').each(function(tabs){							new JTabs(tabs, ' . $options . ');						});					});';			$document = JFactory::getDocument();			$document->addScriptDeclaration($js);			JHtml::_('script', 'system/tabs.js', false, true);			$loaded[(string) $group] = true;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Captcha * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Joomla! Captcha base object * * @abstract * @package     Joomla.Libraries * @subpackage  Captcha * @since       2.5 */class JCaptcha extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  2.5	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  2.5	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  2.5	 */	protected $_methods = array();	/**	 * Captcha Plugin object	 *	 * @var	   JPlugin	 * @since  2.5	 */	private $_captcha;	/**	 * Editor Plugin name	 *	 * @var string	 * @since  2.5	 */	private $_name;	/**	 * Array of instances of this class.	 *	 * @var	array	 */	private static $_instances = array();	/**	 * Class constructor.	 *	 * @param   string  $captcha  The editor to use.	 * @param   array   $options  Associative array of options.	 *	 * @since 2.5	 */	public function __construct($captcha, $options)	{		$this->_name = $captcha;		$this->_load($options);	}	/**	 * Returns the global Captcha object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $captcha  The plugin to use.	 * @param   array   $options  Associative array of options.	 *	 * @return  JCaptcha  Instance of this class.	 *	 * @since 2.5	 */	public static function getInstance($captcha, array $options = array())	{		$signature = md5(serialize(array($captcha, $options)));		if (empty(self::$_instances[$signature]))		{			try			{				self::$_instances[$signature] = new JCaptcha($captcha, $options);			}			catch (RuntimeException $e)			{				JFactory::getApplication()->enqueueMessage($e->getMessage(), 'error');				return null;			}		}		return self::$_instances[$signature];	}	/**	 * Fire the onInit event to initialise the captcha plug-in.	 *	 * @param   string  $id  The id of the field.	 *	 * @return  boolean  True on success	 *	 * @since	2.5	 */	public function initialise($id)	{		$args['id']    = $id;		$args['event'] = 'onInit';		try		{			$this->_captcha->update($args);		}		catch (Exception $e)		{			JFactory::getApplication()->enqueueMessage($e->getMessage(), 'error');			return false;		}		return true;	}	/**	 * Get the HTML for the captcha.	 *	 * @param   string  $name   The control name.	 * @param   string  $id     The id for the control.	 * @param   string  $class  Value for the HTML class attribute	 *	 * @return  mixed  The return value of the function "onDisplay" of the selected Plugin.	 *	 * @since   2.5	 */	public function display($name, $id, $class = '')	{		// Check if captcha is already loaded.		if (is_null($this->_captcha))		{			return;		}		// Initialise the Captcha.		if (!$this->initialise($id))		{			return;		}		$args['name']  = $name;		$args['id']    = $id ? $id : $name;		$args['class'] = $class ? 'class="' . $class . '"' : '';		$args['event'] = 'onDisplay';		return $this->_captcha->update($args);	}	/**	 * Checks if the answer is correct.	 *	 * @param   string  $code  The answer.	 *	 * @return  mixed   The return value of the function "onCheckAnswer" of the selected Plugin.	 *	 * @since	2.5	 */	public function checkAnswer($code)	{		// Check if captcha is already loaded		if (is_null(($this->_captcha)))		{			return;		}		$args['code']  = $code;		$args['event'] = 'onCheckAnswer';		return $this->_captcha->update($args);	}	/**	 * Load the Captcha plug-in.	 *	 * @param   array  $options  Associative array of options.	 *	 * @return  void	 *	 * @since	2.5	 * @throws  RuntimeException	 */	private function _load(array $options = array())	{		// Build the path to the needed captcha plugin		$name = JFilterInput::getInstance()->clean($this->_name, 'cmd');		$path = JPATH_PLUGINS . '/captcha/' . $name . '/' . $name . '.php';		if (!is_file($path))		{			throw new RuntimeException(JText::sprintf('JLIB_CAPTCHA_ERROR_PLUGIN_NOT_FOUND', $name));		}		// Require plugin file		require_once $path;		// Get the plugin		$plugin = JPluginHelper::getPlugin('captcha', $this->_name);		if (!$plugin)		{			throw new RuntimeException(JText::sprintf('JLIB_CAPTCHA_ERROR_PLUGIN_NOT_FOUND', $name));		}		$params = new JRegistry($plugin->params);		$plugin->params = $params;		// Build captcha plugin classname		$name = 'plgCaptcha' . $this->_name;		$this->_captcha = new $name($this, (array) $plugin, $options);	}	/**	 * Get the state of the JEditor object	 *	 * @return  mixed  The state of the object.	 *	 * @since   2.5	 */	public function getState()	{		return $this->_state;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   2.5	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEditor))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   2.5	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML utility class for creating a sortable table list * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlSortablelist{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the Sortable script and make table sortable	 *	 * @param   string   $tableId                 DOM id of the table	 * @param   string   $formId                  DOM id of the form	 * @param   string   $sortDir                 Sort direction	 * @param   string   $saveOrderingUrl         Save ordering url, ajax-load after an item dropped	 * @param   boolean  $proceedSaveOrderButton  Set whether a save order button is displayed	 * @param   boolean  $nestedList              Set whether the list is a nested list	 *	 * @return  void	 *	 * @since   3.0	 */	public static function sortable($tableId, $formId, $sortDir = 'asc', $saveOrderingUrl, $proceedSaveOrderButton = true, $nestedList = false)	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Depends on jQuery UI		JHtml::_('jquery.ui', array('core', 'sortable'));		JHtml::_('script', 'jui/sortablelist.js', false, true);		JHtml::_('stylesheet', 'jui/sortablelist.css', false, true, false);		// Attach sortable to document		JFactory::getDocument()->addScriptDeclaration("			(function ($){				$(document).ready(function (){					var sortableList = new $.JSortableList('#" . $tableId . " tbody','" . $formId . "','" . $sortDir . "' , '" . $saveOrderingUrl . "','','" . $nestedList . "');				});			})(jQuery);			"		);		if ($proceedSaveOrderButton)		{			self::_proceedSaveOrderButton();		}		// Set static array		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to inject script for enabled and disable Save order button	 * when changing value of ordering input boxes	 *	 * @return  void	 *	 * @since   3.0	 */	public static function _proceedSaveOrderButton()	{		JFactory::getDocument()->addScriptDeclaration(			"(function ($){				$(document).ready(function (){					var saveOrderButton = $('.saveorder');					saveOrderButton.css({'opacity':'0.2', 'cursor':'default'}).attr('onclick','return false;');					var oldOrderingValue = '';					$('.text-area-order').focus(function ()					{						oldOrderingValue = $(this).attr('value');					})					.keyup(function (){						var newOrderingValue = $(this).attr('value');						if (oldOrderingValue != newOrderingValue)						{							saveOrderButton.css({'opacity':'1', 'cursor':'pointer'}).removeAttr('onclick')						}					});				});			})(jQuery);"		);		return;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$params =& $this->item->params;$app = JFactory::getApplication();JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');?><div class="items-more"><h3><?php echo JText::_('COM_CONTENT_MORE_ARTICLES'); ?></h3><ol><?php	foreach ($this->link_items as &$item) :?>		 <li>		  		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catid)); ?>">			<?php echo $item->title; ?></a>		</li><?php endforeach; ?>	</ol></div>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewPreinstallHtml $this */?><div class="btn-toolbar">	<div class="btn-group pull-right">		<a href="#" class="btn btn-primary" onclick="Install.submitform();" title="<?php echo JText::_('JCheck_Again'); ?>"><i class="icon-refresh icon-white"></i> <?php echo JText::_('JCheck_Again'); ?></a>	</div></div><form action="index.php" method="post" id="languageForm" class="form-horizontal">	<div class="control-group">		<label for="jform_language" class="control-label"><?php echo JText::_('INSTL_SELECT_LANGUAGE_TITLE'); ?></label>		<div class="controls">			<?php echo $this->form->getInput('language'); ?>		</div>	</div>	<input type="hidden" name="view" value="preinstall" />	<input type="hidden" name="task" value="setlanguage" />	<?php echo JHtml::_('form.token'); ?></form><form action="index.php" method="post" id="adminForm" class="form-horizontal">	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<tbody>					<?php foreach ($this->options as $option) : ?>					<tr>						<td class="item">							<?php echo $option->label; ?>						</td>						<td>							<span class="label label-<?php echo ($option->state) ? 'success' : 'important'; ?>">								<?php echo JText::_(($option->state) ? 'JYES' : 'JNO'); ?>								<?php if ($option->notice):?>									<i class="icon-info-sign icon-white hasTooltip" title="<?php echo $option->notice; ?>"></i>								<?php endif;?>							</span>						</td>					</tr>					<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<thead>					<tr>						<th>							<?php echo JText::_('INSTL_PRECHECK_DIRECTIVE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_ACTUAL'); ?>						</th>					</tr>				</thead>				<tbody>					<?php foreach ($this->settings as $setting) : ?>					<tr>						<td>							<?php echo $setting->label; ?>						</td>						<td>							<span class="label label-success disabled">								<?php echo JText::_(($setting->recommended) ? 'JON' : 'JOFF'); ?>							</span>						</td>						<td>							<span class="label label-<?php echo ($setting->state === $setting->recommended) ? 'success' : 'warning'; ?>">								<?php echo JText::_(($setting->state) ? 'JON' : 'JOFF'); ?>							</span>						</td>					</tr>				<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="3"></td>					</tr>				</tfoot>			</table>		</div>	</div>	<input type="hidden" name="task" value="preinstall" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for jQuery JavaScript behaviors * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlJquery{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the jQuery JavaScript framework into the document head	 *	 * If debugging mode is on an uncompressed version of jQuery is included for easier debugging.	 *	 * @param   boolean  $noConflict  True to load jQuery in noConflict mode [optional]	 * @param   mixed    $debug       Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function framework($noConflict = true, $debug = null)	{		// Only load once		if (!empty(self::$loaded[__METHOD__]))		{			return;		}		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug  = (boolean) $config->get('debug');		}		JHtml::_('script', 'jui/jquery.min.js', false, true, false, false, $debug);		// Check if we are loading in noConflict		if ($noConflict)		{			JHtml::_('script', 'jui/jquery-noconflict.js', false, true, false, false, false);		}		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to load the jQuery UI JavaScript framework into the document head	 *	 * If debugging mode is on an uncompressed version of jQuery UI is included for easier debugging.	 *	 * @param   array  $components  The jQuery UI components to load [optional]	 * @param   mixed  $debug       Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function ui(array $components = array('core'), $debug = null)	{		// Set an array containing the supported jQuery UI components handled by this method		$supported = array('core', 'sortable');		// Include jQuery		self::framework();		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug  = (boolean) $config->get('debug');		}		// Load each of the requested components		foreach ($components as $component)		{			// Only attempt to load the component if it's supported in core and hasn't already been loaded			if (in_array($component, $supported) && empty(self::$loaded[__METHOD__][$component]))			{				JHtml::_('script', 'jui/jquery.ui.' . $component . '.min.js', false, true, false, false, $debug);				self::$loaded[__METHOD__][$component] = true;			}		}		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Component Controller * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.5 */class ContentController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'articles';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 *	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$view   = $this->input->get('view', 'articles');		$layout = $this->input->get('layout', 'articles');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'article' && $layout == 'edit' && !$this->checkEditId('com_content.edit.article', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_content&view=articles', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of search terms. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.5 */class SearchViewSearches extends JViewLegacy{	protected $enabled;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->enabled		= $this->state->params->get('enabled');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= SearchHelper::getActions();		JToolbarHelper::title(JText::_('COM_SEARCH_MANAGER_SEARCHES'), 'search.png');		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::custom('searches.reset', 'refresh.png', 'refresh_f2.png', 'JSEARCH_RESET', false);		}		JToolbarHelper::divider();		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_search');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_SEARCH');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Overrides Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesControllerOverrides extends JControllerAdmin{	/**	 * The prefix to use with controller messages	 *	 * @var		string	 * @since	2.5	 */	protected $text_prefix = 'COM_LANGUAGES_VIEW_OVERRIDES';	/**	 * Method for deleting one or more overrides	 *	 * @return  void	 *	 * @since		2.5	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));		// Get items to dlete from the request		$cid = $this->input->get('cid', array(), 'array');		if (!is_array($cid) || count($cid) < 1)		{			$this->setMessage(JText::_($this->text_prefix.'_NO_ITEM_SELECTED'), 'warning');		}		else		{			// Get the model			$model = $this->getModel('overrides');			// Remove the items			if ($model->delete($cid))			{				$this->setMessage(JText::plural($this->text_prefix.'_N_ITEMS_DELETED', count($cid)));			}			else			{				$this->setMessage($model->getError());			}		}		$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input JSON Class * * This class decodes a JSON string from the raw request data and makes it available via * the standard JInput interface. * * @package     Joomla.Platform * @subpackage  Input * @since       12.2 */class JInputJSON extends JInput{	/**	 * @var    string  The raw JSON string from the request.	 * @since  12.2	 */	private $_raw;	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is the raw HTTP input decoded from JSON)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.2	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		if (is_null($source))		{			$this->_raw = file_get_contents('php://input');			$this->data = json_decode($this->_raw, true);		}		else		{			$this->data = & $source;		}		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets the raw JSON string from the request.	 *	 * @return  string  The raw JSON string from the request.	 *	 * @since   12.2	 */	public function getRaw()	{		return $this->_raw;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;$canEdit = $displayData['params']->get('access-edit');?><div id="icons">	<?php if (empty($displayData['print'])) : ?>		<?php if ($canEdit || $displayData['params']->get('show_print_icon') || $displayData['params']->get('show_email_icon')) : ?>			<div class="btn-group pull-right">				<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span> <span class="caret"></span> </a>				<?php // Note the actions class is deprecated. Use dropdown-menu instead. ?>				<ul class="dropdown-menu">					<?php if ($displayData['params']->get('show_print_icon')) : ?>						<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>					<?php if ($displayData['params']->get('show_email_icon')) : ?>						<li class="email-icon"> <?php echo JHtml::_('icon.email', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>					<?php if ($canEdit) : ?>						<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>				</ul>			</div>		<?php endif; ?>	<?php else : ?>		<div class="pull-right">			<?php echo JHtml::_('icon.print_screen', $displayData['item'], $displayData['params']); ?>		</div>	<?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google authentication class abstract * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleAuth{	/**	 * @var    JRegistry  Options for the Google authentication object.	 * @since  12.3	 */	protected $options;	/**	 * Abstract method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	abstract public function authenticate();	/**	 * Verify if the client has been authenticated	 *	 * @return  boolean  Is authenticated	 *	 * @since   12.3	 */	abstract public function isAuthenticated();	/**	 * Abstract method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	abstract public function query($url, $data = null, $headers = null, $method = 'get');	/**	 * Get an option from the JGoogleAuth object.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleAuth object.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleAuth  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	?>	<div class="tab-pane" id="params-<?php echo $name;?>">	<?php	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php endforeach; ?>	</div><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! update selection list helper. * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateHelperSelect{	/**	 * Returns an HTML select element with the different extraction modes	 *	 * @param   string  $default  The default value of the select element	 *	 * @return  string	 *	 * @since   2.5.4	 */	public static function getMethods($default = 'direct')	{		$options = array();		$options[] = JHtml::_('select.option', 'direct', JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_METHOD_DIRECT'));		$options[] = JHtml::_('select.option', 'ftp', JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_METHOD_FTP'));		return JHtml::_('select.genericlist', $options, 'method', '', 'value', 'text', $default, 'extraction_method');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Joomla! Formatted Text File Log class * * This class is designed to use as a base for building formatted text files for output. By * default it emulates the Syslog style format output. This is a disk based output format. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerFormattedtext extends JLogLogger{	/**	 * @var    resource  The file pointer for the log file.	 * @since  11.1	 */	protected $file;	/**	 * @var    string  The format for which each entry follows in the log file.  All fields must be named	 * in all caps and be within curly brackets eg. {FOOBAR}.	 * @since  11.1	 */	protected $format = '{DATETIME}	{PRIORITY}	{CATEGORY}	{MESSAGE}';	/**	 * @var    array  The parsed fields from the format string.	 * @since  11.1	 */	protected $fields = array();	/**	 * @var    string  The full filesystem path for the log file.	 * @since  11.1	 */	protected $path;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// The name of the text file defaults to 'error.php' if not explicitly given.		if (empty($this->options['text_file']))		{			$this->options['text_file'] = 'error.php';		}		// The name of the text file path defaults to that which is set in configuration if not explicitly given.		if (empty($this->options['text_file_path']))		{			$this->options['text_file_path'] = JFactory::getConfig()->get('log_path');		}		// False to treat the log file as a php file.		if (empty($this->options['text_file_no_php']))		{			$this->options['text_file_no_php'] = false;		}		// Build the full path to the log file.		$this->path = $this->options['text_file_path'] . '/' . $this->options['text_file'];		// Use the default entry format unless explicitly set otherwise.		if (!empty($this->options['text_entry_format']))		{			$this->format = (string) $this->options['text_entry_format'];		}		// Build the fields array based on the format string.		$this->parseFields();	}	/**	 * Destructor.	 *	 * @since   11.1	 */	public function __destruct()	{		if (is_resource($this->file))		{			fclose($this->file);		}	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function addEntry(JLogEntry $entry)	{		// Initialise the file if not already done.		if (!is_resource($this->file))		{			$this->initFile();		}		// Set some default field values if not already set.		if (!isset($entry->clientIP))		{			// Check for proxies as well.			if (isset($_SERVER['REMOTE_ADDR']))			{				$entry->clientIP = $_SERVER['REMOTE_ADDR'];			}			elseif (isset($_SERVER['HTTP_X_FORWARDED_FOR']))			{				$entry->clientIP = $_SERVER['HTTP_X_FORWARDED_FOR'];			}			elseif (isset($_SERVER['HTTP_CLIENT_IP']))			{				$entry->clientIP = $_SERVER['HTTP_CLIENT_IP'];			}		}		// If the time field is missing or the date field isn't only the date we need to rework it.		if ((strlen($entry->date) != 10) || !isset($entry->time))		{			// Get the date and time strings in GMT.			$entry->datetime = $entry->date->toISO8601();			$entry->time = $entry->date->format('H:i:s', false);			$entry->date = $entry->date->format('Y-m-d', false);		}		// Get a list of all the entry keys and make sure they are upper case.		$tmp = array_change_key_case(get_object_vars($entry), CASE_UPPER);		// Decode the entry priority into an English string.		$tmp['PRIORITY'] = $this->priorities[$entry->priority];		// Fill in field data for the line.		$line = $this->format;		foreach ($this->fields as $field)		{			$line = str_replace('{' . $field . '}', (isset($tmp[$field])) ? $tmp[$field] : '-', $line);		}		// Write the new entry to the file.		if (!fwrite($this->file, $line . "\n"))		{			throw new RuntimeException('Cannot write to log file.');		}	}	/**	 * Method to generate the log file header.	 *	 * @return  string  The log file header	 *	 * @since   11.1	 */	protected function generateFileHeader()	{		$head = array();		// Build the log file header.		// If the no php flag is not set add the php die statement.		if (empty($this->options['text_file_no_php']))		{			// Blank line to prevent information disclose: https://bugs.php.net/bug.php?id=60677			$head[] = '#';			$head[] = '#<?php die(\'Forbidden.\'); ?>';		}		$head[] = '#Date: ' . gmdate('Y-m-d H:i:s') . ' UTC';		$head[] = '#Software: ' . JPlatform::getLongVersion();		$head[] = '';		// Prepare the fields string		$head[] = '#Fields: ' . strtolower(str_replace('}', '', str_replace('{', '', $this->format)));		$head[] = '';		return implode("\n", $head);	}	/**	 * Method to initialise the log file.  This will create the folder path to the file if it doesn't already	 * exist and also get a new file header if the file doesn't already exist.  If the file already exists it	 * will simply open it for writing.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function initFile()	{		// If the file doesn't already exist we need to create it and generate the file header.		if (!is_file($this->path))		{			// Make sure the folder exists in which to create the log file.			JFolder::create(dirname($this->path));			// Build the log file header.			$head = $this->generateFileHeader();		}		else		{			$head = false;		}		// Open the file for writing (append mode).		if (!$this->file = fopen($this->path, 'a'))		{			throw new RuntimeException('Cannot open file for writing log');		}		if ($head)		{			if (!fwrite($this->file, $head))			{				throw new RuntimeException('Cannot fput file for log');			}		}	}	/**	 * Method to parse the format string into an array of fields.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function parseFields()	{		$this->fields = array();		$matches = array();		// Get all of the available fields in the format string.		preg_match_all("/{(.*?)}/i", $this->format, $matches);		// Build the parsed fields list based on the found fields.		foreach ($matches[1] as $match)		{			$this->fields[] = strtoupper($match);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">function iFrameHeight(){	var h = 0;	if (!document.all)	{		h = document.getElementById('blockrandom').contentDocument.height;		document.getElementById('blockrandom').style.height = h + 60 + 'px';	} else if (document.all)	{		h = document.frames('blockrandom').document.body.scrollHeight;		document.all.blockrandom.style.height = h + 20 + 'px';	}}</script><div class="contentpane<?php echo $this->pageclass_sfx; ?>"><?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php if ($this->escape($this->params->get('page_heading'))) :?>			<?php echo $this->escape($this->params->get('page_heading')); ?>		<?php else : ?>			<?php echo $this->escape($this->params->get('page_title')); ?>		<?php endif; ?>	</h1><?php endif; ?><iframe <?php echo $this->wrapper->load; ?>	id="blockrandom"	name="iframe"	src="<?php echo $this->escape($this->wrapper->url); ?>"	width="<?php echo $this->escape($this->params->get('width')); ?>"	height="<?php echo $this->escape($this->params->get('height')); ?>"	scrolling="<?php echo $this->escape($this->params->get('scrolling')); ?>"	frameborder="<?php echo $this->escape($this->params->get('frameborder', 1)); ?>"	class="wrapper<?php echo $this->pageclass_sfx; ?>">	<?php echo JText::_('COM_WRAPPER_NO_IFRAMES'); ?></iframe></div>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * Content Component Archive Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelArchive extends ContentModelArticles{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_content.archive';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		parent::populateState();		$app = JFactory::getApplication();		// Add archive properties		$params = $this->state->params;		// Filter on archived articles		$this->setState('filter.published', 2);		// Filter on month, year		$this->setState('filter.month', $app->input->getInt('month'));		$this->setState('filter.year', $app->input->getInt('year'));		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		// Get list limit		$itemid = $app->input->get('Itemid', 0, 'int');		$limit = $app->getUserStateFromRequest('com_content.archive.list' . $itemid . '.limit', 'limit', $params->get('display_num'), 'uint');		$this->setState('list.limit', $limit);	}	/**	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Set the archive ordering		$params = $this->state->params;		$articleOrderby = $params->get('orderby_sec', 'rdate');		$articleOrderDate = $params->get('order_date');		// No category ordering		$categoryOrderby = '';		$secondary = ContentHelperQuery::orderbySecondary($articleOrderby, $articleOrderDate) . ', ';		$primary = ContentHelperQuery::orderbyPrimary($categoryOrderby);		$orderby = $primary . ' ' . $secondary . ' a.created DESC ';		$this->setState('list.ordering', $orderby);		$this->setState('list.direction', '');		// Create a new query object.		$query = parent::getListQuery();			// Add routing for archive			//sqlsrv changes		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('a.alias', '!=', '0');		$case_when .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $a_id.' END as slug';		$query->select($case_when);		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('c.alias', '!=', '0');		$case_when .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $c_id.' END as catslug';		$query->select($case_when);		// Filter on month, year		// First, get the date field		$queryDate = ContentHelperQuery::getQueryDate($articleOrderDate);		if ($month = $this->getState('filter.month'))		{			$query->where('MONTH('. $queryDate . ') = ' . $month);		}		if ($year = $this->getState('filter.year'))		{			$query->where('YEAR('. $queryDate . ') = ' . $year);		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to get the archived article list	 *	 * @access public	 * @return array	 */	public function getData()	{		$app = JFactory::getApplication();		// Lets load the content if it doesn't already exist		if (empty($this->_data))		{			// Get the page/component configuration			$params = $app->getParams();			// Get the pagination request variables			$limit		= $app->input->get('limit', $params->get('display_num', 20), 'uint');			$limitstart	= $app->input->get('limitstart', 0, 'uint');			$query = $this->_buildQuery();			$this->_data = $this->_getList($query, $limitstart, $limit);		}		return $this->_data;	}	// JModelLegacy override to add alternating value for $odd	protected function _getList($query, $limitstart=0, $limit=0)	{		$result = parent::_getList($query, $limitstart, $limit);		$odd = 1;		foreach ($result as $k => $row)		{			$result[$k]->odd = $odd;			$odd = 1 - $odd;		}		return $result;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Language Form Field class. * * @package  Joomla.Installation * @since    1.6 */class JFormFieldLanguage extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Language';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   1.6	 */	protected function getOptions()	{		$app = JFactory::getApplication();		// Detect the native language.		$native = JLanguageHelper::detectLanguage();		if (empty($native))		{			$native = 'en-GB';		}		// Get a forced language if it exists.		$forced = $app->getLocalise();		if (!empty($forced['language']))		{			$native = $forced['language'];		}		// If a language is already set in the session, use this instead		$model   = new InstallationModelSetup;		$options = $model->getOptions();		if (isset($options['language']))		{			$native = $options['language'];		}		// Get the list of available languages.		$options = JLanguageHelper::createLanguageList($native);		if (!$options || $options  instanceof Exception)		{			$options = array();		}		// Sort languages by name		else		{			usort($options, array($this, '_sortLanguages'));		}		// Set the default value from the native language.		$this->value = $native;		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}	/**	 * Method to sort languages by name.	 *	 * @param   string  $a  The first value to determine sort	 * @param   string  $b  The second value to determine sort	 *	 * @return  string	 *	 * @since    3.1	 */	protected function _sortLanguages($a, $b)	{		return strcmp($a['text'], $b['text']);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Simplepie * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('simplepie.simplepie');/** * Class to maintain a pathway. * * The user's navigated path within the application. * * @package     Joomla.Legacy * @subpackage  Simplepie * @since       12.2 * * @deprecated  4.0  Use JFeed or supply your own methods */class JSimplepieFactory{	/**	 * Get a parsed XML Feed Source	 *	 * @param   string   $url         Url for feed source.	 * @param   integer  $cache_time  Time to cache feed for (using internal cache mechanism).	 *	 * @return  mixed  SimplePie parsed object on success, false on failure.	 *	 * @since   12.2	 * @deprecated  4.0   Use JFeedFactory($url) instead.	 *	 * @note  In 3.2 will be proxied to JFeedFactory()	 */	public static function getFeedParser($url, $cache_time = 0)	{		JLog::add(__METHOD__ . ' is deprecated.   Use JFeedFactory() or supply Simple Pie instead.', JLog::WARNING, 'deprecated');		$cache = JFactory::getCache('feed_parser', 'callback');		if ($cache_time > 0)		{			$cache->setLifeTime($cache_time);		}		$simplepie = new SimplePie(null, null, 0);		$simplepie->enable_cache(false);		$simplepie->set_feed_url($url);		$simplepie->force_feed(true);		$contents = $cache->get(array($simplepie, 'init'), null, false, false);		if ($contents)		{			return $simplepie;		}		JLog::add(JText::_('JLIB_UTIL_ERROR_LOADING_FEED_DATA'), JLog::WARNING, 'jerror');		return false;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('database');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a  class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_FTP'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_enable'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_enable'); ?>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_user'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_user'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_FTP_USER_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_pass'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_pass'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_FTP_PASSWORD_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">		</div>		<div class="controls">			<button id="verifybutton" class="btn btn-success" onclick="Install.verifyFtpSettings(this);"><i class="icon-ok icon-white"></i> <?php echo JText::_('INSTL_VERIFY_FTP_SETTINGS'); ?></button>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_host'); ?>		</div>		<div class="controls">			<div class="input-append">				<?php echo $this->form->getInput('ftp_host'); ?><button id="findbutton" class="btn" onclick="Install.detectFtpRoot(this);"><i class="icon-folder-open"></i> <?php echo JText::_('INSTL_AUTOFIND_FTP_PATH'); ?></button>			</div>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_port'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_port'); ?>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('ftp_save'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('ftp_save'); ?>		</div>	</div>	<input type="hidden" name="task" value="ftp" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create a shortcut for params.$params = &$this->item->params;$images = json_decode($this->item->images);$canEdit = $this->item->params->get('access-edit');$info    = $this->item->params->get('info_block_position', 0);?><?php if ($this->item->state == 0) : ?>	<div class="system-unpublished"><?php endif; ?><?php if ($params->get('show_title')) : ?>	<h2 class="item-title">	<?php if ($params->get('link_titles') && $params->get('access-view')) : ?>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid)); ?>"> <?php echo $this->escape($this->item->title); ?></a>	<?php else : ?>		<?php echo $this->escape($this->item->title); ?>	<?php endif; ?>	</h2><?php endif; ?><?php if ($this->item->state == 0) : ?>	<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php endif; ?><?php if ($params->get('show_print_icon') || $params->get('show_email_icon') || $canEdit) : ?>	<div class="btn-group pull-right"> <a class="btn dropdown-toggle" data-toggle="dropdown" href="#" role="button"> <span class="icon-cog"></span> <span class="caret"></span> </a>		<ul class="dropdown-menu">		<?php if ($params->get('show_print_icon')) : ?>			<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $this->item, $params); ?> </li>		<?php endif; ?>		<?php if ($params->get('show_email_icon')) : ?>			<li class="email-icon"> <?php echo JHtml::_('icon.email', $this->item, $params); ?> </li>		<?php endif; ?>		<?php if ($canEdit) : ?>			<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $this->item, $params); ?> </li>		<?php endif; ?>		</ul>	</div><?php endif; ?><?php // Todo Not that elegant would be nice to group the params ?><?php $useDefList = ($params->get('show_modify_date') || $params->get('show_publish_date') || $params->get('show_create_date')	|| $params->get('show_hits') || $params->get('show_category') || $params->get('show_parent_category') || $params->get('show_author') ); ?><?php if ($useDefList && ($info == 0 ||  $info == 2)) : ?>	<dl class="article-info  muted">		<dt class="article-info-term">		<?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?>		</dt>		<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>			<dd class="createdby">				<?php $author = $this->item->author; ?>				<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author); ?>				<?php if (!empty($this->item->contactid ) && $params->get('link_author') == true) : ?>					<?php					echo JText::sprintf('COM_CONTENT_WRITTEN_BY',						JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id='.$this->item->contactid), $author)					); ?>				<?php else :?>					<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>				<?php endif; ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>			<dd class="parent-category-name">				<?php $title = $this->escape($this->item->parent_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>				<?php if ($params->get('link_parent_category') && !empty($this->item->parent_slug)) : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>				<?php endif; ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_category')) : ?>			<dd class="category-name">				<?php $title = $this->escape($this->item->category_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>				<?php if ($params->get('link_category') && $this->item->catslug) : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>				<?php endif; ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_publish_date')) : ?>			<dd class="published">				<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>		<?php endif; ?>		<?php if ($info == 0) : ?>			<?php if ($params->get('show_modify_date')) : ?>				<dd class="modified">				<span class="icon-calendar"></span>				<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_create_date')) : ?>				<dd class="create">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_hits')) : ?>				<dd class="hits">					<span class="icon-eye-open"></span>					<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>				</dd>			<?php endif; ?>		<?php endif; ?>	</dl><?php endif; ?><?php if (isset($images->image_intro) && !empty($images->image_intro)) : ?>	<?php $imgfloat = (empty($images->float_intro)) ? $params->get('float_intro') : $images->float_intro; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_intro_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_intro_caption) .'"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_intro); ?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>"/> </div><?php endif; ?><?php if (!$params->get('show_intro')) : ?>	<?php echo $this->item->event->afterDisplayTitle; ?><?php endif; ?><?php echo $this->item->event->beforeDisplayContent; ?><?php if ($params->get('show_intro')) : ?><?php echo $this->item->introtext; ?><?php endif; ?><?php if ($useDefList && ($info == 1 ||  $info == 2)) : ?>	<dl class="article-info muted">		<dt class="article-info-term">			<?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?>		</dt>		<?php if ($info == 1) : ?>			<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>				<dd class="createdby">					<?php $author = $this->item->author; ?>					<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author); ?>					<?php if (!empty($this->item->contactid ) && $params->get('link_author') == true) : ?>						<?php						echo JText::sprintf('COM_CONTENT_WRITTEN_BY',							JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id='.$this->item->contactid), $author)						); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>				<dd class="parent-category-name">					<?php	$title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>					<?php if ($params->get('link_parent_category') && $this->item->parent_slug) : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_category')) : ?>				<dd class="category-name">					<?php $title = $this->escape($this->item->category_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>					<?php if ($params->get('link_category') && $this->item->catslug) : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_publish_date')) : ?>				<dd class="published">					<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>		<?php endif; ?>		<?php if ($params->get('show_create_date')) : ?>			<dd class="create">				<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_modify_date')) : ?>			<dd class="modified">				<span class="icon-calendar"></span>				<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_hits')) : ?>			<dd class="hits">				<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>			</dd>		<?php endif; ?>	</dl>	<?php if ($this->params->get('show_tags', 1)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?><?php endif; ?><?php if ($params->get('show_readmore') && $this->item->readmore) :	if ($params->get('access-view')) :		$link = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));	else :		$menu = JFactory::getApplication()->getMenu();		$active = $menu->getActive();		$itemId = $active->id;		$link1 = JRoute::_('index.php?option=com_users&view=login&Itemid=' . $itemId);		$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));		$link = new JURI($link1);		$link->setVar('return', base64_encode($returnURL));	endif; ?>	<p class="readmore"><a class="btn" href="<?php echo $link; ?>"> <span class="icon-chevron-right"></span>	<?php if (!$params->get('access-view')) :		echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');	elseif ($readmore = $this->item->alternative_readmore) :		echo $readmore;		if ($params->get('show_readmore_title', 0) != 0) :		echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));		endif;	elseif ($params->get('show_readmore_title', 0) == 0) :		echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');	else :		echo JText::_('COM_CONTENT_READ_MORE');		echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));	endif; ?>	</a></p><?php endif; ?><?php if ($this->item->state == 0) : ?></div><?php endif; ?><?php echo $this->item->event->afterDisplayContent; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * OpenSearch View class for Finder * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderViewSearch extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  JError object on failure, void on success.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		$doc = JFactory::getDocument();		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_finder');		$doc->setShortName($params->get('opensearch_name', $app->getCfg('sitename')));		$doc->setDescription($params->get('opensearch_description', $app->getCfg('MetaDesc')));		// Add the URL for the search		$searchUri = JURI::base() . 'index.php?option=com_finder&q={searchTerms}';		// Find the menu item for the search		$menu = $app->getMenu();		$items = $menu->getItems('link', 'index.php?option=com_finder&view=search');		if (isset($items[0]))		{			$searchUri .= '&Itemid=' . $items[0]->id;		}		$htmlSearch = new JOpenSearchUrl;		$htmlSearch->template = JRoute::_($searchUri);		$doc->addUrl($htmlSearch);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note that there are certain parts of this layout used only when there is exactly one tag.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');$isSingleTag = (count($this->item) == 1);?><div class="tag-category<?php echo $this->pageclass_sfx; ?>"><?php  if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif;  ?><?php if($this->params->get('show_tag_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->document->title, '', 'com_tag.tag'); ?></h2><?php endif; ?><?php // We only show a tag description if there is a single tag. ?><?php  if (count($this->item) == 1 && (($this->params->get('tag_list_show_tag_image', 1)) || $this->params->get('tag_list_show_tag_description', 1))) : ?>	<div class="category-desc">	<?php $images = json_decode($this->item[0]->images); ?>	<?php if ($this->params->get('tag_list_show_tag_image', 1) == 1 && !empty($images->image_fulltext)) : ?>		<img src="<?php echo htmlspecialchars($images->image_fulltext);?>">	<?php endif; ?>	<?php if ($this->params->get('tag_list_show_tag_description') == 1 && $this->item[0]->description) : ?>		<?php echo JHtml::_('content.prepare', $this->item[0]->description, '', 'com_tags.tag'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php // If there are multiple tags and a description or image has been supplied use that. ?><?php if ($this->params->get('tag_list_show_tag_description', 1) || $this->params->get('show_description_image', 1)): ?>		<?php if ($this->params->get('show_description_image', 1) == 1 && $this->params->get('tag_list_image')) :?>			<img src="<?php echo $this->params->get('tag_list_image');?>">		<?php endif; ?>		<?php if ($this->params->get('tag_list_description', '') > '') :?>			<?php echo JHtml::_('content.prepare', $this->params->get('tag_list_description'), '', 'com_tags.tag'); ?>		<?php endif; ?><?php endif; ?><?php echo $this->loadTemplate('items'); ?></div>
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * none (output raw module content) */function modChrome_none($module, &$params, &$attribs){	echo $module->content;}/* * html5 (chosen html5 tag and font headder tags) */function modChrome_html5($module, &$params, &$attribs){	$moduleTag      = $params->get('module_tag', 'div');	$headerTag      = htmlspecialchars($params->get('header_tag', 'h3'));	$bootstrapSize  = (int) $params->get('bootstrap_size', 0);	$moduleClass    = $bootstrapSize != 0 ? ' span' . $bootstrapSize : '';	if (!empty ($module->content)) : ?>		<<?php echo $moduleTag; ?> class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?><?php echo $moduleClass; ?>">		<?php if ((bool) $module->showtitle) :?>			<<?php echo $headerTag; ?> class="<?php echo $params->get('header_class'); ?>"><?php echo $module->title; ?></<?php echo $headerTag; ?>>		<?php endif; ?>			<?php echo $module->content; ?>				</<?php echo $moduleTag; ?>>	<?php endif;}/* * Module chrome that wraps the module in a table */function modChrome_table($module, &$params, &$attribs){ ?>	<table cellpadding="0" cellspacing="0" class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">	<?php if ((bool) $module->showtitle) : ?>		<tr>			<th>				<?php echo $module->title; ?>			</th>		</tr>	<?php endif; ?>		<tr>			<td>				<?php echo $module->content; ?>			</td>		</tr>		</table>	<?php}/* * Module chrome that wraps the tabled module output in a <td> tag of another table */function modChrome_horz($module, &$params, &$attribs){ ?>	<table cellspacing="1" cellpadding="0" width="100%">		<tr>			<td>				<?php modChrome_table($module, $params, $attribs); ?>			</td>		</tr>	</table>	<?php}/* * xhtml (divs and font headder tags) */function modChrome_xhtml($module, &$params, &$attribs){	if (!empty ($module->content)) : ?>		<div class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">		<?php if ((bool) $module->showtitle) : ?>			<h3><?php echo $module->title; ?></h3>		<?php endif; ?>			<?php echo $module->content; ?>		</div>	<?php endif;}/* * Module chrome that allows for rounded corners by wrapping in nested div tags */function modChrome_rounded($module, &$params, &$attribs){ ?>		<div class="module<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">			<div>				<div>					<div>						<?php if ((bool) $module->showtitle) : ?>							<h3><?php echo $module->title; ?></h3>						<?php endif; ?>					<?php echo $module->content; ?>					</div>				</div>			</div>		</div>	<?php}/* * Module chrome that add preview information to the module */function modChrome_outline($module, &$params, &$attribs){	static $css = false;	if (!$css)	{		$css = true;		$doc = JFactory::getDocument();		$doc->addStyleDeclaration(".mod-preview-info { padding: 2px 4px 2px 4px; border: 1px solid black; position: absolute; background-color: white; color: red;}");		$doc->addStyleDeclaration(".mod-preview-wrapper { background-color:#eee; border: 1px dotted black; color:#700;}");	}	?>	<div class="mod-preview">		<div class="mod-preview-info"><?php echo 'Position: ' . $module->position . ' [ Style: ' . $module->style . ']'; ?></div>		<div class="mod-preview-wrapper">			<?php echo $module->content; ?>		</div>	</div>	<?php}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Picasa data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataPicasa extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://picasaweb.google.com/data/');		}	}	/**	 * Method to retrieve a list of Picasa Albums	 *	 * @param   string  $userID  ID of user	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listAlbums($userID = 'default')	{		if ($this->isAuthenticated())		{			$url = 'https://picasaweb.google.com/data/feed/api/user/' . urlencode($userID);			$jdata = $this->query($url, null, array('GData-Version' => 2));			$xml = $this->safeXML($jdata->body);			if (isset($xml->children()->entry))			{				$items = array();				foreach ($xml->children()->entry as $item)				{					$items[] = new JGoogleDataPicasaAlbum($item, $this->options, $this->auth);				}				return $items;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to create a Picasa Album	 *	 * @param   string  $userID    ID of user	 * @param   string  $title     New album title	 * @param   string  $access    New album access settings	 * @param   string  $summary   New album summary	 * @param   string  $location  New album location	 * @param   int     $time      New album timestamp	 * @param   array   $keywords  New album keywords	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	public function createAlbum($userID = 'default', $title = '', $access = 'private', $summary = '', $location = '', $time = false, $keywords = array())	{		if ($this->isAuthenticated())		{			$time = $time ? $time : time();			$title = $title != '' ? $title : date('F j, Y');			$xml = new SimpleXMLElement('<entry></entry>');			$xml->addAttribute('xmlns', 'http://www.w3.org/2005/Atom');			$xml->addChild('title', $title);			$xml->addChild('summary', $summary);			$xml->addChild('gphoto:location', $location, 'http://schemas.google.com/photos/2007');			$xml->addChild('gphoto:access', $access);			$xml->addChild('gphoto:timestamp', $time);			$media = $xml->addChild('media:group', '', 'http://search.yahoo.com/mrss/');			$media->addChild('media:keywords', implode($keywords, ', '));			$cat = $xml->addChild('category', '');			$cat->addAttribute('scheme', 'http://schemas.google.com/g/2005#kind');			$cat->addAttribute('term', 'http://schemas.google.com/photos/2007#album');			$url = 'https://picasaweb.google.com/data/feed/api/user/' . urlencode($userID);			$jdata = $this->query($url, $xml->asXML(), array('GData-Version' => 2, 'Content-type' => 'application/atom+xml'), 'post');			$xml = $this->safeXML($jdata->body);			return new JGoogleDataPicasaAlbum($xml, $this->options, $this->auth);		}		else		{			return false;		}	}	/**	 * Get Picasa Album	 *	 * @param   string  $url  URL of album to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function getAlbum($url)	{		if ($this->isAuthenticated())		{			$jdata = $this->query($url, null, array('GData-Version' => 2));			$xml = $this->safeXML($jdata->body);			return new JGoogleDataPicasaAlbum($xml, $this->options, $this->auth);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_random_image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="random-image<?php echo $moduleclass_sfx ?>"><?php if ($link) : ?><a href="<?php echo $link; ?>"><?php endif; ?>	<?php echo JHtml::_('image', $image->folder.'/'.$image->name, $image->name, array('width' => $image->width, 'height' => $image->height)); ?><?php if ($link) : ?></a><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_multilangstatus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require JModuleHelper::getLayoutPath('mod_multilangstatus', $params->get('layout', 'default'));
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewCompleteHtml $this */?><form action="index.php" xmlns="http://www.w3.org/1999/html" method="post" id="adminForm"	class="form-validate form-horizontal">	<div class="alert alert-error inlineError" id="theDefaultError" style="display: none">		<h4 class="alert-heading"><?php echo JText::_('JERROR'); ?></h4>		<p id="theDefaultErrorMessage"></p>	</div>	<div class="alert alert-success">		<h3><?php echo JText::_('INSTL_COMPLETE_TITLE'); ?></h3>	</div>	<div class="alert">		<p><?php echo JText::_('INSTL_COMPLETE_REMOVE_INSTALLATION'); ?></p>		<input type="button" class="btn btn-warning" name="instDefault" onclick="Install.removeFolder(this);" value="<?php echo JText::_('INSTL_COMPLETE_REMOVE_FOLDER'); ?>" />	</div>	<div class="btn-toolbar">		<div class="btn-group">			<a class="btn" href="<?php echo JURI::root(); ?>" title="<?php echo JText::_('JSITE'); ?>"><i class="icon-eye-open"></i> <?php echo JText::_('JSITE'); ?></a>		</div>		<div class="btn-group">			<a class="btn btn-primary" href="<?php echo JURI::root(); ?>administrator/" title="<?php echo JText::_('JADMINISTRATOR'); ?>"><i class="icon-lock icon-white"></i> <?php echo JText::_('JADMINISTRATOR'); ?></a>		</div>	</div>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_COMPLETE_ADMINISTRATION_LOGIN_DETAILS'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('JEMAIL'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_email']; ?></span>						</td>					</tr>					<tr>						<td class="notice">							<?php echo JText::_('JUSERNAME'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_user']; ?></span>						</td>					</tr>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div id="languages" class="span6">			<h3><?php echo JText::_('INSTL_COMPLETE_LANGUAGE_1'); ?></h3>			<hr class="hr-condensed" />			<p><?php echo JText::_('INSTL_COMPLETE_LANGUAGE_DESC'); ?></p>			<p><a href="#" class="btn btn-primary" id="instLangs" onclick="return Install.goToPage('languages');"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('INSTL_COMPLETE_INSTALL_LANGUAGES'); ?></a></p>			<p><?php echo JText::_('INSTL_COMPLETE_LANGUAGE_DESC2'); ?></p>		</div>	</div>	<?php if ($this->config) : ?>	<div class="alert alert-error">		<h3 class="alert-heading"><?php echo JText::_('JNOTICE'); ?></h3>		<p><?php echo JText::_('INSTL_CONFPROBLEM'); ?></p>		<textarea rows="10" cols="80" style="width: 100%;" name="configcode" onclick="this.form.configcode.focus();this.form.configcode.select();"><?php echo $this->config; ?></textarea>	</div>	<?php endif; ?>	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlusPeople extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * Get a person's profile.	 *	 * @param   string  $id      The ID of the person to get the profile for. The special value "me" can be used to indicate the authenticated user.	 * @param   string  $fields  Used to specify the fields you want returned.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function getPeople($id, $fields = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people/' . $id;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Search all public profiles.	 *	 * @param   string   $query     Specify a query string for full text search of public text in all profiles.	 * @param   string   $fields    Used to specify the fields you want returned.	 * @param   string   $language  Specify the preferred language to search with. https://developers.google.com/+/api/search#available-languages	 * @param   integer  $max       The maximum number of people to include in the response, used for paging.	 * @param   string   $token     The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function search($query, $fields = null, $language = null, $max = 10, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people?query=' . urlencode($query);			// Check if fields is specified.			if ($fields)			{				$url .= '&fields=' . $fields;			}			// Check if language is specified.			if ($language)			{				$url .= '&language=' . $language;			}			// Check if max is specified.			if ($max != 10)			{				$url .= '&maxResults=' . $max;			}			// Check of token is specified.			if ($token)			{				$url .= '&pageToken=' . $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * List all of the people in the specified collection for a particular activity.	 *	 * @param   string   $activityId  The ID of the activity to get the list of people for.	 * @param   string   $collection  The collection of people to list. Acceptable values are "plusoners" and "resharers".	 * @param   string   $fields      Used to specify the fields you want returned.	 * @param   integer  $max         The maximum number of people to include in the response, used for paging.	 * @param   string   $token       The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								  parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function listByActivity($activityId, $collection, $fields = null, $max = 10, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities/' . $activityId . '/people/' . $collection;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if max is specified.			if ($max != 10)			{				$url .= (strpos($url, '?') === false) ? '?maxResults=' : '&maxResults=';				$url .= $max;			}			// Check of token is specified.			if ($token)			{				$url .= (strpos($url, '?') === false) ? '?pageToken=' : '&pageToken=';				$url .= $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Object * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Object Class * * This class allows for simple but smart objects with get and set methods * and an internal error handler. * * @package     Joomla.Platform * @subpackage  Object * @since       11.1 */class JObject{	/**	 * An array of error messages or Exception objects.	 *	 * @var    array	 * @since  11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	protected $_errors = array();	/**	 * Class constructor, overridden in descendant classes.	 *	 * @param   mixed  $properties  Either and associative array or another	 *                              object to set the initial properties of the object.	 *	 * @since   11.1	 */	public function __construct($properties = null)	{		if ($properties !== null)		{			$this->setProperties($properties);		}	}	/**	 * Magic method to convert the object to a string gracefully.	 *	 * @return  string  The classname.	 *	 * @since   11.1	 * @deprecated 12.3  Classes should provide their own __toString() implementation.	 */	public function __toString()	{		return get_class($this);	}	/**	 * Sets a default value if not alreay assigned	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function def($property, $default = null)	{		$value = $this->get($property, $default);		return $this->set($property, $value);	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed    The value of the property.	 *	 * @since   11.1	 *	 * @see     getProperties()	 */	public function get($property, $default = null)	{		if (isset($this->$property))		{			return $this->$property;		}		return $default;	}	/**	 * Returns an associative array of object properties.	 *	 * @param   boolean  $public  If true, returns only the public properties.	 *	 * @return  array	 *	 * @since   11.1	 *	 * @see     get()	 */	public function getProperties($public = true)	{		$vars = get_object_vars($this);		if ($public)		{			foreach ($vars as $key => $value)			{				if ('_' == substr($key, 0, 1))				{					unset($vars[$key]);				}			}		}		return $vars;	}	/**	 * Get the most recent error message.	 *	 * @param   integer  $i         Option error index.	 * @param   boolean  $toString  Indicates if JError objects should return their error message.	 *	 * @return  string   Error message	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function getError($i = null, $toString = true)	{		// Find the error		if ($i === null)		{			// Default, return the last message			$error = end($this->_errors);		}		elseif (!array_key_exists($i, $this->_errors))		{			// If $i has been specified but does not exist, return false			return false;		}		else		{			$error = $this->_errors[$i];		}		// Check if only the string is requested		if ($error instanceof Exception && $toString)		{			return (string) $error;		}		return $error;	}	/**	 * Return all errors, if any.	 *	 * @return  array  Array of error messages or JErrors.	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function getErrors()	{		return $this->_errors;	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set.	 *	 * @return  mixed  Previous value of the property.	 *	 * @since   11.1	 */	public function set($property, $value = null)	{		$previous = isset($this->$property) ? $this->$property : null;		$this->$property = $value;		return $previous;	}	/**	 * Set the object properties based on a named array/hash.	 *	 * @param   mixed  $properties  Either an associative array or another object.	 *	 * @return  boolean	 *	 * @since   11.1	 *	 * @see     set()	 */	public function setProperties($properties)	{		if (is_array($properties) || is_object($properties))		{			foreach ((array) $properties as $k => $v)			{				// Use the set function which might be overridden.				$this->set($k, $v);			}			return true;		}		return false;	}	/**	 * Add an error message.	 *	 * @param   string  $error  Error message.	 *	 * @return  void	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function setError($error)	{		array_push($this->_errors, $error);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Media Component Manager Model * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaModelManager extends JModelLegacy{	public function getState($property = null, $default = null)	{		static $set;		if (!$set)		{			$input = JFactory::getApplication()->input;			$folder = $input->get('folder', '', 'path');			$this->setState('folder', $folder);			$fieldid = $input->get('fieldid', '');			$this->setState('field.id', $fieldid);			$parent = str_replace("\\", "/", dirname($folder));			$parent = ($parent == '.') ? null : $parent;			$this->setState('parent', $parent);			$set = true;		}		return parent::getState($property, $default);	}	/**	 * Image Manager Popup	 *	 * @param string $listFolder The image directory to display	 * @since 1.5	 */	function getFolderList($base = null)	{		// Get some paths from the request		if (empty($base))		{			$base = COM_MEDIA_BASE;		}		//corrections for windows paths		$base = str_replace(DIRECTORY_SEPARATOR, '/', $base);		$com_media_base_uni = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE);		// Get the list of folders		jimport('joomla.filesystem.folder');		$folders = JFolder::folders($base, '.', true, true);		$document = JFactory::getDocument();		$document->setTitle(JText::_('COM_MEDIA_INSERT_IMAGE'));		// Build the array of select options for the folder list		$options[] = JHtml::_('select.option', "", "/");		foreach ($folders as $folder)		{			$folder		= str_replace($com_media_base_uni, "", str_replace(DIRECTORY_SEPARATOR, '/', $folder));			$value		= substr($folder, 1);			$text		= str_replace(DIRECTORY_SEPARATOR, "/", $folder);			$options[]	= JHtml::_('select.option', $value, $text);		}		// Sort the folder list array		if (is_array($options))		{			sort($options);		}		// Get asset and author id (use integer filter)		$input = JFactory::getApplication()->input;		$asset = $input->get('asset', 0, 'integer');		$author = $input->get('author', 0, 'integer');		// Create the drop-down folder select list		$list = JHtml::_('select.genericlist', $options, 'folderlist', 'class="inputbox" size="1" onchange="ImageManager.setFolder(this.options[this.selectedIndex].value, '.$asset.', '.$author.')" ', 'value', 'text', $base);		return $list;	}	function getFolderTree($base = null)	{		// Get some paths from the request		if (empty($base))		{			$base = COM_MEDIA_BASE;		}		$mediaBase = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE.'/');		// Get the list of folders		jimport('joomla.filesystem.folder');		$folders = JFolder::folders($base, '.', true, true);		$tree = array();		foreach ($folders as $folder)		{			$folder		= str_replace(DIRECTORY_SEPARATOR, '/', $folder);			$name		= substr($folder, strrpos($folder, '/') + 1);			$relative	= str_replace($mediaBase, '', $folder);			$absolute	= $folder;			$path		= explode('/', $relative);			$node		= (object) array('name' => $name, 'relative' => $relative, 'absolute' => $absolute);			$tmp = &$tree;			for ($i = 0, $n = count($path); $i < $n; $i++)			{				if (!isset($tmp['children']))				{					$tmp['children'] = array();				}				if ($i == $n - 1)				{					// We need to place the node					$tmp['children'][$relative] = array('data' => $node, 'children' => array());					break;				}				if (array_key_exists($key = implode('/', array_slice($path, 0, $i + 1)), $tmp['children']))				{					$tmp = &$tmp['children'][$key];				}			}		}		$tree['data'] = (object) array('name' => JText::_('COM_MEDIA_MEDIA'), 'relative' => '', 'absolute' => $base);		return $tree;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// Detect if we have full UTF-8 and unicode PCRE support.if (!defined('JCOMPAT_UNICODE_PROPERTIES')){	define('JCOMPAT_UNICODE_PROPERTIES', (bool) @preg_match('/\pL/u', 'a'));}/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $regex;	/**	 * The regular expression modifiers to use when testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $modifiers;	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  UnexpectedValueException if rule is invalid.	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Check for a valid regex.		if (empty($this->regex))		{			throw new UnexpectedValueException(sprintf('%s has invalid regex.', get_class($this)));		}		// Add unicode property support if available.		if (JCOMPAT_UNICODE_PROPERTIES)		{			$this->modifiers = (strpos($this->modifiers, 'u') !== false) ? $this->modifiers : $this->modifiers . 'u';		}		// Test the value against the regular expression.		if (preg_match(chr(1) . $this->regex . chr(1) . $this->modifiers, $value))		{			return true;		}		return false;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseMysqli is deprecated, use JDatabaseDriverMysqli instead.', JLog::WARNING, 'deprecated');/** * MySQLi database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://php.net/manual/en/book.mysqli.php * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverMysqli instead. */class JDatabaseMysqli extends JDatabaseDriverMysqli{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Token class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerToken{	/**	 * This is the term that will be referenced in the terms table and the	 * mapping tables.	 *	 * @var    string	 * @since  2.5	 */	public $term;	/**	 * The stem is used to match the root term and produce more potential	 * matches when searching the index.	 *	 * @var    string	 * @since  2.5	 */	public $stem;	/**	 * If the token is numeric, it is likely to be short and uncommon so the	 * weight is adjusted to compensate for that situation.	 *	 * @var    boolean	 * @since  2.5	 */	public $numeric;	/**	 * If the token is a common term, the weight is adjusted to compensate for	 * the higher frequency of the term in relation to other terms.	 *	 * @var    boolean	 * @since  2.5	 */	public $common;	/**	 * Flag for phrase tokens.	 *	 * @var    boolean	 * @since  2.5	 */	public $phrase;	/**	 * The length is used to calculate the weight of the token.	 *	 * @var    integer	 * @since  2.5	 */	public $length;	/**	 * The weight is calculated based on token size and whether the token is	 * considered a common term.	 *	 * @var    integer	 * @since  2.5	 */	public $weight;	/**	 * The simple language identifier for the token.	 *	 * @var    string	 * @since  2.5	 */	public $language;	/**	 * Method to construct the token object.	 *	 * @param   mixed   $term    The term as a string for words or an array for phrases.	 * @param   string  $lang    The simple language identifier.	 * @param   string  $spacer  The space separator for phrases. [optional]	 *	 * @since   2.5	 */	public function __construct($term, $lang, $spacer = ' ')	{		$this->language = $lang;		// Tokens can be a single word or an array of words representing a phrase.		if (is_array($term))		{			// Populate the token instance.			$this->term = implode($spacer, $term);			$this->stem = implode($spacer, array_map(array('FinderIndexerHelper', 'stem'), $term, array($lang)));			$this->numeric = false;			$this->common = false;			$this->phrase = true;			$this->length = JString::strlen($this->term);			/*			 * Calculate the weight of the token.			 *			 * 1. Length of the token up to 30 and divide by 30, add 1.			 * 2. Round weight to 4 decimal points.			 */			$this->weight = (($this->length >= 30 ? 30 : $this->length) / 30) + 1;			$this->weight = round($this->weight, 4);		}		else		{			// Populate the token instance.			$this->term = $term;			$this->stem = FinderIndexerHelper::stem($this->term, $lang);			$this->numeric = (is_numeric($this->term) || (bool) preg_match('#^[0-9,.\-\+]+$#', $this->term));			$this->common = $this->numeric ? false : FinderIndexerHelper::isCommon($this->term, $lang);			$this->phrase = false;			$this->length = JString::strlen($this->term);			/*			 * Calculate the weight of the token.			 *			 * 1. Length of the token up to 15 and divide by 15.			 * 2. If common term, divide weight by 8.			 * 3. If numeric, multiply weight by 1.5.			 * 4. Round weight to 4 decimal points.			 */			$this->weight = (($this->length >= 15 ? 15 : $this->length) / 15);			$this->weight = ($this->common == true ? $this->weight / 8 : $this->weight);			$this->weight = ($this->numeric == true ? $this->weight * 1.5 : $this->weight);			$this->weight = round($this->weight, 4);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><span class="nav-header"><?php echo $item->title; ?></span>
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note. It is important to remove spaces between elements.$class = $item->anchor_css ? 'class="'.$item->anchor_css.'" ' : '';$title = $item->anchor_title ? 'title="'.$item->anchor_title.'" ' : '';if ($item->menu_image)	{		$item->params->get('menu_text', 1) ?		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" /><span class="image-title">'.$item->title.'</span> ' :		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" />';}else { $linktype = $item->title;}$flink = $item->flink;$flink = JFilterOutput::ampReplace(htmlspecialchars($flink));switch ($item->browserNav) :	default:	case 0:?><a <?php echo $class; ?>href="<?php echo $flink; ?>" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;	case 1:		// _blank?><a <?php echo $class; ?>href="<?php echo $flink; ?>" target="_blank" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;	case 2:		// window.open		$options = 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,'.$params->get('window_open');			?><a <?php echo $class; ?>href="<?php echo $flink; ?>" onclick="window.open(this.href,'targetWindow','<?php echo $options;?>');return false;" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;endswitch;
<?php/** * @package     Joomla.Administrator * @subpackage  mod_toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$toolbar = JToolbar::getInstance('toolbar')->render('toolbar');require JModuleHelper::getLayoutPath('mod_toolbar', $params->get('layout', 'default'));
<?php/*** PCRE Regular expressions for UTF-8. Note this file is not actually used by* the rest of the library but these regular expressions can be useful to have* available.* @version $Id$* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*///--------------------------------------------------------------------/*** PCRE Pattern to check a UTF-8 string is valid* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*/$UTF8_VALID = '^('.    '[\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.              # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.          # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.   # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.          # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.       # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.           # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.       # plane 16    ')*$';//--------------------------------------------------------------------/*** PCRE Pattern to match single UTF-8 characters* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*/$UTF8_MATCH =    '([\x00-\x7F])'.                          # ASCII (including control chars)    '|([\xC2-\xDF][\x80-\xBF])'.              # non-overlong 2-byte    '|(\xE0[\xA0-\xBF][\x80-\xBF])'.          # excluding overlongs    '|([\xE1-\xEC\xEE\xEF][\x80-\xBF]{2})'.   # straight 3-byte    '|(\xED[\x80-\x9F][\x80-\xBF])'.          # excluding surrogates    '|(\xF0[\x90-\xBF][\x80-\xBF]{2})'.       # planes 1-3    '|([\xF1-\xF3][\x80-\xBF]{3})'.           # planes 4-15    '|(\xF4[\x80-\x8F][\x80-\xBF]{2})';       # plane 16//--------------------------------------------------------------------/*** PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*/$UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$pageClass = $this->params->get('pageclass_sfx');?><div class="newsfeed-category<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->category->title, '', 'com_newsfeeds.category'); ?></h2><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_newsfeeds.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if (!empty($this->children[$this->category->id])&& $this->maxLevel != 0) : ?><div class="cat-children">	<h3><?php echo JText::_('JGLOBAL_SUBCATEGORIES'); ?></h3>	<?php echo $this->loadTemplate('children'); ?></div><?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Login view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersViewLogin extends JViewLegacy{	protected $form;	protected $params;	protected $state;	protected $user;	/**	 * Method to display the view.	 *	 * @param   string	The template file to include	 * @since   1.5	 */	public function display($tpl = null)	{		// Get the view data.		$this->user		= JFactory::getUser();		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->get('params');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$user		= JFactory::getUser();		$login		= $user->get('guest') ? true : false;		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', $login ? JText::_('JLOGIN') : JText::_('JLOGOUT'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Query HTML behavior class for Finder. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */abstract class JHtmlQuery{	/**	 * Method to get the explained (human-readable) search query.	 *	 * @param   FinderIndexerQuery  $query  A FinderIndexerQuery object to explain.	 *	 * @return  mixed  String if there is data to explain, null otherwise.	 *	 * @since   2.5	 */	public static function explained(FinderIndexerQuery $query)	{		$parts = array();		// Process the required tokens.		foreach ($query->included as $token)		{			if ($token->required && (!isset($token->derived) || $token->derived == false))			{				$parts[] = '<span class="query-required">' . JText::sprintf('COM_FINDER_QUERY_TOKEN_REQUIRED', $token->term) . '</span>';			}		}		// Process the optional tokens.		foreach ($query->included as $token)		{			if (!$token->required && (!isset($token->derived) || $token->derived == false))			{				$parts[] = '<span class="query-optional">' . JText::sprintf('COM_FINDER_QUERY_TOKEN_OPTIONAL', $token->term) . '</span>';			}		}		// Process the excluded tokens.		foreach ($query->excluded as $token)		{			if (!isset($token->derived) || $token->derived == false)			{				$parts[] = '<span class="query-excluded">' . JText::sprintf('COM_FINDER_QUERY_TOKEN_EXCLUDED', $token->term) . '</span>';			}		}		// Process the start date.		if ($query->date1)		{			$date = JFactory::getDate($query->date1)->format(JText::_('DATE_FORMAT_LC'));			$parts[] = '<span class="query-start-date">' . JText::sprintf('COM_FINDER_QUERY_START_DATE', $query->when1, $date) . '</span>';		}		// Process the end date.		if ($query->date2)		{			$date = JFactory::getDate($query->date2)->format(JText::_('DATE_FORMAT_LC'));			$parts[] = '<span class="query-end-date">' . JText::sprintf('COM_FINDER_QUERY_END_DATE', $query->when2, $date) . '</span>';		}		// Process the taxonomy filters.		if (!empty($query->filters))		{			// Get the filters in the request.			$t = JFactory::getApplication()->input->request->get('t', array(), 'array');			// Process the taxonomy branches.			foreach ($query->filters as $branch => $nodes)			{				// Process the taxonomy nodes.				$lang = JFactory::getLanguage();				foreach ($nodes as $title => $id)				{					// Translate the title for Types					$key = FinderHelperLanguage::branchPlural($title);					if ($lang->hasKey($key))					{						$title = JText::_($key);					}					// Don't include the node if it is not in the request.					if (!in_array($id, $t))					{						continue;					}					// Add the node to the explanation.					$parts[] = '<span class="query-taxonomy">' . JText::sprintf('COM_FINDER_QUERY_TAXONOMY_NODE', $title, JText::_(FinderHelperLanguage::branchSingular($branch))) . '</span>';				}			}		}		// Build the interpreted query.		return count($parts) ? JText::sprintf('COM_FINDER_QUERY_TOKEN_INTERPRETED', implode(JText::_('COM_FINDER_QUERY_TOKEN_GLUE'), $parts)) : null;	}	/**	 * Method to get the suggested search query.	 *	 * @param   FinderIndexerQuery  $query  A FinderIndexerQuery object.	 *	 * @return  mixed  String if there is a suggestion, false otherwise.	 *	 * @since   2.5	 */	public static function suggested(FinderIndexerQuery $query)	{		$suggested = false;		// Check if the query input is empty.		if (empty($query->input))		{			return $suggested;		}		// Check if there were any ignored or included keywords.		if (count($query->ignored) || count($query->included))		{			$suggested = $query->input;			// Replace the ignored keyword suggestions.			foreach (array_reverse($query->ignored) as $token)			{				if (isset($token->suggestion))				{					$suggested = str_replace($token->term, $token->suggestion, $suggested);				}			}			// Replace the included keyword suggestions.			foreach (array_reverse($query->included) as $token)			{				if (isset($token->suggestion))				{					$suggested = str_replace($token->term, $token->suggestion, $suggested);				}			}			// Check if we made any changes.			if ($suggested == $query->input)			{				$suggested = false;			}		}		return $suggested;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');$this->subtemplatename = 'items';echo JLayoutHelper::render('joomla.content.category_default', $this);
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component HTML Helper * * @static * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class JHtmlIcon{	public static function email($contact, $params, $attribs = array())	{		require_once JPATH_SITE . '/components/com_mailto/helpers/mailto.php';		$uri	= JURI::getInstance();		$base	= $uri->toString(array('scheme', 'host', 'port'));		$link	= $base . JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid), false);		$url	= 'index.php?option=com_mailto&tmpl=component&link='.MailToHelper::addLink($link);		$status = 'width=400,height=350,menubar=yes,resizable=yes';		if ($params->get('show_icons'))		{			$text = JHtml::_('image', 'system/emailButton.png', JText::_('JGLOBAL_EMAIL'), null, true);		}		else		{			$text = '&#160;'.JText::_('JGLOBAL_EMAIL');		}		$attribs['title']	= JText::_('JGLOBAL_EMAIL');		$attribs['onclick'] = "window.open(this.href,'win2','".$status."'); return false;";		$output = JHtml::_('link', JRoute::_($url), $text, $attribs);		return $output;	}	public static function print_popup($article, $params, $attribs = array())	{		$url  = ContentHelperRoute::getContactRoute($contact->slug, $contact->catid);		$url .= '&tmpl=component&print=1&layout=default&page='.@ $request->limitstart;		$status = 'status=no,toolbar=no,scrollbars=yes,titlebar=no,menubar=no,resizable=yes,width=640,height=480,directories=no,location=no';		// checks template image directory for image, if non found default are loaded		if ($params->get('show_icons'))		{			$text = JHtml::_('image', 'system/printButton.png', JText::_('JGLOBAL_PRINT'), null, true);		}		else		{			$text = JText::_('JGLOBAL_ICON_SEP') .'&#160;'. JText::_('JGLOBAL_PRINT') .'&#160;'. JText::_('JGLOBAL_ICON_SEP');		}		$attribs['title']	= JText::_('JGLOBAL_PRINT');		$attribs['onclick'] = "window.open(this.href,'win2','".$status."'); return false;";		$attribs['rel']		= 'nofollow';		return JHtml::_('link', JRoute::_($url), $text, $attribs);	}	public static function print_screen($contact, $params, $attribs = array())	{		// checks template image directory for image, if non found default are loaded		if ($params->get('show_icons'))		{			$text = JHtml::_('image', 'system/printButton.png', JText::_('JGLOBAL_PRINT'), null, true);		}		else		{			$text = JText::_('JGLOBAL_ICON_SEP') .'&#160;'. JText::_('JGLOBAL_PRINT') .'&#160;'. JText::_('JGLOBAL_ICON_SEP');		}		return '<a href="#" onclick="window.print();return false;">'.$text.'</a>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Statistics view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewStatistics extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load the view data.		$this->data		= $this->get('Data');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;// Activate the highlighter if enabled.if (!empty($this->query->highlight) && $this->params->get('highlight_terms', 1)){	JHtml::_('behavior.highlighter', $this->query->highlight);}// Get the application object.$app = JFactory::getApplication();// Display the suggested search if it is different from the current search.if (($this->suggested && $this->params->get('show_suggested_query', 1)) || ($this->explained && $this->params->get('show_explained_query', 1))):?>	<div id="search-query-explained">		<?php		// Display the suggested search query.		if ($this->suggested && $this->params->get('show_suggested_query', 1))		{			// Replace the base query string with the suggested query string.			$uri = JUri::getInstance($this->query->toURI());			$uri->setVar('q', $this->suggested);			// Compile the suggested query link.			$link	= '<a href="' . JRoute::_($uri->toString(array('path', 'query'))) . '">'					. $this->escape($this->suggested)					. '</a>';			echo JText::sprintf('COM_FINDER_SEARCH_SIMILAR', $link);		}		// Display the explained search query.		elseif ($this->explained && $this->params->get('show_explained_query', 1))		{			echo $this->explained;		}		?>	</div><?phpendif;if ($this->total == 0):?>	<div id="search-result-empty">		<h2><?php echo JText::_('COM_FINDER_SEARCH_NO_RESULTS_HEADING'); ?></h2>		<?php if ($app->getLanguageFilter()) : ?>		<p><?php echo JText::sprintf('COM_FINDER_SEARCH_NO_RESULTS_BODY_MULTILANG', $this->escape($this->query->input)); ?></p>		<?php else : ?>		<p><?php echo JText::sprintf('COM_FINDER_SEARCH_NO_RESULTS_BODY', $this->escape($this->query->input)); ?></p>		<?php endif; ?>	</div><?phpelse:	// Prepare the pagination string.  Results X - Y of Z	$start	= (int) $this->pagination->get('limitstart') + 1;	$total	= (int) $this->pagination->get('total');	$limit	= (int) $this->pagination->get('limit') * $this->pagination->pagesTotal;	$limit	= (int) ($limit > $total ? $total : $limit);	$pages	= JText::sprintf('COM_FINDER_SEARCH_RESULTS_OF', $start, $limit, $total);?>	<br id="highlighter-start" />	<ul class="search-results<?php echo $this->pageclass_sfx; ?> list-striped">		<?php		for ($i = 0, $n = count($this->results); $i < $n; $i++):			$this->result	= &$this->results[$i];			$layout			= $this->getLayoutFile($this->result->layout);		?>		<?php echo $this->loadTemplate($layout); ?>		<?php		endfor;		?>	</ul>	<br id="highlighter-end" />	<div class="search-pagination">		<div class="pagination">			<?php echo $this->pagination->getPagesLinks(); ?>		</div>		<div class="search-pages-counter">			<?php echo $pages; ?>		</div>	</div><?phpendif;
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/route.php';$controller = JControllerLegacy::getInstance('Contact');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Exporter Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */abstract class JDatabaseExporter{}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_title * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (!empty($title)) : ?>	<?php echo $title; ?><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  mod_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('FinderHelperRoute', JPATH_SITE . '/components/com_finder/helpers/route.php');JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');// Include the helper.require_once __DIR__ . '/helper.php';if (!defined('FINDER_PATH_INDEXER')){	define('FINDER_PATH_INDEXER', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer');}JLoader::register('FinderIndexerQuery', FINDER_PATH_INDEXER . '/query.php');// Check for OpenSearchif ($params->get('opensearch', 1)){/*This code intentionally commented	$doc = JFactory::getDocument();	$app = JFactory::getApplication();	$ostitle = $params->get('opensearch_title', JText::_('MOD_FINDER_SEARCHBUTTON_TEXT') . ' ' . $app->getCfg('sitename'));	$doc->addHeadLink(						JURI::getInstance()->toString(array('scheme', 'host', 'port')) . JRoute::_('&option=com_finder&format=opensearch'),						'search', 'rel', array('title' => $ostitle, 'type' => 'application/opensearchdescription+xml')					);*/}// Initialize module parameters.$params->def('field_size', 20);// Get the route.$route = FinderHelperRoute::getSearchRoute($params->get('searchfilter', null));// Load component language file.FinderHelperLanguage::loadComponentLanguage();// Load plug-in language files.FinderHelperLanguage::loadPluginLanguage();// Get Smart Search query object.$query = modFinderHelper::getQuery($params);require JModuleHelper::getLayoutPath('mod_finder', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (count($this->images) > 0 || count($this->folders) > 0) { ?><ul class="manager thumbnails">	<?php for ($i = 0, $n = count($this->folders); $i < $n; $i++) :		$this->setFolder($i);		echo $this->loadTemplate('folder');	endfor; ?>	<?php for ($i = 0, $n = count($this->images); $i < $n; $i++) :		$this->setImage($i);		echo $this->loadTemplate('image');	endfor; ?></ul><?php } else { ?>	<div id="media-noimages">		<div class="alert alert-info"><?php echo JText::_('COM_MEDIA_NO_IMAGES_FOUND'); ?></div>	</div><?php } ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Search master display controller. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.6 */class SearchController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'searches';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/search.php';		// Load the submenu.		SearchHelper::addSubmenu($this->input->get('view', 'searches'));		parent::display();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if ($this->params->get('presentation_style') == 'sliders'):?><div class="accordion-group">	<div class="accordion-heading">		<a class="accordion-toggle" data-toggle="collapse" data-parent="accordionContact" href="#display-links">		<?php echo JText::_('COM_CONTACT_LINKS');?>		</a>	</div>	<div id="display-links" class="accordion-body collapse">		<div class="accordion-inner"><?php endif; ?><?php if  ($this->params->get('presentation_style') == 'plain'):?><?php echo '<h3>'. JText::_('JGLOBAL_ARTICLES').'</h3>'; ?><?php endif; ?>			<div class="contact-links">				<ul class="nav nav-list">					<?php					foreach (range('a', 'e') as $char) :// letters 'a' to 'e'						$link = $this->contact->params->get('link'.$char);						$label = $this->contact->params->get('link'.$char.'_name');						if (!$link) :							continue;						endif;						// Add 'http://' if not present						$link = (0 === strpos($link, 'http')) ? $link : 'http://'.$link;						// If no label is present, take the link						$label = ($label) ? $label : $link;						?>						<li>							<a href="<?php echo $link; ?>">							    <?php echo $label; ?>							</a>						</li>					<?php endforeach; ?>				</ul>			</div><?php if ($this->params->get('presentation_style') == 'sliders'):?>		</div>	</div></div><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="createdby">				<?php $author = $displayData['item']->author; ?>				<?php $author = ($displayData['item']->created_by_alias ? $displayData['item']->created_by_alias : $author); ?>				<?php if (!empty($displayData['item']->contactid ) && $displayData['params']->get('link_author') == true) : ?>					<?php					echo JText::sprintf('COM_CONTENT_WRITTEN_BY',						JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id='.$displayData['item']->contactid), $author)					); ?>				<?php else :?>					<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>				<?php endif; ?>			</dd>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PDO Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseQueryPdo extends JDatabaseQuery{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Snowball stemmer class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerStemmerSnowball extends FinderIndexerStemmer{	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	public function stem($token, $lang)	{		// Language to use if All is specified.		static $defaultLang = '';		// If language is All then try to get site default language.		if ($lang == '*' && $defaultLang == '')		{			$languages = JLanguageHelper::getLanguages();			$defaultLang = isset($languages[0]->sef) ? $languages[0]->sef : '*';			$lang = $defaultLang;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Get the stem function from the language string.			switch ($lang)			{				// Danish stemmer.				case 'da':					$function = 'stem_danish';					break;				// German stemmer.				case 'de':					$function = 'stem_german';					break;				// English stemmer.				default:				case 'en':					$function = 'stem_english';					break;				// Spanish stemmer.				case 'es':					$function = 'stem_spanish';					break;				// Finnish stemmer.				case 'fi':					$function = 'stem_finnish';					break;				// French stemmer.				case 'fr':					$function = 'stem_french';					break;				// Hungarian stemmer.				case 'hu':					$function = 'stem_hungarian';					break;				// Italian stemmer.				case 'it':					$function = 'stem_italian';					break;				// Norwegian stemmer.				case 'nb':					$function = 'stem_norwegian';					break;				// Dutch stemmer.				case 'nl':					$function = 'stem_dutch';					break;				// Portuguese stemmer.				case 'pt':					$function = 'stem_portuguese';					break;				// Romanian stemmer.				case 'ro':					$function = 'stem_romanian';					break;				// Russian stemmer.				case 'ru':					$function = 'stem_russian_unicode';					break;				// Swedish stemmer.				case 'sv':					$function = 'stem_swedish';					break;				// Turkish stemmer.				case 'tr':					$function = 'stem_turkish_unicode';					break;			}			// Stem the word if the stemmer method exists.			$this->cache[$lang][$token] = function_exists($function) ? $function($token) : $token;		}		return $this->cache[$lang][$token];	}}
<?php/** * @package     Joomla.Site * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('CategoriesHelper', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/categories.php');/** * Category Component Association Helper * * @package     Joomla.Site * @subpackage  com_categories * @since       3.0 */abstract class CategoryHelperAssociation{	public static $category_association = true;	/**	 * Method to get the associations for a given category	 *	 * @param   integer  $id         Id of the item	 * @param   string   $extension  Name of the component	 *	 * @return  array   Array of associations for the component categories	 *	 * @since  3.0	 */	public static function getCategoryAssociations($id = 0, $extension = 'com_content')	{		$return = array();		if ($id)		{			// Load route helper			jimport('helper.route', JPATH_COMPONENT_SITE);			$helperClassname = ucfirst(substr($extension, 4)) . 'HelperRoute';			$associations = CategoriesHelper::getAssociations($id, $extension);			foreach ($associations as $tag => $item)			{				if (class_exists($helperClassname) && is_callable(array($helperClassname, 'getCategoryRoute')))				{					$return[$tag] = $helperClassname::getCategoryRoute($item, $tag);				}				else				{					$return[$tag] = 'index.php?option='.$extension.'&view=category&id='.$item;				}			}		}		return $return;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML utility class for building a dropdown menu * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlDropdown{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * @var    string  HTML markup for the dropdown list	 * @since  3.0	 */	protected static $dropDownList = null;	/**	 * Method to inject needed script	 *	 * @return  void	 *	 * @since   3.0	 */	public static function init()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Depends on Bootstrap		JHtml::_('bootstrap.framework');		JFactory::getDocument()->addScriptDeclaration("			(function($){				$(document).ready(function (){					$('.has-context')					.mouseenter(function (){						$('.btn-group',$(this)).show();					})					.mouseleave(function (){						$('.btn-group',$(this)).hide();						$('.btn-group',$(this)).removeClass('open');					});					contextAction =function (cbId, task)					{						$('input[name=\"cid[]\"]').removeAttr('checked');						$('#' + cbId).attr('checked','checked');						Joomla.submitbutton(task);					}				});			})(jQuery);			"		);		// Set static array		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to start a new dropdown menu	 *	 * @return  void	 *	 * @since   3.0	 */	public static function start()	{		// Only start once		if (isset(self::$loaded[__METHOD__]) && self::$loaded[__METHOD__] == true)		{			return;		}		$dropDownList = '<div class="btn-group" style="margin-left:6px;display:none">							<a href="#" data-toggle="dropdown" class="dropdown-toggle btn btn-mini">								<span class="caret"></span>							</a>							<ul class="dropdown-menu">';		self::$dropDownList = $dropDownList;		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to render current dropdown menu	 *	 * @return  string  HTML markup for the dropdown list	 *	 * @since   3.0	 */	public static function render()	{		$dropDownList = self::$dropDownList;		$dropDownList .= '</ul></div>';		self::$dropDownList	= null;		self::$loaded['JHtmlDropdown::start'] = false;		return $dropDownList;	}	/**	 * Append an edit item to the current dropdown menu	 *	 * @param   integer  $id          Record ID	 * @param   string   $prefix      Task prefix	 * @param   string   $customLink  The custom link if dont use default Joomla action format	 *	 * @return  void	 *	 * @since   3.0	 */	public static function edit($id, $prefix = '', $customLink = '')	{		self::start();		if (!$customLink)		{			$option = JFactory::getApplication()->input->getCmd('option');			$link = 'index.php?option=' . $option;		}		else		{			$link = $customLink;		}		$link .= '&task=' . $prefix . 'edit&id=' . $id;		$link = JRoute::_($link);		self::addCustomItem(JText::_('JACTION_EDIT'), $link);		return;	}	/**	 * Append a publish item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function publish($checkboxId, $prefix = '')	{		$task = $prefix . 'publish';		self::addCustomItem(JText::_('JTOOLBAR_PUBLISH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an unpublish item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function unpublish($checkboxId, $prefix = '')	{		$task = $prefix . 'unpublish';		self::addCustomItem(JText::_('JTOOLBAR_UNPUBLISH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append a featured item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function featured($checkboxId, $prefix = '')	{		$task = $prefix . 'featured';		self::addCustomItem(JText::_('JFEATURED'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an unfeatured item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function unfeatured($checkboxId, $prefix = '')	{		$task = $prefix . 'unfeatured';		self::addCustomItem(JText::_('JUNFEATURED'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an archive item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function archive($checkboxId, $prefix = '')	{		$task = $prefix . 'archive';		self::addCustomItem(JText::_('JTOOLBAR_ARCHIVE'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an unarchive item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function unarchive($checkboxId, $prefix = '')	{		$task = $prefix . 'unpublish';		self::addCustomItem(JText::_('JTOOLBAR_UNARCHIVE'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append a trash item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function trash($checkboxId, $prefix = '')	{		$task = $prefix . 'trash';		self::addCustomItem(JText::_('JTOOLBAR_TRASH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an untrash item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function untrash($checkboxId, $prefix = '')	{		$task = $prefix . 'publish';		self::addCustomItem(JText::_('JTOOLBAR_UNTRASH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append a checkin item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function checkin($checkboxId, $prefix = '')	{		$task = $prefix . 'checkin';		self::addCustomItem(JText::_('JTOOLBAR_CHECKIN'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Writes a divider between dropdown items	 *	 * @return  void	 *	 * @since   3.0	 */	public static function divider()	{		self::$dropDownList .= '<li class="divider"></li>';		return;	}	/**	 * Append a custom item to current dropdown menu	 *	 * @param   string   $label           The label of item	 * @param   string   $link            The link of item	 * @param   string   $linkAttributes  Custom link attributes	 * @param   string   $className       Class name of item	 * @param   boolean  $ajaxLoad        True if using ajax load when item clicked	 * @param   string   $jsCallBackFunc  Javascript function name, called when ajax load successfully	 *	 * @return  void	 *	 * @since   3.0	 */	public static function addCustomItem($label, $link = 'javascript:void(0)', $linkAttributes = '', $className = '', $ajaxLoad = false,		$jsCallBackFunc = null)	{		self::start();		if ($ajaxLoad)		{			$href = ' href = "javascript:void(0)" onclick="loadAjax(\'' . $link . '\', \'' . $jsCallBackFunc . '\')"';		}		else		{			$href = ' href = "' . $link . '" ';		}		$dropDownList = self::$dropDownList;		$dropDownList .= '<li class="' . $className . '"><a ' . $linkAttributes . $href . ' >';		$dropDownList .= $label;		$dropDownList .= '</a></li>';		self::$dropDownList = $dropDownList;		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tracks list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerTracks extends JControllerLegacy{	/**	 * @var		string	The context for persistent state.	 * @since   1.6	 */	protected $context = 'com_banners.tracks';	/**	 * Proxy for getModel.	 *	 * @param   string	$name	The name of the model.	 * @param   string	$prefix	The prefix for the model class name.	 *	 * @return  JModel	 * @since   1.6	 */	public function getModel($name = 'Tracks', $prefix = 'BannersModel', $config = array())	{		$model = parent::getModel($name, $prefix, array('ignore_request' => true));		return $model;	}	/**	 * Display method for the raw track data.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 * @todo	This should be done as a view, not here!	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document	= JFactory::getDocument();		$vName		= 'tracks';		$vFormat	= 'raw';		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			// Get the model for the view.			$model = $this->getModel($vName);			// Load the filter state.			$app = JFactory::getApplication();			$type = $app->getUserState($this->context.'.filter.type');			$model->setState('filter.type', $type);			$begin = $app->getUserState($this->context.'.filter.begin');			$model->setState('filter.begin', $begin);			$end = $app->getUserState($this->context.'.filter.end');			$model->setState('filter.end', $end);			$categoryId = $app->getUserState($this->context.'.filter.category_id');			$model->setState('filter.category_id', $categoryId);			$clientId = $app->getUserState($this->context.'.filter.client_id');			$model->setState('filter.client_id', $clientId);			$model->setState('list.limit', 0);			$model->setState('list.start', 0);			$form = JRequest::getVar('jform');			$model->setState('basename', $form['basename']);			$model->setState('compressed', $form['compressed']);			$config = JFactory::getConfig();			$cookie_domain = $config->get('cookie_domain', '');			$cookie_path = $config->get('cookie_path', '/');			setcookie(JApplication::getHash($this->context.'.basename'), $form['basename'], time() + 365 * 86400, $cookie_path, $cookie_domain);			setcookie(JApplication::getHash($this->context.'.compressed'), $form['compressed'], time() + 365 * 86400, $cookie_path, $cookie_domain);			// Push the model into the view (as default).			$view->setModel($model, true);			// Push document object into the view.			$view->document = $document;			$view->display();		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * OpenSearch class, provides an easy interface to display an OpenSearch document * * @package     Joomla.Platform * @subpackage  Document * @see         http://www.opensearch.org/ * @since       11.1 */class JDocumentOpensearch extends JDocument{	/**	 * ShortName element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	private $_shortName = "";	/**	 * Images collection	 *	 * optional	 *	 * @var    object	 * @since  11.1	 */	private $_images = array();	/**	 * The url collection	 *	 * @var    array	 * @since  11.1	 */	private $_urls = array();	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since  11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set document type		$this->_type = 'opensearch';		// Set mime type		$this->_mime = 'application/opensearchdescription+xml';		// Add the URL for self updating		$update = new JOpenSearchUrl;		$update->type = 'application/opensearchdescription+xml';		$update->rel = 'self';		$update->template = JRoute::_(JURI::getInstance());		$this->addUrl($update);		// Add the favicon as the default image		// Try to find a favicon by checking the template and root folder		$app = JFactory::getApplication();		$dirs = array(JPATH_THEMES . '/' . $app->getTemplate(), JPATH_BASE);		foreach ($dirs as $dir)		{			if (file_exists($dir . '/favicon.ico'))			{				$path = str_replace(JPATH_BASE . '/', '', $dir);				$path = str_replace('\\', '/', $path);				$favicon = new JOpenSearchImage;				$favicon->data = JURI::base() . $path . '/favicon.ico';				$favicon->height = '16';				$favicon->width = '16';				$favicon->type = 'image/vnd.microsoft.icon';				$this->addImage($favicon);				break;			}		}	}	/**	 * Render the document	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   11.1	 */	public function render($cache = false, $params = array())	{		$xml = new DOMDocument('1.0', 'utf-8');		if (defined('JDEBUG') && JDEBUG)		{			$xml->formatOutput = true;		}		// The OpenSearch Namespace		$osns = 'http://a9.com/-/spec/opensearch/1.1/';		// Create the root element		$elOs = $xml->createElementNS($osns, 'OpenSearchDescription');		$elShortName = $xml->createElementNS($osns, 'ShortName');		$elShortName->appendChild($xml->createTextNode(htmlspecialchars($this->_shortName)));		$elOs->appendChild($elShortName);		$elDescription = $xml->createElementNS($osns, 'Description');		$elDescription->appendChild($xml->createTextNode(htmlspecialchars($this->description)));		$elOs->appendChild($elDescription);		// Always set the accepted input encoding to UTF-8		$elInputEncoding = $xml->createElementNS($osns, 'InputEncoding');		$elInputEncoding->appendChild($xml->createTextNode('UTF-8'));		$elOs->appendChild($elInputEncoding);		foreach ($this->_images as $image)		{			$elImage = $xml->createElementNS($osns, 'Image');			$elImage->setAttribute('type', $image->type);			$elImage->setAttribute('width', $image->width);			$elImage->setAttribute('height', $image->height);			$elImage->appendChild($xml->createTextNode(htmlspecialchars($image->data)));			$elOs->appendChild($elImage);		}		foreach ($this->_urls as $url)		{			$elUrl = $xml->createElementNS($osns, 'Url');			$elUrl->setAttribute('type', $url->type);			// Results is the default value so we don't need to add it			if ($url->rel != 'results')			{				$elUrl->setAttribute('rel', $url->rel);			}			$elUrl->setAttribute('template', $url->template);			$elOs->appendChild($elUrl);		}		$xml->appendChild($elOs);		parent::render();		return $xml->saveXML();	}	/**	 * Sets the short name	 *	 * @param   string  $name  The name.	 *	 * @return  JDocumentOpensearch instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setShortName($name)	{		$this->_shortName = $name;		return $this;	}	/**	 * Adds an URL to the OpenSearch description.	 *	 * @param   JOpenSearchUrl  $url  The url to add to the description.	 *	 * @return  JDocumentOpensearch instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addUrl(JOpenSearchUrl $url)	{		$this->_urls[] = $url;		return $this;	}	/**	 * Adds an image to the OpenSearch description.	 *	 * @param   JOpenSearchImage  $image  The image to add to the description.	 *	 * @return  JDocumentOpensearch instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addImage(JOpenSearchImage $image)	{		$this->_images[] = $image;		return $this;	}}/** * JOpenSearchUrl is an internal class that stores the search URLs for the OpenSearch description * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JOpenSearchUrl{	/**	 * Type item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $type = 'text/html';	/**	 * Rel item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $rel = 'results';	/**	 * Template item element. Has to contain the {searchTerms} parameter to work.	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $template;}/** * JOpenSearchImage is an internal class that stores Images for the OpenSearch Description * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JOpenSearchImage{	/**	 * The images MIME type	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $type = "";	/**	 * URL of the image or the image as base64 encoded value	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $data = "";	/**	 * The image's width	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $width;	/**	 * The image's height	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $height;}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Maps embed class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleEmbedMaps extends JGoogleEmbed{	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $http;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Google options object	 * @param   JURI       $uri      URL of the page being rendered	 * @param   JHttp      $http     Http client for geocoding requests	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JURI $uri = null, JHttp $http = null)	{		parent::__construct($options = null, $uri = null);		$this->http = $http ? $http : new JHttp($this->options);	}	/**	 * Method to get the API key	 *	 * @return  string  The Google Maps API key	 *	 * @since   12.3	 */	public function getKey()	{		return $this->getOption('key');	}	/**	 * Method to set the API key	 *	 * @param   string  $key  The Google Maps API key	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setKey($key)	{		$this->setOption('key', $key);		return $this;	}	/**	 * Method to get the id of the map div	 *	 * @return  string  The ID	 *	 * @since   12.3	 */	public function getMapID()	{		return $this->getOption('mapid') ? $this->getOption('mapid') : 'map_canvas';	}	/**	 * Method to set the map div id	 *	 * @param   string  $id  The ID	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setMapID($id)	{		$this->setOption('mapid', $id);		return $this;	}	/**	 * Method to get the class of the map div	 *	 * @return  string  The class	 *	 * @since   12.3	 */	public function getMapClass()	{		return $this->getOption('mapclass') ? $this->getOption('mapclass') : '';	}	/**	 * Method to set the map div class	 *	 * @param   string  $class  The class	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setMapClass($class)	{		$this->setOption('mapclass', $class);		return $this;	}	/**	 * Method to get the style of the map div	 *	 * @return  string  The style	 *	 * @since   12.3	 */	public function getMapStyle()	{		return $this->getOption('mapstyle') ? $this->getOption('mapstyle') : '';	}	/**	 * Method to set the map div style	 *	 * @param   string  $style  The style	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setMapStyle($style)	{		$this->setOption('mapstyle', $style);		return $this;	}	/**	 * Method to get the map type setting	 *	 * @return  string  The class	 *	 * @since   12.3	 */	public function getMapType()	{		return $this->getOption('maptype') ? $this->getOption('maptype') : 'ROADMAP';	}	/**	 * Method to set the map type ()	 *	 * @param   string  $type  Valid types are ROADMAP, SATELLITE, HYBRID, and TERRAIN	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setMapType($type)	{		$this->setOption('maptype', strtoupper($type));		return $this;	}	/**	 * Method to get additional map options	 *	 * @return  string  The options	 *	 * @since   12.3	 */	public function getAdditionalMapOptions()	{		return $this->getOption('mapoptions') ? $this->getOption('mapoptions') : array();	}	/**	 * Method to add additional map options	 *	 * @param   array  $options  Additional map options	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setAdditionalMapOptions($options)	{		$this->setOption('mapoptions', $options);		return $this;	}	/**	 * Method to get additional map options	 *	 * @return  string  The options	 *	 * @since   12.3	 */	public function getAdditionalJavascript()	{		return $this->getOption('extrascript') ? $this->getOption('extrascript') : '';	}	/**	 * Method to add additional javascript	 *	 * @param   array  $script  Additional javascript	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setAdditionalJavascript($script)	{		$this->setOption('extrascript', $script);		return $this;	}	/**	 * Method to get the zoom	 *	 * @return  int  The zoom level	 *	 * @since   12.3	 */	public function getZoom()	{		return $this->getOption('zoom') ? $this->getOption('zoom') : 0;	}	/**	 * Method to set the map zoom	 *	 * @param   int  $zoom  Zoom level (0 is whole world)	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setZoom($zoom)	{		$this->setOption('zoom', $zoom);		return $this;	}	/**	 * Method to set the center of the map	 *	 * @return  mixed  A latitude longitude array or an address string	 *	 * @since   12.3	 */	public function getCenter()	{		return $this->getOption('mapcenter') ? $this->getOption('mapcenter') : array(0, 0);	}	/**	 * Method to set the center of the map	 *	 * @param   mixed  $location       A latitude/longitude array or an address string	 * @param   mixed  $title          Title of marker or false for no marker	 * @param   array  $markeroptions  Options for marker	 *	 * @return  JGoogleEmbedMaps  The latitude/longitude of the center or false on failure	 *	 * @since   12.3	 */	public function setCenter($location, $title = true, $markeroptions = array())	{		if ($title)		{			$title = is_string($title) ? $title : null;			if (!$marker = $this->addMarker($location, $title, $markeroptions))			{				return false;			}			$location = $marker['loc'];		}		elseif (is_string($location))		{			$geocode = $this->geocodeAddress($location);			if (!$geocode)			{				return false;			}			$location = $geocode['geometry']['location'];			$location = array_values($location);		}		$this->setOption('mapcenter', $location);		return $this;	}	/**	 * Add a marker to the map	 *	 * @param   mixed  $location  A latitude longitude array or an address string	 * @param   mixed  $title     The hover-text for the marker	 * @param   array  $options   Options for marker	 *	 * @return  mixed  The marker or false on failure	 *	 * @since   12.3	 */	public function addMarker($location, $title = null, $options = array())	{		if (is_string($location))		{			if (!$title)			{				$title = $location;			}			$geocode = $this->geocodeAddress($location);			if (!$geocode)			{				return false;			}			$location = $geocode['geometry']['location'];		}		elseif (!$title)		{			$title = implode(', ', $location);		}		$location = array_values($location);		$marker = array('loc' => $location, 'title' => $title, 'options' => $options);		$markers = $this->listMarkers();		$markers[] = $marker;		$this->setOption('markers', $markers);		return $marker;	}	/**	 * List the markers added to the map	 *	 * @return  array  A list of markers	 *	 * @since   12.3	 */	public function listMarkers()	{		return $this->getOption('markers') ? $this->getOption('markers') : array();	}	/**	 * Delete a marker from the map	 *	 * @param   int  $index  Index of marker to delete (defaults to last added marker)	 *	 * @return  array The latitude/longitude of the deleted marker	 *	 * @since   12.3	 */	public function deleteMarker($index = null)	{		$markers = $this->listMarkers();		if ($index === null)		{			$index = count($markers) - 1;		}		if ($index >= count($markers) || $index < 0)		{			throw new OutOfBoundsException('Marker index out of bounds.');		}		$marker = $markers[$index];		unset($markers[$index]);		$markers = array_values($markers);		$this->setOption('markers', $markers);		return $marker;	}	/**	 * Checks if the javascript is set to be asynchronous	 *	 * @return  boolean  True if asynchronous	 *	 * @since   12.3	 */	public function isAsync()	{		return $this->getOption('async') === null ? true : $this->getOption('async');	}	/**	 * Load javascript asynchronously	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function useAsync()	{		$this->setOption('async', true);		return $this;	}	/**	 * Load javascript synchronously	 *	 * @return  JGoogleEmbedAMaps  The object for method chaining	 *	 * @since   12.3	 */	public function useSync()	{		$this->setOption('async', false);		return $this;	}	/**	 * Method to get callback function for async javascript loading	 *	 * @return  string  The ID	 *	 * @since   12.3	 */	public function getAsyncCallback()	{		return $this->getOption('callback') ? $this->getOption('callback') : 'initialize';	}	/**	 * Method to set the callback function for async javascript loading	 *	 * @param   string  $callback  The callback function name	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setAsyncCallback($callback)	{		$this->setOption('callback', $callback);		return $this;	}	/**	 * Checks if a sensor is set to be required	 *	 * @return  boolean  True if asynchronous	 *	 * @since   12.3	 */	public function hasSensor()	{		return $this->getOption('sensor') === null ? false : $this->getOption('sensor');	}	/**	 * Require access to sensor data	 *	 * @return  JGoogleEmbedMaps  The object for method chaining	 *	 * @since   12.3	 */	public function useSensor()	{		$this->setOption('sensor', true);		return $this;	}	/**	 * Don't require access to sensor data	 *	 * @return  JGoogleEmbedAMaps  The object for method chaining	 *	 * @since   12.3	 */	public function noSensor()	{		$this->setOption('sensor', false);		return $this;	}	/**	 * Checks how the script should be loaded	 *	 * @return  string  Autoload type (onload, jquery, mootools, or false)	 *	 * @since   12.3	 */	public function getAutoload()	{		return $this->getOption('autoload') ? $this->getOption('autoload') : 'false';	}	/**	 * Automatically add the callback to the window	 *	 * @param   string  $type  The method to add the callback (options are onload, jquery, mootools, and false)	 *	 * @return  JGoogleEmbedAMaps  The object for method chaining	 *	 * @since   12.3	 */	public function setAutoload($type = 'onload')	{		$this->setOption('autoload', $type);		return $this;	}	/**	 * Get code to load Google Maps javascript	 *	 * @return  string  Javascript code	 *	 * @since   12.3	 */	public function getHeader()	{		if (!$this->getOption('key'))		{			throw new UnexpectedValueException('A Google Maps API key is required.');		}		$zoom = $this->getZoom();		$center = $this->getCenter();		$maptype = $this->getMapType();		$id = $this->getMapID();		$scheme = $this->isSecure() ? 'https' : 'http';		$key = $this->getKey();		$sensor = $this->hasSensor() ? 'true' : 'false';		$setup = 'var mapOptions = {';		$setup .= "zoom: {$zoom},";		$setup .= "center: new google.maps.LatLng({$center[0]},{$center[1]}),";		$setup .= "mapTypeId: google.maps.MapTypeId.{$maptype},";		$setup .= substr(json_encode($this->getAdditionalMapOptions()), 1, -1);		$setup .= '};';		$setup .= "var map = new google.maps.Map(document.getElementById('{$id}'), mapOptions);";		foreach ($this->listMarkers() as $marker)		{			$loc = $marker['loc'];			$title = $marker['title'];			$options = $marker['options'];			$setup .= 'new google.maps.Marker({';			$setup .= "position: new google.maps.LatLng({$loc[0]},{$loc[1]}),";			$setup .= 'map: map,';			$setup .= "title:'{$title}',";			$setup .= substr(json_encode($options), 1, -1);			$setup .= '});';		}		$setup .= $this->getAdditionalJavascript();		if ($this->isAsync())		{			$asynccallback = $this->getAsyncCallback();			$output = '<script type="text/javascript">';			$output .= "function {$asynccallback}() {";			$output .= $setup;			$output .= '}';			$onload = "function() {";			$onload .= 'var script = document.createElement("script");';			$onload .= 'script.type = "text/javascript";';			$onload .= "script.src = '{$scheme}://maps.googleapis.com/maps/api/js?key={$key}&sensor={$sensor}&callback={$asynccallback}';";			$onload .= 'document.body.appendChild(script);';			$onload .= '}';		}		else		{			$output = "<script type='text/javascript' src='{$scheme}://maps.googleapis.com/maps/api/js?key={$key}&sensor={$sensor}'>";			$output .= '</script>';			$output .= '<script type="text/javascript">';			$onload = "function() {";			$onload .= $setup;			$onload .= '}';		}		switch ($this->getAutoload())		{			case 'onload':			$output .= "window.onload={$onload};";			break;			case 'jquery':			$output .= "$(document).ready({$onload});";			break;			case 'mootools':			$output .= "window.addEvent('domready',{$onload});";			break;		}		$output .= '</script>';		return $output;	}	/**	 * Method to retrieve the div that the map is loaded into	 *	 * @return  string  The body	 *	 * @since   12.3	 */	public function getBody()	{		$id = $this->getMapID();		$class = $this->getMapClass();		$style = $this->getMapStyle();		$output = "<div id='{$id}'";		if (!empty($class))		{			$output .= " class='{$class}'";		}		if (!empty($style))		{			$output .= " style='{$style}'";		}		$output .= '></div>';		return $output;	}	/**	 * Method to get the location information back from an address	 *	 * @param   string  $address  The address to geocode	 *	 * @return  array  An array containing Google's geocode data	 *	 * @since   12.3	 */	public function geocodeAddress($address)	{		$url = 'http://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=' . urlencode($address);		$response = $this->http->get($url);		if ($response->code < 200 || $response->code >= 300)		{			throw new RuntimeException('Error code ' . $response->code . ' received geocoding address: ' . $response->body . '.');		}		$data = json_decode($response->body, true);		if (!$data)		{			throw new RuntimeException('Invalid json received geocoding address: ' . $response->body . '.');		}		if ($data['status'] != 'OK')		{			return null;		}		return $data['results'][0];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugin controller class. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsControllerPlugin extends JControllerForm{}
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */// Initialize Joomla frameworkconst _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}// Get the framework.require_once JPATH_LIBRARIES . '/import.legacy.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';/** * Cron job to trash expired cache data * * @package  Joomla.CLI * @since    2.5 */class GarbageCron extends JApplicationCli{	/**	 * Entry point for the script	 *	 * @return  void	 *	 * @since   2.5	 */	public function doExecute()	{		$cache = JFactory::getCache();		$cache->gc();	}}JApplicationCli::getInstance('GarbageCron')->execute();
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Weblink Controller * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			$cachable	If true, the view output will be cached	 * @param   array  $urlparams	An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/weblinks.php';		$view   = $this->input->get('view', 'weblinks');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'weblink' && $layout == 'edit' && !$this->checkEditId('com_weblinks.edit.weblink', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_weblinks&view=weblinks', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Custom session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @todo        When dropping compatibility with PHP 5.3 use the SessionHandlerInterface and the SessionHandler class * @since       11.1 */abstract class JSessionStorage{	/**	 * @var    array  JSessionStorage instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		$this->register($options);	}	/**	 * Returns a session storage handler object, only creating it if it doesn't already exist.	 *	 * @param   string  $name     The session store to instantiate	 * @param   array   $options  Array of options	 *	 * @return  JSessionStorage	 *	 * @since   11.1	 */	public static function getInstance($name = 'none', $options = array())	{		$name = strtolower(JFilterInput::getInstance()->clean($name, 'word'));		if (empty(self::$instances[$name]))		{			$class = 'JSessionStorage' . ucfirst($name);			if (!class_exists($class))			{				$path = __DIR__ . '/storage/' . $name . '.php';				if (file_exists($path))				{					require_once $path;				}				else				{					// No attempt to die gracefully here, as it tries to close the non-existing session					jexit('Unable to load session storage class: ' . $name);				}			}			self::$instances[$name] = new $class($options);		}		return self::$instances[$name];	}	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   11.1	 */	public function register()	{		// Use this object as the session handler		session_set_save_handler(			array($this, 'open'), array($this, 'close'), array($this, 'read'), array($this, 'write'),			array($this, 'destroy'), array($this, 'gc')		);	}	/**	 * Open the SessionHandler backend.	 *	 * @param   string  $save_path     The path to the session object.	 * @param   string  $session_name  The name of the session.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function open($save_path, $session_name)	{		return true;	}	/**	 * Close the SessionHandler backend.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function close()	{		return true;	}	/**	 * Read the data for a particular session identifier from the	 * SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		return;	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id            The session identifier.	 * @param   string  $session_data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $session_data)	{		return true;	}	/**	 * Destroy the data for a particular session identifier in the	 * SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		return true;	}	/**	 * Garbage collect stale sessions from the SessionHandler backend.	 *	 * @param   integer  $maxlifetime  The maximum age of a session.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc($maxlifetime = null)	{		return true;	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return true;	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 * @deprecated  12.3 Use JSessionStorage::isSupported() instead.	 */	public static function test()	{		JLog::add('JSessionStorage::test() is deprecated. Use JSessionStorage::isSupported() instead.', JLog::WARNING, 'deprecated');		return static::isSupported();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlusActivities extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{	parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * List all of the activities in the specified collection for a particular user.	 *	 * @param   string   $userId      The ID of the user to get activities for. The special value "me" can be used to indicate the authenticated user.	 * @param   string   $collection  The collection of activities to list. Acceptable values are: "public".	 * @param   string   $fields      Used to specify the fields you want returned.	 * @param   integer  $max         The maximum number of people to include in the response, used for paging.	 * @param   string   $token       The continuation token, used to page through large result sets. To get the next page of results, set this	 *								  parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 * @param   string   $alt         Specifies an alternative representation type. Acceptable values are: "json" - Use JSON format (default)	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function listActivities($userId, $collection, $fields = null, $max = 10, $token = null, $alt = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people/' . $userId . '/activities/' . $collection;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if max is specified.			if ($max != 10)			{				$url .= (strpos($url, '?') === false) ? '?maxResults=' : '&maxResults=';				$url .= $max;			}			// Check if token is specified.			if ($token)			{				$url .= (strpos($url, '?') === false) ? '?pageToken=' : '&pageToken=';				$url .= $token;			}			// Check if alt is specified.			if ($alt)			{				$url .= (strpos($url, '?') === false) ? '?alt=' : '&alt=';				$url .= $alt;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Get an activity.	 *	 * @param   string  $id      The ID of the activity to get.	 * @param   string  $fields  Used to specify the fields you want returned.	 * @param   string  $alt     Specifies an alternative representation type. Acceptable values are: "json" - Use JSON format (default)	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function getActivity($id, $fields = null, $alt = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities/' . $id;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if alt is specified.			if ($alt)			{				$url .= (strpos($url, '?') === false) ? '?alt=' : '&alt=';				$url .= $alt;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Search all public activities.	 *	 * @param   string   $query     Full-text search query string.	 * @param   string   $fields    Used to specify the fields you want returned.	 * @param   string   $language  Specify the preferred language to search with. https://developers.google.com/+/api/search#available-languages	 * @param   integer  $max       The maximum number of people to include in the response, used for paging.	 * @param   string   $order     Specifies how to order search results. Acceptable values are "best" and "recent".	 * @param   string   $token     The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function search($query, $fields = null, $language = null, $max = 10, $order = null, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities?query=' . urlencode($query);			// Check if fields is specified.			if ($fields)			{				$url .= '&fields=' . $fields;			}			// Check if language is specified.			if ($language)			{				$url .= '&language=' . $language;			}			// Check if max is specified.			if ($max != 10)			{				$url .= '&maxResults=' . $max;			}			// Check if order is specified.			if ($order)			{				$url .= '&orderBy=' . $order;			}			// Check of token is specified.			if ($token)			{				$url .= '&pageToken=' . $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Blowfish encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipherBlowfish extends JCryptCipherMcrypt{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type = MCRYPT_BLOWFISH;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode = MCRYPT_MODE_CBC;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType = 'blowfish';}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?>	<fieldset class="adminform" title="<?php echo JText::_('COM_LANGUAGES_FTP_TITLE'); ?>">		<legend><?php echo JText::_('COM_LANGUAGES_FTP_TITLE'); ?></legend>		<?php echo JText::_('COM_LANGUAGES_FTP_DESC'); ?>		<?php if ($ftp instanceof Exception) : ?>			<p class="warning"><?php echo JText::_($ftp->message); ?></p>		<?php endif; ?>		<div>			<label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>			<input type="text" id="username" name="username" class="inputbox" value="" />		</div>		<div>			<label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>			<input type="password" id="password" name="password" class="inputbox" value="" />		</div>	</fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Forks class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubForks extends JGithubObject{	/**	 * Method to fork a repository.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $org   The organization to fork the repo into. By default it is forked to the current user.	 *	 * @return  object	 *	 * @since   11.4	 * @throws  DomainException	 */	public function create($user, $repo, $org = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/forks';		if (strlen($org) > 0)		{			$data = json_encode(				array('org' => $org)			);		}		else		{			$data = json_encode(array());		}		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 202)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list forks for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   11.4	 * @throws  DomainException	 */	public function getList($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/forks';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->params->get('presentation_style') == 'sliders') : ?>	<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_LINKS'), 'display-links'); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'tabs') : ?>	<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-links', JText::_('COM_CONTACT_LINKS', true)); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'plain'):?>	<?php echo '<h3>'. JText::_('COM_CONTACT_LINKS').'</h3>';  ?><?php endif; ?><div class="contact-links">	<ul class="nav nav-tabs nav-stacked">		<?php		foreach (range('a', 'e') as $char) :// letters 'a' to 'e'			$link = $this->contact->params->get('link'.$char);			$label = $this->contact->params->get('link'.$char.'_name');			if (!$link) :				continue;			endif;			// Add 'http://' if not present			$link = (0 === strpos($link, 'http')) ? $link : 'http://'.$link;			// If no label is present, take the link			$label = ($label) ? $label : $link;			?>			<li>				<a href="<?php echo $link; ?>">					<?php echo $label; ?>				</a>			</li>		<?php endforeach; ?>	</ul></div><?php if ($this->params->get('presentation_style') == 'sliders') : ?>	<?php echo JHtml::_('bootstrap.endSlide'); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'tabs') : ?>	<?php echo JHtml::_('bootstrap.endTab'); ?><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JSON format handler for JRegistry. * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistryFormatJSON extends JRegistryFormat{	/**	 * Converts an object into a JSON formatted string.	 *	 * @param   object  $object   Data source object.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  string  JSON formatted string.	 *	 * @since   11.1	 */	public function objectToString($object, $options = array())	{		return json_encode($object);	}	/**	 * Parse a JSON formatted string and convert it into an object.	 *	 * If the string is not in JSON format, this method will attempt to parse it as INI format.	 *	 * @param   string  $data     JSON formatted string to convert.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  object   Data object.	 *	 * @since   11.1	 */	public function stringToObject($data, array $options = array('processSections' => false))	{		$data = trim($data);		if ((substr($data, 0, 1) != '{') && (substr($data, -1, 1) != '}'))		{			$ini = JRegistryFormat::getInstance('INI');			$obj = $ini->stringToObject($data, $options);		}		else		{			$obj = json_decode($data);		}		return $obj;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Indexer controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderControllerFilter extends JControllerForm{	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable. [optional]	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions). [optional]	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   2.5	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$input = $app->input;		$lang = JFactory::getLanguage();		$model = $this->getModel();		$table = $model->getTable();		$data = $input->post->get('jform', array(), 'array');		$checkin = property_exists($table, 'checked_out');		$context = "$this->option.edit.$this->context";		$task = $this->getTask();		// Determine the name of the primary key for the data.		if (empty($key))		{			$key = $table->getKeyName();		}		// To avoid data collisions the urlVar may be different from the primary key.		if (empty($urlVar))		{			$urlVar = $key;		}		$recordId = $input->get($urlVar, '', 'int');		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and tried to save it. We don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));			return false;		}		// Populate the row id from the session.		$data[$key] = $recordId;		// The save2copy task needs to be handled slightly differently.		if ($task == 'save2copy')		{			// Check-in the original row.			if ($checkin && $model->checkin($data[$key]) === false)			{				// Check-in failed. Go back to the item and display a notice.				$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));				$this->setMessage($this->getError(), 'error');				$this->setRedirect('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $urlVar));				return false;			}			// Reset the ID and then treat the request as for Apply.			$data[$key] = 0;			$task = 'apply';		}		// Access check.		if (!$this->allowSave($data, $key))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));			return false;		}		// Validate the posted data.		// Sometimes the form needs some posted data, such as for plugins and modules.		$form = $model->getForm($data, false);		if (!$form)		{			$app->enqueueMessage($model->getError(), 'error');			return false;		}		// Test whether the data is valid.		$validData = $model->validate($form, $data);		// Check for validation errors.		if ($validData === false)		{			// Get the validation messages.			$errors = $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if (($errors[$i]) instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState($context . '.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));			return false;		}		// Get and sanitize the filter data.		$validData['data'] = $input->post->get('t', array(), 'array');		$validData['data'] = array_unique($validData['data']);		JArrayHelper::toInteger($validData['data']);		// Remove any values of zero.		if (array_search(0, $validData['data'], true))		{			unset($validData['data'][array_search(0, $validData['data'], true)]);		}		// Attempt to save the data.		if (!$model->save($validData))		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Redirect back to the edit screen.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));			return false;		}		// Save succeeded, so check-in the record.		if ($checkin && $model->checkin($validData[$key]) === false)		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Check-in failed, so go back to the record and display a notice.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key));			return false;		}		$this->setMessage(			JText::_(				($lang->hasKey($this->text_prefix . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS')				? $this->text_prefix : 'JLIB_APPLICATION') . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS'			)		);		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the record data in the session.				$recordId = $model->getState($this->context . '.id');				$this->holdEditId($context, $recordId);				$app->setUserState($context . '.data', null);				$model->checkout($recordId);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));				break;			case 'save2new':				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend(null, $key), false));				break;			default:				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));				break;		}		// Invoke the postSave method to allow for the child class to access the model.		$this->postSaveHook($model, $validData);		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform" title="<?php echo JText::_('COM_TEMPLATES_FTP_TITLE'); ?>">	<legend><?php echo JText::_('COM_TEMPLATES_FTP_TITLE'); ?></legend>	<?php echo JText::_('COM_TEMPLATES_FTP_DESC'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p class="error"><?php echo JText::_($this->ftp->message); ?></p>	<?php endif; ?>	<table class="adminform">		<tbody>			<tr>				<td width="120">					<label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>				</td>				<td>					<input type="text" id="username" name="username" class="inputbox" size="70" value="" />				</td>			</tr>			<tr>				<td width="120">					<label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>				</td>				<td>					<input type="password" id="password" name="password" class="inputbox" size="70" value="" />				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! W3c Logging class * * This class is designed to build log files based on the W3c specification * at: http://www.w3.org/TR/WD-logfile.html * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerW3c extends JLogLoggerFormattedtext{	/**	 * @var    string  The format which each entry follows in the log file.  All fields must be	 * named in all caps and be within curly brackets eg. {FOOBAR}.	 * @since  11.1	 */	protected $format = '{DATE}	{TIME}	{PRIORITY}	{CLIENTIP}	{CATEGORY}	{MESSAGE}';	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// The name of the text file defaults to 'error.w3c.php' if not explicitly given.		if (empty($options['text_file']))		{			$options['text_file'] = 'error.w3c.php';		}		// Call the parent constructor.		parent::__construct($options);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleTel extends JFormRule{	/**	 * Method to test the url for a valid parts.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		/*		 * @see http://www.nanpa.com/		 * @see http://tools.ietf.org/html/rfc4933		 * @see http://www.itu.int/rec/T-REC-E.164/en		 *		 * Regex by Steve Levithan		 * @see http://blog.stevenlevithan.com/archives/validate-phone-number		 * @note that valid ITU-T and EPP must begin with +.		 */		$regexarray = array('NANP' => '/^(?:\+?1[-. ]?)?\(?([2-9][0-8][0-9])\)?[-. ]?([2-9][0-9]{2})[-. ]?([0-9]{4})$/',			'ITU-T' => '/^\+(?:[0-9] ?){6,14}[0-9]$/', 'EPP' => '/^\+[0-9]{1,3}\.[0-9]{4,14}(?:x.+)?$/');		if (isset($element['plan']))		{			$plan = (string) $element['plan'];			if ($plan == 'northamerica' || $plan == 'us')			{				$plan = 'NANP';			}			elseif ($plan == 'International' || $plan == 'int' || $plan == 'missdn' || !$plan)			{				$plan = 'ITU-T';			}			elseif ($plan == 'IETF')			{				$plan = 'EPP';			}			$regex = $regexarray[$plan];			// Test the value against the regular expression.			if (preg_match($regex, $value) == false)			{				return false;			}		}		else		{			/*			 * If the rule is set but no plan is selected just check that there are between			 * 7 and 15 digits inclusive and no illegal characters (but common number separators			 * are allowed).			 */			$cleanvalue = preg_replace('/[+. \-(\)]/', '', $value);			$regex = '/^[0-9]{7,15}?$/';			if (preg_match($regex, $cleanvalue) == true)			{				return true;			}			else			{				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script>var form = window.top.document.adminFormvar title = form.title.value;var alltext = window.top.<?php echo $this->editor->getContent('text') ?>;</script><table class="center" width="90%">	<tr>		<td class="contentheading" colspan="2"><script>document.write(title);</script></td>	</tr><tr>	<td valign="top" height="90%" colspan="2">		<script>document.write(alltext);</script>	</td></tr></table>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Component Controller * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */class NewsfeedsController extends JControllerLegacy{	/**	 * Method to show a newsfeeds view	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Set the default view name and format from the Request.		$vName = $this->input->get('view', 'categories');		$this->input->set('view', $vName);		$user = JFactory::getUser();		if ($user->get('id') || ($this->input->getMethod() == 'POST' && $vName = 'category' ))		{			$cachable = false;		}		$safeurlparams = array('id' => 'INT', 'limit' => 'UINT', 'limitstart' => 'UINT', 'filter_order' => 'CMD', 'filter_order_Dir' => 'CMD', 'lang' => 'CMD');		parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a custom button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonCustom extends JToolbarButton{	/**	 * Button type	 *	 * @var    string	 */	protected $_name = 'Custom';	/**	 * Fetch the HTML for the button	 *	 * @param   string  $type  Button type, unused string.	 * @param   string  $html  HTML strng for the button	 * @param   string  $id    CSS id for the button	 *	 * @return  string   HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Custom', $html = '', $id = 'custom')	{		return $html;	}	/**	 * Get the button CSS Id	 *	 * @param   string  $type  Not used.	 * @param   string  $html  Not used.	 * @param   string  $id    The id prefix for the button.	 *	 * @return  string  Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type = 'Custom', $html = '', $id = 'custom')	{		return $this->_parent->getName() . '-' . $id;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2010 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Framework. * * @package     Joomla.Libraries * @subpackage  Form * @since       2.5 */class JFormRuleCaptcha extends JFormRule{	/**	 * Method to test if the Captcha is correct.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   2.5	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$plugin    = $element['plugin'] ?: JFactory::getApplication()->getParams()->get('captcha', JFactory::getConfig()->get('captcha', 0));		$namespace = $element['namespace'] ?: $form->getName();		// Use 0 for none		if ($plugin === 0 || $plugin === '0')		{			return true;		}		else		{			$captcha = JCaptcha::getInstance($plugin, array('namespace' => (string) $namespace));		}		// Test the value.		if (!$captcha->checkAnswer($value))		{			$error = $captcha->getError();			if ($error instanceof Exception)			{				return $error;			}			else			{				return new JException($error);			}		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_cpanel * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// No access check.$controller	= JControllerLegacy::getInstance('Cpanel');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to add an edge detect effect to an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterEdgedetect extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			// @codeCoverageIgnoreStart			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Perform the edge detection filter.		imagefilter($this->handle, IMG_FILTER_EDGEDETECT);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto * @since       1.5 */class MailtoViewSent extends JViewLegacy{	/**	 * @since  1.5	 */	public function display($tpl = null)	{		parent::display($tpl);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Captcha * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Recaptcha Plugin. * Based on the oficial recaptcha library( http://recaptcha.net/plugins/php/ ) * * @package     Joomla.Plugin * @subpackage  Captcha * @since       2.5 */class PlgCaptchaRecaptcha extends JPlugin{	const RECAPTCHA_API_SERVER = "http://api.recaptcha.net";	const RECAPTCHA_API_SECURE_SERVER = "https://www.google.com/recaptcha/api";	const RECAPTCHA_VERIFY_SERVER = "api-verify.recaptcha.net";	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Initialise the captcha	 *	 * @param   string	$id	The id of the field.	 *	 * @return  Boolean	True on success, false otherwise	 *	 * @since  2.5	 */	public function onInit($id)	{		$document = JFactory::getDocument();		$app      = JFactory::getApplication();		$lang   = $this->_getLanguage();		$pubkey = $this->params->get('public_key', '');		$theme  = $this->params->get('theme', 'clean');		if ($pubkey == null || $pubkey == '')		{			throw new Exception(JText::_('PLG_RECAPTCHA_ERROR_NO_PUBLIC_KEY'));		}		$server = self::RECAPTCHA_API_SERVER;		if ($app->isSSLConnection())		{			$server = self::RECAPTCHA_API_SECURE_SERVER;		}		JHtml::_('script', $server.'/js/recaptcha_ajax.js');		$document->addScriptDeclaration('window.addEvent(\'domready\', function()		{			Recaptcha.create("'.$pubkey.'", "dynamic_recaptcha_1", {theme: "'.$theme.'",'.$lang.'tabindex: 0});});'		);		return true;	}	/**	 * Gets the challenge HTML	 *	 * @return  string  The HTML to be embedded in the form.	 *	 * @since  2.5	 */	public function onDisplay($name, $id, $class)	{		return '<div id="dynamic_recaptcha_1"></div>';	}	/**	  * Calls an HTTP POST function to verify if the user's guess was correct	  *	  * @return  True if the answer is correct, false otherwise	  *	  * @since  2.5	  */	public function onCheckAnswer($code)	{		$input      = JFactory::getApplication()->input;		$privatekey = $this->params->get('private_key');		$remoteip   = $input->server->get('REMOTE_ADDR', '', 'string');		$challenge  = $input->get('recaptcha_challenge_field', '', 'string');		$response   = $input->get('recaptcha_response_field', '', 'string');		// Check for Private Key		if (empty($privatekey))		{			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_NO_PRIVATE_KEY'));			return false;		}		// Check for IP		if (empty($remoteip))		{			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_NO_IP'));			return false;		}		// Discard spam submissions		if ($challenge == null || strlen($challenge) == 0 || $response == null || strlen($response) == 0)		{			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_EMPTY_SOLUTION'));			return false;		}		$response = $this->_recaptcha_http_post(			self::RECAPTCHA_VERIFY_SERVER, "/verify",			array(				'privatekey' => $privatekey,				'remoteip'   => $remoteip,				'challenge'  => $challenge,				'response'   => $response			)	);		$answers = explode("\n", $response[1]);		if (trim($answers[0]) == 'true')			{				return true;		}		else		{			//@todo use exceptions here			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_'.strtoupper(str_replace('-', '_', $answers[1]))));			return false;		}	}	/**	 * Encodes the given data into a query string format.	 *	 * @param   string  $data  Array of string elements to be encoded	 *	 * @return  string  Encoded request	 *	 * @since  2.5	 */	private function _recaptcha_qsencode($data)	{		$req = "";		foreach ($data as $key => $value)		{			$req .= $key . '=' . urlencode(stripslashes($value)) . '&';		}		// Cut the last '&'		$req = rtrim($req, '&');		return $req;	}	/**	 * Submits an HTTP POST to a reCAPTCHA server.	 *	 * @param   string  $host	 * @param   string  $path	 * @param   array   $data	 * @param   int     $port	 *	 * @return  array   Response	 *	 * @since  2.5	 */	private function _recaptcha_http_post($host, $path, $data, $port = 80)	{		$req = $this->_recaptcha_qsencode($data);		$http_request  = "POST $path HTTP/1.0\r\n";		$http_request .= "Host: $host\r\n";		$http_request .= "Content-Type: application/x-www-form-urlencoded;\r\n";		$http_request .= "Content-Length: " . strlen($req) . "\r\n";		$http_request .= "User-Agent: reCAPTCHA/PHP\r\n";		$http_request .= "\r\n";		$http_request .= $req;		$response = '';		if (($fs = @fsockopen($host, $port, $errno, $errstr, 10)) == false )		{			die('Could not open socket');		}		fwrite($fs, $http_request);		while (!feof($fs))		{			// One TCP-IP packet			$response .= fgets($fs, 1160);		}		fclose($fs);		$response = explode("\r\n\r\n", $response, 2);		return $response;	}	/**	 * Get the language tag or a custom translation	 *	 * @return  string	 *	 * @since  2.5	 */	private function _getLanguage()	{		$language = JFactory::getLanguage();		$tag = explode('-', $language->getTag());		$tag = $tag[0];		$available = array('en', 'pt', 'fr', 'de', 'nl', 'ru', 'es', 'tr');		if (in_array($tag, $available))		{			return "lang : '" . $tag . "',";		}		// If the default language is not available, let's search for a custom translation		if ($language->hasKey('PLG_RECAPTCHA_CUSTOM_LANG'))		{			$custom[] = 'custom_translations : {';			$custom[] = "\t".'instructions_visual : "' . JText::_('PLG_RECAPTCHA_INSTRUCTIONS_VISUAL') . '",';			$custom[] = "\t".'instructions_audio : "' . JText::_('PLG_RECAPTCHA_INSTRUCTIONS_AUDIO') . '",';			$custom[] = "\t".'play_again : "' . JText::_('PLG_RECAPTCHA_PLAY_AGAIN') . '",';			$custom[] = "\t".'cant_hear_this : "' . JText::_('PLG_RECAPTCHA_CANT_HEAR_THIS') . '",';			$custom[] = "\t".'visual_challenge : "' . JText::_('PLG_RECAPTCHA_VISUAL_CHALLENGE') . '",';			$custom[] = "\t".'audio_challenge : "' . JText::_('PLG_RECAPTCHA_AUDIO_CHALLENGE') . '",';			$custom[] = "\t".'refresh_btn : "' . JText::_('PLG_RECAPTCHA_REFRESH_BTN') . '",';			$custom[] = "\t".'help_btn : "' . JText::_('PLG_RECAPTCHA_HELP_BTN') . '",';			$custom[] = "\t".'incorrect_try_again : "' . JText::_('PLG_RECAPTCHA_INCORRECT_TRY_AGAIN') . '",';			$custom[] = '},';			$custom[] = "lang : '" . $tag . "',";			return implode("\n", $custom);		}		// If nothing helps fall back to english		return '';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	setmenutype = function(type)	{		window.parent.Joomla.submitbutton('item.setType', type);		window.parent.SqueezeBox.close();	}</script><h2 class="modal-title"><?php echo JText::_('COM_MENUS_TYPE_CHOOSE'); ?></h2><ul class="menu_types">	<?php foreach ($this->types as $name => $list): ?>	<li><dl class="menu_type">			<dt><?php echo JText::_($name); ?></dt>			<dd><ul>					<?php foreach ($list as $item): ?>					<li><a class="choose_type" href="#" title="<?php echo JText::_($item->description); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => $item->title, 'request' => $item->request))); ?>')">							<?php echo JText::_($item->title);?>						</a>					</li>					<?php endforeach; ?>				</ul>			</dd>		</dl>	</li>	<?php endforeach; ?>	<li><dl class="menu_type">			<dt><?php echo JText::_('COM_MENUS_TYPE_SYSTEM'); ?></dt>			<dd>				<ul>					<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL_DESC'); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'url'))); ?>')">							<?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL'); ?>						</a>					</li>					<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_ALIAS_DESC'); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'alias'))); ?>')">							<?php echo JText::_('COM_MENUS_TYPE_ALIAS'); ?>						</a>					</li>					<li><a class="choose_type" href="#"  title="<?php echo JText::_('COM_MENUS_TYPE_SEPARATOR_DESC'); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'separator'))); ?>')">							<?php echo JText::_('COM_MENUS_TYPE_SEPARATOR'); ?>						</a>					</li>					<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_HEADING_DESC'); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'heading'))); ?>')">							<?php echo JText::_('COM_MENUS_TYPE_HEADING'); ?>						</a>					</li>				</ul>			</dd>		</dl>	</li></ul>
<?php/** * @package     Joomla.Site * @subpackage  mod_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_search * * @package     Joomla.Site * @subpackage  mod_search * @since       1.5 */class ModSearchHelper{	/**	 * Display the search button as an image.	 *	 * @param   string	$button_text	The alt text for the button.	 *	 * @return  string	The HTML for the image.	 * @since   1.5	 */	public static function getSearchImage($button_text)	{		$img = JHtml::_('image', 'searchButton.gif', $button_text, null, true, true);		return $img;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset>	<legend>		<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_COMPLETE_HEADING') ?>	</legend>	<p>		<?php echo JText::sprintf('COM_JOOMLAUPDATE_VIEW_COMPLETE_MESSAGE', JVERSION); ?>	</p></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML helper class for rendering manipulated strings. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlString{	/**	 * Truncates text blocks over the specified character limit and closes	 * all open HTML tags. The method will optionally not truncate an individual	 * word, it will find the first space that is within the limit and	 * truncate at that point. This method is UTF-8 safe.	 *	 * @param   string   $text       The text to truncate.	 * @param   integer  $length     The maximum length of the text.	 * @param   boolean  $noSplit    Don't split a word if that is where the cutoff occurs (default: true).	 * @param   boolean  $allowHtml  Allow HTML tags in the output, and close any open tags (default: true).	 *	 * @return  string   The truncated text.	 *	 * @since   11.1	 */	public static function truncate($text, $length = 0, $noSplit = true, $allowHtml = true)	{		// Assume a lone open tag is invalid HTML.		if ($length == 1 && substr($text, 0, 1) == '<')		{			return '...';		}		// Check if HTML tags are allowed.		if (!$allowHtml)		{			// Deal with spacing issues in the input.			$text = str_replace('>', '> ', $text);			$text = str_replace(array('&nbsp;', '&#160;'), ' ', $text);			$text = JString::trim(preg_replace('#\s+#mui', ' ', $text));			// Strip the tags from the input and decode entities.			$text = strip_tags($text);			$text = html_entity_decode($text, ENT_QUOTES, 'UTF-8');			// Remove remaining extra spaces.			$text = str_replace('&nbsp;', ' ', $text);			$text = JString::trim(preg_replace('#\s+#mui', ' ', $text));		}		// Whether or not allowing HTML, truncate the item text if it is too long.		if ($length > 0 && JString::strlen($text) > $length)		{			$tmp = trim(JString::substr($text, 0, $length));			if (substr($tmp, 0, 1) == '<' && strpos($tmp, '>') === false)			{					return '...';			}			// $noSplit true means that we do not allow splitting of words.			if ($noSplit)			{				// Find the position of the last space within the allowed length.				$offset = JString::strrpos($tmp, ' ');				$tmp = JString::substr($tmp, 0, $offset + 1);				// If there are no spaces and the string is longer than the maximum				// we need to just use the ellipsis. In that case we are done.				if ($offset === false && strlen($text) > $length)				{					return '...';				}				if (JString::strlen($tmp) > $length - 3)				{					$tmp = trim(JString::substr($tmp, 0, JString::strrpos($tmp, ' ')));				}			}			if ($allowHtml)			{				// Put all opened tags into an array				preg_match_all("#<([a-z][a-z0-9]*)\b.*?(?!/)>#i", $tmp, $result);				$openedTags = $result[1];				// Some tags self close so they do not need a separate close tag.				$openedTags = array_diff($openedTags, array("img", "hr", "br"));				$openedTags = array_values($openedTags);				// Put all closed tags into an array				preg_match_all("#</([a-z]+)>#iU", $tmp, $result);				$closedTags = $result[1];				$numOpened = count($openedTags);				// All tags are closed so trim the text and finish.				if (count($closedTags) == $numOpened)				{					return trim($tmp) . '...';				}				// Closing tags need to be in the reverse order of opening tags.				$openedTags = array_reverse($openedTags);				// Close tags				for ($i = 0; $i < $numOpened; $i++)				{					if (!in_array($openedTags[$i], $closedTags))					{						$tmp .= "</" . $openedTags[$i] . ">";					}					else					{						unset($closedTags[array_search($openedTags[$i], $closedTags)]);					}				}			}			if ( $tmp === false || strlen($text) > strlen($tmp))			{				$text = trim($tmp) . '...';			}		}		// Clean up any internal spaces created by the processing.		$text = str_replace(' </', '</', $text);		$text = str_replace(' ...', '...', $text);		return $text;	}	/**	* Method to extend the truncate method to more complex situations	*	* The goal is to get the proper length plain text string with as much of	* the html intact as possible with all tags properly closed.	*	* @param   string   $html       The content of the introtext to be truncated	* @param   integer  $maxLength  The maximum number of characters to render	* @param   boolean  $noSplit    Don't split a word if that is where the cutoff occurs (default: true).	*	* @return  string  The truncated string. If the string is truncated an ellipsis	*                  (...) will be appended.	*	* @note: If a maximum length of 3 or less is selected and the text has more than	*        that number of characters an ellipsis will be displayed.	*        This method will not create valid HTML from malformed HTML.	*	* @since   12.2	*/	public static function truncateComplex($html, $maxLength = 0, $noSplit = true)	{		// Start with some basic rules.		$baseLength = strlen($html);		// If the original HTML string is shorter than the $maxLength do nothing and return that.		if ($baseLength <= $maxLength || $maxLength == 0)		{			return $html;		}		// Take care of short simple cases.		if ($maxLength <= 3 && substr($html, 0, 1) != '<' && strpos(substr($html, 0, $maxLength - 1), '<') === false && $baseLength > $maxLength)		{			return '...';		}		// Deal with maximum length of 1 where the string starts with a tag.		if ($maxLength == 1 && substr($html, 0, 1) == '<')		{			$endTagPos = strlen(strstr($html, '>', true));			$tag = substr($html, 1, $endTagPos);			$l = $endTagPos + 1;			if ($noSplit)			{				return substr($html, 0, $l) . '</' . $tag . '...';			}			$character = substr(strip_tags($html), 0, 1);			return substr($html, 0, $l) . '</' . $tag . '...';		}		// First get the truncated plain text string. This is the rendered text we want to end up with.		$ptString = JHtml::_('string.truncate', $html, $maxLength, $noSplit, $allowHtml = false);		// It's all HTML, just return it.		if (strlen($ptString) == 0)		{				return $html;		}		// If the plain text is shorter than the max length the variable will not end in ...		// In that case we use the whole string.		if (substr($ptString, -3) != '...')		{				return $html;		}		// Regular truncate gives us the ellipsis but we want to go back for text and tags.		if ($ptString == '...')		{			$stripped = substr(strip_tags($html), 0, $maxLength);			$ptString = JHtml::_('string.truncate', $stripped, $maxLength, $noSplit, $allowHtml = false);		}		// We need to trim the ellipsis that truncate adds.		$ptString = rtrim($ptString, '.');		// Now deal with more complex truncation.		$diffLength = 0;		while ($maxLength <= $baseLength)		{			// Get the truncated string assuming HTML is allowed.			$htmlString = JHtml::_('string.truncate', $html, $maxLength, $noSplit, $allowHtml = true);			if ($htmlString == '...' && strlen($ptString) + 3 > $maxLength)			{				return $htmlString;			}			$htmlString = rtrim($htmlString, '.');			// Now get the plain text from the HTML string and trim it.			$htmlStringToPtString = JHtml::_('string.truncate', $htmlString, $maxLength, $noSplit, $allowHtml = false);			$htmlStringToPtString = rtrim($htmlStringToPtString, '.');			// If the new plain text string matches the original plain text string we are done.			if ($ptString == $htmlStringToPtString)			{				return $htmlString . '...';			}			// Get the number of HTML tag characters in the first $maxLength characters			$diffLength = strlen($ptString) - strlen($htmlStringToPtString);			if ($diffLength <= 0)			{				return $htmlString . '...';			}			// Set new $maxlength that adjusts for the HTML tags			$maxLength += $diffLength;		}	}	/**	 * Abridges text strings over the specified character limit. The	 * behavior will insert an ellipsis into the text replacing a section	 * of variable size to ensure the string does not exceed the defined	 * maximum length. This method is UTF-8 safe.	 *	 * For example, it transforms "Really long title" to "Really...title".	 *	 * Note that this method does not scan for HTML tags so will potentially break them.	 *	 * @param   string   $text    The text to abridge.	 * @param   integer  $length  The maximum length of the text (default is 50).	 * @param   integer  $intro   The maximum length of the intro text (default is 30).	 *	 * @return  string   The abridged text.	 *	 * @since   11.1	 */	public static function abridge($text, $length = 50, $intro = 30)	{		// Abridge the item text if it is too long.		if (JString::strlen($text) > $length)		{			// Determine the remaining text length.			$remainder = $length - ($intro + 3);			// Extract the beginning and ending text sections.			$beg = JString::substr($text, 0, $intro);			$end = JString::substr($text, JString::strlen($text) - $remainder);			// Build the resulting string.			$text = $beg . '...' . $end;		}		return $text;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_DIRECTORY_PERMISSIONS'); ?></legend>		<table class="table table-striped">			<thead>				<tr>					<th width="650">						<?php echo JText::_('COM_ADMIN_DIRECTORY'); ?>					</th>					<th>						<?php echo JText::_('COM_ADMIN_STATUS'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="2">&#160;</td>				</tr>			</tfoot>			<tbody>				<?php foreach ($this->directory as $dir => $info) : ?>					<tr>						<td>							<?php echo JHtml::_('directory.message', $dir, $info['message']);?>						</td>						<td>							<?php echo JHtml::_('directory.writable', $info['writable']);?>						</td>					</tr>				<?php endforeach; ?>			</tbody>		</table></fieldset>
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseSqlazure is deprecated, use JDatabaseDriverSqlazure instead.', JLog::WARNING, 'deprecated');/** * SQL Server database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/ee336279.aspx * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverSqlazure instead. */class JDatabaseSqlazure extends JDatabaseDriverSqlazure{}
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.path');/** * FTP configuration model for the Joomla Core Installer. * * @package     Joomla.Installation * @subpackage  Model * @since       3.1 */class InstallationModelFtp extends JModelBase{	/**	 * Find the ftp filesystem root for a given user/pass pair.	 *	 * @param   array  $options  Configuration options.	 *	 * @return  mixed  FTP root for given FTP user, or boolean false if not found.	 *	 * @since   3.1	 */	public function detectFtpRoot($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Connect and login to the FTP server.		// Use binary transfer mode to be able to compare files.		@$ftp = JClientFtp::getInstance($options->get('ftp_host'), $options->get('ftp_port'), array('type' => FTP_BINARY));		// Check to make sure FTP is connected and authenticated.		if (!$ftp->isConnected())		{			$app->enqueueMessage($options->get('ftp_host') . ':' . $options->get('ftp_port') . ' ' . JText::_('INSTL_FTP_NOCONNECT'), 'error');			return false;		}		if (!$ftp->login($options->get('ftp_user'), $options->get('ftp_pass')))		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOLOGIN'), 'error');			return false;		}		// Get the current working directory from the FTP server.		$cwd = $ftp->pwd();		if ($cwd === false)		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOPWD'), 'error');			return false;		}		$cwd = rtrim($cwd, '/');		// Get a list of folders in the current working directory.		$cwdFolders = $ftp->listDetails(null, 'folders');		if ($cwdFolders === false || count($cwdFolders) == 0)		{			$app->enqueueMessage(JText::_('INSTL_FTP_NODIRECTORYLISTING'), 'error');			return false;		}		// Get just the folder names from the list of folder data.		for ($i = 0, $n = count($cwdFolders); $i < $n; $i++)		{			$cwdFolders[$i] = $cwdFolders[$i]['name'];		}		// Check to see if Joomla is installed at the FTP current working directory.		$paths = array();		$known = array('administrator', 'components', 'installation', 'language', 'libraries', 'plugins');		if (count(array_diff($known, $cwdFolders)) == 0)		{			$paths[] = $cwd . '/';		}		// Search through the segments of JPATH_SITE looking for root possibilities.		$parts = explode(DIRECTORY_SEPARATOR, JPATH_SITE);		$tmp = '';		for ($i = count($parts) - 1; $i >= 0; $i--)		{			$tmp = '/' . $parts[$i] . $tmp;			if (in_array($parts[$i], $cwdFolders))			{				$paths[] = $cwd . $tmp;			}		}		// Check all possible paths for the real Joomla installation by comparing version files.		$rootPath = false;		$checkValue = file_get_contents(JPATH_LIBRARIES . '/cms/version/version.php');		foreach ($paths as $tmp)		{			$filePath = rtrim($tmp, '/') . '/libraries/cms/version/version.php';			$buffer = null;			@ $ftp->read($filePath, $buffer);			if ($buffer == $checkValue)			{				$rootPath = $tmp;				break;			}		}		// Close the FTP connection.		$ftp->quit();		// Return an error if no root path was found.		if ($rootPath === false)		{			$app->enqueueMessage(JText::_('INSTL_FTP_UNABLE_DETECT_ROOT_FOLDER'), 'error');			return false;		}		return $rootPath;	}	/**	 * Verify the FTP settings as being functional and correct.	 *	 * @param   array  $options  Configuration options.	 *	 * @return  mixed  FTP root for given FTP user, or boolean false if not found.	 *	 * @since   3.1	 */	public function verifyFtpSettings($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Connect and login to the FTP server.		@$ftp = JClientFtp::getInstance($options->get('ftp_host'), $options->get('ftp_port'));		// Check to make sure FTP is connected and authenticated.		if (!$ftp->isConnected())		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOCONNECT'), 'error');			return false;		}		if (!$ftp->login($options->get('ftp_user'), $options->get('ftp_pass')))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOLOGIN'), 'error');			return false;		}		// Since the root path will be trimmed when it gets saved to configuration.php,		// we want to test with the same value as well.		$root = rtrim($options->get('ftp_root'), '/');		// Verify PWD function		if ($ftp->pwd() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOPWD'), 'error');			return false;		}		// Verify root path exists		if (!$ftp->chdir($root))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOROOT'), 'error');			return false;		}		// Verify NLST function		if (($rootList = $ftp->listNames()) === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NONLST'), 'error');			return false;		}		// Verify LIST function		if ($ftp->listDetails() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOLIST'), 'error');			return false;		}		// Verify SYST function		if ($ftp->syst() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOSYST'), 'error');			return false;		}		// Verify valid root path, part one		$checkList = array('robots.txt', 'index.php');		if (count(array_diff($checkList, $rootList)))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_INVALIDROOT'), 'error');			return false;		}		// Verify RETR function		$buffer = null;		if ($ftp->read($root . '/libraries/cms/version/version.php', $buffer) === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NORETR'), 'error');			return false;		}		// Verify valid root path, part two		$checkValue = file_get_contents(JPATH_ROOT . '/libraries/cms/version/version.php');		if ($buffer !== $checkValue)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_INVALIDROOT'), 'error');			return false;		}		// Verify STOR function		if ($ftp->create($root . '/ftp_testfile') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOSTOR'), 'error');			return false;		}		// Verify DELE function		if ($ftp->delete($root . '/ftp_testfile') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NODELE'), 'error');			return false;		}		// Verify MKD function		if ($ftp->mkdir($root . '/ftp_testdir') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOMKD'), 'error');			return false;		}		// Verify RMD function		if ($ftp->delete($root . '/ftp_testdir') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NORMD'), 'error');			return false;		}		$ftp->quit();		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Platform * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform View Interface * * @package     Joomla.Platform * @subpackage  View * @since       12.1 */interface JView{	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @since   12.1	 */	public function escape($output);	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function render();}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User notes controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersControllerNotes extends JControllerAdmin{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  2.5	 */	protected $text_prefix = 'COM_USERS_NOTES';	/**	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   2.5	 */	public function getModel($name = 'Note', $prefix = 'UsersModel', $config = array('ignore_request' => true))	{		return parent::getModel($name, $prefix, $config);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Cache callback type object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheControllerCallback extends JCacheController{	/**	 * Executes a cacheable callback if not found in cache else returns cached output and result	 *	 * Since arguments to this function are read with func_get_args you can pass any number of	 * arguments to this method	 * as long as the first argument passed is the callback definition.	 *	 * The callback definition can be in several forms:	 * - Standard PHP Callback array see <http://php.net/callback> [recommended]	 * - Function name as a string eg. 'foo' for function foo()	 * - Static method name as a string eg. 'MyClass::myMethod' for method myMethod() of class MyClass	 *	 * @return  mixed  Result of the callback	 *	 * @since   11.1	 */	public function call()	{		// Get callback and arguments		$args = func_get_args();		$callback = array_shift($args);		return $this->get($callback, $args);	}	/**	 * Executes a cacheable callback if not found in cache else returns cached output and result	 *	 * @param   mixed    $callback    Callback or string shorthand for a callback	 * @param   array    $args        Callback arguments	 * @param   string   $id          Cache id	 * @param   boolean  $wrkarounds  True to use wrkarounds	 * @param   array    $woptions    Workaround options	 *	 * @return  mixed  Result of the callback	 *	 * @since   11.1	 */	public function get($callback, $args = array(), $id = false, $wrkarounds = false, $woptions = array())	{		// Normalize callback		if (is_array($callback))		{			// We have a standard php callback array -- do nothing		}		elseif (strstr($callback, '::'))		{			// This is shorthand for a static method callback classname::methodname			list ($class, $method) = explode('::', $callback);			$callback = array(trim($class), trim($method));		}		elseif (strstr($callback, '->'))		{			/*			 * This is a really not so smart way of doing this... we provide this for backward compatability but this			 * WILL! disappear in a future version.  If you are using this syntax change your code to use the standard			 * PHP callback array syntax: <http://php.net/callback>			 *			 * We have to use some silly global notation to pull it off and this is very unreliable			 */			list ($object_123456789, $method) = explode('->', $callback);			global $$object_123456789;			$callback = array($$object_123456789, $method);		}		else		{			// We have just a standard function -- do nothing		}		if (!$id)		{			// Generate an ID			$id = $this->_makeId($callback, $args);		}		$data = $this->cache->get($id);		$locktest = new stdClass;		$locktest->locked = null;		$locktest->locklooped = null;		if ($data === false)		{			$locktest = $this->cache->lock($id);			if ($locktest->locked == true && $locktest->locklooped == true)			{				$data = $this->cache->get($id);			}		}		$coptions = array();		if ($data !== false)		{			$cached = unserialize(trim($data));			$coptions['mergehead'] = isset($woptions['mergehead']) ? $woptions['mergehead'] : 0;			$output = ($wrkarounds == false) ? $cached['output'] : JCache::getWorkarounds($cached['output'], $coptions);			$result = $cached['result'];			if ($locktest->locked == true)			{				$this->cache->unlock($id);			}		}		else		{			if (!is_array($args))			{				$Args = !empty($args) ? array(&$args) : array();			}			else			{				$Args = &$args;			}			if ($locktest->locked == false)			{				$locktest = $this->cache->lock($id);			}			if (isset($woptions['modulemode']) && $woptions['modulemode'] == 1)			{				$document = JFactory::getDocument();				$coptions['modulemode'] = 1;				$coptions['headerbefore'] = $document->getHeadData();			}			else			{				$coptions['modulemode'] = 0;			}			ob_start();			ob_implicit_flush(false);			$result = call_user_func_array($callback, $Args);			$output = ob_get_contents();			ob_end_clean();			$cached = array();			$coptions['nopathway'] = isset($woptions['nopathway']) ? $woptions['nopathway'] : 1;			$coptions['nohead'] = isset($woptions['nohead']) ? $woptions['nohead'] : 1;			$coptions['nomodules'] = isset($woptions['nomodules']) ? $woptions['nomodules'] : 1;			$cached['output'] = ($wrkarounds == false) ? $output : JCache::setWorkarounds($output, $coptions);			$cached['result'] = $result;			// Store the cache data			$this->cache->store(serialize($cached), $id);			if ($locktest->locked == true)			{				$this->cache->unlock($id);			}		}		echo $output;		return $result;	}	/**	 * Generate a callback cache id	 *	 * @param   callback  $callback  Callback to cache	 * @param   array     $args      Arguments to the callback method to cache	 *	 * @return  string  MD5 Hash : function cache id	 *	 * @since   11.1	 */	protected function _makeId($callback, $args)	{		if (is_array($callback) && is_object($callback[0]))		{			$vars = get_object_vars($callback[0]);			$vars[] = strtolower(get_class($callback[0]));			$callback[0] = $vars;		}		return md5(serialize(array($callback, $args)));	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewSummaryHtml $this */// Determine if the configuration file path is writable.$path = JPATH_CONFIGURATION . '/configuration.php';$useftp = (file_exists($path)) ? !is_writable($path) : !is_writable(JPATH_CONFIGURATION . '/');$prev = $useftp ? 'ftp' : 'database';?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('<?php echo $prev; ?>');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('INSTL_SUMMARY_INSTALL'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('INSTL_SUMMARY_INSTALL'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_FINALISATION'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('sample_file'); ?>		</div>		<div class="controls">			<div class="help-block">				<?php echo $this->form->getInput('sample_file'); ?>			</div>			<p class="help-block">				<?php echo JText::_('INSTL_SITE_INSTALL_SAMPLE_DESC'); ?>			</p>		</div>	</div>	<h3><?php echo JText::_('INSTL_STEP_SUMMARY_LABEL'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group" id="summary_email">		<div class="control-label">			<?php echo $this->form->getLabel('summary_email'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('summary_email'); ?>			<p class="help-block">				<?php echo JText::sprintf('INSTL_SUMMARY_EMAIL_DESC', '<span class="label">' . $this->options['admin_email'] . '</span>'); ?>			</p>		</div>	</div>	<div class="control-group" id="email_passwords" style="display:none;">		<div class="control-label">			<?php echo $this->form->getLabel('summary_email_passwords'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('summary_email_passwords'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_SUMMARY_EMAIL_PASSWORDS_DESC'); ?>			</p>		</div>	</div>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_SITE'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('INSTL_SITE_NAME_LABEL'); ?>						</td>						<td>							<?php echo $this->options['site_name']; ?>						</td>					</tr>					<?php if ($this->options['site_metadesc']) : ?>					<tr>						<td class="item">							<?php echo JText::_('INSTL_SITE_METADESC_LABEL'); ?>						</td>						<td>							<?php echo $this->options['site_metadesc']; ?>						</td>					</tr>					<?php endif; ?>					<tr>						<td class="item">							<?php echo JText::_('INSTL_SITE_OFFLINE_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['site_offline']) ? 'success' : 'important'; ?>">								<?php echo JText::_(($this->options['site_offline']) ? 'JYES' : 'JNO'); ?>							</span>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_ADMIN_EMAIL_LABEL'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_email']; ?></span>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_ADMIN_USER_LABEL'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_user']; ?></span>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_ADMIN_PASSWORD_LABEL'); ?>						</td>						<td>							<?php echo $this->options['admin_password'] ? '***': ''; ?>						</td>					</tr>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div class="span6">			<h3><?php echo JText::_('INSTL_DATABASE'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_TYPE_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_type']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_HOST_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_host']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_USER_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_user']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_PASSWORD_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_pass'] ? '***': ''; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_NAME_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_name']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_PREFIX_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_prefix']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_OLD_PROCESS_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['db_old'] == 'remove') ? 'important' : 'success'; ?>">								<?php echo JText::_(($this->options['db_old'] == 'remove') ? 'INSTL_DATABASE_FIELD_VALUE_REMOVE' : 'INSTL_DATABASE_FIELD_VALUE_BACKUP'); ?>							</span>						</td>					</tr>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>	</div>	<?php if ($useftp) : ?>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_FTP'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_ENABLE_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['ftp_enable']) ? 'success' : 'important'; ?>">								<?php echo JText::_(($this->options['ftp_enable']) ? 'JYES' : 'JNO'); ?>							</span>						</td>					</tr>					<?php if($this->options['ftp_enable']) : ?>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_USER_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_user']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_PASSWORD_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_pass'] ? '***': ''; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_HOST_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_host']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_PORT_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_port']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_SAVE_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['ftp_save']) ? 'important' : 'success'; ?>">								<?php echo JText::_(($this->options['ftp_save']) ? 'JYES' : 'JNO'); ?>							</span>						</td>					</tr>					<?php endif; ?>				</tbody>				<tfoot>				<tr>					<td colspan="2"></td>				</tr>				</tfoot>			</table>		</div>	</div>	<?php endif; ?>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_TITLE'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>				<?php foreach ($this->phpoptions as $option) : ?>					<tr>						<td class="item">							<?php echo $option->label; ?>						</td>						<td>							<span class="label label-<?php echo ($option->state) ? 'success' : 'important'; ?>">								<?php echo JText::_(($option->state) ? 'JYES' : 'JNO'); ?>								<?php if ($option->notice):?>								<i class="icon-info-sign icon-white hasTooltip" title="<?php echo $option->notice; ?>"></i>								<?php endif;?>							</span>						</td>					</tr>				<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<thead>					<tr>						<th>							<?php echo JText::_('INSTL_PRECHECK_DIRECTIVE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_ACTUAL'); ?>						</th>					</tr>				</thead>				<tbody>				<?php foreach ($this->phpsettings as $setting) : ?>					<tr>						<td>							<?php echo $setting->label; ?>						</td>						<td>							<span class="label label-success disabled">								<?php echo JText::_(($setting->recommended) ? 'JON' : 'JOFF'); ?>							</span>						</td>						<td>							<span class="label label-<?php echo ($setting->state === $setting->recommended) ? 'success' : 'warning'; ?>">								<?php echo JText::_(($setting->state) ? 'JON' : 'JOFF'); ?>							</span>						</td>					</tr>				<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="3"></td>					</tr>				</tfoot>			</table>		</div>	</div>	<input type="hidden" name="task" value="summary" />	<?php echo JHtml::_('form.token'); ?></form><script type="text/javascript">	window.addEvent('domready', function() {		document.getElements('input[name=jform[summary_email]]').each(function(el){			el.addEvent('click', function(){Install.toggle('email_passwords', 'summary_email', 1);});		});		Install.toggle('email_passwords', 'summary_email', 1);	});</script>
<?php/** * @package     Joomla.Platform * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');/** * Joomla Platform HTML View Class * * @package     Joomla.Platform * @subpackage  View * @since       12.1 */abstract class JViewHtml extends JViewBase{	/**	 * The view layout.	 *	 * @var    string	 * @since  12.1	 */	protected $layout = 'default';	/**	 * The paths queue.	 *	 * @var    SplPriorityQueue	 * @since  12.1	 */	protected $paths;	/**	 * Method to instantiate the view.	 *	 * @param   JModel            $model  The model object.	 * @param   SplPriorityQueue  $paths  The paths queue.	 *	 * @since   12.1	 */	public function __construct(JModel $model, SplPriorityQueue $paths = null)	{		parent::__construct($model);		// Setup dependencies.		$this->paths = isset($paths) ? $paths : $this->loadPaths();	}	/**	 * Magic toString method that is a proxy for the render method.	 *	 * @return  string	 *	 * @since   12.1	 */	public function __toString()	{		return $this->render();	}	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @see     JView::escape()	 * @since   12.1	 */	public function escape($output)	{		// Escape the output.		return htmlspecialchars($output, ENT_COMPAT, 'UTF-8');	}	/**	 * Method to get the view layout.	 *	 * @return  string  The layout name.	 *	 * @since   12.1	 */	public function getLayout()	{		return $this->layout;	}	/**	 * Method to get the layout path.	 *	 * @param   string  $layout  The layout name.	 *	 * @return  mixed  The layout file name if found, false otherwise.	 *	 * @since   12.1	 */	public function getPath($layout)	{		// Get the layout file name.		$file = JPath::clean($layout . '.php');		// Find the layout file path.		$path = JPath::find(clone($this->paths), $file);		return $path;	}	/**	 * Method to get the view paths.	 *	 * @return  SplPriorityQueue  The paths queue.	 *	 * @since   12.1	 */	public function getPaths()	{		return $this->paths;	}	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function render()	{		// Get the layout path.		$path = $this->getPath($this->getLayout());		// Check if the layout path was found.		if (!$path)		{			throw new RuntimeException('Layout Path Not Found');		}		// Start an output buffer.		ob_start();		// Load the layout.		include $path;		// Get the layout contents.		$output = ob_get_clean();		return $output;	}	/**	 * Method to set the view layout.	 *	 * @param   string  $layout  The layout name.	 *	 * @return  JViewHtml  Method supports chaining.	 *	 * @since   12.1	 */	public function setLayout($layout)	{		$this->layout = $layout;		return $this;	}	/**	 * Method to set the view paths.	 *	 * @param   SplPriorityQueue  $paths  The paths queue.	 *	 * @return  JViewHtml  Method supports chaining.	 *	 * @since   12.1	 */	public function setPaths(SplPriorityQueue $paths)	{		$this->paths = $paths;		return $this;	}	/**	 * Method to load the paths queue.	 *	 * @return  SplPriorityQueue  The paths queue.	 *	 * @since   12.1	 */	protected function loadPaths()	{		return new SplPriorityQueue;	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.beez5 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;if (!$templateparams->get('html5', 0)){	require JPATH_BASE.'/components/com_content/views/archive/tmpl/default_items.php';	//evtl. ersetzen durch JPATH_COMPONENT.'/views/...'} else {JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');$params = &$this->params;?><ul id="archive-items"><?php foreach ($this->items as $i => $item) : ?>	<li class="row<?php echo $i % 2; ?>">		<h2>		<?php if ($params->get('link_titles')) : ?>			<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug)); ?>">				<?php echo $this->escape($item->title); ?></a>		<?php else: ?>				<?php echo $this->escape($item->title); ?>		<?php endif; ?>		</h2><?php if (($params->get('show_author')) or ($params->get('show_parent_category')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date'))  or ($params->get('show_hits'))) : ?> <dl class="article-info"> <dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt><?php endif; ?><?php if ($params->get('show_parent_category')) : ?>		<dd class="parent-category-name">			<?php	$title = $this->escape($item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($item->parent_slug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_parent_category') && $item->parent_slug) : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_category')) : ?>		<dd class="category-name">			<?php	$title = $this->escape($item->category_title);					$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($item->catslug)) . '">' . $title . '</a>'; ?>			<?php if ($params->get('link_category') && $item->catslug) : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_create_date')) : ?>		<dd class="create">		<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_modify_date')) : ?>		<dd class="modified">		<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $item->modified, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_publish_date')) : ?>		<dd class="published">		<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $item->publish_up, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_author') && !empty($item->author )) : ?>	<dd class="createdby">		<?php $author = $item->author; ?>		<?php $author = ($item->created_by_alias ? $item->created_by_alias : $author);?>			<?php if (!empty($item->contactid ) &&  $params->get('link_author') == true):?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY',					JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id=' . $item->contactid), $author)				); ?>			<?php else :?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>			<?php endif; ?>	</dd><?php endif; ?><?php if ($params->get('show_hits')) : ?>		<dd class="hits">		<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $item->hits); ?>		</dd><?php endif; ?><?php if (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date'))  or ($params->get('show_hits'))) :?>	 </dl><?php endif; ?><?php  if ($params->get('show_intro')) :?>		<div class="intro">			<?php echo JHtml::_('string.truncate', $item->introtext, $params->get('introtext_limit')); ?>		</div>		<?php endif; ?>	</li><?php endforeach; ?></ul><div id="pagination">	<span><?php echo $this->pagination->getPagesLinks(); ?></span>	<span><?php echo $this->pagination->getPagesCounter(); ?></span></div><?php } ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="installer-database">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=database');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<?php if ($this->errorCount === 0) : ?>			<div class="alert alert-info">				<a class="close" data-dismiss="alert" href="#">&times;</a>				<?php echo JText::_('COM_INSTALLER_MSG_DATABASE_OK'); ?>			</div>			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'other')); ?>		<?php else : ?>			<div class="alert alert-error">				<a class="close" data-dismiss="alert" href="#">&times;</a>				<?php echo JText::_('COM_INSTALLER_MSG_DATABASE_ERRORS'); ?>			</div>			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'problems')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'problems', JText::plural('COM_INSTALLER_MSG_N_DATABASE_ERROR_PANEL', $this->errorCount)); ?>				<fieldset class="panelform">						<ul>						<?php if (!$this->filterParams) : ?>							<li><?php echo JText::_('COM_INSTALLER_MSG_DATABASE_FILTER_ERROR'); ?>						<?php endif; ?>						<?php if (!(strncmp($this->schemaVersion, JVERSION, 5) === 0)) : ?>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SCHEMA_ERROR', $this->schemaVersion, JVERSION); ?></li>						<?php endif; ?>						<?php if (($this->updateVersion != JVERSION)) : ?>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_UPDATEVERSION_ERROR', $this->updateVersion, JVERSION); ?></li>						<?php endif; ?>						<?php foreach ($this->errors as $line => $error) : ?>							<?php $key = 'COM_INSTALLER_MSG_DATABASE_' . $error->queryType;							$msgs = $error->msgElements;							$file = basename($error->file);							$msg0 = (isset($msgs[0])) ? $msgs[0] : ' ';							$msg1 = (isset($msgs[1])) ? $msgs[1] : ' ';							$msg2 = (isset($msgs[2])) ? $msgs[2] : ' ';							$message = JText::sprintf($key, $file, $msg0, $msg1, $msg2); ?>							<li><?php echo $message; ?></li>						<?php endforeach; ?>						</ul>					</fieldset>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'other', JText::_('COM_INSTALLER_MSG_DATABASE_INFO', true)); ?>				<div class="control-group" >					<fieldset class="panelform">						<ul>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SCHEMA_VERSION', $this->schemaVersion); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_UPDATE_VERSION', $this->updateVersion); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_DRIVER', JFactory::getDbo()->name); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_CHECKED_OK', count($this->results['ok'])); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SKIPPED', count($this->results['skipped'])); ?></li>						</ul>					</fieldset>				</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-params');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>		<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>		<?php endforeach; ?>		</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$class = ' class="first"';?><?php if (count($this->children[$this->category->id]) > 0) :?>	<ul>	<?php foreach ($this->children[$this->category->id] as $id => $child) : ?>		<?php		if ($this->params->get('show_empty_categories') || $child->getNumItems(true) || count($child->getChildren())) :			if (!isset($this->children[$this->category->id][$id + 1])) :				$class = ' class="last"';			endif;		?>		<li<?php echo $class; ?>>			<?php $class = ''; ?>				<h3 class="item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">					<?php echo $this->escape($child->title); ?></a>				</h3>				<?php if ($this->params->get('show_subcat_desc') == 1) :?>				<?php if ($child->description and $this->params->get('show_description') != 0 ) : ?>					<div class="category-desc">						<?php echo JHtml::_('content.prepare', $child->description, '', 'com_content.category'); ?>					</div>				<?php endif; ?>				<?php endif; ?>				<?php if ($child->getNumItems() == true) : ?>				<dl>					<dt>						<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>					</dt>					<dd>						<?php echo $child->getNumItems(true); ?>					</dd>				</dl>				<?php endif; ?>				<?php if (count($child->getChildren()) > 0 ) :					$this->children[$child->id] = $child->getChildren();					$this->category = $child;					$this->maxLevel--;					if ($this->maxLevel != 0) :						echo $this->loadTemplate('children');					endif;					$this->category = $child->getParent();					$this->maxLevel++;				endif; ?>			</li>		<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform long">	<legend><?php echo JText::_('COM_CONFIG_METADATA_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('metadata') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>			</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="submenu-box">	<ul id="submenu" class="configuration">		<li><a href="#" onclick="return false;" id="site" class="active"><?php echo JText::_('JSITE'); ?></a></li>		<li><a href="#" onclick="return false;" id="system"><?php echo JText::_('COM_CONFIG_SYSTEM'); ?></a></li>		<li><a href="#" onclick="return false;" id="server"><?php echo JText::_('COM_CONFIG_SERVER'); ?></a></li>		<li><a href="#" onclick="return false;" id="permissions"><?php echo JText::_('COM_CONFIG_PERMISSIONS'); ?></a></li>		<li><a href="#" onclick="return false;" id="filters"><?php echo JText::_('COM_CONFIG_TEXT_FILTERS')?></a></li>	</ul>	<div class="clr"></div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_finder')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Finder');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';$controller	= JControllerLegacy::getInstance('Weblinks');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleRules extends JFormRule{	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Get the possible field actions and the ones posted to validate them.		$fieldActions = self::getFieldActions($element);		$valueActions = self::getValueActions($value);		// Make sure that all posted actions are in the list of possible actions for the field.		foreach ($valueActions as $action)		{			if (!in_array($action, $fieldActions))			{				return false;			}		}		return true;	}	/**	 * Method to get the list of permission action names from the form field value.	 *	 * @param   mixed  $value  The form field value to validate.	 *	 * @return  array  A list of permission action names from the form field value.	 *	 * @since   11.1	 */	protected function getValueActions($value)	{		$actions = array();		// Iterate over the asset actions and add to the actions.		foreach ((array) $value as $name => $rules)		{			$actions[] = $name;		}		return $actions;	}	/**	 * Method to get the list of possible permission action names for the form field.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the	 *                                      form field object.	 *	 * @return  array   A list of permission action names from the form field element definition.	 *	 * @since   11.1	 */	protected function getFieldActions(SimpleXMLElement $element)	{		$actions = array();		// Initialise some field attributes.		$section = $element['section'] ? (string) $element['section'] : '';		$component = $element['component'] ? (string) $element['component'] : '';		// Get the asset actions for the element.		$elActions = JAccess::getActions($component, $section);		// Iterate over the asset actions and add to the actions.		foreach ($elActions as $item)		{			$actions[] = $item->name;		}		// Iterate over the children and add to the actions.		foreach ($element->children() as $el)		{			if ($el->getName() == 'action')			{				$actions[] = (string) $el['name'];			}		}		return $actions;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Login component * * @package     Joomla.Administrator * @subpackage  com_login * @since       1.6 */class LoginViewLogin extends JViewLegacy{}
<?php/** * Verifies that class members have scope modifiers. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MethodScopeSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if(class_exists('PHP_CodeSniffer_Standards_AbstractScopeSniff', true) === false){    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractScopeSniff not found');}/** * Verifies that class members have scope modifiers. * * Example: * class Foo * { *     <b class="good">public function foo()</b> *     { *     } * *     <b class="bad">function foo()</b> *     { *     } * } * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Classes_MethodScopeSniff extends PHP_CodeSniffer_Standards_AbstractScopeSniff{    /**     * Constructs a Squiz_Sniffs_Scope_MethodScopeSniff.     */    public function __construct()    {        parent::__construct(array(T_CLASS, T_INTERFACE), array(T_FUNCTION));    }//function    /**     * Processes the function tokens within the class.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     * @param integer                  $currScope The current scope opener token.     *     * @return void     */    protected function processTokenWithinScope(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $currScope)    {        $tokens = $phpcsFile->getTokens();        $methodName = $phpcsFile->getDeclarationName($stackPtr);        if($methodName === null)        {            // Ignore closures.            return;        }        $modifier = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$scopeModifiers, $stackPtr);        if(($modifier === false) || ($tokens[$modifier]['line'] !== $tokens[$stackPtr]['line']))        {            $error = sprintf('No scope modifier specified for function "%s"'            , $methodName);            $phpcsFile->addWarning($error, $stackPtr, 'Missing');        }    }//function}//class
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorSqlite extends JDatabaseIteratorPdo{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Set up the sanitised target for the ul$ulTarget = str_replace('/', '-', $this->folders['data']->relative);?><ul class="nav nav-list collapse in" id="collapseFolder-<?php echo $ulTarget; ?>"><?php if (isset($this->folders['children'])) :	foreach ($this->folders['children'] as $folder) :	// Get a sanitised name for the target	$target = str_replace('/', '-', $folder['data']->relative); ?>	<li id="<?php echo $target; ?>">		<i class="icon-folder-2 pull-left" data-toggle="collapse" data-target="#collapseFolder-<?php echo $target; ?>"></i>		<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $folder['data']->relative; ?>" target="folderframe">			<?php echo $folder['data']->name; ?>		</a>		<?php echo $this->getFolderLevel($folder); ?>	</li><?php endforeach;endif; ?></ul>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/*** Utilities for processing "special" characters in UTF-8. "Special" largely means anything which would* be regarded as a non-word character, like ASCII control characters and punctuation. This has a "Roman"* bias - it would be unaware of modern Chinese "punctuation" characters for example.* Note: requires utils/unicode.php to be loaded* @version $Id$* @package utf8* @subpackage utils* @see utf8_is_valid*///--------------------------------------------------------------------/*** Used internally. Builds a PCRE pattern from the $UTF8_SPECIAL_CHARS* array defined in this file* The $UTF8_SPECIAL_CHARS should contain all special characters (non-letter/non-digit)* defined in the various local charsets - it's not a complete list of* non-alphanum characters in UTF-8. It's not perfect but should match most* cases of special chars.* This function adds the control chars 0x00 to 0x19 to the array of* special chars (they are not included in $UTF8_SPECIAL_CHARS)* @package utf8* @subpackage utils* @return string* @see utf8_from_unicode* @see utf8_is_word_chars* @see utf8_strip_specials*/function utf8_specials_pattern() {    static $pattern = NULL;    if ( !$pattern ) {        $UTF8_SPECIAL_CHARS = array(    0x001a, 0x001b, 0x001c, 0x001d, 0x001e, 0x001f, 0x0020, 0x0021, 0x0022, 0x0023,    0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002a, 0x002b, 0x002c,    0x002f,         0x003b, 0x003c, 0x003d, 0x003e, 0x003f, 0x0040, 0x005b,    0x005c, 0x005d, 0x005e,         0x0060, 0x007b, 0x007c, 0x007d, 0x007e,    0x007f, 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088,    0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f, 0x0090, 0x0091, 0x0092,    0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009a, 0x009b, 0x009c,    0x009d, 0x009e, 0x009f, 0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6,    0x00a7, 0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af, 0x00b0,    0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7, 0x00b8, 0x00b9, 0x00ba,    0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf, 0x00d7, 0x00f7, 0x02c7, 0x02d8, 0x02d9,    0x02da, 0x02db, 0x02dc, 0x02dd, 0x0300, 0x0301, 0x0303, 0x0309, 0x0323, 0x0384,    0x0385, 0x0387, 0x03b2, 0x03c6, 0x03d1, 0x03d2, 0x03d5, 0x03d6, 0x05b0, 0x05b1,    0x05b2, 0x05b3, 0x05b4, 0x05b5, 0x05b6, 0x05b7, 0x05b8, 0x05b9, 0x05bb, 0x05bc,    0x05bd, 0x05be, 0x05bf, 0x05c0, 0x05c1, 0x05c2, 0x05c3, 0x05f3, 0x05f4, 0x060c,    0x061b, 0x061f, 0x0640, 0x064b, 0x064c, 0x064d, 0x064e, 0x064f, 0x0650, 0x0651,    0x0652, 0x066a, 0x0e3f, 0x200c, 0x200d, 0x200e, 0x200f, 0x2013, 0x2014, 0x2015,    0x2017, 0x2018, 0x2019, 0x201a, 0x201c, 0x201d, 0x201e, 0x2020, 0x2021, 0x2022,    0x2026, 0x2030, 0x2032, 0x2033, 0x2039, 0x203a, 0x2044, 0x20a7, 0x20aa, 0x20ab,    0x20ac, 0x2116, 0x2118, 0x2122, 0x2126, 0x2135, 0x2190, 0x2191, 0x2192, 0x2193,    0x2194, 0x2195, 0x21b5, 0x21d0, 0x21d1, 0x21d2, 0x21d3, 0x21d4, 0x2200, 0x2202,    0x2203, 0x2205, 0x2206, 0x2207, 0x2208, 0x2209, 0x220b, 0x220f, 0x2211, 0x2212,    0x2215, 0x2217, 0x2219, 0x221a, 0x221d, 0x221e, 0x2220, 0x2227, 0x2228, 0x2229,    0x222a, 0x222b, 0x2234, 0x223c, 0x2245, 0x2248, 0x2260, 0x2261, 0x2264, 0x2265,    0x2282, 0x2283, 0x2284, 0x2286, 0x2287, 0x2295, 0x2297, 0x22a5, 0x22c5, 0x2310,    0x2320, 0x2321, 0x2329, 0x232a, 0x2469, 0x2500, 0x2502, 0x250c, 0x2510, 0x2514,    0x2518, 0x251c, 0x2524, 0x252c, 0x2534, 0x253c, 0x2550, 0x2551, 0x2552, 0x2553,    0x2554, 0x2555, 0x2556, 0x2557, 0x2558, 0x2559, 0x255a, 0x255b, 0x255c, 0x255d,    0x255e, 0x255f, 0x2560, 0x2561, 0x2562, 0x2563, 0x2564, 0x2565, 0x2566, 0x2567,    0x2568, 0x2569, 0x256a, 0x256b, 0x256c, 0x2580, 0x2584, 0x2588, 0x258c, 0x2590,    0x2591, 0x2592, 0x2593, 0x25a0, 0x25b2, 0x25bc, 0x25c6, 0x25ca, 0x25cf, 0x25d7,    0x2605, 0x260e, 0x261b, 0x261e, 0x2660, 0x2663, 0x2665, 0x2666, 0x2701, 0x2702,    0x2703, 0x2704, 0x2706, 0x2707, 0x2708, 0x2709, 0x270c, 0x270d, 0x270e, 0x270f,    0x2710, 0x2711, 0x2712, 0x2713, 0x2714, 0x2715, 0x2716, 0x2717, 0x2718, 0x2719,    0x271a, 0x271b, 0x271c, 0x271d, 0x271e, 0x271f, 0x2720, 0x2721, 0x2722, 0x2723,    0x2724, 0x2725, 0x2726, 0x2727, 0x2729, 0x272a, 0x272b, 0x272c, 0x272d, 0x272e,    0x272f, 0x2730, 0x2731, 0x2732, 0x2733, 0x2734, 0x2735, 0x2736, 0x2737, 0x2738,    0x2739, 0x273a, 0x273b, 0x273c, 0x273d, 0x273e, 0x273f, 0x2740, 0x2741, 0x2742,    0x2743, 0x2744, 0x2745, 0x2746, 0x2747, 0x2748, 0x2749, 0x274a, 0x274b, 0x274d,    0x274f, 0x2750, 0x2751, 0x2752, 0x2756, 0x2758, 0x2759, 0x275a, 0x275b, 0x275c,    0x275d, 0x275e, 0x2761, 0x2762, 0x2763, 0x2764, 0x2765, 0x2766, 0x2767, 0x277f,    0x2789, 0x2793, 0x2794, 0x2798, 0x2799, 0x279a, 0x279b, 0x279c, 0x279d, 0x279e,    0x279f, 0x27a0, 0x27a1, 0x27a2, 0x27a3, 0x27a4, 0x27a5, 0x27a6, 0x27a7, 0x27a8,    0x27a9, 0x27aa, 0x27ab, 0x27ac, 0x27ad, 0x27ae, 0x27af, 0x27b1, 0x27b2, 0x27b3,    0x27b4, 0x27b5, 0x27b6, 0x27b7, 0x27b8, 0x27b9, 0x27ba, 0x27bb, 0x27bc, 0x27bd,    0x27be, 0xf6d9, 0xf6da, 0xf6db, 0xf8d7, 0xf8d8, 0xf8d9, 0xf8da, 0xf8db, 0xf8dc,    0xf8dd, 0xf8de, 0xf8df, 0xf8e0, 0xf8e1, 0xf8e2, 0xf8e3, 0xf8e4, 0xf8e5, 0xf8e6,    0xf8e7, 0xf8e8, 0xf8e9, 0xf8ea, 0xf8eb, 0xf8ec, 0xf8ed, 0xf8ee, 0xf8ef, 0xf8f0,    0xf8f1, 0xf8f2, 0xf8f3, 0xf8f4, 0xf8f5, 0xf8f6, 0xf8f7, 0xf8f8, 0xf8f9, 0xf8fa,    0xf8fb, 0xf8fc, 0xf8fd, 0xf8fe, 0xfe7c, 0xfe7d,            );        $pattern = preg_quote(utf8_from_unicode($UTF8_SPECIAL_CHARS), '/');        $pattern = '/[\x00-\x19'.$pattern.']/u';    }    return $pattern;}//--------------------------------------------------------------------/*** Checks a string for whether it contains only word characters. This* is logically equivalent to the \w PCRE meta character. Note that* this is not a 100% guarantee that the string only contains alpha /* numeric characters but just that common non-alphanumeric are not* in the string, including ASCII device control characters.* @package utf8* @subpackage utils* @param string to check* @return boolean TRUE if the string only contains word characters* @see utf8_specials_pattern*/function utf8_is_word_chars($str) {    return !(bool)preg_match(utf8_specials_pattern(),$str);}//--------------------------------------------------------------------/*** Removes special characters (nonalphanumeric) from a UTF-8 string** This can be useful as a helper for sanitizing a string for use as* something like a file name or a unique identifier. Be warned though* it does not handle all possible non-alphanumeric characters and is* not intended is some kind of security / injection filter.** @package utf8* @subpackage utils* @author Andreas Gohr <andi@splitbrain.org>* @param string $string The UTF8 string to strip of special chars* @param string (optional) $repl   Replace special with this string* @return string with common non-alphanumeric characters removed* @see utf8_specials_pattern*/function utf8_strip_specials($string, $repl=''){    return preg_replace(utf8_specials_pattern(), $repl, $string);}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewRemoveHtml $this */?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="alert alert-error inlineError" id="theDefaultError" style="display: none">		<h4 class="alert-heading"><?php echo JText::_('JERROR'); ?></h4>		<p id="theDefaultErrorMessage"></p>	</div>	<div class="alert alert-success">	<h3><?php echo JText::_('INSTL_COMPLETE_TITLE'); ?></h3>	</div>	<div class="alert">		<p><?php echo JText::_('INSTL_COMPLETE_REMOVE_INSTALLATION'); ?></p>		<input type="button" class="btn btn-warning" name="instDefault" onclick="Install.removeFolder(this);" value="<?php echo JText::_('INSTL_COMPLETE_REMOVE_FOLDER'); ?>" />	</div>	<div class="btn-toolbar">		<div class="btn-group">			<a class="btn" href="<?php echo JURI::root(); ?>" title="<?php echo JText::_('JSITE'); ?>"><i class="icon-eye-open"></i> <?php echo JText::_('JSITE'); ?></a>		</div>		<div class="btn-group">			<a class="btn btn-primary" href="<?php echo JURI::root(); ?>administrator/" title="<?php echo JText::_('JADMINISTRATOR'); ?>"><i class="icon-lock icon-white"></i> <?php echo JText::_('JADMINISTRATOR'); ?></a>		</div>	</div>	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Rijndael 256 encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipherRijndael256 extends JCryptCipherMcrypt{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type = MCRYPT_RIJNDAEL_256;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode = MCRYPT_MODE_CBC;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType = 'rijndael256';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Displays the multilang status. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.7.1 */class LanguagesViewMultilangstatus extends JViewLegacy{	/**	 * Display the view	 */	public function display($tpl = null)	{		require_once JPATH_COMPONENT . '/helpers/multilangstatus.php';		$this->homes			= MultilangstatusHelper::getHomes();		$this->language_filter	= JLanguageMultilang::isEnabled();		$this->switchers		= MultilangstatusHelper::getLangswitchers();		$this->listUsersError	= MultilangstatusHelper::getContacts();		$this->contentlangs		= MultilangstatusHelper::getContentlangs();		$this->site_langs		= MultilangstatusHelper::getSitelangs();		$this->statuses			= MultilangstatusHelper::getStatus();		$this->homepages		= MultilangstatusHelper::getHomepages();		parent::display($tpl);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Factory class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseFactory{	/**	 * Contains the current JDatabaseFactory instance	 *	 * @var    JDatabaseFactory	 * @since  12.1	 */	private static $_instance = null;	/**	 * Method to return a JDatabaseDriver instance based on the given options. There are three global options and then	 * the rest are specific to the database driver. The 'database' option determines which database is to	 * be used for the connection. The 'select' option determines whether the connector should automatically select	 * the chosen database.	 *	 * Instances are unique to the given options and new objects are only created when a unique options array is	 * passed into the method.  This ensures that we don't end up with unnecessary database connection resources.	 *	 * @param   string  $name     Name of the database driver you'd like to instantiate	 * @param   array   $options  Parameters to be passed to the database driver.	 *	 * @return  JDatabaseDriver  A database driver object.	 *	 * @since   12.1	 */	public function getDriver($name = 'mysqli', $options = array())	{		// Sanitize the database connector options.		$options['driver']   = preg_replace('/[^A-Z0-9_\.-]/i', '', $name);		$options['database'] = (isset($options['database'])) ? $options['database'] : null;		$options['select']   = (isset($options['select'])) ? $options['select'] : true;		// Derive the class name from the driver.		$class = 'JDatabaseDriver' . ucfirst(strtolower($options['driver']));		// If the class still doesn't exist we have nothing left to do but throw an exception.  We did our best.		if (!class_exists($class))		{			throw new RuntimeException(sprintf('Unable to load Database Driver: %s', $options['driver']));		}		// Create our new JDatabaseDriver connector based on the options given.		try		{			$instance = new $class($options);		}		catch (RuntimeException $e)		{			throw new RuntimeException(sprintf('Unable to connect to the Database: %s', $e->getMessage()));		}		return $instance;	}	/**	 * Gets an exporter class object.	 *	 * @param   string           $name  Name of the driver you want an exporter for.	 * @param   JDatabaseDriver  $db    Optional JDatabaseDriver instance	 *	 * @return  JDatabaseExporter  An exporter object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getExporter($name, JDatabaseDriver $db = null)	{		// Derive the class name from the driver.		$class = 'JDatabaseExporter' . ucfirst(strtolower($name));		// Make sure we have an exporter class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Exporter not found.');		}		$o = new $class;		if ($db instanceof JDatabaseDriver)		{			$o->setDbo($db);		}		return $o;	}	/**	 * Gets an importer class object.	 *	 * @param   string           $name  Name of the driver you want an importer for.	 * @param   JDatabaseDriver  $db    Optional JDatabaseDriver instance	 *	 * @return  JDatabaseImporter  An importer object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getImporter($name, JDatabaseDriver $db = null)	{		// Derive the class name from the driver.		$class = 'JDatabaseImporter' . ucfirst(strtolower($name));		// Make sure we have an importer class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database importer not found.');		}		$o = new $class;		if ($db instanceof JDatabaseDriver)		{			$o->setDbo($db);		}		return $o;	}	/**	 * Gets an instance of the factory object.	 *	 * @return  JDatabaseFactory	 *	 * @since   12.1	 */	public static function getInstance()	{		return self::$_instance ? self::$_instance : new JDatabaseFactory;	}	/**	 * Get the current query object or a new JDatabaseQuery object.	 *	 * @param   string           $name  Name of the driver you want an importer for.	 * @param   JDatabaseDriver  $db    Optional JDatabaseDriver instance	 *	 * @return  JDatabaseQuery  The current query object or a new object extending the JDatabaseQuery class.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getQuery($name, JDatabaseDriver $db = null)	{		// Derive the class name from the driver.		$class = 'JDatabaseQuery' . ucfirst(strtolower($name));		// Make sure we have a query class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Query class not found');		}		return new $class($db);	}	/**	 * Gets an instance of a factory object to return on subsequent calls of getInstance.	 *	 * @param   JDatabaseFactory  $instance  A JDatabaseFactory object.	 *	 * @return  void	 *	 * @since   12.1	 */	public static function setInstance(JDatabaseFactory $instance = null)	{		self::$_instance = $instance;	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Version information class for the Joomla Platform. * * @package  Joomla.Platform * @since    11.1 */final class JPlatform{	// Product name.	const PRODUCT = 'Joomla Platform';	// Release version.	const RELEASE = '12.2';	// Maintenance version.	const MAINTENANCE = '0';	// Development STATUS.	const STATUS = 'Stable';	// Build number.	const BUILD = 0;	// Code name.	const CODE_NAME = 'Neil Armstrong';	// Release date.	const RELEASE_DATE = '21-September-2012';	// Release time.	const RELEASE_TIME = '00:00';	// Release timezone.	const RELEASE_TIME_ZONE = 'GMT';	// Copyright Notice.	const COPYRIGHT = 'Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved.';	// Link text.	const LINK_TEXT = '<a href="http://www.joomla.org">Joomla!</a> is Free Software released under the GNU General Public License.';	/**	 * Compares two a "PHP standardized" version number against the current Joomla Platform version.	 *	 * @param   string  $minimum  The minimum version of the Joomla Platform which is compatible.	 *	 * @return  boolean  True if the version is compatible.	 *	 * @see     http://www.php.net/version_compare	 * @since   11.1	 */	public static function isCompatible($minimum)	{		return (version_compare(self::getShortVersion(), $minimum, 'eq') == 1);	}	/**	 * Gets a "PHP standardized" version string for the current Joomla Platform.	 *	 * @return  string  Version string.	 *	 * @since   11.1	 */	public static function getShortVersion()	{		return self::RELEASE . '.' . self::MAINTENANCE;	}	/**	 * Gets a version string for the current Joomla Platform with all release information.	 *	 * @return  string  Complete version string.	 *	 * @since   11.1	 */	public static function getLongVersion()	{		return self::PRODUCT . ' ' . self::RELEASE . '.' . self::MAINTENANCE . ' ' . self::STATUS . ' [ ' . self::CODE_NAME . ' ] '			. self::RELEASE_DATE . ' ' . self::RELEASE_TIME . ' ' . self::RELEASE_TIME_ZONE;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Default controller class for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerDefault extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Get the document object.		$document = $app->getDocument();		// Set the default view name and format from the request.		if (file_exists(JPATH_CONFIGURATION . '/configuration.php') && (filesize(JPATH_CONFIGURATION . '/configuration.php') > 10)			&& file_exists(JPATH_INSTALLATION . '/index.php'))		{			$default_view = 'remove';		}		else		{			$default_view = 'site';		}		$vName   = $this->input->getWord('view', $default_view);		$vFormat = $document->getType();		$lName   = $this->input->getWord('layout', 'default');		if (strcmp($vName, $default_view) == 0)		{			$this->input->set('view', $default_view);		}		switch ($vName)		{			case 'preinstall':				$model        = new InstallationModelSetup;				$sufficient   = $model->getPhpOptionsSufficient();				$checkOptions = false;				$options = $model->getOptions();				if ($sufficient)				{					$app->redirect('index.php');				}				break;			case 'languages':			case 'defaultlanguage':				$model = new InstallationModelLanguages;				$checkOptions = false;				$options = array();				break;			default:				$model        = new InstallationModelSetup;				$sufficient   = $model->getPhpOptionsSufficient();				$checkOptions = true;				$options = $model->getOptions();				if (!$sufficient)				{					$app->redirect('index.php?view=preinstall');				}				break;		}		if ($vName != $default_view && ($checkOptions && empty($options)))		{			$this->setRedirect('index.php');		}		// Include the component HTML helpers.		JHtml::addIncludePath(JPATH_COMPONENT . '/helper/html');		// Register the layout paths for the view		$paths = new SplPriorityQueue;		$paths->insert(JPATH_INSTALLATION . '/view/' . $vName . '/tmpl', 'normal');		$vClass = 'InstallationView' . ucfirst($vName) . ucfirst($vFormat);		if (!class_exists($vClass))		{			$vClass = 'InstallationViewDefault';		}		/* @var JViewHtml $view */		$view = new $vClass($model, $paths);		$view->setLayout($lName);		// Render our view and return it to the application.		return $view->render();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * Finder Component Controller. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached. [optional]	 * @param   array    $urlparams  An array of safe url parameters and their variable types,	 *                               for valid values see {@link JFilterInput::clean()}. [optional]	 *	 * @return  JControllerLegacy  This object is to support chaining.	 *	 * @since   2.5	 */	public function display($cachable = false, $urlparams = array())	{		$input = JFactory::getApplication()->input;		$cachable = true;		// Load plug-in language files.		FinderHelperLanguage::loadPluginLanguage();		// Set the default view name and format from the Request.		$viewName = $input->get('view', 'search', 'word');		$input->set('view', $viewName);		// Don't cache view for search queries		if ($input->get('q') || $input->get('f') || $input->get('t'))		{			$cachable = false;		}		$safeurlparams = array(			'f' 	=> 'INT',			'lang' 	=> 'CMD'		);		return parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners Controller * * @package     Joomla.Site * @subpackage  com_banners * @since       1.5 */class BannersController extends JControllerLegacy{	public function click()	{		$id = $this->input->getInt('id', 0);		if ($id)		{			$model = $this->getModel('Banner', 'BannersModel', array('ignore_request' => true));			$model->setState('banner.id', $id);			$model->click();			$this->setRedirect($model->getUrl());		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of categories * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$weblinkId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, title AS text' .				' FROM #__weblinks' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $weblinkId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $weblinkId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to prepare installation for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSummary extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$model->checkForm('summary');		// Redirect to the page.		$r = new stdClass;		$r->view = 'install';		$app->sendJsonResponse($r);	}}
<?php/** * Parses and verifies the doc comments for functions. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FunctionCommentSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_CommentParser_FunctionCommentParser', true) === false) {    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_CommentParser_FunctionCommentParser not found');}/** * Parses and verifies the doc comments for functions. * * Verifies that : * <ul> *  <li>A comment exists</li> *  <li>There is a blank newline after the short description.</li> *  <li>There is a blank newline between the long and short description.</li> *  <li>There is a blank newline between the long description and tags.</li> *  <li>Parameter names represent those in the method.</li> *  <li>Parameter comments are in the correct order</li> *  <li>Parameter comments are complete</li> *  <li>A space is present before the first and after the last parameter</li> *  <li>A return type exists</li> *  <li>There must be one blank line between body and headline comments.</li> *  <li>Any throw tag must have an exception class.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Commenting_FunctionCommentSniff implements PHP_CodeSniffer_Sniff{    /**     * The name of the method that we are currently processing.     *     * @var string     */    private $_methodName = '';    /**     * The position in the stack where the fucntion token was found.     *     * @var int     */    private $_functionToken = null;    /**     * The position in the stack where the class token was found.     *     * @var int     */    private $_classToken = null;    /**     * The function comment parser for the current method.     *     * @var PHP_CodeSniffer_Comment_Parser_FunctionCommentParser     */    protected $commentParser = null;    /**     * The current PHP_CodeSniffer_File object we are processing.     *     * @var PHP_CodeSniffer_File     */    protected $currentFile = null;    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_FUNCTION);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $find = array(                 T_COMMENT,                 T_DOC_COMMENT,                 T_CLASS,                 T_FUNCTION,                 T_OPEN_TAG,                );        $commentEnd = $phpcsFile->findPrevious($find, ($stackPtr - 1));        if ($commentEnd === false) {            return;        }        $this->currentFile = $phpcsFile;        $tokens            = $phpcsFile->getTokens();        // If the token that we found was a class or a function, then this        // function has no doc comment.        $code = $tokens[$commentEnd]['code'];        if ($code === T_COMMENT) {            $error = 'You must use "/**" style comments for a function comment';            $phpcsFile->addError($error, $stackPtr, 'WrongStyle');            return;        } else if ($code !== T_DOC_COMMENT) {            $phpcsFile->addError('Missing function doc comment', $stackPtr, 'Missing');            return;        }        // If there is any code between the function keyword and the doc block        // then the doc block is not for us.        $ignore    = PHP_CodeSniffer_Tokens::$scopeModifiers;        $ignore[]  = T_STATIC;        $ignore[]  = T_WHITESPACE;        $ignore[]  = T_ABSTRACT;        $ignore[]  = T_FINAL;        $prevToken = $phpcsFile->findPrevious($ignore, ($stackPtr - 1), null, true);        if ($prevToken !== $commentEnd) {            $phpcsFile->addError('Missing function doc comment', $stackPtr, 'Missing');            return;        }        $this->_functionToken = $stackPtr;        $this->_classToken = null;        foreach ($tokens[$stackPtr]['conditions'] as $condPtr => $condition) {            if ($condition === T_CLASS || $condition === T_INTERFACE) {                $this->_classToken = $condPtr;                break;            }        }        // If the first T_OPEN_TAG is right before the comment, it is probably        // a file comment.        $commentStart = ($phpcsFile->findPrevious(T_DOC_COMMENT, ($commentEnd - 1), null, true) + 1);        $prevToken    = $phpcsFile->findPrevious(T_WHITESPACE, ($commentStart - 1), null, true);        if ($tokens[$prevToken]['code'] === T_OPEN_TAG) {            // Is this the first open tag?            if ($stackPtr === 0 || $phpcsFile->findPrevious(T_OPEN_TAG, ($prevToken - 1)) === false) {                $phpcsFile->addError('Missing function doc comment', $stackPtr, 'Missing');                return;            }        }        $comment           = $phpcsFile->getTokensAsString($commentStart, ($commentEnd - $commentStart + 1));        $this->_methodName = $phpcsFile->getDeclarationName($stackPtr);        try {            $this->commentParser = new PHP_CodeSniffer_CommentParser_FunctionCommentParser($comment, $phpcsFile);            $this->commentParser->parse();        } catch (PHP_CodeSniffer_CommentParser_ParserException $e) {            $line = ($e->getLineWithinComment() + $commentStart);            $phpcsFile->addError($e->getMessage(), $line, 'FailedParse');            return;        }        $comment = $this->commentParser->getComment();        if (is_null($comment) === true) {            $error = 'Function doc comment is empty';            $phpcsFile->addError($error, $commentStart, 'Empty');            return;        }        $this->processParams($commentStart);        $this->processReturn($commentStart, $commentEnd);        $this->processThrows($commentStart);        // No extra newline before short description.        $short        = $comment->getShortComment();        $newlineCount = 0;        $newlineSpan  = strspn($short, $phpcsFile->eolChar);        if ($short !== '' && $newlineSpan > 0) {            $error = 'Extra newline(s) found before function comment short description';            $phpcsFile->addError($error, ($commentStart + 1), 'SpacingBeforeShort');        }        $newlineCount = (substr_count($short, $phpcsFile->eolChar) + 1);        // Exactly one blank line between short and long description.        $long = $comment->getLongComment();        if (empty($long) === false) {            $between        = $comment->getWhiteSpaceBetween();            $newlineBetween = substr_count($between, $phpcsFile->eolChar);            if ($newlineBetween !== 2) {                $error = 'There must be exactly one blank line between descriptions in function comment';                $phpcsFile->addError($error, ($commentStart + $newlineCount + 1), 'SpacingAfterShort');            }            $newlineCount += $newlineBetween;        }        // Exactly one blank line before tags.        $params = $this->commentParser->getTagOrders();        if (count($params) > 1) {            $newlineSpan = $comment->getNewlineAfter();            if ($newlineSpan !== 2) {                $error = 'There must be exactly one blank line before the tags in function comment';                if ($long !== '') {                    $newlineCount += (substr_count($long, $phpcsFile->eolChar) - $newlineSpan + 1);                }                $phpcsFile->addError($error, ($commentStart + $newlineCount), 'SpacingBeforeTags');                $short = rtrim($short, $phpcsFile->eolChar.' ');            }        }    }//end process()    /**     * Process any throw tags that this function comment has.     *     * @param int $commentStart The position in the stack where the     *                          comment started.     *     * @return void     */    protected function processThrows($commentStart)    {        if (count($this->commentParser->getThrows()) === 0) {            return;        }        foreach ($this->commentParser->getThrows() as $throw) {            $exception = $throw->getValue();            $errorPos  = ($commentStart + $throw->getLine());            if ($exception === '') {                $error = '@throws tag must contain the exception class name';                $this->currentFile->addError($error, $errorPos, 'EmptyThrows');            }        }    }//end processThrows()    /**     * Process the return comment of this function comment.     *     * @param int $commentStart The position in the stack where the comment started.     * @param int $commentEnd   The position in the stack where the comment ended.     *     * @return void     */    protected function processReturn($commentStart, $commentEnd)    {        // Skip constructor and destructor.        $className = '';        if ($this->_classToken !== null) {            $className = $this->currentFile->getDeclarationName($this->_classToken);            $className = strtolower(ltrim($className, '_'));        }        $methodName      = strtolower(ltrim($this->_methodName, '_'));        $isSpecialMethod = ($this->_methodName === '__construct' || $this->_methodName === '__destruct');        if ($isSpecialMethod === false && $methodName !== $className) {            // Report missing return tag.            if ($this->commentParser->getReturn() === null) {                $error = 'Missing @return tag in function comment';                $this->currentFile->addError($error, $commentEnd, 'MissingReturn');            } else if (trim($this->commentParser->getReturn()->getRawContent()) === '') {                $error    = '@return tag is empty in function comment';                $errorPos = ($commentStart + $this->commentParser->getReturn()->getLine());                $this->currentFile->addError($error, $errorPos, 'EmptyReturn');            } else {            	if (substr_count($this->commentParser->getReturn()->getWhitespaceAfter(), $this->currentFile->eolChar) !== 2) {	                $error    = 'Return comment requires a blank newline after it';	                $errorPos = ($this->commentParser->getReturn()->getLine() + $commentStart);	                $this->currentFile->addError($error, $errorPos, 'SpacingAfterReturn');            	}            }        }        else        {        	if ($this->commentParser->getReturn() != null)        	{        		$error    = 'Constructor and destructor comments must not have a @return tag';        		$errorPos = ($this->commentParser->getReturn()->getLine() + $commentStart);        		$this->currentFile->addError($error, $errorPos, 'UselessReturn');        	}        }    }//end processReturn()    /**     * Process the function parameter comments.     *     * @param int $commentStart The position in the stack where     *                          the comment started.     *     * @return void     */    protected function processParams($commentStart)    {        $realParams = $this->currentFile->getMethodParameters($this->_functionToken);        $params      = $this->commentParser->getParams();        $foundParams = array();        if (empty($params) === false) {            $lastParm = (count($params) - 1);            if (substr_count($params[$lastParm]->getWhitespaceAfter(), $this->currentFile->eolChar) !== 2) {                $error    = 'Last parameter comment requires a blank newline after it';                $errorPos = ($params[$lastParm]->getLine() + $commentStart);                $this->currentFile->addError($error, $errorPos, 'SpacingAfterParams');            }            // Parameters must appear immediately after the comment.            if ($params[0]->getOrder() !== 2) {                $error    = 'Parameters must appear immediately after the comment';                $errorPos = ($params[0]->getLine() + $commentStart);                $this->currentFile->addError($error, $errorPos, 'SpacingBeforeParams');            }            $previousParam      = null;            $spaceBeforeVar     = 10000;            $spaceBeforeComment = 10000;            $longestType        = 0;            $longestVar         = 0;            foreach ($params as $param) {                $paramComment = trim($param->getComment());                $errorPos     = ($param->getLine() + $commentStart);                // Make sure that there is only one space before the var type.                // Joomla change: 3 spaces to make it line up with the @return tag with a 2 space gap.                if ($param->getWhitespaceBeforeType() !== '   ') {                    $error = 'Expected 3 spaces before variable type';                    $this->currentFile->addError($error, $errorPos, 'BeforeParamType');                }                $spaceCount = substr_count($param->getWhitespaceBeforeVarName(), ' ');                if ($spaceCount < $spaceBeforeVar) {                    $spaceBeforeVar = $spaceCount;                    $longestType    = $errorPos;                }                $spaceCount = substr_count($param->getWhitespaceBeforeComment(), ' ');                if ($spaceCount < $spaceBeforeComment && $paramComment !== '') {                    $spaceBeforeComment = $spaceCount;                    $longestVar         = $errorPos;                }                // Make sure they are in the correct order,                // and have the correct name.                $pos = $param->getPosition();                $paramName = ($param->getVarName() !== '') ? $param->getVarName() : '[ UNKNOWN ]';                if ($previousParam !== null) {                    $previousName = ($previousParam->getVarName() !== '') ? $previousParam->getVarName() : 'UNKNOWN';                    // Check to see if the parameters align properly.                    if ($param->alignsVariableWith($previousParam) === false) {                        $error = 'The variable names for parameters %s (%s) and %s (%s) do not align';                        $data  = array(                                  $previousName,                                  ($pos - 1),                                  $paramName,                                  $pos,                                 );                        $this->currentFile->addError($error, $errorPos, 'ParameterNamesNotAligned', $data);                    }                    if ($param->alignsCommentWith($previousParam) === false) {                        $error = 'The comments for parameters %s (%s) and %s (%s) do not align';                        $data  = array(                                  $previousName,                                  ($pos - 1),                                  $paramName,                                  $pos,                                 );                        $this->currentFile->addError($error, $errorPos, 'ParameterCommentsNotAligned', $data);                    }                }//end if                // Make sure the names of the parameter comment matches the                // actual parameter.                if (isset($realParams[($pos - 1)]) === true) {                    $realName      = $realParams[($pos - 1)]['name'];                    $foundParams[] = $realName;                    // Append ampersand to name if passing by reference.                    if ($realParams[($pos - 1)]['pass_by_reference'] === true) {                        $realName = '&'.$realName;                    }                    if ($realName !== $paramName) {                        $code = 'ParamNameNoMatch';                        $data = array(                                    $paramName,                                    $realName,                                    $pos,                                );                        $error  = 'Doc comment for var %s does not match ';                        if (strtolower($paramName) === strtolower($realName)) {                            $error .= 'case of ';                            $code   = 'ParamNameNoCaseMatch';                        }                        $error .= 'actual variable name %s at position %s';                        $this->currentFile->addError($error, $errorPos, $code, $data);                    }                } else {                    // We must have an extra parameter comment.                    $error = 'Superfluous doc comment at position '.$pos;                    $this->currentFile->addError($error, $errorPos, 'ExtraParamComment');                }                if ($param->getVarName() === '') {                    $error = 'Missing parameter name at position '.$pos;                     $this->currentFile->addError($error, $errorPos, 'MissingParamName');                }                if ($param->getType() === '') {                    $error = 'Missing type at position '.$pos;                    $this->currentFile->addError($error, $errorPos, 'MissingParamType');                }                if ($paramComment === '') {                    $error = 'Missing comment for param "%s" at position %s';                    $data  = array(                              $paramName,                              $pos,                             );                    $this->currentFile->addError($error, $errorPos, 'MissingParamComment', $data);                }                $previousParam = $param;            }//end foreach			// Joomla modification to 2 spaces.            if ($spaceBeforeVar !== 2 && $spaceBeforeVar !== 10000 && $spaceBeforeComment !== 10000) {                $error = 'Expected 2 spaces after the longest type';                $this->currentFile->addError($error, $longestType, 'SpacingAfterLongType');            }			// Joomla modification to 2 spaces.            if ($spaceBeforeComment !== 2 && $spaceBeforeComment !== 10000) {                $error = 'Expected 2 spaces after the longest variable name';                $this->currentFile->addError($error, $longestVar, 'SpacingAfterLongName');            }        }//end if        $realNames = array();        foreach ($realParams as $realParam) {            $realNames[] = $realParam['name'];        }        // Report and missing comments.        $diff = array_diff($realNames, $foundParams);        foreach ($diff as $neededParam) {            if (count($params) !== 0) {                $errorPos = ($params[(count($params) - 1)]->getLine() + $commentStart);            } else {                $errorPos = $commentStart;            }            $error = 'Doc comment for "%s" missing';            $data  = array($neededParam);            $this->currentFile->addError($error, $errorPos, 'MissingParamTag', $data);        }    }//end processParams()}//end class?>
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract observer class to implement the observer design pattern * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */abstract class JObserver extends JObject{	/**	 * Event object to observe.	 *	 * @var    object	 * @since  11.1	 * @deprecated  12.3	 */	protected $_subject = null;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function __construct(&$subject)	{		// Register the observer ($this) so we can be notified		$subject->attach($this);		// Set the subject to observe		$this->_subject = &$subject;	}	/**	 * Method to update the state of observable objects	 *	 * @param   array  &$args  An array of arguments to pass to the listener.	 *	 * @return  mixed	 *	 * @since   11.1	 * @deprecated  12.3	 */	public abstract function update(&$args);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class JHtmlMessages{	/**	 * @param   int $value	The state value	 * @param   int $i	 */	public static function state($value = 0, $i, $canChange)	{		// Array of image, task, title, action.		$states	= array(			-2	=> array('trash.png',		'messages.unpublish',	'JTRASHED',				'COM_MESSAGES_MARK_AS_UNREAD'),			1	=> array('tick.png',		'messages.unpublish',	'COM_MESSAGES_OPTION_READ',		'COM_MESSAGES_MARK_AS_UNREAD'),			0	=> array('publish_x.png',	'messages.publish',		'COM_MESSAGES_OPTION_UNREAD',	'COM_MESSAGES_MARK_AS_READ')		);		$state	= JArrayHelper::getValue($states, (int) $value, $states[0]);		$html	= JHtml::_('image', 'admin/'.$state[0], JText::_($state[2]), null, true);		if ($canChange)		{			$html = '<a href="#" onclick="return listItemTask(\'cb'.$i.'\',\''.$state[1].'\')" title="'.JText::_($state[3]).'">'					.$html.'</a>';		}		return $html;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to e-mail the configuration info for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallEmail extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the options from the session		$options = $model->getOptions();		$name    = $options['admin_user'];		$email   = $options['admin_email'];		$subject = JText::sprintf(JText::_('INSTL_EMAIL_SUBJECT'), $options['site_name']);		// Prepare email body		$body = array();		$body[] = JText::sprintf(JText::_('INSTL_EMAIL_HEADING'), $options['site_name']);		$body[] = '';		$body[] = array(JText::_('INSTL_SITE_NAME_LABEL'), $options['site_name']);		$body[] = $this->emailTitle(JText::_('INSTL_COMPLETE_ADMINISTRATION_LOGIN_DETAILS'));		$body[] = array(JText::_('JEMAIL'), $options['admin_email']);		$body[] = array(JText::_('JUSERNAME'), $options['admin_user']);		if ($options['summary_email_passwords'])		{			$body[] = array(JText::_('INSTL_ADMIN_PASSWORD_LABEL'), $options['admin_password']);		}		$body[] = $this->emailTitle(JText::_('INSTL_DATABASE'));		$body[] = array(JText::_('INSTL_DATABASE_TYPE_LABEL'), $options['db_type']);		$body[] = array(JText::_('INSTL_DATABASE_HOST_LABEL'), $options['db_host']);		$body[] = array(JText::_('INSTL_DATABASE_USER_LABEL'), $options['db_user']);		if ($options['summary_email_passwords'])		{			$body[] = array(JText::_('INSTL_DATABASE_PASSWORD_LABEL'), $options['db_pass']);		}		$body[] = array(JText::_('INSTL_DATABASE_NAME_LABEL'), $options['db_name']);		$body[] = array(JText::_('INSTL_DATABASE_PREFIX_LABEL'), $options['db_prefix']);		if (isset($options['ftp_enable']) && $options['ftp_enable'])		{			$body[] = $this->emailTitle(JText::_('INSTL_FTP'));			$body[] = array(JText::_('INSTL_FTP_USER_LABEL'), $options['ftp_user']);			if ($options['summary_email_passwords'])			{				$body[] = array( JText::_('INSTL_FTP_PASSWORD_LABEL'), $options['ftp_pass']);			}			$body[] = array(JText::_('INSTL_FTP_HOST_LABEL'), $options['ftp_host']);			$body[] = array(JText::_('INSTL_FTP_PORT_LABEL'), $options['ftp_port']);		}		$max = 0;		foreach ($body as $line)		{			if (is_array($line))			{				$max = max(array($max, strlen($line['0'])));			}		}		foreach ($body as $i => $line)		{			if (is_array($line))			{				$label = $line['0'];				$label .= ': ' . str_repeat(' ', $max - strlen($label));				$body[$i] = $label . $line['1'];			}		}		$body = implode("\r\n", $body);		$mail = JFactory::getMailer();		$mail->addRecipient($email);		$mail->addReplyTo($email, $name);		$mail->setSender(array($email, $name));		$mail->setSubject($subject);		$mail->setBody($body);		$r = new stdClass;		$r->view = 'install';		try		{			$mail->Send();		}		catch (Exception $e)		{			$app->enqueueMessage(JText::_('INSTL_EMAIL_NOT_SENT'), 'notice');			$r->view = 'complete';		}		$app->sendJsonResponse($r);	}	/**	 * Prepares a title line for the e-mail	 *	 * @param   string  $title  The title pre-formatting	 *	 * @return  string	 *	 * @since   3.1	 */	protected function emailTitle($title)	{		return "\r\n" . $title . "\r\n" . str_repeat('=', strlen($title));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (!empty($version)) : ?>	<p align="center"><?php echo $version ?></p><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User note controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersControllerNote extends JControllerForm{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  2.5	 */	protected $text_prefix = 'COM_USERS_NOTE';	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $key       The name of the primary key variable.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   2.5	 */	protected function getRedirectToItemAppend($recordId = null, $key = 'id')	{		$append = parent::getRedirectToItemAppend($recordId, $key);		$userId = JFactory::getApplication()->input->get('u_id', 0, 'int');		if ($userId)		{			$append .= '&u_id=' . $userId;		}		return $append;	}}
<?php/** * @package    Joomla.Language * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * en-GB localise class * * @package  Joomla.Language * @since    1.6 */abstract class En_GBLocalise{	/**	 * Returns the potential suffixes for a specific number of items	 *	 * @param   int  $count  The number of items.	 *	 * @return  array  An array of potential suffixes.	 *	 * @since   1.6	 */	public static function getPluralSuffixes($count)	{		if ($count == 0)		{			$return = array('0');		}		elseif ($count == 1)		{			$return = array('1');		}		else		{			$return = array('MORE');		}		return $return;	}	/**	 * Returns the ignored search words	 *	 * @return  array  An array of ignored search words.	 *	 * @since   1.6	 */	public static function getIgnoredSearchWords()	{		$search_ignore = array();		$search_ignore[] = "and";		$search_ignore[] = "in";		$search_ignore[] = "on";		return $search_ignore;	}	/**	 * Returns the lower length limit of search words	 *	 * @return  integer  The lower length limit of search words.	 *	 * @since   1.6	 */	public static function getLowerLimitSearchWord()	{		return 3;	}	/**	 * Returns the upper length limit of search words	 *	 * @return  integer  The upper length limit of search words.	 *	 * @since   1.6	 */	public static function getUpperLimitSearchWord()	{		return 20;	}	/**	 * Returns the number of chars to display when searching	 *	 * @return  integer  The number of chars to display when searching.	 *	 * @since   1.6	 */	public static function getSearchDisplayedCharactersNumber()	{		return 200;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of article categories. * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.6 */class WeblinksModelCategories extends JModelList{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_weblinks.categories';	/**	 * The category context (allows other extensions to derived from this model).	 *	 * @var		string	 */	protected $_extension = 'com_weblinks';	private $_parent = null;	private $_items = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('filter.extension', $this->_extension);		// Get the parent id if defined.		$parentId = $app->input->getInt('id');		$this->setState('filter.parentId', $parentId);		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('filter.published',	1);		$this->setState('filter.access',	true);	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.extension');		$id	.= ':'.$this->getState('filter.published');		$id	.= ':'.$this->getState('filter.access');		$id	.= ':'.$this->getState('filter.parentId');		return parent::getStoreId($id);	}	/**	 * redefine the function an add some properties to make the styling more easy	 *	 * @return mixed An array of data items on success, false on failure.	 */	public function getItems()	{		if (!count($this->_items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_num_links', 1) || !$params->get('show_empty_categories_cat', 0);			$categories = JCategories::getInstance('Weblinks', $options);			$this->_parent = $categories->get($this->getState('filter.parentId', 'root'));			if (is_object($this->_parent))			{				$this->_items = $this->_parent->getChildren();			} else {				$this->_items = false;			}		}		return $this->_items;	}	public function getParent()	{		if (!is_object($this->_parent))		{			$this->getItems();		}		return $this->_parent;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Request * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Create the request global object */$GLOBALS['_JREQUEST'] = array();/** * Set the available masks for cleaning variables */const JREQUEST_NOTRIM    = 1;const JREQUEST_ALLOWRAW  = 2;const JREQUEST_ALLOWHTML = 4;JLog::add('JRequest is deprecated.', JLog::WARNING, 'deprecated');/** * JRequest Class * * This class serves to provide the Joomla Platform with a common interface to access * request variables.  This includes $_POST, $_GET, and naturally $_REQUEST.  Variables * can be passed through an input filter to avoid injection or returned raw. * * @package     Joomla.Legacy * @subpackage  Request * @since       11.1 * @deprecated  12.1  Get the JInput object from the application instead */class JRequest{	/**	 * Gets the full request path.	 *	 * @return  string	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getURI()	{		$uri = JURI::getInstance();		return $uri->toString(array('path', 'query'));	}	/**	 * Gets the request method.	 *	 * @return  string	 *	 * @since   11.1	 *	 * @deprecated   12.1 Use JInput::getMethod() instead	 */	public static function getMethod()	{		$method = strtoupper($_SERVER['REQUEST_METHOD']);		return $method;	}	/**	 * Fetches and returns a given variable.	 *	 * The default behaviour is fetching variables depending on the	 * current request method: GET and HEAD will result in returning	 * an entry from $_GET, POST and PUT will result in returning an	 * entry from $_POST.	 *	 * You can force the source by setting the $hash parameter:	 *	 * post    $_POST	 * get     $_GET	 * files   $_FILES	 * cookie  $_COOKIE	 * env     $_ENV	 * server  $_SERVER	 * method  via current $_SERVER['REQUEST_METHOD']	 * default $_REQUEST	 *	 * @param   string   $name     Variable name.	 * @param   string   $default  Default value if the variable does not exist.	 * @param   string   $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 * @param   string   $type     Return type for the variable, for valid values see {@link JFilterInput::clean()}.	 * @param   integer  $mask     Filter mask for the variable.	 *	 * @return  mixed  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1  Use JInput::Get	 */	public static function getVar($name, $default = null, $hash = 'default', $type = 'none', $mask = 0)	{		// Ensure hash and type are uppercase		$hash = strtoupper($hash);		if ($hash === 'METHOD')		{			$hash = strtoupper($_SERVER['REQUEST_METHOD']);		}		$type = strtoupper($type);		$sig = $hash . $type . $mask;		// Get the input hash		switch ($hash)		{			case 'GET':				$input = &$_GET;				break;			case 'POST':				$input = &$_POST;				break;			case 'FILES':				$input = &$_FILES;				break;			case 'COOKIE':				$input = &$_COOKIE;				break;			case 'ENV':				$input = &$_ENV;				break;			case 'SERVER':				$input = &$_SERVER;				break;			default:				$input = &$_REQUEST;				$hash = 'REQUEST';				break;		}		if (isset($GLOBALS['_JREQUEST'][$name]['SET.' . $hash]) && ($GLOBALS['_JREQUEST'][$name]['SET.' . $hash] === true))		{			// Get the variable from the input hash			$var = (isset($input[$name]) && $input[$name] !== null) ? $input[$name] : $default;			$var = self::_cleanVar($var, $mask, $type);		}		elseif (!isset($GLOBALS['_JREQUEST'][$name][$sig]))		{			if (isset($input[$name]) && $input[$name] !== null)			{				// Get the variable from the input hash and clean it				$var = self::_cleanVar($input[$name], $mask, $type);				$GLOBALS['_JREQUEST'][$name][$sig] = $var;			}			elseif ($default !== null)			{				// Clean the default value				$var = self::_cleanVar($default, $mask, $type);			}			else			{				$var = $default;			}		}		else		{			$var = $GLOBALS['_JREQUEST'][$name][$sig];		}		return $var;	}	/**	 * Fetches and returns a given filtered variable. The integer	 * filter will allow only digits and the - sign to be returned. This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  integer  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getInt($name, $default = 0, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'int');	}	/**	 * Fetches and returns a given filtered variable. The unsigned integer	 * filter will allow only digits to be returned. This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  integer  Requested variable.	 *	 * @deprecated  12.1	 * @since       11.1	 */	public static function getUInt($name, $default = 0, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'uint');	}	/**	 * Fetches and returns a given filtered variable.  The float	 * filter only allows digits and periods.  This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  float  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getFloat($name, $default = 0.0, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'float');	}	/**	 * Fetches and returns a given filtered variable. The bool	 * filter will only return true/false bool values. This is	 * currently only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  boolean  Requested variable.	 *	 * @deprecated  12.1	 * @since       11.1	 */	public static function getBool($name, $default = false, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'bool');	}	/**	 * Fetches and returns a given filtered variable. The word	 * filter only allows the characters [A-Za-z_]. This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  string  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getWord($name, $default = '', $hash = 'default')	{		return self::getVar($name, $default, $hash, 'word');	}	/**	 * Cmd (Word and Integer0 filter	 *	 * Fetches and returns a given filtered variable. The cmd	 * filter only allows the characters [A-Za-z0-9.-_]. This is	 * currently only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name	 * @param   string  $default  Default value if the variable does not exist	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD)	 *	 * @return  string  Requested variable	 *	 * @deprecated  12.1	 * @since       11.1	 */	public static function getCmd($name, $default = '', $hash = 'default')	{		return self::getVar($name, $default, $hash, 'cmd');	}	/**	 * Fetches and returns a given filtered variable. The string	 * filter deletes 'bad' HTML code, if not overridden by the mask.	 * This is currently only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string   $name     Variable name	 * @param   string   $default  Default value if the variable does not exist	 * @param   string   $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD)	 * @param   integer  $mask     Filter mask for the variable	 *	 * @return  string   Requested variable	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getString($name, $default = '', $hash = 'default', $mask = 0)	{		// Cast to string, in case JREQUEST_ALLOWRAW was specified for mask		return (string) self::getVar($name, $default, $hash, 'string', $mask);	}	/**	 * Set a variable in one of the request variables.	 *	 * @param   string   $name       Name	 * @param   string   $value      Value	 * @param   string   $hash       Hash	 * @param   boolean  $overwrite  Boolean	 *	 * @return  string   Previous value	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function setVar($name, $value = null, $hash = 'method', $overwrite = true)	{		// If overwrite is true, makes sure the variable hasn't been set yet		if (!$overwrite && array_key_exists($name, $_REQUEST))		{			return $_REQUEST[$name];		}		// Clean global request var		$GLOBALS['_JREQUEST'][$name] = array();		// Get the request hash value		$hash = strtoupper($hash);		if ($hash === 'METHOD')		{			$hash = strtoupper($_SERVER['REQUEST_METHOD']);		}		$previous = array_key_exists($name, $_REQUEST) ? $_REQUEST[$name] : null;		switch ($hash)		{			case 'GET':				$_GET[$name] = $value;				$_REQUEST[$name] = $value;				break;			case 'POST':				$_POST[$name] = $value;				$_REQUEST[$name] = $value;				break;			case 'COOKIE':				$_COOKIE[$name] = $value;				$_REQUEST[$name] = $value;				break;			case 'FILES':				$_FILES[$name] = $value;				break;			case 'ENV':				$_ENV['name'] = $value;				break;			case 'SERVER':				$_SERVER['name'] = $value;				break;		}		// Mark this variable as 'SET'		$GLOBALS['_JREQUEST'][$name]['SET.' . $hash] = true;		$GLOBALS['_JREQUEST'][$name]['SET.REQUEST'] = true;		return $previous;	}	/**	 * Fetches and returns a request array.	 *	 * The default behaviour is fetching variables depending on the	 * current request method: GET and HEAD will result in returning	 * $_GET, POST and PUT will result in returning $_POST.	 *	 * You can force the source by setting the $hash parameter:	 *	 * post     $_POST	 * get      $_GET	 * files    $_FILES	 * cookie   $_COOKIE	 * env      $_ENV	 * server   $_SERVER	 * method   via current $_SERVER['REQUEST_METHOD']	 * default  $_REQUEST	 *	 * @param   string   $hash  to get (POST, GET, FILES, METHOD).	 * @param   integer  $mask  Filter mask for the variable.	 *	 * @return  mixed    Request hash.	 *	 * @deprecated  12.1   User JInput::get	 * @see         JInput	 * @since       11.1	 */	public static function get($hash = 'default', $mask = 0)	{		$hash = strtoupper($hash);		if ($hash === 'METHOD')		{			$hash = strtoupper($_SERVER['REQUEST_METHOD']);		}		switch ($hash)		{			case 'GET':				$input = $_GET;				break;			case 'POST':				$input = $_POST;				break;			case 'FILES':				$input = $_FILES;				break;			case 'COOKIE':				$input = $_COOKIE;				break;			case 'ENV':				$input = &$_ENV;				break;			case 'SERVER':				$input = &$_SERVER;				break;			default:				$input = $_REQUEST;				break;		}		$result = self::_cleanVar($input, $mask);		return $result;	}	/**	 * Sets a request variable.	 *	 * @param   array    $array      An associative array of key-value pairs.	 * @param   string   $hash       The request variable to set (POST, GET, FILES, METHOD).	 * @param   boolean  $overwrite  If true and an existing key is found, the value is overwritten, otherwise it is ignored.	 *	 * @return  void	 *	 * @deprecated  12.1  Use JInput::Set	 * @see         JInput::Set	 * @since       11.1	 */	public static function set($array, $hash = 'default', $overwrite = true)	{		foreach ($array as $key => $value)		{			self::setVar($key, $value, $hash, $overwrite);		}	}	/**	 * Checks for a form token in the request.	 *	 * Use in conjunction with JHtml::_('form.token').	 *	 * @param   string  $method  The request method in which to look for the token key.	 *	 * @return  boolean  True if found and valid, false otherwise.	 *	 * @deprecated  12.1 Use JSession::checkToken() instead. Note that 'default' has to become 'request'.	 * @since       11.1	 */	public static function checkToken($method = 'post')	{		if ($method == 'default')		{			$method = 'request';		}		return JSession::checkToken($method);	}	/**	 * Clean up an input variable.	 *	 * @param   mixed    $var   The input variable.	 * @param   integer  $mask  Filter bit mask.	 *                           1 = no trim: If this flag is cleared and the input is a string, the string will have leading and trailing	 *                               whitespace trimmed.	 *                           2 = allow_raw: If set, no more filtering is performed, higher bits are ignored.	 *                           4 = allow_html: HTML is allowed, but passed through a safe HTML filter first. If set, no more filtering	 *                               is performed. If no bits other than the 1 bit is set, a strict filter is applied.	 * @param   string   $type  The variable type {@see JFilterInput::clean()}.	 *	 * @return  mixed  Same as $var	 *	 * @deprecated  12.1	 * @since       11.1	 */	protected static function _cleanVar($var, $mask = 0, $type = null)	{		// If the no trim flag is not set, trim the variable		if (!($mask & 1) && is_string($var))		{			$var = trim($var);		}		// Now we handle input filtering		if ($mask & 2)		{			// If the allow raw flag is set, do not modify the variable			$var = $var;		}		elseif ($mask & 4)		{			// If the allow HTML flag is set, apply a safe HTML filter to the variable			$safeHtmlFilter = JFilterInput::getInstance(null, null, 1, 1);			$var = $safeHtmlFilter->clean($var, $type);		}		else		{			// Since no allow flags were set, we will apply the most strict filter to the variable			// $tags, $attr, $tag_method, $attr_method, $xss_auto use defaults.			$noHtmlFilter = JFilterInput::getInstance();			$var = $noHtmlFilter->clean($var, $type);		}		return $var;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_breadcrumbs * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_breadcrumbs * * @package     Joomla.Site * @subpackage  mod_breadcrumbs * @since       1.5 */class ModBreadCrumbsHelper{	public static function getList(&$params)	{		// Get the PathWay object from the application		$app		= JFactory::getApplication();		$pathway	= $app->getPathway();		$items		= $pathway->getPathWay();		$count = count($items);		// Don't use $items here as it references JPathway properties directly		$crumbs	= array();		for ($i = 0; $i < $count; $i ++)		{			$crumbs[$i] = new stdClass;			$crumbs[$i]->name = stripslashes(htmlspecialchars($items[$i]->name, ENT_COMPAT, 'UTF-8'));			$crumbs[$i]->link = JRoute::_($items[$i]->link);		}		if ($params->get('showHome', 1))		{			$item = new stdClass;			$item->name = htmlspecialchars($params->get('homeText', JText::_('MOD_BREADCRUMBS_HOME')));			$item->link = JRoute::_('index.php?Itemid=' . $app->getMenu()->getDefault()->id);			array_unshift($crumbs, $item);		}		return $crumbs;	}	/**	 * Set the breadcrumbs separator for the breadcrumbs display.	 *	 * @param   string	$custom	Custom xhtml complient string to separate the	 * items of the breadcrumbs	 * @return  string	Separator string	 * @since   1.5	 */	public static function setSeparator($custom = null)	{		$lang = JFactory::getLanguage();		// If a custom separator has not been provided we try to load a template		// specific one first, and if that is not present we load the default separator		if ($custom == null)		{			if ($lang->isRTL())			{				$_separator = JHtml::_('image', 'system/arrow_rtl.png', null, null, true);			}			else			{				$_separator = JHtml::_('image', 'system/arrow.png', null, null, true);			}		}		else		{			$_separator = htmlspecialchars($custom);		}		return $_separator;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.folder');/** * Controller class to set the FTP data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerRemovefolder extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		$path = JPATH_INSTALLATION;		// Check whether the folder still exists		if (!file_exists($path))		{			$app->sendJsonResponse(new Exception(JText::sprintf('INSTL_COMPLETE_ERROR_FOLDER_ALREADY_REMOVED'), 500));		}		// Check whether we need to use FTP		$useFTP = false;		if ((file_exists($path) && !is_writable($path)))		{			$useFTP = true;		}		// Check for safe mode		if (ini_get('safe_mode'))		{			$useFTP = true;		}		// Enable/Disable override		if (!isset($options->ftpEnable) || ($options->ftpEnable != 1))		{			$useFTP = false;		}		if ($useFTP == true)		{			// Connect the FTP client			jimport('joomla.filesystem.path');			$ftp = JClientFtp::getInstance($options->ftp_host, $options->ftp_port);			$ftp->login($options->ftp_user, $options->ftp_pass);			// Translate path for the FTP account			$file = JPath::clean(str_replace(JPATH_CONFIGURATION, $options->ftp_root, $path), '/');			$return = $ftp->delete($file);			// Delete the extra XML file while we're at it			if ($return)			{				$file = JPath::clean($options->ftp_root . '/joomla.xml');				if (file_exists($file))				{					$return = $ftp->delete($file);				}			}			// Rename the robots.txt.dist file to robots.txt			if ($return)			{				$robotsFile = JPath::clean($options->ftp_root . '/robots.txt');				$distFile = JPath::clean($options->ftp_root . '/robots.txt.dist');				if (!file_exists($robotsFile) && file_exists($distFile))				{					$return = $ftp->rename($distFile, $robotsFile);				}			}			$ftp->quit();		}		else		{			/*			 * Try to delete the folder.			 * We use output buffering so that any error message echoed JFolder::delete			 * doesn't land in our JSON output.			 */			ob_start();			$return = JFolder::delete($path) && (!file_exists(JPATH_ROOT . '/joomla.xml') || JFile::delete(JPATH_ROOT . '/joomla.xml'));			// Rename the robots.txt.dist file if robots.txt doesn't exist			if ($return && !file_exists(JPATH_ROOT . '/robots.txt') && file_exists(JPATH_ROOT . '/robots.txt.dist'))			{				$return = JFile::move(JPATH_ROOT . '/robots.txt.dist', JPATH_ROOT . '/robots.txt');			}			ob_end_clean();		}		// If an error was encountered return an error.		if (!$return)		{			$app->sendJsonResponse(new Exception(JText::_('INSTL_COMPLETE_ERROR_FOLDER_DELETE'), 500));		}		// Create a response body.		$r = new stdClass;		$r->text = JText::_('INSTL_COMPLETE_FOLDER_REMOVED');		/*		 * Send the response		 * This is a hack since by now, the rest of the folder is deleted and we can't make a new request		 */		$this->sendJsonResponse($r);	}	/**	 * Method to send a JSON response. The data parameter	 * can be a Exception object for when an error has occurred or	 * a stdClass for a good response.	 *	 * @param   mixed  $response  stdClass on success, Exception on failure.	 *	 * @return  void	 *	 * @since   3.1	 */	public function sendJsonResponse($response)	{		// Check if we need to send an error code.		if ($response instanceof Exception)		{			// Send the appropriate error code response.			$this->setHeader('status', $response->getCode());			$this->setHeader('Content-Type', 'application/json; charset=utf-8');			$this->sendHeaders();		}		// Send the JSON response.		JLoader::register('InstallationResponseJson', __FILE__);		echo json_encode(new InstallationResponseJson($response));		// Close the application.		exit;	}}/** * JSON Response class for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Response * @since       3.1 */class InstallationResponseJson{	/**	 * Constructor for the JSON response	 *	 * @param   mixed  $data  Exception if there is an error, otherwise, the session data	 *	 * @since   3.1	 */	public function __construct($data)	{		// The old token is invalid so send a new one.		$this->token = JSession::getFormToken(true);		// Get the language and send it's tag along		$this->lang = JFactory::getLanguage()->getTag();		// Get the message queue		$messages = JFactory::getApplication()->getMessageQueue();		// Build the sorted message list		if (is_array($messages) && count($messages))		{			foreach ($messages as $msg)			{				if (isset($msg['type']) && isset($msg['message']))				{					$lists[$msg['type']][] = $msg['message'];				}			}		}		// If messages exist add them to the output		if (isset($lists) && is_array($lists))		{			$this->messages = $lists;		}		// Check if we are dealing with an error.		if ($data instanceof Exception)		{			// Prepare the error response.			$this->error   = true;			$this->header  = JText::_('INSTL_HEADER_ERROR');			$this->message = $data->getMessage();		}		else		{			// Prepare the response data.			$this->error = false;			$this->data  = $data;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php// Create a shortcut for params.$params = $this->item->params;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$canEdit = $this->item->params->get('access-edit');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');?><?php if ($this->item->state == 0) : ?>	<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php endif; ?><?php echo JLayoutHelper::render('joomla.content.blog_style_default_item_title', $this->item); ?><?php echo JLayoutHelper::render('joomla.content.icons', array('params' => $params, 'item' => $this->item, 'print' => false)); ?><?php // Todo Not that elegant would be nice to group the params ?><?php $useDefList = ($params->get('show_modify_date') || $params->get('show_publish_date') || $params->get('show_create_date')	|| $params->get('show_hits') || $params->get('show_category') || $params->get('show_parent_category') || $params->get('show_author') ); ?><?php if ($useDefList) : ?>	<?php echo JLayoutHelper::render('joomla.content.info_block.block', array('item' => $this->item, 'params' => $params, 'position' => 'above')); ?><?php endif; ?><?php echo JLayoutHelper::render('joomla.content.content_intro_image', $this->item); ?><?php if (!$params->get('show_intro')) : ?>	<?php echo $this->item->event->afterDisplayTitle; ?><?php endif; ?><?php echo $this->item->event->beforeDisplayContent; ?><?php if ($params->get('show_intro')) : ?><?php echo $this->item->introtext; ?><?php endif; ?><?php if ($useDefList) : ?>	<?php echo JLayoutHelper::render('joomla.content.info_block.block', array('item' => $this->item, 'params' => $params, 'position' => 'below')); ?><?php  endif; ?><?php if ($params->get('show_readmore') && $this->item->readmore) :	if ($params->get('access-view')) :		$link = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));	else :		$menu = JFactory::getApplication()->getMenu();		$active = $menu->getActive();		$itemId = $active->id;		$link1 = JRoute::_('index.php?option=com_users&view=login&Itemid=' . $itemId);		$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));		$link = new JURI($link1);		$link->setVar('return', base64_encode($returnURL));	endif; ?>	<p class="readmore"><a class="btn" href="<?php echo $link; ?>"> <span class="icon-chevron-right"></span>	<?php if (!$params->get('access-view')) :		echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');	elseif ($readmore = $this->item->alternative_readmore) :		echo $readmore;		if ($params->get('show_readmore_title', 0) != 0) :		echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));		endif;	elseif ($params->get('show_readmore_title', 0) == 0) :		echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');	else :		echo JText::_('COM_CONTENT_READ_MORE');		echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));	endif; ?>	</a></p><?php endif; ?><?php if ($this->item->state == 0) : ?></div><?php endif; ?><?php echo $this->item->event->afterDisplayContent; ?>
<?php/** * @package     Joomla.Libraries * @subpackage  Less * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;require_once __DIR__ . '/lessc.php';/** * Help system class * * @package     Joomla.Libraries * @subpackage  Less * @since       3.0 */class JLess extends lessc{	public function __construct($fname = null, $formatter = null)	{		parent::__construct($fname);		if ($formatter === null)		{			$formatter = new JLessFormatterJoomla;		}		$this->setFormatter($formatter);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?>	<?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>		<?php if ($this->params->get('categories_description')) : ?>		<div class="category-desc base-desc">			<?php echo  JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_contact.categories'); ?>			</div>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc base-desc">					<?php  echo JHtml::_('content.prepare', $this->parent->description, '', 'com_contact.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?>	<?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Utilities * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JUtility is a utility functions class * * @package     Joomla.Platform * @subpackage  Utilities * @since       11.1 */class JUtility{	/**	 * Method to extract key/value pairs out of a string with XML style attributes	 *	 * @param   string  $string  String containing XML style attributes	 *	 * @return  array  Key/Value pairs for the attributes	 *	 * @since   11.1	 */	public static function parseAttributes($string)	{		$attr = array();		$retarray = array();		// Let's grab all the key/value pairs using a regular expression		preg_match_all('/([\w:-]+)[\s]?=[\s]?"([^"]*)"/i', $string, $attr);		if (is_array($attr))		{			$numPairs = count($attr[1]);			for ($i = 0; $i < $numPairs; $i++)			{				$retarray[$attr[1][$i]] = $attr[2][$i];			}		}		return $retarray;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Base controller class for Menu Manager. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/menus.php';		$view   = $this->input->get('view', 'menus');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'menu' && $layout == 'edit' && !$this->checkEditId('com_menus.edit.menu', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menus', false));			return false;		}		elseif ($view == 'item' && $layout == 'edit' && !$this->checkEditId('com_menus.edit.item', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=items', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'categoryOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_TAGS_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('bootstrap.addSlide', 'categoryOptions', JText::_($label), 'collapse' . $i++);			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>				<?php if ($name == 'basic'):?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('note'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('note'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('tag_layout'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('tag_layout'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('tag_link_class'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('tag_link_class'); ?>						</div>					</div>				<?php endif;		echo JHtml::_('bootstrap.endSlide');	endforeach;echo JHtml::_('bootstrap.endAccordion');
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @copyright   Copyright (C) 2005 Richard Heyes (http://www.phpguru.org/). All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Porter English stemmer class. * * This class was adapted from one written by Richard Heyes. * See copyright and link information above. * * @package     Joomla.Platform * @subpackage  Language * @since       12.1 */class JLanguageStemmerPorteren extends JLanguageStemmer{	/**	 * Regex for matching a consonant.	 *	 * @var    string	 * @since  12.1	 */	private static $_regex_consonant = '(?:[bcdfghjklmnpqrstvwxz]|(?<=[aeiou])y|^y)';	/**	 * Regex for matching a vowel	 * @var    string	 * @since  12.1	 */	private static $_regex_vowel = '(?:[aeiou]|(?<![aeiou])y)';	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   12.1	 */	public function stem($token, $lang)	{		// Check if the token is long enough to merit stemming.		if (strlen($token) <= 2)		{			return $token;		}		// Check if the language is English or All.		if ($lang !== 'en')		{			return $token;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Stem the token.			$result = $token;			$result = self::_step1ab($result);			$result = self::_step1c($result);			$result = self::_step2($result);			$result = self::_step3($result);			$result = self::_step4($result);			$result = self::_step5($result);			// Add the token to the cache.			$this->cache[$lang][$token] = $result;		}		return $this->cache[$lang][$token];	}	/**	 * Step 1	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step1ab($word)	{		// Part a		if (substr($word, -1) == 's')		{				self::_replace($word, 'sses', 'ss')			or self::_replace($word, 'ies', 'i')			or self::_replace($word, 'ss', 'ss')			or self::_replace($word, 's', '');		}		// Part b		if (substr($word, -2, 1) != 'e' or !self::_replace($word, 'eed', 'ee', 0))		{			// First rule			$v = self::$_regex_vowel;			// Check ing and ed			// Note use of && and OR, for precedence reasons			if (preg_match("#$v+#", substr($word, 0, -3)) && self::_replace($word, 'ing', '')				or preg_match("#$v+#", substr($word, 0, -2)) && self::_replace($word, 'ed', ''))			{				// If one of above two test successful				if (!self::_replace($word, 'at', 'ate') and !self::_replace($word, 'bl', 'ble') and !self::_replace($word, 'iz', 'ize'))				{					// Double consonant ending					if (self::_doubleConsonant($word) and substr($word, -2) != 'll' and substr($word, -2) != 'ss' and substr($word, -2) != 'zz')					{						$word = substr($word, 0, -1);					}					elseif (self::_m($word) == 1 and self::_cvc($word))					{						$word .= 'e';					}				}			}		}		return $word;	}	/**	 * Step 1c	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step1c($word)	{		$v = self::$_regex_vowel;		if (substr($word, -1) == 'y' && preg_match("#$v+#", substr($word, 0, -1)))		{			self::_replace($word, 'y', 'i');		}		return $word;	}	/**	 * Step 2	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step2($word)	{		switch (substr($word, -2, 1))		{			case 'a':					self::_replace($word, 'ational', 'ate', 0)				or self::_replace($word, 'tional', 'tion', 0);				break;			case 'c':					self::_replace($word, 'enci', 'ence', 0)				or self::_replace($word, 'anci', 'ance', 0);				break;			case 'e':				self::_replace($word, 'izer', 'ize', 0);				break;			case 'g':				self::_replace($word, 'logi', 'log', 0);				break;			case 'l':					self::_replace($word, 'entli', 'ent', 0)				or self::_replace($word, 'ousli', 'ous', 0)				or self::_replace($word, 'alli', 'al', 0)				or self::_replace($word, 'bli', 'ble', 0)				or self::_replace($word, 'eli', 'e', 0);				break;			case 'o':					self::_replace($word, 'ization', 'ize', 0)				or self::_replace($word, 'ation', 'ate', 0)				or self::_replace($word, 'ator', 'ate', 0);				break;			case 's':					self::_replace($word, 'iveness', 'ive', 0)				or self::_replace($word, 'fulness', 'ful', 0)				or self::_replace($word, 'ousness', 'ous', 0)				or self::_replace($word, 'alism', 'al', 0);				break;			case 't':					self::_replace($word, 'biliti', 'ble', 0)				or self::_replace($word, 'aliti', 'al', 0)				or self::_replace($word, 'iviti', 'ive', 0);				break;		}		return $word;	}	/**	 * Step 3	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step3($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'ical', 'ic', 0);				break;			case 's':				self::_replace($word, 'ness', '', 0);				break;			case 't':					self::_replace($word, 'icate', 'ic', 0)				or self::_replace($word, 'iciti', 'ic', 0);				break;			case 'u':				self::_replace($word, 'ful', '', 0);				break;			case 'v':				self::_replace($word, 'ative', '', 0);				break;			case 'z':				self::_replace($word, 'alize', 'al', 0);				break;		}		return $word;	}	/**	 * Step 4	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step4($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'al', '', 1);				break;			case 'c':					self::_replace($word, 'ance', '', 1)				or self::_replace($word, 'ence', '', 1);				break;			case 'e':				self::_replace($word, 'er', '', 1);				break;			case 'i':				self::_replace($word, 'ic', '', 1);				break;			case 'l':					self::_replace($word, 'able', '', 1)				or self::_replace($word, 'ible', '', 1);				break;			case 'n':					self::_replace($word, 'ant', '', 1)				or self::_replace($word, 'ement', '', 1)				or self::_replace($word, 'ment', '', 1)				or self::_replace($word, 'ent', '', 1);				break;			case 'o':				if (substr($word, -4) == 'tion' or substr($word, -4) == 'sion')				{					self::_replace($word, 'ion', '', 1);				}				else				{					self::_replace($word, 'ou', '', 1);				}				break;			case 's':				self::_replace($word, 'ism', '', 1);				break;			case 't':					self::_replace($word, 'ate', '', 1)				or self::_replace($word, 'iti', '', 1);				break;			case 'u':				self::_replace($word, 'ous', '', 1);				break;			case 'v':				self::_replace($word, 'ive', '', 1);				break;			case 'z':				self::_replace($word, 'ize', '', 1);				break;		}		return $word;	}	/**	 * Step 5	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   12.1	 */	private static function _step5($word)	{		// Part a		if (substr($word, -1) == 'e')		{			if (self::_m(substr($word, 0, -1)) > 1)			{				self::_replace($word, 'e', '');			}			elseif (self::_m(substr($word, 0, -1)) == 1)			{				if (!self::_cvc(substr($word, 0, -1)))				{					self::_replace($word, 'e', '');				}			}		}		// Part b		if (self::_m($word) > 1 and self::_doubleConsonant($word) and substr($word, -1) == 'l')		{			$word = substr($word, 0, -1);		}		return $word;	}	/**	 * Replaces the first string with the second, at the end of the string. If third	 * arg is given, then the preceding string must match that m count at least.	 *	 * @param   string   &$str   String to check	 * @param   string   $check  Ending to check for	 * @param   string   $repl   Replacement string	 * @param   integer  $m      Optional minimum number of m() to meet	 *	 * @return  boolean  Whether the $check string was at the end	 *                   of the $str string. True does not necessarily mean	 *                   that it was replaced.	 *	 * @since   12.1	 */	private static function _replace(&$str, $check, $repl, $m = null)	{		$len = 0 - strlen($check);		if (substr($str, $len) == $check)		{			$substr = substr($str, 0, $len);			if (is_null($m) or self::_m($substr) > $m)			{				$str = $substr . $repl;			}			return true;		}		return false;	}	/**	 * m() measures the number of consonant sequences in $str. if c is	 * a consonant sequence and v a vowel sequence, and <..> indicates arbitrary	 * presence,	 *	 * <c><v>       gives 0	 * <c>vc<v>     gives 1	 * <c>vcvc<v>   gives 2	 * <c>vcvcvc<v> gives 3	 *	 * @param   string  $str  The string to return the m count for	 *	 * @return  integer  The m count	 *	 * @since   12.1	 */	private static function _m($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		$str = preg_replace("#^$c+#", '', $str);		$str = preg_replace("#$v+$#", '', $str);		preg_match_all("#($v+$c+)#", $str, $matches);		return count($matches[1]);	}	/**	 * Returns true/false as to whether the given string contains two	 * of the same consonant next to each other at the end of the string.	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   12.1	 */	private static function _doubleConsonant($str)	{		$c = self::$_regex_consonant;		return preg_match("#$c{2}$#", $str, $matches) and $matches[0]{0} == $matches[0]{1};	}	/**	 * Checks for ending CVC sequence where second C is not W, X or Y	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   12.1	 */	private static function _cvc($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		$result = preg_match("#($c$v$c)$#", $str, $matches)			and strlen($matches[1]) == 3			and $matches[1]{2} != 'w'			and $matches[1]{2} != 'x'			and $matches[1]{2} != 'y';		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_RELEVANT_PHP_SETTINGS'); ?></legend>	<table class="table table-striped">		<thead>			<tr>				<th width="250">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;				</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SAFE_MODE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['safe_mode']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OPEN_BASEDIR'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['open_basedir']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISPLAY_ERRORS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['display_errors']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SHORT_OPEN_TAGS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['short_open_tag']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_FILE_UPLOADS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['file_uploads']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MAGIC_QUOTES'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['magic_quotes_gpc']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_REGISTER_GLOBALS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['register_globals']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OUTPUT_BUFFERING'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['output_buffering']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_SAVE_PATH'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['session.save_path']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_AUTO_START'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.integer', $this->php_settings['session.auto_start']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_XML_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['xml']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZLIB_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zlib']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZIP_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zip']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISABLED_FUNCTIONS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['disable_functions']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MBSTRING_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['mbstring']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ICONV_AVAILABLE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['iconv']); ?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Parser base class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexerParser{	/**	 * Method to get a parser, creating it if necessary.	 *	 * @param   string  $format  The type of parser to load.	 *	 * @return  FinderIndexerParser  A FinderIndexerParser instance.	 *	 * @since   2.5	 * @throws  Exception on invalid parser.	 */	public static function getInstance($format)	{		static $instances;		// Only create one parser for each format.		if (isset($instances[$format]))		{			return $instances[$format];		}		// Create an array of instances if necessary.		if (!is_array($instances))		{			$instances = array();		}		// Setup the adapter for the parser.		$format = JFilterInput::getInstance()->clean($format, 'cmd');		$path = __DIR__ . '/parser/' . $format . '.php';		$class = 'FinderIndexerParser' . ucfirst($format);		// Check if a parser exists for the format.		if (file_exists($path))		{			// Instantiate the parser.			include_once $path;			$instances[$format] = new $class;		}		else		{			// Throw invalid format exception.			throw new Exception(JText::sprintf('COM_FINDER_INDEXER_INVALID_PARSER', $format));		}		return $instances[$format];	}	/**	 * Method to parse input and extract the plain text. Because this method is	 * called from both inside and outside the indexer, it needs to be able to	 * batch out its parsing functionality to deal with the inefficiencies of	 * regular expressions. We will parse recursively in 2KB chunks.	 *	 * @param   string  $input  The input to parse.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	public function parse($input)	{		$return = null;		// Parse the input in batches if bigger than 2KB.		if (strlen($input) > 2048)		{			$start = 0;			$end = strlen($input);			$chunk = 2048;			while ($start < $end)			{				// Setup the string.				$string = substr($input, $start, $chunk);				// Find the last space character if we aren't at the end.				$ls = (($start + $chunk) < $end ? strrpos($string, ' ') : false);				// Truncate to the last space character.				if ($ls !== false)				{					$string = substr($string, 0, $ls);				}				// Adjust the start position for the next iteration.				$start += ($ls !== false ? ($ls + 1 - $chunk) + $chunk : $chunk);				// Parse the chunk.				$return .= $this->process($string);			}		}		// The input is less than 2KB so we can parse it efficiently.		else		{			// Parse the chunk.			$return .= $this->process($input);		}		return $return;	}	/**	 * Method to process input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	abstract protected function process($input);}
<?php/** * This file will be removed in Joomla! CMS version 3.2. Developers should either supply their own copy * in their installation packages or switch to JFeed. *//** * SimplePie * * A PHP-Based RSS and Atom Feed Framework. * Takes the hard work out of managing a complete RSS/Atom solution. * * Copyright (c) 2004-2009, Ryan Parman and Geoffrey Sneddon * All rights reserved. * * Redistribution and use in source and binary forms, with or without modification, are * permitted provided that the following conditions are met: * * 	* Redistributions of source code must retain the above copyright notice, this list of * 	  conditions and the following disclaimer. * * 	* Redistributions in binary form must reproduce the above copyright notice, this list * 	  of conditions and the following disclaimer in the documentation and/or other materials * 	  provided with the distribution. * * 	* Neither the name of the SimplePie Team nor the names of its contributors may be used * 	  to endorse or promote products derived from this software without specific prior * 	  written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS * AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. * * @package SimplePie * @version 1.2 * @copyright 2004-2009 Ryan Parman, Geoffrey Sneddon * @author Ryan Parman * @author Geoffrey Sneddon * @link http://simplepie.org/ SimplePie * @link http://simplepie.org/support/ Please submit all bug reports and feature requests to the SimplePie forums * @license http://www.opensource.org/licenses/bsd-license.php BSD License * @todo phpDoc comments *//** * SimplePie Name */define('SIMPLEPIE_NAME', 'SimplePie');/** * SimplePie Version */define('SIMPLEPIE_VERSION', '1.2');/** * SimplePie Build */define('SIMPLEPIE_BUILD', '20090627192103');/** * SimplePie Website URL */define('SIMPLEPIE_URL', 'http://simplepie.org');/** * SimplePie Useragent * @see SimplePie::set_useragent() */define('SIMPLEPIE_USERAGENT', SIMPLEPIE_NAME . '/' . SIMPLEPIE_VERSION . ' (Feed Parser; ' . SIMPLEPIE_URL . '; Allow like Gecko) Build/' . SIMPLEPIE_BUILD);/** * SimplePie Linkback */define('SIMPLEPIE_LINKBACK', '<a href="' . SIMPLEPIE_URL . '" title="' . SIMPLEPIE_NAME . ' ' . SIMPLEPIE_VERSION . '">' . SIMPLEPIE_NAME . '</a>');/** * No Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_NONE', 0);/** * Feed Link Element Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_AUTODISCOVERY', 1);/** * Local Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_EXTENSION', 2);/** * Local Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_LOCAL_BODY', 4);/** * Remote Feed Extension Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_EXTENSION', 8);/** * Remote Feed Body Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_REMOTE_BODY', 16);/** * All Feed Autodiscovery * @see SimplePie::set_autodiscovery_level() */define('SIMPLEPIE_LOCATOR_ALL', 31);/** * No known feed type */define('SIMPLEPIE_TYPE_NONE', 0);/** * RSS 0.90 */define('SIMPLEPIE_TYPE_RSS_090', 1);/** * RSS 0.91 (Netscape) */define('SIMPLEPIE_TYPE_RSS_091_NETSCAPE', 2);/** * RSS 0.91 (Userland) */define('SIMPLEPIE_TYPE_RSS_091_USERLAND', 4);/** * RSS 0.91 (both Netscape and Userland) */define('SIMPLEPIE_TYPE_RSS_091', 6);/** * RSS 0.92 */define('SIMPLEPIE_TYPE_RSS_092', 8);/** * RSS 0.93 */define('SIMPLEPIE_TYPE_RSS_093', 16);/** * RSS 0.94 */define('SIMPLEPIE_TYPE_RSS_094', 32);/** * RSS 1.0 */define('SIMPLEPIE_TYPE_RSS_10', 64);/** * RSS 2.0 */define('SIMPLEPIE_TYPE_RSS_20', 128);/** * RDF-based RSS */define('SIMPLEPIE_TYPE_RSS_RDF', 65);/** * Non-RDF-based RSS (truly intended as syndication format) */define('SIMPLEPIE_TYPE_RSS_SYNDICATION', 190);/** * All RSS */define('SIMPLEPIE_TYPE_RSS_ALL', 255);/** * Atom 0.3 */define('SIMPLEPIE_TYPE_ATOM_03', 256);/** * Atom 1.0 */define('SIMPLEPIE_TYPE_ATOM_10', 512);/** * All Atom */define('SIMPLEPIE_TYPE_ATOM_ALL', 768);/** * All feed types */define('SIMPLEPIE_TYPE_ALL', 1023);/** * No construct */define('SIMPLEPIE_CONSTRUCT_NONE', 0);/** * Text construct */define('SIMPLEPIE_CONSTRUCT_TEXT', 1);/** * HTML construct */define('SIMPLEPIE_CONSTRUCT_HTML', 2);/** * XHTML construct */define('SIMPLEPIE_CONSTRUCT_XHTML', 4);/** * base64-encoded construct */define('SIMPLEPIE_CONSTRUCT_BASE64', 8);/** * IRI construct */define('SIMPLEPIE_CONSTRUCT_IRI', 16);/** * A construct that might be HTML */define('SIMPLEPIE_CONSTRUCT_MAYBE_HTML', 32);/** * All constructs */define('SIMPLEPIE_CONSTRUCT_ALL', 63);/** * Don't change case */define('SIMPLEPIE_SAME_CASE', 1);/** * Change to lowercase */define('SIMPLEPIE_LOWERCASE', 2);/** * Change to uppercase */define('SIMPLEPIE_UPPERCASE', 4);/** * PCRE for HTML attributes */define('SIMPLEPIE_PCRE_HTML_ATTRIBUTE', '((?:[\x09\x0A\x0B\x0C\x0D\x20]+[^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?)*)[\x09\x0A\x0B\x0C\x0D\x20]*');/** * PCRE for XML attributes */define('SIMPLEPIE_PCRE_XML_ATTRIBUTE', '((?:\s+(?:(?:[^\s:]+:)?[^\s:]+)\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'))*)\s*');/** * XML Namespace */define('SIMPLEPIE_NAMESPACE_XML', 'http://www.w3.org/XML/1998/namespace');/** * Atom 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_10', 'http://www.w3.org/2005/Atom');/** * Atom 0.3 Namespace */define('SIMPLEPIE_NAMESPACE_ATOM_03', 'http://purl.org/atom/ns#');/** * RDF Namespace */define('SIMPLEPIE_NAMESPACE_RDF', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');/** * RSS 0.90 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_090', 'http://my.netscape.com/rdf/simple/0.9/');/** * RSS 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10', 'http://purl.org/rss/1.0/');/** * RSS 1.0 Content Module Namespace */define('SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT', 'http://purl.org/rss/1.0/modules/content/');/** * RSS 2.0 Namespace * (Stupid, I know, but I'm certain it will confuse people less with support.) */define('SIMPLEPIE_NAMESPACE_RSS_20', '');/** * DC 1.0 Namespace */define('SIMPLEPIE_NAMESPACE_DC_10', 'http://purl.org/dc/elements/1.0/');/** * DC 1.1 Namespace */define('SIMPLEPIE_NAMESPACE_DC_11', 'http://purl.org/dc/elements/1.1/');/** * W3C Basic Geo (WGS84 lat/long) Vocabulary Namespace */define('SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO', 'http://www.w3.org/2003/01/geo/wgs84_pos#');/** * GeoRSS Namespace */define('SIMPLEPIE_NAMESPACE_GEORSS', 'http://www.georss.org/georss');/** * Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS', 'http://search.yahoo.com/mrss/');/** * Wrong Media RSS Namespace */define('SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG', 'http://search.yahoo.com/mrss');/** * iTunes RSS Namespace */define('SIMPLEPIE_NAMESPACE_ITUNES', 'http://www.itunes.com/dtds/podcast-1.0.dtd');/** * XHTML Namespace */define('SIMPLEPIE_NAMESPACE_XHTML', 'http://www.w3.org/1999/xhtml');/** * IANA Link Relations Registry */define('SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY', 'http://www.iana.org/assignments/relation/');/** * Whether we're running on PHP5 */define('SIMPLEPIE_PHP5', version_compare(PHP_VERSION, '5.0.0', '>='));/** * No file source */define('SIMPLEPIE_FILE_SOURCE_NONE', 0);/** * Remote file source */define('SIMPLEPIE_FILE_SOURCE_REMOTE', 1);/** * Local file source */define('SIMPLEPIE_FILE_SOURCE_LOCAL', 2);/** * fsockopen() file source */define('SIMPLEPIE_FILE_SOURCE_FSOCKOPEN', 4);/** * cURL file source */define('SIMPLEPIE_FILE_SOURCE_CURL', 8);/** * file_get_contents() file source */define('SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS', 16);/** * SimplePie * * @package SimplePie */class SimplePie{	/**	 * @var array Raw data	 * @access private	 */	var $data = array();	/**	 * @var mixed Error string	 * @access private	 */	var $error;	/**	 * @var object Instance of SimplePie_Sanitize (or other class)	 * @see SimplePie::set_sanitize_class()	 * @access private	 */	var $sanitize;	/**	 * @var string SimplePie Useragent	 * @see SimplePie::set_useragent()	 * @access private	 */	var $useragent = SIMPLEPIE_USERAGENT;	/**	 * @var string Feed URL	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $feed_url;	/**	 * @var object Instance of SimplePie_File to use as a feed	 * @see SimplePie::set_file()	 * @access private	 */	var $file;	/**	 * @var string Raw feed data	 * @see SimplePie::set_raw_data()	 * @access private	 */	var $raw_data;	/**	 * @var int Timeout for fetching remote files	 * @see SimplePie::set_timeout()	 * @access private	 */	var $timeout = 10;	/**	 * @var bool Forces fsockopen() to be used for remote files instead	 * of cURL, even if a new enough version is installed	 * @see SimplePie::force_fsockopen()	 * @access private	 */	var $force_fsockopen = false;	/**	 * @var bool Force the given data/URL to be treated as a feed no matter what	 * it appears like	 * @see SimplePie::force_feed()	 * @access private	 */	var $force_feed = false;	/**	 * @var bool Enable/Disable XML dump	 * @see SimplePie::enable_xml_dump()	 * @access private	 */	var $xml_dump = false;	/**	 * @var bool Enable/Disable Caching	 * @see SimplePie::enable_cache()	 * @access private	 */	var $cache = true;	/**	 * @var int Cache duration (in seconds)	 * @see SimplePie::set_cache_duration()	 * @access private	 */	var $cache_duration = 3600;	/**	 * @var int Auto-discovery cache duration (in seconds)	 * @see SimplePie::set_autodiscovery_cache_duration()	 * @access private	 */	var $autodiscovery_cache_duration = 604800; // 7 Days.	/**	 * @var string Cache location (relative to executing script)	 * @see SimplePie::set_cache_location()	 * @access private	 */	var $cache_location = './cache';	/**	 * @var string Function that creates the cache filename	 * @see SimplePie::set_cache_name_function()	 * @access private	 */	var $cache_name_function = 'md5';	/**	 * @var bool Reorder feed by date descending	 * @see SimplePie::enable_order_by_date()	 * @access private	 */	var $order_by_date = true;	/**	 * @var mixed Force input encoding to be set to the follow value	 * (false, or anything type-cast to false, disables this feature)	 * @see SimplePie::set_input_encoding()	 * @access private	 */	var $input_encoding = false;	/**	 * @var int Feed Autodiscovery Level	 * @see SimplePie::set_autodiscovery_level()	 * @access private	 */	var $autodiscovery = SIMPLEPIE_LOCATOR_ALL;	/**	 * @var string Class used for caching feeds	 * @see SimplePie::set_cache_class()	 * @access private	 */	var $cache_class = 'SimplePie_Cache';	/**	 * @var string Class used for locating feeds	 * @see SimplePie::set_locator_class()	 * @access private	 */	var $locator_class = 'SimplePie_Locator';	/**	 * @var string Class used for parsing feeds	 * @see SimplePie::set_parser_class()	 * @access private	 */	var $parser_class = 'SimplePie_Parser';	/**	 * @var string Class used for fetching feeds	 * @see SimplePie::set_file_class()	 * @access private	 */	var $file_class = 'SimplePie_File';	/**	 * @var string Class used for items	 * @see SimplePie::set_item_class()	 * @access private	 */	var $item_class = 'SimplePie_Item';	/**	 * @var string Class used for authors	 * @see SimplePie::set_author_class()	 * @access private	 */	var $author_class = 'SimplePie_Author';	/**	 * @var string Class used for categories	 * @see SimplePie::set_category_class()	 * @access private	 */	var $category_class = 'SimplePie_Category';	/**	 * @var string Class used for enclosures	 * @see SimplePie::set_enclosures_class()	 * @access private	 */	var $enclosure_class = 'SimplePie_Enclosure';	/**	 * @var string Class used for Media RSS <media:text> captions	 * @see SimplePie::set_caption_class()	 * @access private	 */	var $caption_class = 'SimplePie_Caption';	/**	 * @var string Class used for Media RSS <media:copyright>	 * @see SimplePie::set_copyright_class()	 * @access private	 */	var $copyright_class = 'SimplePie_Copyright';	/**	 * @var string Class used for Media RSS <media:credit>	 * @see SimplePie::set_credit_class()	 * @access private	 */	var $credit_class = 'SimplePie_Credit';	/**	 * @var string Class used for Media RSS <media:rating>	 * @see SimplePie::set_rating_class()	 * @access private	 */	var $rating_class = 'SimplePie_Rating';	/**	 * @var string Class used for Media RSS <media:restriction>	 * @see SimplePie::set_restriction_class()	 * @access private	 */	var $restriction_class = 'SimplePie_Restriction';	/**	 * @var string Class used for content-type sniffing	 * @see SimplePie::set_content_type_sniffer_class()	 * @access private	 */	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	/**	 * @var string Class used for item sources.	 * @see SimplePie::set_source_class()	 * @access private	 */	var $source_class = 'SimplePie_Source';	/**	 * @var mixed Set javascript query string parameter (false, or	 * anything type-cast to false, disables this feature)	 * @see SimplePie::set_javascript()	 * @access private	 */	var $javascript = 'js';	/**	 * @var int Maximum number of feeds to check with autodiscovery	 * @see SimplePie::set_max_checked_feeds()	 * @access private	 */	var $max_checked_feeds = 10;	/**	 * @var array All the feeds found during the autodiscovery process	 * @see SimplePie::get_all_discovered_feeds()	 * @access private	 */	var $all_discovered_feeds = array();	/**	 * @var string Web-accessible path to the handler_favicon.php file.	 * @see SimplePie::set_favicon_handler()	 * @access private	 */	var $favicon_handler = '';	/**	 * @var string Web-accessible path to the handler_image.php file.	 * @see SimplePie::set_image_handler()	 * @access private	 */	var $image_handler = '';	/**	 * @var array Stores the URLs when multiple feeds are being initialized.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $multifeed_url = array();	/**	 * @var array Stores SimplePie objects when multiple feeds initialized.	 * @access private	 */	var $multifeed_objects = array();	/**	 * @var array Stores the get_object_vars() array for use with multifeeds.	 * @see SimplePie::set_feed_url()	 * @access private	 */	var $config_settings = null;	/**	 * @var integer Stores the number of items to return per-feed with multifeeds.	 * @see SimplePie::set_item_limit()	 * @access private	 */	var $item_limit = 0;	/**	 * @var array Stores the default attributes to be stripped by strip_attributes().	 * @see SimplePie::strip_attributes()	 * @access private	 */	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	/**	 * @var array Stores the default tags to be stripped by strip_htmltags().	 * @see SimplePie::strip_htmltags()	 * @access private	 */	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	/**	 * The SimplePie class contains feed level data and options	 *	 * There are two ways that you can create a new SimplePie object. The first	 * is by passing a feed URL as a parameter to the SimplePie constructor	 * (as well as optionally setting the cache location and cache expiry). This	 * will initialise the whole feed with all of the default settings, and you	 * can begin accessing methods and properties immediately.	 *	 * The second way is to create the SimplePie object with no parameters	 * at all. This will enable you to set configuration options. After setting	 * them, you must initialise the feed using $feed->init(). At that point the	 * object's methods and properties will be available to you. This format is	 * what is used throughout this documentation.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param string $feed_url This is the URL you want to parse.	 * @param string $cache_location This is where you want the cache to be stored.	 * @param int $cache_duration This is the number of seconds that you want to store the cache file for.	 */	function SimplePie($feed_url = null, $cache_location = null, $cache_duration = null)	{		// Other objects, instances created here so we can set options on them		$this->sanitize = new SimplePie_Sanitize;		// Set options if they're passed to the constructor		if ($cache_location !== null)		{			$this->set_cache_location($cache_location);		}		if ($cache_duration !== null)		{			$this->set_cache_duration($cache_duration);		}		// Only init the script if we're passed a feed URL		if ($feed_url !== null)		{			$this->set_feed_url($feed_url);			$this->init();		}	}	/**	 * Used for converting object to a string	 */	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			if (!empty($this->data['items']))			{				foreach ($this->data['items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['items']);			}			if (!empty($this->data['ordered_items']))			{				foreach ($this->data['ordered_items'] as $item)				{					$item->__destruct();				}				unset($item, $this->data['ordered_items']);			}		}	}	/**	 * Force the given data/URL to be treated as a feed no matter what it	 * appears like	 *	 * @access public	 * @since 1.1	 * @param bool $enable Force the given data/URL to be treated as a feed	 */	function force_feed($enable = false)	{		$this->force_feed = (bool) $enable;	}	/**	 * This is the URL of the feed you want to parse.	 *	 * This allows you to enter the URL of the feed you want to parse, or the	 * website you want to try to use auto-discovery on. This takes priority	 * over any set raw data.	 *	 * You can set multiple feeds to mash together by passing an array instead	 * of a string for the $url. Remember that with each additional feed comes	 * additional processing and resources.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param mixed $url This is the URL (or array of URLs) that you want to parse.	 * @see SimplePie::set_raw_data()	 */	function set_feed_url($url)	{		if (is_array($url))		{			$this->multifeed_url = array();			foreach ($url as $value)			{				$this->multifeed_url[] = SimplePie_Misc::fix_protocol($value, 1);			}		}		else		{			$this->feed_url = SimplePie_Misc::fix_protocol($url, 1);		}	}	/**	 * Provides an instance of SimplePie_File to use as a feed	 *	 * @access public	 * @param object &$file Instance of SimplePie_File (or subclass)	 * @return bool True on success, false on failure	 */	function set_file(&$file)	{		if (is_a($file, 'SimplePie_File'))		{			$this->feed_url = $file->url;			$this->file =& $file;			return true;		}		return false;	}	/**	 * Allows you to use a string of RSS/Atom data instead of a remote feed.	 *	 * If you have a feed available as a string in PHP, you can tell SimplePie	 * to parse that data string instead of a remote feed. Any set feed URL	 * takes precedence.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param string $data RSS or Atom data as a string.	 * @see SimplePie::set_feed_url()	 */	function set_raw_data($data)	{		$this->raw_data = $data;	}	/**	 * Allows you to override the default timeout for fetching remote feeds.	 *	 * This allows you to change the maximum time the feed's server to respond	 * and send the feed back.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param int $timeout The maximum number of seconds to spend waiting to retrieve a feed.	 */	function set_timeout($timeout = 10)	{		$this->timeout = (int) $timeout;	}	/**	 * Forces SimplePie to use fsockopen() instead of the preferred cURL	 * functions.	 *	 * @access public	 * @since 1.0 Beta 3	 * @param bool $enable Force fsockopen() to be used	 */	function force_fsockopen($enable = false)	{		$this->force_fsockopen = (bool) $enable;	}	/**	 * Outputs the raw XML content of the feed, after it has gone through	 * SimplePie's filters.	 *	 * Used only for debugging, this function will output the XML content as	 * text/xml. When SimplePie reads in a feed, it does a bit of cleaning up	 * before trying to parse it. Many parts of the feed are re-written in	 * memory, and in the end, you have a parsable feed. XML dump shows you the	 * actual XML that SimplePie tries to parse, which may or may not be very	 * different from the original feed.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable XML dump	 */	function enable_xml_dump($enable = false)	{		$this->xml_dump = (bool) $enable;	}	/**	 * Enables/disables caching in SimplePie.	 *	 * This option allows you to disable caching all-together in SimplePie.	 * However, disabling the cache can lead to longer load times.	 *	 * @access public	 * @since 1.0 Preview Release	 * @param bool $enable Enable caching	 */	function enable_cache($enable = true)	{		$this->cache = (bool) $enable;	}	/**	 * Set the length of time (in seconds) that the contents of a feed	 * will be cached.	 *	 * @access public	 * @param int $seconds The feed content cache duration.	 */	function set_cache_duration($seconds = 3600)	{		$this->cache_duration = (int) $seconds;	}	/**	 * Set the length of time (in seconds) that the autodiscovered feed	 * URL will be cached.	 *	 * @access public	 * @param int $seconds The autodiscovered feed URL cache duration.	 */	function set_autodiscovery_cache_duration($seconds = 604800)	{		$this->autodiscovery_cache_duration = (int) $seconds;	}	/**	 * Set the file system location where the cached files should be stored.	 *	 * @access public	 * @param string $location The file system location.	 */	function set_cache_location($location = './cache')	{		$this->cache_location = (string) $location;	}	/**	 * Determines whether feed items should be sorted into reverse chronological order.	 *	 * @access public	 * @param bool $enable Sort as reverse chronological order.	 */	function enable_order_by_date($enable = true)	{		$this->order_by_date = (bool) $enable;	}	/**	 * Allows you to override the character encoding reported by the feed.	 *	 * @access public	 * @param string $encoding Character encoding.	 */	function set_input_encoding($encoding = false)	{		if ($encoding)		{			$this->input_encoding = (string) $encoding;		}		else		{			$this->input_encoding = false;		}	}	/**	 * Set how much feed autodiscovery to do	 *	 * @access public	 * @see SIMPLEPIE_LOCATOR_NONE	 * @see SIMPLEPIE_LOCATOR_AUTODISCOVERY	 * @see SIMPLEPIE_LOCATOR_LOCAL_EXTENSION	 * @see SIMPLEPIE_LOCATOR_LOCAL_BODY	 * @see SIMPLEPIE_LOCATOR_REMOTE_EXTENSION	 * @see SIMPLEPIE_LOCATOR_REMOTE_BODY	 * @see SIMPLEPIE_LOCATOR_ALL	 * @param int $level Feed Autodiscovery Level (level can be a	 * combination of the above constants, see bitwise OR operator)	 */	function set_autodiscovery_level($level = SIMPLEPIE_LOCATOR_ALL)	{		$this->autodiscovery = (int) $level;	}	/**	 * Allows you to change which class SimplePie uses for caching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_cache_class($class = 'SimplePie_Cache')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Cache'))		{			$this->cache_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for auto-discovery.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_locator_class($class = 'SimplePie_Locator')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Locator'))		{			$this->locator_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for XML parsing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_parser_class($class = 'SimplePie_Parser')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Parser'))		{			$this->parser_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for remote file fetching.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_file_class($class = 'SimplePie_File')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_File'))		{			$this->file_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for data sanitization.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_sanitize_class($class = 'SimplePie_Sanitize')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Sanitize'))		{			$this->sanitize = new $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling feed items.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_item_class($class = 'SimplePie_Item')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Item'))		{			$this->item_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling author data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_author_class($class = 'SimplePie_Author')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Author'))		{			$this->author_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for handling category data.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_category_class($class = 'SimplePie_Category')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Category'))		{			$this->category_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for feed enclosures.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_enclosure_class($class = 'SimplePie_Enclosure')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Enclosure'))		{			$this->enclosure_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:text> captions	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_caption_class($class = 'SimplePie_Caption')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Caption'))		{			$this->caption_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:copyright>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_copyright_class($class = 'SimplePie_Copyright')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Copyright'))		{			$this->copyright_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:credit>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_credit_class($class = 'SimplePie_Credit')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Credit'))		{			$this->credit_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:rating>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_rating_class($class = 'SimplePie_Rating')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Rating'))		{			$this->rating_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for <media:restriction>	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_restriction_class($class = 'SimplePie_Restriction')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Restriction'))		{			$this->restriction_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses for content-type sniffing.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_content_type_sniffer_class($class = 'SimplePie_Content_Type_Sniffer')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Content_Type_Sniffer'))		{			$this->content_type_sniffer_class = $class;			return true;		}		return false;	}	/**	 * Allows you to change which class SimplePie uses item sources.	 * Useful when you are overloading or extending SimplePie's default classes.	 *	 * @access public	 * @param string $class Name of custom class.	 * @link http://php.net/manual/en/keyword.extends.php PHP4 extends documentation	 * @link http://php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends PHP5 extends documentation	 */	function set_source_class($class = 'SimplePie_Source')	{		if (SimplePie_Misc::is_subclass_of($class, 'SimplePie_Source'))		{			$this->source_class = $class;			return true;		}		return false;	}	/**	 * Allows you to override the default user agent string.	 *	 * @access public	 * @param string $ua New user agent string.	 */	function set_useragent($ua = SIMPLEPIE_USERAGENT)	{		$this->useragent = (string) $ua;	}	/**	 * Set callback function to create cache filename with	 *	 * @access public	 * @param mixed $function Callback function	 */	function set_cache_name_function($function = 'md5')	{		if (is_callable($function))		{			$this->cache_name_function = $function;		}	}	/**	 * Set javascript query string parameter	 *	 * @access public	 * @param mixed $get Javascript query string parameter	 */	function set_javascript($get = 'js')	{		if ($get)		{			$this->javascript = (string) $get;		}		else		{			$this->javascript = false;		}	}	/**	 * Set options to make SP as fast as possible.  Forgoes a	 * substantial amount of data sanitization in favor of speed.	 *	 * @access public	 * @param bool $set Whether to set them or not	 */	function set_stupidly_fast($set = false)	{		if ($set)		{			$this->enable_order_by_date(false);			$this->remove_div(false);			$this->strip_comments(false);			$this->strip_htmltags(false);			$this->strip_attributes(false);			$this->set_image_handler(false);		}	}	/**	 * Set maximum number of feeds to check with autodiscovery	 *	 * @access public	 * @param int $max Maximum number of feeds to check	 */	function set_max_checked_feeds($max = 10)	{		$this->max_checked_feeds = (int) $max;	}	function remove_div($enable = true)	{		$this->sanitize->remove_div($enable);	}	function strip_htmltags($tags = '', $encode = null)	{		if ($tags === '')		{			$tags = $this->strip_htmltags;		}		$this->sanitize->strip_htmltags($tags);		if ($encode !== null)		{			$this->sanitize->encode_instead_of_strip($tags);		}	}	function encode_instead_of_strip($enable = true)	{		$this->sanitize->encode_instead_of_strip($enable);	}	function strip_attributes($attribs = '')	{		if ($attribs === '')		{			$attribs = $this->strip_attributes;		}		$this->sanitize->strip_attributes($attribs);	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->sanitize->set_output_encoding($encoding);	}	function strip_comments($strip = false)	{		$this->sanitize->strip_comments($strip);	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->sanitize->set_url_replacements($element_attribute);	}	/**	 * Set the handler to enable the display of cached favicons.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_favicon.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_favicon_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->favicon_handler = $page . '?' . $qs . '=';		}		else		{			$this->favicon_handler = '';		}	}	/**	 * Set the handler to enable the display of cached images.	 *	 * @access public	 * @param str $page Web-accessible path to the handler_image.php file.	 * @param str $qs The query string that the value should be passed to.	 */	function set_image_handler($page = false, $qs = 'i')	{		if ($page !== false)		{			$this->sanitize->set_image_handler($page . '?' . $qs . '=');		}		else		{			$this->image_handler = '';		}	}	/**	 * Set the limit for items returned per-feed with multifeeds.	 *	 * @access public	 * @param integer $limit The maximum number of items to return.	 */	function set_item_limit($limit = 0)	{		$this->item_limit = (int) $limit;	}	function init()	{		// Check absolute bare minimum requirements.		if ((function_exists('version_compare') && version_compare(PHP_VERSION, '4.3.0', '<')) || !extension_loaded('xml') || !extension_loaded('pcre'))		{			return false;		}		// Then check the xml extension is sane (i.e., libxml 2.7.x issue on PHP < 5.2.9 and libxml 2.7.0 to 2.7.2 on any version) if we don't have xmlreader.		elseif (!extension_loaded('xmlreader'))		{			static $xml_is_sane = null;			if ($xml_is_sane === null)			{				$parser_check = xml_parser_create();				xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);				xml_parser_free($parser_check);				$xml_is_sane = isset($values[0]['value']);			}			if (!$xml_is_sane)			{				return false;			}		}		if (isset($_GET[$this->javascript]))		{			SimplePie_Misc::output_javascript();			exit;		}		// Pass whatever was set with config options over to the sanitizer.		$this->sanitize->pass_cache_data($this->cache, $this->cache_location, $this->cache_name_function, $this->cache_class);		$this->sanitize->pass_file_data($this->file_class, $this->timeout, $this->useragent, $this->force_fsockopen);		if ($this->feed_url !== null || $this->raw_data !== null)		{			$this->data = array();			$this->multifeed_objects = array();			$cache = false;			if ($this->feed_url !== null)			{				$parsed_feed_url = SimplePie_Misc::parse_url($this->feed_url);				// Decide whether to enable caching				if ($this->cache && $parsed_feed_url['scheme'] !== '')				{					$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $this->feed_url), 'spc');				}				// If it's enabled and we don't want an XML dump, use the cache				if ($cache && !$this->xml_dump)				{					// Load the Cache					$this->data = $cache->load();					if (!empty($this->data))					{						// If the cache is for an outdated build of SimplePie						if (!isset($this->data['build']) || $this->data['build'] !== SIMPLEPIE_BUILD)						{							$cache->unlink();							$this->data = array();						}						// If we've hit a collision just rerun it with caching disabled						elseif (isset($this->data['url']) && $this->data['url'] !== $this->feed_url)						{							$cache = false;							$this->data = array();						}						// If we've got a non feed_url stored (if the page isn't actually a feed, or is a redirect) use that URL.						elseif (isset($this->data['feed_url']))						{							// If the autodiscovery cache is still valid use it.							if ($cache->mtime() + $this->autodiscovery_cache_duration > time())							{								// Do not need to do feed autodiscovery yet.								if ($this->data['feed_url'] === $this->data['url'])								{									$cache->unlink();									$this->data = array();								}								else								{									$this->set_feed_url($this->data['feed_url']);									return $this->init();								}							}						}						// Check if the cache has been updated						elseif ($cache->mtime() + $this->cache_duration < time())						{							// If we have last-modified and/or etag set							if (isset($this->data['headers']['last-modified']) || isset($this->data['headers']['etag']))							{								$headers = array();								if (isset($this->data['headers']['last-modified']))								{									$headers['if-modified-since'] = $this->data['headers']['last-modified'];								}								if (isset($this->data['headers']['etag']))								{									$headers['if-none-match'] = '"' . $this->data['headers']['etag'] . '"';								}								$file = new $this->file_class($this->feed_url, $this->timeout/10, 5, $headers, $this->useragent, $this->force_fsockopen);								if ($file->success)								{									if ($file->status_code === 304)									{										$cache->touch();										return true;									}									else									{										$headers = $file->headers;									}								}								else								{									unset($file);								}							}						}						// If the cache is still valid, just return true						else						{							return true;						}					}					// If the cache is empty, delete it					else					{						$cache->unlink();						$this->data = array();					}				}				// If we don't already have the file (it'll only exist if we've opened it to check if the cache has been modified), open it.				if (!isset($file))				{					if (is_a($this->file, 'SimplePie_File') && $this->file->url === $this->feed_url)					{						$file =& $this->file;					}					else					{						$file = new $this->file_class($this->feed_url, $this->timeout, 5, null, $this->useragent, $this->force_fsockopen);					}				}				// If the file connection has an error, set SimplePie::error to that and quit				if (!$file->success && !($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))				{					$this->error = $file->error;					if (!empty($this->data))					{						return true;					}					else					{						return false;					}				}				if (!$this->force_feed)				{					// Check if the supplied URL is a feed, if it isn't, look for it.					$locate = new $this->locator_class($file, $this->timeout, $this->useragent, $this->file_class, $this->max_checked_feeds, $this->content_type_sniffer_class);					if (!$locate->is_feed($file))					{						// We need to unset this so that if SimplePie::set_file() has been called that object is untouched						unset($file);						if ($file = $locate->find($this->autodiscovery, $this->all_discovered_feeds))						{							if ($cache)							{								$this->data = array('url' => $this->feed_url, 'feed_url' => $file->url, 'build' => SIMPLEPIE_BUILD);								if (!$cache->save($this))								{									trigger_error("$this->cache_location is not writeable", E_USER_WARNING);								}								$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, call_user_func($this->cache_name_function, $file->url), 'spc');							}							$this->feed_url = $file->url;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}					$locate = null;				}				$headers = $file->headers;				$data = $file->body;				$sniffer = new $this->content_type_sniffer_class($file);				$sniffed = $sniffer->get_type();			}			else			{				$data = $this->raw_data;			}			// Set up array of possible encodings			$encodings = array();			// First check to see if input has been overridden.			if ($this->input_encoding !== false)			{				$encodings[] = $this->input_encoding;			}			$application_types = array('application/xml', 'application/xml-dtd', 'application/xml-external-parsed-entity');			$text_types = array('text/xml', 'text/xml-external-parsed-entity');			// RFC 3023 (only applies to sniffed content)			if (isset($sniffed))			{				if (in_array($sniffed, $application_types) || substr($sniffed, 0, 12) === 'application/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = strtoupper($charset[1]);					}					$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));					$encodings[] = 'UTF-8';				}				elseif (in_array($sniffed, $text_types) || substr($sniffed, 0, 5) === 'text/' && substr($sniffed, -4) === '+xml')				{					if (isset($headers['content-type']) && preg_match('/;\x20?charset=([^;]*)/i', $headers['content-type'], $charset))					{						$encodings[] = $charset[1];					}					$encodings[] = 'US-ASCII';				}				// Text MIME-type default				elseif (substr($sniffed, 0, 5) === 'text/')				{					$encodings[] = 'US-ASCII';				}			}			// Fallback to XML 1.0 Appendix F.1/UTF-8/ISO-8859-1			$encodings = array_merge($encodings, SimplePie_Misc::xml_encoding($data));			$encodings[] = 'UTF-8';			$encodings[] = 'ISO-8859-1';			// There's no point in trying an encoding twice			$encodings = array_unique($encodings);			// If we want the XML, just output that with the most likely encoding and quit			if ($this->xml_dump)			{				header('Content-type: text/xml; charset=' . $encodings[0]);				echo $data;				exit;			}			// Loop through each possible encoding, till we return something, or run out of possibilities			foreach ($encodings as $encoding)			{				// Change the encoding to UTF-8 (as we always use UTF-8 internally)				if ($utf8_data = SimplePie_Misc::change_encoding($data, $encoding, 'UTF-8'))				{					// Create new parser					$parser = new $this->parser_class();					// If it's parsed fine					if ($parser->parse($utf8_data, 'UTF-8'))					{						$this->data = $parser->get_data();						if ($this->get_type() & ~SIMPLEPIE_TYPE_NONE)						{							if (isset($headers))							{								$this->data['headers'] = $headers;							}							$this->data['build'] = SIMPLEPIE_BUILD;							// Cache the file if caching is enabled							if ($cache && !$cache->save($this))							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);							}							return true;						}						else						{							$this->error = "A feed could not be found at $this->feed_url";							SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);							return false;						}					}				}			}			if(isset($parser))			{				// We have an error, just set SimplePie_Misc::error to it and quit				$this->error = sprintf('XML error: %s at line %d, column %d', $parser->get_error_string(), $parser->get_current_line(), $parser->get_current_column());			}			else			{				$this->error = 'The data could not be converted to UTF-8';			}			SimplePie_Misc::error($this->error, E_USER_NOTICE, __FILE__, __LINE__);			return false;		}		elseif (!empty($this->multifeed_url))		{			$i = 0;			$success = 0;			$this->multifeed_objects = array();			foreach ($this->multifeed_url as $url)			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$this->multifeed_objects[$i] = clone($this);				}				else				{					$this->multifeed_objects[$i] = $this;				}				$this->multifeed_objects[$i]->set_feed_url($url);				$success |= $this->multifeed_objects[$i]->init();				$i++;			}			return (bool) $success;		}		else		{			return false;		}	}	/**	 * Return the error message for the occured error	 *	 * @access public	 * @return string Error message	 */	function error()	{		return $this->error;	}	function get_encoding()	{		return $this->sanitize->output_encoding;	}	function handle_content_type($mime = 'text/html')	{		if (!headers_sent())		{			$header = "Content-type: $mime;";			if ($this->get_encoding())			{				$header .= ' charset=' . $this->get_encoding();			}			else			{				$header .= ' charset=UTF-8';			}			header($header);		}	}	function get_type()	{		if (!isset($this->data['type']))		{			$this->data['type'] = SIMPLEPIE_TYPE_ALL;			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_10;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_ATOM_03;			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF']))			{				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_10]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_10;				}				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['channel'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['image'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item'])				|| isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_090]['textinput']))				{					$this->data['type'] &= SIMPLEPIE_TYPE_RSS_090;				}			}			elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss']))			{				$this->data['type'] &= SIMPLEPIE_TYPE_RSS_ALL;				if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))				{					switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['attribs']['']['version']))					{						case '0.91':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091;							if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))							{								switch (trim($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['skiphours']['hour'][0]['data']))								{									case '0':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_NETSCAPE;										break;									case '24':										$this->data['type'] &= SIMPLEPIE_TYPE_RSS_091_USERLAND;										break;								}							}							break;						case '0.92':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_092;							break;						case '0.93':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_093;							break;						case '0.94':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_094;							break;						case '2.0':							$this->data['type'] &= SIMPLEPIE_TYPE_RSS_20;							break;					}				}			}			else			{				$this->data['type'] = SIMPLEPIE_TYPE_NONE;			}		}		return $this->data['type'];	}	/**	 * Returns the URL for the favicon of the feed's website.	 *	 * @todo Cache atom:icon	 * @access public	 * @since 1.0	 */	function get_favicon()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif (($url = $this->get_link()) !== null && preg_match('/^http(s)?:\/\//i', $url))		{			$favicon = SimplePie_Misc::absolutize_url('/favicon.ico', $url);			if ($this->cache && $this->favicon_handler)			{				$favicon_filename = call_user_func($this->cache_name_function, $favicon);				$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $favicon_filename, 'spi');				if ($cache->load())				{					return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);				}				else				{					$file = new $this->file_class($favicon, $this->timeout / 10, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);					if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)) && strlen($file->body) > 0)					{						$sniffer = new $this->content_type_sniffer_class($file);						if (substr($sniffer->get_type(), 0, 6) === 'image/')						{							if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))							{								return $this->sanitize($this->favicon_handler . $favicon_filename, SIMPLEPIE_CONSTRUCT_IRI);							}							else							{								trigger_error("$cache->name is not writeable", E_USER_WARNING);								return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);							}						}						// not an image						else						{							return false;						}					}				}			}			else			{				return $this->sanitize($favicon, SIMPLEPIE_CONSTRUCT_IRI);			}		}		return false;	}	/**	 * @todo If we have a perm redirect we should return the new URL	 * @todo When we make the above change, let's support <itunes:new-feed-url> as well	 * @todo Also, |atom:link|@rel=self	 */	function subscribe_url()	{		if ($this->feed_url !== null)		{			return $this->sanitize($this->feed_url, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_feed()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_outlook()	{		if ($this->feed_url !== null)		{			return $this->sanitize('outlook' . SimplePie_Misc::fix_protocol($this->feed_url, 2), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_podcast()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 3), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_itunes()	{		if ($this->feed_url !== null)		{			return $this->sanitize(SimplePie_Misc::fix_protocol($this->feed_url, 4), SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	/**	 * Creates the subscribe_* methods' return data	 *	 * @access private	 * @param string $feed_url String to prefix to the feed URL	 * @param string $site_url String to prefix to the site URL (and	 * suffix to the feed URL)	 * @return mixed URL if feed exists, false otherwise	 */	function subscribe_service($feed_url, $site_url = null)	{		if ($this->subscribe_url())		{			$return = $feed_url . rawurlencode($this->feed_url);			if ($site_url !== null && $this->get_link() !== null)			{				$return .= $site_url . rawurlencode($this->get_link());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function subscribe_aol()	{		return $this->subscribe_service('http://feeds.my.aol.com/add.jsp?url=');	}	function subscribe_bloglines()	{		return $this->subscribe_service('http://www.bloglines.com/sub/');	}	function subscribe_eskobo()	{		return $this->subscribe_service('http://www.eskobo.com/?AddToMyPage=');	}	function subscribe_feedfeeds()	{		return $this->subscribe_service('http://www.feedfeeds.com/add?feed=');	}	function subscribe_feedster()	{		return $this->subscribe_service('http://www.feedster.com/myfeedster.php?action=addrss&confirm=no&rssurl=');	}	function subscribe_google()	{		return $this->subscribe_service('http://fusion.google.com/add?feedurl=');	}	function subscribe_gritwire()	{		return $this->subscribe_service('http://my.gritwire.com/feeds/addExternalFeed.aspx?FeedUrl=');	}	function subscribe_msn()	{		return $this->subscribe_service('http://my.msn.com/addtomymsn.armx?id=rss&ut=', '&ru=');	}	function subscribe_netvibes()	{		return $this->subscribe_service('http://www.netvibes.com/subscribe.php?url=');	}	function subscribe_newsburst()	{		return $this->subscribe_service('http://www.newsburst.com/Source/?add=');	}	function subscribe_newsgator()	{		return $this->subscribe_service('http://www.newsgator.com/ngs/subscriber/subext.aspx?url=');	}	function subscribe_odeo()	{		return $this->subscribe_service('http://www.odeo.com/listen/subscribe?feed=');	}	function subscribe_podnova()	{		return $this->subscribe_service('http://www.podnova.com/index_your_podcasts.srf?action=add&url=');	}	function subscribe_rojo()	{		return $this->subscribe_service('http://www.rojo.com/add-subscription?resource=');	}	function subscribe_yahoo()	{		return $this->subscribe_service('http://add.my.yahoo.com/rss?url=');	}	function get_feed_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_10)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_ATOM_03)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_RDF)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['child'][$namespace][$tag];			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag]))			{				return $this->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][$namespace][$tag];			}		}		return null;	}	function get_channel_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_ATOM_ALL)		{			if ($return = $this->get_feed_tags($namespace, $tag))			{				return $return;			}		}		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($channel = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'channel'))			{				if (isset($channel[0]['child'][$namespace][$tag]))				{					return $channel[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_image_tags($namespace, $tag)	{		$type = $this->get_type();		if ($type & SIMPLEPIE_TYPE_RSS_10)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_090)		{			if ($image = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		if ($type & SIMPLEPIE_TYPE_RSS_SYNDICATION)		{			if ($image = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'image'))			{				if (isset($image[0]['child'][$namespace][$tag]))				{					return $image[0]['child'][$namespace][$tag];				}			}		}		return null;	}	function get_base($element = array())	{		if (!($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION) && !empty($element['xml_base_explicit']) && isset($element['xml_base']))		{			return $element['xml_base'];		}		elseif ($this->get_link() !== null)		{			return $this->get_link();		}		else		{			return $this->subscribe_url();		}	}	function sanitize($data, $type, $base = '')	{		return $this->sanitize->sanitize($data, $type, $base);	}	function get_title()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] = new $this->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] = new $this->category_class($term, $scheme, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] = new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] = new $this->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] = new $this->author_class($name, $uri, $email);			}		}		if ($author = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] = new $this->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] = new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] = new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] = new $this->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] = new $this->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] = new $this->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_all_discovered_feeds()	{		return $this->all_discovered_feeds;	}	function get_description()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang']))		{			return $this->sanitize($this->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['headers']['content-language']))		{			return $this->sanitize($this->data['headers']['content-language'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_title()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_link()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_image_width()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'width'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 88.0;		}		else		{			return null;		}	}	function get_image_height()	{		if ($return = $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'height'))		{			return round($return[0]['data']);		}		elseif ($this->get_type() & SIMPLEPIE_TYPE_RSS_SYNDICATION && $this->get_image_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'url'))		{			return 31.0;		}		else		{			return null;		}	}	function get_item_quantity($max = 0)	{		$max = (int) $max;		$qty = count($this->get_items());		if ($max === 0)		{			return $qty;		}		else		{			return ($qty > $max) ? $max : $qty;		}	}	function get_item($key = 0)	{		$items = $this->get_items();		if (isset($items[$key]))		{			return $items[$key];		}		else		{			return null;		}	}	function get_items($start = 0, $end = 0)	{		if (!isset($this->data['items']))		{			if (!empty($this->multifeed_objects))			{				$this->data['items'] = SimplePie::merge_items($this->multifeed_objects, $start, $end, $this->item_limit);			}			else			{				$this->data['items'] = array();				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'entry'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_feed_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}				if ($items = $this->get_channel_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'item'))				{					$keys = array_keys($items);					foreach ($keys as $key)					{						$this->data['items'][] = new $this->item_class($this, $items[$key]);					}				}			}		}		if (!empty($this->data['items']))		{			// If we want to order it by date, check if all items have a date, and then sort it			if ($this->order_by_date && empty($this->multifeed_objects))			{				if (!isset($this->data['ordered_items']))				{					$do_sort = true;					foreach ($this->data['items'] as $item)					{						if (!$item->get_date('U'))						{							$do_sort = false;							break;						}					}					$item = null;					$this->data['ordered_items'] = $this->data['items'];					if ($do_sort)					{						usort($this->data['ordered_items'], array(&$this, 'sort_items'));					}				}				$items = $this->data['ordered_items'];			}			else			{				$items = $this->data['items'];			}			// Slice the data as desired			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			return array();		}	}	/**	 * @static	 */	function sort_items($a, $b)	{		return $a->get_date('U') <= $b->get_date('U');	}	/**	 * @static	 */	function merge_items($urls, $start = 0, $end = 0, $limit = 0)	{		if (is_array($urls) && sizeof($urls) > 0)		{			$items = array();			foreach ($urls as $arg)			{				if (is_a($arg, 'SimplePie'))				{					$items = array_merge($items, $arg->get_items(0, $limit));				}				else				{					trigger_error('Arguments must be SimplePie objects', E_USER_WARNING);				}			}			$do_sort = true;			foreach ($items as $item)			{				if (!$item->get_date('U'))				{					$do_sort = false;					break;				}			}			$item = null;			if ($do_sort)			{				usort($items, array('SimplePie', 'sort_items'));			}			if ($end === 0)			{				return array_slice($items, $start);			}			else			{				return array_slice($items, $start, $end);			}		}		else		{			trigger_error('Cannot merge zero SimplePie objects', E_USER_WARNING);			return array();		}	}}class SimplePie_Item{	var $feed;	var $data = array();	function SimplePie_Item($feed, $data)	{		$this->feed = $feed;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	/**	 * Remove items that link back to this before destroying this object	 */	function __destruct()	{		if ((version_compare(PHP_VERSION, '5.3', '<') || !gc_enabled()) && !ini_get('zend.ze1_compatibility_mode'))		{			unset($this->feed);		}	}	function get_item_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->feed->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->feed->sanitize($data, $type, $base);	}	function get_feed()	{		return $this->feed;	}	function get_id($hash = false)	{		if (!$hash)		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'id'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'identifier'))			{				return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif (($return = $this->get_permalink()) !== null)			{				return $return;			}			elseif (($return = $this->get_title()) !== null)			{				return $return;			}		}		if ($this->get_permalink() !== null || $this->get_title() !== null)		{			return md5($this->get_permalink() . $this->get_title());		}		else		{			return md5(serialize($this->data));		}	}	function get_title()	{		if (!isset($this->data['title']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))			{				$this->data['title'] = $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$this->data['title'] = null;			}		}		return $this->data['title'];	}	function get_description($description_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'summary'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (!$description_only)		{			return $this->get_content(true);		}		else		{			return null;		}	}	function get_content($content_only = false)	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_content_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'content'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10_MODULES_CONTENT, 'encoded'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif (!$content_only)		{			return $this->get_description(true);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] = new $this->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] = new $this->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] = new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] = new $this->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] = new $this->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] = new $this->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] = new $this->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] = new $this->feed->author_class($name, $url, $email);			}		}		if ($author = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'author'))		{			$authors[] = new $this->feed->author_class(null, null, $this->sanitize($author[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] = new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] = new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] = new $this->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		elseif (($source = $this->get_source()) && ($authors = $source->get_authors()))		{			return $authors;		}		elseif ($authors = $this->feed->get_authors())		{			return $authors;		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_date($date_format = 'j F Y, g:i a')	{		if (!isset($this->data['date']))		{			if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'published'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'updated'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'issued'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'created'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'modified'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'pubDate'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_11, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_DC_10, 'date'))			{				$this->data['date']['raw'] = $return[0]['data'];			}			if (!empty($this->data['date']['raw']))			{				$parser = SimplePie_Parse_Date::get();				$this->data['date']['parsed'] = $parser->parse($this->data['date']['raw']);			}			else			{				$this->data['date'] = null;			}		}		if ($this->data['date'])		{			$date_format = (string) $date_format;			switch ($date_format)			{				case '':					return $this->sanitize($this->data['date']['raw'], SIMPLEPIE_CONSTRUCT_TEXT);				case 'U':					return $this->data['date']['parsed'];				default:					return date($date_format, $this->data['date']['parsed']);			}		}		else		{			return null;		}	}	function get_local_date($date_format = '%c')	{		if (!$date_format)		{			return $this->sanitize($this->get_date(''), SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (($date = $this->get_date('U')) !== null)		{			return strftime($date_format, $date);		}		else		{			return null;		}	}	function get_permalink()	{		$link = $this->get_link();		$enclosure = $this->get_enclosure(0);		if ($link !== null)		{			return $link;		}		elseif ($enclosure !== null)		{			return $enclosure->get_link();		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if ($links[$key] !== null)		{			return $links[$key];		}		else		{			return null;		}	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']))				{					$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';					$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));				}			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'guid'))			{				if (!isset($links[0]['attribs']['']['isPermaLink']) || strtolower(trim($links[0]['attribs']['']['isPermaLink'])) === 'true')				{					$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));				}			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	/**	 * @todo Add ability to prefer one type of content over another (in a media group).	 */	function get_enclosure($key = 0, $prefer = null)	{		$enclosures = $this->get_enclosures();		if (isset($enclosures[$key]))		{			return $enclosures[$key];		}		else		{			return null;		}	}	/**	 * Grabs all available enclosures (podcasts, etc.)	 *	 * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.	 *	 * At this point, we're pretty much assuming that all enclosures for an item are the same content.  Anything else is too complicated to properly support.	 *	 * @todo Add support for end-user defined sorting of enclosures by type/handler (so we can prefer the faster-loading FLV over MP4).	 * @todo If an element exists at a level, but it's value is empty, we should fall back to the value from the parent (if it exists).	 */	function get_enclosures()	{		if (!isset($this->data['enclosures']))		{			$this->data['enclosures'] = array();			// Elements			$captions_parent = null;			$categories_parent = null;			$copyrights_parent = null;			$credits_parent = null;			$description_parent = null;			$duration_parent = null;			$hashes_parent = null;			$keywords_parent = null;			$player_parent = null;			$ratings_parent = null;			$restrictions_parent = null;			$thumbnails_parent = null;			$title_parent = null;			// Let's do the channel and item-level ones first, and just re-use them if we need to.			$parent = $this->get_feed();			// CAPTIONS			if ($captions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			elseif ($captions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'text'))			{				foreach ($captions as $caption)				{					$caption_type = null;					$caption_lang = null;					$caption_startTime = null;					$caption_endTime = null;					$caption_text = null;					if (isset($caption['attribs']['']['type']))					{						$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['lang']))					{						$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['start']))					{						$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['attribs']['']['end']))					{						$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($caption['data']))					{						$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$captions_parent[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);				}			}			if (is_array($captions_parent))			{				$captions_parent = array_values(SimplePie_Misc::array_unique($captions_parent));			}			// CATEGORIES			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'category') as $category)			{				$term = null;				$scheme = null;				$label = null;				if (isset($category['data']))				{					$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($category['attribs']['']['scheme']))				{					$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);				}				else				{					$scheme = 'http://search.yahoo.com/mrss/category_schema';				}				if (isset($category['attribs']['']['label']))				{					$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);			}			foreach ((array) $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'category') as $category)			{				$term = null;				$scheme = 'http://www.itunes.com/dtds/podcast-1.0.dtd';				$label = null;				if (isset($category['attribs']['']['text']))				{					$label = $this->sanitize($category['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);				if (isset($category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category']))				{					foreach ((array) $category['child'][SIMPLEPIE_NAMESPACE_ITUNES]['category'] as $subcategory)					{						if (isset($subcategory['attribs']['']['text']))						{							$label = $this->sanitize($subcategory['attribs']['']['text'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$categories_parent[] = new $this->feed->category_class($term, $scheme, $label);					}				}			}			if (is_array($categories_parent))			{				$categories_parent = array_values(SimplePie_Misc::array_unique($categories_parent));			}			// COPYRIGHT			if ($copyright = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent = new $this->feed->copyright_class($copyright_url, $copyright_label);			}			elseif ($copyright = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'copyright'))			{				$copyright_url = null;				$copyright_label = null;				if (isset($copyright[0]['attribs']['']['url']))				{					$copyright_url = $this->sanitize($copyright[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);				}				if (isset($copyright[0]['data']))				{					$copyright_label = $this->sanitize($copyright[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}				$copyrights_parent = new $this->feed->copyright_class($copyright_url, $copyright_label);			}			// CREDITS			if ($credits = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			elseif ($credits = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'credit'))			{				foreach ($credits as $credit)				{					$credit_role = null;					$credit_scheme = null;					$credit_name = null;					if (isset($credit['attribs']['']['role']))					{						$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($credit['attribs']['']['scheme']))					{						$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$credit_scheme = 'urn:ebu';					}					if (isset($credit['data']))					{						$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$credits_parent[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);				}			}			if (is_array($credits_parent))			{				$credits_parent = array_values(SimplePie_Misc::array_unique($credits_parent));			}			// DESCRIPTION			if ($description_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($description_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'description'))			{				if (isset($description_parent[0]['data']))				{					$description_parent = $this->sanitize($description_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// DURATION			if ($duration_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'duration'))			{				$seconds = null;				$minutes = null;				$hours = null;				if (isset($duration_parent[0]['data']))				{					$temp = explode(':', $this->sanitize($duration_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					if (sizeof($temp) > 0)					{						(int) $seconds = array_pop($temp);					}					if (sizeof($temp) > 0)					{						(int) $minutes = array_pop($temp);						$seconds += $minutes * 60;					}					if (sizeof($temp) > 0)					{						(int) $hours = array_pop($temp);						$seconds += $hours * 3600;					}					unset($temp);					$duration_parent = $seconds;				}			}			// HASHES			if ($hashes_iterator = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			elseif ($hashes_iterator = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'hash'))			{				foreach ($hashes_iterator as $hash)				{					$value = null;					$algo = null;					if (isset($hash['data']))					{						$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($hash['attribs']['']['algo']))					{						$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$algo = 'md5';					}					$hashes_parent[] = $algo.':'.$value;				}			}			if (is_array($hashes_parent))			{				$hashes_parent = array_values(SimplePie_Misc::array_unique($hashes_parent));			}			// KEYWORDS			if ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			elseif ($keywords = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'keywords'))			{				if (isset($keywords[0]['data']))				{					$temp = explode(',', $this->sanitize($keywords[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));					foreach ($temp as $word)					{						$keywords_parent[] = trim($word);					}				}				unset($temp);			}			if (is_array($keywords_parent))			{				$keywords_parent = array_values(SimplePie_Misc::array_unique($keywords_parent));			}			// PLAYER			if ($player_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			elseif ($player_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'player'))			{				if (isset($player_parent[0]['attribs']['']['url']))				{					$player_parent = $this->sanitize($player_parent[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);				}			}			// RATINGS			if ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'rating'))			{				foreach ($ratings as $rating)				{					$rating_scheme = null;					$rating_value = null;					if (isset($rating['attribs']['']['scheme']))					{						$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);					}					else					{						$rating_scheme = 'urn:simple';					}					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			elseif ($ratings = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'explicit'))			{				foreach ($ratings as $rating)				{					$rating_scheme = 'urn:itunes';					$rating_value = null;					if (isset($rating['data']))					{						$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$ratings_parent[] = new $this->feed->rating_class($rating_scheme, $rating_value);				}			}			if (is_array($ratings_parent))			{				$ratings_parent = array_values(SimplePie_Misc::array_unique($ratings_parent));			}			// RESTRICTIONS			if ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'restriction'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = null;					$restriction_type = null;					$restriction_value = null;					if (isset($restriction['attribs']['']['relationship']))					{						$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['attribs']['']['type']))					{						$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($restriction['data']))					{						$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			elseif ($restrictions = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'block'))			{				foreach ($restrictions as $restriction)				{					$restriction_relationship = 'allow';					$restriction_type = null;					$restriction_value = 'itunes';					if (isset($restriction['data']) && strtolower($restriction['data']) === 'yes')					{						$restriction_relationship = 'deny';					}					$restrictions_parent[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);				}			}			if (is_array($restrictions_parent))			{				$restrictions_parent = array_values(SimplePie_Misc::array_unique($restrictions_parent));			}			// THUMBNAILS			if ($thumbnails = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			elseif ($thumbnails = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'thumbnail'))			{				foreach ($thumbnails as $thumbnail)				{					if (isset($thumbnail['attribs']['']['url']))					{						$thumbnails_parent[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);					}				}			}			// TITLES			if ($title_parent = $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			elseif ($title_parent = $parent->get_channel_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'title'))			{				if (isset($title_parent[0]['data']))				{					$title_parent = $this->sanitize($title_parent[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);				}			}			// Clear the memory			unset($parent);			// Attributes			$bitrate = null;			$channels = null;			$duration = null;			$expression = null;			$framerate = null;			$height = null;			$javascript = null;			$lang = null;			$length = null;			$medium = null;			$samplingrate = null;			$type = null;			$url = null;			$width = null;			// Elements			$captions = null;			$categories = null;			$copyrights = null;			$credits = null;			$description = null;			$hashes = null;			$keywords = null;			$player = null;			$ratings = null;			$restrictions = null;			$thumbnails = null;			$title = null;			// If we have media:group tags, loop through them.			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'group') as $group)			{				// If we have media:content tags, loop through them.				foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] = new $this->feed->category_class($term, $scheme, $label);							}						}						if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] = new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights = new $this->feed->copyright_class($copyright_url, $copyright_label);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights = new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] = new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] = new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						elseif (isset($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($group['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			// If we have standalone media:content tags, loop through them.			if (isset($this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content']))			{				foreach ((array) $this->data['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'] as $content)				{					if (isset($content['attribs']['']['url']))					{						// Attributes						$bitrate = null;						$channels = null;						$duration = null;						$expression = null;						$framerate = null;						$height = null;						$javascript = null;						$lang = null;						$length = null;						$medium = null;						$samplingrate = null;						$type = null;						$url = null;						$width = null;						// Elements						$captions = null;						$categories = null;						$copyrights = null;						$credits = null;						$description = null;						$hashes = null;						$keywords = null;						$player = null;						$ratings = null;						$restrictions = null;						$thumbnails = null;						$title = null;						// Start checking the attributes of media:content						if (isset($content['attribs']['']['bitrate']))						{							$bitrate = $this->sanitize($content['attribs']['']['bitrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['channels']))						{							$channels = $this->sanitize($content['attribs']['']['channels'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['duration']))						{							$duration = $this->sanitize($content['attribs']['']['duration'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$duration = $duration_parent;						}						if (isset($content['attribs']['']['expression']))						{							$expression = $this->sanitize($content['attribs']['']['expression'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['framerate']))						{							$framerate = $this->sanitize($content['attribs']['']['framerate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['height']))						{							$height = $this->sanitize($content['attribs']['']['height'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['lang']))						{							$lang = $this->sanitize($content['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['fileSize']))						{							$length = ceil($content['attribs']['']['fileSize']);						}						if (isset($content['attribs']['']['medium']))						{							$medium = $this->sanitize($content['attribs']['']['medium'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['samplingrate']))						{							$samplingrate = $this->sanitize($content['attribs']['']['samplingrate'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['type']))						{							$type = $this->sanitize($content['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);						}						if (isset($content['attribs']['']['width']))						{							$width = $this->sanitize($content['attribs']['']['width'], SIMPLEPIE_CONSTRUCT_TEXT);						}						$url = $this->sanitize($content['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						// Checking the other optional media: elements. Priority: media:content, media:group, item, channel						// CAPTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['text'] as $caption)							{								$caption_type = null;								$caption_lang = null;								$caption_startTime = null;								$caption_endTime = null;								$caption_text = null;								if (isset($caption['attribs']['']['type']))								{									$caption_type = $this->sanitize($caption['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['lang']))								{									$caption_lang = $this->sanitize($caption['attribs']['']['lang'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['start']))								{									$caption_startTime = $this->sanitize($caption['attribs']['']['start'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['attribs']['']['end']))								{									$caption_endTime = $this->sanitize($caption['attribs']['']['end'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($caption['data']))								{									$caption_text = $this->sanitize($caption['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$captions[] = new $this->feed->caption_class($caption_type, $caption_lang, $caption_startTime, $caption_endTime, $caption_text);							}							if (is_array($captions))							{								$captions = array_values(SimplePie_Misc::array_unique($captions));							}						}						else						{							$captions = $captions_parent;						}						// CATEGORIES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category']))						{							foreach ((array) $content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['category'] as $category)							{								$term = null;								$scheme = null;								$label = null;								if (isset($category['data']))								{									$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($category['attribs']['']['scheme']))								{									$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$scheme = 'http://search.yahoo.com/mrss/category_schema';								}								if (isset($category['attribs']['']['label']))								{									$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$categories[] = new $this->feed->category_class($term, $scheme, $label);							}						}						if (is_array($categories) && is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique(array_merge($categories, $categories_parent)));						}						elseif (is_array($categories))						{							$categories = array_values(SimplePie_Misc::array_unique($categories));						}						elseif (is_array($categories_parent))						{							$categories = array_values(SimplePie_Misc::array_unique($categories_parent));						}						else						{							$categories = null;						}						// COPYRIGHTS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright']))						{							$copyright_url = null;							$copyright_label = null;							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url']))							{								$copyright_url = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_TEXT);							}							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data']))							{								$copyright_label = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['copyright'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);							}							$copyrights = new $this->feed->copyright_class($copyright_url, $copyright_label);						}						else						{							$copyrights = $copyrights_parent;						}						// CREDITS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['credit'] as $credit)							{								$credit_role = null;								$credit_scheme = null;								$credit_name = null;								if (isset($credit['attribs']['']['role']))								{									$credit_role = $this->sanitize($credit['attribs']['']['role'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($credit['attribs']['']['scheme']))								{									$credit_scheme = $this->sanitize($credit['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$credit_scheme = 'urn:ebu';								}								if (isset($credit['data']))								{									$credit_name = $this->sanitize($credit['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$credits[] = new $this->feed->credit_class($credit_role, $credit_scheme, $credit_name);							}							if (is_array($credits))							{								$credits = array_values(SimplePie_Misc::array_unique($credits));							}						}						else						{							$credits = $credits_parent;						}						// DESCRIPTION						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description']))						{							$description = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['description'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$description = $description_parent;						}						// HASHES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['hash'] as $hash)							{								$value = null;								$algo = null;								if (isset($hash['data']))								{									$value = $this->sanitize($hash['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($hash['attribs']['']['algo']))								{									$algo = $this->sanitize($hash['attribs']['']['algo'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$algo = 'md5';								}								$hashes[] = $algo.':'.$value;							}							if (is_array($hashes))							{								$hashes = array_values(SimplePie_Misc::array_unique($hashes));							}						}						else						{							$hashes = $hashes_parent;						}						// KEYWORDS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords']))						{							if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data']))							{								$temp = explode(',', $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['keywords'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT));								foreach ($temp as $word)								{									$keywords[] = trim($word);								}								unset($temp);							}							if (is_array($keywords))							{								$keywords = array_values(SimplePie_Misc::array_unique($keywords));							}						}						else						{							$keywords = $keywords_parent;						}						// PLAYER						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player']))						{							$player = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['player'][0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);						}						else						{							$player = $player_parent;						}						// RATINGS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['rating'] as $rating)							{								$rating_scheme = null;								$rating_value = null;								if (isset($rating['attribs']['']['scheme']))								{									$rating_scheme = $this->sanitize($rating['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);								}								else								{									$rating_scheme = 'urn:simple';								}								if (isset($rating['data']))								{									$rating_value = $this->sanitize($rating['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$ratings[] = new $this->feed->rating_class($rating_scheme, $rating_value);							}							if (is_array($ratings))							{								$ratings = array_values(SimplePie_Misc::array_unique($ratings));							}						}						else						{							$ratings = $ratings_parent;						}						// RESTRICTIONS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['restriction'] as $restriction)							{								$restriction_relationship = null;								$restriction_type = null;								$restriction_value = null;								if (isset($restriction['attribs']['']['relationship']))								{									$restriction_relationship = $this->sanitize($restriction['attribs']['']['relationship'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['attribs']['']['type']))								{									$restriction_type = $this->sanitize($restriction['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);								}								if (isset($restriction['data']))								{									$restriction_value = $this->sanitize($restriction['data'], SIMPLEPIE_CONSTRUCT_TEXT);								}								$restrictions[] = new $this->feed->restriction_class($restriction_relationship, $restriction_type, $restriction_value);							}							if (is_array($restrictions))							{								$restrictions = array_values(SimplePie_Misc::array_unique($restrictions));							}						}						else						{							$restrictions = $restrictions_parent;						}						// THUMBNAILS						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail']))						{							foreach ($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['thumbnail'] as $thumbnail)							{								$thumbnails[] = $this->sanitize($thumbnail['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI);							}							if (is_array($thumbnails))							{								$thumbnails = array_values(SimplePie_Misc::array_unique($thumbnails));							}						}						else						{							$thumbnails = $thumbnails_parent;						}						// TITLES						if (isset($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title']))						{							$title = $this->sanitize($content['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['title'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);						}						else						{							$title = $title_parent;						}						$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions, $categories, $channels, $copyrights, $credits, $description, $duration, $expression, $framerate, $hashes, $height, $keywords, $lang, $medium, $player, $ratings, $restrictions, $samplingrate, $thumbnails, $title, $width);					}				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			foreach ((array) $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link') as $link)			{				if (isset($link['attribs']['']['href']) && !empty($link['attribs']['']['rel']) && $link['attribs']['']['rel'] === 'enclosure')				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					if (isset($link['attribs']['']['type']))					{						$type = $this->sanitize($link['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($link['attribs']['']['length']))					{						$length = ceil($link['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if ($enclosure = $this->get_item_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'enclosure'))			{				if (isset($enclosure[0]['attribs']['']['url']))				{					// Attributes					$bitrate = null;					$channels = null;					$duration = null;					$expression = null;					$framerate = null;					$height = null;					$javascript = null;					$lang = null;					$length = null;					$medium = null;					$samplingrate = null;					$type = null;					$url = null;					$width = null;					$url = $this->sanitize($enclosure[0]['attribs']['']['url'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($enclosure[0]));					if (isset($enclosure[0]['attribs']['']['type']))					{						$type = $this->sanitize($enclosure[0]['attribs']['']['type'], SIMPLEPIE_CONSTRUCT_TEXT);					}					if (isset($enclosure[0]['attribs']['']['length']))					{						$length = ceil($enclosure[0]['attribs']['']['length']);					}					// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor					$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);				}			}			if (sizeof($this->data['enclosures']) === 0 && ($url || $type || $length || $bitrate || $captions_parent || $categories_parent || $channels || $copyrights_parent || $credits_parent || $description_parent || $duration_parent || $expression || $framerate || $hashes_parent || $height || $keywords_parent || $lang || $medium || $player_parent || $ratings_parent || $restrictions_parent || $samplingrate || $thumbnails_parent || $title_parent || $width))			{				// Since we don't have group or content for these, we'll just pass the '*_parent' variables directly to the constructor				$this->data['enclosures'][] = new $this->feed->enclosure_class($url, $type, $length, $this->feed->javascript, $bitrate, $captions_parent, $categories_parent, $channels, $copyrights_parent, $credits_parent, $description_parent, $duration_parent, $expression, $framerate, $hashes_parent, $height, $keywords_parent, $lang, $medium, $player_parent, $ratings_parent, $restrictions_parent, $samplingrate, $thumbnails_parent, $title_parent, $width);			}			$this->data['enclosures'] = array_values(SimplePie_Misc::array_unique($this->data['enclosures']));		}		if (!empty($this->data['enclosures']))		{			return $this->data['enclosures'];		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_source()	{		if ($return = $this->get_item_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'source'))		{			return new $this->feed->source_class($this, $return[0]);		}		else		{			return null;		}	}	/**	 * Creates the add_to_* methods' return data	 *	 * @access private	 * @param string $item_url String to prefix to the item permalink	 * @param string $title_url String to prefix to the item title	 * (and suffix to the item permalink)	 * @return mixed URL if feed exists, false otherwise	 */	function add_to_service($item_url, $title_url = null, $summary_url = null)	{		if ($this->get_permalink() !== null)		{			$return = $item_url . rawurlencode($this->get_permalink());			if ($title_url !== null && $this->get_title() !== null)			{				$return .= $title_url . rawurlencode($this->get_title());			}			if ($summary_url !== null && $this->get_description() !== null)			{				$return .= $summary_url . rawurlencode($this->get_description());			}			return $this->sanitize($return, SIMPLEPIE_CONSTRUCT_IRI);		}		else		{			return null;		}	}	function add_to_blinklist()	{		return $this->add_to_service('http://www.blinklist.com/index.php?Action=Blink/addblink.php&Description=&Url=', '&Title=');	}	function add_to_blogmarks()	{		return $this->add_to_service('http://blogmarks.net/my/new.php?mini=1&simple=1&url=', '&title=');	}	function add_to_delicious()	{		return $this->add_to_service('http://del.icio.us/post/?v=4&url=', '&title=');	}	function add_to_digg()	{		return $this->add_to_service('http://digg.com/submit?url=', '&title=', '&bodytext=');	}	function add_to_furl()	{		return $this->add_to_service('http://www.furl.net/storeIt.jsp?u=', '&t=');	}	function add_to_magnolia()	{		return $this->add_to_service('http://ma.gnolia.com/bookmarklet/add?url=', '&title=');	}	function add_to_myweb20()	{		return $this->add_to_service('http://myweb2.search.yahoo.com/myresults/bookmarklet?u=', '&t=');	}	function add_to_newsvine()	{		return $this->add_to_service('http://www.newsvine.com/_wine/save?u=', '&h=');	}	function add_to_reddit()	{		return $this->add_to_service('http://reddit.com/submit?url=', '&title=');	}	function add_to_segnalo()	{		return $this->add_to_service('http://segnalo.com/post.html.php?url=', '&title=');	}	function add_to_simpy()	{		return $this->add_to_service('http://www.simpy.com/simpy/LinkAdd.do?href=', '&title=');	}	function add_to_spurl()	{		return $this->add_to_service('http://www.spurl.net/spurl.php?v=3&url=', '&title=');	}	function add_to_wists()	{		return $this->add_to_service('http://wists.com/r.php?c=&r=', '&title=');	}	function search_technorati()	{		return $this->add_to_service('http://www.technorati.com/search/');	}}class SimplePie_Source{	var $item;	var $data = array();	function SimplePie_Source($item, $data)	{		$this->item = $item;		$this->data = $data;	}	function __toString()	{		return md5(serialize($this->data));	}	function get_source_tags($namespace, $tag)	{		if (isset($this->data['child'][$namespace][$tag]))		{			return $this->data['child'][$namespace][$tag];		}		else		{			return null;		}	}	function get_base($element = array())	{		return $this->item->get_base($element);	}	function sanitize($data, $type, $base = '')	{		return $this->item->sanitize($data, $type, $base);	}	function get_item()	{		return $this->item;	}	function get_title()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'title'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'title'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		$categories = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'category') as $category)		{			$term = null;			$scheme = null;			$label = null;			if (isset($category['attribs']['']['term']))			{				$term = $this->sanitize($category['attribs']['']['term'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['scheme']))			{				$scheme = $this->sanitize($category['attribs']['']['scheme'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($category['attribs']['']['label']))			{				$label = $this->sanitize($category['attribs']['']['label'], SIMPLEPIE_CONSTRUCT_TEXT);			}			$categories[] = new $this->item->feed->category_class($term, $scheme, $label);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'category') as $category)		{			// This is really the label, but keep this as the term also for BC.			// Label will also work on retrieving because that falls back to term.			$term = $this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT);			if (isset($category['attribs']['']['domain']))			{				$scheme = $this->sanitize($category['attribs']['']['domain'], SIMPLEPIE_CONSTRUCT_TEXT);			}			else			{				$scheme = null;			}			$categories[] = new $this->item->feed->category_class($term, $scheme, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'subject') as $category)		{			$categories[] = new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'subject') as $category)		{			$categories[] = new $this->item->feed->category_class($this->sanitize($category['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($categories))		{			return SimplePie_Misc::array_unique($categories);		}		else		{			return null;		}	}	function get_author($key = 0)	{		$authors = $this->get_authors();		if (isset($authors[$key]))		{			return $authors[$key];		}		else		{			return null;		}	}	function get_authors()	{		$authors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'author') as $author)		{			$name = null;			$uri = null;			$email = null;			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($author['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$authors[] = new $this->item->feed->author_class($name, $uri, $email);			}		}		if ($author = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'author'))		{			$name = null;			$url = null;			$email = null;			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($author[0]['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$authors[] = new $this->item->feed->author_class($name, $url, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'creator') as $author)		{			$authors[] = new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'creator') as $author)		{			$authors[] = new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'author') as $author)		{			$authors[] = new $this->item->feed->author_class($this->sanitize($author['data'], SIMPLEPIE_CONSTRUCT_TEXT), null, null);		}		if (!empty($authors))		{			return SimplePie_Misc::array_unique($authors);		}		else		{			return null;		}	}	function get_contributor($key = 0)	{		$contributors = $this->get_contributors();		if (isset($contributors[$key]))		{			return $contributors[$key];		}		else		{			return null;		}	}	function get_contributors()	{		$contributors = array();		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'contributor') as $contributor)		{			$name = null;			$uri = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data']))			{				$uri = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['uri'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $uri !== null)			{				$contributors[] = new $this->item->feed->author_class($name, $uri, $email);			}		}		foreach ((array) $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'contributor') as $contributor)		{			$name = null;			$url = null;			$email = null;			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data']))			{				$name = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['name'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data']))			{				$url = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['url'][0]));			}			if (isset($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data']))			{				$email = $this->sanitize($contributor['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['email'][0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);			}			if ($name !== null || $email !== null || $url !== null)			{				$contributors[] = new $this->item->feed->author_class($name, $url, $email);			}		}		if (!empty($contributors))		{			return SimplePie_Misc::array_unique($contributors);		}		else		{			return null;		}	}	function get_link($key = 0, $rel = 'alternate')	{		$links = $this->get_links($rel);		if (isset($links[$key]))		{			return $links[$key];		}		else		{			return null;		}	}	/**	 * Added for parity between the parent-level and the item/entry-level.	 */	function get_permalink()	{		return $this->get_link(0);	}	function get_links($rel = 'alternate')	{		if (!isset($this->data['links']))		{			$this->data['links'] = array();			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'link'))			{				foreach ($links as $link)				{					if (isset($link['attribs']['']['href']))					{						$link_rel = (isset($link['attribs']['']['rel'])) ? $link['attribs']['']['rel'] : 'alternate';						$this->data['links'][$link_rel][] = $this->sanitize($link['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($link));					}				}			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			if ($links = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'link'))			{				$this->data['links']['alternate'][] = $this->sanitize($links[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($links[0]));			}			$keys = array_keys($this->data['links']);			foreach ($keys as $key)			{				if (SimplePie_Misc::is_isegment_nz_nc($key))				{					if (isset($this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]))					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] = array_merge($this->data['links'][$key], $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key]);						$this->data['links'][$key] =& $this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key];					}					else					{						$this->data['links'][SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY . $key] =& $this->data['links'][$key];					}				}				elseif (substr($key, 0, 41) === SIMPLEPIE_IANA_LINK_RELATIONS_REGISTRY)				{					$this->data['links'][substr($key, 41)] =& $this->data['links'][$key];				}				$this->data['links'][$key] = array_unique($this->data['links'][$key]);			}		}		if (isset($this->data['links'][$rel]))		{			return $this->data['links'][$rel];		}		else		{			return null;		}	}	function get_description()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'tagline'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_090, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_MAYBE_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'description'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'summary'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'subtitle'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_HTML, $this->get_base($return[0]));		}		else		{			return null;		}	}	function get_copyright()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_10_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_03, 'copyright'))		{			return $this->sanitize($return[0]['data'], SimplePie_Misc::atom_03_construct_type($return[0]['attribs']), $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'copyright'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'rights'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_language()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_RSS_20, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_11, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_DC_10, 'language'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_TEXT);		}		elseif (isset($this->data['xml_lang']))		{			return $this->sanitize($this->data['xml_lang'], SIMPLEPIE_CONSTRUCT_TEXT);		}		else		{			return null;		}	}	function get_latitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lat'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[1];		}		else		{			return null;		}	}	function get_longitude()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'long'))		{			return (float) $return[0]['data'];		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_W3C_BASIC_GEO, 'lon'))		{			return (float) $return[0]['data'];		}		elseif (($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_GEORSS, 'point')) && preg_match('/^((?:-)?[0-9]+(?:\.[0-9]+)) ((?:-)?[0-9]+(?:\.[0-9]+))$/', $return[0]['data'], $match))		{			return (float) $match[2];		}		else		{			return null;		}	}	function get_image_url()	{		if ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ITUNES, 'image'))		{			return $this->sanitize($return[0]['attribs']['']['href'], SIMPLEPIE_CONSTRUCT_IRI);		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'logo'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		elseif ($return = $this->get_source_tags(SIMPLEPIE_NAMESPACE_ATOM_10, 'icon'))		{			return $this->sanitize($return[0]['data'], SIMPLEPIE_CONSTRUCT_IRI, $this->get_base($return[0]));		}		else		{			return null;		}	}}class SimplePie_Author{	var $name;	var $link;	var $email;	// Constructor, used to input the data	function SimplePie_Author($name = null, $link = null, $email = null)	{		$this->name = $name;		$this->link = $link;		$this->email = $email;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return $this->link;		}		else		{			return null;		}	}	function get_email()	{		if ($this->email !== null)		{			return $this->email;		}		else		{			return null;		}	}}class SimplePie_Category{	var $term;	var $scheme;	var $label;	// Constructor, used to input the data	function SimplePie_Category($term = null, $scheme = null, $label = null)	{		$this->term = $term;		$this->scheme = $scheme;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_term()	{		if ($this->term !== null)		{			return $this->term;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_label()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return $this->get_term();		}	}}class SimplePie_Enclosure{	var $bitrate;	var $captions;	var $categories;	var $channels;	var $copyright;	var $credits;	var $description;	var $duration;	var $expression;	var $framerate;	var $handler;	var $hashes;	var $height;	var $javascript;	var $keywords;	var $lang;	var $length;	var $link;	var $medium;	var $player;	var $ratings;	var $restrictions;	var $samplingrate;	var $thumbnails;	var $title;	var $type;	var $width;	// Constructor, used to input the data	function SimplePie_Enclosure($link = null, $type = null, $length = null, $javascript = null, $bitrate = null, $captions = null, $categories = null, $channels = null, $copyright = null, $credits = null, $description = null, $duration = null, $expression = null, $framerate = null, $hashes = null, $height = null, $keywords = null, $lang = null, $medium = null, $player = null, $ratings = null, $restrictions = null, $samplingrate = null, $thumbnails = null, $title = null, $width = null)	{		$this->bitrate = $bitrate;		$this->captions = $captions;		$this->categories = $categories;		$this->channels = $channels;		$this->copyright = $copyright;		$this->credits = $credits;		$this->description = $description;		$this->duration = $duration;		$this->expression = $expression;		$this->framerate = $framerate;		$this->hashes = $hashes;		$this->height = $height;		$this->javascript = $javascript;		$this->keywords = $keywords;		$this->lang = $lang;		$this->length = $length;		$this->link = $link;		$this->medium = $medium;		$this->player = $player;		$this->ratings = $ratings;		$this->restrictions = $restrictions;		$this->samplingrate = $samplingrate;		$this->thumbnails = $thumbnails;		$this->title = $title;		$this->type = $type;		$this->width = $width;		if (class_exists('idna_convert'))		{			$idn = new idna_convert;			$parsed = SimplePie_Misc::parse_url($link);			$this->link = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->handler = $this->get_handler(); // Needs to load last	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_bitrate()	{		if ($this->bitrate !== null)		{			return $this->bitrate;		}		else		{			return null;		}	}	function get_caption($key = 0)	{		$captions = $this->get_captions();		if (isset($captions[$key]))		{			return $captions[$key];		}		else		{			return null;		}	}	function get_captions()	{		if ($this->captions !== null)		{			return $this->captions;		}		else		{			return null;		}	}	function get_category($key = 0)	{		$categories = $this->get_categories();		if (isset($categories[$key]))		{			return $categories[$key];		}		else		{			return null;		}	}	function get_categories()	{		if ($this->categories !== null)		{			return $this->categories;		}		else		{			return null;		}	}	function get_channels()	{		if ($this->channels !== null)		{			return $this->channels;		}		else		{			return null;		}	}	function get_copyright()	{		if ($this->copyright !== null)		{			return $this->copyright;		}		else		{			return null;		}	}	function get_credit($key = 0)	{		$credits = $this->get_credits();		if (isset($credits[$key]))		{			return $credits[$key];		}		else		{			return null;		}	}	function get_credits()	{		if ($this->credits !== null)		{			return $this->credits;		}		else		{			return null;		}	}	function get_description()	{		if ($this->description !== null)		{			return $this->description;		}		else		{			return null;		}	}	function get_duration($convert = false)	{		if ($this->duration !== null)		{			if ($convert)			{				$time = SimplePie_Misc::time_hms($this->duration);				return $time;			}			else			{				return $this->duration;			}		}		else		{			return null;		}	}	function get_expression()	{		if ($this->expression !== null)		{			return $this->expression;		}		else		{			return 'full';		}	}	function get_extension()	{		if ($this->link !== null)		{			$url = SimplePie_Misc::parse_url($this->link);			if ($url['path'] !== '')			{				return pathinfo($url['path'], PATHINFO_EXTENSION);			}		}		return null;	}	function get_framerate()	{		if ($this->framerate !== null)		{			return $this->framerate;		}		else		{			return null;		}	}	function get_handler()	{		return $this->get_real_type(true);	}	function get_hash($key = 0)	{		$hashes = $this->get_hashes();		if (isset($hashes[$key]))		{			return $hashes[$key];		}		else		{			return null;		}	}	function get_hashes()	{		if ($this->hashes !== null)		{			return $this->hashes;		}		else		{			return null;		}	}	function get_height()	{		if ($this->height !== null)		{			return $this->height;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_keyword($key = 0)	{		$keywords = $this->get_keywords();		if (isset($keywords[$key]))		{			return $keywords[$key];		}		else		{			return null;		}	}	function get_keywords()	{		if ($this->keywords !== null)		{			return $this->keywords;		}		else		{			return null;		}	}	function get_length()	{		if ($this->length !== null)		{			return $this->length;		}		else		{			return null;		}	}	function get_link()	{		if ($this->link !== null)		{			return urldecode($this->link);		}		else		{			return null;		}	}	function get_medium()	{		if ($this->medium !== null)		{			return $this->medium;		}		else		{			return null;		}	}	function get_player()	{		if ($this->player !== null)		{			return $this->player;		}		else		{			return null;		}	}	function get_rating($key = 0)	{		$ratings = $this->get_ratings();		if (isset($ratings[$key]))		{			return $ratings[$key];		}		else		{			return null;		}	}	function get_ratings()	{		if ($this->ratings !== null)		{			return $this->ratings;		}		else		{			return null;		}	}	function get_restriction($key = 0)	{		$restrictions = $this->get_restrictions();		if (isset($restrictions[$key]))		{			return $restrictions[$key];		}		else		{			return null;		}	}	function get_restrictions()	{		if ($this->restrictions !== null)		{			return $this->restrictions;		}		else		{			return null;		}	}	function get_sampling_rate()	{		if ($this->samplingrate !== null)		{			return $this->samplingrate;		}		else		{			return null;		}	}	function get_size()	{		$length = $this->get_length();		if ($length !== null)		{			return round($length/1048576, 2);		}		else		{			return null;		}	}	function get_thumbnail($key = 0)	{		$thumbnails = $this->get_thumbnails();		if (isset($thumbnails[$key]))		{			return $thumbnails[$key];		}		else		{			return null;		}	}	function get_thumbnails()	{		if ($this->thumbnails !== null)		{			return $this->thumbnails;		}		else		{			return null;		}	}	function get_title()	{		if ($this->title !== null)		{			return $this->title;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_width()	{		if ($this->width !== null)		{			return $this->width;		}		else		{			return null;		}	}	function native_embed($options='')	{		return $this->embed($options, true);	}	/**	 * @todo If the dimensions for media:content are defined, use them when width/height are set to 'auto'.	 */	function embed($options = '', $native = false)	{		// Set up defaults		$audio = '';		$video = '';		$alt = '';		$altclass = '';		$loop = 'false';		$width = 'auto';		$height = 'auto';		$bgcolor = '#ffffff';		$mediaplayer = '';		$widescreen = false;		$handler = $this->get_handler();		$type = $this->get_real_type();		// Process options and reassign values as necessary		if (is_array($options))		{			extract($options);		}		else		{			$options = explode(',', $options);			foreach($options as $option)			{				$opt = explode(':', $option, 2);				if (isset($opt[0], $opt[1]))				{					$opt[0] = trim($opt[0]);					$opt[1] = trim($opt[1]);					switch ($opt[0])					{						case 'audio':							$audio = $opt[1];							break;						case 'video':							$video = $opt[1];							break;						case 'alt':							$alt = $opt[1];							break;						case 'altclass':							$altclass = $opt[1];							break;						case 'loop':							$loop = $opt[1];							break;						case 'width':							$width = $opt[1];							break;						case 'height':							$height = $opt[1];							break;						case 'bgcolor':							$bgcolor = $opt[1];							break;						case 'mediaplayer':							$mediaplayer = $opt[1];							break;						case 'widescreen':							$widescreen = $opt[1];							break;					}				}			}		}		$mime = explode('/', $type, 2);		$mime = $mime[0];		// Process values for 'auto'		if ($width === 'auto')		{			if ($mime === 'video')			{				if ($height === 'auto')				{					$width = 480;				}				elseif ($widescreen)				{					$width = round((intval($height)/9)*16);				}				else				{					$width = round((intval($height)/3)*4);				}			}			else			{				$width = '100%';			}		}		if ($height === 'auto')		{			if ($mime === 'audio')			{				$height = 0;			}			elseif ($mime === 'video')			{				if ($width === 'auto')				{					if ($widescreen)					{						$height = 270;					}					else					{						$height = 360;					}				}				elseif ($widescreen)				{					$height = round((intval($width)/16)*9);				}				else				{					$height = round((intval($width)/4)*3);				}			}			else			{				$height = 376;			}		}		elseif ($mime === 'audio')		{			$height = 0;		}		// Set proper placeholder value		if ($mime === 'audio')		{			$placeholder = $audio;		}		elseif ($mime === 'video')		{			$placeholder = $video;		}		$embed = '';		// Make sure the JS library is included		if (!$native)		{			static $javascript_outputted = null;			if (!$javascript_outputted && $this->javascript)			{				$embed .= '<script type="text/javascript" src="?' . htmlspecialchars($this->javascript) . '"></script>';				$javascript_outputted = true;			}		}		// Odeo Feed MP3's		if ($handler === 'odeo')		{			if ($native)			{				$embed .= '<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://adobe.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url=' . $this->get_link() . '"></embed>';			}			else			{				$embed .= '<script type="text/javascript">embed_odeo("' . $this->get_link() . '");</script>';			}		}		// Flash		elseif ($handler === 'flash')		{			if ($native)			{				$embed .= "<embed src=\"" . $this->get_link() . "\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"$type\" quality=\"high\" width=\"$width\" height=\"$height\" bgcolor=\"$bgcolor\" loop=\"$loop\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flash('$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$loop', '$type');</script>";			}		}		// Flash Media Player file types.		// Preferred handler for MP3 file types.		elseif ($handler === 'fmedia' || ($handler === 'mp3' && $mediaplayer !== ''))		{			$height += 20;			if ($native)			{				$embed .= "<embed src=\"$mediaplayer\" pluginspage=\"http://adobe.com/go/getflashplayer\" type=\"application/x-shockwave-flash\" quality=\"high\" width=\"$width\" height=\"$height\" wmode=\"transparent\" flashvars=\"file=" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "&autostart=false&repeat=$loop&showdigits=true&showfsbutton=false\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_flv('$width', '$height', '" . rawurlencode($this->get_link().'?file_extension=.'.$this->get_extension()) . "', '$placeholder', '$loop', '$mediaplayer');</script>";			}		}		// QuickTime 7 file types.  Need to test with QuickTime 6.		// Only handle MP3's if the Flash Media Player is not present.		elseif ($handler === 'quicktime' || ($handler === 'mp3' && $mediaplayer === ''))		{			$height += 16;			if ($native)			{				if ($placeholder !== '')				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" href=\"" . $this->get_link() . "\" src=\"$placeholder\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"false\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}				else				{					$embed .= "<embed type=\"$type\" style=\"cursor:hand; cursor:pointer;\" src=\"" . $this->get_link() . "\" width=\"$width\" height=\"$height\" autoplay=\"false\" target=\"myself\" controller=\"true\" loop=\"$loop\" scale=\"aspect\" bgcolor=\"$bgcolor\" pluginspage=\"http://apple.com/quicktime/download/\"></embed>";				}			}			else			{				$embed .= "<script type='text/javascript'>embed_quicktime('$type', '$bgcolor', '$width', '$height', '" . $this->get_link() . "', '$placeholder', '$loop');</script>";			}		}		// Windows Media		elseif ($handler === 'wmedia')		{			$height += 45;			if ($native)			{				$embed .= "<embed type=\"application/x-mplayer2\" src=\"" . $this->get_link() . "\" autosize=\"1\" width=\"$width\" height=\"$height\" showcontrols=\"1\" showstatusbar=\"0\" showdisplay=\"0\" autostart=\"0\"></embed>";			}			else			{				$embed .= "<script type='text/javascript'>embed_wmedia('$width', '$height', '" . $this->get_link() . "');</script>";			}		}		// Everything else		else $embed .= '<a href="' . $this->get_link() . '" class="' . $altclass . '">' . $alt . '</a>';		return $embed;	}	function get_real_type($find_handler = false)	{		// If it's Odeo, let's get it out of the way.		if (substr(strtolower($this->get_link()), 0, 15) === 'http://odeo.com')		{			return 'odeo';		}		// Mime-types by handler.		$types_flash = array('application/x-shockwave-flash', 'application/futuresplash'); // Flash		$types_fmedia = array('video/flv', 'video/x-flv','flv-application/octet-stream'); // Flash Media Player		$types_quicktime = array('audio/3gpp', 'audio/3gpp2', 'audio/aac', 'audio/x-aac', 'audio/aiff', 'audio/x-aiff', 'audio/mid', 'audio/midi', 'audio/x-midi', 'audio/mp4', 'audio/m4a', 'audio/x-m4a', 'audio/wav', 'audio/x-wav', 'video/3gpp', 'video/3gpp2', 'video/m4v', 'video/x-m4v', 'video/mp4', 'video/mpeg', 'video/x-mpeg', 'video/quicktime', 'video/sd-video'); // QuickTime		$types_wmedia = array('application/asx', 'application/x-mplayer2', 'audio/x-ms-wma', 'audio/x-ms-wax', 'video/x-ms-asf-plugin', 'video/x-ms-asf', 'video/x-ms-wm', 'video/x-ms-wmv', 'video/x-ms-wvx'); // Windows Media		$types_mp3 = array('audio/mp3', 'audio/x-mp3', 'audio/mpeg', 'audio/x-mpeg'); // MP3		if ($this->get_type() !== null)		{			$type = strtolower($this->type);		}		else		{			$type = null;		}		// If we encounter an unsupported mime-type, check the file extension and guess intelligently.		if (!in_array($type, array_merge($types_flash, $types_fmedia, $types_quicktime, $types_wmedia, $types_mp3)))		{			switch (strtolower($this->get_extension()))			{				// Audio mime-types				case 'aac':				case 'adts':					$type = 'audio/acc';					break;				case 'aif':				case 'aifc':				case 'aiff':				case 'cdda':					$type = 'audio/aiff';					break;				case 'bwf':					$type = 'audio/wav';					break;				case 'kar':				case 'mid':				case 'midi':				case 'smf':					$type = 'audio/midi';					break;				case 'm4a':					$type = 'audio/x-m4a';					break;				case 'mp3':				case 'swa':					$type = 'audio/mp3';					break;				case 'wav':					$type = 'audio/wav';					break;				case 'wax':					$type = 'audio/x-ms-wax';					break;				case 'wma':					$type = 'audio/x-ms-wma';					break;				// Video mime-types				case '3gp':				case '3gpp':					$type = 'video/3gpp';					break;				case '3g2':				case '3gp2':					$type = 'video/3gpp2';					break;				case 'asf':					$type = 'video/x-ms-asf';					break;				case 'flv':					$type = 'video/x-flv';					break;				case 'm1a':				case 'm1s':				case 'm1v':				case 'm15':				case 'm75':				case 'mp2':				case 'mpa':				case 'mpeg':				case 'mpg':				case 'mpm':				case 'mpv':					$type = 'video/mpeg';					break;				case 'm4v':					$type = 'video/x-m4v';					break;				case 'mov':				case 'qt':					$type = 'video/quicktime';					break;				case 'mp4':				case 'mpg4':					$type = 'video/mp4';					break;				case 'sdv':					$type = 'video/sd-video';					break;				case 'wm':					$type = 'video/x-ms-wm';					break;				case 'wmv':					$type = 'video/x-ms-wmv';					break;				case 'wvx':					$type = 'video/x-ms-wvx';					break;				// Flash mime-types				case 'spl':					$type = 'application/futuresplash';					break;				case 'swf':					$type = 'application/x-shockwave-flash';					break;			}		}		if ($find_handler)		{			if (in_array($type, $types_flash))			{				return 'flash';			}			elseif (in_array($type, $types_fmedia))			{				return 'fmedia';			}			elseif (in_array($type, $types_quicktime))			{				return 'quicktime';			}			elseif (in_array($type, $types_wmedia))			{				return 'wmedia';			}			elseif (in_array($type, $types_mp3))			{				return 'mp3';			}			else			{				return null;			}		}		else		{			return $type;		}	}}class SimplePie_Caption{	var $type;	var $lang;	var $startTime;	var $endTime;	var $text;	// Constructor, used to input the data	function SimplePie_Caption($type = null, $lang = null, $startTime = null, $endTime = null, $text = null)	{		$this->type = $type;		$this->lang = $lang;		$this->startTime = $startTime;		$this->endTime = $endTime;		$this->text = $text;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_endtime()	{		if ($this->endTime !== null)		{			return $this->endTime;		}		else		{			return null;		}	}	function get_language()	{		if ($this->lang !== null)		{			return $this->lang;		}		else		{			return null;		}	}	function get_starttime()	{		if ($this->startTime !== null)		{			return $this->startTime;		}		else		{			return null;		}	}	function get_text()	{		if ($this->text !== null)		{			return $this->text;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}}class SimplePie_Credit{	var $role;	var $scheme;	var $name;	// Constructor, used to input the data	function SimplePie_Credit($role = null, $scheme = null, $name = null)	{		$this->role = $role;		$this->scheme = $scheme;		$this->name = $name;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_role()	{		if ($this->role !== null)		{			return $this->role;		}		else		{			return null;		}	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_name()	{		if ($this->name !== null)		{			return $this->name;		}		else		{			return null;		}	}}class SimplePie_Copyright{	var $url;	var $label;	// Constructor, used to input the data	function SimplePie_Copyright($url = null, $label = null)	{		$this->url = $url;		$this->label = $label;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_url()	{		if ($this->url !== null)		{			return $this->url;		}		else		{			return null;		}	}	function get_attribution()	{		if ($this->label !== null)		{			return $this->label;		}		else		{			return null;		}	}}class SimplePie_Rating{	var $scheme;	var $value;	// Constructor, used to input the data	function SimplePie_Rating($scheme = null, $value = null)	{		$this->scheme = $scheme;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_scheme()	{		if ($this->scheme !== null)		{			return $this->scheme;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}class SimplePie_Restriction{	var $relationship;	var $type;	var $value;	// Constructor, used to input the data	function SimplePie_Restriction($relationship = null, $type = null, $value = null)	{		$this->relationship = $relationship;		$this->type = $type;		$this->value = $value;	}	function __toString()	{		// There is no $this->data here		return md5(serialize($this));	}	function get_relationship()	{		if ($this->relationship !== null)		{			return $this->relationship;		}		else		{			return null;		}	}	function get_type()	{		if ($this->type !== null)		{			return $this->type;		}		else		{			return null;		}	}	function get_value()	{		if ($this->value !== null)		{			return $this->value;		}		else		{			return null;		}	}}/** * @todo Move to properly supporting RFC2616 (HTTP/1.1) */class SimplePie_File{	var $url;	var $useragent;	var $success = true;	var $headers = array();	var $body;	var $status_code;	var $redirects = 0;	var $error;	var $method = SIMPLEPIE_FILE_SOURCE_NONE;	function SimplePie_File($url, $timeout = 10, $redirects = 5, $headers = null, $useragent = null, $force_fsockopen = false)	{		if (class_exists('idna_convert'))		{			$idn = new idna_convert;			$parsed = SimplePie_Misc::parse_url($url);			$url = SimplePie_Misc::compress_parse_url($parsed['scheme'], $idn->encode($parsed['authority']), $parsed['path'], $parsed['query'], $parsed['fragment']);		}		$this->url = $url;		$this->useragent = $useragent;		if (preg_match('/^http(s)?:\/\//i', $url))		{			if ($useragent === null)			{				$useragent = ini_get('user_agent');				$this->useragent = $useragent;			}			if (!is_array($headers))			{				$headers = array();			}			if (!$force_fsockopen && function_exists('curl_exec'))			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_CURL;				$fp = curl_init();				$headers2 = array();				foreach ($headers as $key => $value)				{					$headers2[] = "$key: $value";				}				if (version_compare(SimplePie_Misc::get_curl_version(), '7.10.5', '>='))				{					curl_setopt($fp, CURLOPT_ENCODING, '');				}				curl_setopt($fp, CURLOPT_URL, $url);				curl_setopt($fp, CURLOPT_HEADER, 1);				curl_setopt($fp, CURLOPT_RETURNTRANSFER, 1);				curl_setopt($fp, CURLOPT_TIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_CONNECTTIMEOUT, $timeout);				curl_setopt($fp, CURLOPT_REFERER, $url);				curl_setopt($fp, CURLOPT_USERAGENT, $useragent);				curl_setopt($fp, CURLOPT_HTTPHEADER, $headers2);				if (!ini_get('open_basedir') && !ini_get('safe_mode') && version_compare(SimplePie_Misc::get_curl_version(), '7.15.2', '>='))				{					curl_setopt($fp, CURLOPT_FOLLOWLOCATION, 1);					curl_setopt($fp, CURLOPT_MAXREDIRS, $redirects);				}				$this->headers = curl_exec($fp);				if (curl_errno($fp) === 23 || curl_errno($fp) === 61)				{					curl_setopt($fp, CURLOPT_ENCODING, 'none');					$this->headers = curl_exec($fp);				}				if (curl_errno($fp))				{					$this->error = 'cURL error ' . curl_errno($fp) . ': ' . curl_error($fp);					$this->success = false;				}				else				{					$info = curl_getinfo($fp);					curl_close($fp);					$this->headers = explode("\r\n\r\n", $this->headers, $info['redirect_count'] + 1);					$this->headers = array_pop($this->headers);					$parser = new SimplePie_HTTP_Parser($this->headers);					if ($parser->parse())					{						$this->headers = $parser->headers;						$this->body = $parser->body;						$this->status_code = $parser->status_code;						if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)						{							$this->redirects++;							$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);							return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);						}					}				}			}			else			{				$this->method = SIMPLEPIE_FILE_SOURCE_REMOTE | SIMPLEPIE_FILE_SOURCE_FSOCKOPEN;				$url_parts = parse_url($url);				if (isset($url_parts['scheme']) && strtolower($url_parts['scheme']) === 'https')				{					$url_parts['host'] = "ssl://$url_parts[host]";					$url_parts['port'] = 443;				}				if (!isset($url_parts['port']))				{					$url_parts['port'] = 80;				}				$fp = @fsockopen($url_parts['host'], $url_parts['port'], $errno, $errstr, $timeout);				if (!$fp)				{					$this->error = 'fsockopen error: ' . $errstr;					$this->success = false;				}				else				{					stream_set_timeout($fp, $timeout);					if (isset($url_parts['path']))					{						if (isset($url_parts['query']))						{							$get = "$url_parts[path]?$url_parts[query]";						}						else						{							$get = $url_parts['path'];						}					}					else					{						$get = '/';					}					$out = "GET $get HTTP/1.0\r\n";					$out .= "Host: $url_parts[host]\r\n";					$out .= "User-Agent: $useragent\r\n";					if (extension_loaded('zlib'))					{						$out .= "Accept-Encoding: x-gzip,gzip,deflate\r\n";					}					if (isset($url_parts['user']) && isset($url_parts['pass']))					{						$out .= "Authorization: Basic " . base64_encode("$url_parts[user]:$url_parts[pass]") . "\r\n";					}					foreach ($headers as $key => $value)					{						$out .= "$key: $value\r\n";					}					$out .= "Connection: Close\r\n\r\n";					fwrite($fp, $out);					$info = stream_get_meta_data($fp);					$this->headers = '';					while (!$info['eof'] && !$info['timed_out'])					{						$this->headers .= fread($fp, 1160);						$info = stream_get_meta_data($fp);					}					if (!$info['timed_out'])					{						$parser = new SimplePie_HTTP_Parser($this->headers);						if ($parser->parse())						{							$this->headers = $parser->headers;							$this->body = $parser->body;							$this->status_code = $parser->status_code;							if ((in_array($this->status_code, array(300, 301, 302, 303, 307)) || $this->status_code > 307 && $this->status_code < 400) && isset($this->headers['location']) && $this->redirects < $redirects)							{								$this->redirects++;								$location = SimplePie_Misc::absolutize_url($this->headers['location'], $url);								return $this->SimplePie_File($location, $timeout, $redirects, $headers, $useragent, $force_fsockopen);							}							if (isset($this->headers['content-encoding']))							{								// Hey, we act dumb elsewhere, so let's do that here too								switch (strtolower(trim($this->headers['content-encoding'], "\x09\x0A\x0D\x20")))								{									case 'gzip':									case 'x-gzip':										$decoder = new SimplePie_gzdecode($this->body);										if (!$decoder->parse())										{											$this->error = 'Unable to decode HTTP "gzip" stream';											$this->success = false;										}										else										{											$this->body = $decoder->data;										}										break;									case 'deflate':										if (($body = gzuncompress($this->body)) === false)										{											if (($body = gzinflate($this->body)) === false)											{												$this->error = 'Unable to decode HTTP "deflate" stream';												$this->success = false;											}										}										$this->body = $body;										break;									default:										$this->error = 'Unknown content coding';										$this->success = false;								}							}						}					}					else					{						$this->error = 'fsocket timed out';						$this->success = false;					}					fclose($fp);				}			}		}		else		{			$this->method = SIMPLEPIE_FILE_SOURCE_LOCAL | SIMPLEPIE_FILE_SOURCE_FILE_GET_CONTENTS;			if (!$this->body = file_get_contents($url))			{				$this->error = 'file_get_contents could not read the file';				$this->success = false;			}		}	}}/** * HTTP Response Parser * * @package SimplePie */class SimplePie_HTTP_Parser{	/**	 * HTTP Version	 *	 * @access public	 * @var float	 */	var $http_version = 0.0;	/**	 * Status code	 *	 * @access public	 * @var int	 */	var $status_code = 0;	/**	 * Reason phrase	 *	 * @access public	 * @var string	 */	var $reason = '';	/**	 * Key/value pairs of the headers	 *	 * @access public	 * @var array	 */	var $headers = array();	/**	 * Body of the response	 *	 * @access public	 * @var string	 */	var $body = '';	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'http_version';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Name of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $name = '';	/**	 * Value of the hedaer currently being parsed	 *	 * @access private	 * @var string	 */	var $value = '';	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_HTTP_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit' || $this->state === 'body')		{			return true;		}		else		{			$this->http_version = '';			$this->status_code = '';			$this->reason = '';			$this->headers = array();			$this->body = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * See if the next character is LWS	 *	 * @access private	 * @return bool true if the next character is LWS, false if not	 */	function is_linear_whitespace()	{		return (bool) ($this->data[$this->position] === "\x09"			|| $this->data[$this->position] === "\x20"			|| ($this->data[$this->position] === "\x0A"				&& isset($this->data[$this->position + 1])				&& ($this->data[$this->position + 1] === "\x09" || $this->data[$this->position + 1] === "\x20")));	}	/**	 * Parse the HTTP version	 *	 * @access private	 */	function http_version()	{		if (strpos($this->data, "\x0A") !== false && strtoupper(substr($this->data, 0, 5)) === 'HTTP/')		{			$len = strspn($this->data, '0123456789.', 5);			$this->http_version = substr($this->data, 5, $len);			$this->position += 5 + $len;			if (substr_count($this->http_version, '.') <= 1)			{				$this->http_version = (float) $this->http_version;				$this->position += strspn($this->data, "\x09\x20", $this->position);				$this->state = 'status';			}			else			{				$this->state = false;			}		}		else		{			$this->state = false;		}	}	/**	 * Parse the status code	 *	 * @access private	 */	function status()	{		if ($len = strspn($this->data, '0123456789', $this->position))		{			$this->status_code = (int) substr($this->data, $this->position, $len);			$this->position += $len;			$this->state = 'reason';		}		else		{			$this->state = false;		}	}	/**	 * Parse the reason phrase	 *	 * @access private	 */	function reason()	{		$len = strcspn($this->data, "\x0A", $this->position);		$this->reason = trim(substr($this->data, $this->position, $len), "\x09\x0D\x20");		$this->position += $len + 1;		$this->state = 'new_line';	}	/**	 * Deal with a new line, shifting data around as needed	 *	 * @access private	 */	function new_line()	{		$this->value = trim($this->value, "\x0D\x20");		if ($this->name !== '' && $this->value !== '')		{			$this->name = strtolower($this->name);			if (isset($this->headers[$this->name]))			{				$this->headers[$this->name] .= ', ' . $this->value;			}			else			{				$this->headers[$this->name] = $this->value;			}		}		$this->name = '';		$this->value = '';		if (substr($this->data[$this->position], 0, 2) === "\x0D\x0A")		{			$this->position += 2;			$this->state = 'body';		}		elseif ($this->data[$this->position] === "\x0A")		{			$this->position++;			$this->state = 'body';		}		else		{			$this->state = 'name';		}	}	/**	 * Parse a header name	 *	 * @access private	 */	function name()	{		$len = strcspn($this->data, "\x0A:", $this->position);		if (isset($this->data[$this->position + $len]))		{			if ($this->data[$this->position + $len] === "\x0A")			{				$this->position += $len;				$this->state = 'new_line';			}			else			{				$this->name = substr($this->data, $this->position, $len);				$this->position += $len + 1;				$this->state = 'value';			}		}		else		{			$this->state = false;		}	}	/**	 * Parse LWS, replacing consecutive LWS characters with a single space	 *	 * @access private	 */	function linear_whitespace()	{		do		{			if (substr($this->data, $this->position, 2) === "\x0D\x0A")			{				$this->position += 2;			}			elseif ($this->data[$this->position] === "\x0A")			{				$this->position++;			}			$this->position += strspn($this->data, "\x09\x20", $this->position);		} while ($this->has_data() && $this->is_linear_whitespace());		$this->value .= "\x20";	}	/**	 * See what state to move to while within non-quoted header values	 *	 * @access private	 */	function value()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'quote';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				default:					$this->state = 'value_char';					break;			}		}	}	/**	 * Parse a header value while outside quotes	 *	 * @access private	 */	function value_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * See what state to move to while within quoted header values	 *	 * @access private	 */	function quote()	{		if ($this->is_linear_whitespace())		{			$this->linear_whitespace();		}		else		{			switch ($this->data[$this->position])			{				case '"':					$this->position++;					$this->state = 'value';					break;				case "\x0A":					$this->position++;					$this->state = 'new_line';					break;				case '\\':					$this->position++;					$this->state = 'quote_escaped';					break;				default:					$this->state = 'quote_char';					break;			}		}	}	/**	 * Parse a header value while within quotes	 *	 * @access private	 */	function quote_char()	{		$len = strcspn($this->data, "\x09\x20\x0A\"\\", $this->position);		$this->value .= substr($this->data, $this->position, $len);		$this->position += $len;		$this->state = 'value';	}	/**	 * Parse an escaped character within quotes	 *	 * @access private	 */	function quote_escaped()	{		$this->value .= $this->data[$this->position];		$this->position++;		$this->state = 'quote';	}	/**	 * Parse the body	 *	 * @access private	 */	function body()	{		$this->body = substr($this->data, $this->position);		$this->state = 'emit';	}}/** * gzdecode * * @package SimplePie */class SimplePie_gzdecode{	/**	 * Compressed data	 *	 * @access private	 * @see gzdecode::$data	 */	var $compressed_data;	/**	 * Size of compressed data	 *	 * @access private	 */	var $compressed_size;	/**	 * Minimum size of a valid gzip string	 *	 * @access private	 */	var $min_compressed_size = 18;	/**	 * Current position of pointer	 *	 * @access private	 */	var $position = 0;	/**	 * Flags (FLG)	 *	 * @access private	 */	var $flags;	/**	 * Uncompressed data	 *	 * @access public	 * @see gzdecode::$compressed_data	 */	var $data;	/**	 * Modified time	 *	 * @access public	 */	var $MTIME;	/**	 * Extra Flags	 *	 * @access public	 */	var $XFL;	/**	 * Operating System	 *	 * @access public	 */	var $OS;	/**	 * Subfield ID 1	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI2	 */	var $SI1;	/**	 * Subfield ID 2	 *	 * @access public	 * @see gzdecode::$extra_field	 * @see gzdecode::$SI1	 */	var $SI2;	/**	 * Extra field content	 *	 * @access public	 * @see gzdecode::$SI1	 * @see gzdecode::$SI2	 */	var $extra_field;	/**	 * Original filename	 *	 * @access public	 */	var $filename;	/**	 * Human readable comment	 *	 * @access public	 */	var $comment;	/**	 * Don't allow anything to be set	 *	 * @access public	 */	function __set($name, $value)	{		trigger_error("Cannot write property $name", E_USER_ERROR);	}	/**	 * Set the compressed string and related properties	 *	 * @access public	 */	function SimplePie_gzdecode($data)	{		$this->compressed_data = $data;		$this->compressed_size = strlen($data);	}	/**	 * Decode the GZIP stream	 *	 * @access public	 */	function parse()	{		if ($this->compressed_size >= $this->min_compressed_size)		{			// Check ID1, ID2, and CM			if (substr($this->compressed_data, 0, 3) !== "\x1F\x8B\x08")			{				return false;			}			// Get the FLG (FLaGs)			$this->flags = ord($this->compressed_data[3]);			// FLG bits above (1 << 4) are reserved			if ($this->flags > 0x1F)			{				return false;			}			// Advance the pointer after the above			$this->position += 4;			// MTIME			$mtime = substr($this->compressed_data, $this->position, 4);			// Reverse the string if we're on a big-endian arch because l is the only signed long and is machine endianness			if (current(unpack('S', "\x00\x01")) === 1)			{				$mtime = strrev($mtime);			}			$this->MTIME = current(unpack('l', $mtime));			$this->position += 4;			// Get the XFL (eXtra FLags)			$this->XFL = ord($this->compressed_data[$this->position++]);			// Get the OS (Operating System)			$this->OS = ord($this->compressed_data[$this->position++]);			// Parse the FEXTRA			if ($this->flags & 4)			{				// Read subfield IDs				$this->SI1 = $this->compressed_data[$this->position++];				$this->SI2 = $this->compressed_data[$this->position++];				// SI2 set to zero is reserved for future use				if ($this->SI2 === "\x00")				{					return false;				}				// Get the length of the extra field				$len = current(unpack('v', substr($this->compressed_data, $this->position, 2)));				$position += 2;				// Check the length of the string is still valid				$this->min_compressed_size += $len + 4;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the extra field to the given data					$this->extra_field = substr($this->compressed_data, $this->position, $len);					$this->position += $len;				}				else				{					return false;				}			}			// Parse the FNAME			if ($this->flags & 8)			{				// Get the length of the filename				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original filename to the given string					$this->filename = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FCOMMENT			if ($this->flags & 16)			{				// Get the length of the comment				$len = strcspn($this->compressed_data, "\x00", $this->position);				// Check the length of the string is still valid				$this->min_compressed_size += $len + 1;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Set the original comment to the given string					$this->comment = substr($this->compressed_data, $this->position, $len);					$this->position += $len + 1;				}				else				{					return false;				}			}			// Parse the FHCRC			if ($this->flags & 2)			{				// Check the length of the string is still valid				$this->min_compressed_size += $len + 2;				if ($this->compressed_size >= $this->min_compressed_size)				{					// Read the CRC					$crc = current(unpack('v', substr($this->compressed_data, $this->position, 2)));					// Check the CRC matches					if ((crc32(substr($this->compressed_data, 0, $this->position)) & 0xFFFF) === $crc)					{						$this->position += 2;					}					else					{						return false;					}				}				else				{					return false;				}			}			// Decompress the actual data			if (($this->data = gzinflate(substr($this->compressed_data, $this->position, -8))) === false)			{				return false;			}			else			{				$this->position = $this->compressed_size - 8;			}			// Check CRC of data			$crc = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			/*if (extension_loaded('hash') && sprintf('%u', current(unpack('V', hash('crc32b', $this->data)))) !== sprintf('%u', $crc))			{				return false;			}*/			// Check ISIZE of data			$isize = current(unpack('V', substr($this->compressed_data, $this->position, 4)));			$this->position += 4;			if (sprintf('%u', strlen($this->data) & 0xFFFFFFFF) !== sprintf('%u', $isize))			{				return false;			}			// Wow, against all odds, we've actually got a valid gzip string			return true;		}		else		{			return false;		}	}}class SimplePie_Cache{	/**	 * Don't call the constructor. Please.	 *	 * @access private	 */	function SimplePie_Cache()	{		trigger_error('Please call SimplePie_Cache::create() instead of the constructor', E_USER_ERROR);	}	/**	 * Create a new SimplePie_Cache object	 *	 * @static	 * @access public	 */	function create($location, $filename, $extension)	{		$location_iri = new SimplePie_IRI($location);		switch ($location_iri->get_scheme())		{			case 'mysql':				if (extension_loaded('mysql'))				{					return new SimplePie_Cache_MySQL($location_iri, $filename, $extension);				}				break;			default:				return new SimplePie_Cache_File($location, $filename, $extension);		}	}}class SimplePie_Cache_File{	var $location;	var $filename;	var $extension;	var $name;	function SimplePie_Cache_File($location, $filename, $extension)	{		$this->location = $location;		$this->filename = $filename;		$this->extension = $extension;		$this->name = "$this->location/$this->filename.$this->extension";	}	function save($data)	{		if (file_exists($this->name) && is_writeable($this->name) || file_exists($this->location) && is_writeable($this->location))		{			if (is_a($data, 'SimplePie'))			{				$data = $data->data;			}			$data = serialize($data);			if (function_exists('file_put_contents'))			{				return (bool) file_put_contents($this->name, $data);			}			else			{				$fp = fopen($this->name, 'wb');				if ($fp)				{					fwrite($fp, $data);					fclose($fp);					return true;				}			}		}		return false;	}	function load()	{		if (file_exists($this->name) && is_readable($this->name))		{			return unserialize(file_get_contents($this->name));		}		return false;	}	function mtime()	{		if (file_exists($this->name))		{			return filemtime($this->name);		}		return false;	}	function touch()	{		if (file_exists($this->name))		{			return touch($this->name);		}		return false;	}	function unlink()	{		if (file_exists($this->name))		{			return unlink($this->name);		}		return false;	}}class SimplePie_Cache_DB{	function prepare_simplepie_object_for_cache($data)	{		$items = $data->get_items();		$items_by_id = array();		if (!empty($items))		{			foreach ($items as $item)			{				$items_by_id[$item->get_id()] = $item;			}			if (count($items_by_id) !== count($items))			{				$items_by_id = array();				foreach ($items as $item)				{					$items_by_id[$item->get_id(true)] = $item;				}			}			if (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];			}			elseif (isset($data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0]))			{				$channel =& $data->data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]['child'][SIMPLEPIE_NAMESPACE_RSS_20]['channel'][0];			}			else			{				$channel = null;			}			if ($channel !== null)			{				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['entry']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_10]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_090]['item']);				}				if (isset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']))				{					unset($channel['child'][SIMPLEPIE_NAMESPACE_RSS_20]['item']);				}			}			if (isset($data->data['items']))			{				unset($data->data['items']);			}			if (isset($data->data['ordered_items']))			{				unset($data->data['ordered_items']);			}		}		return array(serialize($data->data), $items_by_id);	}}class SimplePie_Cache_MySQL extends SimplePie_Cache_DB{	var $mysql;	var $options;	var $id;	function SimplePie_Cache_MySQL($mysql_location, $name, $extension)	{		$host = $mysql_location->get_host();		if (SimplePie_Misc::stripos($host, 'unix(') === 0 && substr($host, -1) === ')')		{			$server = ':' . substr($host, 5, -1);		}		else		{			$server = $host;			if ($mysql_location->get_port() !== null)			{				$server .= ':' . $mysql_location->get_port();			}		}		if (strpos($mysql_location->get_userinfo(), ':') !== false)		{			list($username, $password) = explode(':', $mysql_location->get_userinfo(), 2);		}		else		{			$username = $mysql_location->get_userinfo();			$password = null;		}		if ($this->mysql = mysql_connect($server, $username, $password))		{			$this->id = $name . $extension;			$this->options = SimplePie_Misc::parse_str($mysql_location->get_query());			if (!isset($this->options['prefix'][0]))			{				$this->options['prefix'][0] = '';			}			if (mysql_select_db(ltrim($mysql_location->get_path(), '/'))				&& mysql_query('SET NAMES utf8')				&& ($query = mysql_unbuffered_query('SHOW TABLES')))			{				$db = array();				while ($row = mysql_fetch_row($query))				{					$db[] = $row[0];				}				if (!in_array($this->options['prefix'][0] . 'cache_data', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'cache_data` (`id` TEXT CHARACTER SET utf8 NOT NULL, `items` SMALLINT NOT NULL DEFAULT 0, `data` BLOB NOT NULL, `mtime` INT UNSIGNED NOT NULL, UNIQUE (`id`(125)))'))					{						$this->mysql = null;					}				}				if (!in_array($this->options['prefix'][0] . 'items', $db))				{					if (!mysql_query('CREATE TABLE `' . $this->options['prefix'][0] . 'items` (`feed_id` TEXT CHARACTER SET utf8 NOT NULL, `id` TEXT CHARACTER SET utf8 NOT NULL, `data` TEXT CHARACTER SET utf8 NOT NULL, `posted` INT UNSIGNED NOT NULL, INDEX `feed_id` (`feed_id`(125)))'))					{						$this->mysql = null;					}				}			}			else			{				$this->mysql = null;			}		}	}	function save($data)	{		if ($this->mysql)		{			$feed_id = "'" . mysql_real_escape_string($this->id) . "'";			if (is_a($data, 'SimplePie'))			{				if (SIMPLEPIE_PHP5)				{					// This keyword needs to defy coding standards for PHP4 compatibility					$data = clone($data);				}				$prepared = $this->prepare_simplepie_object_for_cache($data);				if ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))				{					if (mysql_num_rows($query))					{						$items = count($prepared[1]);						if ($items)						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = ' . $items . ', `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						else						{							$sql = 'UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `data` = \'' . mysql_real_escape_string($prepared[0]) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id;						}						if (!mysql_query($sql, $this->mysql))						{							return false;						}					}					elseif (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(' . $feed_id . ', ' . count($prepared[1]) . ', \'' . mysql_real_escape_string($prepared[0]) . '\', ' . time() . ')', $this->mysql))					{						return false;					}					$ids = array_keys($prepared[1]);					if (!empty($ids))					{						foreach ($ids as $id)						{							$database_ids[] = mysql_real_escape_string($id);						}						if ($query = mysql_unbuffered_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'items` WHERE `id` = \'' . implode('\' OR `id` = \'', $database_ids) . '\' AND `feed_id` = ' . $feed_id, $this->mysql))						{							$existing_ids = array();							while ($row = mysql_fetch_row($query))							{								$existing_ids[] = $row[0];							}							$new_ids = array_diff($ids, $existing_ids);							foreach ($new_ids as $new_id)							{								if (!($date = $prepared[1][$new_id]->get_date('U')))								{									$date = time();								}								if (!mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'items` (`feed_id`, `id`, `data`, `posted`) VALUES(' . $feed_id . ', \'' . mysql_real_escape_string($new_id) . '\', \'' . mysql_real_escape_string(serialize($prepared[1][$new_id]->data)) . '\', ' . $date . ')', $this->mysql))								{									return false;								}							}							return true;						}					}					else					{						return true;					}				}			}			elseif ($query = mysql_query('SELECT `id` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = ' . $feed_id, $this->mysql))			{				if (mysql_num_rows($query))				{					if (mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `items` = 0, `data` = \'' . mysql_real_escape_string(serialize($data)) . '\', `mtime` = ' . time() . ' WHERE `id` = ' . $feed_id, $this->mysql))					{						return true;					}				}				elseif (mysql_query('INSERT INTO `' . $this->options['prefix'][0] . 'cache_data` (`id`, `items`, `data`, `mtime`) VALUES(\'' . mysql_real_escape_string($this->id) . '\', 0, \'' . mysql_real_escape_string(serialize($data)) . '\', ' . time() . ')', $this->mysql))				{					return true;				}			}		}		return false;	}	function load()	{		if ($this->mysql && ($query = mysql_query('SELECT `items`, `data` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			$data = unserialize($row[1]);			if (isset($this->options['items'][0]))			{				$items = (int) $this->options['items'][0];			}			else			{				$items = (int) $row[0];			}			if ($items !== 0)			{				if (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_ATOM_03]['feed'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RDF]['RDF'][0];				}				elseif (isset($data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0]))				{					$feed =& $data['child'][SIMPLEPIE_NAMESPACE_RSS_20]['rss'][0];				}				else				{					$feed = null;				}				if ($feed !== null)				{					$sql = 'SELECT `data` FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . '\' ORDER BY `posted` DESC';					if ($items > 0)					{						$sql .= ' LIMIT ' . $items;					}					if ($query = mysql_unbuffered_query($sql, $this->mysql))					{						while ($row = mysql_fetch_row($query))						{							$feed['child'][SIMPLEPIE_NAMESPACE_ATOM_10]['entry'][] = unserialize($row[0]);						}					}					else					{						return false;					}				}			}			return $data;		}		return false;	}	function mtime()	{		if ($this->mysql && ($query = mysql_query('SELECT `mtime` FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($row = mysql_fetch_row($query)))		{			return $row[0];		}		else		{			return false;		}	}	function touch()	{		if ($this->mysql && ($query = mysql_query('UPDATE `' . $this->options['prefix'][0] . 'cache_data` SET `mtime` = ' . time() . ' WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && mysql_affected_rows($this->mysql))		{			return true;		}		else		{			return false;		}	}	function unlink()	{		if ($this->mysql && ($query = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'cache_data` WHERE `id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)) && ($query2 = mysql_query('DELETE FROM `' . $this->options['prefix'][0] . 'items` WHERE `feed_id` = \'' . mysql_real_escape_string($this->id) . "'", $this->mysql)))		{			return true;		}		else		{			return false;		}	}}class SimplePie_Misc{	function time_hms($seconds)	{		$time = '';		$hours = floor($seconds / 3600);		$remainder = $seconds % 3600;		if ($hours > 0)		{			$time .= $hours.':';		}		$minutes = floor($remainder / 60);		$seconds = $remainder % 60;		if ($minutes < 10 && $hours > 0)		{			$minutes = '0' . $minutes;		}		if ($seconds < 10)		{			$seconds = '0' . $seconds;		}		$time .= $minutes.':';		$time .= $seconds;		return $time;	}	function absolutize_url($relative, $base)	{		$iri = SimplePie_IRI::absolutize(new SimplePie_IRI($base), $relative);		return $iri->get_iri();	}	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	function get_element($realname, $string)	{		$return = array();		$name = preg_quote($realname, '/');		if (preg_match_all("/<($name)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$name>|(\/)?>)/siU", $string, $matches, PREG_SET_ORDER | PREG_OFFSET_CAPTURE))		{			for ($i = 0, $total_matches = count($matches); $i < $total_matches; $i++)			{				$return[$i]['tag'] = $realname;				$return[$i]['full'] = $matches[$i][0][0];				$return[$i]['offset'] = $matches[$i][0][1];				if (strlen($matches[$i][3][0]) <= 2)				{					$return[$i]['self_closing'] = true;				}				else				{					$return[$i]['self_closing'] = false;					$return[$i]['content'] = $matches[$i][4][0];				}				$return[$i]['attribs'] = array();				if (isset($matches[$i][2][0]) && preg_match_all('/[\x09\x0A\x0B\x0C\x0D\x20]+([^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3D\x3E]*)(?:[\x09\x0A\x0B\x0C\x0D\x20]*=[\x09\x0A\x0B\x0C\x0D\x20]*(?:"([^"]*)"|\'([^\']*)\'|([^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?/', ' ' . $matches[$i][2][0] . ' ', $attribs, PREG_SET_ORDER))				{					for ($j = 0, $total_attribs = count($attribs); $j < $total_attribs; $j++)					{						if (count($attribs[$j]) === 2)						{							$attribs[$j][2] = $attribs[$j][1];						}						$return[$i]['attribs'][strtolower($attribs[$j][1])]['data'] = SimplePie_Misc::entities_decode(end($attribs[$j]), 'UTF-8');					}				}			}		}		return $return;	}	function element_implode($element)	{		$full = "<$element[tag]";		foreach ($element['attribs'] as $key => $value)		{			$key = strtolower($key);			$full .= " $key=\"" . htmlspecialchars($value['data']) . '"';		}		if ($element['self_closing'])		{			$full .= ' />';		}		else		{			$full .= ">$element[content]</$element[tag]>";		}		return $full;	}	function error($message, $level, $file, $line)	{		if ((ini_get('error_reporting') & $level) > 0)		{			switch ($level)			{				case E_USER_ERROR:					$note = 'PHP Error';					break;				case E_USER_WARNING:					$note = 'PHP Warning';					break;				case E_USER_NOTICE:					$note = 'PHP Notice';					break;				default:					$note = 'Unknown Error';					break;			}			error_log("$note: $message in $file on line $line", 0);		}		return $message;	}	/**	 * If a file has been cached, retrieve and display it.	 *	 * This is most useful for caching images (get_favicon(), etc.),	 * however it works for all cached files.  This WILL NOT display ANY	 * file/image/page/whatever, but rather only display what has already	 * been cached by SimplePie.	 *	 * @access public	 * @see SimplePie::get_favicon()	 * @param str $identifier_url URL that is used to identify the content.	 * This may or may not be the actual URL of the live content.	 * @param str $cache_location Location of SimplePie's cache.  Defaults	 * to './cache'.	 * @param str $cache_extension The file extension that the file was	 * cached with.  Defaults to 'spc'.	 * @param str $cache_class Name of the cache-handling class being used	 * in SimplePie.  Defaults to 'SimplePie_Cache', and should be left	 * as-is unless you've overloaded the class.	 * @param str $cache_name_function Obsolete. Exists for backwards	 * compatibility reasons only.	 */	function display_cached_file($identifier_url, $cache_location = './cache', $cache_extension = 'spc', $cache_class = 'SimplePie_Cache', $cache_name_function = 'md5')	{		$cache = call_user_func(array($cache_class, 'create'), $cache_location, $identifier_url, $cache_extension);		if ($file = $cache->load())		{			if (isset($file['headers']['content-type']))			{				header('Content-type:' . $file['headers']['content-type']);			}			else			{				header('Content-type: application/octet-stream');			}			header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days			echo $file['body'];			exit;		}		die('Cached file for ' . $identifier_url . ' cannot be found.');	}	function fix_protocol($url, $http = 1)	{		$url = SimplePie_Misc::normalize_url($url);		$parsed = SimplePie_Misc::parse_url($url);		if ($parsed['scheme'] !== '' && $parsed['scheme'] !== 'http' && $parsed['scheme'] !== 'https')		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['authority'], $parsed['path'], $parsed['query'], $parsed['fragment']), $http);		}		if ($parsed['scheme'] === '' && $parsed['authority'] === '' && !file_exists($url))		{			return SimplePie_Misc::fix_protocol(SimplePie_Misc::compress_parse_url('http', $parsed['path'], '', $parsed['query'], $parsed['fragment']), $http);		}		if ($http === 2 && $parsed['scheme'] !== '')		{			return "feed:$url";		}		elseif ($http === 3 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'podcast', 0, 4);		}		elseif ($http === 4 && strtolower($parsed['scheme']) === 'http')		{			return substr_replace($url, 'itpc', 0, 4);		}		else		{			return $url;		}	}	function parse_url($url)	{		$iri = new SimplePie_IRI($url);		return array(			'scheme' => (string) $iri->get_scheme(),			'authority' => (string) $iri->get_authority(),			'path' => (string) $iri->get_path(),			'query' => (string) $iri->get_query(),			'fragment' => (string) $iri->get_fragment()		);	}	function compress_parse_url($scheme = '', $authority = '', $path = '', $query = '', $fragment = '')	{		$iri = new SimplePie_IRI('');		$iri->set_scheme($scheme);		$iri->set_authority($authority);		$iri->set_path($path);		$iri->set_query($query);		$iri->set_fragment($fragment);		return $iri->get_iri();	}	function normalize_url($url)	{		$iri = new SimplePie_IRI($url);		return $iri->get_iri();	}	function percent_encoding_normalization($match)	{		$integer = hexdec($match[1]);		if ($integer >= 0x41 && $integer <= 0x5A || $integer >= 0x61 && $integer <= 0x7A || $integer >= 0x30 && $integer <= 0x39 || $integer === 0x2D || $integer === 0x2E || $integer === 0x5F || $integer === 0x7E)		{			return chr($integer);		}		else		{			return strtoupper($match[0]);		}	}	/**	 * Remove bad UTF-8 bytes	 *	 * PCRE Pattern to locate bad bytes in a UTF-8 string comes from W3C	 * FAQ: Multilingual Forms (modified to include full ASCII range)	 *	 * @author Geoffrey Sneddon	 * @see http://www.w3.org/International/questions/qa-forms-utf-8	 * @param string $str String to remove bad UTF-8 bytes from	 * @return string UTF-8 string	 */	function utf8_bad_replace($str)	{		if (function_exists('iconv') && ($return = @iconv('UTF-8', 'UTF-8//IGNORE', $str)))		{			return $return;		}		elseif (function_exists('mb_convert_encoding') && ($return = @mb_convert_encoding($str, 'UTF-8', 'UTF-8')))		{			return $return;		}		elseif (preg_match_all('/(?:[\x00-\x7F]|[\xC2-\xDF][\x80-\xBF]|\xE0[\xA0-\xBF][\x80-\xBF]|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}|\xED[\x80-\x9F][\x80-\xBF]|\xF0[\x90-\xBF][\x80-\xBF]{2}|[\xF1-\xF3][\x80-\xBF]{3}|\xF4[\x80-\x8F][\x80-\xBF]{2})+/', $str, $matches))		{			return implode("\xEF\xBF\xBD", $matches[0]);		}		elseif ($str !== '')		{			return "\xEF\xBF\xBD";		}		else		{			return '';		}	}	/**	 * Converts a Windows-1252 encoded string to a UTF-8 encoded string	 *	 * @static	 * @access public	 * @param string $string Windows-1252 encoded string	 * @return string UTF-8 encoded string	 */	function windows_1252_to_utf8($string)	{		static $convert_table = array("\x80" => "\xE2\x82\xAC", "\x81" => "\xEF\xBF\xBD", "\x82" => "\xE2\x80\x9A", "\x83" => "\xC6\x92", "\x84" => "\xE2\x80\x9E", "\x85" => "\xE2\x80\xA6", "\x86" => "\xE2\x80\xA0", "\x87" => "\xE2\x80\xA1", "\x88" => "\xCB\x86", "\x89" => "\xE2\x80\xB0", "\x8A" => "\xC5\xA0", "\x8B" => "\xE2\x80\xB9", "\x8C" => "\xC5\x92", "\x8D" => "\xEF\xBF\xBD", "\x8E" => "\xC5\xBD", "\x8F" => "\xEF\xBF\xBD", "\x90" => "\xEF\xBF\xBD", "\x91" => "\xE2\x80\x98", "\x92" => "\xE2\x80\x99", "\x93" => "\xE2\x80\x9C", "\x94" => "\xE2\x80\x9D", "\x95" => "\xE2\x80\xA2", "\x96" => "\xE2\x80\x93", "\x97" => "\xE2\x80\x94", "\x98" => "\xCB\x9C", "\x99" => "\xE2\x84\xA2", "\x9A" => "\xC5\xA1", "\x9B" => "\xE2\x80\xBA", "\x9C" => "\xC5\x93", "\x9D" => "\xEF\xBF\xBD", "\x9E" => "\xC5\xBE", "\x9F" => "\xC5\xB8", "\xA0" => "\xC2\xA0", "\xA1" => "\xC2\xA1", "\xA2" => "\xC2\xA2", "\xA3" => "\xC2\xA3", "\xA4" => "\xC2\xA4", "\xA5" => "\xC2\xA5", "\xA6" => "\xC2\xA6", "\xA7" => "\xC2\xA7", "\xA8" => "\xC2\xA8", "\xA9" => "\xC2\xA9", "\xAA" => "\xC2\xAA", "\xAB" => "\xC2\xAB", "\xAC" => "\xC2\xAC", "\xAD" => "\xC2\xAD", "\xAE" => "\xC2\xAE", "\xAF" => "\xC2\xAF", "\xB0" => "\xC2\xB0", "\xB1" => "\xC2\xB1", "\xB2" => "\xC2\xB2", "\xB3" => "\xC2\xB3", "\xB4" => "\xC2\xB4", "\xB5" => "\xC2\xB5", "\xB6" => "\xC2\xB6", "\xB7" => "\xC2\xB7", "\xB8" => "\xC2\xB8", "\xB9" => "\xC2\xB9", "\xBA" => "\xC2\xBA", "\xBB" => "\xC2\xBB", "\xBC" => "\xC2\xBC", "\xBD" => "\xC2\xBD", "\xBE" => "\xC2\xBE", "\xBF" => "\xC2\xBF", "\xC0" => "\xC3\x80", "\xC1" => "\xC3\x81", "\xC2" => "\xC3\x82", "\xC3" => "\xC3\x83", "\xC4" => "\xC3\x84", "\xC5" => "\xC3\x85", "\xC6" => "\xC3\x86", "\xC7" => "\xC3\x87", "\xC8" => "\xC3\x88", "\xC9" => "\xC3\x89", "\xCA" => "\xC3\x8A", "\xCB" => "\xC3\x8B", "\xCC" => "\xC3\x8C", "\xCD" => "\xC3\x8D", "\xCE" => "\xC3\x8E", "\xCF" => "\xC3\x8F", "\xD0" => "\xC3\x90", "\xD1" => "\xC3\x91", "\xD2" => "\xC3\x92", "\xD3" => "\xC3\x93", "\xD4" => "\xC3\x94", "\xD5" => "\xC3\x95", "\xD6" => "\xC3\x96", "\xD7" => "\xC3\x97", "\xD8" => "\xC3\x98", "\xD9" => "\xC3\x99", "\xDA" => "\xC3\x9A", "\xDB" => "\xC3\x9B", "\xDC" => "\xC3\x9C", "\xDD" => "\xC3\x9D", "\xDE" => "\xC3\x9E", "\xDF" => "\xC3\x9F", "\xE0" => "\xC3\xA0", "\xE1" => "\xC3\xA1", "\xE2" => "\xC3\xA2", "\xE3" => "\xC3\xA3", "\xE4" => "\xC3\xA4", "\xE5" => "\xC3\xA5", "\xE6" => "\xC3\xA6", "\xE7" => "\xC3\xA7", "\xE8" => "\xC3\xA8", "\xE9" => "\xC3\xA9", "\xEA" => "\xC3\xAA", "\xEB" => "\xC3\xAB", "\xEC" => "\xC3\xAC", "\xED" => "\xC3\xAD", "\xEE" => "\xC3\xAE", "\xEF" => "\xC3\xAF", "\xF0" => "\xC3\xB0", "\xF1" => "\xC3\xB1", "\xF2" => "\xC3\xB2", "\xF3" => "\xC3\xB3", "\xF4" => "\xC3\xB4", "\xF5" => "\xC3\xB5", "\xF6" => "\xC3\xB6", "\xF7" => "\xC3\xB7", "\xF8" => "\xC3\xB8", "\xF9" => "\xC3\xB9", "\xFA" => "\xC3\xBA", "\xFB" => "\xC3\xBB", "\xFC" => "\xC3\xBC", "\xFD" => "\xC3\xBD", "\xFE" => "\xC3\xBE", "\xFF" => "\xC3\xBF");		return strtr($string, $convert_table);	}	function change_encoding($data, $input, $output)	{		$input = SimplePie_Misc::encoding($input);		$output = SimplePie_Misc::encoding($output);		// We fail to fail on non US-ASCII bytes		if ($input === 'US-ASCII')		{			static $non_ascii_octects = '';			if (!$non_ascii_octects)			{				for ($i = 0x80; $i <= 0xFF; $i++)				{					$non_ascii_octects .= chr($i);				}			}			$data = substr($data, 0, strcspn($data, $non_ascii_octects));		}		// This is first, as behaviour of this is completely predictable		if ($input === 'Windows-1252' && $output === 'UTF-8')		{			return SimplePie_Misc::windows_1252_to_utf8($data);		}		// This is second, as behaviour of this varies only with PHP version (the middle part of this expression checks the encoding is supported).		elseif (function_exists('mb_convert_encoding') && @mb_convert_encoding("\x80", 'UTF-16BE', $input) !== "\x00\x80" && ($return = @mb_convert_encoding($data, $output, $input)))		{			return $return;		}		// This is last, as behaviour of this varies with OS userland and PHP version		elseif (function_exists('iconv') && ($return = @iconv($input, $output, $data)))		{			return $return;		}		// If we can't do anything, just fail		else		{			return false;		}	}	function encoding($charset)	{		// Normalization from UTS #22		switch (strtolower(preg_replace('/(?:[^a-zA-Z0-9]+|([^0-9])0+)/', '\1', $charset)))		{			case 'adobestandardencoding':			case 'csadobestandardencoding':				return 'Adobe-Standard-Encoding';			case 'adobesymbolencoding':			case 'cshppsmath':				return 'Adobe-Symbol-Encoding';			case 'ami1251':			case 'amiga1251':				return 'Amiga-1251';			case 'ansix31101983':			case 'csat5001983':			case 'csiso99naplps':			case 'isoir99':			case 'naplps':				return 'ANSI_X3.110-1983';			case 'arabic7':			case 'asmo449':			case 'csiso89asmo449':			case 'iso9036':			case 'isoir89':				return 'ASMO_449';			case 'big5':			case 'csbig5':			case 'xxbig5':				return 'Big5';			case 'big5hkscs':				return 'Big5-HKSCS';			case 'bocu1':			case 'csbocu1':				return 'BOCU-1';			case 'brf':			case 'csbrf':				return 'BRF';			case 'bs4730':			case 'csiso4unitedkingdom':			case 'gb':			case 'iso646gb':			case 'isoir4':			case 'uk':				return 'BS_4730';			case 'bsviewdata':			case 'csiso47bsviewdata':			case 'isoir47':				return 'BS_viewdata';			case 'cesu8':			case 'cscesu8':				return 'CESU-8';			case 'ca':			case 'csa71':			case 'csaz243419851':			case 'csiso121canadian1':			case 'iso646ca':			case 'isoir121':				return 'CSA_Z243.4-1985-1';			case 'csa72':			case 'csaz243419852':			case 'csiso122canadian2':			case 'iso646ca2':			case 'isoir122':				return 'CSA_Z243.4-1985-2';			case 'csaz24341985gr':			case 'csiso123csaz24341985gr':			case 'isoir123':				return 'CSA_Z243.4-1985-gr';			case 'csiso139csn369103':			case 'csn369103':			case 'isoir139':				return 'CSN_369103';			case 'csdecmcs':			case 'dec':			case 'decmcs':				return 'DEC-MCS';			case 'csiso21german':			case 'de':			case 'din66003':			case 'iso646de':			case 'isoir21':				return 'DIN_66003';			case 'csdkus':			case 'dkus':				return 'dk-us';			case 'csiso646danish':			case 'dk':			case 'ds2089':			case 'iso646dk':				return 'DS_2089';			case 'csibmebcdicatde':			case 'ebcdicatde':				return 'EBCDIC-AT-DE';			case 'csebcdicatdea':			case 'ebcdicatdea':				return 'EBCDIC-AT-DE-A';			case 'csebcdiccafr':			case 'ebcdiccafr':				return 'EBCDIC-CA-FR';			case 'csebcdicdkno':			case 'ebcdicdkno':				return 'EBCDIC-DK-NO';			case 'csebcdicdknoa':			case 'ebcdicdknoa':				return 'EBCDIC-DK-NO-A';			case 'csebcdices':			case 'ebcdices':				return 'EBCDIC-ES';			case 'csebcdicesa':			case 'ebcdicesa':				return 'EBCDIC-ES-A';			case 'csebcdicess':			case 'ebcdicess':				return 'EBCDIC-ES-S';			case 'csebcdicfise':			case 'ebcdicfise':				return 'EBCDIC-FI-SE';			case 'csebcdicfisea':			case 'ebcdicfisea':				return 'EBCDIC-FI-SE-A';			case 'csebcdicfr':			case 'ebcdicfr':				return 'EBCDIC-FR';			case 'csebcdicit':			case 'ebcdicit':				return 'EBCDIC-IT';			case 'csebcdicpt':			case 'ebcdicpt':				return 'EBCDIC-PT';			case 'csebcdicuk':			case 'ebcdicuk':				return 'EBCDIC-UK';			case 'csebcdicus':			case 'ebcdicus':				return 'EBCDIC-US';			case 'csiso111ecmacyrillic':			case 'ecmacyrillic':			case 'isoir111':			case 'koi8e':				return 'ECMA-cyrillic';			case 'csiso17spanish':			case 'es':			case 'iso646es':			case 'isoir17':				return 'ES';			case 'csiso85spanish2':			case 'es2':			case 'iso646es2':			case 'isoir85':				return 'ES2';			case 'cseucfixwidjapanese':			case 'extendedunixcodefixedwidthforjapanese':				return 'Extended_UNIX_Code_Fixed_Width_for_Japanese';			case 'cseucpkdfmtjapanese':			case 'eucjp':			case 'extendedunixcodepackedformatforjapanese':				return 'Extended_UNIX_Code_Packed_Format_for_Japanese';			case 'gb18030':				return 'GB18030';			case 'chinese':			case 'cp936':			case 'csgb2312':			case 'csiso58gb231280':			case 'gb2312':			case 'gb231280':			case 'gbk':			case 'isoir58':			case 'ms936':			case 'windows936':				return 'GBK';			case 'cn':			case 'csiso57gb1988':			case 'gb198880':			case 'iso646cn':			case 'isoir57':				return 'GB_1988-80';			case 'csiso153gost1976874':			case 'gost1976874':			case 'isoir153':			case 'stsev35888':				return 'GOST_19768-74';			case 'csiso150':			case 'csiso150greekccitt':			case 'greekccitt':			case 'isoir150':				return 'greek-ccitt';			case 'csiso88greek7':			case 'greek7':			case 'isoir88':				return 'greek7';			case 'csiso18greek7old':			case 'greek7old':			case 'isoir18':				return 'greek7-old';			case 'cshpdesktop':			case 'hpdesktop':				return 'HP-DeskTop';			case 'cshplegal':			case 'hplegal':				return 'HP-Legal';			case 'cshpmath8':			case 'hpmath8':				return 'HP-Math8';			case 'cshppifont':			case 'hppifont':				return 'HP-Pi-font';			case 'cshproman8':			case 'hproman8':			case 'r8':			case 'roman8':				return 'hp-roman8';			case 'hzgb2312':				return 'HZ-GB-2312';			case 'csibmsymbols':			case 'ibmsymbols':				return 'IBM-Symbols';			case 'csibmthai':			case 'ibmthai':				return 'IBM-Thai';			case 'ccsid858':			case 'cp858':			case 'ibm858':			case 'pcmultilingual850euro':				return 'IBM00858';			case 'ccsid924':			case 'cp924':			case 'ebcdiclatin9euro':			case 'ibm924':				return 'IBM00924';			case 'ccsid1140':			case 'cp1140':			case 'ebcdicus37euro':			case 'ibm1140':				return 'IBM01140';			case 'ccsid1141':			case 'cp1141':			case 'ebcdicde273euro':			case 'ibm1141':				return 'IBM01141';			case 'ccsid1142':			case 'cp1142':			case 'ebcdicdk277euro':			case 'ebcdicno277euro':			case 'ibm1142':				return 'IBM01142';			case 'ccsid1143':			case 'cp1143':			case 'ebcdicfi278euro':			case 'ebcdicse278euro':			case 'ibm1143':				return 'IBM01143';			case 'ccsid1144':			case 'cp1144':			case 'ebcdicit280euro':			case 'ibm1144':				return 'IBM01144';			case 'ccsid1145':			case 'cp1145':			case 'ebcdices284euro':			case 'ibm1145':				return 'IBM01145';			case 'ccsid1146':			case 'cp1146':			case 'ebcdicgb285euro':			case 'ibm1146':				return 'IBM01146';			case 'ccsid1147':			case 'cp1147':			case 'ebcdicfr297euro':			case 'ibm1147':				return 'IBM01147';			case 'ccsid1148':			case 'cp1148':			case 'ebcdicinternational500euro':			case 'ibm1148':				return 'IBM01148';			case 'ccsid1149':			case 'cp1149':			case 'ebcdicis871euro':			case 'ibm1149':				return 'IBM01149';			case 'cp37':			case 'csibm37':			case 'ebcdiccpca':			case 'ebcdiccpnl':			case 'ebcdiccpus':			case 'ebcdiccpwt':			case 'ibm37':				return 'IBM037';			case 'cp38':			case 'csibm38':			case 'ebcdicint':			case 'ibm38':				return 'IBM038';			case 'cp273':			case 'csibm273':			case 'ibm273':				return 'IBM273';			case 'cp274':			case 'csibm274':			case 'ebcdicbe':			case 'ibm274':				return 'IBM274';			case 'cp275':			case 'csibm275':			case 'ebcdicbr':			case 'ibm275':				return 'IBM275';			case 'csibm277':			case 'ebcdiccpdk':			case 'ebcdiccpno':			case 'ibm277':				return 'IBM277';			case 'cp278':			case 'csibm278':			case 'ebcdiccpfi':			case 'ebcdiccpse':			case 'ibm278':				return 'IBM278';			case 'cp280':			case 'csibm280':			case 'ebcdiccpit':			case 'ibm280':				return 'IBM280';			case 'cp281':			case 'csibm281':			case 'ebcdicjpe':			case 'ibm281':				return 'IBM281';			case 'cp284':			case 'csibm284':			case 'ebcdiccpes':			case 'ibm284':				return 'IBM284';			case 'cp285':			case 'csibm285':			case 'ebcdiccpgb':			case 'ibm285':				return 'IBM285';			case 'cp290':			case 'csibm290':			case 'ebcdicjpkana':			case 'ibm290':				return 'IBM290';			case 'cp297':			case 'csibm297':			case 'ebcdiccpfr':			case 'ibm297':				return 'IBM297';			case 'cp420':			case 'csibm420':			case 'ebcdiccpar1':			case 'ibm420':				return 'IBM420';			case 'cp423':			case 'csibm423':			case 'ebcdiccpgr':			case 'ibm423':				return 'IBM423';			case 'cp424':			case 'csibm424':			case 'ebcdiccphe':			case 'ibm424':				return 'IBM424';			case '437':			case 'cp437':			case 'cspc8codepage437':			case 'ibm437':				return 'IBM437';			case 'cp500':			case 'csibm500':			case 'ebcdiccpbe':			case 'ebcdiccpch':			case 'ibm500':				return 'IBM500';			case 'cp775':			case 'cspc775baltic':			case 'ibm775':				return 'IBM775';			case '850':			case 'cp850':			case 'cspc850multilingual':			case 'ibm850':				return 'IBM850';			case '851':			case 'cp851':			case 'csibm851':			case 'ibm851':				return 'IBM851';			case '852':			case 'cp852':			case 'cspcp852':			case 'ibm852':				return 'IBM852';			case '855':			case 'cp855':			case 'csibm855':			case 'ibm855':				return 'IBM855';			case '857':			case 'cp857':			case 'csibm857':			case 'ibm857':				return 'IBM857';			case '860':			case 'cp860':			case 'csibm860':			case 'ibm860':				return 'IBM860';			case '861':			case 'cp861':			case 'cpis':			case 'csibm861':			case 'ibm861':				return 'IBM861';			case '862':			case 'cp862':			case 'cspc862latinhebrew':			case 'ibm862':				return 'IBM862';			case '863':			case 'cp863':			case 'csibm863':			case 'ibm863':				return 'IBM863';			case 'cp864':			case 'csibm864':			case 'ibm864':				return 'IBM864';			case '865':			case 'cp865':			case 'csibm865':			case 'ibm865':				return 'IBM865';			case '866':			case 'cp866':			case 'csibm866':			case 'ibm866':				return 'IBM866';			case 'cp868':			case 'cpar':			case 'csibm868':			case 'ibm868':				return 'IBM868';			case '869':			case 'cp869':			case 'cpgr':			case 'csibm869':			case 'ibm869':				return 'IBM869';			case 'cp870':			case 'csibm870':			case 'ebcdiccproece':			case 'ebcdiccpyu':			case 'ibm870':				return 'IBM870';			case 'cp871':			case 'csibm871':			case 'ebcdiccpis':			case 'ibm871':				return 'IBM871';			case 'cp880':			case 'csibm880':			case 'ebcdiccyrillic':			case 'ibm880':				return 'IBM880';			case 'cp891':			case 'csibm891':			case 'ibm891':				return 'IBM891';			case 'cp903':			case 'csibm903':			case 'ibm903':				return 'IBM903';			case '904':			case 'cp904':			case 'csibbm904':			case 'ibm904':				return 'IBM904';			case 'cp905':			case 'csibm905':			case 'ebcdiccptr':			case 'ibm905':				return 'IBM905';			case 'cp918':			case 'csibm918':			case 'ebcdiccpar2':			case 'ibm918':				return 'IBM918';			case 'cp1026':			case 'csibm1026':			case 'ibm1026':				return 'IBM1026';			case 'ibm1047':				return 'IBM1047';			case 'csiso143iecp271':			case 'iecp271':			case 'isoir143':				return 'IEC_P27-1';			case 'csiso49inis':			case 'inis':			case 'isoir49':				return 'INIS';			case 'csiso50inis8':			case 'inis8':			case 'isoir50':				return 'INIS-8';			case 'csiso51iniscyrillic':			case 'iniscyrillic':			case 'isoir51':				return 'INIS-cyrillic';			case 'csinvariant':			case 'invariant':				return 'INVARIANT';			case 'iso2022cn':				return 'ISO-2022-CN';			case 'iso2022cnext':				return 'ISO-2022-CN-EXT';			case 'csiso2022jp':			case 'iso2022jp':				return 'ISO-2022-JP';			case 'csiso2022jp2':			case 'iso2022jp2':				return 'ISO-2022-JP-2';			case 'csiso2022kr':			case 'iso2022kr':				return 'ISO-2022-KR';			case 'cswindows30latin1':			case 'iso88591windows30latin1':				return 'ISO-8859-1-Windows-3.0-Latin-1';			case 'cswindows31latin1':			case 'iso88591windows31latin1':				return 'ISO-8859-1-Windows-3.1-Latin-1';			case 'csisolatin2':			case 'iso88592':			case 'iso885921987':			case 'isoir101':			case 'l2':			case 'latin2':				return 'ISO-8859-2';			case 'cswindows31latin2':			case 'iso88592windowslatin2':				return 'ISO-8859-2-Windows-Latin-2';			case 'csisolatin3':			case 'iso88593':			case 'iso885931988':			case 'isoir109':			case 'l3':			case 'latin3':				return 'ISO-8859-3';			case 'csisolatin4':			case 'iso88594':			case 'iso885941988':			case 'isoir110':			case 'l4':			case 'latin4':				return 'ISO-8859-4';			case 'csisolatincyrillic':			case 'cyrillic':			case 'iso88595':			case 'iso885951988':			case 'isoir144':				return 'ISO-8859-5';			case 'arabic':			case 'asmo708':			case 'csisolatinarabic':			case 'ecma114':			case 'iso88596':			case 'iso885961987':			case 'isoir127':				return 'ISO-8859-6';			case 'csiso88596e':			case 'iso88596e':				return 'ISO-8859-6-E';			case 'csiso88596i':			case 'iso88596i':				return 'ISO-8859-6-I';			case 'csisolatingreek':			case 'ecma118':			case 'elot928':			case 'greek':			case 'greek8':			case 'iso88597':			case 'iso885971987':			case 'isoir126':				return 'ISO-8859-7';			case 'csisolatinhebrew':			case 'hebrew':			case 'iso88598':			case 'iso885981988':			case 'isoir138':				return 'ISO-8859-8';			case 'csiso88598e':			case 'iso88598e':				return 'ISO-8859-8-E';			case 'csiso88598i':			case 'iso88598i':				return 'ISO-8859-8-I';			case 'cswindows31latin5':			case 'iso88599windowslatin5':				return 'ISO-8859-9-Windows-Latin-5';			case 'csisolatin6':			case 'iso885910':			case 'iso8859101992':			case 'isoir157':			case 'l6':			case 'latin6':				return 'ISO-8859-10';			case 'iso885913':				return 'ISO-8859-13';			case 'iso885914':			case 'iso8859141998':			case 'isoceltic':			case 'isoir199':			case 'l8':			case 'latin8':				return 'ISO-8859-14';			case 'iso885915':			case 'latin9':				return 'ISO-8859-15';			case 'iso885916':			case 'iso8859162001':			case 'isoir226':			case 'l10':			case 'latin10':				return 'ISO-8859-16';			case 'iso10646j1':				return 'ISO-10646-J-1';			case 'csunicode':			case 'iso10646ucs2':				return 'ISO-10646-UCS-2';			case 'csucs4':			case 'iso10646ucs4':				return 'ISO-10646-UCS-4';			case 'csunicodeascii':			case 'iso10646ucsbasic':				return 'ISO-10646-UCS-Basic';			case 'csunicodelatin1':			case 'iso10646':			case 'iso10646unicodelatin1':				return 'ISO-10646-Unicode-Latin1';			case 'csiso10646utf1':			case 'iso10646utf1':				return 'ISO-10646-UTF-1';			case 'csiso115481':			case 'iso115481':			case 'isotr115481':				return 'ISO-11548-1';			case 'csiso90':			case 'isoir90':				return 'iso-ir-90';			case 'csunicodeibm1261':			case 'isounicodeibm1261':				return 'ISO-Unicode-IBM-1261';			case 'csunicodeibm1264':			case 'isounicodeibm1264':				return 'ISO-Unicode-IBM-1264';			case 'csunicodeibm1265':			case 'isounicodeibm1265':				return 'ISO-Unicode-IBM-1265';			case 'csunicodeibm1268':			case 'isounicodeibm1268':				return 'ISO-Unicode-IBM-1268';			case 'csunicodeibm1276':			case 'isounicodeibm1276':				return 'ISO-Unicode-IBM-1276';			case 'csiso646basic1983':			case 'iso646basic1983':			case 'ref':				return 'ISO_646.basic:1983';			case 'csiso2intlrefversion':			case 'irv':			case 'iso646irv1983':			case 'isoir2':				return 'ISO_646.irv:1983';			case 'csiso2033':			case 'e13b':			case 'iso20331983':			case 'isoir98':				return 'ISO_2033-1983';			case 'csiso5427cyrillic':			case 'iso5427':			case 'isoir37':				return 'ISO_5427';			case 'iso5427cyrillic1981':			case 'iso54271981':			case 'isoir54':				return 'ISO_5427:1981';			case 'csiso5428greek':			case 'iso54281980':			case 'isoir55':				return 'ISO_5428:1980';			case 'csiso6937add':			case 'iso6937225':			case 'isoir152':				return 'ISO_6937-2-25';			case 'csisotextcomm':			case 'iso69372add':			case 'isoir142':				return 'ISO_6937-2-add';			case 'csiso8859supp':			case 'iso8859supp':			case 'isoir154':			case 'latin125':				return 'ISO_8859-supp';			case 'csiso10367box':			case 'iso10367box':			case 'isoir155':				return 'ISO_10367-box';			case 'csiso15italian':			case 'iso646it':			case 'isoir15':			case 'it':				return 'IT';			case 'csiso13jisc6220jp':			case 'isoir13':			case 'jisc62201969':			case 'jisc62201969jp':			case 'katakana':			case 'x2017':				return 'JIS_C6220-1969-jp';			case 'csiso14jisc6220ro':			case 'iso646jp':			case 'isoir14':			case 'jisc62201969ro':			case 'jp':				return 'JIS_C6220-1969-ro';			case 'csiso42jisc62261978':			case 'isoir42':			case 'jisc62261978':				return 'JIS_C6226-1978';			case 'csiso87jisx208':			case 'isoir87':			case 'jisc62261983':			case 'jisx2081983':			case 'x208':				return 'JIS_C6226-1983';			case 'csiso91jisc62291984a':			case 'isoir91':			case 'jisc62291984a':			case 'jpocra':				return 'JIS_C6229-1984-a';			case 'csiso92jisc62991984b':			case 'iso646jpocrb':			case 'isoir92':			case 'jisc62291984b':			case 'jpocrb':				return 'JIS_C6229-1984-b';			case 'csiso93jis62291984badd':			case 'isoir93':			case 'jisc62291984badd':			case 'jpocrbadd':				return 'JIS_C6229-1984-b-add';			case 'csiso94jis62291984hand':			case 'isoir94':			case 'jisc62291984hand':			case 'jpocrhand':				return 'JIS_C6229-1984-hand';			case 'csiso95jis62291984handadd':			case 'isoir95':			case 'jisc62291984handadd':			case 'jpocrhandadd':				return 'JIS_C6229-1984-hand-add';			case 'csiso96jisc62291984kana':			case 'isoir96':			case 'jisc62291984kana':				return 'JIS_C6229-1984-kana';			case 'csjisencoding':			case 'jisencoding':				return 'JIS_Encoding';			case 'cshalfwidthkatakana':			case 'jisx201':			case 'x201':				return 'JIS_X0201';			case 'csiso159jisx2121990':			case 'isoir159':			case 'jisx2121990':			case 'x212':				return 'JIS_X0212-1990';			case 'csiso141jusib1002':			case 'iso646yu':			case 'isoir141':			case 'js':			case 'jusib1002':			case 'yu':				return 'JUS_I.B1.002';			case 'csiso147macedonian':			case 'isoir147':			case 'jusib1003mac':			case 'macedonian':				return 'JUS_I.B1.003-mac';			case 'csiso146serbian':			case 'isoir146':			case 'jusib1003serb':			case 'serbian':				return 'JUS_I.B1.003-serb';			case 'koi7switched':				return 'KOI7-switched';			case 'cskoi8r':			case 'koi8r':				return 'KOI8-R';			case 'koi8u':				return 'KOI8-U';			case 'csksc5636':			case 'iso646kr':			case 'ksc5636':				return 'KSC5636';			case 'cskz1048':			case 'kz1048':			case 'rk1048':			case 'strk10482002':				return 'KZ-1048';			case 'csiso19latingreek':			case 'isoir19':			case 'latingreek':				return 'latin-greek';			case 'csiso27latingreek1':			case 'isoir27':			case 'latingreek1':				return 'Latin-greek-1';			case 'csiso158lap':			case 'isoir158':			case 'lap':			case 'latinlap':				return 'latin-lap';			case 'csmacintosh':			case 'mac':			case 'macintosh':				return 'macintosh';			case 'csmicrosoftpublishing':			case 'microsoftpublishing':				return 'Microsoft-Publishing';			case 'csmnem':			case 'mnem':				return 'MNEM';			case 'csmnemonic':			case 'mnemonic':				return 'MNEMONIC';			case 'csiso86hungarian':			case 'hu':			case 'iso646hu':			case 'isoir86':			case 'msz77953':				return 'MSZ_7795.3';			case 'csnatsdano':			case 'isoir91':			case 'natsdano':				return 'NATS-DANO';			case 'csnatsdanoadd':			case 'isoir92':			case 'natsdanoadd':				return 'NATS-DANO-ADD';			case 'csnatssefi':			case 'isoir81':			case 'natssefi':				return 'NATS-SEFI';			case 'csnatssefiadd':			case 'isoir82':			case 'natssefiadd':				return 'NATS-SEFI-ADD';			case 'csiso151cuba':			case 'cuba':			case 'iso646cu':			case 'isoir151':			case 'ncnc1081':				return 'NC_NC00-10:81';			case 'csiso69french':			case 'fr':			case 'iso646fr':			case 'isoir69':			case 'nfz62010':				return 'NF_Z_62-010';			case 'csiso25french':			case 'iso646fr1':			case 'isoir25':			case 'nfz620101973':				return 'NF_Z_62-010_(1973)';			case 'csiso60danishnorwegian':			case 'csiso60norwegian1':			case 'iso646no':			case 'isoir60':			case 'no':			case 'ns45511':				return 'NS_4551-1';			case 'csiso61norwegian2':			case 'iso646no2':			case 'isoir61':			case 'no2':			case 'ns45512':				return 'NS_4551-2';			case 'osdebcdicdf3irv':				return 'OSD_EBCDIC_DF03_IRV';			case 'osdebcdicdf41':				return 'OSD_EBCDIC_DF04_1';			case 'osdebcdicdf415':				return 'OSD_EBCDIC_DF04_15';			case 'cspc8danishnorwegian':			case 'pc8danishnorwegian':				return 'PC8-Danish-Norwegian';			case 'cspc8turkish':			case 'pc8turkish':				return 'PC8-Turkish';			case 'csiso16portuguese':			case 'iso646pt':			case 'isoir16':			case 'pt':				return 'PT';			case 'csiso84portuguese2':			case 'iso646pt2':			case 'isoir84':			case 'pt2':				return 'PT2';			case 'cp154':			case 'csptcp154':			case 'cyrillicasian':			case 'pt154':			case 'ptcp154':				return 'PTCP154';			case 'scsu':				return 'SCSU';			case 'csiso10swedish':			case 'fi':			case 'iso646fi':			case 'iso646se':			case 'isoir10':			case 'se':			case 'sen850200b':				return 'SEN_850200_B';			case 'csiso11swedishfornames':			case 'iso646se2':			case 'isoir11':			case 'se2':			case 'sen850200c':				return 'SEN_850200_C';			case 'csshiftjis':			case 'mskanji':			case 'shiftjis':				return 'Shift_JIS';			case 'csiso102t617bit':			case 'isoir102':			case 't617bit':				return 'T.61-7bit';			case 'csiso103t618bit':			case 'isoir103':			case 't61':			case 't618bit':				return 'T.61-8bit';			case 'csiso128t101g2':			case 'isoir128':			case 't101g2':				return 'T.101-G2';			case 'cstscii':			case 'tscii':				return 'TSCII';			case 'csunicode11':			case 'unicode11':				return 'UNICODE-1-1';			case 'csunicode11utf7':			case 'unicode11utf7':				return 'UNICODE-1-1-UTF-7';			case 'csunknown8bit':			case 'unknown8bit':				return 'UNKNOWN-8BIT';			case 'ansix341968':			case 'ansix341986':			case 'ascii':			case 'cp367':			case 'csascii':			case 'ibm367':			case 'iso646irv1991':			case 'iso646us':			case 'isoir6':			case 'us':			case 'usascii':				return 'US-ASCII';			case 'csusdk':			case 'usdk':				return 'us-dk';			case 'utf7':				return 'UTF-7';			case 'utf8':				return 'UTF-8';			case 'utf16':				return 'UTF-16';			case 'utf16be':				return 'UTF-16BE';			case 'utf16le':				return 'UTF-16LE';			case 'utf32':				return 'UTF-32';			case 'utf32be':				return 'UTF-32BE';			case 'utf32le':				return 'UTF-32LE';			case 'csventurainternational':			case 'venturainternational':				return 'Ventura-International';			case 'csventuramath':			case 'venturamath':				return 'Ventura-Math';			case 'csventuraus':			case 'venturaus':				return 'Ventura-US';			case 'csiso70videotexsupp1':			case 'isoir70':			case 'videotexsuppl':				return 'videotex-suppl';			case 'csviqr':			case 'viqr':				return 'VIQR';			case 'csviscii':			case 'viscii':				return 'VISCII';			case 'cswindows31j':			case 'windows31j':				return 'Windows-31J';			case 'iso885911':			case 'tis620':				return 'windows-874';			case 'cseuckr':			case 'csksc56011987':			case 'euckr':			case 'isoir149':			case 'korean':			case 'ksc5601':			case 'ksc56011987':			case 'ksc56011989':			case 'windows949':				return 'windows-949';			case 'windows1250':				return 'windows-1250';			case 'windows1251':				return 'windows-1251';			case 'cp819':			case 'csisolatin1':			case 'ibm819':			case 'iso88591':			case 'iso885911987':			case 'isoir100':			case 'l1':			case 'latin1':			case 'windows1252':				return 'windows-1252';			case 'windows1253':				return 'windows-1253';			case 'csisolatin5':			case 'iso88599':			case 'iso885991989':			case 'isoir148':			case 'l5':			case 'latin5':			case 'windows1254':				return 'windows-1254';			case 'windows1255':				return 'windows-1255';			case 'windows1256':				return 'windows-1256';			case 'windows1257':				return 'windows-1257';			case 'windows1258':				return 'windows-1258';			default:				return $charset;		}	}	function get_curl_version()	{		if (is_array($curl = curl_version()))		{			$curl = $curl['version'];		}		elseif (substr($curl, 0, 5) === 'curl/')		{			$curl = substr($curl, 5, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 5));		}		elseif (substr($curl, 0, 8) === 'libcurl/')		{			$curl = substr($curl, 8, strcspn($curl, "\x09\x0A\x0B\x0C\x0D", 8));		}		else		{			$curl = 0;		}		return $curl;	}	function is_subclass_of($class1, $class2)	{		if (func_num_args() !== 2)		{			trigger_error('Wrong parameter count for SimplePie_Misc::is_subclass_of()', E_USER_WARNING);		}		elseif (version_compare(PHP_VERSION, '5.0.3', '>=') || is_object($class1))		{			return is_subclass_of($class1, $class2);		}		elseif (is_string($class1) && is_string($class2))		{			if (class_exists($class1))			{				if (class_exists($class2))				{					$class2 = strtolower($class2);					while ($class1 = strtolower(get_parent_class($class1)))					{						if ($class1 === $class2)						{							return true;						}					}				}			}			else			{				trigger_error('Unknown class passed as parameter', E_USER_WARNNG);			}		}		return false;	}	/**	 * Strip HTML comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function strip_comments($data)	{		$output = '';		while (($start = strpos($data, '<!--')) !== false)		{			$output .= substr($data, 0, $start);			if (($end = strpos($data, '-->', $start)) !== false)			{				$data = substr_replace($data, '', 0, $end + 3);			}			else			{				$data = '';			}		}		return $output . $data;	}	function parse_date($dt)	{		$parser = SimplePie_Parse_Date::get();		return $parser->parse($dt);	}	/**	 * Decode HTML entities	 *	 * @static	 * @access public	 * @param string $data Input data	 * @return string Output data	 */	function entities_decode($data)	{		$decoder = new SimplePie_Decode_HTML_Entities($data);		return $decoder->parse();	}	/**	 * Remove RFC822 comments	 *	 * @access public	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function uncomment_rfc822($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	function parse_mime($mime)	{		if (($pos = strpos($mime, ';')) === false)		{			return trim($mime);		}		else		{			return trim(substr($mime, 0, $pos));		}	}	function htmlspecialchars_decode($string, $quote_style)	{		if (function_exists('htmlspecialchars_decode'))		{			return htmlspecialchars_decode($string, $quote_style);		}		else		{			return strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));		}	}	function atom_03_construct_type($attribs)	{		if (isset($attribs['']['mode']) && strtolower(trim($attribs['']['mode']) === 'base64'))		{			$mode = SIMPLEPIE_CONSTRUCT_BASE64;		}		else		{			$mode = SIMPLEPIE_CONSTRUCT_NONE;		}		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':				case 'text/plain':					return SIMPLEPIE_CONSTRUCT_TEXT | $mode;				case 'html':				case 'text/html':					return SIMPLEPIE_CONSTRUCT_HTML | $mode;				case 'xhtml':				case 'application/xhtml+xml':					return SIMPLEPIE_CONSTRUCT_XHTML | $mode;				default:					return SIMPLEPIE_CONSTRUCT_NONE | $mode;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT | $mode;		}	}	function atom_10_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			switch (strtolower(trim($attribs['']['type'])))			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;				default:					return SIMPLEPIE_CONSTRUCT_NONE;			}		}		return SIMPLEPIE_CONSTRUCT_TEXT;	}	function atom_10_content_construct_type($attribs)	{		if (isset($attribs['']['type']))		{			$type = strtolower(trim($attribs['']['type']));			switch ($type)			{				case 'text':					return SIMPLEPIE_CONSTRUCT_TEXT;				case 'html':					return SIMPLEPIE_CONSTRUCT_HTML;				case 'xhtml':					return SIMPLEPIE_CONSTRUCT_XHTML;			}			if (in_array(substr($type, -4), array('+xml', '/xml')) || substr($type, 0, 5) === 'text/')			{				return SIMPLEPIE_CONSTRUCT_NONE;			}			else			{				return SIMPLEPIE_CONSTRUCT_BASE64;			}		}		else		{			return SIMPLEPIE_CONSTRUCT_TEXT;		}	}	function is_isegment_nz_nc($string)	{		return (bool) preg_match('/^([A-Za-z0-9\-._~\x{A0}-\x{D7FF}\x{F900}-\x{FDCF}\x{FDF0}-\x{FFEF}\x{10000}-\x{1FFFD}\x{20000}-\x{2FFFD}\x{30000}-\x{3FFFD}\x{40000}-\x{4FFFD}\x{50000}-\x{5FFFD}\x{60000}-\x{6FFFD}\x{70000}-\x{7FFFD}\x{80000}-\x{8FFFD}\x{90000}-\x{9FFFD}\x{A0000}-\x{AFFFD}\x{B0000}-\x{BFFFD}\x{C0000}-\x{CFFFD}\x{D0000}-\x{DFFFD}\x{E1000}-\x{EFFFD}!$&\'()*+,;=@]|(%[0-9ABCDEF]{2}))+$/u', $string);	}	function space_seperated_tokens($string)	{		$space_characters = "\x20\x09\x0A\x0B\x0C\x0D";		$string_length = strlen($string);		$position = strspn($string, $space_characters);		$tokens = array();		while ($position < $string_length)		{			$len = strcspn($string, $space_characters, $position);			$tokens[] = substr($string, $position, $len);			$position += $len;			$position += strspn($string, $space_characters, $position);		}		return $tokens;	}	function array_unique($array)	{		if (version_compare(PHP_VERSION, '5.2', '>='))		{			return array_unique($array);		}		else		{			$array = (array) $array;			$new_array = array();			$new_array_strings = array();			foreach ($array as $key => $value)			{				if (is_object($value))				{					if (method_exists($value, '__toString'))					{						$cmp = $value->__toString();					}					else					{						trigger_error('Object of class ' . get_class($value) . ' could not be converted to string', E_USER_ERROR);					}				}				elseif (is_array($value))				{					$cmp = (string) reset($value);				}				else				{					$cmp = (string) $value;				}				if (!in_array($cmp, $new_array_strings))				{					$new_array[$key] = $value;					$new_array_strings[] = $cmp;				}			}			return $new_array;		}	}	/**	 * Converts a unicode codepoint to a UTF-8 character	 *	 * @static	 * @access public	 * @param int $codepoint Unicode codepoint	 * @return string UTF-8 character	 */	function codepoint_to_utf8($codepoint)	{		$codepoint = (int) $codepoint;		if ($codepoint < 0)		{			return false;		}		else if ($codepoint <= 0x7f)		{			return chr($codepoint);		}		else if ($codepoint <= 0x7ff)		{			return chr(0xc0 | ($codepoint >> 6)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0xffff)		{			return chr(0xe0 | ($codepoint >> 12)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else if ($codepoint <= 0x10ffff)		{			return chr(0xf0 | ($codepoint >> 18)) . chr(0x80 | (($codepoint >> 12) & 0x3f)) . chr(0x80 | (($codepoint >> 6) & 0x3f)) . chr(0x80 | ($codepoint & 0x3f));		}		else		{			// U+FFFD REPLACEMENT CHARACTER			return "\xEF\xBF\xBD";		}	}	/**	 * Re-implementation of PHP 5's stripos()	 *	 * Returns the numeric position of the first occurrence of needle in the	 * haystack string.	 *	 * @static	 * @access string	 * @param object $haystack	 * @param string $needle Note that the needle may be a string of one or more	 *     characters. If needle is not a string, it is converted to an integer	 *     and applied as the ordinal value of a character.	 * @param int $offset The optional offset parameter allows you to specify which	 *     character in haystack to start searching. The position returned is still	 *     relative to the beginning of haystack.	 * @return bool If needle is not found, stripos() will return boolean false.	 */	function stripos($haystack, $needle, $offset = 0)	{		if (function_exists('stripos'))		{			return stripos($haystack, $needle, $offset);		}		else		{			if (is_string($needle))			{				$needle = strtolower($needle);			}			elseif (is_int($needle) || is_bool($needle) || is_double($needle))			{				$needle = strtolower(chr($needle));			}			else			{				trigger_error('needle is not a string or an integer', E_USER_WARNING);				return false;			}			return strpos(strtolower($haystack), $needle, $offset);		}	}	/**	 * Similar to parse_str()	 *	 * Returns an associative array of name/value pairs, where the value is an	 * array of values that have used the same name	 *	 * @static	 * @access string	 * @param string $str The input string.	 * @return array	 */	function parse_str($str)	{		$return = array();		$str = explode('&', $str);		foreach ($str as $section)		{			if (strpos($section, '=') !== false)			{				list($name, $value) = explode('=', $section, 2);				$return[urldecode($name)][] = urldecode($value);			}			else			{				$return[urldecode($section)][] = null;			}		}		return $return;	}	/**	 * Detect XML encoding, as per XML 1.0 Appendix F.1	 *	 * @todo Add support for EBCDIC	 * @param string $data XML data	 * @return array Possible encodings	 */	function xml_encoding($data)	{		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$encoding[] = 'UTF-16LE';		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$encoding[] = 'UTF-8';		}		// UTF-32 Big Endian Without BOM		elseif (substr($data, 0, 20) === "\x00\x00\x00\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C")		{			if ($pos = strpos($data, "\x00\x00\x00\x3F\x00\x00\x00\x3E"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32BE';		}		// UTF-32 Little Endian Without BOM		elseif (substr($data, 0, 20) === "\x3C\x00\x00\x00\x3F\x00\x00\x00\x78\x00\x00\x00\x6D\x00\x00\x00\x6C\x00\x00\x00")		{			if ($pos = strpos($data, "\x3F\x00\x00\x00\x3E\x00\x00\x00"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 20), 'UTF-32LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-32LE';		}		// UTF-16 Big Endian Without BOM		elseif (substr($data, 0, 10) === "\x00\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C")		{			if ($pos = strpos($data, "\x00\x3F\x00\x3E"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16BE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16BE';		}		// UTF-16 Little Endian Without BOM		elseif (substr($data, 0, 10) === "\x3C\x00\x3F\x00\x78\x00\x6D\x00\x6C\x00")		{			if ($pos = strpos($data, "\x3F\x00\x3E\x00"))			{				$parser = new SimplePie_XML_Declaration_Parser(SimplePie_Misc::change_encoding(substr($data, 20, $pos - 10), 'UTF-16LE', 'UTF-8'));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-16LE';		}		// US-ASCII (or superset)		elseif (substr($data, 0, 5) === "\x3C\x3F\x78\x6D\x6C")		{			if ($pos = strpos($data, "\x3F\x3E"))			{				$parser = new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));				if ($parser->parse())				{					$encoding[] = $parser->encoding;				}			}			$encoding[] = 'UTF-8';		}		// Fallback to UTF-8		else		{			$encoding[] = 'UTF-8';		}		return $encoding;	}	function output_javascript()	{		if (function_exists('ob_gzhandler'))		{			ob_start('ob_gzhandler');		}		header('Content-type: text/javascript; charset: UTF-8');		header('Cache-Control: must-revalidate');		header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 604800) . ' GMT'); // 7 days		?>function embed_odeo(link) {	document.writeln('<embed src="http://odeo.com/flash/audio_player_fullsize.swf" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="440" height="80" wmode="transparent" allowScriptAccess="any" flashvars="valid_sample_rate=true&external_url='+link+'"></embed>');}function embed_quicktime(type, bgcolor, width, height, link, placeholder, loop) {	if (placeholder != '')	{		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" href="'+link+'" src="'+placeholder+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="false" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}	else {		document.writeln('<embed type="'+type+'" style="cursor:hand; cursor:pointer;" src="'+link+'" width="'+width+'" height="'+height+'" autoplay="false" target="myself" controller="true" loop="'+loop+'" scale="aspect" bgcolor="'+bgcolor+'" pluginspage="http://www.apple.com/quicktime/download/"></embed>');	}}function embed_flash(bgcolor, width, height, link, loop, type) {	document.writeln('<embed src="'+link+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="'+type+'" quality="high" width="'+width+'" height="'+height+'" bgcolor="'+bgcolor+'" loop="'+loop+'"></embed>');}function embed_flv(width, height, link, placeholder, loop, player) {	document.writeln('<embed src="'+player+'" pluginspage="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" quality="high" width="'+width+'" height="'+height+'" wmode="transparent" flashvars="file='+link+'&autostart=false&repeat='+loop+'&showdigits=true&showfsbutton=false"></embed>');}function embed_wmedia(width, height, link) {	document.writeln('<embed type="application/x-mplayer2" src="'+link+'" autosize="1" width="'+width+'" height="'+height+'" showcontrols="1" showstatusbar="0" showdisplay="0" autostart="0"></embed>');}		<?php	}}/** * Decode HTML Entities * * This implements HTML5 as of revision 967 (2007-06-28) * * @package SimplePie */class SimplePie_Decode_HTML_Entities{	/**	 * Data to be parsed	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Currently consumed bytes	 *	 * @access private	 * @var string	 */	var $consumed = '';	/**	 * Position of the current byte being parsed	 *	 * @access private	 * @var int	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_Decode_HTML_Entities($data)	{		$this->data = $data;	}	/**	 * Parse the input data	 *	 * @access public	 * @return string Output data	 */	function parse()	{		while (($this->position = strpos($this->data, '&', $this->position)) !== false)		{			$this->consume();			$this->entity();			$this->consumed = '';		}		return $this->data;	}	/**	 * Consume the next byte	 *	 * @access private	 * @return mixed The next byte, or false, if there is no more data	 */	function consume()	{		if (isset($this->data[$this->position]))		{			$this->consumed .= $this->data[$this->position];			return $this->data[$this->position++];		}		else		{			return false;		}	}	/**	 * Consume a range of characters	 *	 * @access private	 * @param string $chars Characters to consume	 * @return mixed A series of characters that match the range, or false	 */	function consume_range($chars)	{		if ($len = strspn($this->data, $chars, $this->position))		{			$data = substr($this->data, $this->position, $len);			$this->consumed .= $data;			$this->position += $len;			return $data;		}		else		{			return false;		}	}	/**	 * Unconsume one byte	 *	 * @access private	 */	function unconsume()	{		$this->consumed = substr($this->consumed, 0, -1);		$this->position--;	}	/**	 * Decode an entity	 *	 * @access private	 */	function entity()	{		switch ($this->consume())		{			case "\x09":			case "\x0A":			case "\x0B":			case "\x0B":			case "\x0C":			case "\x20":			case "\x3C":			case "\x26":			case false:				break;			case "\x23":				switch ($this->consume())				{					case "\x78":					case "\x58":						$range = '0123456789ABCDEFabcdef';						$hex = true;						break;					default:						$range = '0123456789';						$hex = false;						$this->unconsume();						break;				}				if ($codepoint = $this->consume_range($range))				{					static $windows_1252_specials = array(0x0D => "\x0A", 0x80 => "\xE2\x82\xAC", 0x81 => "\xEF\xBF\xBD", 0x82 => "\xE2\x80\x9A", 0x83 => "\xC6\x92", 0x84 => "\xE2\x80\x9E", 0x85 => "\xE2\x80\xA6", 0x86 => "\xE2\x80\xA0", 0x87 => "\xE2\x80\xA1", 0x88 => "\xCB\x86", 0x89 => "\xE2\x80\xB0", 0x8A => "\xC5\xA0", 0x8B => "\xE2\x80\xB9", 0x8C => "\xC5\x92", 0x8D => "\xEF\xBF\xBD", 0x8E => "\xC5\xBD", 0x8F => "\xEF\xBF\xBD", 0x90 => "\xEF\xBF\xBD", 0x91 => "\xE2\x80\x98", 0x92 => "\xE2\x80\x99", 0x93 => "\xE2\x80\x9C", 0x94 => "\xE2\x80\x9D", 0x95 => "\xE2\x80\xA2", 0x96 => "\xE2\x80\x93", 0x97 => "\xE2\x80\x94", 0x98 => "\xCB\x9C", 0x99 => "\xE2\x84\xA2", 0x9A => "\xC5\xA1", 0x9B => "\xE2\x80\xBA", 0x9C => "\xC5\x93", 0x9D => "\xEF\xBF\xBD", 0x9E => "\xC5\xBE", 0x9F => "\xC5\xB8");					if ($hex)					{						$codepoint = hexdec($codepoint);					}					else					{						$codepoint = intval($codepoint);					}					if (isset($windows_1252_specials[$codepoint]))					{						$replacement = $windows_1252_specials[$codepoint];					}					else					{						$replacement = SimplePie_Misc::codepoint_to_utf8($codepoint);					}					if (!in_array($this->consume(), array(';', false), true))					{						$this->unconsume();					}					$consumed_length = strlen($this->consumed);					$this->data = substr_replace($this->data, $replacement, $this->position - $consumed_length, $consumed_length);					$this->position += strlen($replacement) - $consumed_length;				}				break;			default:				static $entities = array('Aacute' => "\xC3\x81", 'aacute' => "\xC3\xA1", 'Aacute;' => "\xC3\x81", 'aacute;' => "\xC3\xA1", 'Acirc' => "\xC3\x82", 'acirc' => "\xC3\xA2", 'Acirc;' => "\xC3\x82", 'acirc;' => "\xC3\xA2", 'acute' => "\xC2\xB4", 'acute;' => "\xC2\xB4", 'AElig' => "\xC3\x86", 'aelig' => "\xC3\xA6", 'AElig;' => "\xC3\x86", 'aelig;' => "\xC3\xA6", 'Agrave' => "\xC3\x80", 'agrave' => "\xC3\xA0", 'Agrave;' => "\xC3\x80", 'agrave;' => "\xC3\xA0", 'alefsym;' => "\xE2\x84\xB5", 'Alpha;' => "\xCE\x91", 'alpha;' => "\xCE\xB1", 'AMP' => "\x26", 'amp' => "\x26", 'AMP;' => "\x26", 'amp;' => "\x26", 'and;' => "\xE2\x88\xA7", 'ang;' => "\xE2\x88\xA0", 'apos;' => "\x27", 'Aring' => "\xC3\x85", 'aring' => "\xC3\xA5", 'Aring;' => "\xC3\x85", 'aring;' => "\xC3\xA5", 'asymp;' => "\xE2\x89\x88", 'Atilde' => "\xC3\x83", 'atilde' => "\xC3\xA3", 'Atilde;' => "\xC3\x83", 'atilde;' => "\xC3\xA3", 'Auml' => "\xC3\x84", 'auml' => "\xC3\xA4", 'Auml;' => "\xC3\x84", 'auml;' => "\xC3\xA4", 'bdquo;' => "\xE2\x80\x9E", 'Beta;' => "\xCE\x92", 'beta;' => "\xCE\xB2", 'brvbar' => "\xC2\xA6", 'brvbar;' => "\xC2\xA6", 'bull;' => "\xE2\x80\xA2", 'cap;' => "\xE2\x88\xA9", 'Ccedil' => "\xC3\x87", 'ccedil' => "\xC3\xA7", 'Ccedil;' => "\xC3\x87", 'ccedil;' => "\xC3\xA7", 'cedil' => "\xC2\xB8", 'cedil;' => "\xC2\xB8", 'cent' => "\xC2\xA2", 'cent;' => "\xC2\xA2", 'Chi;' => "\xCE\xA7", 'chi;' => "\xCF\x87", 'circ;' => "\xCB\x86", 'clubs;' => "\xE2\x99\xA3", 'cong;' => "\xE2\x89\x85", 'COPY' => "\xC2\xA9", 'copy' => "\xC2\xA9", 'COPY;' => "\xC2\xA9", 'copy;' => "\xC2\xA9", 'crarr;' => "\xE2\x86\xB5", 'cup;' => "\xE2\x88\xAA", 'curren' => "\xC2\xA4", 'curren;' => "\xC2\xA4", 'Dagger;' => "\xE2\x80\xA1", 'dagger;' => "\xE2\x80\xA0", 'dArr;' => "\xE2\x87\x93", 'darr;' => "\xE2\x86\x93", 'deg' => "\xC2\xB0", 'deg;' => "\xC2\xB0", 'Delta;' => "\xCE\x94", 'delta;' => "\xCE\xB4", 'diams;' => "\xE2\x99\xA6", 'divide' => "\xC3\xB7", 'divide;' => "\xC3\xB7", 'Eacute' => "\xC3\x89", 'eacute' => "\xC3\xA9", 'Eacute;' => "\xC3\x89", 'eacute;' => "\xC3\xA9", 'Ecirc' => "\xC3\x8A", 'ecirc' => "\xC3\xAA", 'Ecirc;' => "\xC3\x8A", 'ecirc;' => "\xC3\xAA", 'Egrave' => "\xC3\x88", 'egrave' => "\xC3\xA8", 'Egrave;' => "\xC3\x88", 'egrave;' => "\xC3\xA8", 'empty;' => "\xE2\x88\x85", 'emsp;' => "\xE2\x80\x83", 'ensp;' => "\xE2\x80\x82", 'Epsilon;' => "\xCE\x95", 'epsilon;' => "\xCE\xB5", 'equiv;' => "\xE2\x89\xA1", 'Eta;' => "\xCE\x97", 'eta;' => "\xCE\xB7", 'ETH' => "\xC3\x90", 'eth' => "\xC3\xB0", 'ETH;' => "\xC3\x90", 'eth;' => "\xC3\xB0", 'Euml' => "\xC3\x8B", 'euml' => "\xC3\xAB", 'Euml;' => "\xC3\x8B", 'euml;' => "\xC3\xAB", 'euro;' => "\xE2\x82\xAC", 'exist;' => "\xE2\x88\x83", 'fnof;' => "\xC6\x92", 'forall;' => "\xE2\x88\x80", 'frac12' => "\xC2\xBD", 'frac12;' => "\xC2\xBD", 'frac14' => "\xC2\xBC", 'frac14;' => "\xC2\xBC", 'frac34' => "\xC2\xBE", 'frac34;' => "\xC2\xBE", 'frasl;' => "\xE2\x81\x84", 'Gamma;' => "\xCE\x93", 'gamma;' => "\xCE\xB3", 'ge;' => "\xE2\x89\xA5", 'GT' => "\x3E", 'gt' => "\x3E", 'GT;' => "\x3E", 'gt;' => "\x3E", 'hArr;' => "\xE2\x87\x94", 'harr;' => "\xE2\x86\x94", 'hearts;' => "\xE2\x99\xA5", 'hellip;' => "\xE2\x80\xA6", 'Iacute' => "\xC3\x8D", 'iacute' => "\xC3\xAD", 'Iacute;' => "\xC3\x8D", 'iacute;' => "\xC3\xAD", 'Icirc' => "\xC3\x8E", 'icirc' => "\xC3\xAE", 'Icirc;' => "\xC3\x8E", 'icirc;' => "\xC3\xAE", 'iexcl' => "\xC2\xA1", 'iexcl;' => "\xC2\xA1", 'Igrave' => "\xC3\x8C", 'igrave' => "\xC3\xAC", 'Igrave;' => "\xC3\x8C", 'igrave;' => "\xC3\xAC", 'image;' => "\xE2\x84\x91", 'infin;' => "\xE2\x88\x9E", 'int;' => "\xE2\x88\xAB", 'Iota;' => "\xCE\x99", 'iota;' => "\xCE\xB9", 'iquest' => "\xC2\xBF", 'iquest;' => "\xC2\xBF", 'isin;' => "\xE2\x88\x88", 'Iuml' => "\xC3\x8F", 'iuml' => "\xC3\xAF", 'Iuml;' => "\xC3\x8F", 'iuml;' => "\xC3\xAF", 'Kappa;' => "\xCE\x9A", 'kappa;' => "\xCE\xBA", 'Lambda;' => "\xCE\x9B", 'lambda;' => "\xCE\xBB", 'lang;' => "\xE3\x80\x88", 'laquo' => "\xC2\xAB", 'laquo;' => "\xC2\xAB", 'lArr;' => "\xE2\x87\x90", 'larr;' => "\xE2\x86\x90", 'lceil;' => "\xE2\x8C\x88", 'ldquo;' => "\xE2\x80\x9C", 'le;' => "\xE2\x89\xA4", 'lfloor;' => "\xE2\x8C\x8A", 'lowast;' => "\xE2\x88\x97", 'loz;' => "\xE2\x97\x8A", 'lrm;' => "\xE2\x80\x8E", 'lsaquo;' => "\xE2\x80\xB9", 'lsquo;' => "\xE2\x80\x98", 'LT' => "\x3C", 'lt' => "\x3C", 'LT;' => "\x3C", 'lt;' => "\x3C", 'macr' => "\xC2\xAF", 'macr;' => "\xC2\xAF", 'mdash;' => "\xE2\x80\x94", 'micro' => "\xC2\xB5", 'micro;' => "\xC2\xB5", 'middot' => "\xC2\xB7", 'middot;' => "\xC2\xB7", 'minus;' => "\xE2\x88\x92", 'Mu;' => "\xCE\x9C", 'mu;' => "\xCE\xBC", 'nabla;' => "\xE2\x88\x87", 'nbsp' => "\xC2\xA0", 'nbsp;' => "\xC2\xA0", 'ndash;' => "\xE2\x80\x93", 'ne;' => "\xE2\x89\xA0", 'ni;' => "\xE2\x88\x8B", 'not' => "\xC2\xAC", 'not;' => "\xC2\xAC", 'notin;' => "\xE2\x88\x89", 'nsub;' => "\xE2\x8A\x84", 'Ntilde' => "\xC3\x91", 'ntilde' => "\xC3\xB1", 'Ntilde;' => "\xC3\x91", 'ntilde;' => "\xC3\xB1", 'Nu;' => "\xCE\x9D", 'nu;' => "\xCE\xBD", 'Oacute' => "\xC3\x93", 'oacute' => "\xC3\xB3", 'Oacute;' => "\xC3\x93", 'oacute;' => "\xC3\xB3", 'Ocirc' => "\xC3\x94", 'ocirc' => "\xC3\xB4", 'Ocirc;' => "\xC3\x94", 'ocirc;' => "\xC3\xB4", 'OElig;' => "\xC5\x92", 'oelig;' => "\xC5\x93", 'Ograve' => "\xC3\x92", 'ograve' => "\xC3\xB2", 'Ograve;' => "\xC3\x92", 'ograve;' => "\xC3\xB2", 'oline;' => "\xE2\x80\xBE", 'Omega;' => "\xCE\xA9", 'omega;' => "\xCF\x89", 'Omicron;' => "\xCE\x9F", 'omicron;' => "\xCE\xBF", 'oplus;' => "\xE2\x8A\x95", 'or;' => "\xE2\x88\xA8", 'ordf' => "\xC2\xAA", 'ordf;' => "\xC2\xAA", 'ordm' => "\xC2\xBA", 'ordm;' => "\xC2\xBA", 'Oslash' => "\xC3\x98", 'oslash' => "\xC3\xB8", 'Oslash;' => "\xC3\x98", 'oslash;' => "\xC3\xB8", 'Otilde' => "\xC3\x95", 'otilde' => "\xC3\xB5", 'Otilde;' => "\xC3\x95", 'otilde;' => "\xC3\xB5", 'otimes;' => "\xE2\x8A\x97", 'Ouml' => "\xC3\x96", 'ouml' => "\xC3\xB6", 'Ouml;' => "\xC3\x96", 'ouml;' => "\xC3\xB6", 'para' => "\xC2\xB6", 'para;' => "\xC2\xB6", 'part;' => "\xE2\x88\x82", 'permil;' => "\xE2\x80\xB0", 'perp;' => "\xE2\x8A\xA5", 'Phi;' => "\xCE\xA6", 'phi;' => "\xCF\x86", 'Pi;' => "\xCE\xA0", 'pi;' => "\xCF\x80", 'piv;' => "\xCF\x96", 'plusmn' => "\xC2\xB1", 'plusmn;' => "\xC2\xB1", 'pound' => "\xC2\xA3", 'pound;' => "\xC2\xA3", 'Prime;' => "\xE2\x80\xB3", 'prime;' => "\xE2\x80\xB2", 'prod;' => "\xE2\x88\x8F", 'prop;' => "\xE2\x88\x9D", 'Psi;' => "\xCE\xA8", 'psi;' => "\xCF\x88", 'QUOT' => "\x22", 'quot' => "\x22", 'QUOT;' => "\x22", 'quot;' => "\x22", 'radic;' => "\xE2\x88\x9A", 'rang;' => "\xE3\x80\x89", 'raquo' => "\xC2\xBB", 'raquo;' => "\xC2\xBB", 'rArr;' => "\xE2\x87\x92", 'rarr;' => "\xE2\x86\x92", 'rceil;' => "\xE2\x8C\x89", 'rdquo;' => "\xE2\x80\x9D", 'real;' => "\xE2\x84\x9C", 'REG' => "\xC2\xAE", 'reg' => "\xC2\xAE", 'REG;' => "\xC2\xAE", 'reg;' => "\xC2\xAE", 'rfloor;' => "\xE2\x8C\x8B", 'Rho;' => "\xCE\xA1", 'rho;' => "\xCF\x81", 'rlm;' => "\xE2\x80\x8F", 'rsaquo;' => "\xE2\x80\xBA", 'rsquo;' => "\xE2\x80\x99", 'sbquo;' => "\xE2\x80\x9A", 'Scaron;' => "\xC5\xA0", 'scaron;' => "\xC5\xA1", 'sdot;' => "\xE2\x8B\x85", 'sect' => "\xC2\xA7", 'sect;' => "\xC2\xA7", 'shy' => "\xC2\xAD", 'shy;' => "\xC2\xAD", 'Sigma;' => "\xCE\xA3", 'sigma;' => "\xCF\x83", 'sigmaf;' => "\xCF\x82", 'sim;' => "\xE2\x88\xBC", 'spades;' => "\xE2\x99\xA0", 'sub;' => "\xE2\x8A\x82", 'sube;' => "\xE2\x8A\x86", 'sum;' => "\xE2\x88\x91", 'sup;' => "\xE2\x8A\x83", 'sup1' => "\xC2\xB9", 'sup1;' => "\xC2\xB9", 'sup2' => "\xC2\xB2", 'sup2;' => "\xC2\xB2", 'sup3' => "\xC2\xB3", 'sup3;' => "\xC2\xB3", 'supe;' => "\xE2\x8A\x87", 'szlig' => "\xC3\x9F", 'szlig;' => "\xC3\x9F", 'Tau;' => "\xCE\xA4", 'tau;' => "\xCF\x84", 'there4;' => "\xE2\x88\xB4", 'Theta;' => "\xCE\x98", 'theta;' => "\xCE\xB8", 'thetasym;' => "\xCF\x91", 'thinsp;' => "\xE2\x80\x89", 'THORN' => "\xC3\x9E", 'thorn' => "\xC3\xBE", 'THORN;' => "\xC3\x9E", 'thorn;' => "\xC3\xBE", 'tilde;' => "\xCB\x9C", 'times' => "\xC3\x97", 'times;' => "\xC3\x97", 'TRADE;' => "\xE2\x84\xA2", 'trade;' => "\xE2\x84\xA2", 'Uacute' => "\xC3\x9A", 'uacute' => "\xC3\xBA", 'Uacute;' => "\xC3\x9A", 'uacute;' => "\xC3\xBA", 'uArr;' => "\xE2\x87\x91", 'uarr;' => "\xE2\x86\x91", 'Ucirc' => "\xC3\x9B", 'ucirc' => "\xC3\xBB", 'Ucirc;' => "\xC3\x9B", 'ucirc;' => "\xC3\xBB", 'Ugrave' => "\xC3\x99", 'ugrave' => "\xC3\xB9", 'Ugrave;' => "\xC3\x99", 'ugrave;' => "\xC3\xB9", 'uml' => "\xC2\xA8", 'uml;' => "\xC2\xA8", 'upsih;' => "\xCF\x92", 'Upsilon;' => "\xCE\xA5", 'upsilon;' => "\xCF\x85", 'Uuml' => "\xC3\x9C", 'uuml' => "\xC3\xBC", 'Uuml;' => "\xC3\x9C", 'uuml;' => "\xC3\xBC", 'weierp;' => "\xE2\x84\x98", 'Xi;' => "\xCE\x9E", 'xi;' => "\xCE\xBE", 'Yacute' => "\xC3\x9D", 'yacute' => "\xC3\xBD", 'Yacute;' => "\xC3\x9D", 'yacute;' => "\xC3\xBD", 'yen' => "\xC2\xA5", 'yen;' => "\xC2\xA5", 'yuml' => "\xC3\xBF", 'Yuml;' => "\xC5\xB8", 'yuml;' => "\xC3\xBF", 'Zeta;' => "\xCE\x96", 'zeta;' => "\xCE\xB6", 'zwj;' => "\xE2\x80\x8D", 'zwnj;' => "\xE2\x80\x8C");				for ($i = 0, $match = null; $i < 9 && $this->consume() !== false; $i++)				{					$consumed = substr($this->consumed, 1);					if (isset($entities[$consumed]))					{						$match = $consumed;					}				}				if ($match !== null)				{ 					$this->data = substr_replace($this->data, $entities[$match], $this->position - strlen($consumed) - 1, strlen($match) + 1);					$this->position += strlen($entities[$match]) - strlen($consumed) - 1;				}				break;		}	}}/** * IRI parser/serialiser * * @package SimplePie */class SimplePie_IRI{	/**	 * Scheme	 *	 * @access private	 * @var string	 */	var $scheme;	/**	 * User Information	 *	 * @access private	 * @var string	 */	var $userinfo;	/**	 * Host	 *	 * @access private	 * @var string	 */	var $host;	/**	 * Port	 *	 * @access private	 * @var string	 */	var $port;	/**	 * Path	 *	 * @access private	 * @var string	 */	var $path;	/**	 * Query	 *	 * @access private	 * @var string	 */	var $query;	/**	 * Fragment	 *	 * @access private	 * @var string	 */	var $fragment;	/**	 * Whether the object represents a valid IRI	 *	 * @access private	 * @var array	 */	var $valid = array();	/**	 * Return the entire IRI when you try and read the object as a string	 *	 * @access public	 * @return string	 */	function __toString()	{		return $this->get_iri();	}	/**	 * Create a new IRI object, from a specified string	 *	 * @access public	 * @param string $iri	 * @return SimplePie_IRI	 */	function SimplePie_IRI($iri)	{		$iri = (string) $iri;		if ($iri !== '')		{			$parsed = $this->parse_iri($iri);			$this->set_scheme($parsed['scheme']);			$this->set_authority($parsed['authority']);			$this->set_path($parsed['path']);			$this->set_query($parsed['query']);			$this->set_fragment($parsed['fragment']);		}	}	/**	 * Create a new IRI object by resolving a relative IRI	 *	 * @static	 * @access public	 * @param SimplePie_IRI $base Base IRI	 * @param string $relative Relative IRI	 * @return SimplePie_IRI	 */	function absolutize($base, $relative)	{		$relative = (string) $relative;		if ($relative !== '')		{			$relative = new SimplePie_IRI($relative);			if ($relative->get_scheme() !== null)			{				$target = $relative;			}			elseif ($base->get_iri() !== null)			{				if ($relative->get_authority() !== null)				{					$target = $relative;					$target->set_scheme($base->get_scheme());				}				else				{					$target = new SimplePie_IRI('');					$target->set_scheme($base->get_scheme());					$target->set_userinfo($base->get_userinfo());					$target->set_host($base->get_host());					$target->set_port($base->get_port());					if ($relative->get_path() !== null)					{						if (strpos($relative->get_path(), '/') === 0)						{							$target->set_path($relative->get_path());						}						elseif (($base->get_userinfo() !== null || $base->get_host() !== null || $base->get_port() !== null) && $base->get_path() === null)						{							$target->set_path('/' . $relative->get_path());						}						elseif (($last_segment = strrpos($base->get_path(), '/')) !== false)						{							$target->set_path(substr($base->get_path(), 0, $last_segment + 1) . $relative->get_path());						}						else						{							$target->set_path($relative->get_path());						}						$target->set_query($relative->get_query());					}					else					{						$target->set_path($base->get_path());						if ($relative->get_query() !== null)						{							$target->set_query($relative->get_query());						}						elseif ($base->get_query() !== null)						{							$target->set_query($base->get_query());						}					}				}				$target->set_fragment($relative->get_fragment());			}			else			{				// No base URL, just return the relative URL				$target = $relative;			}		}		else		{			$target = $base;		}		return $target;	}	/**	 * Parse an IRI into scheme/authority/path/query/fragment segments	 *	 * @access private	 * @param string $iri	 * @return array	 */	function parse_iri($iri)	{		preg_match('/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/', $iri, $match);		for ($i = count($match); $i <= 9; $i++)		{			$match[$i] = '';		}		return array('scheme' => $match[2], 'authority' => $match[4], 'path' => $match[5], 'query' => $match[7], 'fragment' => $match[9]);	}	/**	 * Remove dot segments from a path	 *	 * @access private	 * @param string $input	 * @return string	 */	function remove_dot_segments($input)	{		$output = '';		while (strpos($input, './') !== false || strpos($input, '/.') !== false || $input === '.' || $input === '..')		{			// A: If the input buffer begins with a prefix of "../" or "./", then remove that prefix from the input buffer; otherwise,			if (strpos($input, '../') === 0)			{				$input = substr($input, 3);			}			elseif (strpos($input, './') === 0)			{				$input = substr($input, 2);			}			// B: if the input buffer begins with a prefix of "/./" or "/.", where "." is a complete path segment, then replace that prefix with "/" in the input buffer; otherwise,			elseif (strpos($input, '/./') === 0)			{				$input = substr_replace($input, '/', 0, 3);			}			elseif ($input === '/.')			{				$input = '/';			}			// C: if the input buffer begins with a prefix of "/../" or "/..", where ".." is a complete path segment, then replace that prefix with "/" in the input buffer and remove the last segment and its preceding "/" (if any) from the output buffer; otherwise,			elseif (strpos($input, '/../') === 0)			{				$input = substr_replace($input, '/', 0, 4);				$output = substr_replace($output, '', strrpos($output, '/'));			}			elseif ($input === '/..')			{				$input = '/';				$output = substr_replace($output, '', strrpos($output, '/'));			}			// D: if the input buffer consists only of "." or "..", then remove that from the input buffer; otherwise,			elseif ($input === '.' || $input === '..')			{				$input = '';			}			// E: move the first path segment in the input buffer to the end of the output buffer, including the initial "/" character (if any) and any subsequent characters up to, but not including, the next "/" character or the end of the input buffer			elseif (($pos = strpos($input, '/', 1)) !== false)			{				$output .= substr($input, 0, $pos);				$input = substr_replace($input, '', 0, $pos);			}			else			{				$output .= $input;				$input = '';			}		}		return $output . $input;	}	/**	 * Replace invalid character with percent encoding	 *	 * @access private	 * @param string $string Input string	 * @param string $valid_chars Valid characters	 * @param int $case Normalise case	 * @return string	 */	function replace_invalid_with_pct_encoding($string, $valid_chars, $case = SIMPLEPIE_SAME_CASE)	{		// Normalise case		if ($case & SIMPLEPIE_LOWERCASE)		{			$string = strtolower($string);		}		elseif ($case & SIMPLEPIE_UPPERCASE)		{			$string = strtoupper($string);		}		// Store position and string length (to avoid constantly recalculating this)		$position = 0;		$strlen = strlen($string);		// Loop as long as we have invalid characters, advancing the position to the next invalid character		while (($position += strspn($string, $valid_chars, $position)) < $strlen)		{			// If we have a % character			if ($string[$position] === '%')			{				// If we have a pct-encoded section				if ($position + 2 < $strlen && strspn($string, '0123456789ABCDEFabcdef', $position + 1, 2) === 2)				{					// Get the the represented character					$chr = chr(hexdec(substr($string, $position + 1, 2)));					// If the character is valid, replace the pct-encoded with the actual character while normalising case					if (strpos($valid_chars, $chr) !== false)					{						if ($case & SIMPLEPIE_LOWERCASE)						{							$chr = strtolower($chr);						}						elseif ($case & SIMPLEPIE_UPPERCASE)						{							$chr = strtoupper($chr);						}						$string = substr_replace($string, $chr, $position, 3);						$strlen -= 2;						$position++;					}					// Otherwise just normalise the pct-encoded to uppercase					else					{						$string = substr_replace($string, strtoupper(substr($string, $position + 1, 2)), $position + 1, 2);						$position += 3;					}				}				// If we don't have a pct-encoded section, just replace the % with its own esccaped form				else				{					$string = substr_replace($string, '%25', $position, 1);					$strlen += 2;					$position += 3;				}			}			// If we have an invalid character, change into its pct-encoded form			else			{				$replacement = sprintf("%%%02X", ord($string[$position]));				$string = str_replace($string[$position], $replacement, $string);				$strlen = strlen($string);			}		}		return $string;	}	/**	 * Check if the object represents a valid IRI	 *	 * @access public	 * @return bool	 */	function is_valid()	{		return array_sum($this->valid) === count($this->valid);	}	/**	 * Set the scheme. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $scheme	 * @return bool	 */	function set_scheme($scheme)	{		if ($scheme === null || $scheme === '')		{			$this->scheme = null;		}		else		{			$len = strlen($scheme);			switch (true)			{				case $len > 1:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-.', 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}				case $len > 0:					if (!strspn($scheme, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 0, 1))					{						$this->scheme = null;						$this->valid[__FUNCTION__] = false;						return false;					}			}			$this->scheme = strtolower($scheme);		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the authority. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $authority	 * @return bool	 */	function set_authority($authority)	{		if (($userinfo_end = strrpos($authority, '@')) !== false)		{			$userinfo = substr($authority, 0, $userinfo_end);			$authority = substr($authority, $userinfo_end + 1);		}		else		{			$userinfo = null;		}		if (($port_start = strpos($authority, ':')) !== false)		{			$port = substr($authority, $port_start + 1);			$authority = substr($authority, 0, $port_start);		}		else		{			$port = null;		}		return $this->set_userinfo($userinfo) && $this->set_host($authority) && $this->set_port($port);	}	/**	 * Set the userinfo.	 *	 * @access public	 * @param string $userinfo	 * @return bool	 */	function set_userinfo($userinfo)	{		if ($userinfo === null || $userinfo === '')		{			$this->userinfo = null;		}		else		{			$this->userinfo = $this->replace_invalid_with_pct_encoding($userinfo, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the host. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $host	 * @return bool	 */	function set_host($host)	{		if ($host === null || $host === '')		{			$this->host = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif ($host[0] === '[' && substr($host, -1) === ']')		{			if (Net_IPv6::checkIPv6(substr($host, 1, -1)))			{				$this->host = $host;				$this->valid[__FUNCTION__] = true;				return true;			}			else			{				$this->host = null;				$this->valid[__FUNCTION__] = false;				return false;			}		}		else		{			$this->host = $this->replace_invalid_with_pct_encoding($host, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=', SIMPLEPIE_LOWERCASE);			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the port. Returns true on success, false on failure (if there are	 * any invalid characters).	 *	 * @access public	 * @param string $port	 * @return bool	 */	function set_port($port)	{		if ($port === null || $port === '')		{			$this->port = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (strspn($port, '0123456789') === strlen($port))		{			$this->port = (int) $port;			$this->valid[__FUNCTION__] = true;			return true;		}		else		{			$this->port = null;			$this->valid[__FUNCTION__] = false;			return false;		}	}	/**	 * Set the path.	 *	 * @access public	 * @param string $path	 * @return bool	 */	function set_path($path)	{		if ($path === null || $path === '')		{			$this->path = null;			$this->valid[__FUNCTION__] = true;			return true;		}		elseif (substr($path, 0, 2) === '//' && $this->userinfo === null && $this->host === null && $this->port === null)		{			$this->path = null;			$this->valid[__FUNCTION__] = false;			return false;		}		else		{			$this->path = $this->replace_invalid_with_pct_encoding($path, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=@/');			if ($this->scheme !== null)			{				$this->path = $this->remove_dot_segments($this->path);			}			$this->valid[__FUNCTION__] = true;			return true;		}	}	/**	 * Set the query.	 *	 * @access public	 * @param string $query	 * @return bool	 */	function set_query($query)	{		if ($query === null || $query === '')		{			$this->query = null;		}		else		{			$this->query = $this->replace_invalid_with_pct_encoding($query, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Set the fragment.	 *	 * @access public	 * @param string $fragment	 * @return bool	 */	function set_fragment($fragment)	{		if ($fragment === null || $fragment === '')		{			$this->fragment = null;		}		else		{			$this->fragment = $this->replace_invalid_with_pct_encoding($fragment, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~!$&\'()*+,;=:@/?');		}		$this->valid[__FUNCTION__] = true;		return true;	}	/**	 * Get the complete IRI	 *	 * @access public	 * @return string	 */	function get_iri()	{		$iri = '';		if ($this->scheme !== null)		{			$iri .= $this->scheme . ':';		}		if (($authority = $this->get_authority()) !== null)		{			$iri .= '//' . $authority;		}		if ($this->path !== null)		{			$iri .= $this->path;		}		if ($this->query !== null)		{			$iri .= '?' . $this->query;		}		if ($this->fragment !== null)		{			$iri .= '#' . $this->fragment;		}		if ($iri !== '')		{			return $iri;		}		else		{			return null;		}	}	/**	 * Get the scheme	 *	 * @access public	 * @return string	 */	function get_scheme()	{		return $this->scheme;	}	/**	 * Get the complete authority	 *	 * @access public	 * @return string	 */	function get_authority()	{		$authority = '';		if ($this->userinfo !== null)		{			$authority .= $this->userinfo . '@';		}		if ($this->host !== null)		{			$authority .= $this->host;		}		if ($this->port !== null)		{			$authority .= ':' . $this->port;		}		if ($authority !== '')		{			return $authority;		}		else		{			return null;		}	}	/**	 * Get the user information	 *	 * @access public	 * @return string	 */	function get_userinfo()	{		return $this->userinfo;	}	/**	 * Get the host	 *	 * @access public	 * @return string	 */	function get_host()	{		return $this->host;	}	/**	 * Get the port	 *	 * @access public	 * @return string	 */	function get_port()	{		return $this->port;	}	/**	 * Get the path	 *	 * @access public	 * @return string	 */	function get_path()	{		return $this->path;	}	/**	 * Get the query	 *	 * @access public	 * @return string	 */	function get_query()	{		return $this->query;	}	/**	 * Get the fragment	 *	 * @access public	 * @return string	 */	function get_fragment()	{		return $this->fragment;	}}/** * Class to validate and to work with IPv6 addresses. * * @package SimplePie * @copyright 2003-2005 The PHP Group * @license http://www.opensource.org/licenses/bsd-license.php * @link http://pear.php.net/package/Net_IPv6 * @author Alexander Merz <alexander.merz@web.de> * @author elfrink at introweb dot nl * @author Josh Peck <jmp at joshpeck dot org> * @author Geoffrey Sneddon <geoffers@gmail.com> */class SimplePie_Net_IPv6{	/**	 * Removes a possible existing netmask specification of an IP address.	 *	 * @param string $ip the (compressed) IP as Hex representation	 * @return string the IP the without netmask	 * @since 1.1.0	 * @access public	 * @static	 */	function removeNetmaskSpec($ip)	{		if (strpos($ip, '/') !== false)		{			list($addr, $nm) = explode('/', $ip);		}		else		{			$addr = $ip;		}		return $addr;	}	/**	 * Uncompresses an IPv6 address	 *	 * RFC 2373 allows you to compress zeros in an address to '::'. This	 * function expects an valid IPv6 address and expands the '::' to	 * the required zeros.	 *	 * Example:	 FF01::101	->	FF01:0:0:0:0:0:0:101	 *			 ::1		->	0:0:0:0:0:0:0:1	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return string the uncompressed IPv6-address (hex format)	 */	function Uncompress($ip)	{		$uip = SimplePie_Net_IPv6::removeNetmaskSpec($ip);		$c1 = -1;		$c2 = -1;		if (strpos($ip, '::') !== false)		{			list($ip1, $ip2) = explode('::', $ip);			if ($ip1 === '')			{				$c1 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip1, ':')) > 0)				{					$c1 = $pos;				}				else				{					$c1 = 0;				}			}			if ($ip2 === '')			{				$c2 = -1;			}			else			{				$pos = 0;				if (($pos = substr_count($ip2, ':')) > 0)				{					$c2 = $pos;				}				else				{					$c2 = 0;				}			}			if (strstr($ip2, '.'))			{				$c2++;			}			// ::			if ($c1 === -1 && $c2 === -1)			{				$uip = '0:0:0:0:0:0:0:0';			}			// ::xxx			else if ($c1 === -1)			{				$fill = str_repeat('0:', 7 - $c2);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::			else if ($c2 === -1)			{				$fill = str_repeat(':0', 7 - $c1);				$uip =	str_replace('::', $fill, $uip);			}			// xxx::xxx			else			{				$fill = str_repeat(':0:', 6 - $c2 - $c1);				$uip =	str_replace('::', $fill, $uip);				$uip =	str_replace('::', ':', $uip);			}		}		return $uip;	}	/**	 * Splits an IPv6 address into the IPv6 and a possible IPv4 part	 *	 * RFC 2373 allows you to note the last two parts of an IPv6 address as	 * an IPv4 compatible address	 *	 * Example:	 0:0:0:0:0:0:13.1.68.3	 *			 0:0:0:0:0:FFFF:129.144.52.38	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address (hex format)	 * @return array [0] contains the IPv6 part, [1] the IPv4 part (hex format)	 */	function SplitV64($ip)	{		$ip = SimplePie_Net_IPv6::Uncompress($ip);		if (strstr($ip, '.'))		{			$pos = strrpos($ip, ':');			$ip[$pos] = '_';			$ipPart = explode('_', $ip);			return $ipPart;		}		else		{			return array($ip, '');		}	}	/**	 * Checks an IPv6 address	 *	 * Checks if the given IP is IPv6-compatible	 *	 * @access public	 * @static	 * @param string $ip a valid IPv6-address	 * @return bool true if $ip is an IPv6 address	 */	function checkIPv6($ip)	{		$ipPart = SimplePie_Net_IPv6::SplitV64($ip);		$count = 0;		if (!empty($ipPart[0]))		{			$ipv6 = explode(':', $ipPart[0]);			for ($i = 0; $i < count($ipv6); $i++)			{				$dec = hexdec($ipv6[$i]);				$hex = strtoupper(preg_replace('/^[0]{1,3}(.*[0-9a-fA-F])$/', '\\1', $ipv6[$i]));				if ($ipv6[$i] >= 0 && $dec <= 65535 && $hex === strtoupper(dechex($dec)))				{					$count++;				}			}			if ($count === 8)			{				return true;			}			elseif ($count === 6 && !empty($ipPart[1]))			{				$ipv4 = explode('.', $ipPart[1]);				$count = 0;				foreach ($ipv4 as $ipv4_part)				{					if ($ipv4_part >= 0 && $ipv4_part <= 255 && preg_match('/^\d{1,3}$/', $ipv4_part))					{						$count++;					}				}				if ($count === 4)				{					return true;				}			}			else			{				return false;			}		}		else		{			return false;		}	}}/** * Date Parser * * @package SimplePie */class SimplePie_Parse_Date{	/**	 * Input data	 *	 * @access protected	 * @var string	 */	var $date;	/**	 * List of days, calendar day name => ordinal day number in the week	 *	 * @access protected	 * @var array	 */	var $day = array(		// English		'mon' => 1,		'monday' => 1,		'tue' => 2,		'tuesday' => 2,		'wed' => 3,		'wednesday' => 3,		'thu' => 4,		'thursday' => 4,		'fri' => 5,		'friday' => 5,		'sat' => 6,		'saturday' => 6,		'sun' => 7,		'sunday' => 7,		// Dutch		'maandag' => 1,		'dinsdag' => 2,		'woensdag' => 3,		'donderdag' => 4,		'vrijdag' => 5,		'zaterdag' => 6,		'zondag' => 7,		// French		'lundi' => 1,		'mardi' => 2,		'mercredi' => 3,		'jeudi' => 4,		'vendredi' => 5,		'samedi' => 6,		'dimanche' => 7,		// German		'montag' => 1,		'dienstag' => 2,		'mittwoch' => 3,		'donnerstag' => 4,		'freitag' => 5,		'samstag' => 6,		'sonnabend' => 6,		'sonntag' => 7,		// Italian		'luned' => 1,		'marted' => 2,		'mercoled' => 3,		'gioved' => 4,		'venerd' => 5,		'sabato' => 6,		'domenica' => 7,		// Spanish		'lunes' => 1,		'martes' => 2,		'mircoles' => 3,		'jueves' => 4,		'viernes' => 5,		'sbado' => 6,		'domingo' => 7,		// Finnish		'maanantai' => 1,		'tiistai' => 2,		'keskiviikko' => 3,		'torstai' => 4,		'perjantai' => 5,		'lauantai' => 6,		'sunnuntai' => 7,		// Hungarian		'htf' => 1,		'kedd' => 2,		'szerda' => 3,		'cstrtok' => 4,		'pntek' => 5,		'szombat' => 6,		'vasrnap' => 7,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 4,		'' => 5,		'' => 6,		'' => 7,	);	/**	 * List of months, calendar month name => calendar month number	 *	 * @access protected	 * @var array	 */	var $month = array(		// English		'jan' => 1,		'january' => 1,		'feb' => 2,		'february' => 2,		'mar' => 3,		'march' => 3,		'apr' => 4,		'april' => 4,		'may' => 5,		// No long form of May		'jun' => 6,		'june' => 6,		'jul' => 7,		'july' => 7,		'aug' => 8,		'august' => 8,		'sep' => 9,		'september' => 8,		'oct' => 10,		'october' => 10,		'nov' => 11,		'november' => 11,		'dec' => 12,		'december' => 12,		// Dutch		'januari' => 1,		'februari' => 2,		'maart' => 3,		'april' => 4,		'mei' => 5,		'juni' => 6,		'juli' => 7,		'augustus' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'december' => 12,		// French		'janvier' => 1,		'fvrier' => 2,		'mars' => 3,		'avril' => 4,		'mai' => 5,		'juin' => 6,		'juillet' => 7,		'aot' => 8,		'septembre' => 9,		'octobre' => 10,		'novembre' => 11,		'dcembre' => 12,		// German		'januar' => 1,		'februar' => 2,		'mrz' => 3,		'april' => 4,		'mai' => 5,		'juni' => 6,		'juli' => 7,		'august' => 8,		'september' => 9,		'oktober' => 10,		'november' => 11,		'dezember' => 12,		// Italian		'gennaio' => 1,		'febbraio' => 2,		'marzo' => 3,		'aprile' => 4,		'maggio' => 5,		'giugno' => 6,		'luglio' => 7,		'agosto' => 8,		'settembre' => 9,		'ottobre' => 10,		'novembre' => 11,		'dicembre' => 12,		// Spanish		'enero' => 1,		'febrero' => 2,		'marzo' => 3,		'abril' => 4,		'mayo' => 5,		'junio' => 6,		'julio' => 7,		'agosto' => 8,		'septiembre' => 9,		'setiembre' => 9,		'octubre' => 10,		'noviembre' => 11,		'diciembre' => 12,		// Finnish		'tammikuu' => 1,		'helmikuu' => 2,		'maaliskuu' => 3,		'huhtikuu' => 4,		'toukokuu' => 5,		'keskuu' => 6,		'heinkuu' => 7,		'elokuu' => 8,		'suuskuu' => 9,		'lokakuu' => 10,		'marras' => 11,		'joulukuu' => 12,		// Hungarian		'janur' => 1,		'februr' => 2,		'mrcius' => 3,		'prilis' => 4,		'mjus' => 5,		'jnius' => 6,		'jlius' => 7,		'augusztus' => 8,		'szeptember' => 9,		'oktber' => 10,		'november' => 11,		'december' => 12,		// Greek		'' => 1,		'' => 2,		'' => 3,		'' => 3,		'' => 4,		'' => 5,		'' => 5,		'' => 5,		'' => 6,		'' => 6,		'' => 7,		'' => 7,		'' => 8,		'' => 8,		'' => 9,		'' => 10,		'' => 11,		'' => 12,	);	/**	 * List of timezones, abbreviation => offset from UTC	 *	 * @access protected	 * @var array	 */	var $timezone = array(		'ACDT' => 37800,		'ACIT' => 28800,		'ACST' => 34200,		'ACT' => -18000,		'ACWDT' => 35100,		'ACWST' => 31500,		'AEDT' => 39600,		'AEST' => 36000,		'AFT' => 16200,		'AKDT' => -28800,		'AKST' => -32400,		'AMDT' => 18000,		'AMT' => -14400,		'ANAST' => 46800,		'ANAT' => 43200,		'ART' => -10800,		'AZOST' => -3600,		'AZST' => 18000,		'AZT' => 14400,		'BIOT' => 21600,		'BIT' => -43200,		'BOT' => -14400,		'BRST' => -7200,		'BRT' => -10800,		'BST' => 3600,		'BTT' => 21600,		'CAST' => 18000,		'CAT' => 7200,		'CCT' => 23400,		'CDT' => -18000,		'CEDT' => 7200,		'CET' => 3600,		'CGST' => -7200,		'CGT' => -10800,		'CHADT' => 49500,		'CHAST' => 45900,		'CIST' => -28800,		'CKT' => -36000,		'CLDT' => -10800,		'CLST' => -14400,		'COT' => -18000,		'CST' => -21600,		'CVT' => -3600,		'CXT' => 25200,		'DAVT' => 25200,		'DTAT' => 36000,		'EADT' => -18000,		'EAST' => -21600,		'EAT' => 10800,		'ECT' => -18000,		'EDT' => -14400,		'EEST' => 10800,		'EET' => 7200,		'EGT' => -3600,		'EKST' => 21600,		'EST' => -18000,		'FJT' => 43200,		'FKDT' => -10800,		'FKST' => -14400,		'FNT' => -7200,		'GALT' => -21600,		'GEDT' => 14400,		'GEST' => 10800,		'GFT' => -10800,		'GILT' => 43200,		'GIT' => -32400,		'GST' => 14400,		'GST' => -7200,		'GYT' => -14400,		'HAA' => -10800,		'HAC' => -18000,		'HADT' => -32400,		'HAE' => -14400,		'HAP' => -25200,		'HAR' => -21600,		'HAST' => -36000,		'HAT' => -9000,		'HAY' => -28800,		'HKST' => 28800,		'HMT' => 18000,		'HNA' => -14400,		'HNC' => -21600,		'HNE' => -18000,		'HNP' => -28800,		'HNR' => -25200,		'HNT' => -12600,		'HNY' => -32400,		'IRDT' => 16200,		'IRKST' => 32400,		'IRKT' => 28800,		'IRST' => 12600,		'JFDT' => -10800,		'JFST' => -14400,		'JST' => 32400,		'KGST' => 21600,		'KGT' => 18000,		'KOST' => 39600,		'KOVST' => 28800,		'KOVT' => 25200,		'KRAST' => 28800,		'KRAT' => 25200,		'KST' => 32400,		'LHDT' => 39600,		'LHST' => 37800,		'LINT' => 50400,		'LKT' => 21600,		'MAGST' => 43200,		'MAGT' => 39600,		'MAWT' => 21600,		'MDT' => -21600,		'MESZ' => 7200,		'MEZ' => 3600,		'MHT' => 43200,		'MIT' => -34200,		'MNST' => 32400,		'MSDT' => 14400,		'MSST' => 10800,		'MST' => -25200,		'MUT' => 14400,		'MVT' => 18000,		'MYT' => 28800,		'NCT' => 39600,		'NDT' => -9000,		'NFT' => 41400,		'NMIT' => 36000,		'NOVST' => 25200,		'NOVT' => 21600,		'NPT' => 20700,		'NRT' => 43200,		'NST' => -12600,		'NUT' => -39600,		'NZDT' => 46800,		'NZST' => 43200,		'OMSST' => 25200,		'OMST' => 21600,		'PDT' => -25200,		'PET' => -18000,		'PETST' => 46800,		'PETT' => 43200,		'PGT' => 36000,		'PHOT' => 46800,		'PHT' => 28800,		'PKT' => 18000,		'PMDT' => -7200,		'PMST' => -10800,		'PONT' => 39600,		'PST' => -28800,		'PWT' => 32400,		'PYST' => -10800,		'PYT' => -14400,		'RET' => 14400,		'ROTT' => -10800,		'SAMST' => 18000,		'SAMT' => 14400,		'SAST' => 7200,		'SBT' => 39600,		'SCDT' => 46800,		'SCST' => 43200,		'SCT' => 14400,		'SEST' => 3600,		'SGT' => 28800,		'SIT' => 28800,		'SRT' => -10800,		'SST' => -39600,		'SYST' => 10800,		'SYT' => 7200,		'TFT' => 18000,		'THAT' => -36000,		'TJT' => 18000,		'TKT' => -36000,		'TMT' => 18000,		'TOT' => 46800,		'TPT' => 32400,		'TRUT' => 36000,		'TVT' => 43200,		'TWT' => 28800,		'UYST' => -7200,		'UYT' => -10800,		'UZT' => 18000,		'VET' => -14400,		'VLAST' => 39600,		'VLAT' => 36000,		'VOST' => 21600,		'VUT' => 39600,		'WAST' => 7200,		'WAT' => 3600,		'WDT' => 32400,		'WEST' => 3600,		'WFT' => 43200,		'WIB' => 25200,		'WIT' => 32400,		'WITA' => 28800,		'WKST' => 18000,		'WST' => 28800,		'YAKST' => 36000,		'YAKT' => 32400,		'YAPT' => 36000,		'YEKST' => 21600,		'YEKT' => 18000,	);	/**	 * Cached PCRE for SimplePie_Parse_Date::$day	 *	 * @access protected	 * @var string	 */	var $day_pcre;	/**	 * Cached PCRE for SimplePie_Parse_Date::$month	 *	 * @access protected	 * @var string	 */	var $month_pcre;	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $built_in = array();	/**	 * Array of user-added callback methods	 *	 * @access private	 * @var array	 */	var $user = array();	/**	 * Create new SimplePie_Parse_Date object, and set self::day_pcre,	 * self::month_pcre, and self::built_in	 *	 * @access private	 */	function SimplePie_Parse_Date()	{		$this->day_pcre = '(' . implode(array_keys($this->day), '|') . ')';		$this->month_pcre = '(' . implode(array_keys($this->month), '|') . ')';		static $cache;		if (!isset($cache[get_class($this)]))		{			$all_methods = get_class_methods($this);			foreach ($all_methods as $method)			{				if (strtolower(substr($method, 0, 5)) === 'date_')				{					$cache[get_class($this)][] = $method;				}			}		}		foreach ($cache[get_class($this)] as $method)		{			$this->built_in[] = $method;		}	}	/**	 * Get the object	 *	 * @access public	 */	function get()	{		static $object;		if (!$object)		{			$object = new SimplePie_Parse_Date;		}		return $object;	}	/**	 * Parse a date	 *	 * @final	 * @access public	 * @param string $date Date to parse	 * @return int Timestamp corresponding to date string, or false on failure	 */	function parse($date)	{		foreach ($this->user as $method)		{			if (($returned = call_user_func($method, $date)) !== false)			{				return $returned;			}		}		foreach ($this->built_in as $method)		{			if (($returned = call_user_func(array(&$this, $method), $date)) !== false)			{				return $returned;			}		}		return false;	}	/**	 * Add a callback method to parse a date	 *	 * @final	 * @access public	 * @param callback $callback	 */	function add_callback($callback)	{		if (is_callable($callback))		{			$this->user[] = $callback;		}		else		{			trigger_error('User-supplied function must be a valid callback', E_USER_WARNING);		}	}	/**	 * Parse a superset of W3C-DTF (allows hyphens and colons to be omitted, as	 * well as allowing any of upper or lower case "T", horizontal tabs, or	 * spaces to be used as the time seperator (including more than one))	 *	 * @access protected	 * @return int Timestamp	 */	function date_w3cdtf($date)	{		static $pcre;		if (!$pcre)		{			$year = '([0-9]{4})';			$month = $day = $hour = $minute = $second = '([0-9]{2})';			$decimal = '([0-9]*)';			$zone = '(?:(Z)|([+\-])([0-9]{1,2}):?([0-9]{1,2}))';			$pcre = '/^' . $year . '(?:-?' . $month . '(?:-?' . $day . '(?:[Tt\x09\x20]+' . $hour . '(?::?' . $minute . '(?::?' . $second . '(?:.' . $decimal . ')?)?)?' . $zone . ')?)?)?$/';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Year			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Decimal fraction of a second			8: Zulu			9: Timezone 			10: Timezone hours			11: Timezone minutes			*/			// Fill in empty matches			for ($i = count($match); $i <= 3; $i++)			{				$match[$i] = '1';			}			for ($i = count($match); $i <= 7; $i++)			{				$match[$i] = '0';			}			// Numeric timezone			if (isset($match[9]) && $match[9] !== '')			{				$timezone = $match[10] * 3600;				$timezone += $match[11] * 60;				if ($match[9] === '-')				{					$timezone = 0 - $timezone;				}			}			else			{				$timezone = 0;			}			// Convert the number of seconds to an integer, taking decimals into account			$second = round($match[6] + $match[7] / pow(10, strlen($match[7])));			return gmmktime($match[4], $match[5], $second, $match[2], $match[3], $match[1]) - $timezone;		}		else		{			return false;		}	}	/**	 * Remove RFC822 comments	 *	 * @access protected	 * @param string $data Data to strip comments from	 * @return string Comment stripped string	 */	function remove_rfc2822_comments($string)	{		$string = (string) $string;		$position = 0;		$length = strlen($string);		$depth = 0;		$output = '';		while ($position < $length && ($pos = strpos($string, '(', $position)) !== false)		{			$output .= substr($string, $position, $pos - $position);			$position = $pos + 1;			if ($string[$pos - 1] !== '\\')			{				$depth++;				while ($depth && $position < $length)				{					$position += strcspn($string, '()', $position);					if ($string[$position - 1] === '\\')					{						$position++;						continue;					}					elseif (isset($string[$position]))					{						switch ($string[$position])						{							case '(':								$depth++;								break;							case ')':								$depth--;								break;						}						$position++;					}					else					{						break;					}				}			}			else			{				$output .= '(';			}		}		$output .= substr($string, $position);		return $output;	}	/**	 * Parse RFC2822's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc2822($date)	{		static $pcre;		if (!$pcre)		{			$wsp = '[\x09\x20]';			$fws = '(?:' . $wsp . '+|' . $wsp . '*(?:\x0D\x0A' . $wsp . '+)+)';			$optional_fws = $fws . '?';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $minute = $second = '([0-9]{2})';			$year = '([0-9]{2,4})';			$num_zone = '([+\-])([0-9]{2})([0-9]{2})';			$character_zone = '([A-Z]{1,5})';			$zone = '(?:' . $num_zone . '|' . $character_zone . ')';			$pcre = '/(?:' . $optional_fws . $day_name . $optional_fws . ',)?' . $optional_fws . $day . $fws . $month . $fws . $year . $fws . $hour . $optional_fws . ':' . $optional_fws . $minute . '(?:' . $optional_fws . ':' . $optional_fws . $second . ')?' . $fws . $zone . '/i';		}		if (preg_match($pcre, $this->remove_rfc2822_comments($date), $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone 			9: Timezone hours			10: Timezone minutes			11: Alphabetic timezone			*/			// Find the month number			$month = $this->month[strtolower($match[3])];			// Numeric timezone			if ($match[8] !== '')			{				$timezone = $match[9] * 3600;				$timezone += $match[10] * 60;				if ($match[8] === '-')				{					$timezone = 0 - $timezone;				}			}			// Character timezone			elseif (isset($this->timezone[strtoupper($match[11])]))			{				$timezone = $this->timezone[strtoupper($match[11])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2/3 digit years			if ($match[4] < 50)			{				$match[4] += 2000;			}			elseif ($match[4] < 1000)			{				$match[4] += 1900;			}			// Second is optional, if it is empty set it to zero			if ($match[7] !== '')			{				$second = $match[7];			}			else			{				$second = 0;			}			return gmmktime($match[5], $match[6], $second, $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse RFC850's date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_rfc850($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$day_name = $this->day_pcre;			$month = $this->month_pcre;			$day = '([0-9]{1,2})';			$year = $hour = $minute = $second = '([0-9]{2})';			$zone = '([A-Z]{1,5})';			$pcre = '/^' . $day_name . ',' . $space . $day . '-' . $month . '-' . $year . $space . $hour . ':' . $minute . ':' . $second . $space . $zone . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Day			3: Month			4: Year			5: Hour			6: Minute			7: Second			8: Timezone			*/			// Month			$month = $this->month[strtolower($match[3])];			// Character timezone			if (isset($this->timezone[strtoupper($match[8])]))			{				$timezone = $this->timezone[strtoupper($match[8])];			}			// Assume everything else to be -0000			else			{				$timezone = 0;			}			// Deal with 2 digit year			if ($match[4] < 50)			{				$match[4] += 2000;			}			else			{				$match[4] += 1900;			}			return gmmktime($match[5], $match[6], $match[7], $month, $match[2], $match[4]) - $timezone;		}		else		{			return false;		}	}	/**	 * Parse C99's asctime()'s date format	 *	 * @access protected	 * @return int Timestamp	 */	function date_asctime($date)	{		static $pcre;		if (!$pcre)		{			$space = '[\x09\x20]+';			$wday_name = $this->day_pcre;			$mon_name = $this->month_pcre;			$day = '([0-9]{1,2})';			$hour = $sec = $min = '([0-9]{2})';			$year = '([0-9]{4})';			$terminator = '\x0A?\x00?';			$pcre = '/^' . $wday_name . $space . $mon_name . $space . $day . $space . $hour . ':' . $min . ':' . $sec . $space . $year . $terminator . '$/i';		}		if (preg_match($pcre, $date, $match))		{			/*			Capturing subpatterns:			1: Day name			2: Month			3: Day			4: Hour			5: Minute			6: Second			7: Year			*/			$month = $this->month[strtolower($match[2])];			return gmmktime($match[4], $match[5], $match[6], $month, $match[3], $match[7]);		}		else		{			return false;		}	}	/**	 * Parse dates using strtotime()	 *	 * @access protected	 * @return int Timestamp	 */	function date_strtotime($date)	{		$strtotime = strtotime($date);		if ($strtotime === -1 || $strtotime === false)		{			return false;		}		else		{			return $strtotime;		}	}}/** * Content-type sniffing * * @package SimplePie */class SimplePie_Content_Type_Sniffer{	/**	 * File object	 *	 * @var SimplePie_File	 * @access private	 */	var $file;	/**	 * Create an instance of the class with the input file	 *	 * @access public	 * @param SimplePie_Content_Type_Sniffer $file Input file	 */	function SimplePie_Content_Type_Sniffer($file)	{		$this->file = $file;	}	/**	 * Get the Content-Type of the specified file	 *	 * @access public	 * @return string Actual Content-Type	 */	function get_type()	{		if (isset($this->file->headers['content-type']))		{			if (!isset($this->file->headers['content-encoding'])				&& ($this->file->headers['content-type'] === 'text/plain'					|| $this->file->headers['content-type'] === 'text/plain; charset=ISO-8859-1'					|| $this->file->headers['content-type'] === 'text/plain; charset=iso-8859-1'))			{				return $this->text_or_binary();			}			if (($pos = strpos($this->file->headers['content-type'], ';')) !== false)			{				$official = substr($this->file->headers['content-type'], 0, $pos);			}			else			{				$official = $this->file->headers['content-type'];			}			$official = strtolower($official);			if ($official === 'unknown/unknown'				|| $official === 'application/unknown')			{				return $this->unknown();			}			elseif (substr($official, -4) === '+xml'				|| $official === 'text/xml'				|| $official === 'application/xml')			{				return $official;			}			elseif (substr($official, 0, 6) === 'image/')			{				if ($return = $this->image())				{					return $return;				}				else				{					return $official;				}			}			elseif ($official === 'text/html')			{				return $this->feed_or_html();			}			else			{				return $official;			}		}		else		{			return $this->unknown();		}	}	/**	 * Sniff text or binary	 *	 * @access private	 * @return string Actual Content-Type	 */	function text_or_binary()	{		if (substr($this->file->body, 0, 2) === "\xFE\xFF"			|| substr($this->file->body, 0, 2) === "\xFF\xFE"			|| substr($this->file->body, 0, 4) === "\x00\x00\xFE\xFF"			|| substr($this->file->body, 0, 3) === "\xEF\xBB\xBF")		{			return 'text/plain';		}		elseif (preg_match('/[\x00-\x08\x0E-\x1A\x1C-\x1F]/', $this->file->body))		{			return 'application/octect-stream';		}		else		{			return 'text/plain';		}	}	/**	 * Sniff unknown	 *	 * @access private	 * @return string Actual Content-Type	 */	function unknown()	{		$ws = strspn($this->file->body, "\x09\x0A\x0B\x0C\x0D\x20");		if (strtolower(substr($this->file->body, $ws, 14)) === '<!doctype html'			|| strtolower(substr($this->file->body, $ws, 5)) === '<html'			|| strtolower(substr($this->file->body, $ws, 7)) === '<script')		{			return 'text/html';		}		elseif (substr($this->file->body, 0, 5) === '%PDF-')		{			return 'application/pdf';		}		elseif (substr($this->file->body, 0, 11) === '%!PS-Adobe-')		{			return 'application/postscript';		}		elseif (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return $this->text_or_binary();		}	}	/**	 * Sniff images	 *	 * @access private	 * @return string Actual Content-Type	 */	function image()	{		if (substr($this->file->body, 0, 6) === 'GIF87a'			|| substr($this->file->body, 0, 6) === 'GIF89a')		{			return 'image/gif';		}		elseif (substr($this->file->body, 0, 8) === "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A")		{			return 'image/png';		}		elseif (substr($this->file->body, 0, 3) === "\xFF\xD8\xFF")		{			return 'image/jpeg';		}		elseif (substr($this->file->body, 0, 2) === "\x42\x4D")		{			return 'image/bmp';		}		else		{			return false;		}	}	/**	 * Sniff HTML	 *	 * @access private	 * @return string Actual Content-Type	 */	function feed_or_html()	{		$len = strlen($this->file->body);		$pos = strspn($this->file->body, "\x09\x0A\x0D\x20");		while ($pos < $len)		{			switch ($this->file->body[$pos])			{				case "\x09":				case "\x0A":				case "\x0D":				case "\x20":					$pos += strspn($this->file->body, "\x09\x0A\x0D\x20", $pos);					continue 2;				case '<':					$pos++;					break;				default:					return 'text/html';			}			if (substr($this->file->body, $pos, 3) === '!--')			{				$pos += 3;				if ($pos < $len && ($pos = strpos($this->file->body, '-->', $pos)) !== false)				{					$pos += 3;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '!')			{				if ($pos < $len && ($pos = strpos($this->file->body, '>', $pos)) !== false)				{					$pos++;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 1) === '?')			{				if ($pos < $len && ($pos = strpos($this->file->body, '?>', $pos)) !== false)				{					$pos += 2;				}				else				{					return 'text/html';				}			}			elseif (substr($this->file->body, $pos, 3) === 'rss'				|| substr($this->file->body, $pos, 7) === 'rdf:RDF')			{				return 'application/rss+xml';			}			elseif (substr($this->file->body, $pos, 4) === 'feed')			{				return 'application/atom+xml';			}			else			{				return 'text/html';			}		}		return 'text/html';	}}/** * Parses the XML Declaration * * @package SimplePie */class SimplePie_XML_Declaration_Parser{	/**	 * XML Version	 *	 * @access public	 * @var string	 */	var $version = '1.0';	/**	 * Encoding	 *	 * @access public	 * @var string	 */	var $encoding = 'UTF-8';	/**	 * Standalone	 *	 * @access public	 * @var bool	 */	var $standalone = false;	/**	 * Current state of the state machine	 *	 * @access private	 * @var string	 */	var $state = 'before_version_name';	/**	 * Input data	 *	 * @access private	 * @var string	 */	var $data = '';	/**	 * Input data length (to avoid calling strlen() everytime this is needed)	 *	 * @access private	 * @var int	 */	var $data_length = 0;	/**	 * Current position of the pointer	 *	 * @var int	 * @access private	 */	var $position = 0;	/**	 * Create an instance of the class with the input data	 *	 * @access public	 * @param string $data Input data	 */	function SimplePie_XML_Declaration_Parser($data)	{		$this->data = $data;		$this->data_length = strlen($this->data);	}	/**	 * Parse the input data	 *	 * @access public	 * @return bool true on success, false on failure	 */	function parse()	{		while ($this->state && $this->state !== 'emit' && $this->has_data())		{			$state = $this->state;			$this->$state();		}		$this->data = '';		if ($this->state === 'emit')		{			return true;		}		else		{			$this->version = '';			$this->encoding = '';			$this->standalone = '';			return false;		}	}	/**	 * Check whether there is data beyond the pointer	 *	 * @access private	 * @return bool true if there is further data, false if not	 */	function has_data()	{		return (bool) ($this->position < $this->data_length);	}	/**	 * Advance past any whitespace	 *	 * @return int Number of whitespace characters passed	 */	function skip_whitespace()	{		$whitespace = strspn($this->data, "\x09\x0A\x0D\x20", $this->position);		$this->position += $whitespace;		return $whitespace;	}	/**	 * Read value	 */	function get_value()	{		$quote = substr($this->data, $this->position, 1);		if ($quote === '"' || $quote === "'")		{			$this->position++;			$len = strcspn($this->data, $quote, $this->position);			if ($this->has_data())			{				$value = substr($this->data, $this->position, $len);				$this->position += $len + 1;				return $value;			}		}		return false;	}	function before_version_name()	{		if ($this->skip_whitespace())		{			$this->state = 'version_name';		}		else		{			$this->state = false;		}	}	function version_name()	{		if (substr($this->data, $this->position, 7) === 'version')		{			$this->position += 7;			$this->skip_whitespace();			$this->state = 'version_equals';		}		else		{			$this->state = false;		}	}	function version_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'version_value';		}		else		{			$this->state = false;		}	}	function version_value()	{		if ($this->version = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'encoding_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = 'standalone_name';		}	}	function encoding_name()	{		if (substr($this->data, $this->position, 8) === 'encoding')		{			$this->position += 8;			$this->skip_whitespace();			$this->state = 'encoding_equals';		}		else		{			$this->state = false;		}	}	function encoding_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'encoding_value';		}		else		{			$this->state = false;		}	}	function encoding_value()	{		if ($this->encoding = $this->get_value())		{			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = 'standalone_name';			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}	function standalone_name()	{		if (substr($this->data, $this->position, 10) === 'standalone')		{			$this->position += 10;			$this->skip_whitespace();			$this->state = 'standalone_equals';		}		else		{			$this->state = false;		}	}	function standalone_equals()	{		if (substr($this->data, $this->position, 1) === '=')		{			$this->position++;			$this->skip_whitespace();			$this->state = 'standalone_value';		}		else		{			$this->state = false;		}	}	function standalone_value()	{		if ($standalone = $this->get_value())		{			switch ($standalone)			{				case 'yes':					$this->standalone = true;					break;				case 'no':					$this->standalone = false;					break;				default:					$this->state = false;					return;			}			$this->skip_whitespace();			if ($this->has_data())			{				$this->state = false;			}			else			{				$this->state = 'emit';			}		}		else		{			$this->state = false;		}	}}class SimplePie_Locator{	var $useragent;	var $timeout;	var $file;	var $local = array();	var $elsewhere = array();	var $file_class = 'SimplePie_File';	var $cached_entities = array();	var $http_base;	var $base;	var $base_location = 0;	var $checked_feeds = 0;	var $max_checked_feeds = 10;	var $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer';	function SimplePie_Locator(&$file, $timeout = 10, $useragent = null, $file_class = 'SimplePie_File', $max_checked_feeds = 10, $content_type_sniffer_class = 'SimplePie_Content_Type_Sniffer')	{		$this->file =& $file;		$this->file_class = $file_class;		$this->useragent = $useragent;		$this->timeout = $timeout;		$this->max_checked_feeds = $max_checked_feeds;		$this->content_type_sniffer_class = $content_type_sniffer_class;	}	function find($type = SIMPLEPIE_LOCATOR_ALL, &$working)	{		if ($this->is_feed($this->file))		{			return $this->file;		}		if ($this->file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer = new $this->content_type_sniffer_class($this->file);			if ($sniffer->get_type() !== 'text/html')			{				return null;			}		}		if ($type & ~SIMPLEPIE_LOCATOR_NONE)		{			$this->get_base();		}		if ($type & SIMPLEPIE_LOCATOR_AUTODISCOVERY && $working = $this->autodiscovery())		{			return $working[0];		}		if ($type & (SIMPLEPIE_LOCATOR_LOCAL_EXTENSION | SIMPLEPIE_LOCATOR_LOCAL_BODY | SIMPLEPIE_LOCATOR_REMOTE_EXTENSION | SIMPLEPIE_LOCATOR_REMOTE_BODY) && $this->get_links())		{			if ($type & SIMPLEPIE_LOCATOR_LOCAL_EXTENSION && $working = $this->extension($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_LOCAL_BODY && $working = $this->body($this->local))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_EXTENSION && $working = $this->extension($this->elsewhere))			{				return $working;			}			if ($type & SIMPLEPIE_LOCATOR_REMOTE_BODY && $working = $this->body($this->elsewhere))			{				return $working;			}		}		return null;	}	function is_feed(&$file)	{		if ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE)		{			$sniffer = new $this->content_type_sniffer_class($file);			$sniffed = $sniffer->get_type();			if (in_array($sniffed, array('application/rss+xml', 'application/rdf+xml', 'text/rdf', 'application/atom+xml', 'text/xml', 'application/xml')))			{				return true;			}			else			{				return false;			}		}		elseif ($file->method & SIMPLEPIE_FILE_SOURCE_LOCAL)		{			return true;		}		else		{			return false;		}	}	function get_base()	{		$this->http_base = $this->file->url;		$this->base = $this->http_base;		$elements = SimplePie_Misc::get_element('base', $this->file->body);		foreach ($elements as $element)		{			if ($element['attribs']['href']['data'] !== '')			{				$this->base = SimplePie_Misc::absolutize_url(trim($element['attribs']['href']['data']), $this->http_base);				$this->base_location = $element['offset'];				break;			}		}	}	function autodiscovery()	{		$links = array_merge(SimplePie_Misc::get_element('link', $this->file->body), SimplePie_Misc::get_element('a', $this->file->body), SimplePie_Misc::get_element('area', $this->file->body));		$done = array();		$feeds = array();		foreach ($links as $link)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (isset($link['attribs']['href']['data']) && isset($link['attribs']['rel']['data']))			{				$rel = array_unique(SimplePie_Misc::space_seperated_tokens(strtolower($link['attribs']['rel']['data'])));				if ($this->base_location < $link['offset'])				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);				}				else				{					$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);				}				if (!in_array($href, $done) && in_array('feed', $rel) || (in_array('alternate', $rel) && !empty($link['attribs']['type']['data']) && in_array(strtolower(SimplePie_Misc::parse_mime($link['attribs']['type']['data'])), array('application/rss+xml', 'application/atom+xml'))) && !isset($feeds[$href]))				{					$this->checked_feeds++;					$feed = new $this->file_class($href, $this->timeout, 5, null, $this->useragent);					if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))					{						$feeds[$href] = $feed;					}				}				$done[] = $href;			}		}		if (!empty($feeds))		{			return array_values($feeds);		}		else		{			return null;		}	}	function get_links()	{		$links = SimplePie_Misc::get_element('a', $this->file->body);		foreach ($links as $link)		{			if (isset($link['attribs']['href']['data']))			{				$href = trim($link['attribs']['href']['data']);				$parsed = SimplePie_Misc::parse_url($href);				if ($parsed['scheme'] === '' || preg_match('/^(http(s)|feed)?$/i', $parsed['scheme']))				{					if ($this->base_location < $link['offset'])					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->base);					}					else					{						$href = SimplePie_Misc::absolutize_url(trim($link['attribs']['href']['data']), $this->http_base);					}					$current = SimplePie_Misc::parse_url($this->file->url);					if ($parsed['authority'] === '' || $parsed['authority'] === $current['authority'])					{						$this->local[] = $href;					}					else					{						$this->elsewhere[] = $href;					}				}			}		}		$this->local = array_unique($this->local);		$this->elsewhere = array_unique($this->elsewhere);		if (!empty($this->local) || !empty($this->elsewhere))		{			return true;		}		return null;	}	function extension(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (in_array(strtolower(strrchr($value, '.')), array('.rss', '.rdf', '.atom', '.xml')))			{				$this->checked_feeds++;				$feed = new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}	function body(&$array)	{		foreach ($array as $key => $value)		{			if ($this->checked_feeds === $this->max_checked_feeds)			{				break;			}			if (preg_match('/(rss|rdf|atom|xml)/i', $value))			{				$this->checked_feeds++;				$feed = new $this->file_class($value, $this->timeout, 5, null, $this->useragent);				if ($feed->success && ($feed->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($feed->status_code === 200 || $feed->status_code > 206 && $feed->status_code < 300)) && $this->is_feed($feed))				{					return $feed;				}				else				{					unset($array[$key]);				}			}		}		return null;	}}class SimplePie_Parser{	var $error_code;	var $error_string;	var $current_line;	var $current_column;	var $current_byte;	var $separator = ' ';	var $namespace = array('');	var $element = array('');	var $xml_base = array('');	var $xml_base_explicit = array(false);	var $xml_lang = array('');	var $data = array();	var $datas = array(array());	var $current_xhtml_construct = -1;	var $encoding;	function parse(&$data, $encoding)	{		// Use UTF-8 if we get passed US-ASCII, as every US-ASCII character is a UTF-8 character		if (strtoupper($encoding) === 'US-ASCII')		{			$this->encoding = 'UTF-8';		}		else		{			$this->encoding = $encoding;		}		// Strip BOM:		// UTF-32 Big Endian BOM		if (substr($data, 0, 4) === "\x00\x00\xFE\xFF")		{			$data = substr($data, 4);		}		// UTF-32 Little Endian BOM		elseif (substr($data, 0, 4) === "\xFF\xFE\x00\x00")		{			$data = substr($data, 4);		}		// UTF-16 Big Endian BOM		elseif (substr($data, 0, 2) === "\xFE\xFF")		{			$data = substr($data, 2);		}		// UTF-16 Little Endian BOM		elseif (substr($data, 0, 2) === "\xFF\xFE")		{			$data = substr($data, 2);		}		// UTF-8 BOM		elseif (substr($data, 0, 3) === "\xEF\xBB\xBF")		{			$data = substr($data, 3);		}		if (substr($data, 0, 5) === '<?xml' && strspn(substr($data, 5, 1), "\x09\x0A\x0D\x20") && ($pos = strpos($data, '?>')) !== false)		{			$declaration = new SimplePie_XML_Declaration_Parser(substr($data, 5, $pos - 5));			if ($declaration->parse())			{				$data = substr($data, $pos + 2);				$data = '<?xml version="' . $declaration->version . '" encoding="' . $encoding . '" standalone="' . (($declaration->standalone) ? 'yes' : 'no') . '"?>' . $data;			}			else			{				$this->error_string = 'SimplePie bug! Please report this!';				return false;			}		}		$return = true;		static $xml_is_sane = null;		if ($xml_is_sane === null)		{			$parser_check = xml_parser_create();			xml_parse_into_struct($parser_check, '<foo>&amp;</foo>', $values);			xml_parser_free($parser_check);			$xml_is_sane = isset($values[0]['value']);		}		// Create the parser		if ($xml_is_sane)		{			$xml = xml_parser_create_ns($this->encoding, $this->separator);			xml_parser_set_option($xml, XML_OPTION_SKIP_WHITE, 1);			xml_parser_set_option($xml, XML_OPTION_CASE_FOLDING, 0);			xml_set_object($xml, $this);			xml_set_character_data_handler($xml, 'cdata');			xml_set_element_handler($xml, 'tag_open', 'tag_close');			// Parse!			if (!xml_parse($xml, $data, true))			{				$this->error_code = xml_get_error_code($xml);				$this->error_string = xml_error_string($this->error_code);				$return = false;			}			$this->current_line = xml_get_current_line_number($xml);			$this->current_column = xml_get_current_column_number($xml);			$this->current_byte = xml_get_current_byte_index($xml);			xml_parser_free($xml);			return $return;		}		else		{			libxml_clear_errors();			$xml = new XMLReader();			$xml->xml($data);			while (@$xml->read())			{				switch ($xml->nodeType)				{					case constant('XMLReader::END_ELEMENT'):						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$this->tag_close(null, $tagName);						break;					case constant('XMLReader::ELEMENT'):						$empty = $xml->isEmptyElement;						if ($xml->namespaceURI !== '')						{							$tagName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";						}						else						{							$tagName = $xml->localName;						}						$attributes = array();						while ($xml->moveToNextAttribute())						{							if ($xml->namespaceURI !== '')							{								$attrName = "{$xml->namespaceURI}{$this->separator}{$xml->localName}";							}							else							{								$attrName = $xml->localName;							}							$attributes[$attrName] = $xml->value;						}						$this->tag_open(null, $tagName, $attributes);						if ($empty)						{							$this->tag_close(null, $tagName);						}						break;					case constant('XMLReader::TEXT'):					case constant('XMLReader::CDATA'):						$this->cdata(null, $xml->value);						break;				}			}			if ($error = libxml_get_last_error())			{				$this->error_code = $error->code;				$this->error_string = $error->message;				$this->current_line = $error->line;				$this->current_column = $error->column;				return false;			}			else			{				return true;			}		}	}	function get_error_code()	{		return $this->error_code;	}	function get_error_string()	{		return $this->error_string;	}	function get_current_line()	{		return $this->current_line;	}	function get_current_column()	{		return $this->current_column;	}	function get_current_byte()	{		return $this->current_byte;	}	function get_data()	{		return $this->data;	}	function tag_open($parser, $tag, $attributes)	{		list($this->namespace[], $this->element[]) = $this->split_ns($tag);		$attribs = array();		foreach ($attributes as $name => $value)		{			list($attrib_namespace, $attribute) = $this->split_ns($name);			$attribs[$attrib_namespace][$attribute] = $value;		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['base']))		{			$this->xml_base[] = SimplePie_Misc::absolutize_url($attribs[SIMPLEPIE_NAMESPACE_XML]['base'], end($this->xml_base));			$this->xml_base_explicit[] = true;		}		else		{			$this->xml_base[] = end($this->xml_base);			$this->xml_base_explicit[] = end($this->xml_base_explicit);		}		if (isset($attribs[SIMPLEPIE_NAMESPACE_XML]['lang']))		{			$this->xml_lang[] = $attribs[SIMPLEPIE_NAMESPACE_XML]['lang'];		}		else		{			$this->xml_lang[] = end($this->xml_lang);		}		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct++;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML)			{				$this->data['data'] .= '<' . end($this->element);				if (isset($attribs['']))				{					foreach ($attribs[''] as $name => $value)					{						$this->data['data'] .= ' ' . $name . '="' . htmlspecialchars($value, ENT_COMPAT, $this->encoding) . '"';					}				}				$this->data['data'] .= '>';			}		}		else		{			$this->datas[] =& $this->data;			$this->data =& $this->data['child'][end($this->namespace)][end($this->element)][];			$this->data = array('data' => '', 'attribs' => $attribs, 'xml_base' => end($this->xml_base), 'xml_base_explicit' => end($this->xml_base_explicit), 'xml_lang' => end($this->xml_lang));			if ((end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_03 && in_array(end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml')			|| (end($this->namespace) === SIMPLEPIE_NAMESPACE_ATOM_10 && in_array(end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml'))			{				$this->current_xhtml_construct = 0;			}		}	}	function cdata($parser, $cdata)	{		if ($this->current_xhtml_construct >= 0)		{			$this->data['data'] .= htmlspecialchars($cdata, ENT_QUOTES, $this->encoding);		}		else		{			$this->data['data'] .= $cdata;		}	}	function tag_close($parser, $tag)	{		if ($this->current_xhtml_construct >= 0)		{			$this->current_xhtml_construct--;			if (end($this->namespace) === SIMPLEPIE_NAMESPACE_XHTML && !in_array(end($this->element), array('area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param')))			{				$this->data['data'] .= '</' . end($this->element) . '>';			}		}		if ($this->current_xhtml_construct === -1)		{			$this->data =& $this->datas[count($this->datas) - 1];			array_pop($this->datas);		}		array_pop($this->element);		array_pop($this->namespace);		array_pop($this->xml_base);		array_pop($this->xml_base_explicit);		array_pop($this->xml_lang);	}	function split_ns($string)	{		static $cache = array();		if (!isset($cache[$string]))		{			if ($pos = strpos($string, $this->separator))			{				static $separator_length;				if (!$separator_length)				{					$separator_length = strlen($this->separator);				}				$namespace = substr($string, 0, $pos);				$local_name = substr($string, $pos + $separator_length);				if (strtolower($namespace) === SIMPLEPIE_NAMESPACE_ITUNES)				{					$namespace = SIMPLEPIE_NAMESPACE_ITUNES;				}				// Normalize the Media RSS namespaces				if ($namespace === SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG)				{					$namespace = SIMPLEPIE_NAMESPACE_MEDIARSS;				}				$cache[$string] = array($namespace, $local_name);			}			else			{				$cache[$string] = array('', $string);			}		}		return $cache[$string];	}}/** * @todo Move to using an actual HTML parser (this will allow tags to be properly stripped, and to switch between HTML and XHTML), this will also make it easier to shorten a string while preserving HTML tags */class SimplePie_Sanitize{	// Private vars	var $base;	// Options	var $remove_div = true;	var $image_handler = '';	var $strip_htmltags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style');	var $encode_instead_of_strip = false;	var $strip_attributes = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc');	var $strip_comments = false;	var $output_encoding = 'UTF-8';	var $enable_cache = true;	var $cache_location = './cache';	var $cache_name_function = 'md5';	var $cache_class = 'SimplePie_Cache';	var $file_class = 'SimplePie_File';	var $timeout = 10;	var $useragent = '';	var $force_fsockopen = false;	var $replace_url_attributes = array(		'a' => 'href',		'area' => 'href',		'blockquote' => 'cite',		'del' => 'cite',		'form' => 'action',		'img' => array('longdesc', 'src'),		'input' => 'src',		'ins' => 'cite',		'q' => 'cite'	);	function remove_div($enable = true)	{		$this->remove_div = (bool) $enable;	}	function set_image_handler($page = false)	{		if ($page)		{			$this->image_handler = (string) $page;		}		else		{			$this->image_handler = false;		}	}	function pass_cache_data($enable_cache = true, $cache_location = './cache', $cache_name_function = 'md5', $cache_class = 'SimplePie_Cache')	{		if (isset($enable_cache))		{			$this->enable_cache = (bool) $enable_cache;		}		if ($cache_location)		{			$this->cache_location = (string) $cache_location;		}		if ($cache_name_function)		{			$this->cache_name_function = (string) $cache_name_function;		}		if ($cache_class)		{			$this->cache_class = (string) $cache_class;		}	}	function pass_file_data($file_class = 'SimplePie_File', $timeout = 10, $useragent = '', $force_fsockopen = false)	{		if ($file_class)		{			$this->file_class = (string) $file_class;		}		if ($timeout)		{			$this->timeout = (string) $timeout;		}		if ($useragent)		{			$this->useragent = (string) $useragent;		}		if ($force_fsockopen)		{			$this->force_fsockopen = (string) $force_fsockopen;		}	}	function strip_htmltags($tags = array('base', 'blink', 'body', 'doctype', 'embed', 'font', 'form', 'frame', 'frameset', 'html', 'iframe', 'input', 'marquee', 'meta', 'noscript', 'object', 'param', 'script', 'style'))	{		if ($tags)		{			if (is_array($tags))			{				$this->strip_htmltags = $tags;			}			else			{				$this->strip_htmltags = explode(',', $tags);			}		}		else		{			$this->strip_htmltags = false;		}	}	function encode_instead_of_strip($encode = false)	{		$this->encode_instead_of_strip = (bool) $encode;	}	function strip_attributes($attribs = array('bgsound', 'class', 'expr', 'id', 'style', 'onclick', 'onerror', 'onfinish', 'onmouseover', 'onmouseout', 'onfocus', 'onblur', 'lowsrc', 'dynsrc'))	{		if ($attribs)		{			if (is_array($attribs))			{				$this->strip_attributes = $attribs;			}			else			{				$this->strip_attributes = explode(',', $attribs);			}		}		else		{			$this->strip_attributes = false;		}	}	function strip_comments($strip = false)	{		$this->strip_comments = (bool) $strip;	}	function set_output_encoding($encoding = 'UTF-8')	{		$this->output_encoding = (string) $encoding;	}	/**	 * Set element/attribute key/value pairs of HTML attributes	 * containing URLs that need to be resolved relative to the feed	 *	 * @access public	 * @since 1.0	 * @param array $element_attribute Element/attribute key/value pairs	 */	function set_url_replacements($element_attribute = array('a' => 'href', 'area' => 'href', 'blockquote' => 'cite', 'del' => 'cite', 'form' => 'action', 'img' => array('longdesc', 'src'), 'input' => 'src', 'ins' => 'cite', 'q' => 'cite'))	{		$this->replace_url_attributes = (array) $element_attribute;	}	function sanitize($data, $type, $base = '')	{		$data = trim($data);		if ($data !== '' || $type & SIMPLEPIE_CONSTRUCT_IRI)		{			if ($type & SIMPLEPIE_CONSTRUCT_MAYBE_HTML)			{				if (preg_match('/(&(#(x[0-9a-fA-F]+|[0-9]+)|[a-zA-Z0-9]+)|<\/[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>)/', $data))				{					$type |= SIMPLEPIE_CONSTRUCT_HTML;				}				else				{					$type |= SIMPLEPIE_CONSTRUCT_TEXT;				}			}			if ($type & SIMPLEPIE_CONSTRUCT_BASE64)			{				$data = base64_decode($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_XHTML)			{				if ($this->remove_div)				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '', $data);					$data = preg_replace('/<\/div>$/', '', $data);				}				else				{					$data = preg_replace('/^<div' . SIMPLEPIE_PCRE_XML_ATTRIBUTE . '>/', '<div>', $data);				}			}			if ($type & (SIMPLEPIE_CONSTRUCT_HTML | SIMPLEPIE_CONSTRUCT_XHTML))			{				// Strip comments				if ($this->strip_comments)				{					$data = SimplePie_Misc::strip_comments($data);				}				// Strip out HTML tags and attributes that might cause various security problems.				// Based on recommendations by Mark Pilgrim at:				// http://diveintomark.org/archives/2003/06/12/how_to_consume_rss_safely				if ($this->strip_htmltags)				{					foreach ($this->strip_htmltags as $tag)					{						$pcre = "/<($tag)" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . "(>(.*)<\/$tag" . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>|(\/)?>)/siU';						while (preg_match($pcre, $data))						{							$data = preg_replace_callback($pcre, array(&$this, 'do_strip_htmltags'), $data);						}					}				}				if ($this->strip_attributes)				{					foreach ($this->strip_attributes as $attrib)					{						$data = preg_replace('/(<[A-Za-z][^\x09\x0A\x0B\x0C\x0D\x20\x2F\x3E]*)' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . trim($attrib) . '(?:\s*=\s*(?:"(?:[^"]*)"|\'(?:[^\']*)\'|(?:[^\x09\x0A\x0B\x0C\x0D\x20\x22\x27\x3E][^\x09\x0A\x0B\x0C\x0D\x20\x3E]*)?))?' . SIMPLEPIE_PCRE_HTML_ATTRIBUTE . '>/', '\1\2\3>', $data);					}				}				// Replace relative URLs				$this->base = $base;				foreach ($this->replace_url_attributes as $element => $attributes)				{					$data = $this->replace_urls($data, $element, $attributes);				}				// If image handling (caching, etc.) is enabled, cache and rewrite all the image tags.				if (isset($this->image_handler) && ((string) $this->image_handler) !== '' && $this->enable_cache)				{					$images = SimplePie_Misc::get_element('img', $data);					foreach ($images as $img)					{						if (isset($img['attribs']['src']['data']))						{							$image_url = call_user_func($this->cache_name_function, $img['attribs']['src']['data']);							$cache = call_user_func(array($this->cache_class, 'create'), $this->cache_location, $image_url, 'spi');							if ($cache->load())							{								$img['attribs']['src']['data'] = $this->image_handler . $image_url;								$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);							}							else							{								$file = new $this->file_class($img['attribs']['src']['data'], $this->timeout, 5, array('X-FORWARDED-FOR' => $_SERVER['REMOTE_ADDR']), $this->useragent, $this->force_fsockopen);								$headers = $file->headers;								if ($file->success && ($file->method & SIMPLEPIE_FILE_SOURCE_REMOTE === 0 || ($file->status_code === 200 || $file->status_code > 206 && $file->status_code < 300)))								{									if ($cache->save(array('headers' => $file->headers, 'body' => $file->body)))									{										$img['attribs']['src']['data'] = $this->image_handler . $image_url;										$data = str_replace($img['full'], SimplePie_Misc::element_implode($img), $data);									}									else									{										trigger_error("$this->cache_location is not writeable", E_USER_WARNING);									}								}							}						}					}				}				// Having (possibly) taken stuff out, there may now be whitespace at the beginning/end of the data				$data = trim($data);			}			if ($type & SIMPLEPIE_CONSTRUCT_IRI)			{				$data = SimplePie_Misc::absolutize_url($data, $base);			}			if ($type & (SIMPLEPIE_CONSTRUCT_TEXT | SIMPLEPIE_CONSTRUCT_IRI))			{				$data = htmlspecialchars($data, ENT_COMPAT, 'UTF-8');			}			if ($this->output_encoding !== 'UTF-8')			{				$data = SimplePie_Misc::change_encoding($data, 'UTF-8', $this->output_encoding);			}		}		return $data;	}	function replace_urls($data, $tag, $attributes)	{		if (!is_array($this->strip_htmltags) || !in_array($tag, $this->strip_htmltags))		{			$elements = SimplePie_Misc::get_element($tag, $data);			foreach ($elements as $element)			{				if (is_array($attributes))				{					foreach ($attributes as $attribute)					{						if (isset($element['attribs'][$attribute]['data']))						{							$element['attribs'][$attribute]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attribute]['data'], $this->base);							$new_element = SimplePie_Misc::element_implode($element);							$data = str_replace($element['full'], $new_element, $data);							$element['full'] = $new_element;						}					}				}				elseif (isset($element['attribs'][$attributes]['data']))				{					$element['attribs'][$attributes]['data'] = SimplePie_Misc::absolutize_url($element['attribs'][$attributes]['data'], $this->base);					$data = str_replace($element['full'], SimplePie_Misc::element_implode($element), $data);				}			}		}		return $data;	}	function do_strip_htmltags($match)	{		if ($this->encode_instead_of_strip)		{			if (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))			{				$match[1] = htmlspecialchars($match[1], ENT_COMPAT, 'UTF-8');				$match[2] = htmlspecialchars($match[2], ENT_COMPAT, 'UTF-8');				return "&lt;$match[1]$match[2]&gt;$match[3]&lt;/$match[1]&gt;";			}			else			{				return htmlspecialchars($match[0], ENT_COMPAT, 'UTF-8');			}		}		elseif (isset($match[4]) && !in_array(strtolower($match[1]), array('script', 'style')))		{			return $match[4];		}		else		{			return '';		}	}}?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages component helper. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName   The name of the active view.	 * @param   int     $client  The client id of the active view. Maybe be 0 or 1	 *	 * @return  void	 */	public static function addSubmenu($vName, $client = 0)	{		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_INSTALLED_SITE'),			'index.php?option=com_languages&view=installed&client=0',			$vName == 'installed' && $client === 0		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_INSTALLED_ADMINISTRATOR'),			'index.php?option=com_languages&view=installed&client=1',			$vName == 'installed' && $client === 1		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_CONTENT'),			'index.php?option=com_languages&view=languages',			$vName == 'languages'		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_OVERRIDES'),			'index.php?option=com_languages&view=overrides',			$vName == 'overrides'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user		= JFactory::getUser();		$result		= new JObject;		$assetName	= 'com_languages';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Method for parsing ini files	 *	 * @param   string  $filename Path and name of the ini file to parse	 *	 * @return  array   Array of strings found in the file, the array indices will be the keys. On failure an empty array will be returned	 *	 * @since   2.5	 */	public static function parseFile($filename)	{		if (!is_file($filename))		{			return array();		}		$contents = file_get_contents($filename);		$contents = str_replace('_QQ_', '"\""', $contents);		$strings  = @parse_ini_string($contents);		if ($strings === false)		{			return array();		}		return $strings;	}	/**	 * Filter method for language keys.	 * This method will be called by JForm while filtering the form data.	 *	 * @param   	string	$value	The language key to filter	 *	 * @return  string	The filtered language key	 *	 * @since		2.5	 */	public static function filterKey($value)	{		$filter = JFilterInput::getInstance(null, null, 1, 1);		return strtoupper($filter->clean($value, 'cmd'));	}	/**	 * Filter method for language strings.	 * This method will be called by JForm while filtering the form data.	 *	 * @param   	string	$value	The language string to filter	 *	 * @return  string	The filtered language string	 *	 * @since		2.5	 */	public static function filterText($value)	{		$filter = JFilterInput::getInstance(null, null, 1, 1);		return $filter->clean($value);	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Joomla Core Pre-Install View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewPreinstallHtml extends InstallationViewDefault{	/**	 * Array of PHP config options     *     * @var    array	 * @since  3.1	 */	protected $options;	/**	 * Array of PHP settings     *     * @var    array	 * @since  3.1	 */	protected $settings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options  = $this->model->getPhpOptions();		$this->settings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$state			= $this->get('State');$message1		= $state->get('message');$message2		= $state->get('extension_message');?><table class="adminform">	<tbody>		<?php if ($message1) : ?>		<tr>			<th><?php echo $message1 ?></th>		</tr>		<?php endif; ?>		<?php if ($message2) : ?>		<tr>			<td><?php echo $message2; ?></td>		</tr>		<?php endif; ?>	</tbody></table>
<?php/*** @version $Id$* @package utf8* @subpackage strings*//*** Define UTF8_CORE as required*/if ( !defined('UTF8_CORE') ) {    define('UTF8_CORE',TRUE);}//--------------------------------------------------------------------/*** Wrapper round mb_strlen* Assumes you have mb_internal_encoding to UTF-8 already* Note: this function does not count bad bytes in the string - these* are simply ignored* @param string UTF-8 string* @return int number of UTF-8 characters in string* @package utf8* @subpackage strings*/function utf8_strlen($str){    return mb_strlen($str);}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strpos* Find position of first occurrence of a string* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer offset in characters (from left)* @return mixed integer position or FALSE on failure* @package utf8* @subpackage strings*/function utf8_strpos($str, $search, $offset = FALSE){    if ( $offset === FALSE ) {        return mb_strpos($str, $search);    } else {        return mb_strpos($str, $search, $offset);    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strrpos* Find position of last occurrence of a char in a string* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer (optional) offset (from left)* @return mixed integer position or FALSE on failure* @package utf8* @subpackage strings*/function utf8_strrpos($str, $search, $offset = FALSE){    if ( $offset === FALSE ) {        # Emulate behaviour of strrpos rather than raising warning        if ( empty($str) ) {            return FALSE;        }        return mb_strrpos($str, $search);    } else {        if ( !is_int($offset) ) {            trigger_error('utf8_strrpos expects parameter 3 to be long',E_USER_WARNING);            return FALSE;        }        $str = mb_substr($str, $offset);        if ( FALSE !== ( $pos = mb_strrpos($str, $search) ) ) {            return $pos + $offset;        }        return FALSE;    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_substr* Return part of a string given character offset (and optionally length)* @param string* @param integer number of UTF-8 characters offset (from left)* @param integer (optional) length in UTF-8 characters from offset* @return mixed string or FALSE if failure* @package utf8* @subpackage strings*/function utf8_substr($str, $offset, $length = FALSE){    if ( $length === FALSE ) {        return mb_substr($str, $offset);    } else {        return mb_substr($str, $offset, $length);    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strtolower* Make a string lowercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @package utf8* @subpackage strings*/function utf8_strtolower($str){    return mb_strtolower($str);}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strtoupper* Make a string uppercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @package utf8* @subpackage strings*/function utf8_strtoupper($str){    return mb_strtoupper($str);}
<?php/** * Parses and verifies the doc comments for classes. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ClassCommentSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_CommentParser_ClassCommentParser', true) === false) {    $error = 'Class PHP_CodeSniffer_CommentParser_ClassCommentParser not found';    throw new PHP_CodeSniffer_Exception($error);}require_once 'FileCommentSniff.php';if (class_exists('Joomla_Sniffs_Commenting_FileCommentSniff', true) === false) {    $error = 'Class Joomla_Sniffs_Commenting_FileCommentSniff not found';    throw new PHP_CodeSniffer_Exception($error);}/** * Parses and verifies the doc comments for classes. * * Verifies that : * <ul> *  <li>A doc comment exists.</li> *  <li>There is a blank newline after the short description.</li> *  <li>There is a blank newline between the long and short description.</li> *  <li>There is a blank newline between the long description and tags.</li> *  <li>Check the order of the tags.</li> *  <li>Check the indentation of each tag.</li> *  <li>Check required and optional tags and the format of their content.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Commenting_ClassCommentSniff extends Joomla_Sniffs_Commenting_FileCommentSniff{    /**     * Tags in correct order and related info.     *     * @var array     */    protected $tags = array(                       'version'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'is first',                                       ),                       'category'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @version (if used)',                                       ),                       'package'    => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @category (if used)',                                       ),                       'subpackage' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @package',                                       ),                       'author'    => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'is first',                                       ),                       'copyright'  => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @author (if used) or @subpackage (if used) or @package',                                       ),                       'license'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @copyright (if used)',                                       ),                       'link'       => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @version (if used)',                                       ),                       'see'        => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @link (if used)',                                       ),                       'since'      => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @see (if used) or @link (if used)',                                       ),                       'deprecated' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @since (if used) or @see (if used) or @link (if used)',                                       ),                );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(                T_CLASS,                T_INTERFACE,               );    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $this->currentFile = $phpcsFile;        $tokens    = $phpcsFile->getTokens();        $type      = strtolower($tokens[$stackPtr]['content']);        $errorData = array($type);        $find      = array(                      T_ABSTRACT,                      T_WHITESPACE,                      T_FINAL,                     );        // Extract the class comment docblock.        $commentEnd = $phpcsFile->findPrevious($find, ($stackPtr - 1), null, true);        if ($commentEnd !== false && $tokens[$commentEnd]['code'] === T_COMMENT) {            $error = 'You must use "/**" style comments for a %s comment';            $phpcsFile->addError($error, $stackPtr, 'WrongStyle', $errorData);            return;        } else if ($commentEnd === false            || $tokens[$commentEnd]['code'] !== T_DOC_COMMENT        ) {            $phpcsFile->addError('Missing %s doc comment', $stackPtr, 'Missing', $errorData);            return;        }        $commentStart = ($phpcsFile->findPrevious(T_DOC_COMMENT, ($commentEnd - 1), null, true) + 1);        $commentNext  = $phpcsFile->findPrevious(T_WHITESPACE, ($commentEnd + 1), $stackPtr, false, $phpcsFile->eolChar);        // Distinguish file and class comment.        $prevClassToken = $phpcsFile->findPrevious(T_CLASS, ($stackPtr - 1));        if ($prevClassToken === false) {            // This is the first class token in this file, need extra checks.            $prevNonComment = $phpcsFile->findPrevious(T_DOC_COMMENT, ($commentStart - 1), null, true);            if ($prevNonComment !== false) {                $prevComment = $phpcsFile->findPrevious(T_DOC_COMMENT, ($prevNonComment - 1));                if ($prevComment === false) {                    // There is only 1 doc comment between open tag and class token.                    $newlineToken = $phpcsFile->findNext(T_WHITESPACE, ($commentEnd + 1), $stackPtr, false, $phpcsFile->eolChar);                    if ($newlineToken !== false) {                        $newlineToken = $phpcsFile->findNext(                            T_WHITESPACE,                            ($newlineToken + 1),                            $stackPtr,                            false,                            $phpcsFile->eolChar                        );                        if ($newlineToken !== false) {                            // Blank line between the class and the doc block.                            // The doc block is most likely a file comment.                            $error = 'Missing %s doc comment';                            $phpcsFile->addError($error, ($stackPtr + 1), 'Missing', $errorData);                            return;                        }                    }//end if                }//end if            }//end if        }//end if        $comment = $phpcsFile->getTokensAsString(            $commentStart,            ($commentEnd - $commentStart + 1)        );        // Parse the class comment.docblock.        try {            $this->commentParser = new PHP_CodeSniffer_CommentParser_ClassCommentParser($comment, $phpcsFile);            $this->commentParser->parse();        } catch (PHP_CodeSniffer_CommentParser_ParserException $e) {            $line = ($e->getLineWithinComment() + $commentStart);            $phpcsFile->addError($e->getMessage(), $line, 'FailedParse');            return;        }        $comment = $this->commentParser->getComment();        if (is_null($comment) === true) {            $error = 'Doc comment is empty for %s';            $phpcsFile->addError($error, $commentStart, 'Empty', $errorData);            return;        }        // No extra newline before short description.        $short        = $comment->getShortComment();        $newlineCount = 0;        $newlineSpan  = strspn($short, $phpcsFile->eolChar);        if ($short !== '' && $newlineSpan > 0) {            $error = 'Extra newline(s) found before %s comment short description';            $phpcsFile->addError($error, ($commentStart + 1), 'SpacingBeforeShort', $errorData);        }        $newlineCount = (substr_count($short, $phpcsFile->eolChar) + 1);        // Exactly one blank line between short and long description.        $long = $comment->getLongComment();        if (empty($long) === false) {            $between        = $comment->getWhiteSpaceBetween();            $newlineBetween = substr_count($between, $phpcsFile->eolChar);            if ($newlineBetween !== 2) {                $error = 'There must be exactly one blank line between descriptions in %s comments';                $phpcsFile->addError($error, ($commentStart + $newlineCount + 1), 'SpacingAfterShort', $errorData);            }            $newlineCount += $newlineBetween;        }        // Exactly one blank line before tags.        $tags = $this->commentParser->getTagOrders();        if (count($tags) > 1) {            $newlineSpan = $comment->getNewlineAfter();            if ($newlineSpan !== 2) {                $error = 'There must be exactly one blank line before the tags in %s comments';                if ($long !== '') {                    $newlineCount += (substr_count($long, $phpcsFile->eolChar) - $newlineSpan + 1);                }                $phpcsFile->addError($error, ($commentStart + $newlineCount), 'SpacingBeforeTags', $errorData);                $short = rtrim($short, $phpcsFile->eolChar.' ');            }        }        // Check each tag.        $this->processTags($commentStart, $commentEnd);    }//end process()    /**     * Process the version tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processVersion($errorPos)    {        $version = $this->commentParser->getVersion();        if ($version !== null) {            $content = $version->getContent();            $matches = array();            if (empty($content) === true) {                $error = 'Content missing for @version tag in doc comment';                $this->currentFile->addError($error, $errorPos, 'EmptyVersion');            } else if ((strstr($content, 'Release:') === false)) {                $error = 'Invalid version "%s" in doc comment; consider "Release: <package_version>" instead';                $data  = array($content);                $this->currentFile->addWarning($error, $errorPos, 'InvalidVersion', $data);            }        }    }//end processVersion()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');JHtml::_('formbehavior.chosen', 'select');?><form action="<?php echo JRoute::_('index.php?option=com_messages'); ?>" method="post" name="adminForm" id="adminForm" class="form-horizontal">	<fieldset>		<div class="control-group">			<div class="control-label">				<?php echo JText::_('COM_MESSAGES_FIELD_USER_ID_FROM_LABEL'); ?>			</div>			<div class="controls">				<?php echo $this->item->get('from_user_name');?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo JText::_('COM_MESSAGES_FIELD_DATE_TIME_LABEL'); ?>			</div>			<div class="controls">				<?php echo JHtml::_('date', $this->item->date_time);?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo JText::_('COM_MESSAGES_FIELD_SUBJECT_LABEL'); ?>			</div>			<div class="controls">				<?php echo $this->item->subject;?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo JText::_('COM_MESSAGES_FIELD_MESSAGE_LABEL'); ?>			</div>			<div class="controls">				<?php echo $this->item->message; ?>			</div>		</div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="reply_id" value="<?php echo $this->item->message_id; ?>" />		<?php echo JHtml::_('form.token'); ?>	</fieldset></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-params');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform" >	<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endforeach; ?>		</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Update Controller * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since	2.5.4	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'default');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			$ftp = JClientHelper::setCredentialsFromRequest('ftp');			$view->ftp = &$ftp;			// Get the model for the view.			$model = $this->getModel($vName);			// Perform update source preference check and refresh update information			$model->applyUpdateSite();			$model->refreshUpdates();			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			$view->display();		}		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache Model * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheModelCache extends JModelList{	/**	 * An Array of CacheItems indexed by cache group ID	 *	 * @var Array	 */	protected $_data = array();	/**	 * Group total	 *	 * @var integer	 */	protected $_total = null;	/**	 * Pagination object	 *	 * @var object	 */	protected $_pagination = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$clientId = $this->getUserStateFromRequest($this->context.'.filter.client_id', 'filter_client_id', 0, 'int');		$this->setState('clientId', $clientId == 1 ? 1 : 0);		$client	= JApplicationHelper::getClientInfo($clientId);		$this->setState('client', $client);		parent::populateState('group', 'asc');	}	/**	 * Method to get cache data	 *	 * @return array	 */	public function getData()	{		if (empty($this->_data))		{			$cache = $this->getCache();			$data  = $cache->getAll();			if ($data != false)			{				$this->_data = $data;				$this->_total = count($data);				if ($this->_total)				{					// Apply custom ordering					$ordering 	= $this->getState('list.ordering');					$direction 	= ($this->getState('list.direction') == 'asc') ? 1 : -1;					jimport('joomla.utilities.arrayhelper');					$this->_data = JArrayHelper::sortObjects($data, $ordering, $direction);					// Apply custom pagination					if ($this->_total > $this->getState('list.limit') && $this->getState('list.limit'))					{						$this->_data = array_slice($this->_data, $this->getState('list.start'), $this->getState('list.limit'));					}				}			} else {				$this->_data = array();			}		}		return $this->_data;	}	/**	 * Method to get cache instance	 *	 * @return object	 */	public function getCache()	{		$conf = JFactory::getConfig();		$options = array(			'defaultgroup'	=> '',			'storage' 		=> $conf->get('cache_handler', ''),			'caching'		=> true,			'cachebase'		=> ($this->getState('clientId') == 1) ? JPATH_ADMINISTRATOR . '/cache' : $conf->get('cache_path', JPATH_SITE . '/cache')		);		$cache = JCache::getInstance('', $options);		return $cache;	}	/**	 * Method to get client data	 *	 * @return array	 */	public function getClient()	{		return $this->getState('client');	}	/**	 * Get the number of current Cache Groups	 *	 * @return  int	 */	public function getTotal()	{		if (empty($this->_total))		{			$this->_total = count($this->getData());		}		return $this->_total;	}	/**	 * Method to get a pagination object for the cache	 *	 * @return  integer	 */	public function getPagination()	{		if (empty($this->_pagination))		{			$this->_pagination = new JPagination($this->getTotal(), $this->getState('list.start'), $this->getState('list.limit'));		}		return $this->_pagination;	}	/**	 * Clean out a cache group as named by param.	 * If no param is passed clean all cache groups.	 *	 * @param String $group	 */	public function clean($group = '')	{		$cache = $this->getCache();		$cache->clean($group);	}	public function cleanlist($array)	{		foreach ($array as $group)		{			$this->clean($group);		}	}	public function purge()	{		$cache = JFactory::getCache('');		return $cache->gc();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_DEBUG_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('debug') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Language installer view * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.7 */class InstallerViewLanguages extends InstallerViewDefault{	/**	 * @var object item list	 */	protected $items;	/**	 * @var object pagination information	 */	protected $pagination;	/**	 * @var object model state	 */	protected $state;	/**	 * Display the view	 *	 * @param   null  $tpl  template to display	 *	 * @return mixed|void	 */	public function display($tpl = null)	{		// Get data from the model		$this->state      = $this->get('State');		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return void	 */	protected function addToolbar()	{		$canDo = InstallerHelper::getActions();		JToolBarHelper::title(JText::_('COM_INSTALLER_HEADER_' . $this->getName()), 'install.png');		if ($canDo->get('core.admin'))		{			JToolBarHelper::custom('languages.install', 'upload', 'upload', 'COM_INSTALLER_TOOLBAR_INSTALL', true, false);			JToolBarHelper::custom('languages.find', 'refresh', 'refresh', 'COM_INSTALLER_TOOLBAR_FIND_LANGUAGES', false, false);			JToolBarHelper::divider();			parent::addToolbar();			// TODO: this help screen will need to be created			JToolBarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_LANGUAGES');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages list actions controller. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesControllerLanguage extends JControllerForm{	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   int      $recordId  The primary key id for the item.	 * @param   string  $key        The name of the primary key variable.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $key = 'lang_id')	{		return parent::getRedirectToItemAppend($recordId, $key);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * RTF Parser class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerParserRtf extends FinderIndexerParser{	/**	 * Method to process RTF input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	protected function process($input)	{		// Remove embedded pictures.		$input = preg_replace('#{\\\pict[^}]*}#mis', '', $input);		// Remove control characters.		$input = str_replace(array('{', '}', "\\\n"), array(' ', ' ', "\n"), $input);		$input = preg_replace('#\\\([^;]+?);#mis', ' ', $input);		$input = preg_replace('#\\\[\'a-zA-Z0-9]+#mis', ' ', $input);		return $input;	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API References class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubRefs extends JGithubObject{	/**	 * Method to create an issue.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The name of the fully qualified reference.	 * @param   string  $sha   The SHA1 value to set this reference to.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $ref, $sha)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs';		// Build the request data.		$data = json_encode(			array(				'ref' => $ref,				'sha' => $sha			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a reference.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $ref    The reference to update.	 * @param   string  $sha    The SHA1 value to set the reference to.	 * @param   string  $force  Whether the update should be forced. Default to false.	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $ref, $sha, $force = false)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if ($force)		{			$data->force = true;		}		$data->sha = $sha;		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a reference.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The reference to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $ref)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list references for a repository.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $namespace  Optional sub-namespace to limit the returned references.	 * @param   integer  $page       Page to request	 * @param   integer  $limit      Number of results to return per page	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($user, $repo, $namespace = '', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs' . $namespace;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="create">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $displayData['item']->created, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Maps controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderControllerMaps extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Maps', $prefix = 'FinderModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_CONTACT_NO_ARTICLES'); ?> </p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm"><?php if ($this->params->get('show_pagination_limit')) : ?>	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	</fieldset><?php endif; ?>	<table class="category">		<?php if ($this->params->get('show_headings')) : ?>		<thead><tr>			<th class="item-title">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_CONTACT_EMAIL_NAME_LABEL', 'a.name', $listDirn, $listOrder); ?>			</th>			<?php if ($this->params->get('show_position_headings')) : ?>			<th class="item-position">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_POSITION', 'a.con_position', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_email_headings')) : ?>			<th class="item-email">				<?php echo JText::_('JGLOBAL_EMAIL'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_telephone_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_TELEPHONE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_mobile_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_MOBILE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_fax_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_FAX'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_suburb_headings')) : ?>			<th class="item-suburb">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_SUBURB', 'a.suburb', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_state_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_STATE', 'a.state', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_country_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_COUNTRY', 'a.country', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $item) : ?>				<?php if ($this->items[$i]->published == 0) : ?>					<tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>					<tr class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>					<td class="item-title">						<a href="<?php echo JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</td>					<?php if ($this->params->get('show_position_headings')) : ?>						<td class="item-position">							<?php echo $item->con_position; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_email_headings')) : ?>						<td class="item-email">							<?php echo $item->email_to; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_telephone_headings')) : ?>						<td class="item-phone">							<?php echo $item->telephone; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_mobile_headings')) : ?>						<td class="item-phone">							<?php echo $item->mobile; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_fax_headings')) : ?>					<td class="item-phone">						<?php echo $item->fax; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_suburb_headings')) : ?>					<td class="item-suburb">						<?php echo $item->suburb; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_state_headings')) : ?>					<td class="item-state">						<?php echo $item->state; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_country_headings')) : ?>					<td class="item-state">						<?php echo $item->country; ?>					</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php if ($this->params->get('show_pagination')) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>		<p class="counter">			<?php echo $this->pagination->getPagesCounter(); ?>		</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?>	<div>		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	</div></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Admin component * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminViewHelp extends JViewLegacy{	/**	 * @var string the search string	 */	protected $help_search = null;	/**	 * @var string the page to be viewed	 */	protected $page = null;	/**	 * @var string the iso language tag	 */	protected $lang_tag = null;	/**	 * @var array Table of contents	 */	protected $toc = null;	/**	 * @var string url for the latest version check	 */	protected $latest_version_check = 'http://www.joomla.org/download.html';	/**	 * @var string url for the start here link.	 */	protected $start_here = null;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->help_search			= $this->get('HelpSearch');		$this->page					= $this->get('Page');		$this->toc					= $this->get('Toc');		$this->lang_tag				= $this->get('LangTag');		$this->latest_version_check	= $this->get('LatestVersionCheck');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Setup the Toolbar	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_ADMIN_HELP'), 'help_header.png');	}}
<?php/** * Joomla_Sniffs_WhiteSpace_ObjectOperatorIndentSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ObjectOperatorIndentSniff.php 288251 2009-09-10 23:50:52Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_WhiteSpace_ObjectOperatorIndentSniff. * * Checks that object operators are indented 4 spaces if they are the first * thing on a line. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_ObjectOperatorIndentSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_OBJECT_OPERATOR);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile All the tokens found in the document.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Make sure this is the first object operator in a chain of them.        $varToken = $phpcsFile->findPrevious(T_WHITESPACE, ($stackPtr - 1), null, true);        if ($varToken === false || $tokens[$varToken]['code'] !== T_VARIABLE) {            return;        }        // Make sure this is a chained call.        $next = $phpcsFile->findNext(            T_OBJECT_OPERATOR,            ($stackPtr + 1),            null,            false,            null,            true        );        if ($next === false) {            // Not a chained call.            return;        }        // Determine correct indent.        for ($i = ($varToken - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$varToken]['line']) {                $i++;                break;            }        }        $requiredIndent = 0;        if ($i >= 0 && $tokens[$i]['code'] === T_WHITESPACE) {            $requiredIndent = strlen($tokens[$i]['content']);        }        $requiredIndent += 4;        // Determine the scope of the original object operator.        $origBrackets = null;        if (isset($tokens[$stackPtr]['nested_parenthesis']) === true) {            $origBrackets = $tokens[$stackPtr]['nested_parenthesis'];        }        $origConditions = null;        if (isset($tokens[$stackPtr]['conditions']) === true) {            $origConditions = $tokens[$stackPtr]['conditions'];        }        // Check indentation of each object operator in the chain.        // If the first object operator is on a different line than        // the variable, make sure we check its indentation too.        if ($tokens[$stackPtr]['line'] > $tokens[$varToken]['line']) {            $next = $stackPtr;        }        while ($next !== false) {            // Make sure it is in the same scope, otherwise dont check indent.            $brackets = null;            if (isset($tokens[$next]['nested_parenthesis']) === true) {                $brackets = $tokens[$next]['nested_parenthesis'];            }            $conditions = null;            if (isset($tokens[$next]['conditions']) === true) {                $conditions = $tokens[$next]['conditions'];            }            if ($origBrackets === $brackets && $origConditions === $conditions) {                // Make sure it starts a line, otherwise dont check indent.                $indent = $tokens[($next - 1)];                if ($indent['code'] === T_WHITESPACE) {                    if ($indent['line'] === $tokens[$next]['line']) {                        $foundIndent = strlen($indent['content']);                    } else {                        $foundIndent = 0;                    }                    if ($foundIndent !== $requiredIndent) {// TODO AJE Allow for tab indents instead of spaces//                        $error = 'Object operator not indented correctly; expected %s spaces but found %s';//                        $data  = array(//                                  $requiredIndent,//                                  $foundIndent,//                                 );//                        $phpcsFile->addError($error, $next, 'Incorrect', $data);                    }                }                // It can't be the last thing on the line either.                $content = $phpcsFile->findNext(T_WHITESPACE, ($next + 1), null, true);                if ($tokens[$content]['line'] !== $tokens[$next]['line']) {                    $error = 'Object operator must be at the start of the line, not the end';                    $phpcsFile->addError($error, $next, 'StartOfLine');                }            }//end if            $next = $phpcsFile->findNext(                T_OBJECT_OPERATOR,                ($next + 1),                null,                false,                null,                true            );        }//end while    }//end process()}//end class?>
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class adjust the brightness of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterBrightness extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			// @codeCoverageIgnoreStart			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Validate that the brightness value exists and is an integer.		if (!isset($options[IMG_FILTER_BRIGHTNESS]) || !is_int($options[IMG_FILTER_BRIGHTNESS]))		{			throw new InvalidArgumentException('No valid brightness value was given.  Expected integer.');		}		// Perform the brightness filter.		imagefilter($this->handle, IMG_FILTER_BRIGHTNESS, $options[IMG_FILTER_BRIGHTNESS]);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Content.pagenavigation * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="pager pagenav"><?php if ($row->prev) : ?>	<li class="previous">		<a href="<?php echo $row->prev; ?>" rel="prev"><?php echo JText::_('JGLOBAL_LT') . $pnSpace . JText::_('JPREV'); ?></a>	</li><?php endif; ?><?php if ($row->next) : ?>	<li class="next">		<a href="<?php echo $row->next; ?>" rel="next"><?php echo JText::_('JNEXT') . $pnSpace . JText::_('JGLOBAL_GT'); ?></a>	</li><?php endif; ?></ul>
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');/** * A Unified Diff Format Patcher class * * @package     Joomla.Platform * @subpackage  FileSystem * * @link        http://sourceforge.net/projects/phppatcher/ This has been derived from the PhpPatcher version 0.1.1 written by Giuseppe Mazzotta * @since       12.1 */class JFilesystemPatcher{	/**	 * Regular expression for searching source files	 */	const SRC_FILE = '/^---\\s+(\\S+)\s+\\d{1,4}-\\d{1,2}-\\d{1,2}\\s+\\d{1,2}:\\d{1,2}:\\d{1,2}(\\.\\d+)?\\s+(\+|-)\\d{4}/A';	/**	 * Regular expression for searching destination files	 */	const DST_FILE = '/^\\+\\+\\+\\s+(\\S+)\s+\\d{1,4}-\\d{1,2}-\\d{1,2}\\s+\\d{1,2}:\\d{1,2}:\\d{1,2}(\\.\\d+)?\\s+(\+|-)\\d{4}/A';	/**	 * Regular expression for searching hunks of differences	 */	const HUNK = '/@@ -(\\d+)(,(\\d+))?\\s+\\+(\\d+)(,(\\d+))?\\s+@@($)/A';	/**	 * Regular expression for splitting lines	 */	const SPLIT = '/(\r\n)|(\r)|(\n)/';	/**	 * @var  array  sources files	 *	 * @since   12.1	 */	protected $sources = array();	/**	 * @var  array  destination files	 *	 * @since   12.1	 */	protected $destinations = array();	/**	 * @var  array  removal files	 *	 * @since   12.1	 */	protected $removals = array();	/**	 * @var  array  patches	 *	 * @since   12.1	 */	protected $patches = array();	/**	 * @var  array  instance of this class	 *	 * @since   12.1	 */	protected static $instance;	/**	 * Constructor	 *	 * The constructor is protected to force the use of JFilesystemPatcher::getInstance()	 *	 * @since   12.1	 */	protected function __construct()	{	}	/**	 * Method to get a patcher	 *	 * @return  JFilesystemPatcher  an instance of the patcher	 *	 * @since   12.1	 */	public static function getInstance()	{		if (!isset(static::$instance))		{			static::$instance = new static;		}		return static::$instance;	}	/**	 * Reset the pacher	 *	 * @return  JFilesystemPatcher  This object for chaining	 */	public function reset()	{		$this->sources = array();		$this->destinations = array();		$this->removals = array();		$this->patches = array();		return $this;	}	/**	 * Apply the patches	 *	 * @throw  RuntimeException	 *	 * @return integer the number of files patched	 */	public function apply()	{		foreach ($this->patches as $patch)		{			// Separate the input into lines			$lines = self::splitLines($patch['udiff']);			// Loop for each header			while (self::findHeader($lines, $src, $dst))			{				$done = false;				if ($patch['strip'] === null)				{					$src = $patch['root'] . preg_replace('#^([^/]*/)*#', '', $src);					$dst = $patch['root'] . preg_replace('#^([^/]*/)*#', '', $dst);				}				else				{					$src = $patch['root'] . preg_replace('#^([^/]*/){' . (int) $patch['strip'] . '}#', '', $src);					$dst = $patch['root'] . preg_replace('#^([^/]*/){' . (int) $patch['strip'] . '}#', '', $dst);				}				// Loop for each hunk of differences				while (self::findHunk($lines, $src_line, $src_size, $dst_line, $dst_size))				{					$done = true;					// Apply the hunk of differences					$this->applyHunk($lines, $src, $dst, $src_line, $src_size, $dst_line, $dst_size);				}				// If no modifications were found, throw an exception				if (!$done)				{					throw new RuntimeException('Invalid Diff');				}			}		}		// Initialize the counter		$done = 0;		// Patch each destination file		foreach ($this->destinations as $file => $content)		{			if (JFile::write($file, implode("\n", $content)))			{				if (isset($this->sources[$file]))				{					$this->sources[$file] = $content;				}				$done++;			}		}		// Remove each removed file		foreach ($this->removals as $file)		{			if (JFile::delete($file))			{				if (isset($this->sources[$file]))				{					unset($this->sources[$file]);				}				$done++;			}		}		// Clear the destinations cache		$this->destinations = array();		// Clear the removals		$this->removals = array();		// Clear the patches		$this->patches = array();		return $done;	}	/**	 * Add a unified diff file to the patcher	 *	 * @param   string  $filename  Path to the unified diff file	 * @param   string  $root      The files root path	 * @param   string  $strip     The number of '/' to strip	 *	 * @return	JFilesystemPatch $this for chaining	 *	 * @since   12.1	 */	public function addFile($filename, $root = JPATH_BASE, $strip = 0)	{		return $this->add(file_get_contents($filename), $root, $strip);	}	/**	 * Add a unified diff string to the patcher	 *	 * @param   string  $udiff  Unified diff input string	 * @param   string  $root   The files root path	 * @param   string  $strip  The number of '/' to strip	 *	 * @return	JFilesystemPatch $this for chaining	 *	 * @since   12.1	 */	public function add($udiff, $root = JPATH_BASE, $strip = 0)	{		$this->patches[] = array(			'udiff' => $udiff,			'root' => isset($root) ? rtrim($root, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR : '',			'strip' => $strip		);		return $this;	}	/**	 * Separate CR or CRLF lines	 *	 * @param   string  $data  Input string	 *	 * @return  array  The lines of the inputdestination file	 *	 * @since   12.1	 */	protected static function splitLines($data)	{		return preg_split(self::SPLIT, $data);	}	/**	 * Find the diff header	 *	 * The internal array pointer of $lines is on the next line after the finding	 *	 * @param   array   &$lines  The udiff array of lines	 * @param   string  &$src    The source file	 * @param   string  &$dst    The destination file	 *	 * @return  boolean  TRUE in case of success, FALSE in case of failure	 *	 * @throw  RuntimeException	 */	protected static function findHeader(&$lines, &$src, &$dst)	{		// Get the current line		$line = current($lines);		// Search for the header		while ($line !== false && !preg_match(self::SRC_FILE, $line, $m))		{			$line = next($lines);		}		if ($line === false)		{			// No header found, return false			return false;		}		else		{			// Set the source file			$src = $m[1];			// Advance to the next line			$line = next($lines);			if ($line === false)			{				throw new RuntimeException('Unexpected EOF');			}			// Search the destination file			if (!preg_match(self::DST_FILE, $line, $m))			{				throw new RuntimeException('Invalid Diff file');			}			// Set the destination file			$dst = $m[1];			// Advance to the next line			if (next($lines) === false)			{				throw new RuntimeException('Unexpected EOF');			}			return true;		}	}	/**	 * Find the next hunk of difference	 *	 * The internal array pointer of $lines is on the next line after the finding	 *	 * @param   array   &$lines     The udiff array of lines	 * @param   string  &$src_line  The beginning of the patch for the source file	 * @param   string  &$src_size  The size of the patch for the source file	 * @param   string  &$dst_line  The beginning of the patch for the destination file	 * @param   string  &$dst_size  The size of the patch for the destination file	 *	 * @return  boolean  TRUE in case of success, false in case of failure	 *	 * @throw  RuntimeException	 */	protected static function findHunk(&$lines, &$src_line, &$src_size, &$dst_line, &$dst_size)	{		$line = current($lines);		if (preg_match(self::HUNK, $line, $m))		{			$src_line = (int) $m[1];			if ($m[3] === '')			{				$src_size = 1;			}			else			{				$src_size = (int) $m[3];			}			$dst_line = (int) $m[4];			if ($m[6] === '')			{				$dst_size = 1;			}			else			{				$dst_size = (int) $m[6];			}			if (next($lines) === false)			{				throw new RuntimeException('Unexpected EOF');			}			return true;		}		else		{			return false;		}	}	/**	 * Apply the patch	 *	 * @param   array   &$lines    The udiff array of lines	 * @param   string  $src       The source file	 * @param   string  $dst       The destination file	 * @param   string  $src_line  The beginning of the patch for the source file	 * @param   string  $src_size  The size of the patch for the source file	 * @param   string  $dst_line  The beginning of the patch for the destination file	 * @param   string  $dst_size  The size of the patch for the destination file	 *	 * @return  void	 *	 * @throw  RuntimeException	 */	protected function applyHunk(&$lines, $src, $dst, $src_line, $src_size, $dst_line, $dst_size)	{		$src_line--;		$dst_line--;		$line = current($lines);		// Source lines (old file)		$source = array();		// New lines (new file)		$destin = array();		$src_left = $src_size;		$dst_left = $dst_size;		do		{			if (!isset($line[0]))			{				$source[] = '';				$destin[] = '';				$src_left--;				$dst_left--;			}			elseif ($line[0] == '-')			{				if ($src_left == 0)				{					throw new RuntimeException(JText::sprintf('JLIB_FILESYSTEM_PATCHER_REMOVE_LINE', key($lines)));				}				$source[] = substr($line, 1);				$src_left--;			}			elseif ($line[0] == '+')			{				if ($dst_left == 0)				{					throw new RuntimeException(JText::sprintf('JLIB_FILESYSTEM_PATCHER_ADD_LINE', key($lines)));				}				$destin[] = substr($line, 1);				$dst_left--;			}			elseif ($line != '\\ No newline at end of file')			{				$line = substr($line, 1);				$source[] = $line;				$destin[] = $line;				$src_left--;				$dst_left--;			}			if ($src_left == 0 && $dst_left == 0)			{				// Now apply the patch, finally!				if ($src_size > 0)				{					$src_lines = & $this->getSource($src);					if (!isset($src_lines))					{						throw new RuntimeException(JText::sprintf('JLIB_FILESYSTEM_PATCHER_UNEXISING_SOURCE', $src));					}				}				if ($dst_size > 0)				{					if ($src_size > 0)					{						$dst_lines = & $this->getDestination($dst, $src);						$src_bottom = $src_line + count($source);						for ($l = $src_line;$l < $src_bottom;$l++)						{							if ($src_lines[$l] != $source[$l - $src_line])							{								throw new RuntimeException(JText::sprintf('JLIB_FILESYSTEM_PATCHER_FAILED_VERIFY', $src, $l));							}						}						array_splice($dst_lines, $dst_line, count($source), $destin);					}					else					{						$this->destinations[$dst] = $destin;					}				}				else				{					$this->removals[] = $src;				}				next($lines);				return;			}			$line = next($lines);		}		while ($line !== false);		throw new RuntimeException('Unexpected EOF');	}	/**	 * Get the lines of a source file	 *	 * @param   string  $src  The path of a file	 *	 * @return  array  The lines of the source file	 *	 * @since   12.1	 */	protected function &getSource($src)	{		if (!isset($this->sources[$src]))		{			if (is_readable($src))			{				$this->sources[$src] = self::splitLines(file_get_contents($src));			}			else			{				$this->sources[$src] = null;			}		}		return $this->sources[$src];	}	/**	 * Get the lines of a destination file	 *	 * @param   string  $dst  The path of a destination file	 * @param   string  $src  The path of a source file	 *	 * @return  array  The lines of the destination file	 *	 * @since   12.1	 */	protected function &getDestination($dst, $src)	{		if (!isset($this->destinations[$dst]))		{			$this->destinations[$dst] = $this->getSource($src);		}		return $this->destinations[$dst];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once dirname(dirname(__DIR__)) . '/helper/component.php';/** * View for the component configuration * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.5 */class ConfigViewComponent extends JViewLegacy{	/**	 * Associates the options screen help key with the component name.	 *	 * @var    array	 * @since  3.1	 */	protected $helpScreenArray = array(		'com_banners' => 'JHELP_COMPONENTS_BANNER_MANAGER_OPTIONS',		'com_cache' => 'JHELP_COMPONENTS_CACHE_MANAGER_SETTINGS',		'com_checkin' => 'JHELP_COMPONENTS_CHECK-IN_CONFIGURATION',		'com_contact' => 'JHELP_COMPONENTS_CONTACT_MANAGER_OPTIONS',		'com_content' => 'JHELP_COMPONENTS_ARTICLE_MANAGER_OPTIONS',		'com_finder' => 'JHELP_COMPONENTS_SMART_SEARCH_CONFIGURATION',		'com_installer' => 'JHELP_COMPONENTS_INSTALLER_CONFIGURATION',		'com_joomlaupdate' => 'JHELP_COMPONENTS_JOOMLA_UPDATE_CONFIGURATION',		'com_languages' => 'JHELP_COMPONENTS_LANGUAGE_MANAGER_OPTIONS',		'com_media' => 'JHELP_COMPONENTS_MEDIA_MANAGER_OPTIONS',		'com_menus' => 'JHELP_COMPONENTS_MENUS_CONFIGURATION',		'com_messages' => 'JHELP_COMPONENTS_MESSAGES_CONFIGURATION',		'com_modules' => 'JHELP_COMPONENTS_MODULE_MANAGER_OPTIONS',		'com_newsfeeds' => 'JHELP_COMPONENTS_NEWS_FEED_MANAGER_OPTIONS',		'com_plugins' => 'JHELP_COMPONENTS_PLUG-IN_MANAGER_OPTIONS',		'com_redirect' => 'JHELP_COMPONENTS_REDIRECT_MANAGER_OPTIONS',		'com_search' => 'JHELP_COMPONENTS_SEARCH_MANAGER_OPTIONS',		'com_tags' => 'JHELP_COMPONENTS_TAGS_MANAGER_OPTIONS',		'com_templates' => 'JHELP_COMPONENTS_TEMPLATE_MANAGER_OPTIONS',		'com_users' => 'JHELP_COMPONENTS_USERS_CONFIGURATION',		'com_weblinks' => 'JHELP_COMPONENTS_WEB_LINKS_MANAGER_OPTIONS',	);	/**	 * Execute and display a template script.	 *	 * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.	 *	 * @return  mixed  A string if successful, otherwise a Error object.	 *	 * @since   1.5	 */	public function display($tpl = null)	{		$form		= $this->get('Form');		$component	= $this->get('Component');		$user       = JFactory::getUser();		$app        = JFactory::getApplication();		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Bind the form to the data.		if ($form && $component->params)		{			$form->bind($component->params);		}		$this->form = &$form;		$this->component = &$component;		$this->components = ConfigHelperComponent::getComponentsWithConfig();		ConfigHelperComponent::loadLanguageForComponents($this->components);		$this->userIsSuperAdmin = $user->authorise('core.admin');		$this->currentComponent = JFactory::getApplication()->input->get('component');		$this->return = $app->input->get('return', '', 'base64');		$this->addToolbar();		parent::display($tpl);		$app->input->set('hidemainmenu', true);	}	/**	 * Add the page title and toolbar.	 *	 * @since   3.0	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_($this->component->option . '_configuration'), 'config.png');		JToolbarHelper::apply('component.apply');		JToolbarHelper::save('component.save');		JToolbarHelper::divider();		JToolbarHelper::cancel('component.cancel');		JToolbarHelper::divider();		// Get the correct help key for this screen		if (isset($this->helpScreenArray[$this->component->option]))		{			JToolbarHelper::help($this->helpScreenArray[$this->component->option]);		}		else		{			JToolbarHelper::help('JHELP_SITE_GLOBAL_CONFIGURATION');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages master display controller. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/messages.php';		$view   = $this->input->get('view', 'messages');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'message' && $layout == 'edit' && !$this->checkEditId('com_messages.edit.message', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Load the submenu.		MessagesHelper::addSubmenu($this->input->get('view', 'messages'));		parent::display();	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** Replacement for str_pad. $padStr may contain multi-byte characters.** @author Oliver Saunders <oliver (a) osinternetservices.com>* @param string $input* @param int $length* @param string $padStr* @param int $type ( same constants as str_pad )* @return string* @see http://www.php.net/str_pad* @see utf8_substr* @package utf8* @subpackage strings*/function utf8_str_pad($input, $length, $padStr = ' ', $type = STR_PAD_RIGHT) {    $inputLen = utf8_strlen($input);    if ($length <= $inputLen) {        return $input;    }    $padStrLen = utf8_strlen($padStr);    $padLen = $length - $inputLen;    if ($type == STR_PAD_RIGHT) {        $repeatTimes = ceil($padLen / $padStrLen);        return utf8_substr($input . str_repeat($padStr, $repeatTimes), 0, $length);    }    if ($type == STR_PAD_LEFT) {        $repeatTimes = ceil($padLen / $padStrLen);        return utf8_substr(str_repeat($padStr, $repeatTimes), 0, floor($padLen)) . $input;    }    if ($type == STR_PAD_BOTH) {        $padLen/= 2;        $padAmountLeft = floor($padLen);        $padAmountRight = ceil($padLen);        $repeatTimesLeft = ceil($padAmountLeft / $padStrLen);        $repeatTimesRight = ceil($padAmountRight / $padStrLen);        $paddingLeft = utf8_substr(str_repeat($padStr, $repeatTimesLeft), 0, $padAmountLeft);        $paddingRight = utf8_substr(str_repeat($padStr, $repeatTimesRight), 0, $padAmountLeft);        return $paddingLeft . $input . $paddingRight;    }    trigger_error('utf8_str_pad: Unknown padding type (' . $type . ')',E_USER_ERROR);}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API References class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.3 */class JGithubStatuses extends JGithubObject{	/**	 * Method to create a status.	 *	 * @param   string  $user         The name of the owner of the GitHub repository.	 * @param   string  $repo         The name of the GitHub repository.	 * @param   string  $sha          The SHA1 value for which to set the status.	 * @param   string  $state        The state (pending, success, error or failure).	 * @param   string  $targetUrl    Optional target URL.	 * @param   string  $description  Optional description for the status.	 *	 * @return  object	 *	 * @since   12.3	 */	public function create($user, $repo, $sha, $state, $targetUrl = null, $description = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/statuses/' . $sha;		if (!in_array($state, array('pending', 'success', 'error', 'failure')))		{			throw new InvalidArgumentException('State must be one of pending, success, error or failure.');		}		// Build the request data.		$data = array(			'state' => $state		);		if (!is_null($targetUrl))		{			$data['target_url'] = $targetUrl;		}		if (!is_null($description))		{			$data['description'] = $description;		}		// Send the request.		$response = $this->client->post($this->fetchUrl($path), json_encode($data));		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list statuses for an SHA.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $sha   SHA1 for which to get the statuses.	 *	 * @return  array	 *	 * @since   12.3	 */	public function getList($user, $repo, $sha)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/statuses/' . $sha;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.beez5 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>		<?php if ($this->params->get('categories_description')) : ?>			<?php echo  JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_content.categories'); ?>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc">					<?php  echo JHtml::_('content.prepare', $this->parent->description, '', 'com_content.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?><?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware replacement for ltrim()* Note: you only need to use this if you are supplying the charlist* optional arg and it contains UTF-8 characters. Otherwise ltrim will* work normally on a UTF-8 string* @author Andreas Gohr <andi@splitbrain.org>* @see http://www.php.net/ltrim* @see http://dev.splitbrain.org/view/darcs/dokuwiki/inc/utf8.php* @return string* @package utf8* @subpackage strings*/function utf8_ltrim( $str, $charlist = FALSE ) {    if($charlist === FALSE) return ltrim($str);    //quote charlist for use in a characterclass    $charlist = preg_replace('!([\\\\\\-\\]\\[/^])!','\\\${1}',$charlist);    return preg_replace('/^['.$charlist.']+/u','',$str);}//---------------------------------------------------------------/*** UTF-8 aware replacement for rtrim()* Note: you only need to use this if you are supplying the charlist* optional arg and it contains UTF-8 characters. Otherwise rtrim will* work normally on a UTF-8 string* @author Andreas Gohr <andi@splitbrain.org>* @see http://www.php.net/rtrim* @see http://dev.splitbrain.org/view/darcs/dokuwiki/inc/utf8.php* @return string* @package utf8* @subpackage strings*/function utf8_rtrim( $str, $charlist = FALSE ) {    if($charlist === FALSE) return rtrim($str);    //quote charlist for use in a characterclass    $charlist = preg_replace('!([\\\\\\-\\]\\[/^])!','\\\${1}',$charlist);    return preg_replace('/['.$charlist.']+$/u','',$str);}//---------------------------------------------------------------/*** UTF-8 aware replacement for trim()* Note: you only need to use this if you are supplying the charlist* optional arg and it contains UTF-8 characters. Otherwise trim will* work normally on a UTF-8 string* @author Andreas Gohr <andi@splitbrain.org>* @see http://www.php.net/trim* @see http://dev.splitbrain.org/view/darcs/dokuwiki/inc/utf8.php* @return string* @package utf8* @subpackage strings*/function utf8_trim( $str, $charlist = FALSE ) {    if($charlist === FALSE) return trim($str);    return utf8_ltrim(utf8_rtrim($str, $charlist), $charlist);}
<?php/** * @package     Joomla.Site * @subpackage  mod_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$params = ModWrapperHelper::getParams($params);$load	= $params->get('load');$url	= htmlspecialchars($params->get('url'));$target = htmlspecialchars($params->get('target'));$width	= htmlspecialchars($params->get('width'));$height = htmlspecialchars($params->get('height'));$scroll = htmlspecialchars($params->get('scrolling'));$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));$frameborder = htmlspecialchars($params->get('frameborder'));require JModuleHelper::getLayoutPath('mod_wrapper', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$id      = empty($displayData['id']) ? '' : (' id="' . $displayData['id'] . '"');$target  = empty($displayData['target']) ? '' : (' target="' . $displayData['target'] . '"');$onclick = empty($displayData['onclick']) ? '' : (' onclick="' . $displayData['onclick'] . '"');$title   = empty($displayData['title']) ? '' : (' title="' . $this->escape($displayData['title']) . '"');$text    = empty($displayData['text']) ? '' : ('<span>' . $displayData['text'] . '</span>')?><div class="quickicon-wrapper"<?php echo $id; ?>>	<div class="icon">		<a href="<?php echo $displayData['link']; ?>"<?php echo $target . $onclick . $title; ?>>			<?php echo JHtml::_('image', empty($displayData['icon']) ? '' : $displayData['icon'], empty($displayData['alt']) ? null : htmlspecialchars($displayData['alt']), null, true); ?>			<?php echo $text; ?>		</a>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Indexer model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelIndexer extends JModelLegacy{}
<?php/** * @package     Joomla.Libraries * @subpackage  Editor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JEditor class to handle WYSIWYG editors * * @package     Joomla.Libraries * @subpackage  Editor * @since       1.5 */class JEditor extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  1.5	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  1.5	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  1.5	 */	protected $_methods = array();	/**	 * Editor Plugin object	 *	 * @var    object	 * @since  1.5	 */	protected $_editor = null;	/**	 * Editor Plugin name	 *	 * @var    string	 * @since  1.5	 */	protected $_name = null;	/**	 * Object asset	 *	 * @var    string	 * @since  1.6	 */	protected $asset = null;	/**	 * Object author	 *	 * @var    string	 * @since  1.6	 */	protected $author = null;	/**	 * @var    array  JEditor instances container.	 * @since  2.5	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   string  $editor  The editor name	 */	public function __construct($editor = 'none')	{		$this->_name = $editor;	}	/**	 * Returns the global Editor object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $editor  The editor to use.	 *	 * @return  JEditor The Editor object.	 *	 * @since   1.5	 */	public static function getInstance($editor = 'none')	{		$signature = serialize($editor);		if (empty(self::$instances[$signature]))		{			self::$instances[$signature] = new JEditor($editor);		}		return self::$instances[$signature];	}	/**	 * Get the state of the JEditor object	 *	 * @return  mixed    The state of the object.	 *	 * @since   1.5	 */	public function getState()	{		return $this->_state;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   1.5	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEditor))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   1.5	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}	/**	 * Initialise the editor	 *	 * @return  void	 *	 * @since   1.5	 */	public function initialise()	{		// Check if editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		$args['event'] = 'onInit';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				// @todo remove code: $return .= $result;				$return = $result;			}		}		$document = JFactory::getDocument();		$document->addCustomTag($return);	}	/**	 * Display the editor area.	 *	 * @param   string   $name     The control name.	 * @param   string   $html     The contents of the text area.	 * @param   string   $width    The width of the text area (px or %).	 * @param   string   $height   The height of the text area (px or %).	 * @param   integer  $col      The number of columns for the textarea.	 * @param   integer  $row      The number of rows for the textarea.	 * @param   boolean  $buttons  True and the editor buttons will be displayed.	 * @param   string   $id       An optional ID for the textarea (note: since 1.6). If not supplied the name is used.	 * @param   string   $asset    The object asset	 * @param   object   $author   The author.	 * @param   array    $params   Associative array of editor parameters.	 *	 * @return  string	 *	 * @since   1.5	 */	public function display($name, $html, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null, $params = array())	{		$this->asset = $asset;		$this->author = $author;		$this->_loadEditor($params);		// Check whether editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		// Backwards compatibility. Width and height should be passed without a semicolon from now on.		// If editor plugins need a unit like "px" for CSS styling, they need to take care of that		$width = str_replace(';', '', $width);		$height = str_replace(';', '', $height);		$return = null;		$args['name'] = $name;		$args['content'] = $html;		$args['width'] = $width;		$args['height'] = $height;		$args['col'] = $col;		$args['row'] = $row;		$args['buttons'] = $buttons;		$args['id'] = $id ? $id : $name;		$args['event'] = 'onDisplay';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Save the editor content	 *	 * @param   string  $editor  The name of the editor control	 *	 * @return  string	 *	 * @since   1.5	 */	public function save($editor)	{		$this->_loadEditor();		// Check whether editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		$args[] = $editor;		$args['event'] = 'onSave';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Get the editor contents	 *	 * @param   string  $editor  The name of the editor control	 *	 * @return  string	 *	 * @since   1.5	 */	public function getContent($editor)	{		$this->_loadEditor();		$args['name'] = $editor;		$args['event'] = 'onGetContent';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Set the editor contents	 *	 * @param   string  $editor  The name of the editor control	 * @param   string  $html    The contents of the text area	 *	 * @return  string	 *	 * @since   1.5	 */	public function setContent($editor, $html)	{		$this->_loadEditor();		$args['name'] = $editor;		$args['html'] = $html;		$args['event'] = 'onSetContent';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Get the editor extended buttons (usually from plugins)	 *	 * @param   string  $editor   The name of the editor.	 * @param   mixed   $buttons  Can be boolean or array, if boolean defines if the buttons are	 *                            displayed, if array defines a list of buttons not to show.	 *	 * @return  array	 *	 * @since   1.5	 */	public function getButtons($editor, $buttons = true)	{		$result = array();		if (is_bool($buttons) && !$buttons)		{			return $result;		}		// Get plugins		$plugins = JPluginHelper::getPlugin('editors-xtd');		foreach ($plugins as $plugin)		{			if (is_array($buttons) && in_array($plugin->name, $buttons))			{				continue;			}			JPluginHelper::importPlugin('editors-xtd', $plugin->name, false);			$className = 'plgButton' . $plugin->name;			if (class_exists($className))			{				$plugin = new $className($this, (array) $plugin);			}			// Try to authenticate			if ($temp = $plugin->onDisplay($editor, $this->asset, $this->author))			{				$result[] = $temp;			}		}		return $result;	}	/**	 * Load the editor	 *	 * @param   array  $config  Associative array of editor config paramaters	 *	 * @return  mixed	 *	 * @since   1.5	 */	protected function _loadEditor($config = array())	{		// Check whether editor is already loaded		if (!is_null(($this->_editor)))		{			return;		}		// Build the path to the needed editor plugin		$name = JFilterInput::getInstance()->clean($this->_name, 'cmd');		$path = JPATH_PLUGINS . '/editors/' . $name . '.php';		if (!is_file($path))		{			$path = JPATH_PLUGINS . '/editors/' . $name . '/' . $name . '.php';			if (!is_file($path))			{				JLog::add(JText::_('JLIB_HTML_EDITOR_CANNOT_LOAD'), JLog::WARNING, 'jerror');				return false;			}		}		// Require plugin file		require_once $path;		// Get the plugin		$plugin = JPluginHelper::getPlugin('editors', $this->_name);		$params = new JRegistry;		$params->loadString($plugin->params);		$params->loadArray($config);		$plugin->params = $params;		// Build editor plugin classname		$name = 'plgEditor' . $this->_name;		if ($this->_editor = new $name($this, (array) $plugin))		{			// Load plugin parameters			$this->initialise();			JPluginHelper::importPlugin('editors-xtd');		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/mailto.php';require_once JPATH_COMPONENT.'/controller.php';$controller = JControllerLegacy::getInstance('Mailto');$controller->registerDefaultTask('mailto');$controller->execute(JFactory::getApplication()->input->get('task'));//$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  mod_footer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="footer1<?php echo $moduleclass_sfx ?>"><?php echo $lineone; ?></div><div class="footer2<?php echo $moduleclass_sfx ?>"><?php echo JText::_('MOD_FOOTER_LINE2'); ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PDO database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorPdo extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			return $this->cursor->rowCount();		}		else		{			return 0;		}	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			return $this->cursor->fetchObject($this->class);		}		else		{			return false;		}	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			$this->cursor->closeCursor();		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContentHelper', JPATH_ADMINISTRATOR . '/components/com_content/helpers/content.php');JLoader::register('CategoryHelperAssociation', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/association.php');/** * Content Component Association Helper * * @package     Joomla.Site * @subpackage  com_content * @since       3.0 */abstract class ContentHelperAssociation extends CategoryHelperAssociation{	/**	 * Method to get the associations for a given item	 *	 * @param   integer  $id    Id of the item	 * @param   string   $view  Name of the view	 *	 * @return  array   Array of associations for the item	 *	 * @since  3.0	 */	public static function getAssociations($id = 0, $view = null)	{		jimport('helper.route', JPATH_COMPONENT_SITE);		$app = JFactory::getApplication();		$jinput = $app->input;		$view = is_null($view) ? $jinput->get('view') : $view;		$id = empty($id) ? $jinput->getInt('id') : $id;		if ($view == 'article')		{			if ($id)			{				$associations = JLanguageAssociations::getAssociations('com_content', '#__content', 'com_content.item', $id);				$return = array();				foreach ($associations as $tag => $item)				{					$return[$tag] = ContentHelperRoute::getArticleRoute($item->id, $item->catid, $item->language);				}				return $return;			}		}		if ($view == 'category' || $view == 'categories')		{			return self::getCategoryAssociations($id, 'com_content');		}		return array();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_MESSAGES_ADD'),			'index.php?option=com_messages&view=message&layout=edit',			$vName == 'message'		);		JHtmlSidebar::addEntry(			JText::_('COM_MESSAGES_READ'),			'index.php?option=com_messages',			$vName == 'messages'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$actions = JAccess::getActions('com_messages');		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, 'com_messages'));		}		return $result;	}	/**	 * Get a list of filter options for the state of a module.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getStateOptions()	{		// Build the filter options.		$options	= array();		$options[]	= JHtml::_('select.option',	'1',	JText::_('COM_MESSAGES_OPTION_READ'));		$options[]	= JHtml::_('select.option',	'0',	JText::_('COM_MESSAGES_OPTION_UNREAD'));		$options[]	= JHtml::_('select.option',	'-2',	JText::_('JTRASHED'));		return $options;	}}
<?php/*~ class.smtp.php.---------------------------------------------------------------------------.|  Software: PHPMailer - PHP email class                                    ||   Version: 5.2.2                                                          ||      Site: https://code.google.com/a/apache-extras.org/p/phpmailer/       || ------------------------------------------------------------------------- ||     Admin: Jim Jagielski (project admininistrator)                        ||   Authors: Andy Prevost (codeworxtech) codeworxtech@users.sourceforge.net ||          : Marcus Bointon (coolbru) coolbru@users.sourceforge.net         ||          : Jim Jagielski (jimjag) jimjag@gmail.com                        ||   Founder: Brent R. Matzelle (original founder)                           || Copyright (c) 2010-2012, Jim Jagielski. All Rights Reserved.              || Copyright (c) 2004-2009, Andy Prevost. All Rights Reserved.               || Copyright (c) 2001-2003, Brent R. Matzelle                                || ------------------------------------------------------------------------- ||   License: Distributed under the Lesser General Public License (LGPL)     ||            http://www.gnu.org/copyleft/lesser.html                        || This program is distributed in the hope that it will be useful - WITHOUT  || ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     || FITNESS FOR A PARTICULAR PURPOSE.                                         |'---------------------------------------------------------------------------'*//** * PHPMailer - PHP SMTP email transport class * NOTE: Designed for use with PHP version 5 and up * @package PHPMailer * @author Andy Prevost * @author Marcus Bointon * @copyright 2004 - 2008 Andy Prevost * @author Jim Jagielski * @copyright 2010 - 2012 Jim Jagielski * @license http://www.gnu.org/copyleft/lesser.html Distributed under the Lesser General Public License (LGPL) *//** * PHP RFC821 SMTP client * * Implements all the RFC 821 SMTP commands except TURN which will always return a not implemented error. * SMTP also provides some utility methods for sending mail to an SMTP server. * @author Chris Ryan * @package PHPMailer */class SMTP {  /**   *  SMTP server port   *  @var int   */  public $SMTP_PORT = 25;  /**   *  SMTP reply line ending (don't change)   *  @var string   */  public $CRLF = "\r\n";  /**   *  Sets whether debugging is turned on   *  @var bool   */  public $do_debug;       // the level of debug to perform  /**   * Sets the function/method to use for debugging output.   * Right now we only honor "echo" or "error_log"   * @var string   */  public $Debugoutput     = "echo";  /**   *  Sets VERP use on/off (default is off)   *  @var bool   */  public $do_verp = false;  /**   * Sets the SMTP timeout value for reads, in seconds   * @var int   */  public $Timeout         = 15;  /**   * Sets the SMTP timelimit value for reads, in seconds   * @var int   */  public $Timelimit       = 30;  /**   * Sets the SMTP PHPMailer Version number   * @var string   */  public $Version         = '5.2.2';  /////////////////////////////////////////////////  // PROPERTIES, PRIVATE AND PROTECTED  /////////////////////////////////////////////////  /**   * @var resource The socket to the server   */  private $smtp_conn;  /**   * @var string Error message, if any, for the last call   */  private $error;  /**   * @var string The reply the server sent to us for HELO   */  private $helo_rply;  /**   * Outputs debugging info via user-defined method   * @param string $str   */  private function edebug($str) {    if ($this->Debugoutput == "error_log") {        error_log($str);    } else {        echo $str;    }  }  /**   * Initialize the class so that the data is in a known state.   * @access public   * @return SMTP   */  public function __construct() {    $this->smtp_conn = 0;    $this->error = null;    $this->helo_rply = null;    $this->do_debug = 0;  }  /////////////////////////////////////////////////  // CONNECTION FUNCTIONS  /////////////////////////////////////////////////  /**   * Connect to the server specified on the port specified.   * If the port is not specified use the default SMTP_PORT.   * If tval is specified then a connection will try and be   * established with the server for that number of seconds.   * If tval is not specified the default is 30 seconds to   * try on the connection.   *   * SMTP CODE SUCCESS: 220   * SMTP CODE FAILURE: 421   * @access public   * @param string $host   * @param int $port   * @param int $tval   * @return bool   */  public function Connect($host, $port = 0, $tval = 30) {    // set the error val to null so there is no confusion    $this->error = null;    // make sure we are __not__ connected    if($this->connected()) {      // already connected, generate error      $this->error = array("error" => "Already connected to a server");      return false;    }    if(empty($port)) {      $port = $this->SMTP_PORT;    }    // connect to the smtp server    $this->smtp_conn = @fsockopen($host,    // the host of the server                                 $port,    // the port to use                                 $errno,   // error number if any                                 $errstr,  // error message if any                                 $tval);   // give up after ? secs    // verify we connected properly    if(empty($this->smtp_conn)) {      $this->error = array("error" => "Failed to connect to server",                           "errno" => $errno,                           "errstr" => $errstr);      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": $errstr ($errno)" . $this->CRLF . '<br />');      }      return false;    }    // SMTP server can take longer to respond, give longer timeout for first read    // Windows does not have support for this timeout function    if(substr(PHP_OS, 0, 3) != "WIN") {     $max = ini_get('max_execution_time');     if ($max != 0 && $tval > $max) { // don't bother if unlimited      @set_time_limit($tval);     }     stream_set_timeout($this->smtp_conn, $tval, 0);    }    // get any announcement    $announce = $this->get_lines();    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $announce . $this->CRLF . '<br />');    }    return true;  }  /**   * Initiate a TLS communication with the server.   *   * SMTP CODE 220 Ready to start TLS   * SMTP CODE 501 Syntax error (no parameters allowed)   * SMTP CODE 454 TLS not available due to temporary reason   * @access public   * @return bool success   */  public function StartTLS() {    $this->error = null; # to avoid confusion    if(!$this->connected()) {      $this->error = array("error" => "Called StartTLS() without being connected");      return false;    }    fputs($this->smtp_conn,"STARTTLS" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 220) {      $this->error =         array("error"     => "STARTTLS not accepted from server",               "smtp_code" => $code,               "smtp_msg"  => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    // Begin encrypted connection    if(!stream_socket_enable_crypto($this->smtp_conn, true, STREAM_CRYPTO_METHOD_TLS_CLIENT)) {      return false;    }    return true;  }  /**   * Performs SMTP authentication.  Must be run after running the   * Hello() method.  Returns true if successfully authenticated.   * @access public   * @param string $username   * @param string $password   * @param string $authtype   * @param string $realm   * @param string $workstation   * @return bool   */  public function Authenticate($username, $password, $authtype='LOGIN', $realm='', $workstation='') {    if (empty($authtype)) {      $authtype = 'LOGIN';    }    switch ($authtype) {      case 'PLAIN':        // Start authentication        fputs($this->smtp_conn,"AUTH PLAIN" . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 334) {          $this->error =            array("error" => "AUTH not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }        // Send encoded username and password        fputs($this->smtp_conn, base64_encode("\0".$username."\0".$password) . $this->CRLF);        $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 235) {          $this->error =            array("error" => "Authentication not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }        break;      case 'LOGIN':        // Start authentication        fputs($this->smtp_conn,"AUTH LOGIN" . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 334) {          $this->error =            array("error" => "AUTH not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }            // Send encoded username        fputs($this->smtp_conn, base64_encode($username) . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 334) {          $this->error =            array("error" => "Username not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }            // Send encoded password        fputs($this->smtp_conn, base64_encode($password) . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 235) {          $this->error =            array("error" => "Password not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }        break;      case 'NTLM':        /*         * ntlm_sasl_client.php         ** Bundled with Permission         **         ** How to telnet in windows: http://technet.microsoft.com/en-us/library/aa995718%28EXCHG.65%29.aspx         ** PROTOCOL Documentation http://curl.haxx.se/rfc/ntlm.html#ntlmSmtpAuthentication         */        require_once('ntlm_sasl_client.php');        $temp = new stdClass();        $ntlm_client = new ntlm_sasl_client_class;        if(! $ntlm_client->Initialize($temp)){//let's test if every function its available            $this->error = array("error" => $temp->error);            if($this->do_debug >= 1) {                $this->edebug("You need to enable some modules in your php.ini file: " . $this->error["error"] . $this->CRLF);            }            return false;        }        $msg1 = $ntlm_client->TypeMsg1($realm, $workstation);//msg1                fputs($this->smtp_conn,"AUTH NTLM " . base64_encode($msg1) . $this->CRLF);        $rply = $this->get_lines();        $code = substr($rply,0,3);                if($code != 334) {            $this->error =                array("error" => "AUTH not accepted from server",                      "smtp_code" => $code,                      "smtp_msg" => substr($rply,4));            if($this->do_debug >= 1) {                $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF);            }            return false;        }                $challange = substr($rply,3);//though 0 based, there is a white space after the 3 digit number....//msg2        $challange = base64_decode($challange);        $ntlm_res = $ntlm_client->NTLMResponse(substr($challange,24,8),$password);        $msg3 = $ntlm_client->TypeMsg3($ntlm_res,$username,$realm,$workstation);//msg3        // Send encoded username        fputs($this->smtp_conn, base64_encode($msg3) . $this->CRLF);        $rply = $this->get_lines();        $code = substr($rply,0,3);        if($code != 235) {            $this->error =                array("error" => "Could not authenticate",                      "smtp_code" => $code,                      "smtp_msg" => substr($rply,4));            if($this->do_debug >= 1) {                $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF);            }            return false;        }        break;    }    return true;  }  /**   * Returns true if connected to a server otherwise false   * @access public   * @return bool   */  public function Connected() {    if(!empty($this->smtp_conn)) {      $sock_status = socket_get_status($this->smtp_conn);      if($sock_status["eof"]) {        // the socket is valid but we are not connected        if($this->do_debug >= 1) {            $this->edebug("SMTP -> NOTICE:" . $this->CRLF . "EOF caught while checking if connected");        }        $this->Close();        return false;      }      return true; // everything looks good    }    return false;  }  /**   * Closes the socket and cleans up the state of the class.   * It is not considered good to use this function without   * first trying to use QUIT.   * @access public   * @return void   */  public function Close() {    $this->error = null; // so there is no confusion    $this->helo_rply = null;    if(!empty($this->smtp_conn)) {      // close the connection and cleanup      fclose($this->smtp_conn);      $this->smtp_conn = 0;    }  }  /////////////////////////////////////////////////  // SMTP COMMANDS  /////////////////////////////////////////////////  /**   * Issues a data command and sends the msg_data to the server   * finializing the mail transaction. $msg_data is the message   * that is to be send with the headers. Each header needs to be   * on a single line followed by a <CRLF> with the message headers   * and the message body being seperated by and additional <CRLF>.   *   * Implements rfc 821: DATA <CRLF>   *   * SMTP CODE INTERMEDIATE: 354   *     [data]   *     <CRLF>.<CRLF>   *     SMTP CODE SUCCESS: 250   *     SMTP CODE FAILURE: 552,554,451,452   * SMTP CODE FAILURE: 451,554   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @param string $msg_data   * @return bool   */  public function Data($msg_data) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Data() without being connected");      return false;    }    fputs($this->smtp_conn,"DATA" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 354) {      $this->error =        array("error" => "DATA command not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    /* the server is ready to accept data!     * according to rfc 821 we should not send more than 1000     * including the CRLF     * characters on a single line so we will break the data up     * into lines by \r and/or \n then if needed we will break     * each of those into smaller lines to fit within the limit.     * in addition we will be looking for lines that start with     * a period '.' and append and additional period '.' to that     * line. NOTE: this does not count towards limit.     */    // normalize the line breaks so we know the explode works    $msg_data = str_replace("\r\n","\n",$msg_data);    $msg_data = str_replace("\r","\n",$msg_data);    $lines = explode("\n",$msg_data);    /* we need to find a good way to determine is headers are     * in the msg_data or if it is a straight msg body     * currently I am assuming rfc 822 definitions of msg headers     * and if the first field of the first line (':' sperated)     * does not contain a space then it _should_ be a header     * and we can process all lines before a blank "" line as     * headers.     */    $field = substr($lines[0],0,strpos($lines[0],":"));    $in_headers = false;    if(!empty($field) && !strstr($field," ")) {      $in_headers = true;    }    $max_line_length = 998; // used below; set here for ease in change    while(list(,$line) = @each($lines)) {      $lines_out = null;      if($line == "" && $in_headers) {        $in_headers = false;      }      // ok we need to break this line up into several smaller lines      while(strlen($line) > $max_line_length) {        $pos = strrpos(substr($line,0,$max_line_length)," ");        // Patch to fix DOS attack        if(!$pos) {          $pos = $max_line_length - 1;          $lines_out[] = substr($line,0,$pos);          $line = substr($line,$pos);        } else {          $lines_out[] = substr($line,0,$pos);          $line = substr($line,$pos + 1);        }        /* if processing headers add a LWSP-char to the front of new line         * rfc 822 on long msg headers         */        if($in_headers) {          $line = "\t" . $line;        }      }      $lines_out[] = $line;      // send the lines to the server      while(list(,$line_out) = @each($lines_out)) {        if(strlen($line_out) > 0)        {          if(substr($line_out, 0, 1) == ".") {            $line_out = "." . $line_out;          }        }        fputs($this->smtp_conn,$line_out . $this->CRLF);      }    }    // message data has been sent    fputs($this->smtp_conn, $this->CRLF . "." . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "DATA not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Sends the HELO command to the smtp server.   * This makes sure that we and the server are in   * the same known state.   *   * Implements from rfc 821: HELO <SP> <domain> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500, 501, 504, 421   * @access public   * @param string $host   * @return bool   */  public function Hello($host = '') {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(            "error" => "Called Hello() without being connected");      return false;    }    // if hostname for HELO was not specified send default    if(empty($host)) {      // determine appropriate default to send to server      $host = "localhost";    }    // Send extended hello first (RFC 2821)    if(!$this->SendHello("EHLO", $host)) {      if(!$this->SendHello("HELO", $host)) {        return false;      }    }    return true;  }  /**   * Sends a HELO/EHLO command.   * @access private   * @param string $hello   * @param string $host   * @return bool   */  private function SendHello($hello, $host) {    fputs($this->smtp_conn, $hello . " " . $host . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER: " . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => $hello . " not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    $this->helo_rply = $rply;    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command.   *   * Implements rfc 821: MAIL <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,421   * @access public   * @param string $from   * @return bool   */  public function Mail($from) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Mail() without being connected");      return false;    }    $useVerp = ($this->do_verp ? " XVERP" : "");    fputs($this->smtp_conn,"MAIL FROM:<" . $from . ">" . $useVerp . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "MAIL not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Sends the quit command to the server and then closes the socket   * if there is no error or the $close_on_error argument is true.   *   * Implements from rfc 821: QUIT <CRLF>   *   * SMTP CODE SUCCESS: 221   * SMTP CODE ERROR  : 500   * @access public   * @param bool $close_on_error   * @return bool   */  public function Quit($close_on_error = true) {    $this->error = null; // so there is no confusion    if(!$this->connected()) {      $this->error = array(              "error" => "Called Quit() without being connected");      return false;    }    // send the quit command to the server    fputs($this->smtp_conn,"quit" . $this->CRLF);    // get any good-bye messages    $byemsg = $this->get_lines();    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $byemsg . $this->CRLF . '<br />');    }    $rval = true;    $e = null;    $code = substr($byemsg,0,3);    if($code != 221) {      // use e as a tmp var cause Close will overwrite $this->error      $e = array("error" => "SMTP server rejected quit command",                 "smtp_code" => $code,                 "smtp_rply" => substr($byemsg,4));      $rval = false;      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $e["error"] . ": " . $byemsg . $this->CRLF . '<br />');      }    }    if(empty($e) || $close_on_error) {      $this->Close();    }    return $rval;  }  /**   * Sends the command RCPT to the SMTP server with the TO: argument of $to.   * Returns true if the recipient was accepted false if it was rejected.   *   * Implements from rfc 821: RCPT <SP> TO:<forward-path> <CRLF>   *   * SMTP CODE SUCCESS: 250,251   * SMTP CODE FAILURE: 550,551,552,553,450,451,452   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @param string $to   * @return bool   */  public function Recipient($to) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Recipient() without being connected");      return false;    }    fputs($this->smtp_conn,"RCPT TO:<" . $to . ">" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250 && $code != 251) {      $this->error =        array("error" => "RCPT not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Sends the RSET command to abort and transaction that is   * currently in progress. Returns true if successful false   * otherwise.   *   * Implements rfc 821: RSET <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500,501,504,421   * @access public   * @return bool   */  public function Reset() {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Reset() without being connected");      return false;    }    fputs($this->smtp_conn,"RSET" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "RSET failed",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in and send them an email.   *   * Implements rfc 821: SAML <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @param string $from   * @return bool   */  public function SendAndMail($from) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(          "error" => "Called SendAndMail() without being connected");      return false;    }    fputs($this->smtp_conn,"SAML FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "SAML not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * This is an optional command for SMTP that this class does not   * support. This method is here to make the RFC821 Definition   * complete for this class and __may__ be implimented in the future   *   * Implements from rfc 821: TURN <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE FAILURE: 502   * SMTP CODE ERROR  : 500, 503   * @access public   * @return bool   */  public function Turn() {    $this->error = array("error" => "This method, TURN, of the SMTP ".                                    "is not implemented");    if($this->do_debug >= 1) {      $this->edebug("SMTP -> NOTICE: " . $this->error["error"] . $this->CRLF . '<br />');    }    return false;  }  /**  * Get the current error  * @access public  * @return array  */  public function getError() {    return $this->error;  }  /////////////////////////////////////////////////  // INTERNAL FUNCTIONS  /////////////////////////////////////////////////  /**   * Read in as many lines as possible   * either before eof or socket timeout occurs on the operation.   * With SMTP we can tell if we have more lines to read if the   * 4th character is '-' symbol. If it is a space then we don't   * need to read anything else.   * @access private   * @return string   */  private function get_lines() {    $data = "";    $endtime = 0;    /* If for some reason the fp is bad, don't inf loop */    if (!is_resource($this->smtp_conn)) {      return $data;    }    stream_set_timeout($this->smtp_conn, $this->Timeout);    if ($this->Timelimit > 0) {      $endtime = time() + $this->Timelimit;    }    while(is_resource($this->smtp_conn) && !feof($this->smtp_conn)) {      $str = @fgets($this->smtp_conn,515);      if($this->do_debug >= 4) {        $this->edebug("SMTP -> get_lines(): \$data was \"$data\"" . $this->CRLF . '<br />');        $this->edebug("SMTP -> get_lines(): \$str is \"$str\"" . $this->CRLF . '<br />');      }      $data .= $str;      if($this->do_debug >= 4) {        $this->edebug("SMTP -> get_lines(): \$data is \"$data\"" . $this->CRLF . '<br />');      }      // if 4th character is a space, we are done reading, break the loop      if(substr($str,3,1) == " ") { break; }      // Timed-out? Log and break      $info = stream_get_meta_data($this->smtp_conn);      if ($info['timed_out']) {        if($this->do_debug >= 4) {          $this->edebug("SMTP -> get_lines(): timed-out (" . $this->Timeout . " seconds) <br />");        }        break;      }      // Now check if reads took too long      if ($endtime) {        if (time() > $endtime) {          if($this->do_debug >= 4) {            $this->edebug("SMTP -> get_lines(): timelimit reached (" . $this->Timelimit . " seconds) <br />");          }          break;        }      }    }    return $data;  }}?>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Oracle database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorOracle extends JDatabaseIteratorPdo{}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Database Query Preparable Interface. * Adds bind/unbind methods as well as a getBounded() method * to retrieve the stored bounded variables on demand prior to * query execution. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */interface JDatabaseQueryPreparable{	/**	 * Method to add a variable to an internal array that will be bound to a prepared SQL statement before query execution. Also	 * removes a variable that has been bounded from the internal bounded array when the passed in value is null.	 *	 * @param   string|integer  $key            The key that will be used in your SQL query to reference the value. Usually of	 *                                          the form ':key', but can also be an integer.	 * @param   mixed           &$value         The value that will be bound. The value is passed by reference to support output	 *                                          parameters such as those possible with stored procedures.	 * @param   integer         $dataType       Constant corresponding to a SQL datatype.	 * @param   integer         $length         The length of the variable. Usually required for OUTPUT parameters.	 * @param   array           $driverOptions  Optional driver options to be used.	 *	 * @return  JDatabaseQuery	 *	 * @since   12.1	 */	public function bind($key = null, &$value = null, $dataType = PDO::PARAM_STR, $length = 0, $driverOptions = array());	/**	 * Retrieves the bound parameters array when key is null and returns it by reference. If a key is provided then that item is	 * returned.	 *	 * @param   mixed  $key  The bounded variable key to retrieve.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function &getBounded($key = null);}
<?php/** * @package     Joomla.Site * @subpackage  com_content * @copyright   Copyright (C) 2005 - 2010 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// no direct accessdefined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<h3 class="item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</h3>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_num_articles_cat') == 1) :?>			<dl class="article-count"><dt>				<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * Joomla_Sniffs_ControlStructures_MultiLineConditionSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MultiLineConditionSniff.php 289839 2009-10-21 23:11:33Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_ControlStructures_MultiLineConditionSniff. * * Ensure multi-line IF conditions are defined correctly. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_MultiLineConditionSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_IF);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // We need to work out how far indented the if statement        // itself is, so we can work out how far to indent conditions.        $statementIndent = 0;        for ($i = ($stackPtr - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$stackPtr]['line']) {                $i++;                break;            }        }        if ($i >= 0 && $tokens[$i]['code'] === T_WHITESPACE) {            $statementIndent = strlen($tokens[$i]['content']);        }        // Each line between the parenthesis should be indented 4 spaces        // and start with an operator, unless the line is inside a        // function call, in which case it is ignored.        $openBracket  = $tokens[$stackPtr]['parenthesis_opener'];        $closeBracket = $tokens[$stackPtr]['parenthesis_closer'];        $lastLine = $tokens[$openBracket]['line'];        for ($i = ($openBracket + 1); $i <= $closeBracket; $i++) {            if ($tokens[$i]['line'] !== $lastLine) {                if ($tokens[$i]['line'] === $tokens[$closeBracket]['line']) {                    $next = $phpcsFile->findNext(T_WHITESPACE, $i, null, true);                    if ($next == $closeBracket) {	                    $error = 'Closing parenthesis of a multi-line IF statement must be on the same line';	                    $phpcsFile->addError($error, $i, 'CloseBracketNewLine');	                    $i ++;	                    continue;                    }                }                    $expectedIndent = ($statementIndent + 1);                // We changed lines, so this should be a whitespace indent token.                if ($tokens[$i]['code'] !== T_WHITESPACE) {                    $foundIndent = 0;                } else {                    $foundIndent = strlen($tokens[$i]['content']);                }                if ($expectedIndent !== $foundIndent) {                    $error = 'Multi-line IF statement not indented correctly; expected %s spaces but found %s';                    $data  = array(                              $expectedIndent,                              $foundIndent,                             );                    $phpcsFile->addError($error, $i, 'Alignment', $data);                }                $next = $phpcsFile->findNext(T_WHITESPACE, $i, null, true);                if (in_array($tokens[$next]['code'], PHP_CodeSniffer_Tokens::$booleanOperators) === false) {                    $error = 'Each line in a multi-line IF statement must begin with a boolean operator';                    $phpcsFile->addError($error, $i, 'StartWithBoolean');                }                $lastLine = $tokens[$i]['line'];            }//end if            if ($tokens[$i]['code'] === T_STRING) {                $next = $phpcsFile->findNext(T_WHITESPACE, ($i + 1), null, true);                if ($tokens[$next]['code'] === T_OPEN_PARENTHESIS) {                    // This is a function call, so skip to the end as they                    // have their own indentation rules.                    $i        = $tokens[$next]['parenthesis_closer'];                    $lastLine = $tokens[$i]['line'];                    continue;                }            }        }//end for    }//end process()}//end class?>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users Route Helper * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersHelperRoute{	/**	 * Method to get the menu items for the component.	 *	 * @return  array  	An array of menu items.	 * @since   1.6	 */	public static function &getItems()	{		static $items;		// Get the menu items for this component.		if (!isset($items))		{			// Include the site app in case we are loading this from the admin.			require_once JPATH_SITE.'/includes/application.php';			$app	= JFactory::getApplication();			$menu	= $app->getMenu();			$com	= JComponentHelper::getComponent('com_users');			$items	= $menu->getItems('component_id', $com->id);			// If no items found, set to empty array.			if (!$items)			{				$items = array();			}		}		return $items;	}	/**	 * Method to get a route configuration for the login view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 * @static	 */	public static function getLoginRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'login')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the profile view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getProfileRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		//Menu link can only go to users own profile.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'profile')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the registration view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getRegistrationRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'registration')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the remind view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getRemindRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'remind')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the resend view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getResendRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'resend')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}	/**	 * Method to get a route configuration for the reset view.	 *	 * @return  mixed  	Integer menu id on success, null on failure.	 * @since   1.6	 */	public static function getResetRoute()	{		// Get the items.		$items	= self::getItems();		$itemid	= null;		// Search for a suitable menu id.		foreach ($items as $item)		{			if (isset($item->query['view']) && $item->query['view'] === 'reset')			{				$itemid = $item->id;				break;			}		}		return $itemid;	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');/** * A Folder handling class * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */abstract class JFolder{	/**	 * Copy a folder.	 *	 * @param   string   $src          The path to the source folder.	 * @param   string   $dest         The path to the destination folder.	 * @param   string   $path         An optional base path to prefix to the file names.	 * @param   string   $force        Force copy.	 * @param   boolean  $use_streams  Optionally force folder/file overwrites.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function copy($src, $dest, $path = '', $force = false, $use_streams = false)	{		@set_time_limit(ini_get('max_execution_time'));		$FTPOptions = JClientHelper::getCredentials('ftp');		if ($path)		{			$src = JPath::clean($path . '/' . $src);			$dest = JPath::clean($path . '/' . $dest);		}		// Eliminate trailing directory separators, if any		$src = rtrim($src, DIRECTORY_SEPARATOR);		$dest = rtrim($dest, DIRECTORY_SEPARATOR);		if (!self::exists($src))		{			throw new RuntimeException('Source folder not found', -1);		}		if (self::exists($dest) && !$force)		{			throw new RuntimeException('Destination folder not found', -1);		}		// Make sure the destination exists		if (!self::create($dest))		{			throw new RuntimeException('Cannot create destination folder', -1);		}		// If we're using ftp and don't have streams enabled		if ($FTPOptions['enabled'] == 1 && !$use_streams)		{			// Connect the FTP client			$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);			if (!($dh = @opendir($src)))			{				throw new RuntimeException('Cannot open source folder', -1);			}			// Walk through the directory copying files and recursing into folders.			while (($file = readdir($dh)) !== false)			{				$sfid = $src . '/' . $file;				$dfid = $dest . '/' . $file;				switch (filetype($sfid))				{					case 'dir':						if ($file != '.' && $file != '..')						{							$ret = self::copy($sfid, $dfid, null, $force);							if ($ret !== true)							{								return $ret;							}						}						break;					case 'file':						// Translate path for the FTP account						$dfid = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $dfid), '/');						if (!$ftp->store($sfid, $dfid))						{							throw new RuntimeException('Copy file failed', -1);						}						break;				}			}		}		else		{			if (!($dh = @opendir($src)))			{				throw new RuntimeException('Cannot open source folder', -1);			}			// Walk through the directory copying files and recursing into folders.			while (($file = readdir($dh)) !== false)			{				$sfid = $src . '/' . $file;				$dfid = $dest . '/' . $file;				switch (filetype($sfid))				{					case 'dir':						if ($file != '.' && $file != '..')						{							$ret = self::copy($sfid, $dfid, null, $force, $use_streams);							if ($ret !== true)							{								return $ret;							}						}						break;					case 'file':						if ($use_streams)						{							$stream = JFactory::getStream();							if (!$stream->copy($sfid, $dfid))							{								throw new RuntimeException('Cannot copy file: ' . $stream->getError(), -1);							}						}						else						{							if (!@copy($sfid, $dfid))							{								throw new RuntimeException('Copy file failed', -1);							}						}						break;				}			}		}		return true;	}	/**	 * Create a folder -- and all necessary parent folders.	 *	 * @param   string   $path  A path to create from the base path.	 * @param   integer  $mode  Directory permissions to set for folders created. 0755 by default.	 *	 * @return  boolean  True if successful.	 *	 * @since   11.1	 */	public static function create($path = '', $mode = 0755)	{		$FTPOptions = JClientHelper::getCredentials('ftp');		static $nested = 0;		// Check to make sure the path valid and clean		$path = JPath::clean($path);		// Check if parent dir exists		$parent = dirname($path);		if (!self::exists($parent))		{			// Prevent infinite loops!			$nested++;			if (($nested > 20) || ($parent == $path))			{				JLog::add(__METHOD__ . ': ' . JText::_('JLIB_FILESYSTEM_ERROR_FOLDER_LOOP'), JLog::WARNING, 'jerror');				$nested--;				return false;			}			// Create the parent directory			if (self::create($parent, $mode) !== true)			{				// JFolder::create throws an error				$nested--;				return false;			}			// OK, parent directory has been created			$nested--;		}		// Check if dir already exists		if (self::exists($path))		{			return true;		}		// Check for safe mode		if ($FTPOptions['enabled'] == 1)		{			// Connect the FTP client			$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);			// Translate path to FTP path			$path = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $path), '/');			$ret = $ftp->mkdir($path);			$ftp->chmod($path, $mode);		}		else		{			// We need to get and explode the open_basedir paths			$obd = ini_get('open_basedir');			// If open_basedir is set we need to get the open_basedir that the path is in			if ($obd != null)			{				if (IS_WIN)				{					$obdSeparator = ";";				}				else				{					$obdSeparator = ":";				}				// Create the array of open_basedir paths				$obdArray = explode($obdSeparator, $obd);				$inBaseDir = false;				// Iterate through open_basedir paths looking for a match				foreach ($obdArray as $test)				{					$test = JPath::clean($test);					if (strpos($path, $test) === 0)					{						$inBaseDir = true;						break;					}				}				if ($inBaseDir == false)				{					// Return false for JFolder::create because the path to be created is not in open_basedir					JLog::add(__METHOD__ . ': ' . JText::_('JLIB_FILESYSTEM_ERROR_FOLDER_PATH'), JLog::WARNING, 'jerror');					return false;				}			}			// First set umask			$origmask = @umask(0);			// Create the path			if (!$ret = @mkdir($path, $mode))			{				@umask($origmask);				JLog::add(					__METHOD__ . ': ' . JText::_('JLIB_FILESYSTEM_ERROR_COULD_NOT_CREATE_DIRECTORY'), 'Path: ' . $path, JLog::WARNING, 'jerror'				);				return false;			}			// Reset umask			@umask($origmask);		}		return $ret;	}	/**	 * Delete a folder.	 *	 * @param   string  $path  The path to the folder to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public static function delete($path)	{		@set_time_limit(ini_get('max_execution_time'));		// Sanity check		if (!$path)		{			// Bad programmer! Bad Bad programmer!			JLog::add(__METHOD__ . ': ' . JText::_('JLIB_FILESYSTEM_ERROR_DELETE_BASE_DIRECTORY'), JLog::WARNING, 'jerror');			return false;		}		$FTPOptions = JClientHelper::getCredentials('ftp');		try		{			// Check to make sure the path valid and clean			$path = JPath::clean($path);		}		catch (UnexpectedValueException $e)		{			throw new UnexpectedValueException($e);		}		// Is this really a folder?		if (!is_dir($path))		{			JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_PATH_IS_NOT_A_FOLDER', $path), JLog::WARNING, 'jerror');			return false;		}		// Remove all the files in folder if they exist; disable all filtering		$files = self::files($path, '.', false, true, array(), array());		if (!empty($files))		{			jimport('joomla.filesystem.file');			if (JFile::delete($files) !== true)			{				// JFile::delete throws an error				return false;			}		}		// Remove sub-folders of folder; disable all filtering		$folders = self::folders($path, '.', false, true, array(), array());		foreach ($folders as $folder)		{			if (is_link($folder))			{				// Don't descend into linked directories, just delete the link.				jimport('joomla.filesystem.file');				if (JFile::delete($folder) !== true)				{					// JFile::delete throws an error					return false;				}			}			elseif (self::delete($folder) !== true)			{				// JFolder::delete throws an error				return false;			}		}		if ($FTPOptions['enabled'] == 1)		{			// Connect the FTP client			$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);		}		// In case of restricted permissions we zap it one way or the other		// as long as the owner is either the webserver or the ftp.		if (@rmdir($path))		{			$ret = true;		}		elseif ($FTPOptions['enabled'] == 1)		{			// Translate path and delete			$path = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $path), '/');			// FTP connector throws an error			$ret = $ftp->delete($path);		}		else		{			JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_FOLDER_DELETE', $path), JLog::WARNING, 'jerror');			$ret = false;		}		return $ret;	}	/**	 * Moves a folder.	 *	 * @param   string   $src          The path to the source folder.	 * @param   string   $dest         The path to the destination folder.	 * @param   string   $path         An optional base path to prefix to the file names.	 * @param   boolean  $use_streams  Optionally use streams.	 *	 * @return  mixed  Error message on false or boolean true on success.	 *	 * @since   11.1	 */	public static function move($src, $dest, $path = '', $use_streams = false)	{		$FTPOptions = JClientHelper::getCredentials('ftp');		if ($path)		{			$src = JPath::clean($path . '/' . $src);			$dest = JPath::clean($path . '/' . $dest);		}		if (!self::exists($src))		{			return JText::_('JLIB_FILESYSTEM_ERROR_FIND_SOURCE_FOLDER');		}		if (self::exists($dest))		{			return JText::_('JLIB_FILESYSTEM_ERROR_FOLDER_EXISTS');		}		if ($use_streams)		{			$stream = JFactory::getStream();			if (!$stream->move($src, $dest))			{				return JText::sprintf('JLIB_FILESYSTEM_ERROR_FOLDER_RENAME', $stream->getError());			}			$ret = true;		}		else		{			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// Translate path for the FTP account				$src = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $src), '/');				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $dest), '/');				// Use FTP rename to simulate move				if (!$ftp->rename($src, $dest))				{					return JText::_('Rename failed');				}				$ret = true;			}			else			{				if (!@rename($src, $dest))				{					return JText::_('Rename failed');				}				$ret = true;			}		}		return $ret;	}	/**	 * Wrapper for the standard file_exists function	 *	 * @param   string  $path  Folder name relative to installation dir	 *	 * @return  boolean  True if path is a folder	 *	 * @since   11.1	 */	public static function exists($path)	{		return is_dir(JPath::clean($path));	}	/**	 * Utility function to read the files in a folder.	 *	 * @param   string   $path           The path of the folder to read.	 * @param   string   $filter         A filter for file names.	 * @param   mixed    $recurse        True to recursively search into sub-folders, or an integer to specify the maximum depth.	 * @param   boolean  $full           True to return the full path to the file.	 * @param   array    $exclude        Array with names of files which should not be shown in the result.	 * @param   array    $excludefilter  Array of filter to exclude	 *	 * @return  array  Files in the given folder.	 *	 * @since   11.1	 */	public static function files($path, $filter = '.', $recurse = false, $full = false, $exclude = array('.svn', 'CVS', '.DS_Store', '__MACOSX'),		$excludefilter = array('^\..*', '.*~'))	{		// Check to make sure the path valid and clean		$path = JPath::clean($path);		// Is the path a folder?		if (!is_dir($path))		{			JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_PATH_IS_NOT_A_FOLDER_FILES', $path), JLog::WARNING, 'jerror');			return false;		}		// Compute the excludefilter string		if (count($excludefilter))		{			$excludefilter_string = '/(' . implode('|', $excludefilter) . ')/';		}		else		{			$excludefilter_string = '';		}		// Get the files		$arr = self::_items($path, $filter, $recurse, $full, $exclude, $excludefilter_string, true);		// Sort the files		asort($arr);		return array_values($arr);	}	/**	 * Utility function to read the folders in a folder.	 *	 * @param   string   $path           The path of the folder to read.	 * @param   string   $filter         A filter for folder names.	 * @param   mixed    $recurse        True to recursively search into sub-folders, or an integer to specify the maximum depth.	 * @param   boolean  $full           True to return the full path to the folders.	 * @param   array    $exclude        Array with names of folders which should not be shown in the result.	 * @param   array    $excludefilter  Array with regular expressions matching folders which should not be shown in the result.	 *	 * @return  array  Folders in the given folder.	 *	 * @since   11.1	 */	public static function folders($path, $filter = '.', $recurse = false, $full = false, $exclude = array('.svn', 'CVS', '.DS_Store', '__MACOSX'),		$excludefilter = array('^\..*'))	{		// Check to make sure the path valid and clean		$path = JPath::clean($path);		// Is the path a folder?		if (!is_dir($path))		{			JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_PATH_IS_NOT_A_FOLDER_FOLDER', $path), JLog::WARNING, 'jerror');			return false;		}		// Compute the excludefilter string		if (count($excludefilter))		{			$excludefilter_string = '/(' . implode('|', $excludefilter) . ')/';		}		else		{			$excludefilter_string = '';		}		// Get the folders		$arr = self::_items($path, $filter, $recurse, $full, $exclude, $excludefilter_string, false);		// Sort the folders		asort($arr);		return array_values($arr);	}	/**	 * Function to read the files/folders in a folder.	 *	 * @param   string   $path                  The path of the folder to read.	 * @param   string   $filter                A filter for file names.	 * @param   mixed    $recurse               True to recursively search into sub-folders, or an integer to specify the maximum depth.	 * @param   boolean  $full                  True to return the full path to the file.	 * @param   array    $exclude               Array with names of files which should not be shown in the result.	 * @param   string   $excludefilter_string  Regexp of files to exclude	 * @param   boolean  $findfiles             True to read the files, false to read the folders	 *	 * @return  array  Files.	 *	 * @since   11.1	 */	protected static function _items($path, $filter, $recurse, $full, $exclude, $excludefilter_string, $findfiles)	{		@set_time_limit(ini_get('max_execution_time'));		$arr = array();		// Read the source directory		if (!($handle = @opendir($path)))		{			return $arr;		}		while (($file = readdir($handle)) !== false)		{			if ($file != '.' && $file != '..' && !in_array($file, $exclude)				&& (empty($excludefilter_string) || !preg_match($excludefilter_string, $file)))			{				// Compute the fullpath				$fullpath = $path . DIRECTORY_SEPARATOR . $file;				// Compute the isDir flag				$isDir = is_dir($fullpath);				if (($isDir xor $findfiles) && preg_match("/$filter/", $file))				{					// (fullpath is dir and folders are searched or fullpath is not dir and files are searched) and file matches the filter					if ($full)					{						// Full path is requested						$arr[] = $fullpath;					}					else					{						// Filename is requested						$arr[] = $file;					}				}				if ($isDir && $recurse)				{					// Search recursively					if (is_int($recurse))					{						// Until depth 0 is reached						$arr = array_merge($arr, self::_items($fullpath, $filter, $recurse - 1, $full, $exclude, $excludefilter_string, $findfiles));					}					else					{						$arr = array_merge($arr, self::_items($fullpath, $filter, $recurse, $full, $exclude, $excludefilter_string, $findfiles));					}				}			}		}		closedir($handle);		return $arr;	}	/**	 * Lists folder in format suitable for tree display.	 *	 * @param   string   $path      The path of the folder to read.	 * @param   string   $filter    A filter for folder names.	 * @param   integer  $maxLevel  The maximum number of levels to recursively read, defaults to three.	 * @param   integer  $level     The current level, optional.	 * @param   integer  $parent    Unique identifier of the parent folder, if any.	 *	 * @return  array  Folders in the given folder.	 *	 * @since   11.1	 */	public static function listFolderTree($path, $filter, $maxLevel = 3, $level = 0, $parent = 0)	{		$dirs = array();		if ($level == 0)		{			$GLOBALS['_JFolder_folder_tree_index'] = 0;		}		if ($level < $maxLevel)		{			$folders = self::folders($path, $filter);			// First path, index foldernames			foreach ($folders as $name)			{				$id = ++$GLOBALS['_JFolder_folder_tree_index'];				$fullName = JPath::clean($path . '/' . $name);				$dirs[] = array('id' => $id, 'parent' => $parent, 'name' => $name, 'fullname' => $fullName,					'relname' => str_replace(JPATH_ROOT, '', $fullName));				$dirs2 = self::listFolderTree($fullName, $filter, $maxLevel, $level + 1, $id);				$dirs = array_merge($dirs, $dirs2);			}		}		return $dirs;	}	/**	 * Makes path name safe to use.	 *	 * @param   string  $path  The full path to sanitise.	 *	 * @return  string  The sanitised string.	 *	 * @since   11.1	 */	public static function makeSafe($path)	{		$regex = array('#[^A-Za-z0-9:_\\\/-]#');		return preg_replace($regex, '', $path);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cpanel * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cpanel Controller * * @package     Joomla.Administrator * @subpackage  com_cpanel * @since       1.5 */class CpanelController extends JControllerLegacy{}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="contact-category<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->category->title, '', 'com_contact.category'); ?></h2><?php endif; ?><?php if ($this->params->def('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_contact.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if (!empty($this->children[$this->category->id])&& $this->maxLevel != 0) : ?><div class="cat-children">	<h3><?php echo JText::_('JGLOBAL_SUBCATEGORIES'); ?></h3>	<?php echo $this->loadTemplate('children'); ?></div><?php endif; ?></div>
<?php/** * Verifies that control statements conform to their coding standards. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ControlSignatureSniff.php 244676 2007-10-23 06:05:14Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_Standards_AbstractPatternSniff', true) === false) {	throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractPatternSniff not found');}/** * Verifies that control statements conform to their coding standards. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_ControlSignatureSniff extends PHP_CodeSniffer_Standards_AbstractPatternSniff{	/**	 * Constructs a Joomla_Sniffs_ControlStructures_ControlSignatureSniff.	 */	public function __construct()	{		parent::__construct(true);	}//end __construct()	/**	 * Returns the patterns that this test wishes to verify.	 *	 * @return array(string)	 */	protected function getPatterns()	{		return array(			'if (...)EOL...{...}EOL...elseEOL',			'if (...)EOL...{...}EOL...elseif (...)EOL',			'if (...)EOL',			'tryEOL...{EOL...}EOL',			'catch (...)EOL...{EOL',			'doEOL...{...}EOL',			'while (...)EOL...{EOL',			'for (...)EOL...{EOL',			'foreach (...)EOL...{EOL',			'switch (...)EOL...{EOL',		);	}//end getPatterns()	/**	 * Process a pattern.	 *	 * Returns if we are inside a "tmpl" folder - workaround for the Joomla! CMS :(	 *	 * @param array $patternInfo Information about the pattern used for checking, which includes are	 *               parsed token representation of the pattern.	 * @param PHP_CodeSniffer_File $phpcsFile The PHP_CodeSniffer file where the token occured.	 * @param integer $stackPtr The postion in the tokens stack where the listening token type was found.	 *	 * @return return_type	 */	protected function processPattern($patternInfo, PHP_CodeSniffer_File $phpcsFile	, $stackPtr)	{		if (0)		{			/*			 * @todo disabled - This is a special sniff for the Joomla! CMS to exclude			* the tmpl folder which may contain constructs in colon notation			*/			$parts = explode(DIRECTORY_SEPARATOR, $phpcsFile->getFileName());			if ('tmpl' == $parts[count($parts) - 2])			{				return false;			}		}		return parent::processPattern($patternInfo, $phpcsFile, $stackPtr);	}//function}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_SESSION_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('session') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>			</ul></fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Search Component Controller * * @package     Joomla.Site * @subpackage  com_search * @since       1.5 */class SearchController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$this->input->set('view', 'search'); // force it to be the search view		return parent::display($cachable, $urlparams);	}	public function search()	{		// slashes cause errors, <> get stripped anyway later on. # causes problems.		$badchars = array('#', '>', '<', '\\');		$searchword = trim(str_replace($badchars, '', $this->input->getString('searchword', null, 'post')));		// if searchword enclosed in double quotes, strip quotes and do exact match		if (substr($searchword, 0, 1) == '"' && substr($searchword, -1) == '"')		{			$post['searchword'] = substr($searchword, 1, -1);			$this->input->set('searchphrase', 'exact');		}		else		{			$post['searchword'] = $searchword;		}		$post['ordering']     = $this->input->getWord('ordering', null, 'post');		$post['searchphrase'] = $this->input->getWord('searchphrase', 'all', 'post');		$post['limit']        = $this->input->getUInt('limit', null, 'post');		if ($post['limit'] === null)		{			unset($post['limit']);		}		$areas = $this->input->post->get('areas', null, 'array');		if ($areas)		{			foreach ($areas as $area)			{				$post['areas'][] = JFilterInput::getInstance()->clean($area, 'cmd');			}		}		// set Itemid id for links from menu		$app	= JFactory::getApplication();		$menu	= $app->getMenu();		$items	= $menu->getItems('link', 'index.php?option=com_search&view=search');		if (isset($items[0]))		{			$post['Itemid'] = $items[0]->id;		} elseif ($this->input->getInt('Itemid') > 0) { //use Itemid from requesting page only if there is no existing menu			$post['Itemid'] = $this->input->getInt('Itemid');		}		unset($post['task']);		unset($post['submit']);		$uri = JURI::getInstance();		$uri->setQuery($post);		$uri->setVar('option', 'com_search');		$this->setRedirect(JRoute::_('index.php'.$uri->toString(array('query', 'fragment')), false));	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.Highlight * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * System plugin to highlight terms. * * @package     Joomla.Plugin * @subpackage  System.Highlight * @since       2.5 */class PlgSystemHighlight extends JPlugin{	/**	 * Method to catch the onAfterDispatch event.	 *	 * This is where we setup the click-through content highlighting for.	 * The highlighting is done with JavaScript so we just	 * need to check a few parameters and the JHtml behavior will do the rest.	 *	 * @return  boolean  True on success	 *	 * @since   2.5	 */	public function onAfterDispatch()	{		// Check that we are in the site application.		if (JFactory::getApplication()->isAdmin())		{			return true;		}		// Set the variables		$input = JFactory::getApplication()->input;		$extension = $input->get('option', '', 'cmd');		// Check if the highlighter is enabled.		if (!JComponentHelper::getParams($extension)->get('highlight_terms', 1))		{			return true;		}		// Check if the highlighter should be activated in this environment.		if (JFactory::getDocument()->getType() !== 'html' || $input->get('tmpl', '', 'cmd') === 'component')		{			return true;		}		// Get the terms to highlight from the request.		$terms = $input->request->get('highlight', null, 'base64');		$terms = $terms ? json_decode(base64_decode($terms)) : null;		// Check the terms.		if (empty($terms))		{			return true;		}		// Clean the terms array		$filter = JFilterInput::getInstance();		$cleanTerms = array();		foreach ($terms as $term)		{			$cleanTerms[] = htmlspecialchars($filter->clean($term, 'string'));		}		// Activate the highlighter.		JHtml::_('behavior.highlighter', $cleanTerms);		// Adjust the component buffer.		$doc = JFactory::getDocument();		$buf = $doc->getBuffer('component');		$buf = '<br id="highlighter-start" />' . $buf . '<br id="highlighter-end" />';		$doc->setBuffer($buf, 'component');		return true;	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*//*** Define UTF8_CORE as required*/if ( !defined('UTF8_CORE') ) {    define('UTF8_CORE',TRUE);}//--------------------------------------------------------------------/*** Unicode aware replacement for strlen(). Returns the number* of characters in the string (not the number of bytes), replacing* multibyte characters with a single byte equivalent* utf8_decode() converts characters that are not in ISO-8859-1* to '?', which, for the purpose of counting, is alright - It's* much faster than iconv_strlen* Note: this function does not count bad UTF-8 bytes in the string* - these are simply ignored* @author <chernyshevsky at hotmail dot com>* @link   http://www.php.net/manual/en/function.strlen.php* @link   http://www.php.net/manual/en/function.utf8-decode.php* @param string UTF-8 string* @return int number of UTF-8 characters in string* @package utf8* @subpackage strings*/function utf8_strlen($str){    return strlen(utf8_decode($str));}//--------------------------------------------------------------------/*** UTF-8 aware alternative to strpos* Find position of first occurrence of a string* Note: This will get alot slower if offset is used* Note: requires utf8_strlen amd utf8_substr to be loaded* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer offset in characters (from left)* @return mixed integer position or FALSE on failure* @see http://www.php.net/strpos* @see utf8_strlen* @see utf8_substr* @package utf8* @subpackage strings*/function utf8_strpos($str, $needle, $offset = NULL) {    if ( is_null($offset) ) {        $ar = explode($needle, $str, 2);        if ( count($ar) > 1 ) {            return utf8_strlen($ar[0]);        }        return FALSE;    } else {        if ( !is_int($offset) ) {            trigger_error('utf8_strpos: Offset must be an integer',E_USER_ERROR);            return FALSE;        }        $str = utf8_substr($str, $offset);        if ( FALSE !== ( $pos = utf8_strpos($str, $needle) ) ) {            return $pos + $offset;        }        return FALSE;    }}//--------------------------------------------------------------------/*** UTF-8 aware alternative to strrpos* Find position of last occurrence of a char in a string* Note: This will get alot slower if offset is used* Note: requires utf8_substr and utf8_strlen to be loaded* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer (optional) offset (from left)* @return mixed integer position or FALSE on failure* @see http://www.php.net/strrpos* @see utf8_substr* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_strrpos($str, $needle, $offset = NULL) {    if ( is_null($offset) ) {        $ar = explode($needle, $str);        if ( count($ar) > 1 ) {            // Pop off the end of the string where the last match was made            array_pop($ar);            $str = join($needle,$ar);            return utf8_strlen($str);        }        return FALSE;    } else {        if ( !is_int($offset) ) {            trigger_error('utf8_strrpos expects parameter 3 to be long',E_USER_WARNING);            return FALSE;        }        $str = utf8_substr($str, $offset);        if ( FALSE !== ( $pos = utf8_strrpos($str, $needle) ) ) {            return $pos + $offset;        }        return FALSE;    }}//--------------------------------------------------------------------/*** UTF-8 aware alternative to substr* Return part of a string given character offset (and optionally length)** Note arguments: comparied to substr - if offset or length are* not integers, this version will not complain but rather massages them* into an integer.** Note on returned values: substr documentation states false can be* returned in some cases (e.g. offset > string length)* mb_substr never returns false, it will return an empty string instead.* This adopts the mb_substr approach** Note on implementation: PCRE only supports repetitions of less than* 65536, in order to accept up to MAXINT values for offset and length,* we'll repeat a group of 65535 characters when needed.** Note on implementation: calculating the number of characters in the* string is a relatively expensive operation, so we only carry it out when* necessary. It isn't necessary for +ve offsets and no specified length** @author Chris Smith<chris@jalakai.co.uk>* @param string* @param integer number of UTF-8 characters offset (from left)* @param integer (optional) length in UTF-8 characters from offset* @return mixed string or FALSE if failure* @package utf8* @subpackage strings*/function utf8_substr($str, $offset, $length = NULL) {    // generates E_NOTICE    // for PHP4 objects, but not PHP5 objects    $str = (string)$str;    $offset = (int)$offset;    if (!is_null($length)) $length = (int)$length;    // handle trivial cases    if ($length === 0) return '';    if ($offset < 0 && $length < 0 && $length < $offset)        return '';    // normalise negative offsets (we could use a tail    // anchored pattern, but they are horribly slow!)    if ($offset < 0) {        // see notes        $strlen = strlen(utf8_decode($str));        $offset = $strlen + $offset;        if ($offset < 0) $offset = 0;    }    $Op = '';    $Lp = '';    // establish a pattern for offset, a    // non-captured group equal in length to offset    if ($offset > 0) {        $Ox = (int)($offset/65535);        $Oy = $offset%65535;        if ($Ox) {            $Op = '(?:.{65535}){'.$Ox.'}';        }        $Op = '^(?:'.$Op.'.{'.$Oy.'})';    } else {        // offset == 0; just anchor the pattern        $Op = '^';    }    // establish a pattern for length    if (is_null($length)) {        // the rest of the string        $Lp = '(.*)$';    } else {        if (!isset($strlen)) {            // see notes            $strlen = strlen(utf8_decode($str));        }        // another trivial case        if ($offset > $strlen) return '';        if ($length > 0) {            // reduce any length that would            // go passed the end of the string            $length = min($strlen-$offset, $length);            $Lx = (int)( $length / 65535 );            $Ly = $length % 65535;            // negative length requires a captured group            // of length characters            if ($Lx) $Lp = '(?:.{65535}){'.$Lx.'}';            $Lp = '('.$Lp.'.{'.$Ly.'})';        } else if ($length < 0) {            if ( $length < ($offset - $strlen) ) {                return '';            }            $Lx = (int)((-$length)/65535);            $Ly = (-$length)%65535;            // negative length requires ... capture everything            // except a group of  -length characters            // anchored at the tail-end of the string            if ($Lx) $Lp = '(?:.{65535}){'.$Lx.'}';            $Lp = '(.*)(?:'.$Lp.'.{'.$Ly.'})$';        }    }    if (!preg_match( '#'.$Op.$Lp.'#us',$str, $match )) {        return '';    }    return $match[1];}//---------------------------------------------------------------/*** UTF-8 aware alternative to strtolower* Make a string lowercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* Note: requires utf8_to_unicode and utf8_from_unicode* @author Andreas Gohr <andi@splitbrain.org>* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @see http://www.php.net/strtolower* @see utf8_to_unicode* @see utf8_from_unicode* @see http://www.unicode.org/reports/tr21/tr21-5.html* @see http://dev.splitbrain.org/view/darcs/dokuwiki/inc/utf8.php* @package utf8* @subpackage strings*/function utf8_strtolower($string){    static $UTF8_UPPER_TO_LOWER = NULL;    if ( is_null($UTF8_UPPER_TO_LOWER) ) {        $UTF8_UPPER_TO_LOWER = array(    0x0041=>0x0061, 0x03A6=>0x03C6, 0x0162=>0x0163, 0x00C5=>0x00E5, 0x0042=>0x0062,    0x0139=>0x013A, 0x00C1=>0x00E1, 0x0141=>0x0142, 0x038E=>0x03CD, 0x0100=>0x0101,    0x0490=>0x0491, 0x0394=>0x03B4, 0x015A=>0x015B, 0x0044=>0x0064, 0x0393=>0x03B3,    0x00D4=>0x00F4, 0x042A=>0x044A, 0x0419=>0x0439, 0x0112=>0x0113, 0x041C=>0x043C,    0x015E=>0x015F, 0x0143=>0x0144, 0x00CE=>0x00EE, 0x040E=>0x045E, 0x042F=>0x044F,    0x039A=>0x03BA, 0x0154=>0x0155, 0x0049=>0x0069, 0x0053=>0x0073, 0x1E1E=>0x1E1F,    0x0134=>0x0135, 0x0427=>0x0447, 0x03A0=>0x03C0, 0x0418=>0x0438, 0x00D3=>0x00F3,    0x0420=>0x0440, 0x0404=>0x0454, 0x0415=>0x0435, 0x0429=>0x0449, 0x014A=>0x014B,    0x0411=>0x0431, 0x0409=>0x0459, 0x1E02=>0x1E03, 0x00D6=>0x00F6, 0x00D9=>0x00F9,    0x004E=>0x006E, 0x0401=>0x0451, 0x03A4=>0x03C4, 0x0423=>0x0443, 0x015C=>0x015D,    0x0403=>0x0453, 0x03A8=>0x03C8, 0x0158=>0x0159, 0x0047=>0x0067, 0x00C4=>0x00E4,    0x0386=>0x03AC, 0x0389=>0x03AE, 0x0166=>0x0167, 0x039E=>0x03BE, 0x0164=>0x0165,    0x0116=>0x0117, 0x0108=>0x0109, 0x0056=>0x0076, 0x00DE=>0x00FE, 0x0156=>0x0157,    0x00DA=>0x00FA, 0x1E60=>0x1E61, 0x1E82=>0x1E83, 0x00C2=>0x00E2, 0x0118=>0x0119,    0x0145=>0x0146, 0x0050=>0x0070, 0x0150=>0x0151, 0x042E=>0x044E, 0x0128=>0x0129,    0x03A7=>0x03C7, 0x013D=>0x013E, 0x0422=>0x0442, 0x005A=>0x007A, 0x0428=>0x0448,    0x03A1=>0x03C1, 0x1E80=>0x1E81, 0x016C=>0x016D, 0x00D5=>0x00F5, 0x0055=>0x0075,    0x0176=>0x0177, 0x00DC=>0x00FC, 0x1E56=>0x1E57, 0x03A3=>0x03C3, 0x041A=>0x043A,    0x004D=>0x006D, 0x016A=>0x016B, 0x0170=>0x0171, 0x0424=>0x0444, 0x00CC=>0x00EC,    0x0168=>0x0169, 0x039F=>0x03BF, 0x004B=>0x006B, 0x00D2=>0x00F2, 0x00C0=>0x00E0,    0x0414=>0x0434, 0x03A9=>0x03C9, 0x1E6A=>0x1E6B, 0x00C3=>0x00E3, 0x042D=>0x044D,    0x0416=>0x0436, 0x01A0=>0x01A1, 0x010C=>0x010D, 0x011C=>0x011D, 0x00D0=>0x00F0,    0x013B=>0x013C, 0x040F=>0x045F, 0x040A=>0x045A, 0x00C8=>0x00E8, 0x03A5=>0x03C5,    0x0046=>0x0066, 0x00DD=>0x00FD, 0x0043=>0x0063, 0x021A=>0x021B, 0x00CA=>0x00EA,    0x0399=>0x03B9, 0x0179=>0x017A, 0x00CF=>0x00EF, 0x01AF=>0x01B0, 0x0045=>0x0065,    0x039B=>0x03BB, 0x0398=>0x03B8, 0x039C=>0x03BC, 0x040C=>0x045C, 0x041F=>0x043F,    0x042C=>0x044C, 0x00DE=>0x00FE, 0x00D0=>0x00F0, 0x1EF2=>0x1EF3, 0x0048=>0x0068,    0x00CB=>0x00EB, 0x0110=>0x0111, 0x0413=>0x0433, 0x012E=>0x012F, 0x00C6=>0x00E6,    0x0058=>0x0078, 0x0160=>0x0161, 0x016E=>0x016F, 0x0391=>0x03B1, 0x0407=>0x0457,    0x0172=>0x0173, 0x0178=>0x00FF, 0x004F=>0x006F, 0x041B=>0x043B, 0x0395=>0x03B5,    0x0425=>0x0445, 0x0120=>0x0121, 0x017D=>0x017E, 0x017B=>0x017C, 0x0396=>0x03B6,    0x0392=>0x03B2, 0x0388=>0x03AD, 0x1E84=>0x1E85, 0x0174=>0x0175, 0x0051=>0x0071,    0x0417=>0x0437, 0x1E0A=>0x1E0B, 0x0147=>0x0148, 0x0104=>0x0105, 0x0408=>0x0458,    0x014C=>0x014D, 0x00CD=>0x00ED, 0x0059=>0x0079, 0x010A=>0x010B, 0x038F=>0x03CE,    0x0052=>0x0072, 0x0410=>0x0430, 0x0405=>0x0455, 0x0402=>0x0452, 0x0126=>0x0127,    0x0136=>0x0137, 0x012A=>0x012B, 0x038A=>0x03AF, 0x042B=>0x044B, 0x004C=>0x006C,    0x0397=>0x03B7, 0x0124=>0x0125, 0x0218=>0x0219, 0x00DB=>0x00FB, 0x011E=>0x011F,    0x041E=>0x043E, 0x1E40=>0x1E41, 0x039D=>0x03BD, 0x0106=>0x0107, 0x03AB=>0x03CB,    0x0426=>0x0446, 0x00DE=>0x00FE, 0x00C7=>0x00E7, 0x03AA=>0x03CA, 0x0421=>0x0441,    0x0412=>0x0432, 0x010E=>0x010F, 0x00D8=>0x00F8, 0x0057=>0x0077, 0x011A=>0x011B,    0x0054=>0x0074, 0x004A=>0x006A, 0x040B=>0x045B, 0x0406=>0x0456, 0x0102=>0x0103,    0x039B=>0x03BB, 0x00D1=>0x00F1, 0x041D=>0x043D, 0x038C=>0x03CC, 0x00C9=>0x00E9,    0x00D0=>0x00F0, 0x0407=>0x0457, 0x0122=>0x0123,            );    }    $uni = utf8_to_unicode($string);    if ( !$uni ) {        return FALSE;    }    $cnt = count($uni);    for ($i=0; $i < $cnt; $i++){        if ( isset($UTF8_UPPER_TO_LOWER[$uni[$i]]) ) {            $uni[$i] = $UTF8_UPPER_TO_LOWER[$uni[$i]];        }    }    return utf8_from_unicode($uni);}//---------------------------------------------------------------/*** UTF-8 aware alternative to strtoupper* Make a string uppercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* Note: requires utf8_to_unicode and utf8_from_unicode* @author Andreas Gohr <andi@splitbrain.org>* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @see http://www.php.net/strtoupper* @see utf8_to_unicode* @see utf8_from_unicode* @see http://www.unicode.org/reports/tr21/tr21-5.html* @see http://dev.splitbrain.org/view/darcs/dokuwiki/inc/utf8.php* @package utf8* @subpackage strings*/function utf8_strtoupper($string){    static $UTF8_LOWER_TO_UPPER = NULL;    if ( is_null($UTF8_LOWER_TO_UPPER) ) {        $UTF8_LOWER_TO_UPPER = array(    0x0061=>0x0041, 0x03C6=>0x03A6, 0x0163=>0x0162, 0x00E5=>0x00C5, 0x0062=>0x0042,    0x013A=>0x0139, 0x00E1=>0x00C1, 0x0142=>0x0141, 0x03CD=>0x038E, 0x0101=>0x0100,    0x0491=>0x0490, 0x03B4=>0x0394, 0x015B=>0x015A, 0x0064=>0x0044, 0x03B3=>0x0393,    0x00F4=>0x00D4, 0x044A=>0x042A, 0x0439=>0x0419, 0x0113=>0x0112, 0x043C=>0x041C,    0x015F=>0x015E, 0x0144=>0x0143, 0x00EE=>0x00CE, 0x045E=>0x040E, 0x044F=>0x042F,    0x03BA=>0x039A, 0x0155=>0x0154, 0x0069=>0x0049, 0x0073=>0x0053, 0x1E1F=>0x1E1E,    0x0135=>0x0134, 0x0447=>0x0427, 0x03C0=>0x03A0, 0x0438=>0x0418, 0x00F3=>0x00D3,    0x0440=>0x0420, 0x0454=>0x0404, 0x0435=>0x0415, 0x0449=>0x0429, 0x014B=>0x014A,    0x0431=>0x0411, 0x0459=>0x0409, 0x1E03=>0x1E02, 0x00F6=>0x00D6, 0x00F9=>0x00D9,    0x006E=>0x004E, 0x0451=>0x0401, 0x03C4=>0x03A4, 0x0443=>0x0423, 0x015D=>0x015C,    0x0453=>0x0403, 0x03C8=>0x03A8, 0x0159=>0x0158, 0x0067=>0x0047, 0x00E4=>0x00C4,    0x03AC=>0x0386, 0x03AE=>0x0389, 0x0167=>0x0166, 0x03BE=>0x039E, 0x0165=>0x0164,    0x0117=>0x0116, 0x0109=>0x0108, 0x0076=>0x0056, 0x00FE=>0x00DE, 0x0157=>0x0156,    0x00FA=>0x00DA, 0x1E61=>0x1E60, 0x1E83=>0x1E82, 0x00E2=>0x00C2, 0x0119=>0x0118,    0x0146=>0x0145, 0x0070=>0x0050, 0x0151=>0x0150, 0x044E=>0x042E, 0x0129=>0x0128,    0x03C7=>0x03A7, 0x013E=>0x013D, 0x0442=>0x0422, 0x007A=>0x005A, 0x0448=>0x0428,    0x03C1=>0x03A1, 0x1E81=>0x1E80, 0x016D=>0x016C, 0x00F5=>0x00D5, 0x0075=>0x0055,    0x0177=>0x0176, 0x00FC=>0x00DC, 0x1E57=>0x1E56, 0x03C3=>0x03A3, 0x043A=>0x041A,    0x006D=>0x004D, 0x016B=>0x016A, 0x0171=>0x0170, 0x0444=>0x0424, 0x00EC=>0x00CC,    0x0169=>0x0168, 0x03BF=>0x039F, 0x006B=>0x004B, 0x00F2=>0x00D2, 0x00E0=>0x00C0,    0x0434=>0x0414, 0x03C9=>0x03A9, 0x1E6B=>0x1E6A, 0x00E3=>0x00C3, 0x044D=>0x042D,    0x0436=>0x0416, 0x01A1=>0x01A0, 0x010D=>0x010C, 0x011D=>0x011C, 0x00F0=>0x00D0,    0x013C=>0x013B, 0x045F=>0x040F, 0x045A=>0x040A, 0x00E8=>0x00C8, 0x03C5=>0x03A5,    0x0066=>0x0046, 0x00FD=>0x00DD, 0x0063=>0x0043, 0x021B=>0x021A, 0x00EA=>0x00CA,    0x03B9=>0x0399, 0x017A=>0x0179, 0x00EF=>0x00CF, 0x01B0=>0x01AF, 0x0065=>0x0045,    0x03BB=>0x039B, 0x03B8=>0x0398, 0x03BC=>0x039C, 0x045C=>0x040C, 0x043F=>0x041F,    0x044C=>0x042C, 0x00FE=>0x00DE, 0x00F0=>0x00D0, 0x1EF3=>0x1EF2, 0x0068=>0x0048,    0x00EB=>0x00CB, 0x0111=>0x0110, 0x0433=>0x0413, 0x012F=>0x012E, 0x00E6=>0x00C6,    0x0078=>0x0058, 0x0161=>0x0160, 0x016F=>0x016E, 0x03B1=>0x0391, 0x0457=>0x0407,    0x0173=>0x0172, 0x00FF=>0x0178, 0x006F=>0x004F, 0x043B=>0x041B, 0x03B5=>0x0395,    0x0445=>0x0425, 0x0121=>0x0120, 0x017E=>0x017D, 0x017C=>0x017B, 0x03B6=>0x0396,    0x03B2=>0x0392, 0x03AD=>0x0388, 0x1E85=>0x1E84, 0x0175=>0x0174, 0x0071=>0x0051,    0x0437=>0x0417, 0x1E0B=>0x1E0A, 0x0148=>0x0147, 0x0105=>0x0104, 0x0458=>0x0408,    0x014D=>0x014C, 0x00ED=>0x00CD, 0x0079=>0x0059, 0x010B=>0x010A, 0x03CE=>0x038F,    0x0072=>0x0052, 0x0430=>0x0410, 0x0455=>0x0405, 0x0452=>0x0402, 0x0127=>0x0126,    0x0137=>0x0136, 0x012B=>0x012A, 0x03AF=>0x038A, 0x044B=>0x042B, 0x006C=>0x004C,    0x03B7=>0x0397, 0x0125=>0x0124, 0x0219=>0x0218, 0x00FB=>0x00DB, 0x011F=>0x011E,    0x043E=>0x041E, 0x1E41=>0x1E40, 0x03BD=>0x039D, 0x0107=>0x0106, 0x03CB=>0x03AB,    0x0446=>0x0426, 0x00FE=>0x00DE, 0x00E7=>0x00C7, 0x03CA=>0x03AA, 0x0441=>0x0421,    0x0432=>0x0412, 0x010F=>0x010E, 0x00F8=>0x00D8, 0x0077=>0x0057, 0x011B=>0x011A,    0x0074=>0x0054, 0x006A=>0x004A, 0x045B=>0x040B, 0x0456=>0x0406, 0x0103=>0x0102,    0x03BB=>0x039B, 0x00F1=>0x00D1, 0x043D=>0x041D, 0x03CC=>0x038C, 0x00E9=>0x00C9,    0x00F0=>0x00D0, 0x0457=>0x0407, 0x0123=>0x0122,            );    }    $uni = utf8_to_unicode($string);    if ( !$uni ) {        return FALSE;    }    $cnt = count($uni);    for ($i=0; $i < $cnt; $i++){        if( isset($UTF8_LOWER_TO_UPPER[$uni[$i]]) ) {            $uni[$i] = $UTF8_LOWER_TO_UPPER[$uni[$i]];        }    }    return utf8_from_unicode($uni);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="nav nav-list">	<?php		if ($this->userIsSuperAdmin):	?>	<li class="nav-header"><?php echo JText::_('COM_CONFIG_SYSTEM'); ?></li>	<li><a href="index.php?option=com_config"><?php echo JText::_('COM_CONFIG_GLOBAL_CONFIGURATION'); ?></a></li>	<li class="divider"></li>	<?php		endif;	?>	<li class="nav-header"><?php echo JText::_('COM_CONFIG_COMPONENT_FIELDSET_LABEL'); ?></li>	<?php		foreach ($this->components as $component) :		$active = '';		if ($this->currentComponent === $component):			$active = ' class="active"';		endif;	?>		<li<?php echo $active; ?>><a href="index.php?option=com_config&view=component&component=<?php echo $component; ?>"><?php echo JText::_($component); ?></a></li>	<?php		endforeach;	?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_CONFIGURATION_FILE'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="300">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;</td>			</tr>		</tfoot>		<tbody>			<?php foreach ($this->config as $key => $value):?>			<tr>				<td>					<?php echo $key;?>				</td>				<td>					<?php echo htmlspecialchars($value, ENT_QUOTES);?>				</td>			</tr>			<?php endforeach;?>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="submenu-box">	<div class="submenu-box">		<div class="submenu-pad">			<ul id="submenu" class="information nav nav-list">				<li>					<a href="#" onclick="return false;" id="site" class="active">						<?php echo JText::_('COM_ADMIN_SYSTEM_INFORMATION'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="phpsettings">						<?php echo JText::_('COM_ADMIN_PHP_SETTINGS'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="config">						<?php echo JText::_('COM_ADMIN_CONFIGURATION_FILE'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="directory">						<?php echo JText::_('COM_ADMIN_DIRECTORY_PERMISSIONS'); ?></a>				</li>				<li>					<a href="#" onclick="return false;" id="phpinfo">						<?php echo JText::_('COM_ADMIN_PHP_INFORMATION'); ?></a>				</li>			</ul>			<div class="clr"></div>		</div>	</div>	<div class="clr"></div></div>
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one PostgreSQL DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       3.0 */class JSchemaChangeitemPostgresql extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  3.0	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand === 'ADD COLUMN')			{				$result = 'SELECT column_name FROM information_schema.columns WHERE table_name='				. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD_COLUMN';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand === 'ALTER COLUMN')			{				if (strtoupper($wordArray[6]) == 'TYPE')				{					$type = '';					for ($i = 7; $i < count($wordArray); $i++)					{						$type .= $wordArray[$i] . ' ';					}					if ($pos = strpos($type, '('))					{						$type = substr($type, 0, $pos);					}					if ($pos = strpos($type, ';'))					{						$type = substr($type, 0, $pos);					}					$result = 'SELECT column_name, data_type FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND data_type=' . $this->fixQuote($type);					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $type);				}				elseif (strtoupper($wordArray[7] . ' ' . $wordArray[8]) == 'NOT NULL')				{					if (strtoupper($wordArray[6]) == 'SET')					{						// SET NOT NULL						$isNullable = $this->fixQuote('NO');					}					else					{						// DROP NOT NULL						$isNullable = $this->fixQuote('YES');					}					$result = 'SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND is_nullable=' . $isNullable;					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->checkQueryExpected = 1;					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $isNullable);				}				elseif (strtoupper($wordArray[7]) === 'DEFAULT')				{					if (strtoupper($wordArray[6]) == 'SET')					{						$isNullDef = 'IS NOT NULL';					}					else					{						// DROP DEFAULT						$isNullDef = 'IS NULL';					}					$result = 'SELECT column_name, data_type, column_default FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND column_default ' . $isNullDef;					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->checkQueryExpected = 1;					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $isNullDef);				}			}		}		elseif ($command === 'DROP INDEX')		{			if (strtoupper($wordArray[2] . $wordArray[3]) == 'IFEXISTS')			{				$idx = $this->fixQuote($wordArray[4]);			}			else			{				$idx = $this->fixQuote($wordArray[2]);			}			$result = 'SELECT * FROM pg_indexes WHERE indexname=' . $idx;			$this->queryType = 'DROP_INDEX';			$this->checkQueryExpected = 0;			$this->msgElements = array($this->fixQuote($idx));		}		elseif ($command == 'CREATE INDEX' || (strtoupper($command . $wordArray[2]) == 'CREATE UNIQUE INDEX'))		{			if ($wordArray[1] === 'UNIQUE')			{				$idx = $this->fixQuote($wordArray[3]);				$table = $this->fixQuote($wordArray[5]);			}			else			{				$idx = $this->fixQuote($wordArray[2]);				$table = $this->fixQuote($wordArray[4]);			}			$result = 'SELECT * FROM pg_indexes WHERE indexname=' . $idx . ' AND tablename=' . $table;			$this->queryType = 'ADD_INDEX';			$this->checkQueryExpected = 1;			$this->msgElements = array($table, $idx);		}		if ($command == 'CREATE TABLE')		{			if (strtoupper($wordArray[2] . $wordArray[3] . $wordArray[4]) == 'IFNOTEXISTS')			{				$table = $this->fixQuote($wordArray[5]);			}			else			{				$table = $this->fixQuote($wordArray[2]);			}			$result = 'SELECT table_name FROM information_schema.tables WHERE table_name=' . $table;			$this->queryType = 'CREATE_TABLE';			$this->checkQueryExpected = 1;			$this->msgElements = array($table);		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with PostgreSQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   3.0	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == 'integer' && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'unsigned int(10)';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   3.0	 */	private function fixQuote($string)	{		$string = str_replace('"', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContactHelper', JPATH_ADMINISTRATOR . '/components/com_contact/helpers/contact.php');JLoader::register('CategoryHelperAssociation', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/association.php');/** * Contact Component Association Helper * * @package     Joomla.Site * @subpackage  com_contact * @since       3.0 */abstract class ContactHelperAssociation extends CategoryHelperAssociation{	/**	 * Method to get the associations for a given item	 *	 * @param   integer  $id    Id of the item	 * @param   string   $view  Name of the view	 *	 * @return  array   Array of associations for the item	 *	 * @since  3.0	 */	public static function getAssociations($id = 0, $view = null)	{		jimport('helper.route', JPATH_COMPONENT_SITE);		$app = JFactory::getApplication();		$jinput = $app->input;		$view = is_null($view) ? $jinput->get('view') : $view;		$id = empty($id) ? $jinput->getInt('id') : $id;		if ($view == 'contact')		{			if ($id)			{				$associations = JLanguageAssociations::getAssociations('com_contact', '#__contact_details', 'com_contact.item', $id);				$return = array();				foreach ($associations as $tag => $item)				{					$return[$tag] = ContactHelperRoute::getContactRoute($item->id, $item->catid, $item->language);				}				return $return;			}		}		if ($view == 'category' || $view == 'categories')		{			return self::getCategoryAssociations($id, 'com_contact');		}		return array();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><div class="tab-pane" id="associations">	<fieldset>		<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>		<?php endforeach; ?>	</fieldset></div>
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla MessageQueue logger class. * * This class is designed to output logs to a specific MySQL database table. Fields in this * table are based on the Syslog style of log output. This is designed to allow quick and * easy searching. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerMessagequeue extends JLogLogger{	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addEntry(JLogEntry $entry)	{		switch ($entry->priority)		{			case JLog::EMERGENCY:			case JLog::ALERT:			case JLog::CRITICAL:			case JLog::ERROR:				JFactory::getApplication()->enqueueMessage($entry->message, 'error');				break;			case JLog::WARNING:				JFactory::getApplication()->enqueueMessage($entry->message, 'warning');				break;			case JLog::NOTICE:				JFactory::getApplication()->enqueueMessage($entry->message, 'notice');				break;			case JLog::INFO:				JFactory::getApplication()->enqueueMessage($entry->message, 'message');				break;			default:				// Ignore other priorities.				break;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Displays a list of the installed languages. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesViewInstalled extends JViewLegacy{	/**	 * @var object client object	 */	protected $client = null;	/**	 * @var boolean|JExeption True, if FTP settings should be shown, or an exeption	 */	protected $ftp = null;	/**	 * @var string option name	 */	protected $option = null;	/**	 * @var object pagination information	 */	protected $pagination = null;	/**	 * @var array languages information	 */	protected $rows = null;	/**	 * @var object user object	 */	protected $user = null;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->ftp        = $this->get('Ftp');		$this->option     = $this->get('Option');		$this->pagination = $this->get('Pagination');		$this->rows       = $this->get('Data');		$this->state      = $this->get('State');		$client = (int) $this->state->get('filter.client_id', 0);		LanguagesHelper::addSubmenu('installed', $client);		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_INSTALLED_TITLE'), 'langmanager.png');		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::makeDefault('installed.setDefault');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			// Add install languages link to the lang installer component			$bar = JToolbar::getInstance('toolbar');			$bar->appendButton('Link', 'upload', 'COM_LANGUAGES_INSTALL', 'index.php?option=com_installer&view=languages');			JToolbarHelper::divider();			JToolbarHelper::preferences('com_languages');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_INSTALLED');		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_SITE_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('site') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>	</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?>		<tr>			<td class="imgTotal">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">					<i class="icon-arrow-up"></i></a>			</td>			<td class="description">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">..</a>			</td>			<td>&#160;</td>			<td>&#160;</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>&#160;</td>		<?php endif;?>		</tr>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JHtml::_('behavior.framework');JHtml::_('behavior.keepalive');?><div id="finder-indexer-container">	<br /><br />	<h1 id="finder-progress-header"><?php echo JText::_('COM_FINDER_INDEXER_HEADER_INIT'); ?></h1>	<p id="finder-progress-message"><?php echo JText::_('COM_FINDER_INDEXER_MESSAGE_INIT'); ?></p>	<form id="finder-progress-form"></form>	<div id="finder-progress-container"></div>	<input id="finder-indexer-token" type="hidden" name="<?php echo JFactory::getSession()->getFormToken(); ?>" value="1" /></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Modules component * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewPreview extends JViewLegacy{	public function display($tpl = null)	{		$editor = JFactory::getConfig()->get('editor');		$this->editor = JEditor::getInstance($editor);		parent::display($tpl);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Registration controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerRegistration extends UsersController{	/**	 * Method to activate a user.	 *	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function activate()	{		$user  = JFactory::getUser();		$input = JFactory::getApplication()->input;		$uParams = JComponentHelper::getParams('com_users');		// If the user is logged in, return them back to the homepage.		if ($user->get('id'))		{			$this->setRedirect('index.php');			return true;		}		// If user registration or account activation is disabled, throw a 403.		if ($uParams->get('useractivation') == 0 || $uParams->get('allowUserRegistration') == 0)		{			JError::raiseError(403, JText::_('JLIB_APPLICATION_ERROR_ACCESS_FORBIDDEN'));			return false;		}		$model = $this->getModel('Registration', 'UsersModel');		$token = $input->getAlnum('token');		// Check that the token is in a valid format.		if ($token === null || strlen($token) !== 32)		{			JError::raiseError(403, JText::_('JINVALID_TOKEN'));			return false;		}		// Attempt to activate the user.		$return = $model->activate($token);		// Check for errors.		if ($return === false)		{			// Redirect back to the homepage.			$this->setMessage(JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect('index.php');			return false;		}		$useractivation = $uParams->get('useractivation');		// Redirect to the login screen.		if ($useractivation == 0)		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_SAVE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));		}		elseif ($useractivation == 1)		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_ACTIVATE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));		}		elseif ($return->getParam('activate'))		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_VERIFY_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		}		else		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_ADMINACTIVATE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		}		return true;	}	/**	 * Method to register a user.	 *	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function register()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// If registration is disabled - Redirect to login page.		if (JComponentHelper::getParams('com_users')->get('allowUserRegistration') == 0)		{			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));			return false;		}		$app	= JFactory::getApplication();		$model	= $this->getModel('Registration', 'UsersModel');		// Get the user data.		$requestData = $this->input->post->get('jform', array(), 'array');		// Validate the posted data.		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data	= $model->validate($form, $requestData);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_users.registration.data', $requestData);			// Redirect back to the registration screen.			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration', false));			return false;		}		// Attempt to save the data.		$return	= $model->register($data);		// Check for errors.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('com_users.registration.data', $data);			// Redirect back to the edit screen.			$this->setMessage(JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration', false));			return false;		}		// Flush the data from the session.		$app->setUserState('com_users.registration.data', null);		// Redirect to the profile screen.		if ($return === 'adminactivate'){			$this->setMessage(JText::_('COM_USERS_REGISTRATION_COMPLETE_VERIFY'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		} elseif ($return === 'useractivate')		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_COMPLETE_ACTIVATE'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		}		else		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_SAVE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Picasa data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataPicasaPhoto extends JGoogleData{	/**	 * @var    SimpleXMLElement  The photo's XML	 * @since  12.3	 */	protected $xml;	/**	 * Constructor.	 *	 * @param   SimpleXMLElement  $xml      XML from Google	 * @param   JRegistry         $options  Google options object	 * @param   JGoogleAuth       $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(SimpleXMLElement $xml, JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->xml = $xml;		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://picasaweb.google.com/data/');		}	}	/**	 * Method to delete a Picasa photo	 *	 * @param   mixed  $match  Check for most up to date photo	 *	 * @return  boolean  Success or failure.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function delete($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$jdata = $this->query($url, null, array('GData-Version' => 2, 'If-Match' => $match), 'delete');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			if ($jdata->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}			$this->xml = null;			return true;		}		else		{			return false;		}	}	/**	 * Method to get the photo link	 *	 * @param   string  $type  Type of link to return	 *	 * @return  string  Link or false on failure	 *	 * @since   12.3	 */	public function getLink($type = 'edit')	{		$links = $this->xml->link;		foreach ($links as $link)		{			if ($link->attributes()->rel == $type)			{				return (string) $link->attributes()->href;			}		}		return false;	}	/**	 * Method to get the photo's URL	 *	 * @return  string  Link	 *	 * @since   12.3	 */	public function getURL()	{		return (string) $this->xml->children()->content->attributes()->src;	}	/**	 * Method to get the photo's thumbnails	 *	 * @return  array  An array of thumbnails	 *	 * @since   12.3	 */	public function getThumbnails()	{		$thumbs = array();		foreach ($this->xml->children('media', true)->group->thumbnail as $item)		{			$url = (string) $item->attributes()->url;			$width = (int) $item->attributes()->width;			$height = (int) $item->attributes()->height;			$thumbs[$width] = array('url' => $url, 'w' => $width, 'h' => $height);		}		return $thumbs;	}	/**	 * Method to get the title of the photo	 *	 * @return  string  Photo title	 *	 * @since   12.3	 */	public function getTitle()	{		return (string) $this->xml->children()->title;	}	/**	 * Method to get the summary of the photo	 *	 * @return  string  Photo description	 *	 * @since   12.3	 */	public function getSummary()	{		return (string) $this->xml->children()->summary;	}	/**	 * Method to get the access level of the photo	 *	 * @return  string  Photo access level	 *	 * @since   12.3	 */	public function getAccess()	{		return (string) $this->xml->children('gphoto', true)->access;	}	/**	 * Method to get the time of the photo	 *	 * @return  double  Photo time	 *	 * @since   12.3	 */	public function getTime()	{		return (double) $this->xml->children('gphoto', true)->timestamp / 1000;	}	/**	 * Method to get the size of the photo	 *	 * @return  int  Photo size	 *	 * @since   12.3	 */	public function getSize()	{		return (int) $this->xml->children('gphoto', true)->size;	}	/**	 * Method to get the height of the photo	 *	 * @return  int  Photo height	 *	 * @since   12.3	 */	public function getHeight()	{		return (int) $this->xml->children('gphoto', true)->height;	}	/**	 * Method to get the width of the photo	 *	 * @return  int  Photo width	 *	 * @since   12.3	 */	public function getWidth()	{		return (int) $this->xml->children('gphoto', true)->width;	}	/**	 * Method to set the title of the photo	 *	 * @param   string  $title  New photo title	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setTitle($title)	{		$this->xml->children()->title = $title;		return $this;	}	/**	 * Method to set the summary of the photo	 *	 * @param   string  $summary  New photo description	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setSummary($summary)	{		$this->xml->children()->summary = $summary;		return $this;	}	/**	 * Method to set the access level of the photo	 *	 * @param   string  $access  New photo access level	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setAccess($access)	{		$this->xml->children('gphoto', true)->access = $access;		return $this;	}	/**	 * Method to set the time of the photo	 *	 * @param   int  $time  New photo time	 *	 * @return  JGoogleDataPicasaPhoto  The object for method chaining	 *	 * @since   12.3	 */	public function setTime($time)	{		$this->xml->children('gphoto', true)->timestamp = $time * 1000;		return $this;	}	/**	 * Method to modify a Picasa Photo	 *	 * @param   string  $match  Optional eTag matching parameter	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	public function save($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$headers = array('GData-Version' => 2, 'Content-type' => 'application/atom+xml', 'If-Match' => $match);				$jdata = $this->query($url, $this->xml->asXML(), $headers, 'put');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}	/**	 * Refresh photo data	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function refresh()	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			$jdata = $this->query($url, null, array('GData-Version' => 2));			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a list of content languages * * @package     Joomla.Libraries * @subpackage  Form * @see         JFormFieldLanguage for a select list of application languages. * @since       1.6 */class JFormFieldContentlanguage extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'ContentLanguage';	/**	 * Method to get the field options for content languages.	 *	 * @return  array  The options the field is going to show.	 *	 * @since   1.6	 */	protected function getOptions()	{		return array_merge(parent::getOptions(), JHtml::_('contentlanguage.existing'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Impressions Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldImpTotal extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ImpTotal';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$class		= ' class="validate-numeric text_area"';		$onchange	= ' onchange="document.id(\''.$this->id.'_unlimited\').checked=document.id(\''.$this->id.'\').value==\'\';"';		$onclick	= ' onclick="if (document.id(\''.$this->id.'_unlimited\').checked) document.id(\''.$this->id.'\').value=\'\';"';		$value		= empty($this->value) ? '' : $this->value;		$checked	= empty($this->value) ? ' checked="checked"' : '';		return '<input type="text" name="'.$this->name.'" id="'.$this->id.'" size="9" value="'.htmlspecialchars($value, ENT_COMPAT, 'UTF-8').'" '.$class.$onchange.' />		<fieldset class="checkboxes impunlimited"><input id="'.$this->id.'_unlimited" type="checkbox"'.$checked.$onclick.' />		<label for="'.$this->id.'_unlimited" id="jform-imp" type="text">'.JText::_('COM_BANNERS_UNLIMITED').'</label></fieldset>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$html = JHtml::_('icons.buttons', $buttons);?><?php if (!empty($html)): ?>	<div class="cpanel">		<?php echo $html;?>	</div><?php endif;?>
<?php/** * @package     Joomla.Legacy * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('LogException is deprecated, use SPL Exceptions instead.', JLog::WARNING, 'deprecated');/** * Exception class definition for the Log subpackage. * * @package     Joomla.Legacy * @subpackage  Log * @since       11.1 * @deprecated  12.3 Use semantic exceptions instead */class LogException extends RuntimeException{}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/index.php';
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for download a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewDownload extends JViewLegacy{	protected $form;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form	= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Component Language Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesModelLanguage extends JModelAdmin{	/**	 * Override to get the table	 *	 * @return  JTable	 * @since   1.6	 */	public function getTable($name = '', $prefix = '', $options = array())	{		return JTable::getInstance('Language');	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		$app    = JFactory::getApplication('administrator');		$params = JComponentHelper::getParams('com_languages');		// Load the User state.		$langId = $app->input->getInt('lang_id');		$this->setState('language.id', $langId);		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get a member item.	 *	 * @param   integer	The id of the member to get.	 *	 * @return  mixed  User data object on success, false on failure.	 * @since   1.0	 */	public function getItem($langId = null)	{		$langId	= (!empty($langId)) ? $langId : (int) $this->getState('language.id');		$false  = false;		// Get a member row instance.		$table = $this->getTable();		// Attempt to load the row.		$return = $table->load($langId);		// Check for a table object error.		if ($return === false && $table->getError())		{			$this->setError($table->getError());			return $false;		}		$properties = $table->getProperties(1);		$value = JArrayHelper::toObject($properties, 'JObject');		return $value;	}	/**	 * Method to get the group form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_languages.language', 'language', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_languages.edit.language.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_languages.language', $data);		return $data;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$langId	= (int) $this->getState('language.id');		$isNew	= true;		$dispatcher = JEventDispatcher::getInstance();		JPluginHelper::importPlugin('extension');		$table = $this->getTable();		// Load the row if saving an existing item.		if ($langId > 0)		{			$table->load($langId);			$isNew = false;		}		// Bind the data		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Check the data		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionBeforeSave event.		$result = $dispatcher->trigger('onExtensionBeforeSave', array('com_languages.language', &$table, $isNew));		// Check the event responses.		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionAfterSave event.		$dispatcher->trigger('onExtensionAfterSave', array('com_languages.language', &$table, $isNew));		$this->setState('language.id', $table->lang_id);		// Clean the cache.		$this->cleanCache();		return true;	}	/**	 * Custom clean cache method	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('_system');		parent::cleanCache('com_languages');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$document = JFactory::getDocument();$direction = $document->direction == 'rtl' ? 'pull-right' : '';require JModuleHelper::getLayoutPath('mod_menu', $enabled ? 'default_enabled' : 'default_disabled');$menu->renderMenu('menu', $enabled ? 'nav ' . $direction : 'nav disabled ' . $direction);
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extension object * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerExtension extends JObject{	/**	 * Filename of the extension	 *	 * @var    string	 * @since  3.1	 */	public $filename = '';	/**	 * Type of the extension	 *	 * @var    string	 * @since  3.1	 */	public $type = '';	/**	 * Unique Identifier for the extension	 *	 * @var    string	 * @since  3.1	 */	public $id = '';	/**	 * The status of the extension	 *	 * @var    boolean	 * @since  3.1	 */	public $published = false;	/**	 * String representation of client. Valid for modules, templates and languages.	 * Set by default to site.	 *	 * @var    string	 * @since  3.1	 */	public $client = 'site';	/**	 * The group name of the plugin. Not used for other known extension types (only plugins)	 *	 * @var string	 * @since  3.1	 */	public $group = '';	/**	 * An object representation of the manifest file stored metadata	 *	 * @var object	 * @since  3.1	 */	public $manifest_cache = null;	/**	 * An object representation of the extension params	 *	 * @var    object	 * @since  3.1	 */	public $params = null;	/**	 * Constructor	 *	 * @param   SimpleXMLElement  $element  A SimpleXMLElement from which to load data from	 *	 * @since  3.1	 */	public function __construct(SimpleXMLElement $element = null)	{		if ($element)		{			$this->type = (string) $element->attributes()->type;			$this->id = (string) $element->attributes()->id;			switch ($this->type)			{				case 'component':					// By default a component doesn't have anything					break;				case 'module':				case 'template':				case 'language':					$this->client = (string) $element->attributes()->client;					$tmp_client_id = JApplicationHelper::getClientInfo($this->client, 1);					if ($tmp_client_id == null)					{						JLog::add(JText::_('JLIB_INSTALLER_ERROR_EXTENSION_INVALID_CLIENT_IDENTIFIER'), JLog::WARNING, 'jerror');					}					else					{						$this->client_id = $tmp_client_id->id;					}					break;				case 'plugin':					$this->group = (string) $element->attributes()->group;					break;				default:					// Catch all					// Get and set client and group if we don't recognise the extension					if ($element->attributes()->client)					{						$this->client_id = JApplicationHelper::getClientInfo($this->client, 1);						$this->client_id = $this->client_id->id;					}					if ($element->attributes()->group)					{						$this->group = (string) $element->attributes()->group;					}					break;			}			$this->filename = (string) $element;		}	}}/** * Deprecated class placeholder. You should use JInstallerExtension instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JExtension extends JInstallerExtension{	/**	 * Constructor	 *	 * @param   SimpleXMLElement  $element  A SimpleXMLElement from which to load data from	 *	 * @since  3.1	 */	public function __construct(SimpleXMLElement $element = null)	{		parent::__construct($element);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$list = ModArticlesNewsHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_articles_news', $params->get('layout', 'horizontal'));
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');?><div class="archive<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading', 1)) : ?><div class="page-header"><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1></div><?php endif; ?><form id="adminForm" action="<?php echo JRoute::_('index.php')?>" method="post" class="form-inline">	<fieldset class="filters">	<div class="filter-search alert alert-info">		<?php if ($this->params->get('filter_field') != 'hide') : ?>		<label class="filter-search-lbl" for="filter-search"><?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?></label>		<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->filter); ?>" class="inputbox span2" onchange="document.getElementById('adminForm').submit();" />		<?php endif; ?>		<?php echo $this->form->monthField; ?>		<?php echo $this->form->yearField; ?>		<?php echo $this->form->limitField; ?>	</div>	<button type="submit" class="btn btn-primary"><?php echo JText::_('JGLOBAL_FILTER_BUTTON'); ?></button>	<input type="hidden" name="view" value="archive" />	<input type="hidden" name="option" value="com_content" />	<input type="hidden" name="limitstart" value="0" />	</fieldset>	<?php echo $this->loadTemplate('items'); ?></form></div>
<?php/** * @package     Joomla.Site * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Load the com_media language files, default to the admin file and fall back to site if one isn't found$lang = JFactory::getLanguage();$lang->load('com_media', JPATH_ADMINISTRATOR, null, false, false)||	$lang->load('com_media', JPATH_SITE, null, false, false)||	$lang->load('com_media', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false);// Hand processing over to the admin base filerequire_once JPATH_COMPONENT_ADMINISTRATOR . '/media.php';
<?php/*** This is the dynamic loader for the library. It checks whether you have* the mbstring extension available and includes relevant files* on that basis, falling back to the native (as in written in PHP) version* if mbstring is unavailabe.** It's probably easiest to use this, if you don't want to understand* the dependencies involved, in conjunction with PHP versions etc. At* the same time, you might get better performance by managing loading* yourself. The smartest way to do this, bearing in mind performance,* is probably to "load on demand" - i.e. just before you use these* functions in your code, load the version you need.** It makes sure the the following functions are available;* utf8_strlen, utf8_strpos, utf8_strrpos, utf8_substr,* utf8_strtolower, utf8_strtoupper* Other functions in the ./native directory depend on these* six functions being available* @package utf8*//*** Put the current directory in this constant*/if ( !defined('UTF8') ) {    define('UTF8',dirname(__FILE__));}/*** If string overloading is active, it will break many of the* native implementations. mbstring.func_overload must be set* to 0, 1 or 4 in php.ini (string overloading disabled).* Also need to check we have the correct internal mbstring* encoding*/if ( extension_loaded('mbstring')) {    if ( ini_get('mbstring.func_overload') & MB_OVERLOAD_STRING ) {        trigger_error('String functions are overloaded by mbstring',E_USER_ERROR);    }    mb_internal_encoding('UTF-8');}/*** Check whether PCRE has been compiled with UTF-8 support*/$UTF8_ar = array();if ( preg_match('/^.{1}$/u',"",$UTF8_ar) != 1 ) {    trigger_error('PCRE is not compiled with UTF-8 support',E_USER_ERROR);}unset($UTF8_ar);/*** Load the smartest implementations of utf8_strpos, utf8_strrpos* and utf8_substr*/if ( !defined('UTF8_CORE') ) {    if ( function_exists('mb_substr') ) {        require_once UTF8 . '/mbstring/core.php';    } else {        require_once UTF8 . '/utils/unicode.php';        require_once UTF8 . '/native/core.php';    }}/*** Load the native implementation of utf8_substr_replace*/require_once UTF8 . '/substr_replace.php';/*** You should now be able to use all the other utf_* string functions*/
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP client class. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttp{	/**	 * @var    JRegistry  Options for the HTTP client.	 * @since  11.3	 */	protected $options;	/**	 * @var    JHttpTransport  The HTTP transport object to use in sending HTTP requests.	 * @since  11.3	 */	protected $transport;	/**	 * Constructor.	 *	 * @param   JRegistry       $options    Client options object. If the registry contains any headers.* elements,	 *                                      these will be added to the request headers.	 * @param   JHttpTransport  $transport  The HTTP transport object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JHttpTransport $transport = null)	{		$this->options   = isset($options) ? $options : new JRegistry;		$this->transport = isset($transport) ? $transport : JHttpFactory::getAvailableDriver($this->options);	}	/**	 * Get an option from the HTTP client.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   11.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the HTTP client.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JHttp  This object for method chaining.	 *	 * @since   11.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}	/**	 * Method to send the OPTIONS command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function options($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('OPTIONS', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the HEAD command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function head($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('HEAD', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the GET command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function get($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('GET', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the POST command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   mixed    $data     Either an associative array or a string to be sent with the request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function post($url, $data, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('POST', new JUri($url), $data, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the PUT command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   mixed    $data     Either an associative array or a string to be sent with the request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function put($url, $data, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('PUT', new JUri($url), $data, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the DELETE command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function delete($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('DELETE', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the TRACE command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function trace($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('TRACE', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the PATCH command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   mixed    $data     Either an associative array or a string to be sent with the request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   12.2	 */	public function patch($url, $data, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('PATCH', new JUri($url), $data, $headers, $timeout, $this->options->get('userAgent', null));	}}
<?php/*** @version $Id$* Tools for conversion between UTF-8 and unicode* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*///--------------------------------------------------------------------/*** Takes an UTF-8 string and returns an array of ints representing the* Unicode characters. Astral planes are supported ie. the ints in the* output can be > 0xFFFF. Occurrances of the BOM are ignored. Surrogates* are not allowed.* Returns false if the input string isn't a valid UTF-8 octet sequence* and raises a PHP error at level E_USER_WARNING* Note: this function has been modified slightly in this library to* trigger errors on encountering bad bytes* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return mixed array of unicode code points or FALSE if UTF-8 invalid* @see utf8_from_unicode* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*/function utf8_to_unicode($str) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $out = array();    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $out[] = $in;                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                * Rather than trying to resynchronize, we will carry on until the end                * of the sequence and let the later error handling code catch it.                */                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x03) << 24;                $mState = 4;                $mBytes = 5;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 1) << 30;                $mState = 5;                $mBytes = 6;            } else {                /* Current octet is neither in the US-ASCII range nor a legal first                 * octet of a multi-octet sequence.                 */                trigger_error(                        'utf8_to_unicode: Illegal sequence identifier '.                            'in UTF-8 at byte '.$i,                        E_USER_WARNING                    );                return FALSE;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    /*                    * Check for illegal sequences and codepoints.                    */                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ||                        (4 < $mBytes) ||                        // From Unicode 3.2, surrogate characters are illegal                        (($mUcs4 & 0xFFFFF800) == 0xD800) ||                        // Codepoints outside the Unicode range are illegal                        ($mUcs4 > 0x10FFFF)) {                        trigger_error(                                'utf8_to_unicode: Illegal sequence or codepoint '.                                    'in UTF-8 at byte '.$i,                                E_USER_WARNING                            );                        return FALSE;                    }                    if (0xFEFF != $mUcs4) {                        // BOM is legal but we don't want to output it                        $out[] = $mUcs4;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                /**                *((0xC0 & (*in) != 0x80) && (mState != 0))                * Incomplete multi-octet sequence.                */                trigger_error(                        'utf8_to_unicode: Incomplete multi-octet '.                        '   sequence in UTF-8 at byte '.$i,                        E_USER_WARNING                    );                return FALSE;            }        }    }    return $out;}//--------------------------------------------------------------------/*** Takes an array of ints representing the Unicode characters and returns* a UTF-8 string. Astral planes are supported ie. the ints in the* input can be > 0xFFFF. Occurrances of the BOM are ignored. Surrogates* are not allowed.* Returns false if the input array contains ints that represent* surrogates or are outside the Unicode range* and raises a PHP error at level E_USER_WARNING* Note: this function has been modified slightly in this library to use* output buffering to concatenate the UTF-8 string (faster) as well as* reference the array by it's keys* @param array of unicode code points representing a string* @return mixed UTF-8 string or FALSE if array contains invalid code points* @author <hsivonen@iki.fi>* @see utf8_to_unicode* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*/function utf8_from_unicode($arr) {    ob_start();    foreach (array_keys($arr) as $k) {        # ASCII range (including control chars)        if ( ($arr[$k] >= 0) && ($arr[$k] <= 0x007f) ) {            echo chr($arr[$k]);        # 2 byte sequence        } else if ($arr[$k] <= 0x07ff) {            echo chr(0xc0 | ($arr[$k] >> 6));            echo chr(0x80 | ($arr[$k] & 0x003f));        # Byte order mark (skip)        } else if($arr[$k] == 0xFEFF) {            // nop -- zap the BOM        # Test for illegal surrogates        } else if ($arr[$k] >= 0xD800 && $arr[$k] <= 0xDFFF) {            // found a surrogate            trigger_error(                'utf8_from_unicode: Illegal surrogate '.                    'at index: '.$k.', value: '.$arr[$k],                E_USER_WARNING                );            return FALSE;        # 3 byte sequence        } else if ($arr[$k] <= 0xffff) {            echo chr(0xe0 | ($arr[$k] >> 12));            echo chr(0x80 | (($arr[$k] >> 6) & 0x003f));            echo chr(0x80 | ($arr[$k] & 0x003f));        # 4 byte sequence        } else if ($arr[$k] <= 0x10ffff) {            echo chr(0xf0 | ($arr[$k] >> 18));            echo chr(0x80 | (($arr[$k] >> 12) & 0x3f));            echo chr(0x80 | (($arr[$k] >> 6) & 0x3f));            echo chr(0x80 | ($arr[$k] & 0x3f));        } else {            trigger_error(                'utf8_from_unicode: Codepoint out of Unicode range '.                    'at index: '.$k.', value: '.$arr[$k],                E_USER_WARNING                );            // out of range            return FALSE;        }    }    $result = ob_get_contents();    ob_end_clean();    return $result;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><p class="nowarning"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_INPROGRESS') ?></p><div class="joomlaupdate_spinner" ></div><div id="update-progress">	<div id="extprogress">		<div class="extprogrow">			<?php			echo JHtml::_(				'image', 'media/bar.gif', JText::_('COM_JOOMLAUPDATE_VIEW_PROGRESS'),				array('class' => 'progress', 'id' => 'progress'), true			); ?>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_PERCENT'); ?></span>			<span class="extvalue" id="extpercent"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_BYTESREAD'); ?></span>			<span class="extvalue" id="extbytesin"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_BYTESEXTRACTED'); ?></span>			<span class="extvalue" id="extbytesout"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_FILESEXTRACTED'); ?></span>			<span class="extvalue" id="extfiles"></span>		</div>	</div></div>
<?php/** * @package     Joomla.Libraries * @subpackage  Less * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('lessphp.lessc');/** * Help system class * * @package     Joomla.Libraries * @subpackage  Less * @since       3.0 */class JLessFormatterJoomla extends lessc_formatter_classic{	public $disableSingle = true;	public $breakSelectors = true;	public $assignSeparator = ": ";	public $selectorSeparator = ",";	public $indentChar = "\t";}
<?php/** * @package     Joomla.Legacy * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla Administrator Controller * * Controller (controllers are where you put all the actual code) Provides basic * functionality, such as rendering views (aka displaying templates). * * @package     Joomla.Legacy * @subpackage  Controller * @since       12.2 */class JControllerAdmin extends JControllerLegacy{	/**	 * The URL option for the component.	 *	 * @var    string	 * @since  12.2	 */	protected $option;	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  12.2	 */	protected $text_prefix;	/**	 * The URL view list variable.	 *	 * @var    string	 * @since  12.2	 */	protected $view_list;	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JControllerLegacy	 * @since   12.2	 * @throws  Exception	 */	public function __construct($config = array())	{		parent::__construct($config);		// Define standard task mappings.		// Value = 0		$this->registerTask('unpublish', 'publish');		// Value = 2		$this->registerTask('archive', 'publish');		// Value = -2		$this->registerTask('trash', 'publish');		// Value = -3		$this->registerTask('report', 'publish');		$this->registerTask('orderup', 'reorder');		$this->registerTask('orderdown', 'reorder');		// Guess the option as com_NameOfController.		if (empty($this->option))		{			$this->option = 'com_' . strtolower($this->getName());		}		// Guess the JText message prefix. Defaults to the option.		if (empty($this->text_prefix))		{			$this->text_prefix = strtoupper($this->option);		}		// Guess the list view as the suffix, eg: OptionControllerSuffix.		if (empty($this->view_list))		{			$r = null;			if (!preg_match('/(.*)Controller(.*)/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_CONTROLLER_GET_NAME'), 500);			}			$this->view_list = strtolower($r[2]);		}	}	/**	 * Removes an item.	 *	 * @return  void	 *	 * @since   12.2	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));		// Get items to remove from the request.		$cid = JFactory::getApplication()->input->get('cid', array(), 'array');		if (!is_array($cid) || count($cid) < 1)		{			JLog::add(JText::_($this->text_prefix . '_NO_ITEM_SELECTED'), JLog::WARNING, 'jerror');		}		else		{			// Get the model.			$model = $this->getModel();			// Make sure the item ids are integers			jimport('joomla.utilities.arrayhelper');			JArrayHelper::toInteger($cid);			// Remove the items.			if ($model->delete($cid))			{				$this->setMessage(JText::plural($this->text_prefix . '_N_ITEMS_DELETED', count($cid)));			}			else			{				$this->setMessage($model->getError());			}		}		// Invoke the postDelete method to allow for the child class to access the model.		$this->postDeleteHook($model, $cid);		$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false));	}	/**	 * Function that allows child controller access to model data	 * after the item has been deleted.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   integer       $id     The validated data.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function postDeleteHook(JModelLegacy $model, $id = null)	{	}	/**	 * Display is not supported by this controller.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function display($cachable = false, $urlparams = array())	{		return $this;	}	/**	 * Method to publish a list of items	 *	 * @return  void	 *	 * @since   12.2	 */	public function publish()	{		// Check for request forgeries		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));		// Get items to publish from the request.		$cid = JFactory::getApplication()->input->get('cid', array(), 'array');		$data = array('publish' => 1, 'unpublish' => 0, 'archive' => 2, 'trash' => -2, 'report' => -3);		$task = $this->getTask();		$value = JArrayHelper::getValue($data, $task, 0, 'int');		if (empty($cid))		{			JLog::add(JText::_($this->text_prefix . '_NO_ITEM_SELECTED'), JLog::WARNING, 'jerror');		}		else		{			// Get the model.			$model = $this->getModel();			// Make sure the item ids are integers			JArrayHelper::toInteger($cid);			// Publish the items.			try			{				$model->publish($cid, $value);				if ($value == 1)				{					$ntext = $this->text_prefix . '_N_ITEMS_PUBLISHED';				}				elseif ($value == 0)				{					$ntext = $this->text_prefix . '_N_ITEMS_UNPUBLISHED';				}				elseif ($value == 2)				{					$ntext = $this->text_prefix . '_N_ITEMS_ARCHIVED';				}				else				{					$ntext = $this->text_prefix . '_N_ITEMS_TRASHED';				}				$this->setMessage(JText::plural($ntext, count($cid)));			}			catch (Exception $e)			{				$this->setMessage(JText::_('JLIB_DATABASE_ERROR_ANCESTOR_NODES_LOWER_STATE'), 'error');			}		}		$extension = $this->input->get('extension');		$extensionURL = ($extension) ? '&extension=' . $extension : '';		$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $extensionURL, false));	}	/**	 * Changes the order of one or more records.	 *	 * @return  boolean  True on success	 *	 * @since   12.2	 */	public function reorder()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids = JFactory::getApplication()->input->post->get('cid', array(), 'array');		$inc = ($this->getTask() == 'orderup') ? -1 : +1;		$model = $this->getModel();		$return = $model->reorder($ids, $inc);		if ($return === false)		{			// Reorder failed.			$message = JText::sprintf('JLIB_APPLICATION_ERROR_REORDER_FAILED', $model->getError());			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false), $message, 'error');			return false;		}		else		{			// Reorder succeeded.			$message = JText::_('JLIB_APPLICATION_SUCCESS_ITEM_REORDERED');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false), $message);			return true;		}	}	/**	 * Method to save the submitted ordering values for records.	 *	 * @return  boolean  True on success	 *	 * @since   12.2	 */	public function saveorder()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the input		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return === false)		{			// Reorder failed			$message = JText::sprintf('JLIB_APPLICATION_ERROR_REORDER_FAILED', $model->getError());			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false), $message, 'error');			return false;		}		else		{			// Reorder succeeded.			$this->setMessage(JText::_('JLIB_APPLICATION_SUCCESS_ORDERING_SAVED'));			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false));			return true;		}	}	/**	 * Check in of one or more records.	 *	 * @return  boolean  True on success	 *	 * @since   12.2	 */	public function checkin()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids = JFactory::getApplication()->input->post->get('cid', array(), 'array');		$model = $this->getModel();		$return = $model->checkin($ids);		if ($return === false)		{			// Checkin failed.			$message = JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError());			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false), $message, 'error');			return false;		}		else		{			// Checkin succeeded.			$message = JText::plural($this->text_prefix . '_N_ITEMS_CHECKED_IN', count($ids));			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false), $message);			return true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?>	<?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>	       		<?php if ($this->params->get('categories_description')) : ?>		 <div class="category-desc base-desc">			<?php echo  JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_newsfeeds.categories'); ?>			</div>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc  base-desc">					<?php  echo JHtml::_('content.prepare', $this->parent->description, '', 'com_newsfeeds.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?>	<?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$lang = JFactory::getLanguage();$app  = JFactory::getApplication();if ($params->get('opensearch', 1)){	$doc = JFactory::getDocument();	$ostitle = $params->get('opensearch_title', JText::_('MOD_SEARCH_SEARCHBUTTON_TEXT').' '.$app->getCfg('sitename'));	$doc->addHeadLink(JURI::getInstance()->toString(array('scheme', 'host', 'port')).JRoute::_('&option=com_search&format=opensearch'), 'search', 'rel', array('title' => htmlspecialchars($ostitle), 'type' => 'application/opensearchdescription+xml'));}$upper_limit = $lang->getUpperLimitSearchWord();$button			= $params->get('button', '');$imagebutton	= $params->get('imagebutton', '');$button_pos		= $params->get('button_pos', 'left');$button_text	= htmlspecialchars($params->get('button_text', JText::_('MOD_SEARCH_SEARCHBUTTON_TEXT')));$width			= (int) $params->get('width', 20);$maxlength		= $upper_limit;$text			= htmlspecialchars($params->get('text', JText::_('MOD_SEARCH_SEARCHBOX_TEXT')));$label			= htmlspecialchars($params->get('label', JText::_('MOD_SEARCH_LABEL_TEXT')));$set_Itemid		= (int) $params->get('set_itemid', 0);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));if ($imagebutton){	$img = ModSearchHelper::getSearchImage($button_text);}$mitemid = $set_Itemid > 0 ? $set_Itemid : $app->input->get('Itemid');require JModuleHelper::getLayoutPath('mod_search', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$serverinfo = $params->get('serverinfo');$siteinfo	= $params->get('siteinfo');$list = ModStatsHelper::getStats($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_stats_admin', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="category-name">				<?php $title = $this->escape($displayData['item']->category_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($displayData['item']->catslug)).'">'.$title.'</a>';?>				<?php if ($displayData['params']->get('link_category') && $displayData['item']->catslug) : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>				<?php endif; ?>			</dd>
<?php/** * @package     Joomla.Platform * @subpackage  Event * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to handle dispatching of events. * * This is the Observable part of the Observer design pattern * for the event architecture. * * @package     Joomla.Platform * @subpackage  Event * @link        http://docs.joomla.org/Tutorial:Plugins Plugin tutorials * @see         JPlugin * @since       12.1 */class JEventDispatcher extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  11.3	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  11.3	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  11.3	 */	protected $_methods = array();	/**	 * Stores the singleton instance of the dispatcher.	 *	 * @var    JEventDispatcher	 * @since  11.3	 */	protected static $instance = null;	/**	 * Returns the global Event Dispatcher object, only creating it	 * if it doesn't already exist.	 *	 * @return  JEventDispatcher  The EventDispatcher object.	 *	 * @since   11.1	 */	public static function getInstance()	{		if (self::$instance === null)		{			self::$instance = new static;		}		return self::$instance;	}	/**	 * Get the state of the JEventDispatcher object	 *	 * @return  mixed    The state of the object.	 *	 * @since   11.3	 */	public function getState()	{		return $this->_state;	}	/**	 * Registers an event handler to the event dispatcher	 *	 * @param   string  $event    Name of the event to register handler for	 * @param   string  $handler  Name of the event handler	 *	 * @return  void	 *	 * @since   11.1	 * @throws InvalidArgumentException	 */	public function register($event, $handler)	{		// Are we dealing with a class or callback type handler?		if (is_callable($handler))		{			// Ok, function type event handler... let's attach it.			$method = array('event' => $event, 'handler' => $handler);			$this->attach($method);		}		elseif (class_exists($handler))		{			// Ok, class type event handler... let's instantiate and attach it.			$this->attach(new $handler($this));		}		else		{			throw new InvalidArgumentException('Invalid event handler.');		}	}	/**	 * Triggers an event by dispatching arguments to all observers that handle	 * the event and returning their return values.	 *	 * @param   string  $event  The event to trigger.	 * @param   array   $args   An array of arguments.	 *	 * @return  array  An array of results from each function call.	 *	 * @since   11.1	 */	public function trigger($event, $args = array())	{		$result = array();		/*		 * If no arguments were passed, we still need to pass an empty array to		 * the call_user_func_array function.		 */		$args = (array) $args;		$event = strtolower($event);		// Check if any plugins are attached to the event.		if (!isset($this->_methods[$event]) || empty($this->_methods[$event]))		{			// No Plugins Associated To Event!			return $result;		}		// Loop through all plugins having a method matching our event		foreach ($this->_methods[$event] as $key)		{			// Check if the plugin is present.			if (!isset($this->_observers[$key]))			{				continue;			}			// Fire the event for an object based observer.			if (is_object($this->_observers[$key]))			{				$args['event'] = $event;				$value = $this->_observers[$key]->update($args);			}			// Fire the event for a function based observer.			elseif (is_array($this->_observers[$key]))			{				$value = call_user_func_array($this->_observers[$key]['handler'], $args);			}			if (isset($value))			{				$result[] = $value;			}		}		return $result;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   11.3	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEvent))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   11.3	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Menus View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewMenus extends JViewLegacy{	protected $items;	protected $modules;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->modules		= $this->get('Modules');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		MenusHelper::addSubmenu('menus');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/menus.php';		$canDo	= MenusHelper::getActions($this->state->get('filter.parent_id'));		JToolbarHelper::title(JText::_('COM_MENUS_VIEW_MENUS_TITLE'), 'menumgr.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('menu.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('menu.edit');		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::divider();			JToolbarHelper::deleteList('', 'menus.delete');		}		JToolbarHelper::custom('menus.rebuild', 'refresh.png', 'refresh_f2.png', 'JTOOLBAR_REBUILD', false);		if ($canDo->get('core.admin'))		{			JToolbarHelper::divider();			JToolbarHelper::preferences('com_menus');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_MENUS_MENU_MANAGER');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleUrl extends JFormRule{	/**	 * Method to test an external url for a valid parts.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @link    http://www.w3.org/Addressing/URL/url-spec.txt	 * @see	    Jstring	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		$urlParts = JString::parse_url($value);		// See http://www.w3.org/Addressing/URL/url-spec.txt		// Use the full list or optionally specify a list of permitted schemes.		if ($element['schemes'] == '')		{			$scheme = array('http', 'https', 'ftp', 'ftps', 'gopher', 'mailto', 'news', 'prospero', 'telnet', 'rlogin', 'tn3270', 'wais', 'url',				'mid', 'cid', 'nntp', 'tel', 'urn', 'ldap', 'file', 'fax', 'modem', 'git');		}		else		{			$scheme = explode(',', $element['schemes']);		}		/*		 * This rule is only for full URLs with schemes because parse_url does not parse		 * accurately without a scheme.		 * @see http://php.net/manual/en/function.parse-url.php		 */		if ($urlParts && !array_key_exists('scheme', $urlParts))		{			return false;		}		$urlScheme = (string) $urlParts['scheme'];		$urlScheme = strtolower($urlScheme);		if (in_array($urlScheme, $scheme) == false)		{			return false;		}		// For some schemes here must be two slashes.		if (($urlScheme == 'http' || $urlScheme == 'https' || $urlScheme == 'ftp' || $urlScheme == 'sftp' || $urlScheme == 'gopher'			|| $urlScheme == 'wais' || $urlScheme == 'gopher' || $urlScheme == 'prospero' || $urlScheme == 'telnet' || $urlScheme == 'git')			&& ((substr($value, strlen($urlScheme), 3)) !== '://'))		{			return false;		}		// The best we can do for the rest is make sure that the strings are valid UTF-8		// and the port is an integer.		if (array_key_exists('host', $urlParts) && !JString::valid((string) $urlParts['host']))		{			return false;		}		if (array_key_exists('port', $urlParts) && !is_int((int) $urlParts['port']))		{			return false;		}		if (array_key_exists('path', $urlParts) && !JString::valid((string) $urlParts['path']))		{			return false;		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$this->subtemplatename = 'items';echo JLayoutHelper::render('joomla.content.category_default', $this);
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware substr_replace.* Note: requires utf8_substr to be loaded* @see http://www.php.net/substr_replace* @see utf8_strlen* @see utf8_substr*/function utf8_substr_replace($str, $repl, $start , $length = NULL ) {    preg_match_all('/./us', $str, $ar);    preg_match_all('/./us', $repl, $rar);    if( $length === NULL ) {        $length = utf8_strlen($str);    }    array_splice( $ar[0], $start, $length, $rar[0] );    return join('',$ar[0]);}
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class interface. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */interface JHttpTransport{	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options);	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null);	/**	 * method to check if http transport layer available for using	 * 	 * @return bool true if available else false	 * 	 * @since   12.1	 */	static public function isSupported();}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Discover Installation Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerControllerDiscover extends JControllerLegacy{	/**	 * Refreshes the cache of discovered extensions.	 *	 * @return  void	 *	 * @since   1.6	 */	public function refresh()	{		$model = $this->getModel('discover');		$model->discover();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=discover', false));	}	/**	 * Install a discovered extension.	 *	 * @return  void	 *	 * @since   1.6	 */	public function install()	{		$model = $this->getModel('discover');		$model->discover_install();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=discover', false));	}	/**	 * Clean out the discovered extension cache.	 *	 * @return  void	 *	 * @since   1.6	 */	public function purge()	{		$model = $this->getModel('discover');		$model->purge();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=discover', false), $model->_message);	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to stristr* Find first occurrence of a string using case insensitive comparison* Note: requires utf8_strtolower* @param string* @param string* @return int* @see http://www.php.net/strcasecmp* @see utf8_strtolower* @package utf8* @subpackage strings*/function utf8_stristr($str, $search) {    if ( strlen($search) == 0 ) {        return $str;    }    $lstr = utf8_strtolower($str);    $lsearch = utf8_strtolower($search);    //JOOMLA SPECIFIC FIX - BEGIN    preg_match('/^(.*)'.preg_quote($lsearch, '/').'/Us',$lstr, $matches);    //JOOMLA SPECIFIC FIX - END    if ( count($matches) == 2 ) {        return substr($str, strlen($matches[1]));    }    return FALSE;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$ftpFieldsDisplay = $this->ftp['enabled'] ? '' : 'style = "display: none"';?><form action="index.php" method="post" id="adminForm"><?php if (is_null($this->updateInfo['object'])) : ?><fieldset>	<legend>		<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_NOUPDATES') ?>	</legend>	<p>		<?php echo JText::sprintf('COM_JOOMLAUPDATE_VIEW_DEFAULT_NOUPDATESNOTICE', JVERSION); ?>	</p></fieldset><?php else: ?><fieldset>	<legend>		<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_UPDATEFOUND') ?>	</legend>	<table class="adminlist">		<tbody>			<tr class="row0">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_INSTALLED') ?>				</td>				<td>					<?php echo $this->updateInfo['installed'] ?>				</td>			</tr>			<tr class="row1">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_LATEST') ?>				</td>				<td>					<?php echo $this->updateInfo['latest'] ?>				</td>			</tr>			<tr class="row0">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_PACKAGE') ?>				</td>				<td>					<a href="<?php echo $this->updateInfo['object']->downloadurl->_data ?>">						<?php echo $this->updateInfo['object']->downloadurl->_data ?>					</a>				</td>			</tr>			<tr class="row1">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_METHOD') ?>				</td>				<td>					<?php echo $this->methodSelect ?>				</td>			</tr>			<tr class="row0" id="row_ftp_hostname" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_HOSTNAME') ?>				</td>				<td>					<input type="text" name="ftp_host" value="<?php echo $this->ftp['host'] ?>" />				</td>			</tr>			<tr class="row1" id="row_ftp_port" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_PORT') ?>				</td>				<td>					<input type="text" name="ftp_port" value="<?php echo $this->ftp['port'] ?>" />				</td>			</tr>			<tr class="row0" id="row_ftp_username" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_USERNAME') ?>				</td>				<td>					<input type="text" name="ftp_user" value="<?php echo $this->ftp['username'] ?>" />				</td>			</tr>			<tr class="row1" id="row_ftp_password" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_PASSWORD') ?>				</td>				<td>					<input type="text" name="ftp_pass" value="<?php echo $this->ftp['password'] ?>" />				</td>			</tr>			<tr class="row0" id="row_ftp_directory" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_DIRECTORY') ?>				</td>				<td>					<input type="text" name="ftp_root" value="<?php echo $this->ftp['directory'] ?>" />				</td>			</tr>		</tbody>		<tfoot>			<tr>				<td>					&nbsp;				</td>				<td>					<button class="submit" type="submit">						<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_INSTALLUPDATE') ?>					</button>				</td>			</tr>		</tfoot>	</table></fieldset><?php endif; ?><?php echo JHtml::_('form.token'); ?><input type="hidden" name="task" value="update.download" /><input type="hidden" name="option" value="com_joomlaupdate" /></form><div class="download_message" style="display: none">	<p></p>	<p class="nowarning"> <?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_DOWNLOAD_IN_PROGRESS'); ?></p>	<div class="joomlaupdate_spinner"></div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><form target="_parent" action="index.php?option=com_media&amp;tmpl=index&amp;folder=<?php echo $this->state->folder; ?>" method="post" id="mediamanager-form" name="mediamanager-form">	<ul class="manager thumbnails">		<?php		echo $this->loadTemplate('up');		?>		<?php for ($i = 0, $n = count($this->folders); $i < $n; $i++) :			$this->setFolder($i);			echo $this->loadTemplate('folder');		endfor; ?>		<?php for ($i = 0, $n = count($this->documents); $i < $n; $i++) :			$this->setDoc($i);			echo $this->loadTemplate('doc');		endfor; ?>		<?php for ($i = 0, $n = count($this->images); $i < $n; $i++) :			$this->setImage($i);			echo $this->loadTemplate('img');		endfor; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="username" value="" />		<input type="hidden" name="password" value="" />		<?php echo JHtml::_('form.token'); ?>	</ul></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');/** * JForm's helper class. * Provides a storage for filesystem's paths where JForm's entities reside and methods for creating those entities. * Also stores objects with entities' prototypes for further reusing. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormHelper{	/**	 * Array with paths where entities(field, rule, form) can be found.	 *	 * Array's structure:	 * <code>	 * paths:	 * {ENTITY_NAME}:	 * - /path/1	 * - /path/2	 * </code>	 *	 * @var    array	 * @since  11.1	 *	 */	protected static $paths;	/**	 * Static array of JForm's entity objects for re-use.	 * Prototypes for all fields and rules are here.	 *	 * Array's structure:	 * <code>	 * entities:	 * {ENTITY_NAME}:	 * {KEY}: {OBJECT}	 * </code>	 *	 * @var    array	 * @since  11.1	 */	protected static $entities = array();	/**	 * Method to load a form field object given a type.	 *	 * @param   string   $type  The field type.	 * @param   boolean  $new   Flag to toggle whether we should get a new instance of the object.	 *	 * @return  mixed  JFormField object on success, false otherwise.	 *	 * @since   11.1	 */	public static function loadFieldType($type, $new = true)	{		return self::loadType('field', $type, $new);	}	/**	 * Method to load a form rule object given a type.	 *	 * @param   string   $type  The rule type.	 * @param   boolean  $new   Flag to toggle whether we should get a new instance of the object.	 *	 * @return  mixed  JFormRule object on success, false otherwise.	 *	 * @since   11.1	 */	public static function loadRuleType($type, $new = true)	{		return self::loadType('rule', $type, $new);	}	/**	 * Method to load a form entity object given a type.	 * Each type is loaded only once and then used as a prototype for other objects of same type.	 * Please, use this method only with those entities which support types (forms don't support them).	 *	 * @param   string   $entity  The entity.	 * @param   string   $type    The entity type.	 * @param   boolean  $new     Flag to toggle whether we should get a new instance of the object.	 *	 * @return  mixed  Entity object on success, false otherwise.	 *	 * @since   11.1	 */	protected static function loadType($entity, $type, $new = true)	{		// Reference to an array with current entity's type instances		$types = &self::$entities[$entity];		$key = md5($type);		// Return an entity object if it already exists and we don't need a new one.		if (isset($types[$key]) && $new === false)		{			return $types[$key];		}		$class = self::loadClass($entity, $type);		if ($class !== false)		{			// Instantiate a new type object.			$types[$key] = new $class;			return $types[$key];		}		else		{			return false;		}	}	/**	 * Attempt to import the JFormField class file if it isn't already imported.	 * You can use this method outside of JForm for loading a field for inheritance or composition.	 *	 * @param   string  $type  Type of a field whose class should be loaded.	 *	 * @return  mixed  Class name on success or false otherwise.	 *	 * @since   11.1	 */	public static function loadFieldClass($type)	{		return self::loadClass('field', $type);	}	/**	 * Attempt to import the JFormRule class file if it isn't already imported.	 * You can use this method outside of JForm for loading a rule for inheritance or composition.	 *	 * @param   string  $type  Type of a rule whose class should be loaded.	 *	 * @return  mixed  Class name on success or false otherwise.	 *	 * @since   11.1	 */	public static function loadRuleClass($type)	{		return self::loadClass('rule', $type);	}	/**	 * Load a class for one of the form's entities of a particular type.	 * Currently, it makes sense to use this method for the "field" and "rule" entities	 * (but you can support more entities in your subclass).	 *	 * @param   string  $entity  One of the form entities (field or rule).	 * @param   string  $type    Type of an entity.	 *	 * @return  mixed  Class name on success or false otherwise.	 *	 * @since   11.1	 */	protected static function loadClass($entity, $type)	{		if (strpos($type, '.'))		{			list($prefix, $type) = explode('.', $type);		}		else		{			$prefix = 'J';		}		$class = JString::ucfirst($prefix, '_') . 'Form' . JString::ucfirst($entity, '_') . JString::ucfirst($type, '_');		if (class_exists($class))		{			return $class;		}		// Get the field search path array.		$paths = self::addPath($entity);		// If the type is complex, add the base type to the paths.		if ($pos = strpos($type, '_'))		{			// Add the complex type prefix to the paths.			for ($i = 0, $n = count($paths); $i < $n; $i++)			{				// Derive the new path.				$path = $paths[$i] . '/' . strtolower(substr($type, 0, $pos));				// If the path does not exist, add it.				if (!in_array($path, $paths))				{					$paths[] = $path;				}			}			// Break off the end of the complex type.			$type = substr($type, $pos + 1);		}		// Try to find the class file.		$type = strtolower($type) . '.php';		foreach ($paths as $path)		{			if ($file = JPath::find($path, $type))			{				require_once $file;				if (class_exists($class))				{					break;				}			}		}		// Check for all if the class exists.		return class_exists($class) ? $class : false;	}	/**	 * Method to add a path to the list of field include paths.	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @since   11.1	 */	public static function addFieldPath($new = null)	{		return self::addPath('field', $new);	}	/**	 * Method to add a path to the list of form include paths.	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @since   11.1	 */	public static function addFormPath($new = null)	{		return self::addPath('form', $new);	}	/**	 * Method to add a path to the list of rule include paths.	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @since   11.1	 */	public static function addRulePath($new = null)	{		return self::addPath('rule', $new);	}	/**	 * Method to add a path to the list of include paths for one of the form's entities.	 * Currently supported entities: field, rule and form. You are free to support your own in a subclass.	 *	 * @param   string  $entity  Form's entity name for which paths will be added.	 * @param   mixed   $new     A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @since   11.1	 */	protected static function addPath($entity, $new = null)	{		// Reference to an array with paths for current entity		$paths = &self::$paths[$entity];		// Add the default entity's search path if not set.		if (empty($paths))		{			// While we support limited number of entities (form, field and rule)			// we can do this simple pluralisation:			$entity_plural = $entity . 's';			/*			 * But when someday we would want to support more entities, then we should consider adding			 * an inflector class to "libraries/joomla/utilities" and use it here (or somebody can use a real inflector in his subclass).			 * See also: pluralization snippet by Paul Osman in JControllerForm's constructor.			 */			$paths[] = __DIR__ . '/' . $entity_plural;		}		// Force the new path(s) to an array.		settype($new, 'array');		// Add the new paths to the stack if not already there.		foreach ($new as $path)		{			if (!in_array($path, $paths))			{				array_unshift($paths, trim($path));			}		}		return $paths;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// If the page class is defined, add to class as suffix.// It will be a separate class if the user starts it with a space?><div class="blog-featured<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading') != 0 ) : ?>	<h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if ($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2 && $this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once dirname(dirname(__DIR__)) . '/helper/component.php';/** * View for the global configuration * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.5 */class ConfigViewApplication extends JViewLegacy{	public $state;	public $form;	public $data;	/**	 * Method to display the view.	 */	public function display($tpl = null)	{		$form	= $this->get('Form');		$data	= $this->get('Data');		$user = JFactory::getUser();		// Check for model errors.		if ($errors = $this->get('Errors'))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Bind the form to the data.		if ($form && $data)		{			$form->bind($data);		}		// Get the params for com_users.		$usersParams = JComponentHelper::getParams('com_users');		// Get the params for com_media.		$mediaParams = JComponentHelper::getParams('com_media');		// Load settings for the FTP layer.		$ftp = JClientHelper::setCredentialsFromRequest('ftp');		$this->form = &$form;		$this->data = &$data;		$this->ftp = &$ftp;		$this->usersParams = &$usersParams;		$this->mediaParams = &$mediaParams;		$this->components = ConfigHelperComponent::getComponentsWithConfig();		ConfigHelperComponent::loadLanguageForComponents($this->components);		$this->userIsSuperAdmin = $user->authorise('core.admin');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_CONFIG_GLOBAL_CONFIGURATION'), 'config.png');		JToolbarHelper::apply('application.apply');		JToolbarHelper::save('application.save');		JToolbarHelper::divider();		JToolbarHelper::cancel('application.cancel');		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_SITE_GLOBAL_CONFIGURATION');	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create a shortcut for params.$canEdit = $this->item->params->get('access-edit');$params = &$this->item->params;$images = json_decode($this->item->images);$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;?><?php if ($this->item->state == 0) : ?><div class="system-unpublished"><?php endif; ?><?php if ($params->get('show_title')) : ?>	<h2>		<?php if ($params->get('link_titles') && $params->get('access-view')) : ?>			<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid)); ?>">			<?php echo $this->escape($this->item->title); ?></a>		<?php else : ?>			<?php echo $this->escape($this->item->title); ?>		<?php endif; ?>	</h2><?php endif; ?><?php if ($params->get('show_print_icon') || $params->get('show_email_icon') || $canEdit) : ?>	<ul class="actions">		<?php if ($params->get('show_print_icon')) : ?>		<li class="print-icon">			<?php echo JHtml::_('icon.print_popup', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>		<?php if ($params->get('show_email_icon')) : ?>		<li class="email-icon">			<?php echo JHtml::_('icon.email', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>		<?php if ($canEdit) : ?>		<li class="edit-icon">			<?php echo JHtml::_('icon.edit', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>	</ul><?php endif; ?><?php if (!$params->get('show_intro')) : ?>	<?php echo $this->item->event->afterDisplayTitle; ?><?php endif; ?><?php echo $this->item->event->beforeDisplayContent; ?><?php // to do not that elegant would be nice to group the params ?><?php if (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date')) or ($params->get('show_parent_category')) or ($params->get('show_hits'))) : ?> <dl class="article-info"> <dt class="article-info-term"><?php  echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt><?php endif; ?><?php if ($params->get('show_parent_category') && $this->item->parent_id != 1) : ?>		<dd class="parent-category-name">			<?php $title = $this->escape($this->item->parent_title);				$title = ($title) ? $title : JText::_('JGLOBAL_UNCATEGORISED');				$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)) . '">' . $title . '</a>'; ?>			<?php if ($params->get('link_parent_category') and $this->item->parent_slug) : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_category')) : ?>		<dd class="category-name">			<?php 	$title = $this->escape($this->item->category_title);					$title = ($title) ? $title : JText::_('JGLOBAL_UNCATEGORISED');					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_category') and $this->item->catslug) : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_create_date')) : ?>		<dd class="create">		<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_modify_date')) : ?>		<dd class="modified">		<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_publish_date')) : ?>		<dd class="published">		<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_author') && !empty($this->item->author )) : ?>	<dd class="createdby">		<?php $author = $this->item->author; ?>		<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author);?>			<?php if (!empty($this->item->contactid ) &&  $params->get('link_author') == true):?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY',					JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id=' . $this->item->contactid), $author)				); ?>			<?php else :?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>			<?php endif; ?>	</dd><?php endif; ?><?php if ($params->get('show_hits')) : ?>		<dd class="hits">		<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>		</dd><?php endif; ?><?php if (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date')) or ($params->get('show_parent_category')) or ($params->get('show_hits'))) : ?> </dl><?php endif; ?><?php  if (isset($images->image_intro) and !empty($images->image_intro)) : ?>	<?php $imgfloat = (empty($images->float_intro)) ? $params->get('float_intro') : $images->float_intro; ?>	<div class="img-intro-<?php echo htmlspecialchars($imgfloat); ?>">	<img		<?php if ($images->image_intro_caption):			echo 'class="caption"'.' title="' .htmlspecialchars($images->image_intro_caption) .'"';		endif; ?>		src="<?php echo htmlspecialchars($images->image_intro); ?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>"/>	</div><?php endif; ?><?php echo $this->item->introtext; ?><?php if ($params->get('show_readmore') && $this->item->readmore) :	if ($params->get('access-view')) :		$link = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));	else :		$menu = JFactory::getApplication()->getMenu();		$active = $menu->getActive();		$itemId = $active->id;		$link1 = JRoute::_('index.php?option=com_users&view=login&Itemid=' . $itemId);		$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));		$link = new JURI($link1);		$link->setVar('return', base64_encode($returnURL));	endif;?>		<p class="readmore">				<a href="<?php echo $link; ?>">					<?php if (!$params->get('access-view')) :						echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');					elseif ($readmore = $this->item->alternative_readmore) :						echo $readmore;						if ($params->get('show_readmore_title', 0) != 0) :							echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));						endif;					elseif ($params->get('show_readmore_title', 0) == 0) :						echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');					else :						echo JText::_('COM_CONTENT_READ_MORE');						echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));					endif; ?></a>		</p><?php endif; ?><?php if ($this->item->state == 0) : ?></div><?php endif; ?><div class="item-separator"></div><?php echo $this->item->event->afterDisplayContent; ?>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$class = ' class="first"';?><?php if (count($this->children[$this->category->id]) > 0) : ?>        <ul>        <?php foreach ($this->children[$this->category->id] as $id => $child) : ?>                <?php				if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :					if (!isset($this->children[$this->category->id][$id + 1])) :						$class = ' class="last"';					endif;				?>                <li<?php echo $class; ?>>                        <?php $class = ''; ?>                        <span class="item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">                                <?php echo $this->escape($child->title); ?></a>                        </span>                       <?php if ($this->params->get('show_subcat_desc') == 1) :?>                        <?php if ($child->description) : ?>                                <div class="category-desc">                                        <?php echo JHtml::_('content.prepare', $child->description, '', 'com_content.category'); ?>                                </div>                        <?php endif; ?>                        <?php endif; ?>                        <?php if ( $this->params->get('show_cat_num_articles', 1)) : ?>                        <dl>                                <dt>                                        <?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>                                </dt>                                <dd>                                        <?php echo $child->getNumItems(true); ?>                                </dd>                        </dl>                        <?php endif; ?>                        <?php if (count($child->getChildren()) > 0):							$this->children[$child->id] = $child->getChildren();							$this->category = $child;							$this->maxLevel--;							if ($this->maxLevel != 0) :								echo $this->loadTemplate('children');							endif;							$this->category = $child->getParent();							$this->maxLevel++;						endif; ?>                </li>                <?php endif; ?>        <?php endforeach; ?>        </ul><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_search')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Search');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Mail * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;$PHPMAILER_LANG["authenticate"] = JText::_('PHPMAILER_AUTHENTICATE');$PHPMAILER_LANG["connect_host"] = JText::_('PHPMAILER_CONNECT_HOST');$PHPMAILER_LANG["data_not_accepted"] = JText::_('PHPMAILER_DATA_NOT_ACCEPTED');$PHPMAILER_LANG['empty_message'] = JText::_('PHPMAILER_EMPTY_MESSAGE');$PHPMAILER_LANG["encoding"] = JText::_('PHPMAILER_ENCODING');$PHPMAILER_LANG["execute"] = JText::_('PHPMAILER_EXECUTE');$PHPMAILER_LANG["file_access"] = JText::_('PHPMAILER_FILE_ACCESS');$PHPMAILER_LANG["file_open"] = JText::_('PHPMAILER_FILE_OPEN');$PHPMAILER_LANG["from_failed"] = JText::_('PHPMAILER_FROM_FAILED');$PHPMAILER_LANG["instantiate"] = JText::_('PHPMAILER_INSTANTIATE');$PHPMAILER_LANG['invalid_address'] = JText::_('PHPMAILER_INVALID_ADDRESS');$PHPMAILER_LANG["mailer_not_supported"] = JText::_('PHPMAILER_MAILER_IS_NOT_SUPPORTED');$PHPMAILER_LANG["provide_address"] = JText::_('PHPMAILER_PROVIDE_ADDRESS');$PHPMAILER_LANG["recipients_failed"] = JText::_('PHPMAILER_RECIPIENTS_FAILED');$PHPMAILER_LANG["signing"]  = JText::_('PHPMAILER_SIGNING_ERROR');$PHPMAILER_LANG['smtp_connect_failed'] = JText::_('PHPMAILER_SMTP_CONNECT_FAILED');$PHPMAILER_LANG['smtp_error'] = JText::_('PHPMAILER_SMTP_ERROR');$PHPMAILER_LANG['variable_set'] = JText::_('PHPMAILER_VARIABLE_SET');
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->error) : ?><div class="error">			<?php echo $this->escape($this->error); ?></div><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View for language overrides list * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesViewOverrides extends JViewLegacy{	/**	 * The items to list	 *	 * @var		array	 * @since	2.5	 */	protected $items;	/**	 * The pagination object	 *	 * @var		object	 * @since	2.5	 */	protected $pagination;	/**	 * The model state	 *	 * @var		object	 * @since	2.5	 */	protected $state;	/**	 * Displays the view	 *	 * @param   	string	$tpl	The name of the template file to parse	 *	 * @return  void	 *	 * @since		2.5	 */	public function display($tpl = null)	{		$this->state      = $this->get('State');		$this->items      = $this->get('Overrides');		$this->languages  = $this->get('Languages');		$this->pagination = $this->get('Pagination');		LanguagesHelper::addSubmenu('overrides');		// Check for errors		if (count($errors = $this->get('Errors')))		{			throw new Exception(implode("\n", $errors));		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Adds the page title and toolbar	 *	 * @return  void	 *	 * @since		2.5	 */	protected function addToolbar()	{		// Get the results for each action		$canDo = LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_OVERRIDES_TITLE'), 'langmanager');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('override.add');		}		if ($canDo->get('core.edit') && $this->pagination->total)		{			JToolbarHelper::editList('override.edit');		}		if ($canDo->get('core.delete') && $this->pagination->total)		{			JToolbarHelper::deleteList('', 'overrides.delete');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_languages');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_OVERRIDES');		JHtmlSidebar::setAction('index.php?option=com_languages&view=overrides');		JHtmlSidebar::addFilter(			// @todo need a label here			'',			'filter_language_client',			JHtml::_('select.options', $this->languages, null, 'text', $this->state->get('filter.language_client')),			true		);		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Link table class for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderTableLink extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  &$db  JDatabaseDriver connector object.	 *	 * @since   2.5	 */	public function __construct(&$db)	{		parent::__construct('#__finder_links', 'link_id', $db);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Reset controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerRemind extends UsersController{	/**	 * Method to request a username reminder.	 *	 * @since   1.6	 */	public function remind()	{		// Check the request token.		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Remind', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Submit the password reset request.		$return	= $model->processRemindRequest($data);		// Check for a hard error.		if ($return == false)		{			// The request failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=remind'.$itemid;			// Go back to the request form.			$message = JText::sprintf('COM_USERS_REMIND_REQUEST_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// The request succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=login'.$itemid;			// Proceed to step two.			$message = JText::_('COM_USERS_REMIND_REQUEST_SUCCESS');			$this->setRedirect(JRoute::_($route, false), $message);			return true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (!empty($list)) :?>	<ul class="archive-module<?php echo $moduleclass_sfx; ?>">	<?php foreach ($list as $item) : ?>	<li>		<a href="<?php echo $item->link; ?>">			<?php echo $item->text; ?>		</a>	</li>	<?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  mod_syndicate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$params->def('format', 'rss');$link = ModSyndicateHelper::getLink($params);if (is_null($link)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));$text = htmlspecialchars($params->get('text'));require JModuleHelper::getLayoutPath('mod_syndicate', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><h3><?php echo JText::_('COM_CONTENT_MORE_ARTICLES'); ?></h3><ol class="links"><?php foreach ($this->link_items as &$item) : ?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');?><div class="login <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<?php if (($this->params->get('logindescription_show') == 1 && str_replace(' ', '', $this->params->get('login_description')) != '') || $this->params->get('login_image') != '') : ?>	<div class="login-description">	<?php endif; ?>		<?php if ($this->params->get('logindescription_show') == 1) : ?>			<?php echo $this->params->get('login_description'); ?>		<?php endif; ?>		<?php if (($this->params->get('login_image') != '')) :?>			<img src="<?php echo $this->escape($this->params->get('login_image')); ?>" class="login-image" alt="<?php echo JTEXT::_('COM_USER_LOGIN_IMAGE_ALT')?>"/>		<?php endif; ?>	<?php if (($this->params->get('logindescription_show') == 1 && str_replace(' ', '', $this->params->get('login_description')) != '') || $this->params->get('login_image') != '') : ?>	</div>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=user.login'); ?>" method="post" class="form-horizontal">		<fieldset class="well">			<?php foreach ($this->form->getFieldset('credentials') as $field) : ?>				<?php if (!$field->hidden) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endif; ?>			<?php endforeach; ?>			<div class="control-group">				<div class="controls">					<button type="submit" class="btn btn-primary"><?php echo JText::_('JLOGIN'); ?></button>				</div>			</div>			<input type="hidden" name="return" value="<?php echo base64_encode($this->params->get('login_redirect_url', $this->form->getValue('return'))); ?>" />			<?php echo JHtml::_('form.token'); ?>		</fieldset>	</form></div><div>	<ul class="nav nav-tabs nav-stacked">		<li>			<a href="<?php echo JRoute::_('index.php?option=com_users&view=reset'); ?>">			<?php echo JText::_('COM_USERS_LOGIN_RESET'); ?></a>		</li>		<li>			<a href="<?php echo JRoute::_('index.php?option=com_users&view=remind'); ?>">			<?php echo JText::_('COM_USERS_LOGIN_REMIND'); ?></a>		</li>		<?php		$usersConfig = JComponentHelper::getParams('com_users');		if ($usersConfig->get('allowUserRegistration')) : ?>		<li>			<a href="<?php echo JRoute::_('index.php?option=com_users&view=registration'); ?>">				<?php echo JText::_('COM_USERS_LOGIN_REGISTER'); ?></a>		</li>		<?php endif; ?>	</ul></div>
<?php/** * @package     Joomla.Installation * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Define the base path and require the other definesdefine('JPATH_BASE', dirname(__DIR__));require_once __DIR__ . '/defines.php';// Launch the applicationrequire_once __DIR__ . '/framework.php';// Register the Installation applicationJLoader::registerPrefix('Installation', JPATH_INSTALLATION);// Register the application's router due to non-standard includeJLoader::register('JRouterInstallation', __DIR__ . '/router.php');
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_CONFIGURATION_FILE'); ?></legend>		<table class="table table-striped">			<thead>				<tr>					<th width="300">						<?php echo JText::_('COM_ADMIN_SETTING'); ?>					</th>					<th>						<?php echo JText::_('COM_ADMIN_VALUE'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="2">&#160;</td>				</tr>			</tfoot>			<tbody>				<?php foreach ($this->config as $key => $value):?>					<tr>						<td>							<?php echo $key;?>						</td>						<td>							<?php echo htmlspecialchars($value, ENT_QUOTES);?>						</td>					</tr>				<?php endforeach;?>			</tbody>		</table></fieldset>
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Languages View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewLanguagesHtml extends JViewHtml{	/**	 * Container with all available languages	 *	 * @var    array	 * @since  3.1	 */	protected $items;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelLanguages	 * @since   3.1	 */	protected $model;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->items = $this->model->getItems();		return parent::render();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_content/helpers/route.php';?><?php if ($this->params->get('show_articles')) : ?><div class="contact-articles">	<ol>		<?php foreach ($this->item->articles as $article) :	?>			<li>				<?php echo JHtml::_('link', JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catslug)), htmlspecialchars($article->title, ENT_COMPAT, 'UTF-8')); ?>			</li>		<?php endforeach; ?>	</ol></div><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_logged * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include dependancies.require_once __DIR__ . '/helper.php';$users = ModLoggedHelper::getList($params);require JModuleHelper::getLayoutPath('mod_logged', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * File session handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @since       11.1 */class JSessionStorageNone extends JSessionStorage{	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   11.1	 */	public function register()	{		ini_set('session.save_handler', 'files');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Finder route helper class. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderHelperRoute{	/**	 * Method to get the route for a search page.	 *	 * @param   integer  $f  The search filter id. [optional]	 * @param   string   $q  The search query string. [optional]	 *	 * @return  string  The search route.	 *	 * @since   2.5	 */	public static function getSearchRoute($f = null, $q = null)	{		// Get the menu item id.		$query = array('view' => 'search', 'q' => $q, 'f' => $f);		$item = self::getItemid($query);		// Get the base route.		$uri = clone(JUri::getInstance('index.php?option=com_finder&view=search'));		// Add the pre-defined search filter if present.		if ($f !== null)		{			$uri->setVar('f', $f);		}		// Add the search query string if present.		if ($q !== null)		{			$uri->setVar('q', $q);		}		// Add the menu item id if present.		if ($item !== null)		{			$uri->setVar('Itemid', $item);		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get the route for an advanced search page.	 *	 * @param   integer  $f  The search filter id. [optional]	 * @param   string   $q  The search query string. [optional]	 *	 * @return  string  The advanced search route.	 *	 * @since   2.5	 */	public static function getAdvancedRoute($f = null, $q = null)	{		// Get the menu item id.		$query = array('view' => 'advanced', 'q' => $q, 'f' => $f);		$item = self::getItemid($query);		// Get the base route.		$uri = clone(JUri::getInstance('index.php?option=com_finder&view=advanced'));		// Add the pre-defined search filter if present.		if ($q !== null)		{			$uri->setVar('f', $f);		}		// Add the search query string if present.		if ($q !== null)		{			$uri->setVar('q', $q);		}		// Add the menu item id if present.		if ($item !== null)		{			$uri->setVar('Itemid', $item);		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get the most appropriate menu item for the route based on the	 * supplied query needles.	 *	 * @param   array  $query  An array of URL parameters.	 *	 * @return  mixed  An integer on success, null otherwise.	 *	 * @since   2.5	 */	public static function getItemid($query)	{		static $items, $active;		// Get the menu items for com_finder.		if (!$items || !$active)		{			$app = JFactory::getApplication('site');			$com = JComponentHelper::getComponent('com_finder');			$menu = $app->getMenu();			$active = $menu->getActive();			$items = $menu->getItems('component_id', $com->id);			$items = is_array($items) ? $items : array();		}		// Try to match the active view and filter.		if ($active && @$active->query['view'] == @$query['view'] && @$active->query['f'] == @$query['f'])		{			return $active->id;		}		// Try to match the view, query, and filter.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'] && @$item->query['q'] == @$query['q'] && @$item->query['f'] == @$query['f'])			{				return $item->id;			}		}		// Try to match the view and filter.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'] && @$item->query['f'] == @$query['f'])			{				return $item->id;			}		}		// Try to match the view.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'])			{				return $item->id;			}		}		return null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extension Manager Templates Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelWarnings extends JModelList{	/**	 * Extension Type	 * @var	string	 */	public $type = 'warnings';	/**	 * Return the byte value of a particular string.	 *	 * @param   string  $val  String optionally with G, M or K suffix	 *	 * @return  integer   size in bytes	 *	 * @since 1.6	 */	public function return_bytes($val)	{		$val = trim($val);		$last = strtolower($val{strlen($val) - 1});		switch ($last)		{			// The 'G' modifier is available since PHP 5.1.0			case 'g':				$val *= 1024;			case 'm':				$val *= 1024;			case 'k':				$val *= 1024;		}		return $val;	}	/**	 * Load the data.	 *	 * @return  array  Messages	 *	 * @since   1.6	 */	public function getItems()	{		static $messages;		if ($messages)		{			return $messages;		}		$messages = array();		$file_uploads = ini_get('file_uploads');		if (!$file_uploads)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADSDISABLED'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADISDISABLEDDESC'));		}		$upload_dir = ini_get('upload_tmp_dir');		if (!$upload_dir)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSETDESC'));		}		else		{			if (!is_writeable($upload_dir))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLEDESC', $upload_dir));			}		}		$config = JFactory::getConfig();		$tmp_path = $config->get('tmp_path');		if (!$tmp_path)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSETDESC'));		}		else		{			if (!is_writeable($tmp_path))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLEDESC', $tmp_path));			}		}		$memory_limit = $this->return_bytes(ini_get('memory_limit'));		if ($memory_limit < (8 * 1024 * 1024))		{			// 8MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYDESC'));		}		elseif ($memory_limit < (16 * 1024 * 1024))		{			// 16MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYDESC'));		}		$post_max_size = $this->return_bytes(ini_get('post_max_size'));		$upload_max_filesize = $this->return_bytes(ini_get('upload_max_filesize'));		if ($post_max_size < $upload_max_filesize)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOST'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOSTDESC'));		}		if ($post_max_size < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZEDESC'));		}		if ($upload_max_filesize < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZEDESC'));		}		return $messages;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to manipulate an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImage{	/**	 * @const  integer	 * @since  11.3	 */	const SCALE_FILL = 1;	/**	 * @const  integer	 * @since  11.3	 */	const SCALE_INSIDE = 2;	/**	 * @const  integer	 * @since  11.3	 */	const SCALE_OUTSIDE = 3;	/**	 * @const  integer	 * @since  12.2	 */	const CROP = 4;	/**	 * @const  integer	 * @since  12.3	 */	const CROP_RESIZE = 5;	/**	 * @var    resource  The image resource handle.	 * @since  11.3	 */	protected $handle;	/**	 * @var    string  The source image path.	 * @since  11.3	 */	protected $path = null;	/**	 * @var    array  Whether or not different image formats are supported.	 * @since  11.3	 */	protected static $formats = array();	/**	 * Class constructor.	 *	 * @param   mixed  $source  Either a file path for a source image or a GD resource handler for an image.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct($source = null)	{		// Verify that GD support for PHP is available.		if (!extension_loaded('gd'))		{			// @codeCoverageIgnoreStart			JLog::add('The GD extension for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The GD extension for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Determine which image types are supported by GD, but only once.		if (!isset(self::$formats[IMAGETYPE_JPEG]))		{			$info = gd_info();			self::$formats[IMAGETYPE_JPEG] = ($info['JPEG Support']) ? true : false;			self::$formats[IMAGETYPE_PNG] = ($info['PNG Support']) ? true : false;			self::$formats[IMAGETYPE_GIF] = ($info['GIF Read Support']) ? true : false;		}		// If the source input is a resource, set it as the image handle.		if (is_resource($source) && (get_resource_type($source) == 'gd'))		{			$this->handle = &$source;		}		elseif (!empty($source) && is_string($source))		{			// If the source input is not empty, assume it is a path and populate the image handle.			$this->loadFile($source);		}	}	/**	 * Method to return a properties object for an image given a filesystem path.  The	 * result object has values for image width, height, type, attributes, mime type, bits,	 * and channels.	 *	 * @param   string  $path  The filesystem path to the image for which to get properties.	 *	 * @return  stdClass	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public static function getImageFileProperties($path)	{		// Make sure the file exists.		if (!file_exists($path))		{			throw new InvalidArgumentException('The image file does not exist.');		}		// Get the image file information.		$info = getimagesize($path);		if (!$info)		{			// @codeCoverageIgnoreStart			throw new RuntimeException('Unable to get properties for the image.');			// @codeCoverageIgnoreEnd		}		// Build the response object.		$properties = (object) array(			'width' => $info[0],			'height' => $info[1],			'type' => $info[2],			'attributes' => $info[3],			'bits' => isset($info['bits']) ? $info['bits'] : null,			'channels' => isset($info['channels']) ? $info['channels'] : null,			'mime' => $info['mime']		);		return $properties;	}	/**	 * Method to generate thumbnails from the current image. It allows	 * creation by resizing or cropping the original image.	 *	 * @param   mixed    $thumbSizes      String or array of strings. Example: $thumbSizes = array('150x75','250x150');	 * @param   integer  $creationMethod  1-3 resize $scaleMethod | 4 create croppping | 5 resize then crop	 *	 * @return array	 *	 * @throws  LogicException	 * @throws  InvalidArgumentException	 *	 * @since 12.2	 */	public function generateThumbs($thumbSizes, $creationMethod = self::SCALE_INSIDE)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Accept a single thumbsize string as parameter		if (!is_array($thumbSizes))		{			$thumbSizes = array($thumbSizes);		}		// Process thumbs		$generated = array();		if (!empty($thumbSizes))		{			foreach ($thumbSizes as $thumbSize)			{				// Desired thumbnail size				$size = explode('x', strtolower($thumbSize));				if (count($size) != 2)				{					throw new InvalidArgumentException('Invalid thumb size received: ' . $thumbSize);				}				$thumbWidth 	= $size[0];				$thumbHeight	= $size[1];				switch ($creationMethod)				{					// Case for self::CROP					case 4:						$thumb = $this->crop($thumbWidth, $thumbHeight, null, null, true);						break;					// Case for self::CROP_RESIZE					case 5:						$thumb = $this->cropResize($thumbWidth, $thumbHeight, true);						break;					default:						$thumb = $this->resize($thumbWidth, $thumbHeight, true, $creationMethod);						break;				}				// Store the thumb in the results array				$generated[] = $thumb;			}		}		return $generated;	}	/**	 * Method to create thumbnails from the current image and save them to disk. It allows creation by resizing	 * or croppping the original image.	 *	 * @param   mixed    $thumbSizes      string or array of strings. Example: $thumbSizes = array('150x75','250x150');	 * @param   integer  $creationMethod  1-3 resize $scaleMethod | 4 create croppping	 * @param   string   $thumbsFolder    destination thumbs folder. null generates a thumbs folder in the image folder	 *	 * @return array	 *	 * @throws  LogicException	 * @throws  InvalidArgumentException	 *	 * @since 12.2	 */	public function createThumbs($thumbSizes, $creationMethod = self::SCALE_INSIDE, $thumbsFolder = null)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// No thumbFolder set -> we will create a thumbs folder in the current image folder		if (is_null($thumbsFolder))		{			$thumbsFolder = dirname($this->getPath()) . '/thumbs';		}		// Check destination		if (!is_dir($thumbsFolder) && (!is_dir(dirname($thumbsFolder)) || !@mkdir($thumbsFolder)))		{			throw new InvalidArgumentException('Folder does not exist and cannot be created: ' . $thumbsFolder);		}		// Process thumbs		$thumbsCreated = array();		if ($thumbs = $this->generateThumbs($thumbSizes, $creationMethod))		{			// Parent image properties			$imgProperties = self::getImageFileProperties($this->getPath());			foreach ($thumbs as $thumb)			{				// Get thumb properties				$thumbWidth 	= $thumb->getWidth();				$thumbHeight 	= $thumb->getHeight();				// Generate thumb name				$filename 		= pathinfo($this->getPath(), PATHINFO_FILENAME);				$fileExtension 	= pathinfo($this->getPath(), PATHINFO_EXTENSION);				$thumbFileName 	= $filename . '_' . $thumbWidth . 'x' . $thumbHeight . '.' . $fileExtension;				// Save thumb file to disk				$thumbFileName = $thumbsFolder . '/' . $thumbFileName;				if ($thumb->toFile($thumbFileName, $imgProperties->type))				{					// Return JImage object with thumb path to ease further manipulation					$thumb->path = $thumbFileName;					$thumbsCreated[] = $thumb;				}			}		}		return $thumbsCreated;	}	/**	 * Method to crop the current image.	 *	 * @param   mixed    $width      The width of the image section to crop in pixels or a percentage.	 * @param   mixed    $height     The height of the image section to crop in pixels or a percentage.	 * @param   integer  $left       The number of pixels from the left to start cropping.	 * @param   integer  $top        The number of pixels from the top to start cropping.	 * @param   bool     $createNew  If true the current image will be cloned, cropped and returned; else	 *                               the current image will be cropped and returned.	 *	 * @return  JImage	 *	 * @since   11.3	 * @throws  LogicException	 */	public function crop($width, $height, $left = null, $top = null, $createNew = true)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Sanitize width.		$width = $this->sanitizeWidth($width, $height);		// Sanitize height.		$height = $this->sanitizeHeight($height, $width);		// Autocrop offsets		if (is_null($left))		{			$left = round(($this->getWidth() - $width) / 2);		}		if (is_null($top))		{			$top = round(($this->getHeight() - $height) / 2);		}		// Sanitize left.		$left = $this->sanitizeOffset($left);		// Sanitize top.		$top = $this->sanitizeOffset($top);		// Create the new truecolor image handle.		$handle = imagecreatetruecolor($width, $height);		// Allow transparency for the new image handle.		imagealphablending($handle, false);		imagesavealpha($handle, true);		if ($this->isTransparent())		{			// Get the transparent color values for the current image.			$rgba = imageColorsForIndex($this->handle, imagecolortransparent($this->handle));			$color = imageColorAllocate($this->handle, $rgba['red'], $rgba['green'], $rgba['blue']);			// Set the transparent color values for the new image.			imagecolortransparent($handle, $color);			imagefill($handle, 0, 0, $color);			imagecopyresized($handle, $this->handle, 0, 0, $left, $top, $width, $height, $width, $height);		}		else		{			imagecopyresampled($handle, $this->handle, 0, 0, $left, $top, $width, $height, $width, $height);		}		// If we are cropping to a new image, create a new JImage object.		if ($createNew)		{			// @codeCoverageIgnoreStart			$new = new JImage($handle);			return $new;			// @codeCoverageIgnoreEnd		}		// Swap out the current handle for the new image handle.		else		{			// Free the memory from the current handle			$this->destroy();			$this->handle = $handle;			return $this;		}	}	/**	 * Method to apply a filter to the image by type.  Two examples are: grayscale and sketchy.	 *	 * @param   string  $type     The name of the image filter to apply.	 * @param   array   $options  An array of options for the filter.	 *	 * @return  JImage	 *	 * @since   11.3	 * @see     JImageFilter	 * @throws  LogicException	 * @throws  RuntimeException	 */	public function filter($type, array $options = array())	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Get the image filter instance.		$filter = $this->getFilterInstance($type);		// Execute the image filter.		$filter->execute($options);		return $this;	}	/**	 * Method to get the height of the image in pixels.	 *	 * @return  integer	 *	 * @since   11.3	 * @throws  LogicException	 */	public function getHeight()	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		return imagesy($this->handle);	}	/**	 * Method to get the width of the image in pixels.	 *	 * @return  integer	 *	 * @since   11.3	 * @throws  LogicException	 */	public function getWidth()	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		return imagesx($this->handle);	}	/**	 * Method to return the path	 *	 * @return	string	 *	 * @since	11.3	 */	public function getPath()	{		return $this->path;	}	/**	 * Method to determine whether or not an image has been loaded into the object.	 *	 * @return  bool	 *	 * @since   11.3	 */	public function isLoaded()	{		// Make sure the resource handle is valid.		if (!is_resource($this->handle) || (get_resource_type($this->handle) != 'gd'))		{			return false;		}		return true;	}	/**	 * Method to determine whether or not the image has transparency.	 *	 * @return  bool	 *	 * @since   11.3	 * @throws  LogicException	 */	public function isTransparent()	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		return (imagecolortransparent($this->handle) >= 0);	}	/**	 * Method to load a file into the JImage object as the resource.	 *	 * @param   string  $path  The filesystem path to load as an image.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function loadFile($path)	{		// Destroy the current image handle if it exists		$this->destroy();		// Make sure the file exists.		if (!file_exists($path))		{			throw new InvalidArgumentException('The image file does not exist.');		}		// Get the image properties.		$properties = self::getImageFileProperties($path);		// Attempt to load the image based on the MIME-Type		switch ($properties->mime)		{			case 'image/gif':				// Make sure the image type is supported.				if (empty(self::$formats[IMAGETYPE_GIF]))				{					// @codeCoverageIgnoreStart					JLog::add('Attempting to load an image of unsupported type GIF.', JLog::ERROR);					throw new RuntimeException('Attempting to load an image of unsupported type GIF.');					// @codeCoverageIgnoreEnd				}				// Attempt to create the image handle.				$handle = imagecreatefromgif($path);				if (!is_resource($handle))				{					// @codeCoverageIgnoreStart					throw new RuntimeException('Unable to process GIF image.');					// @codeCoverageIgnoreEnd				}				$this->handle = $handle;				break;			case 'image/jpeg':				// Make sure the image type is supported.				if (empty(self::$formats[IMAGETYPE_JPEG]))				{					// @codeCoverageIgnoreStart					JLog::add('Attempting to load an image of unsupported type JPG.', JLog::ERROR);					throw new RuntimeException('Attempting to load an image of unsupported type JPG.');					// @codeCoverageIgnoreEnd				}				// Attempt to create the image handle.				$handle = imagecreatefromjpeg($path);				if (!is_resource($handle))				{					// @codeCoverageIgnoreStart					throw new RuntimeException('Unable to process JPG image.');					// @codeCoverageIgnoreEnd				}				$this->handle = $handle;				break;			case 'image/png':				// Make sure the image type is supported.				if (empty(self::$formats[IMAGETYPE_PNG]))				{					// @codeCoverageIgnoreStart					JLog::add('Attempting to load an image of unsupported type PNG.', JLog::ERROR);					throw new RuntimeException('Attempting to load an image of unsupported type PNG.');					// @codeCoverageIgnoreEnd				}				// Attempt to create the image handle.				$handle = imagecreatefrompng($path);				if (!is_resource($handle))				{					// @codeCoverageIgnoreStart					throw new RuntimeException('Unable to process PNG image.');					// @codeCoverageIgnoreEnd				}				$this->handle = $handle;				break;			default:				JLog::add('Attempting to load an image of unsupported type: ' . $properties->mime, JLog::ERROR);				throw new InvalidArgumentException('Attempting to load an image of unsupported type: ' . $properties->mime);				break;		}		// Set the filesystem path to the source image.		$this->path = $path;	}	/**	 * Method to resize the current image.	 *	 * @param   mixed    $width        The width of the resized image in pixels or a percentage.	 * @param   mixed    $height       The height of the resized image in pixels or a percentage.	 * @param   bool     $createNew    If true the current image will be cloned, resized and returned; else	 *                                 the current image will be resized and returned.	 * @param   integer  $scaleMethod  Which method to use for scaling	 *	 * @return  JImage	 *	 * @since   11.3	 * @throws  LogicException	 */	public function resize($width, $height, $createNew = true, $scaleMethod = self::SCALE_INSIDE)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Sanitize width.		$width = $this->sanitizeWidth($width, $height);		// Sanitize height.		$height = $this->sanitizeHeight($height, $width);		// Prepare the dimensions for the resize operation.		$dimensions = $this->prepareDimensions($width, $height, $scaleMethod);		// Create the new truecolor image handle.		$handle = imagecreatetruecolor($dimensions->width, $dimensions->height);		// Allow transparency for the new image handle.		imagealphablending($handle, false);		imagesavealpha($handle, true);		if ($this->isTransparent())		{			// Get the transparent color values for the current image.			$rgba = imageColorsForIndex($this->handle, imagecolortransparent($this->handle));			$color = imageColorAllocate($this->handle, $rgba['red'], $rgba['green'], $rgba['blue']);			// Set the transparent color values for the new image.			imagecolortransparent($handle, $color);			imagefill($handle, 0, 0, $color);			imagecopyresized($handle, $this->handle, 0, 0, 0, 0, $dimensions->width, $dimensions->height, $this->getWidth(), $this->getHeight());		}		else		{			imagecopyresampled($handle, $this->handle, 0, 0, 0, 0, $dimensions->width, $dimensions->height, $this->getWidth(), $this->getHeight());		}		// If we are resizing to a new image, create a new JImage object.		if ($createNew)		{			// @codeCoverageIgnoreStart			$new = new JImage($handle);			return $new;			// @codeCoverageIgnoreEnd		}		// Swap out the current handle for the new image handle.		else		{			// Free the memory from the current handle			$this->destroy();			$this->handle = $handle;			return $this;		}	}	/**	 * Method to crop an image after resizing it to maintain	 * proportions without having to do all the set up work.	 *	 * @param   integer  $width      The desired width of the image in pixels or a percentage.	 * @param   integer  $height     The desired height of the image in pixels or a percentage.	 * @param   integer  $createNew  If true the current image will be cloned, resized, cropped and returned.	 *	 * @return  object  JImage Object for chaining.	 *	 * @since   12.3	 */	public function cropResize($width, $height, $createNew = true)	{		$width   = $this->sanitizeWidth($width, $height);		$height  = $this->sanitizeHeight($height, $width);		if (($this->getWidth() / $width) < ($this->getHeight() / $height))		{			$this->resize($width, 0, false);		}		else		{			$this->resize(0, $height, false);		}		return $this->crop($width, $height, null, null, $createNew);	}	/**	 * Method to rotate the current image.	 *	 * @param   mixed    $angle       The angle of rotation for the image	 * @param   integer  $background  The background color to use when areas are added due to rotation	 * @param   bool     $createNew   If true the current image will be cloned, rotated and returned; else	 *                                the current image will be rotated and returned.	 *	 * @return  JImage	 *	 * @since   11.3	 * @throws  LogicException	 */	public function rotate($angle, $background = -1, $createNew = true)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Sanitize input		$angle = (float) $angle;		// Create the new truecolor image handle.		$handle = imagecreatetruecolor($this->getWidth(), $this->getHeight());		// Allow transparency for the new image handle.		imagealphablending($handle, false);		imagesavealpha($handle, true);		// Copy the image		imagecopy($handle, $this->handle, 0, 0, 0, 0, $this->getWidth(), $this->getHeight());		// Rotate the image		$handle = imagerotate($handle, $angle, $background);		// If we are resizing to a new image, create a new JImage object.		if ($createNew)		{			// @codeCoverageIgnoreStart			$new = new JImage($handle);			return $new;			// @codeCoverageIgnoreEnd		}		// Swap out the current handle for the new image handle.		else		{			// Free the memory from the current handle			$this->destroy();			$this->handle = $handle;			return $this;		}	}	/**	 * Method to write the current image out to a file.	 *	 * @param   string   $path     The filesystem path to save the image.	 * @param   integer  $type     The image type to save the file as.	 * @param   array    $options  The image type options to use in saving the file.	 *	 * @return  boolean	 *	 * @see     http://www.php.net/manual/image.constants.php	 * @since   11.3	 * @throws  LogicException	 */	public function toFile($path, $type = IMAGETYPE_JPEG, array $options = array())	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		switch ($type)		{			case IMAGETYPE_GIF:				return imagegif($this->handle, $path);				break;			case IMAGETYPE_PNG:				return imagepng($this->handle, $path, (array_key_exists('quality', $options)) ? $options['quality'] : 0);				break;			case IMAGETYPE_JPEG:			default:				return imagejpeg($this->handle, $path, (array_key_exists('quality', $options)) ? $options['quality'] : 100);		}	}	/**	 * Method to get an image filter instance of a specified type.	 *	 * @param   string  $type  The image filter type to get.	 *	 * @return  JImageFilter	 *	 * @since   11.3	 * @throws  RuntimeException	 */	protected function getFilterInstance($type)	{		// Sanitize the filter type.		$type = strtolower(preg_replace('#[^A-Z0-9_]#i', '', $type));		// Verify that the filter type exists.		$className = 'JImageFilter' . ucfirst($type);		if (!class_exists($className))		{			JLog::add('The ' . ucfirst($type) . ' image filter is not available.', JLog::ERROR);			throw new RuntimeException('The ' . ucfirst($type) . ' image filter is not available.');		}		// Instantiate the filter object.		$instance = new $className($this->handle);		// Verify that the filter type is valid.		if (!($instance instanceof JImageFilter))		{			// @codeCoverageIgnoreStart			JLog::add('The ' . ucfirst($type) . ' image filter is not valid.', JLog::ERROR);			throw new RuntimeException('The ' . ucfirst($type) . ' image filter is not valid.');			// @codeCoverageIgnoreEnd		}		return $instance;	}	/**	 * Method to get the new dimensions for a resized image.	 *	 * @param   integer  $width        The width of the resized image in pixels.	 * @param   integer  $height       The height of the resized image in pixels.	 * @param   integer  $scaleMethod  The method to use for scaling	 *	 * @return  stdClass	 *	 * @since   11.3	 * @throws  InvalidArgumentException  If width, height or both given as zero	 */	protected function prepareDimensions($width, $height, $scaleMethod)	{		// Instantiate variables.		$dimensions = new stdClass;		switch ($scaleMethod)		{			case self::SCALE_FILL:				$dimensions->width = (int) round($width);				$dimensions->height = (int) round($height);				break;			case self::SCALE_INSIDE:			case self::SCALE_OUTSIDE:				$rx = ($width > 0) ? ($this->getWidth() / $width) : 0;				$ry = ($height > 0) ? ($this->getHeight() / $height) : 0;				if ($scaleMethod == self::SCALE_INSIDE)				{					$ratio = ($rx > $ry) ? $rx : $ry;				}				else				{					$ratio = ($rx < $ry) ? $rx : $ry;				}				$dimensions->width = (int) round($this->getWidth() / $ratio);				$dimensions->height = (int) round($this->getHeight() / $ratio);				break;			default:				throw new InvalidArgumentException('Invalid scale method.');				break;		}		return $dimensions;	}	/**	 * Method to sanitize a height value.	 *	 * @param   mixed  $height  The input height value to sanitize.	 * @param   mixed  $width   The input width value for reference.	 *	 * @return  integer	 *	 * @since   11.3	 */	protected function sanitizeHeight($height, $width)	{		// If no height was given we will assume it is a square and use the width.		$height = ($height === null) ? $width : $height;		// If we were given a percentage, calculate the integer value.		if (preg_match('/^[0-9]+(\.[0-9]+)?\%$/', $height))		{			$height = (int) round($this->getHeight() * (float) str_replace('%', '', $height) / 100);		}		// Else do some rounding so we come out with a sane integer value.		else		{			$height = (int) round((float) $height);		}		return $height;	}	/**	 * Method to sanitize an offset value like left or top.	 *	 * @param   mixed  $offset  An offset value.	 *	 * @return  integer	 *	 * @since   11.3	 */	protected function sanitizeOffset($offset)	{		return (int) round((float) $offset);	}	/**	 * Method to sanitize a width value.	 *	 * @param   mixed  $width   The input width value to sanitize.	 * @param   mixed  $height  The input height value for reference.	 *	 * @return  integer	 *	 * @since   11.3	 */	protected function sanitizeWidth($width, $height)	{		// If no width was given we will assume it is a square and use the height.		$width = ($width === null) ? $height : $width;		// If we were given a percentage, calculate the integer value.		if (preg_match('/^[0-9]+(\.[0-9]+)?\%$/', $width))		{			$width = (int) round($this->getWidth() * (float) str_replace('%', '', $width) / 100);		}		// Else do some rounding so we come out with a sane integer value.		else		{			$width = (int) round((float) $width);		}		return $width;	}	/**	 * Method to destroy an image handle and	 * free the memory associated with the handle	 *	 * @return  boolean  True on success, false on failure or if no image is loaded	 *	 * @since 12.3	 */	public function destroy()	{		if ($this->isLoaded())		{			return imagedestroy($this->handle);		}		return false;	}	/**	 * Method to call the destroy() method one last time	 * to free any memory when the object is unset	 *	 * @see     JImage::destroy()	 */	public function __destruct()	{		$this->destroy();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Driver Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */abstract class JDatabaseIterator implements Countable, Iterator{	/**	 * The database cursor.	 *	 * @var    mixed	 * @since  12.1	 */	protected $cursor;	/**	 * The class of object to create.	 *	 * @var    string	 * @since  12.1	 */	protected $class;	/**	 * The name of the column to use for the key of the database record.	 *	 * @var    mixed	 * @since  12.1	 */	private $_column;	/**	 * The current database record.	 *	 * @var    mixed	 * @since  12.1	 */	private $_current;	/**	 * A numeric or string key for the current database record.	 *	 * @var    scalar	 * @since  12.1	 */	private $_key;	/**	 * The number of fetched records.	 *	 * @var    integer	 * @since  12.1	 */	private $_fetched = 0;	/**	 * Database iterator constructor.	 *	 * @param   mixed   $cursor  The database cursor.	 * @param   string  $column  An option column to use as the iterator key.	 * @param   string  $class   The class of object that is returned.	 *	 * @throws  InvalidArgumentException	 */	public function __construct($cursor, $column = null, $class = 'stdClass')	{		if (!class_exists($class))		{			throw new InvalidArgumentException(sprintf('new %s(*%s*, cursor)', get_class($this), gettype($class)));		}		$this->cursor = $cursor;		$this->class = $class;		$this->_column = $column;		$this->_fetched = 0;		$this->next();	}	/**	 * Database iterator destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		if ($this->cursor)		{			$this->freeResult($this->cursor);		}	}	/**	 * The current element in the iterator.	 *	 * @return  object	 *	 * @see     Iterator::current()	 * @since   12.1	 */	public function current()	{		return $this->_current;	}	/**	 * The key of the current element in the iterator.	 *	 * @return  scalar	 *	 * @see     Iterator::key()	 * @since   12.1	 */	public function key()	{		return $this->_key;	}	/**	 * Moves forward to the next result from the SQL query.	 *	 * @return  void	 *	 * @see     Iterator::next()	 * @since   12.1	 */	public function next()	{		// Set the default key as being the number of fetched object		$this->_key = $this->_fetched;		// Try to get an object		$this->_current = $this->fetchObject();		// If an object has been found		if ($this->_current)		{			// Set the key as being the indexed column (if it exists)			if (isset($this->_current->{$this->_column}))			{				$this->_key = $this->_current->{$this->_column};			}			// Update the number of fetched object			$this->_fetched++;		}	}	/**	 * Rewinds the iterator.	 *	 * This iterator cannot be rewound.	 *	 * @return  void	 *	 * @see     Iterator::rewind()	 * @since   12.1	 */	public function rewind()	{	}	/**	 * Checks if the current position of the iterator is valid.	 *	 * @return  boolean	 *	 * @see     Iterator::valid()	 * @since   12.1	 */	public function valid()	{		return (boolean) $this->_current;	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	abstract protected function fetchObject();	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	abstract protected function freeResult();}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');$cparams = JComponentHelper::getParams('com_media');// If the page class is defined, add to class as suffix.// It will be a separate class if the user starts it with a space?><section class="blog<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading') != 0 or $this->params->get('show_category_title')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	<?php if ($this->params->get('show_category_title'))	{		echo '<span class="subheading-category">'.$this->category->title.'</span>';	}	?></h1><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_content.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php $leadingcount = 0; ?><?php if (!empty($this->lead_items)) : ?><div class="items-leading">	<?php foreach ($this->lead_items as &$item) : ?>		<article class="leading-<?php echo $leadingcount; ?><?php echo $item->state == 0 ? 'system-unpublished' : null; ?>">			<?php				$this->item = &$item;				echo $this->loadTemplate('item');			?>		</article>		<?php			$leadingcount++;		?>	<?php endforeach; ?></div><?php endif; ?><?php	$introcount = (count($this->intro_items));	$counter = 0;?><?php if (!empty($this->intro_items)) : ?>	<?php foreach ($this->intro_items as $key => &$item) : ?>	<?php		$key = ($key - $leadingcount) + 1;		$rowcount = (((int) $key - 1) % (int) $this->columns) + 1;		$row = $counter / $this->columns;		if ($rowcount == 1) : ?>	<div class="items-row cols-<?php echo (int) $this->columns;?> <?php echo 'row-'.$row; ?>">	<?php endif; ?>	<article class="item column-<?php echo $rowcount;?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?>">		<?php			$this->item = &$item;			echo $this->loadTemplate('item');		?>	</article>	<?php $counter++; ?>	<?php if (($rowcount == $this->columns) or ($counter == $introcount)) : ?>				<span class="row-separator"></span>				</div>			<?php endif; ?>	<?php endforeach; ?><?php endif; ?><?php if (!empty($this->link_items)) : ?>	<?php echo $this->loadTemplate('links'); ?><?php endif; ?>  	<div class="cat-children">	<?php if (is_array($this->children[$this->category->id]) && count($this->children[$this->category->id]) > 0 && $this->params->get('maxLevel') != 0) : ?>		<?php if ($this->params->get('show_category_heading_title_text', 1) == 1) : ?>		<h3>			<?php echo JTEXT::_('JGLOBAL_SUBCATEGORIES'); ?>		</h3>		<?php endif; ?>	<?php endif; ?>			<?php echo $this->loadTemplate('children'); ?>		</div><?php if (($this->params->def('show_pagination', 1) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>		<div class="pagination">						<?php  if ($this->params->def('show_pagination_results', 1)) : ?>						<p class="counter">								<?php echo $this->pagination->getPagesCounter(); ?>						</p>				<?php endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>		</div><?php  endif; ?></section>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');$user  = JFactory::getUser();$input = JFactory::getApplication()->input;?><script type='text/javascript'>var image_base_path = '<?php $params = JComponentHelper::getParams('com_media');echo $params->get('image_path', 'images'); ?>/';</script><form action="index.php?option=com_media&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author'); ?>" class="form-vertical" id="imageForm" method="post" enctype="multipart/form-data">	<div id="messages" style="display: none;">		<span id="message"></span><?php echo JHtml::_('image', 'media/dots.gif', '...', array('width' => 22, 'height' => 12), true) ?>	</div>	<div class="well">		<div class="row">			<div class="span9 control-group">				<div class="control-label">					<label class="control-label" for="folder"><?php echo JText::_('COM_MEDIA_DIRECTORY') ?></label>				</div>				<div class="controls">					<?php echo $this->folderList; ?>					<button class="btn" type="button" id="upbutton" title="<?php echo JText::_('COM_MEDIA_DIRECTORY_UP') ?>"><?php echo JText::_('COM_MEDIA_UP') ?></button>				</div>			</div>			<div class="pull-right">				<button class="btn btn-primary" type="button" onclick="<?php if ($this->state->get('field.id')):?>window.parent.jInsertFieldValue(document.id('f_url').value,'<?php echo $this->state->get('field.id');?>');<?php else:?>ImageManager.onok();<?php endif;?>window.parent.SqueezeBox.close();"><?php echo JText::_('COM_MEDIA_INSERT') ?></button>				<button class="btn" type="button" onclick="window.parent.SqueezeBox.close();"><?php echo JText::_('JCANCEL') ?></button>			</div>		</div>	</div>	<iframe id="imageframe" name="imageframe" src="index.php?option=com_media&amp;view=imagesList&amp;tmpl=component&amp;folder=<?php echo $this->state->folder?>&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author');?>"></iframe>	<div class="well">		<div class="row">			<div class="span6 control-group">				<div class="control-label">					<label for="f_url"><?php echo JText::_('COM_MEDIA_IMAGE_URL') ?></label>				</div>				<div class="controls">					<input type="text" id="f_url" value="" />				</div>			</div>			<?php if (!$this->state->get('field.id')):?>			<div class="span6 control-group">				<div class="control-label">					<label for="f_align"><?php echo JText::_('COM_MEDIA_ALIGN') ?></label>				</div>				<div class="controls">					<select size="1" id="f_align">						<option value="" selected="selected"><?php echo JText::_('COM_MEDIA_NOT_SET') ?></option>						<option value="left"><?php echo JText::_('JGLOBAL_LEFT') ?></option>						<option value="right"><?php echo JText::_('JGLOBAL_RIGHT') ?></option>					</select>					<p class="help-block"><?php echo JText::_('COM_MEDIA_ALIGN_DESC');?></p>				</div>			</div>			<?php endif;?>		</div>		<?php if (!$this->state->get('field.id')):?>		<div class="row">			<div class="span6 control-group">				<div class="control-label">					<label for="f_alt"><?php echo JText::_('COM_MEDIA_IMAGE_DESCRIPTION') ?></label>				</div>				<div class="controls">					<input type="text" id="f_alt" value="" />				</div>			</div>			<div class="span6 control-group">				<div class="control-label">					<label for="f_title"><?php echo JText::_('COM_MEDIA_TITLE') ?></label>				</div>				<div class="controls">					<input type="text" id="f_title" value="" />				</div>			</div>		</div>		<div class="row">			<div class="span12 control-group">				<div class="control-label">					<label for="f_caption"><?php echo JText::_('COM_MEDIA_CAPTION') ?></label>				</div>				<div class="controls">					<select size="1" id="f_caption" >						<option value="" selected="selected" ><?php echo JText::_('JNO') ?></option>						<option value="1"><?php echo JText::_('JYES') ?></option>					</select>					<p class="help-block"><?php echo JText::_('COM_MEDIA_CAPTION_DESC');?></p>				</div>			</div>		</div>		<?php endif;?>		<input type="hidden" id="dirPath" name="dirPath" />		<input type="hidden" id="f_file" name="f_file" />		<input type="hidden" id="tmpl" name="component" />	</div></form><?php if ($user->authorise('core.create', 'com_media')) : ?>	<form action="<?php echo JURI::base(); ?>index.php?option=com_media&amp;task=file.upload&amp;tmpl=component&amp;<?php echo $this->session->getName() . '=' . $this->session->getId(); ?>&amp;<?php echo JSession::getFormToken();?>=1&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author');?>&amp;view=images" id="uploadForm" class="form-horizontal" name="uploadForm" method="post" enctype="multipart/form-data">		<div id="uploadform" class="well">			<fieldset id="upload-noflash" class="actions">				<div class="control-group">					<div class="control-label">						<label for="upload-file" class="control-label"><?php echo JText::_('COM_MEDIA_UPLOAD_FILE'); ?></label>					</div>					<div class="controls">						<input type="file" id="upload-file" name="Filedata[]" multiple /><button class="btn btn-primary" id="upload-submit"><i class="icon-upload icon-white"></i> <?php echo JText::_('COM_MEDIA_START_UPLOAD'); ?></button>						<p class="help-block"><?php echo $this->config->get('upload_maxsize') == '0' ? JText::_('COM_MEDIA_UPLOAD_FILES_NOLIMIT') : JText::sprintf('COM_MEDIA_UPLOAD_FILES', $this->config->get('upload_maxsize')); ?></p>					</div>				</div>			</fieldset>			<input type="hidden" name="return-url" value="<?php echo base64_encode('index.php?option=com_media&view=images&tmpl=component&fieldid=' . $input->getCmd('fieldid', '') . '&e_name=' . $input->getCmd('e_name') . '&asset=' . $input->getCmd('asset') . '&author=' . $input->getCmd('author')); ?>" />		</div>	</form><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Reset controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerReset extends UsersController{	/**	 * Method to request a password reset.	 *	 * @since   1.6	 */	public function request()	{		// Check the request token.		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Reset', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Submit the password reset request.		$return	= $model->processResetRequest($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_RESET_REQUEST_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset'.$itemid;			// Go back to the request form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// The request failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset'.$itemid;			// Go back to the request form.			$message = JText::sprintf('COM_USERS_RESET_REQUEST_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// The request succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=confirm'.$itemid;			// Proceed to step two.			$this->setRedirect(JRoute::_($route, false));			return true;		}	}	/**	 * Method to confirm the password request.	 *	 * @access	public	 * @since   1.6	 */	public function confirm()	{		// Check the request token.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Reset', 'UsersModel');		$data  = $this->input->get('jform', array(), 'array');		// Confirm the password reset request.		$return	= $model->processResetConfirm($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_RESET_CONFIRM_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=confirm'.$itemid;			// Go back to the confirm form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// Confirm failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=confirm'.$itemid;			// Go back to the confirm form.			$message = JText::sprintf('COM_USERS_RESET_CONFIRM_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// Confirm succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=complete'.$itemid;			// Proceed to step three.			$this->setRedirect(JRoute::_($route, false));			return true;		}	}	/**	 * Method to complete the password reset process.	 *	 * @since   1.6	 */	public function complete()	{		// Check for request forgeries		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Reset', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Complete the password reset request.		$return	= $model->processResetComplete($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_RESET_COMPLETE_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=complete'.$itemid;			// Go back to the complete form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// Complete failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=complete'.$itemid;			// Go back to the complete form.			$message = JText::sprintf('COM_USERS_RESET_COMPLETE_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// Complete succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getLoginRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=login'.$itemid;			// Proceed to the login form.			$message = JText::_('COM_USERS_RESET_COMPLETE_SUCCESS');			$this->setRedirect(JRoute::_($route, false), $message);			return true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$selector = empty($displayData['selector']) ? '' : $displayData['selector'];?><ul class="nav nav-tabs" id="<?php echo $selector; ?>Tabs"></ul><div class="tab-content" id="<?php echo $selector; ?>Content">
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Controller * * @package     Joomla.Site * @subpackage  com_wrapper * @since       1.5 */class WrapperController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JControllerLegacy  This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Set the default view name and format from the Request.		$vName = $this->input->get('view', 'wrapper');		$this->input->set('view', $vName);		return parent::display($cachable, array('Itemid' => 'INT'));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * APC session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @since       11.1 */class JSessionStorageApc extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('APC Extension is not available', 404);		}		parent::__construct($options);	}	/**	 * Read the data for a particular session identifier from the	 * SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		$sess_id = 'sess_' . $id;		return (string) apc_fetch($sess_id);	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id            The session identifier.	 * @param   string  $session_data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $session_data)	{		$sess_id = 'sess_' . $id;		return apc_store($sess_id, $session_data, ini_get("session.gc_maxlifetime"));	}	/**	 * Destroy the data for a particular session identifier in the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		$sess_id = 'sess_' . $id;		return apc_delete($sess_id);	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return extension_loaded('apc');	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');/** * A File handling class * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JFile{	/**	 * Gets the extension of a file name	 *	 * @param   string  $file  The file name	 *	 * @return  string  The file extension	 *	 * @since   11.1	 */	public static function getExt($file)	{		$dot = strrpos($file, '.') + 1;		return substr($file, $dot);	}	/**	 * Strips the last extension off of a file name	 *	 * @param   string  $file  The file name	 *	 * @return  string  The file name without the extension	 *	 * @since   11.1	 */	public static function stripExt($file)	{		return preg_replace('#\.[^.]*$#', '', $file);	}	/**	 * Makes file name safe to use	 *	 * @param   string  $file  The name of the file [not full path]	 *	 * @return  string  The sanitised string	 *	 * @since   11.1	 */	public static function makeSafe($file)	{		$regex = array('#(\.){2,}#', '#[^A-Za-z0-9\.\_\- ]#', '#^\.#');		return preg_replace($regex, '', $file);	}	/**	 * Copies a file	 *	 * @param   string   $src          The path to the source file	 * @param   string   $dest         The path to the destination file	 * @param   string   $path         An optional base path to prefix to the file names	 * @param   boolean  $use_streams  True to use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function copy($src, $dest, $path = null, $use_streams = false)	{		// Prepend a base path if it exists		if ($path)		{			$src = JPath::clean($path . '/' . $src);			$dest = JPath::clean($path . '/' . $dest);		}		// Check src path		if (!is_readable($src))		{			JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_JFILE_FIND_COPY', $src), JLog::WARNING, 'jerror');			return false;		}		if ($use_streams)		{			$stream = JFactory::getStream();			if (!$stream->copy($src, $dest))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_JFILE_STREAMS', $src, $dest, $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// If the parent folder doesn't exist we must create it				if (!file_exists(dirname($dest)))				{					jimport('joomla.filesystem.folder');					JFolder::create(dirname($dest));				}				// Translate the destination path for the FTP account				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $dest), '/');				if (!$ftp->store($src, $dest))				{					// FTP connector throws an error					return false;				}				$ret = true;			}			else			{				if (!@ copy($src, $dest))				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_COPY_FAILED'), JLog::WARNING, 'jerror');					return false;				}				$ret = true;			}			return $ret;		}	}	/**	 * Delete a file or array of files	 *	 * @param   mixed  $file  The file name or an array of file names	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function delete($file)	{		$FTPOptions = JClientHelper::getCredentials('ftp');		if (is_array($file))		{			$files = $file;		}		else		{			$files[] = $file;		}		// Do NOT use ftp if it is not enabled		if ($FTPOptions['enabled'] == 1)		{			// Connect the FTP client			$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);		}		foreach ($files as $file)		{			$file = JPath::clean($file);			// Try making the file writable first. If it's read-only, it can't be deleted			// on Windows, even if the parent folder is writable			@chmod($file, 0777);			// In case of restricted permissions we zap it one way or the other			// as long as the owner is either the webserver or the ftp			if (@unlink($file))			{				// Do nothing			}			elseif ($FTPOptions['enabled'] == 1)			{				$file = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $file), '/');				if (!$ftp->delete($file))				{					// FTP connector throws an error					return false;				}			}			else			{				$filename = basename($file);				JLog::add(JText::sprintf('JLIB_FILESYSTEM_DELETE_FAILED', $filename), JLog::WARNING, 'jerror');				return false;			}		}		return true;	}	/**	 * Moves a file	 *	 * @param   string   $src          The path to the source file	 * @param   string   $dest         The path to the destination file	 * @param   string   $path         An optional base path to prefix to the file names	 * @param   boolean  $use_streams  True to use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function move($src, $dest, $path = '', $use_streams = false)	{		if ($path)		{			$src = JPath::clean($path . '/' . $src);			$dest = JPath::clean($path . '/' . $dest);		}		// Check src path		if (!is_readable($src))		{			return JText::_('JLIB_FILESYSTEM_CANNOT_FIND_SOURCE_FILE');		}		if ($use_streams)		{			$stream = JFactory::getStream();			if (!$stream->move($src, $dest))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_JFILE_MOVE_STREAMS', $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// Translate path for the FTP account				$src = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $src), '/');				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $dest), '/');				// Use FTP rename to simulate move				if (!$ftp->rename($src, $dest))				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_RENAME_FILE'), JLog::WARNING, 'jerror');					return false;				}			}			else			{				if (!@ rename($src, $dest))				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_RENAME_FILE'), JLog::WARNING, 'jerror');					return false;				}			}			return true;		}	}	/**	 * Read the contents of a file	 *	 * @param   string   $filename   The full file path	 * @param   boolean  $incpath    Use include path	 * @param   integer  $amount     Amount of file to read	 * @param   integer  $chunksize  Size of chunks to read	 * @param   integer  $offset     Offset of the file	 *	 * @return  mixed  Returns file contents or boolean False if failed	 *	 * @since   11.1	 * @deprecated  13.3  Use the native file_get_contents() instead.	 */	public static function read($filename, $incpath = false, $amount = 0, $chunksize = 8192, $offset = 0)	{		JLog::add(__METHOD__ . ' is deprecated. Use native file_get_contents() syntax.', JLog::WARNING, 'deprecated');		$data = null;		if ($amount && $chunksize > $amount)		{			$chunksize = $amount;		}		if (false === $fh = fopen($filename, 'rb', $incpath))		{			JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_READ_UNABLE_TO_OPEN_FILE', $filename), JLog::WARNING, 'jerror');			return false;		}		clearstatcache();		if ($offset)		{			fseek($fh, $offset);		}		if ($fsize = @ filesize($filename))		{			if ($amount && $fsize > $amount)			{				$data = fread($fh, $amount);			}			else			{				$data = fread($fh, $fsize);			}		}		else		{			$data = '';			/*			 * While it's:			 * 1: Not the end of the file AND			 * 2a: No Max Amount set OR			 * 2b: The length of the data is less than the max amount we want			 */			while (!feof($fh) && (!$amount || strlen($data) < $amount))			{				$data .= fread($fh, $chunksize);			}		}		fclose($fh);		return $data;	}	/**	 * Write contents to a file	 *	 * @param   string   $file         The full file path	 * @param   string   &$buffer      The buffer to write	 * @param   boolean  $use_streams  Use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function write($file, &$buffer, $use_streams = false)	{		@set_time_limit(ini_get('max_execution_time'));		// If the destination directory doesn't exist we need to create it		if (!file_exists(dirname($file)))		{			jimport('joomla.filesystem.folder');			JFolder::create(dirname($file));		}		if ($use_streams)		{			$stream = JFactory::getStream();			// Beef up the chunk size to a meg			$stream->set('chunksize', (1024 * 1024 * 1024));			if (!$stream->writeFile($file, $buffer))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_WRITE_STREAMS', $file, $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// Translate path for the FTP account and use FTP write buffer to file				$file = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $file), '/');				$ret = $ftp->write($file, $buffer);			}			else			{				$file = JPath::clean($file);				$ret = is_int(file_put_contents($file, $buffer)) ? true : false;			}			return $ret;		}	}	/**	 * Moves an uploaded file to a destination folder	 *	 * @param   string   $src          The name of the php (temporary) uploaded file	 * @param   string   $dest         The path (including filename) to move the uploaded file to	 * @param   boolean  $use_streams  True to use streams	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function upload($src, $dest, $use_streams = false)	{		// Ensure that the path is valid and clean		$dest = JPath::clean($dest);		// Create the destination directory if it does not exist		$baseDir = dirname($dest);		if (!file_exists($baseDir))		{			jimport('joomla.filesystem.folder');			JFolder::create($baseDir);		}		if ($use_streams)		{			$stream = JFactory::getStream();			if (!$stream->upload($src, $dest))			{				JLog::add(JText::sprintf('JLIB_FILESYSTEM_ERROR_UPLOAD', $stream->getError()), JLog::WARNING, 'jerror');				return false;			}			return true;		}		else		{			$FTPOptions = JClientHelper::getCredentials('ftp');			$ret = false;			if ($FTPOptions['enabled'] == 1)			{				// Connect the FTP client				$ftp = JClientFtp::getInstance($FTPOptions['host'], $FTPOptions['port'], array(), $FTPOptions['user'], $FTPOptions['pass']);				// Translate path for the FTP account				$dest = JPath::clean(str_replace(JPATH_ROOT, $FTPOptions['root'], $dest), '/');				// Copy the file to the destination directory				if (is_uploaded_file($src) && $ftp->store($src, $dest))				{					unlink($src);					$ret = true;				}				else				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_WARNFS_ERR02'), JLog::WARNING, 'jerror');				}			}			else			{				if (is_writeable($baseDir) && move_uploaded_file($src, $dest))				{					// Short circuit to prevent file permission errors					if (JPath::setPermissions($dest))					{						$ret = true;					}					else					{						JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_WARNFS_ERR01'), JLog::WARNING, 'jerror');					}				}				else				{					JLog::add(JText::_('JLIB_FILESYSTEM_ERROR_WARNFS_ERR02'), JLog::WARNING, 'jerror');				}			}			return $ret;		}	}	/**	 * Wrapper for the standard file_exists function	 *	 * @param   string  $file  File path	 *	 * @return  boolean  True if path is a file	 *	 * @since   11.1	 */	public static function exists($file)	{		return is_file(JPath::clean($file));	}	/**	 * Returns the name, without any path.	 *	 * @param   string  $file  File path	 *	 * @return  string  filename	 *	 * @since   11.1	 * @deprecated  13.3 Use basename() instead.	 */	public static function getName($file)	{		JLog::add(__METHOD__ . ' is deprecated. Use native basename() syntax.', JLog::WARNING, 'deprecated');		// Convert back slashes to forward slashes		$file = str_replace('\\', '/', $file);		$slash = strrpos($file, '/');		if ($slash !== false)		{			return substr($file, $slash + 1);		}		else		{			return $file;		}	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Module table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableModule extends JTable{	/**	 * Constructor.	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__modules', 'id', $db);		$this->access = (int) JFactory::getConfig()->get('access');	}	/**	 * Overloaded check function.	 *	 * @return  boolean  True if the instance is sane and able to be stored in the database.	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// Check for valid name		if (trim($this->title) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MUSTCONTAIN_A_TITLE_MODULE'));			return false;		}		// Check the publish down date is not earlier than publish up.		if ((int) $this->publish_down > 0 && $this->publish_down < $this->publish_up)		{			// Swap the dates.			$temp = $this->publish_up;			$this->publish_up = $this->publish_down;			$this->publish_down = $temp;		}		return true;	}	/**	 * Overloaded bind function.	 *	 * @param   array  $array   Named array.	 * @param   mixed  $ignore  An optional array or space separated list of properties to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		return parent::bind($array, $ignore);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Viewlevels table class. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableViewlevel extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__viewlevels', 'id', $db);	}	/**	 * Method to bind the data.	 *	 * @param   array  $array   The data to bind.	 * @param   mixed  $ignore  An array or space separated list of fields to ignore.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Bind the rules as appropriate.		if (isset($array['rules']))		{			if (is_array($array['rules']))			{				$array['rules'] = json_encode($array['rules']);			}		}		return parent::bind($array, $ignore);	}	/**	 * Method to check the current record to save	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		// Validate the title.		if ((trim($this->title)) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_VIEWLEVEL'));			return false;		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to negate the colors of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterNegate extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the negative filter.		imagefilter($this->handle, IMG_FILTER_NEGATE);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_version * * @package     Joomla.Administrator * @subpackage  mod_version * @since       1.6 */abstract class ModVersionHelper{	/**	 * Get the member items of the submenu.	 *	 * @param   JRegistry  &$params  The parameters object.	 *	 * @return  string  String containing the current Joomla version based on the selected format.	 */	public static function getVersion(&$params)	{		$format  = $params->get('format', 'short');		$product = $params->get('product', 0);		$method  = 'get' . ucfirst($format) . "Version";		// Get the joomla version		$instance = new JVersion;		$version  = call_user_func(array($instance, $method));		if ($format == 'short' && !empty($product))		{			// Add the product name to short format only (in long format it's included)			$version = $instance->PRODUCT . ' ' . $version;		}		return $version;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');?><div class="reset-confirm<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=reset.confirm'); ?>" method="post" class="form-validate">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<dl>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<dt><?php echo $field->label; ?></dt>				<dd><?php echo $field->input; ?></dd>			<?php endforeach; ?>			</dl>		</fieldset>		<?php endforeach; ?>		<div>			<button type="submit" class="validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Suggestions JSON controller for Finder. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderControllerSuggestions extends JControllerLegacy{	/**	 * Method to find search query suggestions.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  void	 *	 * @since   2.5	 */	public function display($cachable = false, $urlparams = false)	{		$return = array();		$params = JComponentHelper::getParams('com_finder');		if ($params->get('show_autosuggest', 1))		{			// Get the suggestions.			$model = $this->getModel('Suggestions', 'FinderModel');			$return = $model->getItems();		}		// Check the data.		if (empty($return))		{			$return = array();		}		// Use the correct json mime-type		header('Content-Type: application/json');		// Send the response.		echo json_encode($return);		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Memcache session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSessionStorageMemcache extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('Memcache Extension is not available', 404);		}		parent::__construct($options);		$config = JFactory::getConfig();		// This will be an array of loveliness		// @todo: multiple servers		$this->_servers = array(			array(				'host' => $config->get('memcache_server_host', 'localhost'),				'port' => $config->get('memcache_server_port', 11211)			)		);	}	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   12.2	 */	public function register()	{		ini_set('session.save_path', $this->_servers['host'] . ':' . $this->_servers['port']);		ini_set('session.save_handler', 'memcache');	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	static public function isSupported()	{		return (extension_loaded('memcache') && class_exists('Memcache'));	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strrev* Reverse a string* @param string UTF-8 encoded* @return string characters in string reverses* @see http://www.php.net/strrev* @package utf8* @subpackage strings*/function utf8_strrev($str){    preg_match_all('/./us', $str, $ar);    return join('',array_reverse($ar[0]));}
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class for using PHP streams. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpTransportStream implements JHttpTransport{	/**	 * @var    JRegistry  The client options.	 * @since  11.3	 */	protected $options;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct(JRegistry $options)	{		// Verify that fopen() is available.		if (!self::isSupported())		{			throw new RuntimeException('Cannot use a stream transport when fopen() is not available.');		}		// Verify that URLs can be used with fopen();		if (!ini_get('allow_url_fopen'))		{			throw new RuntimeException('Cannot use a stream transport when "allow_url_fopen" is disabled.');		}		$this->options = $options;	}	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null)	{		// Create the stream context options array with the required method offset.		$options = array('method' => strtoupper($method));		// If data exists let's encode it and make sure our Content-Type header is set.		if (isset($data))		{			// If the data is a scalar value simply add it to the stream context options.			if (is_scalar($data))			{				$options['content'] = $data;			}			// Otherwise we need to encode the value first.			else			{				$options['content'] = http_build_query($data);			}			if (!isset($headers['Content-Type']))			{				$headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';			}			// Add the relevant headers.			$headers['Content-Length'] = strlen($options['content']);		}		// Build the headers string for the request.		$headerString = null;		if (isset($headers))		{			foreach ($headers as $key => $value)			{				$headerString .= $key . ': ' . $value . "\r\n";			}			// Add the headers string into the stream context options array.			$options['header'] = trim($headerString, "\r\n");		}		// If an explicit timeout is given user it.		if (isset($timeout))		{			$options['timeout'] = (int) $timeout;		}		// If an explicit user agent is given use it.		if (isset($userAgent))		{			$options['user_agent'] = $userAgent;		}		// Ignore HTTP errors so that we can capture them.		$options['ignore_errors'] = 1;		// Follow redirects.		$options['follow_location'] = (int) $this->options->get('follow_location', 1);		// Create the stream context for the request.		$context = stream_context_create(array('http' => $options));		// Open the stream for reading.		$stream = @fopen((string) $uri, 'r', false, $context);		// Check if the stream is open.		if (!$stream)		{			throw new RuntimeException(sprintf('Could not connect to resource: %s', $uri));		}		// Get the metadata for the stream, including response headers.		$metadata = stream_get_meta_data($stream);		// Get the contents from the stream.		$content = stream_get_contents($stream);		// Close the stream.		fclose($stream);		if (isset($metadata['wrapper_data']['headers']))		{			$headers = $metadata['wrapper_data']['headers'];		}		elseif (isset($metadata['wrapper_data']))		{			$headers = $metadata['wrapper_data'];		}		else		{			$headers = array();		}		return $this->getResponse($headers, $content);	}	/**	 * Method to get a response object from a server response.	 *	 * @param   array   $headers  The response headers as an array.	 * @param   string  $body     The response body as a string.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  UnexpectedValueException	 */	protected function getResponse(array $headers, $body)	{		// Create the response object.		$return = new JHttpResponse;		// Set the body for the response.		$return->body = $body;		// Get the response code from the first offset of the response headers.		preg_match('/[0-9]{3}/', array_shift($headers), $matches);		$code = $matches[0];		if (is_numeric($code))		{			$return->code = (int) $code;		}		// No valid response code was detected.		else		{			throw new UnexpectedValueException('No HTTP response code found.');		}		// Add the response headers to the response object.		foreach ($headers as $header)		{			$pos = strpos($header, ':');			$return->headers[trim(substr($header, 0, $pos))] = trim(substr($header, ($pos + 1)));		}		return $return;	}	/**	 * method to check if http transport stream available for using	 *	 * @return bool true if available else false	 *	 * @since   12.1	 */	static public function isSupported()	{		return function_exists('fopen') && is_callable('fopen');	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Authentication.ldap * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * LDAP Authentication Plugin * * @package     Joomla.Plugin * @subpackage  Authentication.ldap * @since       1.5 */class PlgAuthenticationLdap extends JPlugin{	/**	 * This method should handle any authentication and report back to the subject	 *	 * @access	public	 * @param   array  $credentials Array holding the user credentials	 * @param   array   $options	Array of extra options	 * @param   object	$response	Authentication response object	 * @return  object  boolean	 * @since 1.5	 */	public function onUserAuthenticate($credentials, $options, &$response)	{		$userdetails = null;		$success = 0;		$userdetails = array();		// For JLog		$response->type = 'LDAP';		// LDAP does not like Blank passwords (tries to Anon Bind which is bad)		if (empty($credentials['password']))		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_PASS_BLANK');			return false;		}		// load plugin params info		$ldap_email		= $this->params->get('ldap_email');		$ldap_fullname	= $this->params->get('ldap_fullname');		$ldap_uid		= $this->params->get('ldap_uid');		$auth_method	= $this->params->get('auth_method');		$ldap = new JClientLdap($this->params);		if (!$ldap->connect())		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_NO_CONNECT');			return;		}		switch($auth_method)		{			case 'search':			{				// Bind using Connect Username/password				// Force anon bind to mitigate misconfiguration like [#7119]				if (strlen($this->params->get('username')))				{					$bindtest = $ldap->bind();				}				else				{					$bindtest = $ldap->anonymous_bind();				}				if ($bindtest)				{					// Search for users DN					$binddata = $ldap->simple_search(str_replace("[search]", $credentials['username'], $this->params->get('search_string')));					if (isset($binddata[0]) && isset($binddata[0]['dn']))					{						// Verify Users Credentials						$success = $ldap->bind($binddata[0]['dn'], $credentials['password'], 1);						// Get users details						$userdetails = $binddata;					} else {						$response->status = JAuthentication::STATUS_FAILURE;						$response->error_message = JText::_('JGLOBAL_AUTH_USER_NOT_FOUND');					}				}				else				{					$response->status = JAuthentication::STATUS_FAILURE;					$response->error_message = JText::_('JGLOBAL_AUTH_NO_BIND');				}			}	break;			case 'bind':			{				// We just accept the result here				$success = $ldap->bind($credentials['username'], $credentials['password']);				if ($success)				{					$userdetails = $ldap->simple_search(str_replace("[search]", $credentials['username'], $this->params->get('search_string')));				} else {					$response->status = JAuthentication::STATUS_FAILURE;					$response->error_message = JText::_('JGLOBAL_AUTH_BIND_FAILED');				}			}	break;		}		if (!$success)		{			$response->status = JAuthentication::STATUS_FAILURE;			if (!strlen($response->error_message))			{				$response->error_message = JText::_('JGLOBAL_AUTH_INCORRECT');			}		}		else		{			// Grab some details from LDAP and return them			if (isset($userdetails[0][$ldap_uid][0]))			{				$response->username = $userdetails[0][$ldap_uid][0];			}			if (isset($userdetails[0][$ldap_email][0]))			{				$response->email = $userdetails[0][$ldap_email][0];			}			if (isset($userdetails[0][$ldap_fullname][0]))			{				$response->fullname = $userdetails[0][$ldap_fullname][0];			} else {				$response->fullname = $credentials['username'];			}			// Were good - So say so.			$response->status		= JAuthentication::STATUS_SUCCESS;			$response->error_message = '';		}		$ldap->close();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class to allow users edit their own profile. * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminViewProfile extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form			= $this->get('Form');		$this->item			= $this->get('Item');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->form->setValue('password',	null);		$this->form->setValue('password2',	null);		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', 1);		JToolbarHelper::title(JText::_('COM_ADMIN_VIEW_PROFILE_TITLE'), 'user-profile');		JToolbarHelper::apply('profile.apply');		JToolbarHelper::save('profile.save');		JToolbarHelper::cancel('profile.cancel', 'JTOOLBAR_CLOSE');		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_ADMIN_USER_PROFILE_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR.'/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();$user = JFactory::getUser();?><fieldset class="adminform">	<legend><?php echo JText::_('COM_TEMPLATES_MENUS_ASSIGNMENT'); ?></legend>		<label id="jform_menuselect-lbl" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label>		<button type="button" class="jform-rightbtn" onclick="$$('.chk-menulink').each(function(el) { el.checked = !el.checked; });">			<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>		</button>		<div class="clr"></div>		<div id="menu-assignment">		<?php foreach ($menuTypes as &$type) : ?>			<ul class="menu-links">				<button type="button" class="jform-rightbtn" onclick="$$('.<?php echo $type->menutype; ?>').each(function(el) { el.checked = !el.checked; });">					<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>				</button>				<div class="clr"></div>				<h3><?php echo $type->title ? $type->title : $type->menutype; ?></h3>				<?php foreach ($type->links as $link) : ?>					<li class="menu-link">						<input type="checkbox" name="jform[assigned][]" value="<?php echo (int) $link->value;?>" id="link<?php echo (int) $link->value;?>"<?php if ($link->template_style_id == $this->item->id):?> checked="checked"<?php endif;?><?php if ($link->checked_out && $link->checked_out != $user->id):?> disabled="disabled"<?php else:?> class="chk-menulink <?php echo $type->menutype; ?>"<?php endif;?> />						<label for="link<?php echo (int) $link->value;?>" >							<?php echo $link->text; ?>						</label>					</li>				<?php endforeach; ?>			</ul>		<?php endforeach; ?>		</div></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.folder');jimport('joomla.filesystem.file');/** * Media Component List Model * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaModelList extends JModelLegacy{	public function getState($property = null, $default = null)	{		static $set;		if (!$set)		{			$input  = JFactory::getApplication()->input;			$folder = $input->get('folder', '', 'path');			$this->setState('folder', $folder);			$parent = str_replace("\\", "/", dirname($folder));			$parent = ($parent == '.') ? null : $parent;			$this->setState('parent', $parent);			$set = true;		}		return parent::getState($property, $default);	}	public function getImages()	{		$list = $this->getList();		return $list['images'];	}	public function getFolders()	{		$list = $this->getList();		return $list['folders'];	}	public function getDocuments()	{		$list = $this->getList();		return $list['docs'];	}	/**	 * Build imagelist	 *	 * @param string $listFolder The image directory to display	 * @since 1.5	 */	public function getList()	{		static $list;		// Only process the list once per request		if (is_array($list))		{			return $list;		}		// Get current path from request		$current = $this->getState('folder');		// If undefined, set to empty		if ($current == 'undefined')		{			$current = '';		}		if (strlen($current) > 0)		{			$basePath = COM_MEDIA_BASE.'/'.$current;		}		else		{			$basePath = COM_MEDIA_BASE;		}		$mediaBase = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE.'/');		$images		= array ();		$folders	= array ();		$docs		= array ();		$fileList = false;		$folderList = false;		if (file_exists($basePath))		{			// Get the list of files and folders from the given folder			$fileList	= JFolder::files($basePath);			$folderList = JFolder::folders($basePath);		}		// Iterate over the files if they exist		if ($fileList !== false)		{			foreach ($fileList as $file)			{				if (is_file($basePath.'/'.$file) && substr($file, 0, 1) != '.' && strtolower($file) !== 'index.html')				{					$tmp = new JObject;					$tmp->name = $file;					$tmp->title = $file;					$tmp->path = str_replace(DIRECTORY_SEPARATOR, '/', JPath::clean($basePath . '/' . $file));					$tmp->path_relative = str_replace($mediaBase, '', $tmp->path);					$tmp->size = filesize($tmp->path);					$ext = strtolower(JFile::getExt($file));					switch ($ext)					{						// Image						case 'jpg':						case 'png':						case 'gif':						case 'xcf':						case 'odg':						case 'bmp':						case 'jpeg':						case 'ico':							$info = @getimagesize($tmp->path);							$tmp->width		= @$info[0];							$tmp->height	= @$info[1];							$tmp->type		= @$info[2];							$tmp->mime		= @$info['mime'];							if (($info[0] > 60) || ($info[1] > 60))							{								$dimensions = MediaHelper::imageResize($info[0], $info[1], 60);								$tmp->width_60 = $dimensions[0];								$tmp->height_60 = $dimensions[1];							}							else {								$tmp->width_60 = $tmp->width;								$tmp->height_60 = $tmp->height;							}							if (($info[0] > 16) || ($info[1] > 16))							{								$dimensions = MediaHelper::imageResize($info[0], $info[1], 16);								$tmp->width_16 = $dimensions[0];								$tmp->height_16 = $dimensions[1];							}							else {								$tmp->width_16 = $tmp->width;								$tmp->height_16 = $tmp->height;							}							$images[] = $tmp;							break;						// Non-image document						default:							$tmp->icon_32 = "media/mime-icon-32/".$ext.".png";							$tmp->icon_16 = "media/mime-icon-16/".$ext.".png";							$docs[] = $tmp;							break;					}				}			}		}		// Iterate over the folders if they exist		if ($folderList !== false)		{			foreach ($folderList as $folder)			{				$tmp = new JObject;				$tmp->name = basename($folder);				$tmp->path = str_replace(DIRECTORY_SEPARATOR, '/', JPath::clean($basePath . '/' . $folder));				$tmp->path_relative = str_replace($mediaBase, '', $tmp->path);				$count = MediaHelper::countFiles($tmp->path);				$tmp->files = $count[0];				$tmp->folders = $count[1];				$folders[] = $tmp;			}		}		$list = array('folders' => $folders, 'docs' => $docs, 'images' => $images);		return $list;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_similar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$cacheparams = new stdClass;$cacheparams->cachemode = 'safeuri';$cacheparams->class = 'ModTagssimilarHelper';$cacheparams->method = 'getList';$cacheparams->methodparams = $params;$cacheparams->modeparams = array('id' => 'array', 'Itemid' => 'int');$list = JModuleHelper::moduleCache($module, $params, $cacheparams);if (!count($list)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_tags_similar', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Password Hashing Interface * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.2 */interface JCryptPassword{	const BLOWFISH = '$2y$';	const JOOMLA = 'Joomla';	const PBKDF = '$pbkdf$';	const MD5 = '$1$';	/**	 * Creates a password hash	 *	 * @param   string  $password  The password to hash.	 * @param   string  $prefix    The prefix of the hashing function.	 *	 * @return  string  The hashed password.	 *	 * @since   12.2	 */	public function create($password, $prefix = '$2a$');	/**	 * Verifies a password hash	 *	 * @param   string  $password  The password to verify.	 * @param   string  $hash      The password hash to check.	 *	 * @return  boolean  True if the password is valid, false otherwise.	 *	 * @since   12.2	 */	public function verify($password, $hash);}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_category * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the helper functions only oncerequire_once __DIR__ . '/helper.php';$input = JFactory::getApplication()->input;		// Prep for Normal or Dynamic Modes		$mode = $params->get('mode', 'normal');		$idbase = null;		switch($mode)		{			case 'dynamic':				$option = $input->get('option');				$view = $input->get('view');				if ($option === 'com_content')				{					switch($view)					{						case 'category':							$idbase = $input->getInt('id');							break;						case 'categories':							$idbase = $input->getInt('id');							break;						case 'article':							if ($params->get('show_on_article_page', 1))							{								$idbase = $input->getInt('catid');							}							break;					}				}				break;			case 'normal':			default:				$idbase = $params->get('catid');				break;		}$cacheid = md5(serialize(array ($idbase, $module->module)));$cacheparams = new stdClass;$cacheparams->cachemode = 'id';$cacheparams->class = 'ModArticlesCategoryHelper';$cacheparams->method = 'getList';$cacheparams->methodparams = $params;$cacheparams->modeparams = $cacheid;$list = JModuleHelper::moduleCache($module, $params, $cacheparams);if (!empty($list)){	$grouped = false;	$article_grouping = $params->get('article_grouping', 'none');	$article_grouping_direction = $params->get('article_grouping_direction', 'ksort');	$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));	$item_heading = $params->get('item_heading');	if ($article_grouping !== 'none')	{		$grouped = true;		switch($article_grouping)		{			case 'year':			case 'month_year':				$list = ModArticlesCategoryHelper::groupByDate($list, $article_grouping, $article_grouping_direction, $params->get('month_year_format', 'F Y'));				break;			case 'author':			case 'category_title':				$list = ModArticlesCategoryHelper::groupBy($list, $article_grouping, $article_grouping_direction);				break;			default:				break;		}	}	require JModuleHelper::getLayoutPath('mod_articles_category', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Encryption key object for the Joomla Platform. * * @property-read  string  $type  The key type. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptKey{	/**	 * @var    string  The private key.	 * @since  12.1	 */	public $private;	/**	 * @var    string  The public key.	 * @since  12.1	 */	public $public;	/**	 * @var    string  The key type.	 * @since  12.1	 */	protected $type;	/**	 * Constructor.	 *	 * @param   string  $type     The key type.	 * @param   string  $private  The private key.	 * @param   string  $public   The public key.	 *	 * @since   12.1	 */	public function __construct($type, $private = null, $public = null)	{		// Set the key type.		$this->type = (string) $type;		// Set the optional public/private key strings.		$this->private = isset($private) ? (string) $private : null;		$this->public  = isset($public) ? (string) $public : null;	}	/**	 * Magic method to return some protected property values.	 *	 * @param   string  $name  The name of the property to return.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function __get($name)	{		if ($name == 'type')		{			return $this->type;		}		else		{			trigger_error('Cannot access property ' . __CLASS__ . '::' . $name, E_USER_WARNING);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Cache storage helper functions. * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheStorageHelper{	/**	 * Cache data group	 *	 * @var    string	 * @since  11.1	 */	public $group = '';	/**	 * Cached item size	 *	 * @var    string	 * @since  11.1	 */	public $size = 0;	/**	 * Counter	 *	 * @var    integer	 * @since  11.1	 */	public $count = 0;	/**	 * Constructor	 *	 * @param   string  $group  The cache data group	 *	 * @since   11.1	 */	public function __construct($group)	{		$this->group = $group;	}	/**	 * Increase cache items count.	 *	 * @param   string  $size  Cached item size	 *	 * @return  void	 *	 * @since   11.1	 */	public function updateSize($size)	{		$this->size = number_format($this->size + $size, 2);		$this->count++;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	Joomla.submitbutton = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_package.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_PACKAGE', true); ?>");		}		else		{			form.installtype.value = 'upload';			form.submit();		}	}	Joomla.submitbutton3 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_directory.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_DIRECTORY', true); ?>");		}		else		{			form.installtype.value = 'folder';			form.submit();		}	}	Joomla.submitbutton4 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_url.value == "" || form.install_url.value == "http://"){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_ENTER_A_URL', true); ?>");		}		else		{			form.installtype.value = 'url';			form.submit();		}	}</script><form enctype="multipart/form-data" action="<?php echo JRoute::_('index.php?option=com_installer&view=install');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<div class="width-70 fltlft">		<fieldset class="uploadform">			<legend><?php echo JText::_('COM_INSTALLER_UPLOAD_PACKAGE_FILE'); ?></legend>			<label for="install_package"><?php echo JText::_('COM_INSTALLER_PACKAGE_FILE'); ?></label>			<input class="input_box" id="install_package" name="install_package" type="file" size="57" />			<input class="button" type="button" value="<?php echo JText::_('COM_INSTALLER_UPLOAD_AND_INSTALL'); ?>" onclick="Joomla.submitbutton()" />		</fieldset>		<div class="clr"></div>		<fieldset class="uploadform">			<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_DIRECTORY'); ?></legend>			<label for="install_directory"><?php echo JText::_('COM_INSTALLER_INSTALL_DIRECTORY'); ?></label>			<input type="text" id="install_directory" name="install_directory" class="input_box" size="70" value="<?php echo $this->state->get('install.directory'); ?>" />			<input type="button" class="button" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton3()" />		</fieldset>		<div class="clr"></div>		<fieldset class="uploadform">			<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_URL'); ?></legend>			<label for="install_url"><?php echo JText::_('COM_INSTALLER_INSTALL_URL'); ?></label>			<input type="text" id="install_url" name="install_url" class="input_box" size="70" value="http://" />			<input type="button" class="button" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton4()" />		</fieldset>		<input type="hidden" name="type" value="" />		<input type="hidden" name="installtype" value="upload" />		<input type="hidden" name="task" value="install.install" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform String Inflector Class * * The Inflector transforms words * * @package     Joomla.Platform * @subpackage  String * @since       12.1 */class JStringInflector{	/**	 * The singleton instance.	 *	 * @var    JStringInflector	 * @since  12.1	 */	private static $_instance;	/**	 * The inflector rules for singularisation, pluralisation and countability.	 *	 * @var    array	 * @since  12.1	 */	private $_rules = array(		'singular' => array(			'/(matr)ices$/i' => '\1ix',			'/(vert|ind)ices$/i' => '\1ex',			'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|viri?)i$/i' => '\1us',			'/([ftw]ax)es/i' => '\1',			'/(cris|ax|test)es$/i' => '\1is',			'/(shoe|slave)s$/i' => '\1',			'/(o)es$/i' => '\1',			'/([^aeiouy]|qu)ies$/i' => '\1y',			'/$1ses$/i' => '\s',			'/ses$/i' => '\s',			'/eaus$/' => 'eau',			'/^(.*us)$/' => '\\1',			'/s$/i' => '',		),		'plural' => array(			'/([m|l])ouse$/i' => '\1ice',			'/(matr|vert|ind)(ix|ex)$/i'  => '\1ices',			'/(x|ch|ss|sh)$/i' => '\1es',			'/([^aeiouy]|qu)y$/i' => '\1ies',			'/([^aeiouy]|qu)ies$/i' => '\1y',			'/(?:([^f])fe|([lr])f)$/i' => '\1\2ves',			'/sis$/i' => 'ses',			'/([ti])um$/i' => '\1a',			'/(buffal|tomat)o$/i' => '\1\2oes',			'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|vir)us$/i' => '\1i',			'/us$/i' => 'uses',			'/(ax|cris|test)is$/i' => '\1es',			'/s$/i' => 's',			'/$/' => 's',		),		'countable' => array(			'id',			'hits',			'clicks',		),	);	/**	 * Cached inflections.	 *	 * The array is in the form [singular => plural]	 *	 * @var    array	 * @since  12.1	 */	private $_cache = array();	/**	 * Protected constructor.	 *	 * @since  12.1	 */	protected function __construct()	{		// Pre=populate the irregual singular/plural.		$this			->addWord('deer')			->addWord('moose')			->addWord('sheep')			->addWord('bison')			->addWord('salmon')			->addWord('pike')			->addWord('trout')			->addWord('fish')			->addWord('swine')			->addWord('alias', 'aliases')			->addWord('bus', 'buses')			->addWord('foot', 'feet')			->addWord('goose', 'geese')			->addWord('hive', 'hives')			->addWord('louse', 'lice')			->addWord('man', 'men')			->addWord('mouse', 'mice')			->addWord('ox', 'oxen')			->addWord('quiz', 'quizes')			->addWord('status', 'statuses')			->addWord('tooth', 'teeth')			->addWord('woman', 'women');	}	/**	 * Adds inflection regex rules to the inflector.	 *	 * @param   mixed   $data      A string or an array of strings or regex rules to add.	 * @param   string  $ruleType  The rule type: singular | plural | countable	 *	 * @return  void	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	private function _addRule($data, $ruleType)	{		if (is_string($data))		{			$data = array($data);		}		elseif (!is_array($data))		{			// Do not translate.			throw new InvalidArgumentException('Invalid inflector rule data.');		}		foreach ($data as $rule)		{			// Ensure a string is pushed.			array_push($this->_rules[$ruleType], (string) $rule);		}	}	/**	 * Gets an inflected word from the cache where the singular form is supplied.	 *	 * @param   string  $singular  A singular form of a word.	 *	 * @return  mixed  The cached inflection or false if none found.	 *	 * @since   12.1	 */	private function _getCachedPlural($singular)	{		$singular = JString::strtolower($singular);		// Check if the word is in cache.		if (isset($this->_cache[$singular]))		{			return $this->_cache[$singular];		}		return false;	}	/**	 * Gets an inflected word from the cache where the plural form is supplied.	 *	 * @param   string  $plural  A plural form of a word.	 *	 * @return  mixed  The cached inflection or false if none found.	 *	 * @since   12.1	 */	private function _getCachedSingular($plural)	{		$plural = JString::strtolower($plural);		return array_search($plural, $this->_cache);	}	/**	 * Execute a regex from rules.	 *	 * The 'plural' rule type expects a singular word.	 * The 'singular' rule type expects a plural word.	 *	 * @param   string  $word      The string input.	 * @param   string  $ruleType  String (eg, singular|plural)	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since   12.1	 */	private function _matchRegexRule($word, $ruleType)	{		// Cycle through the regex rules.		foreach ($this->_rules[$ruleType] as $regex => $replacement)		{			$matches = 0;			$matchedWord = preg_replace($regex, $replacement, $word, -1, $matches);			if ($matches > 0)			{				return $matchedWord;			}		}		return false;	}	/**	 * Sets an inflected word in the cache.	 *	 * @param   string  $singular  The singular form of the word.	 * @param   string  $plural    The plural form of the word. If omitted, it is assumed the singular and plural are identical.	 *	 * @return  void	 *	 * @since   12.1	 */	private function _setCache($singular, $plural = null)	{		$singular = JString::strtolower($singular);		if ($plural === null)		{			$plural = $singular;		}		else		{			$plural = JString::strtolower($plural);		}		$this->_cache[$singular] = $plural;	}	/**	 * Adds a countable word.	 *	 * @param   mixed  $data  A string or an array of strings to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addCountableRule($data)	{		$this->_addRule($data, 'countable');		return $this;	}	/**	 * Adds a specific singular-plural pair for a word.	 *	 * @param   string  $singular  The singular form of the word.	 * @param   string  $plural    The plural form of the word. If omitted, it is assumed the singular and plural are identical.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addWord($singular, $plural =null)	{		$this->_setCache($singular, $plural);		return $this;	}	/**	 * Adds a pluralisation rule.	 *	 * @param   mixed  $data  A string or an array of regex rules to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addPluraliseRule($data)	{		$this->_addRule($data, 'plural');		return $this;	}	/**	 * Adds a singularisation rule.	 *	 * @param   mixed  $data  A string or an array of regex rules to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addSingulariseRule($data)	{		$this->_addRule($data, 'singular');		return $this;	}	/**	 * Gets an instance of the JStringInflector singleton.	 *	 * @param   boolean  $new  If true (default is false), returns a new instance regardless if one exists.	 *                         This argument is mainly used for testing.	 *	 * @return  JStringInflector	 *	 * @since   12.1	 */	public static function getInstance($new = false)	{		if ($new)		{			return new static;		}		elseif (!is_object(self::$_instance))		{			self::$_instance = new static;		}		return self::$_instance;	}	/**	 * Checks if a word is countable.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is countable, false otherwise.	 *	 * @since  12.1	 */	public function isCountable($word)	{		return (boolean) in_array($word, $this->_rules['countable']);	}	/**	 * Checks if a word is in a plural form.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is plural, false if not.	 *	 * @since  12.1	 */	public function isPlural($word)	{		// Try the cache for an known inflection.		$inflection = $this->_getCachedSingular($word);		if ($inflection !== false)		{			return true;		}		// Compute the inflection to cache the values, and compare.		return $this->toPlural($this->toSingular($word)) == $word;	}	/**	 * Checks if a word is in a singular form.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is singular, false if not.	 *	 * @since  12.1	 */	public function isSingular($word)	{		// Try the cache for an known inflection.		$inflection = $this->_getCachedPlural($word);		if ($inflection !== false)		{			return true;		}		// Compute the inflection to cache the values, and compare.		return $this->toSingular($this->toPlural($word)) == $word;	}	/**	 * Converts a word into its plural form.	 *	 * @param   string  $word  The singular word to pluralise.	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since  12.1	 */	public function toPlural($word)	{		// Try to get the cached plural form from the singular.		$cache = $this->_getCachedPlural($word);		if ($cache !== false)		{			return $cache;		}		// Check if the word is a known singular.		if ($this->_getCachedSingular($word))		{			return false;		}		// Compute the inflection.		$inflected = $this->_matchRegexRule($word, 'plural');		if ($inflected !== false)		{			$this->_setCache($word, $inflected);			return $inflected;		}		return false;	}	/**	 * Converts a word into its singular form.	 *	 * @param   string  $word  The plural word to singularise.	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since  12.1	 */	public function toSingular($word)	{		// Try to get the cached singular form from the plural.		$cache = $this->_getCachedSingular($word);		if ($cache !== false)		{			return $cache;		}		// Check if the word is a known plural.		if ($this->_getCachedPlural($word))		{			return false;		}		// Compute the inflection.		$inflected = $this->_matchRegexRule($word, 'singular');		if ($inflected !== false)		{			$this->_setCache($inflected, $word);			return $inflected;		}		return false;	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Static class to handle loading of libraries. * * @package  Joomla.Platform * @since    11.1 */abstract class JLoader{	/**	 * Container for already imported library paths.	 *	 * @var    array	 * @since  11.1	 */	protected static $classes = array();	/**	 * Container for already imported library paths.	 *	 * @var    array	 * @since  11.1	 */	protected static $imported = array();	/**	 * Container for registered library class prefixes and path lookups.	 *	 * @var    array	 * @since  12.1	 */	protected static $prefixes = array();	/**	 * Method to discover classes of a given type in a given path.	 *	 * @param   string   $classPrefix  The class name prefix to use for discovery.	 * @param   string   $parentPath   Full path to the parent folder for the classes to discover.	 * @param   boolean  $force        True to overwrite the autoload path value for the class if it already exists.	 * @param   boolean  $recurse      Recurse through all child directories as well as the parent path.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function discover($classPrefix, $parentPath, $force = true, $recurse = false)	{		try		{			if ($recurse)			{				$iterator = new RecursiveIteratorIterator(					new RecursiveDirectoryIterator($parentPath),					RecursiveIteratorIterator::SELF_FIRST				);			}			else			{				$iterator = new DirectoryIterator($parentPath);			}			foreach ($iterator as $file)			{				$fileName = $file->getFilename();				// Only load for php files.				// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6				if ($file->isFile() && substr($fileName, strrpos($fileName, '.') + 1) == 'php')				{					// Get the class name and full path for each file.					$class = strtolower($classPrefix . preg_replace('#\.php$#', '', $fileName));					// Register the class with the autoloader if not already registered or the force flag is set.					if (empty(self::$classes[$class]) || $force)					{						self::register($class, $file->getPath() . '/' . $fileName);					}				}			}		}		catch (UnexpectedValueException $e)		{			// Exception will be thrown if the path is not a directory. Ignore it.		}	}	/**	 * Method to get the list of registered classes and their respective file paths for the autoloader.	 *	 * @return  array  The array of class => path values for the autoloader.	 *	 * @since   11.1	 */	public static function getClassList()	{		return self::$classes;	}	/**	 * Loads a class from specified directories.	 *	 * @param   string  $key   The class name to look for (dot notation).	 * @param   string  $base  Search this directory for the class.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public static function import($key, $base = null)	{		// Only import the library if not already attempted.		if (!isset(self::$imported[$key]))		{			// Setup some variables.			$success = false;			$parts = explode('.', $key);			$class = array_pop($parts);			$base = (!empty($base)) ? $base : __DIR__;			$path = str_replace('.', DIRECTORY_SEPARATOR, $key);			// Handle special case for helper classes.			if ($class == 'helper')			{				$class = ucfirst(array_pop($parts)) . ucfirst($class);			}			// Standard class.			else			{				$class = ucfirst($class);			}			// If we are importing a library from the Joomla namespace set the class to autoload.			if (strpos($path, 'joomla') === 0)			{				// Since we are in the Joomla namespace prepend the classname with J.				$class = 'J' . $class;				// Only register the class for autoloading if the file exists.				if (is_file($base . '/' . $path . '.php'))				{					self::$classes[strtolower($class)] = $base . '/' . $path . '.php';					$success = true;				}			}			/*			 * If we are not importing a library from the Joomla namespace directly include the			* file since we cannot assert the file/folder naming conventions.			*/			else			{				// If the file exists attempt to include it.				if (is_file($base . '/' . $path . '.php'))				{					$success = (bool) include_once $base . '/' . $path . '.php';				}			}			// Add the import key to the memory cache container.			self::$imported[$key] = $success;		}		return self::$imported[$key];	}	/**	 * Load the file for a class.	 *	 * @param   string  $class  The class to be loaded.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function load($class)	{		// Sanitize class name.		$class = strtolower($class);		// If the class already exists do nothing.		if (class_exists($class))		{			return true;		}		// If the class is registered include the file.		if (isset(self::$classes[$class]))		{			include_once self::$classes[$class];			return true;		}		return false;	}	/**	 * Directly register a class to the autoload list.	 *	 * @param   string   $class  The class name to register.	 * @param   string   $path   Full path to the file that holds the class to register.	 * @param   boolean  $force  True to overwrite the autoload path value for the class if it already exists.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function register($class, $path, $force = true)	{		// Sanitize class name.		$class = strtolower($class);		// Only attempt to register the class if the name and file exist.		if (!empty($class) && is_file($path))		{			// Register the class with the autoloader if not already registered or the force flag is set.			if (empty(self::$classes[$class]) || $force)			{				self::$classes[$class] = $path;			}		}	}	/**	 * Register a class prefix with lookup path.  This will allow developers to register library	 * packages with different class prefixes to the system autoloader.  More than one lookup path	 * may be registered for the same class prefix, but if this method is called with the reset flag	 * set to true then any registered lookups for the given prefix will be overwritten with the current	 * lookup path.	 *	 * @param   string   $prefix  The class prefix to register.	 * @param   string   $path    Absolute file path to the library root where classes with the given prefix can be found.	 * @param   boolean  $reset   True to reset the prefix with only the given lookup path.	 *	 * @return  void	 *	 * @since   12.1	 */	public static function registerPrefix($prefix, $path, $reset = false)	{		// Verify the library path exists.		if (!file_exists($path))		{			throw new RuntimeException('Library path ' . $path . ' cannot be found.', 500);		}		// If the prefix is not yet registered or we have an explicit reset flag then set set the path.		if (!isset(self::$prefixes[$prefix]) || $reset)		{			self::$prefixes[$prefix] = array($path);		}		// Otherwise we want to simply add the path to the prefix.		else		{			self::$prefixes[$prefix][] = $path;		}	}	/**	 * Method to setup the autoloaders for the Joomla Platform.  Since the SPL autoloaders are	 * called in a queue we will add our explicit, class-registration based loader first, then	 * fall back on the autoloader based on conventions.  This will allow people to register a	 * class in a specific location and override platform libraries as was previously possible.	 *	 * @return  void	 *	 * @since   11.3	 */	public static function setup()	{		// Register the base path for Joomla platform libraries.		self::registerPrefix('J', JPATH_PLATFORM . '/joomla');		// Register the autoloader functions.		spl_autoload_register(array('JLoader', 'load'));		spl_autoload_register(array('JLoader', '_autoload'));	}	/**	 * Autoload a class based on name.	 *	 * @param   string  $class  The class to be loaded.	 *	 * @return  void	 *	 * @since   11.3	 */	private static function _autoload($class)	{		foreach (self::$prefixes as $prefix => $lookup)		{			$chr = strlen($prefix) < strlen($class) ? $class[strlen($prefix)] : 0;			if (strpos($class, $prefix) === 0 && ($chr === strtoupper($chr)))			{				return self::_load(substr($class, strlen($prefix)), $lookup);			}		}	}	/**	 * Load a class based on name and lookup array.	 *	 * @param   string  $class   The class to be loaded (wihtout prefix).	 * @param   array   $lookup  The array of base paths to use for finding the class file.	 *	 * @return  void	 *	 * @since   12.1	 */	private static function _load($class, $lookup)	{		// Split the class name into parts separated by camelCase.		$parts = preg_split('/(?<=[a-z0-9])(?=[A-Z])/x', $class);		// If there is only one part we want to duplicate that part for generating the path.		$parts = (count($parts) === 1) ? array($parts[0], $parts[0]) : $parts;		foreach ($lookup as $base)		{			// Generate the path based on the class name parts.			$path = $base . '/' . implode('/', array_map('strtolower', $parts)) . '.php';			// Load the file if it exists.			if (file_exists($path))			{				return include $path;			}		}	}}/** * Global application exit. * * This function provides a single exit point for the platform. * * @param   mixed  $message  Exit code or string. Defaults to zero. * * @return  void * * @codeCoverageIgnore * @since   11.1 */function jexit($message = 0){	exit($message);}/** * Intelligent file importer. * * @param   string  $path  A dot syntax path. * * @return  boolean  True on success. * * @since   11.1 */function jimport($path){	return JLoader::import($path);}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Milestones class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.3 */class JGithubMilestones extends JGithubObject{	/**	 * Method to get the list of milestones for a repo.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $state      The milestone state to retrieved.  Open (default) or closed.	 * @param   string   $sort       Sort can be due_date (default) or completeness.	 * @param   string   $direction  Direction is asc or desc (default).	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   12.3	 */	public function getList($user, $repo, $state = 'open', $sort = 'due_date', $direction = 'desc', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones?';		$path .= 'state=' . $state;		$path .= '&sort=' . $sort;		$path .= '&direction=' . $direction;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The milestone id to get.	 *	 * @return  object	 *	 * @since   12.3	 */	public function get($user, $repo, $milestoneId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a milestone for a repository.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $title        The title of the milestone.	 * @param   string   $state        Can be open (default) or closed.	 * @param   string   $description  Optional description for milestone.	 * @param   string   $due_on       Optional ISO 8601 time.	 *	 * @return  object	 *	 * @since   12.3	 */	public function create($user, $repo, $title, $state = null, $description = null, $due_on = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones';		// Build the request data.		$data = array(			'title' => $title		);		if (!is_null($state))		{			$data['state'] = $state;		}		if (!is_null($description))		{			$data['description'] = $description;		}		if (!is_null($due_on))		{			$data['due_on'] = $due_on;		}		$data = json_encode($data);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The id of the comment to update.	 * @param   integer  $title        Optional title of the milestone.	 * @param   string   $state        Can be open (default) or closed.	 * @param   string   $description  Optional description for milestone.	 * @param   string   $due_on       Optional ISO 8601 time.	 *	 * @return  object	 *	 * @since   12.3	 */	public function edit($user, $repo, $milestoneId, $title = null, $state = null, $description = null, $due_on = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Build the request data.		$data = array();		if (!is_null($title))		{			$data['title'] = $title;		}		if (!is_null($state))		{			$data['state'] = $state;		}		if (!is_null($description))		{			$data['description'] = $description;		}		if (!is_null($due_on))		{			$data['due_on'] = $due_on;		}		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The id of the milestone to delete.	 *	 * @return  void	 *	 * @since   12.3	 */	public function delete($user, $repo, $milestoneId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><fieldset>	<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQueryMysqli extends JDatabaseQuery implements JDatabaseQueryLimitable{	/**	 * @var    interger  The offset for the result set.	 * @since  12.1	 */	protected $offset;	/**	 * @var    integer  The limit for the result set.	 * @since  12.1	 */	protected $limit;	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return string	 *	 * @since 12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		if ($limit > 0 || $offset > 0)		{			$query .= ' LIMIT ' . $offset . ', ' . $limit;		}		return $query;	}	/**	 * Concatenates an array of column names or values.	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.1	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			$concat_string = 'CONCAT_WS(' . $this->quote($separator);			foreach ($values as $value)			{				$concat_string .= ', ' . $value;			}			return $concat_string . ')';		}		else		{			return 'CONCAT(' . implode(',', $values) . ')';		}	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit  = (int) $limit;		$this->offset = (int) $offset;		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$selector = empty($displayData['selector']) ? '' : $displayData['selector'];echo "(function($){					$('#$selector a').click(function (e)					{						e.preventDefault();						$(this).tab('show');					});				})(jQuery);";
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Joomla Core Install Remove View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewRemoveHtml extends JViewHtml{}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Tar format adapter for the JArchive class * * This class is inspired from and draws heavily in code and concept from the Compress package of * The Horde Project <http://www.horde.org> * * @contributor  Michael Slusarz <slusarz@horde.org> * @contributor  Michael Cochrane <mike@graftonhall.co.nz> * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveTar implements JArchiveExtractable{	/**	 * Tar file types.	 *	 * @var    array	 * @since  11.1	 */	private $_types = array(		0x0 => 'Unix file',		0x30 => 'File',		0x31 => 'Link',		0x32 => 'Symbolic link',		0x33 => 'Character special file',		0x34 => 'Block special file',		0x35 => 'Directory',		0x36 => 'FIFO special file',		0x37 => 'Contiguous file');	/**	 * Tar file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * Tar file metadata array	 *	 * @var    array	 * @since  11.1	 */	private $_metadata = null;	/**	 * Extract a ZIP compressed file to a given path	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive into	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean True if successful	 *	 * @throws  RuntimeException	 * @since   11.1	 */	public function extract($archive, $destination, array $options = array())	{		$this->_data = null;		$this->_metadata = null;		$this->_data = file_get_contents($archive);		if (!$this->_data)		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to read archive');			}			else			{				throw new RuntimeException('Unable to read archive');			}		}		$this->_getTarInfo($this->_data);		for ($i = 0, $n = count($this->_metadata); $i < $n; $i++)		{			$type = strtolower($this->_metadata[$i]['type']);			if ($type == 'file' || $type == 'unix file')			{				$buffer = $this->_metadata[$i]['data'];				$path = JPath::clean($destination . '/' . $this->_metadata[$i]['name']);				// Make sure the destination folder exists				if (!JFolder::create(dirname($path)))				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to create destination');					}					else					{						throw new RuntimeException('Unable to create destination');					}				}				if (JFile::write($path, $buffer) === false)				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to write entry');					}					else					{						throw new RuntimeException('Unable to write entry');					}				}			}		}		return true;	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return true;	}	/**	 * Get the list of files/data from a Tar archive buffer.	 *	 * @param   string  &$data  The Tar archive buffer.	 *	 * @return   array  Archive metadata array	 * <pre>	 * KEY: Position in the array	 * VALUES: 'attr'  --  File attributes	 * 'data'  --  Raw file contents	 * 'date'  --  File modification time	 * 'name'  --  Filename	 * 'size'  --  Original file size	 * 'type'  --  File type	 * </pre>	 *	 * @since    11.1	 */	protected function _getTarInfo(& $data)	{		$position = 0;		$return_array = array();		while ($position < strlen($data))		{			$info = @unpack(				"a100filename/a8mode/a8uid/a8gid/a12size/a12mtime/a8checksum/Ctypeflag/a100link/a6magic/a2version/a32uname/a32gname/a8devmajor/a8devminor",				substr($data, $position)			);			if (!$info)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to decompress data');				}				else				{					throw new RuntimeException('Unable to decompress data');				}			}			$position += 512;			$contents = substr($data, $position, octdec($info['size']));			$position += ceil(octdec($info['size']) / 512) * 512;			if ($info['filename'])			{				$file = array(					'attr' => null,					'data' => null,					'date' => octdec($info['mtime']),					'name' => trim($info['filename']),					'size' => octdec($info['size']),					'type' => isset($this->_types[$info['typeflag']]) ? $this->_types[$info['typeflag']] : null);				if (($info['typeflag'] == 0) || ($info['typeflag'] == 0x30) || ($info['typeflag'] == 0x35))				{					/* File or folder. */					$file['data'] = $contents;					$mode = hexdec(substr($info['mode'], 4, 3));					$file['attr'] = (($info['typeflag'] == 0x35) ? 'd' : '-') . (($mode & 0x400) ? 'r' : '-') . (($mode & 0x200) ? 'w' : '-') .						(($mode & 0x100) ? 'x' : '-') . (($mode & 0x040) ? 'r' : '-') . (($mode & 0x020) ? 'w' : '-') . (($mode & 0x010) ? 'x' : '-') .						(($mode & 0x004) ? 'r' : '-') . (($mode & 0x002) ? 'w' : '-') . (($mode & 0x001) ? 'x' : '-');				}				else				{					/* Some other type. */				}				$return_array[] = $file;			}		}		$this->_metadata = $return_array;		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Base controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document	= JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->getCmd('view', 'login');		$vFormat = $document->getType();		$lName   = $this->input->getCmd('layout', 'default');		if ($view = $this->getView($vName, $vFormat))		{			// Do any specific processing by view.			switch ($vName)			{				case 'registration':					// If the user is already logged in, redirect to the profile page.					$user = JFactory::getUser();					if ($user->get('guest') != 1)					{						// Redirect to profile page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile', false));						return;					}					// Check if user registration is enabled					if (JComponentHelper::getParams('com_users')->get('allowUserRegistration') == 0)					{						// Registration is disabled - Redirect to login page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));						return;					}					// The user is a guest, load the registration model and show the registration page.					$model = $this->getModel('Registration');					break;				// Handle view specific models.				case 'profile':					// If the user is a guest, redirect to the login page.					$user = JFactory::getUser();					if ($user->get('guest') == 1)					{						// Redirect to login page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));						return;					}					$model = $this->getModel($vName);					break;				// Handle the default views.				case 'login':					$model = $this->getModel($vName);					break;				case 'reset':					// If the user is already logged in, redirect to the profile page.					$user = JFactory::getUser();					if ($user->get('guest') != 1)					{						// Redirect to profile page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile', false));						return;					}					$model = $this->getModel($vName);					break;				case 'remind':					// If the user is already logged in, redirect to the profile page.					$user = JFactory::getUser();					if ($user->get('guest') != 1)					{						// Redirect to profile page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile', false));						return;					}					$model = $this->getModel($vName);					break;				default:					$model = $this->getModel('Login');					break;			}			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			$view->display();		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google API data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleData{	/**	 * @var    JRegistry  Options for the Google data object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JGoogleAuth  Authentication client for the Google data object.	 * @since  12.3	 */	protected $auth;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object.	 * @param   JGoogleAuth  $auth     Google data http client object.	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->auth = isset($auth) ? $auth : new JGoogleAuthOauth2($this->options);	}	/**	 * Method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	public function authenticate()	{		return $this->auth->authenticate();	}	/**	 * Check authentication	 *	 * @return  boolean  True if authenticated.	 *	 * @since   12.3	 */	public function isAuthenticated()	{		return $this->auth->isAuthenticated();	}	/**	 * Method to validate XML	 *	 * @param   string  $data  XML data to be parsed	 *	 * @return  SimpleXMLElement  XMLElement of parsed data	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected static function safeXML($data)	{		try		{			return new SimpleXMLElement($data, LIBXML_NOWARNING | LIBXML_NOERROR);		}		catch (Exception $e)		{			throw new UnexpectedValueException("Unexpected data received from Google: `$data`.");		}	}	/**	 * Method to retrieve a list of data	 *	 * @param   array   $url       URL to GET	 * @param   int     $maxpages  Maximum number of pages to return	 * @param   string  $token     Next page token	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected function listGetData($url, $maxpages = 1, $token = null)	{		$qurl = $url;		if (strpos($url, '&') && isset($token))		{			$qurl .= '&pageToken=' . $token;		}		elseif (isset($token))		{			$qurl .= 'pageToken=' . $token;		}		$jdata = $this->query($qurl);		$data = json_decode($jdata->body, true);		if ($data && array_key_exists('items', $data))		{			if ($maxpages != 1 && array_key_exists('nextPageToken', $data))			{				$data['items'] = array_merge($data['items'], $this->listGetData($url, $maxpages - 1, $data['nextPageToken']));			}			return $data['items'];		}		elseif ($data)		{			return array();		}		else		{			throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");		}	}	/**	 * Method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	protected function query($url, $data = null, $headers = null, $method = 'get')	{		return $this->auth->query($url, $data, $headers, $method);	}	/**	 * Get an option from the JGoogleData instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleData instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleData  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Importer Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */abstract class JDatabaseImporter{}
<?php/*** @version $Id$* Tools for validing a UTF-8 string is well formed.* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage validation*///--------------------------------------------------------------------/*** Tests a string as to whether it's valid UTF-8 and supported by the* Unicode standard* Note: this function has been modified to simple return true or false* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return boolean true if valid* @see http://hsivonen.iki.fi/php-utf8/* @see utf8_compliant* @package utf8* @subpackage validation*/function utf8_is_valid($str) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                * Rather than trying to resynchronize, we will carry on until the end                * of the sequence and let the later error handling code catch it.                */                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x03) << 24;                $mState = 4;                $mBytes = 5;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 1) << 30;                $mState = 5;                $mBytes = 6;            } else {                /* Current octet is neither in the US-ASCII range nor a legal first                 * octet of a multi-octet sequence.                 */                return FALSE;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    /*                    * Check for illegal sequences and codepoints.                    */                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ||                        (4 < $mBytes) ||                        // From Unicode 3.2, surrogate characters are illegal                        (($mUcs4 & 0xFFFFF800) == 0xD800) ||                        // Codepoints outside the Unicode range are illegal                        ($mUcs4 > 0x10FFFF)) {                        return FALSE;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                /**                *((0xC0 & (*in) != 0x80) && (mState != 0))                * Incomplete multi-octet sequence.                */                return FALSE;            }        }    }    return TRUE;}//--------------------------------------------------------------------/*** Tests whether a string complies as UTF-8. This will be much* faster than utf8_is_valid but will pass five and six octet* UTF-8 sequences, which are not supported by Unicode and* so cannot be displayed correctly in a browser. In other words* it is not as strict as utf8_is_valid but it's faster. If you use* is to validate user input, you place yourself at the risk that* attackers will be able to inject 5 and 6 byte sequences (which* may or may not be a significant risk, depending on what you are* are doing)* @see utf8_is_valid* @see http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#54805* @param string UTF-8 string to check* @return boolean TRUE if string is valid UTF-8* @package utf8* @subpackage validation*/function utf8_compliant($str) {    if ( strlen($str) == 0 ) {        return TRUE;    }    // If even just the first character can be matched, when the /u    // modifier is used, then it's valid UTF-8. If the UTF-8 is somehow    // invalid, nothing at all will match, even if the string contains    // some valid sequences    return (preg_match('/^.{1}/us',$str,$ar) == 1);}
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Setup model for the Joomla Core Installer. * * @package     Joomla.Installation * @subpackage  Model * @since       3.1 */class InstallationModelSetup extends JModelBase{	/**	 * Get the current setup options from the session.	 *	 * @return  array  An array of options from the session	 *	 * @since   3.1	 */	public function getOptions()	{		$session = JFactory::getSession();		$options = $session->get('setup.options', array());		return $options;	}	/**	 * Store the current setup options in the session.	 *	 * @param   array  $options  The installation options	 *	 * @return  array  An array of options from the session	 *	 * @since   3.1	 */	public function storeOptions($options)	{		// Get the current setup options from the session.		$session = JFactory::getSession();		$old = $session->get('setup.options', array());		// Ensure that we have language		if (!isset($options['language']) || empty($options['language']))		{			$options['language'] = JFactory::getLanguage()->getTag();		}		// Merge the new setup options into the current ones and store in the session.		$options = array_merge($old, (array) $options);		$session->set('setup.options', $options);		return $options;	}	/**	 * Method to get the form.	 *	 * @param   string  $view  The view being processed	 *	 * @return  mixed  JForm object on success, false on failure.	 *	 * @since   3.1	 */	public function getForm($view = null)	{		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		if (!$view)		{			$view = $app->input->getWord('view', 'site');		}		// Get the form.		JForm::addFormPath(JPATH_COMPONENT . '/model/forms');		JForm::addFieldPath(JPATH_COMPONENT . '/model/fields');		JForm::addRulePath(JPATH_COMPONENT . '/model/rules');		try		{			$form = JForm::getInstance('jform', $view, array('control' => 'jform'));		}		catch (Exception $e)		{			$app->enqueueMessage($e->getMessage(), 'error');			return false;		}		// Check the session for previously entered form data.		$data = (array) $this->getOptions();		// Bind the form data if present.		if (!empty($data))		{			$form->bind($data);		}		return $form;	}	/**	 * Method to check the form data	 *	 * @param   string  $page  The view being checked	 *	 * @return  array  Validated form data	 *	 * @since   3.1	 */	public function checkForm($page = 'site')	{		// Get the application object.		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the posted values from the request and validate them.		$data   = $app->input->post->get('jform', array(), 'array');		$return	= $this->validate($data, $page);		// Attempt to save the data before validation		$form = $this->getForm();		$data = $form->filter($data);		unset($data['admin_password2']);		$this->storeOptions($data);		// Check for validation errors.		if ($return === false)		{			// Redirect back to the previous page.			$r = new stdClass;			$r->view = $page;			$app->sendJsonResponse($r);		}		unset($return['admin_password2']);		// Store the options in the session.		$vars = $this->storeOptions($return);		return $vars;	}	/**	 * Generate a panel of language choices for the user to select their language	 *	 * @return  boolean True if successful	 *	 * @since	3.1	 */	public function getLanguages()	{		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Detect the native language.		$native = JLanguageHelper::detectLanguage();		if (empty($native))		{			$native = 'en-GB';		}		// Get a forced language if it exists.		$forced = $app->getLocalise();		if (!empty($forced['language']))		{			$native = $forced['language'];		}		// Get the list of available languages.		$list = JLanguageHelper::createLanguageList($native);		if (!$list || $list instanceof Exception)		{			$list = array();		}		return $list;	}	/**	 * Checks the availability of the parse_ini_file and parse_ini_string functions.	 *	 * @return	boolean  True if the method exists	 *	 * @since	3.1	 */	public function getIniParserAvailability()	{		$disabled_functions = ini_get('disable_functions');		if (!empty($disabled_functions))		{			// Attempt to detect them in the disable_functions black list			$disabled_functions = explode(',', trim($disabled_functions));			$number_of_disabled_functions = count($disabled_functions);			for ($i = 0; $i < $number_of_disabled_functions; $i++)			{				$disabled_functions[$i] = trim($disabled_functions[$i]);			}			$result = !in_array('parse_ini_string', $disabled_functions);		}		else		{			// Attempt to detect their existence; even pure PHP implementation of them will trigger a positive response, though.			$result = function_exists('parse_ini_string');		}		return $result;	}	/**	 * Gets PHP options.	 *	 * @return	array  Array of PHP config options	 *	 * @since   3.1	 */	public function getPhpOptions()	{		$options = array();		// Check the PHP Version.		$option = new stdClass;		$option->label  = JText::_('INSTL_PHP_VERSION') . ' >= 5.3.1';		$option->state  = version_compare(PHP_VERSION, '5.3.1', '>=');		$option->notice = null;		$options[] = $option;		// Check for magic quotes gpc.		$option = new stdClass;		$option->label  = JText::_('INSTL_MAGIC_QUOTES_GPC');		$option->state  = (ini_get('magic_quotes_gpc') == false);		$option->notice = null;		$options[] = $option;		// Check for register globals.		$option = new stdClass;		$option->label  = JText::_('INSTL_REGISTER_GLOBALS');		$option->state  = (ini_get('register_globals') == false);		$option->notice = null;		$options[] = $option;		// Check for zlib support.		$option = new stdClass;		$option->label  = JText::_('INSTL_ZLIB_COMPRESSION_SUPPORT');		$option->state  = extension_loaded('zlib');		$option->notice = null;		$options[] = $option;		// Check for XML support.		$option = new stdClass;		$option->label  = JText::_('INSTL_XML_SUPPORT');		$option->state  = extension_loaded('xml');		$option->notice = null;		$options[] = $option;		// Check for database support.		// We are satisfied if there is at least one database driver available.		$available = JDatabaseDriver::getConnectors();		$option = new stdClass;		$option->label  = JText::_('INSTL_DATABASE_SUPPORT');		$option->label .= '<br />(' . implode(', ', $available) . ')';		$option->state  = count($available);		$option->notice = null;		$options[] = $option;		// Check for mbstring options.		if (extension_loaded('mbstring'))		{			// Check for default MB language.			$option = new stdClass;			$option->label  = JText::_('INSTL_MB_LANGUAGE_IS_DEFAULT');			$option->state  = (strtolower(ini_get('mbstring.language')) == 'neutral');			$option->notice = ($option->state) ? null : JText::_('INSTL_NOTICEMBLANGNOTDEFAULT');			$options[] = $option;			// Check for MB function overload.			$option = new stdClass;			$option->label  = JText::_('INSTL_MB_STRING_OVERLOAD_OFF');			$option->state  = (ini_get('mbstring.func_overload') == 0);			$option->notice = ($option->state) ? null : JText::_('INSTL_NOTICEMBSTRINGOVERLOAD');			$options[] = $option;		}		// Check for a missing native parse_ini_file implementation		$option = new stdClass;		$option->label  = JText::_('INSTL_PARSE_INI_FILE_AVAILABLE');		$option->state  = $this->getIniParserAvailability();		$option->notice = null;		$options[] = $option;		// Check for missing native json_encode / json_decode support		$option = new stdClass;		$option->label  = JText::_('INSTL_JSON_SUPPORT_AVAILABLE');		$option->state  = function_exists('json_encode') && function_exists('json_decode');		$option->notice = null;		$options[] = $option;		// Check for configuration file writeable.		$option = new stdClass;		$option->label  = JText::sprintf('INSTL_WRITABLE', 'configuration.php');		$option->state  = (is_writable(JPATH_CONFIGURATION . '/configuration.php') || (!file_exists(JPATH_CONFIGURATION . '/configuration.php') && is_writable(JPATH_ROOT)));		$option->notice = ($option->state) ? null : JText::_('INSTL_NOTICEYOUCANSTILLINSTALL');		$options[] = $option;		return $options;	}	/**	 * Checks if all of the mandatory PHP options are met	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function getPhpOptionsSufficient()	{		$result  = true;		$options = $this->getPhpOptions();		foreach ($options as $option)		{			if (is_null($option->notice))			{				$result = ($result && $option->state);			}		}		return $result;	}	/**	 * Gets PHP Settings.	 *	 * @return  array	 *	 * @since   3.1	 */	public function getPhpSettings()	{		$settings = array();		// Check for safe mode.		$setting = new stdClass;		$setting->label = JText::_('INSTL_SAFE_MODE');		$setting->state = (bool) ini_get('safe_mode');		$setting->recommended = false;		$settings[] = $setting;		// Check for display errors.		$setting = new stdClass;		$setting->label = JText::_('INSTL_DISPLAY_ERRORS');		$setting->state = (bool) ini_get('display_errors');		$setting->recommended = false;		$settings[] = $setting;		// Check for file uploads.		$setting = new stdClass;		$setting->label = JText::_('INSTL_FILE_UPLOADS');		$setting->state = (bool) ini_get('file_uploads');		$setting->recommended = true;		$settings[] = $setting;		// Check for magic quotes runtimes.		$setting = new stdClass;		$setting->label = JText::_('INSTL_MAGIC_QUOTES_RUNTIME');		$setting->state = (bool) ini_get('magic_quotes_runtime');		$setting->recommended = false;		$settings[] = $setting;		// Check for output buffering.		$setting = new stdClass;		$setting->label = JText::_('INSTL_OUTPUT_BUFFERING');		$setting->state = (bool) ini_get('output_buffering');		$setting->recommended = false;		$settings[] = $setting;		// Check for session auto-start.		$setting = new stdClass;		$setting->label = JText::_('INSTL_SESSION_AUTO_START');		$setting->state = (bool) ini_get('session.auto_start');		$setting->recommended = false;		$settings[] = $setting;		// Check for native ZIP support		$setting = new stdClass;		$setting->label = JText::_('INSTL_ZIP_SUPPORT_AVAILABLE');		$setting->state = function_exists('zip_open') && function_exists('zip_read');		$setting->recommended = true;		$settings[] = $setting;		return $settings;	}	/**	 * Method to validate the form data.	 *	 * @param   array   $data  The form data.	 * @param   string  $view  The view.	 *	 * @return  mixed   Array of filtered data if valid, false otherwise.	 *	 * @since	3.1	 */	public function validate($data, $view = null)	{		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the form.		$form = $this->getForm($view);		// Check for an error.		if ($form === false)		{			return false;		}		// Filter and validate the form data.		$data   = $form->filter($data);		$return = $form->validate($data);		// Check for an error.		if ($return instanceof Exception)		{			$app->enqueueMessage($return->getMessage(), 'warning');			return false;		}		// Check the validation results.		if ($return === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $message)			{				if ($message instanceof Exception)				{					$app->enqueueMessage($message->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($message, 'warning');				}			}			return false;		}		return $data;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="categories-module<?php echo $moduleclass_sfx; ?>"><?phprequire JModuleHelper::getLayoutPath('mod_articles_categories', $params->get('layout', 'default').'_items');?></ul>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('NewsfeedsHelper', JPATH_ADMINISTRATOR . '/components/com_newsfeeds/helpers/newsfeeds.php');JLoader::register('CategoryHelperAssociation', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/association.php');/** * Newsfeeds Component Association Helper * * @package     Joomla.Site * @subpackage  com_contact * @since       3.0 */abstract class NewsfeedsHelperAssociation extends CategoryHelperAssociation{	/**	 * Method to get the associations for a given item	 *	 * @param   integer  $id    Id of the item	 * @param   string   $view  Name of the view	 *	 * @return  array   Array of associations for the item	 *	 * @since  3.0	 */	public static function getAssociations($id = 0, $view = null)	{		jimport('helper.route', JPATH_COMPONENT_SITE);		$app = JFactory::getApplication();		$jinput = $app->input;		$view = is_null($view) ? $jinput->get('view') : $view;		$id = empty($id) ? $jinput->getInt('id') : $id;		if ($view == 'newsfeed')		{			if ($id)			{				$associations = JLanguageAssociations::getAssociations('com_newsfeeds', '#__newsfeeds', 'com_newsfeeds.item', $id);				$return = array();				foreach ($associations as $tag => $item)				{					$return[$tag] = NewsfeedsHelperRoute::getNewsfeedRoute($item->id, $item->catid, $item->language);				}				return $return;			}		}		if ($view == 'category' || $view == 'categories')		{			return self::getCategoryAssociations($id, 'com_newsfeeds');		}		return array();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Database Query Limitable Interface. * Adds bind/unbind methods as well as a getBounded() method * to retrieve the stored bounded variables on demand prior to * query execution. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */interface JDatabaseQueryLimitable{	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0);	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'categoryOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('bootstrap.addSlide', 'categoryOptions', JText::_($label), 'collapse' . $i++);			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>				<?php if ($name == 'basic'):?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('note'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('note'); ?>						</div>					</div>				<?php endif;		echo JHtml::_('bootstrap.endSlide');	endforeach;echo JHtml::_('bootstrap.endAccordion');
<?php/** * @package     Joomla.Legacy * @subpackage  Simplecrypt * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JSimpleCrypt is a very simple encryption algorithm for encrypting/decrypting strings * * @package     Joomla.Legacy * @subpackage  Simplecrypt * @since       11.1 * @deprecated  12.3  Use JCrypt instead. */class JSimplecrypt{	/**	 * Encryption/Decryption Key	 *	 * @var         JCrypt	 * @since       12.1	 * @deprecated  12.3  Use JCrypt instead.	 */	private $_crypt;	/**	 * Object Constructor takes an optional key to be used for encryption/decryption. If no key is given then the	 * secret word from the configuration object is used.	 *	 * @param   string  $privateKey  Optional encryption key	 *	 * @since       11.1	 * @deprecated  12.3  Use JCrypt instead.	 */	public function __construct($privateKey = null)	{		JLog::add('JSimpleCrypt is deprecated. Use JCrypt instead.', JLog::WARNING, 'deprecated');		if (empty($privateKey))		{			$privateKey = md5(JFactory::getConfig()->get('secret'));		}		// Build the JCryptKey object.		$key = new JCryptKey('simple', $privateKey, $privateKey);		// Setup the JCrypt object.		$this->_crypt = new JCrypt(new JCryptCipherSimple, $key);	}	/**	 * Decrypt a string	 *	 * @param   string  $s  String to decrypt	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated  12.3  Use JCrypt instead.	 */	public function decrypt($s)	{		return $this->_crypt->decrypt($s);	}	/**	 * Encrypt a string	 *	 * @param   string  $s  String to encrypt	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated  12.3  Use JCrypt instead.	 */	public function encrypt($s)	{		return $this->_crypt->encrypt($s);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');$controller	= JControllerLegacy::getInstance('Newsfeeds');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * Squiz_Sniffs_WhiteSpace_SemicolonSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: SemicolonSpacingSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Ensure there is no whitespace before a semicolon <b>;</b>. * * Example: * <b class="bad">echo $a ;</b> * <b class="good">echo $a;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SemicolonSpacingSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_SEMICOLON);    }//function    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param integer                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $prevType = $tokens[($stackPtr - 1)]['code'];        if(in_array($prevType, PHP_CodeSniffer_Tokens::$emptyTokens) === true)        {            $nonSpace = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$emptyTokens, ($stackPtr - 2), null, true);            $expected = $tokens[$nonSpace]['content'].';';            $found    = $phpcsFile->getTokensAsString($nonSpace, ($stackPtr - $nonSpace)).';';            $error    = sprintf('Space found before semicolon; expected "%s" but found "%s"'            , $expected, $found);            $phpcsFile->addError($error, $stackPtr, 'Incorrect');        }    }//function}//class
<?php/** * @package     Joomla.Site * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$rssurl	= $params->get('rssurl', '');$rssrtl	= $params->get('rssrtl', 0);//check if feed URL has been setif (empty ($rssurl)){	echo '<div>';	echo JText::_('MOD_FEED_ERR_NO_URL');	echo '</div>';	return;}$feed = ModFeedHelper::getFeed($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_feed', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform" title="<?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?>">	<legend><?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?></legend>	<?php echo JText::_('COM_INSTALLER_MSG_DESCFTP'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p><?php echo JText::_($this->ftp->getMessage()); ?></p>	<?php endif; ?>	<ul class="adminformlist">		<li><label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>		<input type="text" id="username" name="username" class="inputbox" value="" /></li>		<li><label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>		<input type="password" id="password" name="password" class="input_box" value="" /></li>	</ul></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  mod_breadcrumbs * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';// Get the breadcrumbs$list	= ModBreadCrumbsHelper::getList($params);$count	= count($list);// Set the default separator$separator = ModBreadCrumbsHelper::setSeparator($params->get('separator'));$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_breadcrumbs', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleEquals extends JFormRule{	/**	 * Method to test if two values are equal. To use this rule, the form	 * XML needs a validate attribute of equals and a field attribute	 * that is equal to the field to test against.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 * @throws  UnexpectedValueException	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$field = (string) $element['field'];		// Check that a validation field is set.		if (!$field)		{			throw new UnexpectedValueException(sprintf('$field empty in %s::test', get_class($this)));		}		if (is_null($form))		{			throw new InvalidArgumentException(sprintf('The value for $form must not be null in %s', get_class($this)));		}		if (is_null($input))		{			throw new InvalidArgumentException(sprintf('The value for $input must not be null in %s', get_class($this)));		}		// Test the two values against each other.		if ($value == $input->get($field))		{			return true;		}		return false;	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */// Set the platform root path as a constant if necessary.if (!defined('JPATH_PLATFORM')){	define('JPATH_PLATFORM', __DIR__);}// Detect the native operating system type.$os = strtoupper(substr(PHP_OS, 0, 3));if (!defined('IS_WIN')){	define('IS_WIN', ($os === 'WIN') ? true : false);}if (!defined('IS_UNIX')){	define('IS_UNIX', (IS_WIN === false) ? true : false);}// Import the platform version library if necessary.if (!class_exists('JPlatform')){	require_once JPATH_PLATFORM . '/platform.php';}// Import the library loader if necessary.if (!class_exists('JLoader')){	require_once JPATH_PLATFORM . '/loader.php';}class_exists('JLoader') or die;// Setup the autoloaders.JLoader::setup();// Import the base Joomla Platform libraries.JLoader::import('joomla.factory');// Register classes for compatability with PHP 5.3if (version_compare(PHP_VERSION, '5.4.0', '<')){	JLoader::register('JsonSerializable', JPATH_PLATFORM . '/compat/jsonserializable.php');}// Register classes that don't follow one file per class naming conventions.JLoader::register('JText', JPATH_PLATFORM . '/joomla/language/text.php');JLoader::register('JRoute', JPATH_PLATFORM . '/joomla/application/route.php');
<?php/** * @package     Joomla.Legacy * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Supports an HTML select list of categories * * @package     Joomla.Legacy * @subpackage  Form * @since       11.1 */class JFormFieldCategory extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Category';	/**	 * Method to get the field options for category	 * Use the extension attribute in a form to specify the.specific extension for	 * which categories should be displayed.	 * Use the show_root attribute to specify whether to show the global category root in the list.	 *	 * @return  array    The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		$extension = $this->element['extension'] ? (string) $this->element['extension'] : (string) $this->element['scope'];		$published = (string) $this->element['published'];		// Load the category options for a given extension.		if (!empty($extension))		{			// Filter over published state or not depending upon if it is present.			if ($published)			{				$options = JHtml::_('category.options', $extension, array('filter.published' => explode(',', $published)));			}			else			{				$options = JHtml::_('category.options', $extension);			}			// Verify permissions.  If the action attribute is set, then we scan the options.			if ((string) $this->element['action'])			{				// Get the current user object.				$user = JFactory::getUser();				foreach ($options as $i => $option)				{					/*					 * To take save or create in a category you need to have create rights for that category					 * unless the item is already in that category.					 * Unset the option if the user isn't authorised for it. In this field assets are always categories.					 */					if ($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					{						unset($options[$i]);					}				}			}			if (isset($this->element['show_root']))			{				array_unshift($options, JHtml::_('select.option', '0', JText::_('JGLOBAL_ROOT')));			}		}		else		{			JLog::add(JText::_('JLIB_FORM_ERROR_FIELDS_CATEGORY_ERROR_EXTENSION_EMPTY'), JLog::WARNING, 'jerror');		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Syslog Log class * * This class is designed to call the PHP Syslog function call which is then sent to the * system wide log system. For Linux/Unix based systems this is the syslog subsystem, for * the Windows based implementations this can be found in the Event Log. For Windows, * permissions may prevent PHP from properly outputting messages. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerSyslog extends JLogLogger{	/**	 * @var array Translation array for JLogEntry priorities to SysLog priority names.	 * @since 11.1	 */	protected $priorities = array(		JLog::EMERGENCY => 'EMERG',		JLog::ALERT => 'ALERT',		JLog::CRITICAL => 'CRIT',		JLog::ERROR => 'ERR',		JLog::WARNING => 'WARNING',		JLog::NOTICE => 'NOTICE',		JLog::INFO => 'INFO',		JLog::DEBUG => 'DEBUG');	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// Ensure that we have an identity string for the Syslog entries.		if (empty($this->options['sys_ident']))		{			$this->options['sys_ident'] = 'Joomla Platform';		}		// If the option to add the process id to Syslog entries is set use it, otherwise default to true.		if (isset($this->options['sys_add_pid']))		{			$this->options['sys_add_pid'] = (bool) $this->options['sys_add_pid'];		}		else		{			$this->options['sys_add_pid'] = true;		}		// If the option to also send Syslog entries to STDERR is set use it, otherwise default to false.		if (isset($this->options['sys_use_stderr']))		{			$this->options['sys_use_stderr'] = (bool) $this->options['sys_use_stderr'];		}		else		{			$this->options['sys_use_stderr'] = false;		}		// Build the Syslog options from our log object options.		$sysOptions = 0;		if ($this->options['sys_add_pid'])		{			$sysOptions = $sysOptions | LOG_PID;		}		if ($this->options['sys_use_stderr'])		{			$sysOptions = $sysOptions | LOG_PERROR;		}		// Open the Syslog connection.		openlog((string) $this->options['sys_ident'], $sysOptions, LOG_USER);	}	/**	 * Destructor.	 *	 * @since   11.1	 */	public function __destruct()	{		closelog();	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addEntry(JLogEntry $entry)	{		// Generate the value for the priority based on predefined constants.		$priority = constant(strtoupper('LOG_' . $this->priorities[$entry->priority]));		// Send the entry to Syslog.		syslog($priority, '[' . $entry->category . '] ' . $entry->message);	}}
<?php/** * Squiz_Sniffs_ControlStructures_ElseIfDeclarationSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ElseIfDeclarationSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Squiz_Sniffs_ControlStructures_ElseIfDeclarationSniff. * * Verifies that there are no "else if" statements. The else and the if should * be a single word "elseif". * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_ElseIfDeclarationSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_ELSE);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {      $tokens = $phpcsFile->getTokens();      $nextNonWhiteSpace = $phpcsFile->findNext(        T_WHITESPACE,        $stackPtr + 1,        null,        true,        null,        true      );      if($tokens[$nextNonWhiteSpace]['code'] == T_IF)      {        $error = 'Usage of ELSE IF is not allowed; use ELSEIF instead';        $phpcsFile->addError($error, $stackPtr, 'NotAllowed');      }    }//end process()}//end class
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" />	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/general.css" type="text/css" />	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/template.css" type="text/css" /><?php if ($this->direction == 'rtl') : ?>	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template ?>/css/template_rtl.css" type="text/css" /><?php endif; ?></head><body class="contentpane">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $menu JAdminCSSMenu */$shownew = (boolean) $params->get('shownew', 1);$showhelp = $params->get('showhelp', 1);$user = JFactory::getUser();$lang = JFactory::getLanguage();//// Site SubMenu//$menu->addChild(	new JMenuNode(JText::_('MOD_MENU_CONTROL_PANEL'), 'index.php', 'class:cpanel'), true);$menu->getParent();//// Users Submenu//if ($user->authorise('core.manage', 'com_users')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USERS'), '#'), true	);	$createUser = $shownew && $user->authorise('core.create', 'com_users');	$createGrp = $user->authorise('core.admin', 'com_users');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USER_MANAGER'), 'index.php?option=com_users&view=users', 'class:user'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_USER'), 'index.php?option=com_users&task=user.add', 'class:newarticle')		);		$menu->getParent();	}	if ($createGrp)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_GROUPS'), 'index.php?option=com_users&view=groups', 'class:groups'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_GROUP'), 'index.php?option=com_users&task=group.add', 'class:newarticle')			);			$menu->getParent();		}		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_LEVELS'), 'index.php?option=com_users&view=levels', 'class:levels'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_LEVEL'), 'index.php?option=com_users&task=level.add', 'class:newarticle')			);			$menu->getParent();		}	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTES'), 'index.php?option=com_users&view=notes', 'class:user-note'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_NOTE'), 'index.php?option=com_users&task=note.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTE_CATEGORIES'), 'index.php?option=com_categories&view=categories&extension=com_users.notes', 'class:category'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_users.notes', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MASS_MAIL_USERS'), 'index.php?option=com_users&view=mail', 'class:massmail')	);	$menu->getParent();}//// Menus Submenu//if ($user->authorise('core.manage', 'com_menus')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENUS'), '#'), true	);	$createMenu = $shownew && $user->authorise('core.create', 'com_menus');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER'), 'index.php?option=com_menus&view=menus', 'class:menumgr'), $createMenu	);	if ($createMenu)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU'), 'index.php?option=com_menus&view=menu&layout=edit', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	// Menu Types	foreach (ModMenuHelper::getMenus() as $menuType)	{		$alt = '*' .$menuType->sef. '*';		if ($menuType->home == 0)		{			$titleicon = '';		}		elseif ($menuType->home == 1 && $menuType->language == '*')		{			$titleicon = ' <i class="icon-home"></i>';		}		elseif ($menuType->home > 1)		{			$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $menuType->home, array('title' => JText::_('MOD_MENU_HOME_MULTIPLE')), true).'</span>';		}		else		{			$image = JHtml::_('image', 'mod_languages/'.$menuType->image.'.gif', null, null, true, true);			if (!$image)			{				$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $alt, array('title' => $menuType->title_native), true).'</span>';			}			else			{				$titleicon = ' <span>' . JHtml::_('image', 'mod_languages/' . $menuType->image . '.gif', $alt, array('title' => $menuType->title_native), true) . '</span>';			}		}		$menu->addChild(			new JMenuNode($menuType->title,	'index.php?option=com_menus&view=items&menutype='.$menuType->menutype, 'class:menu', null, null, $titleicon), $createMenu		);		if ($createMenu)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU_ITEM'), 'index.php?option=com_menus&view=item&layout=edit&menutype='.$menuType->menutype, 'class:newarticle')			);			$menu->getParent();		}	}	$menu->getParent();}//// Content Submenu//if ($user->authorise('core.manage', 'com_content')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT'), '#'), true	);	$createContent = $shownew && $user->authorise('core.create', 'com_content');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_ARTICLE_MANAGER'), 'index.php?option=com_content', 'class:article'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_ARTICLE'), 'index.php?option=com_content&task=article.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_CATEGORY_MANAGER'), 'index.php?option=com_categories&extension=com_content', 'class:category'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_content', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_FEATURED'), 'index.php?option=com_content&view=featured', 'class:featured')	);	$menu->addSeparator();	if ($user->authorise('core.manage', 'com_media'))	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_MEDIA_MANAGER'), 'index.php?option=com_media', 'class:media'));	}	$menu->getParent();}//// Components Submenu//// Get the authorised components and sub-menus.$components = ModMenuHelper::getComponents(true);// Check if there are any components, otherwise, don't render the menuif ($components){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COMPONENTS'), '#'), true);	foreach ($components as &$component)	{		if (!empty($component->submenu))		{			// This component has a db driven submenu.			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img), true);			foreach ($component->submenu as $sub)			{				$menu->addChild(new JMenuNode($sub->text, $sub->link, $sub->img));			}			$menu->getParent();		}		else		{			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img));		}	}	$menu->getParent();}//// Extensions Submenu//$im = $user->authorise('core.manage', 'com_installer');$mm = $user->authorise('core.manage', 'com_modules');$pm = $user->authorise('core.manage', 'com_plugins');$tm = $user->authorise('core.manage', 'com_templates');$lm = $user->authorise('core.manage', 'com_languages');if ($im || $mm || $pm || $tm || $lm){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSIONS'), '#'), true);	if ($im)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSION_MANAGER'), 'index.php?option=com_installer', 'class:install'));		$menu->addSeparator();	}	if ($mm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_MODULE_MANAGER'), 'index.php?option=com_modules', 'class:module'));	}	if ($pm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_PLUGIN_MANAGER'), 'index.php?option=com_plugins', 'class:plugin'));	}	if ($tm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_TEMPLATE_MANAGER'), 'index.php?option=com_templates', 'class:themes'));	}	if ($lm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_LANGUAGE_MANAGER'), 'index.php?option=com_languages', 'class:language'));	}	$menu->getParent();}//// Help Submenu//if ($showhelp == 1){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP'), '#'), true	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_JOOMLA'), 'index.php?option=com_admin&view=help', 'class:help')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_FORUM'), 'http://forum.joomla.org', 'class:help-forum', false, '_blank')	);	if ($forum_url = $params->get('forum_url'))	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_CUSTOM_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$debug = $lang->setDebug(false);	if ($lang->hasKey('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') && JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') != '')	{		$forum_url = 'http://forum.joomla.org/viewforum.php?f=' . (int) JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE');		$lang->setDebug($debug);		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$lang->setDebug($debug);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DOCUMENTATION'), 'http://docs.joomla.org', 'class:help-docs', false, '_blank')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_EXTENSIONS'), 'http://extensions.joomla.org', 'class:help-jed', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_TRANSLATIONS'), 'http://community.joomla.org/translations.html', 'class:help-trans', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_RESOURCES'), 'http://resources.joomla.org', 'class:help-jrd', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_COMMUNITY'), 'http://community.joomla.org', 'class:help-community', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SECURITY'), 'http://developer.joomla.org/security.html', 'class:help-security', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DEVELOPER'), 'http://developer.joomla.org', 'class:help-dev', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SHOP'), 'http://shop.joomla.org', 'class:help-shop', false, '_blank')	);	$menu->getParent();}//// Admin Settingss Submenu//$su = $user->authorise('core.admin');$cam = $user->authorise('core.manage', 'com_cache');$cim = $user->authorise('core.manage', 'com_checkin');	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_SETTINGS'), '#'), true);	if ($su):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_CONFIGURATION'), 'index.php?option=com_config', 'class:config')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_SYSTEM_INFORMATION'), 'index.php?option=com_admin&view=sysinfo', 'class:info')	);	endif;	if  ($cam):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_CLEAR_CACHE'), 'index.php?option=com_cache', 'class:clear')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_PURGE_EXPIRED_CACHE'), 'index.php?option=com_cache&view=purge', 'class:purge')		);	endif;	if  ($cim):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_GLOBAL_CHECKIN'), 'index.php?option=com_checkin', 'class:checkin')		);	endif;		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_USER_PROFILE'), 'index.php?option=com_admin&task=profile.edit&id='. $user->id, 'class:profile')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_LOGOUT'), 'index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1', 'class:logout')		);	$menu->getParent();
<?php/** * @package     Joomla.Site * @subpackage  mod_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="search<?php echo $moduleclass_sfx ?>">    <form action="<?php echo JRoute::_('index.php');?>" method="post" class="form-inline">    		<?php				$output = '<label for="mod-search-searchword" class="element-invisible">' . $label . '</label> <input name="searchword" id="mod-search-searchword" maxlength="' . $maxlength . '"  class="inputbox search-query" type="text" size="' . $width . '" value="' . $text . '"  onblur="if (this.value==\'\') this.value=\'' . $text . '\';" onfocus="if (this.value==\'' . $text . '\') this.value=\'\';" />';				if ($button) :					if ($imagebutton) :						$button = ' <input type="image" value="' . $button_text . '" class="button" src="' . $img . '" onclick="this.form.searchword.focus();"/>';					else :						$button = ' <button class="button btn btn-primary" onclick="this.form.searchword.focus();">' . $button_text . '</button>';					endif;				endif;				switch ($button_pos) :					case 'top' :						$button = $button . '<br />';						$output = $button . $output;						break;					case 'bottom' :						$button = '<br />' . $button;						$output = $output . $button;						break;					case 'right' :						$output = $output . $button;						break;					case 'left' :					default :						$output = $button . $output;						break;				endswitch;				echo $output;			?>    	<input type="hidden" name="task" value="search" />    	<input type="hidden" name="option" value="com_search" />    	<input type="hidden" name="Itemid" value="<?php echo $mitemid; ?>" />    </form></div>
<?php/** * Parses and verifies the doc comments for files. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FileCommentSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_CommentParser_ClassCommentParser', true) === false) {    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_CommentParser_ClassCommentParser not found');}/** * Parses and verifies the doc comments for files. * * Verifies that : * <ul> *  <li>A doc comment exists.</li> *  <li>There is a blank newline after the short description.</li> *  <li>There is a blank newline between the long and short description.</li> *  <li>There is a blank newline between the long description and tags.</li> *  <li>A PHP version is specified.</li> *  <li>Check the order of the tags.</li> *  <li>Check the indentation of each tag.</li> *  <li>Check required and optional tags and the format of their content.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff{    /**     * The header comment parser for the current file.     *     * @var PHP_CodeSniffer_Comment_Parser_ClassCommentParser     */    protected $commentParser = null;    /**     * The current PHP_CodeSniffer_File object we are processing.     *     * @var PHP_CodeSniffer_File     */    protected $currentFile = null;    /**     * Tags in correct order and related info.     *     * @var array     */    protected $tags = array(                       'version'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must be first',                                       ),                       'category'   => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'precedes @package',                                       ),                       'package'    => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follows @category (if used)',                                       ),                       'subpackage' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @package',                                       ),                       'author'     => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @subpackage (if used) or @package',                                       ),                       'copyright'  => array(                                        'required'       => true,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @author (if used), @subpackage (if used) or @package',                                       ),                       'license'    => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @copyright',                                       ),                       'link'       => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @license',                                       ),                       'see'        => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @link (if used) or @license',                                       ),                       'since'      => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follows @see (if used), @link (if used) or @license',                                       ),                       'deprecated' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @since (if used), @see (if used), @link (if used) or @license',                                       ),                );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_OPEN_TAG);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $this->currentFile = $phpcsFile;        // We are only interested if this is the first open tag.        if ($stackPtr !== 0) {            if ($phpcsFile->findPrevious(T_OPEN_TAG, ($stackPtr - 1)) !== false) {                return;            }        }        $tokens = $phpcsFile->getTokens();        // Find the next non whitespace token.        $commentStart            = $phpcsFile->findNext(T_WHITESPACE, ($stackPtr + 1), null, true);        // Allow declare() statements at the top of the file.        if ($tokens[$commentStart]['code'] === T_DECLARE) {            $semicolon = $phpcsFile->findNext(T_SEMICOLON, ($commentStart + 1));            $commentStart                = $phpcsFile->findNext(T_WHITESPACE, ($semicolon + 1), null, true);        }        // Ignore vim header.        if ($tokens[$commentStart]['code'] === T_COMMENT) {            if (strstr($tokens[$commentStart]['content'], 'vim:') !== false) {                $commentStart = $phpcsFile->findNext(                    T_WHITESPACE,                    ($commentStart + 1),                    null,                    true                );            }        }        $errorToken = ($stackPtr + 1);        if (isset($tokens[$errorToken]) === false) {            $errorToken--;        }        if ($tokens[$commentStart]['code'] === T_CLOSE_TAG) {            // We are only interested if this is the first open tag.            return;        } else if ($tokens[$commentStart]['code'] === T_COMMENT) {            $error = 'You must use "/**" style comments for a file comment';            $phpcsFile->addError($error, $errorToken, 'WrongStyle');            return;        } else if ($commentStart === false            || $tokens[$commentStart]['code'] !== T_DOC_COMMENT        ) {            $phpcsFile->addError('Missing file doc comment', $errorToken, 'Missing');            return;        } else {            // Extract the header comment docblock.            $commentEnd = $phpcsFile->findNext(                T_DOC_COMMENT,                ($commentStart + 1),                null,                true            );            $commentEnd--;            // Check if there is only 1 doc comment between the            // open tag and class token.            $nextToken   = array(                            T_ABSTRACT,                            T_CLASS,                            T_FUNCTION,                            T_DOC_COMMENT,                           );            $commentNext = $phpcsFile->findNext($nextToken, ($commentEnd + 1));            if ($commentNext !== false                && $tokens[$commentNext]['code'] !== T_DOC_COMMENT            ) {                // Found a class token right after comment doc block.                $newlineToken = $phpcsFile->findNext(                    T_WHITESPACE,                    ($commentEnd + 1),                    $commentNext,                    false,                    $phpcsFile->eolChar                );                if ($newlineToken !== false) {                    $newlineToken = $phpcsFile->findNext(                        T_WHITESPACE,                        ($newlineToken + 1),                        $commentNext,                        false,                        $phpcsFile->eolChar                    );                    if ($newlineToken === false) {                        // No blank line between the class token and the doc block.                        // The doc block is most likely a class comment.                        $error = 'Missing file doc comment';                        $phpcsFile->addError($error, $errorToken, 'Missing');                        return;                    }                }            }//end if            $comment = $phpcsFile->getTokensAsString(                $commentStart,                ($commentEnd - $commentStart + 1)            );            // Parse the header comment docblock.            try {                $this->commentParser = new PHP_CodeSniffer_CommentParser_ClassCommentParser($comment, $phpcsFile);                $this->commentParser->parse();            } catch (PHP_CodeSniffer_CommentParser_ParserException $e) {                $line = ($e->getLineWithinComment() + $commentStart);                $phpcsFile->addError($e->getMessage(), $line, 'FailedParse');                return;            }            $comment = $this->commentParser->getComment();            if (is_null($comment) === true) {                $error = 'File doc comment is empty';                $phpcsFile->addError($error, $commentStart, 'Empty');                return;            }            // No extra newline before short description.            $short        = $comment->getShortComment();            $newlineCount = 0;            $newlineSpan  = strspn($short, $phpcsFile->eolChar);            if ($short !== '' && $newlineSpan > 0) {                $error = 'Extra newline(s) found before file comment short description';                $phpcsFile->addError($error, ($commentStart + 1), 'SpacingBefore');            }            $newlineCount = (substr_count($short, $phpcsFile->eolChar) + 1);            // Exactly one blank line between short and long description.            $long = $comment->getLongComment();            if (empty($long) === false) {                $between        = $comment->getWhiteSpaceBetween();                $newlineBetween = substr_count($between, $phpcsFile->eolChar);                if ($newlineBetween !== 2) {                    $error = 'There must be exactly one blank line between descriptions in file comment';                    $phpcsFile->addError($error, ($commentStart + $newlineCount + 1), 'DescriptionSpacing');                }                $newlineCount += $newlineBetween;            }            // Exactly one blank line before tags if short description is present.            $tags = $this->commentParser->getTagOrders();            if (count($tags) > 1 && $short !== '' && $newlineSpan > 0) {                $newlineSpan = $comment->getNewlineAfter();                if ($newlineSpan !== 2) {                    $error = 'There must be exactly one blank line before the tags in file comment';                    if ($long !== '') {                        $newlineCount += (substr_count($long, $phpcsFile->eolChar) - $newlineSpan + 1);                    }                    $phpcsFile->addError($error, ($commentStart + $newlineCount), 'SpacingBeforeTags');                    $short = rtrim($short, $phpcsFile->eolChar.' ');                }            }//            // Check the PHP Version.//            $this->processPHPVersion($commentStart, $commentEnd, $long);            // Check each tag.            $this->processTags($commentStart, $commentEnd);        }//end if    }//end process()//    /**//     * Check that the PHP version is specified.//     *//     * @param int    $commentStart Position in the stack where the comment started.//     * @param int    $commentEnd   Position in the stack where the comment ended.//     * @param string $commentText  The text of the function comment.//     *//     * @return void//     *///    protected function processPHPVersion($commentStart, $commentEnd, $commentText)//    {//        if (strstr(strtolower($commentText), 'php version') === false) {//            $error = 'PHP version not specified';//             $this->currentFile->addWarning($error, $commentEnd, 'MissingVersion');//        }////    }//end processPHPVersion()    /**     * Processes each required or optional tag.     *     * @param int $commentStart Position in the stack where the comment started.     * @param int $commentEnd   Position in the stack where the comment ended.     *     * @return void     */    protected function processTags($commentStart, $commentEnd)    {        $docBlock    = (get_class($this) === 'Joomla_Sniffs_Commenting_FileCommentSniff') ? 'file' : 'class';        $foundTags   = $this->commentParser->getTagOrders();        $orderIndex  = 0;        $indentation = array();        $longestTag  = 0;        $errorPos    = 0;        foreach ($this->tags as $tag => $info) {            // Required tag missing.            if ($info['required'] === true && in_array($tag, $foundTags) === false) {                $error = 'Missing @%s tag in %s comment';                $data  = array(                              $tag,                              $docBlock,                             );                $this->currentFile->addError($error, $commentEnd, 'MissingTag', $data);                continue;            }             // Get the line number for current tag.            $tagName = ucfirst($tag);            if ($info['allow_multiple'] === true) {                $tagName .= 's';            }            $getMethod  = 'get'.$tagName;            $tagElement = $this->commentParser->$getMethod();            if (is_null($tagElement) === true || empty($tagElement) === true) {                continue;            }            $errorPos = $commentStart;            if (is_array($tagElement) === false) {                $errorPos = ($commentStart + $tagElement->getLine());            }            // Get the tag order.            $foundIndexes = array_keys($foundTags, $tag);            if (count($foundIndexes) > 1) {                // Multiple occurance not allowed.                if ($info['allow_multiple'] === false) {                    $error = 'Only 1 @%s tag is allowed in a %s comment';                    $data  = array(                              $tag,                              $docBlock,                             );                    $this->currentFile->addError($error, $errorPos, 'DuplicateTag', $data);                } else {                    // Make sure same tags are grouped together.                    $i     = 0;                    $count = $foundIndexes[0];                    foreach ($foundIndexes as $index) {                        if ($index !== $count) {                            $errorPosIndex                                = ($errorPos + $tagElement[$i]->getLine());                            $error = '@%s tags must be grouped together';                            $data  = array($tag);                            $this->currentFile->addError($error, $errorPosIndex, 'TagsNotGrouped', $data);                        }                        $i++;                        $count++;                    }                }            }//end if            // Check tag order.            if ($foundIndexes[0] > $orderIndex) {                $orderIndex = $foundIndexes[0];            } else {                if (is_array($tagElement) === true && empty($tagElement) === false) {                    $errorPos += $tagElement[0]->getLine();                }                $error = 'The @%s tag is in the wrong order; the tag %s';                $data  = array(                          $tag,                          $info['order_text'],                         );                $this->currentFile->addError($error, $errorPos, 'WrongTagOrder', $data);            }            // Store the indentation for checking.            $len = strlen($tag);            if ($len > $longestTag) {                $longestTag = $len;            }            if (is_array($tagElement) === true) {                foreach ($tagElement as $key => $element) {                    $indentation[] = array(                                      'tag'   => $tag,                                      'space' => $this->getIndentation($tag, $element),                                      'line'  => $element->getLine(),                                     );                }            } else {                $indentation[] = array(                                  'tag'   => $tag,                                  'space' => $this->getIndentation($tag, $tagElement),                                 );            }            $method = 'process'.$tagName;            if (method_exists($this, $method) === true) {                // Process each tag if a method is defined.                call_user_func(array($this, $method), $errorPos);            } else {                if (is_array($tagElement) === true) {                    foreach ($tagElement as $key => $element) {                        $element->process(                            $this->currentFile,                            $commentStart,                            $docBlock                        );                    }                } else {                     $tagElement->process(                         $this->currentFile,                         $commentStart,                         $docBlock                     );                }            }        }//end foreach        foreach ($indentation as $indentInfo) {            if ($indentInfo['space'] !== 0            // Joomla change: allow for 2 space gap.                && $indentInfo['space'] !== ($longestTag + 2)            ) {                $expected = (($longestTag - strlen($indentInfo['tag'])) + 2);                $space    = ($indentInfo['space'] - strlen($indentInfo['tag']));                $error    = '@%s tag comment indented incorrectly; expected %s spaces but found %s';                $data     = array(                             $indentInfo['tag'],                             $expected,                             $space,                            );                $getTagMethod = 'get'.ucfirst($indentInfo['tag']);                if ($this->tags[$indentInfo['tag']]['allow_multiple'] === true) {                    $line = $indentInfo['line'];                } else {                    $tagElem = $this->commentParser->$getTagMethod();                    $line    = $tagElem->getLine();                }                $this->currentFile->addError($error, ($commentStart + $line), 'TagIndent', $data);            }        }    }//end processTags()    /**     * Get the indentation information of each tag.     *     * @param string                                   $tagName    The name of the     *                                                             doc comment     *                                                             element.     * @param PHP_CodeSniffer_CommentParser_DocElement $tagElement The doc comment     *                                                             element.     *     * @return void     */    protected function getIndentation($tagName, $tagElement)    {        if ($tagElement instanceof PHP_CodeSniffer_CommentParser_SingleElement) {            if ($tagElement->getContent() !== '') {                return (strlen($tagName) + substr_count($tagElement->getWhitespaceBeforeContent(), ' '));            }        } else if ($tagElement instanceof PHP_CodeSniffer_CommentParser_PairElement) {            if ($tagElement->getValue() !== '') {                return (strlen($tagName) + substr_count($tagElement->getWhitespaceBeforeValue(), ' '));            }        }        return 0;    }//end getIndentation()    /**     * Process the category tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processCategory($errorPos)    {        $category = $this->commentParser->getCategory();        if ($category !== null) {            $content = $category->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {//                    $newContent = str_replace(' ', '_', $content);//                    $nameBits   = explode('_', $newContent);//                    $firstBit   = array_shift($nameBits);//                    $newName    = ucfirst($firstBit).'_';//                    foreach ($nameBits as $bit) {//                        $newName .= ucfirst($bit).'_';//                    }////                    $error     = 'Category name "%s" is not valid; consider "%s" instead';//                    $validName = trim($newName, '_');//                    $data      = array(//                                  $content,//                                  $validName,//                                 );//                    $this->currentFile->addError($error, $errorPos, 'InvalidCategory', $data);                }            } else {                $error = '@category tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptyCategory');            }        }    }//end processCategory()    /**     * Process the package tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processPackage($errorPos)    {        $package = $this->commentParser->getPackage();        if ($package !== null) {            $content = $package->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {                    $newContent = str_replace(' ', '_', $content);                    $nameBits   = explode('_', $newContent);                    $firstBit   = array_shift($nameBits);                    $newName    = strtoupper($firstBit{0}).substr($firstBit, 1).'_';                    foreach ($nameBits as $bit) {                        $newName .= strtoupper($bit{0}).substr($bit, 1).'_';                    }                    $error     = 'Package name "%s" is not valid; consider "%s" instead';                    $validName = trim($newName, '_');                    $data      = array(                                  $content,                                  $validName,                                 );                    $this->currentFile->addError($error, $errorPos, 'InvalidPackage', $data);                }            } else {                $error = '@package tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptyPackage');            }        }    }//end processPackage()    /**     * Process the subpackage tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processSubpackage($errorPos)    {        $package = $this->commentParser->getSubpackage();        if ($package !== null) {            $content = $package->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {//                    $newContent = str_replace(' ', '_', $content);//                    $nameBits   = explode('_', $newContent);//                    $firstBit   = array_shift($nameBits);//                    $newName    = strtoupper($firstBit{0}).substr($firstBit, 1).'_';//                    foreach ($nameBits as $bit) {//                        $newName .= strtoupper($bit{0}).substr($bit, 1).'_';//                    }////                    $error     = 'Subpackage name "%s" is not valid; consider "%s" instead';//                    $validName = trim($newName, '_');//                    $data      = array(//                                  $content,//                                  $validName,//                                 );//                    $this->currentFile->addError($error, $errorPos, 'InvalidSubpackage', $data);                }            } else {                $error = '@subpackage tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptySubpackage');            }        }    }//end processSubpackage()    /**     * Process the author tag(s) that this header comment has.     *     * This function is different from other _process functions     * as $authors is an array of SingleElements, so we work out     * the errorPos for each element separately     *     * @param int $commentStart The position in the stack where     *                          the comment started.     *     * @return void     */    protected function processAuthors($commentStart)    {         $authors = $this->commentParser->getAuthors();        // Report missing return.        if (empty($authors) === false) {            foreach ($authors as $author) {                $errorPos = ($commentStart + $author->getLine());                $content  = $author->getContent();                if ($content !== '') {                    $local = '\da-zA-Z-_+';                    // Dot character cannot be the first or last character                    // in the local-part.                    $localMiddle = $local.'.\w';                    if (preg_match('/^([^<]*)\s+<(['.$local.']['.$localMiddle.']*['.$local.']@[\da-zA-Z][-.\w]*[\da-zA-Z]\.[a-zA-Z]{2,7})>$/', $content) === 0) {                        $error = 'Content of the @author tag must be in the form "Display Name <username@example.com>"';                        $this->currentFile->addError($error, $errorPos, 'InvalidAuthors');                    }                } else {                    $error    = 'Content missing for @author tag in %s comment';                    $docBlock = (get_class($this) === 'PEAR_Sniffs_Commenting_FileCommentSniff') ? 'file' : 'class';                    $data     = array($docBlock);                    $this->currentFile->addError($error, $errorPos, 'EmptyAuthors', $data);                }            }        }    }//end processAuthors()    /**     * Process the copyright tags.     *     * @param int $commentStart The position in the stack where     *                          the comment started.     *     * @return void     */    protected function processCopyrights($commentStart)    {        $copyrights = $this->commentParser->getCopyrights();        foreach ($copyrights as $copyright) {            $errorPos = ($commentStart + $copyright->getLine());            $content  = $copyright->getContent();            if ($content !== '') {                $matches = array();                if (preg_match('/^.*?([0-9]{4})((.{1})([0-9]{4}))? (.+)$/', $content, $matches) !== 0) {                    // Check earliest-latest year order.                    if ($matches[3] !== '') {                        if ($matches[3] !== '-') {                            $error = 'A hyphen must be used between the earliest and latest year';                            $this->currentFile->addError($error, $errorPos, 'CopyrightHyphen');                        }                        if ($matches[4] !== '' && $matches[4] < $matches[1]) {                            $error = "Invalid year span \"$matches[1]$matches[3]$matches[4]\" found; consider \"$matches[4]-$matches[1]\" instead";                            $this->currentFile->addWarning($error, $errorPos, 'InvalidCopyright');                        }                    }                } else {                    $error = '@copyright tag must contain a year and the name of the copyright holder';                    $this->currentFile->addError($error, $errorPos, 'EmptyCopyright');                }            } else {                $error = '@copyright tag must contain a year and the name of the copyright holder';                $this->currentFile->addError($error, $errorPos, 'EmptyCopyright');            }//end if        }//end if    }//end processCopyrights()    /**     * Process the license tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processLicense($errorPos)    {        $license = $this->commentParser->getLicense();        if ($license !== null) {            $value   = $license->getValue();            $comment = $license->getComment();            if ($value === '' || $comment === '') {                $error = '@license tag must contain a URL and a license name';                $this->currentFile->addError($error, $errorPos, 'EmptyLicense');            }        }    }//end processLicense()    /**     * Process the version tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processVersion($errorPos)    {        $version = $this->commentParser->getVersion();        if ($version !== null) {            $content = $version->getContent();            $matches = array();            if (empty($content) === true) {                $error = 'Content missing for @version tag in file comment';                $this->currentFile->addError($error, $errorPos, 'EmptyVersion');            } else if (strstr($content, 'CVS:') === false                && strstr($content, 'SVN:') === false                && strstr($content, 'Id:') === false            ) {                $error = 'Invalid version "%s" in file comment; consider "CVS: <cvs_id>" or "SVN: <svn_id>" instead';                $data  = array($content);                $this->currentFile->addWarning($error, $errorPos, 'InvalidVersion', $data);            }        }    }//end processVersion()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?>		<li class="imgOutline thumbnail height-80 width-80 center">			<div class="imgTotal">				<div class="imgBorder">					<a class="btn" href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">						<i class="icon-arrow-up"></i></a>				</div>			</div>			<div class="controls">				<span>&#160;</span>			</div>			<div class="imginfoBorder">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">..</a>			</div>		</li>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_CONFIG_SYSTEM_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('system') as $field):			?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php			endforeach;			?>			</ul>	</fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!isset($this->error)){	$this->error = JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));	$this->debug = false;}//get language and direction$doc = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<title><?php echo $this->error->getCode(); ?> - <?php echo $this->title; ?></title>	<link rel="stylesheet" href="<?php echo $this->baseurl; ?>/templates/system/css/error.css" type="text/css" />	<?php if ($this->direction == 'rtl') : ?>	<link rel="stylesheet" href="<?php echo $this->baseurl; ?>/templates/system/css/error_rtl.css" type="text/css" />	<?php endif; ?>	<?php		$debug = JFactory::getConfig()->get('debug_lang');		if (JDEBUG || $debug)		{	?>		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/media/cms/css/debug.css" type="text/css" />	<?php		}	?></head><body>	<div class="error">		<div id="outline">		<div id="errorboxoutline">			<div id="errorboxheader"><?php echo $this->error->getCode(); ?> - <?php echo $this->error->getMessage(); ?></div>			<div id="errorboxbody">			<p><strong><?php echo JText::_('JERROR_LAYOUT_NOT_ABLE_TO_VISIT'); ?></strong></p>				<ol>					<li><?php echo JText::_('JERROR_LAYOUT_AN_OUT_OF_DATE_BOOKMARK_FAVOURITE'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_SEARCH_ENGINE_OUT_OF_DATE_LISTING'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_MIS_TYPED_ADDRESS'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_YOU_HAVE_NO_ACCESS_TO_THIS_PAGE'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_REQUESTED_RESOURCE_WAS_NOT_FOUND'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_ERROR_HAS_OCCURRED_WHILE_PROCESSING_YOUR_REQUEST'); ?></li>				</ol>			<p><strong><?php echo JText::_('JERROR_LAYOUT_PLEASE_TRY_ONE_OF_THE_FOLLOWING_PAGES'); ?></strong></p>				<ul>					<li><a href="<?php echo $this->baseurl; ?>/index.php" title="<?php echo JText::_('JERROR_LAYOUT_GO_TO_THE_HOME_PAGE'); ?>"><?php echo JText::_('JERROR_LAYOUT_HOME_PAGE'); ?></a></li>				</ul>			<p><?php echo JText::_('JERROR_LAYOUT_PLEASE_CONTACT_THE_SYSTEM_ADMINISTRATOR'); ?>.</p>			<div id="techinfo">			<p><?php echo $this->error->getMessage(); ?></p>			<p>				<?php if ($this->debug) :					echo $this->renderBacktrace();				endif; ?>			</p>			</div>			</div>		</div>		</div>	</div></body></html>
<?php/** * @package     Joomla.Site * @subpackage  mod_related_items * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$cacheparams = new stdClass;$cacheparams->cachemode = 'safeuri';$cacheparams->class = 'ModRelatedItemsHelper';$cacheparams->method = 'getList';$cacheparams->methodparams = $params;$cacheparams->modeparams = array('id' => 'int', 'Itemid' => 'int');$list = JModuleHelper::moduleCache($module, $params, $cacheparams);if (!count($list)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));$showDate = $params->get('showDate', 0);require JModuleHelper::getLayoutPath('mod_related_items', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="mostread<?php echo $moduleclass_sfx; ?>"><?php foreach ($list as $item) : ?>	<li>		<a href="<?php echo $item->link; ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ul>
<?php/** * Ensures that new classes are instantiated without brackets if they do not * have any parameters. * * @category  Classes * @package   Joomla.CodeSniffer * @author    Nikolai Plath * @license   GNU General Public License version 2 or later *//** * Ensures that new classes are instantiated without brackets if they do not * have any parameters. * * @category  Classes * @package   Joomla.CodeSniffer */class Joomla_Sniffs_Classes_InstantiateNewClassesSniff implements PHP_CodeSniffer_Sniff{    /**     * Registers the token types that this sniff wishes to listen to.     *     * @return array     */    public function register()    {        return array(T_NEW);    }//end register()    /**     * Process the tokens that this sniff is listening for.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where the token was found.     * @param int                  $stackPtr  The position in the stack where     *                                        the token was found.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $running = true;        $valid = false;        $started = false;        $cnt = $stackPtr + 1;        do        {            if( ! isset($tokens[$cnt]))            {                $running = false;            }            else            {                switch ($tokens[$cnt]['code'])                {                    case T_SEMICOLON:                    case T_COMMA :                        $valid = true;                        $running = false;                        break;                    case T_OPEN_PARENTHESIS :                        $started = true;                        break;                    case T_VARIABLE :                    case T_STRING :                    case T_LNUMBER :                    case T_CONSTANT_ENCAPSED_STRING :                    case T_DOUBLE_QUOTED_STRING :                        if($started)                        {                            $valid = true;                            $running = false;                        }                        break;                    case T_CLOSE_PARENTHESIS :                        if( ! $started)                        {                            $valid = true;                        }                         $running = false;                        break;                    case T_WHITESPACE :                        break;                }//switch                $cnt ++;            }        }        while ($running == true);        if( ! $valid)        {            $error = 'Instanciating new classes without parameters does not require brackets.';            $phpcsFile->addError($error, $stackPtr, 'New class');        }    }//function}//class
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to refresh the preinstall view for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerPreinstall extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Redirect to the page.		$r = new stdClass;		$r->view = 'preinstall';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_submenu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="sidebar">	<div class="sidebar-nav">		<?php if ($displayMenu) : ?>		<ul id="submenu" class="nav nav-list">			<?php foreach ($list as $item) : ?>			<?php if (isset ($item[2]) && $item[2] == 1) :				?><li class="active"><?php			else :				?><li><?php			endif;			?>			<?php			if ($hide) :					?><a class="nolink"><?php echo $item[0]; ?></a><?php			else :				if (strlen($item[1])) :					?><a href="<?php echo JFilterOutput::ampReplace($item[1]); ?>"><?php echo $item[0]; ?></a><?php				else :					?><?php echo $item[0]; ?><?php				endif;			endif;			?>			</li>			<?php endforeach; ?>		</ul>		<?php endif; ?>		<?php if ($displayMenu && $displayFilters) : ?>		<hr />		<?php endif; ?>		<?php if ($displayFilters) : ?>		<div class="filter-select hidden-phone">			<h4 class="page-header"><?php echo JText::_('JSEARCH_FILTER_LABEL');?></h4>			<form action="<?php echo JRoute::_($action);?>" method="post">				<?php foreach ($filters as $filter) : ?>					<label for="<?php echo $filter['name']; ?>" class="element-invisible"><?php echo $filter['label']; ?></label>					<select name="<?php echo $filter['name']; ?>" id="<?php echo $filter['name']; ?>" class="span12 small" onchange="this.form.submit()">						<?php if (!$filter['noDefault']) : ?>							<option value=""><?php echo $filter['label']; ?></option>						<?php endif; ?>						<?php echo $filter['options']; ?>					</select>					<hr class="hr-condensed" />				<?php endforeach; ?>			</form>		</div>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filter view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewFilter extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load the view data.		$this->filter = $this->get('Filter');		$this->item = $this->get('Item');		$this->form = $this->get('Form');		$this->state = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		JHtml::addIncludePath(JPATH_SITE . '/components/com_finder/helpers/html');		// Configure the toolbar.		$this->addToolbar();		parent::display($tpl);	}	/**	 * Method to configure the toolbar for this view.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user = JFactory::getUser();		$userId = $user->get('id');		$isNew = ($this->item->filter_id == 0);		$checkedOut = !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		$canDo = FinderHelper::getActions();		// Configure the toolbar.		JToolbarHelper::title(JText::_('COM_FINDER_FILTER_EDIT_TOOLBAR_TITLE'), 'finder');		// Set the actions for new and existing records.		if ($isNew)		{			// For new records, check the create permission.			if ($canDo->get('core.create'))			{				JToolbarHelper::apply('filter.apply');				JToolbarHelper::save('filter.save');				JToolbarHelper::save2new('filter.save2new');			}			JToolbarHelper::cancel('filter.cancel');		}		else		{			// Can't save the record if it's checked out.			if (!$checkedOut)			{				// Since it's an existing record, check the edit permission.				if ($canDo->get('core.edit'))				{					JToolbarHelper::apply('filter.apply');					JToolbarHelper::save('filter.save');					// We can save this record, but check the create permission to see if we can return to make a new one.					if ($canDo->get('core.create'))					{						JToolbarHelper::save2new('filter.save2new');					}				}			}			// If an existing item, can save as a copy			if ($canDo->get('core.create'))			{				JToolbarHelper::save2copy('filter.save2copy');			}			JToolbarHelper::cancel('filter.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_FINDER_MANAGE_SEARCH_FILTERS_EDIT');	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if ($params->def('prepare_content', 1)){	JPluginHelper::importPlugin('content');	$module->content = JHtml::_('content.prepare', $module->content, '', 'mod_custom.content');}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_custom', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * RESTful Web application router class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Application * @since       12.2 */class JApplicationWebRouterRest extends JApplicationWebRouterBase{	/**	 * @var     boolean  A boolean allowing to pass _method as parameter in POST requests	 *	 * @since  12.2	 */	protected $methodInPostRequest = false;	/**	 * @var    array  An array of HTTP Method => controller suffix pairs for routing the request.	 * @since  12.2	 */	protected $suffixMap = array(		'GET' => 'Get',		'POST' => 'Create',		'PUT' => 'Update',		'PATCH' => 'Update',		'DELETE' => 'Delete',		'HEAD' => 'Head',		'OPTIONS' => 'Options'	);	/**	 * Find and execute the appropriate controller based on a given route.	 *	 * @param   string  $route  The route string for which to find and execute a controller.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute($route)	{		// Get the controller name based on the route patterns and requested route.		$name = $this->parseRoute($route);		// Append the HTTP method based suffix.		$name .= $this->fetchControllerSuffix();		// Get the controller object by name.		$controller = $this->fetchController($name);		// Execute the controller.		$controller->execute();	}	/**	 * Set a controller class suffix for a given HTTP method.	 *	 * @param   string  $method  The HTTP method for which to set the class suffix.	 * @param   string  $suffix  The class suffix to use when fetching the controller name for a given request.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function setHttpMethodSuffix($method, $suffix)	{		$this->suffixMap[strtoupper((string) $method)] = (string) $suffix;		return $this;	}	/**	 * Set to allow or not method in POST request	 *	 * @param   boolean  $value  A boolean to allow or not method in POST request	 *	 * @return  void	 *	 * @since   12.2	 */	public function setMethodInPostRequest($value)	{		$this->methodInPostRequest = $value;	}	/**	 * Get the property to allow or not method in POST request	 *	 * @return  boolean	 *	 * @since   12.2	 */	public function isMethodInPostRequest()	{		return $this->methodInPostRequest;	}	/**	 * Get the controller class suffix string.	 *	 * @return  string	 *	 * @since   12.2	 * @throws  RuntimeException	 */	protected function fetchControllerSuffix()	{		// Validate that we have a map to handle the given HTTP method.		if (!isset($this->suffixMap[$this->input->getMethod()]))		{			throw new RuntimeException(sprintf('Unable to support the HTTP method `%s`.', $this->input->getMethod()), 404);		}		// Check if request method is POST		if ( $this->methodInPostRequest == true && strcmp(strtoupper($this->input->server->getMethod()), 'POST') === 0)		{			// Get the method from input			$postMethod = $this->input->get->getWord('_method');			// Validate that we have a map to handle the given HTTP method from input			if ($postMethod && isset($this->suffixMap[strtoupper($postMethod)]))			{				return ucfirst($this->suffixMap[strtoupper($postMethod)]);			}		}		return ucfirst($this->suffixMap[$this->input->getMethod()]);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Access * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JAccessRules class. * * @package     Joomla.Platform * @subpackage  Access * @since       11.4 */class JAccessRules{	/**	 * A named array.	 *	 * @var    array	 * @since  11.1	 */	protected $data = array();	/**	 * Constructor.	 *	 * The input array must be in the form: array('action' => array(-42 => true, 3 => true, 4 => false))	 * or an equivalent JSON encoded string, or an object where properties are arrays.	 *	 * @param   mixed  $input  A JSON format string (probably from the database) or a nested array.	 *	 * @since   11.1	 */	public function __construct($input = '')	{		// Convert in input to an array.		if (is_string($input))		{			$input = json_decode($input, true);		}		elseif (is_object($input))		{			$input = (array) $input;		}		if (is_array($input))		{			// Top level keys represent the actions.			foreach ($input as $action => $identities)			{				$this->mergeAction($action, $identities);			}		}	}	/**	 * Get the data for the action.	 *	 * @return  array  A named array of JAccessRule objects.	 *	 * @since   11.1	 */	public function getData()	{		return $this->data;	}	/**	 * Method to merge a collection of JAccessRules.	 *	 * @param   mixed  $input  JAccessRule or array of JAccessRules	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeCollection($input)	{		// Check if the input is an array.		if (is_array($input))		{			foreach ($input as $actions)			{				$this->merge($actions);			}		}	}	/**	 * Method to merge actions with this object.	 *	 * @param   mixed  $actions  JAccessRule object, an array of actions or a JSON string array of actions.	 *	 * @return  void	 *	 * @since   11.1	 */	public function merge($actions)	{		if (is_string($actions))		{			$actions = json_decode($actions, true);		}		if (is_array($actions))		{			foreach ($actions as $action => $identities)			{				$this->mergeAction($action, $identities);			}		}		elseif ($actions instanceof JAccessRules)		{			$data = $actions->getData();			foreach ($data as $name => $identities)			{				$this->mergeAction($name, $identities);			}		}	}	/**	 * Merges an array of identities for an action.	 *	 * @param   string  $action      The name of the action.	 * @param   array   $identities  An array of identities	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeAction($action, $identities)	{		if (isset($this->data[$action]))		{			// If exists, merge the action.			$this->data[$action]->mergeIdentities($identities);		}		else		{			// If new, add the action.			$this->data[$action] = new JAccessRule($identities);		}	}	/**	 * Checks that an action can be performed by an identity.	 *	 * The identity is an integer where +ve represents a user group,	 * and -ve represents a user.	 *	 * @param   string  $action    The name of the action.	 * @param   mixed   $identity  An integer representing the identity, or an array of identities	 *	 * @return  mixed   Object or null if there is no information about the action.	 *	 * @since   11.1	 */	public function allow($action, $identity)	{		// Check we have information about this action.		if (isset($this->data[$action]))		{			return $this->data[$action]->allow($identity);		}		return null;	}	/**	 * Get the allowed actions for an identity.	 *	 * @param   mixed  $identity  An integer representing the identity or an array of identities	 *	 * @return  object  Allowed actions for the identity or identities	 *	 * @since   11.1	 */	public function getAllowed($identity)	{		// Sweep for the allowed actions.		$allowed = new JObject;		foreach ($this->data as $name => &$action)		{			if ($action->allow($identity))			{				$allowed->set($name, true);			}		}		return $allowed;	}	/**	 * Magic method to convert the object to JSON string representation.	 *	 * @return  string  JSON representation of the actions array	 *	 * @since   11.1	 */	public function __toString()	{		$temp = array();		foreach ($this->data as $name => $rule)		{			// Convert the action to JSON, then back into an array otherwise			// re-encoding will quote the JSON for the identities in the action.			$temp[$name] = json_decode((string) $rule);		}		return json_encode($temp);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('bootstrap.tooltip');?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="login-form" class="form-inline">	<?php if ($params->get('pretext')) : ?>		<div class="pretext">		<p><?php echo $params->get('pretext'); ?></p>		</div>	<?php endif; ?>	<div class="userdata">		<div id="form-login-username" class="control-group">			<div class="controls">				<?php if (!$params->get('usetext')) : ?>					<div class="input-prepend input-append">						<span class="add-on">							<span class="icon-user tip" title="<?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?>"></span>							<label for="modlgn-username" class="element-invisible"><?php echo JText::_('MOD_LOGIN_VALUE_USERNAME'); ?></label>						</span>						<input id="modlgn-username" type="text" name="username" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?>" />					</div>				<?php else: ?>					<label for="modlgn-username"><?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?></label>						<input id="modlgn-username" type="text" name="username" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('MOD_LOGIN_VALUE_USERNAME') ?>" />				<?php endif; ?>			</div>		</div>		<div id="form-login-password" class="control-group">			<div class="controls">				<?php if (!$params->get('usetext')) : ?>					<div class="input-prepend input-append">						<span class="add-on">							<span class="icon-lock tip" title="<?php echo JText::_('JGLOBAL_PASSWORD') ?>">							</span>								<label for="modlgn-passwd" class="element-invisible"><?php echo JText::_('JGLOBAL_PASSWORD'); ?>							</label>						</span>						<input id="modlgn-passwd" type="password" name="password" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('JGLOBAL_PASSWORD') ?>" />				</div>				<?php else: ?>					<label for="modlgn-passwd"><?php echo JText::_('JGLOBAL_PASSWORD') ?></label>					<input id="modlgn-passwd" type="password" name="password" class="input-small" tabindex="0" size="18" placeholder="<?php echo JText::_('JGLOBAL_PASSWORD') ?>" />				<?php endif; ?>			</div>		</div>		<?php if (JPluginHelper::isEnabled('system', 'remember')) : ?>		<div id="form-login-remember" class="control-group checkbox">			<label for="modlgn-remember" class="control-label"><?php echo JText::_('MOD_LOGIN_REMEMBER_ME') ?></label> <input id="modlgn-remember" type="checkbox" name="remember" class="inputbox" value="yes"/>		</div>		<?php endif; ?>		<div id="form-login-submit" class="control-group">			<div class="controls">				<button type="submit" tabindex="0" name="Submit" class="btn btn-primary"><?php echo JText::_('JLOGIN') ?></button>			</div>		</div>		<?php			$usersConfig = JComponentHelper::getParams('com_users');			if ($usersConfig->get('allowUserRegistration')) : ?>			<ul class="unstyled">				<li>					<a href="<?php echo JRoute::_('index.php?option=com_users&view=registration'); ?>">					<?php echo JText::_('MOD_LOGIN_REGISTER'); ?> <span class="icon-arrow-right"></span></a>				</li>				<li>					<a href="<?php echo JRoute::_('index.php?option=com_users&view=remind'); ?>">					  <?php echo JText::_('MOD_LOGIN_FORGOT_YOUR_USERNAME'); ?></a>				</li>				<li>					<a href="<?php echo JRoute::_('index.php?option=com_users&view=reset'); ?>"><?php echo JText::_('MOD_LOGIN_FORGOT_YOUR_PASSWORD'); ?></a>				</li>			</ul>		<?php endif; ?>		<input type="hidden" name="option" value="com_users" />		<input type="hidden" name="task" value="user.login" />		<input type="hidden" name="return" value="<?php echo $return; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div>	<?php if ($params->get('posttext')) : ?>		<div class="posttext">		<p><?php echo $params->get('posttext'); ?></p>		</div>	<?php endif; ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the mod_popular functions only once.require_once __DIR__ . '/helper.php';// Get module data.$list = ModPopularHelper::getList($params);// Render the modulerequire JModuleHelper::getLayoutPath('mod_popular', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder.  You should use JApplicationWeb instead. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.3 * @deprecated  12.3 Use JApplicationWeb instead. */class JWeb extends JApplicationWeb{	/**	 * Class constructor.	 *	 * @param   mixed  $input   An optional argument to provide dependency injection for the application's	 *                          input object.  If the argument is a JInput object that object will become	 *                          the application's input object, otherwise a default input object is created.	 * @param   mixed  $config  An optional argument to provide dependency injection for the application's	 *                          config object.  If the argument is a JRegistry object that object will become	 *                          the application's config object, otherwise a default config object is created.	 * @param   mixed  $client  An optional argument to provide dependency injection for the application's	 *                          client object.  If the argument is a JApplicationWebClient object that object will become	 *                          the application's client object, otherwise a default client object is created.	 *	 * @since   11.3	 * @deprecated  12.3 Use JApplicationWeb instead.	 */	public function __construct(JInput $input = null, JRegistry $config = null, JApplicationWebClient $client = null)	{		JLog::add('JWeb is deprecated. Use JApplicationWeb instead.', JLog::WARNING, 'deprecated');		parent::__construct($input, $registry, $client);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input = JFactory::getApplication()->input;$task = $input->get('task');if ($task != 'login' && $task != 'logout'){	$input->set('task', '');	$task = '';}$controller = JControllerLegacy::getInstance('Login');$controller->execute($task);$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Environment * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Browser class, provides capability information about the current web client. * * Browser identification is performed by examining the HTTP_USER_AGENT * environment variable provided by the web server. * * This class has many influences from the lib/Browser.php code in * version 3 of Horde by Chuck Hagenbuch and Jon Parise. * * @package     Joomla.Platform * @subpackage  Environment * @since       11.1 */class JBrowser{	/**	 * @var    integer  Major version number	 * @since  12.1	 */	protected $majorVersion = 0;	/**	 * @var    integer  Minor version number	 * @since  12.1	 */	protected $minorVersion = 0;	/**	 * @var    string  Browser name.	 * @since  12.1	 */	protected $browser = '';	/**	 * @var    string  Full user agent string.	 * @since  12.1	 */	protected $agent = '';	/**	 * @var    string  Lower-case user agent string	 * @since  12.1	 */	protected $lowerAgent = '';	/**	 * @var    string  HTTP_ACCEPT string.	 * @since  12.1	 */	protected $accept = '';	/**	 * @var    array  Parsed HTTP_ACCEPT string	 * @since  12.1	 */	protected $acceptParsed = array();	/**	 * @var    string  Platform the browser is running on	 * @since  12.1	 */	protected $platform = '';	/**	 * @var    array  Known robots.	 * @since  12.1	 */	protected $robots = array(		/* The most common ones. */		'Googlebot',		'msnbot',		'Slurp',		'Yahoo',		/* The rest alphabetically. */		'Arachnoidea',		'ArchitextSpider',		'Ask Jeeves',		'B-l-i-t-z-Bot',		'Baiduspider',		'BecomeBot',		'cfetch',		'ConveraCrawler',		'ExtractorPro',		'FAST-WebCrawler',		'FDSE robot',		'fido',		'geckobot',		'Gigabot',		'Girafabot',		'grub-client',		'Gulliver',		'HTTrack',		'ia_archiver',		'InfoSeek',		'kinjabot',		'KIT-Fireball',		'larbin',		'LEIA',		'lmspider',		'Lycos_Spider',		'Mediapartners-Google',		'MuscatFerret',		'NaverBot',		'OmniExplorer_Bot',		'polybot',		'Pompos',		'Scooter',		'Teoma',		'TheSuBot',		'TurnitinBot',		'Ultraseek',		'ViolaBot',		'webbandit',		'www.almaden.ibm.com/cs/crawler',		'ZyBorg');	/**	 * @var    boolean  Is this a mobile browser?	 * @since  12.1	 */	protected $mobile = false;	/**	 * List of viewable image MIME subtypes.	 * This list of viewable images works for IE and Netscape/Mozilla.	 *	 * @var    array	 * @since  12.1	 */	protected $images = array('jpeg', 'gif', 'png', 'pjpeg', 'x-png', 'bmp');	/**	 * @var    array  JBrowser instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Create a browser instance (constructor).	 *	 * @param   string  $userAgent  The browser string to parse.	 * @param   string  $accept     The HTTP_ACCEPT settings to use.	 *	 * @since   11.1	 */	public function __construct($userAgent = null, $accept = null)	{		$this->match($userAgent, $accept);	}	/**	 * Returns the global Browser object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $userAgent  The browser string to parse.	 * @param   string  $accept     The HTTP_ACCEPT settings to use.	 *	 * @return JBrowser  The Browser object.	 *	 * @since  11.1	 */	static public function getInstance($userAgent = null, $accept = null)	{		$signature = serialize(array($userAgent, $accept));		if (empty(self::$instances[$signature]))		{			self::$instances[$signature] = new JBrowser($userAgent, $accept);		}		return self::$instances[$signature];	}	/**	 * Parses the user agent string and inititializes the object with	 * all the known features and quirks for the given browser.	 *	 * @param   string  $userAgent  The browser string to parse.	 * @param   string  $accept     The HTTP_ACCEPT settings to use.	 *	 * @return  void	 *	 * @since   11.1	 */	public function match($userAgent = null, $accept = null)	{		// Set our agent string.		if (is_null($userAgent))		{			if (isset($_SERVER['HTTP_USER_AGENT']))			{				$this->agent = trim($_SERVER['HTTP_USER_AGENT']);			}		}		else		{			$this->agent = $userAgent;		}		$this->lowerAgent = strtolower($this->agent);		// Set our accept string.		if (is_null($accept))		{			if (isset($_SERVER['HTTP_ACCEPT']))			{				$this->accept = strtolower(trim($_SERVER['HTTP_ACCEPT']));			}		}		else		{			$this->accept = strtolower($accept);		}		if (!empty($this->agent))		{			$this->_setPlatform();			if (strpos($this->lowerAgent, 'mobileexplorer') !== false				|| strpos($this->lowerAgent, 'openwave') !== false				|| strpos($this->lowerAgent, 'opera mini') !== false				|| strpos($this->lowerAgent, 'opera mobi') !== false				|| strpos($this->lowerAgent, 'operamini') !== false)			{				$this->mobile = true;			}			elseif (preg_match('|Opera[/ ]([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('opera');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);				/* Due to changes in Opera UA, we need to check Version/xx.yy,				 * but only if version is > 9.80. See: http://dev.opera.com/articles/view/opera-ua-string-changes/ */				if ($this->majorVersion == 9 && $this->minorVersion >= 80)				{					$this->identifyBrowserVersion();				}			}			elseif (preg_match('|Chrome[/ ]([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('chrome');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			}			elseif (preg_match('|CrMo[/ ]([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('chrome');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			}			elseif (strpos($this->lowerAgent, 'elaine/') !== false				|| strpos($this->lowerAgent, 'palmsource') !== false				|| strpos($this->lowerAgent, 'digital paths') !== false)			{				$this->setBrowser('palm');				$this->mobile = true;			}			elseif ((preg_match('|MSIE ([0-9.]+)|', $this->agent, $version)) || (preg_match('|Internet Explorer/([0-9.]+)|', $this->agent, $version)))			{				$this->setBrowser('msie');				if (strpos($version[1], '.') !== false)				{					list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);				}				else				{					$this->majorVersion = $version[1];					$this->minorVersion = 0;				}				/* Some Handhelds have their screen resolution in the				 * user agent string, which we can use to look for				 * mobile agents.				 */				if (preg_match('/; (120x160|240x280|240x320|320x320)\)/', $this->agent))				{					$this->mobile = true;				}			}			elseif (preg_match('|amaya/([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('amaya');				$this->majorVersion = $version[1];				if (isset($version[2]))				{					$this->minorVersion = $version[2];				}			}			elseif (preg_match('|ANTFresco/([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('fresco');			}			elseif (strpos($this->lowerAgent, 'avantgo') !== false)			{				$this->setBrowser('avantgo');				$this->mobile = true;			}			elseif (preg_match('|Konqueror/([0-9]+)|', $this->agent, $version) || preg_match('|Safari/([0-9]+)\.?([0-9]+)?|', $this->agent, $version))			{				// Konqueror and Apple's Safari both use the KHTML				// rendering engine.				$this->setBrowser('konqueror');				$this->majorVersion = $version[1];				if (isset($version[2]))				{					$this->minorVersion = $version[2];				}				if (strpos($this->agent, 'Safari') !== false && $this->majorVersion >= 60)				{					// Safari.					$this->setBrowser('safari');					$this->identifyBrowserVersion();				}			}			elseif (preg_match('|Mozilla/([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('mozilla');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			}			elseif (preg_match('|Lynx/([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('lynx');			}			elseif (preg_match('|Links \(([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('links');			}			elseif (preg_match('|HotJava/([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('hotjava');			}			elseif (strpos($this->agent, 'UP/') !== false || strpos($this->agent, 'UP.B') !== false || strpos($this->agent, 'UP.L') !== false)			{				$this->setBrowser('up');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Xiino/') !== false)			{				$this->setBrowser('xiino');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Palmscape/') !== false)			{				$this->setBrowser('palmscape');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Nokia') !== false)			{				$this->setBrowser('nokia');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Ericsson') !== false)			{				$this->setBrowser('ericsson');				$this->mobile = true;			}			elseif (strpos($this->lowerAgent, 'wap') !== false)			{				$this->setBrowser('wap');				$this->mobile = true;			}			elseif (strpos($this->lowerAgent, 'docomo') !== false || strpos($this->lowerAgent, 'portalmmm') !== false)			{				$this->setBrowser('imode');				$this->mobile = true;			}			elseif (strpos($this->agent, 'BlackBerry') !== false)			{				$this->setBrowser('blackberry');				$this->mobile = true;			}			elseif (strpos($this->agent, 'MOT-') !== false)			{				$this->setBrowser('motorola');				$this->mobile = true;			}			elseif (strpos($this->lowerAgent, 'j-') !== false)			{				$this->setBrowser('mml');				$this->mobile = true;			}		}	}	/**	 * Match the platform of the browser.	 *	 * This is a pretty simplistic implementation, but it's intended	 * to let us tell what line breaks to send, so it's good enough	 * for its purpose.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _setPlatform()	{		if (strpos($this->lowerAgent, 'wind') !== false)		{			$this->platform = 'win';		}		elseif (strpos($this->lowerAgent, 'mac') !== false)		{			$this->platform = 'mac';		}		else		{			$this->platform = 'unix';		}	}	/**	 * Return the currently matched platform.	 *	 * @return  string  The user's platform.	 *	 * @since   11.1	 */	public function getPlatform()	{		return $this->platform;	}	/**	 * Set browser version, not by engine version	 * Fallback to use when no other method identify the engine version	 *	 * @return void	 */	protected function identifyBrowserVersion()	{		if (preg_match('|Version[/ ]([0-9.]+)|', $this->agent, $version))		{			list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			return;		}		// Can't identify browser version		$this->majorVersion = 0;		$this->minorVersion = 0;		JLog::add("Can't identify browser version. Agent: " . $this->agent, JLog::NOTICE);	}	/**	 * Sets the current browser.	 *	 * @param   string  $browser  The browser to set as current.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setBrowser($browser)	{		$this->browser = $browser;	}	/**	 * Retrieve the current browser.	 *	 * @return  string  The current browser.	 *	 * @since   11.1	 */	public function getBrowser()	{		return $this->browser;	}	/**	 * Retrieve the current browser's major version.	 *	 * @return  integer  The current browser's major version	 *	 * @since   11.1.	 */	public function getMajor()	{		return $this->majorVersion;	}	/**	 * Retrieve the current browser's minor version.	 *	 * @return  integer  The current browser's minor version.	 *	 * @since   11.1	 */	public function getMinor()	{		return $this->minorVersion;	}	/**	 * Retrieve the current browser's version.	 *	 * @return  string  The current browser's version.	 *	 * @since   11.1	 */	public function getVersion()	{		return $this->majorVersion . '.' . $this->minorVersion;	}	/**	 * Return the full browser agent string.	 *	 * @return  string  The browser agent string	 *	 * @since   11.1	 */	public function getAgentString()	{		return $this->agent;	}	/**	 * Returns the server protocol in use on the current server.	 *	 * @return  string  The HTTP server protocol version.	 *	 * @since   11.1	 */	public function getHTTPProtocol()	{		if (isset($_SERVER['SERVER_PROTOCOL']))		{			if (($pos = strrpos($_SERVER['SERVER_PROTOCOL'], '/')))			{				return substr($_SERVER['SERVER_PROTOCOL'], $pos + 1);			}		}		return null;	}	/**	 * Determines if a browser can display a given MIME type.	 *	 * Note that  image/jpeg and image/pjpeg *appear* to be the same	 * entity, but Mozilla doesn't seem to want to accept the latter.	 * For our purposes, we will treat them the same.	 *	 * @param   string  $mimetype  The MIME type to check.	 *	 * @return  boolean  True if the browser can display the MIME type.	 *	 * @since   11.1	 */	public function isViewable($mimetype)	{		$mimetype = strtolower($mimetype);		list ($type, $subtype) = explode('/', $mimetype);		if (!empty($this->accept))		{			$wildcard_match = false;			if (strpos($this->accept, $mimetype) !== false)			{				return true;			}			if (strpos($this->accept, '*/*') !== false)			{				$wildcard_match = true;				if ($type != 'image')				{					return true;				}			}			// Deal with Mozilla pjpeg/jpeg issue			if ($this->isBrowser('mozilla') && ($mimetype == 'image/pjpeg') && (strpos($this->accept, 'image/jpeg') !== false))			{				return true;			}			if (!$wildcard_match)			{				return false;			}		}		if (!$this->hasFeature('images') || ($type != 'image'))		{			return false;		}		return (in_array($subtype, $this->images));	}	/**	 * Determine if the given browser is the same as the current.	 *	 * @param   string  $browser  The browser to check.	 *	 * @return  boolean  Is the given browser the same as the current?	 *	 * @since   11.1	 */	public function isBrowser($browser)	{		return ($this->browser === $browser);	}	/**	 * Determines if the browser is a robot or not.	 *	 * @return  boolean  True if browser is a known robot.	 *	 * @since   11.1	 */	public function isRobot()	{		foreach ($this->robots as $robot)		{			if (strpos($this->agent, $robot) !== false)			{				return true;			}		}		return false;	}	/**	 * Determines if the browser is mobile version or not.	 *	 * @return boolean  True if browser is a known mobile version.	 *	 * @since   11.1	 */	public function isMobile()	{		return $this->mobile;	}	/**	 * Determine if we are using a secure (SSL) connection.	 *	 * @return  boolean  True if using SSL, false if not.	 *	 * @since   11.1	 * @deprecated  13.3  Use the isSSLConnection method on the application object.	 */	public function isSSLConnection()	{		JLog::add('JBrowser::isSSLConnection() is deprecated. Use the isSSLConnection method on the application object instead.',			JLog::WARNING, 'deprecated');		return ((isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on')) || getenv('SSL_PROTOCOL_VERSION'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));JText::script('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'filters.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=filters');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_FILTERS')); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_FILTERS')); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state"><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'); ?></label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="title created-by-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by_alias', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_TIMESTAMP', 'a.created', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_MAP_COUNT', 'a.map_count', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.filter_id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php if (count($this->items) == 0) : ?>			<tr class="row0">				<td class="center" colspan="7">					<?php					if ($this->total == 0):						echo JText::_('COM_FINDER_NO_FILTERS');						?>						<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.add'); ?>" title="<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>">							<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>						</a>						<?php					else:						echo JText::_('COM_FINDER_NO_RESULTS');					endif;					?>				</td>			</tr>		<?php endif; ?>		<?php foreach ($this->items as $i => $item) :			$canCreate  = $user->authorise('core.create',     'com_finder');			$canEdit    = $user->authorise('core.edit',       'com_finder');			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $filter->checked_out == $user->get('id') || $filter->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_finder') && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->filter_id); ?>				</th>				<td>					<?php if ($item->checked_out)					{						echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'filters.', $canCheckin);					} ?>					<?php if ($canEdit) { ?>						<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.edit&filter_id=' . (int) $item->filter_id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php } else {							echo $this->escape($item->title);					} ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'filters.', $canChange); ?>				</td>				<td class="center nowrap">					<?php echo $item->created_by_alias ? $item->created_by_alias : $item->user_name; ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center nowrap">					<?php echo $item->map_count; ?>				</td>				<td class="center">					<?php echo (int) $item->filter_id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php JLoader::register('TagsHelperRoute', JPATH_BASE . '/components/com_tags/helpers/route.php'); ?><div class="tagssimilar<?php echo $moduleclass_sfx; ?>"><?php if ($list) : ?>	<ul>	<?php foreach ($list as $i => $item) : ?>		<li>			<?php $item->route = new JHelperRoute; ?>			<a href="<?php echo JRoute::_(TagsHelperRoute::getItemRoute($item->content_item_id, $item->core_alias, $item->core_catid, $item->core_language, $item->type_alias, $item->router)); ?>">				<?php if (!empty($item->core_title)) :					echo htmlspecialchars($item->core_title);				endif; ?>			</a>		</li>	<?php endforeach; ?>	</ul><?php else : ?>	<span><?php echo JText::_('MOD_TAGS_SIMILAR_NO_MATCHING_TAGS'); ?></span><?php endif; ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML helper class for rendering telephone numbers. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlTel{	/**	 * Converts strings of integers into more readable telephone format	 *	 * By default, the ITU-T format will automatically be used.	 * However, one of the allowed unit types may also be used instead.	 *	 * @param   integer  $number       The integers in a phone number with dot separated country code	 *                                 ccc.nnnnnnn where ccc represents country code and nnn represents the local number.	 * @param   string   $displayplan  The numbering plan used to display the numbers.	 *	 * @return  string  The formatted telephone number.	 *	 * @since   11.1	 *	 * @see     JFormRuleTel	 */	public static function tel($number, $displayplan)	{		$number = explode('.', $number);		$countrycode = $number[0];		$number = $number[1];		if ($displayplan == 'ITU-T' || $displayplan == 'International' || $displayplan == 'int' || $displayplan == 'missdn' || $displayplan == null)		{			$display[0] = '+';			$display[1] = $countrycode;			$display[2] = ' ';			$display[3] = implode(str_split($number, 2), ' ');		}		elseif ($displayplan == 'NANP' || $displayplan == 'northamerica' || $displayplan == 'US')		{			$display[0] = '(';			$display[1] = substr($number, 0, 3);			$display[2] = ') ';			$display[3] = substr($number, 3, 3);			$display[4] = '-';			$display[5] = substr($number, 6, 4);		}		elseif ($displayplan == 'EPP' || $displayplan == 'IETF')		{			$display[0] = '+';			$display[1] = $countrycode;			$display[2] = '.';			$display[3] = $number;		}		elseif ($displayplan == 'ARPA' || $displayplan == 'ENUM')		{			$number = implode(str_split(strrev($number), 1), '.');			$display[0] = '+';			$display[1] = $number;			$display[2] = '.';			$display[3] = $countrycode;			$display[4] = '.e164.arpa';		}		$display = implode($display, '');		return $display;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Cookie Class * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 */class JInputCookie extends JInput{	/**	 * Constructor.	 *	 * @param   array  $source   Ignored.	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   11.1	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		// Set the data source.		$this->data = & $_COOKIE;		// Set the options for the class.		$this->options = $options;	}	/**	 * Sets a value	 *	 * @param   string   $name      Name of the value to set.	 * @param   mixed    $value     Value to assign to the input.	 * @param   integer  $expire    The time the cookie expires. This is a Unix timestamp so is in number	 *                              of seconds since the epoch. In other words, you'll most likely set this	 *                              with the time() function plus the number of seconds before you want it	 *                              to expire. Or you might use mktime(). time()+60*60*24*30 will set the	 *                              cookie to expire in 30 days. If set to 0, or omitted, the cookie will	 *                              expire at the end of the session (when the browser closes).	 * @param   string   $path      The path on the server in which the cookie will be available on. If set	 *                              to '/', the cookie will be available within the entire domain. If set to	 *                              '/foo/', the cookie will only be available within the /foo/ directory and	 *                              all sub-directories such as /foo/bar/ of domain. The default value is the	 *                              current directory that the cookie is being set in.	 * @param   string   $domain    The domain that the cookie is available to. To make the cookie available	 *                              on all subdomains of example.com (including example.com itself) then you'd	 *                              set it to '.example.com'. Although some browsers will accept cookies without	 *                              the initial ., RFC 2109 requires it to be included. Setting the domain to	 *                              'www.example.com' or '.www.example.com' will make the cookie only available	 *                              in the www subdomain.	 * @param   boolean  $secure    Indicates that the cookie should only be transmitted over a secure HTTPS	 *                              connection from the client. When set to TRUE, the cookie will only be set	 *                              if a secure connection exists. On the server-side, it's on the programmer	 *                              to send this kind of cookie only on secure connection (e.g. with respect	 *                              to $_SERVER["HTTPS"]).	 * @param   boolean  $httpOnly  When TRUE the cookie will be made accessible only through the HTTP protocol.	 *                              This means that the cookie won't be accessible by scripting languages, such	 *                              as JavaScript. This setting can effectively help to reduce identity theft	 *                              through XSS attacks (although it is not supported by all browsers).	 *	 * @return  void	 *	 * @link    http://www.ietf.org/rfc/rfc2109.txt	 * @see     setcookie()	 * @since   11.1	 */	public function set($name, $value, $expire = 0, $path = '', $domain = '', $secure = false, $httpOnly = false)	{		setcookie($name, $value, $expire, $path, $domain, $secure, $httpOnly);		$this->data[$name] = $value;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');// Import the com_menus helper.require_once realpath(JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Supports an HTML select list of menus * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6 */class JFormFieldMenu extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'Menu';	/**	 * Method to get the list of menus for the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   1.6	 */	protected function getOptions()	{		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), JHtml::_('menu.menus'));		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Access * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JAccessRule class. * * @package     Joomla.Platform * @subpackage  Access * @since       11.4 */class JAccessRule{	/**	 * A named array	 *	 * @var    array	 * @since  11.1	 */	protected $data = array();	/**	 * Constructor.	 *	 * The input array must be in the form: array(-42 => true, 3 => true, 4 => false)	 * or an equivalent JSON encoded string.	 *	 * @param   mixed  $identities  A JSON format string (probably from the database) or a named array.	 *	 * @since   11.1	 */	public function __construct($identities)	{		// Convert string input to an array.		if (is_string($identities))		{			$identities = json_decode($identities, true);		}		$this->mergeIdentities($identities);	}	/**	 * Get the data for the action.	 *	 * @return  array  A named array	 *	 * @since   11.1	 */	public function getData()	{		return $this->data;	}	/**	 * Merges the identities	 *	 * @param   mixed  $identities  An integer or array of integers representing the identities to check.	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeIdentities($identities)	{		if ($identities instanceof JAccessRule)		{			$identities = $identities->getData();		}		if (is_array($identities))		{			foreach ($identities as $identity => $allow)			{				$this->mergeIdentity($identity, $allow);			}		}	}	/**	 * Merges the values for an identity.	 *	 * @param   integer  $identity  The identity.	 * @param   boolean  $allow     The value for the identity (true == allow, false == deny).	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeIdentity($identity, $allow)	{		$identity = (int) $identity;		$allow = (int) ((boolean) $allow);		// Check that the identity exists.		if (isset($this->data[$identity]))		{			// Explicit deny always wins a merge.			if ($this->data[$identity] !== 0)			{				$this->data[$identity] = $allow;			}		}		else		{			$this->data[$identity] = $allow;		}	}	/**	 * Checks that this action can be performed by an identity.	 *	 * The identity is an integer where +ve represents a user group,	 * and -ve represents a user.	 *	 * @param   mixed  $identities  An integer or array of integers representing the identities to check.	 *	 * @return  mixed  True if allowed, false for an explicit deny, null for an implicit deny.	 *	 * @since   11.1	 */	public function allow($identities)	{		// Implicit deny by default.		$result = null;		// Check that the inputs are valid.		if (!empty($identities))		{			if (!is_array($identities))			{				$identities = array($identities);			}			foreach ($identities as $identity)			{				// Technically the identity just needs to be unique.				$identity = (int) $identity;				// Check if the identity is known.				if (isset($this->data[$identity]))				{					$result = (boolean) $this->data[$identity];					// An explicit deny wins.					if ($result === false)					{						break;					}				}			}		}		return $result;	}	/**	 * Convert this object into a JSON encoded string.	 *	 * @return  string  JSON encoded string	 *	 * @since   11.1	 */	public function __toString()	{		return json_encode($this->data);	}}
<?php/** * Joomla_Sniffs_ControlStructures_InlineControlStructureSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: InlineControlStructureSniff.php 258843 2008-05-01 00:49:32Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_ControlStructures_InlineControlStructureSniff. * * Verifies that inline control statements are not present. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_InlineControlStructureSniff extends Generic_Sniffs_ControlStructures_InlineControlStructureSniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',                                  );    /**     * If true, an error will be thrown; otherwise a warning.     *     * @var bool     */    public $error = false;    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(                T_IF,                T_ELSE,                T_FOREACH,                T_WHILE,                T_DO,                T_SWITCH,                T_FOR,               );    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        if (isset($tokens[$stackPtr]['scope_opener']) === false) {            // Ignore the ELSE in ELSE IF. We'll process the IF part later.            if (($tokens[$stackPtr]['code'] === T_ELSE) && ($tokens[($stackPtr + 2)]['code'] === T_IF)) {                return;            }            if ($tokens[$stackPtr]['code'] === T_WHILE) {                // This could be from a DO WHILE, which doesn't have an opening brace.                $lastContent = $phpcsFile->findPrevious(T_WHITESPACE, ($stackPtr - 1), null, true);                if ($tokens[$lastContent]['code'] === T_CLOSE_CURLY_BRACKET) {                    $brace = $tokens[$lastContent];                    if (isset($brace['scope_condition']) === true) {                        $condition = $tokens[$brace['scope_condition']];                        if ($condition['code'] === T_DO) {                            return;                        }                    }                }            }            // This is a control structure without an opening brace,            // so it is an inline statement.            if ($this->error === true) {                $phpcsFile->addError('Inline control structures are not allowed', $stackPtr, 'NotAllowed');            } else {                $phpcsFile->addWarning('Inline control structures are discouraged', $stackPtr, 'Discouraged');            }            return;        }//end if    }//end process()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100">	<fieldset title="<?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?>" class="adminform">		<legend><?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?></legend>		<?php echo JText::_('COM_CONFIG_FTP_DETAILS_TIP'); ?>		<?php if ($this->ftp instanceof Exception) : ?>			<p><?php echo JText::_($this->ftp->message); ?></p>		<?php endif; ?>		<ul class="adminformlist">		<li><label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>		<input type="text" id="username" name="username" class="input_box" size="70" value="" /></li>		<li><label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>		<input type="password" id="password" name="password" class="input_box" size="70" value="" /></li>		</ul>	</fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note. It is important to remove spaces between elements.$class = $item->anchor_css ? 'class="'.$item->anchor_css.'" ' : '';$title = $item->anchor_title ? 'title="'.$item->anchor_title.'" ' : '';if ($item->menu_image)	{		$item->params->get('menu_text', 1) ?		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" /><span class="image-title">'.$item->title.'</span> ' :		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" />';}else { $linktype = $item->title;}switch ($item->browserNav) :	default:	case 0:?><a <?php echo $class; ?>href="<?php echo $item->flink; ?>" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;	case 1:		// _blank?><a <?php echo $class; ?>href="<?php echo $item->flink; ?>" target="_blank" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;	case 2:	// window.open?><a <?php echo $class; ?>href="<?php echo $item->flink; ?>" onclick="window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes');return false;" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;endswitch;
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strcspn* Find length of initial segment not matching mask* Note: requires utf8_strlen and utf8_substr (if start, length are used)* @param string* @return int* @see http://www.php.net/strcspn* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_strcspn($str, $mask, $start = NULL, $length = NULL) {    if ( empty($mask) || strlen($mask) == 0 ) {        return NULL;    }    $mask = preg_replace('!([\\\\\\-\\]\\[/^])!','\\\${1}',$mask);    if ( $start !== NULL || $length !== NULL ) {        $str = utf8_substr($str, $start, $length);    }    preg_match('/^[^'.$mask.']+/u',$str, $matches);    if ( isset($matches[0]) ) {        return utf8_strlen($matches[0]);    }    return 0;}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform class for interacting with a GitHub server instance. * * @property-read  JGithubGists    $gists    GitHub API object for gists. * @property-read  JGithubIssues   $issues   GitHub API object for issues. * @property-read  JGithubPulls    $pulls    GitHub API object for pulls. * @property-read  JGithubRefs     $refs     GitHub API object for referencess. * @property-read  JGithubForks    $forks    GitHub API object for forks. * @property-read  JGithubCommits  $commits  GitHub API object for commits. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithub{	/**	 * @var    JRegistry  Options for the GitHub object.	 * @since  11.3	 */	protected $options;	/**	 * @var    JGithubHttp  The HTTP client object to use in sending HTTP requests.	 * @since  11.3	 */	protected $client;	/**	 * @var    JGithubGists  GitHub API object for gists.	 * @since  11.3	 */	protected $gists;	/**	 * @var    JGithubIssues  GitHub API object for issues.	 * @since  11.3	 */	protected $issues;	/**	 * @var    JGithubPulls  GitHub API object for pulls.	 * @since  11.3	 */	protected $pulls;	/**	 * @var    JGithubRefs  GitHub API object for referencess.	 * @since  11.3	 */	protected $refs;	/**	 * @var    JGithubForks  GitHub API object for forks.	 * @since  11.3	 */	protected $forks;	/**	 * @var    JGithubCommits  GitHub API object for commits.	 * @since  12.1	 */	protected $commits;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  GitHub options object.	 * @param   JGithubHttp  $client   The HTTP client object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JGithubHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JGithubHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'https://api.github.com');	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JGithubObject  GitHub API object (gists, issues, pulls, etc).	 *	 * @since   11.3	 */	public function __get($name)	{		if ($name == 'gists')		{			if ($this->gists == null)			{				$this->gists = new JGithubGists($this->options, $this->client);			}			return $this->gists;		}		if ($name == 'issues')		{			if ($this->issues == null)			{				$this->issues = new JGithubIssues($this->options, $this->client);			}			return $this->issues;		}		if ($name == 'pulls')		{			if ($this->pulls == null)			{				$this->pulls = new JGithubPulls($this->options, $this->client);			}			return $this->pulls;		}		if ($name == 'refs')		{			if ($this->refs == null)			{				$this->refs = new JGithubRefs($this->options, $this->client);			}			return $this->refs;		}		if ($name == 'forks')		{			if ($this->forks == null)			{				$this->forks = new JGithubForks($this->options, $this->client);			}			return $this->forks;		}		if ($name == 'commits')		{			if ($this->commits == null)			{				$this->commits = new JGithubCommits($this->options, $this->client);			}			return $this->commits;		}	}	/**	 * Get an option from the JGitHub instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   11.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGitHub instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGitHub  This object for method chaining.	 *	 * @since   11.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Account class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.3 */class JGithubAccount extends JGithubObject{	/**	 * Method to create an authorisation.	 *	 * @param   array   $scopes  A list of scopes that this authorisation is in.	 * @param   string  $note    A note to remind you what the OAuth token is for.	 * @param   string  $url     A URL to remind you what app the OAuth token is for.	 *	 * @return  object	 *	 * @since   12.3	 */	public function createAuthorisation(array $scopes = array(), $note = '', $url = '')	{		// Build the request path.		$path = '/authorizations';		$data = json_encode(			array('scopes' => $scopes, 'note' => $note, 'note_url' => $url)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete an authorisation	 *	 * @param   integer  $id  ID of the authorisation to delete	 *	 * @return  object	 *	 * @since   12.3	 */	public function deleteAuthorisation($id)	{		// Build the request path.		$path = '/authorizations/' . $id;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to edit an authorisation.	 *	 * @param   integer  $id            ID of the authorisation to edit	 * @param   array    $scopes        Replaces the authorisation scopes with these.	 * @param   array    $addScopes     A list of scopes to add to this authorisation.	 * @param   array    $removeScopes  A list of scopes to remove from this authorisation.	 * @param   string   $note          A note to remind you what the OAuth token is for.	 * @param   string   $url           A URL to remind you what app the OAuth token is for.	 *	 * @return  object	 *	 * @since   12.3	 * @throws  RuntimeException	 */	public function editAuthorisation($id, array $scopes = array(), array $addScopes = array(), array $removeScopes = array(), $note = '', $url = '')	{		// Check if more than one scopes array contains data		$scopesCount = 0;		if (!empty($scopes))		{			$scope = 'scopes';			$scopeData = $scopes;			$scopesCount++;		}		if (!empty($addScopes))		{			$scope = 'add_scopes';			$scopeData = $addScopes;			$scopesCount++;		}		if (!empty($removeScopes))		{			$scope = 'remove_scopes';			$scopeData = $removeScopes;			$scopesCount++;		}		// Only allowed to send data for one scope parameter		if ($scopesCount >= 2)		{			throw new RuntimeException('You can only send one scope key in this request.');		}		// Build the request path.		$path = '/authorizations/' . $id;		$data = json_encode(			array(				$scope => $scopeData,				'note' => $note,				'note_url' => $url			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get details about an authorised application for the authenticated user.	 *	 * @param   integer  $id  ID of the authorisation to retrieve	 *	 * @return  object	 *	 * @since   12.3	 * @note    This method will only accept Basic Authentication	 */	public function getAuthorisation($id)	{		// Build the request path.		$path = '/authorizations/' . $id;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the authorised applications for the authenticated user.	 *	 * @return  object	 *	 * @since   12.3	 * @note    This method will only accept Basic Authentication	 */	public function getAuthorisations()	{		// Build the request path.		$path = '/authorizations';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the rate limit for the authenticated user.	 *	 * @return  object	 *	 * @since   12.3	 */	public function getRateLimit()	{		// Build the request path.		$path = '/rate_limit';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Dispatcher * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder.  You should use JEventDispatcher instead. * * @package     Joomla.Legacy * @subpackage  Dispatcher * @since       11.1 * @deprecated  12.3 */class JDispatcher extends JEventDispatcher{	/**	 * Constructor.	 *	 * @since   11.1	 */	public function __construct()	{		JLog::add('JDispatcher is deprecated. Use JEventDispatcher instead.', JLog::WARNING, 'deprecated');		parent::__construct();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (JPluginHelper::isEnabled('user', 'profile')) :	$fields = $this->item->profile->getFieldset('profile'); ?><div class="contact-profile" id="users-profile-custom">	<dl class="dl-horizontal">	<?php foreach ($fields as $profile) :		if ($profile->value) :			echo '<dt>'.$profile->label.'</dt>';			$profile->text = htmlspecialchars($profile->value, ENT_COMPAT, 'UTF-8');			switch ($profile->id) :				case "profile_website" :					$v_http = substr($profile->profile_value, 0, 4);					if ($v_http == "http") :						echo '<dd><a href="'.$profile->text.'">'.$profile->text.'</a></dd>';					else :						echo '<dd><a href="http://'.$profile->text.'">'.$profile->text.'</a></dd>';					endif;					break;				default:					echo '<dd>'.$profile->text.'</dd>';					break;			endswitch;		endif;	endforeach; ?>	</dl></div><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JHtml::_('behavior.framework');JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::stylesheet('com_finder/finder.css', false, true, false);?><div class="finder<?php echo $this->pageclass_sfx; ?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php if ($this->escape($this->params->get('page_heading'))) : ?>		<?php echo $this->escape($this->params->get('page_heading')); ?>	<?php else : ?>		<?php echo $this->escape($this->params->get('page_title')); ?>	<?php endif; ?></h1><?php endif; ?><?php if ($this->params->get('show_search_form', 1)) : ?>	<div id="search-form">		<?php echo $this->loadTemplate('form'); ?>	</div><?php endif;// Load the search results layout if we are performing a search.if ($this->query->search === true):?>	<div id="search-results">		<?php echo $this->loadTemplate('results'); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'installed';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$view   = $this->input->get('view', 'languages');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'language' && $layout == 'edit' && !$this->checkEditId('com_languages.edit.language', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_languages&view=languages', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Data * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JData is a class that is used to store data but allowing you to access the data * by mimicking the way PHP handles class properties. * * @package     Joomla.Platform * @subpackage  Data * @since       12.3 */class JData implements JDataDumpable, IteratorAggregate, JsonSerializable, Countable{	/**	 * The data properties.	 *	 * @var    array	 * @since  12.3	 */	private $_properties = array();	/**	 * The class constructor.	 *	 * @param   mixed  $properties  Either an associative array or another object	 *                              by which to set the initial properties of the new object.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public function __construct($properties = array())	{		// Check the properties input.		if (!empty($properties))		{			// Bind the properties.			$this->bind($properties);		}	}	/**	 * The magic get method is used to get a data property.	 *	 * This method is a public proxy for the protected getProperty method.	 *	 * Note: Magic __get does not allow recursive calls. This can be tricky because the error generated by recursing into	 * __get is "Undefined property:  {CLASS}::{PROPERTY}" which is misleading. This is relevant for this class because	 * requesting a non-visible property can trigger a call to a sub-function. If that references the property directly in	 * the object, it will cause a recursion into __get.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  mixed  The value of the data property, or null if the data property does not exist.	 *	 * @see     JData::getProperty()	 * @since   12.3	 */	public function __get($property)	{		return $this->getProperty($property);	}	/**	 * The magic isset method is used to check the state of an object property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  boolean  True if set, otherwise false is returned.	 *	 * @since   12.3	 */	public function __isset($property)	{		return isset($this->_properties[$property]);	}	/**	 * The magic set method is used to set a data property.	 *	 * This is a public proxy for the protected setProperty method.	 *	 * @param   string  $property  The name of the data property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  void	 *	 * @see     JData::setProperty()	 * @since   12.3	 */	public function __set($property, $value)	{		$this->setProperty($property, $value);	}	/**	 * The magic unset method is used to unset a data property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __unset($property)	{		unset($this->_properties[$property]);	}	/**	 * Binds an array or object to this object.	 *	 * @param   mixed    $properties   An associative array of properties or an object.	 * @param   boolean  $updateNulls  True to bind null values, false to ignore null values.	 *	 * @return  JData  Returns itself to allow chaining.	 *	 * @since   12.3	 * @throws  InvalidArgumentException	 */	public function bind($properties, $updateNulls = true)	{		// Check the properties data type.		if (!is_array($properties) && !is_object($properties))		{			throw new InvalidArgumentException(sprintf('%s(%s)', __METHOD__, gettype($properties)));		}		// Check if the object is traversable.		if ($properties instanceof Traversable)		{			// Convert iterator to array.			$properties = iterator_to_array($properties);		}		// Check if the object needs to be converted to an array.		elseif (is_object($properties))		{			// Convert properties to an array.			$properties = (array) $properties;		}		// Bind the properties.		foreach ($properties as $property => $value)		{			// Check if the value is null and should be bound.			if ($value === null && !$updateNulls)			{				continue;			}			// Set the property.			$this->setProperty($property, $value);		}		return $this;	}	/**	 * Dumps the data properties into a stdClass object, recursively if appropriate.	 *	 * @param   integer           $depth   The maximum depth of recursion (default = 3).	 *                                     For example, a depth of 0 will return a stdClass with all the properties in native	 *                                     form. A depth of 1 will recurse into the first level of properties only.	 * @param   SplObjectStorage  $dumped  An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  stdClass  The data properties as a simple PHP stdClass object.	 *	 * @since   12.3	 */	public function dump($depth = 3, SplObjectStorage $dumped = null)	{		// Check if we should initialise the recursion tracker.		if ($dumped === null)		{			$dumped = new SplObjectStorage;		}		// Add this object to the dumped stack.		$dumped->attach($this);		// Setup a container.		$dump = new stdClass;		// Dump all object properties.		foreach (array_keys($this->_properties) as $property)		{			// Get the property.			$dump->$property = $this->dumpProperty($property, $depth, $dumped);		}		return $dump;	}	/**	 * Gets this object represented as an ArrayIterator.	 *	 * This allows the data properties to be access via a foreach statement.	 *	 * @return  ArrayIterator  This object represented as an ArrayIterator.	 *	 * @see     IteratorAggregate::getIterator()	 * @since   12.3	 */	public function getIterator()	{		return new ArrayIterator($this->dump(0));	}	/**	 * Gets the data properties in a form that can be serialised to JSON format.	 *	 * @return  string  An object that can be serialised by json_encode().	 *	 * @since   12.3	 */	public function jsonSerialize()	{		return $this->dump();	}	/**	 * Dumps a data property.	 *	 * If recursion is set, this method will dump any object implementing JDumpable (like JData and JDataSet); it will	 * convert a JDate object to a string; and it will convert a JRegistry to an object.	 *	 * @param   string            $property  The name of the data property.	 * @param   integer           $depth     The current depth of recursion (a value of 0 will ignore recursion).	 * @param   SplObjectStorage  $dumped    An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  mixed  The value of the dumped property.	 *	 * @since   12.3	 */	protected function dumpProperty($property, $depth, SplObjectStorage $dumped)	{		$value = $this->getProperty($property);		if ($depth > 0)		{			// Check if the object is also an dumpable object.			if ($value instanceof JDataDumpable)			{				// Do not dump the property if it has already been dumped.				if (!$dumped->contains($value))				{					$value = $value->dump($depth - 1, $dumped);				}			}			// Check if the object is a date.			if ($value instanceof JDate)			{				$value = (string) $value;			}			// Check if the object is a registry.			elseif ($value instanceof JRegistry)			{				$value = $value->toObject();			}		}		return $value;	}	/**	 * Gets a data property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  mixed  The value of the data property.	 *	 * @see     JData::__get()	 * @since   12.3	 */	protected function getProperty($property)	{		// Get the raw value.		$value = array_key_exists($property, $this->_properties) ? $this->_properties[$property] : null;		return $value;	}	/**	 * Sets a data property.	 *	 * If the name of the property starts with a null byte, this method will return null.	 *	 * @param   string  $property  The name of the data property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  mixed  The value of the data property.	 *	 * @see     JData::__set()	 * @since   12.3	 */	protected function setProperty($property, $value)	{		/*		 * Check if the property starts with a null byte. If so, discard it because a later attempt to try to access it		 * can cause a fatal error. See http://us3.php.net/manual/en/language.types.array.php#language.types.array.casting		 */		if (strpos($property, "\0") === 0)		{			return null;		}		// Set the value.		$this->_properties[$property] = $value;		return $value;	}	/**	 * Count the number of data properties.	 *	 * @return  integer  The number of data properties.	 *	 * @since   12.3	 */	public function count()	{		return count($this->_properties);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Triple DES encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipher3DES extends JCryptCipherMcrypt{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type = MCRYPT_3DES;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode = MCRYPT_MODE_CBC;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType = '3des';}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher interface. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */interface JCryptCipher{	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 */	public function decrypt($data, JCryptKey $key);	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 */	public function encrypt($data, JCryptKey $key);	/**	 * Method to generate a new encryption key[/pair] object.	 * 	 * @param   array  $options  Key generation options.	 * 	 * @return  JCryptKey	 * 	 * @since   12.1	 */	public function generateKey(array $options = array());}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Controller * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentController extends JControllerLegacy{	public function __construct($config = array())	{		$this->input = JFactory::getApplication()->input;		// Article frontpage Editor pagebreak proxying:		if ($this->input->get('view') === 'article' && $this->input->get('layout') === 'pagebreak')		{			$config['base_path'] = JPATH_COMPONENT_ADMINISTRATOR;		}		// Article frontpage Editor article proxying:		elseif ($this->input->get('view') === 'articles' && $this->input->get('layout') === 'modal')		{			JHtml::_('stylesheet', 'system/adminlist.css', array(), true);			$config['base_path'] = JPATH_COMPONENT_ADMINISTRATOR;		}		parent::__construct($config);	}	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Set the default view name and format from the Request.		// Note we are using a_id to avoid collisions with the router and the return page.		// Frontend is a bit messier than the backend.		$id    = $this->input->getInt('a_id');		$vName = $this->input->getCmd('view', 'categories');		$this->input->set('view', $vName);		$user = JFactory::getUser();		if ($user->get('id') ||			($this->input->getMethod() == 'POST' &&				(($vName == 'category' && $this->input->get('layout') != 'blog') || $vName == 'archive' )))		{			$cachable = false;		}		$safeurlparams = array('catid' => 'INT', 'id' => 'INT', 'cid' => 'ARRAY', 'year' => 'INT', 'month' => 'INT', 'limit' => 'UINT', 'limitstart' => 'UINT',			'showall' => 'INT', 'return' => 'BASE64', 'filter' => 'STRING', 'filter_order' => 'CMD', 'filter_order_Dir' => 'CMD', 'filter-search' => 'STRING', 'print' => 'BOOLEAN', 'lang' => 'CMD', 'Itemid' => 'INT');		// Check for edit form.		if ($vName == 'form' && !$this->checkEditId('com_content.edit.article', $id))		{			// Somehow the person just went to the form - we don't allow that.			return JError::raiseError(403, JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));		}		parent::display($cachable, $safeurlparams);		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Pagination * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Pagination object representing a particular item in the pagination lists. * * @package     Joomla.Platform * @subpackage  Pagination * @since       11.1 */class JPaginationObject{	/**	 * @var    string  The link text.	 * @since  11.1	 */	public $text;	/**	 * @var    integer  The number of rows as a base offset.	 * @since  11.1	 */	public $base;	/**	 * @var    string  The link URL.	 * @since  11.1	 */	public $link;	/**	 * @var    integer  The prefix used for request variables.	 * @since  11.1	 */	public $prefix;	/**	 * @var    boolean  Flag whether the object is the 'active' page	 * @since  12.2	 */	public $active;	/**	 * Class constructor.	 *	 * @param   string   $text    The link text.	 * @param   integer  $prefix  The prefix used for request variables.	 * @param   integer  $base    The number of rows as a base offset.	 * @param   string   $link    The link URL.	 * @param   boolean  $active  Flag whether the object is the 'active' page	 *	 * @since   11.1	 */	public function __construct($text, $prefix = '', $base = null, $link = null, $active = false)	{		$this->text   = $text;		$this->prefix = $prefix;		$this->base   = $base;		$this->link   = $link;		$this->active = $active;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to define an abstract Web application router. * * @package     Joomla.Platform * @subpackage  Application * @since       12.2 */abstract class JApplicationWebRouter{	/**	 * @var    JApplicationWeb  The web application on whose behalf we are routing the request.	 * @since  12.2	 */	protected $app;	/**	 * @var    string  The default page controller name for an empty route.	 * @since  12.2	 */	protected $default;	/**	 * @var    string  Controller class name prefix for creating controller objects by name.	 * @since  12.2	 */	protected $controllerPrefix;	/**	 * @var    JInput  An input object from which to derive the route.	 * @since  12.2	 */	protected $input;	/**	 * Constructor.	 *	 * @param   JApplicationWeb  $app    The web application on whose behalf we are routing the request.	 * @param   JInput           $input  An optional input object from which to derive the route.  If none	 *                                   is given than the input from the application object will be used.	 *	 * @since   12.2	 */	public function __construct(JApplicationWeb $app, JInput $input = null)	{		$this->app   = $app;		$this->input = ($input === null) ? $this->app->input : $input;	}	/**	 * Find and execute the appropriate controller based on a given route.	 *	 * @param   string  $route  The route string for which to find and execute a controller.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute($route)	{		// Get the controller name based on the route patterns and requested route.		$name = $this->parseRoute($route);		// Get the controller object by name.		$controller = $this->fetchController($name);		// Execute the controller.		$controller->execute();	}	/**	 * Set the controller name prefix.	 *	 * @param   string  $prefix  Controller class name prefix for creating controller objects by name.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function setControllerPrefix($prefix)	{		$this->controllerPrefix	= (string) $prefix;		return $this;	}	/**	 * Set the default controller name.	 *	 * @param   string  $name  The default page controller name for an empty route.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function setDefaultController($name)	{		$this->default = (string) $name;		return $this;	}	/**	 * Parse the given route and return the name of a controller mapped to the given route.	 *	 * @param   string  $route  The route string for which to find and execute a controller.	 *	 * @return  string  The controller name for the given route excluding prefix.	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 */	abstract protected function parseRoute($route);	/**	 * Get a JController object for a given name.	 *	 * @param   string  $name  The controller name (excluding prefix) for which to fetch and instance.	 *	 * @return  JController	 *	 * @since   12.2	 * @throws  RuntimeException	 */	protected function fetchController($name)	{		// Derive the controller class name.		$class = $this->controllerPrefix . ucfirst($name);		// If the controller class does not exist panic.		if (!class_exists($class) || !is_subclass_of($class, 'JController'))		{			throw new RuntimeException(sprintf('Unable to locate controller `%s`.', $class), 404);		}		// Instantiate the controller.		$controller = new $class($this->input, $this->app);		return $controller;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Reset view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersViewReset extends JViewLegacy{	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	The template file to include	 * @since   1.5	 */	public function display($tpl = null)	{		// This name will be used to get the model		$name = $this->getLayout();		// Check that the name is valid - has an associated model.		if (!in_array($name, array('confirm', 'complete')))		{			$name = 'default';		}		if ('default' == $name)		{			$formname = 'Form';		}		else		{			$formname = ucfirst($this->_name).ucfirst($name).'Form';		}		// Get the view data.		$this->form	= $this->get($formname);		$this->state	= $this->get('State');		$this->params	= $this->state->params;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document.	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_RESET'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * Squiz_Sniffs_Strings_ConcatenationSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ConcatenationSpacingSniff.php 151 2010-11-26 01:07:46Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Makes sure there are is a spaces between the concatenation operator <b>.</b> and the strings being concatenated. * * Example: * <b class="bad">$a = $b.$c;</b> * <b class="good">$a = $b . $c;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_ConcatenationSpacingSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns an array of tokens this test wants to listen for.	 *	 * @return array	 */	public function register()	{		return array(T_STRING_CONCAT);	}//function	/**	 * Processes this test, when one of its tokens is encountered.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.	 * @param integer $stackPtr The position of the current token in the	 *                                        stack passed in $tokens.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		if ($tokens[($stackPtr + 1)]['code'] != T_WHITESPACE)		{			// space after			$message = 'Concat operator must be followed by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			$found = strlen($tokens[($stackPtr + 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space after concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}		if ($tokens[($stackPtr - 1)]['code'] != T_WHITESPACE)		{			// space before			$message = 'Concat operator must be preceeded by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			if (strpos($tokens[($stackPtr - 2)]['content'], $phpcsFile->eolChar) !== false			|| strpos($tokens[($stackPtr - 1)]['content'], $phpcsFile->eolChar) !== false)			{				// the dot is on a new line				return;			}			$found = strlen($tokens[($stackPtr - 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space before concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}	}//function}//class
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="list-striped list-condensed stats-module<?php echo $moduleclass_sfx ?>">	<?php foreach ($list as $item) : ?>		<li><i class="icon-<?php echo $item->icon;?>" title="<?php echo $item->title;?>"></i> <?php echo $item->title;?> <?php echo $item->data;?></li>	<?php endforeach; ?></ul>
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Each object represents one query, which is one line from a DDL SQL query. * This class is used to check the site's database to see if the DDL query has been run. * If not, it provides the ability to fix the database by re-running the DDL query. * The queries are parsed from the update files in the folder * administrator/components/com_admin/sql/updates/<database>. * These updates are run automatically if the site was updated using com_installer. * However, it is possible that the program files could be updated without udpating * the database (for example, if a user just copies the new files over the top of an * existing installation). * * This is an abstract class. We need to extend it for each database and add a * buildCheckQuery() method that creates the query to check that a DDL query has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */abstract class JSchemaChangeitem{	/**	 * Update file: full path file name where query was found	 *	 * @var    string	 * @since  2.5	 */	public $file = null;	/**	 * Update query: query used to change the db schema (one line from the file)	 *	 * @var    string	 * @since  2.5	 */	public $updateQuery = null;	/**	 * Check query: query used to check the db schema	 *	 * @var    string	 * @since  2.5	 */	public $checkQuery = null;	/**	 * Check query result: expected result of check query if database is up to date	 *	 * @var    string	 * @since  2.5	 */	public $checkQueryExpected = 1;	/**	 * JDatabaseDriver object	 *	 * @var    JDatabaseDriver	 * @since  2.5	 */	public $db = null;	/**	 * Query type: To be used in building a language key for a	 * message to tell user what was checked / changed	 * Possible values: ADD_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX	 *	 * @var    string	 * @since  2.5	 */	public $queryType = null;	/**	 * Array with values for use in a JText::sprintf statment indicating what was checked	 *	 * Tells you what the message should be, based on which elements are defined, as follows:	 *     For ADD_TABLE: table	 *     For ADD_COLUMN: table, column	 *     For CHANGE_COLUMN_TYPE: table, column, type	 *     For ADD_INDEX: table, index	 *	 * @var    array	 * @since  2.5	 */	public $msgElements = array();	/**	 * Checked status	 *	 * @var    integer   0=not checked, -1=skipped, -2=failed, 1=succeeded	 * @since  2.5	 */	public $checkStatus = 0;	/**	 * Rerun status	 *	 * @var    int   0=not rerun, -1=skipped, -2=failed, 1=succeeded	 * @since  2.5	 */	public $rerunStatus = 0;	/**	 * Constructor: builds check query and message from $updateQuery	 *	 * @param   JDatabaseDriver  $db     Database connector object	 * @param   string           $file   Full path name of the sql file	 * @param   string           $query  Text of the sql query (one line of the file)	 *	 * @since   2.5	 */	public function __construct($db, $file, $query)	{		$this->updateQuery = $query;		$this->file = $file;		$this->db = $db;		$this->buildCheckQuery();	}	/**	 * Returns a reference to the JSchemaChangeitem object.	 *	 * @param   JDatabaseDriver  $db     Database connector object	 * @param   string           $file   Full path name of the sql file	 * @param   string           $query  Text of the sql query (one line of the file)	 *	 * @return  JSchemaChangeitem instance based on the database driver	 *	 * @since   2.5	 * @throws  RuntimeException if class for database driver not found	 */	public static function getInstance($db, $file, $query)	{		// Get the class name		$dbname = $db->name;		if ($dbname == 'mysqli')		{			$dbname = 'mysql';		}		elseif ($dbname == 'sqlazure')		{			$dbname = 'sqlsrv';		}		$class = 'JSchemaChangeitem' . ucfirst($dbname);		// If the class exists, return it.		if (class_exists($class))		{			return new $class($db, $file, $query);		}		throw new RuntimeException(sprintf('JSchemaChangeitem child class not found for the %s database driver', $dbname), 500);	}	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	abstract protected function buildCheckQuery();	/**	 * Runs the check query and checks that 1 row is returned	 * If yes, return true, otherwise return false	 *	 * @return  boolean  true on success, false otherwise	 *	 * @since  2.5	 */	public function check()	{		$this->checkStatus = -1;		if ($this->checkQuery)		{			$this->db->setQuery($this->checkQuery);			$rows = $this->db->loadObject();			if ($rows !== false)			{				if (count($rows) === $this->checkQueryExpected)				{					$this->checkStatus = 1;				}				else				{					$this->checkStatus = -2;				}			}			else			{				$this->checkStatus = -2;			}		}		return $this->checkStatus;	}	/**	 * Runs the update query to apply the change to the database	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		if ($this->checkStatus === -2)		{			// At this point we have a failed query			$this->db->setQuery($this->updateQuery);			if ($this->db->execute())			{				if ($this->check())				{					$this->checkStatus = 1;					$this->rerunStatus = 1;				}				else				{					$this->rerunStatus = -2;				}			}			else			{				$this->rerunStatus = -2;			}		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');/** * Weblinks Component Model for a Weblink record * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksModelWeblink extends JModelItem{	/**	 * Model context string.	 *	 * @access	protected	 * @var		string	 */	protected $_context = 'com_weblinks.weblink';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication();		$params	= $app->getParams();		// Load the object state.		$id	= $app->input->getInt('id');		$this->setState('weblink.id', $id);		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get an object.	 *	 * @param   integer	The id of the object to get.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($id = null)	{		if ($this->_item === null)		{			$this->_item = false;			if (empty($id))			{				$id = $this->getState('weblink.id');			}			// Get a level row instance.			$table = JTable::getInstance('Weblink', 'WeblinksTable');			// Attempt to load the row.			if ($table->load($id))			{				// Check published state.				if ($published = $this->getState('filter.published'))				{					if ($table->state != $published)					{						return $this->_item;					}				}				// Convert the JTable to a clean JObject.				$properties = $table->getProperties(1);				$this->_item = JArrayHelper::toObject($properties, 'JObject');			}			elseif ($error = $table->getError())			{				$this->setError($error);			}		}		return $this->_item;	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param	type	The table type to instantiate	 * @param	string	A prefix for the table class name. Optional.	 * @param	array	Configuration array for model. Optional.	 * @return	JTable	A database object	 * @since	1.6	 */	public function getTable($type = 'Weblink', $prefix = 'WeblinksTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to increment the hit counter for the weblink	 *	 * @param   integer  $id  Optional ID of the weblink.	 *	 * @return  boolean  True on success	 */	public function hit($id = null)	{		if (empty($id))		{			$id = $this->getState('weblink.id');		}		$weblink = $this->getTable('Weblink', 'WeblinksTable');		return $weblink->hit($id);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Library Manifest File * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerManifestLibrary extends JInstallerManifest{	/**	 * File system name of the library	 *	 * @var    string	 * @since  3.1	 */	public $libraryname = '';	/**	 * Creation Date of the library	 *	 * @var    string	 * @since  3.1	 */	public $creationDate = '';	/**	 * Copyright notice for the library	 *	 * @var    string	 * @since  3.1	 */	public $copyright = '';	/**	 * License for the library	 *	 * @var    string	 * @since  3.1	 */	public $license = '';	/**	 * Author for the library	 *	 * @var    string	 * @since  3.1	 */	public $author = '';	/**	 * Author email for the library	 *	 * @var    string	 * @since  3.1	 */	public $authoremail = '';	/**	 * Author URL for the library	 *	 * @var    string	 * @since  3.1	 */	public $authorurl = '';	/**	 * Apply manifest data from a SimpleXMLElement to the object.	 *	 * @param   SimpleXMLElement  $xml  Data to load	 *	 * @return  void	 *	 * @since   3.1	 */	protected function loadManifestFromData(SimpleXMLElement $xml)	{		$this->name         = (string) $xml->name;		$this->libraryname  = (string) $xml->libraryname;		$this->version      = (string) $xml->version;		$this->description  = (string) $xml->description;		$this->creationdate = (string) $xml->creationDate;		$this->author       = (string) $xml->author;		$this->authoremail  = (string) $xml->authorEmail;		$this->authorurl    = (string) $xml->authorUrl;		$this->packager     = (string) $xml->packager;		$this->packagerurl  = (string) $xml->packagerurl;		$this->update       = (string) $xml->update;		if (isset($xml->files) && isset($xml->files->file) && count($xml->files->file))		{			foreach ($xml->files->file as $file)			{				$this->filelist[] = (string) $file;			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.oauth.v2client');/** * Google OAuth authentication class * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleAuthOauth2 extends JGoogleAuth{	/**	 * @var    JOAuth2Client  OAuth client for the Google authentication object.	 * @since  12.3	 */	protected $client;	/**	 * Constructor.	 *	 * @param   JRegistry      $options  JGoogleAuth options object.	 * @param   JOAuth2Client  $client   OAuth client for Google authentication.	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JOAuth2Client $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JOAuth2Client($this->options);	}	/**	 * Method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	public function authenticate()	{		$this->googlize();		return $this->client->authenticate();	}	/**	 * Verify if the client has been authenticated	 *	 * @return  boolean  Is authenticated	 *	 * @since   12.3	 */	public function isAuthenticated()	{		return $this->client->isAuthenticated();	}	/**	 * Method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	public function query($url, $data = null, $headers = null, $method = 'get')	{		$this->googlize();		return $this->client->query($url, $data, $headers, $method);	}	/**	 * Method to fill in Google-specific OAuth settings	 *	 * @return  JOAuth2Client  Google-configured Oauth2 client.	 *	 * @since   12.3	 */	protected function googlize()	{		if (!$this->client->getOption('authurl'))		{			$this->client->setOption('authurl', 'https://accounts.google.com/o/oauth2/auth');		}		if (!$this->client->getOption('tokenurl'))		{			$this->client->setOption('tokenurl', 'https://accounts.google.com/o/oauth2/token');		}		if (!$this->client->getOption('requestparams'))		{			$this->client->setOption('requestparams', Array());		}		$params = $this->client->getOption('requestparams');		if (!array_key_exists('access_type', $params))		{			$params['access_type'] = 'offline';		}		if ($params['access_type'] == 'offline' && $this->client->getOption('userefresh') === null)		{			$this->client->setOption('userefresh', true);		}		if (!array_key_exists('approval_prompt', $params))		{			$params['approval_prompt'] = 'auto';		}		$this->client->setOption('requestparams', $params);		return $this->client;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Mail * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('phpmailer.phpmailer');/** * Email Class.  Provides a common interface to send email from the Joomla! Platform * * @package     Joomla.Platform * @subpackage  Mail * @since       11.1 */class JMail extends PHPMailer{	/**	 * @var    array  JMail instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * @var    string  Charset of the message.	 * @since  11.1	 */	public $CharSet = 'utf-8';	/**	 * Constructor	 */	public function __construct()	{		// PHPMailer has an issue using the relative path for its language files		$this->SetLanguage('joomla', JPATH_PLATFORM . '/phpmailer/language/');	}	/**	 * Returns the global email object, only creating it	 * if it doesn't already exist.	 *	 * NOTE: If you need an instance to use that does not have the global configuration	 * values, use an id string that is not 'Joomla'.	 *	 * @param   string  $id  The id string for the JMail instance [optional]	 *	 * @return  JMail  The global JMail object	 *	 * @since   11.1	 */	public static function getInstance($id = 'Joomla')	{		if (empty(self::$instances[$id]))		{			self::$instances[$id] = new JMail;		}		return self::$instances[$id];	}	/**	 * Send the mail	 *	 * @return  mixed  True if successful; JError if using legacy tree (no exception thrown in that case).	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function Send()	{		if (($this->Mailer == 'mail') && !function_exists('mail'))		{			if (class_exists('JError'))			{				return JError::raiseNotice(500, JText::_('JLIB_MAIL_FUNCTION_DISABLED'));			}			else			{				throw new RuntimeException(sprintf('%s::Send mail not enabled.', get_class($this)));			}		}		@$result = parent::Send();		if ($result == false)		{			if (class_exists('JError'))			{				$result = JError::raiseNotice(500, JText::_($this->ErrorInfo));			}			else			{				throw new RuntimeException(sprintf('%s::Send failed: "%s".', get_class($this), $this->ErrorInfo));			}		}		return $result;	}	/**	 * Set the email sender	 *	 * @param   array  $from  email address and Name of sender	 *                        <code>array([0] => email Address [1] => Name)</code>	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setSender($from)	{		if (is_array($from))		{			// If $from is an array we assume it has an address and a name			if (isset($from[2]))			{				// If it is an array with entries, use them				$this->SetFrom(JMailHelper::cleanLine($from[0]), JMailHelper::cleanLine($from[1]), (bool) $from[2]);			}			else			{				$this->SetFrom(JMailHelper::cleanLine($from[0]), JMailHelper::cleanLine($from[1]));			}		}		elseif (is_string($from))		{			// If it is a string we assume it is just the address			$this->SetFrom(JMailHelper::cleanLine($from));		}		else		{			// If it is neither, we throw a warning			JLog::add(JText::sprintf('JLIB_MAIL_INVALID_EMAIL_SENDER', $from), JLog::WARNING, 'jerror');		}		return $this;	}	/**	 * Set the email subject	 *	 * @param   string  $subject  Subject of the email	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setSubject($subject)	{		$this->Subject = JMailHelper::cleanLine($subject);		return $this;	}	/**	 * Set the email body	 *	 * @param   string  $content  Body of the email	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setBody($content)	{		/*		 * Filter the Body		 * TODO: Check for XSS		 */		$this->Body = JMailHelper::cleanText($content);		return $this;	}	/**	 * Add recipients to the email.	 *	 * @param   mixed   $recipient  Either a string or array of strings [email address(es)]	 * @param   mixed   $name       Either a string or array of strings [name(s)]	 * @param   string  $method     The parent method's name.	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	protected function add($recipient, $name = '', $method = 'AddAddress')	{		// If the recipient is an array, add each recipient... otherwise just add the one		if (is_array($recipient))		{			if (is_array($name))			{				$combined = array_combine($recipient, $name);				if ($combined === false)				{					throw new InvalidArgumentException("The number of elements for each array isn't equal.");				}				foreach ($combined as $recipientEmail => $recipientName)				{					$recipientEmail = JMailHelper::cleanLine($recipientEmail);					$recipientName = JMailHelper::cleanLine($recipientName);					call_user_func('parent::' . $method, $recipientEmail, $recipientName);				}			}			else			{				$name = JMailHelper::cleanLine($name);				foreach ($recipient as $to)				{					$to = JMailHelper::cleanLine($to);					call_user_func('parent::' . $method, $to, $name);				}			}		}		else		{			$recipient = JMailHelper::cleanLine($recipient);			call_user_func('parent::' . $method, $recipient, $name);		}		return $this;	}	/**	 * Add recipients to the email	 *	 * @param   mixed  $recipient  Either a string or array of strings [email address(es)]	 * @param   mixed  $name       Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addRecipient($recipient, $name = '')	{		$this->add($recipient, $name, 'AddAddress');		return $this;	}	/**	 * Add carbon copy recipients to the email	 *	 * @param   mixed  $cc    Either a string or array of strings [email address(es)]	 * @param   mixed  $name  Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addCC($cc, $name = '')	{		// If the carbon copy recipient is an array, add each recipient... otherwise just add the one		if (isset($cc))		{			$this->add($cc, $name, 'AddCC');		}		return $this;	}	/**	 * Add blind carbon copy recipients to the email	 *	 * @param   mixed  $bcc   Either a string or array of strings [email address(es)]	 * @param   mixed  $name  Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addBCC($bcc, $name = '')	{		// If the blind carbon copy recipient is an array, add each recipient... otherwise just add the one		if (isset($bcc))		{			$this->add($bcc, $name, 'AddBCC');		}		return $this;	}	/**	 * Add file attachments to the email	 *	 * @param   mixed  $attachment  Either a string or array of strings [filenames]	 * @param   mixed  $name        Either a string or array of strings [names]	 * @param   mixed  $encoding    The encoding of the attachment	 * @param   mixed  $type        The mime type	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 */	public function addAttachment($attachment, $name = '', $encoding = 'base64', $type = 'application/octet-stream')	{		// If the file attachments is an array, add each file... otherwise just add the one		if (isset($attachment))		{			if (is_array($attachment))			{				if (!empty($name) && count($attachment) != count($name))				{					throw new InvalidArgumentException("The number of attachments must be equal with the number of name");				}				foreach ($attachment as $key => $file)				{					if (!empty($name))					{						parent::AddAttachment($file, $name[$key], $encoding, $type);					}					else					{						parent::AddAttachment($file, $name, $encoding, $type);					}				}			}			else			{				parent::AddAttachment($attachment, $name, $encoding, $type);			}		}		return $this;	}	/**	 * Add Reply to email address(es) to the email	 *	 * @param   mixed  $replyto  Either a string or array of strings [email address(es)]	 * @param   mixed  $name     Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addReplyTo($replyto, $name = '')	{		$this->add($replyto, $name, 'AddReplyTo');		return $this;	}	/**	 * Use sendmail for sending the email	 *	 * @param   string  $sendmail  Path to sendmail [optional]	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function useSendmail($sendmail = null)	{		$this->Sendmail = $sendmail;		if (!empty($this->Sendmail))		{			$this->IsSendmail();			return true;		}		else		{			$this->IsMail();			return false;		}	}	/**	 * Use SMTP for sending the email	 *	 * @param   string   $auth    SMTP Authentication [optional]	 * @param   string   $host    SMTP Host [optional]	 * @param   string   $user    SMTP Username [optional]	 * @param   string   $pass    SMTP Password [optional]	 * @param   string   $secure  Use secure methods	 * @param   integer  $port    The SMTP port	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function useSMTP($auth = null, $host = null, $user = null, $pass = null, $secure = null, $port = 25)	{		$this->SMTPAuth = $auth;		$this->Host = $host;		$this->Username = $user;		$this->Password = $pass;		$this->Port = $port;		if ($secure == 'ssl' || $secure == 'tls')		{			$this->SMTPSecure = $secure;		}		if (($this->SMTPAuth !== null && $this->Host !== null && $this->Username !== null && $this->Password !== null)			|| ($this->SMTPAuth === null && $this->Host !== null))		{			$this->IsSMTP();			return true;		}		else		{			$this->IsMail();			return false;		}	}	/**	 * Function to send an email	 *	 * @param   string   $from         From email address	 * @param   string   $fromName     From name	 * @param   mixed    $recipient    Recipient email address(es)	 * @param   string   $subject      email subject	 * @param   string   $body         Message body	 * @param   boolean  $mode         false = plain text, true = HTML	 * @param   mixed    $cc           CC email address(es)	 * @param   mixed    $bcc          BCC email address(es)	 * @param   mixed    $attachment   Attachment file name(s)	 * @param   mixed    $replyTo      Reply to email address(es)	 * @param   mixed    $replyToName  Reply to name(s)	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function sendMail($from, $fromName, $recipient, $subject, $body, $mode = false, $cc = null, $bcc = null, $attachment = null,		$replyTo = null, $replyToName = null)	{		$this->setSubject($subject);		$this->setBody($body);		// Are we sending the email as HTML?		if ($mode)		{			$this->IsHTML(true);		}		$this->addRecipient($recipient);		$this->addCC($cc);		$this->addBCC($bcc);		$this->addAttachment($attachment);		// Take care of reply email addresses		if (is_array($replyTo))		{			$numReplyTo = count($replyTo);			for ($i = 0; $i < $numReplyTo; $i++)			{				$this->addReplyTo(array($replyTo[$i], $replyToName[$i]));			}		}		elseif (isset($replyTo))		{			$this->addReplyTo(array($replyTo, $replyToName));		}		// Add sender to replyTo only if no replyTo received		$autoReplyTo = (empty($this->ReplyTo)) ? true : false;		$this->setSender(array($from, $fromName, $autoReplyTo));		return $this->Send();	}	/**	 * Sends mail to administrator for approval of a user submission	 *	 * @param   string  $adminName   Name of administrator	 * @param   string  $adminEmail  Email address of administrator	 * @param   string  $email       [NOT USED TODO: Deprecate?]	 * @param   string  $type        Type of item to approve	 * @param   string  $title       Title of item to approve	 * @param   string  $author      Author of item to approve	 * @param   string  $url         A URL to included in the mail	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function sendAdminMail($adminName, $adminEmail, $email, $type, $title, $author, $url = null)	{		$subject = JText::sprintf('JLIB_MAIL_USER_SUBMITTED', $type);		$message = sprintf(JText::_('JLIB_MAIL_MSG_ADMIN'), $adminName, $type, $title, $author, $url, $url, 'administrator', $type);		$message .= JText::_('JLIB_MAIL_MSG') . "\n";		$this->addRecipient($adminEmail);		$this->setSubject($subject);		$this->setBody($message);		return $this->Send();	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! System Logging Plugin * * @package     Joomla.Plugin * @subpackage  System.log * @since       1.5 */class PlgSystemLog extends JPlugin{	public function onUserLoginFailure($response)	{		$errorlog = array();		switch($response['status'])		{			case JAuthentication::STATUS_SUCCESS:				$errorlog['status']  = $response['type'] . " CANCELED: ";				$errorlog['comment'] = $response['error_message'];				break;			case JAuthentication::STATUS_FAILURE:				$errorlog['status']  = $response['type'] . " FAILURE: ";				if ($this->params->get('log_username', 0))				{					$errorlog['comment'] = $response['error_message'] . ' ("' . $response['username'] . '")';				}				else				{					$errorlog['comment'] = $response['error_message'];				}				break;			default:				$errorlog['status']  = $response['type'] . " UNKNOWN ERROR: ";				$errorlog['comment'] = $response['error_message'];				break;		}		JLog::addLogger(array(), JLog::INFO);		JLog::add($errorlog['comment'], JLog::INFO, $errorlog['status']);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Data * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDataSet is a collection class that allows the developer to operate on a set of JData objects as if they were in a * typical PHP array. * * @package     Joomla.Platform * @subpackage  Data * @since       12.3 */class JDataSet implements JDataDumpable, ArrayAccess, Countable, Iterator{	/**	 * The current position of the iterator.	 *	 * @var    integer	 * @since  12.3	 */	private $_current = false;	/**	 * The iterator objects.	 *	 * @var    array	 * @since  12.3	 */	private $_objects = array();	/**	 * The class constructor.	 *	 * @param   array  $objects  An array of JData objects to bind to the data set.	 *	 * @since   12.3	 * @throws  InvalidArgumentException if an object is not an instance of JData.	 */	public function __construct(array $objects = array())	{		// Set the objects.		$this->_initialise($objects);	}	/**	 * The magic call method is used to call object methods using the iterator.	 *	 * Example: $array = $objectList->foo('bar');	 *	 * The object list will iterate over its objects and see if each object has a callable 'foo' method.	 * If so, it will pass the argument list and assemble any return values. If an object does not have	 * a callable method no return value is recorded.	 * The keys of the objects and the result array are maintained.	 *	 * @param   string  $method     The name of the method called.	 * @param   array   $arguments  The arguments of the method called.	 *	 * @return  array   An array of values returned by the methods called on the objects in the data set.	 *	 * @since   12.3	 */	public function __call($method, $arguments = array())	{		$return = array();		// Iterate through the objects.		foreach ($this->_objects as $key => $object)		{			// Create the object callback.			$callback = array($object, $method);			// Check if the callback is callable.			if (is_callable($callback))			{				// Call the method for the object.				$return[$key] = call_user_func_array($callback, $arguments);			}		}		return $return;	}	/**	 * The magic get method is used to get a list of properties from the objects in the data set.	 *	 * Example: $array = $dataSet->foo;	 *	 * This will return a column of the values of the 'foo' property in all the objects	 * (or values determined by custom property setters in the individual JData's).	 * The result array will contain an entry for each object in the list (compared to __call which may not).	 * The keys of the objects and the result array are maintained.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  array  An associative array of the values.	 *	 * @since   12.3	 */	public function __get($property)	{		$return = array();		// Iterate through the objects.		foreach ($this->_objects as $key => $object)		{			// Get the property.			$return[$key] = $object->$property;		}		return $return;	}	/**	 * The magic isset method is used to check the state of an object property using the iterator.	 *	 * Example: $array = isset($objectList->foo);	 *	 * @param   string  $property  The name of the property.	 *	 * @return  boolean  True if the property is set in any of the objects in the data set.	 *	 * @since   12.3	 */	public function __isset($property)	{		$return = array();		// Iterate through the objects.		foreach ($this->_objects as $object)		{			// Check the property.			$return[] = isset($object->$property);		}		return in_array(true, $return, true) ? true : false;	}	/**	 * The magic set method is used to set an object property using the iterator.	 *	 * Example: $objectList->foo = 'bar';	 *	 * This will set the 'foo' property to 'bar' in all of the objects	 * (or a value determined by custom property setters in the JData).	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __set($property, $value)	{		// Iterate through the objects.		foreach ($this->_objects as $object)		{			// Set the property.			$object->$property = $value;		}	}	/**	 * The magic unset method is used to unset an object property using the iterator.	 *	 * Example: unset($objectList->foo);	 *	 * This will unset all of the 'foo' properties in the list of JData's.	 *	 * @param   string  $property  The name of the property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __unset($property)	{		// Iterate through the objects.		foreach ($this->_objects as $object)		{			unset($object->$property);		}	}	/**	 * Gets the number of data objects in the set.	 *	 * @return  integer  The number of objects.	 *	 * @since   12.3	 */	public function count()	{		return count($this->_objects);	}	/**	 * Clears the objects in the data set.	 *	 * @return  JDataSet  Returns itself to allow chaining.	 *	 * @since   12.3	 */	public function clear()	{		$this->_objects = array();		$this->rewind();		return $this;	}	/**	 * Get the current data object in the set.	 *	 * @return  JData  The current object, or false if the array is empty or the pointer is beyond the end of the elements.	 *	 * @since   12.3	 */	public function current()	{		return is_scalar($this->_current) ? $this->_objects[$this->_current] : false;	}	/**	 * Dumps the data object in the set, recursively if appropriate.	 *	 * @param   integer           $depth   The maximum depth of recursion (default = 3).	 *                                     For example, a depth of 0 will return a stdClass with all the properties in native	 *                                     form. A depth of 1 will recurse into the first level of properties only.	 * @param   SplObjectStorage  $dumped  An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  array  An associative array of the date objects in the set, dumped as a simple PHP stdClass object.	 *	 * @see     JData::dump()	 * @since   12.3	 */	public function dump($depth = 3, SplObjectStorage $dumped = null)	{		// Check if we should initialise the recursion tracker.		if ($dumped === null)		{			$dumped = new SplObjectStorage;		}		// Add this object to the dumped stack.		$dumped->attach($this);		$objects = array();		// Make sure that we have not reached our maximum depth.		if ($depth > 0)		{			// Handle JSON serialization recursively.			foreach ($this->_objects as $key => $object)			{				$objects[$key] = $object->dump($depth, $dumped);			}		}		return $objects;	}	/**	 * Gets the data set in a form that can be serialised to JSON format.	 *	 * Note that this method will not return an associative array, otherwise it would be encoded into an object.	 * JSON decoders do not consistently maintain the order of associative keys, whereas they do maintain the order of arrays.	 *	 * @param   mixed  $serialized  An array of objects that have already been serialized that is used to infinite loops	 *                              (null on first call).	 *	 * @return  array  An array that can be serialised by json_encode().	 *	 * @since   12.3	 */	public function jsonSerialize($serialized = null)	{		// Check if we should initialise the recursion tracker.		if ($serialized === null)		{			$serialized = array();		}		// Add this object to the serialized stack.		$serialized[] = spl_object_hash($this);		$return = array();		// Iterate through the objects.		foreach ($this->_objects as $object)		{			// Call the method for the object.			$return[] = $object->jsonSerialize($serialized);		}		return $return;	}	/**	 * Gets the key of the current object in the iterator.	 *	 * @return  scalar  The object key on success; null on failure.	 *	 * @since   12.3	 */	public function key()	{		return $this->_current;	}	/**	 * Gets the array of keys for all the objects in the iterator (emulates array_keys).	 *	 * @return  array  The array of keys	 *	 * @since   12.3	 */	public function keys()	{		return array_keys($this->_objects);	}	/**	 * Advances the iterator to the next object in the iterator.	 *	 * @return  void	 *	 * @since   12.3	 */	public function next()	{		// Get the object offsets.		$keys = $this->keys();		// Check if _current has been set to false but offsetUnset.		if ($this->_current === false && isset($keys[0]))		{			// This is a special case where offsetUnset was used in a foreach loop and the first element was unset.			$this->_current = $keys[0];		}		else		{			// Get the current key.			$position = array_search($this->_current, $keys);			// Check if there is an object after the current object.			if ($position !== false && isset($keys[$position + 1]))			{				// Get the next id.				$this->_current = $keys[$position + 1];			}			else			{				// That was the last object or the internal properties have become corrupted.				$this->_current = null;			}		}	}	/**	 * Checks whether an offset exists in the iterator.	 *	 * @param   mixed  $offset  The object offset.	 *	 * @return  boolean  True if the object exists, false otherwise.	 *	 * @since   12.3	 */	public function offsetExists($offset)	{		return isset($this->_objects[$offset]);	}	/**	 * Gets an offset in the iterator.	 *	 * @param   mixed  $offset  The object offset.	 *	 * @return  JData  The object if it exists, null otherwise.	 *	 * @since   12.3	 */	public function offsetGet($offset)	{		return isset($this->_objects[$offset]) ? $this->_objects[$offset] : null;	}	/**	 * Sets an offset in the iterator.	 *	 * @param   mixed  $offset  The object offset.	 * @param   JData  $object  The object object.	 *	 * @return  void	 *	 * @since   12.3	 * @throws  InvalidArgumentException if an object is not an instance of JData.	 */	public function offsetSet($offset, $object)	{		// Check if the object is a JData object.		if (!($object instanceof JData))		{			throw new InvalidArgumentException(sprintf('%s("%s", *%s*)', __METHOD__, $offset, gettype($object)));		}		// Set the offset.		$this->_objects[$offset] = $object;	}	/**	 * Unsets an offset in the iterator.	 *	 * @param   mixed  $offset  The object offset.	 *	 * @return  void	 *	 * @since   12.3	 */	public function offsetUnset($offset)	{		if (!$this->offsetExists($offset))		{			// Do nothing if the offset does not exist.			return;		}		// Check for special handling of unsetting the current position.		if ($offset == $this->_current)		{			// Get the current position.			$keys = $this->keys();			$position = array_search($this->_current, $keys);			// Check if there is an object before the current object.			if ($position > 0)			{				// Move the current position back one.				$this->_current = $keys[$position - 1];			}			else			{				// We are at the start of the keys AND let's assume we are in a foreach loop and `next` is going to be called.				$this->_current = false;			}		}		unset($this->_objects[$offset]);	}	/**	 * Rewinds the iterator to the first object.	 *	 * @return  void	 *	 * @since   12.3	 */	public function rewind()	{		// Set the current position to the first object.		if (empty($this->_objects))		{			$this->_current = false;		}		else		{			$keys = $this->keys();			$this->_current = array_shift($keys);		}	}	/**	 * Validates the iterator.	 *	 * @return  boolean  True if valid, false otherwise.	 *	 * @since   12.3	 */	public function valid()	{		// Check the current position.		if (!is_scalar($this->_current) || !isset($this->_objects[$this->_current]))		{			return false;		}		return true;	}	/**	 * Initialises the list with an array of objects.	 *	 * @param   array  $input  An array of objects.	 *	 * @return  void	 *	 * @since   12.3	 * @throws  InvalidArgumentException if an object is not an instance of JData.	 */	private function _initialise(array $input = array())	{		foreach ($input as $key => $object)		{			if (!is_null($object))			{				$this->offsetSet($key, $object);			}		}		$this->rewind();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Utilities * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JArrayHelper is an array utility class for doing all sorts of odds and ends with arrays. * * @package     Joomla.Platform * @subpackage  Utilities * @since       11.1 */abstract class JArrayHelper{	/**	 * Option to perform case-sensitive sorts.	 *	 * @var    mixed  Boolean or array of booleans.	 * @since  11.3	 */	protected static $sortCase;	/**	 * Option to set the sort direction.	 *	 * @var    mixed  Integer or array of integers.	 * @since  11.3	 */	protected static $sortDirection;	/**	 * Option to set the object key to sort on.	 *	 * @var    string	 * @since  11.3	 */	protected static $sortKey;	/**	 * Option to perform a language aware sort.	 *	 * @var    mixed  Boolean or array of booleans.	 * @since  11.3	 */	protected static $sortLocale;	/**	 * Function to convert array to integer values	 *	 * @param   array  &$array   The source array to convert	 * @param   mixed  $default  A default value (int|array) to assign if $array is not an array	 *	 * @return  void	 *	 * @since   11.1	 */	public static function toInteger(&$array, $default = null)	{		if (is_array($array))		{			foreach ($array as $i => $v)			{				$array[$i] = (int) $v;			}		}		else		{			if ($default === null)			{				$array = array();			}			elseif (is_array($default))			{				self::toInteger($default, null);				$array = $default;			}			else			{				$array = array((int) $default);			}		}	}	/**	 * Utility function to map an array to a stdClass object.	 *	 * @param   array   &$array  The array to map.	 * @param   string  $class   Name of the class to create	 *	 * @return  object   The object mapped from the given array	 *	 * @since   11.1	 */	public static function toObject(&$array, $class = 'stdClass')	{		$obj = null;		if (is_array($array))		{			$obj = new $class;			foreach ($array as $k => $v)			{				if (is_array($v))				{					$obj->$k = self::toObject($v, $class);				}				else				{					$obj->$k = $v;				}			}		}		return $obj;	}	/**	 * Utility function to map an array to a string.	 *	 * @param   array    $array         The array to map.	 * @param   string   $inner_glue    The glue (optional, defaults to '=') between the key and the value.	 * @param   string   $outer_glue    The glue (optional, defaults to ' ') between array elements.	 * @param   boolean  $keepOuterKey  True if final key should be kept.	 *	 * @return  string   The string mapped from the given array	 *	 * @since   11.1	 */	public static function toString($array = null, $inner_glue = '=', $outer_glue = ' ', $keepOuterKey = false)	{		$output = array();		if (is_array($array))		{			foreach ($array as $key => $item)			{				if (is_array($item))				{					if ($keepOuterKey)					{						$output[] = $key;					}					// This is value is an array, go and do it again!					$output[] = self::toString($item, $inner_glue, $outer_glue, $keepOuterKey);				}				else				{					$output[] = $key . $inner_glue . '"' . $item . '"';				}			}		}		return implode($outer_glue, $output);	}	/**	 * Utility function to map an object to an array	 *	 * @param   object   $p_obj    The source object	 * @param   boolean  $recurse  True to recurse through multi-level objects	 * @param   string   $regex    An optional regular expression to match on field names	 *	 * @return  array    The array mapped from the given object	 *	 * @since   11.1	 */	public static function fromObject($p_obj, $recurse = true, $regex = null)	{		if (is_object($p_obj))		{			return self::_fromObject($p_obj, $recurse, $regex);		}		else		{			return null;		}	}	/**	 * Utility function to map an object or array to an array	 *	 * @param   mixed    $item     The source object or array	 * @param   boolean  $recurse  True to recurse through multi-level objects	 * @param   string   $regex    An optional regular expression to match on field names	 *	 * @return  array  The array mapped from the given object	 *	 * @since   11.1	 */	protected static function _fromObject($item, $recurse, $regex)	{		if (is_object($item))		{			$result = array();			foreach (get_object_vars($item) as $k => $v)			{				if (!$regex || preg_match($regex, $k))				{					if ($recurse)					{						$result[$k] = self::_fromObject($v, $recurse, $regex);					}					else					{						$result[$k] = $v;					}				}			}		}		elseif (is_array($item))		{			$result = array();			foreach ($item as $k => $v)			{				$result[$k] = self::_fromObject($v, $recurse, $regex);			}		}		else		{			$result = $item;		}		return $result;	}	/**	 * Extracts a column from an array of arrays or objects	 *	 * @param   array   &$array  The source array	 * @param   string  $index   The index of the column or name of object property	 *	 * @return  array  Column of values from the source array	 *	 * @since   11.1	 */	public static function getColumn(&$array, $index)	{		$result = array();		if (is_array($array))		{			foreach ($array as &$item)			{				if (is_array($item) && isset($item[$index]))				{					$result[] = $item[$index];				}				elseif (is_object($item) && isset($item->$index))				{					$result[] = $item->$index;				}				// Else ignore the entry			}		}		return $result;	}	/**	 * Utility function to return a value from a named array or a specified default	 *	 * @param   array   &$array   A named array	 * @param   string  $name     The key to search for	 * @param   mixed   $default  The default value to give if no key found	 * @param   string  $type     Return type for the variable (INT, FLOAT, STRING, WORD, BOOLEAN, ARRAY)	 *	 * @return  mixed  The value from the source array	 *	 * @since   11.1	 */	public static function getValue(&$array, $name, $default = null, $type = '')	{		$result = null;		if (isset($array[$name]))		{			$result = $array[$name];		}		// Handle the default case		if (is_null($result))		{			$result = $default;		}		// Handle the type constraint		switch (strtoupper($type))		{			case 'INT':			case 'INTEGER':				// Only use the first integer value				@preg_match('/-?[0-9]+/', $result, $matches);				$result = @(int) $matches[0];				break;			case 'FLOAT':			case 'DOUBLE':				// Only use the first floating point value				@preg_match('/-?[0-9]+(\.[0-9]+)?/', $result, $matches);				$result = @(float) $matches[0];				break;			case 'BOOL':			case 'BOOLEAN':				$result = (bool) $result;				break;			case 'ARRAY':				if (!is_array($result))				{					$result = array($result);				}				break;			case 'STRING':				$result = (string) $result;				break;			case 'WORD':				$result = (string) preg_replace('#\W#', '', $result);				break;			case 'NONE':			default:				// No casting necessary				break;		}		return $result;	}	/**	 * Takes an associative array of arrays and inverts the array keys to values using the array values as keys.	 *	 * Example:	 * $input = array(	 *     'New' => array('1000', '1500', '1750'),	 *     'Used' => array('3000', '4000', '5000', '6000')	 * );	 * $output = JArrayHelper::invert($input);	 *	 * Output would be equal to:	 * $output = array(	 *     '1000' => 'New',	 *     '1500' => 'New',	 *     '1750' => 'New',	 *     '3000' => 'Used',	 *     '4000' => 'Used',	 *     '5000' => 'Used',	 *     '6000' => 'Used'	 * );	 *	 * @param   array  $array  The source array.	 *	 * @return  array  The inverted array.	 *	 * @since   12.3	 */	public static function invert($array)	{		$return = array();		foreach ($array as $base => $values)		{			if (!is_array($values))			{				continue;			}			foreach ($values as $key)			{				// If the key isn't scalar then ignore it.				if (is_scalar($key))				{					$return[$key] = $base;				}			}		}		return $return;	}	/**	 * Method to determine if an array is an associative array.	 *	 * @param   array  $array  An array to test.	 *	 * @return  boolean  True if the array is an associative array.	 *	 * @since   11.1	 */	public static function isAssociative($array)	{		if (is_array($array))		{			foreach (array_keys($array) as $k => $v)			{				if ($k !== $v)				{					return true;				}			}		}		return false;	}	/**	 * Pivots an array to create a reverse lookup of an array of scalars, arrays or objects.	 *	 * @param   array   $source  The source array.	 * @param   string  $key     Where the elements of the source array are objects or arrays, the key to pivot on.	 *	 * @return  array  An array of arrays pivoted either on the value of the keys, or an individual key of an object or array.	 *	 * @since   11.3	 */	public static function pivot($source, $key = null)	{		$result = array();		$counter = array();		foreach ($source as $index => $value)		{			// Determine the name of the pivot key, and its value.			if (is_array($value))			{				// If the key does not exist, ignore it.				if (!isset($value[$key]))				{					continue;				}				$resultKey = $value[$key];				$resultValue = &$source[$index];			}			elseif (is_object($value))			{				// If the key does not exist, ignore it.				if (!isset($value->$key))				{					continue;				}				$resultKey = $value->$key;				$resultValue = &$source[$index];			}			else			{				// Just a scalar value.				$resultKey = $value;				$resultValue = $index;			}			// The counter tracks how many times a key has been used.			if (empty($counter[$resultKey]))			{				// The first time around we just assign the value to the key.				$result[$resultKey] = $resultValue;				$counter[$resultKey] = 1;			}			elseif ($counter[$resultKey] == 1)			{				// If there is a second time, we convert the value into an array.				$result[$resultKey] = array(					$result[$resultKey],					$resultValue,				);				$counter[$resultKey]++;			}			else			{				// After the second time, no need to track any more. Just append to the existing array.				$result[$resultKey][] = $resultValue;			}		}		unset($counter);		return $result;	}	/**	 * Utility function to sort an array of objects on a given field	 *	 * @param   array  &$a             An array of objects	 * @param   mixed  $k              The key (string) or a array of key to sort on	 * @param   mixed  $direction      Direction (integer) or an array of direction to sort in [1 = Ascending] [-1 = Descending]	 * @param   mixed  $caseSensitive  Boolean or array of booleans to let sort occur case sensitive or insensitive	 * @param   mixed  $locale         Boolean or array of booleans to let sort occur using the locale language or not	 *	 * @return  array  The sorted array of objects	 *	 * @since   11.1	 */	public static function sortObjects(&$a, $k, $direction = 1, $caseSensitive = true, $locale = false)	{		if (!is_array($locale) || !is_array($locale[0]))		{			$locale = array($locale);		}		self::$sortCase = (array) $caseSensitive;		self::$sortDirection = (array) $direction;		self::$sortKey = (array) $k;		self::$sortLocale = $locale;		usort($a, array(__CLASS__, '_sortObjects'));		self::$sortCase = null;		self::$sortDirection = null;		self::$sortKey = null;		self::$sortLocale = null;		return $a;	}	/**	 * Callback function for sorting an array of objects on a key	 *	 * @param   array  &$a  An array of objects	 * @param   array  &$b  An array of objects	 *	 * @return  integer  Comparison status	 *	 * @see     JArrayHelper::sortObjects()	 * @since   11.1	 */	protected static function _sortObjects(&$a, &$b)	{		$key = self::$sortKey;		for ($i = 0, $count = count($key); $i < $count; $i++)		{			if (isset(self::$sortDirection[$i]))			{				$direction = self::$sortDirection[$i];			}			if (isset(self::$sortCase[$i]))			{				$caseSensitive = self::$sortCase[$i];			}			if (isset(self::$sortLocale[$i]))			{				$locale = self::$sortLocale[$i];			}			$va = $a->$key[$i];			$vb = $b->$key[$i];			if ((is_bool($va) || is_numeric($va)) && (is_bool($vb) || is_numeric($vb)))			{				$cmp = $va - $vb;			}			elseif ($caseSensitive)			{				$cmp = JString::strcmp($va, $vb, $locale);			}			else			{				$cmp = JString::strcasecmp($va, $vb, $locale);			}			if ($cmp > 0)			{				return $direction;			}			if ($cmp < 0)			{				return -$direction;			}		}		return 0;	}	/**	 * Multidimensional array safe unique test	 *	 * @param   array  $myArray  The array to make unique.	 *	 * @return  array	 *	 * @see     http://php.net/manual/en/function.array-unique.php	 * @since   11.2	 */	public static function arrayUnique($myArray)	{		if (!is_array($myArray))		{			return $myArray;		}		foreach ($myArray as &$myvalue)		{			$myvalue = serialize($myvalue);		}		$myArray = array_unique($myArray);		foreach ($myArray as &$myvalue)		{			$myvalue = unserialize($myvalue);		}		return $myArray;	}}
#!/usr/bin/env php<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */define('_JEXEC', 1);define('JPATH_BASE', dirname(__FILE__));// Load the Joomla! Platformrequire_once realpath('../libraries/import.php');/** * Keychain Manager * * @package  Joomla.Platform * @since    12.3 */class KeychainManager extends JApplicationCli{	/**	 * @var    boolean  A flag if the keychain has been updated to trigger saving the keychain	 * @since  12.3	 */	protected $updated = false;	/**	 * @var    JKeychain  The keychain object being manipulated.	 * @since  12.3	 */	protected $keychain = null;	/**	 * Execute the application	 *	 * @return  void	 *	 * @since   12.3	 */	public function execute( )	{		if (!count($this->input->args))		{			// Check if they passed --help in otherwise display short usage summary			if ($this->input->get('help', false) === false)			{				$this->out("usage: {$this->input->executable} [options] [command] [<args>]");				exit(1);			}			else			{				$this->displayHelp();				exit(0);			}		}		// For all tasks but help and init we use the keychain		if (!in_array($this->input->args[0], array('help', 'init')))		{			$this->loadKeychain();		}		switch ($this->input->args[0])		{			case 'init':				$this->initPassphraseFile();				break;			case 'list':				$this->listEntries();				break;			case 'create':				$this->create();				break;			case 'change':				$this->change();			case 'delete':				$this->delete();				break;			case 'read':				$this->read();				break;			case 'help':				$this->displayHelp();				break;			default:				$this->out('Invalid command.');				break;		}		if ($this->updated)		{			$this->saveKeychain();		}		exit(0);	}	/**	 * Load the keychain from a file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function loadKeychain()	{		$keychain = $this->input->get('keychain', '', 'raw');		$publicKeyFile = $this->input->get('public-key', '', 'raw');		$passphraseFile = $this->input->get('passphrase', '', 'raw');		$this->keychain = new JKeychain;		if (file_exists($keychain))		{			if (file_exists($publicKeyFile))			{				$this->keychain->loadKeychain($keychain, $passphraseFile, $publicKeyFile);			}			else			{				$this->out('Public key not specified or missing!');				exit(1);			}		}	}	/**	 * Save this keychain to a file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function saveKeychain()	{		$keychain = $this->input->get('keychain', '', 'raw');		$publicKeyFile = $this->input->get('public-key', '', 'raw');		$passphraseFile = $this->input->get('passphrase', '', 'raw');		if (!file_exists($publicKeyFile))		{			$this->out("Public key file specified doesn't exist: $publicKeyFile");			exit(1);		}		$this->keychain->saveKeychain($keychain, $passphraseFile, $publicKeyFile);	}	/**	 * Initialise a new passphrase file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function initPassphraseFile()	{		$keychain = new JKeychain;		$passphraseFile = $this->input->get('passphrase', '', 'raw');		$privateKeyFile = $this->input->get('private-key', '', 'raw');		if (!strlen($passphraseFile))		{			$this->out('A passphrase file must be specified with --passphrase');			exit(1);		}		if (!file_exists($privateKeyFile))		{			$this->out("protected key file specified doesn't exist: $privateKeyFile");			exit(1);		}		$this->out('Please enter the new passphrase:');		$passphrase = $this->in();		$this->out('Please enter the passphrase for the protected key:');		$privateKeyPassphrase = $this->in();		$keychain->createPassphraseFile($passphrase, $passphraseFile, $privateKeyFile, $privateKeyPassphrase);	}	/**	 * Create a new entry	 *	 * @return  void	 *	 * @since   12.3	 */	protected function create()	{		if (count($this->input->args) != 3)		{			$this->out("usage: {$this->input->executable} [options] create entry_name entry_value");			exit(1);		}		if ($this->keychain->exists($this->input->args[1]))		{			$this->out('error: entry already exists. To change this entry, use "change"');			exit(1);		}		$this->change();	}	/**	 * Change an existing entry to a new value or create an entry if missing.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function change()	{		if (count($this->input->args) != 3)		{			$this->out("usage: {$this->input->executable} [options] change entry_name entry_value");			exit(1);		}		$this->updated = true;		$this->keychain->setValue($this->input->args[1], $this->input->args[2]);	}	/**	 * Read an entry from the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function read()	{		if (count($this->input->args) != 2)		{			$this->out("usage: {$this->input->executable} [options] read entry_name");			exit(1);		}		$key = $this->input->args[1];		$this->out($key . ': ' . $this->dumpVar($this->keychain->get($key)));	}	/**	 * Get the string from var_dump	 *	 * @param   mixed  $var  The variable you want to have dumped.	 *	 * @return  string  The result of var_dump	 *	 * @since   12.3	 */	private function dumpVar($var)	{		ob_start();		var_dump($var);		$result = trim(ob_get_contents());		ob_end_clean();		return $result;	}	/**	 * Delete an entry from the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function delete()	{		if (count($this->input->args) != 2)		{			$this->out("usage: {$this->input->executable} [options] delete entry_name");			exit(1);		}		$this->updated = true;		$this->keychain->deleteValue($this->input->args[1], null);	}	/**	 * List entries in the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function listEntries()	{		foreach ($this->keychain->toArray() as $key => $value)		{			$line = $key;			if ($this->input->get('print-values'))			{				$line .= ': ' . $this->dumpVar($value);			}			$this->out($line);		}	}	/**	 * Display the help information	 *	 * @return  void	 *	 * @since   12.3	 */	protected function displayHelp()	{/*COMMANDS - list - create entry_name entry_value - change entry_name entry_value - delete entry_name - read   entry_name*/		$help = <<<HELPKeychain Management Utilityusage: {$this->input->executable} [--keychain=/path/to/keychain]	[--passphrase=/path/to/passphrase.dat] [--public-key=/path/to/public.pem]	[command] [<args>]OPTIONS  --keychain=/path/to/keychain    Path to a keychain file to manipulate.  --passphrase=/path/to/passphrase.dat    Path to a passphrase file containing the encryption/decryption key.  --public-key=/path/to/public.pem    Path to a public key file to decrypt the passphrase file.COMMANDS  list:    Usage: list [--print-values]    Lists all entries in the keychain. Optionally pass --print-values to print the values as well.  create:    Usage: create entry_name entry_value    Creates a new entry in the keychain called "entry_name" with the plaintext value "entry_value".    NOTE: This is an alias for change.  change:    Usage: change entry_name entry_value    Updates the keychain entry called "entry_name" with the value "entry_value".  delete:    Usage: delete entry_name    Removes an entry called "entry_name" from the keychain.  read:    Usage: read entry_name    Outputs the plaintext value of "entry_name" from the keychain.  init:    Usage: init    Creates a new passphrase file and prompts for a new passphrase.HELP;		$this->out($help);	}}try{	JApplicationCli::getInstance('KeychainManager')->execute();}catch (Exception $e){	echo $e->getMessage() . "\n";	exit(1);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This view is displayed after successfull saving of config data. * Use it to show a message informing about success or simply close a modal window. * * @package     Joomla.Administrator * @subpackage  com_config */class ConfigViewClose extends JViewLegacy{	/**	 * Display the view	 */	public function display($tpl = null)	{		// close a modal window		JFactory::getDocument()->addScriptDeclaration('			window.parent.location.href=window.parent.location.href;			window.parent.SqueezeBox.close();		');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Search Component Search Model * * @package     Joomla.Site * @subpackage  com_search * @since       1.5 */class SearchModelSearch extends JModelLegacy{	/**	 * Search data array	 *	 * @var array	 */	protected $_data = null;	/**	 * Search total	 *	 * @var integer	 */	protected $_total = null;	/**	 * Search areas	 *	 * @var integer	 */	protected  $_areas = null;	/**	 * Pagination object	 *	 * @var object	 */	protected $_pagination = null;	/**	 * Constructor	 *	 * @since 1.5	 */	public function __construct()	{		parent::__construct();		//Get configuration		$app    = JFactory::getApplication();		$config = JFactory::getConfig();		// Get the pagination request variables		$this->setState('limit', $app->getUserStateFromRequest('com_search.limit', 'limit', $config->get('list_limit'), 'uint'));		$this->setState('limitstart', $app->input->get('limitstart', 0, 'uint'));		// Set the search parameters		$keyword  = urldecode($app->input->getString('searchword'));		$match    = $app->input->get('searchphrase', 'all', 'word');		$ordering = $app->input->get('ordering', 'newest', 'word');		$this->setSearch($keyword, $match, $ordering);		//Set the search areas		$areas = $app->input->get('areas');		$this->setAreas($areas);	}	/**	 * Method to set the search parameters	 *	 * @access	public	 * @param string search string	 * @param string mathcing option, exact|any|all	 * @param string ordering option, newest|oldest|popular|alpha|category	 */	public function setSearch($keyword, $match = 'all', $ordering = 'newest')	{		if (isset($keyword))		{			$this->setState('origkeyword', $keyword);			if ($match !== 'exact')			{				$keyword = preg_replace('#\xE3\x80\x80#s', ' ', $keyword);			}			$this->setState('keyword', $keyword);		}		if (isset($match))		{			$this->setState('match', $match);		}		if (isset($ordering))		{			$this->setState('ordering', $ordering);		}	}	/**	 * Method to set the search areas	 *	 * @access	public	 * @param   array  Active areas	 * @param   array  Search areas	 */	public function setAreas($active = array(), $search = array())	{		$this->_areas['active'] = $active;		$this->_areas['search'] = $search;	}	/**	 * Method to get weblink item data for the category	 *	 * @access public	 * @return array	 */	public function getData()	{		// Lets load the content if it doesn't already exist		if (empty($this->_data))		{			$areas = $this->getAreas();			JPluginHelper::importPlugin('search');			$dispatcher = JEventDispatcher::getInstance();			$results = $dispatcher->trigger('onContentSearch', array(				$this->getState('keyword'),				$this->getState('match'),				$this->getState('ordering'),				$areas['active'])			);			$rows = array();			foreach ($results as $result)			{				$rows = array_merge((array) $rows, (array) $result);			}			$this->_total	= count($rows);			if ($this->getState('limit') > 0)			{				$this->_data	= array_splice($rows, $this->getState('limitstart'), $this->getState('limit'));			} else {				$this->_data = $rows;			}		}		return $this->_data;	}	/**	 * Method to get the total number of weblink items for the category	 *	 * @access public	 * @return  integer	 */	public function getTotal()	{		return $this->_total;	}	/**	 * Method to get a pagination object of the weblink items for the category	 *	 * @access public	 * @return  integer	 */	public function getPagination()	{		// Lets load the content if it doesn't already exist		if (empty($this->_pagination))		{			$this->_pagination = new JPagination($this->getTotal(), $this->getState('limitstart'), $this->getState('limit'));		}		return $this->_pagination;	}	/**	 * Method to get the search areas	 *	 * @since 1.5	 */	public function getAreas()	{		// Load the Category data		if (empty($this->_areas['search']))		{			$areas = array();			JPluginHelper::importPlugin('search');			$dispatcher = JEventDispatcher::getInstance();			$searchareas = $dispatcher->trigger('onContentSearchAreas');			foreach ($searchareas as $area)			{				if (is_array($area))				{					$areas = array_merge($areas, $area);				}			}			$this->_areas['search'] = $areas;		}		return $this->_areas;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_whosonline * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($showmode == 0 || $showmode == 2) : ?>	<?php $guest = JText::plural('MOD_WHOSONLINE_GUESTS', $count['guest']); ?>	<?php $member = JText::plural('MOD_WHOSONLINE_MEMBERS', $count['user']); ?>	<p><?php echo JText::sprintf('MOD_WHOSONLINE_WE_HAVE', $guest, $member); ?></p><?php endif; ?><?php if (($showmode > 0) && count($names)) : ?>	<ul  class="whosonline<?php echo $moduleclass_sfx ?>" >	<?php if ($params->get('filter_groups')):?>		<p><?php echo JText::_('MOD_WHOSONLINE_SAME_GROUP_MESSAGE'); ?></p>	<?php endif;?>	<?php foreach ($names as $name) : ?>		<li>			<?php echo $name->username; ?>		</li>	<?php endforeach;  ?>	</ul><?php endif;
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');$pageClass = $this->params->get('pageclass_sfx');?><section class="category-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><?php if ($this->params->get('show_page_heading') and ($this->params->get('show_category_title') or $this->params->get('page_subheading'))) : ?><hgroup><?php endif; ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading')) : ?><h2>	<?php echo $this->escape($this->params->get('page_subheading')); ?>	<?php if ($this->params->get('show_category_title'))	{		echo '<span class="subheading-category">'.$this->category->title.'</span>';	}	?></h2><?php if ($this->params->get('show_page_heading') and ($this->params->get('show_category_title', 1) or $this->params->get('page_subheading'))) : ?></hgroup><?php endif; ?><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_content.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php if (is_array($this->children[$this->category->id]) && count($this->children[$this->category->id]) > 0 && $this->params->get('maxLevel') != 0) : ?>		<div class="cat-children">	<?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading'))	{		echo '<h3>';	}	elseif ($this->params->get('show_category_heading_title_text', 1) == 1)	{		echo '<h2>';	} ?>    <?php if ($this->params->get('show_category_heading_title_text', 1) == 1) : ?>		<?php echo JTEXT::_('JGLOBAL_SUBCATEGORIES'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading'))	{		echo '</h3>';	}	elseif ($this->params->get('show_category_heading_title_text', 1) == 1)	{		echo '</h2>';	} ?>		</div>	<?php endif; ?>		<?php echo $this->loadTemplate('children'); ?>			<div class="cat-items">		<?php echo $this->loadTemplate('articles'); ?>	</div></section>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_SERVER_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('server') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$headerText	= JString::trim($params->get('header_text'));$footerText	= JString::trim($params->get('footer_text'));$list = ModLanguagesHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_languages', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for Sliders elements * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlSliders{	/**	 * Creates a panes and loads the javascript behavior for it.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  An array of options.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function start($group = 'sliders', $params = array())	{		self::_loadBehavior($group, $params);		return '<div id="' . $group . '" class="pane-sliders"><div style="display:none;"><div>';	}	/**	 * Close the current pane.	 *	 * @return  string  hTML to close the pane	 *	 * @since   11.1	 */	public static function end()	{		return '</div></div></div>';	}	/**	 * Begins the display of a new panel.	 *	 * @param   string  $text  Text to display.	 * @param   string  $id    Identifier of the panel.	 *	 * @return  string  HTML to start a panel	 *	 * @since   11.1	 */	public static function panel($text, $id)	{		return '</div></div><div class="panel"><h3 class="pane-toggler title" id="' . $id . '"><a href="javascript:void(0);"><span>' . $text			. '</span></a></h3><div class="pane-slider content">';	}	/**	 * Load the JavaScript behavior.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  Array of options.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function _loadBehavior($group, $params = array())	{		static $loaded = array();		if (!array_key_exists($group, $loaded))		{			// Get the JInput object			$input = JFactory::getApplication()->input;			$loaded[$group] = true;			// Include mootools framework.			JHtml::_('behavior.framework', true);			$document = JFactory::getDocument();			$display = (isset($params['startOffset']) && isset($params['startTransition']) && $params['startTransition'])				? (int) $params['startOffset'] : null;			$show = (isset($params['startOffset']) && !(isset($params['startTransition']) && $params['startTransition']))				? (int) $params['startOffset'] : null;			$opt['onActive'] = "\\function(toggler, i) {toggler.addClass('pane-toggler-down');" .				"toggler.removeClass('pane-toggler');i.addClass('pane-down');i.removeClass('pane-hide');Cookie.write('jpanesliders_"				. $group . "',$$('div#" . $group . ".pane-sliders > .panel > h3').indexOf(toggler));}";			$opt['onBackground'] = "\\function(toggler, i) {toggler.addClass('pane-toggler');" .				"toggler.removeClass('pane-toggler-down');i.addClass('pane-hide');i.removeClass('pane-down');if($$('div#"				. $group . ".pane-sliders > .panel > h3').length==$$('div#" . $group				. ".pane-sliders > .panel > h3.pane-toggler').length) Cookie.write('jpanesliders_" . $group . "',-1);}";			$opt['duration'] = (isset($params['duration'])) ? (int) $params['duration'] : 300;			$opt['display'] = (isset($params['useCookie']) && $params['useCookie']) ? $input->cookie->get('jpanesliders_' . $group, $display, 'integer')				: $display;			$opt['show'] = (isset($params['useCookie']) && $params['useCookie']) ? $input->cookie->get('jpanesliders_' . $group, $show, 'integer') : $show;			$opt['opacity'] = (isset($params['opacityTransition']) && ($params['opacityTransition'])) ? 'true' : 'false';			$opt['alwaysHide'] = (isset($params['allowAllClose']) && (!$params['allowAllClose'])) ? 'false' : 'true';			$options = JHtml::getJSObject($opt);			$js = "window.addEvent('domready', function(){ new Fx.Accordion($$('div#" . $group				. ".pane-sliders > .panel > h3.pane-toggler'), $$('div#" . $group . ".pane-sliders > .panel > div.pane-slider'), " . $options				. "); });";			$document->addScriptDeclaration($js);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Route Helper * * @static * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsHelperRoute extends JHelperRoute{	protected static $lookup;	/**	 * Tries to load the router for the component and calls it. Otherwise uses getTagRoute.	 *	 * @param   integer  $contentItemId     Component item id	 * @param   string   $contentItemAlias  Component item alias	 * @param   integer  $contentCatId      Component item category id	 * @param   string   $language          Component item language	 * @param   string   $typeAlias         Component type alias	 * @param   string   $routerName        Component router	 *	 * @return  string  URL link to pass to JRoute	 *	 * @since   3.1	 */	public static function getItemRoute($contentItemId, $contentItemAlias, $contentCatId, $language, $typeAlias, $routerName)	{		$link = '';		$explodedAlias = explode('.', $typeAlias);		$explodedRouter = explode('::', $routerName);		if (file_exists($routerFile = JPATH_BASE . '/components/' . $explodedAlias[0] . '/helpers/route.php'))		{			JLoader::register($explodedRouter[0], $routerFile);			$routerClass = $explodedRouter[0];			$routerMethod = $explodedRouter[1];			if (class_exists($routerClass) && method_exists($routerClass, $routerMethod))			{				if ($routerMethod == 'getCategoryRoute')				{					$link = $routerClass::$routerMethod($contentItemId, $language);				}				else				{					$link = $routerClass::$routerMethod($contentItemId . ':' . $contentItemAlias, $contentCatId, $language);				}			}		}		if ($link == '')		{			// create a fallback link in case we can't find the component router			$router = new JHelperRoute;			$link = $router->getRoute($contentItemId, $typeAlias, $link, $language, $contentCatId);		}		return $link;	}	/**	 * Tries to load the router for the component and calls it. Otherwise calls getRoute.	 *	 * @param   integer  $id  The ID of the tag	 *	 * @return  string  URL link to pass to JRoute	 *	 * @since   3.1	 */	public static function getTagRoute($id)	{		$needles = array(			'tag'  => array((int) $id)		);		if ($id < 1)		{			$link = '';		}		else		{			if (!empty($needles) && $item = self::_findItem($needles))			{				$link = 'index.php?Itemid=' . $item;			}			else			{				// Create the link				$link = 'index.php?option=com_tags&view=tag&id=' . $id;			}		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (self::$lookup === null)		{			self::$lookup = array();			$component	= JComponentHelper::getComponent('com_tags');			$items		= $menus->getItems('component_id', $component->id);			if ($items) {				foreach ($items as $item)				{					if (isset($item->query) && isset($item->query['view']))					{						$view = $item->query['view'];						if (!isset(self::$lookup[$view]))						{							self::$lookup[$view] = array();						}						// Only match menu items that list one tag						if (isset($item->query['id'][0]) && count($item->query['id']) == 1)						{							// Here it will become a bit tricky							// language != * can override existing entries							// language == * cannot override existing entries							if (!isset(self::$lookup[$language][$view][$item->query['id'][0]]) || $item->language != '*')							{								self::$lookup[$language][$view][$item->query['id'][0]] = $item->id;							}							self::$lookup[$view][$item->query['id'][0]] = $item->id;						}						if (isset($item->query["tag_list_language_filter"]) && $item->query["tag_list_language_filter"] != '')						{							$language = $item->query["tag_list_language_filter"];						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$view]))				{					foreach($ids as $id)					{						if (isset(self::$lookup[$view][(int) $id]))						{							return self::$lookup[$view][(int) $id];						}					}				}			}		}		else		{			$active = $menus->getActive();			if ($active)			{				return $active->id;			}		}		return null;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('JHtmlUsers', JPATH_COMPONENT . '/helpers/html/users.php');JHtml::register('users.spacer', array('JHtmlUsers', 'spacer'));$fieldsets = $this->form->getFieldsets();if (isset($fieldsets['core']))   unset($fieldsets['core']);if (isset($fieldsets['params'])) unset($fieldsets['params']);foreach ($fieldsets as $group => $fieldset): // Iterate through the form fieldsets	$fields = $this->form->getFieldset($group);	if (count($fields)):?><?php //if ($this->params->get('show_tags')) : ?>		<?php  //$this->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php //echo $this->tagLayout->render($this->tags); ?>	<?php // endif; ?><fieldset id="users-profile-custom" class="users-profile-custom-<?php echo $group;?>">	<?php if (isset($fieldset->label)):// If the fieldset has a label set, display it as the legend.?>	<legend><?php echo JText::_($fieldset->label); ?></legend>	<?php endif;?>	<dl class="dl-horizontal">	<?php foreach ($fields as $field):		if (!$field->hidden) :?>		<dt><?php echo $field->title; ?></dt>		<dd>			<?php if (JHtml::isRegistered('users.'.$field->id)):?>				<?php echo JHtml::_('users.'.$field->id, $field->value);?>			<?php elseif (JHtml::isRegistered('users.'.$field->fieldname)):?>				<?php echo JHtml::_('users.'.$field->fieldname, $field->value);?>			<?php elseif (JHtml::isRegistered('users.'.$field->type)):?>				<?php echo JHtml::_('users.'.$field->type, $field->value);?>			<?php else:?>				<?php echo JHtml::_('users.value', $field->value);?>			<?php endif;?>		</dd>		<?php endif;?>	<?php endforeach;?>	</dl></fieldset>	<?php endif;?><?php endforeach;?>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MODULES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($label); ?></legend>		<?php $hidden_fields = ''; ?>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<?php if (!$field->hidden) : ?>			<li>				<?php echo $field->label; ?>				<?php echo $field->input; ?>			</li>			<?php else : $hidden_fields .= $field->input; ?>			<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php echo $hidden_fields; ?>		</fieldset>	<?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Clicks Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldClicks extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Clicks';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$onclick	= ' onclick="document.id(\''.$this->id.'\').value=\'0\';"';		return '<input class="input-small" type="text" name="' . $this->name . '" id="' . $this->id . '" value="' . htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '" readonly="readonly" /> <a class="btn" ' . $onclick . '><i class="icon-refresh"></i> ' . JText::_('COM_BANNERS_RESET_CLICKS') . '</a>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_redirect')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Redirect');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Prototype item model. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */abstract class JModelItem extends JModelLegacy{	/**	 * An item.	 *	 * @var    array	 */	protected $_item = null;	/**	 * Model context string.	 *	 * @var    string	 * @since  12.2	 */	protected $_context = 'group.type';	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 *	 * @since   12.2	 */	protected function getStoreId($id = '')	{		// Compile the store id.		return md5($id);	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extended Utility class for handling date display. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.3 */abstract class JHtmlDate{	/**	 * Function to convert a static time into a relative measurement	 *	 * @param   string  $date  The date to convert	 * @param   string  $unit  The optional unit of measurement to return	 *                         if the value of the diff is greater than one	 * @param   string  $time  An optional time to compare to, defaults to now	 *	 * @return  string  The converted time string	 *	 * @since   11.3	 */	public static function relative($date, $unit = null, $time = null)	{		if (is_null($time))		{			// Get now			$time = JFactory::getDate('now');		}		// Get the difference in seconds between now and the time		$diff = strtotime($time) - strtotime($date);		// Less than a minute		if ($diff < 60)		{			return JText::_('JLIB_HTML_DATE_RELATIVE_LESSTHANAMINUTE');		}		// Round to minutes		$diff = round($diff / 60);		// 1 to 59 minutes		if ($diff < 60 || $unit == 'minute')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_MINUTES', $diff);		}		// Round to hours		$diff = round($diff / 60);		// 1 to 23 hours		if ($diff < 24 || $unit == 'hour')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_HOURS', $diff);		}		// Round to days		$diff = round($diff / 24);		// 1 to 6 days		if ($diff < 7 || $unit == 'day')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_DAYS', $diff);		}		// Round to weeks		$diff = round($diff / 7);		// 1 to 4 weeks		if ($diff <= 4 || $unit == 'week')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_WEEKS', $diff);		}		// Over a month, return the absolute time		return JHtml::_('date', $date);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules manager master display controller. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/modules.php';		// Load the submenu.		ModulesHelper::addSubmenu($this->input->get('view', 'modules'));		$view   = $this->input->get('view', 'modules');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'module' && $layout == 'edit' && !$this->checkEditId('com_modules.edit.module', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_modules&view=modules', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	$paramstabs = 'params-' . $name;	echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true));	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<div class="control-group">				<div class="control-label"><?php echo $field->label; ?></div>				<div class="controls"><?php echo $field->input; ?></div>			</div>		<?php endforeach; ?>	<?php echo JHtml::_('bootstrap.endTab'); ?><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Text Parser class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerParserTxt extends FinderIndexerParser{	/**	 * Method to process Text input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	protected function process($input)	{		return $input;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));// Create a shortcut for params.$params = &$this->item->params;?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_CONTACT_NO_CONTACTS'); ?>	 </p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>	<?php if ($this->params->get('show_pagination_limit')) : ?>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	<?php endif; ?>	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	</fieldset>	<table class="category">		<?php if ($this->params->get('show_headings')) : ?>		<thead><tr>			<th class="item-num">				<?php echo JText::_('JGLOBAL_NUM'); ?>			</th>			<th class="item-title">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_CONTACT_EMAIL_NAME_LABEL', 'a.name', $listDirn, $listOrder); ?>			</th>			<?php if ($this->params->get('show_position_headings')) : ?>			<th class="item-position">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_POSITION', 'a.con_position', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_email_headings')) : ?>			<th class="item-email">				<?php echo JText::_('JGLOBAL_EMAIL'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_telephone_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_TELEPHONE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_mobile_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_MOBILE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_fax_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_FAX'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_suburb_headings')) : ?>			<th class="item-suburb">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_SUBURB', 'a.suburb', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_state_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_STATE', 'a.state', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_country_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_COUNTRY', 'a.country', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $item) : ?>				<tr class="<?php echo ($i % 2) ? "odd" : "even"; ?>">					<td class="item-num">						<?php echo $i; ?>					</td>					<td class="item-title">						<?php if ($this->items[$i]->published == 0) : ?>							<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>						<?php endif; ?>						<a href="<?php echo JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</td>					<?php if ($this->params->get('show_position_headings')) : ?>						<td class="item-position">							<?php echo $item->con_position; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_email_headings')) : ?>						<td class="item-email">							<?php echo $item->email_to; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_telephone_headings')) : ?>						<td class="item-phone">							<?php echo $item->telephone; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_mobile_headings')) : ?>						<td class="item-phone">							<?php echo $item->mobile; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_fax_headings')) : ?>					<td class="item-phone">						<?php echo $item->fax; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_suburb_headings')) : ?>					<td class="item-suburb">						<?php echo $item->suburb; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_state_headings')) : ?>					<td class="item-state">						<?php echo $item->state; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_country_headings')) : ?>					<td class="item-state">						<?php echo $item->country; ?>					</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_COOKIE_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('cookie') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentImage class, provides an easy interface to output image data * * @package     Joomla.Platform * @subpackage  Document * @since       12.1 */class JDocumentImage extends JDocument{	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since   12.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'image/png';		// Set document type		$this->_type = 'image';	}	/**	 * Render the document.	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   12.1	 */	public function render($cache = false, $params = array())	{		// Get the image type		$type = JFactory::getApplication()->input->get('type', 'png');		switch ($type)		{			case 'jpg':			case 'jpeg':				$this->_mime = 'image/jpeg';				break;			case 'gif':				$this->_mime = 'image/gif';				break;			case 'png':			default:				$this->_mime = 'image/png';				break;		}		$this->_charset = null;		parent::render();		return $this->getBuffer();	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML helper class for rendering numbers. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlNumber{	/**	 * Converts bytes to more distinguishable formats such as:	 * kilobytes, megabytes, etc.	 *	 * By default, the proper format will automatically be chosen.	 * However, one of the allowed unit types may also be used instead.	 *	 * @param   integer  $bytes      The number of bytes.	 * @param   string   $unit       The type of unit to return.	 * @param   integer  $precision  The number of digits to be used after the decimal place.	 *	 * @return  string   The number of bytes in the proper units.	 *	 * @since   11.1	 */	public static function bytes($bytes, $unit = 'auto', $precision = 2)	{		// No explicit casting $bytes to integer here, since it might overflow		// on 32-bit systems		$precision = (int) $precision;		if (empty($bytes))		{			return 0;		}		$unitTypes = array('b', 'kb', 'MB', 'GB', 'TB', 'PB');		// Default automatic method.		$i = floor(log($bytes, 1024));		// User supplied method:		if ($unit !== 'auto' && in_array($unit, $unitTypes))		{			$i = array_search($unit, $unitTypes, true);		}		// TODO Allow conversion of units where $bytes = '32M'.		return round($bytes / pow(1024, $i), $precision) . ' ' . $unitTypes[$i];	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to remove the old database for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallDatabase_remove extends InstallationControllerInstallDatabase_backup{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License, see LICENSE.php */defined('_JEXEC') or die;/** * Languages Installer Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.7 */class InstallerControllerLanguages extends JControllerLegacy{	/**	 * Finds new Languages.	 *	 * @return  void	 *	 * @since   2.5.7	 */	public function find()	{		// Purge the updates list		$model = $this->getModel('update');		$model->purge();		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the caching duration		$component = JComponentHelper::getComponent('com_installer');		$params = $component->params;		$cache_timeout = $params->get('cachetimeout', 6, 'int');		$cache_timeout = 3600 * $cache_timeout;		// Find updates		$model	= $this->getModel('languages');		$model->findLanguages($cache_timeout);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=languages', false));	}	/**	 * Purge the updates list.	 *	 * @return  void	 *	 * @since   2.5.7	 */	public function purge()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Purge updates		$model = $this->getModel('update');		$model->purge();		$model->enableSites();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=languages', false), $model->_message);	}	/**	 * Install languages.	 *	 * @return  void	 *	 * @since   2.5.7	 */	public function install()	{		$model = $this->getModel('languages');		// Get array of selected languages		$lids = $this->input->get('cid', array(), 'array');		JArrayHelper::toInteger($lids, array());		if (!$lids)		{			// No languages have been selected			$app = JFactory::getApplication();			$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_NOEXTENSIONSELECTED'));		}		else		{			// Install selected languages			$model->install($lids);		}		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=languages', false));	}}
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt *//** * This is a CRON script which should be called from the command-line, not the * web. For example something like: * /usr/bin/php /path/to/site/cli/update_cron.php */// Set flag that this is a parent file.const _JEXEC = 1;error_reporting(E_ALL | E_NOTICE);ini_set('display_errors', 1);// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}require_once JPATH_LIBRARIES . '/import.legacy.php';require_once JPATH_LIBRARIES . '/cms.php';// Load the configurationrequire_once JPATH_CONFIGURATION . '/configuration.php';/** * This script will fetch the update information for all extensions and store * them in the database, speeding up your administrator. * * @package  Joomla.CLI * @since    2.5 */class Updatecron extends JApplicationCli{	/**	 * Entry point for the script	 *	 * @return  void	 *	 * @since   2.5	 */	public function doExecute()	{		// Get the update cache time		$component = JComponentHelper::getComponent('com_installer');		$params = $component->params;		$cache_timeout = $params->get('cachetimeout', 6, 'int');		$cache_timeout = 3600 * $cache_timeout;		// Find all updates		$this->out('Fetching updates...');		$updater = JUpdater::getInstance();		$updater->findUpdates(0, $cache_timeout);		$this->out('Finished fetching updates');	}}JApplicationCli::getInstance('Updatecron')->execute();
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of redirection links. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectViewLinks extends JViewLegacy{	protected $enabled;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$this->enabled		= RedirectHelper::isEnabled();		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= RedirectHelper::getActions();		JToolbarHelper::title(JText::_('COM_REDIRECT_MANAGER_LINKS'), 'redirect');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('link.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('link.edit');		}		if ($canDo->get('core.edit.state'))		{			if ($state->get('filter.state') != 2){				JToolbarHelper::divider();				JToolbarHelper::publish('links.publish', 'JTOOLBAR_ENABLE', true);				JToolbarHelper::unpublish('links.unpublish', 'JTOOLBAR_DISABLE', true);			}			if ($state->get('filter.state') != -1 )			{				JToolbarHelper::divider();				if ($state->get('filter.state') != 2)				{					JToolbarHelper::archiveList('links.archive');				}				elseif ($state->get('filter.state') == 2)				{					JToolbarHelper::unarchiveList('links.publish', 'JTOOLBAR_UNARCHIVE');				}			}		}		if ($state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'links.delete', 'JTOOLBAR_EMPTY_TRASH');			JToolbarHelper::divider();		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('links.trash');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_redirect');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_COMPONENTS_REDIRECT_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_redirect&view=links');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', RedirectHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.state'), true)		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR.'/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();$user = JFactory::getUser();?><label id="jform_menuselect-lbl" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label><div class="btn-toolbar">	<button class="btn" type="button" class="jform-rightbtn" onclick="$$('.chk-menulink').each(function(el) { el.checked = !el.checked; });">		<i class="icon-checkbox-partial"></i> <?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>	</button></div><div id="menu-assignment">	<ul class="menu-links thumbnails">		<?php foreach ($menuTypes as &$type) : ?>			<li class="span3">				<div class="thumbnail">				<button class="btn" type="button" class="jform-rightbtn" onclick="$$('.<?php echo $type->menutype; ?>').each(function(el) { el.checked = !el.checked; });">					<i class="icon-checkbox-partial"></i> <?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>				</button>				<h5><?php echo $type->title ? $type->title : $type->menutype; ?></h5>				<?php foreach ($type->links as $link) : ?>					<label class="checkbox small" for="link<?php echo (int) $link->value;?>" >					<input type="checkbox" name="jform[assigned][]" value="<?php echo (int) $link->value;?>" id="link<?php echo (int) $link->value;?>"<?php if ($link->template_style_id == $this->item->id):?> checked="checked"<?php endif;?><?php if ($link->checked_out && $link->checked_out != $user->id):?> disabled="disabled"<?php else:?> class="chk-menulink <?php echo $type->menutype; ?>"<?php endif;?> />					<?php echo $link->text; ?>					</label>				<?php endforeach; ?>				</div>			</li>		<?php endforeach; ?>	</ul></div>
<?php/*** Tools to help with ASCII in UTF-8* @version $Id$* @package utf8* @subpackage ascii*///--------------------------------------------------------------------/*** Tests whether a string contains only 7bit ASCII bytes.* You might use this to conditionally check whether a string* needs handling as UTF-8 or not, potentially offering performance* benefits by using the native PHP equivalent if it's just ASCII e.g.;** <code>* if ( utf8_is_ascii($someString) ) {*     // It's just ASCII - use the native PHP version*     $someString = strtolower($someString);* } else {*     $someString = utf8_strtolower($someString);* }* </code>** @param string* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage ascii* @see utf8_is_ascii_ctrl*/function utf8_is_ascii($str) {    // Search for any bytes which are outside the ASCII range...    return (preg_match('/(?:[^\x00-\x7F])/',$str) !== 1);}//--------------------------------------------------------------------/*** Tests whether a string contains only 7bit ASCII bytes with device* control codes omitted. The device control codes can be found on the* second table here: http://www.w3schools.com/tags/ref_ascii.asp** @param string* @return boolean TRUE if it's all ASCII without device control codes* @package utf8* @subpackage ascii* @see utf8_is_ascii*/function utf8_is_ascii_ctrl($str) {    if ( strlen($str) > 0 ) {        // Search for any bytes which are outside the ASCII range,        // or are device control codes        return (preg_match('/[^\x09\x0A\x0D\x20-\x7E]/',$str) !== 1);    }    return FALSE;}//--------------------------------------------------------------------/*** Strip out all non-7bit ASCII bytes* If you need to transmit a string to system which you know can only* support 7bit ASCII, you could use this function.* @param string* @return string with non ASCII bytes removed* @package utf8* @subpackage ascii* @see utf8_strip_non_ascii_ctrl*/function utf8_strip_non_ascii($str) {    ob_start();    while ( preg_match(        '/^([\x00-\x7F]+)|([^\x00-\x7F]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Strip out device control codes in the ASCII range* which are not permitted in XML. Note that this leaves* multi-byte characters untouched - it only removes device* control codes* @see http://hsivonen.iki.fi/producing-xml/#controlchar* @param string* @return string control codes removed*/function utf8_strip_ascii_ctrl($str) {    ob_start();    while ( preg_match(        '/^([^\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+)|([\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Strip out all non 7bit ASCII bytes and ASCII device control codes.* For a list of ASCII device control codes see the 2nd table here:* http://www.w3schools.com/tags/ref_ascii.asp** @param string* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage ascii*/function utf8_strip_non_ascii_ctrl($str) {    ob_start();    while ( preg_match(        '/^([\x09\x0A\x0D\x20-\x7E]+)|([^\x09\x0A\x0D\x20-\x7E]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//---------------------------------------------------------------/*** Replace accented UTF-8 characters by unaccented ASCII-7 "equivalents".* The purpose of this function is to replace characters commonly found in Latin* alphabets with something more or less equivalent from the ASCII range. This can* be useful for converting a UTF-8 to something ready for a filename, for example.* Following the use of this function, you would probably also pass the string* through utf8_strip_non_ascii to clean out any other non-ASCII chars* Use the optional parameter to just deaccent lower ($case = -1) or upper ($case = 1)* letters. Default is to deaccent both cases ($case = 0)** For a more complete implementation of transliteration, see the utf8_to_ascii package* available from the phputf8 project downloads:* http://prdownloads.sourceforge.net/phputf8** @param string UTF-8 string* @param int (optional) -1 lowercase only, +1 uppercase only, 1 both cases* @param string UTF-8 with accented characters replaced by ASCII chars* @return string accented chars replaced with ascii equivalents* @author Andreas Gohr <andi@splitbrain.org>* @package utf8* @subpackage ascii*/function utf8_accents_to_ascii( $str, $case=0 ){    static $UTF8_LOWER_ACCENTS = NULL;    static $UTF8_UPPER_ACCENTS = NULL;    if($case <= 0){        if ( is_null($UTF8_LOWER_ACCENTS) ) {            $UTF8_LOWER_ACCENTS = array(  '' => 'a', '' => 'o', '' => 'd', '' => 'f', '' => 'e', '' => 's', '' => 'o',  '' => 'ss', '' => 'a', '' => 'r', '' => 't', '' => 'n', '' => 'a', '' => 'k',  '' => 's', '' => 'y', '' => 'n', '' => 'l', '' => 'h', '' => 'p', '' => 'o',  '' => 'u', '' => 'e', '' => 'e', '' => 'c', '' => 'w', '' => 'c', '' => 'o',  '' => 's', '' => 'o', '' => 'g', '' => 't', '' => 's', '' => 'e', '' => 'c',  '' => 's', '' => 'i', '' => 'u', '' => 'c', '' => 'e', '' => 'w', '' => 't',  '' => 'u', '' => 'c', '' => 'oe', '' => 'e', '' => 'y', '' => 'a', '' => 'l',  '' => 'u', '' => 'u', '' => 's', '' => 'g', '' => 'l', '' => 'f', '' => 'z',  '' => 'w', '' => 'b', '' => 'a', '' => 'i', '' => 'i', '' => 'd', '' => 't',  '' => 'r', '' => 'ae', '' => 'i', '' => 'r', '' => 'e', '' => 'ue', '' => 'o',  '' => 'e', '' => 'n', '' => 'n', '' => 'h', '' => 'g', '' => 'd', '' => 'j',  '' => 'y', '' => 'u', '' => 'u', '' => 'u', '' => 't', '' => 'y', '' => 'o',  '' => 'a', '' => 'l', '' => 'w', '' => 'z', '' => 'i', '' => 'a', '' => 'g',  '' => 'm', '' => 'o', '' => 'i', '' => 'u', '' => 'i', '' => 'z', '' => 'a',  '' => 'u', '' => 'th', '' => 'dh', '' => 'ae', '' => 'u', '' => 'e',            );        }        $str = str_replace(                array_keys($UTF8_LOWER_ACCENTS),                array_values($UTF8_LOWER_ACCENTS),                $str            );    }    if($case >= 0){        if ( is_null($UTF8_UPPER_ACCENTS) ) {            $UTF8_UPPER_ACCENTS = array(  '' => 'A', '' => 'O', '' => 'D', '' => 'F', '' => 'E', '' => 'S', '' => 'O',  '' => 'A', '' => 'R', '' => 'T', '' => 'N', '' => 'A', '' => 'K',  '' => 'S', '' => 'Y', '' => 'N', '' => 'L', '' => 'H', '' => 'P', '' => 'O',  '' => 'U', '' => 'E', '' => 'E', '' => 'C', '' => 'W', '' => 'C', '' => 'O',  '' => 'S', '' => 'O', '' => 'G', '' => 'T', '' => 'S', '' => 'E', '' => 'C',  '' => 'S', '' => 'I', '' => 'U', '' => 'C', '' => 'E', '' => 'W', '' => 'T',  '' => 'U', '' => 'C', '' => 'Oe', '' => 'E', '' => 'Y', '' => 'A', '' => 'L',  '' => 'U', '' => 'U', '' => 'S', '' => 'G', '' => 'L', '' => 'F', '' => 'Z',  '' => 'W', '' => 'B', '' => 'A', '' => 'I', '' => 'I', '' => 'D', '' => 'T',  '' => 'R', '' => 'Ae', '' => 'I', '' => 'R', '' => 'E', '' => 'Ue', '' => 'O',  '' => 'E', '' => 'N', '' => 'N', '' => 'H', '' => 'G', '' => 'D', '' => 'J',  '' => 'Y', '' => 'U', '' => 'U', '' => 'U', '' => 'T', '' => 'Y', '' => 'O',  '' => 'A', '' => 'L', '' => 'W', '' => 'Z', '' => 'I', '' => 'A', '' => 'G',  '' => 'M', '' => 'O', '' => 'I', '' => 'U', '' => 'I', '' => 'Z', '' => 'A',  '' => 'U', '' => 'Th', '' => 'Dh', '' => 'Ae', '' => 'E',            );        }        $str = str_replace(                array_keys($UTF8_UPPER_ACCENTS),                array_values($UTF8_UPPER_ACCENTS),                $str            );    }    return $str;}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for form elements * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlForm{	/**	 * Displays a hidden token field to reduce the risk of CSRF exploits	 *	 * Use in conjunction with JSession::checkToken	 *	 * @return  string  A hidden input field with a token	 *	 * @see     JSession::checkToken	 * @since   11.1	 */	public static function token()	{		return '<input type="hidden" name="' . JSession::getFormToken() . '" value="1" />';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Category table * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesTableCategory extends JTableCategory{	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @see     http://docs.joomla.org/JTableNested/delete	 * @since   2.5	 */	public function delete($pk = null, $children = false)	{		return parent::delete($pk, $children);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* marker_class: Class based on the selection of text, none, or icons * jicon-text, jicon-none, jicon-icon */?><dl class="contact-address dl-horizontal"><?php if (($this->params->get('address_check') > 0) &&  ($this->contact->address || $this->contact->suburb  || $this->contact->state || $this->contact->country || $this->contact->postcode)) : ?>	<?php if ($this->params->get('address_check') > 0) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_address'); ?>		</span>	</dt>	<dd>	<address>	<?php endif; ?>	<?php if ($this->contact->address && $this->params->get('show_street_address')) : ?>		<span class="contact-street">			<?php echo nl2br($this->contact->address); ?>		</span>	<?php endif; ?>	<?php if ($this->contact->suburb && $this->params->get('show_suburb')) : ?>		<span class="contact-suburb">			<?php echo $this->contact->suburb; ?>		</span>	<?php endif; ?>	<?php if ($this->contact->state && $this->params->get('show_state')) : ?>		<span class="contact-state">			<?php echo $this->contact->state; ?>		</span>	<?php endif; ?>	<?php if ($this->contact->postcode && $this->params->get('show_postcode')) : ?>		<span class="contact-postcode">			<?php echo $this->contact->postcode; ?>		</span>	<?php endif; ?>	<?php if ($this->contact->country && $this->params->get('show_country')) : ?>		<span class="contact-country">			<?php echo $this->contact->country; ?>		</span>	<?php endif; ?><?php endif; ?><?php if ($this->params->get('address_check') > 0) : ?>	</address>	</dd><?php endif; ?><?php if ($this->contact->email_to && $this->params->get('show_email')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_email'); ?>		</span>	</dt>	<dd>		<span class="contact-emailto">			<?php echo $this->contact->email_to; ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->telephone && $this->params->get('show_telephone')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_telephone'); ?>		</span>	</dt>	<dd>		<span class="contact-telephone">			<?php echo nl2br($this->contact->telephone); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->fax && $this->params->get('show_fax')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_fax'); ?>		</span>	</dt>	<dd>		<span class="contact-fax">		<?php echo nl2br($this->contact->fax); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->mobile && $this->params->get('show_mobile')) :?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_mobile'); ?>		</span>	</dt>	<dd>		<span class="contact-mobile">			<?php echo nl2br($this->contact->mobile); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->webpage && $this->params->get('show_webpage')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >		</span>	</dt>	<dd>		<span class="contact-webpage">			<a href="<?php echo $this->contact->webpage; ?>" target="_blank">			<?php echo $this->contact->webpage; ?></a>		</span>	</dd><?php endif; ?></dl>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" /></head><body class="contentpane">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to detect the site's FTP root for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerDetectftproot extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the data		$data = $app->input->post->get('jform', array(), 'array');		// Store the options in the session.		$vars = $model->storeOptions($data);		// Get the database model.		$ftp = new InstallationModelFtp;		// Attempt to detect the Joomla root from the ftp account.		$return = $ftp->detectFtpRoot($vars);		// Build the response object		$r = new stdClass;		$r->view = 'ftp';		// If we got a FTP root, add it to the response object		if ($return)		{			$r->root = $return;		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Media Manager Component Controller * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		JPluginHelper::importPlugin('content');		$vName = $this->input->get('view', 'media');		switch ($vName)		{			case 'images':				$vLayout = $this->input->get('layout', 'default');				$mName = 'manager';				break;			case 'imagesList':				$mName = 'list';				$vLayout = $this->input->get('layout', 'default');				break;			case 'mediaList':				$app	= JFactory::getApplication();				$mName = 'list';				$vLayout = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');				break;			case 'media':			default:				$vName = 'media';				$vLayout = $this->input->get('layout', 'default');				$mName = 'manager';				break;		}		$document = JFactory::getDocument();		$vType    = $document->getType();		// Get/Create the view		$view = $this->getView($vName, $vType);		$view->addTemplatePath(JPATH_COMPONENT_ADMINISTRATOR.'/views/'.strtolower($vName).'/tmpl');		// Get/Create the model		if ($model = $this->getModel($mName))		{			// Push the model into the view (as default)			$view->setModel($model, true);		}		// Set the layout		$view->setLayout($vLayout);		// Display the view		$view->display();		return $this;	}	public function ftpValidate()	{		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><form action="<?php echo JRoute::_('index.php?option=com_cache'); ?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>  	<fieldset>  		<legend><?php echo JText::_('COM_CACHE_PURGE_EXPIRED_ITEMS'); ?></legend>  		<p><?php echo JText::_('COM_CACHE_PURGE_INSTRUCTIONS'); ?></p>  	</fieldset>  	<div class="alert">  		<p><?php echo JText::_('COM_CACHE_RESOURCE_INTENSIVE_WARNING'); ?></p>  	</div>  	<input type="hidden" name="task" value="" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR.'/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();?>		<script type="text/javascript">			window.addEvent('domready', function(){				validate();				document.getElements('select').addEvent('change', function(e){validate();});			});			function validate(){				var value	= document.id('jform_assignment').value;				var list	= document.id('menu-assignment');				if (value == '-' || value == '0'){					$$('.jform-assignments-button').each(function(el) {el.setProperty('disabled', true); });					list.getElements('input').each(function(el){						el.setProperty('disabled', true);						if (value == '-'){							el.setProperty('checked', false);						} else {							el.setProperty('checked', true);						}					});				} else {					$$('.jform-assignments-button').each(function(el) {el.setProperty('disabled', false); });					list.getElements('input').each(function(el){						el.setProperty('disabled', false);					});				}			}		</script>		<fieldset class="adminform">			<legend><?php echo JText::_('COM_MODULES_MENU_ASSIGNMENT'); ?></legend>			<label id="jform_menus-lbl" for="jform_menus"><?php echo JText::_('COM_MODULES_MODULE_ASSIGN'); ?></label>			<fieldset id="jform_menus" class="radio">				<select name="jform[assignment]" id="jform_assignment">					<?php echo JHtml::_('select.options', ModulesHelper::getAssignmentOptions($this->item->client_id), 'value', 'text', $this->item->assignment, true);?>				</select>			</fieldset>			<label id="jform_menuselect-lbl" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label>			<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.chkbox').each(function(el) { el.checked = !el.checked; });">				<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>			</button>			<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.chkbox').each(function(el) { el.checked = false; });">				<?php echo JText::_('JGLOBAL_SELECTION_NONE'); ?>			</button>			<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.chkbox').each(function(el) { el.checked = true; });">				<?php echo JText::_('JGLOBAL_SELECTION_ALL'); ?>			</button>			<div class="clr"></div>			<div id="menu-assignment">			<?php echo JHtml::_('tabs.start', 'module-menu-assignment-tabs', array('useCookie' => 1));?>			<?php foreach ($menuTypes as &$type) :				echo JHtml::_('tabs.panel', $type->title ? $type->title : $type->menutype, $type->menutype.'-details');				$chkbox_class = 'chk-menulink-' . $type->id; ?>				<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.<?php echo $chkbox_class; ?>').each(function(el) { el.checked = !el.checked; });">					<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>				</button>				<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.<?php echo $chkbox_class; ?>').each(function(el) { el.checked = false; });">					<?php echo JText::_('JGLOBAL_SELECTION_NONE'); ?>				</button>				<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.<?php echo $chkbox_class; ?>').each(function(el) { el.checked = true; });">					<?php echo JText::_('JGLOBAL_SELECTION_ALL'); ?>				</button>				<div class="clr"></div>				<?php				$count 	= count($type->links);				$i		= 0;				if ($count) :				?>				<ul class="menu-links">					<?php					foreach ($type->links as $link) :						if (trim($this->item->assignment) == '-'):							$checked = '';						elseif ($this->item->assignment == 0):							$checked = ' checked="checked"';						elseif ($this->item->assignment < 0):							$checked = in_array(-$link->value, $this->item->assigned) ? ' checked="checked"' : '';						elseif ($this->item->assignment > 0) :							$checked = in_array($link->value, $this->item->assigned) ? ' checked="checked"' : '';						endif;					?>					<li class="menu-link">						<input type="checkbox" class="chkbox <?php echo $chkbox_class; ?>" name="jform[assigned][]" value="<?php echo (int) $link->value;?>" id="link<?php echo (int) $link->value;?>"<?php echo $checked;?>/>						<label for="link<?php echo (int) $link->value;?>">							<?php echo $link->text; ?>						</label>					</li>					<?php if ($count > 20 && ++$i == ceil($count / 2)) :?>					</ul><ul class="menu-links">					<?php endif; ?>					<?php endforeach; ?>				</ul>				<div class="clr"></div>				<?php endif; ?>			<?php endforeach; ?>			<?php echo JHtml::_('tabs.end');?>			</div>		</fieldset>
<?php/** * @package     Joomla.Site * @subpackage  mod_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_ROOT . '/components/com_banners/helpers/banner.php';$baseurl = JURI::base();?><div class="bannergroup<?php echo $moduleclass_sfx ?>"><?php if ($headerText) : ?>	<?php echo $headerText; ?><?php endif; ?><?php foreach ($list as $item) : ?>	<div class="banneritem">		<?php $link = JRoute::_('index.php?option=com_banners&task=click&id='. $item->id);?>		<?php if ($item->type == 1) :?>			<?php // Text based banners ?>			<?php echo str_replace(array('{CLICKURL}', '{NAME}'), array($link, $item->name), $item->custombannercode);?>		<?php else:?>			<?php $imageurl = $item->params->get('imageurl');?>			<?php $width = $item->params->get('width');?>			<?php $height = $item->params->get('height');?>			<?php if (BannerHelper::isImage($imageurl)) :?>				<?php // Image based banner ?>				<?php $alt = $item->params->get('alt');?>				<?php $alt = $alt ? $alt : $item->name; ?>				<?php $alt = $alt ? $alt : JText::_('MOD_BANNERS_BANNER'); ?>				<?php if ($item->clickurl) :?>					<?php // Wrap the banner in a link?>					<?php $target = $params->get('target', 1);?>					<?php if ($target == 1) :?>						<?php // Open in a new window?>						<a							href="<?php echo $link; ?>" target="_blank"							title="<?php echo htmlspecialchars($item->name, ENT_QUOTES, 'UTF-8');?>">							<img								src="<?php echo $baseurl . $imageurl;?>"								alt="<?php echo $alt;?>"								<?php if (!empty($width)) echo 'width ="'. $width.'"';?>								<?php if (!empty($height)) echo 'height ="'. $height.'"';?>							/>						</a>					<?php elseif ($target == 2):?>						<?php // open in a popup window?>						<a							href="<?php echo $link;?>" onclick="window.open(this.href, '',								'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=550');								return false"							title="<?php echo htmlspecialchars($item->name, ENT_QUOTES, 'UTF-8');?>">							<img								src="<?php echo $baseurl . $imageurl;?>"								alt="<?php echo $alt;?>"								<?php if (!empty($width)) echo 'width ="'. $width.'"';?>								<?php if (!empty($height)) echo 'height ="'. $height.'"';?>							/>						</a>					<?php else :?>						<?php // open in parent window?>						<a							href="<?php echo $link;?>"							title="<?php echo htmlspecialchars($item->name, ENT_QUOTES, 'UTF-8');?>">							<img								src="<?php echo $baseurl . $imageurl;?>"								alt="<?php echo $alt;?>"								<?php if (!empty($width)) echo 'width ="'. $width.'"';?>								<?php if (!empty($height)) echo 'height ="'. $height.'"';?>							/>						</a>					<?php endif;?>				<?php else :?>					<?php // Just display the image if no link specified?>					<img						src="<?php echo $baseurl . $imageurl;?>"						alt="<?php echo $alt;?>"						<?php if (!empty($width)) echo 'width ="'. $width.'"';?>						<?php if (!empty($height)) echo 'height ="'. $height.'"';?>					/>				<?php endif;?>			<?php elseif (BannerHelper::isFlash($imageurl)) :?>				<object					classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"					codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0"					<?php if (!empty($width)) echo 'width ="'. $width.'"';?>					<?php if (!empty($height)) echo 'height ="'. $height.'"';?>				>					<param name="movie" value="<?php echo $imageurl;?>" />					<embed						src="<?php echo $imageurl;?>"						loop="false"						pluginspage="http://www.macromedia.com/go/get/flashplayer"						type="application/x-shockwave-flash"						<?php if (!empty($width)) echo 'width ="'. $width.'"';?>						<?php if (!empty($height)) echo 'height ="'. $height.'"';?>					/>				</object>			<?php endif;?>		<?php endif;?>		<div class="clr"></div>	</div><?php endforeach; ?><?php if ($footerText) : ?>	<div class="bannerfooter">		<?php echo $footerText; ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla! command line application. * * @package     Joomla.Platform * @subpackage  Application * @since       11.4 */class JApplicationCli extends JApplicationBase{	/**	 * @var    JRegistry  The application configuration object.	 * @since  11.1	 */	protected $config;	/**	 * @var    JApplicationCli  The application instance.	 * @since  11.1	 */	protected static $instance;	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @see     loadDispatcher()	 * @since   11.1	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		// Close the application if we are not executed from the command line.		// @codeCoverageIgnoreStart		if (!defined('STDOUT') || !defined('STDIN') || !isset($_SERVER['argv']))		{			$this->close();		}		// @codeCoverageIgnoreEnd		// If a input object is given use it.		if ($input instanceof JInput)		{			$this->input = $input;		}		// Create the input based on the application logic.		else		{			if (class_exists('JInput'))			{				$this->input = new JInputCLI;			}		}		// If a config object is given use it.		if ($config instanceof JRegistry)		{			$this->config = $config;		}		// Instantiate a new configuration object.		else		{			$this->config = new JRegistry;		}		$this->loadDispatcher($dispatcher);		// Load the configuration object.		$this->loadConfiguration($this->fetchConfigurationData());		// Set the execution datetime and timestamp;		$this->set('execution.datetime', gmdate('Y-m-d H:i:s'));		$this->set('execution.timestamp', time());		// Set the current directory.		$this->set('cwd', getcwd());	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $key      The name of the property.	 * @param   mixed   $default  The default value (optional) if none is set.	 *	 * @return  mixed   The value of the configuration.	 *	 * @since   11.3	 */	public function get($key, $default = null)	{		return $this->config->get($key, $default);	}	/**	 * Returns a reference to the global JApplicationCli object, only creating it if it doesn't already exist.	 *	 * This method must be invoked as: $cli = JApplicationCli::getInstance();	 *	 * @param   string  $name  The name (optional) of the JApplicationCli class to instantiate.	 *	 * @return  JApplicationCli	 *	 * @since   11.1	 */	public static function getInstance($name = null)	{		// Only create the object if it doesn't exist.		if (empty(self::$instance))		{			if (class_exists($name) && (is_subclass_of($name, 'JApplicationCli')))			{				self::$instance = new $name;			}			else			{				self::$instance = new JApplicationCli;			}		}		return self::$instance;	}	/**	 * Execute the application.	 *	 * @return  void	 *	 * @since   11.1	 */	public function execute()	{		// Trigger the onBeforeExecute event.		$this->triggerEvent('onBeforeExecute');		// Perform application routines.		$this->doExecute();		// Trigger the onAfterExecute event.		$this->triggerEvent('onAfterExecute');	}	/**	 * Load an object or array into the application configuration object.	 *	 * @param   mixed  $data  Either an array or object to be loaded into the configuration object.	 *	 * @return  JApplicationCli  Instance of $this to allow chaining.	 *	 * @since   11.1	 */	public function loadConfiguration($data)	{		// Load the data into the configuration object.		if (is_array($data))		{			$this->config->loadArray($data);		}		elseif (is_object($data))		{			$this->config->loadObject($data);		}		return $this;	}	/**	 * Write a string to standard output.	 *	 * @param   string   $text  The text to display.	 * @param   boolean  $nl    True (default) to append a new line at the end of the output string.	 *	 * @return  JApplicationCli  Instance of $this to allow chaining.	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function out($text = '', $nl = true)	{		fwrite(STDOUT, $text . ($nl ? "\n" : null));		return $this;	}	/**	 * Get a value from standard input.	 *	 * @return  string  The input string from standard input.	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function in()	{		return rtrim(fread(STDIN, 8192), "\n");	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $key    The name of the property.	 * @param   mixed   $value  The value of the property to set (optional).	 *	 * @return  mixed   Previous value of the property	 *	 * @since   11.3	 */	public function set($key, $value = null)	{		$previous = $this->config->get($key);		$this->config->set($key, $value);		return $previous;	}	/**	 * Method to load a PHP configuration class file based on convention and return the instantiated data object.  You	 * will extend this method in child classes to provide configuration data from whatever data source is relevant	 * for your specific application.	 *	 * @param   string  $file   The path and filename of the configuration file. If not provided, configuration.php	 *                          in JPATH_BASE will be used.	 * @param   string  $class  The class name to instantiate.	 *	 * @return  mixed   Either an array or object to be loaded into the configuration object.	 *	 * @since   11.1	 */	protected function fetchConfigurationData($file = '', $class = 'JConfig')	{		// Instantiate variables.		$config = array();		if (empty($file) && defined('JPATH_BASE'))		{			$file = JPATH_BASE . '/configuration.php';			// Applications can choose not to have any configuration data			// by not implementing this method and not having a config file.			if (!file_exists($file))			{				$file = '';			}		}		if (!empty($file))		{			JLoader::register($class, $file);			if (class_exists($class))			{				$config = new $class;			}			else			{				throw new RuntimeException('Configuration class does not exist.');			}		}		return $config;	}	/**	 * Method to run the application routines.  Most likely you will want to instantiate a controller	 * and execute it, or perform some sort of task directly.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.3	 */	protected function doExecute()	{		// Your application routines go here.	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of contact categories. * * @package     Joomla.Site * @subpackage  com_contact * @since       1.6 */class ContactModelCategories extends JModelList{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_contact.categories';	/**	 * The category context (allows other extensions to derived from this model).	 *	 * @var		string	 */	protected $_extension = 'com_contact';	private $_parent = null;	private $_items = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('filter.extension', $this->_extension);		// Get the parent id if defined.		$parentId = $app->input->getInt('id');		$this->setState('filter.parentId', $parentId);		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('filter.published',	1);		$this->setState('filter.access',	true);	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.extension');		$id	.= ':'.$this->getState('filter.published');		$id	.= ':'.$this->getState('filter.access');		$id	.= ':'.$this->getState('filter.parentId');		return parent::getStoreId($id);	}	/**	 * redefine the function an add some properties to make the styling more easy	 *	 * @return mixed An array of data items on success, false on failure.	 */	public function getItems()	{		if (!count($this->_items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_items_cat', 1) || !$params->get('show_empty_categories_cat', 0);			$categories = JCategories::getInstance('Contact', $options);			$this->_parent = $categories->get($this->getState('filter.parentId', 'root'));			if (is_object($this->_parent))			{				$this->_items = $this->_parent->getChildren();			} else {				$this->_items = false;			}		}		return $this->_items;	}	public function getParent()	{		if (!is_object($this->_parent))		{			$this->getItems();		}		return $this->_parent;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>		<?php if ($this->params->get('categories_description')) : ?>			<div class="category-desc base-desc">			<?php echo JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_weblinks.categories'); ?>			</div>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc base-desc">					<?php echo JHtml::_('content.prepare', $this->parent->description, '', 'com_weblinks.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?>	<?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Logger Base Class * * This class is used to be the basis of logger classes to allow for defined functions * to exist regardless of the child class. * * @package     Joomla.Platform * @subpackage  Log * @since       12.2 */abstract class JLogLogger{	/**	 * Options array for the JLog instance.	 * @var    array	 * @since  12.2	 */	protected $options = array();	/**	 * @var    array  Translation array for JLogEntry priorities to text strings.	 * @since  12.2	 */	protected $priorities = array(		JLog::EMERGENCY => 'EMERGENCY',		JLog::ALERT => 'ALERT',		JLog::CRITICAL => 'CRITICAL',		JLog::ERROR => 'ERROR',		JLog::WARNING => 'WARNING',		JLog::NOTICE => 'NOTICE',		JLog::INFO => 'INFO',		JLog::DEBUG => 'DEBUG');	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   12.2	 */	public function __construct(array &$options)	{		// Set the options for the class.		$this->options = & $options;	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   12.2	 */	abstract public function addEntry(JLogEntry $entry);}/** * Deprecated class placeholder.  You should use JAccessRule instead. * * @package     Joomla.Platform * @subpackage  Access * @since       11.1 * @deprecated  13.3 */abstract class JLogger extends JLogLogger{	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 * @deprecated  13.3	 */	public function __construct(array &$options)	{		JLog::add('JLogger is deprecated. Use JLogLogger instead.', JLog::WARNING, 'deprecated');		parent::__construct($options);	}}
<?php/** * JGrid class to dynamically generate HTML tables * * @package     Joomla.Platform * @subpackage  Grid * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JGrid class to dynamically generate HTML tables * * @package     Joomla.Platform * @subpackage  Grid * @since       11.3 */class JGrid{	/**	 * Array of columns	 * @var array	 * @since 11.3	 */	protected $columns = array();	/**	 * Current active row	 * @var int	 * @since 11.3	 */	protected $activeRow = 0;	/**	 * Rows of the table (including header and footer rows)	 * @var array	 * @since 11.3	 */	protected $rows = array();	/**	 * Header and Footer row-IDs	 * @var array	 * @since 11.3	 */	protected $specialRows = array('header' => array(), 'footer' => array());	/**	 * Associative array of attributes for the table-tag	 * @var array	 * @since 11.3	 */	protected $options;	/**	 * Constructor for a JGrid object	 *	 * @param   array  $options  Associative array of attributes for the table-tag	 *	 * @since 11.3	 */	public function __construct($options = array())	{		$this->setTableOptions($options, true);	}	/**	 * Magic function to render this object as a table.	 *	 * @return  string	 *	 * @since 11.3	 */	public function __toString()	{		return $this->toString();	}	/**	 * Method to set the attributes for a table-tag	 *	 * @param   array  $options  Associative array of attributes for the table-tag	 * @param   bool   $replace  Replace possibly existing attributes	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setTableOptions($options = array(), $replace = false)	{		if ($replace)		{			$this->options = $options;		}		else		{			$this->options = array_merge($this->options, $options);		}		return $this;	}	/**	 * Get the Attributes of the current table	 *	 * @return  array Associative array of attributes	 *	 * @since 11.3	 */	public function getTableOptions()	{		return $this->options;	}	/**	 * Add new column name to process	 *	 * @param   string  $name  Internal column name	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function addColumn($name)	{		$this->columns[] = $name;		return $this;	}	/**	 * Returns the list of internal columns	 *	 * @return  array List of internal columns	 *	 * @since 11.3	 */	public function getColumns()	{		return $this->columns;	}	/**	 * Delete column by name	 *	 * @param   string  $name  Name of the column to be deleted	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function deleteColumn($name)	{		$index = array_search($name, $this->columns);		if ($index !== false)		{			unset($this->columns[$index]);			$this->columns = array_values($this->columns);		}		return $this;	}	/**	 * Method to set a whole range of columns at once	 * This can be used to re-order the columns, too	 *	 * @param   array  $columns  List of internal column names	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setColumns($columns)	{		$this->columns = array_values($columns);		return $this;	}	/**	 * Adds a row to the table and sets the currently	 * active row to the new row	 *	 * @param   array  $options  Associative array of attributes for the row	 * @param   int    $special  1 for a new row in the header, 2 for a new row in the footer	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function addRow($options = array(), $special = false)	{		$this->rows[]['_row'] = $options;		$this->activeRow = count($this->rows) - 1;		if ($special)		{			if ($special === 1)			{				$this->specialRows['header'][] = $this->activeRow;			}			else			{				$this->specialRows['footer'][] = $this->activeRow;			}		}		return $this;	}	/**	 * Method to get the attributes of the currently active row	 *	 * @return array Associative array of attributes	 *	 * @since 11.3	 */	public function getRowOptions()	{		return $this->rows[$this->activeRow]['_row'];	}	/**	 * Method to set the attributes of the currently active row	 *	 * @param   array  $options  Associative array of attributes	 *	 * @return JGrid This object for chaining	 *	 * @since 11.3	 */	public function setRowOptions($options)	{		$this->rows[$this->activeRow]['_row'] = $options;		return $this;	}	/**	 * Get the currently active row ID	 *	 * @return  int ID of the currently active row	 *	 * @since 11.3	 */	public function getActiveRow()	{		return $this->activeRow;	}	/**	 * Set the currently active row	 *	 * @param   int  $id  ID of the row to be set to current	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setActiveRow($id)	{		$this->activeRow = (int) $id;		return $this;	}	/**	 * Set cell content for a specific column for the	 * currently active row	 *	 * @param   string  $name     Name of the column	 * @param   string  $content  Content for the cell	 * @param   array   $option   Associative array of attributes for the td-element	 * @param   bool    $replace  If false, the content is appended to the current content of the cell	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setRowCell($name, $content, $option = array(), $replace = true)	{		if ($replace || !isset($this->rows[$this->activeRow][$name]))		{			$cell = new stdClass;			$cell->options = $option;			$cell->content = $content;			$this->rows[$this->activeRow][$name] = $cell;		}		else		{			$this->rows[$this->activeRow][$name]->content .= $content;			$this->rows[$this->activeRow][$name]->options = $option;		}		return $this;	}	/**	 * Get all data for a row	 *	 * @param   int  $id  ID of the row to return	 *	 * @return  array Array of columns of a table row	 *	 * @since 11.3	 */	public function getRow($id = false)	{		if ($id === false)		{			$id = $this->activeRow;		}		if (isset($this->rows[(int) $id]))		{			return $this->rows[(int) $id];		}		else		{			return false;		}	}	/**	 * Get the IDs of all rows in the table	 *	 * @param   int  $special  false for the standard rows, 1 for the header rows, 2 for the footer rows	 *	 * @return  array Array of IDs	 *	 * @since 11.3	 */	public function getRows($special = false)	{		if ($special)		{			if ($special === 1)			{				return $this->specialRows['header'];			}			else			{				return $this->specialRows['footer'];			}		}		return array_diff(array_keys($this->rows), array_merge($this->specialRows['header'], $this->specialRows['footer']));	}	/**	 * Delete a row from the object	 *	 * @param   int  $id  ID of the row to be deleted	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function deleteRow($id)	{		unset($this->rows[$id]);		if (in_array($id, $this->specialRows['header']))		{			unset($this->specialRows['header'][array_search($id, $this->specialRows['header'])]);		}		if (in_array($id, $this->specialRows['footer']))		{			unset($this->specialRows['footer'][array_search($id, $this->specialRows['footer'])]);		}		if ($this->activeRow == $id)		{			end($this->rows);			$this->activeRow = key($this->rows);		}		return $this;	}	/**	 * Render the HTML table	 *	 * @return  string The rendered HTML table	 *	 * @since 11.3	 */	public function toString()	{		$output = array();		$output[] = '<table' . $this->renderAttributes($this->getTableOptions()) . '>';		if (count($this->specialRows['header']))		{			$output[] = $this->renderArea($this->specialRows['header'], 'thead', 'th');		}		if (count($this->specialRows['footer']))		{			$output[] = $this->renderArea($this->specialRows['footer'], 'tfoot');		}		$ids = array_diff(array_keys($this->rows), array_merge($this->specialRows['header'], $this->specialRows['footer']));		if (count($ids))		{			$output[] = $this->renderArea($ids);		}		$output[] = '</table>';		return implode('', $output);	}	/**	 * Render an area of the table	 *	 * @param   array   $ids   IDs of the rows to render	 * @param   string  $area  Name of the area to render. Valid: tbody, tfoot, thead	 * @param   string  $cell  Name of the cell to render. Valid: td, th	 *	 * @return string The rendered table area	 *	 * @since 11.3	 */	protected function renderArea($ids, $area = 'tbody', $cell = 'td')	{		$output = array();		$output[] = '<' . $area . ">\n";		foreach ($ids as $id)		{			$output[] = "\t<tr" . $this->renderAttributes($this->rows[$id]['_row']) . ">\n";			foreach ($this->getColumns() as $name)			{				if (isset($this->rows[$id][$name]))				{					$column = $this->rows[$id][$name];					$output[] = "\t\t<" . $cell . $this->renderAttributes($column->options) . '>' . $column->content . '</' . $cell . ">\n";				}			}			$output[] = "\t</tr>\n";		}		$output[] = '</' . $area . '>';		return implode('', $output);	}	/**	 * Renders an HTML attribute from an associative array	 *	 * @param   array  $attributes  Associative array of attributes	 *	 * @return  string The HTML attribute string	 *	 * @since 11.3	 */	protected function renderAttributes($attributes)	{		if (count((array) $attributes) == 0)		{			return '';		}		$return = array();		foreach ($attributes as $key => $option)		{			$return[] = $key . '="' . $option . '"';		}		return ' ' . implode(' ', $return);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Login Controller * * @package     Joomla.Administrator * @subpackage  com_login * @since       1.5 */class LoginController extends JControllerLegacy{	/**	 * Typical view method for MVC based architecture	 *	 * This function is provide as a default implementation, in most cases	 * you will need to override it in your own controllers.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		// Special treatment is required for this component, as this view may be called		// after a session timeout. We must reset the view and layout prior to display		// otherwise an error will occur.		$this->input->set('view', 'login');		$this->input->set('layout', 'default');		parent::display();	}	/**	 * Method to log in a user.	 *	 * @return  void	 */	public function login()	{		// Check for request forgeries.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$model = $this->getModel('login');		$credentials = $model->getState('credentials');		$return = $model->getState('return');		$result = $app->login($credentials, array('action' => 'core.login.admin'));		if (!($result instanceof Exception))		{			$app->redirect($return);		}		parent::display();	}	/**	 * Method to log out a user.	 *	 * @return  void	 */	public function logout()	{		JSession::checkToken('request') or jexit(JText::_('JInvalid_Token'));		$app = JFactory::getApplication();		$userid = $this->input->getInt('uid', null);		$options = array(			'clientid' => ($userid) ? 0 : 1		);		$result = $app->logout($userid, $options);		if (!($result instanceof Exception))		{			$model 	= $this->getModel('login');			$return = $model->getState('return');			$app->redirect($return);		}		parent::display();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform class for interacting with the Google APIs. * * @property-read  JGoogleData    $data    Google API object for data. * @property-read  JGoogleEmbed   $embed   Google API object for embed generation. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogle{	/**	 * @var    JRegistry  Options for the Google object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JAuth  The authentication client object to use in sending authenticated HTTP requests.	 * @since  12.3	 */	protected $auth;	/**	 * @var    JGoogleData  Google API object for data request.	 * @since  12.3	 */	protected $data;	/**	 * @var    JGoogleEmbed  Google API object for embed generation.	 * @since  12.3	 */	protected $embed;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Google options object.	 * @param   JAuth      $auth     The authentication client object.	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->auth  = isset($auth) ? $auth : new JGoogleAuthOauth2($this->options);	}	/**	 * Method to create JGoogleData objects	 *	 * @param   string     $name     Name of property to retrieve	 * @param   JRegistry  $options  Google options object.	 * @param   JAuth      $auth     The authentication client object.	 *	 * @return  JGoogleData  Google data API object.	 *	 * @since   12.3	 */	public function data($name, $options = null, $auth = null)	{		if ($this->options && !$options)		{			$options = $this->options;		}		if ($this->auth && !$auth)		{			$auth = $this->auth;		}		switch ($name)		{			case 'plus':			case 'Plus':				return new JGoogleDataPlus($options, $auth);			case 'picasa':			case 'Picasa':				return new JGoogleDataPicasa($options, $auth);			case 'adsense':			case 'Adsense':				return new JGoogleDataAdsense($options, $auth);			case 'calendar':			case 'Calendar':				return new JGoogleDataCalendar($options, $auth);			default:				return null;		}	}	/**	 * Method to create JGoogleEmbed objects	 *	 * @param   string     $name     Name of property to retrieve	 * @param   JRegistry  $options  Google options object.	 *	 * @return  JGoogleEmbed  Google embed API object.	 *	 * @since   12.3	 */	public function embed($name, $options = null)	{		if ($this->options && !$options)		{			$options = $this->options;		}		switch ($name)		{			case 'maps':			case 'Maps':				return new JGoogleEmbedMaps($options);			case 'analytics':			case 'Analytics':				return new JGoogleEmbedAnalytics($options);			default:				return null;		}	}	/**	 * Get an option from the JGoogle instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogle instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogle  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla Installation Database Helper Class. * * @package  Joomla.Installation * @since    1.6 */abstract class InstallationHelperDatabase{	/**	 * Method to get a JDatabaseDriver object.	 *	 * @param   string   $driver    The database driver to use.	 * @param   string   $host      The hostname to connect on.	 * @param   string   $user      The user name to connect with.	 * @param   string   $password  The password to use for connection authentication.	 * @param   string   $database  The database to use.	 * @param   string   $prefix    The table prefix to use.	 * @param   boolean  $select    True if the database should be selected.	 *	 * @return  JDatabaseDriver	 *	 * @since   1.6	 */	public static function getDBO($driver, $host, $user, $password, $database, $prefix, $select = true)	{		static $db;		if (!$db)		{			// Build the connection options array.			$options = array(				'driver' => $driver,				'host' => $host,				'user' => $user,				'password' => $password,				'database' => $database,				'prefix' => $prefix,				'select' => $select			);			// Get a database object.			$db = JDatabaseDriver::getInstance($options);		}		return $db;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$version = new JVersion;?><div id="installer-languages">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=languages');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<?php if (count($this->items) || $this->escape($this->state->get('filter.search'))) : ?>			<?php echo $this->loadTemplate('filter'); ?>			<table class="adminlist">				<thead>					<tr>						<th width="20" class="nowrap hidden-phone">							<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />						</th>						<th class="nowrap">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>						</th>						<th width="10%" class="center">							<?php echo JText::_('JVERSION'); ?>						</th>						<th class="center nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_TYPE'); ?>						</th>						<th width="35%" class="nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_DETAILS_URL'); ?>						</th>						<th width="30" class="nowrap hidden-phone">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'update_id', $listDirn, $listOrder); ?>						</th>					</tr>				</thead>				<tbody>					<?php foreach ($this->items as $i => $language) : ?>					<tr class="row<?php echo $i % 2; ?>">						<td class="hidden-phone">							<?php echo JHtml::_('grid.id', $i, $language->update_id, false, 'cid'); ?>						</td>						<td>							<?php echo $language->name; ?>							<?php // Display a Note if language pack version is not equal to Joomla version ?>							<?php if (substr($language->version, 0, 3) != $version->RELEASE									|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>								<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>							<?php endif; ?>						</td>						<td class="center">							<?php echo $language->version; ?>						</td>						<td class="center">							<?php echo JText::_('COM_INSTALLER_TYPE_' . strtoupper($language->type)); ?>						</td>						<td>							<?php echo $language->detailsurl; ?>						</td>						<td class="center">							<?php echo $language->update_id; ?>						</td>					</tr>					<?php endforeach; ?>				</tbody>			</table>			<?php echo $this->pagination->getListFooter(); ?>		<?php else : ?>			<div class="alert"><?php echo JText::_('COM_INSTALLER_MSG_LANGUAGES_NOLANGUAGES'); ?></div>		<?php endif; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Event * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JEvent Class * * @package     Joomla.Platform * @subpackage  Event * @since       11.1 */abstract class JEvent extends JObject{	/**	 * Event object to observe.	 *	 * @var    object	 * @since  11.3	 */	protected $_subject = null;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe.	 *	 * @since   11.3	 */	public function __construct(&$subject)	{		// Register the observer ($this) so we can be notified		$subject->attach($this);		// Set the subject to observe		$this->_subject = &$subject;	}	/**	 * Method to trigger events.	 * The method first generates the even from the argument array. Then it unsets the argument	 * since the argument has no bearing on the event handler.	 * If the method exists it is called and returns its return value. If it does not exist it	 * returns null.	 *	 * @param   array  &$args  Arguments	 *	 * @return  mixed  Routine return value	 *	 * @since   11.1	 */	public function update(&$args)	{		// First let's get the event from the argument array.  Next we will unset the		// event argument as it has no bearing on the method to handle the event.		$event = $args['event'];		unset($args['event']);		/*		 * If the method to handle an event exists, call it and return its return		 * value.  If it does not exist, return null.		 */		if (method_exists($this, $event))		{			return call_user_func_array(array($this, $event), $args);		}		else		{			return null;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Client table * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersTableClient extends JTable{	public function __construct(&$_db)	{		$this->checked_out_time = $_db->getNullDate();		parent::__construct('#__banner_clients', 'id', $_db);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.0.4	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.'='.implode(' OR '.$k.'=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = '.(int) $userId.')';		}		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl).			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')' .			$checkin		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Base controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderController extends JControllerLegacy{	/**	 * @var    string  The default view.	 * @since  2.5	 */	protected $default_view = 'index';	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController  A JController object to support chaining.	 *	 * @since	2.5	 */	public function display($cachable = false, $urlparams = array())	{		include_once JPATH_COMPONENT . '/helpers/finder.php';		$view   = $this->input->get('view', 'index', 'word');		$layout = $this->input->get('layout', 'index', 'word');		$f_id   = $this->input->get('filter_id', null, 'int');		// Check for edit form.		if ($view == 'filter' && $layout == 'edit' && !$this->checkEditId('com_finder.edit.filter', $f_id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $f_id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_finder&view=filters', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_joomlaupdate')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Joomlaupdate');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to emboss an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterEmboss extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the emboss filter.		imagefilter($this->handle, IMG_FILTER_EMBOSS);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Add specific helper files for html generationJHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load switcher behaviorJHtml::_('behavior.switcher');?><form action="<?php echo JRoute::_('index.php'); ?>" method="post" name="adminForm" id="adminForm">	<div id="config-document">		<div id="page-site" class="tab">			<div class="noshow">				<div class="width-100">					<?php echo $this->loadTemplate('system'); ?>				</div>			</div>		</div>		<div id="page-phpsettings" class="tab">			<div class="noshow">				<div class="width-60">					<?php echo $this->loadTemplate('phpsettings'); ?>				</div>			</div>		</div>		<div id="page-config" class="tab">			<div class="noshow">				<div class="width-60">					<?php echo $this->loadTemplate('config'); ?>				</div>			</div>		</div>		<div id="page-directory" class="tab">			<div class="noshow">				<div class="width-60">					<?php echo $this->loadTemplate('directory'); ?>				</div>			</div>		</div>		<div id="page-phpinfo" class="tab">			<div class="noshow">				<div class="width-100">					<?php echo $this->loadTemplate('phpinfo'); ?>				</div>			</div>		</div>	</div>	<div class="clr"></div></form>
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseException is deprecated, use SPL Exceptions instead.', JLog::WARNING, 'deprecated');/** * Exception class definition for the Database subpackage. * * @package     Joomla.Legacy * @subpackage  Database * @since       11.1 * @deprecated  12.3 Use semantic exceptions instead */class JDatabaseException extends RuntimeException{}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');/** * An Archive handling class * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchive{	/**	 * @var    array  The array of instantiated archive adapters.	 * @since  12.1	 */	protected static $adapters = array();	/**	 * Extract an archive file to a directory.	 *	 * @param   string  $archivename  The name of the archive file	 * @param   string  $extractdir   Directory to unpack into	 *	 * @return  boolean  True for success	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public static function extract($archivename, $extractdir)	{		$untar = false;		$result = false;		$ext = JFile::getExt(strtolower($archivename));		// Check if a tar is embedded...gzip/bzip2 can just be plain files!		if (JFile::getExt(JFile::stripExt(strtolower($archivename))) == 'tar')		{			$untar = true;		}		switch ($ext)		{			case 'zip':				$adapter = self::getAdapter('zip');				if ($adapter)				{					$result = $adapter->extract($archivename, $extractdir);				}				break;			case 'tar':				$adapter = self::getAdapter('tar');				if ($adapter)				{					$result = $adapter->extract($archivename, $extractdir);				}				break;			case 'tgz':				// This format is a tarball gzip'd				$untar = true;			case 'gz':			case 'gzip':				// This may just be an individual file (e.g. sql script)				$adapter = self::getAdapter('gzip');				if ($adapter)				{					$config = JFactory::getConfig();					$tmpfname = $config->get('tmp_path') . '/' . uniqid('gzip');					$gzresult = $adapter->extract($archivename, $tmpfname);					if ($gzresult instanceof Exception)					{						@unlink($tmpfname);						return false;					}					if ($untar)					{						// Try to untar the file						$tadapter = self::getAdapter('tar');						if ($tadapter)						{							$result = $tadapter->extract($tmpfname, $extractdir);						}					}					else					{						$path = JPath::clean($extractdir);						JFolder::create($path);						$result = JFile::copy($tmpfname, $path . '/' . JFile::stripExt(basename(strtolower($archivename))), null, 1);					}					@unlink($tmpfname);				}				break;			case 'tbz2':				// This format is a tarball bzip2'd				$untar = true;			case 'bz2':			case 'bzip2':				// This may just be an individual file (e.g. sql script)				$adapter = self::getAdapter('bzip2');				if ($adapter)				{					$config = JFactory::getConfig();					$tmpfname = $config->get('tmp_path') . '/' . uniqid('bzip2');					$bzresult = $adapter->extract($archivename, $tmpfname);					if ($bzresult instanceof Exception)					{						@unlink($tmpfname);						return false;					}					if ($untar)					{						// Try to untar the file						$tadapter = self::getAdapter('tar');						if ($tadapter)						{							$result = $tadapter->extract($tmpfname, $extractdir);						}					}					else					{						$path = JPath::clean($extractdir);						JFolder::create($path);						$result = JFile::copy($tmpfname, $path . '/' . JFile::stripExt(basename(strtolower($archivename))), null, 1);					}					@unlink($tmpfname);				}				break;			default:				throw new InvalidArgumentException('Unknown Archive Type');		}		if (!$result || $result instanceof Exception)		{			return false;		}		return true;	}	/**	 * Get a file compression adapter.	 *	 * @param   string  $type  The type of adapter (bzip2|gzip|tar|zip).	 *	 * @return  object  JArchiveExtractable	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public static function getAdapter($type)	{		if (!isset(self::$adapters[$type]))		{			// Try to load the adapter object			$class = 'JArchive' . ucfirst($type);			if (!class_exists($class))			{				throw new UnexpectedValueException('Unable to load archive', 500);			}			self::$adapters[$type] = new $class;		}		return self::$adapters[$type];	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Category Tree * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__newsfeeds';		$options['extension'] = 'com_newsfeeds';		$options['statefield'] = 'published';		parent::__construct($options);	}}
<?php/** * Generic_Sniffs_PHP_LowerCaseConstantSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: LowerCaseConstantSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Generic_Sniffs_PHP_LowerCaseConstantSniff. * * Checks that all uses of true, false and null are lowerrcase. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_PHP_LowerCaseConstantSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',                                  );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(                T_TRUE,                T_FALSE,                T_NULL,               );    }//end register()    /**     * Processes this sniff, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $keyword = $tokens[$stackPtr]['content'];        // AJE Added check for class property names, eg $obj->Null.        $before = $tokens[$stackPtr-1]['type'];        if (strtolower($keyword) !== $keyword && $before != 'T_OBJECT_OPERATOR') {            $error = 'TRUE, FALSE and NULL must be lowercase; expected "%s" but found "%s"';            $data  = array(                      strtolower($keyword),                      $keyword,                     );            $phpcsFile->addError($error, $stackPtr, 'Found', $data);        }    }//end process()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo $module->content;
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Log Entry class * * This class is designed to hold log entries for either writing to an engine, or for * supported engines, retrieving lists and building in memory (PHP based) search operations. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogEntry{	/**	 * Application responsible for log entry.	 * @var    string	 * @since  11.1	 */	public $category;	/**	 * The date the message was logged.	 * @var    JDate	 * @since  11.1	 */	public $date;	/**	 * Message to be logged.	 * @var    string	 * @since  11.1	 */	public $message;	/**	 * The priority of the message to be logged.	 * @var    string	 * @since  11.1	 * @see    $priorities	 */	public $priority = JLog::INFO;	/**	 * List of available log priority levels [Based on the Syslog default levels].	 * @var    array	 * @since  11.1	 */	protected $priorities = array(		JLog::EMERGENCY,		JLog::ALERT,		JLog::CRITICAL,		JLog::ERROR,		JLog::WARNING,		JLog::NOTICE,		JLog::INFO,		JLog::DEBUG	);	/**	 * Constructor	 *	 * @param   string  $message   The message to log.	 * @param   string  $priority  Message priority based on {$this->priorities}.	 * @param   string  $category  Type of entry	 * @param   string  $date      Date of entry (defaults to now if not specified or blank)	 *	 * @since   11.1	 */	public function __construct($message, $priority = JLog::INFO, $category = '', $date = null)	{		$this->message = (string) $message;		// Sanitize the priority.		if (!in_array($priority, $this->priorities, true))		{			$priority = JLog::INFO;		}		$this->priority = $priority;		// Sanitize category if it exists.		if (!empty($category))		{			$this->category = (string) strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $category));		}		// Get the date as a JDate object.		$this->date = new JDate($date ? $date : 'now');	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?><div id="sidebar">	<div class="sidebar-nav">		<?php if ($displayData->displayMenu) : ?>		<ul id="submenu" class="nav nav-list">			<?php foreach ($displayData->list as $item) :			if (isset ($item[2]) && $item[2] == 1) : ?>				<li class="active">			<?php else : ?>				<li>			<?php endif;			if ($displayData->hide) : ?>				<a class="nolink"><?php echo $item[0]; ?></a>			<?php else :				if (strlen($item[1])) : ?>					<a href="<?php echo JFilterOutput::ampReplace($item[1]); ?>"><?php echo $item[0]; ?></a>				<?php else : ?>					<?php echo $item[0]; ?>				<?php endif;			endif; ?>			</li>			<?php endforeach; ?>		</ul>		<?php endif; ?>		<?php if ($displayData->displayMenu && $displayData->displayFilters) : ?>		<hr />		<?php endif; ?>		<?php if ($displayData->displayFilters) : ?>		<div class="filter-select hidden-phone">			<h4 class="page-header"><?php echo JText::_('JSEARCH_FILTER_LABEL');?></h4>			<?php foreach ($displayData->filters as $filter) : ?>				<label for="<?php echo $filter['name']; ?>" class="element-invisible"><?php echo $filter['label']; ?></label>				<select name="<?php echo $filter['name']; ?>" id="<?php echo $filter['name']; ?>" class="span12 small" onchange="this.form.submit()">					<?php if (!$filter['noDefault']) : ?>						<option value=""><?php echo $filter['label']; ?></option>					<?php endif; ?>					<?php echo $filter['options']; ?>				</select>				<hr class="hr-condensed" />			<?php endforeach; ?>		</div>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Add specific helper files for html generationJHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');?><form action="<?php echo JRoute::_('index.php'); ?>" method="post" name="adminForm" id="adminForm">	<div class="row-fluid">		<!-- Begin Content -->		<div class="span10">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'site')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'site', JText::_('COM_ADMIN_SYSTEM_INFORMATION', true)); ?>					<?php echo $this->loadTemplate('system'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'phpsettings', JText::_('COM_ADMIN_PHP_SETTINGS', true)); ?>					<?php echo $this->loadTemplate('phpsettings'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'config', JText::_('COM_ADMIN_CONFIGURATION_FILE', true)); ?>					<?php echo $this->loadTemplate('config'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'directory', JText::_('COM_ADMIN_DIRECTORY_PERMISSIONS', true)); ?>					<?php echo $this->loadTemplate('directory'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'phpinfo', JText::_('COM_ADMIN_PHP_INFORMATION', true)); ?>					<?php echo $this->loadTemplate('phpinfo'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>		</div>		<!-- End Content -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of newsfeeds * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$newsfeedId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text' .				' FROM #__newsfeeds' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $newsfeedId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.htmlspecialchars($this->value).'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $newsfeedId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_PHP_INFORMATION'); ?></legend>	<?php echo $this->php_info;?></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * OpenSearch View class for the Search component * * @package     Joomla.Site * @subpackage  Search * @since       1.7 */class SearchViewSearch extends JViewLegacy{	public function display($tpl = null)	{		$doc = JFactory::getDocument();		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_search');		$doc->setShortName($params->get('opensearch_name', $app->getCfg('sitename')));		$doc->setDescription($params->get('opensearch_description', $app->getCfg('MetaDesc')));		// Add the URL for the search		$searchUri = JURI::base().'index.php?option=com_search&searchword={searchTerms}';		// Find the menu item for the search		$menu	= $app->getMenu();		$items	= $menu->getItems('link', 'index.php?option=com_search&view=search');		if (isset($items[0]))		{			$searchUri .= '&Itemid='.$items[0]->id;		}		$htmlSearch = new JOpenSearchUrl;		$htmlSearch->template = JRoute::_($searchUri);		$doc->addUrl($htmlSearch);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="custom<?php echo $moduleclass_sfx ?>" <?php if ($params->get('backgroundimage')) : ?> style="background-image:url(<?php echo $params->get('backgroundimage');?>)"<?php endif;?> >	<?php echo $module->content;?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Templates View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewWarnings extends InstallerViewDefault{	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$items = $this->get('Items');		$this->messages = &$items;		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		parent::addToolbar();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_WARNINGS');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Mock JSite class used to fool the frontend search plugins because they route the results. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.5 */class JSite extends JObject{	/**	 * False method to fool the frontend search plugins	 *	 * @since  1.5	 */	public function getMenu()	{		$result = new JSite;		return $result;	}	/**	 * False method to fool the frontend search plugins	 *	 * @since  1.5	 */	public function getItems()	{		return array();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQueryMysql extends JDatabaseQueryMysqli{}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$item_heading = $params->get('item_heading', 'h4');?><?php if ($params->get('item_title')) : ?>	<<?php echo $item_heading; ?> class="newsflash-title<?php echo $params->get('moduleclass_sfx'); ?>">	<?php if ($params->get('link_titles') && $item->link != '') : ?>		<a href="<?php echo $item->link;?>">			<?php echo $item->title;?></a>	<?php else : ?>		<?php echo $item->title; ?>	<?php endif; ?>	</<?php echo $item_heading; ?>><?php endif; ?><?php if (!$params->get('intro_only')) :	echo $item->afterDisplayTitle;endif; ?><?php echo $item->beforeDisplayContent; ?><?php echo $item->introtext; ?><?php if (isset($item->link) && $item->readmore != 0 && $params->get('readmore')) :	echo '<a class="readmore" href="'.$item->link.'">'.$item->linkText.'</a>';endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Cache component * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheViewPurge extends JViewLegacy{	public function display($tpl = null)	{		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		//JHtmlSidebar::addEntry(JText::_('COM_CACHE_BACK_CACHE_MANAGER'), 'index.php?option=com_cache', false);		JToolbarHelper::title(JText::_('COM_CACHE_PURGE_EXPIRED_CACHE'), 'purge.png');		JToolbarHelper::custom('purge', 'delete.png', 'delete_f2.png', 'COM_CACHE_PURGE_EXPIRED', false);		JToolbarHelper::divider();		if (JFactory::getUser()->authorise('core.admin', 'com_cache'))		{			JToolbarHelper::preferences('com_cache');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_SITE_MAINTENANCE_PURGE_EXPIRED_CACHE');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Picasa data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataPicasaAlbum extends JGoogleData{	/**	 * @var    SimpleXMLElement  The album's XML	 * @since  12.3	 */	protected $xml;	/**	 * Constructor.	 *	 * @param   SimpleXMLElement  $xml      XML from Google	 * @param   JRegistry         $options  Google options object	 * @param   JGoogleAuth       $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(SimpleXMLElement $xml, JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->xml = $xml;		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://picasaweb.google.com/data/');		}	}	/**	 * Method to delete a Picasa album	 *	 * @param   mixed  $match  Check for most up to date album	 *	 * @return  boolean  Success or failure.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function delete($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$jdata = $this->query($url, null, array('GData-Version' => 2, 'If-Match' => $match), 'delete');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			if ($jdata->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}			$this->xml = null;			return true;		}		else		{			return false;		}	}	/**	 * Method to get the album link	 *	 * @param   string  $type  Type of link to return	 *	 * @return  string  Link or false on failure	 *	 * @since   12.3	 */	public function getLink($type = 'edit')	{		$links = $this->xml->link;		foreach ($links as $link)		{			if ($link->attributes()->rel == $type)			{				return (string) $link->attributes()->href;			}		}		return false;	}	/**	 * Method to get the title of the album	 *	 * @return  string  Album title	 *	 * @since   12.3	 */	public function getTitle()	{		return (string) $this->xml->children()->title;	}	/**	 * Method to get the summary of the album	 *	 * @return  string  Album summary	 *	 * @since   12.3	 */	public function getSummary()	{		return (string) $this->xml->children()->summary;	}	/**	 * Method to get the location of the album	 *	 * @return  string  Album location	 *	 * @since   12.3	 */	public function getLocation()	{		return (string) $this->xml->children('gphoto', true)->location;	}	/**	 * Method to get the access level of the album	 *	 * @return  string  Album access level	 *	 * @since   12.3	 */	public function getAccess()	{		return (string) $this->xml->children('gphoto', true)->access;	}	/**	 * Method to get the time of the album	 *	 * @return  double  Album time	 *	 * @since   12.3	 */	public function getTime()	{		return (double) $this->xml->children('gphoto', true)->timestamp / 1000;	}	/**	 * Method to set the title of the album	 *	 * @param   string  $title  New album title	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setTitle($title)	{		$this->xml->children()->title = $title;		return $this;	}	/**	 * Method to set the summary of the album	 *	 * @param   string  $summary  New album summary	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setSummary($summary)	{		$this->xml->children()->summary = $summary;		return $this;	}	/**	 * Method to set the location of the album	 *	 * @param   string  $location  New album location	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setLocation($location)	{		$this->xml->children('gphoto', true)->location = $location;		return $this;	}	/**	 * Method to set the access level of the album	 *	 * @param   string  $access  New album access	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setAccess($access)	{		$this->xml->children('gphoto', true)->access = $access;		return $this;	}	/**	 * Method to set the time of the album	 *	 * @param   int  $time  New album time	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setTime($time)	{		$this->xml->children('gphoto', true)->timestamp = $time * 1000;		return $this;	}	/**	 * Method to modify a Picasa Album	 *	 * @param   string  $match  Optional eTag matching parameter	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	public function save($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$headers = array('GData-Version' => 2, 'Content-type' => 'application/atom+xml', 'If-Match' => $match);				$jdata = $this->query($url, $this->xml->asXML(), $headers, 'put');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}	/**	 * Refresh Picasa Album	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function refresh()	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			$jdata = $this->query($url, null, array('GData-Version' => 2));			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of Picasa Photos	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listPhotos()	{		if ($this->isAuthenticated())		{			$url = $this->getLink('http://schemas.google.com/g/2005#feed');			$jdata = $this->query($url, null, array('GData-Version' => 2));			$xml = $this->safeXML($jdata->body);			if (isset($xml->children()->entry))			{				$items = array();				foreach ($xml->children()->entry as $item)				{					$items[] = new JGoogleDataPicasaPhoto($item, $this->options, $this->auth);				}				return $items;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Add photo	 *	 * @param   string  $file     Path of file to upload	 * @param   string  $title    Title to give to file (defaults to filename)	 * @param   string  $summary  Description of the file	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function upload($file, $title = '', $summary = '')	{		if ($this->isAuthenticated())		{			$title = $title != '' ? $title : JFile::getName($file);			if (!($type = $this->getMIME($file)))			{				throw new RuntimeException("Inappropriate file type.");			}			if (!($data = JFile::read($file)))			{				throw new RuntimeException("Cannot access file: `$file`");			}			$xml = new SimpleXMLElement('<entry></entry>');			$xml->addAttribute('xmlns', 'http://www.w3.org/2005/Atom');			$xml->addChild('title', $title);			$xml->addChild('summary', $summary);			$cat = $xml->addChild('category', '');			$cat->addAttribute('scheme', 'http://schemas.google.com/g/2005#kind');			$cat->addAttribute('term', 'http://schemas.google.com/photos/2007#photo');			$post = "Media multipart posting\n";			$post .= "--END_OF_PART\n";			$post .= "Content-Type: application/atom+xml\n\n";			$post .= $xml->asXML() . "\n";			$post .= "--END_OF_PART\n";			$post .= "Content-Type: {$type}\n\n";			$post .= $data;			$jdata = $this->query($this->getLink(), $post, array('GData-Version' => 2, 'Content-Type: multipart/related'), 'post');			return new JGoogleDataPicasaPhoto($this->safeXML($jdata->body), $this->options, $this->auth);		}		else		{			return false;		}	}	/**	 * Add photo	 *	 * @param   string  $file  Filename	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected function getMIME($file)	{		switch (strtolower(JFile::getExt($file)))		{			case 'bmp':			case 'bm':			return 'image/bmp';			case 'gif':			return 'image/gif';			case 'jpg':			case 'jpeg':			case 'jpe':			case 'jif':			case 'jfif':			case 'jfi':			return 'image/jpeg';			case 'png':			return 'image/png';			case '3gp':			return 'video/3gpp';			case 'avi':			return 'video/avi';			case 'mov':			case 'moov':			case 'qt':			return 'video/quicktime';			case 'mp4':			case 'm4a':			case 'm4p':			case 'm4b':			case 'm4r':			case 'm4v':			return 'video/mp4';			case 'mpg':			case 'mpeg':			case 'mp1':			case 'mp2':			case 'mp3':			case 'm1v':			case 'm1a':			case 'm2a':			case 'mpa':			case 'mpv':			return 'video/mpeg';			case 'asf':			return 'video/x-ms-asf';			case 'wmv':			return 'video/x-ms-wmv';			default:			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit messages user configuration. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesViewConfig extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Bind the record to the form.		$this->form->bind($this->item);		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app	= JFactory::getApplication();$style = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');?><div class="media btn-group">	<a href="#" id="thumbs" onclick="MediaManager.setViewType('thumbs')" class="btn <?php echo ($style == "thumbs") ? 'active' : '';?>">	<i class="icon-grid-view-2"></i> <?php echo JText::_('COM_MEDIA_THUMBNAIL_VIEW'); ?></a>	<a href="#" id="details" onclick="MediaManager.setViewType('details')" class="btn <?php echo ($style == "details") ? 'active' : '';?>">	<i class="icon-list-view"></i> <?php echo JText::_('COM_MEDIA_DETAIL_VIEW'); ?></a></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners master display controller. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/banners.php';		BannersHelper::updateReset();		$view   = $this->input->get('view', 'banners');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'banner' && $layout == 'edit' && !$this->checkEditId('com_banners.edit.banner', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_banners&view=banners', false));			return false;		}		elseif ($view == 'client' && $layout == 'edit' && !$this->checkEditId('com_banners.edit.client', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_banners&view=clients', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * Verifies that class members have scope modifiers. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MemberVarScopeSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if(class_exists('PHP_CodeSniffer_Standards_AbstractVariableSniff', true) === false){    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractVariableSniff not found');}/** * Verifies that class members have scope modifiers. * * Example: * class Foo * { *     <b class="good">private $foo</b> *     <b class="bad">var $foo</b> * } * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Classes_MemberVarScopeSniff extends PHP_CodeSniffer_Standards_AbstractVariableSniff{    /**     * Processes the function tokens within the class.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processMemberVar(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $modifier = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$scopeModifiers, $stackPtr);        if(($modifier === false) || ($tokens[$modifier]['line'] !== $tokens[$stackPtr]['line']))        {            $error = sprintf('Scope modifier not specified for member variable "%s"'            , $tokens[$stackPtr]['content']);            $phpcsFile->addWarning($error, $stackPtr, 'Missing');        }    }//function    /**     * Processes normal variables.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processVariable(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function    /**     * Processes variables in double quoted strings.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processVariableInString(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function}//class
<?php/** * @package     Joomla.Platform * @subpackage  Utilities * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Generic Buffer stream handler * * This class provides a generic buffer stream.  It can be used to store/retrieve/manipulate * string buffers with the standard PHP filesystem I/O methods. * * @package     Joomla.Platform * @subpackage  Utilities * @since       11.1 */class JBuffer{	/**	 * Stream position	 *	 * @var    integer	 * @since  11.1	 */	public $position = 0;	/**	 * Buffer name	 *	 * @var    string	 * @since  11.1	 */	public $name = null;	/**	 * Buffer hash	 *	 * @var    array	 * @since  12.1	 */	public $buffers = array();	/**	 * Function to open file or url	 *	 * @param   string   $path          The URL that was passed	 * @param   string   $mode          Mode used to open the file @see fopen	 * @param   integer  $options       Flags used by the API, may be STREAM_USE_PATH and	 *                                  STREAM_REPORT_ERRORS	 * @param   string   &$opened_path  Full path of the resource. Used with STREAN_USE_PATH option	 *	 * @return  boolean	 *	 * @since   11.1	 * @see     streamWrapper::stream_open	 */	public function stream_open($path, $mode, $options, &$opened_path)	{		$url = parse_url($path);		$this->name = $url['host'];		$this->buffers[$this->name] = null;		$this->position = 0;		return true;	}	/**	 * Read stream	 *	 * @param   integer  $count  How many bytes of data from the current position should be returned.	 *	 * @return  mixed    The data from the stream up to the specified number of bytes (all data if	 *                   the total number of bytes in the stream is less than $count. Null if	 *                   the stream is empty.	 *	 * @see     streamWrapper::stream_read	 * @since   11.1	 */	public function stream_read($count)	{		$ret = substr($this->buffers[$this->name], $this->position, $count);		$this->position += strlen($ret);		return $ret;	}	/**	 * Write stream	 *	 * @param   string  $data  The data to write to the stream.	 *	 * @return  integer	 *	 * @see     streamWrapper::stream_write	 * @since   11.1	 */	public function stream_write($data)	{		$left = substr($this->buffers[$this->name], 0, $this->position);		$right = substr($this->buffers[$this->name], $this->position + strlen($data));		$this->buffers[$this->name] = $left . $data . $right;		$this->position += strlen($data);		return strlen($data);	}	/**	 * Function to get the current position of the stream	 *	 * @return  integer	 *	 * @see     streamWrapper::stream_tell	 * @since   11.1	 */	public function stream_tell()	{		return $this->position;	}	/**	 * Function to test for end of file pointer	 *	 * @return  boolean  True if the pointer is at the end of the stream	 *	 * @see     streamWrapper::stream_eof	 * @since   11.1	 */	public function stream_eof()	{		return $this->position >= strlen($this->buffers[$this->name]);	}	/**	 * The read write position updates in response to $offset and $whence	 *	 * @param   integer  $offset  The offset in bytes	 * @param   integer  $whence  Position the offset is added to	 *                            Options are SEEK_SET, SEEK_CUR, and SEEK_END	 *	 * @return  boolean  True if updated	 *	 * @see     streamWrapper::stream_seek	 * @since   11.1	 */	public function stream_seek($offset, $whence)	{		switch ($whence)		{			case SEEK_SET:				if ($offset < strlen($this->buffers[$this->name]) && $offset >= 0)				{					$this->position = $offset;					return true;				}				else				{					return false;				}				break;			case SEEK_CUR:				if ($offset >= 0)				{					$this->position += $offset;					return true;				}				else				{					return false;				}				break;			case SEEK_END:				if (strlen($this->buffers[$this->name]) + $offset >= 0)				{					$this->position = strlen($this->buffers[$this->name]) + $offset;					return true;				}				else				{					return false;				}				break;			default:				return false;		}	}}// Register the streamstream_wrapper_register('buffer', 'JBuffer');
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Memcached session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSessionStorageMemcached extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('Memcached Extension is not available', 404);		}		parent::__construct($options);		$config = JFactory::getConfig();		// This will be an array of loveliness		// @todo: multiple servers		$this->_servers = array(			array(				'host' => $config->get('memcache_server_host', 'localhost'),				'port' => $config->get('memcache_server_port', 11211)			)		);	}	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   12.2	 */	public function register()	{		ini_set('session.save_path', $this->_servers['host'] . ':' . $this->_servers['port']);		ini_set('session.save_handler', 'memcached');	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	static public function isSupported()	{		return (extension_loaded('memcached') && class_exists('Memcached'));	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the FTP data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerFtp extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$model->checkForm('ftp');		// Redirect to the page.		$r = new stdClass;		$r->view = 'summary';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>	<div class="filter-search">		<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>		<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_INSTALLER_LANGUAGES_FILTER_SEARCH_DESC'); ?>" />		<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>		<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>	</div></fieldset><div class="clr"></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_installer */class InstallerControllerInstall extends JControllerLegacy{	/**	 * Install an extension.	 *	 * @return  void	 * @since   1.5	 */	public function install()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('install');		if ($model->install())		{			$cache = JFactory::getCache('mod_menu');			$cache->clean();			// TODO: Reset the users acl here as well to kill off any missing bits		}		$app = JFactory::getApplication();		$redirect_url = $app->getUserState('com_installer.redirect_url');		if (empty($redirect_url))		{			$redirect_url = JRoute::_('index.php?option=com_installer&view=install', false);		} else		{			// wipe out the user state when we're going to redirect			$app->setUserState('com_installer.redirect_url', '');			$app->setUserState('com_installer.message', '');			$app->setUserState('com_installer.extension_message', '');		}		$this->setRedirect($redirect_url);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugins master display controller. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.5 */class PluginsController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/plugins.php';		// Load the submenu.		PluginsHelper::addSubmenu($this->input->get('view', 'plugins'));		$view   = $this->input->get('view', 'plugins');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('extension_id');		// Check for edit form.		if ($view == 'plugin' && $layout == 'edit' && !$this->checkEditId('com_plugins.edit.plugin', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_plugins&view=plugins', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP response data object class. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpResponse{	/**	 * @var    integer  The server response code.	 * @since  11.3	 */	public $code;	/**	 * @var    array  Response headers.	 * @since  11.3	 */	public $headers = array();	/**	 * @var    string  Server response body.	 * @since  11.3	 */	public $body;}
<?php/** * @package     Joomla.Installation * @subpackage  Response * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JSON Response class for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Response * @since       3.1 */class InstallationResponseJson{	/**	 * Constructor for the JSON response	 *	 * @param   mixed  $data  Exception if there is an error, otherwise, the session data	 *	 * @since   3.1	 */	public function __construct($data)	{		// The old token is invalid so send a new one.		$this->token = JSession::getFormToken(true);		// Get the language and send it's tag along		$this->lang = JFactory::getLanguage()->getTag();		// Get the message queue		$messages = JFactory::getApplication()->getMessageQueue();		// Build the sorted message list		if (is_array($messages) && count($messages))		{			foreach ($messages as $msg)			{				if (isset($msg['type']) && isset($msg['message']))				{					$lists[$msg['type']][] = $msg['message'];				}			}		}		// If messages exist add them to the output		if (isset($lists) && is_array($lists))		{			$this->messages = $lists;		}		// Check if we are dealing with an error.		if ($data instanceof Exception)		{			// Prepare the error response.			$this->error   = true;			$this->header  = JText::_('INSTL_HEADER_ERROR');			$this->message = $data->getMessage();		}		else		{			// Prepare the response data.			$this->error = false;			$this->data  = $data;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?phpif (!empty($this->msg)){	echo $this->msg;}else{	$lang = JFactory::getLanguage();	$myrtl = $this->newsfeed->rtl;	$direction = " ";		if ($lang->isRTL() && $myrtl == 0)		{			$direction = " redirect-rtl";		}		elseif ($lang->isRTL() && $myrtl == 1)		{				$direction = " redirect-ltr";		}		elseif ($lang->isRTL() && $myrtl == 2)		{			$direction = " redirect-rtl";		}		elseif ($myrtl == 0)		{			$direction = " redirect-ltr";		}		elseif ($myrtl == 1)		{			$direction = " redirect-ltr";		}		elseif ($myrtl == 2)		{			$direction = " redirect-rtl";		}		$images  = json_decode($this->item->images);	?>	<div class="newsfeed<?php echo $this->pageclass_sfx?><?php echo $direction; ?>">	<?php if ($this->params->get('display_num')) :  ?>	<h1 class="<?php echo $direction; ?>">		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<h2 class="<?php echo $direction; ?>">		<?php if ($this->item->published == 0) : ?>			<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>		<?php endif; ?>		<a href="<?php echo $this->item->link; ?>" target="_blank">		<?php echo str_replace('&apos;', "'", $this->item->name); ?></a>	</h2>	<?php if ($this->params->get('show_tags', 1)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?>	<!-- Show Images from Component -->	<?php  if (isset($images->image_first) and !empty($images->image_first)) : ?>	<?php $imgfloat = (empty($images->float_first)) ? $this->params->get('float_first') : $images->float_first; ?>	<div class="img-intro-<?php echo htmlspecialchars($imgfloat); ?>"> <img		<?php if ($images->image_first_caption):			echo 'class="caption"'.' title="' .htmlspecialchars($images->image_first_caption) .'"';		endif; ?>		src="<?php echo htmlspecialchars($images->image_first); ?>" alt="<?php echo htmlspecialchars($images->image_first_alt); ?>"/> </div>	<?php endif; ?>	<?php  if (isset($images->image_second) and !empty($images->image_second)) : ?>	<?php $imgfloat = (empty($images->float_second)) ? $this->params->get('float_second') : $images->float_second; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_second_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_second_caption) .'"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_second); ?>" alt="<?php echo htmlspecialchars($images->image_second_alt); ?>"/> </div>	<?php endif; ?>	<!-- Show Description from Component --><?php echo $this->item->description; ?>	<!-- Show Feed's Description -->	<?php if ($this->params->get('show_feed_description')) : ?>		<div class="feed-description">			<?php echo str_replace('&apos;', "'", $this->rssDoc->description); ?>		</div>	<?php endif; ?>	<!-- Show Image -->	<?php if (isset($this->rssDoc->image) && isset($this->rssDoc->imagetitle) && $this->params->get('show_feed_image')) : ?>	<div>			<img src="<?php echo $this->rssDoc->image; ?>" alt="<?php echo $this->rssDoc->image->decription; ?>" /></div><?php endif; ?>	<!-- Show items -->	<?php if (!empty($this->rssDoc[0])) { ?>	<ol>		<?php for ($i = 0; $i < $this->item->numarticles; $i++) { ?>	<?php		$uri = !empty($this->rssDoc[$i]->guid) || !is_null($this->rssDoc[$i]->guid) ? $this->rssDoc[$i]->guid : $this->rssDoc[$i]->uri;		$uri = substr($uri, 0, 4) != 'http' ? $this->item->link : $uri;		$text = !empty($this->rssDoc[$i]->content) || !is_null($this->rssDoc[$i]->content) ? $this->rssDoc[$i]->content : $this->rssDoc[$i]->description;	?>			<li>				<?php if (!empty($this->rssDoc[$i]->uri)) : ?>					<a href="<?php echo $this->rssDoc[$i]->uri; ?>" target="_blank">					<?php  echo $this->rssDoc[$i]->title; ?></a>				<?php else : ?>					<h3><?php  echo '<a target="_blank" href="' .$this->rssDoc[$i]->uri . '">' .$this->rssDoc[$i]->title. '</a>'; ?></h3>				<?php  endif; ?>				<?php if ($this->params->get('show_item_description') && !empty($text)) : ?>					<div class="feed-item-description">					<?php if ($this->params->get('show_feed_image', 0) == 0)					{						$text = JFilterOutput::stripImages($text);					}					$text = JHtml::_('string.truncate', $text, $this->params->get('feed_character_count'));						echo str_replace('&apos;', "'", $text);					?>					</div>				<?php endif; ?>				</li>			<?php } ?>			</ol>		<?php } ?>	</div><?php } ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages Component Message Model * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerMessage extends JControllerForm{	/**	 * Method (override) to check if you can save a new or existing record.	 *	 * Adjusts for the primary key name and hands off to the parent class.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 */	protected function allowSave($data, $key = 'message_id')	{		return parent::allowSave($data, $key);	}	/**	 * Reply to an existing message.	 *	 * This is a simple redirect to the compose form.	 */	public function reply()	{		if ($replyId = $this->input->getInt('reply_id'))		{			$this->setRedirect('index.php?option=com_messages&view=message&layout=edit&reply_id=' . $replyId);		}		else		{			$this->setMessage(JText::_('COM_MESSAGES_INVALID_REPLY_ID'));			$this->setRedirect('index.php?option=com_messages&view=messages');		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller = JControllerLegacy::getInstance('Search');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Client model. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelClient extends JModelAdmin{	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object	A record object.	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))			{				if ($record->state != -2)				{					return;				}			$user = JFactory::getUser();			if (!empty($record->catid))			{				return $user->authorise('core.delete', 'com_banners.category.'.(int) $record->catid);			}			else {				return $user->authorise('core.delete', 'com_banners');			}		}	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object	A record object.	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_banners.category.'.(int) $record->catid);		}		else		{			return $user->authorise('core.edit.state', 'com_banners');		}	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	 * @since   1.6	 */	public function getTable($type = 'Client', $prefix = 'BannersTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_banners.client', 'client', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_banners.edit.client.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_banners.client', $data);		return $data;	}	/**	 * Prepare and sanitise the table data prior to saving.	 *	 * @param   JTable	A JTable object.	 * @since   1.6	 */	protected function prepareTable($table)	{		$table->name = htmlspecialchars_decode($table->name, ENT_QUOTES);	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to str_ireplace* Case-insensitive version of str_replace* Note: requires utf8_strtolower* Note: it's not fast and gets slower if $search / $replace is array* Notes: it's based on the assumption that the lower and uppercase* versions of a UTF-8 character will have the same length in bytes* which is currently true given the hash table to strtolower* @param string* @return string* @see http://www.php.net/str_ireplace* @see utf8_strtolower* @package utf8* @subpackage strings*/function utf8_ireplace($search, $replace, $str, $count = NULL){    if ( !is_array($search) ) {        $slen = strlen($search);        if ( $slen == 0 ) {            return $str;        }        $lendif = strlen($replace) - strlen($search);        $search = utf8_strtolower($search);        $search = preg_quote($search, '/');        $lstr = utf8_strtolower($str);        $i = 0;        $matched = 0;        while ( preg_match('/(.*)'.$search.'/Us',$lstr, $matches) ) {            if ( $i === $count ) {                break;            }            $mlen = strlen($matches[0]);            $lstr = substr($lstr, $mlen);            $str = substr_replace($str, $replace, $matched+strlen($matches[1]), $slen);            $matched += $mlen + $lendif;            $i++;        }        return $str;    } else {        foreach ( array_keys($search) as $k ) {            if ( is_array($replace) ) {                if ( array_key_exists($k,$replace) ) {                    $str = utf8_ireplace($search[$k], $replace[$k], $str, $count);                } else {                    $str = utf8_ireplace($search[$k], '', $str, $count);                }            } else {                $str = utf8_ireplace($search[$k], $replace, $str, $count);            }        }        return $str;    }}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users list controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerUsers extends JControllerAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_USERS_USERS';	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @return  UsersControllerUsers	 *	 * @since   1.6	 * @see     JController	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('block', 'changeBlock');		$this->registerTask('unblock', 'changeBlock');	}	/**	 * Proxy for getModel.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'User', $prefix = 'UsersModel', $config = array('ignore_request' => true))	{		return parent::getModel($name, $prefix, $config);	}	/**	 * Method to change the block status on a record.	 *	 * @return  void	 *	 * @since   1.6	 */	public function changeBlock()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids    = $this->input->get('cid', array(), 'array');		$values = array('block' => 1, 'unblock' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_USERS_USERS_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Change the state of the records.			if (!$model->block($ids, $value))			{				JError::raiseWarning(500, $model->getError());			}			else			{				if ($value == 1)				{					$this->setMessage(JText::plural('COM_USERS_N_USERS_BLOCKED', count($ids)));				}				elseif ($value == 0)				{					$this->setMessage(JText::plural('COM_USERS_N_USERS_UNBLOCKED', count($ids)));				}			}		}		$this->setRedirect('index.php?option=com_users&view=users');	}	/**	 * Method to activate a record.	 *	 * @return  void	 *	 * @since   1.6	 */	public function activate()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids = $this->input->get('cid', array(), 'array');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_USERS_USERS_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Change the state of the records.			if (!$model->activate($ids))			{				JError::raiseWarning(500, $model->getError());			}			else			{				$this->setMessage(JText::plural('COM_USERS_N_USERS_ACTIVATED', count($ids)));			}		}		$this->setRedirect('index.php?option=com_users&view=users');	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseSqlsrv is deprecated, use JDatabaseDriverSqlsrv instead.', JLog::WARNING, 'deprecated');/** * SQL Server database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/cc296152(SQL.90).aspx * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverSqlsrv instead. */class JDatabaseSqlsrv extends JDatabaseDriverSqlsrv{}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ol class="nav nav-tabs nav-stacked"><?php foreach ($this->link_items as &$item) : ?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$selector = empty($displayData['selector']) ? '' : $displayData['selector'];$id = empty($displayData['id']) ? '' : $displayData['id'];$active = empty($displayData['active']) ? '' : $displayData['active'];$title = empty($displayData['title']) ? '' : $displayData['title'];echo "(function($){				$(document).ready(function() {					// Handler for .ready() called.					var tab = $('<li class=\"$active\"><a href=\"#$id\" data-toggle=\"tab\">$title</a></li>');					$('#" . $selector . "Tabs').append(tab);				});			})(jQuery);";
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_MAIL_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('mail') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_content/helpers/route.php';?><?php if ($this->params->get('show_articles')) : ?><div class="contact-articles">	<ul class="nav nav-tabs nav-stacked">		<?php foreach ($this->item->articles as $article) :	?>			<li>				<?php echo JHtml::_('link', JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catslug)), htmlspecialchars($article->title, ENT_COMPAT, 'UTF-8')); ?>			</li>		<?php endforeach; ?>	</ul></div><?php endif; ?>
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Tree Class. * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */class JTree extends JObject{	/**	 * Root node	 *	 * @var    object	 * @since  11.1	 */	protected $_root = null;	/**	 * Current working node	 *	 * @var    object	 * @since  11.1	 */	protected $_current = null;	/**	 * Constructor	 *	 * @since   11.1	 */	public function __construct()	{		JLog::add('JTree::__construct() is deprecated.', JLog::WARNING, 'deprecated');		$this->_root = new JNode('ROOT');		$this->_current = & $this->_root;	}	/**	 * Method to add a child	 *	 * @param   array    &$node       The node to process	 * @param   boolean  $setCurrent  True to set as current working node	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function addChild(&$node, $setCurrent = false)	{		JLog::add('JTree::addChild() is deprecated.', JLog::WARNING, 'deprecated');		$this->_current->addChild($node);		if ($setCurrent)		{			$this->_current = &$node;		}	}	/**	 * Method to get the parent	 *	 * @return  void	 *	 * @since   11.1	 */	public function getParent()	{		JLog::add('JTree::getParent() is deprecated.', JLog::WARNING, 'deprecated');		$this->_current = &$this->_current->getParent();	}	/**	 * Method to get the parent	 *	 * @return  void	 *	 * @since   11.1	 */	public function reset()	{		JLog::add('JTree::reset() is deprecated.', JLog::WARNING, 'deprecated');		$this->_current = &$this->_root;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class to fire onContentPrepare for non-article based content. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlContent{	/**	 * Fire onContentPrepare for content that isn't part of an article.	 *	 * @param   string  $text     The content to be transformed.	 * @param   array   $params   The content params.	 * @param   string  $context  The context of the content to be transformed.	 *	 * @return  string   The content after transformation.	 *	 * @since   11.1	 */	public static function prepare($text, $params = null, $context = 'text')	{		if ($params === null)		{			$params = new JObject;		}		$article = new stdClass;		$article->text = $text;		JPluginHelper::importPlugin('content');		$dispatcher = JEventDispatcher::getInstance();		$dispatcher->trigger('onContentPrepare', array($context, &$article, &$params, 0));		return $article->text;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL export driver. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseExporterMysql extends JDatabaseExporterMysqli{	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseExporterMySQL  Method supports chaining.	 *	 * @since   11.1	 *	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverMysql))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Sets the database connector to use for exporting structure and/or data from MySQL.	 *	 * @param   JDatabaseDriverMysql  $db  The database connector.	 *	 * @return  JDatabaseExporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function setDbo(JDatabaseDriverMysql $db)	{		$this->db = $db;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform long">	<legend><?php echo JText::_('COM_CONFIG_SEO_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('seo') as $field):			?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Download model. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersModelDownload extends JModelForm{	protected $_context = 'com_banners.tracks';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$input = JFactory::getApplication()->input;		$basename = $input->cookie->getString(JApplication::getHash($this->_context.'.basename'), '__SITE__');		$this->setState('basename', $basename);		$compressed = $input->cookie->getInt(JApplication::getHash($this->_context.'.compressed'), 1);		$this->setState('compressed', $compressed);	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_banners.download', 'download', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		$data = array(			'basename'		=> $this->getState('basename'),			'compressed'	=> $this->getState('compressed')		);		$this->preprocessData('com_banners.download', $data);		return $data;	}}
<?php/** * Generic_Sniffs_WhiteSpace_DisallowSpaceIndentSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id$ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Generic_Sniffs_WhiteSpace_DisallowSpaceIndentSniff. * * Throws errors if spaces are used for indentation. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: @package_version@ * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_DisallowSpaceIndentSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',                                   'CSS',                                  );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_WHITESPACE);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile All the tokens found in the document.     * @param int                  $stackPtr  The position of the current token in     *                                        the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Make sure this is whitespace used for indentation.        $line = $tokens[$stackPtr]['line'];        if ($stackPtr > 0 && $tokens[($stackPtr - 1)]['line'] === $line) {            return;        }        if (strpos($tokens[$stackPtr]['content'], " ") !== false) {            $error = 'Tabs must be used to indent lines; spaces are not allowed';            $phpcsFile->addError($error, $stackPtr, 'SpaceUsed');        }    }//end process()}//end class?>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$params =& $this->item->params;$images = json_decode($this->item->images);$app = JFactory::getApplication();$canEdit = $this->item->params->get('access-edit');JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');?><?php if ($this->item->state == 0) : ?><div class="system-unpublished"><?php endif; ?><?php if ($params->get('show_title')) : ?>	<h2>		<?php if ($params->get('link_titles') && $params->get('access-view')) : ?>			<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid)); ?>">			<?php echo $this->escape($this->item->title); ?></a>		<?php else : ?>			<?php echo $this->escape($this->item->title); ?>		<?php endif; ?>	</h2><?php endif; ?><?php if ($params->get('show_print_icon') || $params->get('show_email_icon') || $canEdit) : ?>	<ul class="actions">		<?php if ($params->get('show_print_icon')) : ?>		<li class="print-icon">			<?php echo JHtml::_('icon.print_popup', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>		<?php if ($params->get('show_email_icon')) : ?>		<li class="email-icon">			<?php echo JHtml::_('icon.email', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>		<?php if ($canEdit) : ?>		<li class="edit-icon">			<?php echo JHtml::_('icon.edit', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>	</ul><?php endif; ?><?php if (!$params->get('show_intro')) : ?>	<?php echo $this->item->event->afterDisplayTitle; ?><?php endif; ?><?php echo $this->item->event->beforeDisplayContent; ?><?php // to do not that elegant would be nice to group the params ?><?php if (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date')) or ($params->get('show_parent_category')) or ($params->get('show_hits'))) : ?> <dl class="article-info"> <dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt><?php endif; ?><?php if ($params->get('show_parent_category') && $this->item->parent_id != 1) : ?>		<dd class="parent-category-name">			<?php $title = $this->escape($this->item->parent_title);				$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_id)) . '">' . $title . '</a>'; ?>			<?php if ($params->get('link_parent_category')) : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_category')) : ?>		<dd class="category-name">			<?php $title = $this->escape($this->item->category_title);					$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catid)) . '">' . $title . '</a>'; ?>			<?php if ($params->get('link_category')) : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_create_date')) : ?>		<dd class="create">		<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_modify_date')) : ?>		<dd class="modified">		<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_publish_date')) : ?>		<dd class="published">		<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_author') && !empty($this->item->author )) : ?>	<dd class="createdby">		<?php $author = $this->item->author; ?>		<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author);?>			<?php if (!empty($this->item->contactid ) &&  $params->get('link_author') == true):?>				<?php 	echo JText::sprintf('COM_CONTENT_WRITTEN_BY',					JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id=' . $this->item->contactid), $author)				); ?>			<?php else :?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>			<?php endif; ?>	</dd><?php endif; ?><?php if ($params->get('show_hits')) : ?>		<dd class="hits">		<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>		</dd><?php endif; ?><?php if (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date')) or ($params->get('show_parent_category')) or ($params->get('show_hits'))) :?> 	</dl><?php endif; ?><?php  if (isset($images->image_intro) and !empty($images->image_intro)) : ?>	<?php $imgfloat = (empty($images->float_intro)) ? $params->get('float_intro') : $images->float_intro; ?>	<div class="img-intro-<?php echo htmlspecialchars($imgfloat); ?>">	<img		<?php if ($images->image_intro_caption):			echo 'class="caption"'.' title="' .htmlspecialchars($images->image_intro_caption) .'"';		endif; ?>		src="<?php echo htmlspecialchars($images->image_intro); ?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>"/>	</div><?php endif; ?><?php echo $this->item->introtext; ?><?php if ($params->get('show_readmore') && $this->item->readmore) :	if ($params->get('access-view')) :		$link = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));	else :		$menu = JFactory::getApplication()->getMenu();		$active = $menu->getActive();		$itemId = $active->id;		$link1 = JRoute::_('index.php?option=com_users&view=login&Itemid=' . $itemId);		$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug));		$link = new JURI($link1);		$link->setVar('return', base64_encode($returnURL));	endif;?>		<p class="readmore">				<a href="<?php echo $link; ?>">					<?php if (!$params->get('access-view')) :						echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');					elseif ($readmore = $this->item->alternative_readmore) :						echo $readmore;						if ($params->get('show_readmore_title', 0) != 0) :							echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));						endif;					elseif ($params->get('show_readmore_title', 0) == 0) :						echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');					else :						echo JText::_('COM_CONTENT_READ_MORE');						echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));					endif; ?></a>		</p><?php endif; ?><?php if ($this->item->state == 0) : ?></div><?php endif; ?><div class="item-separator"></div><?php echo $this->item->event->afterDisplayContent; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! update helper. * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateHelper{	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since	2.5.4	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$assetName = 'com_joomlaupdate';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla Model * * Acts as a Factory class for application specific objects and * provides many supporting API functions. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */abstract class JModelLegacy extends JObject{	/**	 * Indicates if the internal state has been set	 *	 * @var    boolean	 * @since  12.2	 */	protected $__state_set = null;	/**	 * Database Connector	 *	 * @var    object	 * @since  12.2	 */	protected $_db;	/**	 * The model (base) name	 *	 * @var    string	 * @since  12.2	 */	protected $name;	/**	 * The URL option for the component.	 *	 * @var    string	 * @since  12.2	 */	protected $option = null;	/**	 * A state object	 *	 * @var    string	 * @since  12.2	 */	protected $state;	/**	 * The event to trigger when cleaning cache.	 *	 * @var      string	 * @since    12.2	 */	protected $event_clean_cache = null;	/**	 * Add a directory where JModelLegacy should search for models. You may	 * either pass a string or an array of directories.	 *	 * @param   mixed   $path    A path or array[sting] of paths to search.	 * @param   string  $prefix  A prefix for models.	 *	 * @return  array  An array with directory elements. If prefix is equal to '', all directories are returned.	 *	 * @since   12.2	 */	public static function addIncludePath($path = '', $prefix = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!isset($paths[$prefix]))		{			$paths[$prefix] = array();		}		if (!isset($paths['']))		{			$paths[''] = array();		}		if (!empty($path))		{			jimport('joomla.filesystem.path');			if (!in_array($path, $paths[$prefix]))			{				array_unshift($paths[$prefix], JPath::clean($path));			}			if (!in_array($path, $paths['']))			{				array_unshift($paths[''], JPath::clean($path));			}		}		return $paths[$prefix];	}	/**	 * Adds to the stack of model table paths in LIFO order.	 *	 * @param   mixed  $path  The directory as a string or directories as an array to add.	 *	 * @return  void	 *	 * @since   12.2	 */	public static function addTablePath($path)	{		JTable::addIncludePath($path);	}	/**	 * Create the filename for a resource	 *	 * @param   string  $type   The resource type to create the filename for.	 * @param   array   $parts  An associative array of filename information.	 *	 * @return  string  The filename	 *	 * @since   12.2	 */	protected static function _createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'model':				$filename = strtolower($parts['name']) . '.php';				break;		}		return $filename;	}	/**	 * Returns a Model object, always creating it	 *	 * @param   string  $type    The model type to instantiate	 * @param   string  $prefix  Prefix for the model class name. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  mixed   A model object or false on failure	 *	 * @since   12.2	 */	public static function getInstance($type, $prefix = '', $config = array())	{		$type = preg_replace('/[^A-Z0-9_\.-]/i', '', $type);		$modelClass = $prefix . ucfirst($type);		if (!class_exists($modelClass))		{			jimport('joomla.filesystem.path');			$path = JPath::find(self::addIncludePath(null, $prefix), self::_createFileName('model', array('name' => $type)));			if (!$path)			{				$path = JPath::find(self::addIncludePath(null, ''), self::_createFileName('model', array('name' => $type)));			}			if ($path)			{				require_once $path;				if (!class_exists($modelClass))				{					JLog::add(JText::sprintf('JLIB_APPLICATION_ERROR_MODELCLASS_NOT_FOUND', $modelClass), JLog::WARNING, 'jerror');					return false;				}			}			else			{				return false;			}		}		return new $modelClass($config);	}	/**	 * Constructor	 *	 * @param   array  $config  An array of configuration options (name, state, dbo, table_path, ignore_request).	 *	 * @since   12.2	 * @throws  Exception	 */	public function __construct($config = array())	{		// Guess the option from the class name (Option)Model(View).		if (empty($this->option))		{			$r = null;			if (!preg_match('/(.*)Model/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_MODEL_GET_NAME'), 500);			}			$this->option = 'com_' . strtolower($r[1]);		}		// Set the view name		if (empty($this->name))		{			if (array_key_exists('name', $config))			{				$this->name = $config['name'];			}			else			{				$this->name = $this->getName();			}		}		// Set the model state		if (array_key_exists('state', $config))		{			$this->state = $config['state'];		}		else		{			$this->state = new JObject;		}		// Set the model dbo		if (array_key_exists('dbo', $config))		{			$this->_db = $config['dbo'];		}		else		{			$this->_db = JFactory::getDbo();		}		// Set the default view search path		if (array_key_exists('table_path', $config))		{			$this->addTablePath($config['table_path']);		}		elseif (defined('JPATH_COMPONENT_ADMINISTRATOR'))		{			$this->addTablePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');		}		// Set the internal state marker - used to ignore setting state from the request		if (!empty($config['ignore_request']))		{			$this->__state_set = true;		}		// Set the clean cache event		if (isset($config['event_clean_cache']))		{			$this->event_clean_cache = $config['event_clean_cache'];		}		elseif (empty($this->event_clean_cache))		{			$this->event_clean_cache = 'onContentCleanCache';		}	}	/**	 * Gets an array of objects from the results of database query.	 *	 * @param   string   $query       The query.	 * @param   integer  $limitstart  Offset.	 * @param   integer  $limit       The number of records.	 *	 * @return  array  An array of results.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$this->_db->setQuery($query, $limitstart, $limit);		$result = $this->_db->loadObjectList();		return $result;	}	/**	 * Returns a record count for the query	 *	 * @param   string  $query  The query.	 *	 * @return  integer  Number of rows for query	 *	 * @since   12.2	 */	protected function _getListCount($query)	{		$this->_db->setQuery($query);		$this->_db->execute();		return $this->_db->getNumRows();	}	/**	 * Method to load and return a model object.	 *	 * @param   string  $name    The name of the view	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration settings to pass to JTable::getInstance	 *	 * @return  mixed  Model object or boolean false if failed	 *	 * @since   12.2	 * @see     JTable::getInstance	 */	protected function _createTable($name, $prefix = 'Table', $config = array())	{		// Clean the model name		$name = preg_replace('/[^A-Z0-9_]/i', '', $name);		$prefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		// Make sure we are returning a DBO object		if (!array_key_exists('dbo', $config))		{			$config['dbo'] = $this->getDbo();		}		return JTable::getInstance($name, $prefix, $config);	}	/**	 * Method to get the database driver object	 *	 * @return  JDatabaseDriver	 */	public function getDbo()	{		return $this->_db;	}	/**	 * Method to get the model name	 *	 * The model name. By default parsed using the classname or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the model	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->name))		{			$r = null;			if (!preg_match('/Model(.*)/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_MODEL_GET_NAME'), 500);			}			$this->name = strtolower($r[1]);		}		return $this->name;	}	/**	 * Method to get model state variables	 *	 * @param   string  $property  Optional parameter name	 * @param   mixed   $default   Optional default value	 *	 * @return  object  The property where specified, the state object where omitted	 *	 * @since   12.2	 */	public function getState($property = null, $default = null)	{		if (!$this->__state_set)		{			// Protected method to auto-populate the model state.			$this->populateState();			// Set the model state set flag to true.			$this->__state_set = true;		}		return $property === null ? $this->state : $this->state->get($property, $default);	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $name     The table name. Optional.	 * @param   string  $prefix   The class prefix. Optional.	 * @param   array   $options  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   12.2	 * @throws  Exception	 */	public function getTable($name = '', $prefix = 'Table', $options = array())	{		if (empty($name))		{			$name = $this->getName();		}		if ($table = $this->_createTable($name, $prefix, $options))		{			return $table;		}		throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_TABLE_NAME_NOT_SUPPORTED', $name), 0);	}	/**	 * Method to auto-populate the model state.	 *	 * This method should only be called once per instantiation and is designed	 * to be called on the first call to the getState() method unless the model	 * configuration flag to ignore the request is set.	 *	 * @return  void	 *	 * @note    Calling getState in this method will result in recursion.	 * @since   12.2	 */	protected function populateState()	{	}	/**	 * Method to set the database driver object	 *	 * @param   JDatabaseDriver  $db  A JDatabaseDriver based object	 *	 * @return  void	 *	 * @since   12.2	 */	public function setDbo($db)	{		$this->_db = $db;	}	/**	 * Method to set model state variables	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set or null.	 *	 * @return  mixed  The previous value of the property or null if not set.	 *	 * @since   12.2	 */	public function setState($property, $value = null)	{		return $this->state->set($property, $value);	}	/**	 * Clean the cache	 *	 * @param   string   $group      The cache group	 * @param   integer  $client_id  The ID of the client	 *	 * @return  void	 *	 * @since   12.2	 */	protected function cleanCache($group = null, $client_id = 0)	{		$conf = JFactory::getConfig();		$dispatcher = JEventDispatcher::getInstance();		$options = array(			'defaultgroup' => ($group) ? $group : (isset($this->option) ? $this->option : JFactory::getApplication()->input->get('option')),			'cachebase' => ($client_id) ? JPATH_ADMINISTRATOR . '/cache' : $conf->get('cache_path', JPATH_SITE . '/cache'));		$cache = JCache::getInstance('callback', $options);		$cache->clean();		// Trigger the onContentCleanCache event.		$dispatcher->trigger($this->event_clean_cache, $options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><fieldset>	<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Plugin * @subpackage  Content.vote * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Vote plugin. * * @package     Joomla.Plugin * @subpackage  Content.vote * @since       1.5 */class PlgContentVote extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * @since   1.6	 */	public function onContentBeforeDisplay($context, &$row, &$params, $page=0)	{		$html = '';		if ($params->get('show_vote'))		{			$rating = (int) @$row->rating;			$view = JFactory::getApplication()->input->getString('view', '');			$img = '';			// look for images in template if available			$starImageOn = JHtml::_('image', 'system/rating_star.png', JText::_('PLG_VOTE_STAR_ACTIVE'), null, true);			$starImageOff = JHtml::_('image', 'system/rating_star_blank.png', JText::_('PLG_VOTE_STAR_INACTIVE'), null, true);			for ($i = 0; $i < $rating; $i++)			{				$img .= $starImageOn;			}			for ($i = $rating; $i < 5; $i++)			{				$img .= $starImageOff;			}			$html .= '<div class="content_rating">';			$html .= '<p class="unseen element-invisible">' . JText::sprintf('PLG_VOTE_USER_RATING', $rating, '5') . '</p>';			$html .= $img;			$html .= '</div>';			if ($view == 'article' && $row->state == 1)			{				$uri = JURI::getInstance();				$uri->setQuery($uri->getQuery().'&hitcount=0');				// create option list for voting select box				$options = array();				for($i = 1; $i < 6; $i++)				{					$options[] = JHTML::_('select.option', $i, JText::sprintf('PLG_VOTE_VOTE', $i));				}				// generate voting form				$html .= '<form method="post" action="' . htmlspecialchars($uri->toString()) . '" class="form-inline">';				$html .= '<span class="content_vote">';				$html .= '<label class="unseen element-invisible" for="content_vote_' . $row->id . '">'.JText::_('PLG_VOTE_LABEL').'</label>';				$html .= JHTML::_('select.genericlist', $options, 'user_rating', null, 'value', 'text', '5', 'content_vote_'.$row->id);				$html .= '&#160;<input class="btn btn-mini" type="submit" name="submit_vote" value="' . JText::_('PLG_VOTE_RATE') . '" />';				$html .= '<input type="hidden" name="task" value="article.vote" />';				$html .= '<input type="hidden" name="hitcount" value="0" />';				$html .= '<input type="hidden" name="url" value="' . htmlspecialchars($uri->toString()) . '" />';				$html .= JHtml::_('form.token');				$html .= '</span>';				$html .= '</form>';			}		}		return $html;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JApplicationWebClient instead. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.3 * @deprecated  12.3 */class JWebClient extends JApplicationWebClient{	/**	 * Class constructor.	 *	 * @param   mixed  $userAgent       The optional user-agent string to parse.	 * @param   mixed  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   mixed  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   11.3	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		JLog::add('JWebClient is deprecated. Use JApplicationWebClient instead.', JLog::WARNING, 'deprecated');		parent::__construct($userAgent, $acceptEncoding, $acceptLanguage);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_DIRECTORY_PERMISSIONS'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="650">					<?php echo JText::_('COM_ADMIN_DIRECTORY'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_STATUS'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;</td>			</tr>		</tfoot>		<tbody>			<?php foreach ($this->directory as $dir => $info) : ?>			<tr>				<td>					<?php echo JHtml::_('directory.message', $dir, $info['message']);?>				</td>				<td>					<?php echo JHtml::_('directory.writable', $info['writable']);?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  mod_random_image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$link	= $params->get('link');$folder	= ModRandomImageHelper::getFolder($params);$images	= ModRandomImageHelper::getImages($params, $folder);if (!count($images)){	echo JText::_('MOD_RANDOM_IMAGE_NO_IMAGES');	return;}$image = ModRandomImageHelper::getRandomImage($params, $images);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_random_image', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexerHelper', __DIR__ . '/helper.php');JLoader::register('FinderIndexerParser', __DIR__ . '/parser.php');JLoader::register('FinderIndexerStemmer', __DIR__ . '/stemmer.php');JLoader::register('FinderIndexerTaxonomy', __DIR__ . '/taxonomy.php');JLoader::register('FinderIndexerToken', __DIR__ . '/token.php');jimport('joomla.filesystem.file');/** * Main indexer class for the Finder indexer package. * * The indexer class provides the core functionality of the Finder * search engine. It is responsible for adding and updating the * content links table; extracting and scoring tokens; and maintaining * all referential information for the content. * * Note: All exceptions thrown from within this class should be caught * by the controller. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexer{	/**	 * The title context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const TITLE_CONTEXT = 1;	/**	 * The text context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const TEXT_CONTEXT = 2;	/**	 * The meta context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const META_CONTEXT = 3;	/**	 * The path context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const PATH_CONTEXT = 4;	/**	 * The misc context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const MISC_CONTEXT = 5;	/**	 * The indexer state object.	 *	 * @var    object	 * @since  2.5	 */	public static $state;	/**	 * The indexer profiler object.	 *	 * @var    object	 * @since  2.5	 */	public static $profiler;	/**	 * Returns a reference to the FinderIndexer object.	 *	 * @return  FinderIndexer instance based on the database driver	 *	 * @since   3.0	 * @throws  RuntimeException if driver class for indexer not present.	 */	public static function getInstance()	{		// Setup the adapter for the indexer.		$format = JFactory::getDbo()->name;		if ($format == 'mysqli')		{			$format = 'mysql';		}		elseif ($format == 'sqlazure')		{			$format = 'sqlsrv';		}		$path = __DIR__ . '/driver/' . $format . '.php';		$class = 'FinderIndexerDriver' . ucfirst($format);		// Check if a parser exists for the format.		if (file_exists($path))		{			// Instantiate the parser.			include_once $path;			return new $class;		}		else		{			// Throw invalid format exception.			throw new RuntimeException(JText::sprintf('COM_FINDER_INDEXER_INVALID_DRIVER', $format));		}	}	/**	 * Method to get the indexer state.	 *	 * @return  object  The indexer state object.	 *	 * @since   2.5	 */	public static function getState()	{		// First, try to load from the internal state.		if (!empty(self::$state))		{			return self::$state;		}		// If we couldn't load from the internal state, try the session.		$session = JFactory::getSession();		$data = $session->get('_finder.state', null);		// If the state is empty, load the values for the first time.		if (empty($data))		{			$data = new JObject;			// Load the default configuration options.			$data->options = JComponentHelper::getParams('com_finder');			// Setup the weight lookup information.			$data->weights = array(				self::TITLE_CONTEXT	=> round($data->options->get('title_multiplier', 1.7), 2),				self::TEXT_CONTEXT	=> round($data->options->get('text_multiplier', 0.7), 2),				self::META_CONTEXT	=> round($data->options->get('meta_multiplier', 1.2), 2),				self::PATH_CONTEXT	=> round($data->options->get('path_multiplier', 2.0), 2),				self::MISC_CONTEXT	=> round($data->options->get('misc_multiplier', 0.3), 2)			);			// Set the current time as the start time.			$data->startTime = JFactory::getDate()->toSQL();			// Set the remaining default values.			$data->batchSize = (int) $data->options->get('batch_size', 50);			$data->batchOffset = 0;			$data->totalItems = 0;			$data->pluginState = array();		}		// Setup the profiler if debugging is enabled.		if (JFactory::getApplication()->getCfg('debug'))		{			self::$profiler = JProfiler::getInstance('FinderIndexer');		}		// Setup the stemmer.		if ($data->options->get('stem', 1) && $data->options->get('stemmer', 'porter_en'))		{			FinderIndexerHelper::$stemmer = FinderIndexerStemmer::getInstance($data->options->get('stemmer', 'porter_en'));		}		// Set the state.		self::$state = $data;		return self::$state;	}	/**	 * Method to set the indexer state.	 *	 * @param   object  $data  A new indexer state object.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 */	public static function setState($data)	{		// Check the state object.		if (empty($data) || !$data instanceof JObject)		{			return false;		}		// Set the new internal state.		self::$state = $data;		// Set the new session state.		$session = JFactory::getSession();		$session->set('_finder.state', $data);		return true;	}	/**	 * Method to reset the indexer state.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function resetState()	{		// Reset the internal state to null.		self::$state = null;		// Reset the session state to null.		$session = JFactory::getSession();		$session->set('_finder.state', null);	}	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function index($item, $format = 'html');	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function remove($linkId);	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function optimize();	/**	 * Method to get a content item's signature.	 *	 * @param   object  $item  The content item to index.	 *	 * @return  string  The content item's signature.	 *	 * @since   2.5	 */	protected static function getSignature($item)	{		// Get the indexer state.		$state = self::getState();		// Get the relevant configuration variables.		$config = array();		$config[] = $state->weights;		$config[] = $state->options->get('stem', 1);		$config[] = $state->options->get('stemmer', 'porter_en');		return md5(serialize(array($item, $config)));	}	/**	 * Method to parse input, tokenize it, and then add it to the database.	 *	 * @param   mixed    $input    String or resource to use as input. A resource	 *                             input will automatically be chunked to conserve	 *                             memory. Strings will be chunked if longer than	 *                             2K in size.	 * @param   integer  $context  The context of the input. See context constants.	 * @param   string   $lang     The language of the input.	 * @param   string   $format   The format of the input.	 *	 * @return  integer  The number of tokens extracted from the input.	 *	 * @since   2.5	 */	protected function tokenizeToDB($input, $context, $lang, $format)	{		$count = 0;		$buffer = null;		if (!empty($input))		{			// If the input is a resource, batch the process out.			if (is_resource($input))			{				// Batch the process out to avoid memory limits.				while (!feof($input))				{					// Read into the buffer.					$buffer .= fread($input, 2048);					// If we haven't reached the end of the file, seek to the last					// space character and drop whatever is after that to make sure					// we didn't truncate a term while reading the input.					if (!feof($input))					{						// Find the last space character.						$ls = strrpos($buffer, ' ');						// Adjust string based on the last space character.						if ($ls)						{							// Truncate the string to the last space character.							$string = substr($buffer, 0, $ls);							// Adjust the buffer based on the last space for the							// next iteration and trim.							$buffer = JString::trim(substr($buffer, $ls));						}						// No space character was found.						else						{							$string = $buffer;						}					}					// We've reached the end of the file, so parse whatever remains.					else					{						$string = $buffer;					}					// Parse the input.					$string = FinderIndexerHelper::parse($string, $format);					// Check the input.					if (empty($string))					{						continue;					}					// Tokenize the input.					$tokens = FinderIndexerHelper::tokenize($string, $lang);					// Add the tokens to the database.					$count += $this->addTokensToDB($tokens, $context);					// Check if we're approaching the memory limit of the token table.					if ($count > self::$state->options->get('memory_table_limit', 30000))					{						self::toggleTables(false);					}					unset($string);					unset($tokens);				}			}			// If the input is greater than 2K in size, it is more efficient to			// batch out the operation into smaller chunks of work.			elseif (strlen($input) > 2048)			{				$start = 0;				$end = strlen($input);				$chunk = 2048;				// As it turns out, the complex regular expressions we use for				// sanitizing input are not very efficient when given large				// strings. It is much faster to process lots of short strings.				while ($start < $end)				{					// Setup the string.					$string = substr($input, $start, $chunk);					// Find the last space character if we aren't at the end.					$ls = (($start + $chunk) < $end ? strrpos($string, ' ') : false);					// Truncate to the last space character.					if ($ls !== false)					{						$string = substr($string, 0, $ls);					}					// Adjust the start position for the next iteration.					$start += ($ls !== false ? ($ls + 1 - $chunk) + $chunk : $chunk);					// Parse the input.					$string = FinderIndexerHelper::parse($string, $format);					// Check the input.					if (empty($string))					{						continue;					}					// Tokenize the input.					$tokens = FinderIndexerHelper::tokenize($string, $lang);					// Add the tokens to the database.					$count += $this->addTokensToDB($tokens, $context);					// Check if we're approaching the memory limit of the token table.					if ($count > self::$state->options->get('memory_table_limit', 30000))					{						self::toggleTables(false);					}				}			}			else			{				// Parse the input.				$input = FinderIndexerHelper::parse($input, $format);				// Check the input.				if (empty($input))				{					return $count;				}				// Tokenize the input.				$tokens = FinderIndexerHelper::tokenize($input, $lang);				// Add the tokens to the database.				$count = $this->addTokensToDB($tokens, $context);			}		}		return $count;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function addTokensToDB($tokens, $context = '');	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function toggleTables($memory);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache Controller * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheController extends JControllerLegacy{	/**	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/cache.php';		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'cache');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			switch ($vName)			{				case 'purge':					break;				case 'cache':				default:					$model = $this->getModel($vName);					$view->setModel($model, true);					break;			}			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			// Load the submenu.			CacheHelper::addSubmenu($this->input->get('view', 'cache'));			$view->display();		}	}	public function delete()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$cid = $this->input->post->get('cid', array(), 'array');		$model = $this->getModel('cache');		if (empty($cid))		{			JError::raiseWarning(500, JText::_('JERROR_NO_ITEMS_SELECTED'));		}		else		{			$model->cleanlist($cid);		}		$this->setRedirect('index.php?option=com_cache&client='.$model->getClient()->id);	}	public function purge()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$model = $this->getModel('cache');		$ret = $model->purge();		$msg = JText::_('COM_CACHE_EXPIRED_ITEMS_HAVE_BEEN_PURGED');		$msgType = 'message';		if ($ret === false)		{			$msg = JText::_('Error purging expired items');			$msgType = 'error';		}		$this->setRedirect('index.php?option=com_cache&view=purge', $msg, $msgType);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="items-more"><ol class="nav nav-tabs nav-stacked"><?php	foreach ($this->link_items as &$item) :?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catid)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol></div>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('JHtmlUsers', JPATH_COMPONENT . '/helpers/html/users.php');JHtml::register('users.spacer', array('JHtmlUsers', 'spacer'));JHtml::register('users.helpsite', array('JHtmlUsers', 'helpsite'));JHtml::register('users.templatestyle', array('JHtmlUsers', 'templatestyle'));JHtml::register('users.admin_language', array('JHtmlUsers', 'admin_language'));JHtml::register('users.language', array('JHtmlUsers', 'language'));JHtml::register('users.editor', array('JHtmlUsers', 'editor'));?><?php $fields = $this->form->getFieldset('params'); ?><?php if (count($fields)) : ?><fieldset id="users-profile-custom">	<legend><?php echo JText::_('COM_USERS_SETTINGS_FIELDSET_LABEL'); ?></legend>	<dl class="dl-horizontal">	<?php foreach ($fields as $field):		if (!$field->hidden) :?>		<dt><?php echo $field->title; ?></dt>		<dd>			<?php if (JHtml::isRegistered('users.'.$field->id)):?>				<?php echo JHtml::_('users.'.$field->id, $field->value);?>			<?php elseif (JHtml::isRegistered('users.'.$field->fieldname)):?>				<?php echo JHtml::_('users.'.$field->fieldname, $field->value);?>			<?php elseif (JHtml::isRegistered('users.'.$field->type)):?>				<?php echo JHtml::_('users.'.$field->type, $field->value);?>			<?php else:?>				<?php echo JHtml::_('users.value', $field->value);?>			<?php endif;?>		</dd>		<?php endif;?>	<?php endforeach;?>	</dl></fieldset><?php endif;?>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="newsflash-vert<?php echo $params->get('moduleclass_sfx'); ?>"><?php for ($i = 0, $n = count($list); $i < $n; $i ++) :	$item = $list[$i]; ?>	<li class="newsflash-item">	<?php require JModuleHelper::getLayoutPath('mod_articles_news', '_item');	if ($n > 1 && (($i < $n - 1) || $params->get('showLastSeparator'))) : ?>		<span class="article-separator">&#160;</span>	<?php endif; ?>	</li><?php endfor; ?></ul>
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the site data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSite extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$model->checkForm('site');		// Redirect to the page.		$r = new stdClass;		$r->view = 'database';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user  = JFactory::getUser();$input = JFactory::getApplication()->input;?><div class="row-fluid">	<!-- Begin Sidebar -->	<div class="span2">		<div id="treeview">			<div id="media-tree_tree" class="sidebar-nav">				<?php echo $this->loadTemplate('folders'); ?>			</div>		</div>	</div>	<style>		.overall-progress,		.current-progress {			width: 150px;		}	</style>	<!-- End Sidebar -->	<!-- Begin Content -->	<div class="span10">		<?php echo $this->loadTemplate('navigation'); ?>		<?php if (($user->authorise('core.create', 'com_media')) and $this->require_ftp) : ?>			<form action="index.php?option=com_media&amp;task=ftpValidate" name="ftpForm" id="ftpForm" method="post">				<fieldset title="<?php echo JText::_('COM_MEDIA_DESCFTPTITLE'); ?>">					<legend><?php echo JText::_('COM_MEDIA_DESCFTPTITLE'); ?></legend>					<?php echo JText::_('COM_MEDIA_DESCFTP'); ?>					<label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>					<input type="text" id="username" name="username" class="inputbox" size="70" value="" />					<label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>					<input type="password" id="password" name="password" class="inputbox" size="70" value="" />				</fieldset>			</form>		<?php endif; ?>		<form action="index.php?option=com_media" name="adminForm" id="mediamanager-form" method="post" enctype="multipart/form-data" >			<input type="hidden" name="task" value="" />			<input type="hidden" name="cb1" id="cb1" value="0" />			<input class="update-folder" type="hidden" name="folder" id="folder" value="<?php echo $this->state->folder; ?>" />		</form>		<?php if ($user->authorise('core.create', 'com_media')):?>		<!-- File Upload Form -->		<div id="collapseUpload" class="collapse">			<form action="<?php echo JURI::base(); ?>index.php?option=com_media&amp;task=file.upload&amp;tmpl=component&amp;<?php echo $this->session->getName().'='.$this->session->getId(); ?>&amp;<?php echo JSession::getFormToken();?>=1&amp;format=html" id="uploadForm" class="form-inline" name="uploadForm" method="post" enctype="multipart/form-data">				<div id="uploadform">					<fieldset id="upload-noflash" class="actions">							<label for="upload-file" class="control-label"><?php echo JText::_('COM_MEDIA_UPLOAD_FILE'); ?></label>								<input type="file" id="upload-file" name="Filedata[]" multiple /> <button class="btn btn-primary" id="upload-submit"><i class="icon-upload icon-white"></i> <?php echo JText::_('COM_MEDIA_START_UPLOAD'); ?></button>								<p class="help-block"><?php echo $this->config->get('upload_maxsize') == '0' ? JText::_('COM_MEDIA_UPLOAD_FILES_NOLIMIT') : JText::sprintf('COM_MEDIA_UPLOAD_FILES', $this->config->get('upload_maxsize')); ?></p>					</fieldset>					<input class="update-folder" type="hidden" name="folder" id="folder" value="<?php echo $this->state->folder; ?>" />					<input type="hidden" name="return-url" value="<?php echo base64_encode('index.php?option=com_media'); ?>" />				</div>			</form>		</div>		<div id="collapseFolder" class="collapse">			<form action="index.php?option=com_media&amp;task=folder.create&amp;tmpl=<?php echo $input->getCmd('tmpl', 'index');?>" name="folderForm" id="folderForm" class="form-inline" method="post">					<div class="path">						<input class="inputbox" type="text" id="folderpath" readonly="readonly" />						<input class="inputbox" type="text" id="foldername" name="foldername"  />						<input class="update-folder" type="hidden" name="folderbase" id="folderbase" value="<?php echo $this->state->folder; ?>" />						<button type="submit" class="btn"><i class="icon-folder-open"></i> <?php echo JText::_('COM_MEDIA_CREATE_FOLDER'); ?></button>					</div>					<?php echo JHtml::_('form.token'); ?>			</form>		</div>		<?php endif;?>		<form action="index.php?option=com_media&amp;task=folder.create&amp;tmpl=<?php echo $input->getCmd('tmpl', 'index');?>" name="folderForm" id="folderForm" method="post">			<div id="folderview">				<div class="view">					<iframe class="thumbnail" src="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->folder;?>" id="folderframe" name="folderframe" width="100%" height="500px" marginwidth="0" marginheight="0" scrolling="auto"></iframe>				</div>				<?php echo JHtml::_('form.token'); ?>			</div>		</form>	</div>	<!-- End Content --></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note. It is important to remove spaces between elements.$title = $item->anchor_title ? ' title="'.$item->anchor_title.'" ' : '';if ($item->menu_image)	{		$item->params->get('menu_text', 1) ?		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" /><span class="image-title">'.$item->title.'</span> ' :		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" />';}else { $linktype = $item->title;}?><span class="separator"<?php echo $title; ?>><?php echo $linktype; ?></span>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_NEWSFEEDS_NO_ARTICLES'); ?>	 </p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>	<?php if ($this->params->get('show_pagination_limit')) : ?>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	<?php endif; ?>	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	</fieldset>	<table class="category">		<?php if ($this->params->get('show_headings') == 1) : ?>		<thead><tr>				<th class="item-title" id="tableOrdering">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_FEED_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<?php if ($this->params->get('show_articles')) : ?>				<th class="item-num-art" id="tableOrdering2">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_NUM_ARTICLES', 'a.numarticles', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>				<?php if ($this->params->get('show_link')) : ?>				<th class="item-link" id="tableOrdering3">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_FEED_LINK', 'a.link', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $item) : ?>		<?php if ($this->items[$i]->published == 0) : ?>			<tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">		<?php else: ?>			<tr class="cat-list-row<?php echo $i % 2; ?>" >		<?php endif; ?>					<td class="item-title">						<a href="<?php echo JRoute::_(NewsFeedsHelperRoute::getNewsfeedRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</td>					<?php  if ($this->params->get('show_articles')) : ?>						<td class="item-num-art">							<?php echo $item->numarticles; ?>						</td>					<?php  endif; ?>					<?php  if ($this->params->get('show_link')) : ?>						<td class="item-link">							<a href="<?php echo $item->link; ?>"><?php echo $item->link; ?></a>						</td>					<?php  endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php if ($this->params->get('show_pagination')) : ?>	<div class="pagination">	<?php if ($this->params->def('show_pagination_results', 1)) : ?>		<p class="counter">			<?php echo $this->pagination->getPagesCounter(); ?>		</p>	<?php endif; ?>	<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.browser');jimport('joomla.filesystem.file');jimport('joomla.filesystem.path');/** * Utility class for all HTML drawing classes * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtml{	/**	 * Option values related to the generation of HTML output. Recognized	 * options are:	 *     fmtDepth, integer. The current indent depth.	 *     fmtEol, string. The end of line string, default is linefeed.	 *     fmtIndent, string. The string to use for indentation, default is	 *     tab.	 *	 * @var    array	 * @since  11.1	 */	public static $formatOptions = array('format.depth' => 0, 'format.eol' => "\n", 'format.indent' => "\t");	/**	 * An array to hold included paths	 *	 * @var    array	 * @since  11.1	 */	protected static $includePaths = array();	/**	 * An array to hold method references	 *	 * @var    array	 * @since  11.1	 */	protected static $registry = array();	/**	 * Method to extract a key	 *	 * @param   string  $key  The name of helper method to load, (prefix).(class).function	 *                        prefix and class are optional and can be used to load custom html helpers.	 *	 * @return  array  Contains lowercase key, prefix, file, function.	 *	 * @since   11.1	 */	protected static function extract($key)	{		$key = preg_replace('#[^A-Z0-9_\.]#i', '', $key);		// Check to see whether we need to load a helper file		$parts = explode('.', $key);		$prefix = (count($parts) == 3 ? array_shift($parts) : 'JHtml');		$file = (count($parts) == 2 ? array_shift($parts) : '');		$func = array_shift($parts);		return array(strtolower($prefix . '.' . $file . '.' . $func), $prefix, $file, $func);	}	/**	 * Class loader method	 *	 * Additional arguments may be supplied and are passed to the sub-class.	 * Additional include paths are also able to be specified for third-party use	 *	 * @param   string  $key  The name of helper method to load, (prefix).(class).function	 *                        prefix and class are optional and can be used to load custom	 *                        html helpers.	 *	 * @return  mixed  JHtml::call($function, $args) or False on error	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public static function _($key)	{		list($key, $prefix, $file, $func) = self::extract($key);		if (array_key_exists($key, self::$registry))		{			$function = self::$registry[$key];			$args = func_get_args();			// Remove function name from arguments			array_shift($args);			return self::call($function, $args);		}		$className = $prefix . ucfirst($file);		if (!class_exists($className))		{			$path = JPath::find(self::$includePaths, strtolower($file) . '.php');			if ($path)			{				require_once $path;				if (!class_exists($className))				{					throw new InvalidArgumentException(sprintf('%s not found.', $className), 500);				}			}			else			{				throw new InvalidArgumentException(sprintf('%s %s not found.', $prefix, $file), 500);			}		}		$toCall = array($className, $func);		if (is_callable($toCall))		{			self::register($key, $toCall);			$args = func_get_args();			// Remove function name from arguments			array_shift($args);			return self::call($toCall, $args);		}		else		{			throw new InvalidArgumentException(sprintf('%s::%s not found.', $className, $func), 500);		}	}	/**	 * Registers a function to be called with a specific key	 *	 * @param   string  $key       The name of the key	 * @param   string  $function  Function or method	 *	 * @return  boolean  True if the function is callable	 *	 * @since   11.1	 */	public static function register($key, $function)	{		list($key) = self::extract($key);		if (is_callable($function))		{			self::$registry[$key] = $function;			return true;		}		return false;	}	/**	 * Removes a key for a method from registry.	 *	 * @param   string  $key  The name of the key	 *	 * @return  boolean  True if a set key is unset	 *	 * @since   11.1	 */	public static function unregister($key)	{		list($key) = self::extract($key);		if (isset(self::$registry[$key]))		{			unset(self::$registry[$key]);			return true;		}		return false;	}	/**	 * Test if the key is registered.	 *	 * @param   string  $key  The name of the key	 *	 * @return  boolean  True if the key is registered.	 *	 * @since   11.1	 */	public static function isRegistered($key)	{		list($key) = self::extract($key);		return isset(self::$registry[$key]);	}	/**	 * Function caller method	 *	 * @param   callable  $function  Function or method to call	 * @param   array     $args      Arguments to be passed to function	 *	 * @return  mixed   Function result or false on error.	 *	 * @see     http://php.net/manual/en/function.call-user-func-array.php	 * @since   11.1	 * @throws  InvalidArgumentException	 */	protected static function call($function, $args)	{		if (!is_callable($function))		{			throw new InvalidArgumentException('Function not supported', 500);		}		// PHP 5.3 workaround		$temp = array();		foreach ($args as &$arg)		{			$temp[] = &$arg;		}		return call_user_func_array($function, $temp);	}	/**	 * Write a <a></a> element	 *	 * @param   string  $url      The relative URL to use for the href attribute	 * @param   string  $text     The target attribute to use	 * @param   array   $attribs  An associative array of attributes to add	 *	 * @return  string  <a></a> string	 *	 * @since   11.1	 */	public static function link($url, $text, $attribs = null)	{		if (is_array($attribs))		{			$attribs = JArrayHelper::toString($attribs);		}		return '<a href="' . $url . '" ' . $attribs . '>' . $text . '</a>';	}	/**	 * Write a <iframe></iframe> element	 *	 * @param   string  $url       The relative URL to use for the src attribute	 * @param   string  $name      The target attribute to use	 * @param   array   $attribs   An associative array of attributes to add	 * @param   string  $noFrames  The message to display if the iframe tag is not supported	 *	 * @return  string  <iframe></iframe> element or message if not supported	 *	 * @since   11.1	 */	public static function iframe($url, $name, $attribs = null, $noFrames = '')	{		if (is_array($attribs))		{			$attribs = JArrayHelper::toString($attribs);		}		return '<iframe src="' . $url . '" ' . $attribs . ' name="' . $name . '">' . $noFrames . '</iframe>';	}	/**	 * Compute the files to be included	 *	 * @param   string   $folder          folder name to search into (images, css, js, ...)	 * @param   string   $file            path to file	 * @param   boolean  $relative        path to file is relative to /media folder  (and searches in template)	 * @param   boolean  $detect_browser  detect browser to include specific browser files	 * @param   boolean  $detect_debug    detect debug to include compressed files if debug is on	 *	 * @return  array    files to be included	 *	 * @see     JBrowser	 * @since   11.1	 */	protected static function includeRelativeFiles($folder, $file, $relative, $detect_browser, $detect_debug)	{		// If http is present in filename		if (strpos($file, 'http') === 0)		{			$includes = array($file);		}		else		{			// Extract extension and strip the file			$strip		= JFile::stripExt($file);			$ext		= JFile::getExt($file);			// Prepare array of files			$includes = array();			// Detect browser and compute potential files			if ($detect_browser)			{				$navigator = JBrowser::getInstance();				$browser = $navigator->getBrowser();				$major = $navigator->getMajor();				$minor = $navigator->getMinor();				// Try to include files named filename.ext, filename_browser.ext, filename_browser_major.ext, filename_browser_major_minor.ext				// where major and minor are the browser version names				$potential = array($strip, $strip . '_' . $browser,  $strip . '_' . $browser . '_' . $major,					$strip . '_' . $browser . '_' . $major . '_' . $minor);			}			else			{				$potential = array($strip);			}			// If relative search in template directory or media directory			if ($relative)			{				// Get the template				$app = JFactory::getApplication();				$template = $app->getTemplate();				// For each potential files				foreach ($potential as $strip)				{					$files = array();					// Detect debug mode					if ($detect_debug && JFactory::getConfig()->get('debug'))					{						/*						 * Detect if we received a file in the format name.min.ext						 * If so, strip the .min part out, otherwise append -uncompressed						 */						if (strrpos($strip, '.min', '-4'))						{							$position = strrpos($strip, '.min', '-4');							$filename = str_replace('.min', '.', $strip, $position);							$files[]  = $filename . $ext;						}						else						{							$files[] = $strip . '-uncompressed.' . $ext;						}					}					$files[] = $strip . '.' . $ext;					/*					 * Loop on 1 or 2 files and break on first found.					 * Add the content of the MD5SUM file located in the same folder to url to ensure cache browser refresh					 * This MD5SUM file must represent the signature of the folder content					 */					foreach ($files as $file)					{						// If the file is in the template folder						$path = JPATH_THEMES . "/$template/$folder/$file";						if (file_exists($path))						{							$md5 = dirname($path) . '/MD5SUM';							$includes[] = JURI::base(true) . "/templates/$template/$folder/$file" .								(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');							break;						}						else						{							// If the file contains any /: it can be in an media extension subfolder							if (strpos($file, '/'))							{								// Divide the file extracting the extension as the first part before /								list($extension, $file) = explode('/', $file, 2);								// If the file yet contains any /: it can be a plugin								if (strpos($file, '/'))								{									// Divide the file extracting the element as the first part before /									list($element, $file) = explode('/', $file, 2);									// Try to deal with plugins group in the media folder									$path = JPATH_ROOT . "/media/$extension/$element/$folder/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/media/$extension/$element/$folder/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}									// Try to deal with classical file in a a media subfolder called element									$path = JPATH_ROOT . "/media/$extension/$folder/$element/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/media/$extension/$folder/$element/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}									// Try to deal with system files in the template folder									$path = JPATH_THEMES . "/$template/$folder/system/$element/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/templates/$template/$folder/system/$element/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}									// Try to deal with system files in the media folder									$path = JPATH_ROOT . "/media/system/$folder/$element/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/media/system/$folder/$element/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}								}								else								{									// Try to deals in the extension media folder									$path = JPATH_ROOT . "/media/$extension/$folder/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/media/$extension/$folder/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}									// Try to deal with system files in the template folder									$path = JPATH_THEMES . "/$template/$folder/system/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/templates/$template/$folder/system/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}									// Try to deal with system files in the media folder									$path = JPATH_ROOT . "/media/system/$folder/$file";									if (file_exists($path))									{										$md5 = dirname($path) . '/MD5SUM';										$includes[] = JURI::root(true) . "/media/system/$folder/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');										break;									}								}							}							// Try to deal with system files in the media folder							else							{								$path = JPATH_ROOT . "/media/system/$folder/$file";								if (file_exists($path))								{									$md5 = dirname($path) . '/MD5SUM';									$includes[] = JURI::root(true) . "/media/system/$folder/$file" .											(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');									break;								}							}						}					}				}			}			// If not relative and http is not present in filename			else			{				foreach ($potential as $strip)				{					$files = array();					// Detect debug mode					if ($detect_debug && JFactory::getConfig()->get('debug'))					{						/*						 * Detect if we received a file in the format name.min.ext						 * If so, strip the .min part out, otherwise append -uncompressed						 */						if (strrpos($strip, '.min', '-4'))						{							$position = strrpos($strip, '.min', '-4');							$filename = str_replace('.min', '.', $strip, $position);							$files[]  = $filename . $ext;						}						else						{							$files[] = $strip . '-uncompressed.' . $ext;						}					}					$files[] = $strip . '.' . $ext;					/*					 * Loop on 1 or 2 files and break on first found.					 * Add the content of the MD5SUM file located in the same folder to url to ensure cache browser refresh					 * This MD5SUM file must represent the signature of the folder content					 */					foreach ($files as $file)					{						$path = JPATH_ROOT . "/$file";						if (file_exists($path))						{							$md5 = dirname($path) . '/MD5SUM';							$includes[] = JURI::root(true) . "/$file" .								(file_exists($md5) ? ('?' . file_get_contents($md5)) : '');							break;						}					}				}			}		}		return $includes;	}	/**	 * Write a <img></img> element	 *	 * @param   string   $file      The relative or absolute URL to use for the src attribute	 * @param   string   $alt       The alt text.	 * @param   mixed    $attribs   String or associative array of attribute(s) to use	 * @param   boolean  $relative  Path to file is relative to /media folder (and searches in template)	 * @param   mixed    $path_rel  Return html tag without (-1) or with file computing(false). Return computed path only (true)	 *	 * @return  string	 *	 * @since   11.1	 */	public static function image($file, $alt, $attribs = null, $relative = false, $path_rel = false)	{		if ($path_rel !== -1)		{			$includes = self::includeRelativeFiles('images', $file, $relative, false, false);			$file = count($includes) ? $includes[0] : null;		}		// If only path is required		if ($path_rel)		{			return $file;		}		else		{			return	'<img src="' . $file . '" alt="' . $alt . '" ' .				(is_array($attribs) ? JArrayHelper::toString($attribs) : $attribs) .				' />';		}	}	/**	 * Write a <link rel="stylesheet" style="text/css" /> element	 *	 * @param   string   $file            path to file	 * @param   array    $attribs         attributes to be added to the stylesheet	 * @param   boolean  $relative        path to file is relative to /media folder	 * @param   boolean  $path_only       return the path to the file only	 * @param   boolean  $detect_browser  detect browser to include specific browser css files	 *                                    will try to include file, file_*browser*, file_*browser*_*major*, file_*browser*_*major*_*minor*	 *                                    <table>	 *                                       <tr><th>Navigator</th>                  <th>browser</th>	<th>major.minor</th></tr>	 *	 *                                       <tr><td>Safari 3.0.x</td>               <td>konqueror</td>	<td>522.x</td></tr>	 *                                       <tr><td>Safari 3.1.x and 3.2.x</td>     <td>konqueror</td>	<td>525.x</td></tr>	 *                                       <tr><td>Safari 4.0 to 4.0.2</td>        <td>konqueror</td>	<td>530.x</td></tr>	 *                                       <tr><td>Safari 4.0.3 to 4.0.4</td>      <td>konqueror</td>	<td>531.x</td></tr>	 *                                       <tr><td>iOS 4.0 Safari</td>             <td>konqueror</td>	<td>532.x</td></tr>	 *                                       <tr><td>Safari 5.0</td>                 <td>konqueror</td>	<td>533.x</td></tr>	 *	 *                                       <tr><td>Google Chrome 1.0</td>          <td>konqueror</td>	<td>528.x</td></tr>	 *                                       <tr><td>Google Chrome 2.0</td>          <td>konqueror</td>	<td>530.x</td></tr>	 *                                       <tr><td>Google Chrome 3.0 and 4.x</td>  <td>konqueror</td>	<td>532.x</td></tr>	 *                                       <tr><td>Google Chrome 5.0</td>          <td>konqueror</td>	<td>533.x</td></tr>	 *	 *                                       <tr><td>Internet Explorer 5.5</td>      <td>msie</td>		<td>5.5</td></tr>	 *                                       <tr><td>Internet Explorer 6.x</td>      <td>msie</td>		<td>6.x</td></tr>	 *                                       <tr><td>Internet Explorer 7.x</td>      <td>msie</td>		<td>7.x</td></tr>	 *                                       <tr><td>Internet Explorer 8.x</td>      <td>msie</td>		<td>8.x</td></tr>	 *	 *                                       <tr><td>Firefox</td>                    <td>mozilla</td>	<td>5.0</td></tr>	 *                                    </table>	 *                                    a lot of others	 * @param   boolean  $detect_debug    detect debug to search for compressed files if debug is on	 *	 * @return  mixed  nothing if $path_only is false, null, path or array of path if specific css browser files were detected	 *	 * @see     JBrowser	 * @since   11.1	 */	public static function stylesheet($file, $attribs = array(), $relative = false, $path_only = false, $detect_browser = true, $detect_debug = true)	{		$includes = self::includeRelativeFiles('css', $file, $relative, $detect_browser, $detect_debug);		// If only path is required		if ($path_only)		{			if (count($includes) == 0)			{				return null;			}			elseif (count($includes) == 1)			{				return $includes[0];			}			else			{				return $includes;			}		}		// If inclusion is required		else		{			$document = JFactory::getDocument();			foreach ($includes as $include)			{				$document->addStylesheet($include, 'text/css', null, $attribs);			}		}	}	/**	 * Write a <script></script> element	 *	 * @param   string   $file            path to file	 * @param   boolean  $framework       load the JS framework	 * @param   boolean  $relative        path to file is relative to /media folder	 * @param   boolean  $path_only       return the path to the file only	 * @param   boolean  $detect_browser  detect browser to include specific browser js files	 * @param   boolean  $detect_debug    detect debug to search for compressed files if debug is on	 *	 * @return  mixed  nothing if $path_only is false, null, path or array of path if specific js browser files were detected	 *	 * @see     JHtml::stylesheet	 * @since   11.1	 */	public static function script($file, $framework = false, $relative = false, $path_only = false, $detect_browser = true, $detect_debug = true)	{		// Include MooTools framework		if ($framework)		{			self::_('behavior.framework');		}		$includes = self::includeRelativeFiles('js', $file, $relative, $detect_browser, $detect_debug);		// If only path is required		if ($path_only)		{			if (count($includes) == 0)			{				return null;			}			elseif (count($includes) == 1)			{				return $includes[0];			}			else			{				return $includes;			}		}		// If inclusion is required		else		{			$document = JFactory::getDocument();			foreach ($includes as $include)			{				$document->addScript($include);			}		}	}	/**	 * Set format related options.	 *	 * Updates the formatOptions array with all valid values in the passed	 * array. See {@see JHtml::$formatOptions} for details.	 *	 * @param   array  $options  Option key/value pairs.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setFormatOptions($options)	{		foreach ($options as $key => $val)		{			if (isset(self::$formatOptions[$key]))			{				self::$formatOptions[$key] = $val;			}		}	}	/**	 * Returns formated date according to a given format and time zone.	 *	 * @param   string   $input      String in a format accepted by date(), defaults to "now".	 * @param   string   $format     The date format specification string (see {@link PHP_MANUAL#date})	 * @param   mixed    $tz         Time zone to be used for the date.  Special cases: boolean true for user	 *                               setting, boolean false for server setting.	 * @param   boolean  $gregorian  True to use Gregorian calenar	 *	 * @return  string    A date translated by the given format and time zone.	 *	 * @see     strftime	 * @since   11.1	 */	public static function date($input = 'now', $format = null, $tz = true, $gregorian = false)	{		// Get some system objects.		$config = JFactory::getConfig();		$user = JFactory::getUser();		// UTC date converted to user time zone.		if ($tz === true)		{			// Get a date object based on UTC.			$date = JFactory::getDate($input, 'UTC');			// Set the correct time zone based on the user configuration.			$date->setTimeZone(new DateTimeZone($user->getParam('timezone', $config->get('offset'))));		}		// UTC date converted to server time zone.		elseif ($tz === false)		{			// Get a date object based on UTC.			$date = JFactory::getDate($input, 'UTC');			// Set the correct time zone based on the server configuration.			$date->setTimeZone(new DateTimeZone($config->get('offset')));		}		// No date conversion.		elseif ($tz === null)		{			$date = JFactory::getDate($input);		}		// UTC date converted to given time zone.		else		{			// Get a date object based on UTC.			$date = JFactory::getDate($input, 'UTC');			// Set the correct time zone based on the server configuration.			$date->setTimeZone(new DateTimeZone($tz));		}		// If no format is given use the default locale based format.		if (!$format)		{			$format = JText::_('DATE_FORMAT_LC1');		}		// $format is an existing language key		elseif (JFactory::getLanguage()->hasKey($format))		{			$format = JText::_($format);		}		if ($gregorian)		{			return $date->format($format, true);		}		else		{			return $date->calendar($format, true);		}	}	/**	 * Creates a tooltip with an image as button	 *	 * @param   string  $tooltip  The tip string	 * @param   mixed   $title    The title of the tooltip or an associative array with keys contained in	 *                            {'title','image','text','href','alt'} and values corresponding to parameters of the same name.	 * @param   string  $image    The image for the tip, if no text is provided	 * @param   string  $text     The text for the tip	 * @param   string  $href     An URL that will be used to create the link	 * @param   string  $alt      The alt attribute for img tag	 * @param   string  $class    CSS class for the tool tip	 *	 * @return  string	 *	 * @since   11.1	 */	public static function tooltip($tooltip, $title = '', $image = 'tooltip.png', $text = '', $href = '', $alt = 'Tooltip', $class = 'hasTip')	{		if (is_array($title))		{			foreach (array('image', 'text', 'href', 'alt', 'class') as $param)			{				if (isset($title[$param]))				{					$$param = $title[$param];				}			}			if (isset($title['title']))			{				$title = $title['title'];			}			else			{				$title = '';			}		}		$tooltip = htmlspecialchars($tooltip, ENT_COMPAT, 'UTF-8');		$title = htmlspecialchars($title, ENT_COMPAT, 'UTF-8');		$alt = htmlspecialchars($alt, ENT_COMPAT, 'UTF-8');		if (!$text)		{			$text = self::image($image, $alt, null, true);		}		if ($href)		{			$tip = '<a href="' . $href . '">' . $text . '</a>';		}		else		{			$tip = $text;		}		if ($title)		{			$tooltip = $title . '::' . $tooltip;		}		return '<span class="' . $class . '" title="' . $tooltip . '">' . $tip . '</span>';	}	/**	 * Displays a calendar control field	 *	 * @param   string  $value    The date value	 * @param   string  $name     The name of the text field	 * @param   string  $id       The id of the text field	 * @param   string  $format   The date format	 * @param   array   $attribs  Additional HTML attributes	 *	 * @return  string  HTML markup for a calendar field	 *	 * @since   11.1	 */	public static function calendar($value, $name, $id, $format = '%Y-%m-%d', $attribs = null)	{		static $done;		if ($done === null)		{			$done = array();		}		$readonly = isset($attribs['readonly']) && $attribs['readonly'] == 'readonly';		$disabled = isset($attribs['disabled']) && $attribs['disabled'] == 'disabled';		if (is_array($attribs))		{			$attribs = JArrayHelper::toString($attribs);		}		if (!$readonly && !$disabled)		{			// Load the calendar behavior			self::_('behavior.calendar');			self::_('behavior.tooltip');			// Only display the triggers once for each control.			if (!in_array($id, $done))			{				$document = JFactory::getDocument();				$document					->addScriptDeclaration(					'window.addEvent(\'domready\', function() {Calendar.setup({				// Id of the input field				inputField: "' . $id . '",				// Format of the input field				ifFormat: "' . $format . '",				// Trigger for the calendar (button ID)				button: "' . $id . '_img",				// Alignment (defaults to "Bl")				align: "Tl",				singleClick: true,				firstDay: ' . JFactory::getLanguage()->getFirstDay() . '				});});'				);				$done[] = $id;			}			return '<div class="input-append"><input type="text" title="' . (0 !== (int) $value ? self::_('date', $value, null, null) : '')				. '" name="' . $name . '" id="' . $id . '" value="' . htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '" ' . $attribs . ' />'				. '<button class="btn" id="' . $id . '_img"><i class="icon-calendar"></i></button></div>';		}		else		{			return '<input type="text" title="' . (0 !== (int) $value ? self::_('date', $value, null, null) : '')				. '" value="' . (0 !== (int) $value ? self::_('date', $value, 'Y-m-d H:i:s', null) : '') . '" ' . $attribs				. ' /><input type="hidden" name="' . $name . '" id="' . $id . '" value="' . htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '" />';		}	}	/**	 * Add a directory where JHtml should search for helpers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array  An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		// Force path to array		settype($path, 'array');		// Loop through the path directories		foreach ($path as $dir)		{			if (!empty($dir) && !in_array($dir, self::$includePaths))			{				jimport('joomla.filesystem.path');				array_unshift(self::$includePaths, JPath::clean($dir));			}		}		return self::$includePaths;	}	/**	 * Internal method to get a JavaScript object notation string from an array	 *	 * @param   array  $array  The array to convert to JavaScript object notation	 *	 * @return  string  JavaScript object notation representation of the array	 *	 * @since   12.2	 */	public static function getJSObject(array $array = array())	{		$elements = array();		foreach ($array as $k => $v)		{			// Don't encode either of these types			if (is_null($v) || is_resource($v))			{				continue;			}			// Safely encode as a Javascript string			$key = json_encode((string) $k);			if (is_bool($v))			{				$elements[] = $key . ': ' . ($v ? 'true' : 'false');			}			elseif (is_numeric($v))			{				$elements[] = $key . ': ' . ($v + 0);			}			elseif (is_string($v))			{				if (strpos($v, '\\') === 0)				{					// Items such as functions and JSON objects are prefixed with \, strip the prefix and don't encode them					$elements[] = $key . ': ' . substr($v, 1);				}				else				{					// The safest way to insert a string					$elements[] = $key . ': ' . json_encode((string) $v);				}			}			else			{				$elements[] = $key . ': ' . self::getJSObject(is_object($v) ? get_object_vars($v) : $v);			}		}		return '{' . implode(',', $elements) . '}';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$rssurl = $params->get('rssurl', '');$rssrtl = $params->get('rssrtl', 0);// Check if feed URL has been setif (empty ($rssurl)){	echo '<div>';	echo JText::_('MOD_FEED_ERR_NO_URL');	echo '</div>';	return;}$feed            = ModFeedHelper::getFeed($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_feed', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Keychain * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Keychain Class * * @package     Joomla.Platform * @subpackage  Keychain * @since       12.3 */class JKeychain extends JRegistry{	/**	 * @var    string  Method to use for encryption.	 * @since  12.3	 */	public $method = 'aes-128-cbc';	/**	 * @var    string  Initialisation vector for encryption method.	 * @since  12.3	 */	public $iv = "1234567890123456";	/**	 * Create a passphrase file	 *	 * @param   string  $passphrase            The passphrase to store in the passphrase file.	 * @param   string  $passphraseFile        Path to the passphrase file to create.	 * @param   string  $privateKeyFile        Path to the private key file to encrypt the passphrase file.	 * @param   string  $privateKeyPassphrase  The passphrase for the private key.	 *	 * @return  boolean  Result of writing the passphrase file to disk.	 *	 * @since   12.3	 * @throws  RuntimeException	 */	public function createPassphraseFile($passphrase, $passphraseFile, $privateKeyFile, $privateKeyPassphrase)	{		$privateKey = openssl_get_privatekey(file_get_contents($privateKeyFile), $privateKeyPassphrase);		if (!$privateKey)		{			throw new RuntimeException("Failed to load private key.");		}		$crypted = '';		if (!openssl_private_encrypt($passphrase, $crypted, $privateKey))		{			throw new RuntimeException("Failed to encrypt data using private key.");		}		return file_put_contents($passphraseFile, $crypted);	}	/**	 * Delete a registry value (very simple method)	 *	 * @param   string  $path  Registry Path (e.g. joomla.content.showauthor)	 *	 * @return  mixed  Value of old value or boolean false if operation failed	 *	 * @since   12.3	 */	public function deleteValue($path)	{		$result = null;		// Explode the registry path into an array		$nodes = explode('.', $path);		if ($nodes)		{			// Initialize the current node to be the registry root.			$node = $this->data;			// Traverse the registry to find the correct node for the result.			for ($i = 0, $n = count($nodes) - 1; $i < $n; $i++)			{			if (!isset($node->$nodes[$i]) && ($i != $n))			{			$node->$nodes[$i] = new stdClass;			}			$node = $node->$nodes[$i];			}			// Get the old value if exists so we can return it			$result = $node->$nodes[$i];			unset($node->$nodes[$i]);		}		return $result;	}	/**	 * Load a keychain file into this object.	 *	 * @param   string  $keychainFile    Path to the keychain file.	 * @param   string  $passphraseFile  The path to the passphrase file to decript the keychain.	 * @param   string  $publicKeyFile   The file containing the public key to decrypt the passphrase file.	 *	 * @return  boolean  Result of loading the object.	 *	 * @since   12.3	 * @throws  RuntimeException	 */	public function loadKeychain($keychainFile, $passphraseFile, $publicKeyFile)	{		if (!file_exists($keychainFile))		{			throw new RuntimeException('Attempting to load non-existent keychain file');		}		$passphrase = $this->getPassphraseFromFile($passphraseFile, $publicKeyFile);		$cleartext = openssl_decrypt(file_get_contents($keychainFile), $this->method, $passphrase, true, $this->iv);		if ($cleartext === false)		{			throw new RuntimeException("Failed to decrypt keychain file");		}		return $this->loadObject(json_decode($cleartext));	}	/**	 * Save this keychain to a file.	 *	 * @param   string  $keychainFile    The path to the keychain file.	 * @param   string  $passphraseFile  The path to the passphrase file to encrypt the keychain.	 * @param   string  $publicKeyFile   The file containing the public key to decrypt the passphrase file.	 *	 * @return  boolean  Result of storing the file.	 *	 * @since   12.3	 * @throws  RuntimeException	 */	public function saveKeychain($keychainFile, $passphraseFile, $publicKeyFile)	{		$passphrase = $this->getPassphraseFromFile($passphraseFile, $publicKeyFile);		$data = $this->toString('JSON');		$encrypted = @openssl_encrypt($data, $this->method, $passphrase, true, $this->iv);		if ($encrypted === false)		{			throw new RuntimeException('Unable to encrypt keychain');		}		return file_put_contents($keychainFile, $encrypted);	}	/**	 * Get the passphrase for this keychain	 *	 * @param   string  $passphraseFile  The file containing the passphrase to encrypt and decrypt.	 * @param   string  $publicKeyFile   The file containing the public key to decrypt the passphrase file.	 *	 * @return  string  The passphrase in from passphraseFile	 *	 * @since   12.3	 * @throws  RuntimeException	 */	protected function getPassphraseFromFile($passphraseFile, $publicKeyFile)	{		if (!file_exists($publicKeyFile))		{			throw new RuntimeException('Missing public key file');		}		$publicKey = openssl_get_publickey(file_get_contents($publicKeyFile));		if (!$publicKey)		{			throw new RuntimeException("Failed to load public key.");		}		if (!file_exists($passphraseFile))		{			throw new RuntimeException('Missing passphrase file');		}		$passphrase = '';		if (!openssl_public_decrypt(file_get_contents($passphraseFile), $passphrase, $publicKey))		{			throw new RuntimeException('Failed to decrypt passphrase file');		}		return $passphrase;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of search terms. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.6 */class SearchControllerSearches extends JControllerLegacy{	/**	 * Method to reset the seach log table.	 *	 * @return  boolean	 */	public function reset()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Searches');		if (!$model->reset())		{			JError::raiseWarning(500, $model->getError());		}		$this->setRedirect('index.php?option=com_search&view=searches');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(WeblinksHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_weblinks.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_num_links_cat') == 1) :?>			<dl class="weblink-count"><dt>				<?php echo JText::_('COM_WEBLINKS_NUM'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * XCache cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @link        http://xcache.lighttpd.net/ * @since       11.1 */class JCacheStorageXcache extends JCacheStorage{	/**	 * Get cached data by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean false on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		$cache_content = xcache_get($cache_id);		if ($cache_content === null)		{			return false;		}		return $cache_content;	}	/**	 * Get all cached data	 *	 * This requires the php.ini setting xcache.admin.enable_auth = Off.	 *	 * @return  array  data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$allinfo = xcache_list(XC_TYPE_VAR, 0);		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		$data = array();		foreach ($keys as $key)		{			$namearr = explode('-', $key['name']);			if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')			{				$group = $namearr[2];				if (!isset($data[$group]))				{					$item = new JCacheStorageHelper($group);				}				else				{					$item = $data[$group];				}				$item->updateSize($key['size'] / 1024);				$data[$group] = $item;			}		}		return $data;	}	/**	 * Store the data by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		$store = xcache_set($cache_id, $data, $this->_lifetime);		return $store;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		if (!xcache_isset($cache_id))		{			return true;		}		return xcache_unset($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * This requires the php.ini setting xcache.admin.enable_auth = Off.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 * group mode  : cleans all cache in the group	 * notgroup mode  : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		$allinfo = xcache_list(XC_TYPE_VAR, 0);		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['name'], $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				xcache_unset($key['name']);			}		}		return true;	}	/**	 * Garbage collect expired cache data	 *	 * This is a dummy, since xcache has built in garbage collector, turn it	 * on in php.ini by changing default xcache.gc_interval setting from	 * 0 to 3600 (=1 hour)	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		/*		$now = time();		$cachecount = xcache_count(XC_TYPE_VAR);			for ($i = 0; $i < $cachecount; $i ++) {				$allinfo  = xcache_list(XC_TYPE_VAR, $i);				$keys = $allinfo ['cache_list'];				foreach($keys as $key) {					if (strstr($key['name'], $this->_hash)) {						if (($key['ctime'] + $this->_lifetime ) < $this->_now) xcache_unset($key['name']);					}				}			}		 */		return true;	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (extension_loaded('xcache'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users mail controller. * * @package     Joomla.Administrator * @subpackage  com_users */class UsersControllerMail extends JControllerLegacy{	public function send()	{		// Check for request forgeries.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Mail');		if ($model->send())		{			$type = 'message';		}		else		{			$type = 'error';		}		$msg = $model->getError();		$this->setredirect('index.php?option=com_users&view=mail', $msg, $type);	}	public function cancel()	{		// Check for request forgeries.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$this->setRedirect('index.php');	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Exception * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Exception object. * * @package     Joomla.Legacy * @subpackage  Exception * @since       11.1 * @deprecated  12.1 */class JException extends Exception{	/**	 * @var    string  Error level.	 * @since  11.1	 */	protected $level = null;	/**	 * @var    string  Error code.	 * @since  11.1	 */	protected $code = null;	/**	 * @var    string  Error message.	 * @since  11.1	 */	protected $message = null;	/**	 * Additional info about the error relevant to the developer,	 * for example, if a database connect fails, the dsn used	 *	 * @var    string	 * @since  11.1	 */	protected $info = '';	/**	 * Name of the file the error occurred in [Available if backtrace is enabled]	 *	 * @var    string	 * @since  11.1	 */	protected $file = null;	/**	 * Line number the error occurred in [Available if backtrace is enabled]	 *	 * @var    int	 * @since  11.1	 */	protected $line = 0;	/**	 * Name of the method the error occurred in [Available if backtrace is enabled]	 *	 * @var    string	 * @since  11.1	 */	protected $function = null;	/**	 * Name of the class the error occurred in [Available if backtrace is enabled]	 *	 * @var    string	 * @since  11.1	 */	protected $class = null;	/**	 * @var    string  Error type.	 * @since  11.1	 */	protected $type = null;	/**	 * Arguments recieved by the method the error occurred in [Available if backtrace is enabled]	 *	 * @var    array	 * @since  11.1	 */	protected $args = array();	/**	 * @var    mixed  Backtrace information.	 * @since  11.1	 */	protected $backtrace = null;	/**	 * Constructor	 * - used to set up the error with all needed error details.	 *	 * @param   string   $msg        The error message	 * @param   string   $code       The error code from the application	 * @param   integer  $level      The error level (use the PHP constants E_ALL, E_NOTICE etc.).	 * @param   string   $info       Optional: The additional error information.	 * @param   boolean  $backtrace  True if backtrace information is to be collected	 *	 * @since   11.1	 *	 * @deprecated  12.1	 */	public function __construct($msg, $code = 0, $level = null, $info = null, $backtrace = false)	{		JLog::add('JException is deprecated.', JLog::WARNING, 'deprecated');		$this->level = $level;		$this->code = $code;		$this->message = $msg;		if ($info != null)		{			$this->info = $info;		}		if ($backtrace && function_exists('debug_backtrace'))		{			$this->backtrace = debug_backtrace();			for ($i = count($this->backtrace) - 1; $i >= 0; --$i)			{				++$i;				if (isset($this->backtrace[$i]['file']))				{					$this->file = $this->backtrace[$i]['file'];				}				if (isset($this->backtrace[$i]['line']))				{					$this->line = $this->backtrace[$i]['line'];				}				if (isset($this->backtrace[$i]['class']))				{					$this->class = $this->backtrace[$i]['class'];				}				if (isset($this->backtrace[$i]['function']))				{					$this->function = $this->backtrace[$i]['function'];				}				if (isset($this->backtrace[$i]['type']))				{					$this->type = $this->backtrace[$i]['type'];				}				$this->args = false;				if (isset($this->backtrace[$i]['args']))				{					$this->args = $this->backtrace[$i]['args'];				}				break;			}		}		// Store exception for debugging purposes!		JError::addToStack($this);		parent::__construct($msg, (int) $code);	}	/**	 * Returns to error message	 *	 * @return  string  Error message	 *	 * @since   11.1	 *	 * @deprecated  12.1	 */	public function __toString()	{		JLog::add('JException::__toString is deprecated.', JLog::WARNING, 'deprecated');		return $this->message;	}	/**	 * Returns to error message	 *	 * @return  string   Error message	 *	 * @since   11.1	 * @deprecated    12.1	 */	public function toString()	{		JLog::add('JException::toString is deprecated.', JLog::WARNING, 'deprecated');		return (string) $this;	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $property  The name of the property	 * @param   mixed   $default   The default value	 *	 * @return  mixed  The value of the property or null	 *	 * @deprecated  12.1	 * @see         getProperties()	 * @since       11.1	 */	public function get($property, $default = null)	{		JLog::add('JException::get is deprecated.', JLog::WARNING, 'deprecated');		if (isset($this->$property))		{			return $this->$property;		}		return $default;	}	/**	 * Returns an associative array of object properties	 *	 * @param   boolean  $public  If true, returns only the public properties	 *	 * @return  array  Object properties	 *	 * @deprecated    12.1	 * @see     get()	 * @since   11.1	 */	public function getProperties($public = true)	{		JLog::add('JException::getProperties is deprecated.', JLog::WARNING, 'deprecated');		$vars = get_object_vars($this);		if ($public)		{			foreach ($vars as $key => $value)			{				if ('_' == substr($key, 0, 1))				{					unset($vars[$key]);				}			}		}		return $vars;	}	/**	 * Get the most recent error message	 *	 * @param   integer  $i         Option error index	 * @param   boolean  $toString  Indicates if JError objects should return their error message	 *	 * @return  string  Error message	 *	 * @since   11.1	 *	 * @deprecated  12.1	 */	public function getError($i = null, $toString = true)	{		JLog::add('JException::getError is deprecated.', JLog::WARNING, 'deprecated');		// Find the error		if ($i === null)		{			// Default, return the last message			$error = end($this->_errors);		}		elseif (!array_key_exists($i, $this->_errors))		{			// If $i has been specified but does not exist, return false			return false;		}		else		{			$error = $this->_errors[$i];		}		// Check if only the string is requested		if ($error instanceof Exception && $toString)		{			return (string) $error;		}		return $error;	}	/**	 * Return all errors, if any	 *	 * @return  array  Array of error messages or JErrors	 *	 * @since   11.1	 *	 * @deprecated  12.1	 */	public function getErrors()	{		JLog::add('JException::getErrors is deprecated.', JLog::WARNING, 'deprecated');		return $this->_errors;	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $property  The name of the property	 * @param   mixed   $value     The value of the property to set	 *	 * @return  mixed  Previous value of the property	 *	 * @deprecated  12.1	 * @see         setProperties()	 * @since       11.1	 */	public function set($property, $value = null)	{		JLog::add('JException::set is deprecated.', JLog::WARNING, 'deprecated');		$previous = isset($this->$property) ? $this->$property : null;		$this->$property = $value;		return $previous;	}	/**	 * Set the object properties based on a named array/hash	 *	 * @param   mixed  $properties  Either and associative array or another object	 *	 * @return  boolean	 *	 * @deprecated  12.1	 * @see         set()	 * @since       11.1	 */	public function setProperties($properties)	{		JLog::add('JException::setProperties is deprecated.', JLog::WARNING, 'deprecated');		// Cast to an array		$properties = (array) $properties;		if (is_array($properties))		{			foreach ($properties as $k => $v)			{				$this->$k = $v;			}			return true;		}		return false;	}	/**	 * Add an error message	 *	 * @param   string  $error  Error message	 *	 * @return  void	 *	 * @since   11.1	 *	 * @deprecated  12.1	 */	public function setError($error)	{		JLog::add('JException::setErrors is deprecated.', JLog::WARNING, 'deprecated');		array_push($this->_errors, $error);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersViewRegistration extends JViewLegacy{	protected $data;	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	The template file to include	 * @since   1.6	 */	public function display($tpl = null)	{		// Get the view data.		$this->data		= $this->get('Data');		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->get('params');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document.	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_REGISTRATION'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * HTML Parser class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerParserHtml extends FinderIndexerParser{	/**	 * Method to process HTML input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	protected function process($input)	{		// Strip invalid UTF-8 characters.		$input = iconv("utf-8", "utf-8//IGNORE", $input);		// Strip all script tags.		$input = preg_replace('#<script[^>]*>.*?</script>#si', ' ', $input);		// Deal with spacing issues in the input.		$input = str_replace('>', '> ', $input);		$input = str_replace(array('&nbsp;', '&#160;'), ' ', $input);		$input = trim(preg_replace('#\s+#u', ' ', $input));		// Strip the tags from the input and decode entities.		$input = strip_tags($input);		$input = html_entity_decode($input, ENT_QUOTES, 'UTF-8');		$input = trim(preg_replace('#\s+#u', ' ', $input));		return $input;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Languages component * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesViewLanguage extends JViewLegacy{	public $item;	public $form;	public $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->item = $this->get('Item');		$this->form = $this->get('Form');		$this->state = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since  1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT . '/helpers/languages.php';		JFactory::getApplication()->input->set('hidemainmenu', 1);		$isNew = empty($this->item->lang_id);		$canDo = LanguagesHelper::getActions();		JToolbarHelper::title(JText::_($isNew ? 'COM_LANGUAGES_VIEW_LANGUAGE_EDIT_NEW_TITLE' : 'COM_LANGUAGES_VIEW_LANGUAGE_EDIT_EDIT_TITLE'), 'langmanager.png');		// If a new item, can save.		if ($isNew && $canDo->get('core.create'))		{			JToolbarHelper::save('language.save');		}		//If an existing item, allow to Apply and Save.		if (!$isNew && $canDo->get('core.edit'))		{			JToolbarHelper::apply('language.apply');			JToolbarHelper::save('language.save');		}		// If an existing item, can save to a copy only if we have create rights.		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('language.save2new');		}		if ($isNew)		{			JToolbarHelper::cancel('language.cancel');		}		else		{			JToolbarHelper::cancel('language.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_EDIT');		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');?><div class="contact<?php echo $this->pageclass_sfx?>">		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid);?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<h2>			<span class="contact-name"><?php echo $this->contact->name; ?></span>		</h2>	<?php endif;  ?>	<div class="encyclopedia_col1">		<?php if ($this->contact->image ) : ?>			<div class="contact-image">			<?php // We are going to use the contact address field for the main image caption.				// If we have a caption load the caption behavior. ?>			<?php if ($this->contact->address)			{				JHtml::_('behavior.caption');			}?>				<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle', 'class' => 'caption', 'title' => $this->contact->address)); ?>			</div>		<?php endif; ?>	</div>	<div class="encyclopedia_col2">		<?php // We are going to use some of the standard content fields in non standard ways. ?>				<div class="contact-miscinfo">						<div class="contact-misc">							<?php echo $this->contact->misc; ?>						</div>					</div>		<?php //Let's use position for the scientific name. ?>		<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>			<p class="contact-position"><?php echo $this->contact->con_position; ?></p>		<?php endif; ?>		<?php //Let's use state to put the family name.  ?>		<?php if ($this->contact->state && $this->params->get('show_state')) : ?>			<p class="contact-state"><?php echo $this->contact->state; ?></p>		<?php endif; ?>		<?php // Let's use contry to list the main countries it grows in. '?>		<?php if ($this->contact->country && $this->params->get('show_country')) : ?>			<p class="contact-country"><?php echo $this->contact->country; ?></p>		<?php endif; ?>	</div><div class="clr"> </div>	<?php  if ($this->params->get('presentation_style') != 'plain'):?>		<?php  echo  JHtml::_($this->params->get('presentation_style').'.start', 'contact-slider'); ?>	<?php endif ?><div class="encyclopedia_links"><?php echo $this->loadTemplate('links'); ?></div>	<?php if ($this->params->get('presentation_style') != 'plain'):?>			<?php echo JHtml::_($this->params->get('presentation_style').'.end'); ?>			<?php endif; ?></div>
