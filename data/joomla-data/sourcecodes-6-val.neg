<?php/** * @package     Joomla.Site * @subpackage  mod_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('stylesheet', 'mod_languages/template.css', array(), true);?><div class="mod-languages<?php echo $moduleclass_sfx ?>"><?php if ($headerText) : ?>	<div class="pretext"><p><?php echo $headerText; ?></p></div><?php endif; ?><?php if ($params->get('dropdown', 1)) : ?>	<form name="lang" method="post" action="<?php echo htmlspecialchars(JURI::current()); ?>">	<select class="inputbox" onchange="document.location.replace(this.value);" >	<?php foreach ($list as $language) : ?>		<option dir=<?php echo JLanguage::getInstance($language->lang_code)->isRTL() ? '"rtl"' : '"ltr"'?> value="<?php echo $language->link;?>" <?php echo $language->active ? 'selected="selected"' : ''?>>		<?php echo $language->title_native;?></option>	<?php endforeach; ?>	</select>	</form><?php else : ?>	<ul class="<?php echo $params->get('inline', 1) ? 'lang-inline' : 'lang-block';?>">	<?php foreach ($list as $language) : ?>		<?php if ($params->get('show_active', 0) || !$language->active):?>			<li class="<?php echo $language->active ? 'lang-active' : '';?>" dir="<?php echo JLanguage::getInstance($language->lang_code)->isRTL() ? 'rtl' : 'ltr' ?>">			<a href="<?php echo $language->link;?>">			<?php if ($params->get('image', 1)):?>				<?php echo JHtml::_('image', 'mod_languages/' . $language->image . '.gif', $language->title_native, array('title' => $language->title_native), true);?>			<?php else : ?>				<?php echo $params->get('full_name', 1) ? $language->title_native : strtoupper($language->sef);?>			<?php endif; ?>			</a>			</li>		<?php endif;?>	<?php endforeach;?>	</ul><?php endif; ?><?php if ($footerText) : ?>	<div class="posttext"><p><?php echo $footerText; ?></p></div><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.language.help');?><form action="<?php echo JRoute::_('index.php?option=com_admin&amp;view=help'); ?>" method="post" name="adminForm" id="adminForm"><div class="width-40 fltlft">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_ADMIN_SEARCH'); ?></legend>		<input class="textarea" type="hidden" name="option" value="com_admin" />		<input type="text" name="helpsearch" size="40"  value="<?php echo $this->escape($this->help_search);?>" class="inputbox" />		<input type="submit" value="<?php echo JText::_('COM_ADMIN_GO'); ?>" class="button" />		<input type="button" value="<?php echo JText::_('COM_ADMIN_CLEAR_RESULTS'); ?>" class="button" onclick="f=document.adminForm;f.helpsearch.value='';f.submit()" />	</fieldset></div><div class="width-50 fltrt helplinks">	<ul class="helpmenu">		<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_GLOSSARY'), JText::_('COM_ADMIN_GLOSSARY'), array('target' => 'helpFrame')) ?></li>		<li><?php echo JHtml::_('link', 'http://www.gnu.org/licenses/gpl-2.0.html', JText::_('COM_ADMIN_LICENSE'), array('target' => 'helpFrame')) ?></li>		<li><?php echo JHtml::_('link', $this->latest_version_check, JText::_('COM_ADMIN_LATEST_VERSION_CHECK'), array('target' => 'helpFrame')) ?></li>		<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_START_HERE'), JText::_('COM_ADMIN_START_HERE'), array('target' => 'helpFrame')) ?></li>	</ul></div><div class="clr"> </div>	<div id="treecellhelp" class="width-20 fltleft">		<fieldset class="adminform whitebg" title="<?php echo JText::_('COM_ADMIN_ALPHABETICAL_INDEX'); ?>">			<legend><?php echo JText::_('COM_ADMIN_ALPHABETICAL_INDEX'); ?></legend>			<div class="helpIndex">				<ul class="subext">					<?php foreach ($this->toc as $k => $v):?>						<li>						    <?php $url = JHelp::createUrl('JHELP_'.strtoupper($k)); ?>							<?php echo JHtml::_('link', $url, $v, array('target' => 'helpFrame'));?>						</li>					<?php endforeach;?>				</ul>			</div>		</fieldset>	</div>	<div id="datacellhelp" class="width-80 fltrt">		<fieldset title="<?php echo JText::_('COM_ADMIN_VIEW'); ?>">			<legend>				<?php echo JText::_('COM_ADMIN_VIEW'); ?>			</legend>				<iframe name="helpFrame" src="<?php echo $this->page;?>" class="helpFrame"></iframe>		</fieldset>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class for creating HTML Grids * * @static * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class JHtmlRedirect{	/**	 * @param   int $value	The state value.	 * @param   int $i	 * @param   string  An optional prefix for the task.	 * @param   boolean		An optional setting for access control on the action.	 */	public static function published($value = 0, $i, $canChange = true)	{		// Array of image, task, title, action		$states	= array(			1	=> array('tick.png',		'links.unpublish',	'JENABLED',	'COM_REDIRECT_DISABLE_LINK'),			0	=> array('publish_x.png',	'links.publish',		'JDISABLED',	'COM_REDIRECT_ENABLE_LINK'),			2	=> array('disabled.png',	'links.unpublish',	'JARCHIVED',	'JUNARCHIVE'),			-2	=> array('trash.png',		'links.publish',		'JTRASHED',	'COM_REDIRECT_ENABLE_LINK'),		);		$state	= JArrayHelper::getValue($states, (int) $value, $states[0]);		$html	= JHtml::_('image', 'admin/'.$state[0], JText::_($state[2]), null, true);		if ($canChange)		{			$html	= '<a href="#" onclick="return listItemTask(\'cb'.$i.'\',\''.$state[1].'\')" title="'.JText::_($state[3]).'">'					. $html.'</a>';		}		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Stemmer base class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexerStemmer{	/**	 * An internal cache of stemmed tokens.	 *	 * @var    array	 * @since  2.5	 */	public $cache = array();	/**	 * Method to get a stemmer, creating it if necessary.	 *	 * @param   string  $adapter  The type of stemmer to load.	 *	 * @return  FinderIndexerStemmer  A FinderIndexerStemmer instance.	 *	 * @since   2.5	 * @throws  Exception on invalid stemmer.	 */	public static function getInstance($adapter)	{		static $instances;		// Only create one stemmer for each adapter.		if (isset($instances[$adapter]))		{			return $instances[$adapter];		}		// Create an array of instances if necessary.		if (!is_array($instances))		{			$instances = array();		}		// Setup the adapter for the stemmer.		$adapter = JFilterInput::getInstance()->clean($adapter, 'cmd');		$path = __DIR__ . '/stemmer/' . $adapter . '.php';		$class = 'FinderIndexerStemmer' . ucfirst($adapter);		// Check if a stemmer exists for the adapter.		if (file_exists($path))		{			// Instantiate the stemmer.			include_once $path;			$instances[$adapter] = new $class;		}		else		{			// Throw invalid adapter exception.			throw new Exception(JText::sprintf('COM_FINDER_INDEXER_INVALID_STEMMER', $adapter));		}		return $instances[$adapter];	}	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	abstract public function stem($token, $lang);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Checkin component * * @package     Joomla.Administrator * @subpackage  com_checkin * @since       1.0 */class CheckinViewCheckin extends JViewLegacy{	protected $tables;	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_CHECKIN_GLOBAL_CHECK_IN'), 'checkin.png');		if (JFactory::getUser()->authorise('core.admin', 'com_checkin'))		{			JToolbarHelper::custom('checkin', 'checkin.png', 'checkin_f2.png', 'JTOOLBAR_CHECKIN', true);			JToolbarHelper::divider();			JToolbarHelper::preferences('com_checkin');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_SITE_MAINTENANCE_GLOBAL_CHECK-IN');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_img, &$params));?><li class="imgOutline thumbnail height-80 width-80 center">	<a class="img-preview" href="javascript:ImageManager.populateFields('<?php echo $this->_tmp_img->path_relative; ?>')" title="<?php echo $this->_tmp_img->name; ?>" >		<div class="height-50">			<?php echo JHtml::_('image', $this->baseURL . '/' . $this->_tmp_img->path_relative, JText::sprintf('COM_MEDIA_IMAGE_TITLE', $this->_tmp_img->title, JHtml::_('number.bytes', $this->_tmp_img->size)), array('width' => $this->_tmp_img->width_60, 'height' => $this->_tmp_img->height_60)); ?>		</div>		<div class="small">			<?php echo JHtml::_('string.truncate', $this->_tmp_img->name, 10, false); ?>		</div>	</a></li><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlusComments extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * List all of the comments for an activity.	 *	 * @param   string   $activityId  The ID of the activity to get comments for.	 * @param   string   $fields      Used to specify the fields you want returned.	 * @param   integer  $max         The maximum number of people to include in the response, used for paging.	 * @param   string   $order       The order in which to sort the list of comments. Acceptable values are "ascending" and "descending".	 * @param   string   $token       The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								  parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 * @param   string   $alt         Specifies an alternative representation type. Acceptable values are: "json" - Use JSON format (default)	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function listComments($activityId, $fields = null, $max = 20, $order = null, $token = null, $alt = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities/' . $activityId . '/comments';			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if max is specified.			if ($max != 20)			{				$url .= (strpos($url, '?') === false) ? '?maxResults=' : '&maxResults=';				$url .= $max;			}			// Check if order is specified.			if ($order)			{				$url .= (strpos($url, '?') === false) ? '?orderBy=' : '&orderBy=';				$url .= $order;			}			// Check of token is specified.			if ($token)			{				$url .= (strpos($url, '?') === false) ? '?pageToken=' : '&pageToken=';				$url .= $token;			}			// Check if alt is specified.			if ($alt)			{				$url .= (strpos($url, '?') === false) ? '?alt=' : '&alt=';				$url .= $alt;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Get a comment.	 *	 * @param   string  $id      The ID of the comment to get.	 * @param   string  $fields  Used to specify the fields you want returned.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function getComment($id, $fields = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'comments/' . $id;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Finder module helper. * * @package     Joomla.Site * @subpackage  mod_finder * @since       2.5 */class ModFinderHelper{	/**	 * Method to get hidden input fields for a get form so that control variables	 * are not lost upon form submission.	 *	 * @param   string  $route  The route to the page. [optional]	 *	 * @return  string  A string of hidden input form fields	 *	 * @since   2.5	 */	public static function getGetFields($route = null)	{		$fields = null;		$uri = JUri::getInstance(JRoute::_($route));		$uri->delVar('q');		$elements = $uri->getQuery(true);		// Create hidden input elements for each part of the URI.		// Add the current menu id if it doesn't have one		$needId = true;		foreach ($elements as $n => $v)		{			$fields .= '<input type="hidden" name="' . $n . '" value="' . $v . '" />';			if ($n == 'Itemid')			{				$needId = false;			}		}		if ($needId)		{			$fields .= '<input type="hidden" name="Itemid" value="' . JFactory::getApplication()->input->get('Itemid', '0', 'int') . '" />';		}		return $fields;	}	/**	 * Get Smart Search query object.	 *	 * @param   JRegistry object containing module parameters.	 *	 * @return  FinderIndexerQuery object	 *	 * @since   2.5	 */	public static function getQuery($params)	{		$app = JFactory::getApplication();		$input = $app->input;		$request = $input->request;		$filter = JFilterInput::getInstance();		// Get the static taxonomy filters.		$options = array();		$options['filter'] = ($request->get('f', 0, 'int') != 0) ? $request->get('f', '', 'int') : $params->get('searchfilter');		$options['filter'] = $filter->clean($options['filter'], 'int');		// Get the dynamic taxonomy filters.		$options['filters'] = $request->get('t', '', 'array');		$options['filters'] = $filter->clean($options['filters'], 'array');		JArrayHelper::toInteger($options['filters']);		// Instantiate a query object.		$query = new FinderIndexerQuery($options);		return $query;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Form Rule class for the prefix DB. * * @package  Joomla.Installation * @since    1.7 */class JFormRulePrefix extends JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  1.7	 */	protected $regex = '^[a-z][a-z0-9]*_$';	/**	 * The regular expression modifiers to use when testing a form field value.	 *	 * @var    string	 * @since  1.7	 */	protected $modifiers = 'i';}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="parent-category-name">				<?php $title = $this->escape($displayData['item']->parent_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($displayData['item']->parent_slug)).'">'.$title.'</a>';?>				<?php if ($displayData['params']->get('link_parent_category') && !empty($displayData['item']->parent_slug)) : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>				<?php endif; ?>			</dd>
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to make an image appear "sketchy". * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterSketchy extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the sketchy filter.		imagefilter($this->handle, IMG_FILTER_MEAN_REMOVAL);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();JHtml::_('script', 'jui/treeselectmenu.jquery.min.js', false, true);$script = "	jQuery(document).ready(function()	{		menuHide(jQuery('#jform_assignment').val());		jQuery('#jform_assignment').change(function()		{			menuHide(jQuery(this).val());		})	});	function menuHide(val)	{		if (val == 0 || val == '-')		{			jQuery('#menuselect-group').hide();		}		else		{			jQuery('#menuselect-group').show();		}	}";// Add the script to the document headJFactory::getDocument()->addScriptDeclaration($script);?><div class="control-group">	<label id="jform_menus-lbl" class="control-label" for="jform_menus"><?php echo JText::_('COM_MODULES_MODULE_ASSIGN'); ?></label>	<div id="jform_menus" class="controls">		<select name="jform[assignment]" id="jform_assignment">			<?php echo JHtml::_('select.options', ModulesHelper::getAssignmentOptions($this->item->client_id), 'value', 'text', $this->item->assignment, true); ?>		</select>	</div></div><div id="menuselect-group" class="control-group">	<label id="jform_menuselect-lbl" class="control-label" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label>	<div id="jform_menuselect" class="controls">		<?php if (!empty($menuTypes)) : ?>		<?php $id = 'jform_menuselect'; ?>		<div class="well well-small">			<div class="form-inline">				<span class="small"><?php echo JText::_('JSELECT'); ?>:					<a id="treeCheckAll" href="javascript://"><?php echo JText::_('JALL'); ?></a>,					<a id="treeUncheckAll" href="javascript://"><?php echo JText::_('JNONE'); ?></a>				</span>				<span class="width-20">|</span>				<span class="small"><?php echo JText::_('COM_MODULES_EXPAND'); ?>:					<a id="treeExpandAll" href="javascript://"><?php echo JText::_('JALL'); ?></a>,					<a id="treeCollapseAll" href="javascript://"><?php echo JText::_('JNONE'); ?></a>				</span>				<input type="text" id="treeselectfilter" name="treeselectfilter" class="input-medium search-query pull-right" size="16"					autocomplete="off" placeholder="<?php echo JText::_('JSEARCH_FILTER'); ?>" aria-invalid="false" tabindex="-1">			</div>			<div class="clearfix"></div>			<hr class="hr-condensed" />			<ul class="treeselect">				<?php foreach ($menuTypes as &$type) : ?>				<?php if (count($type->links)) : ?>					<?php $prevlevel = 0; ?>					<li>						<div class="treeselect-item pull-left">							<label class="pull-left nav-header"><?php echo $type->title; ?></label></div>					<?php foreach ($type->links as $i => $link) : ?>						<?php						if ($prevlevel < $link->level)						{							echo '<ul class="treeselect-sub">';						} elseif ($prevlevel > $link->level)						{							echo str_repeat('</li></ul>', $prevlevel - $link->level);						} else {							echo '</li>';						}						$selected = 0;						if ($this->item->assignment == 0)						{							$selected = 1;						} elseif ($this->item->assignment < 0)						{							$selected = in_array(-$link->value, $this->item->assigned);						} elseif ($this->item->assignment > 0)						{							$selected = in_array($link->value, $this->item->assigned);						}						?>							<li>								<div class="treeselect-item pull-left">									<input type="checkbox" class="pull-left" name="jform[assigned][]" id="<?php echo $id . $link->value; ?>" value="<?php echo (int) $link->value; ?>"<?php echo $selected ? ' checked="checked"' : ''; ?> />									<label for="<?php echo $id . $link->value; ?>" class="pull-left"><?php echo $link->text; ?></label>								</div>						<?php						if (!isset($type->links[$i + 1]))						{							echo str_repeat('</li></ul>', $link->level);						}						$prevlevel = $link->level;						?>						<?php endforeach; ?>					</li>					<?php endif; ?>				<?php endforeach; ?>			</ul>			<div style="display:none;" id="treeselectmenu">				<div class="pull-left nav-hover treeselect-menu">					<div class="btn-group">						<a href="#" data-toggle="dropdown" class="dropdown-toggle btn btn-micro">							<span class="caret"></span>						</a>						<ul class="dropdown-menu">							<li class="nav-header"><?php echo JText::_('COM_MODULES_SUBITEMS'); ?></li>							<li class="divider"></li>							<li class=""><a class="checkall" href="javascript://"><i class="icon-checkbox"></i> <?php echo JText::_('JSELECT'); ?></a>							</li>							<li><a class="uncheckall" href="javascript://"><i class="icon-checkbox-unchecked"></i> <?php echo JText::_('COM_MODULES_DESELECT'); ?></a>							</li>							<div class="treeselect-menu-expand">							<li class="divider"></li>							<li><a class="expandall" href="javascript://"><i class="icon-plus"></i> <?php echo JText::_('COM_MODULES_EXPAND'); ?></a></li>							<li><a class="collapseall" href="javascript://"><i class="icon-minus"></i> <?php echo JText::_('COM_MODULES_COLLAPSE'); ?></a></li>							</div>						</ul>					</div>				</div>			</div>		</div>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');?><section class="blog-featured<?php echo $this->pageclass_sfx;?>"><?php if ( $this->params->get('show_page_heading') != 0) : ?>	<h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1><?php endif; ?><?php $leadingcount = 0; ?><?php if (!empty($this->lead_items)) : ?><div class="items-leading">	<?php foreach ($this->lead_items as &$item) : ?>		<article class="leading-<?php echo $leadingcount; ?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?>">			<?php				$this->item = &$item;				echo $this->loadTemplate('item');			?>		</article>		<?php			$leadingcount++;		?>	<?php endforeach; ?></div><?php endif; ?><?php	$introcount = (count($this->intro_items));	$counter = 0;?><?php if (!empty($this->intro_items)) : ?>	<?php foreach ($this->intro_items as $key => &$item) : ?>	<?php		$key = ($key - $leadingcount) + 1;		$rowcount = (((int) $key - 1) % (int) $this->columns) + 1;		$row = $counter / $this->columns;		if ($rowcount == 1) : ?>			<div class="items-row cols-<?php echo (int) $this->columns;?> <?php echo 'row-'.$row; ?>">		<?php endif; ?>		<article class="item column-<?php echo $rowcount;?><?php echo $item->state == 0 ? ' system-unpublished"' : null; ?>">			<?php					$this->item = &$item;					echo $this->loadTemplate('item');			?>		</article>		<?php $counter++; ?>			<?php if (($rowcount == $this->columns) or ($counter == $introcount)) : ?>				<span class="row-separator"></span>				</div>			<?php endif; ?>	<?php endforeach; ?><?php endif; ?><?php if (!empty($this->link_items)) : ?>	<div class="items-more">	<?php echo $this->loadTemplate('links'); ?>	</div><?php endif; ?><?php if ($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2 && $this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>	</div><?php endif; ?></section>
<?php/** * Generic_Sniffs_Formatting_NoSpaceAfterCastSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: NoSpaceAfterCastSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Ensures there is no space after cast tokens. * * Example: * <b class="bad">(int) $foo;</b> * <b class="good">(int)$foo;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SpaceAfterCastSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns an array of tokens this test wants to listen for.	 *	 * @return array	 */	public function register()	{		return PHP_CodeSniffer_Tokens::$castTokens;	}//function	/**	 * Processes this test, when one of its tokens is encountered.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.	 * @param integer                  $stackPtr  The position of the current token in	 *                                        the stack passed in $tokens.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		if ($tokens[($stackPtr + 1)]['code'] === T_WHITESPACE)		{			$content       = $tokens[($stackPtr + 1)]['content'];			$contentLength = strlen($content);			if ($contentLength !== 1)			{				$error = 'Cast statements must be followed by a single space; expected 1 space but found %s';				$data  = array($contentLength);				$phpcsFile->addError($error, $stackPtr, 'IncorrectSingle', $data);			}		}		else		{			$error = 'Cast statements must be followed by a single space; expected "%s" but found "%s"';			$data  = array(					$tokens[$stackPtr]['content'].' '.$tokens[($stackPtr + 1)]['content'],					$tokens[$stackPtr]['content'].$tokens[($stackPtr + 1)]['content'],			);			$phpcsFile->addError($error, $stackPtr, 'Incorrect', $data);		}// 		if ($tokens[($stackPtr + 1)]['code'] === T_WHITESPACE)// 		{// 			$error = 'A cast statement must not be followed by a space';// 			$phpcsFile->addError($error, $stackPtr, 'SpaceFound');// 		}	}//function}//class
<?php/** * @package     Joomla.Site * @subpackage  mod_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_banners * * @package     Joomla.Site * @subpackage  mod_banners * @since       1.5 */class ModBannersHelper{	public static function &getList(&$params)	{		JModelLegacy::addIncludePath(JPATH_ROOT.'/components/com_banners/models', 'BannersModel');		$document	= JFactory::getDocument();		$app		= JFactory::getApplication();		$keywords	= explode(',', $document->getMetaData('keywords'));		$model = JModelLegacy::getInstance('Banners', 'BannersModel', array('ignore_request' => true));		$model->setState('filter.client_id', (int) $params->get('cid'));		$model->setState('filter.category_id', $params->get('catid', array()));		$model->setState('list.limit', (int) $params->get('count', 1));		$model->setState('list.start', 0);		$model->setState('filter.ordering', $params->get('ordering'));		$model->setState('filter.tag_search', $params->get('tag_search'));		$model->setState('filter.keywords', $keywords);		$model->setState('filter.language', $app->getLanguageFilter());		$banners = $model->getItems();		$model->impress();		return $banners;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><jdoc:include type="component" />
<?php/** * @package     Joomla.Site * @subpackage  mod_syndicate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_syndicate * * @package     Joomla.Site * @subpackage  mod_syndicate * @since       1.5 */class ModSyndicateHelper{	public static function getLink(&$params)	{		$document = JFactory::getDocument();		foreach ($document->_links as $link => $value)		{			$value = JArrayHelper::toString($value);			if (strpos($value, 'application/'.$params->get('format').'+xml'))			{				return $link;			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banner controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerBanner extends JControllerForm{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_BANNERS_BANNER';	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user       = JFactory::getUser();		$filter     = $this->input->getInt('filter_category_id');		$categoryId = JArrayHelper::getValue($data, 'catid', $filter, 'int');		$allow      = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow	= $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absence of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method override to check if you can edit an existing record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user		= JFactory::getUser();		$recordId	= (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return $user->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   string  $model  The model	 *	 * @return  boolean  True on success.	 *	 * @since	2.5	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model	= $this->getModel('Banner', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_banners&view=banners' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_TEMPLATES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<fieldset class="panelform">			<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<li>				<?php if (!$field->hidden) : ?>					<?php echo $field->label; ?>				<?php endif; ?>					<?php echo $field->input; ?>				</li>			<?php endforeach; ?>			</ul>		</fieldset>	<?php endforeach;  ?>
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for javascript behaviors * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlBehavior{	/**	 * @var   array   array containing information for loaded files	 */	protected static $loaded = array();	/**	 * Method to load the MooTools framework into the document head	 *	 * If debugging mode is on an uncompressed version of MooTools is included for easier debugging.	 *	 * @param   string  $extras  MooTools file to load	 * @param   mixed   $debug   Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   11.1	 */	public static function framework($extras = false, $debug = null)	{		$type = $extras ? 'more' : 'core';		// Only load once		if (!empty(self::$loaded[__METHOD__][$type]))		{			return;		}		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug = $config->get('debug');		}		if ($type != 'core' && empty(self::$loaded[__METHOD__]['core']))		{			self::framework(false, $debug);		}		JHtml::_('script', 'system/mootools-' . $type . '.js', false, true, false, false, $debug);		JHtml::_('script', 'system/core.js', false, true);		self::$loaded[__METHOD__][$type] = true;		return;	}	/**	 * Add unobtrusive javascript support for image captions.	 *	 * @param   string  $selector  The selector for which a caption behaviour is to be applied.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function caption($selector = 'img.caption')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/caption.js', true, true);		// Attach caption to document		JFactory::getDocument()->addScriptDeclaration(			"window.addEvent('load', function() {				new JCaption('" . $selector . "');			});"		);		// Set static array		self::$loaded[__METHOD__][$selector] = true;	}	/**	 * Add unobtrusive javascript support for form validation.	 *	 * To enable form validation the form tag must have class="form-validate".	 * Each field that needs to be validated needs to have class="validate".	 * Additional handlers can be added to the handler for username, password,	 * numeric and email. To use these add class="validate-email" and so on.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function formvalidation()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Add validate.js language strings		JText::script('JLIB_FORM_FIELD_INVALID');		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/validate.js', true, true);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for submenu switcher support in	 * Global Configuration and System Information.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function switcher()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/switcher.js', true, true);		$script = "			document.switcher = null;			window.addEvent('domready', function(){				toggler = document.id('submenu');				element = document.id('config-document');				if (element) {					document.switcher = new JSwitcher(toggler, element, {cookieName: toggler.getProperty('class')});				}			});";		JFactory::getDocument()->addScriptDeclaration($script);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a combobox effect.	 *	 * Note that this control is only reliable in absolutely positioned elements.	 * Avoid using a combobox in a slider or dynamic pane.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function combobox()	{		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/combobox.js', true, true);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a hover tooltips.	 *	 * Add a title attribute to any element in the form	 * title="title::text"	 *	 *	 * Uses the core Tips class in MooTools.	 *	 * @param   string  $selector  The class selector for the tooltip.	 * @param   array   $params    An array of options for the tooltip.	 *                             Options for the tooltip can be:	 *                             - maxTitleChars  integer   The maximum number of characters in the tooltip title (defaults to 50).	 *                             - offsets        object    The distance of your tooltip from the mouse (defaults to {'x': 16, 'y': 16}).	 *                             - showDelay      integer   The millisecond delay the show event is fired (defaults to 100).	 *                             - hideDelay      integer   The millisecond delay the hide hide is fired (defaults to 100).	 *                             - className      string    The className your tooltip container will get.	 *                             - fixed          boolean   If set to true, the toolTip will not follow the mouse.	 *                             - onShow         function  The default function for the show event, passes the tip element	 *                               and the currently hovered element.	 *                             - onHide         function  The default function for the hide event, passes the currently	 *                               hovered element.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function tooltip($selector = '.hasTip', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (isset(self::$loaded[__METHOD__][$sig]))		{			return;		}		// Include MooTools framework		self::framework(true);		// Setup options object		$opt['maxTitleChars'] = (isset($params['maxTitleChars']) && ($params['maxTitleChars'])) ? (int) $params['maxTitleChars'] : 50;		// Offsets needs an array in the format: array('x'=>20, 'y'=>30)		$opt['offset']    = (isset($params['offset']) && (is_array($params['offset']))) ? $params['offset'] : null;		$opt['showDelay'] = (isset($params['showDelay'])) ? (int) $params['showDelay'] : null;		$opt['hideDelay'] = (isset($params['hideDelay'])) ? (int) $params['hideDelay'] : null;		$opt['className'] = (isset($params['className'])) ? $params['className'] : null;		$opt['fixed']     = (isset($params['fixed']) && ($params['fixed'])) ? true : false;		$opt['onShow']    = (isset($params['onShow'])) ? '\\' . $params['onShow'] : null;		$opt['onHide']    = (isset($params['onHide'])) ? '\\' . $params['onHide'] : null;		$options = JHtml::getJSObject($opt);		// Attach tooltips to document		JFactory::getDocument()->addScriptDeclaration(			"window.addEvent('domready', function() {			$$('$selector').each(function(el) {				var title = el.get('title');				if (title) {					var parts = title.split('::', 2);					el.store('tip:title', parts[0]);					el.store('tip:text', parts[1]);				}			});			var JTooltips = new Tips($$('$selector'), $options);		});"		);		// Set static array		self::$loaded[__METHOD__][$sig] = true;		return;	}	/**	 * Add unobtrusive javascript support for modal links.	 *	 * @param   string  $selector  The selector for which a modal behaviour is to be applied.	 * @param   array   $params    An array of parameters for the modal behaviour.	 *                             Options for the modal behaviour can be:	 *                            - ajaxOptions	 *                            - size	 *                            - shadow	 *                            - overlay	 *                            - onOpen	 *                            - onClose	 *                            - onUpdate	 *                            - onResize	 *                            - onShow	 *                            - onHide	 *	 * @return  void	 *	 * @since   11.1	 */	public static function modal($selector = 'a.modal', $params = array())	{		$document = JFactory::getDocument();		// Load the necessary files if they haven't yet been loaded		if (!isset(self::$loaded[__METHOD__]))		{			// Include MooTools framework			self::framework(true);			// Load the javascript and css			JHtml::_('script', 'system/modal.js', true, true);			JHtml::_('stylesheet', 'system/modal.css', array(), true);		}		$sig = md5(serialize(array($selector, $params)));		if (isset(self::$loaded[__METHOD__][$sig]))		{			return;		}		// Setup options object		$opt['ajaxOptions']   = (isset($params['ajaxOptions']) && (is_array($params['ajaxOptions']))) ? $params['ajaxOptions'] : null;		$opt['handler']       = (isset($params['handler'])) ? $params['handler'] : null;		$opt['parseSecure']   = (isset($params['parseSecure'])) ? (bool) $params['parseSecure'] : null;		$opt['closable']      = (isset($params['closable'])) ? (bool) $params['closable'] : null;		$opt['closeBtn']      = (isset($params['closeBtn'])) ? (bool) $params['closeBtn'] : null;		$opt['iframePreload'] = (isset($params['iframePreload'])) ? (bool) $params['iframePreload'] : null;		$opt['iframeOptions'] = (isset($params['iframeOptions']) && (is_array($params['iframeOptions']))) ? $params['iframeOptions'] : null;		$opt['size']          = (isset($params['size']) && (is_array($params['size']))) ? $params['size'] : null;		$opt['shadow']        = (isset($params['shadow'])) ? $params['shadow'] : null;		$opt['overlay']       = (isset($params['overlay'])) ? $params['overlay'] : null;		$opt['onOpen']        = (isset($params['onOpen'])) ? $params['onOpen'] : null;		$opt['onClose']       = (isset($params['onClose'])) ? $params['onClose'] : null;		$opt['onUpdate']      = (isset($params['onUpdate'])) ? $params['onUpdate'] : null;		$opt['onResize']      = (isset($params['onResize'])) ? $params['onResize'] : null;		$opt['onMove']        = (isset($params['onMove'])) ? $params['onMove'] : null;		$opt['onShow']        = (isset($params['onShow'])) ? $params['onShow'] : null;		$opt['onHide']        = (isset($params['onHide'])) ? $params['onHide'] : null;		if (isset($params['fullScreen']) && (bool) $params['fullScreen'])		{			$opt['size']      = array('x' => '\\window.getSize().x-80', 'y' => '\\window.getSize().y-80');		}		$options = JHtml::getJSObject($opt);		// Attach modal behavior to document		$document			->addScriptDeclaration(			"		window.addEvent('domready', function() {			SqueezeBox.initialize(" . $options . ");			SqueezeBox.assign($$('" . $selector . "'), {				parse: 'rel'			});		});"		);		// Set static array		self::$loaded[__METHOD__][$sig] = true;		return;	}	/**	 * JavaScript behavior to allow shift select in grids	 *	 * @param   string  $id  The id of the form for which a multiselect behaviour is to be applied.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function multiselect($id = 'adminForm')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$id]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/multiselect.js', true, true);		// Attach multiselect to document		JFactory::getDocument()->addScriptDeclaration(			"window.addEvent('domready', function() {				new Joomla.JMultiSelect('" . $id . "');			});"		);		// Set static array		self::$loaded[__METHOD__][$id] = true;		return;	}	/**	 * Add unobtrusive javascript support for a collapsible tree.	 *	 * @param   string  $id      An index	 * @param   array   $params  An array of options.	 * @param   array   $root    The root node	 *	 * @return  void	 *	 * @since   11.1	 */	public static function tree($id, $params = array(), $root = array())	{		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/mootree.js', true, true, false, false);		JHtml::_('stylesheet', 'system/mootree.css', array(), true);		if (isset(self::$loaded[__METHOD__][$id]))		{			return;		}		// Setup options object		$opt['div']   = (array_key_exists('div', $params)) ? $params['div'] : $id . '_tree';		$opt['mode']  = (array_key_exists('mode', $params)) ? $params['mode'] : 'folders';		$opt['grid']  = (array_key_exists('grid', $params)) ? '\\' . $params['grid'] : true;		$opt['theme'] = (array_key_exists('theme', $params)) ? $params['theme'] : JHtml::_('image', 'system/mootree.gif', '', array(), true, true);		// Event handlers		$opt['onExpand'] = (array_key_exists('onExpand', $params)) ? '\\' . $params['onExpand'] : null;		$opt['onSelect'] = (array_key_exists('onSelect', $params)) ? '\\' . $params['onSelect'] : null;		$opt['onClick']  = (array_key_exists('onClick', $params)) ? '\\' . $params['onClick']		: '\\function(node){  window.open(node.data.url, node.data.target != null ? node.data.target : \'_self\'); }';		$options = JHtml::getJSObject($opt);		// Setup root node		$rt['text']     = (array_key_exists('text', $root)) ? $root['text'] : 'Root';		$rt['id']       = (array_key_exists('id', $root)) ? $root['id'] : null;		$rt['color']    = (array_key_exists('color', $root)) ? $root['color'] : null;		$rt['open']     = (array_key_exists('open', $root)) ? '\\' . $root['open'] : true;		$rt['icon']     = (array_key_exists('icon', $root)) ? $root['icon'] : null;		$rt['openicon'] = (array_key_exists('openicon', $root)) ? $root['openicon'] : null;		$rt['data']     = (array_key_exists('data', $root)) ? $root['data'] : null;		$rootNode = JHtml::getJSObject($rt);		$treeName = (array_key_exists('treeName', $params)) ? $params['treeName'] : '';		$js = '		window.addEvent(\'domready\', function(){			tree' . $treeName . ' = new MooTreeControl(' . $options . ',' . $rootNode . ');			tree' . $treeName . '.adopt(\'' . $id . '\');})';		// Attach tooltips to document		$document = JFactory::getDocument();		$document->addScriptDeclaration($js);		// Set static array		self::$loaded[__METHOD__][$id] = true;		return;	}	/**	 * Add unobtrusive javascript support for a calendar control.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function calendar()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		$document = JFactory::getDocument();		$tag = JFactory::getLanguage()->getTag();		JHtml::_('stylesheet', 'system/calendar-jos.css', array(' title' => JText::_('JLIB_HTML_BEHAVIOR_GREEN'), ' media' => 'all'), true);		JHtml::_('script', $tag . '/calendar.js', false, true);		JHtml::_('script', $tag . '/calendar-setup.js', false, true);		$translation = self::_calendartranslation();		if ($translation)		{			$document->addScriptDeclaration($translation);		}		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a color picker.	 *	 * @return  void	 *	 * @since   11.2	 */	public static function colorpicker()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include jQuery		JHtml::_('jquery.framework');		JHtml::_('script', 'jui/jquery.minicolors.min.js', false, true);		JHtml::_('stylesheet', 'jui/jquery.minicolors.css', false, true);		JFactory::getDocument()->addScriptDeclaration("				jQuery(document).ready(function (){					jQuery('.minicolors').each(function() {						jQuery(this).minicolors({							control: jQuery(this).attr('data-control') || 'hue',							position: jQuery(this).attr('data-position') || 'right',							theme: 'bootstrap'						});					});				});			"		);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a simple color picker.	 *	 * @return  void	 *	 * @since   11.2	 */	public static function simplecolorpicker()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include jQuery		JHtml::_('jquery.framework');		JHtml::_('script', 'jui/jquery.simplecolors.min.js', false, true);		JHtml::_('stylesheet', 'jui/jquery.simplecolors.css', false, true);		JFactory::getDocument()->addScriptDeclaration("				jQuery(document).ready(function (){					jQuery('select.simplecolors').simplecolors();				});			"		);		self::$loaded[__METHOD__] = true;	}	/**	 * Keep session alive, for example, while editing or creating an article.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function keepalive()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		$config = JFactory::getConfig();		$lifetime = ($config->get('lifetime') * 60000);		$refreshTime = ($lifetime <= 60000) ? 30000 : $lifetime - 60000;		// Refresh time is 1 minute less than the liftime assined in the configuration.php file.		// The longest refresh period is one hour to prevent integer overflow.		if ($refreshTime > 3600000 || $refreshTime <= 0)		{			$refreshTime = 3600000;		}		$document = JFactory::getDocument();		$script = '';		$script .= 'function keepAlive() {';		$script .= '	var myAjax = new Request({method: "get", url: "index.php"}).send();';		$script .= '}';		$script .= ' window.addEvent("domready", function()';		$script .= '{ keepAlive.periodical(' . $refreshTime . '); }';		$script .= ');';		$document->addScriptDeclaration($script);		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Highlight some words via Javascript.	 *	 * @param   array   $terms      Array of words that should be highlighted.	 * @param   string  $start      ID of the element that marks the begin of the section in which words	 *                              should be highlighted. Note this element will be removed from the DOM.	 * @param   string  $end        ID of the element that end this section.	 *                              Note this element will be removed from the DOM.	 * @param   string  $className  Class name of the element highlights are wrapped in.	 * @param   string  $tag        Tag that will be used to wrap the highlighted words.	 *	 * @return  void	 *	 * @since   11.4	 */	public static function highlighter(array $terms, $start = 'highlighter-start', $end = 'highlighter-end', $className = 'highlight', $tag = 'span')	{		$sig = md5(serialize(array($terms, $start, $end)));		if (isset(self::$loaded[__METHOD__][$sig]))		{			return;		}		JHtml::_('script', 'system/highlighter.js', true, true);		$terms = str_replace('"', '\"', $terms);		$document = JFactory::getDocument();		$document->addScriptDeclaration("			window.addEvent('domready', function () {				var start = document.id('" . $start . "');				var end = document.id('" . $end . "');				if (!start || !end || !Joomla.Highlighter) {					return true;				}				highlighter = new Joomla.Highlighter({					startElement: start,					endElement: end,					className: '" . $className . "',					onlyWords: false,					tag: '" . $tag . "'				}).highlight([\"" . implode('","', $terms) . "\"]);				start.dispose();				end.dispose();			});		");		self::$loaded[__METHOD__][$sig] = true;		return;	}	/**	 * Break us out of any containing iframes	 *	 * @return  void	 *	 * @since   11.1	 */	public static function noframes()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		$js = "window.addEvent('domready', function () {if (top == self) {document.documentElement.style.display = 'block'; }" .			" else {top.location = self.location; }});";		$document = JFactory::getDocument();		$document->addStyleDeclaration('html { display:none }');		$document->addScriptDeclaration($js);		JResponse::setHeader('X-Frames-Options', 'SAME-ORIGIN');		self::$loaded[__METHOD__] = true;	}	/**	 * Internal method to get a JavaScript object notation string from an array	 *	 * @param   array  $array  The array to convert to JavaScript object notation	 *	 * @return  string  JavaScript object notation representation of the array	 *	 * @since   11.1	 * @deprecated  13.3 Use JHtml::getJSObject() instead.	 */	protected static function _getJSObject($array = array())	{		JLog::add('JHtmlBehavior::_getJSObject() is deprecated. JHtml::getJSObject() instead..', JLog::WARNING, 'deprecated');		JHtml::getJSObject($array);	}	/**	 * Internal method to translate the JavaScript Calendar	 *	 * @return  string  JavaScript that translates the object	 *	 * @since   11.1	 */	protected static function _calendartranslation()	{		static $jsscript = 0;		// Guard clause, avoids unnecessary nesting		if ($jsscript)		{			return false;		}		$jsscript = 1;		// To keep the code simple here, run strings through JText::_() using array_map()		$callback = array('JText','_');		$weekdays_full = array_map(			$callback, array(				'SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'			)		);		$weekdays_short = array_map(			$callback,			array(				'SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'			)		);		$months_long = array_map(			$callback, array(				'JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE',				'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER'			)		);		$months_short = array_map(			$callback, array(				'JANUARY_SHORT', 'FEBRUARY_SHORT', 'MARCH_SHORT', 'APRIL_SHORT', 'MAY_SHORT', 'JUNE_SHORT',				'JULY_SHORT', 'AUGUST_SHORT', 'SEPTEMBER_SHORT', 'OCTOBER_SHORT', 'NOVEMBER_SHORT', 'DECEMBER_SHORT'			)		);		// This will become an object in Javascript but define it first in PHP for readability		$text = array(			'INFO'			=> JText::_('JLIB_HTML_BEHAVIOR_ABOUT_THE_CALENDAR'),			'ABOUT'			=> "DHTML Date/Time Selector\n"				. "(c) dynarch.com 2002-2005 / Author: Mihai Bazon\n"				. "For latest version visit: http://www.dynarch.com/projects/calendar/\n"				. "Distributed under GNU LGPL.  See http://gnu.org/licenses/lgpl.html for details."				. "\n\n"				. JText::_('JLIB_HTML_BEHAVIOR_DATE_SELECTION')				. JText::_('JLIB_HTML_BEHAVIOR_YEAR_SELECT')				. JText::_('JLIB_HTML_BEHAVIOR_MONTH_SELECT')				. JText::_('JLIB_HTML_BEHAVIOR_HOLD_MOUSE'),			'ABOUT_TIME'	=> "\n\n"				. "Time selection:\n"				. "- Click on any of the time parts to increase it\n"				. "- or Shift-click to decrease it\n"				. "- or click and drag for faster selection.",			'PREV_YEAR'		=> JText::_('JLIB_HTML_BEHAVIOR_PREV_YEAR_HOLD_FOR_MENU'),			'PREV_MONTH'	=> JText::_('JLIB_HTML_BEHAVIOR_PREV_MONTH_HOLD_FOR_MENU'),			'GO_TODAY'		=> JText::_('JLIB_HTML_BEHAVIOR_GO_TODAY'),			'NEXT_MONTH'	=> JText::_('JLIB_HTML_BEHAVIOR_NEXT_MONTH_HOLD_FOR_MENU'),			'SEL_DATE'		=> JText::_('JLIB_HTML_BEHAVIOR_SELECT_DATE'),			'DRAG_TO_MOVE'	=> JText::_('JLIB_HTML_BEHAVIOR_DRAG_TO_MOVE'),			'PART_TODAY'	=> JText::_('JLIB_HTML_BEHAVIOR_TODAY'),			'DAY_FIRST'		=> JText::_('JLIB_HTML_BEHAVIOR_DISPLAY_S_FIRST'),			'WEEKEND'		=> "0,6",			'CLOSE'			=> JText::_('JLIB_HTML_BEHAVIOR_CLOSE'),			'TODAY'			=> JText::_('JLIB_HTML_BEHAVIOR_TODAY'),			'TIME_PART'		=> JText::_('JLIB_HTML_BEHAVIOR_SHIFT_CLICK_OR_DRAG_TO_CHANGE_VALUE'),			'DEF_DATE_FORMAT'	=> "%Y-%m-%d",			'TT_DATE_FORMAT'	=> JText::_('JLIB_HTML_BEHAVIOR_TT_DATE_FORMAT'),			'WK'			=> JText::_('JLIB_HTML_BEHAVIOR_WK'),			'TIME'			=> JText::_('JLIB_HTML_BEHAVIOR_TIME')		);		return 'Calendar._DN = ' . json_encode($weekdays_full) . ';'			. ' Calendar._SDN = ' . json_encode($weekdays_short) . ';'			. ' Calendar._FD = 0;'			. ' Calendar._MN = ' . json_encode($months_long) . ';'			. ' Calendar._SMN = ' . json_encode($months_short) . ';'			. ' Calendar._TT = ' . json_encode($text) . ';';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocumentRenderer_Atom is a feed that implements the atom specification * * Please note that just by using this class you won't automatically * produce valid atom files. For example, you have to specify either an editor * for the feed or an author for every single feed item. * * @package     Joomla.Platform * @subpackage  Document * @see         http://www.atomenabled.org/developers/syndication/atom-format-spec.php * @since       11.1 */class JDocumentRendererAtom extends JDocumentRenderer{	/**	 * Document mime type	 *	 * @var    string	 * @since  11.1	 */	protected $_mime = "application/atom+xml";	/**	 * Render the feed.	 *	 * @param   string  $name     The name of the element to render	 * @param   array   $params   Array of values	 * @param   string  $content  Override the output of the renderer	 *	 * @return  string  The output of the script	 *	 * @see JDocumentRenderer::render()	 * @since   11.1	 */	public function render($name = '', $params = null, $content = null)	{		$app = JFactory::getApplication();		// Gets and sets timezone offset from site configuration		$tz = new DateTimeZone($app->getCfg('offset'));		$now = JFactory::getDate();		$now->setTimeZone($tz);		$data = $this->_doc;		$uri = JURI::getInstance();		$url = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));		$syndicationURL = JRoute::_('&format=feed&type=atom');		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $data->title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $data->title, $app->getCfg('sitename'));		}		else		{			$title = $data->title;		}		$feed_title = htmlspecialchars($title, ENT_COMPAT, 'UTF-8');		$feed = "<feed xmlns=\"http://www.w3.org/2005/Atom\" ";		if ($data->language != "")		{			$feed .= " xml:lang=\"" . $data->language . "\"";		}		$feed .= ">\n";		$feed .= "	<title type=\"text\">" . $feed_title . "</title>\n";		$feed .= "	<subtitle type=\"text\">" . htmlspecialchars($data->description, ENT_COMPAT, 'UTF-8') . "</subtitle>\n";		if (empty($data->category) === false)		{			if (is_array($data->category))			{				foreach ($data->category as $cat)				{					$feed .= "	<category term=\"" . htmlspecialchars($cat, ENT_COMPAT, 'UTF-8') . "\" />\n";				}			}			else			{				$feed .= "	<category term=\"" . htmlspecialchars($data->category, ENT_COMPAT, 'UTF-8') . "\" />\n";			}		}		$feed .= "	<link rel=\"alternate\" type=\"text/html\" href=\"" . $url . "\"/>\n";		$feed .= "	<id>" . str_replace(' ', '%20', $data->getBase()) . "</id>\n";		$feed .= "	<updated>" . htmlspecialchars($now->toISO8601(true), ENT_COMPAT, 'UTF-8') . "</updated>\n";		if ($data->editor != "")		{			$feed .= "	<author>\n";			$feed .= "		<name>" . $data->editor . "</name>\n";			if ($data->editorEmail != "")			{				$feed .= "		<email>" . htmlspecialchars($data->editorEmail, ENT_COMPAT, 'UTF-8') . "</email>\n";			}			$feed .= "	</author>\n";		}		$feed .= "	<generator uri=\"http://joomla.org\" version=\"1.6\">" . $data->getGenerator() . "</generator>\n";		$feed .= '	<link rel="self" type="application/atom+xml" href="' . str_replace(' ', '%20', $url . $syndicationURL) . "\"/>\n";		for ($i = 0, $count = count($data->items); $i < $count; $i++)		{			$feed .= "	<entry>\n";			$feed .= "		<title>" . htmlspecialchars(strip_tags($data->items[$i]->title), ENT_COMPAT, 'UTF-8') . "</title>\n";			$feed .= '		<link rel="alternate" type="text/html" href="' . $url . $data->items[$i]->link . "\"/>\n";			if ($data->items[$i]->date == "")			{				$data->items[$i]->date = $now->toUnix();			}			$itemDate = JFactory::getDate($data->items[$i]->date);			$itemDate->setTimeZone($tz);			$feed .= "		<published>" . htmlspecialchars($itemDate->toISO8601(true), ENT_COMPAT, 'UTF-8') . "</published>\n";			$feed .= "		<updated>" . htmlspecialchars($itemDate->toISO8601(true), ENT_COMPAT, 'UTF-8') . "</updated>\n";			if (empty($data->items[$i]->guid) === true)			{				$feed .= "		<id>" . str_replace(' ', '%20', $url . $data->items[$i]->link) . "</id>\n";			}			else			{				$feed .= "		<id>" . htmlspecialchars($data->items[$i]->guid, ENT_COMPAT, 'UTF-8') . "</id>\n";			}			if ($data->items[$i]->author != "")			{				$feed .= "		<author>\n";				$feed .= "			<name>" . htmlspecialchars($data->items[$i]->author, ENT_COMPAT, 'UTF-8') . "</name>\n";				if ($data->items[$i]->authorEmail != "")				{					$feed .= "			<email>" . htmlspecialchars($data->items[$i]->authorEmail, ENT_COMPAT, 'UTF-8') . "</email>\n";				}				$feed .= "		</author>\n";			}			if ($data->items[$i]->description != "")			{				$feed .= "		<summary type=\"html\">" . htmlspecialchars($data->items[$i]->description, ENT_COMPAT, 'UTF-8') . "</summary>\n";				$feed .= "		<content type=\"html\">" . htmlspecialchars($data->items[$i]->description, ENT_COMPAT, 'UTF-8') . "</content>\n";			}			if (empty($data->items[$i]->category) === false)			{				if (is_array($data->items[$i]->category))				{					foreach ($data->items[$i]->category as $cat)					{						$feed .= "		<category term=\"" . htmlspecialchars($cat, ENT_COMPAT, 'UTF-8') . "\" />\n";					}				}				else				{					$feed .= "		<category term=\"" . htmlspecialchars($data->items[$i]->category, ENT_COMPAT, 'UTF-8') . "\" />\n";				}			}			if ($data->items[$i]->enclosure != null)			{				$feed .= "		<link rel=\"enclosure\" href=\"" . $data->items[$i]->enclosure->url . "\" type=\""					. $data->items[$i]->enclosure->type . "\"  length=\"" . $data->items[$i]->enclosure->length . "\" />\n";			}			$feed .= "	</entry>\n";		}		$feed .= "</feed>\n";		return $feed;	}}
<?php/*** @version $Id$* Tools for locating / replacing bad bytes in UTF-8 strings* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage bad* @see utf8_is_valid*///--------------------------------------------------------------------/*** Locates the first bad byte in a UTF-8 string returning it's* byte index in the string* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string* @return mixed integer byte index or FALSE if no bad found* @package utf8* @subpackage bad*/function utf8_bad_find($str) {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    $pos = 0;    $badList = array();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        $bytes = strlen($matches[0]);        if ( isset($matches[2])) {            return $pos;        }        $pos += $bytes;        $str = substr($str,$bytes);    }    return FALSE;}//--------------------------------------------------------------------/*** Locates all bad bytes in a UTF-8 string and returns a list of their* byte index in the string* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string* @return mixed array of integers or FALSE if no bad found* @package utf8* @subpackage bad*/function utf8_bad_findall($str) {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    $pos = 0;    $badList = array();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        $bytes = strlen($matches[0]);        if ( isset($matches[2])) {            $badList[] = $pos;        }        $pos += $bytes;        $str = substr($str,$bytes);    }    if ( count($badList) > 0 ) {        return $badList;    }    return FALSE;}//--------------------------------------------------------------------/*** Strips out any bad bytes from a UTF-8 string and returns the rest* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string* @return string* @package utf8* @subpackage bad*/function utf8_bad_strip($str) {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    ob_start();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        if ( !isset($matches[2])) {            echo $matches[0];        }        $str = substr($str,strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Replace bad bytes with an alternative character - ASCII character* recommended is replacement char* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string to search* @param string to replace bad bytes with (defaults to '?') - use ASCII* @return string* @package utf8* @subpackage bad*/function utf8_bad_replace($str, $replace = '?') {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    ob_start();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        if ( !isset($matches[2])) {            echo $matches[0];        } else {            echo $replace;        }        $str = substr($str,strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Return code from utf8_bad_identify() when a five octet sequence is detected.* Note: 5 octets sequences are valid UTF-8 but are not supported by Unicode so* do not represent a useful character* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_5OCTET',1);/*** Return code from utf8_bad_identify() when a six octet sequence is detected.* Note: 6 octets sequences are valid UTF-8 but are not supported by Unicode so* do not represent a useful character* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_6OCTET',2);/*** Return code from utf8_bad_identify().* Invalid octet for use as start of multi-byte UTF-8 sequence* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_SEQID',3);/*** Return code from utf8_bad_identify().* From Unicode 3.1, non-shortest form is illegal* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_NONSHORT',4);/*** Return code from utf8_bad_identify().* From Unicode 3.2, surrogate characters are illegal* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_SURROGATE',5);/*** Return code from utf8_bad_identify().* Codepoints outside the Unicode range are illegal* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_UNIOUTRANGE',6);/*** Return code from utf8_bad_identify().* Incomplete multi-octet sequence* Note: this is kind of a "catch-all"* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_SEQINCOMPLETE',7);//--------------------------------------------------------------------/*** Reports on the type of bad byte found in a UTF-8 string. Returns a* status code on the first bad byte found* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return mixed integer constant describing problem or FALSE if valid UTF-8* @see utf8_bad_explain* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage bad*/function utf8_bad_identify($str, &$i) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                */                return UTF8_BAD_5OCTET;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                return UTF8_BAD_6OCTET;            } else {                // Current octet is neither in the US-ASCII range nor a legal first                // octet of a multi-octet sequence.                return UTF8_BAD_SEQID;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ) {                        return UTF8_BAD_NONSHORT;                    // From Unicode 3.2, surrogate characters are illegal                    } else if (($mUcs4 & 0xFFFFF800) == 0xD800) {                        return UTF8_BAD_SURROGATE;                    // Codepoints outside the Unicode range are illegal                    } else if ($mUcs4 > 0x10FFFF) {                        return UTF8_BAD_UNIOUTRANGE;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                // ((0xC0 & (*in) != 0x80) && (mState != 0))                // Incomplete multi-octet sequence.                $i--;                return UTF8_BAD_SEQINCOMPLETE;            }        }    }    if ( $mState != 0 ) {        // Incomplete multi-octet sequence.        $i--;        return UTF8_BAD_SEQINCOMPLETE;    }    // No bad octets found    $i = NULL;    return FALSE;}//--------------------------------------------------------------------/*** Takes a return code from utf8_bad_identify() are returns a message* (in English) explaining what the problem is.* @param int return code from utf8_bad_identify* @return mixed string message or FALSE if return code unknown* @see utf8_bad_identify* @package utf8* @subpackage bad*/function utf8_bad_explain($code) {    switch ($code) {        case UTF8_BAD_5OCTET:            return 'Five octet sequences are valid UTF-8 but are not supported by Unicode';        break;        case UTF8_BAD_6OCTET:            return 'Six octet sequences are valid UTF-8 but are not supported by Unicode';        break;        case UTF8_BAD_SEQID:            return 'Invalid octet for use as start of multi-byte UTF-8 sequence';        break;        case UTF8_BAD_NONSHORT:            return 'From Unicode 3.1, non-shortest form is illegal';        break;        case UTF8_BAD_SURROGATE:            return 'From Unicode 3.2, surrogate characters are illegal';        break;        case UTF8_BAD_UNIOUTRANGE:            return 'Codepoints outside the Unicode range are illegal';        break;        case UTF8_BAD_SEQINCOMPLETE:            return 'Incomplete multi-octet sequence';        break;    }    trigger_error('Unknown error code: '.$code,E_USER_WARNING);    return FALSE;}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to manipulate an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */abstract class JImageFilter{	/**	 * @var    resource  The image resource handle.	 * @since  11.3	 */	protected $handle;	/**	 * Class constructor.	 *	 * @param   resource  $handle  The image resource on which to apply the filter.	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 */	public function __construct($handle)	{		// Make sure the file handle is valid.		if (!is_resource($handle) || (get_resource_type($handle) != 'gd'))		{			JLog::add('The image handle is invalid for the image filter.', JLog::ERROR);			throw new InvalidArgumentException('The image handle is invalid for the image filter.');		}		$this->handle = $handle;	}	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 */	abstract public function execute(array $options = array());}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-80">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_CONFIG_TEXT_FILTER_SETTINGS'); ?></legend>		<p><?php echo JText::_('COM_CONFIG_TEXT_FILTERS_DESC'); ?></p>		<?php foreach ($this->form->getFieldset('filters') as $field) : ?>			<?php echo $field->label; ?>			<div class="clr"> </div>			<?php echo $field->input; ?>		<?php endforeach; ?>	</fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Messages component * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesViewMessage extends JViewLegacy{	protected $form;	protected $item;	protected $state;	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		if ($this->getLayout() == 'edit')		{			JToolbarHelper::title(JText::_('COM_MESSAGES_WRITE_PRIVATE_MESSAGE'), 'new-privatemessage.png');			JToolbarHelper::save('message.save', 'COM_MESSAGES_TOOLBAR_SEND');			JToolbarHelper::cancel('message.cancel');			JToolbarHelper::help('JHELP_COMPONENTS_MESSAGING_WRITE');		}		else		{			JToolbarHelper::title(JText::_('COM_MESSAGES_VIEW_PRIVATE_MESSAGE'), 'inbox.png');			$sender = JUser::getInstance($this->item->user_id_from);			if ($sender->authorise('core.admin') || $sender->authorise('core.manage', 'com_messages') && $sender->authorise('core.login.admin'))			{				JToolbarHelper::custom('message.reply', 'redo', null, 'COM_MESSAGES_TOOLBAR_REPLY', false);			}			JToolbarHelper::cancel('message.cancel');			JToolbarHelper::help('JHELP_COMPONENTS_MESSAGING_READ');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_SYSTEM_INFORMATION'); ?></legend>	<table class="table table-striped">		<thead>			<tr>				<th width="25%">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_BUILT_ON'); ?></strong>				</td>				<td>					<?php echo $this->info['php'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_COLLATION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbcollation'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['phpversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEB_SERVER'); ?></strong>				</td>				<td>					<?php echo JHtml::_('system.server', $this->info['server']); ?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEBSERVER_TO_PHP_INTERFACE'); ?></strong>				</td>				<td>					<?php echo $this->info['sapi_name'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_JOOMLA_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['version'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PLATFORM_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['platform'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_USER_AGENT'); ?></strong>				</td>				<td>					<?php echo htmlspecialchars($this->info['useragent']);?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */abstract class JGithubObject{	/**	 * @var    JRegistry  Options for the GitHub object.	 * @since  11.3	 */	protected $options;	/**	 * @var    JGithubHttp  The HTTP client object to use in sending HTTP requests.	 * @since  11.3	 */	protected $client;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  GitHub options object.	 * @param   JGithubHttp  $client   The HTTP client object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JGithubHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JGithubHttp($this->options);	}	/**	 * Method to build and return a full request URL for the request.  This method will	 * add appropriate pagination details if necessary and also prepend the API url	 * to have a complete URL for the request.	 *	 * @param   string   $path   URL to inflect	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  string   The request URL.	 *	 * @since   11.3	 */	protected function fetchUrl($path, $page = 0, $limit = 0)	{		// Get a new JUri object fousing the api url and given path.		$uri = new JUri($this->options->get('api.url') . $path);		if ($this->options->get('api.username', false))		{			$uri->setUser($this->options->get('api.username'));		}		if ($this->options->get('api.password', false))		{			$uri->setPass($this->options->get('api.password'));		}		// If we have a defined page number add it to the JUri object.		if ($page > 0)		{			$uri->setVar('page', (int) $page);		}		// If we have a defined items per page add it to the JUri object.		if ($limit > 0)		{			$uri->setVar('per_page', (int) $limit);		}		return (string) $uri;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');?><div class="contact<?php echo $this->pageclass_sfx?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<div class="page-header">			<h2>				<span class="contact-name"><?php echo $this->contact->name; ?></span>			</h2>		</div>	<?php endif;  ?>	<?php if ($this->params->get('show_contact_category') == 'show_no_link') : ?>		<h3>			<span class="contact-category"><?php echo $this->contact->category_title; ?></span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_category') == 'show_with_link') : ?>		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid);?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_list') && count($this->contacts) > 1) : ?>		<form action="#" method="get" name="selectForm" id="selectForm">			<?php echo JText::_('COM_CONTACT_SELECT_CONTACT'); ?>			<?php echo JHtml::_('select.genericlist',  $this->contacts, 'id', 'class="inputbox" onchange="document.location.href = this.value"', 'link', 'name', $this->contact->link);?>		</form>	<?php endif; ?>	<?php if ($this->params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?>	<?php  if ($this->params->get('presentation_style') == 'sliders'):?>		<div class="accordion" id="accordionContact">			<div class="accordion-group">				<div class="accordion-heading">					<a class="accordion-toggle" data-toggle="collapse" data-parent="accordionContact" href="#basic-details">					<?php echo JText::_('COM_CONTACT_DETAILS');?>					</a>				</div>				<div id="basic-details" class="accordion-body collapse in">					<div class="accordion-inner">	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'plain'):?>		<?php  echo '<h3>' . JText::_('COM_CONTACT_DETAILS') . '</h3>';  ?>	<?php endif; ?>	<?php if ($this->contact->image && $this->params->get('show_image')) : ?>		<div class="thumbnail pull-right">			<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle')); ?>		</div>	<?php endif; ?>	<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>		<dl class="contact-position dl-horizontal">			<dd>				<?php echo $this->contact->con_position; ?>			</dd>		</dl>	<?php endif; ?>	<?php echo $this->loadTemplate('address'); ?>	<?php if ($this->params->get('allow_vcard')) :	?>		<?php echo JText::_('COM_CONTACT_DOWNLOAD_INFORMATION_AS');?>			<a href="<?php echo JRoute::_('index.php?option=com_contact&amp;view=contact&amp;id='.$this->contact->id . '&amp;format=vcf'); ?>">			<?php echo JText::_('COM_CONTACT_VCARD');?></a>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders'):?>					</div>				</div>			</div>		</div>	<?php endif; ?>	<?php if ($this->params->get('show_email_form') && ($this->contact->email_to || $this->contact->user_id)) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>			<div class="accordion-group">				<div class="accordion-heading">					<a class="accordion-toggle" data-toggle="collapse" data-parent="accordionContact" href="#display-form">					<?php echo JText::_('COM_CONTACT_EMAIL_FORM');?>					</a>				</div>				<div id="display-form" class="accordion-body collapse">					<div class="accordion-inner">		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php  echo '<h3>'. JText::_('COM_CONTACT_EMAIL_FORM').'</h3>';  ?>		<?php endif; ?>		<?php  echo $this->loadTemplate('form');  ?>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>					</div>				</div>			</div>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_links')) : ?>		<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_articles') && $this->contact->user_id && $this->contact->articles) : ?>			<?php if ($this->params->get('presentation_style') == 'sliders'):?>			<div class="accordion-group">				<div class="accordion-heading">					<a class="accordion-toggle" data-toggle="collapse" data-parent="accordionContact" href="#display-articles">					<?php echo JText::_('JGLOBAL_ARTICLES');?>					</a>				</div>				<div id="display-articles" class="accordion-body collapse">					<div class="accordion-inner">			<?php endif; ?>			<?php if  ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('JGLOBAL_ARTICLES').'</h3>'; ?>			<?php endif; ?>			<?php echo $this->loadTemplate('articles'); ?>			<?php if ($this->params->get('presentation_style') == 'sliders'):?>					</div>				</div>			</div>			<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_profile') && $this->contact->user_id && JPluginHelper::isEnabled('user', 'profile')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>			<div class="accordion-group">				<div class="accordion-heading">					<a class="accordion-toggle" data-toggle="collapse" data-parent="accordionContact" href="#display-profile">					<?php echo JText::_('COM_CONTACT_PROFILE');?>					</a>				</div>				<div id="display-profile" class="accordion-body collapse">					<div class="accordion-inner">		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_PROFILE').'</h3>'; ?>		<?php endif; ?>		<?php echo $this->loadTemplate('profile'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>					</div>				</div>			</div>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->contact->misc && $this->params->get('show_misc')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>			<div class="accordion-group">				<div class="accordion-heading">					<a class="accordion-toggle" data-toggle="collapse" data-parent="accordionContact" href="#display-misc">					<?php echo JText::_('COM_CONTACT_OTHER_INFORMATION');?>					</a>				</div>				<div id="display-misc" class="accordion-body collapse">					<div class="accordion-inner">		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_OTHER_INFORMATION').'</h3>'; ?>		<?php endif; ?>				<div class="contact-miscinfo">					<dl class="dl-horizontal">						<dt>							<span class="<?php echo $this->params->get('marker_class'); ?>">								<?php echo $this->params->get('marker_misc'); ?>							</span>						</dt>						<dd>							<span class="contact-misc">								<?php echo $this->contact->misc; ?>							</span>						</dd>					</dl>				</div>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>					</div>				</div>			</div>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders'):?>		</div>	<?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform String Normalise Class * * @package     Joomla.Platform * @subpackage  String * @since       11.3 */abstract class JStringNormalise{	/**	 * Method to convert a string from camel case.	 *	 * This method offers two modes. Grouped allows for splitting on groups of uppercase characters as follows:	 *	 * "FooBarABCDef"            becomes  array("Foo", "Bar", "ABC", "Def")	 * "JFooBar"                 becomes  array("J", "Foo", "Bar")	 * "J001FooBar002"           becomes  array("J001", "Foo", "Bar002")	 * "abcDef"                  becomes  array("abc", "Def")	 * "abc_defGhi_Jkl"          becomes  array("abc_def", "Ghi_Jkl")	 * "ThisIsA_NASAAstronaut"   becomes  array("This", "Is", "A_NASA", "Astronaut"))	 * "JohnFitzgerald_Kennedy"  becomes  array("John", "Fitzgerald_Kennedy"))	 *	 * Non-grouped will split strings at each uppercase character.	 *	 * @param   string   $input    The string input (ASCII only).	 * @param   boolean  $grouped  Optionally allows splitting on groups of uppercase characters.	 *	 * @return  string  The space separated string.	 *	 * @since   12.1	 */	public static function fromCamelCase($input, $grouped = false)	{		return $grouped			? preg_split('/(?<=[^A-Z_])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][^A-Z_])/x', $input)			: trim(preg_replace('#([A-Z])#', ' $1', $input));	}	/**	 * Method to convert a string into camel case.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The camel case string.	 *	 * @since   11.3	 */	public static function toCamelCase($input)	{		// Convert words to uppercase and then remove spaces.		$input = self::toSpaceSeparated($input);		$input = ucwords($input);		$input = str_ireplace(' ', '', $input);		return $input;	}	/**	 * Method to convert a string into dash separated form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The dash separated string.	 *	 * @since   11.3	 */	public static function toDashSeparated($input)	{		// Convert spaces and underscores to dashes.		$input = preg_replace('#[ \-_]+#', '-', $input);		return $input;	}	/**	 * Method to convert a string into space separated form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The space separated string.	 *	 * @since   11.3	 */	public static function toSpaceSeparated($input)	{		// Convert underscores and dashes to spaces.		$input = preg_replace('#[ \-_]+#', ' ', $input);		return $input;	}	/**	 * Method to convert a string into underscore separated form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The underscore separated string.	 *	 * @since   11.3	 */	public static function toUnderscoreSeparated($input)	{		// Convert spaces and dashes to underscores.		$input = preg_replace('#[ \-_]+#', '_', $input);		return $input;	}	/**	 * Method to convert a string into variable form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The variable string.	 *	 * @since   11.3	 */	public static function toVariable($input)	{		// Remove dashes and underscores, then convert to camel case.		$input = self::toSpaceSeparated($input);		$input = self::toCamelCase($input);		// Remove leading digits.		$input = preg_replace('#^[0-9]+.*$#', '', $input);		// Lowercase the first character.		$first = substr($input, 0, 1);		$first = strtolower($first);		// Replace the first character with the lowercase character.		$input = substr_replace($input, $first, 0, 1);		return $input;	}	/**	 * Method to convert a string into key form.	 *	 * @param   string  $input  The string input (ASCII only).	 *	 * @return  string  The key string.	 *	 * @since   11.3	 */	public static function toKey($input)	{		// Remove spaces and dashes, then convert to lower case.		$input = self::toUnderscoreSeparated($input);		$input = strtolower($input);		return $input;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_newsfeeds.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_items') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Legacy * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JMenu class * * @package     Joomla.Legacy * @subpackage  Menu * @since       11.1 */class JMenu{	/**	 * Array to hold the menu items	 *	 * @var    array	 * @since   11.1	 */	protected $_items = array();	/**	 * Identifier of the default menu item	 *	 * @var    integer	 * @since   11.1	 */	protected $_default = array();	/**	 * Identifier of the active menu item	 *	 * @var    integer	 * @since  11.1	 */	protected $_active = 0;	/**	 * @var    array  JMenu instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor	 *	 * @param   array  $options  An array of configuration options.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		// Load the menu items		$this->load();		foreach ($this->_items as $item)		{			if ($item->home)			{				$this->_default[trim($item->language)] = $item->id;			}			// Decode the item params			$result = new JRegistry;			$result->loadString($item->params);			$item->params = $result;		}	}	/**	 * Returns a JMenu object	 *	 * @param   string  $client   The name of the client	 * @param   array   $options  An associative array of options	 *	 * @return  JMenu  A menu object.	 *	 * @since   11.1	 */	public static function getInstance($client, $options = array())	{		if (empty(self::$instances[$client]))		{			// Create a JMenu object			$classname = 'JMenu' . ucfirst($client);			if (!class_exists($classname))			{				// @deprecated 13.3 Everything in this block is deprecated but the warning is only logged after the file_exists				// Load the menu object				$info = JApplicationHelper::getClientInfo($client, true);				if (is_object($info))				{					$path = $info->path . '/includes/menu.php';					if (file_exists($path))					{						JLog::add('Non-autoloadable JMenu subclasses are deprecated.', JLog::WARNING, 'deprecated');						include_once $path;					}				}			}			if (class_exists($classname))			{				self::$instances[$client] = new $classname($options);			}			else			{				throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_MENU_LOAD', $client), 500);			}		}		return self::$instances[$client];	}	/**	 * Get menu item by id	 *	 * @param   integer  $id  The item id	 *	 * @return  mixed    The item object, or null if not found	 *	 * @since   11.1	 */	public function getItem($id)	{		$result = null;		if (isset($this->_items[$id]))		{			$result = &$this->_items[$id];		}		return $result;	}	/**	 * Set the default item by id and language code.	 *	 * @param   integer  $id        The menu item id.	 * @param   string   $language  The language cod (since 1.6).	 *	 * @return  boolean  True, if successful	 *	 * @since   11.1	 */	public function setDefault($id, $language = '')	{		if (isset($this->_items[$id]))		{			$this->_default[$language] = $id;			return true;		}		return false;	}	/**	 * Get the default item by language code.	 *	 * @param   string  $language  The language code, default value of * means all.	 *	 * @return  object  The item object	 *	 * @since   11.1	 */	public function getDefault($language = '*')	{		if (array_key_exists($language, $this->_default))		{			return $this->_items[$this->_default[$language]];		}		elseif (array_key_exists('*', $this->_default))		{			return $this->_items[$this->_default['*']];		}		else		{			return 0;		}	}	/**	 * Set the default item by id	 *	 * @param   integer  $id  The item id	 *	 * @return  mixed  If successful the active item, otherwise null	 *	 * @since   11.1	 */	public function setActive($id)	{		if (isset($this->_items[$id]))		{			$this->_active = $id;			$result = &$this->_items[$id];			return $result;		}		return null;	}	/**	 * Get menu item by id.	 *	 * @return  object  The item object.	 *	 * @since   11.1	 */	public function getActive()	{		if ($this->_active)		{			$item = &$this->_items[$this->_active];			return $item;		}		return null;	}	/**	 * Gets menu items by attribute	 *	 * @param   string   $attributes  The field name	 * @param   string   $values      The value of the field	 * @param   boolean  $firstonly   If true, only returns the first item found	 *	 * @return  array	 *	 * @since   11.1	 */	public function getItems($attributes, $values, $firstonly = false)	{		$items = array();		$attributes = (array) $attributes;		$values = (array) $values;		foreach ($this->_items as $item)		{			if (!is_object($item))			{				continue;			}			$test = true;			for ($i = 0, $count = count($attributes); $i < $count; $i++)			{				if (is_array($values[$i]))				{					if (!in_array($item->$attributes[$i], $values[$i]))					{						$test = false;						break;					}				}				else				{					if ($item->$attributes[$i] != $values[$i])					{						$test = false;						break;					}				}			}			if ($test)			{				if ($firstonly)				{					return $item;				}				$items[] = $item;			}		}		return $items;	}	/**	 * Gets the parameter object for a certain menu item	 *	 * @param   integer  $id  The item id	 *	 * @return  JRegistry  A JRegistry object	 *	 * @since   11.1	 */	public function getParams($id)	{		if ($menu = $this->getItem($id))		{			return $menu->params;		}		else		{			return new JRegistry;		}	}	/**	 * Getter for the menu array	 *	 * @return  array	 *	 * @since   11.1	 */	public function getMenu()	{		return $this->_items;	}	/**	 * Method to check JMenu object authorization against an access control	 * object and optionally an access extension object	 *	 * @param   integer  $id  The menu id	 *	 * @return  boolean  True if authorised	 *	 * @since   11.1	 */	public function authorise($id)	{		$menu = $this->getItem($id);		$user = JFactory::getUser();		if ($menu)		{			return in_array((int) $menu->access, $user->getAuthorisedViewLevels());		}		else		{			return true;		}	}	/**	 * Loads the menu items	 *	 * @return  array	 *	 * @since   11.1	 */	public function load()	{		return array();	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Access * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JAccessRules instead. * * @package     Joomla.Legacy * @subpackage  Access * @since       11.1 * @deprecated  12.3 */class JRules extends JAccessRules{	/**	 * Constructor.	 *	 * The input array must be in the form: array('action' => array(-42 => true, 3 => true, 4 => false))	 * or an equivalent JSON encoded string, or an object where properties are arrays.	 *	 * @param   mixed  $input  A JSON format string (probably from the database) or a nested array.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function __construct($input = '')	{		JLog::add('JRules is deprecated. Use JAccessRules instead.', JLog::WARNING, 'deprecated');		parent::__construct($input);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Utility class for icons. * * @package     Joomla.Libraries * @subpackage  HTML * @since       2.5 */abstract class JHtmlIcons{	/**	 * Method to generate html code for a list of buttons	 *	 * @param   array  $buttons  Array of buttons	 *	 * @return  string	 *	 * @since   2.5	 */	public static function buttons($buttons)	{		$html = array();		foreach ($buttons as $button)		{			$html[] = JHtml::_('icons.button', $button);		}		return implode($html);	}	/**	 * Method to generate html code for a list of buttons	 *	 * @param   array  $button  Button properties	 *	 * @return  string	 *	 * @since   2.5	 */	public static function button($button)	{		if (isset($button['access']))		{			if (is_bool($button['access']))			{				if ($button['access'] == false)				{					return '';				}			}			else			{				// Get the user object to verify permissions				$user = JFactory::getUser();				// Take each pair of permission, context values.				for ($i = 0, $n = count($button['access']); $i < $n; $i += 2)				{					if (!$user->authorise($button['access'][$i], $button['access'][$i + 1]))					{						return '';					}				}			}		}		// Instantiate a new JLayoutFile instance and render the layout		$layout = new JLayoutFile('joomla.quickicons.icon');		return $layout->render($button);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Get additional language strings prefixed with TPL_HATHOR$lang = JFactory::getLanguage();$lang->load('tpl_hathor', JPATH_ADMINISTRATOR)|| $lang->load('tpl_hathor', JPATH_ADMINISTRATOR . '/templates/hathor/language');$app	= JFactory::getApplication();$doc	= JFactory::getDocument();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Load template javascript$doc->addScript('templates/'.$this->template.'/js/template.js', 'text/javascript');// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo  $this->language; ?>" lang="<?php echo  $this->language; ?>" dir="<?php echo  $this->direction; ?>" ><head><jdoc:include type="head" /><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--></head><body class="contentpane">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_FTP_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('ftp') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$doc = JFactory::getDocument();$lang = JFactory::getLanguage();$this->language = $doc->language;$this->direction = $doc->direction;// Add JavaScript FrameworksJHtml::_('bootstrap.framework');$doc->addScript('templates/' .$this->template. '/js/template.js');// Add Stylesheets$doc->addStyleSheet('templates/' .$this->template. '/css/template.css');// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)) :	$doc->addStyleSheet($file);endif;?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" />	<!--[if lt IE 9]>		<script src="../media/jui/js/html5.js"></script>	<![endif]--></head><body class="contentpane component">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';$controller	= JControllerLegacy::getInstance('Tags');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with languages * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */abstract class JHtmlLanguages{	/**	 * Method to generate an information about the default language	 *	 * @param   boolean	$published is the language the default?	 *	 * @return  string	html code	 */	public static function published($published)	{		if ($published)		{			return JHtml::_('image', 'menu/icon-16-default.png', JText::_('COM_LANGUAGES_HEADING_DEFAULT'), null, true);		}		else		{			return '&#160;';		}	}	/**	 * Method to generate an input radio button	 *	 * @param   integer  $rowNum the row number	 * @param   string	language tag	 *	 * @return  string	html code	 */	public static function id($rowNum, $language)	{		return '<input type="radio" id="cb' . $rowNum . '" name="cid" value="' . htmlspecialchars($language) . '" onclick="Joomla.isChecked(this.checked);" title="' . ($rowNum + 1) . '"/>';	}	public static function clients()	{		return array(			JHtml::_('select.option', 0, JText::_('JSITE')),			JHtml::_('select.option', 1, JText::_('JADMINISTRATOR'))		);	}	/**	 * Returns an array of published state filter options.	 *	 * @return  string  	The HTML code for the select tag	 * @since   1.6	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '1', 'JPUBLISHED');		$options[]	= JHtml::_('select.option', '0', 'JUNPUBLISHED');		$options[]	= JHtml::_('select.option', '-2', 'JTRASHED');		$options[]	= JHtml::_('select.option', '*', 'JALL');		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_RELEVANT_PHP_SETTINGS'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="250">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;				</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SAFE_MODE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['safe_mode']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OPEN_BASEDIR'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['open_basedir']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISPLAY_ERRORS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['display_errors']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SHORT_OPEN_TAGS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['short_open_tag']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_FILE_UPLOADS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['file_uploads']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MAGIC_QUOTES'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['magic_quotes_gpc']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_REGISTER_GLOBALS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['register_globals']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OUTPUT_BUFFERING'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['output_buffering']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_SAVE_PATH'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['session.save_path']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_AUTO_START'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.integer', $this->php_settings['session.auto_start']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_XML_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['xml']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZLIB_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zlib']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZIP_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zip']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISABLED_FUNCTIONS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['disable_functions']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MBSTRING_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['mbstring']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ICONV_AVAILABLE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['iconv']); ?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the module helper classes.if (!class_exists('ModMenuHelper')){	require __DIR__ . '/helper.php';}if (!class_exists('JAdminCssMenu')){	require __DIR__ . '/menu.php';}$lang    = JFactory::getLanguage();$user    = JFactory::getUser();$input   = JFactory::getApplication()->input;$menu    = new JAdminCSSMenu;$enabled = $input->getBool('hidemainmenu') ? false : true;// Render the module layoutrequire JModuleHelper::getLayoutPath('mod_menu', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_contact.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_items') == 1) :?>			<dl><dt>				<?php echo JText::_('COM_CONTACT_CAT_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>            <?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Supports a list of installed application languages * * @package     Joomla.Platform * @subpackage  Form * @see         JFormFieldContentLanguage for a select list of content languages. * @since       11.1 */class JFormFieldLanguage extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Language';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		// Initialize some field attributes.		$client = (string) $this->element['client'];		if ($client != 'site' && $client != 'administrator')		{			$client = 'site';		}		// Merge any additional options in the XML definition.		$options = array_merge(			parent::getOptions(),			JLanguageHelper::createLanguageList($this->value, constant('JPATH_' . strtoupper($client)), true, true)		);		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Commits class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.1 */class JGithubCommits extends JGithubObject{	/**	 * Method to create a commit.	 *	 * @param   string  $user     The name of the owner of the GitHub repository.	 * @param   string  $repo     The name of the GitHub repository.	 * @param   string  $message  The commit message.	 * @param   string  $tree     SHA of the tree object this commit points to.	 * @param   array   $parents  Array of the SHAs of the commits that were the parents of this commit.	 *                            If omitted or empty, the commit will be written as a root commit.	 *                            For a single parent, an array of one SHA should be provided.	 *                            For a merge commit, an array of more than one should be provided.	 *	 * @return  object	 *	 * @since   12.1	 */	public function create($user, $repo, $message, $tree, array $parents = array())	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/commits';		$data = json_encode(			array('message' => $message, 'tree' => $tree, 'parents' => $parents)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on a commit.	 *	 * @param   string   $user      The name of the owner of the GitHub repository.	 * @param   string   $repo      The name of the GitHub repository.	 * @param   string   $sha       The SHA of the commit to comment on.	 * @param   string   $comment   The text of the comment.	 * @param   integer  $line      The line number of the commit to comment on.	 * @param   string   $filepath  A relative path to the file to comment on within the commit.	 * @param   integer  $position  Line index in the diff to comment on.	 *	 * @return  object	 *	 * @since   12.1	 */	public function createCommitComment($user, $repo, $sha, $comment, $line, $filepath, $position)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha . '/comments';		$data = json_encode(			array(				'body' => $comment,				'commit_id' => $sha,				'line' => (int) $line,				'path' => $filepath,				'position' => (int) $position			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on a commit.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $id    The ID of the comment to edit.	 *	 * @return  object	 *	 * @since   12.1	 */	public function deleteCommitComment($user, $repo, $id)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to edit a comment on a commit.	 *	 * @param   string  $user     The name of the owner of the GitHub repository.	 * @param   string  $repo     The name of the GitHub repository.	 * @param   string  $id       The ID of the comment to edit.	 * @param   string  $comment  The text of the comment.	 *	 * @return  object	 *	 * @since   12.1	 */	public function editCommitComment($user, $repo, $id, $comment)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		$data = json_encode(			array(				'body' => $comment			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single commit for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $sha    The SHA of the commit to retrieve.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommit($user, $repo, $sha, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single comment on a commit.	 *	 * @param   string   $user  The name of the owner of the GitHub repository.	 * @param   string   $repo  The name of the GitHub repository.	 * @param   integer  $id    ID of the comment to retrieve	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommitComment($user, $repo, $id)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of comments for a single commit for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $sha    The SHA of the commit to retrieve.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommitComments($user, $repo, $sha, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a diff for two commits.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $base  The base of the diff, either a commit SHA or branch.	 * @param   string  $head  The head of the diff, either a commit SHA or branch.	 *	 * @return  array	 *	 * @since   12.1	 */	public function getDiff($user, $repo, $base, $head)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/compare/' . $base . '...' . $head;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list commits for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getList($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of commit comments for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getListComments($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Update's Default View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.4 */class JoomlaupdateViewDefault extends JViewLegacy{	/**	 * Renders the view	 *	 * @param   string  $tpl  Template name	 *	 * @return void	 *	 * @since  2.5.4	 */	public function display($tpl=null)	{		// Get data from the model		$this->state = $this->get('State');		// Load useful classes		$model = $this->getModel();		$this->loadHelper('select');		// Assign view variables		$ftp = $model->getFTPOptions();		$this->assign('updateInfo', $model->getUpdateInformation());		$this->assign('methodSelect', JoomlaupdateHelperSelect::getMethods($ftp['enabled']));		// Set the toolbar information		JToolbarHelper::title(JText::_('COM_JOOMLAUPDATE_OVERVIEW'), 'install');		JToolbarHelper::custom('update.purge', 'purge', 'purge', 'JTOOLBAR_PURGE_CACHE', false, false);		// Add toolbar buttons		if (JFactory::getUser()->authorise('core.admin', 'com_joomlaupdate'))		{			JToolbarHelper::preferences('com_joomlaupdate');		}		JToolBarHelper::divider();		JToolBarHelper::help('JHELP_COMPONENTS_JOOMLA_UPDATE');		// Load mooTools		JHtml::_('behavior.framework', true);		// Load our Javascript		$document = JFactory::getDocument();		$document->addScript('../media/com_joomlaupdate/default.js');		JHtml::_('stylesheet', 'media/mediamanager.css', array(), true);		// Render the view		parent::display($tpl);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * XML format handler for JRegistry. * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistryFormatXML extends JRegistryFormat{	/**	 * Converts an object into an XML formatted string.	 * -	If more than two levels of nested groups are necessary, since INI is not	 * useful, XML or another format should be used.	 *	 * @param   object  $object   Data source object.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  string  XML formatted string.	 *	 * @since   11.1	 */	public function objectToString($object, $options = array())	{		$rootName = (isset($options['name'])) ? $options['name'] : 'registry';		$nodeName = (isset($options['nodeName'])) ? $options['nodeName'] : 'node';		// Create the root node.		$root = simplexml_load_string('<' . $rootName . ' />');		// Iterate over the object members.		$this->getXmlChildren($root, $object, $nodeName);		return $root->asXML();	}	/**	 * Parse a XML formatted string and convert it into an object.	 *	 * @param   string  $data     XML formatted string to convert.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  object   Data object.	 *	 * @since   11.1	 */	public function stringToObject($data, array $options = array())	{		$obj = new stdClass;		// Parse the XML string.		$xml = simplexml_load_string($data);		foreach ($xml->children() as $node)		{			$obj->$node['name'] = $this->getValueFromNode($node);		}		return $obj;	}	/**	 * Method to get a PHP native value for a SimpleXMLElement object. -- called recursively	 *	 * @param   object  $node  SimpleXMLElement object for which to get the native value.	 *	 * @return  mixed  Native value of the SimpleXMLElement object.	 *	 * @since   11.1	 */	protected function getValueFromNode($node)	{		switch ($node['type'])		{			case 'integer':				$value = (string) $node;				return (int) $value;				break;			case 'string':				return (string) $node;				break;			case 'boolean':				$value = (string) $node;				return (bool) $value;				break;			case 'double':				$value = (string) $node;				return (float) $value;				break;			case 'array':				$value = array();				foreach ($node->children() as $child)				{					$value[(string) $child['name']] = $this->getValueFromNode($child);				}				break;			default:				$value = new stdClass;				foreach ($node->children() as $child)				{					$value->$child['name'] = $this->getValueFromNode($child);				}				break;		}		return $value;	}	/**	 * Method to build a level of the XML string -- called recursively	 *	 * @param   SimpleXMLElement  $node      SimpleXMLElement object to attach children.	 * @param   object            $var       Object that represents a node of the XML document.	 * @param   string            $nodeName  The name to use for node elements.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function getXmlChildren(SimpleXMLElement $node, $var, $nodeName)	{		// Iterate over the object members.		foreach ((array) $var as $k => $v)		{			if (is_scalar($v))			{				$n = $node->addChild($nodeName, $v);				$n->addAttribute('name', $k);				$n->addAttribute('type', gettype($v));			}			else			{				$n = $node->addChild($nodeName);				$n->addAttribute('name', $k);				$n->addAttribute('type', gettype($v));				$this->getXmlChildren($n, $v, $nodeName);			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Archieve class interface * * @package     Joomla.Platform * @subpackage  Archive * @since       12.1 */interface JArchiveExtractable{	/**	 * Extract a compressed file to a given path	 *	 * @param   string  $archive      Path to archive to extract	 * @param   string  $destination  Path to extract archive to	 * @param   array   $options      Extraction options [may be unused]	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function extract($archive, $destination, array $options = array());	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   12.1	 */	public static function isSupported();}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Helper class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderHelper{	/**	 * @var		string	The extension name.	 * @since	2.5	 */	public static $extension = 'com_finder';	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_INDEX'),			'index.php?option=com_finder&view=index',			$vName == 'index'		);		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_MAPS'),			'index.php?option=com_finder&view=maps',			$vName == 'maps'		);		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_FILTERS'),			'index.php?option=com_finder&view=filters',			$vName == 'filters'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject  A JObject containing the allowed actions.	 *	 * @since   2.5	 */	public static function getActions()	{		$user = JFactory::getUser();		$result = new JObject;		$assetName = 'com_finder';		$actions = JAccess::getActions($assetName, 'component');		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Pull Requests class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubPulls extends JGithubObject{	/**	 * Method to create a pull request.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $title  The title of the new pull request.	 * @param   string  $base   The branch (or git ref) you want your changes pulled into. This	 *                          should be an existing branch on the current repository. You cannot	 *                          submit a pull request to one repo that requests a merge to a base	 *                          of another repo.	 * @param   string  $head   The branch (or git ref) where your changes are implemented.	 * @param   string  $body   The body text for the new pull request.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $title, $base, $head, $body = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// Build the request data.		$data = json_encode(			array(				'title' => $title,				'base' => $base,				'head' => $head,				'body' => $body			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on a pull request.	 *	 * @param   string   $user      The name of the owner of the GitHub repository.	 * @param   string   $repo      The name of the GitHub repository.	 * @param   integer  $pullId    The pull request number.	 * @param   string   $body      The comment body text.	 * @param   string   $commitId  The SHA1 hash of the commit to comment on.	 * @param   string   $filePath  The Relative path of the file to comment on.	 * @param   string   $position  The line index in the diff to comment on.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createComment($user, $repo, $pullId, $body, $commitId, $filePath, $position)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,				'commit_id' => $commitId,				'path' => $filePath,				'position' => $position			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment in reply to another comment.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $pullId     The pull request number.	 * @param   string   $body       The comment body text.	 * @param   integer  $inReplyTo  The id of the comment to reply to.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createCommentReply($user, $repo, $pullId, $body, $inReplyTo)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,				'in_reply_to' => (int) $inReplyTo			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a pull request from an existing issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number for which to attach the new pull request.	 * @param   string   $base     The branch (or git ref) you want your changes pulled into. This	 *                             should be an existing branch on the current repository. You cannot	 *                             submit a pull request to one repo that requests a merge to a base	 *                             of another repo.	 * @param   string   $head     The branch (or git ref) where your changes are implemented.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createFromIssue($user, $repo, $issueId, $base, $head)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// Build the request data.		$data = json_encode(			array(				'issue' => (int) $issueId,				'base' => $base,				'head' => $head			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to delete.	 *	 * @return  void	 *	 * @since   11.3	 */	public function deleteComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to update a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   string   $title   The optional new title for the pull request.	 * @param   string   $body    The optional new body text for the pull request.	 * @param   string   $state   The optional new state for the pull request. [open, closed]	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $pullId, $title = null, $body = null, $state = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if (isset($title))		{			$data->title = $title;		}		// If a body is set add it to the data object.		if (isset($body))		{			$data->body = $body;		}		// If a state is set add it to the data object.		if (isset($state))		{			$data->state = $state;		}		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to update.	 * @param   string   $body       The new body text for the comment.	 *	 * @return  object	 *	 * @since   11.3	 */	public function editComment($user, $repo, $commentId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Build the request data.		$data = json_encode(			array(				'body' => $body			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $pullId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The comment id to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function getComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of comments on a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getComments($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of commits for a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getCommits($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/commits';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of files for a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getFiles($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/files';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list pull requests.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $state  The optional state to filter requests by. [open, closed]	 * @param   integer  $page   The page number from which to get items.	 * @param   integer  $limit  The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($user, $repo, $state = 'open', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// If a state exists append it as an option.		if ($state != 'open')		{			$path .= '?state=' . $state;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to check if a pull request has been merged.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.  The pull request number.	 *	 * @return  boolean  True if the pull request has been merged.	 *	 * @since   11.3	 */	public function isMerged($user, $repo, $pullId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/merge';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code == 204)		{			return true;		}		elseif ($response->code == 404)		{			return false;		}		else		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to merge a pull request.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $pullId   The pull request number.	 * @param   string   $message  The message that will be used for the merge commit.	 *	 * @return  object	 *	 * @since   11.3	 */	public function merge($user, $repo, $pullId, $message = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/merge';		// Build the request data.		$data = json_encode(			array(				'commit_message' => $message			)		);		// Send the request.		$response = $this->client->put($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Method to build a SEF route. * * @param   array  &$query  An array of route variables. * * @return  array  An array of route segments. * * @since   2.5 */function FinderBuildRoute(&$query){	static $menu;	$segments = array();	// Load the menu if necessary.	if (!$menu)	{		$menu = JFactory::getApplication('site')->getMenu();	}	/*	 * First, handle menu item routes first. When the menu system builds a	 * route, it only provides the option and the menu item id. We don't have	 * to do anything to these routes.	 */	if (count($query) === 2 && isset($query['Itemid']) && isset($query['option']))	{		return $segments;	}	/*	 * Next, handle a route with a supplied menu item id. All system generated	 * routes should fall into this group. We can assume that the menu item id	 * is the best possible match for the query but we need to go through and	 * see which variables we can eliminate from the route query string because	 * they are present in the menu item route already.	 */	if (!empty($query['Itemid']))	{		// Get the menu item.		$item = $menu->getItem($query['Itemid']);		// Check if the view matches.		if ($item && @$item->query['view'] === @$query['view'])		{			unset($query['view']);		}		// Check if the search query filter matches.		if ($item && @$item->query['f'] === @$query['f'])		{			unset($query['f']);		}		// Check if the search query string matches.		if ($item && @$item->query['q'] === @$query['q'])		{			unset($query['q']);		}		return $segments;	}	/*	 * Lastly, handle a route with no menu item id. Fortunately, we only need	 * to deal with the view as the other route variables are supposed to stay	 * in the query string.	 */	if (isset($query['view']))	{		// Add the view to the segments.		$segments[] = $query['view'];		unset($query['view']);	}	return $segments;}/** * Method to parse a SEF route. * * @param   array  $segments  An array of route segments. * * @return  array  An array of route variables. * * @since   2.5 */function FinderParseRoute($segments){	$vars = array();	// Check if the view segment is set and it equals search or advanced.	if (@$segments[0] === 'search' || @$segments[0] === 'advanced')	{		$vars['view'] = $segments[0];	}	return $vars;}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of article categories. * * @package     Joomla.Site * @subpackage  com_content * @since       1.6 */class ContentModelCategories extends JModelList{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_content.categories';	/**	 * The category context (allows other extensions to derived from this model).	 *	 * @var		string	 */	protected $_extension = 'com_content';	private $_parent = null;	private $_items = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('filter.extension', $this->_extension);		// Get the parent id if defined.		$parentId = $app->input->getInt('id');		$this->setState('filter.parentId', $parentId);		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('filter.published',	1);		$this->setState('filter.access',	true);	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.extension');		$id	.= ':'.$this->getState('filter.published');		$id	.= ':'.$this->getState('filter.access');		$id	.= ':'.$this->getState('filter.parentId');		return parent::getStoreId($id);	}	/**	 * Redefine the function an add some properties to make the styling more easy	 *	 * @param   bool	$recursive	True if you want to return children recursively.	 *	 * @return  mixed  An array of data items on success, false on failure.	 * @since   1.6	 */	public function getItems($recursive = false)	{		if (!count($this->_items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_num_articles_cat', 1) || !$params->get('show_empty_categories_cat', 0);			$categories = JCategories::getInstance('Content', $options);			$this->_parent = $categories->get($this->getState('filter.parentId', 'root'));			if (is_object($this->_parent))			{				$this->_items = $this->_parent->getChildren($recursive);			}			else {				$this->_items = false;			}		}		return $this->_items;	}	public function getParent()	{		if (!is_object($this->_parent))		{			$this->getItems();		}		return $this->_parent;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset title="<?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?>">	<legend><?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?></legend>	<?php echo JText::_('COM_INSTALLER_MSG_DESCFTP'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p><?php echo JText::_($this->ftp->getMessage()); ?></p>	<?php endif; ?>	<table class="adminform">		<tbody>			<tr>				<td width="120">					<label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>				</td>				<td>					<input type="text" id="username" name="username" class="input_box" size="70" value="" />				</td>			</tr>			<tr>				<td width="120">					<label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>				</td>				<td>					<input type="password" id="password" name="password" class="input_box" size="70" value="" />				</td>			</tr>		</tbody>	</table></fieldset>
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strcasecmp* A case insensivite string comparison* Note: requires utf8_strtolower* @param string* @param string* @return int* @see http://www.php.net/strcasecmp* @see utf8_strtolower* @package utf8* @subpackage strings*/function utf8_strcasecmp($strX, $strY) {    $strX = utf8_strtolower($strX);    $strY = utf8_strtolower($strY);    return strcmp($strX, $strY);}
<?php/** * @package     Joomla.Site * @subpackage  mod_whosonline * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the whosonline functions only oncerequire_once __DIR__ . '/helper.php';$showmode = $params->get('showmode', 0);if ($showmode == 0 || $showmode == 2){	$count	= ModWhosonlineHelper::getOnlineCount();}if ($showmode > 0){	$names	= ModWhosonlineHelper::getOnlineUserNames($params);}$linknames = $params->get('linknames', 0);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_whosonline', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(WeblinksHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_weblinks.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_num_links') == 1) :?>			<dl class="weblink-count"><dt>				<?php echo JText::_('COM_WEBLINKS_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Calendar data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataCalendar extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/calendar');		}	}	/**	 * Method to remove a calendar from a user's calendar list	 *	 * @param   string  $calendarID  ID of calendar to delete	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function removeCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$jdata = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID), null, null, 'delete');			if ($jdata->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to get a calendar's settings from Google	 *	 * @param   string  $calendarID  ID of calendar to get.	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function getCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$jdata = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID));			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to add a calendar to a user's Google Calendar list	 *	 * @param   string  $calendarID  New calendar ID	 * @param   array   $options     New calendar settings	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function addCalendar($calendarID, $options = array())	{		if ($this->isAuthenticated())		{			$options['id'] = $calendarID;			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList';			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve calendar list from Google	 *	 * @param   array  $options   Search settings	 * @param   int    $maxpages  Maximum number of pages of calendars to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listCalendars($options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar's settings	 *	 * @param   string  $calendarID  Calendar ID	 * @param   array   $options     Calendar settings	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editCalendarSettings($calendarID, $options)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID);			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to clear a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar to clear	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function clearCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$data = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/clear', null, null, 'post');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to delete a calendar from Google	 *	 * @param   string  $calendarID  ID of calendar to delete.	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function deleteCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$data = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID), null, null, 'delete');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to create a Google Calendar	 *	 * @param   string  $title    New calendar title	 * @param   array   $options  New calendar settings	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function createCalendar($title, $options = array())	{		if ($this->isAuthenticated())		{			$options['summary'] = $title;			$url = 'https://www.googleapis.com/calendar/v3/calendars';			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar	 *	 * @param   string  $calendarID  Calendar ID.	 * @param   array   $options     Calendar settings.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editCalendar($calendarID, $options)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID);			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			$data = json_decode($jdata->body, true);			if ($data && array_key_exists('items', $data))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to delete an event from a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar to delete from	 * @param   string  $eventID     ID of event to delete.	 *	 * @return  boolean  Success or failure.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function deleteEvent($calendarID, $eventID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID);			$data = $this->query($url, null, null, 'delete');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to get an event from a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar	 * @param   string  $eventID     ID of event to get	 * @param   array   $options     Options to send to Google	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function getEvent($calendarID, $eventID, $options = array())	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList/';			$url .= urlencode($calendarID) . '/events/' . urlencode($eventID) . '?' . http_build_query($options);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to create a Google Calendar event	 *	 * @param   string   $calendarID  ID of calendar	 * @param   mixed    $start       Event start time	 * @param   mixed    $end         Event end time	 * @param   array    $options     New event settings	 * @param   mixed    $timezone    Timezone for event	 * @param   boolean  $allday      Treat event as an all-day event	 * @param   boolean  $notify      Notify participants	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws InvalidArgumentException	 * @throws UnexpectedValueException	 */	public function createEvent($calendarID, $start, $end = false, $options = array(), $timezone = false, $allday = false, $notify = false)	{		if ($this->isAuthenticated())		{			if (!$start)			{				$startobj = new DateTime;			}			elseif (is_int($start))			{				$startobj = new DateTime;				$startobj->setTimestamp($start);			}			elseif (is_string($start))			{				$startobj = new DateTime($start);			}			elseif (is_a($start, 'DateTime'))			{				$startobj = $start;			}			else			{				throw new InvalidArgumentException('Invalid event start time.');			}			if (!$end)			{				$endobj = $startobj;			}			elseif (is_int($end))			{				$endobj = new DateTime;				$endobj->setTimestamp($end);			}			elseif (is_string($end))			{				$endobj = new DateTime($end);			}			elseif (is_a($end, 'DateTime'))			{				$endobj = $end;			}			else			{				throw new InvalidArgumentException('Invalid event end time.');			}			if ($allday)			{				$options['start'] = array('date' => $startobj->format('Y-m-d'));				$options['end'] = array('date' => $endobj->format('Y-m-d'));			}			else			{				$options['start'] = array('dateTime' => $startobj->format(DateTime::RFC3339));				$options['end'] = array('dateTime' => $endobj->format(DateTime::RFC3339));			}			if ($timezone === true)			{				$options['start']['timeZone'] = $startobj->getTimezone()->getName();				$options['end']['timeZone'] = $endobj->getTimezone()->getName();			}			elseif (is_a($timezone, 'DateTimeZone'))			{				$options['start']['timeZone'] = $timezone->getName();				$options['end']['timeZone'] = $timezone->getName();			}			elseif (is_string($timezone))			{				$options['start']['timeZone'] = $timezone;				$options['end']['timeZone'] = $timezone;			}			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events' . ($notify ? '?sendNotifications=true' : '');			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of events on a Google calendar	 *	 * @param   string  $calendarID  Calendar ID	 * @param   string  $eventID     ID of the event to change	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Minimum number of events to retrieve (more may be retrieved depending on page size)	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listRecurrences($calendarID, $eventID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID) . '/instances';			$url .= '?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of events on a Google calendar	 *	 * @param   string  $calendarID  Calendar ID	 * @param   array   $options     Calendar settings	 * @param   int     $maxpages    Cycle through pages of data to generate a complete list	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listEvents($calendarID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to move an event from one calendar to another	 *	 * @param   string   $calendarID  Calendar ID	 * @param   string   $eventID     ID of the event to change	 * @param   string   $destID      Calendar ID	 * @param   boolean  $notify      Notify participants of changes	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function moveEvent($calendarID, $eventID, $destID, $notify = false)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID) . '/move';			$url .= '?destination=' . $destID . ($notify ? '&sendNotifications=true' : '');			$jdata = $this->query($url, null, null, 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar event	 *	 * @param   string   $calendarID  Calendar ID	 * @param   string   $eventID     ID of the event to change	 * @param   array    $options     Event settings	 * @param   boolean  $notify      Notify participants of changes	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editEvent($calendarID, $eventID, $options, $notify = false)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/calendars/';			$url .= urlencode($calendarID) . '/events/' . urlencode($eventID) . ($notify ? '?sendNotifications=true' : '');			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');JHtml::_('behavior.caption');?><div class="category-list<?php echo $this->pageclass_sfx;?>"><?php$this->subtemplatename = 'articles';echo JLayoutHelper::render('joomla.content.category_default', $this);?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="installer-database"><form action="<?php echo JRoute::_('index.php?option=com_installer&view=warnings');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?><?php if ($this->errorCount === 0) : ?>    <p class="nowarning"><?php echo JText::_('COM_INSTALLER_MSG_DATABASE_OK'); ?></p>	<?php echo JHtml::_('sliders.start', 'database-sliders', array('useCookie' => 1)); ?><?php else : ?>	<p class="warning"><?php echo JText::_('COM_INSTALLER_MSG_DATABASE_ERRORS'); ?></p>	<?php echo JHtml::_('sliders.start', 'database-sliders', array('useCookie' => 1)); ?>	<?php $panelName = JText::plural('COM_INSTALLER_MSG_N_DATABASE_ERROR_PANEL', $this->errorCount); ?>	<?php echo JHtml::_('sliders.panel', $panelName, 'error-panel'); ?>	<fieldset class="panelform">		<ul>			<?php if (!$this->filterParams) : ?>				<li><?php echo JText::_('COM_INSTALLER_MSG_DATABASE_FILTER_ERROR'); ?>			<?php endif; ?>			<?php if (!(strncmp($this->schemaVersion, JVERSION, 5) === 0)) : ?>				<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SCHEMA_ERROR', $this->schemaVersion, JVERSION); ?></li>			<?php endif; ?>			<?php if (($this->updateVersion != JVERSION)) : ?>				<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_UPDATEVERSION_ERROR', $this->updateVersion, JVERSION); ?></li>			<?php endif; ?>			<?php foreach ($this->errors as $line => $error) : ?>				<?php $key = 'COM_INSTALLER_MSG_DATABASE_' . $error->queryType;				$msgs = $error->msgElements;				$file = basename($error->file);				$msg0 = (isset($msgs[0])) ? $msgs[0] : ' ';				$msg1 = (isset($msgs[1])) ? $msgs[1] : ' ';				$msg2 = (isset($msgs[2])) ? $msgs[2] : ' ';				$message = JText::sprintf($key, $file, $msg0, $msg1, $msg2); ?>				<li><?php echo $message; ?></li>			<?php endforeach; ?>		</ul>	</fieldset><?php endif; ?><?php echo JHtml::_('sliders.panel', JText::_('COM_INSTALLER_MSG_DATABASE_INFO'), 'furtherinfo-pane'); ?>	<fieldset class="panelform">	<ul>		<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SCHEMA_VERSION', $this->schemaVersion); ?></li>		<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_UPDATE_VERSION', $this->updateVersion); ?></li>		<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_DRIVER', JFactory::getDbo()->name); ?></li>		<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_CHECKED_OK', count($this->results['ok'])); ?></li>		<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SKIPPED', count($this->results['skipped'])); ?></li>	</ul>	</fieldset><?php echo JHtml::_('sliders.end'); ?><div class="clr"> </div><div>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<?php echo JHtml::_('form.token'); ?></div></div></form></div>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Form Field class for the Joomla Framework. * * @package  Joomla.Installation * @since    1.6 */class JFormFieldPrefix extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Prefix';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		// Initialize some field attributes.		$size		= $this->element['size'] ? abs((int) $this->element['size']) : 5;		$maxLength	= $this->element['maxlength'] ? ' maxlength="' . (int) $this->element['maxlength'] . '"' : '';		$class		= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$readonly	= ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$disabled	= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		// Make sure somebody doesn't put in a too large prefix size value:		if ($size > 10)		{			$size = 10;		}		// If a prefix is already set, use it instead		$session = JFactory::getSession()->get('setup.options', array());		if (empty($session['db_prefix']))		{			// Create the random prefix:			$prefix = '';			$chars = range('a', 'z');			$numbers = range(0, 9);			// We want the fist character to be a random letter:			shuffle($chars);			$prefix .= $chars[0];			// Next we combine the numbers and characters to get the other characters:			$symbols = array_merge($numbers, $chars);			shuffle($symbols);			for ($i = 0, $j = $size - 1; $i < $j; ++$i)			{				$prefix .= $symbols[$i];			}			// Add in the underscore:			$prefix .= '_';		}		else		{			$prefix = $session['db_prefix'];		}		// Initialize JavaScript field attributes.		$onchange	= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="text" name="' . $this->name . '" id="' . $this->id . '"' .				' value="' . htmlspecialchars($prefix, ENT_COMPAT, 'UTF-8') . '"' .				$class . $disabled . $readonly . $onchange . $maxLength . '/>';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorMysqli extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return mysqli_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return mysqli_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		mysqli_free_result($this->cursor);	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="hits">					<span class="icon-eye-open"></span>					<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $displayData['item']->hits); ?>			</dd>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_ADMINISTRATOR . '/components/com_templates/helpers/templates.php';JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');$clientId       = $this->item->client_id;$state          = 1;$templates      = array_keys(ModulesHelper::getTemplates($clientId, $state));$templateGroups = array();// Add an empty value to be able to deselect a module position$option = ModulesHelper::createOption();$templateGroups[''] = ModulesHelper::createOptionGroup('', array($option));// Add positions from templates$isTemplatePosition = false;foreach ($templates as $template){	$options = array();	$positions = TemplatesHelper::getPositions($clientId, $template);	foreach ($positions as $position)	{		$text = ModulesHelper::getTranslatedModulePosition($clientId, $template, $position) . ' [' . $position . ']';		$options[] = ModulesHelper::createOption($position, $text);		if (!$isTemplatePosition && $this->item->position === $position)		{			$isTemplatePosition = true;		}	}	$templateGroups[$template] = ModulesHelper::createOptionGroup(ucfirst($template), $options);}// Add custom position to options$customGroupText = JText::_('COM_MODULES_CUSTOM_POSITION');$editPositions = true;$customPositions = ModulesHelper::getPositions($clientId, $editPositions);$templateGroups[$customGroupText] = ModulesHelper::createOptionGroup($customGroupText, $customPositions);// Build field$attr = array(	'id'          => 'jform_position',	'list.select' => $this->item->position,	'list.attr'   => 'class="chzn-custom-value input-xlarge" '		. 'data-custom_group_text="' . $customGroupText . '" '		. 'data-no_results_text="' . JText::_('COM_MODULES_ADD_CUSTOM_POSITION') . '" '		. 'data-placeholder="' . JText::_('COM_MODULES_TYPE_OR_SELECT_POSITION') . '" ');echo JHtml::_('select.groupedlist', $templateGroups, 'jform[position]', $attr);
<?php/** * @package     Joomla.Platform * @subpackage  Form * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * Requires the value entered be one of the options in a field of type="list" * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleOptions extends JFormRule{	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Check each value and return true if we get a match		foreach ($element->option as $option)		{			if ($value == (string) $option->attributes()->value)			{				return true;			}		}		return false;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;foreach ($list as $item) :?>	<li <?php if ($_SERVER['PHP_SELF'] == JRoute::_(ContentHelperRoute::getCategoryRoute($item->id))) echo ' class="active"';?>> <?php $levelup = $item->level - $startLevel - 1; ?>  <h<?php echo $params->get('item_heading') + $levelup; ?>>		<a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($item->id)); ?>">		<?php echo $item->title;?></a>   </h<?php echo $params->get('item_heading') + $levelup; ?>>		<?php		if ($params->get('show_description', 0))		{			echo JHtml::_('content.prepare', $item->description, $item->getParams(), 'mod_articles_categories.content');		}		if ($params->get('show_children', 0) && (($params->get('maxlevel', 0) == 0) || ($params->get('maxlevel') >= ($item->level - $startLevel))) && count($item->getChildren()))		{			echo '<ul>';			$temp = $list;			$list = $item->getChildren();			require JModuleHelper::getLayoutPath('mod_articles_categories', $params->get('layout', 'default').'_items');			$list = $temp;			echo '</ul>';		}		?> </li><?php endforeach; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_newsfeeds.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_items_cat') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Filter * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JFilterOutput * * @package     Joomla.Platform * @subpackage  Filter * @since       11.1 */class JFilterOutput{	/**	 * Makes an object safe to display in forms	 *	 * Object parameters that are non-string, array, object or start with underscore	 * will be converted	 *	 * @param   object   &$mixed        An object to be parsed	 * @param   integer  $quote_style   The optional quote style for the htmlspecialchars function	 * @param   mixed    $exclude_keys  An optional string single field name or array of field names not	 *                                  to be parsed (eg, for a textarea)	 *	 * @return  void	 *	 * @since   11.1	 */	public static function objectHTMLSafe(&$mixed, $quote_style = ENT_QUOTES, $exclude_keys = '')	{		if (is_object($mixed))		{			foreach (get_object_vars($mixed) as $k => $v)			{				if (is_array($v) || is_object($v) || $v == null || substr($k, 1, 1) == '_')				{					continue;				}				if (is_string($exclude_keys) && $k == $exclude_keys)				{					continue;				}				elseif (is_array($exclude_keys) && in_array($k, $exclude_keys))				{					continue;				}				$mixed->$k = htmlspecialchars($v, $quote_style, 'UTF-8');			}		}	}	/**	 * This method processes a string and replaces all instances of & with &amp; in links only.	 *	 * @param   string  $input  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	public static function linkXHTMLSafe($input)	{		$regex = 'href="([^"]*(&(amp;){0})[^"]*)*?"';		return preg_replace_callback("#$regex#i", array('JFilterOutput', '_ampReplaceCallback'), $input);	}	/**	 * This method processes a string and replaces all accented UTF-8 characters by unaccented	 * ASCII-7 "equivalents", whitespaces are replaced by hyphens and the string is lowercase.	 *	 * @param   string  $string  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	public static function stringURLSafe($string)	{		// Remove any '-' from the string since they will be used as concatenaters		$str = str_replace('-', ' ', $string);		$lang = JFactory::getLanguage();		$str = $lang->transliterate($str);		// Trim white spaces at beginning and end of alias and make lowercase		$str = trim(JString::strtolower($str));		// Remove any duplicate whitespace, and ensure all characters are alphanumeric		$str = preg_replace('/(\s|[^A-Za-z0-9\-])+/', '-', $str);		// Trim dashes at beginning and end of alias		$str = trim($str, '-');		return $str;	}	/**	 * This method implements unicode slugs instead of transliteration.	 *	 * @param   string  $string  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	public static function stringURLUnicodeSlug($string)	{		// Replace double byte whitespaces by single byte (East Asian languages)		$str = preg_replace('/\xE3\x80\x80/', ' ', $string);		// Remove any '-' from the string as they will be used as concatenator.		// Would be great to let the spaces in but only Firefox is friendly with this		$str = str_replace('-', ' ', $str);		// Replace forbidden characters by whitespaces		$str = preg_replace('#[:\#\*"@+=;!><&\.%()\]\/\'\\\\|\[]#', "\x20", $str);		// Delete all '?'		$str = str_replace('?', '', $str);		// Trim white spaces at beginning and end of alias and make lowercase		$str = trim(JString::strtolower($str));		// Remove any duplicate whitespace and replace whitespaces by hyphens		$str = preg_replace('#\x20+#', '-', $str);		return $str;	}	/**	 * Replaces &amp; with & for XHTML compliance	 *	 * @param   string  $text  Text to process	 *	 * @return  string  Processed string.	 *	 * @since   11.1	 *	 * @todo There must be a better way???	 */	public static function ampReplace($text)	{		$text = str_replace('&&', '*--*', $text);		$text = str_replace('&#', '*-*', $text);		$text = str_replace('&amp;', '&', $text);		$text = preg_replace('|&(?![\w]+;)|', '&amp;', $text);		$text = str_replace('*-*', '&#', $text);		$text = str_replace('*--*', '&&', $text);		return $text;	}	/**	 * Callback method for replacing & with &amp; in a string	 *	 * @param   string  $m  String to process	 *	 * @return  string  Replaced string	 *	 * @since   11.1	 */	public static function _ampReplaceCallback($m)	{		$rx = '&(?!amp;)';		return preg_replace('#' . $rx . '#', '&amp;', $m[0]);	}	/**	 * Cleans text of all formatting and scripting code	 *	 * @param   string  &$text  Text to clean	 *	 * @return  string  Cleaned text.	 *	 * @since   11.1	 */	public static function cleanText(&$text)	{		$text = preg_replace("'<script[^>]*>.*?</script>'si", '', $text);		$text = preg_replace('/<a\s+.*?href="([^"]+)"[^>]*>([^<]+)<\/a>/is', '\2 (\1)', $text);		$text = preg_replace('/<!--.+?-->/', '', $text);		$text = preg_replace('/{.+?}/', '', $text);		$text = preg_replace('/&nbsp;/', ' ', $text);		$text = preg_replace('/&amp;/', ' ', $text);		$text = preg_replace('/&quot;/', ' ', $text);		$text = strip_tags($text);		$text = htmlspecialchars($text, ENT_COMPAT, 'UTF-8');		return $text;	}	/**	 * Strip img-tags from string	 *	 * @param   string  $string  Sting to be cleaned.	 *	 * @return  string  Cleaned string	 *	 * @since   11.1	 */	public static function stripImages($string)	{		return preg_replace('#(<[/]?img.*>)#U', '', $string);	}	/**	 * Strip iframe-tags from string	 *	 * @param   string  $string  Sting to be cleaned.	 *	 * @return  string  Cleaned string	 *	 * @since   12.2	 */	public static function stripIframes($string)	{		return preg_replace('#(<[/]?iframe.*>)#U', '', $string);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages list controller class. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerMessages extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Message', $prefix = 'MessagesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Generic Installation View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewDefault extends JViewHtml{	/**	 * The JForm object	 *	 * @var    JForm	 * @since  3.1	 */	protected $form;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelSetup	 * @since   3.1	 */	protected $model;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->form = $this->model->getForm();		return parent::render();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Log Class * * This class hooks into the global log configuration settings to allow for user configured * logging events to be sent to where the user wishes them to be sent. On high load sites * Syslog is probably the best (pure PHP function), then the text file based loggers (CSV, W3c * or plain Formattedtext) and finally MySQL offers the most features (e.g. rapid searching) * but will incur a performance hit due to INSERT being issued. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLog{	/**	 * All log priorities.	 * @var    integer	 * @since  11.1	 */	const ALL = 30719;	/**	 * The system is unusable.	 * @var    integer	 * @since  11.1	 */	const EMERGENCY = 1;	/**	 * Action must be taken immediately.	 * @var    integer	 * @since  11.1	 */	const ALERT = 2;	/**	 * Critical conditions.	 * @var    integer	 * @since  11.1	 */	const CRITICAL = 4;	/**	 * Error conditions.	 * @var    integer	 * @since  11.1	 */	const ERROR = 8;	/**	 * Warning conditions.	 * @var    integer	 * @since  11.1	 */	const WARNING = 16;	/**	 * Normal, but significant condition.	 * @var    integer	 * @since  11.1	 */	const NOTICE = 32;	/**	 * Informational message.	 * @var    integer	 * @since  11.1	 */	const INFO = 64;	/**	 * Debugging message.	 * @var    integer	 * @since  11.1	 */	const DEBUG = 128;	/**	 * The global JLog instance.	 * @var    JLog	 * @since  11.1	 */	protected static $instance;	/**	 * Container for JLogLogger configurations.	 * @var    array	 * @since  11.1	 */	protected $configurations = array();	/**	 * Container for JLogLogger objects.	 * @var    array	 * @since  11.1	 */	protected $loggers = array();	/**	 * Lookup array for loggers.	 * @var    array	 * @since  11.1	 */	protected $lookup = array();	/**	 * Constructor.	 *	 * @since   11.1	 */	protected function __construct()	{	}	/**	 * Method to add an entry to the log.	 *	 * @param   mixed    $entry     The JLogEntry object to add to the log or the message for a new JLogEntry object.	 * @param   integer  $priority  Message priority.	 * @param   string   $category  Type of entry	 * @param   string   $date      Date of entry (defaults to now if not specified or blank)	 *	 * @return  void	 *	 * @since   11.1	 */	public static function add($entry, $priority = self::INFO, $category = '', $date = null)	{		// Automatically instantiate the singleton object if not already done.		if (empty(self::$instance))		{			self::setInstance(new JLog);		}		// If the entry object isn't a JLogEntry object let's make one.		if (!($entry instanceof JLogEntry))		{			$entry = new JLogEntry((string) $entry, $priority, $category, $date);		}		self::$instance->addLogEntry($entry);	}	/**	 * Add a logger to the JLog instance.  Loggers route log entries to the correct files/systems to be logged.	 *	 * @param   array    $options     The object configuration array.	 * @param   integer  $priorities  Message priority	 * @param   array    $categories  Types of entry	 *	 * @return  void	 *	 * @since   11.1	 */	public static function addLogger(array $options, $priorities = self::ALL, $categories = array())	{		// Automatically instantiate the singleton object if not already done.		if (empty(self::$instance))		{			self::setInstance(new JLog);		}		// The default logger is the formatted text log file.		if (empty($options['logger']))		{			$options['logger'] = 'formattedtext';		}		$options['logger'] = strtolower($options['logger']);		// Special case - if a Closure object is sent as the callback (in case of JLoggerCallback)		// Closure objects are not serializable so swap it out for a unique id first then back again later		if (isset($options['callback']) && is_a($options['callback'], 'closure'))		{			$callback = $options['callback'];			$options['callback'] = spl_object_hash($options['callback']);		}		// Generate a unique signature for the JLog instance based on its options.		$signature = md5(serialize($options));		// Now that the options array has been serialized, swap the callback back in		if (isset($callback))		{			$options['callback'] = $callback;		}		// Register the configuration if it doesn't exist.		if (empty(self::$instance->configurations[$signature]))		{			self::$instance->configurations[$signature] = $options;		}		self::$instance->lookup[$signature] = (object) array(			'priorities' => $priorities,			'categories' => array_map('strtolower', (array) $categories));	}	/**	 * Returns a reference to the a JLog object, only creating it if it doesn't already exist.	 * Note: This is principally made available for testing and internal purposes.	 *	 * @param   JLog  $instance  The logging object instance to be used by the static methods.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setInstance($instance)	{		if (($instance instanceof JLog) || $instance === null)		{			self::$instance = & $instance;		}	}	/**	 * Method to add an entry to the appropriate loggers.	 *	 * @param   JLogEntry  $entry  The JLogEntry object to send to the loggers.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function addLogEntry(JLogEntry $entry)	{		// Find all the appropriate loggers based on priority and category for the entry.		$loggers = $this->findLoggers($entry->priority, $entry->category);		foreach ((array) $loggers as $signature)		{			// Attempt to instantiate the logger object if it doesn't already exist.			if (empty($this->loggers[$signature]))			{				$class = 'JLogLogger' . ucfirst($this->configurations[$signature]['logger']);				if (class_exists($class))				{					$this->loggers[$signature] = new $class($this->configurations[$signature]);				}				else				{					throw new RuntimeException('Unable to create a JLogLogger instance: ' . $class);				}			}			// Add the entry to the logger.			$this->loggers[$signature]->addEntry(clone($entry));		}	}	/**	 * Method to find the loggers to use based on priority and category values.	 *	 * @param   integer  $priority  Message priority.	 * @param   string   $category  Type of entry	 *	 * @return  array  The array of loggers to use for the given priority and category values.	 *	 * @since   11.1	 */	protected function findLoggers($priority, $category)	{		$loggers = array();		// Sanitize inputs.		$priority = (int) $priority;		$category = strtolower($category);		// Let's go iterate over the loggers and get all the ones we need.		foreach ((array) $this->lookup as $signature => $rules)		{			// Check to make sure the priority matches the logger.			if ($priority & $rules->priorities)			{				// If either there are no set categories (meaning all) or the specific category is set, add this logger.				if (empty($category) || empty($rules->categories) || in_array($category, $rules->categories))				{					$loggers[] = $signature;				}			}		}		return $loggers;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewPositions extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to verify the FTP settings for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerVerifyftpsettings extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the data		$data = $app->input->post->get('jform', array(), 'array');		// Store the options in the session.		$vars = $model->storeOptions($data);		// Get the database model.		$ftp = new InstallationModelFtp;		// Attempt to detect the Joomla root from the ftp account.		$return = $ftp->verifyFtpSettings($vars);		// Build the response object		$r = new stdClass;		$r->view = 'ftp';		// If we got a FTP root, add it to the response object		if ($return)		{			$r->valid = $return;		}		$app->sendJsonResponse($r);	}}
<?php/** * Squiz_Sniffs_WhiteSpace_SuperfluousWhitespaceSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: SuperfluousWhitespaceSniff.php 509 2011-08-30 02:21:56Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Checks for whitespace. * * Checks that. * <ul> *   <li>No whitespace proceeds the first content of the file.</li> *   <li>No whitespace resides after content on any line.</li> *   <li>There are not two or more empty lines in functions and classes.</li> *   <li>There is a exactly one empty line after the last content of the file.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.2.2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SuperfluousWhitespaceSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(       'PHP',       'JS',       'CSS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(        T_OPEN_TAG,        T_CLOSE_TAG,        T_WHITESPACE,        T_COMMENT,        T_CLOSE_CURLY_BRACKET,        );    }//function    /**     * Processes this sniff, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param integer $stackPtr The position of the current token in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        if($stackPtr == $phpcsFile->numTokens - 1)        {            //-- We reached the end of the file - without a closing tag            if($tokens[$stackPtr]['code'] == T_WHITESPACE)            {                $lastCode = $tokens[$stackPtr - 1]['code'];                if($lastCode != T_CLOSE_CURLY_BRACKET                && $lastCode !== T_SEMICOLON)                {                    //-- If the second last is not a curly bracket or a semicolon                    $phpcsFile->addError('Additional whitespace found at end of file', $stackPtr);                }            }            else if(strpos($tokens[$stackPtr]['content'], $phpcsFile->eolChar) === false)            {                //-- Files must end with an empty line                $phpcsFile->addError('Please end your files with an empty line.', $stackPtr);            }        }        if($tokens[$stackPtr]['code'] === T_OPEN_TAG)        {            /*             Check for start of file whitespace.             */            if($phpcsFile->tokenizerType !== 'PHP')            {                // The first token is always the open tag inserted when tokenizsed                // and the second token is always the first piece of content in                // the file. If the second token is whitespace, there was                // whitespace at the start of the file.                if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)                {                    return;                }            }            else            {                // If its the first token, then there is no space.                if($stackPtr === 0)                {                    return;                }                for($i = ($stackPtr - 1); $i >= 0; $i--)                {                    // If we find something that isn't inline html                    // then there is something previous in the file.                    if($tokens[$i]['type'] !== 'T_INLINE_HTML')                    {                        return;                    }                    // If we have ended up with inline html make sure it isn't just whitespace.                    $tokenContent = trim($tokens[$i]['content']);                    if($tokenContent !== '')                    {                        return;                    }                }//for            }//end if            $phpcsFile->addError('Additional whitespace found at start of file', $stackPtr);        }        else if($phpcsFile->numTokens == ($stackPtr - 1))        {            //-- Wereached the end of the file - without a closing tag            die('BB');        }        else if($tokens[$stackPtr]['code'] === T_CLOSE_TAG)        {            /*            Check for end of file whitespace.            */            if($phpcsFile->tokenizerType === 'JS')            {                // The last token is always the close tag inserted when tokenizsed                // and the second last token is always the last piece of content in                // the file. If the second last token is whitespace, there was                // whitespace at the end of the file.                if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)                {                    return;                }            }            else if($phpcsFile->tokenizerType === 'CSS')            {                // The last two tokens are always the close tag and whitespace                // inserted when tokenizsed and the third last token is always the                // last piece of content in the file. If the third last token is                // whitespace, there was whitespace at the end of the file.                if($tokens[($stackPtr - 3)]['code'] !== T_WHITESPACE)                {                    return;                }                // Adjust the pointer to give the correct line number for the error.                $stackPtr -= 2;            }            else            {                if(isset($tokens[($stackPtr + 1)]) === false)                {                    // The close PHP token is the last in the file.                    return;                }                for($i = ($stackPtr + 1); $i < $phpcsFile->numTokens; $i++)                {                    // If we find something that isn't inline html then there                    // is more to the file.                    if($tokens[$i]['type'] !== 'T_INLINE_HTML')                    {                        return;                    }                    // If we have ended up with inline html make sure it                    // isn't just whitespace.                    $tokenContent = trim($tokens[$i]['content']);                    if(empty($tokenContent) === false)                    {                        return;                    }                }//for            }            $phpcsFile->addError('Additional whitespace found at end of file', $stackPtr);        }        else        {            /*             Check for end of line whitespace.             */            if(strpos($tokens[$stackPtr]['content'], $phpcsFile->eolChar) === false)            {                return;            }            $tokenContent = rtrim($tokens[$stackPtr]['content'], $phpcsFile->eolChar);            if(empty($tokenContent) === false)            {                if(preg_match('|^.*\s+$|', $tokenContent) !== 0)                {                    $phpcsFile->addError('Whitespace found at end of line', $stackPtr);                }            }            /*             Check for multiple blanks lines in a function or class.             */            if($phpcsFile->hasCondition($stackPtr, T_FUNCTION) === true            || $phpcsFile->hasCondition($stackPtr, T_CLASS) === true)            {                if($tokens[($stackPtr - 1)]['line'] < $tokens[$stackPtr]['line']                && $tokens[($stackPtr - 2)]['line'] === $tokens[($stackPtr - 1)]['line'])                {                    // This is an empty line and the line before this one is not                    //  empty, so this could be the start of a multiple empty                    // line block.                    $next  = $phpcsFile->findNext(T_WHITESPACE, $stackPtr, null, true);                    $lines = $tokens[$next]['line'] - $tokens[$stackPtr]['line'];                    if($lines > 1)                    {                        $error = 'Functions and classes must not contain multiple empty lines in a row;'                        ." found $lines empty lines";                        $phpcsFile->addError($error, $stackPtr);                    }                }            }        }//end if    }//function}//class
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Tree Node Class. * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */class JNode extends JObject{	/**	 * Parent node	 * @var    object	 *	 * @since  11.1	 */	protected $_parent = null;	/**	 * Array of Children	 *	 * @var    array	 * @since  11.1	 */	protected $_children = array();	/**	 * Constructor	 *	 * @since  11.1	 */	public function __construct()	{		JLog::add('JNode::__construct() is deprecated.', JLog::WARNING, 'deprecated');		return true;	}	/**	 * Add child to this node	 *	 * If the child already has a parent, the link is unset	 *	 * @param   JNode  &$child  The child to be added	 *	 * @return  void	 *	 * @since   11.1	 */	public function addChild(&$child)	{		JLog::add('JNode::addChild() is deprecated.', JLog::WARNING, 'deprecated');		if ($child instanceof Jnode)		{			$child->setParent($this);		}	}	/**	 * Set the parent of a this node	 *	 * If the node already has a parent, the link is unset	 *	 * @param   mixed  &$parent  The JNode for parent to be set or null	 *	 * @return  void	 *	 * @since    11.1	 */	public function setParent(&$parent)	{		JLog::add('JNode::setParent() is deprecated.', JLog::WARNING, 'deprecated');		if ($parent instanceof JNode || is_null($parent))		{			$hash = spl_object_hash($this);			if (!is_null($this->_parent))			{				unset($this->_parent->children[$hash]);			}			if (!is_null($parent))			{				$parent->_children[$hash] = & $this;			}			$this->_parent = & $parent;		}	}	/**	 * Get the children of this node	 *	 * @return  array    The children	 *	 * @since   11.1	 */	public function &getChildren()	{		JLog::add('JNode::getChildren() is deprecated.', JLog::WARNING, 'deprecated');		return $this->_children;	}	/**	 * Get the parent of this node	 *	 * @return  mixed   JNode object with the parent or null for no parent	 *	 * @since   11.1	 */	public function &getParent()	{		JLog::add('JNode::getParent() is deprecated.', JLog::WARNING, 'deprecated');		return $this->_parent;	}	/**	 * Test if this node has children	 *	 * @return   boolean  True if there are children	 *	 * @since    11.1	 */	public function hasChildren()	{		JLog::add('JNode::hasChildren() is deprecated.', JLog::WARNING, 'deprecated');		return (bool) count($this->_children);	}	/**	 * Test if this node has a parent	 *	 * @return  boolean  True if there is a parent	 *	 * @since   11.1	 */	public function hasParent()	{		JLog::add('JNode::hasParent() is deprecated.', JLog::WARNING, 'deprecated');		return $this->getParent() != null;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Pagination * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Pagination Class. Provides a common interface for content pagination for the * Joomla! Platform. * * @package     Joomla.Platform * @subpackage  Pagination * @since       11.1 */class JPagination{	/**	 * @var    integer  The record number to start displaying from.	 * @since  11.1	 */	public $limitstart = null;	/**	 * @var    integer  Number of rows to display per page.	 * @since  11.1	 */	public $limit = null;	/**	 * @var    integer  Total number of rows.	 * @since  11.1	 */	public $total = null;	/**	 * @var    integer  Prefix used for request variables.	 * @since  11.1	 */	public $prefix = null;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesStart;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesStop;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesCurrent;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesTotal;	/**	 * @var    boolean  View all flag	 * @since  12.1	 */	protected $viewall = false;	/**	 * Additional URL parameters to be added to the pagination URLs generated by the class.  These	 * may be useful for filters and extra values when dealing with lists and GET requests.	 *	 * @var    array	 * @since  12.1	 */	protected $additionalUrlParams = array();	/**	 * Constructor.	 *	 * @param   integer  $total       The total number of items.	 * @param   integer  $limitstart  The offset of the item to start at.	 * @param   integer  $limit       The number of items to display per page.	 * @param   string   $prefix      The prefix used for request variables.	 *	 * @since   11.1	 */	public function __construct($total, $limitstart, $limit, $prefix = '')	{		// Value/type checking.		$this->total = (int) $total;		$this->limitstart = (int) max($limitstart, 0);		$this->limit = (int) max($limit, 0);		$this->prefix = $prefix;		if ($this->limit > $this->total)		{			$this->limitstart = 0;		}		if (!$this->limit)		{			$this->limit = $total;			$this->limitstart = 0;		}		/*		 * If limitstart is greater than total (i.e. we are asked to display records that don't exist)		 * then set limitstart to display the last natural page of results		 */		if ($this->limitstart > $this->total - $this->limit)		{			$this->limitstart = max(0, (int) (ceil($this->total / $this->limit) - 1) * $this->limit);		}		// Set the total pages and current page values.		if ($this->limit > 0)		{			$this->pagesTotal = ceil($this->total / $this->limit);			$this->pagesCurrent = ceil(($this->limitstart + 1) / $this->limit);		}		// Set the pagination iteration loop values.		$displayedPages = 10;		$this->pagesStart = $this->pagesCurrent - ($displayedPages / 2);		if ($this->pagesStart < 1)		{			$this->pagesStart = 1;		}		if ($this->pagesStart + $displayedPages > $this->pagesTotal)		{			$this->pagesStop = $this->pagesTotal;			if ($this->pagesTotal < $displayedPages)			{				$this->pagesStart = 1;			}			else			{				$this->pagesStart = $this->pagesTotal - $displayedPages + 1;			}		}		else		{			$this->pagesStop = $this->pagesStart + $displayedPages - 1;		}		// If we are viewing all records set the view all flag to true.		if ($limit == 0)		{			$this->viewall = true;		}	}	/**	 * Method to set an additional URL parameter to be added to all pagination class generated	 * links.	 *	 * @param   string  $key    The name of the URL parameter for which to set a value.	 * @param   mixed   $value  The value to set for the URL parameter.	 *	 * @return  mixed  The old value for the parameter.	 *	 * @since   11.1	 */	public function setAdditionalUrlParam($key, $value)	{		// Get the old value to return and set the new one for the URL parameter.		$result = isset($this->additionalUrlParams[$key]) ? $this->additionalUrlParams[$key] : null;		// If the passed parameter value is null unset the parameter, otherwise set it to the given value.		if ($value === null)		{			unset($this->additionalUrlParams[$key]);		}		else		{			$this->additionalUrlParams[$key] = $value;		}		return $result;	}	/**	 * Method to get an additional URL parameter (if it exists) to be added to	 * all pagination class generated links.	 *	 * @param   string  $key  The name of the URL parameter for which to get the value.	 *	 * @return  mixed  The value if it exists or null if it does not.	 *	 * @since   11.1	 */	public function getAdditionalUrlParam($key)	{		$result = isset($this->additionalUrlParams[$key]) ? $this->additionalUrlParams[$key] : null;		return $result;	}	/**	 * Return the rationalised offset for a row with a given index.	 *	 * @param   integer  $index  The row index	 *	 * @return  integer  Rationalised offset for a row with a given index.	 *	 * @since   11.1	 */	public function getRowOffset($index)	{		return $index + 1 + $this->limitstart;	}	/**	 * Return the pagination data object, only creating it if it doesn't already exist.	 *	 * @return  object   Pagination data object.	 *	 * @since   11.1	 */	public function getData()	{		static $data;		if (!is_object($data))		{			$data = $this->_buildDataObject();		}		return $data;	}	/**	 * Create and return the pagination pages counter string, ie. Page 2 of 4.	 *	 * @return  string   Pagination pages counter string.	 *	 * @since   11.1	 */	public function getPagesCounter()	{		$html = null;		if ($this->pagesTotal > 1)		{			$html .= JText::sprintf('JLIB_HTML_PAGE_CURRENT_OF_TOTAL', $this->pagesCurrent, $this->pagesTotal);		}		return $html;	}	/**	 * Create and return the pagination result set counter string, e.g. Results 1-10 of 42	 *	 * @return  string   Pagination result set counter string.	 *	 * @since   11.1	 */	public function getResultsCounter()	{		$html = null;		$fromResult = $this->limitstart + 1;		// If the limit is reached before the end of the list.		if ($this->limitstart + $this->limit < $this->total)		{			$toResult = $this->limitstart + $this->limit;		}		else		{			$toResult = $this->total;		}		// If there are results found.		if ($this->total > 0)		{			$msg = JText::sprintf('JLIB_HTML_RESULTS_OF', $fromResult, $toResult, $this->total);			$html .= "\n" . $msg;		}		else		{			$html .= "\n" . JText::_('JLIB_HTML_NO_RECORDS_FOUND');		}		return $html;	}	/**	 * Create and return the pagination page list string, ie. Previous, Next, 1 2 3 ... x.	 *	 * @return  string  Pagination page list string.	 *	 * @since   11.1	 */	public function getPagesLinks()	{		$app = JFactory::getApplication();		// Build the page navigation list.		$data = $this->_buildDataObject();		$list = array();		$list['prefix'] = $this->prefix;		$itemOverride = false;		$listOverride = false;		$chromePath = JPATH_THEMES . '/' . $app->getTemplate() . '/html/pagination.php';		if (file_exists($chromePath))		{			include_once $chromePath;			if (function_exists('pagination_item_active') && function_exists('pagination_item_inactive'))			{				$itemOverride = true;			}			if (function_exists('pagination_list_render'))			{				$listOverride = true;			}		}		// Build the select list		if ($data->all->base !== null)		{			$list['all']['active'] = true;			$list['all']['data'] = ($itemOverride) ? pagination_item_active($data->all) : $this->_item_active($data->all);		}		else		{			$list['all']['active'] = false;			$list['all']['data'] = ($itemOverride) ? pagination_item_inactive($data->all) : $this->_item_inactive($data->all);		}		if ($data->start->base !== null)		{			$list['start']['active'] = true;			$list['start']['data'] = ($itemOverride) ? pagination_item_active($data->start) : $this->_item_active($data->start);		}		else		{			$list['start']['active'] = false;			$list['start']['data'] = ($itemOverride) ? pagination_item_inactive($data->start) : $this->_item_inactive($data->start);		}		if ($data->previous->base !== null)		{			$list['previous']['active'] = true;			$list['previous']['data'] = ($itemOverride) ? pagination_item_active($data->previous) : $this->_item_active($data->previous);		}		else		{			$list['previous']['active'] = false;			$list['previous']['data'] = ($itemOverride) ? pagination_item_inactive($data->previous) : $this->_item_inactive($data->previous);		}		// Make sure it exists		$list['pages'] = array();		foreach ($data->pages as $i => $page)		{			if ($page->base !== null)			{				$list['pages'][$i]['active'] = true;				$list['pages'][$i]['data'] = ($itemOverride) ? pagination_item_active($page) : $this->_item_active($page);			}			else			{				$list['pages'][$i]['active'] = false;				$list['pages'][$i]['data'] = ($itemOverride) ? pagination_item_inactive($page) : $this->_item_inactive($page);			}		}		if ($data->next->base !== null)		{			$list['next']['active'] = true;			$list['next']['data'] = ($itemOverride) ? pagination_item_active($data->next) : $this->_item_active($data->next);		}		else		{			$list['next']['active'] = false;			$list['next']['data'] = ($itemOverride) ? pagination_item_inactive($data->next) : $this->_item_inactive($data->next);		}		if ($data->end->base !== null)		{			$list['end']['active'] = true;			$list['end']['data'] = ($itemOverride) ? pagination_item_active($data->end) : $this->_item_active($data->end);		}		else		{			$list['end']['active'] = false;			$list['end']['data'] = ($itemOverride) ? pagination_item_inactive($data->end) : $this->_item_inactive($data->end);		}		if ($this->total > $this->limit)		{			return ($listOverride) ? pagination_list_render($list) : $this->_list_render($list);		}		else		{			return '';		}	}	/**	 * Return the pagination footer.	 *	 * @return  string   Pagination footer.	 *	 * @since   11.1	 */	public function getListFooter()	{		$app = JFactory::getApplication();		$list = array();		$list['prefix'] = $this->prefix;		$list['limit'] = $this->limit;		$list['limitstart'] = $this->limitstart;		$list['total'] = $this->total;		$list['limitfield'] = $this->getLimitBox();		$list['pagescounter'] = $this->getPagesCounter();		$list['pageslinks'] = $this->getPagesLinks();		$chromePath = JPATH_THEMES . '/' . $app->getTemplate() . '/html/pagination.php';		if (file_exists($chromePath))		{			include_once $chromePath;			if (function_exists('pagination_list_footer'))			{				return pagination_list_footer($list);			}		}		return $this->_list_footer($list);	}	/**	 * Creates a dropdown box for selecting how many records to show per page.	 *	 * @return  string  The HTML for the limit # input box.	 *	 * @since   11.1	 */	public function getLimitBox()	{		$app = JFactory::getApplication();		$limits = array();		// Make the option list.		for ($i = 5; $i <= 30; $i += 5)		{			$limits[] = JHtml::_('select.option', "$i");		}		$limits[] = JHtml::_('select.option', '50', JText::_('J50'));		$limits[] = JHtml::_('select.option', '100', JText::_('J100'));		$limits[] = JHtml::_('select.option', '0', JText::_('JALL'));		$selected = $this->viewall ? 0 : $this->limit;		// Build the select list.		if ($app->isAdmin())		{			$html = JHtml::_(				'select.genericlist',				$limits,				$this->prefix . 'limit',				'class="inputbox input-mini" size="1" onchange="Joomla.submitform();"',				'value',				'text',				$selected			);		}		else		{			$html = JHtml::_(				'select.genericlist',				$limits,				$this->prefix . 'limit',				'class="inputbox input-mini" size="1" onchange="this.form.submit()"',				'value',				'text',				$selected			);		}		return $html;	}	/**	 * Return the icon to move an item UP.	 *	 * @param   integer  $i          The row index.	 * @param   boolean  $condition  True to show the icon.	 * @param   string   $task       The task to fire.	 * @param   string   $alt        The image alternative text string.	 * @param   boolean  $enabled    An optional setting for access control on the action.	 * @param   string   $checkbox   An optional prefix for checkboxes.	 *	 * @return  string   Either the icon to move an item up or a space.	 *	 * @since   11.1	 */	public function orderUpIcon($i, $condition = true, $task = 'orderup', $alt = 'JLIB_HTML_MOVE_UP', $enabled = true, $checkbox = 'cb')	{		if (($i > 0 || ($i + $this->limitstart > 0)) && $condition)		{			return JHtml::_('jgrid.orderUp', $i, $task, '', $alt, $enabled, $checkbox);		}		else		{			return '&#160;';		}	}	/**	 * Return the icon to move an item DOWN.	 *	 * @param   integer  $i          The row index.	 * @param   integer  $n          The number of items in the list.	 * @param   boolean  $condition  True to show the icon.	 * @param   string   $task       The task to fire.	 * @param   string   $alt        The image alternative text string.	 * @param   boolean  $enabled    An optional setting for access control on the action.	 * @param   string   $checkbox   An optional prefix for checkboxes.	 *	 * @return  string   Either the icon to move an item down or a space.	 *	 * @since   11.1	 */	public function orderDownIcon($i, $n, $condition = true, $task = 'orderdown', $alt = 'JLIB_HTML_MOVE_DOWN', $enabled = true, $checkbox = 'cb')	{		if (($i < $n - 1 || $i + $this->limitstart < $this->total - 1) && $condition)		{			return JHtml::_('jgrid.orderDown', $i, $task, '', $alt, $enabled, $checkbox);		}		else		{			return '&#160;';		}	}	/**	 * Create the HTML for a list footer	 *	 * @param   array  $list  Pagination list data structure.	 *	 * @return  string  HTML for a list footer	 *	 * @since   11.1	 */	protected function _list_footer($list)	{		$html = "<div class=\"list-footer\">\n";		$html .= "\n<div class=\"limit\">" . JText::_('JGLOBAL_DISPLAY_NUM') . $list['limitfield'] . "</div>";		$html .= $list['pageslinks'];		$html .= "\n<div class=\"counter\">" . $list['pagescounter'] . "</div>";		$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"" . $list['limitstart'] . "\" />";		$html .= "\n</div>";		return $html;	}	/**	 * Create the html for a list footer	 *	 * @param   array  $list  Pagination list data structure.	 *	 * @return  string  HTML for a list start, previous, next,end	 *	 * @since   11.1	 */	protected function _list_render($list)	{		// Reverse output rendering for right-to-left display.		$html = '<ul>';		$html .= '<li class="pagination-start">' . $list['start']['data'] . '</li>';		$html .= '<li class="pagination-prev">' . $list['previous']['data'] . '</li>';		foreach ($list['pages'] as $page)		{			$html .= '<li>' . $page['data'] . '</li>';		}		$html .= '<li class="pagination-next">' . $list['next']['data'] . '</li>';		$html .= '<li class="pagination-end">' . $list['end']['data'] . '</li>';		$html .= '</ul>';		return $html;	}	/**	 * Method to create an active pagination link to the item	 *	 * @param   JPaginationObject  $item  The object with which to make an active link.	 *	 * @return   string  HTML link	 *	 * @since    11.1	 */	protected function _item_active(JPaginationObject $item)	{		$app = JFactory::getApplication();		if ($app->isAdmin())		{			if ($item->base > 0)			{				return "<a title=\"" . $item->text . "\" onclick=\"document.adminForm." . $this->prefix . "limitstart.value=" . $item->base					. "; Joomla.submitform();return false;\">" . $item->text . "</a>";			}			else			{				return "<a title=\"" . $item->text . "\" onclick=\"document.adminForm." . $this->prefix					. "limitstart.value=0; Joomla.submitform();return false;\">" . $item->text . "</a>";			}		}		else		{			return "<a title=\"" . $item->text . "\" href=\"" . $item->link . "\" class=\"pagenav\">" . $item->text . "</a>";		}	}	/**	 * Method to create an inactive pagination string	 *	 * @param   JPaginationObject  $item  The item to be processed	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _item_inactive(JPaginationObject $item)	{		$app = JFactory::getApplication();		if ($app->isAdmin())		{			return "<span>" . $item->text . "</span>";		}		else		{			return "<span class=\"pagenav\">" . $item->text . "</span>";		}	}	/**	 * Create and return the pagination data object.	 *	 * @return  object  Pagination data object.	 *	 * @since   11.1	 */	protected function _buildDataObject()	{		$data = new stdClass;		// Build the additional URL parameters string.		$params = '';		if (!empty($this->additionalUrlParams))		{			foreach ($this->additionalUrlParams as $key => $value)			{				$params .= '&' . $key . '=' . $value;			}		}		$data->all = new JPaginationObject(JText::_('JLIB_HTML_VIEW_ALL'), $this->prefix);		if (!$this->viewall)		{			$data->all->base = '0';			$data->all->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=');		}		// Set the start and previous data objects.		$data->start = new JPaginationObject(JText::_('JLIB_HTML_START'), $this->prefix);		$data->previous = new JPaginationObject(JText::_('JPREV'), $this->prefix);		if ($this->pagesCurrent > 1)		{			$page = ($this->pagesCurrent - 2) * $this->limit;			// Set the empty for removal from route			// @todo remove code: $page = $page == 0 ? '' : $page;			$data->start->base = '0';			$data->start->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=0');			$data->previous->base = $page;			$data->previous->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $page);		}		// Set the next and end data objects.		$data->next = new JPaginationObject(JText::_('JNEXT'), $this->prefix);		$data->end = new JPaginationObject(JText::_('JLIB_HTML_END'), $this->prefix);		if ($this->pagesCurrent < $this->pagesTotal)		{			$next = $this->pagesCurrent * $this->limit;			$end = ($this->pagesTotal - 1) * $this->limit;			$data->next->base = $next;			$data->next->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $next);			$data->end->base = $end;			$data->end->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $end);		}		$data->pages = array();		$stop = $this->pagesStop;		for ($i = $this->pagesStart; $i <= $stop; $i++)		{			$offset = ($i - 1) * $this->limit;			// Set the empty for removal from route			// @todo remove code: $offset = $offset == 0 ? '' : $offset;			$data->pages[$i] = new JPaginationObject($i, $this->prefix);			if ($i != $this->pagesCurrent || $this->viewall)			{				$data->pages[$i]->base = $offset;				$data->pages[$i]->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $offset);			}			elseif ($i = $this->pagesCurrent)			{				$data->pages[$i]->active = true;			}		}		return $data;	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set.	 *	 * @return  void	 *	 * @since   12.2	 * @deprecated  13.3  Access the properties directly.	 */	public function set($property, $value = null)	{		JLog::add('JPagination::set() is deprecated. Access the properties directly.', JLog::WARNING, 'deprecated');		if (strpos($property, '.'))		{			$prop = explode('.', $property);			$prop[1] = ucfirst($prop[1]);			$property = implode($prop);		}		$this->$property = $value;	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed    The value of the property.	 *	 * @since   12.2	 * @deprecated  13.3  Access the properties directly.	 */	public function get($property, $default = null)	{		JLog::add('JPagination::get() is deprecated. Access the properties directly.', JLog::WARNING, 'deprecated');		if (strpos($property, '.'))		{			$prop = explode('.', $property);			$prop[1] = ucfirst($prop[1]);			$property = implode($prop);		}		if (isset($this->$property))		{			return $this->$property;		}		return $default;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset title="<?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?>" class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?></legend>	<?php echo JText::_('COM_CONFIG_FTP_DETAILS_TIP'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p><?php echo JText::_($this->ftp->message); ?></p>	<?php endif; ?>	<div class="control-group">		<div class="control-label"><label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label></div>		<div class="controls"><input type="text" id="username" name="username" class="input_box" size="70" value="" /></div>	</div>	<div class="control-group">		<div class="control-label"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></div>		<div class="controls"><input type="password" id="password" name="password" class="input_box" size="70" value="" /></div>	</div></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  mod_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	function iFrameHeight()	{		var h = 0;		if (!document.all)		{			h = document.getElementById('blockrandom').contentDocument.height;			document.getElementById('blockrandom').style.height = h + 60 + 'px';		} else if (document.all)		{			h = document.frames('blockrandom').document.body.scrollHeight;			document.all.blockrandom.style.height = h + 20 + 'px';		}	}</script><iframe <?php echo $load; ?>	id="blockrandom"	name="<?php echo $target ?>"	src="<?php echo $url; ?>"	width="<?php echo $width ?>"	height="<?php echo $height ?>"	scrolling="<?php echo $scroll ?>"	frameborder="<?php echo $frameborder?>"	class="wrapper<?php echo $moduleclass_sfx ?>" >	<?php echo JText::_('MOD_WRAPPER_NO_IFRAMES'); ?></iframe>
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Model Interface * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */interface JModel{	/**	 * Get the model state.	 *	 * @return  JRegistry  The state object.	 *	 * @since   12.1	 */	public function getState();	/**	 * Set the model state.	 *	 * @param   JRegistry  $state  The state object.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setState(JRegistry $state);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect master display controller. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'links';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/redirect.php';		// Load the submenu.		RedirectHelper::addSubmenu($this->input->get('view', 'links'));		$view   = $this->input->get('view', 'links');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'link' && $layout == 'edit' && !$this->checkEditId('com_redirect.edit.link', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_redirect&view=links', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.support.stringcontroller');/** * String Stream Wrapper * * This class allows you to use a PHP string in the same way that * you would normally use a regular stream wrapper * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JStreamString{	/**	 * The current string	 *	 * @var   string	 * @since  12.1	 */	protected $currentString;	/**	 *	 * The path	 *	 * @var   string	 * @since  12.1	 */	protected $path;	/**	 *	 * The mode	 *	 * @var   string	 * @since  12.1	 */	protected $mode;	/**	 *	 * Enter description here ...	 * @var   string	 *	 * @since  12.1	 */	protected $options;	/**	 *	 * Enter description here ...	 * @var   string	 *	 * @since  12.1	 */	protected $openedPath;	/**	 * Current position	 *	 * @var   integer	 * @since  12.1	 */	protected $pos;	/**	 * Length of the string	 *	 * @var   string	 *	 * @since  12.1	 */	protected $len;	/**	 * Statistics for a file	 *	 * @var    array	 * @since  12.1	 *	 * @see    http://us.php.net/manual/en/function.stat.php	 */	protected $stat;	/**	 * Method to open a file or URL.	 *	 * @param   string   $path          The stream path.	 * @param   string   $mode          Not used.	 * @param   integer  $options       Not used.	 * @param   string   &$opened_path  Not used.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function stream_open($path, $mode, $options, &$opened_path)	{		$this->currentString = &JStringController::getRef(str_replace('string://', '', $path));		if ($this->currentString)		{			$this->len = strlen($this->currentString);			$this->pos = 0;			$this->stat = $this->url_stat($path, 0);			return true;		}		else		{			return false;		}	}	/**	 * Method to retrieve information from a file resource	 *	 * @return  array	 *	 * @see     http://www.php.net/manual/en/streamwrapper.stream-stat.php	 * @since   11.1	 */	public function stream_stat()	{		return $this->stat;	}	/**	 * Method to retrieve information about a file.	 *	 * @param   string   $path   File path or URL to stat	 * @param   integer  $flags  Additional flags set by the streams API	 *	 * @return  array	 *	 * @see     http://php.net/manual/en/streamwrapper.url-stat.php	 * @since   11.1	 */	public function url_stat($path, $flags = 0)	{		$now = time();		$string = &JStringController::getRef(str_replace('string://', '', $path));		$stat = array(			'dev' => 0,			'ino' => 0,			'mode' => 0,			'nlink' => 1,			'uid' => 0,			'gid' => 0,			'rdev' => 0,			'size' => strlen($string),			'atime' => $now,			'mtime' => $now,			'ctime' => $now,			'blksize' => '512',			'blocks' => ceil(strlen($string) / 512));		return $stat;	}	/**	 * Method to read a given number of bytes starting at the current position	 * and moving to the end of the string defined by the current position plus the	 * given number.	 *	 * @param   integer  $count  Bytes of data from the current position should be returned.	 *	 * @return  void	 *	 * @since   11.1	 *	 * @see     http://www.php.net/manual/en/streamwrapper.stream-read.php	 */	public function stream_read($count)	{		$result = substr($this->currentString, $this->pos, $count);		$this->pos += $count;		return $result;	}	/**	 * Stream write, always returning false.	 *	 * @param   string  $data  The data to write.	 *	 * @return  boolean	 *	 * @since   11.1	 * @note    Updating the string is not supported.	 */	public function stream_write($data)	{		// We don't support updating the string.		return false;	}	/**	 * Method to get the current position	 *	 * @return  integer  The position	 *	 * @since   11.1	 */	public function stream_tell()	{		return $this->pos;	}	/**	 * End of field check	 *	 * @return  boolean  True if at end of field.	 *	 * @since   11.1	 */	public function stream_eof()	{		if ($this->pos > $this->len)		{			return true;		}		return false;	}	/**	 * Stream offset	 *	 * @param   integer  $offset  The starting offset.	 * @param   integer  $whence  SEEK_SET, SEEK_CUR, SEEK_END	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function stream_seek($offset, $whence)	{		// $whence: SEEK_SET, SEEK_CUR, SEEK_END		if ($offset > $this->len)		{			// We can't seek beyond our len.			return false;		}		switch ($whence)		{			case SEEK_SET:				$this->pos = $offset;				break;			case SEEK_CUR:				if (($this->pos + $offset) < $this->len)				{					$this->pos += $offset;				}				else				{					return false;				}				break;			case SEEK_END:				$this->pos = $this->len - $offset;				break;		}		return true;	}	/**	 * Stream flush, always returns true.	 *	 * @return  boolean	 *	 * @since   11.1	 * @note    Data storage is not supported	 */	public function stream_flush()	{		// We don't store data.		return true;	}}stream_wrapper_register('string', 'JStreamString') or die('JStreamString Wrapper Registration Failed');
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class for using cURL. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpTransportCurl implements JHttpTransport{	/**	 * @var    JRegistry  The client options.	 * @since  11.3	 */	protected $options;	/**	 * Constructor. CURLOPT_FOLLOWLOCATION must be disabled when open_basedir or safe_mode are enabled.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @see     http://www.php.net/manual/en/function.curl-setopt.php	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct(JRegistry $options)	{		if (!function_exists('curl_init') || !is_callable('curl_init'))		{			throw new RuntimeException('Cannot use a cURL transport when curl_init() is not available.');		}		$this->options = $options;	}	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null)	{		// Setup the cURL handle.		$ch = curl_init();		// Set the request method.		$options[CURLOPT_CUSTOMREQUEST] = strtoupper($method);		// Don't wait for body when $method is HEAD		$options[CURLOPT_NOBODY] = ($method === 'HEAD');		// Initialize the certificate store		$options[CURLOPT_CAINFO] = $this->options->get('curl.certpath', __DIR__ . '/cacert.pem');		// If data exists let's encode it and make sure our Content-type header is set.		if (isset($data))		{			// If the data is a scalar value simply add it to the cURL post fields.			if (is_scalar($data) || (isset($headers['Content-Type']) && strpos($headers['Content-Type'], 'multipart/form-data') === 0))			{				$options[CURLOPT_POSTFIELDS] = $data;			}			// Otherwise we need to encode the value first.			else			{				$options[CURLOPT_POSTFIELDS] = http_build_query($data);			}			if (!isset($headers['Content-Type']))			{				$headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';			}			// Add the relevant headers.			if (is_scalar($options[CURLOPT_POSTFIELDS]))			{				$headers['Content-Length'] = strlen($options[CURLOPT_POSTFIELDS]);			}		}		// Build the headers string for the request.		$headerArray = array();		if (isset($headers))		{			foreach ($headers as $key => $value)			{				$headerArray[] = $key . ': ' . $value;			}			// Add the headers string into the stream context options array.			$options[CURLOPT_HTTPHEADER] = $headerArray;		}		// If an explicit timeout is given user it.		if (isset($timeout))		{			$options[CURLOPT_TIMEOUT] = (int) $timeout;			$options[CURLOPT_CONNECTTIMEOUT] = (int) $timeout;		}		// If an explicit user agent is given use it.		if (isset($userAgent))		{			$headers[CURLOPT_USERAGENT] = $userAgent;		}		// Set the request URL.		$options[CURLOPT_URL] = (string) $uri;		// We want our headers. :-)		$options[CURLOPT_HEADER] = true;		// Return it... echoing it would be tacky.		$options[CURLOPT_RETURNTRANSFER] = true;		// Override the Expect header to prevent cURL from confusing itself in its own stupidity.		// Link: http://the-stickman.com/web-development/php-and-curl-disabling-100-continue-header/		$options[CURLOPT_HTTPHEADER][] = 'Expect:';		// Follow redirects.		$options[CURLOPT_FOLLOWLOCATION] = (bool) $this->options->get('follow_location', true);		// Set the cURL options.		curl_setopt_array($ch, $options);		// Execute the request and close the connection.		$content = curl_exec($ch);		// Get the request information.		$info = curl_getinfo($ch);		// Close the connection.		curl_close($ch);		return $this->getResponse($content, $info);	}	/**	 * Method to get a response object from a server response.	 *	 * @param   string  $content  The complete server response, including headers.	 * @param   array   $info     The cURL request information.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  UnexpectedValueException	 */	protected function getResponse($content, $info)	{		// Create the response object.		$return = new JHttpResponse;		// Check if the content is actually a string.		if (!is_string($content))		{			throw new UnexpectedValueException('No HTTP response received.');		}		// Get the number of redirects that occurred.		$redirects = isset($info['redirect_count']) ? $info['redirect_count'] : 0;		/*		 * Split the response into headers and body. If cURL encountered redirects, the headers for the redirected requests will		 * also be included. So we split the response into header + body + the number of redirects and only use the last two		 * sections which should be the last set of headers and the actual body.		 */		$response = explode("\r\n\r\n", $content, 2 + $redirects);		// Set the body for the response.		$return->body = array_pop($response);		// Get the last set of response headers as an array.		$headers = explode("\r\n", array_pop($response));		// Get the response code from the first offset of the response headers.		preg_match('/[0-9]{3}/', array_shift($headers), $matches);		$code = count($matches) ? $matches[0] : null;		if (is_numeric($code))		{			$return->code = (int) $code;		}		// No valid response code was detected.		else		{			throw new UnexpectedValueException('No HTTP response code found.');		}		// Add the response headers to the response object.		foreach ($headers as $header)		{			$pos = strpos($header, ':');			$return->headers[trim(substr($header, 0, $pos))] = trim(substr($header, ($pos + 1)));		}		return $return;	}	/**	 * Method to check if HTTP transport cURL is available for use	 *	 * @return boolean true if available, else false	 *	 * @since   12.1	 */	static public function isSupported()	{		return function_exists('curl_version') && curl_version();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Sysinfo View class for the Admin component * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminViewSysinfo extends JViewLegacy{	/**	 * @var array some php settings	 */	protected $php_settings = null;	/**	 * @var array config values	 */	protected $config = null;	/**	 * @var array somme system values	 */	protected $info = null;	/**	 * @var string php info	 */	protected $php_info = null;	/**	 * @var array informations about writable state of directories	 */	protected $directory = null;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Access check.		if (!JFactory::getUser()->authorise('core.admin'))		{			return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));		}		$this->php_settings	= $this->get('PhpSettings');		$this->config		= $this->get('config');		$this->info			= $this->get('info');		$this->php_info		= $this->get('PhpInfo');		$this->directory	= $this->get('directory');		$this->addToolbar();		$this->_setSubMenu();		parent::display($tpl);	}	/**	 * Setup the SubMenu	 *	 * @return  void	 *	 * @since   1.6	 * @note    Necessary for Hathor compatibility	 */	protected function _setSubMenu()	{		try		{			$contents = $this->loadTemplate('navigation');			$document = JFactory::getDocument();			$document->setBuffer($contents, 'modules', 'submenu');		}		catch (Exception $e)		{		}	}	/**	 * Setup the Toolbar	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_ADMIN_SYSTEM_INFORMATION'), 'systeminfo.png');		JToolbarHelper::help('JHELP_SITE_SYSTEM_INFORMATION');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesControllerInstalled extends JControllerLegacy{	/**	 * task to set the default language	 */	public function setDefault()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$cid = $this->input->get('cid', '');		$model = $this->getModel('installed');		if ($model->publish($cid))		{			$msg = JText::_('COM_LANGUAGES_MSG_DEFAULT_LANGUAGE_SAVED');			$type = 'message';		}		else		{			$msg = $this->getError();			$type = 'error';		}		$clientId = $model->getState('filter.client_id');		$this->setredirect('index.php?option=com_languages&view=installed&client='.$clientId, $msg, $type);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note. It is important to remove spaces between elements.?><?php // The menu class is deprecated. Use nav instead. ?><ul class="nav menu<?php echo $class_sfx;?>"<?php	$tag = '';	if ($params->get('tag_id') != null)	{		$tag = $params->get('tag_id').'';		echo ' id="'.$tag.'"';	}?>><?phpforeach ($list as $i => &$item) :	$class = 'item-'.$item->id;	if ($item->id == $active_id)	{		$class .= ' current';	}	if (in_array($item->id, $path))	{		$class .= ' active';	}	elseif ($item->type == 'alias')	{		$aliasToId = $item->params->get('aliasoptions');		if (count($path) > 0 && $aliasToId == $path[count($path) - 1])		{			$class .= ' active';		}		elseif (in_array($aliasToId, $path))		{			$class .= ' alias-parent-active';		}	}	if ($item->type == 'separator')	{		$class .= ' divider';	}	if ($item->deeper)	{		$class .= ' deeper';	}	if ($item->parent)	{		$class .= ' parent';	}	if (!empty($class))	{		$class = ' class="'.trim($class) .'"';	}	echo '<li'.$class.'>';	// Render the menu item.	switch ($item->type) :		case 'separator':		case 'url':		case 'component':		case 'heading':			require JModuleHelper::getLayoutPath('mod_menu', 'default_'.$item->type);			break;		default:			require JModuleHelper::getLayoutPath('mod_menu', 'default_url');			break;	endswitch;	// The next item is deeper.	if ($item->deeper)	{		echo '<ul class="nav-child unstyled small">';	}	// The next item is shallower.	elseif ($item->shallower)	{		echo '</li>';		echo str_repeat('</ul></li>', $item->level_diff);	}	// The next item is on the same level.	else {		echo '</li>';	}endforeach;?></ul>
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;if (!defined('JPATH_ROOT')){	// Define a string constant for the root directory of the file system in native format	define('JPATH_ROOT', JPath::clean(JPATH_SITE));}/** * A Path handling class * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JPath{	/**	 * Checks if a path's permissions can be changed.	 *	 * @param   string  $path  Path to check.	 *	 * @return  boolean  True if path can have mode changed.	 *	 * @since   11.1	 */	public static function canChmod($path)	{		$perms = fileperms($path);		if ($perms !== false)		{			if (@chmod($path, $perms ^ 0001))			{				@chmod($path, $perms);				return true;			}		}		return false;	}	/**	 * Chmods files and directories recursively to given permissions.	 *	 * @param   string  $path        Root path to begin changing mode [without trailing slash].	 * @param   string  $filemode    Octal representation of the value to change file mode to [null = no change].	 * @param   string  $foldermode  Octal representation of the value to change folder mode to [null = no change].	 *	 * @return  boolean  True if successful [one fail means the whole operation failed].	 *	 * @since   11.1	 */	public static function setPermissions($path, $filemode = '0644', $foldermode = '0755')	{		// Initialise return value		$ret = true;		if (is_dir($path))		{			$dh = opendir($path);			while ($file = readdir($dh))			{				if ($file != '.' && $file != '..')				{					$fullpath = $path . '/' . $file;					if (is_dir($fullpath))					{						if (!self::setPermissions($fullpath, $filemode, $foldermode))						{							$ret = false;						}					}					else					{						if (isset($filemode))						{							if (!@ chmod($fullpath, octdec($filemode)))							{								$ret = false;							}						}					}				}			}			closedir($dh);			if (isset($foldermode))			{				if (!@ chmod($path, octdec($foldermode)))				{					$ret = false;				}			}		}		else		{			if (isset($filemode))			{				$ret = @ chmod($path, octdec($filemode));			}		}		return $ret;	}	/**	 * Get the permissions of the file/folder at a give path.	 *	 * @param   string  $path  The path of a file/folder.	 *	 * @return  string  Filesystem permissions.	 *	 * @since   11.1	 */	public static function getPermissions($path)	{		$path = self::clean($path);		$mode = @ decoct(@ fileperms($path) & 0777);		if (strlen($mode) < 3)		{			return '---------';		}		$parsed_mode = '';		for ($i = 0; $i < 3; $i++)		{			// Read			$parsed_mode .= ($mode{$i} & 04) ? "r" : "-";			// Write			$parsed_mode .= ($mode{$i} & 02) ? "w" : "-";			// Execute			$parsed_mode .= ($mode{$i} & 01) ? "x" : "-";		}		return $parsed_mode;	}	/**	 * Checks for snooping outside of the file system root.	 *	 * @param   string  $path  A file system path to check.	 * @param   string  $ds    Directory separator (optional).	 *	 * @return  string  A cleaned version of the path or exit on error.	 *	 * @since   11.1	 * @throws  Exception	 */	public static function check($path, $ds = DIRECTORY_SEPARATOR)	{		if (strpos($path, '..') !== false)		{			// Don't translate			throw new Exception('JPath::check Use of relative paths not permitted', 20);		}		$path = self::clean($path);		if ((JPATH_ROOT != '') && strpos($path, self::clean(JPATH_ROOT)) !== 0)		{			throw new Exception('JPath::check Snooping out of bounds @ ' . $path, 20);		}		return $path;	}	/**	 * Function to strip additional / or \ in a path name.	 *	 * @param   string  $path  The path to clean.	 * @param   string  $ds    Directory separator (optional).	 *	 * @return  string  The cleaned path.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public static function clean($path, $ds = DIRECTORY_SEPARATOR)	{		if (!is_string($path))		{			throw new UnexpectedValueException('JPath::clean: $path is not a string.');		}		$path = trim($path);		if (empty($path))		{			$path = JPATH_ROOT;		}		// Remove double slashes and backslashes and convert all slashes and backslashes to DIRECTORY_SEPARATOR		// If dealing with a UNC path don't forget to prepend the path with a backslash.		elseif (($ds == '\\') && ($path[0] == '\\' ) && ( $path[1] == '\\' ))		{			$path = "\\" . preg_replace('#[/\\\\]+#', $ds, $path);		}		else		{			$path = preg_replace('#[/\\\\]+#', $ds, $path);		}		return $path;	}	/**	 * Method to determine if script owns the path.	 *	 * @param   string  $path  Path to check ownership.	 *	 * @return  boolean  True if the php script owns the path passed.	 *	 * @since   11.1	 */	public static function isOwner($path)	{		jimport('joomla.filesystem.file');		$tmp = md5(mt_rand());		$ssp = ini_get('session.save_path');		$jtp = JPATH_SITE . '/tmp';		// Try to find a writable directory		$dir = is_writable('/tmp') ? '/tmp' : false;		$dir = (!$dir && is_writable($ssp)) ? $ssp : false;		$dir = (!$dir && is_writable($jtp)) ? $jtp : false;		if ($dir)		{			$test = $dir . '/' . $tmp;			// Create the test file			$blank = '';			JFile::write($test, $blank, false);			// Test ownership			$return = (fileowner($test) == fileowner($path));			// Delete the test file			JFile::delete($test);			return $return;		}		return false;	}	/**	 * Searches the directory paths for a given file.	 *	 * @param   mixed   $paths  An path string or array of path strings to search in	 * @param   string  $file   The file name to look for.	 *	 * @return  mixed   The full path and file name for the target file, or boolean false if the file is not found in any of the paths.	 *	 * @since   11.1	 */	public static function find($paths, $file)	{		// Force to array		if (!is_array($paths) && !($paths instanceof Iterator))		{			settype($paths, 'array');		}		// Start looping through the path set		foreach ($paths as $path)		{			// Get the path to the file			$fullname = $path . '/' . $file;			// Is the path based on a stream?			if (strpos($path, '://') === false)			{				// Not a stream, so do a realpath() to avoid directory				// traversal attempts on the local file system.				// Needed for substr() later				$path = realpath($path);				$fullname = realpath($fullname);			}			/*			 * The substr() check added to make sure that the realpath()			 * results in a directory registered so that			 * non-registered directories are not accessible via directory			 * traversal attempts.			 */			if (file_exists($fullname) && substr($fullname, 0, strlen($path)) == $path)			{				return $fullname;			}		}		// Could not find the file in the set of paths		return false;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/route.php';$controller = JControllerLegacy::getInstance('Finder');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Environment * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JResponse Class. * * This class serves to provide the Joomla Platform with a common interface to access * response variables.  This includes header and body. * * @package     Joomla.Platform * @subpackage  Environment * @since       11.1 */class JResponse{	/**	 * @var    array  Body	 * @since  11.1	 */	protected static $body = array();	/**	 * @var    boolean  Cachable	 * @since  11.1	 */	protected static $cachable = false;	/**	 * @var    array  Headers	 * @since  11.1	 */	protected static $headers = array();	/**	 * Set/get cachable state for the response.	 *	 * If $allow is set, sets the cachable state of the response.  Always returns current state.	 *	 * @param   boolean  $allow  True to allow browser caching.	 *	 * @return  boolean  True if browser caching should be allowed	 *	 * @since   11.1	 */	public static function allowCache($allow = null)	{		if (!is_null($allow))		{			self::$cachable = (bool) $allow;		}		return self::$cachable;	}	/**	 * Set a header.	 *	 * If $replace is true, replaces any headers already defined with that $name.	 *	 * @param   string   $name     The name of the header to set.	 * @param   string   $value    The value of the header to set.	 * @param   boolean  $replace  True to replace any existing headers by name.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setHeader($name, $value, $replace = false)	{		$name = (string) $name;		$value = (string) $value;		if ($replace)		{			foreach (self::$headers as $key => $header)			{				if ($name == $header['name'])				{					unset(self::$headers[$key]);				}			}		}		self::$headers[] = array('name' => $name, 'value' => $value);	}	/**	 * Return array of headers.	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getHeaders()	{		return self::$headers;	}	/**	 * Clear headers.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function clearHeaders()	{		self::$headers = array();	}	/**	 * Send all headers.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function sendHeaders()	{		if (!headers_sent())		{			foreach (self::$headers as $header)			{				if ('status' == strtolower($header['name']))				{					// 'status' headers indicate an HTTP status, and need to be handled slightly differently					header(ucfirst(strtolower($header['name'])) . ': ' . $header['value'], null, (int) $header['value']);				}				else				{					header($header['name'] . ': ' . $header['value'], false);				}			}		}	}	/**	 * Set body content.	 *	 * If body content already defined, this will replace it.	 *	 * @param   string  $content  The content to set to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setBody($content)	{		self::$body = array((string) $content);	}	/**	 * Prepend content to the body content	 *	 * @param   string  $content  The content to prepend to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function prependBody($content)	{		array_unshift(self::$body, (string) $content);	}	/**	 * Append content to the body content	 *	 * @param   string  $content  The content to append to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function appendBody($content)	{		array_push(self::$body, (string) $content);	}	/**	 * Return the body content	 *	 * @param   boolean  $toArray  Whether or not to return the body content as an array of strings or as a single string; defaults to false.	 *	 * @return  string  array	 *	 * @since   11.1	 */	public static function getBody($toArray = false)	{		if ($toArray)		{			return self::$body;		}		ob_start();		foreach (self::$body as $content)		{			echo $content;		}		return ob_get_clean();	}	/**	 * Sends all headers prior to returning the string	 *	 * @param   boolean  $compress  If true, compress the data	 *	 * @return  string	 *	 * @since   11.1	 */	public static function toString($compress = false)	{		$data = self::getBody();		// Don't compress something if the server is going to do it anyway. Waste of time.		if ($compress && !ini_get('zlib.output_compression') && ini_get('output_handler') != 'ob_gzhandler')		{			$data = self::compress($data);		}		if (self::allowCache() === false)		{			self::setHeader('Cache-Control', 'no-cache', false);			// HTTP 1.0			self::setHeader('Pragma', 'no-cache');		}		self::sendHeaders();		return $data;	}	/**	 * Compress the data	 *	 * Checks the accept encoding of the browser and compresses the data before	 * sending it to the client.	 *	 * @param   string  $data  Content to compress for output.	 *	 * @return  string  compressed data	 *	 * @note    Replaces _compress method in 11.1	 * @since   11.1	 */	protected static function compress($data)	{		$encoding = self::clientEncoding();		if (!$encoding)		{			return $data;		}		if (!extension_loaded('zlib') || ini_get('zlib.output_compression'))		{			return $data;		}		if (headers_sent())		{			return $data;		}		if (connection_status() !== 0)		{			return $data;		}		// Ideal level		$level = 4;		/*		$size		= strlen($data);		$crc		= crc32($data);		$gzdata		= "\x1f\x8b\x08\x00\x00\x00\x00\x00";		$gzdata		.= gzcompress($data, $level);		$gzdata	= substr($gzdata, 0, strlen($gzdata) - 4);		$gzdata	.= pack("V",$crc) . pack("V", $size);		*/		$gzdata = gzencode($data, $level);		self::setHeader('Content-Encoding', $encoding);		self::setHeader('X-Content-Encoded-By', 'Joomla! 1.6');		return $gzdata;	}	/**	 * Check, whether client supports compressed data	 *	 * @return  boolean	 *	 * @since   11.1	 * @note    Replaces _clientEncoding method from 11.1	 */	protected static function clientEncoding()	{		if (!isset($_SERVER['HTTP_ACCEPT_ENCODING']))		{			return false;		}		$encoding = false;		if (false !== strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip'))		{			$encoding = 'gzip';		}		if (false !== strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'x-gzip'))		{			$encoding = 'x-gzip';		}		return $encoding;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of newsfeed categories. * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsModelCategories extends JModelList{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_newsfeeds.categories';	/**	 * The category context (allows other extensions to derived from this model).	 *	 * @var		string	 */	protected $_extension = 'com_newsfeeds';	private $_parent = null;	private $_items = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('filter.extension', $this->_extension);		// Get the parent id if defined.		$parentId = $app->input->getInt('id');		$this->setState('filter.parentId', $parentId);		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('filter.published',	1);		$this->setState('filter.access',	true);	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.extension');		$id	.= ':'.$this->getState('filter.published');		$id	.= ':'.$this->getState('filter.access');		$id	.= ':'.$this->getState('filter.parentId');		return parent::getStoreId($id);	}	/**	 * redefine the function an add some properties to make the styling more easy	 *	 * @return mixed An array of data items on success, false on failure.	 */	public function getItems()	{		if (!count($this->_items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_items_cat', 1) || !$params->get('show_empty_categories_cat', 0);			$categories = JCategories::getInstance('Newsfeeds', $options);			$this->_parent = $categories->get($this->getState('filter.parentId', 'root'));			if (is_object($this->_parent))			{				$this->_items = $this->_parent->getChildren();			} else {				$this->_items = false;			}		}		return $this->_items;	}	public function getParent()	{		if (!is_object($this->_parent))		{			$this->getItems();		}		return $this->_parent;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Route handling class * * @package     Joomla.Platform * @subpackage  Application * @since       11.1 */class JRoute{	/**	 * The route object so we don't have to keep fetching it.	 *	 * @var    JRouter	 * @since  12.2	 */	private static $_router = null;	/**	 * Translates an internal Joomla URL to a humanly readible URL.	 *	 * @param   string   $url    Absolute or Relative URI to Joomla resource.	 * @param   boolean  $xhtml  Replace & by &amp; for XML compilance.	 * @param   integer  $ssl    Secure state for the resolved URI.	 *                             1: Make URI secure using global secure site URI.	 *                             0: Leave URI in the same secure state as it was passed to the function.	 *                            -1: Make URI unsecure using the global unsecure site URI.	 *	 * @return  The translated humanly readible URL.	 *	 * @since   11.1	 */	public static function _($url, $xhtml = true, $ssl = null)	{		if (!self::$_router)		{			// Get the router.			self::$_router = JFactory::getApplication()->getRouter();			// Make sure that we have our router			if (!self::$_router)			{				return null;			}		}		if ((strpos($url, '&') !== 0) && (strpos($url, 'index.php') !== 0))		{			return $url;		}		// Build route.		$uri = self::$_router->build($url);		$url = $uri->toString(array('path', 'query', 'fragment'));		// Replace spaces.		$url = preg_replace('/\s/u', '%20', $url);		/*		 * Get the secure/unsecure URLs.		 *		 * If the first 5 characters of the BASE are 'https', then we are on an ssl connection over		 * https and need to set our secure URL to the current request URL, if not, and the scheme is		 * 'http', then we need to do a quick string manipulation to switch schemes.		 */		if ((int) $ssl)		{			$uri = JURI::getInstance();			// Get additional parts.			static $prefix;			if (!$prefix)			{				$prefix = $uri->toString(array('host', 'port'));			}			// Determine which scheme we want.			$scheme = ((int) $ssl === 1) ? 'https' : 'http';			// Make sure our URL path begins with a slash.			if (!preg_match('#^/#', $url))			{				$url = '/' . $url;			}			// Build the URL.			$url = $scheme . '://' . $prefix . $url;		}		if ($xhtml)		{			$url = htmlspecialchars($url);		}		return $url;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Clicks Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldImpMade extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ImpMade';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$onclick	= ' onclick="document.id(\''.$this->id.'\').value=\'0\';"';		return '<input class="input-small" type="text" name="'.$this->name.'" id="'.$this->id.'" value="'.htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8').'" readonly="readonly" /> <a class="btn" '.$onclick.'><i class="icon-refresh"></i> '.JText::_('COM_BANNERS_RESET_IMPMADE').'</a>';	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_related_items * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="relateditems<?php echo $moduleclass_sfx; ?>"><?php foreach ($list as $item) :	?><li>	<a href="<?php echo $item->route; ?>">		<?php if ($showDate) echo JHTML::_('date', $item->created, JText::_('DATE_FORMAT_LC4')). " - "; ?>		<?php echo $item->title; ?></a></li><?php endforeach; ?></ul>
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$serverinfo = $params->get('serverinfo');$siteinfo	= $params->get('siteinfo');$list = ModStatsHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_stats', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');/** * Joomla! Package Manifest File * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */abstract class JInstallerManifest{	/**	 * Path to the manifest file	 *	 * @var    string	 * @since  3.1	 */	public $manifest_file = '';	/**	 * Name of the extension	 *	 * @var    string	 * @since  3.1	 */	public $name = '';	/**	 * Version of the extension	 *	 * @var    string	 * @since  3.1	 */	public $version = '';	/**	 * Description of the extension	 *	 * @var    string	 * @since  3.1	 */	public $description = '';	/**	 * Packager of the extension	 *	 * @var    string	 * @since  3.1	 */	public $packager = '';	/**	 * Packager's URL of the extension	 *	 * @var    string	 * @since  3.1	 */	public $packagerurl = '';	/**	 * Update site for the extension	 *	 * @var    string	 * @since  3.1	 */	public $update = '';	/**	 * List of files in the extension	 *	 * @var    array	 * @since  3.1	 */	public $filelist = array();	/**	 * Constructor	 *	 * @param   string  $xmlpath  Path to XML manifest file.	 *	 * @since   3.1	 */	public function __construct($xmlpath = '')	{		if (strlen($xmlpath))		{			$this->loadManifestFromXML($xmlpath);		}	}	/**	 * Load a manifest from a file	 *	 * @param   string  $xmlfile  Path to file to load	 *	 * @return  boolean	 *	 * @since   3.1	 */	public function loadManifestFromXML($xmlfile)	{		$this->manifest_file = basename($xmlfile, '.xml');		$xml = simplexml_load_file($xmlfile);		if (!$xml)		{			$this->_errors[] = JText::sprintf('JLIB_INSTALLER_ERROR_LOAD_XML', $xmlfile);			return false;		}		else		{			$this->loadManifestFromData($xml);			return true;		}	}	/**	 * Apply manifest data from a SimpleXMLElement to the object.	 *	 * @param   SimpleXMLElement  $xml  Data to load	 *	 * @return  void	 *	 * @since   3.1	 */	abstract protected function loadManifestFromData(SimpleXmlElement $xml);}
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @param   array * @return  array */function WrapperBuildRoute(&$query){	$segments = array();	if (isset($query['view']))	{		unset($query['view']);	}	return $segments;}/** * @param   array * @return  array */function WrapperParseRoute($segments){	$vars = array();	$vars['view'] = 'wrapper';	return $vars;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_CONFIG_PERMISSION_SETTINGS'); ?></legend>		<?php foreach ($this->form->getFieldset('permissions') as $field) : ?>			<?php echo $field->label; ?>			<div class="clr"> </div>			<?php echo $field->input; ?>		<?php endforeach; ?>	</fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_banners */abstract class BannerHelper{	/**	 * Checks if a URL is an image	 *	 * @param string	 * @return URL	 */	public static function isImage($url)	{		$result = preg_match('#\.(?:bmp|gif|jpe?g|png)$#i', $url);		return $result;	}	/**	 * Checks if a URL is a Flash file	 *	 * @param string	 * @return URL	 */	public static function isFlash($url)	{		$result = preg_match('#\.swf$#i', $url);		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="installer-warnings">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=warnings');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<?php		if (!count($this->messages))		{			echo '<div class="alert alert-info"><a class="close" data-dismiss="alert" href="#">&times;</a>'. JText::_('COM_INSTALLER_MSG_WARNINGS_NONE').'</div>';		}		else		{			echo JHtml::_('sliders.start', 'warning-sliders', array('useCookie' => 1));			foreach($this->messages as $message)			{				echo JHtml::_('sliders.panel', $message['message'], str_replace(' ', '', $message['message']));				echo '<div style="padding: 5px;" >'.$message['description'].'</div>';			}			echo JHtml::_('sliders.panel', JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFO'), 'furtherinfo-pane');			echo '<div style="padding: 5px;" >'. JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFODESC') .'</div>';			echo JHtml::_('sliders.end');		}		?>			<div class="clr"> </div>			<div>				<input type="hidden" name="boxchecked" value="0" />				<?php echo JHtml::_('form.token'); ?>			</div>		</div>	</form></div>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/** * @package    Joomla.Compat * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JsonSerializable interface. This file should only be loaded on PHP < 5.4 * It allows us to implement it in classes without requiring PHP 5.4 * * @package  Joomla.Compat * @link     http://www.php.net/manual/en/jsonserializable.jsonserialize.php * @since    12.2 */interface JsonSerializable{	/**	 * Return data which should be serialized by json_encode().	 *	 * @return  mixed	 *	 * @since   12.2	 */	public function jsonSerialize();}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_newsfeeds.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_items') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Files Class * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 */class JInputFiles extends JInput{	protected $decodedData = array();	/**	 * Constructor.	 *	 * @param   array  $source   Ignored.	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.1	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		// Set the data source.		$this->data = & $_FILES;		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets a value from the input data.	 *	 * @param   string  $name     Name of the value to get.	 * @param   mixed   $default  Default value to return if variable does not exist.	 * @param   string  $filter   Filter to apply to the value.	 *	 * @return  mixed  The filtered input value.	 *	 * @since   11.1	 */	public function get($name, $default = null, $filter = 'cmd')	{		if (isset($this->data[$name]))		{			$results = $this->decodeData(				array(					$this->data[$name]['name'],					$this->data[$name]['type'],					$this->data[$name]['tmp_name'],					$this->data[$name]['error'],					$this->data[$name]['size']				)			);			return $results;		}		return $default;	}	/**	 * Method to decode a data array.	 *	 * @param   array  $data  The data array to decode.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function decodeData(array $data)	{		$result = array();		if (is_array($data[0]))		{			foreach ($data[0] as $k => $v)			{				$result[$k] = $this->decodeData(array($data[0][$k], $data[1][$k], $data[2][$k], $data[3][$k], $data[4][$k]));			}			return $result;		}		return array('name' => $data[0], 'type' => $data[1], 'tmp_name' => $data[2], 'error' => $data[3], 'size' => $data[4]);	}	/**	 * Sets a value	 *	 * @param   string  $name   Name of the value to set.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   11.1	 */	public function set($name, $value)	{	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (JPluginHelper::isEnabled('user', 'profile')) :	$fields = $this->item->profile->getFieldset('profile'); ?><div class="contact-profile" id="users-profile-custom">	<dl class="dl-horizontal">	<?php foreach ($fields as $profile) :		if ($profile->value) :			echo '<dt>'.$profile->label.'</dt>';			$profile->text = htmlspecialchars($profile->value, ENT_COMPAT, 'UTF-8');			switch ($profile->id) :				case "profile_website":					$v_http = substr($profile->profile_value, 0, 4);					if ($v_http == "http") :						echo '<dd><a href="'.$profile->text.'">'.$profile->text.'</a></dd>';					else :						echo '<dd><a href="http://'.$profile->text.'">'.$profile->text.'</a></dd>';					endif;					break;				default:					echo '<dd>'.$profile->text.'</dd>';					break;			endswitch;		endif;	endforeach; ?>	</dl></div><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link controller class. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectControllerLink extends JControllerForm{	// Parent class access checks are sufficient for this controller.}
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Stemmer base class. * * @package     Joomla.Platform * @subpackage  Language * @since       12.1 */abstract class JLanguageStemmer{	/**	 * An internal cache of stemmed tokens.	 *	 * @var    array	 * @since  12.1	 */	protected $cache = array();	/**	 * @var    array  JLanguageStemmer instances.	 * @since  12.1	 */	protected static $instances = array();	/**	 * Method to get a stemmer, creating it if necessary.	 *	 * @param   string  $adapter  The type of stemmer to load.	 *	 * @return  JLanguageStemmer  A JLanguageStemmer instance.	 *	 * @since   12.1	 * @throws  RuntimeException on invalid stemmer.	 */	public static function getInstance($adapter)	{		// Only create one stemmer for each adapter.		if (isset(self::$instances[$adapter]))		{			return self::$instances[$adapter];		}		// Setup the adapter for the stemmer.		$class = 'JLanguageStemmer' . ucfirst(trim($adapter));		// Check if a stemmer exists for the adapter.		if (!class_exists($class))		{			// Throw invalid adapter exception.			throw new RuntimeException(JText::sprintf('JLIB_STEMMER_INVALID_STEMMER', $adapter));		}		self::$instances[$adapter] = new $class;		return self::$instances[$adapter];	}	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   12.1	 */	abstract public function stem($token, $lang);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_DATABASE_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('database') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>	</ul></fieldset></div>
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract observable class to implement the observer design pattern * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */class JObservable extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  11.1	 * @deprecated  12.3	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  11.1	 * @deprecated  12.3	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  11.1	 * @deprecated  12.3	 */	protected $_methods = array();	/**	 * Constructor	 *	 * Note: Make Sure it's not directly instantiated	 *	 * @deprecated  12.3	 */	public function __construct()	{		$this->_observers = array();	}	/**	 * Get the state of the JObservable object	 *	 * @return  mixed    The state of the object.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function getState()	{		return $this->_state;	}	/**	 * Update each attached observer object and return an array of their return values	 *	 * @return  array    Array of return values from the observers	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function notify()	{		// Iterate through the _observers array		foreach ($this->_observers as $observer)		{			$return[] = $observer->update();		}		return $return;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JObserver))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');jimport('joomla.html.html.bootstrap');?><div class="contact<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif; ?>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<div class="page-header">			<h2>				<?php if ($this->item->published == 0) : ?>					<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>				<?php endif; ?>				<span class="contact-name"><?php echo $this->contact->name; ?></span>			</h2>		</div>	<?php endif;  ?>	<?php if ($this->params->get('show_contact_category') == 'show_no_link') : ?>		<h3>			<span class="contact-category"><?php echo $this->contact->category_title; ?></span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_category') == 'show_with_link') : ?>		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid); ?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_list') && count($this->contacts) > 1) : ?>		<form action="#" method="get" name="selectForm" id="selectForm">			<?php echo JText::_('COM_CONTACT_SELECT_CONTACT'); ?>			<?php echo JHtml::_('select.genericlist', $this->contacts, 'id', 'class="inputbox" onchange="document.location.href = this.value"', 'link', 'name', $this->contact->link);?>		</form>	<?php endif; ?>	<?php if ($this->params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?> 	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.startAccordion', 'slide-contact', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_DETAILS'), 'basic-details'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic-details', JText::_('COM_CONTACT_DETAILS', true)); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'plain'):?>		<?php  echo '<h3>'. JText::_('COM_CONTACT_DETAILS').'</h3>';  ?>	<?php endif; ?>	<?php if ($this->contact->image && $this->params->get('show_image')) : ?>		<div class="thumbnail pull-right">			<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle')); ?>		</div>	<?php endif; ?>	<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>		<dl class="contact-position dl-horizontal">			<dd>				<?php echo $this->contact->con_position; ?>			</dd>		</dl>	<?php endif; ?>	<?php echo $this->loadTemplate('address'); ?>	<?php if ($this->params->get('allow_vcard')) :	?>		<?php echo JText::_('COM_CONTACT_DOWNLOAD_INFORMATION_AS');?>		<a href="<?php echo JRoute::_('index.php?option=com_contact&amp;view=contact&amp;id='.$this->contact->id . '&amp;format=vcf'); ?>">		<?php echo JText::_('COM_CONTACT_VCARD');?></a>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endSlide'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_email_form') && ($this->contact->email_to || $this->contact->user_id)) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_EMAIL_FORM'), 'display-form'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-form', JText::_('COM_CONTACT_EMAIL_FORM', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_EMAIL_FORM').'</h3>';  ?>		<?php endif; ?>		<?php  echo $this->loadTemplate('form');  ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>			<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_links')) : ?>		<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_articles') && $this->contact->user_id && $this->contact->articles) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('JGLOBAL_ARTICLES'), 'display-articles'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-articles', JText::_('JGLOBAL_ARTICLES', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('JGLOBAL_ARTICLES').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('articles'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_profile') && $this->contact->user_id && JPluginHelper::isEnabled('user', 'profile')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_PROFILE'), 'display-profile'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-profile', JText::_('COM_CONTACT_PROFILE', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_PROFILE').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('profile'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->contact->misc && $this->params->get('show_misc')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_OTHER_INFORMATION'), 'display-misc'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-misc', JText::_('COM_CONTACT_OTHER_INFORMATION', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_OTHER_INFORMATION').'</h3>';  ?>		<?php endif; ?>		<div class="contact-miscinfo">			<dl class="dl-horizontal">				<dt>					<span class="<?php echo $this->params->get('marker_class'); ?>">					<?php echo $this->params->get('marker_misc'); ?>					</span>				</dt>				<dd>					<span class="contact-misc">						<?php echo $this->contact->misc; ?>					</span>				</dd>			</dl>		</div>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endAccordion'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	<?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE.'/components/com_content/helpers/route.php';JModelLegacy::addIncludePath(JPATH_SITE.'/components/com_content/models', 'ContentModel');/** * Helper for mod_articles_news * * @package     Joomla.Site * @subpackage  mod_articles_news */abstract class ModArticlesNewsHelper{	public static function getList(&$params)	{		$app = JFactory::getApplication();		// Get an instance of the generic articles model		$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));		// Set application parameters in model		$appParams = JFactory::getApplication()->getParams();		$model->setState('params', $appParams);		// Set the filters based on the module params		$model->setState('list.start', 0);		$model->setState('list.limit', (int) $params->get('count', 5));		$model->setState('filter.published', 1);		$model->setState('list.select', 'a.fulltext, a.id, a.title, a.alias, a.introtext, a.state, a.catid, a.created, a.created_by, a.created_by_alias,' .			' a.modified, a.modified_by, a.publish_up, a.publish_down, a.images, a.urls, a.attribs, a.metadata, a.metakey, a.metadesc, a.access,' .			' a.hits, a.featured' );		// Access filter		$access = !JComponentHelper::getParams('com_content')->get('show_noauth');		$authorised = JAccess::getAuthorisedViewLevels(JFactory::getUser()->get('id'));		$model->setState('filter.access', $access);		// Category filter		$model->setState('filter.category_id', $params->get('catid', array()));		// Filter by language		$model->setState('filter.language', $app->getLanguageFilter());		// Set ordering		$ordering = $params->get('ordering', 'a.publish_up');		$model->setState('list.ordering', $ordering);		if (trim($ordering) == 'rand()')		{			$model->setState('list.direction', '');		}		else		{			$model->setState('list.direction', 'DESC');		}		//	Retrieve Content		$items = $model->getItems();		foreach ($items as &$item)		{			$item->readmore = strlen(trim($item->fulltext));			$item->slug = $item->id.':'.$item->alias;			$item->catslug = $item->catid.':'.$item->category_alias;			if ($access || in_array($item->access, $authorised))			{				// We know that user has the privilege to view the article				$item->link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catid));				$item->linkText = JText::_('MOD_ARTICLES_NEWS_READMORE');			}			else {				$item->link = JRoute::_('index.php?option=com_users&view=login');				$item->linkText = JText::_('MOD_ARTICLES_NEWS_READMORE_REGISTER');			}			$item->introtext = JHtml::_('content.prepare', $item->introtext, '', 'mod_articles_news.content');			//new			if (!$params->get('image'))			{				$item->introtext = preg_replace('/<img[^>]*>/', '', $item->introtext);			}			$results = $app->triggerEvent('onContentAfterDisplay', array('com_content.article', &$item, &$params, 1));			$item->afterDisplayTitle = trim(implode("\n", $results));			$results = $app->triggerEvent('onContentBeforeDisplay', array('com_content.article', &$item, &$params, 1));			$item->beforeDisplayContent = trim(implode("\n", $results));		}		return $items;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Callback Log class * * This class allows logging to be handled by a callback function. * This allows unprecedented flexibility in the way logging can be handled. * * @package     Joomla.Platform * @subpackage  Log * @since       12.2 */class JLogLoggerCallback extends JLogLogger{	/**	 * @var    callable  The function to call when an entry is added - should return True on success	 * @since  12.2	 */	protected $callback;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   12.2	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// Throw an exception if there is not a valid callback		if (isset($this->options['callback']) && is_callable($this->options['callback']))		{			$this->callback = $this->options['callback'];		}		else		{			throw new JLogException(JText::_('JLogLoggerCallback created without valid callback function.'));		}	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  boolean  True on success.	 *	 * @since   12.2	 * @throws  LogException	 */	public function addEntry(JLogEntry $entry)	{		// Pass the log entry to the callback function		call_user_func($this->callback, $entry);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Client * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Client helper class * * @package     Joomla.Platform * @subpackage  Client * @since       11.1 */class JClientHelper{	/**	 * Method to return the array of client layer configuration options	 *	 * @param   string   $client  Client name, currently only 'ftp' is supported	 * @param   boolean  $force   Forces re-creation of the login credentials. Set this to	 *                            true if login credentials in the session storage have changed	 *	 * @return  array    Client layer configuration options, consisting of at least	 *                   these fields: enabled, host, port, user, pass, root	 *	 * @since   11.1	 */	public static function getCredentials($client, $force = false)	{		static $credentials = array();		$client = strtolower($client);		if (!isset($credentials[$client]) || $force)		{			$config = JFactory::getConfig();			// Fetch the client layer configuration options for the specific client			switch ($client)			{				case 'ftp':					$options = array(						'enabled' => $config->get('ftp_enable'),						'host' => $config->get('ftp_host'),						'port' => $config->get('ftp_port'),						'user' => $config->get('ftp_user'),						'pass' => $config->get('ftp_pass'),						'root' => $config->get('ftp_root'));					break;				default:					$options = array('enabled' => false, 'host' => '', 'port' => '', 'user' => '', 'pass' => '', 'root' => '');					break;			}			// If user and pass are not set in global config lets see if they are in the session			if ($options['enabled'] == true && ($options['user'] == '' || $options['pass'] == ''))			{				$session = JFactory::getSession();				$options['user'] = $session->get($client . '.user', null, 'JClientHelper');				$options['pass'] = $session->get($client . '.pass', null, 'JClientHelper');			}			// If user or pass are missing, disable this client			if ($options['user'] == '' || $options['pass'] == '')			{				$options['enabled'] = false;			}			// Save the credentials for later use			$credentials[$client] = $options;		}		return $credentials[$client];	}	/**	 * Method to set client login credentials	 *	 * @param   string  $client  Client name, currently only 'ftp' is supported	 * @param   string  $user    Username	 * @param   string  $pass    Password	 *	 * @return  boolean  True if the given login credentials have been set and are valid	 *	 * @since   11.1	 */	public static function setCredentials($client, $user, $pass)	{		$return = false;		$client = strtolower($client);		// Test if the given credentials are valid		switch ($client)		{			case 'ftp':				$config = JFactory::getConfig();				$options = array('enabled' => $config->get('ftp_enable'), 'host' => $config->get('ftp_host'), 'port' => $config->get('ftp_port'));				if ($options['enabled'])				{					$ftp = JClientFtp::getInstance($options['host'], $options['port']);					// Test the connection and try to log in					if ($ftp->isConnected())					{						if ($ftp->login($user, $pass))						{							$return = true;						}						$ftp->quit();					}				}				break;			default:				break;		}		if ($return)		{			// Save valid credentials to the session			$session = JFactory::getSession();			$session->set($client . '.user', $user, 'JClientHelper');			$session->set($client . '.pass', $pass, 'JClientHelper');			// Force re-creation of the data saved within JClientHelper::getCredentials()			self::getCredentials($client, true);		}		return $return;	}	/**	 * Method to determine if client login credentials are present	 *	 * @param   string  $client  Client name, currently only 'ftp' is supported	 *	 * @return  boolean  True if login credentials are available	 *	 * @since   11.1	 */	public static function hasCredentials($client)	{		$return = false;		$client = strtolower($client);		// Get (unmodified) credentials for this client		switch ($client)		{			case 'ftp':				$config = JFactory::getConfig();				$options = array('enabled' => $config->get('ftp_enable'), 'user' => $config->get('ftp_user'), 'pass' => $config->get('ftp_pass'));				break;			default:				$options = array('enabled' => false, 'user' => '', 'pass' => '');				break;		}		if ($options['enabled'] == false)		{			// The client is disabled in global config, so let's pretend we are OK			$return = true;		}		elseif ($options['user'] != '' && $options['pass'] != '')		{			// Login credentials are available in global config			$return = true;		}		else		{			// Check if login credentials are available in the session			$session = JFactory::getSession();			$user = $session->get($client . '.user', null, 'JClientHelper');			$pass = $session->get($client . '.pass', null, 'JClientHelper');			if ($user != '' && $pass != '')			{				$return = true;			}		}		return $return;	}	/**	 * Determine whether input fields for client settings need to be shown	 *	 * If valid credentials were passed along with the request, they are saved to the session.	 * This functions returns an exception if invalid credentials have been given or if the	 * connection to the server failed for some other reason.	 *	 * @param   string  $client  The name of the client.	 *	 * @return  mixed  True, if FTP settings; JError if using legacy tree.	 *	 * @since   11.1	 * @throws  InvalidArgumentException if credentials invalid	 */	public static function setCredentialsFromRequest($client)	{		// Determine whether FTP credentials have been passed along with the current request		$input = JFactory::getApplication()->input;		$user = $input->post->getString('username', null);		$pass = $input->post->getString('password', null);		if ($user != '' && $pass != '')		{			// Add credentials to the session			if (self::setCredentials($client, $user, $pass))			{				$return = false;			}			else			{				if (class_exists('JError'))				{					$return = JError::raiseWarning('SOME_ERROR_CODE', JText::_('JLIB_CLIENT_ERROR_HELPER_SETCREDENTIALSFROMREQUEST_FAILED'));				}				else				{					throw new InvalidArgumentException('Invalid user credentials');				}			}		}		else		{			// Just determine if the FTP input fields need to be shown			$return = !self::hasCredentials('ftp');		}		return $return;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocumentRenderer_RSS is a feed that implements RSS 2.0 Specification * * @package     Joomla.Platform * @subpackage  Document * @see         http://www.rssboard.org/rss-specification * @since       11.1 */class JDocumentRendererRSS extends JDocumentRenderer{	/**	 * Renderer mime type	 *	 * @var    string	 * @since  11.1	 */	protected $_mime = "application/rss+xml";	/**	 * Render the feed.	 *	 * @param   string  $name     The name of the element to render	 * @param   array   $params   Array of values	 * @param   string  $content  Override the output of the renderer	 *	 * @return  string  The output of the script	 *	 * @see JDocumentRenderer::render()	 * @since   11.1	 */	public function render($name = '', $params = null, $content = null)	{		$app = JFactory::getApplication();		// Gets and sets timezone offset from site configuration		$tz = new DateTimeZone($app->getCfg('offset'));		$now = JFactory::getDate();		$now->setTimeZone($tz);		$data = $this->_doc;		$uri = JURI::getInstance();		$url = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));		$syndicationURL = JRoute::_('&format=feed&type=rss');		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $data->title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $data->title, $app->getCfg('sitename'));		}		else		{			$title = $data->title;		}		$feed_title = htmlspecialchars($title, ENT_COMPAT, 'UTF-8');		$feed = "<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n";		$feed .= "	<channel>\n";		$feed .= "		<title>" . $feed_title . "</title>\n";		$feed .= "		<description><![CDATA[" . $data->description . "]]></description>\n";		$feed .= "		<link>" . str_replace(' ', '%20', $url . $data->link) . "</link>\n";		$feed .= "		<lastBuildDate>" . htmlspecialchars($now->toRFC822(true), ENT_COMPAT, 'UTF-8') . "</lastBuildDate>\n";		$feed .= "		<generator>" . $data->getGenerator() . "</generator>\n";		$feed .= '		<atom:link rel="self" type="application/rss+xml" href="' . str_replace(' ', '%20', $url . $syndicationURL) . "\"/>\n";		if ($data->image != null)		{			$feed .= "		<image>\n";			$feed .= "			<url>" . $data->image->url . "</url>\n";			$feed .= "			<title>" . htmlspecialchars($data->image->title, ENT_COMPAT, 'UTF-8') . "</title>\n";			$feed .= "			<link>" . str_replace(' ', '%20', $data->image->link) . "</link>\n";			if ($data->image->width != "")			{				$feed .= "			<width>" . $data->image->width . "</width>\n";			}			if ($data->image->height != "")			{				$feed .= "			<height>" . $data->image->height . "</height>\n";			}			if ($data->image->description != "")			{				$feed .= "			<description><![CDATA[" . $data->image->description . "]]></description>\n";			}			$feed .= "		</image>\n";		}		if ($data->language != "")		{			$feed .= "		<language>" . $data->language . "</language>\n";		}		if ($data->copyright != "")		{			$feed .= "		<copyright>" . htmlspecialchars($data->copyright, ENT_COMPAT, 'UTF-8') . "</copyright>\n";		}		if ($data->editorEmail != "")		{			$feed .= "		<managingEditor>" . htmlspecialchars($data->editorEmail, ENT_COMPAT, 'UTF-8') . ' ('				. htmlspecialchars($data->editor, ENT_COMPAT, 'UTF-8') . ")</managingEditor>\n";		}		if ($data->webmaster != "")		{			$feed .= "		<webMaster>" . htmlspecialchars($data->webmaster, ENT_COMPAT, 'UTF-8') . "</webMaster>\n";		}		if ($data->pubDate != "")		{			$pubDate = JFactory::getDate($data->pubDate);			$pubDate->setTimeZone($tz);			$feed .= "		<pubDate>" . htmlspecialchars($pubDate->toRFC822(true), ENT_COMPAT, 'UTF-8') . "</pubDate>\n";		}		if (empty($data->category) === false)		{			if (is_array($data->category))			{				foreach ($data->category as $cat)				{					$feed .= "		<category>" . htmlspecialchars($cat, ENT_COMPAT, 'UTF-8') . "</category>\n";				}			}			else			{				$feed .= "		<category>" . htmlspecialchars($data->category, ENT_COMPAT, 'UTF-8') . "</category>\n";			}		}		if ($data->docs != "")		{			$feed .= "		<docs>" . htmlspecialchars($data->docs, ENT_COMPAT, 'UTF-8') . "</docs>\n";		}		if ($data->ttl != "")		{			$feed .= "		<ttl>" . htmlspecialchars($data->ttl, ENT_COMPAT, 'UTF-8') . "</ttl>\n";		}		if ($data->rating != "")		{			$feed .= "		<rating>" . htmlspecialchars($data->rating, ENT_COMPAT, 'UTF-8') . "</rating>\n";		}		if ($data->skipHours != "")		{			$feed .= "		<skipHours>" . htmlspecialchars($data->skipHours, ENT_COMPAT, 'UTF-8') . "</skipHours>\n";		}		if ($data->skipDays != "")		{			$feed .= "		<skipDays>" . htmlspecialchars($data->skipDays, ENT_COMPAT, 'UTF-8') . "</skipDays>\n";		}		for ($i = 0, $count = count($data->items); $i < $count; $i++)		{			if ((strpos($data->items[$i]->link, 'http://') === false) && (strpos($data->items[$i]->link, 'https://') === false))			{				$data->items[$i]->link = str_replace(' ', '%20', $url . $data->items[$i]->link);			}			$feed .= "		<item>\n";			$feed .= "			<title>" . htmlspecialchars(strip_tags($data->items[$i]->title), ENT_COMPAT, 'UTF-8') . "</title>\n";			$feed .= "			<link>" . str_replace(' ', '%20', $data->items[$i]->link) . "</link>\n";			if (empty($data->items[$i]->guid) === true)			{				$feed .= "			<guid isPermaLink=\"true\">" . str_replace(' ', '%20', $data->items[$i]->link) . "</guid>\n";			}			else			{				$feed .= "			<guid isPermaLink=\"false\">" . htmlspecialchars($data->items[$i]->guid, ENT_COMPAT, 'UTF-8') . "</guid>\n";			}			$feed .= "			<description><![CDATA[" . $this->_relToAbs($data->items[$i]->description) . "]]></description>\n";			if ($data->items[$i]->authorEmail != "")			{				$feed .= "			<author>"					. htmlspecialchars($data->items[$i]->authorEmail . ' (' . $data->items[$i]->author . ')', ENT_COMPAT, 'UTF-8') . "</author>\n";			}			/*			 * @todo: On hold			 * if ($data->items[$i]->source!="") {			 *   $data.= "			<source>".htmlspecialchars($data->items[$i]->source, ENT_COMPAT, 'UTF-8')."</source>\n";			 * }			 */			if (empty($data->items[$i]->category) === false)			{				if (is_array($data->items[$i]->category))				{					foreach ($data->items[$i]->category as $cat)					{						$feed .= "			<category>" . htmlspecialchars($cat, ENT_COMPAT, 'UTF-8') . "</category>\n";					}				}				else				{					$feed .= "			<category>" . htmlspecialchars($data->items[$i]->category, ENT_COMPAT, 'UTF-8') . "</category>\n";				}			}			if ($data->items[$i]->comments != "")			{				$feed .= "			<comments>" . htmlspecialchars($data->items[$i]->comments, ENT_COMPAT, 'UTF-8') . "</comments>\n";			}			if ($data->items[$i]->date != "")			{				$itemDate = JFactory::getDate($data->items[$i]->date);				$itemDate->setTimeZone($tz);				$feed .= "			<pubDate>" . htmlspecialchars($itemDate->toRFC822(true), ENT_COMPAT, 'UTF-8') . "</pubDate>\n";			}			if ($data->items[$i]->enclosure != null)			{				$feed .= "			<enclosure url=\"";				$feed .= $data->items[$i]->enclosure->url;				$feed .= "\" length=\"";				$feed .= $data->items[$i]->enclosure->length;				$feed .= "\" type=\"";				$feed .= $data->items[$i]->enclosure->type;				$feed .= "\"/>\n";			}			$feed .= "		</item>\n";		}		$feed .= "	</channel>\n";		$feed .= "</rss>\n";		return $feed;	}	/**	 * Convert links in a text from relative to absolute	 *	 * @param   string  $text  The text processed	 *	 * @return  string   Text with converted links	 *	 * @since   11.1	 */	public function _relToAbs($text)	{		$base = JURI::base();		$text = preg_replace("/(href|src)=\"(?!http|ftp|https|mailto|data)([^\"]*)\"/", "$1=\"$base\$2\"", $text);		return $text;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument system message renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererMessage extends JDocumentRenderer{	/**	 * Renders the error stack and returns the results as a string	 *	 * @param   string  $name     Not used.	 * @param   array   $params   Associative array of values	 * @param   string  $content  Not used.	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($name, $params = array (), $content = null)	{		$msgList = $this->getData();		$buffer = null;		$app = JFactory::getApplication();		$chromePath = JPATH_THEMES . '/' . $app->getTemplate() . '/html/message.php';		$itemOverride = false;		if (file_exists($chromePath))		{			include_once $chromePath;			if (function_exists('renderMessage'))			{				$itemOverride = true;			}		}		$buffer = ($itemOverride) ? renderMessage($msgList) : $this->renderDefaultMessage($msgList);		return $buffer;	}	/**	 * Get and prepare system message data for output	 *	 * @return  array  An array contains system message	 *	 * @since   12.2	 */	private function getData()	{		// Initialise variables.		$lists = array();		// Get the message queue		$messages = JFactory::getApplication()->getMessageQueue();		// Build the sorted message list		if (is_array($messages) && !empty($messages))		{			foreach ($messages as $msg)			{				if (isset($msg['type']) && isset($msg['message']))				{					$lists[$msg['type']][] = $msg['message'];				}			}		}		return $lists;	}	/**	 * Render the system message if no message template file found	 *	 * @param   array  $msgList  An array contains system message	 *	 * @return  string  System message markup	 *	 * @since   12.2	 */	private function renderDefaultMessage($msgList)	{		// Build the return string		$buffer = '';		$buffer .= "\n<div id=\"system-message-container\">";		// If messages exist render them		if (is_array($msgList))		{			$buffer .= "\n<div id=\"system-message\">";			foreach ($msgList as $type => $msgs)			{				$buffer .= "\n<div class=\"alert alert-" . $type . "\">";				// This requires JS so we should add it trough JS. Progressive enhancement and stuff.				$buffer .= "<a class=\"close\" data-dismiss=\"alert\"></a>";				if (count($msgs))				{					$buffer .= "\n<h4 class=\"alert-heading\">" . JText::_($type) . "</h4>";					$buffer .= "\n<div>";					foreach ($msgs as $msg)					{						$buffer .= "\n\t\t<p>" . $msg . "</p>";					}					$buffer .= "\n</div>";				}				$buffer .= "\n</div>";			}			$buffer .= "\n</div>";		}		$buffer .= "\n</div>";		return $buffer;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class = "breadcrumbs<?php echo $moduleclass_sfx; ?>"><?php if ($params->get('showHere', 1))	{		echo '<span class="showHere">' .JText::_('MOD_BREADCRUMBS_HERE').'</span>';	}	// Get rid of duplicated entries on trail including home page when using multilanguage	for ($i = 0; $i < $count; $i++)	{		if ($i == 1 && !empty($list[$i]->link) && !empty($list[$i - 1]->link) && $list[$i]->link == $list[$i - 1]->link)		{			unset($list[$i]);		}	}	// Find last and penultimate items in breadcrumbs list	end($list);	$last_item_key = key($list);	prev($list);	$penult_item_key = key($list);	// Generate the trail	foreach ($list as $key => $item) :	// Make a link if not the last item in the breadcrumbs	$show_last = $params->get('showLast', 1);	if ($key != $last_item_key)	{		// Render all but last item - along with separator		if (!empty($item->link))		{			echo '<a href="' . $item->link . '" class="pathway">' . $item->name . '</a>';		}		else		{			echo '<span>' . $item->name . '</span>';		}		if (($key != $penult_item_key) || $show_last)		{			echo ' '.$separator.' ';		}	}	elseif ($show_last)	{		// Render last item if reqd.		echo '<span>' . $item->name . '</span>';	}	endforeach; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Menu Type Controller * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusControllerMenu extends JControllerForm{	/**	 * Dummy method to redirect back to standard controller	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menus', false));	}	/**	 * Method to save a menu item.	 *	 * @return  void	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app      = JFactory::getApplication();		$data     = $this->input->post->get('jform', array(), 'array');		$context  = 'com_menus.edit.menu';		$task     = $this->getTask();		$recordId = $this->input->getInt('id');		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and saved it - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));			return false;		}		// Make sure we are not trying to modify an administrator menu.		if (isset($data['client_id']) && $data['client_id'] == 1){			JError::raiseNotice(0, JText::_('COM_MENUS_MENU_TYPE_NOT_ALLOWED'));			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));			return false;		}		// Populate the row id from the session.		$data['id'] = $recordId;		// Get the model and attempt to validate the posted data.		$model	= $this->getModel('Menu');		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data	= $model->validate($form, $data);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_menus.edit.menu.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Save the data in the session.			$app->setUserState('com_menus.edit.menu.data', $data);			// Redirect back to the edit screen.			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));			return false;		}		$this->setMessage(JText::_('COM_MENUS_MENU_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the record data in the session.				$recordId = $model->getState($this->context.'.id');				$this->holdEditId($context, $recordId);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit'.$this->getRedirectToItemAppend($recordId), false));				break;			case 'save2new':				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context.'.data', null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));				break;			default:				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context.'.data', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menus', false));				break;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Search HTML view class for the Finder package. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderViewSearch extends JViewLegacy{	protected $query;	protected $params;	protected $state;	protected $user;	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  JError object on failure, void on success.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		$app = JFactory::getApplication();		$params = $app->getParams();		// Get view data.		$state = $this->get('State');		$query = $this->get('Query');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderQuery') : null;		$results = $this->get('Results');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderResults') : null;		$total = $this->get('Total');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderTotal') : null;		$pagination = $this->get('Pagination');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderPagination') : null;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Configure the pathway.		if (!empty($query->input))		{			$app->getPathWay()->addItem($this->escape($query->input));		}		// Push out the view data.		$this->state = &$state;		$this->params = &$params;		$this->query = &$query;		$this->results = &$results;		$this->total = &$total;		$this->pagination = &$pagination;		// Check for a double quote in the query string.		if (strpos($this->query->input, '"'))		{			// Get the application router.			$router =& $app->getRouter();			// Fix the q variable in the URL.			if ($router->getVar('q') !== $this->query->input)			{				$router->setVar('q', $this->query->input);			}		}		// Log the search		JSearchHelper::logSearch($this->query->input, 'com_finder');		// Push out the query data.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		$this->suggested = JHtml::_('query.suggested', $query);		$this->explained = JHtml::_('query.explained', $query);		// Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active = $app->getMenu()->getActive();		if (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$this->prepareDocument($query);		JDEBUG ? $GLOBALS['_PROFILER']->mark('beforeFinderLayout') : null;		parent::display($tpl);		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderLayout') : null;	}	/**	 * Method to get hidden input fields for a get form so that control variables	 * are not lost upon form submission	 *	 * @return  string  A string of hidden input form fields	 *	 * @since   2.5	 */	protected function getFields()	{		$fields = null;		// Get the URI.		$uri = JUri::getInstance(JRoute::_($this->query->toURI()));		$uri->delVar('q');		$uri->delVar('o');		$uri->delVar('t');		$uri->delVar('d1');		$uri->delVar('d2');		$uri->delVar('w1');		$uri->delVar('w2');		$elements = $uri->getQuery(true);		// Create hidden input elements for each part of the URI.		foreach ($elements as $n => $v)		{			if (is_scalar($v))			{				$fields .= '<input type="hidden" name="' . $n . '" value="' . $v . '" />';			}		}		return $fields;	}	/**	 * Method to get the layout file for a search result object.	 *	 * @param   string  $layout  The layout file to check. [optional]	 *	 * @return  string  The layout file to use.	 *	 * @since   2.5	 */	protected function getLayoutFile($layout = null)	{		// Create and sanitize the file name.		$file = $this->_layout . '_' . preg_replace('/[^A-Z0-9_\.-]/i', '', $layout);		// Check if the file exists.		jimport('joomla.filesystem.path');		$filetofind = $this->_createFileName('template', array('name' => $file));		$exists = JPath::find($this->_path['template'], $filetofind);		return ($exists ? $layout : 'result');	}	/**	 * Prepares the document	 *	 * @param   FinderIndexerQuery  $query  The search query	 *	 * @return  void	 *	 * @since   2.5	 */	protected function prepareDocument($query)	{		$app = JFactory::getApplication();		$menus = $app->getMenu();		$title = null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_FINDER_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($layout = $this->params->get('article_layout'))		{			$this->setLayout($layout);		}		// Configure the document meta-description.		if (!empty($this->explained))		{			$explained = $this->escape(html_entity_decode(strip_tags($this->explained), ENT_QUOTES, 'UTF-8'));			$this->document->setDescription($explained);		}		// Configure the document meta-keywords.		if (!empty($query->highlight))		{			$this->document->setMetadata('keywords', implode(', ', $query->highlight));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		// Add feed link to the document head.		if ($this->params->get('show_feed_link', 1) == 1)		{			// Add the RSS link.			$props = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$route = JRoute::_($this->query->toURI() . '&format=feed&type=rss');			$this->document->addHeadLink($route, 'alternate', 'rel', $props);			// Add the ATOM link.			$props = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$route = JRoute::_($this->query->toURI() . '&format=feed&type=atom');			$this->document->addHeadLink($route, 'alternate', 'rel', $props);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input CLI Class * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 */class JInputCLI extends JInput{	/**	 * The executable that was called to run the CLI script.	 *	 * @var    string	 * @since  11.1	 */	public $executable;	/**	 * The additional arguments passed to the script that are not associated	 * with a specific argument name.	 *	 * @var    array	 * @since  11.1	 */	public $args = array();	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is $_REQUEST)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   11.1	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		// Get the command line options		$this->parseArguments();		// Set the options for the class.		$this->options = $options;	}	/**	 * Method to serialize the input.	 *	 * @return  string  The serialized input.	 *	 * @since   12.1	 */	public function serialize()	{		// Load all of the inputs.		$this->loadAllInputs();		// Remove $_ENV and $_SERVER from the inputs.		$inputs = $this->inputs;		unset($inputs['env']);		unset($inputs['server']);		// Serialize the executable, args, options, data, and inputs.		return serialize(array($this->executable, $this->args, $this->options, $this->data, $inputs));	}	/**	 * Method to unserialize the input.	 *	 * @param   string  $input  The serialized input.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function unserialize($input)	{		// Unserialize the executable, args, options, data, and inputs.		list($this->executable, $this->args, $this->options, $this->data, $this->inputs) = unserialize($input);		// Load the filter.		if (isset($this->options['filter']))		{			$this->filter = $this->options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}	}	/**	 * Initialise the options and arguments	 *	 * @return  void	 *	 * @since   11.1	 */	protected function parseArguments()	{		// Get the list of argument values from the environment.		$args = $_SERVER['argv'];		// Set the path used for program execution and remove it form the program arguments.		$this->executable = array_shift($args);		// We use a for loop because in some cases we need to look ahead.		for ($i = 0; $i < count($args); $i++)		{			// Get the current argument to analyze.			$arg = $args[$i];			// First let's tackle the long argument case.  eg. --foo			if (strlen($arg) > 2 && substr($arg, 0, 2) == '--')			{				// Attempt to split the thing over equals so we can get the key/value pair if an = was used.				$arg = substr($arg, 2);				$parts = explode('=', $arg);				$this->data[$parts[0]] = true;				// Does not have an =, so let's look ahead to the next argument for the value.				if (count($parts) == 1 && isset($args[$i + 1]) && preg_match('/^--?.+/', $args[$i + 1]) == 0)				{					$this->data[$parts[0]] = $args[$i + 1];					// Since we used the next argument, increment the counter so we don't use it again.					$i++;				}				// We have an equals sign so take the second "part" of the argument as the value.				elseif (count($parts) == 2)				{					$this->data[$parts[0]] = $parts[1];				}			}			// Next let's see if we are dealing with a "bunch" of short arguments.  eg. -abc			elseif (strlen($arg) > 2 && $arg[0] == '-')			{				// For each of these arguments set the value to TRUE since the flag has been set.				for ($j = 1; $j < strlen($arg); $j++)				{					$this->data[$arg[$j]] = true;				}			}			// OK, so it isn't a long argument or bunch of short ones, so let's look and see if it is a single			// short argument.  eg. -h			elseif (strlen($arg) == 2 && $arg[0] == '-')			{				// Go ahead and set the value to TRUE and if we find a value later we'll overwrite it.				$this->data[$arg[1]] = true;				// Let's look ahead to see if the next argument is a "value".  If it is, use it for this value.				if (isset($args[$i + 1]) && preg_match('/^--?.+/', $args[$i + 1]) == 0)				{					$this->data[$arg[1]] = $args[$i + 1];					// Since we used the next argument, increment the counter so we don't use it again.					$i++;				}			}			// Last but not least, we don't have a key/value based argument so just add it to the arguments list.			else			{				$this->args[] = $arg;			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Echo logger class. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerEcho extends JLogLogger{	/**	 * @var    string  Value to use at the end of an echoed log entry to separate lines.	 * @since  11.1	 */	protected $line_separator = "\n";	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   12.1	 */	public function __construct(array &$options)	{		parent::__construct($options);		if (!empty($this->options['line_separator']))		{			$this->line_separator = $this->options['line_separator'];		}	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addEntry(JLogEntry $entry)	{		echo $this->priorities[$entry->priority] . ': '			. $entry->message . (empty($entry->category) ? '' : ' [' . $entry->category . ']')			. $this->line_separator;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       3.0 */class JFormFieldHeadertag extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  3.0	 */	protected $type = 'HeaderTag';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   3.0	 */	protected function getOptions()	{		$options = array();		$tags = array('h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p');		// Create one new option object for each tag		foreach ($tags as $tag)		{			$tmp = JHtml::_('select.option', $tag, $tag);			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_messages')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$task = JFactory::getApplication()->input->get('task');$controller	= JControllerLegacy::getInstance('Messages');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strspn* Find length of initial segment matching mask* Note: requires utf8_strlen and utf8_substr (if start, length are used)* @param string* @return int* @see http://www.php.net/strspn* @package utf8* @subpackage strings*/function utf8_strspn($str, $mask, $start = NULL, $length = NULL) {    $mask = preg_replace('!([\\\\\\-\\]\\[/^])!','\\\${1}',$mask);	// Fix for $start but no $length argument.    if ($start !== null && $length === null) {    	$length = utf8_strlen($str);    }    if ( $start !== NULL || $length !== NULL ) {        $str = utf8_substr($str, $start, $length);    }    preg_match('/^['.$mask.']+/u',$str, $matches);    if ( isset($matches[0]) ) {        return utf8_strlen($matches[0]);    }    return 0;}
<?php/** * @package     Joomla.Platform * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base View Class * * @package     Joomla.Platform * @subpackage  View * @since       12.1 */abstract class JViewBase implements JView{	/**	 * The model object.	 *	 * @var    JModel	 * @since  12.1	 */	protected $model;	/**	 * Method to instantiate the view.	 *	 * @param   JModel  $model  The model object.	 *	 * @since  12.1	 */	public function __construct(JModel $model)	{		// Setup dependencies.		$this->model = $model;	}	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @see     JView::escape()	 * @since   12.1	 */	public function escape($output)	{		return $output;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to transliterate strings * * @package     Joomla.Platform * @subpackage  Language * @since       11.1 * @note        Port of phputf8's utf8_accents_to_ascii() */class JLanguageTransliterate{	/**	 * Returns strings transliterated from UTF-8 to Latin	 *	 * @param   string   $string  String to transliterate	 * @param   boolean  $case    Optionally specify upper or lower case. Default to null.	 *	 * @return  string  Transliterated string	 *	 * @since   11.1	 */	public static function utf8_latin_to_ascii($string, $case = 0)	{		static $UTF8_LOWER_ACCENTS = null;		static $UTF8_UPPER_ACCENTS = null;		if ($case <= 0)		{			if (is_null($UTF8_LOWER_ACCENTS))			{				$UTF8_LOWER_ACCENTS = array(					'' => 'a',					'' => 'o',					'' => 'd',					'' => 'f',					'' => 'e',					'' => 's',					'' => 'o',					'' => 'ss',					'' => 'a',					'' => 'r',					'' => 't',					'' => 'n',					'' => 'a',					'' => 'k',					'' => 's',					'' => 'y',					'' => 'n',					'' => 'l',					'' => 'h',					'' => 'p',					'' => 'o',					'' => 'u',					'' => 'e',					'' => 'e',					'' => 'c',					'' => 'w',					'' => 'c',					'' => 'o',					'' => 's',					'' => 'o',					'' => 'g',					'' => 't',					'' => 's',					'' => 'e',					'' => 'c',					'' => 's',					'' => 'i',					'' => 'u',					'' => 'c',					'' => 'e',					'' => 'w',					'' => 't',					'' => 'u',					'' => 'c',					'' => 'oe',					'' => 'e',					'' => 'y',					'' => 'a',					'' => 'l',					'' => 'u',					'' => 'u',					'' => 's',					'' => 'g',					'' => 'l',					'' => 'f',					'' => 'z',					'' => 'w',					'' => 'b',					'' => 'a',					'' => 'i',					'' => 'i',					'' => 'd',					'' => 't',					'' => 'r',					'' => 'ae',					'' => 'i',					'' => 'r',					'' => 'e',					'' => 'ue',					'' => 'o',					'' => 'e',					'' => 'n',					'' => 'n',					'' => 'h',					'' => 'g',					'' => 'd',					'' => 'j',					'' => 'y',					'' => 'u',					'' => 'u',					'' => 'u',					'' => 't',					'' => 'y',					'' => 'o',					'' => 'a',					'' => 'l',					'' => 'w',					'' => 'z',					'' => 'i',					'' => 'a',					'' => 'g',					'' => 'm',					'' => 'o',					'' => 'i',					'' => 'u',					'' => 'i',					'' => 'z',					'' => 'a',					'' => 'u',					'' => 'th',					'' => 'dh',					'' => 'ae',					'' => 'u',					'' => 'e',					'' => 'oe');			}			$string = str_replace(array_keys($UTF8_LOWER_ACCENTS), array_values($UTF8_LOWER_ACCENTS), $string);		}		if ($case >= 0)		{			if (is_null($UTF8_UPPER_ACCENTS))			{				$UTF8_UPPER_ACCENTS = array(					'' => 'A',					'' => 'O',					'' => 'D',					'' => 'F',					'' => 'E',					'' => 'S',					'' => 'O',					'' => 'A',					'' => 'R',					'' => 'T',					'' => 'N',					'' => 'A',					'' => 'K',					'' => 'S',					'' => 'Y',					'' => 'N',					'' => 'L',					'' => 'H',					'' => 'P',					'' => 'O',					'' => 'U',					'' => 'E',					'' => 'E',					'' => 'C',					'' => 'W',					'' => 'C',					'' => 'O',					'' => 'S',					'' => 'O',					'' => 'G',					'' => 'T',					'' => 'S',					'' => 'E',					'' => 'C',					'' => 'S',					'' => 'I',					'' => 'U',					'' => 'C',					'' => 'E',					'' => 'W',					'' => 'T',					'' => 'U',					'' => 'C',					'' => 'Oe',					'' => 'E',					'' => 'Y',					'' => 'A',					'' => 'L',					'' => 'U',					'' => 'U',					'' => 'S',					'' => 'G',					'' => 'L',					'' => 'F',					'' => 'Z',					'' => 'W',					'' => 'B',					'' => 'A',					'' => 'I',					'' => 'I',					'' => 'D',					'' => 'T',					'' => 'R',					'' => 'Ae',					'' => 'I',					'' => 'R',					'' => 'E',					'' => 'Ue',					'' => 'O',					'' => 'E',					'' => 'N',					'' => 'N',					'' => 'H',					'' => 'G',					'' => 'D',					'' => 'J',					'' => 'Y',					'' => 'U',					'' => 'U',					'' => 'U',					'' => 'T',					'' => 'Y',					'' => 'O',					'' => 'A',					'' => 'L',					'' => 'W',					'' => 'Z',					'' => 'I',					'' => 'A',					'' => 'G',					'' => 'M',					'' => 'O',					'' => 'I',					'' => 'U',					'' => 'I',					'' => 'Z',					'' => 'A',					'' => 'U',					'' => 'Th',					'' => 'Dh',					'' => 'Ae',					'' => 'E',					'' => 'Oe');			}			$string = str_replace(array_keys($UTF8_UPPER_ACCENTS), array_values($UTF8_UPPER_ACCENTS), $string);		}		return $string;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for cloaking email addresses * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlEmail{	/**	 * Simple Javascript email Cloaker	 *	 * By default replaces an email with a mailto link with email cloaked	 *	 * @param   string   $mail    The -mail address to cloak.	 * @param   boolean  $mailto  True if text and mailing address differ	 * @param   string   $text    Text for the link	 * @param   boolean  $email   True if text is an e-mail address	 *	 * @return  string  The cloaked email.	 *	 * @since   11.1	 */	public static function cloak($mail, $mailto = true, $text = '', $email = true)	{		// Convert text		$mail = self::_convertEncoding($mail);		// Split email by @ symbol		$mail = explode('@', $mail);		$mail_parts = explode('.', $mail[1]);		// Random number		$rand = rand(1, 100000);		$replacement = "\n <script type='text/javascript'>";		$replacement .= "\n <!--";		$replacement .= "\n var prefix = '&#109;a' + 'i&#108;' + '&#116;o';";		$replacement .= "\n var path = 'hr' + 'ef' + '=';";		$replacement .= "\n var addy" . $rand . " = '" . @$mail[0] . "' + '&#64;';";		$replacement .= "\n addy" . $rand . " = addy" . $rand . " + '" . implode("' + '&#46;' + '", $mail_parts) . "';";		if ($mailto)		{			// Special handling when mail text is different from mail address			if ($text)			{				if ($email)				{					// Convert text					$text = self::_convertEncoding($text);					// Split email by @ symbol					$text = explode('@', $text);					$text_parts = explode('.', $text[1]);					$replacement .= "\n var addy_text" . $rand . " = '" . @$text[0] . "' + '&#64;' + '" . implode("' + '&#46;' + '", @$text_parts)						. "';";				}				else				{					$replacement .= "\n var addy_text" . $rand . " = '" . $text . "';";				}				$replacement .= "\n document.write('<a ' + path + '\'' + prefix + ':' + addy" . $rand . " + '\'>');";				$replacement .= "\n document.write(addy_text" . $rand . ");";				$replacement .= "\n document.write('<\/a>');";			}			else			{				$replacement .= "\n document.write('<a ' + path + '\'' + prefix + ':' + addy" . $rand . " + '\'>');";				$replacement .= "\n document.write(addy" . $rand . ");";				$replacement .= "\n document.write('<\/a>');";			}		}		else		{			$replacement .= "\n document.write(addy" . $rand . ");";		}		$replacement .= "\n //-->";		$replacement .= '\n </script>';		// XHTML compliance no Javascript text handling		$replacement .= "<script type='text/javascript'>";		$replacement .= "\n <!--";		$replacement .= "\n document.write('<span style=\'display: none;\'>');";		$replacement .= "\n //-->";		$replacement .= "\n </script>";		$replacement .= JText::_('JLIB_HTML_CLOAKING');		$replacement .= "\n <script type='text/javascript'>";		$replacement .= "\n <!--";		$replacement .= "\n document.write('</');";		$replacement .= "\n document.write('span>');";		$replacement .= "\n //-->";		$replacement .= "\n </script>";		return $replacement;	}	/**	 * Convert encoded text	 *	 * @param   string  $text  Text to convert	 *	 * @return  string  The converted text.	 *	 * @since   11.1	 */	protected static function _convertEncoding($text)	{		// Replace vowels with character encoding		$text = str_replace('a', '&#97;', $text);		$text = str_replace('e', '&#101;', $text);		$text = str_replace('i', '&#105;', $text);		$text = str_replace('o', '&#111;', $text);		$text = str_replace('u', '&#117;', $text);		return $text;	}}
<?php/** * Verifies that class members are spaced correctly. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MemberVarSpacingSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if(class_exists('PHP_CodeSniffer_Standards_AbstractVariableSniff', true) === false){    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractVariableSniff not found');}/** * Verifies that class members are spaced correctly. * * Example: * <b class="bad">Bad:</b> * class Foo * { *     <b class="bad">private $foo;</b> *     <b class="bad">private $bar;</b> * } * * <b class="good">Good:</b> * class Foo * { *     <b class="good">private $foo;</b> *     <b class="good">             </b> *     <b class="good">private $bar;</b> * } * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_MemberVarSpacingSniff extends PHP_CodeSniffer_Standards_AbstractVariableSniff{    /**     * Processes the function tokens within the class.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processMemberVar(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // There needs to be 1 blank line before the var, not counting comments.        $prevLineToken = null;        for($i = ($stackPtr); $i > 0; $i--)        {            if(in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$commentTokens) === true)            {                // Skip comments.                continue;            }            else if(strpos($tokens[$i]['content'], $phpcsFile->eolChar) === false)            {                // Not the end of the line.                continue;            }            else            {                // If this is a WHITESPACE token, and the token right before                // it is a DOC_COMMENT, then it is just the newline after the                // member var's comment, and can be skipped.                if($tokens[$i]['code'] === T_WHITESPACE                && in_array($tokens[($i - 1)]['code'], PHP_CodeSniffer_Tokens::$commentTokens) === true)                {                    continue;                }                $prevLineToken = $i;                break;            }        }//for        if(is_null($prevLineToken) === true)        {            // Never found the previous line, which means            // there are 0 blank lines before the member var.            $foundLines = 0;        }        else        {            $prevContent = $phpcsFile->findPrevious(array(T_WHITESPACE, T_DOC_COMMENT), $prevLineToken, null, true);            if($tokens[$prevContent]['code'] == T_OPEN_CURLY_BRACKET)            {                $foundLines = 1;            }            else            {                $foundLines  = ($tokens[$prevLineToken]['line'] - $tokens[$prevContent]['line']);            }        }//end if        if($foundLines !== 1)        {            $error = sprintf('Expected 1 blank line before member var; %s found'            , $foundLines);            $phpcsFile->addError($error, $stackPtr, 'After');        }    }//function    /**     * Processes normal variables.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processVariable(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function    /**     * Processes variables in double quoted strings.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer $stackPtr The position where the token was found.     *     * @return void     */    protected function processVariableInString(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function}//class
<?php/** * @package     Joomla.Administrator * @subpackage  mod_multilangstatus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.modal');?><div class="btn-group multilanguage"><a class="modal" href="<?php echo JRoute::_('index.php?option=com_languages&view=multilangstatus&tmpl=component');?>" rel="{handler:'iframe', size:{x:700,y:400}}"><i class="icon-comment"></i> <?php echo JText::_('MOD_MULTILANGSTATUS');?></a></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;defined('_JEXEC') or die;$app	= JFactory::getApplication();$doc	= JFactory::getDocument();$lang	= JFactory::getLanguage();$input	= $app->input;$user	= JFactory::getUser();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Load template javascript$doc->addScript('templates/'.$this->template.'/js/template.js', 'text/javascript');// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo  $this->language; ?>" lang="<?php echo  $this->language; ?>" dir="<?php echo  $this->direction; ?>"><head><jdoc:include type="head" /><!-- Load additional CSS styles for Internet Explorer --><!--[if IE 8]>	<link href="templates/<?php echo  $this->template ?>/css/ie8.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if IE 7]>	<link href="templates/<?php echo  $this->template ?>/css/ie7.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--></head><body id="minwidth" class="cpanel-page"><div id="containerwrap">	<!-- Header Logo -->	<div id="header">		<!-- Site Title and Skip to Content -->		<div class="title-ua">			<h1 class="title"><?php echo $this->params->get('showSiteName') ? $app->getCfg('sitename') . " " . JText::_('JADMINISTRATION') : JText::_('JADMINISTRATION'); ?></h1>			<div id="skiplinkholder"><p><a id="skiplink" href="#skiptarget"><?php echo JText::_('TPL_HATHOR_SKIP_TO_MAIN_CONTENT'); ?></a></p></div>      	</div>	</div><!-- end header -->	<!-- Main Menu Navigation -->	<div id="nav">		<div id="module-menu">			<h2 class="element-invisible"><?php echo JText::_('TPL_HATHOR_MAIN_MENU'); ?></h2>			<jdoc:include type="modules" name="menu" />		</div>		<div class="clr"></div>	</div><!-- end nav -->	<!-- Status Module -->	<div id="module-status">		<jdoc:include type="modules" name="status"/>			<?php			//Display an harcoded logout			$task = $app->input->get('task');			if ($task == 'edit' || $task == 'editA' || $app->input->getInt('hidemainmenu'))			{				$logoutLink = '';			} else {				$logoutLink = JRoute::_('index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1');			}			$hideLinks = $app->input->getBool('hidemainmenu');			$output = array();			// Print the Preview link to Main site.			//$output[] = '<span class="viewsite"><a href="'.JURI::root().'" target="_blank">'.JText::_('JGLOBAL_VIEW_SITE').'</a></span>';			// Print the logout link.			//$output[] = '<span class="logout">' .($hideLinks ? '' : '<a href="'.$logoutLink.'">').JText::_('JLOGOUT').($hideLinks ? '' : '</a>').'</span>';			// Output the items.			foreach ($output as $item) :			echo $item;			endforeach;			?>	</div>	<!-- Content Area -->	<div id="content">		<!-- Component Title -->		<jdoc:include type="modules" name="title" />		<!-- System Messages -->		<jdoc:include type="message" />		<!-- Sub Menu Navigation -->		<div id="no-submenu"></div>   		<div class="clr"></div>		<!-- Beginning of Actual Content -->		<div id="element-box">			<p id="skiptargetholder"><a id="skiptarget" class="skip" tabindex="-1"></a></p>				<div class="adminform">					<!-- Display the Quick Icon Shortcuts -->					<div class="cpanel-icons">						<?php if ($this->countModules('icon') > 1):?>							<?php echo JHtml::_('sliders.start', 'position-icon', array('useCookie' => 1));?>							<jdoc:include type="modules" name="icon" />							<?php echo JHtml::_('sliders.end');?>						<?php else:?>							<jdoc:include type="modules" name="icon" />						<?php endif;?>					</div>					<!-- Display Admin Information Panels -->					<div class="cpanel-component">						<jdoc:include type="component" />					</div>				</div>				<div class="clr"></div>		</div><!-- end element-box -->		<noscript>			<?php echo  JText::_('JGLOBAL_WARNJAVASCRIPT') ?>		</noscript>		<div class="clr"></div>	</div><!-- end content -->		<div class="clr"></div>	</div><!-- end containerwrap -->	<!-- Footer -->	<div id="footer">		<jdoc:include type="modules" name="footer" style="none"  />		<p class="copyright">			<?php $joomla = '<a href="http://www.joomla.org">Joomla!&#174;</a>';			echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla) ?>		</p>	</div></body></html>
<?php/** * @package     Joomla.Libraries * @subpackage  Help * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Help system class * * @package     Joomla.Libraries * @subpackage  Help * @since       1.5 */class JHelp{	/**	 * Create a URL for a given help key reference	 *	 * @param   string   $ref           The name of the help screen (its key reference)	 * @param   boolean  $useComponent  Use the help file in the component directory	 * @param   string   $override      Use this URL instead of any other	 * @param   string   $component     Name of component (or null for current component)	 *	 * @return  string	 *	 * @since   1.5	 */	public static function createURL($ref, $useComponent = false, $override = null, $component = null)	{		$local = false;		$app = JFactory::getApplication();		if (is_null($component))		{			$component = JApplicationHelper::getComponentName();		}		//  Determine the location of the help file.  At this stage the URL		//  can contain substitution codes that will be replaced later.		if ($override)		{			$url = $override;		}		else		{			// Get the user help URL.			$user = JFactory::getUser();			$url = $user->getParam('helpsite');			// If user hasn't specified a help URL, then get the global one.			if ($url == '')			{				$url = $app->getCfg('helpurl');			}			// Component help URL overrides user and global.			if ($useComponent)			{				// Look for help URL in component parameters.				$params = JComponentHelper::getParams($component);				$url = $params->get('helpURL');				if ($url == '')				{					$local = true;					$url = 'components/{component}/help/{language}/{keyref}';				}			}			// Set up a local help URL.			if (!$url)			{				$local = true;				$url = 'help/{language}/{keyref}';			}		}		// If the URL is local then make sure we have a valid file extension on the URL.		if ($local)		{			if (!preg_match('#\.html$|\.xml$#i', $ref))			{				$url .= '.html';			}		}		/*		 *  Replace substitution codes in the URL.		 */		$lang = JFactory::getLanguage();		$version = new JVersion;		$jver = explode('.', $version->getShortVersion());		$jlang = explode('-', $lang->getTag());		$debug = $lang->setDebug(false);		$keyref = JText::_($ref);		$lang->setDebug($debug);		// Replace substitution codes in help URL.		$search = array(			// Application name (eg. 'Administrator')			'{app}',			// Component name (eg. 'com_content')			'{component}',			// Help screen key reference			'{keyref}',			// Full language code (eg. 'en-GB')			'{language}',			// Short language code (eg. 'en')			'{langcode}',			// Region code (eg. 'GB')			'{langregion}',			// Joomla major version number			'{major}',			// Joomla minor version number			'{minor}',			// Joomla maintenance version number			'{maintenance}'		);		$replace = array(			// {app}			$app->getName(),			// {component}			$component,			// {keyref}			$keyref,			// {language}			$lang->getTag(),			// {langcode}			$jlang[0],			// {langregion}			$jlang[1],			// {major}			$jver[0],			// {minor}			$jver[1],			// {maintenance}			$jver[2]		);		// If the help file is local then check it exists.		// If it doesn't then fallback to English.		if ($local)		{			$try = str_replace($search, $replace, $url);			if (!is_file(JPATH_BASE . '/' . $try))			{				$replace[3] = 'en-GB';				$replace[4] = 'en';				$replace[5] = 'GB';			}		}		$url = str_replace($search, $replace, $url);		return $url;	}	/**	 * Builds a list of the help sites which can be used in a select option.	 *	 * @param   string  $pathToXml  Path to an XML file.	 *	 * @return  array  An array of arrays (text, value, selected).	 *	 * @since   1.5	 */	public static function createSiteList($pathToXml)	{		$list = array();		$xml = false;		if (!empty($pathToXml))		{			$xml = simplexml_load_file($pathToXml);		}		if (!$xml)		{			$option['text'] = 'English (GB) help.joomla.org';			$option['value'] = 'http://help.joomla.org';			$list[] = $option;		}		else		{			$option = array();			foreach ($xml->sites->site as $site)			{				$option['text'] = (string) $site;				$option['value'] = (string) $site->attributes()->url;				$list[] = $option;			}		}		return $list;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Quickicon.Joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! udpate notification plugin * * @package     Joomla.Plugin * @subpackage  Quickicon.Joomlaupdate * @since       2.5 */class PlgQuickiconJoomlaupdate extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * This method is called when the Quick Icons module is constructing its set	 * of icons. You can return an array which defines a single icon and it will	 * be rendered right after the stock Quick Icons.	 *	 * @param  $context  The calling context	 *	 * @return array A list of icon definition associative arrays, consisting of the	 *				 keys link, image, text and access.	 *	 * @since       2.5	 */	public function onGetIcons($context)	{		if ($context != $this->params->get('context', 'mod_quickicon') || !JFactory::getUser()->authorise('core.manage', 'com_installer'))		{			return;		}		JHtml::_('jquery.framework');		$cur_template = JFactory::getApplication()->getTemplate();		$ajax_url = JURI::base().'index.php?option=com_installer&view=update&task=update.ajax';		$script = "var plg_quickicon_joomlaupdate_ajax_url = '$ajax_url';\n";		$script .= 'var plg_quickicon_jupdatecheck_jversion = "'.JVERSION.'";'."\n";		$script .= 'var plg_quickicon_joomlaupdate_text = {"UPTODATE" : "'.			JText::_('PLG_QUICKICON_JOOMLAUPDATE_UPTODATE', true).'", "UPDATEFOUND": "'.			JText::_('PLG_QUICKICON_JOOMLAUPDATE_UPDATEFOUND', true).'", "ERROR": "'.			JText::_('PLG_QUICKICON_JOOMLAUPDATE_ERROR', true)."\"};\n";		$script .= 'var plg_quickicon_joomlaupdate_img = {"UPTODATE" : "'.			JURI::base(true) .'/templates/'. $cur_template .'/images/header/icon-48-jupdate-uptodate.png'.'", "ERROR": "'.			JURI::base(true) .'/templates/'. $cur_template .'/images/header/icon-48-deny.png'.'", "UPDATEFOUND": "'.			JURI::base(true) .'/templates/'. $cur_template .'/images/header/icon-48-jupdate-updatefound.png'."\"};\n";		$document = JFactory::getDocument();		$document->addScriptDeclaration($script);		JHtml::_('script', 'plg_quickicon_joomlaupdate/jupdatecheck.js', false, true);		return array(array(			'link' => 'index.php?option=com_joomlaupdate',			'image' => 'download',			'icon' => 'header/icon-48-download.png',			'text' => JText::_('PLG_QUICKICON_JOOMLAUPDATE_CHECKING'),			'id' => 'plg_quickicon_joomlaupdate'		));	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div style="padding: 10px;">	<div style="text-align:right">		<a href="javascript: void window.close()">			<?php echo JText::_('COM_MAILTO_CLOSE_WINDOW'); ?> <?php echo JHtml::_('image', 'mailto/close-x.png', null, null, true); ?></a>	</div>	<h2>		<?php echo JText::_('COM_MAILTO_EMAIL_SENT'); ?>	</h2></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="newsflash<?php echo $moduleclass_sfx; ?>"><?phpforeach ($list as $item) :	require JModuleHelper::getLayoutPath('mod_articles_news', '_item');endforeach;?></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$list = ModArticlesPopularHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_articles_popular', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="registration-complete<?php echo $this->pageclass_sfx;?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view level controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerGroup extends JControllerForm{		/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_GROUP';	/**	 * Method to check if you can save a new or existing record.	 *	 * Overrides JControllerForm::allowSave to check the core.admin permission.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowSave($data, $key = 'id')	{		return (JFactory::getUser()->authorise('core.admin', $this->option) && parent::allowSave($data, $key));	}	/**	 * Overrides JControllerForm::allowEdit	 *	 * Checks that non-Super Admins are not editing Super Admins.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		// Check if this group is a Super Admin		if (JAccess::checkGroup($data[$key], 'core.admin'))		{			// If I'm not a Super Admin, then disallow the edit.			if (!JFactory::getUser()->authorise('core.admin'))			{				return false;			}		}		return parent::allowEdit($data, $key);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('WeblinksHelper', JPATH_ADMINISTRATOR . '/components/com_weblinks/helpers/weblinks.php');JLoader::register('CategoryHelperAssociation', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/association.php');/** * Weblinks Component Association Helper * * @package     Joomla.Site * @subpackage  com_weblinks * @since       3.0 */abstract class WeblinksHelperAssociation extends CategoryHelperAssociation{	/**	 * Method to get the associations for a given item	 *	 * @param   integer  $id    Id of the item	 * @param   string   $view  Name of the view	 *	 * @return  array   Array of associations for the item	 *	 * @since  3.0	 */	public static function getAssociations($id = 0, $view = null)	{		jimport('helper.route', JPATH_COMPONENT_SITE);		$app = JFactory::getApplication();		$jinput = $app->input;		$view = is_null($view) ? $jinput->get('view') : $view;		$id = empty($id) ? $jinput->getInt('id') : $id;		if ($view == 'category' || $view == 'categories')		{			return self::getCategoryAssociations($id, 'com_weblinks');		}		return array();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersViewRemind extends JViewLegacy{	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	$tpl	The template file to include	 * @since   1.5	 */	public function display($tpl = null)	{		// Get the view data.		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->params;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document.	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_REMIND'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PHP class format handler for JRegistry * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistryFormatPHP extends JRegistryFormat{	/**	 * Converts an object into a php class string.	 * - NOTE: Only one depth level is supported.	 *	 * @param   object  $object  Data Source Object	 * @param   array   $params  Parameters used by the formatter	 *	 * @return  string  Config class formatted string	 *	 * @since   11.1	 */	public function objectToString($object, $params = array())	{		// Build the object variables string		$vars = '';		foreach (get_object_vars($object) as $k => $v)		{			if (is_scalar($v))			{				$vars .= "\tpublic $" . $k . " = '" . addcslashes($v, '\\\'') . "';\n";			}			elseif (is_array($v) || is_object($v))			{				$vars .= "\tpublic $" . $k . " = " . $this->getArrayString((array) $v) . ";\n";			}		}		$str = "<?php\nclass " . $params['class'] . " {\n";		$str .= $vars;		$str .= "}";		// Use the closing tag if it not set to false in parameters.		if (!isset($params['closingtag']) || $params['closingtag'] !== false)		{			$str .= "\n?>";		}		return $str;	}	/**	 * Parse a PHP class formatted string and convert it into an object.	 *	 * @param   string  $data     PHP Class formatted string to convert.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  object   Data object.	 *	 * @since   11.1	 */	public function stringToObject($data, array $options = array())	{		return true;	}	/**	 * Method to get an array as an exported string.	 *	 * @param   array  $a  The array to get as a string.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function getArrayString($a)	{		$s = 'array(';		$i = 0;		foreach ($a as $k => $v)		{			$s .= ($i) ? ', ' : '';			$s .= '"' . $k . '" => ';			if (is_array($v) || is_object($v))			{				$s .= $this->getArrayString((array) $v);			}			else			{				$s .= '"' . addslashes($v) . '"';			}			$i++;		}		$s .= ')';		return $s;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class adjust the smoothness of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterSmooth extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Validate that the smoothing value exists and is an integer.		if (!isset($options[IMG_FILTER_SMOOTH]) || !is_int($options[IMG_FILTER_SMOOTH]))		{			throw new InvalidArgumentException('No valid smoothing value was given.  Expected integer.');		}		// Perform the smoothing filter.		imagefilter($this->handle, IMG_FILTER_SMOOTH, $options[IMG_FILTER_SMOOTH]);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="login-form" class="form-vertical"><?php if ($params->get('greeting')) : ?>	<div class="login-greeting">	<?php if ($params->get('name') == 0) : {		echo JText::sprintf('MOD_LOGIN_HINAME', htmlspecialchars($user->get('name')));	} else : {		echo JText::sprintf('MOD_LOGIN_HINAME', htmlspecialchars($user->get('username')));	} endif; ?>	</div><?php endif; ?>	<div class="logout-button">		<input type="submit" name="Submit" class="btn btn-primary" value="<?php echo JText::_('JLOGOUT'); ?>" />		<input type="hidden" name="option" value="com_users" />		<input type="hidden" name="task" value="user.logout" />		<input type="hidden" name="return" value="<?php echo $return; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Plugin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JPlugin Class * * @package     Joomla.Platform * @subpackage  Plugin * @since       11.1 */abstract class JPlugin extends JEvent{	/**	 * A JRegistry object holding the parameters for the plugin	 *	 * @var    JRegistry	 * @since  11.1	 */	public $params = null;	/**	 * The name of the plugin	 *	 * @var    string	 * @since  11.1	 */	protected $_name = null;	/**	 * The plugin type	 *	 * @var    string	 * @since  11.1	 */	protected $_type = null;	/**	 * Affects constructor behavior. If true, language files will be loaded automatically.	 *	 * @var    boolean	 * @since  12.3	 */	protected $autoloadLanguage = false;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe	 * @param   array   $config    An optional associative array of configuration settings.	 *                             Recognized key values include 'name', 'group', 'params', 'language'	 *                             (this list is not meant to be comprehensive).	 *	 * @since   11.1	 */	public function __construct(&$subject, $config = array())	{		// Get the parameters.		if (isset($config['params']))		{			if ($config['params'] instanceof JRegistry)			{				$this->params = $config['params'];			}			else			{				$this->params = new JRegistry;				$this->params->loadString($config['params']);			}		}		// Get the plugin name.		if (isset($config['name']))		{			$this->_name = $config['name'];		}		// Get the plugin type.		if (isset($config['type']))		{			$this->_type = $config['type'];		}		// Load the language files if needed.		if ($this->autoloadLanguage)		{			$this->loadLanguage();		}		parent::__construct($subject);	}	/**	 * Loads the plugin language file	 *	 * @param   string  $extension  The extension for which a language file should be loaded	 * @param   string  $basePath   The basepath to use	 *	 * @return  boolean  True, if the file has successfully loaded.	 *	 * @since   11.1	 */	public function loadLanguage($extension = '', $basePath = JPATH_ADMINISTRATOR)	{		if (empty($extension))		{			$extension = 'plg_' . $this->_type . '_' . $this->_name;		}		$lang = JFactory::getLanguage();		return $lang->load(strtolower($extension), $basePath, null, false, false)			|| $lang->load(strtolower($extension), JPATH_PLUGINS . '/' . $this->_type . '/' . $this->_name, null, false, false)			|| $lang->load(strtolower($extension), $basePath, $lang->getDefault(), false, false)			|| $lang->load(strtolower($extension), JPATH_PLUGINS . '/' . $this->_type . '/' . $this->_name, $lang->getDefault(), false, false);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the language for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSetlanguage extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Very crude workaround to give an error message when JSON is disabled		if (!function_exists('json_encode') || !function_exists('json_decode'))		{			$app->setHeader('status', 500);			$app->setHeader('Content-Type', 'application/json; charset=utf-8');			$app->sendHeaders();			echo '{"token":"' . JSession::getFormToken(true) . '","lang":"' . JFactory::getLanguage()->getTag()				. '","error":true,"header":"' . JText::_('INSTL_HEADER_ERROR') . '","message":"' . JText::_('INSTL_WARNJSON') . '"}';			$app->close();		}		// Check for potentially unwritable session		$session = JFactory::getSession();		if ($session->isNew())		{			$this->sendResponse(new Exception(JText::_('INSTL_COOKIES_NOT_ENABLED'), 500));		}		// Get the setup model.		$model = new InstallationModelSetup;		// Get the posted values from the request and validate them.		$data = $this->input->post->get('jform', array(), 'array');		$return	= $model->validate($data, 'preinstall');		$r = new stdClass;		// Check for validation errors.		if ($return === false)		{			/*			 * The validate method enqueued all messages for us, so we just need to			 * redirect back to the site setup screen.			 */			$r->view = $this->input->getWord('view', 'site');			$app->sendJsonResponse($r);		}		// Store the options in the session.		$model->storeOptions($return);		// Setup language		$language = JFactory::getLanguage();		$language->setLanguage($return['language']);		// Redirect to the page.		$r->view = $this->input->getWord('view', 'site');		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filters controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderControllerFilters extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   2.5	 */	public function getModel($name = 'Filter', $prefix = 'FinderModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.application.router');/** * Class to create and parse routes * * @package  Joomla.Installation * @since    1.5 */class JRouterInstallation extends JRouter{	/**	 * Function to convert a route to an internal URI	 *	 * @param   JURI  $url  The uri.	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function parse($url)	{		return true;	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 *	 * @since   1.5	 */	public function build($url)	{		$url = str_replace('&amp;', '&', $url);		return new JUri($url);	}}
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt *//** * Finder CLI Bootstrap * * Run the framework bootstrap with a couple of mods based on the script's needs */// We are a valid entry point.const _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}// Get the framework.require_once JPATH_LIBRARIES . '/import.legacy.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';// Import the configuration.require_once JPATH_CONFIGURATION . '/configuration.php';// System configuration.$config = new JConfig;// Configure error reporting to maximum for CLI output.error_reporting(E_ALL);ini_set('display_errors', 1);// Load Library language$lang = JFactory::getLanguage();// Try the finder_cli file in the current language (without allowing the loading of the file in the default language)$lang->load('finder_cli', JPATH_SITE, null, false, false)// Fallback to the finder_cli file in the default language|| $lang->load('finder_cli', JPATH_SITE, null, true);/** * A command line cron job to run the Finder indexer. * * @package     Joomla.CLI * @subpackage  com_finder * @since       2.5 */class FinderCli extends JApplicationCli{	/**	 * Start time for the index process	 *	 * @var    string	 * @since  2.5	 */	private $_time = null;	/**	 * Start time for each batch	 *	 * @var    string	 * @since  2.5	 */	private $_qtime = null;	/**	 * Entry point for Finder CLI script	 *	 * @return  void	 *	 * @since   2.5	 */	public function doExecute()	{		// Print a blank line.		$this->out(JText::_('FINDER_CLI'));		$this->out('============================');		$this->out();		$this->_index();		// Print a blank line at the end.		$this->out();	}	/**	 * Run the indexer	 *	 * @return  void	 *	 * @since   2.5	 */	private function _index()	{		$this->_time = microtime(true);		require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/indexer.php';		// Fool the system into thinking we are running as JSite with Finder as the active component		JFactory::getApplication('site');		$_SERVER['HTTP_HOST'] = 'domain.com';		define('JPATH_COMPONENT_ADMINISTRATOR', JPATH_ADMINISTRATOR . '/components/com_finder');		// Disable caching.		$config = JFactory::getConfig();		$config->set('caching', 0);		$config->set('cache_handler', 'file');		// Reset the indexer state.		FinderIndexer::resetState();		// Import the finder plugins.		JPluginHelper::importPlugin('finder');		// Starting Indexer.		$this->out(JText::_('FINDER_CLI_STARTING_INDEXER'), true);		// Trigger the onStartIndex event.		JEventDispatcher::getInstance()->trigger('onStartIndex');		// Remove the script time limit.		@set_time_limit(0);		// Get the indexer state.		$state = FinderIndexer::getState();		// Setting up plugins.		$this->out(JText::_('FINDER_CLI_SETTING_UP_PLUGINS'), true);		// Trigger the onBeforeIndex event.		JEventDispatcher::getInstance()->trigger('onBeforeIndex');		// Startup reporting.		$this->out(JText::sprintf('FINDER_CLI_SETUP_ITEMS', $state->totalItems, round(microtime(true) - $this->_time, 3)), true);		// Get the number of batches.		$t = (int) $state->totalItems;		$c = (int) ceil($t / $state->batchSize);		$c = $c === 0 ? 1 : $c;		try		{			// Process the batches.			for ($i = 0; $i < $c; $i++)			{				// Set the batch start time.				$this->_qtime = microtime(true);				// Reset the batch offset.				$state->batchOffset = 0;				// Trigger the onBuildIndex event.				JEventDispatcher::getInstance()->trigger('onBuildIndex');				// Batch reporting.				$this->out(JText::sprintf('FINDER_CLI_BATCH_COMPLETE', ($i + 1), round(microtime(true) - $this->_qtime, 3)), true);			}		}		catch (Exception $e)		{			// Display the error			$this->out($e->getMessage(), true);			// Reset the indexer state.			FinderIndexer::resetState();			// Close the app			$this->close($e->getCode());		}		// Total reporting.		$this->out(JText::sprintf('FINDER_CLI_PROCESS_COMPLETE', round(microtime(true) - $this->_time, 3)), true);		// Reset the indexer state.		FinderIndexer::resetState();	}}// Instantiate the application object, passing the class name to JCli::getInstance// and use chaining to execute the application.JApplicationCli::getInstance('FinderCli')->execute();
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php JLoader::register('TagsHelperRoute', JPATH_BASE . '/components/com_tags/helpers/route.php'); ?><div class="tagspopular<?php echo $moduleclass_sfx; ?>"><ul ><?php foreach ($list as $item) :	?><li><?php $route = new TagsHelperRoute; ?>	<a href="<?php echo JRoute::_(TagsHelperRoute::getTagRoute($item->tag_id . ':' . $item->alias)); ?>">		<?php echo htmlspecialchars($item->title); ?></a></li><?php endforeach; ?></ul></div>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */JText::script('TPL_BEEZ3_ALTOPEN');JText::script('TPL_BEEZ3_ALTCLOSE');JText::script('TPL_BEEZ3_TEXTRIGHTOPEN');JText::script('TPL_BEEZ3_TEXTRIGHTCLOSE');JText::script('TPL_BEEZ3_FONTSIZE');JText::script('TPL_BEEZ3_BIGGER');JText::script('TPL_BEEZ3_RESET');JText::script('TPL_BEEZ3_SMALLER');JText::script('TPL_BEEZ3_INCREASE_SIZE');JText::script('TPL_BEEZ3_REVERT_STYLES_TO_DEFAULT');JText::script('TPL_BEEZ3_DECREASE_SIZE');JText::script('TPL_BEEZ3_OPENMENU');JText::script('TPL_BEEZ3_CLOSEMENU');?><script type="text/javascript">	var big = '<?php echo (int) $this->params->get('wrapperLarge');?>%';	var small = '<?php echo (int) $this->params->get('wrapperSmall'); ?>%';	var bildauf = '<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/images/plus.png';	var bildzu = '<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/images/minus.png';	var rightopen='<?php echo JText::_('TPL_BEEZ3_TEXTRIGHTOPEN', true); ?>';	var rightclose='<?php echo JText::_('TPL_BEEZ3_TEXTRIGHTCLOSE', true); ?>';	var altopen='<?php echo JText::_('TPL_BEEZ3_ALTOPEN', true); ?>';	var altclose='<?php echo JText::_('TPL_BEEZ3_ALTCLOSE', true); ?>';</script>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Client controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerClient extends JControllerForm{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_BANNERS_CLIENT';}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';$controller = JControllerLegacy::getInstance('Users');$controller->execute(JFactory::getApplication()->input->get('task', 'display'));$controller->redirect();
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Application helper functions * * @package     Joomla.Legacy * @subpackage  Application * @since       11.1 */class JApplicationHelper{	/**	 * Client information array	 *	 * @var    array	 * @since  11.1	 */	protected static $_clients = null;	/**	 * Return the name of the request component [main component]	 *	 * @param   string  $default  The default option	 *	 * @return  string  Option (e.g. com_something)	 *	 * @since   11.1	 */	public static function getComponentName($default = null)	{		static $option;		if ($option)		{			return $option;		}		$input = JFactory::getApplication()->input;		$option = strtolower($input->get('option'));		if (empty($option))		{			$option = $default;		}		$input->set('option', $option);		return $option;	}	/**	 * Gets information on a specific client id.  This method will be useful in	 * future versions when we start mapping applications in the database.	 *	 * This method will return a client information array if called	 * with no arguments which can be used to add custom application information.	 *	 * @param   integer  $id      A client identifier	 * @param   boolean  $byName  If True, find the client by its name	 *	 * @return  mixed  Object describing the client or false if not known	 *	 * @since   11.1	 */	public static function getClientInfo($id = null, $byName = false)	{		// Only create the array if it does not exist		if (self::$_clients === null)		{			$obj = new stdClass;			// Site Client			$obj->id = 0;			$obj->name = 'site';			$obj->path = JPATH_SITE;			self::$_clients[0] = clone $obj;			// Administrator Client			$obj->id = 1;			$obj->name = 'administrator';			$obj->path = JPATH_ADMINISTRATOR;			self::$_clients[1] = clone $obj;			// Installation Client			$obj->id = 2;			$obj->name = 'installation';			$obj->path = JPATH_INSTALLATION;			self::$_clients[2] = clone $obj;		}		// If no client id has been passed return the whole array		if (is_null($id))		{			return self::$_clients;		}		// Are we looking for client information by id or by name?		if (!$byName)		{			if (isset(self::$_clients[$id]))			{				return self::$_clients[$id];			}		}		else		{			foreach (self::$_clients as $client)			{				if ($client->name == strtolower($id))				{					return $client;				}			}		}		return null;	}	/**	 * Adds information for a client.	 *	 * @param   mixed  $client  A client identifier either an array or object	 *	 * @return  boolean  True if the information is added. False on error	 *	 * @since   11.1	 */	public static function addClientInfo($client)	{		if (is_array($client))		{			$client = (object) $client;		}		if (!is_object($client))		{			return false;		}		$info = self::getClientInfo();		if (!isset($client->id))		{			$client->id = count($info);		}		self::$_clients[$client->id] = clone $client;		return true;	}	/**	 * Parse a XML install manifest file.	 *	 * XML Root tag should be 'install' except for languages which use meta file.	 *	 * @param   string  $path  Full path to XML file.	 *	 * @return  array  XML metadata.	 *	 * @since   11.1	 * @deprecated  13.3 Use JInstaller::parseXMLInstallFile instead.	 */	public static function parseXMLInstallFile($path)	{		JLog::add('JApplicationHelper::parseXMLInstallFile is deprecated. Use JInstaller::parseXMLInstallFile instead.', JLog::WARNING, 'deprecated');		return JInstaller::parseXMLInstallFile($path);	}	/**	 * Parse a XML language meta file.	 *	 * XML Root tag  for languages which is meta file.	 *	 * @param   string  $path  Full path to XML file.	 *	 * @return  array  XML metadata.	 *	 * @deprecated  13.3 Use JInstaller::parseXMLInstallFile instead.	 */	public static function parseXMLLangMetaFile($path)	{		JLog::add('JApplicationHelper::parseXMLLangMetaFile is deprecated. Use JInstaller::parseXMLInstallFile instead.', JLog::WARNING, 'deprecated');		// Read the file to see if it's a valid component XML file		$xml = simplexml_load_file($path);		if (!$xml)		{			return false;		}		/*		 * Check for a valid XML root tag.		 *		 * Should be 'metafile'.		 */		if ($xml->getName() != 'metafile')		{			unset($xml);			return false;		}		$data = array();		$data['name'] = (string) $xml->name;		$data['type'] = $xml->attributes()->type;		$data['creationDate'] = ((string) $xml->creationDate) ? (string) $xml->creationDate : JText::_('JLIB_UNKNOWN');		$data['author'] = ((string) $xml->author) ? (string) $xml->author : JText::_('JLIB_UNKNOWN');		$data['copyright'] = (string) $xml->copyright;		$data['authorEmail'] = (string) $xml->authorEmail;		$data['authorUrl'] = (string) $xml->authorUrl;		$data['version'] = (string) $xml->version;		$data['description'] = (string) $xml->description;		$data['group'] = (string) $xml->group;		return $data;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Controller Interface * * @package     Joomla.Platform * @subpackage  Controller * @since       12.1 */interface JController extends Serializable{	/**	 * Execute the controller.	 *	 * @return  boolean  True if controller finished execution, false if the controller did not	 *                   finish execution. A controller might return false if some precondition for	 *                   the controller to run has not been satisfied.	 *	 * @since   12.1	 * @throws  LogicException	 * @throws  RuntimeException	 */	public function execute();	/**	 * Get the application object.	 *	 * @return  JApplicationBase  The application object.	 *	 * @since   12.1	 */	public function getApplication();	/**	 * Get the input object.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function getInput();}
<?php/** * @package     Joomla.Site * @subpackage  mod_syndicate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><a href="<?php echo $link ?>" class="syndicate-module<?php echo $moduleclass_sfx ?>">	<?php echo JHtml::_('image', 'system/livemarks.png', 'feed-image', null, true); ?>	<?php if ($params->get('display_text', 1)) : ?>		<span>		<?php if (str_replace(' ', '', $text) != '') : ?>			<?php echo $text; ?>		<?php else : ?>			<?php echo JText::_('MOD_SYNDICATE_DEFAULT_FEED_ENTRIES'); ?>		<?php endif; ?>		</span>	<?php endif; ?></a>
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	?>	<div class="tab-pane" id="params-<?php echo $name;?>">	<?php	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php endforeach; ?>	</div><?php endforeach; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller = JControllerLegacy::getInstance('Wrapper');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  Template.beez5 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;if (!$templateparams->get('html5', 0)){	require JPATH_BASE.'/components/com_content/views/archive/tmpl/default.php';	//evtl. ersetzen durch JPATH_COMPONENT.'/views/...'} else {JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');?><div class="archive<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><form id="adminForm" action="<?php echo JRoute::_('index.php')?>" method="post">	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>	<div class="filter-search">		<?php if ($this->params->get('filter_field') != 'hide') : ?>		<label class="filter-search-lbl" for="filter-search"><?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?></label>		<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->filter); ?>" class="inputbox" onchange="document.getElementById('adminForm').submit();" />		<?php endif; ?>		<?php echo $this->form->monthField; ?>		<?php echo $this->form->yearField; ?>		<?php echo $this->form->limitField; ?>		<button type="submit" class="button"><?php echo JText::_('JGLOBAL_FILTER_BUTTON'); ?></button>	</div>	<input type="hidden" name="view" value="archive" />	<input type="hidden" name="option" value="com_content" />	<input type="hidden" name="limitstart" value="0" />	</fieldset>	<?php echo $this->loadTemplate('items'); ?></form></div><?php } ?>
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * WINCACHE session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSessionStorageWincache extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('Wincache Extension is not available', 404);		}		parent::__construct($options);	}	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   12.2	 */	public function register()	{		ini_set('session.save_handler', 'wincache');	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	static public function isSupported()	{		return (extension_loaded('wincache') && function_exists('wincache_ucache_get') && !strcmp(ini_get('wincache.ucenabled'), "1"));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Menu table * * @package     Joomla.Administrator * @subpackage  com_menus */class MenusTableMenu extends JTableMenu{	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @see     http://docs.joomla.org/JTableNested/delete	 */	public function delete($pk = null, $children = false)	{		return parent::delete($pk, $children);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL server database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorSqlsrv extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return sqlsrv_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return sqlsrv_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		sqlsrv_free_stmt($this->cursor);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * French stemmer class for Smart Search indexer. * * First contributed by Eric Sanou (bobotche@hotmail.fr) * This class is inspired in  Alexis Ulrich's French stemmer code (http://alx2002.free.fr) * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.0 */class FinderIndexerStemmerFr extends FinderIndexerStemmer{	/**	 * Stemming rules.	 *	 * @var    Array	 * @since  3.0	 */	private static $_stemRules = null;	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   3.0	 */	public function stem($token, $lang)	{		// Check if the token is long enough to merit stemming.		if (strlen($token) <= 2)		{			return $token;		}		// Check if the language is French or All.		if ($lang !== 'fr' && $lang != '*')		{			return $token;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Stem the token.			$result = static::_getStem($token);			// Add the token to the cache.			$this->cache[$lang][$token] = $result;		}		return $this->cache[$lang][$token];	}	/**	 * French stemmer rules variables.	 *	 * @return  array  The rules	 *	 * @since   3.0	 */	protected static function getStemRules()	{		if (static::$_stemRules)		{			return static::$_stemRules;		}		$vars = array();		// French accented letters in ISO-8859-1 encoding		$vars['accents'] = chr(224) . chr(226) . chr(232) . chr(233) . chr(234) . chr(235) . chr(238) . chr(239) . chr(244) . chr(251) . chr(249) . chr(231);		// The rule patterns include all accented words for french language		$vars['rule_pattern'] = "/^([a-z" . $vars['accents'] . "]*)(\*){0,1}(\d)([a-z" . $vars['accents'] . "]*)([.|>])/";		// French vowels (including y) in ISO-8859-1 encoding		$vars['vowels'] = chr(97) . chr(224) . chr(226) . chr(101) . chr(232) . chr(233) . chr(234) . chr(235) . chr(105) . chr(238) . chr(239) . chr(111) . chr(244) . chr(117) . chr(251) . chr(249) . chr(121);		// The French rules in ISO-8859-1 encoding		$vars['rules'] = array(			'esre1>','esio1>','siol1.','siof0.','sioe0.','sio3>','st1>','sf1>','sle1>',			'slo1>','s'.chr(233).'1>',chr(233).'tuae5.',chr(233).'tuae2.','tnia0.','tniv1.','tni3>','suor1.',			'suo0.','sdrail5.','sdrai4.','er'.chr(232).'i1>','sesue3x>','esuey5i.','esue2x>',			'se1>','er'.chr(232).'g3.','eca1>','esiah0.','esi1>','siss2.','sir2>','sit2>','egan'.chr(233).'1.',			'egalli6>','egass1.','egas0.','egat3.','ega3>','ette4>','ett2>','etio1.',			'tio'.chr(231).'4c.','tio0.','et1>','eb1>','snia1>','eniatnau8>','eniatn4.','enia1>',			'niatnio3.','niatg3.','e'.chr(233).'1>',''.chr(233).'hcat1.',''.chr(233).'hca4.',''.chr(233).'tila5>',''.chr(233).'tici5.',''.chr(233).'tir1.',			''.chr(233).'ti3>',''.chr(233).'gan1.',''.chr(233).'ga3>',''.chr(233).'tehc1.',''.chr(233).'te3>',''.chr(233).'it0.',''.chr(233).'1>','eire4.','eirue5.',			'eio1.','eia1.','ei1>','eng1.','xuaessi7.','xuae1>','uaes0.','uae3.',			'xuave2l.','xuav2li>','xua3la>','ela1>','lart2.','lani2>','la'.chr(233).'2>','siay4i.',			'siassia7.','siarv1*.','sia1>','tneiayo6i.','tneiay6i.','tneiassia9.',			'tneiareio7.','tneia5>','tneia4>','tiario4.','tiarim3.','tiaria3.',			'tiaris3.','tiari5.','tiarve6>','tiare5>','iare4>','are3>','tiay4i.',			'tia3>','tnay4i.','em'.chr(232).'iu5>','em'.chr(232).'i4>','tnaun3.','tnauqo3.','tnau4>','tnaf0.',			'tnat'.chr(233).'2>','tna3>','tno3>','zeiy4i.','zey3i.','zeire5>','zeird4.','zeirio4.',			'ze2>','ssiab0.','ssia4.','ssi3.','tnemma6>','tnemesuey9i.','tnemesue8>',			'tnemevi7.','tnemessia5.','tnemessi8.','tneme5>','tnemia4.','tnem'.chr(233).'5>',			'el2l>','lle3le>','let'.chr(244).'0.','lepp0.','le2>','srei1>','reit3.','reila2.',			'rei3>','ert'.chr(226).'e5.','ert'.chr(226).''.chr(233).'1.','ert'.chr(226).'4.','drai4.','erdro0.','erute5.','ruta0.',			'eruta1.','erutiov1.','erub3.','eruh3.','erul3.','er2r>','nn1>','r'.chr(232).'i3.',			'srev0.','sr1>','rid2>','re2>','xuei4.','esuei5.','lbati3.','lba3>',			'rueis0.','ruehcn4.','ecirta6.','ruetai6.','rueta5.','rueir0.','rue3>',			'esseti6.','essere6>','esserd1.','esse4>','essiab1.','essia5.','essio1.',			'essi4.','essal4.','essa1>','ssab1.','essurp1.','essu4.','essi1.','ssor1.',			'essor2.','esso1>','ess2>','tio3.','r'.chr(232).'s2re.','r'.chr(232).'0e.','esn1.','eu1>',			'sua0.','su1>','utt1>','tu'.chr(231).'3c.','u'.chr(231).'2c.','ur1.','ehcn2>','ehcu1>','snorr3.',			'snoru3.','snorua3.','snorv3.','snorio4.','snori5.','snore5>','snortt4>',			'snort'.chr(238).'a7.','snort3.','snor4.','snossi6.','snoire6.','snoird5.','snoitai7.',			'snoita6.','snoits1>','noits0.','snoi4>','noitaci7>','noitai6.','noita5.',			'noitu4.','noi3>','snoya0.','snoy4i.','sno'.chr(231).'a1.','sno'.chr(231).'r1.','snoe4.',			'snosiar1>','snola1.','sno3>','sno1>','noll2.','tnennei4.','ennei2>',			'snei1>','sne'.chr(233).'1>','enne'.chr(233).'5e.','ne'.chr(233).'3e.','neic0.','neiv0.','nei3.','sc1.',			'sd1.','sg1.','sni1.','tiu0.','ti2.','sp1>','sna1>','sue1.','enn2>','nong2.',			'noss2.','rioe4.','riot0.','riorc1.','riovec5.','rio3.','ric2.','ril2.',			'tnerim3.','tneris3>','tneri5.','t'.chr(238).'a3.','riss2.','t'.chr(238).'2.','t'.chr(226).'2>','ario2.',			'arim1.','ara1.','aris1.','ari3.','art1>','ardn2.','arr1.','arua1.','aro1.',			'arv1.','aru1.','ar2.','rd1.','ud1.','ul1.','ini1.','rin2.','tnessiab3.',			'tnessia7.','tnessi6.','tnessni4.','sini2.','sl1.','iard3.','iario3.','ia2>',			'io0.','iule2.','i1>','sid2.','sic2.','esoi4.','ed1.','ai2>','a1>','adr1.',			'tner'.chr(232).'5>','evir1.','evio4>','evi3.','fita4.','fi2>','enie1.','sare4>',			'sari4>','sard3.','sart2>','sa2.','tnessa6>','tnessu6>','tnegna3.','tnegi3.',			'tneg0.','tneru5>','tnemg0.','tnerni4.','tneiv1.','tne3>','une1.','en1>',			'nitn2.','ecnay5i.','ecnal1.','ecna4.','ec1>','nn1.','rit2>','rut2>','rud2.',			'ugn1>','eg1>','tuo0.','tul2>','t'.chr(251).'2>','ev1>','v'.chr(232).'2ve>','rtt1>','emissi6.',			'em1.','ehc1.','c'.chr(233).'i2c'.chr(232).'.','libi2l.','llie1.','liei4i.','xuev1.','xuey4i.',			'xueni5>','xuell4.','xuere5.','xue3>','rb'.chr(233).'3rb'.chr(232).'.','tur2.','rir'.chr(233).'4re.','rir2.',			'c'.chr(226).'2ca.','snu1.','rt'.chr(238).'a4.','long2.','vec2.',''.chr(231).'1c>','ssilp3.','silp2.',			't'.chr(232).'hc2te.','n'.chr(232).'m2ne.','llepp1.','tan2.','rv'.chr(232).'3rve.','rv'.chr(233).'3rve.','r'.chr(232).'2re.',			'r'.chr(233).'2re.','t'.chr(232).'2te.','t'.chr(233).'2te.','epp1.','eya2i.','ya1i.','yo1i.','esu1.','ugi1.',			'tt1.',			'end0.'		);		static::$_stemRules = $vars;		return static::$_stemRules;	}	/**	 * Returns the number of the first rule from the rule number	 * that can be applied to the given reversed input.	 * returns -1 if no rule can be applied, ie the stem has been found	 *	 * @param   string   $reversed_input	 * @param   integer  $rule_number	 *	 * @return  integer  Number of the first rule	 *	 * @since   3.0	 */	private static function _getFirstRule($reversed_input, $rule_number)	{		$vars = static::getStemRules();		$nb_rules = count($vars['rules']);		for ($i = $rule_number; $i < $nb_rules; $i++)		{			// Gets the letters from the current rule			$rule = $vars['rules'][$i];			$rule = preg_replace($vars['rule_pattern'], "\\1", $rule);			if (strncasecmp(utf8_decode($rule), $reversed_input, strlen(utf8_decode($rule))) == 0)			{				return $i;			}		}		return -1;	}	/**	 * Check the acceptability of a stem for French language	 *	 * @param   string  $reversed_stem  The stem to check in reverse form	 *	 * @return  boolean  True if stem is acceptable	 *	 * @since   3.0	 */	private static function _check($reversed_stem)	{		$vars = static::getStemRules();		if (preg_match('/[' . $vars['vowels'] . ']$/', utf8_encode($reversed_stem)))		{			// If the form starts with a vowel then at least two letters must remain after stemming (e.g.: "etaient" --> "et")			return (strlen($reversed_stem) > 2);		}		else		{			// If the reversed stem starts with a consonant then at least two letters must remain after stemming			if (strlen($reversed_stem) <= 2)			{				return false;			}			// And at least one of these must be a vowel or "y"			return (preg_match('/[' . $vars['vowels'] . ']/', utf8_encode($reversed_stem)));		}	}	/**	 * Paice/Husk stemmer which returns a stem for the given $input	 *	 * @param   string  $input  The word for which we want the stem in UTF-8	 *	 * @return  string  The stem	 *	 * @since   3.0	 */	private static function _getStem($input)	{		$vars = static::getStemRules();		$intact = true;		$reversed_input = strrev(utf8_decode($input));		$rule_number = 0;		// This loop goes through the rules' array until it finds an ending one (ending by '.') or the last one ('end0.')		while (true)		{			$rule_number = static::_getFirstRule($reversed_input, $rule_number);			if ($rule_number == -1)			{				// No other rule can be applied => the stem has been found				break;			}			$rule = $vars['rules'][$rule_number];			preg_match($vars['rule_pattern'], $rule, $matches);			if (($matches[2] != '*') || ($intact))			{				$reversed_stem = utf8_decode($matches[4]) . substr($reversed_input, $matches[3], strlen($reversed_input) - $matches[3]);				if (self::_check($reversed_stem))				{					$reversed_input = $reversed_stem;					if ($matches[5] == '.')					{						break;					}				}				else				{					// Go to another rule					$rule_number++;				}			}			else			{				// Go to another rule				$rule_number++;			}		}		return utf8_encode(strrev($reversed_input));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input = JFactory::getApplication()->input;?><li class="imgOutline thumbnail height-80 width-80 center">	<a href="index.php?option=com_media&amp;view=imagesList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author');?>" target="imageframe">		<div class="height-50">			<i class="icon-folder-2"></i>		</div>		<div class="small">			<?php echo JHtml::_('string.truncate', $this->_tmp_folder->name, 10, false); ?>		</div>	</a></li>
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><dl class="search-results<?php echo $this->pageclass_sfx; ?>"><?php foreach ($this->results as $result) : ?>	<dt class="result-title">		<?php echo $this->pagination->limitstart + $result->count.'. ';?>		<?php if ($result->href) :?>			<a href="<?php echo JRoute::_($result->href); ?>"<?php if ($result->browsernav == 1) :?> target="_blank"<?php endif;?>>				<?php echo $this->escape($result->title);?>			</a>		<?php else:?>			<?php echo $this->escape($result->title);?>		<?php endif; ?>	</dt>	<?php if ($result->section) : ?>		<dd class="result-category">			<span class="small<?php echo $this->pageclass_sfx; ?>">				(<?php echo $this->escape($result->section); ?>)			</span>		</dd>	<?php endif; ?>	<dd class="result-text">		<?php echo $result->text; ?>	</dd>	<?php if ($this->params->get('show_date')) : ?>		<dd class="result-created<?php echo $this->pageclass_sfx; ?>">			<?php echo JText::sprintf('JGLOBAL_CREATED_DATE_ON', $result->created); ?>		</dd>	<?php endif; ?><?php endforeach; ?></dl><div class="pagination">	<?php echo $this->pagination->getPagesLinks(); ?></div>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$id = empty($displayData['id']) ? '' : $displayData['id'];$active = empty($displayData['active']) ? '' : $displayData['active'];?><div id="<?php echo $id; ?>" class="tab-pane<?php echo $active; ?>">
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to module rendering.  To use it you would * set the style attribute for the given module(s) include in your template to use the style * for each given modChrome function. * * eg.  To render a module mod_test in the submenu style, you would use the following include: * <jdoc:include type="module" name="test" style="submenu" /> * * This gives template designers ultimate control over how modules are rendered. * * NOTICE: All chrome wrapping methods should be named: modChrome_{STYLE} and take the same * two arguments. *//* * Module chrome for rendering the module in a submenu */function modChrome_xhtmlid($module, &$params, &$attribs){	if ($module->content)	{		?>		<div id="<?php echo (int) $attribs['id'] ?>">				<?php echo $module->content; ?>				<div class="clr"></div>		</div>		<?php	} elseif ($attribs['id'] == "submenu-box")	{		?>		<div id="no-submenu"></div>		<?php	}}?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="nav nav-list">	<?php		if ($this->userIsSuperAdmin):	?>	<li class="nav-header"><?php echo JText::_('COM_CONFIG_SYSTEM'); ?></li>	<li class="active"><a href="index.php?option=com_config"><?php echo JText::_('COM_CONFIG_GLOBAL_CONFIGURATION'); ?></a></li>	<li class="divider"></li>	<?php		endif;	?>	<li class="nav-header"><?php echo JText::_('COM_CONFIG_COMPONENT_FIELDSET_LABEL'); ?></li>	<?php		foreach ($this->components as $component) :	?>		<li><a href="index.php?option=com_config&view=component&component=<?php echo $component; ?>"><?php echo JText::_($component); ?></a></li>	<?php		endforeach;	?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework', true);$script = array();$script[] = "	window.addEvent('domready', function() {";$script[] = "		document.id('showmods').addEvent('click', function(e) {";$script[] = "			document.id('showmods').setStyle('display', 'block');";$script[] = "		jQuery('.table tr.no').toggle();";$script[] = "		});";$script[] = "	})";// Add the script to the document head.JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));?><div class="control-group">	<div class="control-label">		<label for="showmods"><?php echo JText::_('COM_MENUS_ITEM_FIELD_HIDE_UNASSIGNED');?></label>	</div>	<div class="controls">		<input type="checkbox" id="showmods" />	</div></div>	<table class="table table-striped">		<thead>		<tr>			<th class="left">				<?php echo JText::_('COM_MENUS_HEADING_ASSIGN_MODULE');?>			</th>			<th>				<?php echo JText::_('COM_MENUS_HEADING_DISPLAY');?>			</th>		</tr>		</thead>		<tbody>		<?php foreach ($this->modules as $i => &$module) : ?> 			<?php if (is_null($module->menuid)) : ?>				<?php if (!$module->except || $module->menuid < 0) : ?>					<tr class="no row<?php echo $i % 2;?>">				<?php else : ?>			<tr class="row<?php echo $i % 2;?>">				<?php endif; ?>			<?php endif; ?>				<td>					<?php $link = 'index.php?option=com_modules&amp;client_id=0&amp;task=module.edit&amp;id=' . $module->id . '&amp;tmpl=component&amp;view=module&amp;layout=modal'; ?>					<a class="modal" href="<?php echo $link;?>" rel="{handler: 'iframe', size: {x: 900, y: 550}}" title="<?php echo JText::_('COM_MENUS_EDIT_MODULE_SETTINGS');?>">						<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?></a>				</td>				<td class="center">					<?php if (is_null($module->menuid)) : ?>						<?php if ($module->except):?>							<span class="label label-success">								<?php echo JText::_('JYES'); ?>							</span>						<?php else : ?>							<span class="label label-important">								<?php echo JText::_('JNO'); ?>							</span>						<?php endif;?>					<?php elseif ($module->menuid > 0) : ?>						<span class="label label-success">							<?php echo JText::_('JYES'); ?>						</span>					<?php elseif ($module->menuid < 0) : ?>						<span class="label label-important">							<?php echo JText::_('JNO'); ?>						</span>					<?php else : ?>						<span class="label label-info">							<?php echo JText::_('JALL'); ?>						</span>					<?php endif; ?>				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$doc = JFactory::getDocument();$color = $this->params->get('templatecolor');$doc->addStyleSheet($this->baseurl.'/templates/system/css/system.css');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/template.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/position.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/layout.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/print.css', $type = 'text/css', $media = 'print');$files = JHtml::_('stylesheet', 'templates/'.$this->template.'/css/general.css', null, false, true);if ($files):	if (!is_array($files)):		$files = array($files);	endif;	foreach ($files as $file) :		$doc->addStyleSheet($file);	endforeach;endif;$doc->addStyleSheet('templates/'.$this->template.'/css/'.htmlspecialchars($color).'.css');if ($this->direction == 'rtl'){	$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/template_rtl.css');	if (file_exists(JPATH_SITE . '/templates/' . $this->template . '/css/' . $color . '_rtl.css'))	{		$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/'.htmlspecialchars($color).'_rtl.css');	}}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" /><!--[if lte IE 6]>	<link href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/ieonly.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script><![endif]--></head><body class="contentpane">	<div id="all">		<div id="main">			<jdoc:include type="message" />			<jdoc:include type="component" />		</div>	</div></body></html>
<?php/** * @package     Joomla.Platform * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base Controller Class * * @package     Joomla.Platform * @subpackage  Controller * @since       12.1 */abstract class JControllerBase implements JController{	/**	 * The application object.	 *	 * @var    JApplicationBase	 * @since  12.1	 */	protected $app;	/**	 * The input object.	 *	 * @var    JInput	 * @since  12.1	 */	protected $input;	/**	 * Instantiate the controller.	 *	 * @param   JInput            $input  The input object.	 * @param   JApplicationBase  $app    The application object.	 *	 * @since  12.1	 */	public function __construct(JInput $input = null, JApplicationBase $app = null)	{		// Setup dependencies.		$this->app = isset($app) ? $app : $this->loadApplication();		$this->input = isset($input) ? $input : $this->loadInput();	}	/**	 * Get the application object.	 *	 * @return  JApplicationBase  The application object.	 *	 * @since   12.1	 */	public function getApplication()	{		return $this->app;	}	/**	 * Get the input object.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function getInput()	{		return $this->input;	}	/**	 * Serialize the controller.	 *	 * @return  string  The serialized controller.	 *	 * @since   12.1	 */	public function serialize()	{		return serialize($this->input);	}	/**	 * Unserialize the controller.	 *	 * @param   string  $input  The serialized controller.	 *	 * @return  JController  Supports chaining.	 *	 * @since   12.1	 * @throws  UnexpectedValueException if input is not the right class.	 */	public function unserialize($input)	{		// Setup dependencies.		$this->app = $this->loadApplication();		// Unserialize the input.		$this->input = unserialize($input);		if (!($this->input instanceof JInput))		{			throw new UnexpectedValueException(sprintf('%s::unserialize would not accept a `%s`.', get_class($this), gettype($this->input)));		}		return $this;	}	/**	 * Load the application object.	 *	 * @return  JApplicationBase  The application object.	 *	 * @since   12.1	 */	protected function loadApplication()	{		return JFactory::getApplication();	}	/**	 * Load the input object.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	protected function loadInput()	{		return $this->app->input;	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('site');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a  class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_DATABASE'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_type'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_type'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_TYPE_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_host'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_host'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_HOST_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_user'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_user'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_USER_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_pass'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_pass'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PASSWORD_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_name'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_name'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_NAME_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_prefix'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_prefix'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PREFIX_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_old'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_old'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_OLD_PROCESS_DESC'); ?>			</p>		</div>	</div>	<input type="hidden" name="task" value="database" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexer', __DIR__ . '/indexer.php');/** * Result class for the Finder indexer package. * * This class uses magic __get() and __set() methods to prevent properties * being added that might confuse the system. All properties not explicitly * declared will be pushed into the elements array and can be accessed * explicitly using the getElement() method. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerResult{	/**	 * An array of extra result properties.	 *	 * @var    array	 * @since  2.5	 */	protected $elements = array();	/**	 * This array tells the indexer which properties should be indexed and what	 * weights to use for those properties.	 *	 * @var    array	 * @since  2.5	 */	protected $instructions = array(		FinderIndexer::TITLE_CONTEXT => array('title', 'subtitle', 'id'),		FinderIndexer::TEXT_CONTEXT => array('summary', 'body'),		FinderIndexer::META_CONTEXT => array('meta', 'list_price', 'sale_price'),		FinderIndexer::PATH_CONTEXT => array('path', 'alias'),		FinderIndexer::MISC_CONTEXT => array('comments')	);	/**	 * The indexer will use this data to create taxonomy mapping entries for	 * the item so that it can be filtered by type, label, category,	 * or whatever.	 *	 * @var    array	 * @since  2.5	 */	protected $taxonomy = array();	/**	 * The content URL.	 *	 * @var    string	 * @since  2.5	 */	public $url;	/**	 * The content route.	 *	 * @var    string	 * @since  2.5	 */	public $route;	/**	 * The content title.	 *	 * @var    string	 * @since  2.5	 */	public $title;	/**	 * The content description.	 *	 * @var    string	 * @since  2.5	 */	public $description;	/**	 * The published state of the result.	 *	 * @var    integer	 * @since  2.5	 */	public $published;	/**	 * The content published state.	 *	 * @var    integer	 * @since  2.5	 */	public $state;	/**	 * The content access level.	 *	 * @var    integer	 * @since  2.5	 */	public $access;	/**	 * The content language.	 *	 * @var    string	 * @since  2.5	 */	public $language = '*';	/**	 * The publishing start date.	 *	 * @var    string	 * @since  2.5	 */	public $publish_start_date;	/**	 * The publishing end date.	 *	 * @var    string	 * @since  2.5	 */	public $publish_end_date;	/**	 * The generic start date.	 *	 * @var    string	 * @since  2.5	 */	public $start_date;	/**	 * The generic end date.	 *	 * @var    string	 * @since  2.5	 */	public $end_date;	/**	 * The item list price.	 *	 * @var    mixed	 * @since  2.5	 */	public $list_price;	/**	 * The item sale price.	 *	 * @var    mixed	 * @since  2.5	 */	public $sale_price;	/**	 * The content type id. This is set by the adapter.	 *	 * @var    integer	 * @since  2.5	 */	public $type_id;	/**	 * The default language for content.	 *	 * @var    string	 * @since  3.0.2	 */	public $defaultLanguage;	/**	 * Constructor	 *	 * @since   3.0.3	 */	public function __construct()	{		$this->defaultLanguage = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');	}	/**	 * The magic set method is used to push additional values into the elements	 * array in order to preserve the cleanliness of the object.	 *	 * @param   string  $name   The name of the element.	 * @param   mixed   $value  The value of the element.	 *	 * @return  void	 *	 * @since   2.5	 */	public function __set($name, $value)	{		$this->elements[$name] = $value;	}	/**	 * The magic get method is used to retrieve additional element values	 * from the elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  mixed  The value of the element if set, null otherwise.	 *	 * @since   2.5	 */	public function __get($name)	{		// Get the element value if set.		if (array_key_exists($name, $this->elements))		{			return $this->elements[$name];		}		else		{			return null;		}	}	/**	 * The magic isset method is used to check the state of additional element	 * values in the elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  boolean  True if set, false otherwise.	 *	 * @since   2.5	 */	public function __isset($name)	{		return isset($this->elements[$name]);	}	/**	 * The magic unset method is used to unset additional element values in the	 * elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  void	 *	 * @since   2.5	 */	public function __unset($name)	{		unset($this->elements[$name]);	}	/**	 * Method to retrieve additional element values from the elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  mixed  The value of the element if set, null otherwise.	 *	 * @since   2.5	 */	public function getElement($name)	{		// Get the element value if set.		if (array_key_exists($name, $this->elements))		{			return $this->elements[$name];		}		else		{			return null;		}	}	/**	 * Method to set additional element values in the elements array.	 *	 * @param   string  $name   The name of the element.	 * @param   mixed   $value  The value of the element.	 *	 * @return  void	 *	 * @since   2.5	 */	public function setElement($name, $value)	{		$this->elements[$name] = $value;	}	/**	 * Method to get all processing instructions.	 *	 * @return  array  An array of processing instructions.	 *	 * @since   2.5	 */	public function getInstructions()	{		return $this->instructions;	}	/**	 * Method to add a processing instruction for an item property.	 *	 * @param   string  $group     The group to associate the property with.	 * @param   string  $property  The property to process.	 *	 * @return  void	 *	 * @since   2.5	 */	public function addInstruction($group, $property)	{		// Check if the group exists. We can't add instructions for unknown groups.		if (array_key_exists($group, $this->instructions))		{			// Check if the property exists in the group.			if (!in_array($property, $this->instructions[$group]))			{				// Add the property to the group.				$this->instructions[$group][] = $property;			}		}	}	/**	 * Method to remove a processing instruction for an item property.	 *	 * @param   string  $group     The group to associate the property with.	 * @param   string  $property  The property to process.	 *	 * @return  void	 *	 * @since   2.5	 */	public function removeInstruction($group, $property)	{		// Check if the group exists. We can't remove instructions for unknown groups.		if (array_key_exists($group, $this->instructions))		{			// Search for the property in the group.			$key = array_search($property, $this->instructions[$group]);			// If the property was found, remove it.			if ($key !== false)			{				unset($this->instructions[$group][$key]);			}		}	}	/**	 * Method to get the taxonomy maps for an item.	 *	 * @param   string  $branch  The taxonomy branch to get. [optional]	 *	 * @return  array  An array of taxonomy maps.	 *	 * @since   2.5	 */	public function getTaxonomy($branch = null)	{		// Get the taxonomy branch if available.		if ($branch !== null && isset($this->taxonomy[$branch]))		{			// Filter the input.			$branch = preg_replace('#[^\pL\pM\pN\p{Pi}\p{Pf}\'+-.,]+#mui', ' ', $branch);			return $this->taxonomy[$branch];		}		return $this->taxonomy;	}	/**	 * Method to add a taxonomy map for an item.	 *	 * @param   string   $branch  The title of the taxonomy branch to add the node to.	 * @param   string   $title   The title of the taxonomy node.	 * @param   integer  $state   The published state of the taxonomy node. [optional]	 * @param   integer  $access  The access level of the taxonomy node. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	public function addTaxonomy($branch, $title, $state = 1, $access = 1)	{		// Filter the input.		$branch = preg_replace('#[^\pL\pM\pN\p{Pi}\p{Pf}\'+-.,]+#mui', ' ', $branch);		// Create the taxonomy node.		$node = new JObject;		$node->title = $title;		$node->state = (int) $state;		$node->access = (int) $access;		// Add the node to the taxonomy branch.		$this->taxonomy[$branch][$node->title] = $node;	}	/**	 * Method to set the item language	 *	 * @return  void	 *	 * @since   3.0	 */	public function setLanguage()	{		if ($this->language == '*' || $this->language == '')		{			$this->language = $this->defaultLanguage;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.noframes');// Get the login modules// If you want to use a completely different login module change the value of name// in your layout override.$loginmodule = LoginModelLogin::getLoginModule('mod_login');echo JModuleHelper::renderModule($loginmodule, array('style' => 'rounded', 'id' => 'section-box'));//Get any other modules in the login position.//If you want to use a different position for the modules, change the name here in your override.$modules = JModuleHelper::getModules('login');foreach ($modules as $module)// Render the login modulesif ($module->module != 'mod_login'){	echo JModuleHelper::renderModule($module, array('style' => 'rounded', 'id' => 'section-box'));}
<?php/** * Script used to build Joomla distribution archive packages * Set $version and $release before running * Builds upgrade packages in tmp/packagesx.x folder (for example, 'build/tmp/packages2.5') * Builds full packages in tmp/packages_fullx.x.x folder (for example, 'build/tmp/packages_full2.5.1') * * Note: the new package must be tagged in your git repository BEFORE doing this * It uses the git tag for the new version, not trunk. * * This script is designed to be run in CLI on Linux or Mac OS X. * Make sure your default umask is 022 to create archives with correct permissions. * * Steps: * 1. Tag new release in the local git repository (for example, "git tag 2.5.1") * 2. Set the $version and $release variables for the new version. * 3. Run from CLI as: 'php build.php" from build directory. * 4. Check the archives in the tmp directory. * * @package		Joomla.Build * @copyright	Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license		GNU General Public License version 2 or later; see LICENSE.txt */// Make sure file and folder permissions are set correctlyumask(022);// Set version for each build// Version is first 2 digits (like '1.7', '2.5', or '3.0')$version = '3.1';// Set release for each build// Release is third digit (like '0', '1', or '2')$release = '0_beta5';// Set path to git binary (e.g., /usr/local/git/bin/git or /urs/bin/git)$gitPath = '/usr/bin/git';// Path to local git repository (parent folder of build folder)$repo = dirname(dirname(__FILE__));$here = dirname(__FILE__);// Build packages in tmp folder$tmp = $here . '/tmp';$fullpath = $here . '/tmp/' . $version . '.' . $release;$full = $version . '.' . $release;echo "Start build for version $full.\n";echo "Delete old release folder.\n";system('rm -rf ' . $tmp);mkdir($tmp);mkdir($fullpath);echo "Copy the files from the git repository.\n";chdir($repo);system($gitPath . ' archive ' . $full . ' | tar -x -C ' . $fullpath);chdir($tmp);system('mkdir diffdocs');system('mkdir diffconvert');system('mkdir packages'.$version);echo "Copy manifest file to root directory for install packkages.\n";system('cp '.$fullpath.'/administrator/manifests/files/joomla.xml '.$fullpath);echo "Create list of changed files from git repository.\n";// Here we force add every top-level directory and file in our diff archive, even if they haven't changed.// This allows us to install these files from the Extension Manager.// So we add the index file for each top-level directory.// Note: If we add new top-level directories or files, be sure to include them here.$filesArray = array(		"administrator/index.php\n" => true,		"cache/index.html\n" => true,		"cli/index.html\n" => true,		"components/index.html\n" => true,		"images/index.html\n" => true,		"includes/index.html\n" => true,		"language/index.html\n" => true,		"layouts/index.html\n" => true,		"libraries/index.html\n" => true,		"logs/index.html\n" => true,		"media/index.html\n" => true,		"modules/index.html\n" => true,		"plugins/index.html\n" => true,		"templates/index.html\n" => true,		"tmp/index.html\n" => true,		"htaccess.txt\n" => true,		"index.php\n" => true,		"LICENSE.txt\n" => true,		"README.txt\n" => true,		"robots.txt.dist\n" => true,		"web.config.txt\n" => true,		"joomla.xml\n" => true,);// Count down starting with the latest release and add diff files to this arrayfor($num=$release-1; $num >= 0; $num--) {	echo "Create version $num update packages.\n";	// Here we get a list of all files that have changed between the two tags ($previousTag and $full) and save in diffdocs	$previousTag = $version . '.' . $num;	$command = $gitPath . ' diff tags/'. $previousTag . ' tags/' . $full . ' --name-status > diffdocs/'.$version.'.'.$num;	system($command);	// $newfile will hold the array of files to include in diff package	$deletedFiles = array();	$files = file('diffdocs/'.$version.'.'.$num);	// Loop through and add all files except: tests, installation, build, .git, or docs	foreach ($files AS $file)	{		if (substr($file, 2, 5) != 'tests' && substr($file, 2, 12) != 'installation' && substr($file,2,5) != 'build'		&& substr($file, 2, 4) != '.git' && substr($file, 2, 4) != 'docs' )		{			// Don't add deleted files to the list			if (substr($file, 0, 1) != 'D')			{				$filesArray[substr($file, 2)] = true;			}			else			{				// Add deleted files to the deleted files list				$deletedFiles[] = substr($file,2);			}		}	}	// Write the file list to a text file.	$filePut = array_keys($filesArray);	sort($filePut);	file_put_contents('diffconvert/'.$version.'.'.$num, implode("", $filePut));	file_put_contents('diffconvert/'.$version.'.'.$num.'-deleted', $deletedFiles);	// Only create archives for 0 and most recent versions. Skip other update versions.	if ($num != 0 && ($num != $release - 1))	{		echo "Skipping create archive for version $version.$num\n";		continue;	}	$fromName = $num == 0 ? 'x' : $num;	// Create the diff archive packages using the file name list.	system('tar --create --bzip2 --no-recursion --directory '.$full.' --file packages'.$version.'/Joomla_'.$version.'.'.$fromName.'_to_'.$full.'-Stable-Patch_Package.tar.bz2 --files-from diffconvert/'.$version.'.'.$num . '> /dev/null');	system('tar --create --gzip  --no-recursion --directory '.$full.' --file packages'.$version.'/Joomla_'.$version.'.'.$fromName.'_to_'.$full.'-Stable-Patch_Package.tar.gz  --files-from diffconvert/'.$version.'.'.$num . '> /dev/null');	chdir(''.$full);	system('zip ../packages'.$version.'/Joomla_'.$version.'.'.$fromName.'_to_'.$full.'-Stable-Patch_Package.zip -@ < ../diffconvert/'.$version.'.'.$num . '> /dev/null');	chdir('..');}// Delete the directories we exclude from the packages (tests, docs, build).echo "Delete folders not included in packages.\n";$doNotPackage = array('tests', 'docs', '.gitignore', 'build', 'build.xml', 'phpunit.xml.dist', 'README.md', 'CONTRIBUTING.md');foreach ($doNotPackage as $removeFile){	system('rm -rf ' . $full . '/' . $removeFile);}// Recreate empty directories before creating new archives.system('mkdir packages_full'.$full);echo "Build full package files.\n";chdir($full);// Create full archive packages.system('tar --create --bzip2 --file ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Full_Package.tar.bz2 * > /dev/null');system('tar --create --gzip --file ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Full_Package.tar.gz * > /dev/null');system('zip -r ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Full_Package.zip * > /dev/null');// Create full update file without installation folder.echo "Build full update package.\n";system('rm -r installation');system('tar --create --bzip2 --file ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Update_Package.tar.bz2 * > /dev/null');system('tar --create --gzip --file ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Update_Package.tar.gz * > /dev/null');system('zip -r ../packages_full'.$full.'/Joomla_'.$full.'-Stable-Update_Package.zip * > /dev/null');echo "Build of version $full complete!\n";
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ord* Returns the unicode ordinal for a character* @param string UTF-8 encoded character* @return int unicode ordinal for the character* @see http://www.php.net/ord* @see http://www.php.net/manual/en/function.ord.php#46267*/function utf8_ord($chr) {    $ord0 = ord($chr);    if ( $ord0 >= 0 && $ord0 <= 127 ) {        return $ord0;    }    if ( !isset($chr{1}) ) {        trigger_error('Short sequence - at least 2 bytes expected, only 1 seen');        return FALSE;    }    $ord1 = ord($chr{1});    if ( $ord0 >= 192 && $ord0 <= 223 ) {        return ( $ord0 - 192 ) * 64            + ( $ord1 - 128 );    }    if ( !isset($chr{2}) ) {        trigger_error('Short sequence - at least 3 bytes expected, only 2 seen');        return FALSE;    }    $ord2 = ord($chr{2});    if ( $ord0 >= 224 && $ord0 <= 239 ) {        return ($ord0-224)*4096            + ($ord1-128)*64                + ($ord2-128);    }    if ( !isset($chr{3}) ) {        trigger_error('Short sequence - at least 4 bytes expected, only 3 seen');        return FALSE;    }    $ord3 = ord($chr{3});    if ($ord0>=240 && $ord0<=247) {        return ($ord0-240)*262144            + ($ord1-128)*4096                + ($ord2-128)*64                    + ($ord3-128);    }    if ( !isset($chr{4}) ) {        trigger_error('Short sequence - at least 5 bytes expected, only 4 seen');        return FALSE;    }    $ord4 = ord($chr{4});    if ($ord0>=248 && $ord0<=251) {        return ($ord0-248)*16777216            + ($ord1-128)*262144                + ($ord2-128)*4096                    + ($ord3-128)*64                        + ($ord4-128);    }    if ( !isset($chr{5}) ) {        trigger_error('Short sequence - at least 6 bytes expected, only 5 seen');        return FALSE;    }    if ($ord0>=252 && $ord0<=253) {        return ($ord0-252) * 1073741824            + ($ord1-128)*16777216                + ($ord2-128)*262144                    + ($ord3-128)*4096                        + ($ord4-128)*64                            + (ord($chr{5})-128);    }    if ( $ord0 >= 254 && $ord0 <= 255 ) {        trigger_error('Invalid UTF-8 with surrogate ordinal '.$ord0);        return FALSE;    }}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/helper.php';$version = ModVersionHelper::getVersion($params);require JModuleHelper::getLayoutPath('mod_version', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base Model Class * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */abstract class JModelBase implements JModel{	/**	 * The model state.	 *	 * @var    JRegistry	 * @since  12.1	 */	protected $state;	/**	 * Instantiate the model.	 *	 * @param   JRegistry  $state  The model state.	 *	 * @since   12.1	 */	public function __construct(JRegistry $state = null)	{		// Setup the model.		$this->state = isset($state) ? $state : $this->loadState();	}	/**	 * Get the model state.	 *	 * @return  JRegistry  The state object.	 *	 * @since   12.1	 */	public function getState()	{		return $this->state;	}	/**	 * Set the model state.	 *	 * @param   JRegistry  $state  The state object.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setState(JRegistry $state)	{		$this->state = $state;	}	/**	 * Load the model state.	 *	 * @return  JRegistry  The state object.	 *	 * @since   12.1	 */	protected function loadState()	{		return new JRegistry;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Tags List Controller * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsControllerTags extends JControllerLegacy{	/**	 * Method to search tags with AJAX	 *	 * @return  void	 */	public function searchAjax()	{		// Required objects		$app = JFactory::getApplication();		// Receive request data		$filters = array(			'like'      => trim($app->input->get('like', null)),			'title'     => trim($app->input->get('title', null)),			'flanguage' => $app->input->get('flanguage', null),			'published' => $app->input->get('published', 1, 'integer'),			'parent_id' => $app->input->get('parent_id', null)		);		if ($results = JHelperTags::searchTags($filters))		{			// Output a JSON object			echo json_encode($results);		}		$app->close();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Basic Web application router class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Application * @since       12.2 */class JApplicationWebRouterBase extends JApplicationWebRouter{	/**	 * @var    array  An array of rules, each rule being an associative array('regex'=> $regex, 'vars' => $vars, 'controller' => $controller)	 *                for routing the request.	 * @since  12.2	 */	protected $maps = array();	/**	 * Add a route map to the router.  If the pattern already exists it will be overwritten.	 *	 * @param   string  $pattern     The route pattern to use for matching.	 * @param   string  $controller  The controller name to map to the given pattern.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function addMap($pattern, $controller)	{		// Sanitize and explode the pattern.		$pattern = explode('/', trim(parse_url((string) $pattern, PHP_URL_PATH), ' /'));		// Prepare the route variables		$vars = array();		// Initialize regular expression		$regex = array();		// Loop on each segment		foreach ($pattern as $segment)		{			// Match a splat with no variable.			if ($segment == '*')			{				$regex[] = '.*';			}			// Match a splat and capture the data to a named variable.			elseif ($segment[0] == '*')			{				$vars[] = substr($segment, 1);				$regex[] = '(.*)';			}			// Match an escaped splat segment.			elseif ($segment[0] == '\\' && $segment[1] == '*')			{				$regex[] = '\*' . preg_quote(substr($segment, 2));			}			// Match an unnamed variable without capture.			elseif ($segment == ':')			{				$regex[] = '[^/]*';			}			// Match a named variable and capture the data.			elseif ($segment[0] == ':')			{				$vars[] = substr($segment, 1);				$regex[] = '([^/]*)';			}			// Match a semgent with an escaped variable character prefix.			elseif ($segment[0] == '\\' && $segment[1] == ':')			{				$regex[] = preg_quote(substr($segment, 1));			}			// Match the standard segment.			else			{				$regex[] = preg_quote($segment);			}		}		$this->maps[] = array(			'regex' => chr(1) . '^' . implode('/', $regex) . '$' . chr(1),			'vars' => $vars,			'controller' => (string) $controller		);		return $this;	}	/**	 * Add a route map to the router.  If the pattern already exists it will be overwritten.	 *	 * @param   array  $maps  A list of route maps to add to the router as $pattern => $controller.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function addMaps($maps)	{		foreach ($maps as $pattern => $controller)		{			$this->addMap($pattern, $controller);		}		return $this;	}	/**	 * Parse the given route and return the name of a controller mapped to the given route.	 *	 * @param   string  $route  The route string for which to find and execute a controller.	 *	 * @return  string  The controller name for the given route excluding prefix.	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 */	protected function parseRoute($route)	{		$controller = false;		// Trim the query string off.		$route = preg_replace('/([^?]*).*/u', '\1', $route);		// Sanitize and explode the route.		$route = trim(parse_url($route, PHP_URL_PATH), ' /');		// If the route is empty then simply return the default route.  No parsing necessary.		if ($route == '')		{			return $this->default;		}		// Iterate through all of the known route maps looking for a match.		foreach ($this->maps as $rule)		{			if (preg_match($rule['regex'], $route, $matches))			{				// If we have gotten this far then we have a positive match.				$controller = $rule['controller'];				// Time to set the input variables.				// We are only going to set them if they don't already exist to avoid overwriting things.				foreach ($rule['vars'] as $i => $var)				{					$this->input->def($var, $matches[$i + 1]);					// Don't forget to do an explicit set on the GET superglobal.					$this->input->get->def($var, $matches[$i + 1]);				}				$this->input->def('_rawRoute', $route);				break;			}		}		// We were unable to find a route match for the request.  Panic.		if (!$controller)		{			throw new InvalidArgumentException(sprintf('Unable to handle request for route `%s`.', $route), 404);		}		return $controller;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners Component Category Tree * * @package     Joomla.Site * @subpackage  com_banners * @since       1.6 */class BannersCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__banners';		$options['extension'] = 'com_banners';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_submenu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$list    = JSubMenuHelper::getEntries();$filters = JSubMenuHelper::getFilters();$action  = JSubMenuHelper::getAction();$displayMenu    = count($list);$displayFilters = count($filters);$hide = JFactory::getApplication()->input->getBool('hidemainmenu');if ($displayMenu || $displayFilters){	require JModuleHelper::getLayoutPath('mod_submenu', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JApplicationCli instead. * * @package     Joomla.Platform * @subpackage  Application * @since       11.1 * @deprecated  12.3 Use JApplicationCli instead. */class JCli extends JApplicationCli{	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @see     loadDispatcher()	 * @since   11.1	 * @deprecated  12.3 Use JApplicationCli instead.	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		JLog::add('JCli is deprecated. Use JApplicationCli instead.', JLog::WARNING, 'deprecated');		parent::__construct($input, $config, $dispatcher);	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" />	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/offline.css" type="text/css" />	<?php if ($this->direction == 'rtl') : ?>	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/offline_rtl.css" type="text/css" />	<?php endif; ?>	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/general.css" type="text/css" /></head><body><jdoc:include type="message" />	<div id="frame" class="outline">		<?php if ($app->getCfg('offline_image')) : ?>		<img src="<?php echo $app->getCfg('offline_image'); ?>" alt="<?php echo htmlspecialchars($app->getCfg('sitename')); ?>" />		<?php endif; ?>		<h1>			<?php echo htmlspecialchars($app->getCfg('sitename')); ?>		</h1>	<?php if ($app->getCfg('display_offline_message', 1) == 1 && str_replace(' ', '', $app->getCfg('offline_message')) != '') : ?>		<p>			<?php echo $app->getCfg('offline_message'); ?>		</p>	<?php elseif ($app->getCfg('display_offline_message', 1) == 2 && str_replace(' ', '', JText::_('JOFFLINE_MESSAGE')) != '') : ?>		<p>			<?php echo JText::_('JOFFLINE_MESSAGE'); ?>		</p>	<?php  endif; ?>	<form action="<?php echo JRoute::_('index.php', true); ?>" method="post" id="form-login">	<fieldset class="input">		<p id="form-login-username">			<label for="username"><?php echo JText::_('JGLOBAL_USERNAME') ?></label>			<input name="username" id="username" type="text" class="inputbox" alt="<?php echo JText::_('JGLOBAL_USERNAME') ?>" size="18" />		</p>		<p id="form-login-password">			<label for="passwd"><?php echo JText::_('JGLOBAL_PASSWORD') ?></label>			<input type="password" name="password" class="inputbox" size="18" alt="<?php echo JText::_('JGLOBAL_PASSWORD') ?>" id="passwd" />		</p>		<p id="form-login-remember">			<label for="remember"><?php echo JText::_('JGLOBAL_REMEMBER_ME') ?></label>			<input type="checkbox" name="remember" class="inputbox" value="yes" alt="<?php echo JText::_('JGLOBAL_REMEMBER_ME') ?>" id="remember" />		</p>		<input type="submit" name="Submit" class="button" value="<?php echo JText::_('JLOGIN') ?>" />		<input type="hidden" name="option" value="com_users" />		<input type="hidden" name="task" value="user.login" />		<input type="hidden" name="return" value="<?php echo base64_encode(JURI::base()) ?>" />		<?php echo JHtml::_('form.token'); ?>	</fieldset>	</form>	</div></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tracks list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerTracks extends JControllerLegacy{	/**	 * @var		string	The context for persistent state.	 * @since   1.6	 */	protected $context = 'com_banners.tracks';	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Tracks', $prefix = 'BannersModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to remove a record.	 *	 * @return  void	 * @since   1.6	 */	public function delete()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the model.		$model = $this->getModel();		// Load the filter state.		$app = JFactory::getApplication();		$type = $app->getUserState($this->context.'.filter.type');		$model->setState('filter.type', $type);		$begin = $app->getUserState($this->context.'.filter.begin');		$model->setState('filter.begin', $begin);		$end = $app->getUserState($this->context.'.filter.end');		$model->setState('filter.end', $end);		$categoryId = $app->getUserState($this->context.'.filter.category_id');		$model->setState('filter.category_id', $categoryId);		$clientId = $app->getUserState($this->context.'.filter.client_id');		$model->setState('filter.client_id', $clientId);		$model->setState('list.limit', 0);		$model->setState('list.start', 0);		$count = $model->getTotal();		// Remove the items.		if (!$model->delete())		{			JError::raiseWarning(500, $model->getError());		}		else		{			$this->setMessage(JText::plural('COM_BANNERS_TRACKS_N_ITEMS_DELETED', $count));		}		$this->setRedirect('index.php?option=com_banners&view=tracks');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$script  = 'function insertPagebreak() {'."\n\t";// Get the pagebreak title$script .= 'var title = document.getElementById("title").value;'."\n\t";$script .= 'if (title != \'\') {'."\n\t\t";$script .= 'title = "title=\""+title+"\" ";'."\n\t";$script .= '}'."\n\t";// Get the pagebreak toc alias -- not inserting for now// don't know which attribute to use...$script .= 'var alt = document.getElementById("alt").value;'."\n\t";$script .= 'if (alt != \'\') {'."\n\t\t";$script .= 'alt = "alt=\""+alt+"\" ";'."\n\t";$script .= '}'."\n\t";$script .= 'var tag = "<hr class=\"system-pagebreak\" "+title+" "+alt+"/>";'."\n\t";$script .= 'window.parent.jInsertEditorText(tag, \''.$this->eName.'\');'."\n\t";$script .= 'window.parent.SqueezeBox.close();'."\n\t";$script .= 'return false;'."\n";$script .= '}'."\n";JFactory::getDocument()->addScriptDeclaration($script);?>		<form>		<table width="100%" align="center">			<tr width="40%">				<td class="key" align="right">					<label for="title">						<?php echo JText::_('COM_CONTENT_PAGEBREAK_TITLE'); ?>					</label>				</td>				<td>					<input type="text" id="title" name="title" />				</td>			</tr>			<tr width="60%">				<td class="key" align="right">					<label for="alias">						<?php echo JText::_('COM_CONTENT_PAGEBREAK_TOC'); ?>					</label>				</td>				<td>					<input type="text" id="alt" name="alt" />				</td>			</tr>		</table>		</form>		<button onclick="insertPagebreak();"><?php echo JText::_('COM_CONTENT_PAGEBREAK_INSERT_BUTTON'); ?></button>
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * File system helper * * Holds support functions for the filesystem, particularly the stream * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JFilesystemHelper{	/**	 * Remote file size function for streams that don't support it	 *	 * @param   string  $url  TODO Add text	 *	 * @return  mixed	 *	 * @see     http://www.php.net/manual/en/function.filesize.php#71098	 * @since   11.1	 */	public static function remotefsize($url)	{		$sch = parse_url($url, PHP_URL_SCHEME);		if (($sch != 'http') && ($sch != 'https') && ($sch != 'ftp') && ($sch != 'ftps'))		{			return false;		}		if (($sch == 'http') || ($sch == 'https'))		{			$headers = get_headers($url, 1);			if ((!array_key_exists('Content-Length', $headers)))			{				return false;			}			return $headers['Content-Length'];		}		if (($sch == 'ftp') || ($sch == 'ftps'))		{			$server = parse_url($url, PHP_URL_HOST);			$port = parse_url($url, PHP_URL_PORT);			$path = parse_url($url, PHP_URL_PATH);			$user = parse_url($url, PHP_URL_USER);			$pass = parse_url($url, PHP_URL_PASS);			if ((!$server) || (!$path))			{				return false;			}			if (!$port)			{				$port = 21;			}			if (!$user)			{				$user = 'anonymous';			}			if (!$pass)			{				$pass = '';			}			switch ($sch)			{				case 'ftp':					$ftpid = ftp_connect($server, $port);					break;				case 'ftps':					$ftpid = ftp_ssl_connect($server, $port);					break;			}			if (!$ftpid)			{				return false;			}			$login = ftp_login($ftpid, $user, $pass);			if (!$login)			{				return false;			}			$ftpsize = ftp_size($ftpid, $path);			ftp_close($ftpid);			if ($ftpsize == -1)			{				return false;			}			return $ftpsize;		}	}	/**	 * Quick FTP chmod	 *	 * @param   string   $url   Link identifier	 * @param   integer  $mode  The new permissions, given as an octal value.	 *	 * @return  mixed	 *	 * @see     http://www.php.net/manual/en/function.ftp-chmod.php	 * @since   11.1	 */	public static function ftpChmod($url, $mode)	{		$sch = parse_url($url, PHP_URL_SCHEME);		if (($sch != 'ftp') && ($sch != 'ftps'))		{			return false;		}		$server = parse_url($url, PHP_URL_HOST);		$port = parse_url($url, PHP_URL_PORT);		$path = parse_url($url, PHP_URL_PATH);		$user = parse_url($url, PHP_URL_USER);		$pass = parse_url($url, PHP_URL_PASS);		if ((!$server) || (!$path))		{			return false;		}		if (!$port)		{			$port = 21;		}		if (!$user)		{			$user = 'anonymous';		}		if (!$pass)		{			$pass = '';		}		switch ($sch)		{			case 'ftp':				$ftpid = ftp_connect($server, $port);				break;			case 'ftps':				$ftpid = ftp_ssl_connect($server, $port);				break;		}		if (!$ftpid)		{			return false;		}		$login = ftp_login($ftpid, $user, $pass);		if (!$login)		{			return false;		}		$res = ftp_chmod($ftpid, $mode, $path);		ftp_close($ftpid);		return $res;	}	/**	 * Modes that require a write operation	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getWriteModes()	{		return array('w', 'w+', 'a', 'a+', 'r+', 'x', 'x+');	}	/**	 * Stream and Filter Support Operations	 *	 * Returns the supported streams, in addition to direct file access	 * Also includes Joomla! streams as well as PHP streams	 *	 * @return  array  Streams	 *	 * @since   11.1	 */	public static function getSupported()	{		// Really quite cool what php can do with arrays when you let it...		static $streams;		if (!$streams)		{			$streams = array_merge(stream_get_wrappers(), self::getJStreams());		}		return $streams;	}	/**	 * Returns a list of transports	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getTransports()	{		// Is this overkill?		return stream_get_transports();	}	/**	 * Returns a list of filters	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getFilters()	{		// Note: This will look like the getSupported() function with J! filters.		// TODO: add user space filter loading like user space stream loading		return stream_get_filters();	}	/**	 * Returns a list of J! streams	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getJStreams()	{		static $streams = array();		if (!$streams)		{			$files = new DirectoryIterator(__DIR__ . '/streams');			foreach ($files as $file)			{				$filename = $file->getFilename();				// Only load for php files.				// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6				if (!$file->isFile() || substr($filename, strrpos($filename, '.') + 1) != 'php')				{					continue;				}				$streams[] = $file->getBasename('.php');			}		}		return $streams;	}	/**	 * Determine if a stream is a Joomla stream.	 *	 * @param   string  $streamname  The name of a stream	 *	 * @return  boolean  True for a Joomla Stream	 *	 * @since   11.1	 */	public static function isJoomlaStream($streamname)	{		return in_array($streamname, self::getJStreams());	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseMysql is deprecated, use JDatabaseDriverMysql instead.', JLog::WARNING, 'deprecated');/** * MySQL database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverMysql instead. */class JDatabaseMysql extends JDatabaseDriverMysql{}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="weblink-category<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->category->title, '', 'com_weblinks.category'); ?></h2><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_weblinks.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if (!empty($this->children[$this->category->id])&& $this->maxLevel != 0) : ?>	<div class="cat-children">	<h3><?php echo JText::_('JGLOBAL_SUBCATEGORIES'); ?></h3>	<?php echo $this->loadTemplate('children'); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQuerySqlazure extends JDatabaseQuerySqlsrv{	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $name_quotes = '';}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class adjust the contrast of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterContrast extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			// @codeCoverageIgnoreStart			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Validate that the contrast value exists and is an integer.		if (!isset($options[IMG_FILTER_CONTRAST]) || !is_int($options[IMG_FILTER_CONTRAST]))		{			throw new InvalidArgumentException('No valid contrast value was given.  Expected integer.');		}		// Perform the contrast filter.		imagefilter($this->handle, IMG_FILTER_CONTRAST, $options[IMG_FILTER_CONTRAST]);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Component Category Tree * * @static * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.6 */class WeblinksCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__weblinks';		$options['extension'] = 'com_weblinks';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users master display controller. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersController extends JControllerLegacy{	/**	 * Checks whether a user can see this view.	 *	 * @param   string	$view	The view name.	 *	 * @return  boolean	 * @since   1.6	 */	protected function canView($view)	{		$canDo	= UsersHelper::getActions();		switch ($view)		{			// Special permissions.			case 'groups':			case 'group':			case 'levels':			case 'level':				return $canDo->get('core.admin');				break;			// Default permissions.			default:				return true;		}	}	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$view   = $this->input->get('view', 'users');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		if (!$this->canView($view))		{			JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Check for edit form.		if ($view == 'user' && $layout == 'edit' && !$this->checkEditId('com_users.edit.user', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=users', false));			return false;		}		elseif ($view == 'group' && $layout == 'edit' && !$this->checkEditId('com_users.edit.group', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=groups', false));			return false;		}		elseif ($view == 'level' && $layout == 'edit' && !$this->checkEditId('com_users.edit.level', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=levels', false));			return false;		}		elseif ($view == 'note' && $layout == 'edit' && !$this->checkEditId('com_users.edit.note', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=notes', false));			return false;		}		return parent::display();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * WINCACHE cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @see         http://php.net/manual/en/book.wincache.php * @since       11.1 */class JCacheStorageWincache extends JCacheStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);	}	/**	 * Get cached data from WINCACHE by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean false on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		$cache_content = wincache_ucache_get($cache_id);		return $cache_content;	}	/**	 * Get all cached data	 *	 * @return  array    data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$allinfo = wincache_ucache_info();		$keys = $allinfo['cache_entries'];		$secret = $this->_hash;		$data = array();		foreach ($keys as $key)		{			$name = $key['key_name'];			$namearr = explode('-', $name);			if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')			{				$group = $namearr[2];				if (!isset($data[$group]))				{					$item = new JCacheStorageHelper($group);				}				else				{					$item = $data[$group];				}				if (isset($key['value_size']))				{					$item->updateSize($key['value_size'] / 1024);				}				else				{					// Dummy, WINCACHE version is too low.					$item->updateSize(1);				}				$data[$group] = $item;			}		}		return $data;	}	/**	 * Store the data to WINCACHE by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		return wincache_ucache_set($cache_id, $data, $this->_lifetime);	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		return wincache_ucache_delete($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 * group mode    : cleans all cache in the group	 * notgroup mode : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		$allinfo = wincache_ucache_info();		$keys = $allinfo['cache_entries'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['key_name'], $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				wincache_ucache_delete($key['key_name']);			}		}		return true;	}	/**	 * Force garbage collect expired cache data as items are removed only on get/add/delete/info etc	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		$allinfo = wincache_ucache_info();		$keys = $allinfo['cache_entries'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['key_name'], $secret . '-cache-'))			{				wincache_ucache_get($key['key_name']);			}		}	}	/**	 * Test to see if the cache storage is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		$test = extension_loaded('wincache') && function_exists('wincache_ucache_get') && !strcmp(ini_get('wincache.ucenabled'), '1');		return $test;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of contacts * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$contactId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text' .				' FROM #__contact_details' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $contactId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $contactId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Access * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JAccessRule instead. * * @package     Joomla.Legacy * @subpackage  Access * @since       11.1 * @deprecated  12.3 */class JRule extends JAccessRule{	/**	 * Constructor.	 *	 * The input array must be in the form: array(-42 => true, 3 => true, 4 => false)	 * or an equivalent JSON encoded string.	 *	 * @param   mixed  $identities  A JSON format string (probably from the database) or a named array.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function __construct($identities)	{		JLog::add('JRule is deprecated. Use JAccessRule instead.', JLog::WARNING, 'deprecated');		parent::__construct($identities);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><form action="<?php echo JRoute::_('index.php?option=com_cache'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?><table class="adminlist">	<thead>		<tr>			<th>				<?php echo JText::_('COM_CACHE_PURGE_EXPIRED_ITEMS'); ?>			</th>		</tr>	</thead>	<tbody>		<tr>			<td>			<p class="mod-purge-instruct"><?php echo JText::_('COM_CACHE_PURGE_INSTRUCTIONS'); ?></p>			<p class="warning"><?php echo JText::_('COM_CACHE_RESOURCE_INTENSIVE_WARNING'); ?></p>			</td>		</tr>	</tbody></table><div>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></div></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="installer-warnings"><form action="<?php echo JRoute::_('index.php?option=com_installer&view=warnings'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty($this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?phpelse : ?>	<div id="j-main-container"><?php endif; ?><?phpif (!count($this->messages)){	echo '<p class="nowarning">' . JText::_('COM_INSTALLER_MSG_WARNINGS_NONE') . '</p>';}else{	echo JHtml::_('sliders.start', 'warning-sliders', array('useCookie' => 1));	foreach ($this->messages as $message)	{		echo JHtml::_('sliders.panel', $message['message'], str_replace(' ', '', $message['message']));		echo '<div style="padding: 5px;" >' . $message['description'] . '</div>';	}	echo JHtml::_('sliders.panel', JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFO'), 'furtherinfo-pane');	echo '<div style="padding: 5px;" >' . JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFODESC') . '</div>';	echo JHtml::_('sliders.end');}?><div class="clr"> </div><div>	<input type="hidden" name="boxchecked" value="0" />	<?php echo JHtml::_('form.token'); ?></div></div></form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.uri');/** * Google API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleEmbed{	/**	 * @var    JRegistry  Options for the Google data object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JURI  URI of the page being rendered.	 * @since  12.3	 */	protected $uri;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Google options object	 * @param   JURI       $uri      URL of the page being rendered	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JURI $uri = null)	{		$this->options = $options ? $options : new JRegistry;		$this->uri = $uri ? $uri : new JURI;	}	/**	 * Method to retrieve the javascript header for the embed API	 *	 * @return  string  The header	 *	 * @since   12.3	 */	public function isSecure()	{		return $this->uri->getScheme() == 'https';	}	/**	 * Method to retrieve the header for the API	 *	 * @return  string  The header	 *	 * @since   12.3	 */	abstract public function getHeader();	/**	 * Method to retrieve the body for the API	 *	 * @return  string  The body	 *	 * @since   12.3	 */	abstract public function getBody();	/**	 * Method to output the javascript header for the embed API	 *	 * @return  null	 *	 * @since   12.3	 */	public function echoHeader()	{		echo $this->getHeader();	}	/**	 * Method to output the body for the API	 *	 * @return  null	 *	 * @since   12.3	 */	public function echoBody()	{		echo $this->getBody();	}	/**	 * Get an option from the JGoogleEmbed instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleEmbed instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleEmbed  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view levels list controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerLevels extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_LEVELS';	/**	 * Proxy for getModel.	 *	 * @since   1.6	 */	public function getModel($name = 'Level', $prefix = 'UsersModel')	{		return parent::getModel($name, $prefix, array('ignore_request' => true));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="control-group">	<?php echo $this->form->getLabel('metadesc'); ?>	<div class="controls">		<?php echo $this->form->getInput('metadesc'); ?>	</div></div><div class="control-group">	<?php echo $this->form->getLabel('metakey'); ?>	<div class="controls">		<?php echo $this->form->getInput('metakey'); ?>	</div></div><?php foreach($this->form->getGroup('metadata') as $field): ?><div class="control-group">	<?php if (!$field->hidden): ?>		<?php echo $field->label; ?>	<?php endif; ?>	<div class="controls">		<?php echo $field->input; ?>	</div></div><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Admin Controller * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminController extends JControllerLegacy{}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller	= JControllerLegacy::getInstance('Banners');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><fieldset>	<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Languages table. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableLanguage extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__languages', 'lang_id', $db);	}	/**	 * Overloaded check method to ensure data integrity	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		if (trim($this->title) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_NO_TITLE'));			return false;		}		return true;	}	/**	 * Overrides JTable::store to check unique fields.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   11.4	 */	public function store($updateNulls = false)	{		// Verify that the sef field is unique		$table = JTable::getInstance('Language', 'JTable');		if ($table->load(array('sef' => $this->sef)) && ($table->lang_id != $this->lang_id || $this->lang_id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_UNIQUE_SEF'));			return false;		}		// Verify that the image field is unique		if ($table->load(array('image' => $this->image)) && ($table->lang_id != $this->lang_id || $this->lang_id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_UNIQUE_IMAGE'));			return false;		}		// Verify that the language code is unique		if ($table->load(array('lang_code' => $this->lang_code)) && ($table->lang_id != $this->lang_id || $this->lang_id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_LANGUAGE_UNIQUE_LANG_CODE'));			return false;		}		return parent::store($updateNulls);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(WeblinksHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_weblinks.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_num_links') == 1) :?>			<dl class="weblink-count"><dt>				<?php echo JText::_('COM_WEBLINKS_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of plugins. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.5 */class PluginsViewPlugins extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->state      = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_PLUGINS_MSG_MANAGE_NO_PLUGINS'),				'warning'			);		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo = PluginsHelper::getActions();		JToolbarHelper::title(JText::_('COM_PLUGINS_MANAGER_PLUGINS'), 'plugin');		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('plugin.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('plugins.publish', 'JTOOLBAR_ENABLE', true);			JToolbarHelper::unpublish('plugins.unpublish', 'JTOOLBAR_DISABLE', true);			JToolbarHelper::checkin('plugins.checkin');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_plugins');		}		JToolbarHelper::help('JHELP_EXTENSIONS_PLUGIN_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_plugins&view=plugins');		JHtmlSidebar::addFilter(				JText::_('JOPTION_SELECT_PUBLISHED'),				'filter_enabled',				JHtml::_('select.options', PluginsHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.enabled'), true)		);		JHtmlSidebar::addFilter(				JText::_('COM_PLUGINS_OPTION_FOLDER'),				'filter_folder',				JHtml::_('select.options', PluginsHelper::folderOptions(), 'value', 'text', $this->state->get('filter.folder'))		);		JHtmlSidebar::addFilter(				JText::_('JOPTION_SELECT_ACCESS'),				'filter_access',				JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		$this->sidebar = JHtmlSidebar::render();	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(				'ordering' => JText::_('JGRID_HEADING_ORDERING'),				'a.state' => JText::_('JSTATUS'),				'name' => JText::_('JGLOBAL_TITLE'),				'folder' => JText::_('COM_PLUGINS_FOLDER_HEADING'),				'element' => JText::_('COM_PLUGINS_ELEMENT_HEADING'),				'access' => JText::_('JGRID_HEADING_ACCESS'),				'extension_id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filter model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelFilter extends JModelAdmin{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  2.5	 */	protected $text_prefix = 'COM_FINDER';	/**	 * Model context string.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'com_finder.filter';	/**	 * Custom clean cache method.	 *	 * @param   string   $group      The component name. [optional]	 * @param   integer  $client_id  The client ID. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	protected function cleanCache($group = 'com_finder', $client_id = 1)	{		parent::cleanCache($group, $client_id);	}	/**	 * Method to get the filter data.	 *	 * @return  mixed  The filter data.	 *	 * @since   2.5	 */	public function getFilter()	{		$filter_id = (int) $this->getState('filter.id');		// Get a FinderTableFilter instance.		$filter = $this->getTable();		// Attempt to load the row.		$return = $filter->load($filter_id);		// Check for a database error.		if ($return === false && $filter->getError())		{			$this->setError($filter->getError());			return false;		}		// Process the filter data.		if (!empty($filter->data))		{			$filter->data = explode(',', $filter->data);		}		elseif (empty($filter->data))		{			$filter->data = array();		}		// Check for a database error.		if ($this->_db->getErrorNum())		{			$this->setError($this->_db->getErrorMsg());			return false;		}		return $filter;	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form. [optional]	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not. [optional]	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   2.5	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_finder.filter', 'filter', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Returns a JTable object, always creating it.	 *	 * @param   string  $type    The table type to instantiate. [optional]	 * @param   string  $prefix  A prefix for the table class name. [optional]	 * @param   array   $config  Configuration array for model. [optional]	 *	 * @return  JTable  A database object	 *	 * @since   2.5	 */	public function getTable($type = 'Filter', $prefix = 'FinderTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   2.5	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_finder.edit.filter.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_finder.filter', $data);		return $data;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><dl class="stats-module<?php echo $moduleclass_sfx ?>"><?php foreach ($list as $item) : ?>	<dt><?php echo $item->title;?></dt>	<dd><?php echo $item->data;?></dd><?php endforeach; ?></dl>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       3.0 */class JFormFieldModuletag extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  3.0	 */	protected $type = 'ModuleTag';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   3.0	 */	protected function getOptions()	{		$options = array();		$tags = array('div', 'section', 'aside', 'nav', 'address', 'article');		// Create one new option object for each tag		foreach ($tags as $tag)		{			$tmp = JHtml::_('select.option', $tag, $tag);			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(pressbutton)	{		var form = document.getElementById('mailtoForm');		// do field validation		if (form.mailto.value == "" || form.from.value == "")		{			alert('<?php echo JText::_('COM_MAILTO_EMAIL_ERR_NOINFO'); ?>');			return false;		}		form.submit();	}</script><?php$data	= $this->get('data');?><div id="mailto-window">	<h2>		<?php echo JText::_('COM_MAILTO_EMAIL_TO_A_FRIEND'); ?>	</h2>	<div class="mailto-close">		<a href="javascript: void window.close()" title="<?php echo JText::_('COM_MAILTO_CLOSE_WINDOW'); ?>">		 <span><?php echo JText::_('COM_MAILTO_CLOSE_WINDOW'); ?> </span></a>	</div>	<form action="<?php echo JURI::base() ?>index.php" id="mailtoForm" method="post">		<div class="formelm">			<label for="mailto_field"><?php echo JText::_('COM_MAILTO_EMAIL_TO'); ?></label>			<input type="text" id="mailto_field" name="mailto" class="inputbox" size="25" value="<?php echo $this->escape($data->mailto); ?>"/>		</div>		<div class="formelm">			<label for="sender_field">			<?php echo JText::_('COM_MAILTO_SENDER'); ?></label>			<input type="text" id="sender_field" name="sender" class="inputbox" value="<?php echo $this->escape($data->sender); ?>" size="25" />		</div>		<div class="formelm">			<label for="from_field">			<?php echo JText::_('COM_MAILTO_YOUR_EMAIL'); ?></label>			<input type="text" id="from_field" name="from" class="inputbox" value="<?php echo $this->escape($data->from); ?>" size="25" />		</div>		<div class="formelm">			<label for="subject_field">			<?php echo JText::_('COM_MAILTO_SUBJECT'); ?></label>			<input type="text" id="subject_field" name="subject" class="inputbox" value="<?php echo $this->escape($data->subject); ?>" size="25" />		</div>		<p>			<button class="button" onclick="return Joomla.submitbutton('send');">				<?php echo JText::_('COM_MAILTO_SEND'); ?>			</button>			<button class="button" onclick="window.close();return false;">				<?php echo JText::_('COM_MAILTO_CANCEL'); ?>			</button>		</p>		<input type="hidden" name="layout" value="<?php echo $this->getLayout();?>" />		<input type="hidden" name="option" value="com_mailto" />		<input type="hidden" name="task" value="send" />		<input type="hidden" name="tmpl" value="component" />		<input type="hidden" name="link" value="<?php echo $data->link; ?>" />		<?php echo JHtml::_('form.token'); ?>	</form></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the helper functions only oncerequire_once __DIR__ . '/helper.php';$list = ModArticlesCategoriesHelper::getList($params);if (!empty($list)){	$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));	$startLevel = reset($list)->getParent()->level;	require JModuleHelper::getLayoutPath('mod_articles_categories', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Simple encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipherSimple implements JCryptCipher{	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	public function decrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != 'simple')		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected simple.');		}		$decrypted = '';		$tmp = $key->public;		// Convert the HEX input into an array of integers and get the number of characters.		$chars = $this->_hexToIntArray($data);		$charCount = count($chars);		// Repeat the key as many times as necessary to ensure that the key is at least as long as the input.		for ($i = 0; $i < $charCount; $i = strlen($tmp))		{			$tmp = $tmp . $tmp;		}		// Get the XOR values between the ASCII values of the input and key characters for all input offsets.		for ($i = 0; $i < $charCount; $i++)		{			$decrypted .= chr($chars[$i] ^ ord($tmp[$i]));		}		return $decrypted;	}	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	public function encrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != 'simple')		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected simple.');		}		$encrypted = '';		$tmp = $key->private;		// Split up the input into a character array and get the number of characters.		$chars = preg_split('//', $data, -1, PREG_SPLIT_NO_EMPTY);		$charCount = count($chars);		// Repeat the key as many times as necessary to ensure that the key is at least as long as the input.		for ($i = 0; $i < $charCount; $i = strlen($tmp))		{			$tmp = $tmp . $tmp;		}		// Get the XOR values between the ASCII values of the input and key characters for all input offsets.		for ($i = 0; $i < $charCount; $i++)		{			$encrypted .= $this->_intToHex(ord($tmp[$i]) ^ ord($chars[$i]));		}		return $encrypted;	}	/**	 * Method to generate a new encryption key[/pair] object.	 *	 * @param   array  $options  Key generation options.	 *	 * @return  JCryptKey	 *	 * @since   12.1	 */	public function generateKey(array $options = array())	{		// Create the new encryption key[/pair] object.		$key = new JCryptKey('simple');		// Just a random key of a given length.		$key->private = $this->_getRandomKey();		$key->public  = $key->private;		return $key;	}	/**	 * Method to generate a random key of a given length.	 *	 * @param   integer  $length  The length of the key to generate.	 *	 * @return  string	 *	 * @since   12.1	 */	private function _getRandomKey($length = 256)	{		$key = '';		$salt = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';		$saltLength = strlen($salt);		// Build the random key.		for ($i = 0; $i < $length; $i++)		{			$key .= $salt[mt_rand(0, $saltLength - 1)];		}		return $key;	}	/**	 * Convert hex to an integer	 *	 * @param   string   $s  The hex string to convert.	 * @param   integer  $i  The offset?	 *	 * @return  integer	 *	 * @since   11.1	 */	private function _hexToInt($s, $i)	{		$j = (int) $i * 2;		$k = 0;		$s1 = (string) $s;		// Get the character at position $j.		$c = substr($s1, $j, 1);		// Get the character at position $j + 1.		$c1 = substr($s1, $j + 1, 1);		switch ($c)		{			case 'A':				$k += 160;				break;			case 'B':				$k += 176;				break;			case 'C':				$k += 192;				break;			case 'D':				$k += 208;				break;			case 'E':				$k += 224;				break;			case 'F':				$k += 240;				break;			case ' ':				$k += 0;				break;			default:				(int) $k = $k + (16 * (int) $c);				break;		}		switch ($c1)		{			case 'A':				$k += 10;				break;			case 'B':				$k += 11;				break;			case 'C':				$k += 12;				break;			case 'D':				$k += 13;				break;			case 'E':				$k += 14;				break;			case 'F':				$k += 15;				break;			case ' ':				$k += 0;				break;			default:				$k += (int) $c1;				break;		}		return $k;	}	/**	 * Convert hex to an array of integers	 *	 * @param   string  $hex  The hex string to convert to an integer array.	 *	 * @return  array  An array of integers.	 *	 * @since   11.1	 */	private function _hexToIntArray($hex)	{		$array = array();		$j = (int) strlen($hex) / 2;		for ($i = 0; $i < $j; $i++)		{			$array[$i] = (int) $this->_hexToInt($hex, $i);		}		return $array;	}	/**	 * Convert an integer to a hexadecimal string.	 *	 * @param   integer  $i  An integer value to convert to a hex string.	 *	 * @return  string	 *	 * @since   11.1	 */	private function _intToHex($i)	{		// Sanitize the input.		$i = (int) $i;		// Get the first character of the hexadecimal string if there is one.		$j = (int) ($i / 16);		if ($j === 0)		{			$s = ' ';		}		else		{			$s = strtoupper(dechex($j));		}		// Get the second character of the hexadecimal string.		$k = $i - $j * 16;		$s = $s . strtoupper(dechex($k));		return $s;	}}
<?phpclass Joomla_Sniffs_Commenting_SingleCommentSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns the token types that this sniff is interested in.	 *	 * @return array(int)	 */	public function register()	{		return array(T_COMMENT);	}	/**	 * Processes the tokens that this sniff is interested in.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file where the token was found.	 * @param int                  $stackPtr  The position in the stack where	 *                                        the token was found.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		$comment = trim($tokens[$stackPtr]['content']);		/*		 * Hash comments are not allowed.		*/		if (0 === strpos($comment, '#'))		{			$phpcsFile->addError('Hash comments are prohibited; found %s'					, $stackPtr, 'HashComment', array($comment));			return;		}		if (0 !== strpos($comment, '//'))		{			// Not of our concern			return;		}		/*		 * Always have a space between // and the start of comment text.		* The exception to this is if the preceding line consists of a single open bracket.		*/		if (isset($comment{2}) && $comment{2} != ' ')		{			$phpcsFile->addError('Please put a space between the // and the start of comment text; found "%s"'					, $stackPtr, 'NoSpace', array($comment));			return;		}		/*		 * New lines should always start with an upper case letter unless		*    The line is a continuation of a complete sentence		*    The term is code and is case sensitive.(@todo)		*/		if (isset($comment{3}) && $comment{3} != strtoupper($comment{3}))		{			// Comment does not start with an upper case letter			$previous = $phpcsFile->findPrevious(T_COMMENT, $stackPtr - 1);			if ($tokens[$previous]['line'] == $tokens[$stackPtr]['line'] - 1)			{				// There is a comment on the previous line.				$test = trim($tokens[$previous]['content']);				if ('.' != substr($test, strlen($test) - 1))				{					// If the previous comment does not end with a full stop "." we					// assume a sentence spanned over multiple lines.					return;				}			}			$phpcsFile->addError('Please start your comment with a capital letter; found "%s"'					, $stackPtr, 'LowerCase', array($comment));			return;		}		/*		 * Comments should not be on the same line as the code to which they refer		* (which puts them after the code they reference).		* They should be on their own lines.		*/		$previous = $phpcsFile->findPrevious(T_SEMICOLON, $stackPtr);		if ($tokens[$previous]['line'] == $tokens[$stackPtr]['line'])		{			$phpcsFile->addError('Please put your comment on a separate line *preceding* your code; found "%s"'					, $stackPtr, 'Inline', array($comment));			return;		}		/*		 * Always have a single blank line before a comment or block of comments.		 * -- Don't allow preceding "code" - identified by a semicolon ;)		 */		if ($tokens[$previous]['line'] == $tokens[$stackPtr]['line'] - 1)		{			$phpcsFile->addError('Please consider a blank line preceding your comment'					, $stackPtr, 'TooClose');			return;		}		/*		 * Comment blocks that introduce large sections of code and are more than 3 lines long		* should use /* * /  and should use * on each line with the same space/tab rules as doc blocks.		* If you need a large introduction consider whether this block should be separated into a		* method to reduce complexity and therefore providing a full docblock.		*/		$next = $phpcsFile->findNext(T_COMMENT, $stackPtr + 1);		if ($tokens[$next]['line'] == $tokens[$stackPtr]['line'] + 1)		{			// The following line contains also a comment			$nextNext = $phpcsFile->findNext(T_COMMENT, $next + 1);			if ($tokens[$nextNext]['line'] == $tokens[$next]['line'] + 1)			{				// Found 3 lines of // comments - too much.				$phpcsFile->addError('Please consider the /* */ style for comments that span over multiple lines.'						, $stackPtr, 'MultiLine');				return;			}		}	}//function}//class
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$params->def('count', 10);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));$list = ModArchiveHelper::getList($params);require JModuleHelper::getLayoutPath('mod_articles_archive', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');?><?php echo JHtml::_('access.usergroups', 'jform[groups]', $this->groups, true); ?>
<?php/** * @package     Joomla.Legacy * @subpackage  Utilities * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JXMLElement is deprecated. Use SimpleXMLElement.', JLog::WARNING, 'deprecated');/** * Wrapper class for php SimpleXMLElement. * * @package     Joomla.Legacy * @subpackage  Utilities * @since       11.1 * @deprecated  13.3 Use SimpleXMLElement instead. */class JXMLElement extends SimpleXMLElement{	/**	 * Get the name of the element.	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated 13.3  Use SimpleXMLElement::getName() instead.	 */	public function name()	{		JLog::add('JXMLElement::name() is deprecated, use SimpleXMLElement::getName() instead.', JLog::WARNING, 'deprecated');		return (string) $this->getName();	}	/**	 * Return a well-formed XML string based on SimpleXML element	 *	 * @param   boolean  $compressed  Should we use indentation and newlines ?	 * @param   string   $indent      Indention character.	 * @param   integer  $level       The level within the document which informs the indentation.	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated 13.3  Use SimpleXMLElement::asXML() instead.	 */	public function asFormattedXML($compressed = false, $indent = "\t", $level = 0)	{		JLog::add('JXMLElement::asFormattedXML() is deprecated, use SimpleXMLElement::asXML() instead.', JLog::WARNING, 'deprecated');		$out = '';		// Start a new line, indent by the number indicated in $level		$out .= ($compressed) ? '' : "\n" . str_repeat($indent, $level);		// Add a <, and add the name of the tag		$out .= '<' . $this->getName();		// For each attribute, add attr="value"		foreach ($this->attributes() as $attr)		{			$out .= ' ' . $attr->getName() . '="' . htmlspecialchars((string) $attr, ENT_COMPAT, 'UTF-8') . '"';		}		// If there are no children and it contains no data, end it off with a />		if (!count($this->children()) && !(string) $this)		{			$out .= " />";		}		else		{			// If there are children			if (count($this->children()))			{				// Close off the start tag				$out .= '>';				$level++;				// For each child, call the asFormattedXML function (this will ensure that all children are added recursively)				foreach ($this->children() as $child)				{					$out .= $child->asFormattedXML($compressed, $indent, $level);				}				$level--;				// Add the newline and indentation to go along with the close tag				$out .= ($compressed) ? '' : "\n" . str_repeat($indent, $level);			}			elseif ((string) $this)			{				// If there is data, close off the start tag and add the data				$out .= '>' . htmlspecialchars((string) $this, ENT_COMPAT, 'UTF-8');			}			// Add the end tag			$out .= '</' . $this->getName() . '>';		}		return $out;	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.Beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;function renderMessage($msgList){	$buffer  = null;	$buffer .= "\n<div id=\"system-message-container\">";	if (is_array($msgList))	{		$buffer .= "\n<dl id=\"system-message\">";		foreach ($msgList as $type => $msgs)		{			if (count($msgs))			{				$buffer .= "\n<dt class=\"" . strtolower($type) . "\">" . JText::_($type) . "</dt>";				$buffer .= "\n<dd class=\"" . strtolower($type) . " message\">";				$buffer .= "\n\t<ul>";				foreach ($msgs as $msg)				{					$buffer .= "\n\t\t<li>" . $msg . "</li>";				}				$buffer .= "\n\t</ul>";				$buffer .= "\n</dd>";			}			$buffer .= "\n</dl>";		}		$buffer .= "\n</div>";		return $buffer;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_random_image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_random_image * * @package     Joomla.Site * @subpackage  mod_random_image * @since       1.5 */class ModRandomImageHelper{	public static function getRandomImage(&$params, $images)	{		$width	= $params->get('width');		$height	= $params->get('height');		$i      = count($images);		$random = mt_rand(0, $i - 1);		$image  = $images[$random];		$size   = getimagesize(JPATH_BASE . '/' . $image->folder . '/' . $image->name);		if ($width == '')		{			$width = 100;		}		if ($size[0] < $width)		{			$width = $size[0];		}		$coeff = $size[0] / $size[1];		if ($height == '')		{			$height = (int) ($width / $coeff);		}		else		{			$newheight = min($height, (int) ($width / $coeff));			if ($newheight < $height)			{				$height = $newheight;			} else {				$width = $height * $coeff;			}		}		$image->width	= $width;		$image->height	= $height;		$image->folder	= str_replace('\\', '/', $image->folder);		return $image;	}	public static function getImages(&$params, $folder)	{		$type		= $params->get('type', 'jpg');		$files	= array();		$images	= array();		$dir = JPATH_BASE . '/' . $folder;		// check if directory exists		if (is_dir($dir))		{			if ($handle = opendir($dir))			{				while (false !== ($file = readdir($handle)))				{					if ($file != '.' && $file != '..' && $file != 'CVS' && $file != 'index.html')					{						$files[] = $file;					}				}			}			closedir($handle);			$i = 0;			foreach ($files as $img)			{				if (!is_dir($dir . '/' . $img))				{					if (preg_match('/'.$type.'/', $img))					{						$images[$i] = new stdClass;						$images[$i]->name	= $img;						$images[$i]->folder	= $folder;						$i++;					}				}			}		}		return $images;	}	public static function getFolder(&$params)	{		$folder	= $params->get('folder');		$LiveSite	= JURI::base();		// if folder includes livesite info, remove		if (JString::strpos($folder, $LiveSite) === 0)		{			$folder = str_replace($LiveSite, '', $folder);		}		// if folder includes absolute path, remove		if (JString::strpos($folder, JPATH_SITE) === 0)		{			$folder = str_replace(JPATH_BASE, '', $folder);		}		$folder = str_replace('\\', DIRECTORY_SEPARATOR, $folder);		$folder = str_replace('/', DIRECTORY_SEPARATOR, $folder);		return $folder;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of banners * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$bannerId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text' .				' FROM #__banners' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $bannerId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $bannerId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Base Class * * This is an abstracted input class used to manage retrieving data from the application environment. * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 * * @method      integer  getInt()       getInt($name, $default = null)    Get a signed integer. * @method      integer  getUint()      getUint($name, $default = null)   Get an unsigned integer. * @method      float    getFloat()     getFloat($name, $default = null)  Get a floating-point number. * @method      boolean  getBool()      getBool($name, $default = null)   Get a boolean. * @method      string   getWord()      getWord($name, $default = null) * @method      string   getAlnum()     getAlnum($name, $default = null) * @method      string   getCmd()       getCmd($name, $default = null) * @method      string   getBase64()    getBase64($name, $default = null) * @method      string   getString()    getString($name, $default = null) * @method      string   getHtml()      getHtml($name, $default = null) * @method      string   getPath()      getPath($name, $default = null) * @method      string   getUsername()  getUsername($name, $default = null) */class JInput implements Serializable, Countable{	/**	 * Options array for the JInput instance.	 *	 * @var    array	 * @since  11.1	 */	protected $options = array();	/**	 * Filter object to use.	 *	 * @var    JFilterInput	 * @since  11.1	 */	protected $filter = null;	/**	 * Input data.	 *	 * @var    array	 * @since  11.1	 */	protected $data = array();	/**	 * Input objects	 *	 * @var    array	 * @since  11.1	 */	protected $inputs = array();	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is $_REQUEST)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   11.1	 */	public function __construct($source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		if (is_null($source))		{			$this->data = &$_REQUEST;		}		else		{			$this->data = $source;		}		// Set the options for the class.		$this->options = $options;	}	/**	 * Magic method to get an input object	 *	 * @param   mixed  $name  Name of the input object to retrieve.	 *	 * @return  JInput  The request input object	 *	 * @since   11.1	 */	public function __get($name)	{		if (isset($this->inputs[$name]))		{			return $this->inputs[$name];		}		$className = 'JInput' . ucfirst($name);		if (class_exists($className))		{			$this->inputs[$name] = new $className(null, $this->options);			return $this->inputs[$name];		}		$superGlobal = '_' . strtoupper($name);		if (isset($GLOBALS[$superGlobal]))		{			$this->inputs[$name] = new JInput($GLOBALS[$superGlobal], $this->options);			return $this->inputs[$name];		}		// TODO throw an exception	}	/**	 * Get the number of variables.	 *	 * @return  integer  The number of variables in the input.	 *	 * @since   12.2	 * @see     Countable::count()	 */	public function count()	{		return count($this->data);	}	/**	 * Gets a value from the input data.	 *	 * @param   string  $name     Name of the value to get.	 * @param   mixed   $default  Default value to return if variable does not exist.	 * @param   string  $filter   Filter to apply to the value.	 *	 * @return  mixed  The filtered input value.	 *	 * @since   11.1	 */	public function get($name, $default = null, $filter = 'cmd')	{		if (isset($this->data[$name]))		{			return $this->filter->clean($this->data[$name], $filter);		}		return $default;	}	/**	 * Gets an array of values from the request.	 *	 * @param   array  $vars        Associative array of keys and filter types to apply.	 * @param   mixed  $datasource  Array to retrieve data from, or null	 *	 * @return  mixed  The filtered input data.	 *	 * @since   11.1	 */	public function getArray(array $vars, $datasource = null)	{		$results = array();		foreach ($vars as $k => $v)		{			if (is_array($v))			{				if (is_null($datasource))				{					$results[$k] = $this->getArray($v, $this->get($k, null, 'array'));				}				else				{					$results[$k] = $this->getArray($v, $datasource[$k]);				}			}			else			{				if (is_null($datasource))				{					$results[$k] = $this->get($k, null, $v);				}				elseif (isset($datasource[$k]))				{					$results[$k] = $this->filter->clean($datasource[$k], $v);				}				else				{					$results[$k] = $this->filter->clean(null, $v);				}			}		}		return $results;	}	/**	 * Sets a value	 *	 * @param   string  $name   Name of the value to set.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   11.1	 */	public function set($name, $value)	{		$this->data[$name] = $value;	}	/**	 * Define a value. The value will only be set if there's no value for the name or if it is null.	 *	 * @param   string  $name   Name of the value to define.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   12.1	 */	public function def($name, $value)	{		if (isset($this->data[$name]))		{			return;		}		$this->data[$name] = $value;	}	/**	 * Magic method to get filtered input data.	 *	 * @param   string  $name       Name of the filter type prefixed with 'get'.	 * @param   array   $arguments  [0] The name of the variable [1] The default value.	 *	 * @return  mixed   The filtered input value.	 *	 * @since   11.1	 */	public function __call($name, $arguments)	{		if (substr($name, 0, 3) == 'get')		{			$filter = substr($name, 3);			$default = null;			if (isset($arguments[1]))			{				$default = $arguments[1];			}			return $this->get($arguments[0], $default, $filter);		}	}	/**	 * Gets the request method.	 *	 * @return  string   The request method.	 *	 * @since   11.1	 */	public function getMethod()	{		$method = strtoupper($_SERVER['REQUEST_METHOD']);		return $method;	}	/**	 * Method to serialize the input.	 *	 * @return  string  The serialized input.	 *	 * @since   12.1	 */	public function serialize()	{		// Load all of the inputs.		$this->loadAllInputs();		// Remove $_ENV and $_SERVER from the inputs.		$inputs = $this->inputs;		unset($inputs['env']);		unset($inputs['server']);		// Serialize the options, data, and inputs.		return serialize(array($this->options, $this->data, $inputs));	}	/**	 * Method to unserialize the input.	 *	 * @param   string  $input  The serialized input.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function unserialize($input)	{		// Unserialize the options, data, and inputs.		list($this->options, $this->data, $this->inputs) = unserialize($input);		// Load the filter.		if (isset($this->options['filter']))		{			$this->filter = $this->options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}	}	/**	 * Method to load all of the global inputs.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function loadAllInputs()	{		static $loaded = false;		if (!$loaded)		{			// Load up all the globals.			foreach ($GLOBALS as $global => $data)			{				// Check if the global starts with an underscore.				if (strpos($global, '_') === 0)				{					// Convert global name to input name.					$global = strtolower($global);					$global = substr($global, 1);					// Get the input.					$this->$global;				}			}			$loaded = true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="published">				<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $displayData['item']->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Clients list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerClients extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_BANNERS_CLIENTS';	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Client', $prefix = 'BannersModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-params');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>	<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>		<?php endforeach; ?>	</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlus extends JGoogleData{	/**	* @var    JGoogleDataPlusPeople  Google+ API object for people.	* @since  12.3	*/	protected $people;	/**	* @var    JGoogleDataPlusActivities  Google+ API object for people.	* @since  12.3	*/	protected $activities;	/**	* @var    JGoogleDataPlusComments  Google+ API object for people.	* @since  12.3	*/	protected $comments;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		// Setup the default API url if not already set.		$options->def('api.url', 'https://www.googleapis.com/plus/v1/');		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JGoogleDataPlus  Google+ API object (people, activities, comments).	 *	 * @since   12.3	 */	public function __get($name)	{		switch ($name)		{			case 'people':				if ($this->people == null)				{					$this->people = new JGoogleDataPlusPeople($this->options, $this->auth);				}				return $this->people;			case 'activities':				if ($this->activities == null)				{					$this->activities = new JGoogleDataPlusActivities($this->options, $this->auth);				}				return $this->activities;			case 'comments':				if ($this->comments == null)				{					$this->comments = new JGoogleDataPlusComments($this->options, $this->auth);				}				return $this->comments;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController  This object to support chaining.	 *	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_ADMINISTRATOR . '/components/com_installer/helpers/installer.php';		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'install');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			$ftp = JClientHelper::setCredentialsFromRequest('ftp');			$view->ftp = &$ftp;			// Get the model for the view.			$model = $this->getModel($vName);			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			// Load the submenu.			InstallerHelper::addSubmenu($vName);			$view->display();		}		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/article.php';/** * Feature model. * * @package     Joomla.Administrator * @subpackage  com_content */class ContentModelFeature extends ContentModelArticle{	/**	 * Returns a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	*/	public function getTable($type = 'Featured', $prefix = 'ContentTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object	A record object.	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		return $condition;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Class to turn JCli applications into daemons.  It requires CLI and PCNTL support built into PHP. * * @package     Joomla.Platform * @subpackage  Application * @see         http://www.php.net/manual/en/book.pcntl.php * @see         http://php.net/manual/en/features.commandline.php * @since       11.1 */class JApplicationDaemon extends JApplicationCli{	/**	 * @var    array  The available POSIX signals to be caught by default.	 * @see    http://php.net/manual/pcntl.constants.php	 * @since  11.1	 */	protected static $signals = array(		'SIGHUP',		'SIGINT',		'SIGQUIT',		'SIGILL',		'SIGTRAP',		'SIGABRT',		'SIGIOT',		'SIGBUS',		'SIGFPE',		'SIGUSR1',		'SIGSEGV',		'SIGUSR2',		'SIGPIPE',		'SIGALRM',		'SIGTERM',		'SIGSTKFLT',		'SIGCLD',		'SIGCHLD',		'SIGCONT',		'SIGTSTP',		'SIGTTIN',		'SIGTTOU',		'SIGURG',		'SIGXCPU',		'SIGXFSZ',		'SIGVTALRM',		'SIGPROF',		'SIGWINCH',		'SIGPOLL',		'SIGIO',		'SIGPWR',		'SIGSYS',		'SIGBABY',		'SIG_BLOCK',		'SIG_UNBLOCK',		'SIG_SETMASK'	);	/**	 * @var    boolean  True if the daemon is in the process of exiting.	 * @since  11.1	 */	protected $exiting = false;	/**	 * @var    integer  The parent process id.	 * @since  12.1	 */	protected $parentId = 0;	/**	 * @var    integer  The process id of the daemon.	 * @since  11.1	 */	protected $processId = 0;	/**	 * @var    boolean  True if the daemon is currently running.	 * @since  11.1	 */	protected $running = false;	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		// Verify that the process control extension for PHP is available.		// @codeCoverageIgnoreStart		if (!defined('SIGHUP'))		{			JLog::add('The PCNTL extension for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The PCNTL extension for PHP is not available.');		}		// Verify that POSIX support for PHP is available.		if (!function_exists('posix_getpid'))		{			JLog::add('The POSIX extension for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The POSIX extension for PHP is not available.');		}		// @codeCoverageIgnoreEnd		// Call the parent constructor.		parent::__construct($input, $config, $dispatcher);		// Set some system limits.		@set_time_limit($this->config->get('max_execution_time', 0));		if ($this->config->get('max_memory_limit') !== null)		{			ini_set('memory_limit', $this->config->get('max_memory_limit', '256M'));		}		// Flush content immediately.		ob_implicit_flush();	}	/**	 * Method to handle POSIX signals.	 *	 * @param   integer  $signal  The received POSIX signal.	 *	 * @return  void	 *	 * @since   11.1	 * @see     pcntl_signal()	 * @throws  RuntimeException	 */	public static function signal($signal)	{		// Log all signals sent to the daemon.		JLog::add('Received signal: ' . $signal, JLog::DEBUG);		// Let's make sure we have an application instance.		if (!is_subclass_of(static::$instance, 'JApplicationDaemon'))		{			JLog::add('Cannot find the application instance.', JLog::EMERGENCY);			throw new RuntimeException('Cannot find the application instance.');		}		// Fire the onReceiveSignal event.		static::$instance->triggerEvent('onReceiveSignal', array($signal));		switch ($signal)		{			case SIGINT:			case SIGTERM:				// Handle shutdown tasks				if (static::$instance->running && static::$instance->isActive())				{					static::$instance->shutdown();				}				else				{					static::$instance->close();				}				break;			case SIGHUP:				// Handle restart tasks				if (static::$instance->running && static::$instance->isActive())				{					static::$instance->shutdown(true);				}				else				{					static::$instance->close();				}				break;			case SIGCHLD:				// A child process has died				while (static::$instance->pcntlWait($signal, WNOHANG || WUNTRACED) > 0)				{					usleep(1000);				}				break;			case SIGCLD:				while (static::$instance->pcntlWait($signal, WNOHANG) > 0)				{					$signal = static::$instance->pcntlChildExitStatus($signal);				}				break;			default:				break;		}	}	/**	 * Check to see if the daemon is active.  This does not assume that $this daemon is active, but	 * only if an instance of the application is active as a daemon.	 *	 * @return  boolean  True if daemon is active.	 *	 * @since   11.1	 */	public function isActive()	{		// Get the process id file location for the application.		$pidFile = $this->config->get('application_pid_file');		// If the process id file doesn't exist then the daemon is obviously not running.		if (!is_file($pidFile))		{			return false;		}		// Read the contents of the process id file as an integer.		$fp = fopen($pidFile, 'r');		$pid = fread($fp, filesize($pidFile));		$pid = (int) $pid;		fclose($fp);		// Check to make sure that the process id exists as a positive integer.		if (!$pid)		{			return false;		}		// Check to make sure the process is active by pinging it and ensure it responds.		if (!posix_kill($pid, 0))		{			// No response so remove the process id file and log the situation.			@ unlink($pidFile);			JLog::add('The process found based on PID file was unresponsive.', JLog::WARNING);			return false;		}		return true;	}	/**	 * Load an object or array into the application configuration object.	 *	 * @param   mixed  $data  Either an array or object to be loaded into the configuration object.	 *	 * @return  JCli  Instance of $this to allow chaining.	 *	 * @since   11.1	 */	public function loadConfiguration($data)	{		// Execute the parent load method.		parent::loadConfiguration($data);		/*		 * Setup some application metadata options.  This is useful if we ever want to write out startup scripts		 * or just have some sort of information available to share about things.		 */		// The application author name.  This string is used in generating startup scripts and has		// a maximum of 50 characters.		$tmp = (string) $this->config->get('author_name', 'Joomla Platform');		$this->config->set('author_name', (strlen($tmp) > 50) ? substr($tmp, 0, 50) : $tmp);		// The application author email.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('author_email', 'admin@joomla.org');		$this->config->set('author_email', filter_var($tmp, FILTER_VALIDATE_EMAIL));		// The application name.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('application_name', 'JApplicationDaemon');		$this->config->set('application_name', (string) preg_replace('/[^A-Z0-9_-]/i', '', $tmp));		// The application description.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('application_description', 'A generic Joomla Platform application.');		$this->config->set('application_description', filter_var($tmp, FILTER_SANITIZE_STRING));		/*		 * Setup the application path options.  This defines the default executable name, executable directory,		 * and also the path to the daemon process id file.		 */		// The application executable daemon.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('application_executable', basename($this->input->executable));		$this->config->set('application_executable', $tmp);		// The home directory of the daemon.		$tmp = (string) $this->config->get('application_directory', dirname($this->input->executable));		$this->config->set('application_directory', $tmp);		// The pid file location.  This defaults to a path inside the /tmp directory.		$name = $this->config->get('application_name');		$tmp = (string) $this->config->get('application_pid_file', strtolower('/tmp/' . $name . '/' . $name . '.pid'));		$this->config->set('application_pid_file', $tmp);		/*		 * Setup the application identity options.  It is important to remember if the default of 0 is set for		 * either UID or GID then changing that setting will not be attempted as there is no real way to "change"		 * the identity of a process from some user to root.		 */		// The user id under which to run the daemon.		$tmp = (int) $this->config->get('application_uid', 0);		$options = array('options' => array('min_range' => 0, 'max_range' => 65000));		$this->config->set('application_uid', filter_var($tmp, FILTER_VALIDATE_INT, $options));		// The group id under which to run the daemon.		$tmp = (int) $this->config->get('application_gid', 0);		$options = array('options' => array('min_range' => 0, 'max_range' => 65000));		$this->config->set('application_gid', filter_var($tmp, FILTER_VALIDATE_INT, $options));		// Option to kill the daemon if it cannot switch to the chosen identity.		$tmp = (bool) $this->config->get('application_require_identity', 1);		$this->config->set('application_require_identity', $tmp);		/*		 * Setup the application runtime options.  By default our execution time limit is infinite obviously		 * because a daemon should be constantly running unless told otherwise.  The default limit for memory		 * usage is 128M, which admittedly is a little high, but remember it is a "limit" and PHP's memory		 * management leaves a bit to be desired :-)		 */		// The maximum execution time of the application in seconds.  Zero is infinite.		$tmp = $this->config->get('max_execution_time');		if ($tmp !== null)		{			$this->config->set('max_execution_time', (int) $tmp);		}		// The maximum amount of memory the application can use.		$tmp = $this->config->get('max_memory_limit', '256M');		if ($tmp !== null)		{			$this->config->set('max_memory_limit', (string) $tmp);		}		return $this;	}	/**	 * Execute the daemon.	 *	 * @return  void	 *	 * @since   11.1	 */	public function execute()	{		// Trigger the onBeforeExecute event.		$this->triggerEvent('onBeforeExecute');		// Enable basic garbage collection.		gc_enable();		JLog::add('Starting ' . $this->name, JLog::INFO);		// Set off the process for becoming a daemon.		if ($this->daemonize())		{			// Declare ticks to start signal monitoring. When you declare ticks, PCNTL will monitor			// incoming signals after each tick and call the relevant signal handler automatically.			declare (ticks = 1);			// Start the main execution loop.			while (true)			{				// Perform basic garbage collection.				$this->gc();				// Don't completely overload the CPU.				usleep(1000);				// Execute the main application logic.				$this->doExecute();			}		}		// We were not able to daemonize the application so log the failure and die gracefully.		else		{			JLog::add('Starting ' . $this->name . ' failed', JLog::INFO);		}		// Trigger the onAfterExecute event.		$this->triggerEvent('onAfterExecute');	}	/**	 * Restart daemon process.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function restart()	{		JLog::add('Stopping ' . $this->name, JLog::INFO);		$this->shutdown(true);	}	/**	 * Stop daemon process.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function stop()	{		JLog::add('Stopping ' . $this->name, JLog::INFO);		$this->shutdown();	}	/**	 * Method to change the identity of the daemon process and resources.	 *	 * @return  boolean  True if identity successfully changed	 *	 * @since   11.1	 * @see     posix_setuid()	 */	protected function changeIdentity()	{		// Get the group and user ids to set for the daemon.		$uid = (int) $this->config->get('application_uid', 0);		$gid = (int) $this->config->get('application_gid', 0);		// Get the application process id file path.		$file = $this->config->get('application_pid_file');		// Change the user id for the process id file if necessary.		if ($uid && (fileowner($file) != $uid) && (!@ chown($file, $uid)))		{			JLog::add('Unable to change user ownership of the process id file.', JLog::ERROR);			return false;		}		// Change the group id for the process id file if necessary.		if ($gid && (filegroup($file) != $gid) && (!@ chgrp($file, $gid)))		{			JLog::add('Unable to change group ownership of the process id file.', JLog::ERROR);			return false;		}		// Set the correct home directory for the process.		if ($uid && ($info = posix_getpwuid($uid)) && is_dir($info['dir']))		{			system('export HOME="' . $info['dir'] . '"');		}		// Change the user id for the process necessary.		if ($uid && (posix_getuid($file) != $uid) && (!@ posix_setuid($uid)))		{			JLog::add('Unable to change user ownership of the proccess.', JLog::ERROR);			return false;		}		// Change the group id for the process necessary.		if ($gid && (posix_getgid($file) != $gid) && (!@ posix_setgid($gid)))		{			JLog::add('Unable to change group ownership of the proccess.', JLog::ERROR);			return false;		}		// Get the user and group information based on uid and gid.		$user = posix_getpwuid($uid);		$group = posix_getgrgid($gid);		JLog::add('Changed daemon identity to ' . $user['name'] . ':' . $group['name'], JLog::INFO);		return true;	}	/**	 * Method to put the application into the background.	 *	 * @return  boolean	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function daemonize()	{		// Is there already an active daemon running?		if ($this->isActive())		{			JLog::add($this->name . ' daemon is still running. Exiting the application.', JLog::EMERGENCY);			return false;		}		// Reset Process Information		$this->safeMode = !!@ ini_get('safe_mode');		$this->processId = 0;		$this->running = false;		// Detach process!		try		{			// Check if we should run in the foreground.			if (!$this->input->get('f'))			{				// Detach from the terminal.				$this->detach();			}			else			{				// Setup running values.				$this->exiting = false;				$this->running = true;				// Set the process id.				$this->processId = (int) posix_getpid();				$this->parentId = $this->processId;			}		}		catch (RuntimeException $e)		{			JLog::add('Unable to fork.', JLog::EMERGENCY);			return false;		}		// Verify the process id is valid.		if ($this->processId < 1)		{			JLog::add('The process id is invalid; the fork failed.', JLog::EMERGENCY);			return false;		}		// Clear the umask.		@ umask(0);		// Write out the process id file for concurrency management.		if (!$this->writeProcessIdFile())		{			JLog::add('Unable to write the pid file at: ' . $this->config->get('application_pid_file'), JLog::EMERGENCY);			return false;		}		// Attempt to change the identity of user running the process.		if (!$this->changeIdentity())		{			// If the identity change was required then we need to return false.			if ($this->config->get('application_require_identity'))			{				JLog::add('Unable to change process owner.', JLog::CRITICAL);				return false;			}			else			{				JLog::add('Unable to change process owner.', JLog::WARNING);			}		}		// Setup the signal handlers for the daemon.		if (!$this->setupSignalHandlers())		{			return false;		}		// Change the current working directory to the application working directory.		@ chdir($this->config->get('application_directory'));		return true;	}	/**	 * This is truly where the magic happens.  This is where we fork the process and kill the parent	 * process, which is essentially what turns the application into a daemon.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	protected function detach()	{		JLog::add('Detaching the ' . $this->name . ' daemon.', JLog::DEBUG);		// Attempt to fork the process.		$pid = $this->fork();		// If the pid is positive then we successfully forked, and can close this application.		if ($pid)		{			// Add the log entry for debugging purposes and exit gracefully.			JLog::add('Ending ' . $this->name . ' parent process', JLog::DEBUG);			$this->close();		}		// We are in the forked child process.		else		{			// Setup some protected values.			$this->exiting = false;			$this->running = true;			// Set the parent to self.			$this->parentId = $this->processId;		}	}	/**	 * Method to fork the process.	 *	 * @return  integer  The child process id to the parent process, zero to the child process.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function fork()	{		// Attempt to fork the process.		$pid = $this->pcntlFork();		// If the fork failed, throw an exception.		if ($pid === -1)		{			throw new RuntimeException('The process could not be forked.');		}		// Update the process id for the child.		elseif ($pid === 0)		{			$this->processId = (int) posix_getpid();		}		// Log the fork in the parent.		else		{			// Log the fork.			JLog::add('Process forked ' . $pid, JLog::DEBUG);		}		// Trigger the onFork event.		$this->postFork();		return $pid;	}	/**	 * Method to perform basic garbage collection and memory management in the sense of clearing the	 * stat cache.  We will probably call this method pretty regularly in our main loop.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	protected function gc()	{		// Perform generic garbage collection.		gc_collect_cycles();		// Clear the stat cache so it doesn't blow up memory.		clearstatcache();	}	/**	 * Method to attach the JApplicationDaemon signal handler to the known signals.  Applications	 * can override these handlers by using the pcntl_signal() function and attaching a different	 * callback method.	 *	 * @return  boolean	 *	 * @since   11.1	 * @see     pcntl_signal()	 */	protected function setupSignalHandlers()	{		// We add the error suppression for the loop because on some platforms some constants are not defined.		foreach (self::$signals as $signal)		{			// Ignore signals that are not defined.			if (!defined($signal) || !is_int(constant($signal)) || (constant($signal) === 0))			{				// Define the signal to avoid notices.				JLog::add('Signal "' . $signal . '" not defined. Defining it as null.', JLog::DEBUG);				define($signal, null);				// Don't listen for signal.				continue;			}			// Attach the signal handler for the signal.			if (!$this->pcntlSignal(constant($signal), array('JApplicationDaemon', 'signal')))			{				JLog::add(sprintf('Unable to reroute signal handler: %s', $signal), JLog::EMERGENCY);				return false;			}		}		return true;	}	/**	 * Method to shut down the daemon and optionally restart it.	 *	 * @param   boolean  $restart  True to restart the daemon on exit.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function shutdown($restart = false)	{		// If we are already exiting, chill.		if ($this->exiting)		{			return;		}		// If not, now we are.		else		{			$this->exiting = true;		}		// If we aren't already daemonized then just kill the application.		if (!$this->running && !$this->isActive())		{			JLog::add('Process was not daemonized yet, just halting current process', JLog::INFO);			$this->close();		}		// Only read the pid for the parent file.		if ($this->parentId == $this->processId)		{			// Read the contents of the process id file as an integer.			$fp = fopen($this->config->get('application_pid_file'), 'r');			$pid = fread($fp, filesize($this->config->get('application_pid_file')));			$pid = (int) $pid;			fclose($fp);			// Remove the process id file.			@ unlink($this->config->get('application_pid_file'));			// If we are supposed to restart the daemon we need to execute the same command.			if ($restart)			{				$this->close(exec(implode(' ', $GLOBALS['argv']) . ' > /dev/null &'));			}			// If we are not supposed to restart the daemon let's just kill -9.			else			{				passthru('kill -9 ' . $pid);				$this->close();			}		}	}	/**	 * Method to write the process id file out to disk.	 *	 * @return  boolean	 *	 * @since   11.1	 */	protected function writeProcessIdFile()	{		// Verify the process id is valid.		if ($this->processId < 1)		{			JLog::add('The process id is invalid.', JLog::EMERGENCY);			return false;		}		// Get the application process id file path.		$file = $this->config->get('application_pid_file');		if (empty($file))		{			JLog::add('The process id file path is empty.', JLog::ERROR);			return false;		}		// Make sure that the folder where we are writing the process id file exists.		$folder = dirname($file);		if (!is_dir($folder) && !JFolder::create($folder))		{			JLog::add('Unable to create directory: ' . $folder, JLog::ERROR);			return false;		}		// Write the process id file out to disk.		if (!file_put_contents($file, $this->processId))		{			JLog::add('Unable to write proccess id file: ' . $file, JLog::ERROR);			return false;		}		// Make sure the permissions for the proccess id file are accurate.		if (!chmod($file, 0644))		{			JLog::add('Unable to adjust permissions for the proccess id file: ' . $file, JLog::ERROR);			return false;		}		return true;	}	/**	 * Method to handle post-fork triggering of the onFork event.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function postFork()	{		// Trigger the onFork event.		$this->triggerEvent('onFork');	}	/**	 * Method to return the exit code of a terminated child process.	 *	 * @param   integer  $status  The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().	 *	 * @return  integer  The child process exit code.	 *	 * @codeCoverageIgnore	 * @see     pcntl_wexitstatus()	 * @since   11.3	 */	protected function pcntlChildExitStatus($status)	{		return pcntl_wexitstatus($status);	}	/**	 * Method to return the exit code of a terminated child process.	 *	 * @return  integer  On success, the PID of the child process is returned in the parent's thread	 *                   of execution, and a 0 is returned in the child's thread of execution. On	 *                   failure, a -1 will be returned in the parent's context, no child process	 *                   will be created, and a PHP error is raised.	 *	 * @codeCoverageIgnore	 * @see     pcntl_fork()	 * @since   11.3	 */	protected function pcntlFork()	{		return pcntl_fork();	}	/**	 * Method to install a signal handler.	 *	 * @param   integer   $signal   The signal number.	 * @param   callback  $handler  The signal handler which may be the name of a user created function,	 *                              or method, or either of the two global constants SIG_IGN or SIG_DFL.	 * @param   boolean   $restart  Specifies whether system call restarting should be used when this	 *                              signal arrives.	 *	 * @return  boolean  True on success.	 *	 * @codeCoverageIgnore	 * @see     pcntl_signal()	 * @since   11.3	 */	protected function pcntlSignal($signal , $handler, $restart = true)	{		return pcntl_signal($signal, $handler, $restart);	}	/**	 * Method to wait on or return the status of a forked child.	 *	 * @param   integer  &$status  Status information.	 * @param   integer  $options  If wait3 is available on your system (mostly BSD-style systems),	 *                             you can provide the optional options parameter.	 *	 * @return  integer  The process ID of the child which exited, -1 on error or zero if WNOHANG	 *                   was provided as an option (on wait3-available systems) and no child was available.	 *	 * @codeCoverageIgnore	 * @see     pcntl_wait()	 * @since   11.3	 */	protected function pcntlWait(&$status, $options = 0)	{		return pcntl_wait($status, $options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_cache')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Cache');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * String Controller * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JStringController{	/**	 * Defines a variable as an array	 *	 * @return  array	 *	 * @since   11.1	 */	public function _getArray()	{		static $strings = array();		return $strings;	}	/**	 * Create a reference	 *	 * @param   string  $reference  The key	 * @param   string  &$string    The value	 *	 * @return  void	 *	 * @since   11.1	 */	public function createRef($reference, &$string)	{		$ref = &self::_getArray();		$ref[$reference] = & $string;	}	/**	 * Get reference	 *	 * @param   string  $reference  The key for the reference.	 *	 * @return  mixed  False if not set, reference if it it exists	 *	 * @since   11.1	 */	public function getRef($reference)	{		$ref = &self::_getArray();		if (isset($ref[$reference]))		{			return $ref[$reference];		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Gists class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubGists extends JGithubObject{	/**	 * Method to create a gist.	 *	 * @param   mixed    $files        Either an array of file paths or a single file path as a string.	 * @param   boolean  $public       True if the gist should be public.	 * @param   string   $description  The optional description of the gist.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($files, $public = false, $description = null)	{		// Build the request path.		$path = '/gists';		// Build the request data.		$data = json_encode(			array(				'files' => $this->buildFileData((array) $files),				'public' => (bool) $public,				'description' => $description			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on a gist.	 *	 * @param   integer  $gistId  The gist number.	 * @param   string   $body    The comment body text.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createComment($gistId, $body)	{		// Build the request path.		$path = '/gists/' . (int) $gistId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a gist.	 *	 * @param   integer  $gistId  The gist number.	 *	 * @return  void	 *	 * @since   11.3	 */	public function delete($gistId)	{		// Build the request path.		$path = '/gists/' . (int) $gistId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to delete a comment on a gist.	 *	 * @param   integer  $commentId  The id of the comment to delete.	 *	 * @return  void	 *	 * @since   11.3	 */	public function deleteComment($commentId)	{		// Build the request path.		$path = '/gists/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to update a gist.	 *	 * @param   integer  $gistId       The gist number.	 * @param   mixed    $files        Either an array of file paths or a single file path as a string.	 * @param   boolean  $public       True if the gist should be public.	 * @param   string   $description  The description of the gist.	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($gistId, $files = null, $public = null, $description = null)	{		// Build the request path.		$path = '/gists/' . (int) $gistId;		// Craete the data object.		$data = new stdClass;		// If a description is set add it to the data object.		if (isset($description))		{			$data->description = $description;		}		// If the public flag is set add it to the data object.		if (isset($public))		{			$data->public = $public;		}		// If a state is set add it to the data object.		if (isset($files))		{			$data->files = $this->buildFileData((array) $files);		}		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a comment on a gist.	 *	 * @param   integer  $commentId  The id of the comment to update.	 * @param   string   $body       The new body text for the comment.	 *	 * @return  object	 *	 * @since   11.3	 */	public function editComment($commentId, $body)	{		// Build the request path.		$path = '/gists/comments/' . (int) $commentId;		// Build the request data.		$data = json_encode(			array(				'body' => $body			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to fork a gist.	 *	 * @param   integer  $gistId  The gist number.	 *	 * @return  object	 *	 * @since   11.3	 */	public function fork($gistId)	{		// Build the request path.		$path = '/gists/' . (int) $gistId . '/fork';		// Send the request.		// TODO: Verify change		$response = $this->client->post($this->fetchUrl($path), '');		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single gist.	 *	 * @param   integer  $gistId  The gist number.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($gistId)	{		// Build the request path.		$path = '/gists/' . (int) $gistId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific comment on a gist.	 *	 * @param   integer  $commentId  The comment id to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function getComment($commentId)	{		// Build the request path.		$path = '/gists/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of comments on a gist.	 *	 * @param   integer  $gistId  The gist number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getComments($gistId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/gists/' . (int) $gistId . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list gists.  If a user is authenticated it will return the user's gists, otherwise	 * it will return all public gists.	 *	 * @param   integer  $page   The page number from which to get items.	 * @param   integer  $limit  The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($page = 0, $limit = 0)	{		// Build the request path.		$path = '/gists';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of gists belonging to a given user.	 *	 * @param   string   $user   The name of the GitHub user from which to list gists.	 * @param   integer  $page   The page number from which to get items.	 * @param   integer  $limit  The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getListByUser($user, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/users/' . $user . '/gists';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of all public gists.	 *	 * @param   integer  $page   The page number from which to get items.	 * @param   integer  $limit  The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getListPublic($page = 0, $limit = 0)	{		// Build the request path.		$path = '/gists/public';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of the authenticated users' starred gists.	 *	 * @param   integer  $page   The page number from which to get items.	 * @param   integer  $limit  The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getListStarred($page = 0, $limit = 0)	{		// Build the request path.		$path = '/gists/starred';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to check if a gist has been starred.	 *	 * @param   integer  $gistId  The gist number.	 *	 * @return  boolean  True if the gist is starred.	 *	 * @since   11.3	 */	public function isStarred($gistId)	{		// Build the request path.		$path = '/gists/' . (int) $gistId . '/star';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code == 204)		{			return true;		}		elseif ($response->code == 404)		{			return false;		}		else		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to star a gist.	 *	 * @param   integer  $gistId  The gist number.	 *	 * @return  void	 *	 * @since   11.3	 */	public function star($gistId)	{		// Build the request path.		$path = '/gists/' . (int) $gistId . '/star';		// Send the request.		$response = $this->client->put($this->fetchUrl($path), '');		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to star a gist.	 *	 * @param   integer  $gistId  The gist number.	 *	 * @return  void	 *	 * @since   11.3	 */	public function unstar($gistId)	{		// Build the request path.		$path = '/gists/' . (int) $gistId . '/star';		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to fetch a data array for transmitting to the GitHub API for a list of files based on	 * an input array of file paths or filename and content pairs.	 *	 * @param   array  $files  The list of file paths or filenames and content.	 *	 * @return  array	 *	 * @since   11.3	 */	protected function buildFileData(array $files)	{		$data = array();		foreach ($files as $key => $file)		{			// If the key isn't numeric, then we are dealing with a file whose content has been supplied			if (!is_numeric($key))			{				$data[$key] = array('content' => $file);			}			// Otherwise, we have been given a path and we have to load the content			// Verify that the each file exists.			elseif (!file_exists($file))			{				throw new InvalidArgumentException('The file ' . $file . ' does not exist.');			}			else			{				$data[basename($file)] = array('content' => file_get_contents($file));			}		}		return $data;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Client * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** Error Codes: * - 30 : Unable to connect to host * - 31 : Not connected * - 32 : Unable to send command to server * - 33 : Bad username * - 34 : Bad password * - 35 : Bad response * - 36 : Passive mode failed * - 37 : Data transfer error * - 38 : Local filesystem error */if (!defined('CRLF')){	define('CRLF', "\r\n");}if (!defined("FTP_AUTOASCII")){	define("FTP_AUTOASCII", -1);}if (!defined("FTP_BINARY")){	define("FTP_BINARY", 1);}if (!defined("FTP_ASCII")){	define("FTP_ASCII", 0);}if (!defined('FTP_NATIVE')){	define('FTP_NATIVE', (function_exists('ftp_connect')) ? 1 : 0);}/** * FTP client class * * @package     Joomla.Platform * @subpackage  Client * @since       12.1 */class JClientFtp{	/**	 * @var    resource  Socket resource	 * @since  12.1	 */	private $_conn = null;	/**	 * @var    resource  Data port connection resource	 * @since  12.1	 */	private $_dataconn = null;	/**	 * @var    array  Passive connection information	 * @since  12.1	 */	private $_pasv = null;	/**	 * @var    string  Response Message	 * @since  12.1	 */	private $_response = null;	/**	 * @var    integer  Timeout limit	 * @since  12.1	 */	private $_timeout = 15;	/**	 * @var    integer  Transfer Type	 * @since  12.1	 */	private $_type = null;	/**	 * @var    array  Array to hold ascii format file extensions	 * @since   12.1	 */	private $_autoAscii = array(		"asp",		"bat",		"c",		"cpp",		"csv",		"h",		"htm",		"html",		"shtml",		"ini",		"inc",		"log",		"php",		"php3",		"pl",		"perl",		"sh",		"sql",		"txt",		"xhtml",		"xml");	/**	 * Array to hold native line ending characters	 *	 * @var    array	 * @since  12.1	 */	private $_lineEndings = array('UNIX' => "\n", 'WIN' => "\r\n");	/**	 * @var    array  JClientFtp instances container.	 * @since  12.1	 */	protected static $instances = array();	/**	 * JClientFtp object constructor	 *	 * @param   array  $options  Associative array of options to set	 *	 * @since   12.1	 */	public function __construct(array $options = array())	{		// If default transfer type is not set, set it to autoascii detect		if (!isset($options['type']))		{			$options['type'] = FTP_BINARY;		}		$this->setOptions($options);		if (FTP_NATIVE)		{			// Import the generic buffer stream handler			jimport('joomla.utilities.buffer');			// Autoloading fails for JBuffer as the class is used as a stream handler			JLoader::load('JBuffer');		}	}	/**	 * JClientFtp object destructor	 *	 * Closes an existing connection, if we have one	 *	 * @since   12.1	 */	public function __destruct()	{		if (is_resource($this->_conn))		{			$this->quit();		}	}	/**	 * Returns the global FTP connector object, only creating it	 * if it doesn't already exist.	 *	 * You may optionally specify a username and password in the parameters. If you do so,	 * you may not login() again with different credentials using the same object.	 * If you do not use this option, you must quit() the current connection when you	 * are done, to free it for use by others.	 *	 * @param   string  $host     Host to connect to	 * @param   string  $port     Port to connect to	 * @param   array   $options  Array with any of these options: type=>[FTP_AUTOASCII|FTP_ASCII|FTP_BINARY], timeout=>(int)	 * @param   string  $user     Username to use for a connection	 * @param   string  $pass     Password to use for a connection	 *	 * @return  JClientFtp        The FTP Client object.	 *	 * @since   12.1	 */	public static function getInstance($host = '127.0.0.1', $port = '21', array $options = array(), $user = null, $pass = null)	{		$signature = $user . ':' . $pass . '@' . $host . ":" . $port;		// Create a new instance, or set the options of an existing one		if (!isset(self::$instances[$signature]) || !is_object(self::$instances[$signature]))		{			self::$instances[$signature] = new static($options);		}		else		{			self::$instances[$signature]->setOptions($options);		}		// Connect to the server, and login, if requested		if (!self::$instances[$signature]->isConnected())		{			$return = self::$instances[$signature]->connect($host, $port);			if ($return && $user !== null && $pass !== null)			{				self::$instances[$signature]->login($user, $pass);			}		}		return self::$instances[$signature];	}	/**	 * Set client options	 *	 * @param   array  $options  Associative array of options to set	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function setOptions(array $options)	{		if (isset($options['type']))		{			$this->_type = $options['type'];		}		if (isset($options['timeout']))		{			$this->_timeout = $options['timeout'];		}		return true;	}	/**	 * Method to connect to a FTP server	 *	 * @param   string  $host  Host to connect to [Default: 127.0.0.1]	 * @param   string  $port  Port to connect on [Default: port 21]	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function connect($host = '127.0.0.1', $port = 21)	{		$errno = null;		$err = null;		// If already connected, return		if (is_resource($this->_conn))		{			return true;		}		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			$this->_conn = @ftp_connect($host, $port, $this->_timeout);			if ($this->_conn === false)			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_NO_CONNECT', $host, $port), JLog::WARNING, 'jerror');				return false;			}			// Set the timeout for this connection			ftp_set_option($this->_conn, FTP_TIMEOUT_SEC, $this->_timeout);			return true;		}		// Connect to the FTP server.		$this->_conn = @ fsockopen($host, $port, $errno, $err, $this->_timeout);		if (!$this->_conn)		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_NO_CONNECT_SOCKET', $host, $port, $errno, $err), JLog::WARNING, 'jerror');			return false;		}		// Set the timeout for this connection		socket_set_timeout($this->_conn, $this->_timeout, 0);		// Check for welcome response code		if (!$this->_verifyResponse(220))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to determine if the object is connected to an FTP server	 *	 * @return  boolean  True if connected	 *	 * @since   12.1	 */	public function isConnected()	{		return is_resource($this->_conn);	}	/**	 * Method to login to a server once connected	 *	 * @param   string  $user  Username to login to the server	 * @param   string  $pass  Password to login to the server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function login($user = 'anonymous', $pass = 'jftp@joomla.org')	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_login($this->_conn, $user, $pass) === false)			{				JLog::add('JFTP::login: Unable to login', JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send the username		if (!$this->_putCmd('USER ' . $user, array(331, 503)))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_BAD_USERNAME', $this->_response, $user), JLog::WARNING, 'jerror');			return false;		}		// If we are already logged in, continue :)		if ($this->_responseCode == 503)		{			return true;		}		// Send the password		if (!$this->_putCmd('PASS ' . $pass, 230))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_BAD_PASSWORD', $this->_response, str_repeat('*', strlen($pass))), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to quit and close the connection	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function quit()	{		// If native FTP support is enabled lets use it...		if (FTP_NATIVE)		{			@ftp_close($this->_conn);			return true;		}		// Logout and close connection		@fwrite($this->_conn, "QUIT\r\n");		@fclose($this->_conn);		return true;	}	/**	 * Method to retrieve the current working directory on the FTP server	 *	 * @return  string   Current working directory	 *	 * @since   12.1	 */	public function pwd()	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (($ret = @ftp_pwd($this->_conn)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_PWD_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return $ret;		}		$match = array(null);		// Send print working directory command and verify success		if (!$this->_putCmd('PWD', 257))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PWD_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		// Match just the path		preg_match('/"[^"\r\n]*"/', $this->_response, $match);		// Return the cleaned path		return preg_replace("/\"/", "", $match[0]);	}	/**	 * Method to system string from the FTP server	 *	 * @return  string   System identifier string	 *	 * @since   12.1	 */	public function syst()	{		// If native FTP support is enabled lets use it...		if (FTP_NATIVE)		{			if (($ret = @ftp_systype($this->_conn)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_SYS_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}		}		else		{			// Send print working directory command and verify success			if (!$this->_putCmd('SYST', 215))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_SYST_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');				return false;			}			$ret = $this->_response;		}		// Match the system string to an OS		if (strpos(strtoupper($ret), 'MAC') !== false)		{			$ret = 'MAC';		}		elseif (strpos(strtoupper($ret), 'WIN') !== false)		{			$ret = 'WIN';		}		else		{			$ret = 'UNIX';		}		// Return the os type		return $ret;	}	/**	 * Method to change the current working directory on the FTP server	 *	 * @param   string  $path  Path to change into on the server	 *	 * @return  boolean True if successful	 *	 * @since   12.1	 */	public function chdir($path)	{		// If native FTP support is enabled lets use it...		if (FTP_NATIVE)		{			if (@ftp_chdir($this->_conn, $path) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CHDIR_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send change directory command and verify success		if (!$this->_putCmd('CWD ' . $path, 250))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CHDIR_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to reinitialise the server, ie. need to login again	 *	 * NOTE: This command not available on all servers	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function reinit()	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_site($this->_conn, 'REIN') === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_REINIT_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send reinitialise command to the server		if (!$this->_putCmd('REIN', 220))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_REINIT_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to rename a file/folder on the FTP server	 *	 * @param   string  $from  Path to change file/folder from	 * @param   string  $to    Path to change file/folder to	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function rename($from, $to)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_rename($this->_conn, $from, $to) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_RENAME_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send rename from command to the server		if (!$this->_putCmd('RNFR ' . $from, 350))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_RENAME_BAD_RESPONSE_FROM', $this->_response, $from), JLog::WARNING, 'jerror');			return false;		}		// Send rename to command to the server		if (!$this->_putCmd('RNTO ' . $to, 250))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_RENAME_BAD_RESPONSE_TO', $this->_response, $to), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to change mode for a path on the FTP server	 *	 * @param   string  $path  Path to change mode on	 * @param   mixed   $mode  Octal value to change mode to, e.g. '0777', 0777 or 511 (string or integer)	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function chmod($path, $mode)	{		// If no filename is given, we assume the current directory is the target		if ($path == '')		{			$path = '.';		}		// Convert the mode to a string		if (is_int($mode))		{			$mode = decoct($mode);		}		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_site($this->_conn, 'CHMOD ' . $mode . ' ' . $path) === false)			{				if (!IS_WIN)				{					JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CHMOD_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				}				return false;			}			return true;		}		// Send change mode command and verify success [must convert mode from octal]		if (!$this->_putCmd('SITE CHMOD ' . $mode . ' ' . $path, array(200, 250)))		{			if (!IS_WIN)			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CHMOD_BAD_RESPONSE', $this->_response, $path, $mode), JLog::WARNING, 'jerror');			}			return false;		}		return true;	}	/**	 * Method to delete a path [file/folder] on the FTP server	 *	 * @param   string  $path  Path to delete	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function delete($path)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_delete($this->_conn, $path) === false)			{				if (@ftp_rmdir($this->_conn, $path) === false)				{					JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_DELETE_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');					return false;				}			}			return true;		}		// Send delete file command and if that doesn't work, try to remove a directory		if (!$this->_putCmd('DELE ' . $path, 250))		{			if (!$this->_putCmd('RMD ' . $path, 250))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_DELETE_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');				return false;			}		}		return true;	}	/**	 * Method to create a directory on the FTP server	 *	 * @param   string  $path  Directory to create	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function mkdir($path)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_mkdir($this->_conn, $path) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_MKDIR_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send change directory command and verify success		if (!$this->_putCmd('MKD ' . $path, 257))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_MKDIR_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to restart data transfer at a given byte	 *	 * @param   integer  $point  Byte to restart transfer at	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function restart($point)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_site($this->_conn, 'REST ' . $point) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_RESTART_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send restart command and verify success		if (!$this->_putCmd('REST ' . $point, 350))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_RESTART_BAD_RESPONSE', $this->_response, $point), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to create an empty file on the FTP server	 *	 * @param   string  $path  Path local file to store on the FTP server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function create($path)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			$buffer = fopen('buffer://tmp', 'r');			if (@ftp_fput($this->_conn, $path, $buffer, FTP_ASCII) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_BUFFER'), JLog::WARNING, 'jerror');				fclose($buffer);				return false;			}			fclose($buffer);			return true;		}		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('STOR ' . $path, array(150, 125)))		{			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		// To create a zero byte upload close the data port connection		fclose($this->_dataconn);		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_TRANSFER', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to read a file from the FTP server's contents into a buffer	 *	 * @param   string  $remote   Path to remote file to read on the FTP server	 * @param   string  &$buffer  Buffer variable to read file contents into	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function read($remote, &$buffer)	{		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			$tmp = fopen('buffer://tmp', 'br+');			if (@ftp_fget($this->_conn, $tmp, $remote, $mode) === false)			{				fclose($tmp);				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_BUFFER'), JLog::WARNING, 'jerror');				return false;			}			// Read tmp buffer contents			rewind($tmp);			$buffer = '';			while (!feof($tmp))			{				$buffer .= fread($tmp, 8192);			}			fclose($tmp);			return true;		}		$this->_mode($mode);		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('RETR ' . $remote, array(150, 125)))		{			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		// Read data from data port connection and add to the buffer		$buffer = '';		while (!feof($this->_dataconn))		{			$buffer .= fread($this->_dataconn, 4096);		}		// Close the data port connection		fclose($this->_dataconn);		// Let's try to cleanup some line endings if it is ascii		if ($mode == FTP_ASCII)		{			$os = 'UNIX';			if (IS_WIN)			{				$os = 'WIN';			}			$buffer = preg_replace("/" . CRLF . "/", $this->_lineEndings[$os], $buffer);		}		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to get a file from the FTP server and save it to a local file	 *	 * @param   string  $local   Local path to save remote file to	 * @param   string  $remote  Path to remote file to get on the FTP server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function get($local, $remote)	{		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_GET_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (@ftp_get($this->_conn, $local, $remote, $mode) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_GET_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		$this->_mode($mode);		// Check to see if the local file can be opened for writing		$fp = fopen($local, "wb");		if (!$fp)		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_GET_WRITING_LOCAL', $local), JLog::WARNING, 'jerror');			return false;		}		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_GET_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('RETR ' . $remote, array(150, 125)))		{			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_GET_BAD_RESPONSE_RETR', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		// Read data from data port connection and add to the buffer		while (!feof($this->_dataconn))		{			$buffer = fread($this->_dataconn, 4096);			fwrite($fp, $buffer, 4096);		}		// Close the data port connection and file pointer		fclose($this->_dataconn);		fclose($fp);		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_GET_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to store a file to the FTP server	 *	 * @param   string  $local   Path to local file to store on the FTP server	 * @param   string  $remote  FTP path to file to create	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function store($local, $remote = null)	{		// If remote file is not given, use the filename of the local file in the current		// working directory.		if ($remote == null)		{			$remote = basename($local);		}		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (@ftp_put($this->_conn, $remote, $local, $mode) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		$this->_mode($mode);		// Check to see if the local file exists and if so open it for reading		if (@ file_exists($local))		{			$fp = fopen($local, "rb");			if (!$fp)			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_READING_LOCAL', $local), JLog::WARNING, 'jerror');				return false;			}		}		else		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_FIND_LOCAL', $local), JLog::WARNING, 'jerror');			return false;		}		// Start passive mode		if (!$this->_passive())		{			@ fclose($fp);			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		// Send store command to the FTP server		if (!$this->_putCmd('STOR ' . $remote, array(150, 125)))		{			@ fclose($fp);			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_BAD_RESPONSE_STOR', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		// Do actual file transfer, read local file and write to data port connection		while (!feof($fp))		{			$line = fread($fp, 4096);			do			{				if (($result = @ fwrite($this->_dataconn, $line)) === false)				{					JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_DATA_PORT'), JLog::WARNING, 'jerror');					return false;				}				$line = substr($line, $result);			}			while ($line != "");		}		fclose($fp);		fclose($this->_dataconn);		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to write a string to the FTP server	 *	 * @param   string  $remote  FTP path to file to write to	 * @param   string  $buffer  Contents to write to the FTP server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function write($remote, $buffer)	{		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			$tmp = fopen('buffer://tmp', 'br+');			fwrite($tmp, $buffer);			rewind($tmp);			if (@ftp_fput($this->_conn, $remote, $tmp, $mode) === false)			{				fclose($tmp);				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			fclose($tmp);			return true;		}		// First we need to set the transfer mode		$this->_mode($mode);		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		// Send store command to the FTP server		if (!$this->_putCmd('STOR ' . $remote, array(150, 125)))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_WRITE_BAD_RESPONSE_STOR', $this->_response, $remote), JLog::WARNING, 'jerror');			@ fclose($this->_dataconn);			return false;		}		// Write buffer to the data connection port		do		{			if (($result = @ fwrite($this->_dataconn, $buffer)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_DATA_PORT'), JLog::WARNING, 'jerror');				return false;			}			$buffer = substr($buffer, $result);		}		while ($buffer != "");		// Close the data connection port [Data transfer complete]		fclose($this->_dataconn);		// Verify that the server recieved the transfer		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_WRITE_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to list the filenames of the contents of a directory on the FTP server	 *	 * Note: Some servers also return folder names. However, to be sure to list folders on all	 * servers, you should use listDetails() instead if you also need to deal with folders	 *	 * @param   string  $path  Path local file to store on the FTP server	 *	 * @return  string  Directory listing	 *	 * @since   12.1	 */	public function listNames($path = null)	{		$data = null;		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (($list = @ftp_nlist($this->_conn, $path)) === false)			{				// Workaround for empty directories on some servers				if ($this->listDetails($path, 'files') === array())				{					return array();				}				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			$list = preg_replace('#^' . preg_quote($path, '#') . '[/\\\\]?#', '', $list);			if ($keys = array_merge(array_keys($list, '.'), array_keys($list, '..')))			{				foreach ($keys as $key)				{					unset($list[$key]);				}			}			return $list;		}		/*		 * If a path exists, prepend a space		 */		if ($path != null)		{			$path = ' ' . $path;		}		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('NLST' . $path, array(150, 125)))		{			@ fclose($this->_dataconn);			// Workaround for empty directories on some servers			if ($this->listDetails($path, 'files') === array())			{				return array();			}			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_BAD_RESPONSE_NLST', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		// Read in the file listing.		while (!feof($this->_dataconn))		{			$data .= fread($this->_dataconn, 4096);		}		fclose($this->_dataconn);		// Everything go okay?		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_BAD_RESPONSE_TRANSFER', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		$data = preg_split("/[" . CRLF . "]+/", $data, -1, PREG_SPLIT_NO_EMPTY);		$data = preg_replace('#^' . preg_quote(substr($path, 1), '#') . '[/\\\\]?#', '', $data);		if ($keys = array_merge(array_keys($data, '.'), array_keys($data, '..')))		{			foreach ($keys as $key)			{				unset($data[$key]);			}		}		return $data;	}	/**	 * Method to list the contents of a directory on the FTP server	 *	 * @param   string  $path  Path to the local file to be stored on the FTP server	 * @param   string  $type  Return type [raw|all|folders|files]	 *	 * @return  mixed  If $type is raw: string Directory listing, otherwise array of string with file-names	 *	 * @since   12.1	 */	public function listDetails($path = null, $type = 'all')	{		$dir_list = array();		$data = null;		$regs = null;		// TODO: Deal with recurse -- nightmare		// For now we will just set it to false		$recurse = false;		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (($contents = @ftp_rawlist($this->_conn, $path)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}		}		else		{			// Non Native mode			// Start passive mode			if (!$this->_passive())			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			// If a path exists, prepend a space			if ($path != null)			{				$path = ' ' . $path;			}			// Request the file listing			if (!$this->_putCmd(($recurse == true) ? 'LIST -R' : 'LIST' . $path, array(150, 125)))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_BAD_RESPONSE_LIST', $this->_response, $path), JLog::WARNING, 'jerror');				@ fclose($this->_dataconn);				return false;			}			// Read in the file listing.			while (!feof($this->_dataconn))			{				$data .= fread($this->_dataconn, 4096);			}			fclose($this->_dataconn);			// Everything go okay?			if (!$this->_verifyResponse(226))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_BAD_RESPONSE_TRANSFER', $this->_response, $path), JLog::WARNING, 'jerror');				return false;			}			$contents = explode(CRLF, $data);		}		// If only raw output is requested we are done		if ($type == 'raw')		{			return $data;		}		// If we received the listing of an empty directory, we are done as well		if (empty($contents[0]))		{			return $dir_list;		}		// If the server returned the number of results in the first response, let's dump it		if (strtolower(substr($contents[0], 0, 6)) == 'total ')		{			array_shift($contents);			if (!isset($contents[0]) || empty($contents[0]))			{				return $dir_list;			}		}		// Regular expressions for the directory listing parsing.		$regexps = array(			'UNIX' => '#([-dl][rwxstST-]+).* ([0-9]*) ([a-zA-Z0-9]+).* ([a-zA-Z0-9]+).* ([0-9]*)'				. ' ([a-zA-Z]+[0-9: ]*[0-9])[ ]+(([0-9]{1,2}:[0-9]{2})|[0-9]{4}) (.+)#',			'MAC' => '#([-dl][rwxstST-]+).* ?([0-9 ]*)?([a-zA-Z0-9]+).* ([a-zA-Z0-9]+).* ([0-9]*)'				. ' ([a-zA-Z]+[0-9: ]*[0-9])[ ]+(([0-9]{2}:[0-9]{2})|[0-9]{4}) (.+)#',			'WIN' => '#([0-9]{2})-([0-9]{2})-([0-9]{2}) +([0-9]{2}):([0-9]{2})(AM|PM) +([0-9]+|<DIR>) +(.+)#'		);		// Find out the format of the directory listing by matching one of the regexps		$osType = null;		foreach ($regexps as $k => $v)		{			if (@preg_match($v, $contents[0]))			{				$osType = $k;				$regexp = $v;				break;			}		}		if (!$osType)		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_UNRECOGNISED'), JLog::WARNING, 'jerror');			return false;		}		/*		 * Here is where it is going to get dirty....		 */		if ($osType == 'UNIX' || $osType == 'MAC')		{			foreach ($contents as $file)			{				$tmp_array = null;				if (@preg_match($regexp, $file, $regs))				{					$fType = (int) strpos("-dl", $regs[1]{0});					// $tmp_array['line'] = $regs[0];					$tmp_array['type'] = $fType;					$tmp_array['rights'] = $regs[1];					// $tmp_array['number'] = $regs[2];					$tmp_array['user'] = $regs[3];					$tmp_array['group'] = $regs[4];					$tmp_array['size'] = $regs[5];					$tmp_array['date'] = @date("m-d", strtotime($regs[6]));					$tmp_array['time'] = $regs[7];					$tmp_array['name'] = $regs[9];				}				// If we just want files, do not add a folder				if ($type == 'files' && $tmp_array['type'] == 1)				{					continue;				}				// If we just want folders, do not add a file				if ($type == 'folders' && $tmp_array['type'] == 0)				{					continue;				}				if (is_array($tmp_array) && $tmp_array['name'] != '.' && $tmp_array['name'] != '..')				{					$dir_list[] = $tmp_array;				}			}		}		else		{			foreach ($contents as $file)			{				$tmp_array = null;				if (@preg_match($regexp, $file, $regs))				{					$fType = (int) ($regs[7] == '<DIR>');					$timestamp = strtotime("$regs[3]-$regs[1]-$regs[2] $regs[4]:$regs[5]$regs[6]");					// $tmp_array['line'] = $regs[0];					$tmp_array['type'] = $fType;					$tmp_array['rights'] = '';					// $tmp_array['number'] = 0;					$tmp_array['user'] = '';					$tmp_array['group'] = '';					$tmp_array['size'] = (int) $regs[7];					$tmp_array['date'] = date('m-d', $timestamp);					$tmp_array['time'] = date('H:i', $timestamp);					$tmp_array['name'] = $regs[8];				}				// If we just want files, do not add a folder				if ($type == 'files' && $tmp_array['type'] == 1)				{					continue;				}				// If we just want folders, do not add a file				if ($type == 'folders' && $tmp_array['type'] == 0)				{					continue;				}				if (is_array($tmp_array) && $tmp_array['name'] != '.' && $tmp_array['name'] != '..')				{					$dir_list[] = $tmp_array;				}			}		}		return $dir_list;	}	/**	 * Send command to the FTP server and validate an expected response code	 *	 * @param   string  $cmd               Command to send to the FTP server	 * @param   mixed   $expectedResponse  Integer response code or array of integer response codes	 *	 * @return  boolean  True if command executed successfully	 *	 * @since   12.1	 */	protected function _putCmd($cmd, $expectedResponse)	{		// Make sure we have a connection to the server		if (!is_resource($this->_conn))		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_PUTCMD_UNCONNECTED'), JLog::WARNING, 'jerror');			return false;		}		// Send the command to the server		if (!fwrite($this->_conn, $cmd . "\r\n"))		{			JLog::add(JText::sprintf('DDD', JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PUTCMD_SEND', $cmd)), JLog::WARNING, 'jerror');		}		return $this->_verifyResponse($expectedResponse);	}	/**	 * Verify the response code from the server and log response if flag is set	 *	 * @param   mixed  $expected  Integer response code or array of integer response codes	 *	 * @return  boolean  True if response code from the server is expected	 *	 * @since   12.1	 */	protected function _verifyResponse($expected)	{		$parts = null;		// Wait for a response from the server, but timeout after the set time limit		$endTime = time() + $this->_timeout;		$this->_response = '';		do		{			$this->_response .= fgets($this->_conn, 4096);		}		while (!preg_match("/^([0-9]{3})(-(.*" . CRLF . ")+\\1)? [^" . CRLF . "]+" . CRLF . "$/", $this->_response, $parts) && time() < $endTime);		// Catch a timeout or bad response		if (!isset($parts[1]))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_VERIFYRESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		// Separate the code from the message		$this->_responseCode = $parts[1];		$this->_responseMsg = $parts[0];		// Did the server respond with the code we wanted?		if (is_array($expected))		{			if (in_array($this->_responseCode, $expected))			{				$retval = true;			}			else			{				$retval = false;			}		}		else		{			if ($this->_responseCode == $expected)			{				$retval = true;			}			else			{				$retval = false;			}		}		return $retval;	}	/**	 * Set server to passive mode and open a data port connection	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	protected function _passive()	{		$match = array();		$parts = array();		$errno = null;		$err = null;		// Make sure we have a connection to the server		if (!is_resource($this->_conn))		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_PASSIVE_CONNECT_PORT'), JLog::WARNING, 'jerror');			return false;		}		// Request a passive connection - this means, we'll talk to you, you don't talk to us.		@ fwrite($this->_conn, "PASV\r\n");		// Wait for a response from the server, but timeout after the set time limit		$endTime = time() + $this->_timeout;		$this->_response = '';		do		{			$this->_response .= fgets($this->_conn, 4096);		}		while (!preg_match("/^([0-9]{3})(-(.*" . CRLF . ")+\\1)? [^" . CRLF . "]+" . CRLF . "$/", $this->_response, $parts) && time() < $endTime);		// Catch a timeout or bad response		if (!isset($parts[1]))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		// Separate the code from the message		$this->_responseCode = $parts[1];		$this->_responseMsg = $parts[0];		// If it's not 227, we weren't given an IP and port, which means it failed.		if ($this->_responseCode != '227')		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_IP_OBTAIN', $this->_responseMsg), JLog::WARNING, 'jerror');			return false;		}		// Snatch the IP and port information, or die horribly trying...		if (preg_match('~\((\d+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+))\)~', $this->_responseMsg, $match) == 0)		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_IP_VALID', $this->_responseMsg), JLog::WARNING, 'jerror');			return false;		}		// This is pretty simple - store it for later use ;).		$this->_pasv = array('ip' => $match[1] . '.' . $match[2] . '.' . $match[3] . '.' . $match[4], 'port' => $match[5] * 256 + $match[6]);		// Connect, assuming we've got a connection.		$this->_dataconn = @fsockopen($this->_pasv['ip'], $this->_pasv['port'], $errno, $err, $this->_timeout);		if (!$this->_dataconn)		{			JLog::add(				JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_CONNECT', $this->_pasv['ip'], $this->_pasv['port'], $errno, $err),				JLog::WARNING,				'jerror'			);			return false;		}		// Set the timeout for this connection		socket_set_timeout($this->_conn, $this->_timeout, 0);		return true;	}	/**	 * Method to find out the correct transfer mode for a specific file	 *	 * @param   string  $fileName  Name of the file	 *	 * @return  integer Transfer-mode for this filetype [FTP_ASCII|FTP_BINARY]	 *	 * @since   12.1	 */	protected function _findMode($fileName)	{		if ($this->_type == FTP_AUTOASCII)		{			$dot = strrpos($fileName, '.') + 1;			$ext = substr($fileName, $dot);			if (in_array($ext, $this->_autoAscii))			{				$mode = FTP_ASCII;			}			else			{				$mode = FTP_BINARY;			}		}		elseif ($this->_type == FTP_ASCII)		{			$mode = FTP_ASCII;		}		else		{			$mode = FTP_BINARY;		}		return $mode;	}	/**	 * Set transfer mode	 *	 * @param   integer  $mode  Integer representation of data transfer mode [1:Binary|0:Ascii]	 * Defined constants can also be used [FTP_BINARY|FTP_ASCII]	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	protected function _mode($mode)	{		if ($mode == FTP_BINARY)		{			if (!$this->_putCmd("TYPE I", 200))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_MODE_BINARY', $this->_response), JLog::WARNING, 'jerror');				return false;			}		}		else		{			if (!$this->_putCmd("TYPE A", 200))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_MODE_ASCII', $this->_response), JLog::WARNING, 'jerror');				return false;			}		}		return true;	}}/** * Deprecated class placeholder. You should use JClientFtp instead. * * @package     Joomla.Platform * @subpackage  Client * @since       11.1 * @deprecated  12.3 */class JFTP extends JClientFtp{	/**	 * JFTP object constructor	 *	 * @param   array  $options  Associative array of options to set	 *	 * @since   11.1	 */	public function __construct($options)	{		JLog::add('JFTP is deprecated. Use JClientFtp instead.', JLog::WARNING, 'deprecated');		parent::__construct($options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="btn-toolbar">	<div class="btn-group">		<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('module.save');">		<?php echo JText::_('JSAVE');?></button>	</div>	<div class="btn-group">		<button type="button" class="btn" onclick="window.parent.SqueezeBox.close();">		<?php echo JText::_('JCANCEL');?></button>	</div>	<div class="clearfix"></div></div><?php$this->setLayout('edit');echo $this->loadTemplate();
<?php/** * @package     Joomla.Administrator * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if ($params->def('prepare_content', 1)){	JPluginHelper::importPlugin('content');	$module->content = JHtml::_('content.prepare', $module->content, '', 'mod_custom.content');}require JModuleHelper::getLayoutPath('mod_custom');
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit an language override * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesViewOverride extends JViewLegacy{	/**	 * The form to use for the view	 *	 * @var		object	 * @since	2.5	 */	protected $form;	/**	 * The item to edit	 *	 * @var		object	 * @since	2.5	 */	protected $item;	/**	 * The model state	 *	 * @var		object	 * @since	2.5	 */	protected $state;	/**	 * Displays the view	 *	 * @param   	string	$tpl	The name of the template file to parse	 *	 * @return  void	 *	 * @since		2.5	 */	public function display($tpl = null)	{		JHtml::_('stylesheet', 'overrider/overrider.css', array(), true);		JHtml::_('behavior.framework');		JHtml::_('script', 'overrider/overrider.js', false, true);		$this->form  = $this->get('Form');		$this->item  = $this->get('Item');		$this->state = $this->get('State');		// Check for errors		if (count($errors = $this->get('Errors')))		{			throw new Exception(implode("\n", $errors));		}		// Check whether the cache has to be refreshed		$cached_time = JFactory::getApplication()->getUserState('com_languages.overrides.cachedtime.'.$this->state->get('filter.client').'.'.$this->state->get('filter.language'), 0);		if (time() - $cached_time > 60 * 5)		{			$this->state->set('cache_expired', true);		}		// Add strings for translations in Javascript		JText::script('COM_LANGUAGES_VIEW_OVERRIDE_NO_RESULTS');		JText::script('COM_LANGUAGES_VIEW_OVERRIDE_REQUEST_ERROR');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Adds the page title and toolbar	 *	 * @return void	 *	 * @since	2.5	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_OVERRIDE_EDIT_TITLE'), 'langmanager');		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('override.apply');			JToolbarHelper::save('override.save');		}		// This component does not support Save as Copy		if ($canDo->get('core.edit') && $canDo->get('core.create'))		{			JToolbarHelper::save2new('override.save2new');		}		if (empty($this->item->key))		{			JToolbarHelper::cancel('override.cancel');		}		else		{			JToolbarHelper::cancel('override.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_OVERRIDES_EDIT');	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Install View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewInstallHtml extends JViewHtml{	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelSetup	 * @since   3.1	 */	protected $model;	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * The installation tasks to perform	 *	 * @var    array	 * @since  3.1	 */	protected $tasks = array();	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options = $this->model->getOptions();		/*		 * Prepare the tasks array		 * Note: The first character of the task *MUST* be capitalised or the application will not find the task		 */		$this->tasks[] = ($this->options['db_old'] == 'remove') ? 'Database_remove' : 'Database_backup';		$this->tasks[] = 'Database';		if ($this->options['sample_file'])		{			$this->tasks[] = 'Sample';		}		$this->tasks[] = 'Config';		if ($this->options['summary_email'])		{			$this->tasks[] = 'Email';		}		return parent::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache component helper. * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheHelper{	/**	 * Get a list of filter options for the application clients.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getClientOptions()	{		// Build the filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '0', JText::_('JSITE'));		$options[]	= JHtml::_('select.option', '1', JText::_('JADMINISTRATOR'));		return $options;	}	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_CHECKIN'),			'index.php?option=com_checkin',			$vName == 'com_checkin'		);		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_CLEAR_CACHE'),			'index.php?option=com_cache',			$vName == 'cache'		);		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_PURGE_EXPIRED_CACHE'),			'index.php?option=com_cache&view=purge',			$vName == 'purge'		);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Pathway * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to maintain a pathway. * * The user's navigated path within the application. * * @package     Joomla.Legacy * @subpackage  Pathway * @since       11.1 */class JPathway{	/**	 * @var    array  Array to hold the pathway item objects	 * @since  11.1	 */	protected $_pathway = array();	/**	 * @var    integer  Integer number of items in the pathway	 * @since  11.1	 */	protected $_count = 0;	/**	 * @var    array  JPathway instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor	 *	 * @param   array  $options  The class options.	 *	 * @since   11.1	 */	public function __construct($options = array())	{	}	/**	 * Returns a JPathway object	 *	 * @param   string  $client   The name of the client	 * @param   array   $options  An associative array of options	 *	 * @return  JPathway  A JPathway object.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($client, $options = array())	{		if (empty(self::$instances[$client]))		{			// Create a JPathway object			$classname = 'JPathway' . ucfirst($client);			if (!class_exists($classname))			{				JLog::add('Non-autoloadable JPathway subclasses are deprecated.', JLog::WARNING, 'deprecated');				// Load the pathway object				$info = JApplicationHelper::getClientInfo($client, true);				if (is_object($info))				{					$path = $info->path . '/includes/pathway.php';					if (file_exists($path))					{						include_once $path;					}				}			}			if (class_exists($classname))			{				self::$instances[$client] = new $classname($options);			}			else			{				throw new RuntimeException(JText::sprintf('JLIB_APPLICATION_ERROR_PATHWAY_LOAD', $client), 500);			}		}		return self::$instances[$client];	}	/**	 * Return the JPathWay items array	 *	 * @return  array  Array of pathway items	 *	 * @since   11.1	 */	public function getPathway()	{		$pw = $this->_pathway;		// Use array_values to reset the array keys numerically		return array_values($pw);	}	/**	 * Set the JPathway items array.	 *	 * @param   array  $pathway  An array of pathway objects.	 *	 * @return  array  The previous pathway data.	 *	 * @since   11.1	 */	public function setPathway($pathway)	{		$oldPathway = $this->_pathway;		// Set the new pathway.		$this->_pathway = array_values((array) $pathway);		return array_values($oldPathway);	}	/**	 * Create and return an array of the pathway names.	 *	 * @return  array  Array of names of pathway items	 *	 * @since   11.1	 */	public function getPathwayNames()	{		$names = array();		// Build the names array using just the names of each pathway item		foreach ($this->_pathway as $item)		{			$names[] = $item->name;		}		// Use array_values to reset the array keys numerically		return array_values($names);	}	/**	 * Create and add an item to the pathway.	 *	 * @param   string  $name  The name of the item.	 * @param   string  $link  The link to the item.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function addItem($name, $link = '')	{		$ret = false;		if ($this->_pathway[] = $this->_makeItem($name, $link))		{			$ret = true;			$this->_count++;		}		return $ret;	}	/**	 * Set item name.	 *	 * @param   integer  $id    The id of the item on which to set the name.	 * @param   string   $name  The name to set.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function setItemName($id, $name)	{		$ret = false;		if (isset($this->_pathway[$id]))		{			$this->_pathway[$id]->name = $name;			$ret = true;		}		return $ret;	}	/**	 * Create and return a new pathway object.	 *	 * @param   string  $name  Name of the item	 * @param   string  $link  Link to the item	 *	 * @return  JPathway  Pathway item object	 *	 * @since   11.1	 */	protected function _makeItem($name, $link)	{		$item = new stdClass;		$item->name = html_entity_decode($name, ENT_COMPAT, 'UTF-8');		$item->link = $link;		return $item;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL import driver. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseImporterMysql extends JDatabaseImporterMysqli{	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverMysql))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Sets the database connector to use for exporting structure and/or data from MySQL.	 *	 * @param   JDatabaseDriverMysql  $db  The database connector.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function setDbo(JDatabaseDriverMysql $db)	{		$this->db = $db;		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Data * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * An interface to define if an object is dumpable. * * @package     Joomla.Platform * @subpackage  Data * @since       12.3 */interface JDataDumpable{	/**	 * Dumps the object properties into a stdClass object, recursively if appropriate.	 *	 * @param   integer           $depth   The maximum depth of recursion.	 *                                     For example, a depth of 0 will return a stdClass with all the properties in native	 *                                     form. A depth of 1 will recurse into the first level of properties only.	 * @param   SplObjectStorage  $dumped  An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  stdClass  The data properties as a simple PHP stdClass object.	 *	 * @since   12.3	 */	public function dump($depth = 3, SplObjectStorage $dumped = null);}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleBoolean extends JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $regex = '^(?:[01]|true|false)$';	/**	 * The regular expression modifiers to use when testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $modifiers = 'i';}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><div class="btn-toolbar">	<div class="btn-group pull-right">		<a href="#" class="btn btn-primary" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>	</div></div><form action="index.php" method="post" id="languageForm" class="form-horizontal">	<div class="control-group">		<label for="jform_language" class="control-label"><?php echo JText::_('INSTL_SELECT_LANGUAGE_TITLE'); ?></label>		<div class="controls">			<?php echo $this->form->getInput('language'); ?>		</div>	</div>	<input type="hidden" name="task" value="setlanguage" />	<?php echo JHtml::_('form.token'); ?></form><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<h3><?php echo JText::_('INSTL_SITE'); ?></h3>	<hr class="hr-condensed" />	<div class="row-fluid">		<div class="span6">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_name'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_name'); ?>					<p class="help-block"><?php echo JText::_('INSTL_SITE_NAME_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_metadesc'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_metadesc'); ?>					<p class="help-block">						<?php echo JText::_('INSTL_SITE_METADESC_TITLE_LABEL'); ?>					</p>				</div>			</div>		</div>		<div class="span6">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_email'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_email'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_EMAIL_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_user'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_user'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_USER_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_password'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_password'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_PASSWORD_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_password2'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_password2'); ?>				</div>			</div>		</div>	</div>	<div class="row-fluid">		<div class="span12">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_offline'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_offline'); ?>					<p class="help-block">						<?php echo JText::_('INSTL_SITE_OFFLINE_TITLE_LABEL'); ?>					</p>				</div>			</div>		</div>	</div>	<input type="hidden" name="task" value="site" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="newsflash-horiz<?php echo $params->get('moduleclass_sfx'); ?>"><?php for ($i = 0, $n = count($list); $i < $n; $i ++) :	$item = $list[$i]; ?>	<li>	<?php require JModuleHelper::getLayoutPath('mod_articles_news', '_item');	if ($n > 1 && (($i < $n - 1) || $params->get('showLastSeparator'))) : ?>	<span class="article-separator">&#160;</span>	<?php endif; ?>	</li><?php endfor; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Item View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewItem extends JViewLegacy{	protected $form;	protected $item;	protected $modules;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->modules	= $this->get('Modules');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$input = JFactory::getApplication()->input;		$input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		$canDo		= MenusHelper::getActions($this->state->get('filter.parent_id'));		JToolbarHelper::title(JText::_($isNew ? 'COM_MENUS_VIEW_NEW_ITEM_TITLE' : 'COM_MENUS_VIEW_EDIT_ITEM_TITLE'), 'menu-add');		// If a new item, can save the item.  Allow users with edit permissions to apply changes to prevent returning to grid.		if ($isNew && $canDo->get('core.create'))		{			if ($canDo->get('core.edit'))			{				JToolbarHelper::apply('item.apply');			}			JToolbarHelper::save('item.save');		}		// If not checked out, can save the item.		if (!$isNew && !$checkedOut && $canDo->get('core.edit'))		{			JToolbarHelper::apply('item.apply');			JToolbarHelper::save('item.save');		}		// If the user can create new items, allow them to see Save & New		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('item.save2new');		}		// If an existing item, can save to a copy only if we have create rights.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('item.save2copy');		}		if ($isNew)		{			JToolbarHelper::cancel('item.cancel');		}		else		{			JToolbarHelper::cancel('item.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		// Get the help information for the menu item.		$lang = JFactory::getLanguage();		$help = $this->get('Help');		if ($lang->hasKey($help->url))		{			$debug = $lang->setDebug(false);			$url = JText::_($help->url);			$lang->setDebug($debug);		}		else		{			$url = $help->url;		}		JToolbarHelper::help($help->key, $help->local, $url);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * Joomla! Installation Application Defines */// Global definitions$parts = explode(DIRECTORY_SEPARATOR, JPATH_BASE);array_pop($parts);// Definesdefine('JPATH_ROOT',           implode(DIRECTORY_SEPARATOR, $parts));define('JPATH_SITE',           JPATH_ROOT);define('JPATH_CONFIGURATION',  JPATH_ROOT);define('JPATH_ADMINISTRATOR',  JPATH_ROOT . '/administrator');define('JPATH_LIBRARIES',      JPATH_ROOT . '/libraries');define('JPATH_PLUGINS',        JPATH_ROOT . '/plugins');define('JPATH_INSTALLATION',   JPATH_ROOT . '/installation');define('JPATH_THEMES',         JPATH_BASE);define('JPATH_CACHE',          JPATH_BASE . '/cache');define('JPATH_MANIFESTS',      JPATH_ADMINISTRATOR . '/manifests');
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die; ?><?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_PUBLISHING'), 'publishing-details'); ?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_('COM_CONTENT_FIELDSET_PUBLISHING'); ?></legend>		<ul class="adminformlist">			<li><?php echo $this->form->getLabel('created_user_id'); ?>			<?php echo $this->form->getInput('created_user_id'); ?></li>			<?php if ((int) $this->item->created_time) : ?>				<li><?php echo $this->form->getLabel('created_time'); ?>				<?php echo $this->form->getInput('created_time'); ?></li>			<?php endif; ?>			<?php if ($this->item->modified_user_id) : ?>				<li><?php echo $this->form->getLabel('modified_user_id'); ?>				<?php echo $this->form->getInput('modified_user_id'); ?></li>				<li><?php echo $this->form->getLabel('modified_time'); ?>				<?php echo $this->form->getInput('modified_time'); ?></li>			<?php endif; ?>		</ul>	</fieldset><?php $fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL';	echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_($label); ?></legend>	<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>		<?php endforeach; ?>		<?php if ($name == 'basic'):?>			<li><?php echo $this->form->getLabel('note'); ?>			<?php echo $this->form->getInput('note'); ?></li>		<?php endif;?>	</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Interface to handle display layout * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.0 */interface JLayout{	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @since   3.0	 */	public function escape($output);	/**	 * Method to render the layout.	 *	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 *	 * @return  string  The rendered layout.	 *	 * @since   3.0	 */	public function render($displayData);}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Component Controller * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable	= true;	// Huh? Why not just put that in the constructor?		$user		= JFactory::getUser();		// Set the default view name and format from the Request.		// Note we are using w_id to avoid collisions with the router and the return page.		// Frontend is a bit messier than the backend.		$id    = $this->input->getInt('w_id');		$vName = $this->input->get('view', 'categories');		$this->input->set('view', $vName);		if ($user->get('id') ||($this->input->getMethod() == 'POST' && $vName = 'categories'))		{			$cachable = false;		}		$safeurlparams = array(			'id'				=> 'INT',			'limit'				=> 'UINT',			'limitstart'		=> 'UINT',			'filter_order'		=> 'CMD',			'filter_order_Dir'	=> 'CMD',			'lang'				=> 'CMD'		);		// Check for edit form.		if ($vName == 'form' && !$this->checkEditId('com_weblinks.edit.weblink', $id))		{			// Somehow the person just went to the form - we don't allow that.			return JError::raiseError(403, JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));		}		return parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleNotequals extends JFormRule{	/**	 * Method to test if two values are not equal. To use this rule, the form	 * XML needs a validate attribute of equals and a field attribute	 * that is equal to the field to test against.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 * @throws  UnexpectedValueException	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$field = (string) $element['field'];		// Check that a validation field is set.		if (!$field)		{			throw new UnexpectedValueException(sprintf('$field empty in %s::test', get_class($this)));		}		if (is_null($form))		{			throw new InvalidArgumentException(sprintf('The value for $form must not be null in %s', get_class($this)));		}		if (is_null($input))		{			throw new InvalidArgumentException(sprintf('The value for $input must not be null in %s', get_class($this)));		}		// Test the two values against each other.		if ($value != $input->get($field))		{			return true;		}		return false;	}}
<?php/** * Squiz_Sniffs_WhiteSpace_CastSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: CastSpacingSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Squiz_Sniffs_WhiteSpace_CastSpacingSniff. * * Ensure cast statements dont contain whitespace. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_CastSpacingSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return PHP_CodeSniffer_Tokens::$castTokens;    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $content  = $tokens[$stackPtr]['content'];        $expected = str_replace(' ', '', $content);        $expected = str_replace("\t", '', $expected);        if ($content !== $expected) {            $error = 'Cast statements must not contain whitespace; expected "%s" but found "%s"';            $data  = array(                      $expected,                      $content,                     );            $phpcsFile->addError($error, $stackPtr, 'ContainsWhiteSpace', $data);        }    }//end process()}//end class?>
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the login functions only oncerequire_once __DIR__ . '/helper.php';$params->def('greeting', 1);$type	= ModLoginHelper::getType();$return	= ModLoginHelper::getReturnURL($params, $type);$user	= JFactory::getUser();$layout = $params->get('layout', 'default');// Logged users must load the logout sublayoutif (!$user->guest){	$layout .= '_logout';}require JModuleHelper::getLayoutPath('mod_login', $layout);
<?php/** * @package     Joomla.Libraries * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JMenu class. * * @package     Joomla.Libraries * @subpackage  Menu * @since       1.5 */class JMenuAdministrator extends JMenu{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');foreach ($fields as $field) :?><div class="control-group">	<div class="control-label">		<?php echo $field->label ?>	</div>	<div class="controls">		<?php echo $field->input; ?>	</div></div><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/helper.php';$buttons = ModQuickIconHelper::getButtons($params);require JModuleHelper::getLayoutPath('mod_quickicon', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_SYSTEM_INFORMATION'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="250">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;				</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_BUILT_ON'); ?></strong>				</td>				<td>					<?php echo $this->info['php'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_COLLATION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbcollation'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['phpversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEB_SERVER'); ?></strong>				</td>				<td>					<?php echo JHtml::_('system.server', $this->info['server']); ?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEBSERVER_TO_PHP_INTERFACE'); ?></strong>				</td>				<td>					<?php echo $this->info['sapi_name'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_JOOMLA_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['version'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PLATFORM_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['platform'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_USER_AGENT'); ?></strong>				</td>				<td>					<?php echo $this->info['useragent'];?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for creating HTML Grids * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlGrid{	/**	 * Display a boolean setting widget.	 *	 * @param   integer  $i        The row index.	 * @param   integer  $value    The value of the boolean field.	 * @param   string   $taskOn   Task to turn the boolean setting on.	 * @param   string   $taskOff  Task to turn the boolean setting off.	 *	 * @return  string   The boolean setting widget.	 *	 * @since    11.1	 */	public static function boolean($i, $value, $taskOn = null, $taskOff = null)	{		// Load the behavior.		self::behavior();		// Build the title.		$title = ($value) ? JText::_('JYES') : JText::_('JNO');		$title .= '::' . JText::_('JGLOBAL_CLICK_TO_TOGGLE_STATE');		// Build the <a> tag.		$bool = ($value) ? 'true' : 'false';		$task = ($value) ? $taskOff : $taskOn;		$toggle = (!$task) ? false : true;		if ($toggle)		{			$html = '<a class="grid_' . $bool . ' hasTip" title="' . $title . '" rel="{id:\'cb' . $i . '\', task:\'' . $task				. '\'}" href="#toggle"></a>';		}		else		{			$html = '<a class="grid_' . $bool . '"></a>';		}		return $html;	}	/**	 * Method to sort a column in a grid	 *	 * @param   string  $title          The link title	 * @param   string  $order          The order field for the column	 * @param   string  $direction      The current direction	 * @param   string  $selected       The selected ordering	 * @param   string  $task           An optional task override	 * @param   string  $new_direction  An optional direction for the new column	 * @param   string  $tip            An optional text shown as tooltip title instead of $title	 *	 * @return  string	 *	 * @since   11.1	 */	public static function sort($title, $order, $direction = 'asc', $selected = 0, $task = null, $new_direction = 'asc', $tip = '')	{		JHtml::_('behavior.tooltip');		$direction = strtolower($direction);		$icon = array('arrow-up-3', 'arrow-down-3');		$index = (int) ($direction == 'desc');		if ($order != $selected)		{			$direction = $new_direction;		}		else		{			$direction = ($direction == 'desc') ? 'asc' : 'desc';		}		$html = '<a href="#" onclick="Joomla.tableOrdering(\'' . $order . '\',\'' . $direction . '\',\'' . $task . '\');return false;"'			. ' class="hasTip" title="' . JText::_($tip ? $tip : $title) . '::' . JText::_('JGLOBAL_CLICK_TO_SORT_THIS_COLUMN') . '">';		$html .= JText::_($title);		if ($order == $selected)		{			$html .= ' <i class="icon-' . $icon[$index] . '"></i>';		}		$html .= '</a>';		return $html;	}	/**	 * Method to create a checkbox for a grid row.	 *	 * @param   integer  $rowNum      The row index	 * @param   integer  $recId       The record id	 * @param   boolean  $checkedOut  True if item is checke out	 * @param   string   $name        The name of the form element	 *	 * @return  mixed    String of html with a checkbox if item is not checked out, null if checked out.	 */	public static function id($rowNum, $recId, $checkedOut = false, $name = 'cid')	{		if ($checkedOut)		{			return '';		}		else		{			return '<input type="checkbox" id="cb' . $rowNum . '" name="' . $name . '[]" value="' . $recId				. '" onclick="Joomla.isChecked(this.checked);" title="' . JText::sprintf('JGRID_CHECKBOX_ROW_N', ($rowNum + 1)) . '" />';		}	}	/**	 * Displays a checked out icon.	 *	 * @param   object   &$row        A data object (must contain checkedout as a property).	 * @param   integer  $i           The index of the row.	 * @param   string   $identifier  The property name of the primary key or index of the row.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function checkedOut(&$row, $i, $identifier = 'id')	{		$user = JFactory::getUser();		$userid = $user->get('id');		$result = false;		if ($row instanceof JTable)		{			$result = $row->isCheckedOut($userid);		}		else		{			$result = false;		}		$checked = '';		if ($result)		{			$checked = self::_checkedOut($row);		}		else		{			if ($identifier == 'id')			{				$checked = JHtml::_('grid.id', $i, $row->$identifier);			}			else			{				$checked = JHtml::_('grid.id', $i, $row->$identifier, $result, $identifier);			}		}		return $checked;	}	/**	 * Method to create a clickable icon to change the state of an item	 *	 * @param   mixed    $value   Either the scalar value or an object (for backward compatibility, deprecated)	 * @param   integer  $i       The index	 * @param   string   $img1    Image for a positive or on value	 * @param   string   $img0    Image for the empty or off value	 * @param   string   $prefix  An optional prefix for the task	 *	 * @return  string	 *	 * @since   11.1	 */	public static function published($value, $i, $img1 = 'tick.png', $img0 = 'publish_x.png', $prefix = '')	{		if (is_object($value))		{			$value = $value->published;		}		$img = $value ? $img1 : $img0;		$task = $value ? 'unpublish' : 'publish';		$alt = $value ? JText::_('JPUBLISHED') : JText::_('JUNPUBLISHED');		$action = $value ? JText::_('JLIB_HTML_UNPUBLISH_ITEM') : JText::_('JLIB_HTML_PUBLISH_ITEM');		$href = '		<a href="#" onclick="return listItemTask(\'cb' . $i . '\',\'' . $prefix . $task . '\')" title="' . $action . '">'			. JHtml::_('image', 'admin/' . $img, $alt, null, true) . '</a>';		return $href;	}	/**	 * Method to create a select list of states for filtering	 * By default the filter shows only published and unpublished items	 *	 * @param   string  $filter_state  The initial filter state	 * @param   string  $published     The JText string for published	 * @param   string  $unpublished   The JText string for Unpublished	 * @param   string  $archived      The JText string for Archived	 * @param   string  $trashed       The JText string for Trashed	 *	 * @return  string	 *	 * @since   11.1	 */	public static function state($filter_state = '*', $published = 'Published', $unpublished = 'Unpublished', $archived = null, $trashed = null)	{		$state = array('' => '- ' . JText::_('JLIB_HTML_SELECT_STATE') . ' -', 'P' => JText::_($published), 'U' => JText::_($unpublished));		if ($archived)		{			$state['A'] = JText::_($archived);		}		if ($trashed)		{			$state['T'] = JText::_($trashed);		}		return JHtml::_(			'select.genericlist',			$state,			'filter_state',			array(				'list.attr' => 'class="inputbox" size="1" onchange="Joomla.submitform();"',				'list.select' => $filter_state,				'option.key' => null			)		);	}	/**	 * Method to create an icon for saving a new ordering in a grid	 *	 * @param   array   $rows   The array of rows of rows	 * @param   string  $image  The image [UNUSED]	 * @param   string  $task   The task to use, defaults to save order	 *	 * @return  string	 *	 * @since   11.1	 */	public static function order($rows, $image = 'filesave.png', $task = 'saveorder')	{		$href = '<a href="javascript:saveorder(' . (count($rows) - 1) . ', \'' . $task . '\')" rel="tooltip" class="saveorder btn btn-micro pull-right" title="'			. JText::_('JLIB_HTML_SAVE_ORDER') . '"><i class="icon-menu-2"></i></a>';		return $href;	}	/**	 * Method to create a checked out icon with optional overlib in a grid.	 *	 * @param   object   &$row     The row object	 * @param   boolean  $overlib  True if an overlib with checkout information should be created.	 *	 * @return  string   HTMl for the icon and overlib	 *	 * @since   11.1	 */	protected static function _checkedOut(&$row, $overlib = true)	{		$hover = '';		if ($overlib)		{			$text = addslashes(htmlspecialchars($row->editor, ENT_COMPAT, 'UTF-8'));			$date = JHtml::_('date', $row->checked_out_time, JText::_('DATE_FORMAT_LC1'));			$time = JHtml::_('date', $row->checked_out_time, 'H:i');			$hover = '<span class="editlinktip hasTip" title="' . JText::_('JLIB_HTML_CHECKED_OUT') . '::' . $text . '<br />' . $date . '<br />'				. $time . '">';		}		$checked = $hover . JHtml::_('image', 'admin/checked_out.png', null, null, true) . '</span>';		return $checked;	}	/**	 * Method to build the behavior script and add it to the document head.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function behavior()	{		static $loaded;		if (!$loaded)		{			// Build the behavior script.			$js = '		window.addEvent(\'domready\', function(){			actions = $$(\'a.move_up\');			actions.combine($$(\'a.move_down\'));			actions.combine($$(\'a.grid_true\'));			actions.combine($$(\'a.grid_false\'));			actions.combine($$(\'a.grid_trash\'));			actions.each(function(a){				a.addEvent(\'click\', function(){					args = JSON.decode(this.rel);					listItemTask(args.id, args.task);				});			});			$$(\'input.check-all-toggle\').each(function(el){				el.addEvent(\'click\', function(){					if (el.checked) {						document.id(this.form).getElements(\'input[type=checkbox]\').each(function(i){							i.checked = true;						})					}					else {						document.id(this.form).getElements(\'input[type=checkbox]\').each(function(i){							i.checked = false;						})					}				});			});		});';			// Add the behavior to the document head.			$document = JFactory::getDocument();			$document->addScriptDeclaration($js);			$loaded = true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="logout <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<?php if (($this->params->get('logoutdescription_show') == 1 && str_replace(' ', '', $this->params->get('logout_description')) != '')|| $this->params->get('logout_image') != '') : ?>	<div class="logout-description">	<?php endif; ?>		<?php if ($this->params->get('logoutdescription_show') == 1) : ?>			<?php echo $this->params->get('logout_description'); ?>		<?php endif; ?>		<?php if (($this->params->get('logout_image') != '')) :?>			<img src="<?php echo $this->escape($this->params->get('logout_image')); ?>" class="thumbnail pull-right logout-image" alt="<?php echo JTEXT::_('COM_USER_LOGOUT_IMAGE_ALT')?>"/>		<?php endif; ?>	<?php if (($this->params->get('logoutdescription_show') == 1 && str_replace(' ', '', $this->params->get('logout_description')) != '')|| $this->params->get('logout_image') != '') : ?>	</div>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=user.logout'); ?>" method="post" class="form-horizontal">		<div class="control-group">			<div class="controls">				<button type="submit" class="btn btn-primary"><span class="icon-arrow-left icon-white"></span> <?php echo JText::_('JLOGOUT'); ?></button>			</div>		</div>		<input type="hidden" name="return" value="<?php echo base64_encode($this->params->get('logout_redirect_url', $this->form->getValue('return'))); ?>" />		<?php echo JHtml::_('form.token'); ?>	</form></div>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * beezDivision chrome. * * @since   3.0 */function modChrome_beezDivision($module, &$params, &$attribs){	$headerLevel = isset($attribs['headerLevel']) ? (int) $attribs['headerLevel'] : 3;	if (!empty ($module->content)) { ?><div class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>"><?php if ($module->showtitle) { ?> <h<?php echo $headerLevel; ?>><?php echo $module->title; ?></h<?php echo $headerLevel; ?>><?php }; ?> <?php echo $module->content; ?></div><?php };}/** * beezHide chrome. * * @since   3.0 */function modChrome_beezHide($module, &$params, &$attribs){	$headerLevel = isset($attribs['headerLevel']) ? (int) $attribs['headerLevel'] : 3;	$state = isset($attribs['state']) ? (int) $attribs['state'] :0;	if (!empty ($module->content)) { ?><div	class="moduletable_js <?php echo htmlspecialchars($params->get('moduleclass_sfx'));?>"><?php if ($module->showtitle) : ?><h<?php echo $headerLevel; ?> class="js_heading"> <?php echo $module->title; ?> <a href="#"	title="<?php echo JText::_('TPL_BEEZ3_CLICK'); ?>"	onclick="auf('module_<?php echo $module->id; ?>'); return false"	class="opencloselink" id="link_<?php echo $module->id?>"> <span	class="no"><img src="templates/beez3/images/plus.png"	alt="<?php if ($state == 1) { echo JText::_('TPL_BEEZ3_ALTOPEN');} else {echo JText::_('TPL_BEEZ3_ALTCLOSE');} ?>" /></span></a></h<?php echo $headerLevel; ?>> <?php endif; ?><div class="module_content <?php if ($state == 1){echo "open";} ?>"	id="module_<?php echo $module->id; ?>" tabindex="-1"><?php echo $module->content; ?></div></div>	<?php }}/** * beezTabs chrome. * * @since   3.0 */function modChrome_beezTabs($module, $params, $attribs){	$area = isset($attribs['id']) ? (int) $attribs['id'] :'1';	$area = 'area-'.$area;	static $modulecount;	static $modules;	if ($modulecount < 1)	{		$modulecount = count(JModuleHelper::getModules($module->position));		$modules = array();	}	if ($modulecount == 1)	{		$temp = new stdClass;		$temp->content = $module->content;		$temp->title = $module->title;		$temp->params = $module->params;		$temp->id = $module->id;		$modules[] = $temp;		// list of moduletitles		// list of moduletitles		echo '<div id="'. $area.'" class="tabouter"><ul class="tabs">';		foreach ($modules as $rendermodule)		{			echo '<li class="tab"><a href="#" id="link_'.$rendermodule->id.'" class="linkopen" onclick="tabshow(\'module_'. $rendermodule->id.'\');return false">'.$rendermodule->title.'</a></li>';		}		echo '</ul>';		$counter = 0;		// modulecontent		foreach ($modules as $rendermodule)		{			$counter ++;			echo '<div tabindex="-1" class="tabcontent tabopen" id="module_'.$rendermodule->id.'">';			echo $rendermodule->content;			if ($counter != count($modules))			{			echo '<a href="#" class="unseen" onclick="nexttab(\'module_'. $rendermodule->id.'\');return false;" id="next_'.$rendermodule->id.'">'.JText::_('TPL_BEEZ3_NEXTTAB').'</a>';			}			echo '</div>';		}		$modulecount--;		echo '</div>';	} else {		$temp = new stdClass;		$temp->content = $module->content;		$temp->params = $module->params;		$temp->title = $module->title;		$temp->id = $module->id;		$modules[] = $temp;		$modulecount--;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$notice_homes     = $this->homes == 2 || $this->homes == 1 || $this->homes - 1 != count($this->contentlangs) && ($this->language_filter || $this->switchers != 0);$notice_disabled  = !$this->language_filter	&& ($this->homes > 1 || $this->switchers != 0);$notice_switchers = !$this->switchers && ($this->homes > 1 || $this->language_filter);?><div class="mod-multilangstatus">	<?php if (!$this->language_filter && $this->switchers == 0) : ?>		<?php if ($this->homes == 1) : ?>			<div class="alert alert-info"><?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_NONE'); ?></div>		<?php else: ?>			<div class="alert alert-info"><?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_USELESS_HOMES'); ?></div>		<?php endif; ?>	<?php else: ?>	<table class="table table-striped table-condensed">		<tbody>		<?php if ($notice_homes) : ?>			<tr class="warning">				<td>					<i class="icon-warning"></i>				</td>				<td>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_HOMES_MISSING'); ?>				</td>			</tr>		<?php endif; ?>		<?php if ($notice_disabled) : ?>			<tr class="warning">				<td>					<i class="icon-warning"></i>				</td>				<td>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_LANGUAGEFILTER_DISABLED'); ?>				</td>			</tr>		<?php endif; ?>		<?php if ($notice_switchers) : ?>			<tr class="warning">				<td>					<i class="icon-warning"></i>				</td>				<td>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_LANGSWITCHER_UNPUBLISHED'); ?>				</td>			</tr>		<?php endif; ?>		<?php foreach ($this->contentlangs as $contentlang) : ?>			<?php if (array_key_exists($contentlang->lang_code, $this->homepages) && (!array_key_exists($contentlang->lang_code, $this->site_langs) || !$contentlang->published)) : ?>				<tr class="warning">					<td>						<i class="icon-warning"></i>					</td>					<td>						<?php echo JText::sprintf('COM_LANGUAGES_MULTILANGSTATUS_ERROR_CONTENT_LANGUAGE', $contentlang->lang_code); ?>					</td>				</tr>			<?php endif; ?>		<?php endforeach; ?>		<?php if ($this->listUsersError) : ?>			<tr class="info">				<td>					<i class="icon-help"></i>				</td>				<td>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_CONTACTS_ERROR_TIP'); ?>					<ul>					<?php foreach ($this->listUsersError as $user) : ?>						<li>						<?php echo JText::sprintf('COM_LANGUAGES_MULTILANGSTATUS_CONTACTS_ERROR', $user->name); ?>						</li>					<?php endforeach; ?>					</ul>				</td>			</tr>		<?php endif; ?>		</tbody>	</table>	<table class="table table-striped table-condensed" style="border-top: 1px solid #CCCCCC;">		<thead>			<tr>				<th>					<?php echo JText::_('JDETAILS'); ?>				</th>				<th>					<?php echo JText::_('JSTATUS'); ?>				</th>			</tr>		</thead>		<tbody>			<tr>				<th scope="row">					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_LANGUAGEFILTER'); ?>				</th>				<td class="center">					<?php if ($this->language_filter) : ?>						<?php echo JText::_('JENABLED'); ?>					<?php else : ?>						<?php echo JText::_('JDISABLED'); ?>					<?php endif; ?>				</td>			</tr>			<tr>				<th scope="row">					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_LANGSWITCHER_PUBLISHED'); ?>				</th>				<td class="center">					<?php if ($this->switchers != 0) : ?>						<?php echo $this->switchers; ?>					<?php else : ?>						<?php echo JText::_('JNONE'); ?>					<?php endif; ?>				</td>			</tr>			<tr>				<th scope="row">					<?php if ($this->homes > 1) : ?>						<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_HOMES_PUBLISHED_INCLUDING_ALL'); ?>					<?php else : ?>						<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_HOMES_PUBLISHED'); ?>					<?php endif; ?>				</th>				<td class="center">					<?php if ($this->homes > 1) : ?>						<?php echo $this->homes; ?>					<?php else : ?>						<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_HOMES_PUBLISHED_ALL'); ?>					<?php endif; ?>				</td>			</tr>		</tbody>	</table>	<table class="table table-striped table-condensed" style="border-top: 1px solid #CCCCCC;">		<thead>			<tr>				<th>					<?php echo JText::_('JGRID_HEADING_LANGUAGE'); ?>				</th>				<th>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_SITE_LANG_PUBLISHED'); ?>				</th>				<th>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_CONTENT_LANGUAGE_PUBLISHED'); ?>				</th>				<th>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_HOMES_PUBLISHED'); ?>				</th>			</tr>		</thead>		<tbody>			<?php foreach ($this->statuses as $status) : ?>				<?php if ($status->element) : ?>					<tr>						<td>							<?php echo $status->element; ?>						</td>				<?php endif; ?>				<?php if ($status->element) : // Published Site languages ?>						<td class="center">							<i class="icon-checkmark"></i>						</td>				<?php else : ?>						<td class="center">							<?php echo JText::_('JNO'); ?>						</td>				<?php endif; ?>				<?php if ($status->lang_code && $status->published) : // Published Content languages ?>						<td class="center">							<i class="icon-checkmark"></i>						</td>				<?php else : ?>						<td class="center">							<i class="icon-warning"></i>						</td>				<?php endif; ?>				<?php if ($status->home_language) : // Published Home pages ?>						<td class="center">							<i class="icon-checkmark"></i>						</td>				<?php else : ?>						<td class="center">							<i class="icon-minus"></i>						</td>				<?php endif; ?>				</tr>			<?php endforeach; ?>			<?php foreach ($this->contentlangs as $contentlang) : ?>				<?php if (!array_key_exists($contentlang->lang_code, $this->site_langs)) : ?>					<tr>						<td>							<?php echo $contentlang->lang_code; ?>						</td>						<td class="center">							<i class="icon-warning"></i>						</td>						<td class="center">							<?php if ($contentlang->published) : ?>								<i class="icon-checkmark"></i>							<?php elseif (!$contentlang->published && array_key_exists($contentlang->lang_code, $this->homepages)) : ?>								<i class="icon-minus"></i>							<?php elseif (!$contentlang->published) : ?>								<i class="icon-warning"></i>							<?php endif; ?>						</td>						<td class="center">							<?php if (!array_key_exists($contentlang->lang_code, $this->homepages)) : ?>								<i class="icon-warning"></i>							<?php else : ?>								<i class="icon-checkmark"></i>							<?php endif; ?>						</td>				<?php endif; ?>			<?php endforeach; ?>			</tr>		</tbody>	</table>	<?php endif; ?></div>
