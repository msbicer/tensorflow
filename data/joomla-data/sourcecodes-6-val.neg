<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Form Field class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldTimezone extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Timezone';	/**	 * The list of available timezone groups to use.	 *	 * @var    array	 *	 * @since  11.1	 */	protected static $zones = array('Africa', 'America', 'Antarctica', 'Arctic', 'Asia', 'Atlantic', 'Australia', 'Europe', 'Indian', 'Pacific');	/**	 * Method to get the time zone field option groups.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   11.1	 */	protected function getGroups()	{		$groups = array();		$keyField = $this->element['key_field'] ? (string) $this->element['key_field'] : 'id';		$keyValue = $this->form->getValue($keyField);		// If the timezone is not set use the server setting.		if (strlen($this->value) == 0 && empty($keyValue))		{			$this->value = JFactory::getConfig()->get('offset');		}		// Get the list of time zones from the server.		$zones = DateTimeZone::listIdentifiers();		// Build the group lists.		foreach ($zones as $zone)		{			// Time zones not in a group we will ignore.			if (strpos($zone, '/') === false)			{				continue;			}			// Get the group/locale from the timezone.			list ($group, $locale) = explode('/', $zone, 2);			// Only use known groups.			if (in_array($group, self::$zones))			{				// Initialize the group if necessary.				if (!isset($groups[$group]))				{					$groups[$group] = array();				}				// Only add options where a locale exists.				if (!empty($locale))				{					$groups[$group][$zone] = JHtml::_('select.option', $zone, str_replace('_', ' ', $locale), 'value', 'text', false);				}			}		}		// Sort the group lists.		ksort($groups);		foreach ($groups as $zone => & $location)		{			sort($location);		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'newsfeed.cancel' || document.formvalidator.isValid(document.id('newsfeed-form')))		{			Joomla.submitform(task, document.getElementById('newsfeed-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="newsfeed-form" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin Newsfeed -->		<div class="span10 form-horizontal">	<fieldset>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_NEWSFEEDS_NEW_NEWSFEED', true) : JText::sprintf('COM_NEWSFEEDS_EDIT_NEWSFEED', $this->item->id, true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('name'); ?></div>				<div class="controls"><?php echo $this->form->getInput('name'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('link'); ?></div>				<div class="controls"><?php echo $this->form->getInput('link'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>				<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('description'); ?></div>				<div class="controls"><?php echo $this->form->getInput('description'); ?></div>			</div>			<div class="span6">				<h4><?php echo JText::_('COM_NEWSFEEDS_FIELDSET_IMAGES');?></h4>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('images'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('images'); ?>					</div>				</div>				<?php foreach ($this->form->getGroup('images') as $field) : ?>					<div class="control-group">						<?php if (!$field->hidden) : ?>							<div class="control-label">								<?php echo $field->label; ?>							</div>						<?php endif; ?>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>				<div class="controls"><?php echo $this->form->getInput('id'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>			</div>			<?php if ($this->item->modified_by) : ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>				</div>			<?php endif; ?>			<?php if ($this->item->version) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('version'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('version'); ?>					</div>				</div>			<?php endif; ?>			<?php if ($this->item->hits) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('hits'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('hits'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>				<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('numarticles'); ?></div>				<div class="controls"><?php echo $this->form->getInput('numarticles'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('cache_time'); ?></div>				<div class="controls"><?php echo $this->form->getInput('cache_time'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('rtl'); ?></div>				<div class="controls"><?php echo $this->form->getInput('rtl'); ?></div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php $fieldSets = $this->form->getFieldsets('params'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $paramstabs = 'params-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php $fieldSets = $this->form->getFieldsets('metadata'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $metadatatabs = 'metadata-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $metadatatabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('metadata'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php if ($assoc) : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>				<?php echo $this->loadTemplate('associations'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Newsfeed -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('bootstrap.tooltip');JHtml::_('formbehavior.chosen');$document = JFactory::getDocument();$mainDirection = $document->direction == 'rtl' ? 'right' : 'left';$altDirection  = $document->direction == 'rtl' ? 'left' : 'right';?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="form-login" class="form-inline">	<fieldset class="loginform">		<div class="control-group">			<div class="controls">				<div class="input-prepend input-append">					<span class="add-on">						<i class="icon-user hasTooltip" data-placement="<?php echo $mainDirection; ?>" title="<?php echo JText::_('JGLOBAL_USERNAME'); ?>"></i>						<label for="mod-login-username" class="element-invisible">							<?php echo JText::_('JGLOBAL_USERNAME'); ?>						</label>					</span>					<input name="username" tabindex="1" id="mod-login-username" type="text" class="input-medium" placeholder="<?php echo JText::_('JGLOBAL_USERNAME'); ?>" size="15"/>					<a href="<?php echo JUri::root(); ?>index.php?option=com_users&view=remind" class="btn width-auto hasTooltip" data-placement="<?php echo $altDirection; ?>" title="<?php echo JText::_('MOD_LOGIN_REMIND'); ?>">						<i class="icon-help" title="<?php echo JText::_('MOD_LOGIN_REMIND'); ?>"></i>					</a>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="input-prepend input-append">					<span class="add-on">						<i class="icon-lock hasTooltip" data-placement="<?php echo $mainDirection; ?>" title="<?php echo JText::_('JGLOBAL_PASSWORD'); ?>"></i>						<label for="mod-login-password" class="element-invisible">							<?php echo JText::_('JGLOBAL_PASSWORD'); ?>						</label>					</span>					<input name="passwd" tabindex="2" id="mod-login-password" type="password" class="input-medium" placeholder="<?php echo JText::_('JGLOBAL_PASSWORD'); ?>" size="15"/>					<a href="<?php echo JUri::root(); ?>index.php?option=com_users&view=reset" class="btn width-auto hasTooltip" data-placement="<?php echo $altDirection; ?>" title="<?php echo JText::_('MOD_LOGIN_RESET'); ?>">						<i class="icon-help" title="<?php echo JText::_('MOD_LOGIN_RESET'); ?>"></i>					</a>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="input-prepend">					<span class="add-on">						<i class="icon-comment hasTooltip" data-placement="<?php echo $mainDirection; ?>" class="hasTooltip" title="<?php echo JText::_('MOD_LOGIN_LANGUAGE'); ?>"></i>						<label for="lang" class="element-invisible">							<?php echo JText::_('MOD_LOGIN_LANGUAGE'); ?>						</label>					</span>					<?php echo $langs; ?>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="btn-group pull-left">					<button tabindex="3" class="btn btn-primary btn-large">						<i class="icon-lock icon-white"></i> <?php echo JText::_('MOD_LOGIN_LOGIN'); ?>					</button>				</div>			</div>		</div>		<input type="hidden" name="option" value="com_login"/>		<input type="hidden" name="task" value="login"/>		<input type="hidden" name="return" value="<?php echo $return; ?>"/>		<?php echo JHtml::_('form.token'); ?>	</fieldset></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	$fieldSets = $this->form->getFieldsets('request');	if (!empty($fieldSets))	{		$fieldSet = array_shift($fieldSets);		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$fieldSet->name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), 'request-options');		if (isset($fieldSet->description) && trim($fieldSet->description)) :			echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';		endif;	?>		<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_($label) ?></legend>			<?php $hidden_fields = ''; ?>			<ul class="adminformlist">				<?php foreach ($this->form->getFieldset('request') as $field) : ?>				<?php if (!$field->hidden) : ?>				<li>					<?php echo $field->label; ?>					<?php echo $field->input; ?>				</li>				<?php else : $hidden_fields .= $field->input; ?>				<?php endif; ?>				<?php endforeach; ?>			</ul>			<?php echo $hidden_fields; ?>		</fieldset><?php	}	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<div class="clr"></div>		<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_($label) ?></legend>			<ul class="adminformlist">				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>				<?php endforeach; ?>			</ul>		</fieldset><?php endforeach;?><?php	$fieldSets = $this->form->getFieldsets('associations');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<div class="clr"></div>		<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_($label) ?></legend>			<ul class="adminformlist">				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>				<?php endforeach; ?>			</ul>		</fieldset><?php endforeach;?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$html = JHtml::_('icons.buttons', $buttons);?><?php if (!empty($html)) : ?>	<div class="row-striped">		<?php echo $html;?>	</div><?php endif;?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of redirect links. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectModelLinks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'old_url', 'a.old_url',				'new_url', 'a.new_url',				'referer', 'a.referer',				'hits', 'a.hits',				'created_date', 'a.created_date',				'published', 'a.published',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		// Load the parameters.		$params = JComponentHelper::getParams('com_redirect');		$this->setState('params', $params);		// List state information.		parent::populateState('a.old_url', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.state');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.*'			)		);		$query->from($db->quoteName('#__redirect_links') . ' AS a');		// Filter by published state		$state = $this->getState('filter.state');		if (is_numeric($state))		{			$query->where('a.published = ' . (int) $state);		}		elseif ($state === '')		{			$query->where('(a.published IN (0,1,2))');		}		// Filter the items over the search string if set.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where(					'(' . $db->quoteName('old_url') . ' LIKE ' . $search .						' OR ' . $db->quoteName('new_url') . ' LIKE ' . $search .						' OR ' . $db->quoteName('comment') . ' LIKE ' . $search .						' OR ' . $db->quoteName('referer') . ' LIKE ' . $search . ')'				);			}		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.old_url')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('behavior.modal', 'a.modal');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_banners&view=tracks'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>  	<div id="filter-bar" class="btn-toolbar">  		<div class="filter-search btn-group pull-left">  			<label class="filter-hide-lbl" for="filter_begin"><?php echo JText::_('COM_BANNERS_BEGIN_LABEL'); ?></label>  			<?php echo JHtml::_('calendar', $this->state->get('filter.begin'), 'filter_begin', 'filter_begin', '%Y-%m-%d', array('size' => 10, 'onchange' => "this.form.fireEvent('submit');this.form.submit()"));?>  		</div>  		<div class="filter-search btn-group pull-left">  			<label class="filter-hide-lbl" for="filter_end"><?php echo JText::_('COM_BANNERS_END_LABEL'); ?></label>  			<?php echo JHtml::_('calendar', $this->state->get('filter.end'), 'filter_end', 'filter_end', '%Y-%m-%d', array('size' => 10, 'onchange' => "this.form.fireEvent('submit');this.form.submit()"));?>  		</div>  		<div class="btn-group pull-right hidden-phone">  			<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>  			<?php echo $this->pagination->getLimitBox(); ?>  		</div>  		<div class="btn-group pull-right hidden-phone">  			<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>  			<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">  				<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>  				<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>  				<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>  			</select>  		</div>  		<div class="btn-group pull-right">  			<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>  			<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">  				<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>  				<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>  			</select>  		</div>  	</div>  	<div class="clearfix"> </div>  	<table class="table table-striped">  		<thead>  			<tr>  				<th class="title">  					<?php echo JText::_('COM_BANNERS_HEADING_NAME');?>  				</th>  				<th width="20%" class="nowrap">  					<?php echo JText::_('COM_BANNERS_HEADING_CLIENT');?>  				</th>  				<th width="10%" class="nowrap hidden-phone">  					<?php echo JText::_('COM_BANNERS_HEADING_TYPE');?>  				</th>  				<th width="10%" class="nowrap hidden-phone">  					<?php echo JText::_('COM_BANNERS_HEADING_COUNT');?>  				</th>  				<th width="10%" class="nowrap hidden-phone">  					<?php echo JText::_('JDATE');?>  				</th>  			</tr>  		</thead>  		<tfoot>  			<tr>  				<td colspan="6">  					<?php echo $this->pagination->getListFooter(); ?>  				</td>  			</tr>  		</tfoot>  		<tbody>  		<?php foreach ($this->items as $i => $item) :?>  			<tr class="row<?php echo $i % 2; ?>">  				<td>  					<?php echo $item->name;?>  					<div class="small">  						<?php echo $item->category_title;?>  					</div>  				</td>  				<td>  					<?php echo $item->client_name;?>  				</td>  				<td class="small hidden-phone">  					<?php echo $item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION') : JText::_('COM_BANNERS_CLICK');?>  				</td>  				<td class="hidden-phone">  					<?php echo $item->count;?>  				</td>  				<td class="hidden-phone">  					<?php echo JHtml::_('date', $item->track_date, JText::_('DATE_FORMAT_LC4').' H:i');?>  				</td>  			</tr>  		<?php endforeach; ?>  		</tbody>  	</table>    	<input type="hidden" name="task" value="" />  	<input type="hidden" name="boxchecked" value="0" />  	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Adsense data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataAdsense extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/adsense');		}	}	/**	 * Method to get an Adsense account's settings from Google	 *	 * @param   string   $accountID    ID of account to get	 * @param   boolean  $subaccounts  Include list of subaccounts	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getAccount($accountID, $subaccounts = true)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . ($subaccounts ? '?tree=true' : '');			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense accounts from Google	 *	 * @param   array  $options   Search settings	 * @param   int    $maxpages  Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listAccounts($options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense clients from Google	 *	 * @param   string  $accountID  ID of account to list the clients from	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listClients($accountID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an AdSense AdUnit	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $adunitID    ID of adunit to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getUnit($accountID, $adclientID, $adunitID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels for a specific Adunit	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $adunitID    ID of adunit to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUnitChannels($accountID, $adclientID, $adunitID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID) . '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an Adsense Channel	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $channelID   ID of channel to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getChannel($accountID, $adclientID, $channelID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/';			$url .= urlencode($adclientID) . '/customchannels/' . urlencode($channelID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Adunits for a specific Custom Channel	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $channelID   ID of channel to list units from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannelUnits($accountID, $adclientID, $channelID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels/' . urlencode($channelID) . '/adunits?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to generate a report from Google AdSense	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUrlChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/urlchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Channel URLs	 *	 * @param   string  $accountID  ID of account	 * @param   mixed   $start      Start day	 * @param   mixed   $end        End day	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function generateReport($accountID, $start, $end = false, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			if (is_int($start))			{				$startobj = new DateTime;				$startobj->setTimestamp($start);			}			elseif (is_string($start))			{				$startobj = new DateTime($start);			}			elseif (is_a($start, 'DateTime'))			{				$startobj = $start;			}			else			{				throw new InvalidArgumentException('Invalid start time.');			}			if (!$end)			{				$endobj = new DateTime;			}			elseif (is_int($end))			{				$endobj = new DateTime;				$endobj->setTimestamp($end);			}			elseif (is_string($end))			{				$endobj = new DateTime($end);			}			elseif (is_a($end, 'DateTime'))			{				$endobj = $end;			}			else			{				throw new InvalidArgumentException('Invalid end time.');			}			$options['startDate'] = $startobj->format('Y-m-d');			$options['endDate'] = $endobj->format('Y-m-d');			$begin = array_key_exists('startIndex', $options) ? $options['startIndex'] : 0;			unset($options['startIndex']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/reports?' . http_build_query($options);			if (strpos($url, '&'))			{				$url .= '&';			}			$i = 0;			$data['rows'] = array();			do			{				$jdata = $this->query($url . 'startIndex=' . count($data['rows']));				$newdata = json_decode($jdata->body, true);				if ($newdata && array_key_exists('rows', $newdata))				{					$newdata['rows'] = array_merge($data['rows'], $newdata['rows']);					$data = $newdata;				}				else				{					throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");				}				$i++;			}			while (count($data['rows']) < $data['totalMatchedRows'] && $i < $maxpages);			return $data;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// Create shortcuts to some parameters.$params  = $this->item->params;$images  = json_decode($this->item->images);$urls    = json_decode($this->item->urls);$canEdit = $params->get('access-edit');$user    = JFactory::getUser();$info    = $params->get('info_block_position', 0);JHtml::_('behavior.caption');?><div class="item-page<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading') && $params->get('show_title')) : ?>	<div class="page-header">		<h1> <?php echo $this->escape($this->params->get('page_heading')); ?> </h1>	</div>	<?php endif;if (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && $this->item->paginationrelative){	echo $this->item->pagination;}?>	<?php if ($params->get('show_title') || $params->get('show_author')) : ?>	<div class="page-header">		<h2>			<?php if ($this->item->state == 0) : ?>				<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>			<?php endif; ?>			<?php if ($params->get('show_title')) : ?>				<?php if ($params->get('link_titles') && !empty($this->item->readmore_link)) : ?>					<a href="<?php echo $this->item->readmore_link; ?>"> <?php echo $this->escape($this->item->title); ?></a>				<?php else : ?>					<?php echo $this->escape($this->item->title); ?>				<?php endif; ?>			<?php endif; ?>		</h2>	</div>	<?php endif; ?>	<?php if (!$this->print) : ?>		<?php if ($canEdit || $params->get('show_print_icon') || $params->get('show_email_icon')) : ?>		<div class="btn-group pull-right">			<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span> <span class="caret"></span> </a>			<?php // Note the actions class is deprecated. Use dropdown-menu instead. ?>			<ul class="dropdown-menu actions">				<?php if ($params->get('show_print_icon')) : ?>				<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $this->item, $params); ?> </li>				<?php endif; ?>				<?php if ($params->get('show_email_icon')) : ?>				<li class="email-icon"> <?php echo JHtml::_('icon.email', $this->item, $params); ?> </li>				<?php endif; ?>				<?php if ($canEdit) : ?>				<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $this->item, $params); ?> </li>				<?php endif; ?>			</ul>		</div>		<?php endif; ?>		<?php else : ?>		<div class="pull-right">		<?php echo JHtml::_('icon.print_screen', $this->item, $params); ?>		</div>	<?php endif; ?><?php $useDefList = ($params->get('show_modify_date') || $params->get('show_publish_date') || $params->get('show_create_date')	|| $params->get('show_hits') || $params->get('show_category') || $params->get('show_parent_category') || $params->get('show_author')); ?>	<?php if ($useDefList && ($info == 0 || $info == 2)) : ?>		<div class="article-info muted">			<dl class="article-info">			<dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt>			<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>				<dd class="createdby">					<?php $author = $this->item->created_by_alias ? $this->item->created_by_alias : $this->item->author; ?>					<?php if (!empty($this->item->contactid) && $params->get('link_author') == true) : ?>						<?php						$needle = 'index.php?option=com_contact&view=contact&id=' . $this->item->contactid;						$menu = JFactory::getApplication()->getMenu();						$item = $menu->getItems('link', $needle, true);						$cntlink = !empty($item) ? $needle . '&Itemid=' . $item->id : $needle;						?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', JHtml::_('link', JRoute::_($cntlink), $author)); ?>					<?php else: ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>				<dd class="parent-category-name">					<?php $title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>					<?php if ($params->get('link_parent_category') && !empty($this->item->parent_slug)) : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_category')) : ?>				<dd class="category-name">					<?php $title = $this->escape($this->item->category_title);					$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)) . '">' . $title . '</a>';?>					<?php if ($params->get('link_category') && $this->item->catslug) : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_publish_date')) : ?>				<dd class="published">					<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($info == 0) : ?>				<?php if ($params->get('show_modify_date')) : ?>					<dd class="modified">						<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_create_date')) : ?>					<dd class="create">						<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_hits')) : ?>					<dd class="hits">						<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>					</dd>				<?php endif; ?>			<?php endif; ?>			</dl>		</div>	<?php endif; ?>	<?php if ($params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?>	<?php if (!$params->get('show_intro')) : echo $this->item->event->afterDisplayTitle; endif; ?>	<?php echo $this->item->event->beforeDisplayContent; ?>	<?php if (isset($urls) && ((!empty($urls->urls_position) && ($urls->urls_position == '0')) || ($params->get('urls_position') == '0' && empty($urls->urls_position)))		|| (empty($urls->urls_position) && (!$params->get('urls_position')))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($params->get('access-view')):?>	<?php if (isset($images->image_fulltext) && !empty($images->image_fulltext)) : ?>	<?php $imgfloat = (empty($images->float_fulltext)) ? $params->get('float_fulltext') : $images->float_fulltext; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_fulltext_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_fulltext_caption) . '"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_fulltext); ?>" alt="<?php echo htmlspecialchars($images->image_fulltext_alt); ?>"/> </div>	<?php endif; ?>	<?php	if (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && !$this->item->paginationrelative):		echo $this->item->pagination;	endif;	?>	<?php if (isset ($this->item->toc)) :		echo $this->item->toc;	endif; ?>	<?php echo $this->item->text; ?>	<?php if ($useDefList && ($info == 1 || $info == 2)) : ?>		<div class="article-info muted">			<dl class="article-info">			<dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt>			<?php if ($info == 1) : ?>				<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>					<dd class="createdby">						<?php $author = $this->item->created_by_alias ? $this->item->created_by_alias : $this->item->author; ?>						<?php if (!empty($this->item->contactid) && $params->get('link_author') == true) : ?>						<?php						$needle = 'index.php?option=com_contact&view=contact&id=' . $this->item->contactid;						$menu = JFactory::getApplication()->getMenu();						$item = $menu->getItems('link', $needle, true);						$cntlink = !empty($item) ? $needle . '&Itemid=' . $item->id : $needle;						?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', JHtml::_('link', JRoute::_($cntlink), $author)); ?>						<?php else: ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>					<dd class="parent-category-name">						<?php	$title = $this->escape($this->item->parent_title);						$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)) . '">' . $title . '</a>';?>						<?php if ($params->get('link_parent_category') && $this->item->parent_slug) : ?>							<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>						<?php else : ?>							<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_category')) : ?>					<dd class="category-name">						<?php 	$title = $this->escape($this->item->category_title);						$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)) . '">' . $title . '</a>';?>						<?php if ($params->get('link_category') && $this->item->catslug) : ?>							<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>						<?php else : ?>							<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_publish_date')) : ?>					<dd class="published">						<span class="icon-calendar"></span>						<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>			<?php endif; ?>			<?php if ($params->get('show_create_date')) : ?>				<dd class="create">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_modify_date')) : ?>				<dd class="modified">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_hits')) : ?>				<dd class="hits">					<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>				</dd>			<?php endif; ?>			</dl>		</div>	<?php endif; ?>	<?phpif (!empty($this->item->pagination) && $this->item->pagination && $this->item->paginationposition && !$this->item->paginationrelative):	echo $this->item->pagination;?>	<?php endif; ?>	<?php if (isset($urls) && ((!empty($urls->urls_position) && ($urls->urls_position == '1')) || ($params->get('urls_position') == '1'))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php // Optional teaser intro text for guests ?>	<?php elseif ($params->get('show_noauth') == true && $user->get('guest')) : ?>	<?php echo $this->item->introtext; ?>	<?php //Optional link to let them register to see the whole article. ?>	<?php if ($params->get('show_readmore') && $this->item->fulltext != null) :		$link1 = JRoute::_('index.php?option=com_users&view=login');		$link = new JURI($link1);?>	<p class="readmore">		<a href="<?php echo $link; ?>">		<?php $attribs = json_decode($this->item->attribs); ?>		<?php		if ($attribs->alternative_readmore == null) :			echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');		elseif ($readmore = $this->item->alternative_readmore) :			echo $readmore;			if ($params->get('show_readmore_title', 0) != 0) :				echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));			endif;		elseif ($params->get('show_readmore_title', 0) == 0) :			echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');		else :			echo JText::_('COM_CONTENT_READ_MORE');			echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));		endif; ?>		</a>	</p>	<?php endif; ?>	<?php endif; ?>	<?phpif (!empty($this->item->pagination) && $this->item->pagination && $this->item->paginationposition && $this->item->paginationrelative) :	echo $this->item->pagination;?>	<?php endif; ?>	<?php echo $this->item->event->afterDisplayContent; ?> </div>
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class for the button bar. * * @package  Joomla.Administrator * @since    1.5 */abstract class JToolbarHelper{	/**	 * Title cell.	 * For the title and toolbar to be rendered correctly,	 * this title fucntion must be called before the starttable function and the toolbars icons	 * this is due to the nature of how the css has been used to postion the title in respect to the toolbar.	 *	 * @param   string  $title  The title.	 * @param   string  $icon   The space-separated names of the image.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function title($title, $icon = 'generic.png')	{		// Strip the extension.		$icons = explode(' ', $icon);		foreach ($icons as &$icon)		{			$icon = 'icon-48-' . preg_replace('#\.[^.]*$#', '', $icon);		}		$html = '<div class="pagetitle ' . htmlspecialchars(implode(' ', $icons)) . '"><h2>' . $title . '</h2></div>';		$app = JFactory::getApplication();		$app->JComponentTitle = $html;		JFactory::getDocument()->setTitle($app->getCfg('sitename') . ' - ' . JText::_('JADMINISTRATION') . ' - ' . $title);	}	/**	 * Writes a spacer cell.	 *	 * @param   string  $width  The width for the cell	 *	 * @return  void	 *	 * @since   1.5	 */	public static function spacer($width = '')	{		$bar = JToolbar::getInstance('toolbar');		// Add a spacer.		$bar->appendButton('Separator', 'spacer', $width);	}	/**	 * Writes a divider between menu buttons	 *	 * @return  void	 *	 * @since   1.5	 */	public static function divider()	{		$bar = JToolbar::getInstance('toolbar');		// Add a divider.		$bar->appendButton('Separator', 'divider');	}	/**	 * Writes a custom option and task button for the button bar.	 *	 * @param   string  $task        The task to perform (picked up by the switch($task) blocks.	 * @param   string  $icon        The image to display.	 * @param   string  $iconOver    The image to display when moused over.	 * @param   string  $alt         The alt text for the icon image.	 * @param   bool    $listSelect  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function custom($task = '', $icon = '', $iconOver = '', $alt = '', $listSelect = true)	{		$bar = JToolbar::getInstance('toolbar');		// Strip extension.		$icon = preg_replace('#\.[^.]*$#', '', $icon);		// Add a standard button.		$bar->appendButton('Standard', $icon, $alt, $task, $listSelect);	}	/**	 * Writes a preview button for a given option (opens a popup window).	 *	 * @param   string  $url            The name of the popup file (excluding the file extension)	 * @param   bool    $updateEditors	 *	 * @return  void	 *	 * @since   1.5	 */	public static function preview($url = '', $updateEditors = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a preview button.		$bar->appendButton('Popup', 'preview', 'Preview', $url.'&task=preview');	}	/**	 * Writes a preview button for a given option (opens a popup window).	 *	 * @param   string  $ref        The name of the popup file (excluding the file extension for an xml file).	 * @param   bool    $com        Use the help file in the component directory.	 * @param   string  $override   Use this URL instead of any other	 * @param   string  $component  Name of component to get Help (null for current component)	 *	 * @return  void	 *	 * @since   1.5	 */	public static function help($ref, $com = false, $override = null, $component = null)	{		$bar = JToolbar::getInstance('toolbar');		// Add a help button.		$bar->appendButton('Help', $ref, $com, $override, $component);	}	/**	 * Writes a cancel button that will go back to the previous page without doing	 * any other operation.	 *	 * @param   string  $alt   Alternative text.	 * @param   string  $href  URL of the href attribute.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function back($alt = 'JTOOLBAR_BACK', $href = 'javascript:history.back();')	{		$bar = JToolbar::getInstance('toolbar');		// Add a back button.		$bar->appendButton('Link', 'back', $alt, $href);	}	/**	 * Writes a media_manager button.	 *	 * @param   string  $directory  The sub-directory to upload the media to.	 * @param   string  $alt        An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function media_manager($directory = '', $alt = 'JTOOLBAR_UPLOAD')	{		$bar = JToolbar::getInstance('toolbar');		// Add an upload button.		$bar->appendButton('Popup', 'upload', $alt, 'index.php?option=com_media&tmpl=component&task=popupUpload&folder=' . $directory, 800, 520);	}	/**	 * Writes a common 'default' button for a record.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function makeDefault($task = 'default', $alt = 'JTOOLBAR_DEFAULT')	{		$bar = JToolbar::getInstance('toolbar');		// Add a default button.		$bar->appendButton('Standard', 'star', $alt, $task, true);	}	/**	 * Writes a common 'assign' button for a record.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function assign($task = 'assign', $alt = 'JTOOLBAR_ASSIGN')	{		$bar = JToolbar::getInstance('toolbar');		// Add an assign button.		$bar->appendButton('Standard', 'assign', $alt, $task, true);	}	/**	 * Writes the common 'new' icon for the button bar.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function addNew($task = 'add', $alt = 'JTOOLBAR_NEW', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a new button.		$bar->appendButton('Standard', 'new', $alt, $task, $check);	}	/**	 * Writes a common 'publish' button.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function publish($task = 'publish', $alt = 'JTOOLBAR_PUBLISH', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a publish button.		$bar->appendButton('Standard', 'publish', $alt, $task, $check);	}	/**	 * Writes a common 'publish' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function publishList($task = 'publish', $alt = 'JTOOLBAR_PUBLISH')	{		$bar = JToolbar::getInstance('toolbar');		// Add a publish button (list).		$bar->appendButton('Standard', 'publish', $alt, $task, true);	}	/**	 * Writes a common 'unpublish' button.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unpublish($task = 'unpublish', $alt = 'JTOOLBAR_UNPUBLISH', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add an unpublish button		$bar->appendButton('Standard', 'unpublish', $alt, $task, $check);	}	/**	 * Writes a common 'unpublish' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unpublishList($task = 'unpublish', $alt = 'JTOOLBAR_UNPUBLISH')	{		$bar = JToolbar::getInstance('toolbar');		// Add an unpublish button (list).		$bar->appendButton('Standard', 'unpublish', $alt, $task, true);	}	/**	 * Writes a common 'archive' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function archiveList($task = 'archive', $alt = 'JTOOLBAR_ARCHIVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add an archive button.		$bar->appendButton('Standard', 'archive', $alt, $task, true);	}	/**	 * Writes an unarchive button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unarchiveList($task = 'unarchive', $alt = 'JTOOLBAR_UNARCHIVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add an unarchive button (list).		$bar->appendButton('Standard', 'unarchive', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editList($task = 'edit', $alt = 'JTOOLBAR_EDIT')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit button.		$bar->appendButton('Standard', 'edit', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a template html.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editHtml($task = 'edit_source', $alt = 'JTOOLBAR_EDIT_HTML')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit html button.		$bar->appendButton('Standard', 'edithtml', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a template css.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editCss($task = 'edit_css', $alt = 'JTOOLBAR_EDIT_CSS')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit css button (hide).		$bar->appendButton('Standard', 'editcss', $alt, $task, true);	}	/**	 * Writes a common 'delete' button for a list of records.	 *	 * @param   string  $msg   Postscript for the 'are you sure' message.	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function deleteList($msg = '', $task = 'remove', $alt = 'JTOOLBAR_DELETE')	{		$bar = JToolbar::getInstance('toolbar');		// Add a delete button.		if ($msg)		{			$bar->appendButton('Confirm', $msg, 'delete', $alt, $task, true);		}		else		{			$bar->appendButton('Standard', 'delete', $alt, $task, true);		}	}	/**	 * Write a trash button that will move items to Trash Manager.	 *	 * @param   string  $task   An override for the task.	 * @param   string  $alt    An override for the alt text.	 * @param   bool    $check	 *	 * @return  void	 *	 * @since   1.5	 */	public static function trash($task = 'remove', $alt = 'JTOOLBAR_TRASH', $check = true)	{		$bar = JToolbar::getInstance('toolbar');		// Add a trash button.		$bar->appendButton('Standard', 'trash', $alt, $task, $check, false);	}	/**	 * Writes a save button for a given option.	 * Apply operation leads to a save action only (does not leave edit mode).	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function apply($task = 'apply', $alt = 'JTOOLBAR_APPLY')	{		$bar = JToolbar::getInstance('toolbar');		// Add an apply button		$bar->appendButton('Standard', 'apply', $alt, $task, false);	}	/**	 * Writes a save button for a given option.	 * Save operation leads to a save and then close action.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function save($task = 'save', $alt = 'JTOOLBAR_SAVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save button.		$bar->appendButton('Standard', 'save', $alt, $task, false);	}	/**	 * Writes a save and create new button for a given option.	 * Save and create operation leads to a save and then add action.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function save2new($task = 'save2new', $alt = 'JTOOLBAR_SAVE_AND_NEW')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'save-new', $alt, $task, false);	}	/**	 * Writes a save as copy button for a given option.	 * Save as copy operation leads to a save after clearing the key,	 * then returns user to edit mode with new key.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function save2copy($task = 'save2copy', $alt = 'JTOOLBAR_SAVE_AS_COPY')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'save-copy', $alt, $task, false);	}	/**	 * Writes a checkin button for a given option.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.7	 */	public static function checkin($task = 'checkin', $alt = 'JTOOLBAR_CHECKIN', $check = true)	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'checkin', $alt, $task, $check);	}	/**	 * Writes a cancel button and invokes a cancel operation (eg a checkin).	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function cancel($task = 'cancel', $alt = 'JTOOLBAR_CANCEL')	{		$bar = JToolbar::getInstance('toolbar');		// Add a cancel button.		$bar->appendButton('Standard', 'cancel', $alt, $task, false);	}	/**	 * Writes a configuration button and invokes a cancel operation (eg a checkin).	 *	 * @param   string  $component  The name of the component, eg, com_content.	 * @param   int     $height     The height of the popup. [UNUSED]	 * @param   int     $width      The width of the popup. [UNUSED]	 * @param   string  $alt        The name of the button.	 * @param   string  $path       An alternative path for the configuation xml relative to JPATH_SITE.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function preferences($component, $height = '550', $width = '875', $alt = 'JToolbar_Options', $path = '')	{		$component = urlencode($component);		$path = urlencode($path);		$bar = JToolBar::getInstance('toolbar');		$uri = (string) JUri::getInstance();		$return = urlencode(base64_encode($uri));		// Add a button linking to config for component.		$bar->appendButton('Link', 'options', $alt, 'index.php?option=com_config&amp;view=component&amp;component=' . $component . '&amp;path=' . $path . '&amp;return=' . $return);	}}/** * Utility class for the submenu. * * @package     Joomla.Administrator * @since       1.5 * @deprecated  4.0  Use JHtmlSidebar instead. */abstract class JSubMenuHelper{	/**	 * Menu entries	 *	 * @var    array	 * @since  3.0	 * @deprecated  4.0	 */	protected static $entries = array();	/**	 * Filters	 *	 * @var    array	 * @since  3.0	 * @deprecated  4.0	 */	protected static $filters = array();	/**	 * Value for the action attribute of the form.	 *	 * @var    string	 * @since  3.0	 * @deprecated  4.0	 */	protected static $action = '';	/**	 * Method to add a menu item to submenu.	 *	 * @param   string	$name	 Name of the menu item.	 * @param   string	$link	 URL of the menu item.	 * @param   bool	$active  True if the item is active, false otherwise.	 *	 * @return  void	 *	 * @since   1.5	 * @deprecated  4.0  Use JHtmlSidebar::addEntry() instead.	 */	public static function addEntry($name, $link = '', $active = false)	{		JLog::add('JSubMenuHelper::addEntry() is deprecated. Use JHtmlSidebar::addEntry() instead.', JLog::WARNING, 'deprecated');		array_push(self::$entries, array($name, $link, $active));	}	/**	 * Returns an array of all submenu entries	 *	 * @return  array	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getEntries() instead.	 */	public static function getEntries()	{		JLog::add('JSubMenuHelper::getEntries() is deprecated. Use JHtmlSidebar::getEntries() instead.', JLog::WARNING, 'deprecated');		return self::$entries;	}	/**	 * Method to add a filter to the submenu	 *	 * @param   string	$label      Label for the menu item.	 * @param   string	$name       name for the filter. Also used as id.	 * @param   string	$options    options for the select field.	 * @param   bool	$noDefault  Don't the label as the empty option	 *	 * @return  void	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::addFilter() instead.	 */	public static function addFilter($label, $name, $options, $noDefault = false)	{		JLog::add('JSubMenuHelper::addFilter() is deprecated. Use JHtmlSidebar::addFilter() instead.', JLog::WARNING, 'deprecated');		array_push(self::$filters, array('label' => $label, 'name' => $name, 'options' => $options, 'noDefault' => $noDefault));	}	/**	 * Returns an array of all filters	 *	 * @return  array	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getFilters() instead.	 */	public static function getFilters()	{		JLog::add('JSubMenuHelper::getFilters() is deprecated. Use JHtmlSidebar::getFilters() instead.', JLog::WARNING, 'deprecated');		return self::$filters;	}	/**	 * Set value for the action attribute of the filter form	 *	 * @param   string  $action  Value for the action attribute of the form	 *	 * @return  void	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::setAction() instead.	 */	public static function setAction($action)	{		JLog::add('JSubMenuHelper::setAction() is deprecated. Use JHtmlSidebar::setAction() instead.', JLog::WARNING, 'deprecated');		self::$action = $action;	}	/**	 * Get value for the action attribute of the filter form	 *	 * @return  string  Value for the action attribute of the form	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getAction() instead.	 */	public static function getAction()	{		JLog::add('JSubMenuHelper::getAction() is deprecated. Use JHtmlSidebar::getAction() instead.', JLog::WARNING, 'deprecated');		return self::$action;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.path');require_once JPATH_COMPONENT . '/helpers/menus.php';/** * Menu Item Model for Menus. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusModelItem extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_MENUS_ITEM';	/**	 * @var        string    The help screen key for the menu item.	 * @since   1.6	 */	protected $helpKey = 'JHELP_MENUS_MENU_ITEM_MANAGER_EDIT';	/**	 * @var        string    The help screen base URL for the menu item.	 * @since   1.6	 */	protected $helpURL;	/**	 * @var        boolean    True to use local lookup for the help screen.	 * @since   1.6	 */	protected $helpLocal = false;	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return $user->authorise('core.delete', 'com_menus.item.' . (int) $record->id);		}	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		if (!empty($record->id))		{			return $user->authorise('core.edit.state', 'com_menus.item.' . (int) $record->id);		}		// Default to component settings if menu item not known.		else		{			return parent::canEditState($record);		}	}	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.6	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('COM_MENUS_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['menu_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['menu_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['menu_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		return true;	}	/**	 * Batch copy menu items to a new menu or parent.	 *	 * @param   integer  $value     The new menu or sub-item.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   1.6	 */	protected function batchCopy($value, $pks, $contexts)	{		// $value comes as {menutype}.{parent_id}		$parts = explode('.', $value);		$menuType = $parts[0];		$parentId = (int) JArrayHelper::getValue($parts, 1, 0);		$table = $this->getTable();		$db = $this->getDbo();		$query = $db->getQuery(true);		$i = 0;		// Check that the parent exists		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}		}		// If the parent is 0, set it to the ID of the root item in the tree		if (empty($parentId))		{			if (!$parentId = $table->getRootId())			{				$this->setError($db->getErrorMsg());				return false;			}		}		// Check that user has create permission for menus		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_CREATE'));			return false;		}		// We need to log the parent ID		$parents = array();		// Calculate the emergency stop count as a precaution against a runaway loop bug		$query->select('COUNT(id)')			->from($db->quoteName('#__menu'));		$db->setQuery($query);		try		{			$count = $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Parent exists so we let's proceed		while (!empty($pks) && $count > 0)		{			// Pop the first id off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Copy is a bit tricky, because we also need to copy the children			$query->clear()				->select('id')				->from($db->quoteName('#__menu'))				->where('lft > ' . (int) $table->lft)				->where('rgt < ' . (int) $table->rgt);			$db->setQuery($query);			$childIds = $db->loadColumn();			// Add child ID's to the array only if they aren't already there.			foreach ($childIds as $childId)			{				if (!in_array($childId, $pks))				{					array_push($pks, $childId);				}			}			// Make a copy of the old ID and Parent ID			$oldId = $table->id;			$oldParentId = $table->parent_id;			// Reset the id because we are making a copy.			$table->id = 0;			// If we a copying children, the Old ID will turn up in the parents list			// otherwise it's a new top level item			$table->parent_id = isset($parents[$oldParentId]) ? $parents[$oldParentId] : $parentId;			$table->menutype = $menuType;			// Set the new location in the tree for the node.			$table->setLocation($table->parent_id, 'last-child');			// TODO: Deal with ordering?			//$table->ordering	= 1;			$table->level = null;			$table->lft = null;			$table->rgt = null;			$table->home = 0;			// Alter the title & alias			list($title, $alias) = $this->generateNewTitle($table->parent_id, $table->alias, $table->title);			$table->title = $title;			$table->alias = $alias;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;			// Now we log the old 'parent' to the new 'parent'			$parents[$oldId] = $table->id;			$count--;		}		// Rebuild the hierarchy.		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Rebuild the tree path.		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch move menu items to a new menu or parent.	 *	 * @param   integer  $value     The new menu or sub-item.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	protected function batchMove($value, $pks, $contexts)	{		// $value comes as {menutype}.{parent_id}		$parts = explode('.', $value);		$menuType = $parts[0];		$parentId = (int) JArrayHelper::getValue($parts, 1, 0);		$table = $this->getTable();		$db = $this->getDbo();		$query = $db->getQuery(true);		// Check that the parent exists.		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}		}		// Check that user has create and edit permission for menus		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_CREATE'));			return false;		}		if (!$user->authorise('core.edit', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_EDIT'));			return false;		}		// We are going to store all the children and just moved the menutype		$children = array();		// Parent exists so we let's proceed		foreach ($pks as $pk)		{			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Set the new location in the tree for the node.			$table->setLocation($parentId, 'last-child');			// Set the new Parent Id			$table->parent_id = $parentId;			// Check if we are moving to a different menu			if ($menuType != $table->menutype)			{				// Add the child node ids to the children array.				$query->clear()					->select($db->quoteName('id'))					->from($db->quoteName('#__menu'))					->where($db->quoteName('lft') . ' BETWEEN ' . (int) $table->lft . ' AND ' . (int) $table->rgt);				$db->setQuery($query);				$children = array_merge($children, (array) $db->loadColumn());			}			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Rebuild the tree path.			if (!$table->rebuildPath())			{				$this->setError($table->getError());				return false;			}		}		// Process the child rows		if (!empty($children))		{			// Remove any duplicates and sanitize ids.			$children = array_unique($children);			JArrayHelper::toInteger($children);			// Update the menutype field in all nodes where necessary.			$query->clear()				->update($db->quoteName('#__menu'))				->set($db->quoteName('menutype') . ' = ' . $db->quote($menuType))				->where($db->quoteName('id') . ' IN (' . implode(',', $children) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to check if you can save a record.	 *	 * @param   array     $data    An array of input data.	 * @param   string    $key     The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function canSave($data = array(), $key = 'id')	{		return JFactory::getUser()->authorise('core.edit', $this->option);	}	/**	 * Method to get the row form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item = $this->getItem();			$this->setState('item.link', $item->link);			// The type should already be set.		}		else		{			$this->setState('item.link', JArrayHelper::getValue($data, 'link'));			$this->setState('item.type', JArrayHelper::getValue($data, 'type'));		}		// Get the form.		$form = $this->loadForm('com_menus.item', 'item', array('control' => 'jform', 'load_data' => $loadData), true);		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('menuordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is an article you can edit.			$form->setFieldAttribute('menuordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = array_merge((array) $this->getItem(), (array) JFactory::getApplication()->getUserState('com_menus.edit.item.data', array()));		$this->preprocessData('com_menus.item', $data);		return $data;	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL, 'local' => $this->helpLocal);	}	/**	 * Method to get a menu item.	 *	 * @param   integer    $pk    An optional id of the object to get, otherwise the id from the model state is used.	 *	 * @return  mixed  Menu item data object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('item.id');		// Get a level row instance.		$table = $this->getTable();		// Attempt to load the row.		$table->load($pk);		// Check for a table object error.		if ($error = $table->getError())		{			$this->setError($error);			return false;		}		// Prime required properties.		if ($type = $this->getState('item.type'))		{			$table->type = $type;		}		if (empty($table->id))		{			$table->parent_id = $this->getState('item.parent_id');			$table->menutype = $this->getState('item.menutype');			$table->params = '{}';		}		// If the link has been set in the state, possibly changing link type.		if ($link = $this->getState('item.link'))		{			// Check if we are changing away from the actual link type.			if (MenusHelper::getLinkKey($table->link) != MenusHelper::getLinkKey($link))			{				$table->link = $link;			}		}		switch ($table->type)		{			case 'alias':				$table->component_id = 0;				$args = array();				parse_str(parse_url($table->link, PHP_URL_QUERY), $args);				break;			case 'separator':			case 'heading':				$table->link = '';				$table->component_id = 0;				break;			case 'url':				$table->component_id = 0;				parse_str(parse_url($table->link, PHP_URL_QUERY));				break;			case 'component':			default:				// Enforce a valid type.				$table->type = 'component';				// Ensure the integrity of the component_id field is maintained, particularly when changing the menu item type.				$args = array();				parse_str(parse_url($table->link, PHP_URL_QUERY), $args);				if (isset($args['option']))				{					// Load the language file for the component.					$lang = JFactory::getLanguage();					$lang->load($args['option'], JPATH_ADMINISTRATOR, null, false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR . '/components/' . $args['option'], null, false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR . '/components/' . $args['option'], $lang->getDefault(), false, false);					// Determine the component id.					$component = JComponentHelper::getComponent($args['option']);					if (isset($component->id))					{						$table->component_id = $component->id;					}				}				break;		}		// We have a valid type, inject it into the state for forms to use.		$this->setState('item.type', $table->type);		// Convert to the JObject before adding the params.		$properties = $table->getProperties(1);		$result = JArrayHelper::toObject($properties);		// Convert the params field to an array.		$registry = new JRegistry;		$registry->loadString($table->params);		$result->params = $registry->toArray();		// Merge the request arguments in to the params for a component.		if ($table->type == 'component')		{			// Note that all request arguments become reserved parameter names.			$result->request = $args;			$result->params = array_merge($result->params, $args);		}		if ($table->type == 'alias')		{			// Note that all request arguments become reserved parameter names.			$args = array();			parse_str(parse_url($table->link, PHP_URL_QUERY), $args);			$result->params = array_merge($result->params, $args);		}		if ($table->type == 'url')		{			// Note that all request arguments become reserved parameter names.			$args = array();			parse_str(parse_url($table->link, PHP_URL_QUERY), $args);			$result->params = array_merge($result->params, $args);		}		// Load associated menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			if ($pk != null)			{				$result->associations = MenusHelper::getAssociations($pk);			}			else			{				$result->associations = array();			}		}		$result->menuordering = $pk;		return $result;	}	/**	 * Get the list of modules not in trash.	 *	 * @return  mixed  An array of module records (id, title, position), or false on error.	 * @since   1.6	 */	public function getModules()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		// Join on the module-to-menu mapping table.		// We are only interested if the module is displayed on ALL or THIS menu item (or the inverse ID number).		//sqlsrv changes for modulelink to menu manager		$query->select('a.id, a.title, a.position, a.published, map.menuid')			->from('#__modules AS a')			->join('LEFT', sprintf('#__modules_menu AS map ON map.moduleid = a.id AND map.menuid IN (0, %1$d, -%1$d)', $this->getState('item.id')))			->select('(SELECT COUNT(*) FROM #__modules_menu WHERE moduleid = a.id AND menuid < 0) AS ' . $db->quoteName('except'));		// Join on the asset groups table.		$query->select('ag.title AS access_title')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access')			->where('a.published >= 0')			->where('a.client_id = 0')			->order('a.position, a.ordering');		$db->setQuery($query);		try		{			$result = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		return $result;	}	/**	 * A protected method to get the where clause for the reorder	 * This ensures that the row will be moved relative to a row with the same menutype	 *	 * @param   JTableMenu $table instance	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		return 'menutype = ' . $this->_db->quote($table->menutype);	}	/**	 * Returns a Table object, always creating it	 *	 * @param   type      $type      The table type to instantiate	 * @param   string    $prefix    A prefix for the table class name. Optional.	 * @param   array     $config    Configuration array for model. Optional.	 *	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Menu', $prefix = 'MenusTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState('item.id', $pk);		if (!($parentId = $app->getUserState('com_menus.edit.item.parent_id')))		{			$parentId = $app->input->getInt('parent_id');		}		$this->setState('item.parent_id', $parentId);		$menuType = $app->getUserState('com_menus.edit.item.menutype');		if ($app->input->getString('menutype', false))		{			$menuType = $app->input->getString('menutype', 'mainmenu');		}		$this->setState('item.menutype', $menuType);		if (!($type = $app->getUserState('com_menus.edit.item.type')))		{			$type = $app->input->get('type');			// Note a new menu item will have no field type.			// The field is required so the user has to change it.		}		$this->setState('item.type', $type);		if ($link = $app->getUserState('com_menus.edit.item.link'))		{			$this->setState('item.link', $link);		}		// Load the parameters.		$params = JComponentHelper::getParams('com_menus');		$this->setState('params', $params);	}	/**	 * @param   object    $form    A form object.	 * @param   mixed     $data    The data expected for the form.	 *	 * @return  void	 * @since   1.6	 * @throws    Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		$link = $this->getState('item.link');		$type = $this->getState('item.type');		$formFile = false;		// Initialise form with component view params if available.		if ($type == 'component')		{			$link = htmlspecialchars_decode($link);			// Parse the link arguments.			$args = array();			parse_str(parse_url(htmlspecialchars_decode($link), PHP_URL_QUERY), $args);			// Confirm that the option is defined.			$option = '';			$base = '';			if (isset($args['option']))			{				// The option determines the base path to work with.				$option = $args['option'];				$base = JPATH_SITE . '/components/' . $option;			}			// Confirm a view is defined.			$formFile = false;			if (isset($args['view']))			{				$view = $args['view'];				// Determine the layout to search for.				if (isset($args['layout']))				{					$layout = $args['layout'];				}				else				{					$layout = 'default';				}				$formFile = false;				// Check for the layout XML file. Use standard xml file if it exists.				$path = JPath::clean($base . '/views/' . $view . '/tmpl/' . $layout . '.xml');				if (is_file($path))				{					$formFile = $path;				}				// if custom layout, get the xml file from the template folder				// template folder is first part of file name -- template:folder				if (!$formFile && (strpos($layout, ':') > 0))				{					$temp = explode(':', $layout);					$templatePath = JPATH::clean(JPATH_SITE . '/templates/' . $temp[0] . '/html/' . $option . '/' . $view . '/' . $temp[1] . '.xml');					if (is_file($templatePath))					{						$formFile = $templatePath;					}				}			}			//Now check for a view manifest file			if (!$formFile)			{				if (isset($view) && is_file($path = JPath::clean($base . '/views/' . $view . '/metadata.xml')))				{					$formFile = $path;				}				else				{					//Now check for a component manifest file					$path = JPath::clean($base . '/metadata.xml');					if (is_file($path))					{						$formFile = $path;					}				}			}		}		if ($formFile)		{			// If an XML file was found in the component, load it first.			// We need to qualify the full path to avoid collisions with component file names.			if ($form->loadFile($formFile, true, '/metadata') == false)			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Attempt to load the xml file.			if (!$xml = simplexml_load_file($formFile))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Get the help data from the XML file if present.			$help = $xml->xpath('/metadata/layout/help');		}		else		{			// We don't have a component. Load the form XML to get the help path			$xmlFile = JPath::find(JPATH_ROOT . '/administrator/components/com_menus/models/forms', 'item_' . $type . '.xml');			// Attempt to load the xml file.			if ($xmlFile && !$xml = simplexml_load_file($xmlFile))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Get the help data from the XML file if present.			$help = $xml->xpath('/form/help');		}		if (!empty($help))		{			$helpKey = trim((string) $help[0]['key']);			$helpURL = trim((string) $help[0]['url']);			$helpLoc = trim((string) $help[0]['local']);			$this->helpKey = $helpKey ? $helpKey : $this->helpKey;			$this->helpURL = $helpURL ? $helpURL : $this->helpURL;			$this->helpLocal = (($helpLoc == 'true') || ($helpLoc == '1') || ($helpLoc == 'local')) ? true : false;		}		// Now load the component params.		// TODO: Work out why 'fixing' this breaks JForm		if ($isNew = false)		{			$path = JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $option . '/config.xml');		}		else		{			$path = 'null';		}		if (is_file($path))		{			// Add the component params last of all to the existing form.			if (!$form->load($path, true, '/config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Load the specific type file		if (!$form->loadFile('item_' . $type, false, false))		{			throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));		}		// Association menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_MENUS_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if ($tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'menuitem');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');					$option = $field->addChild('option', 'COM_MENUS_ITEM_FIELD_ASSOCIATION_NO_VALUE');					$option->addAttribute('value', '');				}			}			if ($add)			{				$form->load($addform, false);			}		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method rebuild the entire nested set tree.	 *	 * @return  boolean  False on failure or error, true otherwise.	 * @since   1.6	 */	public function rebuild()	{		// Initialiase variables.		$db = $this->getDbo();		$table = $this->getTable();		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Convert the parameters not in JSON format.		$db->setQuery(			'SELECT id, params' .				' FROM #__menu' .				' WHERE params NOT LIKE ' . $db->quote('{%') .				'  AND params <> ' . $db->quote('')		);		try		{			$items = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		foreach ($items as &$item)		{			$registry = new JRegistry;			$registry->loadString($item->params);			$params = (string) $registry;			$db->setQuery(				'UPDATE #__menu' .					' SET params = ' . $db->quote($params) .					' WHERE id = ' . (int) $item->id			);			if (!$db->execute())			{				$this->setError($error);				return false;			}			unset($registry);		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to save the form data.	 *	 * @param   array  $data    The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$pk = (!empty($data['id'])) ? $data['id'] : (int) $this->getState('item.id');		$isNew = true;		$table = $this->getTable();		// Load the row if saving an existing item.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		if (!$isNew && $table->menutype == $data['menutype'])		{			if ($table->parent_id == $data['parent_id'])			{				// If first is chosen make the item the first child of the selected parent.				if ($data['menuordering'] == -1)				{					$table->setLocation($data['parent_id'], 'first-child');				}				// If last is chosen make it the last child of the selected parent.				elseif ($data['menuordering'] == -2)				{					$table->setLocation($data['parent_id'], 'last-child');				}				// Don't try to put an item after itself. All other ones put after the selected item.				// $data['id'] is empty means it's a save as copy				elseif ($data['menuordering'] && $table->id != $data['menuordering'] || empty($data['id']))				{					$table->setLocation($data['menuordering'], 'after');				}				// Just leave it where it is if no change is made.				elseif ($data['menuordering'] && $table->id == $data['menuordering'])				{					unset($data['menuordering']);				}			}			// Set the new parent id if parent id not matched and put in last position			else			{				$table->setLocation($data['parent_id'], 'last-child');			}		}		// We have a new item, so it is not a change.		elseif ($isNew)		{			$table->setLocation($data['parent_id'], 'last-child');		}		// The menu type has changed so we need to just put this at the bottom		// of the root level.		else		{			$table->setLocation(1, 'last-child');		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Alter the title & alias for save as copy.  Also, unset the home record.		if (!$isNew && $data['id'] == 0)		{			list($title, $alias) = $this->generateNewTitle($table->parent_id, $table->alias, $table->title);			$table->title = $title;			$table->alias = $alias;			$table->published = 0;			$table->home = 0;		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Rebuild the tree path.		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		$this->setState('item.id', $table->id);		$this->setState('item.menutype', $table->menutype);		// Load associated menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			// Adding self to the association			$associations = $data['associations'];			foreach ($associations as $tag => $id)			{				if (empty($id))				{					unset($associations[$tag]);				}			}			// Detecting all item menus			$all_language = $table->language == '*';			if ($all_language && !empty($associations))			{				JError::raiseNotice(403, JText::_('COM_MENUS_ERROR_ALL_LANGUAGE_ASSOCIATED'));			}			$associations[$table->language] = $table->id;			// Deleting old association for these items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->delete('#__associations')				->where('context=' . $db->quote('com_menus.item'))				->where('id IN (' . implode(',', $associations) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}			if (!$all_language && count($associations) > 1)			{				// Adding new association for these items				$key = md5(json_encode($associations));				$query->clear()					->insert('#__associations');				foreach ($associations as $tag => $id)				{					$query->values($id . ',' . $db->quote('com_menus.item') . ',' . $db->quote($key));				}				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}		}		// Clean the cache		$this->cleanCache();		if (isset($data['link']))		{			$base = JURI::base();			$juri = JURI::getInstance($base . $data['link']);			$option = $juri->getVar('option');			// Clean the cache			parent::cleanCache($option);		}		return true;	}	/**	 * Method to save the reordered nested set tree.	 * First we save the new order values in the lft values of the changed ids.	 * Then we invoke the table rebuild to implement the new ordering.	 *	 * @param   array  $idArray      id's of rows to be reordered	 * @param   array  $lft_array    lft values of rows to be reordered	 *	 * @return  boolean false on failuer or error, true otherwise	 * @since   1.6	 */	public function saveorder($idArray = null, $lft_array = null)	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->saveorder($idArray, $lft_array))		{			$this->setError($table->getError());			return false;		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the home state of one or more items.	 *	 * @param   array    $pks      A list of the primary keys to change.	 * @param   integer  $value    The value of the home state.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function setHome(&$pks, $value = 1)	{		$table = $this->getTable();		$pks = (array) $pks;		$user = JFactory::getUser();		$languages = array();		$onehome = false;		// Remember that we can set a home page for different languages,		// so we need to loop through the primary key array.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if (!array_key_exists($table->language, $languages))				{					$languages[$table->language] = true;					if ($table->home == $value)					{						unset($pks[$i]);						JError::raiseNotice(403, JText::_('COM_MENUS_ERROR_ALREADY_HOME'));					}					else					{						$table->home = $value;						if ($table->language == '*')						{							$table->published = 1;						}						if (!$this->canSave($table))						{							// Prune items that you can't change.							unset($pks[$i]);							JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));						}						elseif (!$table->check())						{							// Prune the items that failed pre-save checks.							unset($pks[$i]);							JError::raiseWarning(403, $table->getError());						}						elseif (!$table->store())						{							// Prune the items that could not be stored.							unset($pks[$i]);							JError::raiseWarning(403, $table->getError());						}					}				}				else				{					unset($pks[$i]);					if (!$onehome)					{						$onehome = true;						JError::raiseNotice(403, JText::sprintf('COM_MENUS_ERROR_ONE_HOME'));					}				}			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array       &$pks   A list of the primary keys to change.	 * @param   integer     $value  The value of the published state.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function publish(&$pks, $value = 1)	{		$table = $this->getTable();		$pks = (array) $pks;		// Default menu item existence checks.		if ($value != 1)		{			foreach ($pks as $i => $pk)			{				if ($table->load($pk) && $table->home && $table->language == '*')				{					// Prune items that you can't change.					JError::raiseWarning(403, JText::_('JLIB_DATABASE_ERROR_MENU_UNPUBLISH_DEFAULT_HOME'));					unset($pks[$i]);					break;				}			}		}		// Clean the cache		$this->cleanCache();		// Ensure that previous checks doesn't empty the array		if (empty($pks))		{			return true;		}		return parent::publish($pks, $value);	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   1.6	 */	protected function generateNewTitle($parent_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'parent_id' => $parent_id)))		{			if ($title == $table->title)			{				$title = JString::increment($title);			}			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}	/**	 * Custom clean cache method	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_modules');		parent::cleanCache('mod_menu');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view level controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerLevel extends JControllerForm{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_LEVEL';	/**	 * Method to check if you can save a new or existing record.	 *	 * Overrides JControllerForm::allowSave to check the core.admin permission.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowSave($data, $key = 'id')	{		return (JFactory::getUser()->authorise('core.admin', $this->option) && parent::allowSave($data, $key));	}	/**	 * Method to remove a record.	 */	public function delete()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$user = JFactory::getUser();		$ids  = $this->input->get('cid', array(), 'array');		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		elseif (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_USERS_NO_LEVELS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			JArrayHelper::toInteger($ids);			// Remove the items.			if (!$model->delete($ids))			{				JError::raiseWarning(500, $model->getError());			}			else {				$this->setMessage(JText::plural('COM_USERS_N_LEVELS_DELETED', count($ids)));			}		}		$this->setRedirect('index.php?option=com_users&view=levels');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexerHelper', __DIR__ . '/helper.php');JLoader::register('FinderIndexerTaxonomy', __DIR__ . '/taxonomy.php');JLoader::register('FinderHelperRoute', JPATH_SITE . '/components/com_finder/helpers/route.php');JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * Query class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerQuery{	/**	 * Flag to show whether the query can return results.	 *	 * @var    boolean	 * @since  2.5	 */	public $search;	/**	 * The query input string.	 *	 * @var    string	 * @since  2.5	 */	public $input;	/**	 * The language of the query.	 *	 * @var    string	 * @since  2.5	 */	public $language;	/**	 * The query string matching mode.	 *	 * @var    string	 * @since  2.5	 */	public $mode;	/**	 * The included tokens.	 *	 * @var    array	 * @since  2.5	 */	public $included = array();	/**	 * The excluded tokens.	 *	 * @var    array	 * @since  2.5	 */	public $excluded = array();	/**	 * The tokens to ignore because no matches exist.	 *	 * @var    array	 * @since  2.5	 */	public $ignored = array();	/**	 * The operators used in the query input string.	 *	 * @var    array	 * @since  2.5	 */	public $operators = array();	/**	 * The terms to highlight as matches.	 *	 * @var    array	 * @since  2.5	 */	public $highlight = array();	/**	 * The number of matching terms for the query input.	 *	 * @var    integer	 * @since  2.5	 */	public $terms;	/**	 * The static filter id.	 *	 * @var    string	 * @since  2.5	 */	public $filter;	/**	 * The taxonomy filters. This is a multi-dimensional array of taxonomy	 * branches as the first level and then the taxonomy nodes as the values.	 *	 * For example:	 * $filters = array(	 *     'Type' = array(10, 32, 29, 11, ...);	 *     'Label' = array(20, 314, 349, 91, 82, ...);	 *        ...	 * );	 *	 * @var    array	 * @since  2.5	 */	public $filters = array();	/**	 * The start date filter.	 *	 * @var    string	 * @since  2.5	 */	public $date1;	/**	 * The end date filter.	 *	 * @var    string	 * @since  2.5	 */	public $date2;	/**	 * The start date filter modifier.	 *	 * @var    string	 * @since  2.5	 */	public $when1;	/**	 * The end date filter modifier.	 *	 * @var    string	 * @since  2.5	 */	public $when2;	/**	 * Method to instantiate the query object.	 *	 * @param   array  $options  An array of query options.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function __construct($options)	{		// Get the input string.		$this->input = isset($options['input']) ? $options['input'] : null;		// Get the empty query setting.		$this->empty = isset($options['empty']) ? (bool) $options['empty'] : false;		// Get the input language.		$this->language = !empty($options['language']) ? $options['language'] : FinderIndexerHelper::getDefaultLanguage();		$this->language = FinderIndexerHelper::getPrimaryLanguage($this->language);		// Get the matching mode.		$this->mode = 'AND';		// Initialize the temporary date storage.		$this->dates = new JRegistry;		// Populate the temporary date storage.		if (isset($options['date1']) && !empty($options['date1']))		{			$this->dates->set('date1', $options['date1']);		}		if (isset($options['date2']) && !empty($options['date1']))		{			$this->dates->set('date2', $options['date2']);		}		if (isset($options['when1']) && !empty($options['date1']))		{			$this->dates->set('when1', $options['when1']);		}		if (isset($options['when2']) && !empty($options['date1']))		{			$this->dates->set('when2', $options['when2']);		}		// Process the static taxonomy filters.		if (isset($options['filter']) && !empty($options['filter']))		{			$this->processStaticTaxonomy($options['filter']);		}		// Process the dynamic taxonomy filters.		if (isset($options['filters']) && !empty($options['filters']))		{			$this->processDynamicTaxonomy($options['filters']);		}		// Get the date filters.		$d1 = $this->dates->get('date1');		$d2 = $this->dates->get('date2');		$w1 = $this->dates->get('when1');		$w2 = $this->dates->get('when2');		// Process the date filters.		if (!empty($d1) || !empty($d2))		{			$this->processDates($d1, $d2, $w1, $w2);		}		// Process the input string.		$this->processString($this->input, $this->language, $this->mode);		// Get the number of matching terms.		foreach ($this->included as $token)		{			$this->terms += count($token->matches);		}		// Remove the temporary date storage.		unset($this->dates);		/*		 * Lastly, determine whether this query can return a result set.		 */		// Check if we have a query string.		if (!empty($this->input))		{			$this->search = true;		}		// Check if we can search without a query string.		elseif ($this->empty && (!empty($this->filter) || !empty($this->filters) || !empty($this->date1) || !empty($this->date2)))		{			$this->search = true;		}		// We do not have a valid search query.		else		{			$this->search = false;		}	}	/**	 * Method to convert the query object into a URI string.	 *	 * @param   string  $base  The base URI. [optional]	 *	 * @return  string  The complete query URI.	 *	 * @since   2.5	 */	public function toURI($base = null)	{		// Set the base if not specified.		if (empty($base))		{			$base = 'index.php?option=com_finder&view=search';		}		// Get the base URI.		$uri = JURI::getInstance($base);		// Add the static taxonomy filter if present.		if (!empty($this->filter))		{			$uri->setVar('f', $this->filter);		}		// Get the filters in the request.		$input = JFactory::getApplication()->input;		$t = $input->request->get('t', array(), 'array');		// Add the dynamic taxonomy filters if present.		if (!empty($this->filters))		{			foreach ($this->filters as $nodes)			{				foreach ($nodes as $node)				{					if (!in_array($node, $t))					{						continue;					}					$uri->setVar('t[]', $node);				}			}		}		// Add the input string if present.		if (!empty($this->input))		{			$uri->setVar('q', $this->input);		}		// Add the start date if present.		if (!empty($this->date1))		{			$uri->setVar('d1', $this->date1);		}		// Add the end date if present.		if (!empty($this->date2))		{			$uri->setVar('d2', $this->date2);		}		// Add the start date modifier if present.		if (!empty($this->when1))		{			$uri->setVar('w1', $this->when1);		}		// Add the end date modifier if present.		if (!empty($this->when2))		{			$uri->setVar('w2', $this->when2);		}		// Add a menu item id if one is not present.		if (!$uri->getVar('Itemid'))		{			// Get the menu item id.			$query = array(				'view' => $uri->getVar('view'),				'f' => $uri->getVar('f'),				'q' => $uri->getVar('q')			);			$item = FinderHelperRoute::getItemid($query);			// Add the menu item id if present.			if ($item !== null)			{				$uri->setVar('Itemid', $item);			}		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get a list of excluded search term ids.	 *	 * @return  array  An array of excluded term ids.	 *	 * @since   2.5	 */	public function getExcludedTermIds()	{		$results = array();		// Iterate through the excluded tokens and compile the matching terms.		for ($i = 0, $c = count($this->excluded); $i < $c; $i++)		{			$results = array_merge($results, $this->excluded[$i]->matches);		}		// Sanitize the terms.		//@TODO: Should toInteger use $return?		$return = array_unique($results);		JArrayHelper::toInteger($results);		return $results;	}	/**	 * Method to get a list of included search term ids.	 *	 * @return  array  An array of included term ids.	 *	 * @since   2.5	 */	public function getIncludedTermIds()	{		$results = array();		// Iterate through the included tokens and compile the matching terms.		for ($i = 0, $c = count($this->included); $i < $c; $i++)		{			// Check if we have any terms.			if (empty($this->included[$i]->matches))			{				continue;			}			// Get the term.			$term = $this->included[$i]->term;			// Prepare the container for the term if necessary.			if (!array_key_exists($term, $results))			{				$results[$term] = array();			}			// Add the matches to the stack.			$results[$term] = array_merge($results[$term], $this->included[$i]->matches);		}		// Sanitize the terms.		foreach ($results as $key => $value)		{			$results[$key] = array_unique($results[$key]);			JArrayHelper::toInteger($results[$key]);		}		return $results;	}	/**	 * Method to get a list of required search term ids.	 *	 * @return  array  An array of required term ids.	 *	 * @since   2.5	 */	public function getRequiredTermIds()	{		$results = array();		// Iterate through the included tokens and compile the matching terms.		for ($i = 0, $c = count($this->included); $i < $c; $i++)		{			// Check if the token is required.			if ($this->included[$i]->required)			{				// Get the term.				$term = $this->included[$i]->term;				// Prepare the container for the term if necessary.				if (!array_key_exists($term, $results))				{					$results[$term] = array();				}				// Add the matches to the stack.				$results[$term] = array_merge($results[$term], $this->included[$i]->matches);			}		}		// Sanitize the terms.		foreach ($results as $key => $value)		{			$results[$key] = array_unique($results[$key]);			JArrayHelper::toInteger($results[$key]);		}		return $results;	}	/**	 * Method to process the static taxonomy input. The static taxonomy input	 * comes in the form of a pre-defined search filter that is assigned to the	 * search form.	 *	 * @param   integer  $filterId  The id of static filter.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function processStaticTaxonomy($filterId)	{		// Get the database object.		$db = JFactory::getDbo();		// Initialize user variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Load the predefined filter.		$query = $db->getQuery(true)			->select('f.data, f.params')			->from($db->quoteName('#__finder_filters') . ' AS f')			->where('f.filter_id = ' . (int) $filterId);		$db->setQuery($query);		$return = $db->loadObject();		// Check the returned filter.		if (empty($return))		{			return false;		}		// Set the filter.		$this->filter = (int) $filterId;		// Get a parameter object for the filter date options.		$registry = new JRegistry;		$registry->loadString($return->params);		$params = $registry;		// Set the dates if not already set.		$this->dates->def('d1', $params->get('d1'));		$this->dates->def('d2', $params->get('d2'));		$this->dates->def('w1', $params->get('w1'));		$this->dates->def('w2', $params->get('w2'));		// Remove duplicates and sanitize.		$filters = explode(',', $return->data);		$filters = array_unique($filters);		JArrayHelper::toInteger($filters);		// Remove any values of zero.		if (array_search(0, $filters, true) !== false)		{			unset($filters[array_search(0, $filters, true)]);		}		// Check if we have any real input.		if (empty($filters))		{			return true;		}		/*		 * Create the query to get filters from the database. We do this for		 * two reasons: one, it allows us to ensure that the filters being used		 * are real; two, we need to sort the filters by taxonomy branch.		 */		$query->clear()			->select('t1.id, t1.title, t2.title AS branch')			->from($db->quoteName('#__finder_taxonomy') . ' AS t1')			->join('INNER', $db->quoteName('#__finder_taxonomy') . ' AS t2 ON t2.id = t1.parent_id')			->where('t1.state = 1')			->where('t1.access IN (' . $groups . ')')			->where('t1.id IN (' . implode(',', $filters) . ')')			->where('t2.state = 1')			->where('t2.access IN (' . $groups . ')');		// Load the filters.		$db->setQuery($query);		$results = $db->loadObjectList();		// Sort the filter ids by branch.		foreach ($results as $result)		{			$this->filters[$result->branch][$result->title] = (int) $result->id;		}		return true;	}	/**	 * Method to process the dynamic taxonomy input. The dynamic taxonomy input	 * comes in the form of select fields that the user chooses from. The	 * dynamic taxonomy input is processed AFTER the static taxonomy input	 * because the dynamic options can be used to further narrow a static	 * taxonomy filter.	 *	 * @param   array  $filters  An array of taxonomy node ids.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function processDynamicTaxonomy($filters)	{		// Initialize user variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Remove duplicates and sanitize.		$filters = array_unique($filters);		JArrayHelper::toInteger($filters);		// Remove any values of zero.		if (array_search(0, $filters, true) !== false)		{			unset($filters[array_search(0, $filters, true)]);		}		// Check if we have any real input.		if (empty($filters))		{			return true;		}		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		/*		 * Create the query to get filters from the database. We do this for		 * two reasons: one, it allows us to ensure that the filters being used		 * are real; two, we need to sort the filters by taxonomy branch.		 */		$query->select('t1.id, t1.title, t2.title AS branch')			->from($db->quoteName('#__finder_taxonomy') . ' AS t1')			->join('INNER', $db->quoteName('#__finder_taxonomy') . ' AS t2 ON t2.id = t1.parent_id')			->where('t1.state = 1')			->where('t1.access IN (' . $groups . ')')			->where('t1.id IN (' . implode(',', $filters) . ')')			->where('t2.state = 1')			->where('t2.access IN (' . $groups . ')');		// Load the filters.		$db->setQuery($query);		$results = $db->loadObjectList();		// Cleared filter branches.		$cleared = array();		/*		 * Sort the filter ids by branch. Because these filters are designed to		 * override and further narrow the items selected in the static filter,		 * we will clear the values from the static filter on a branch by		 * branch basis before adding the dynamic filters. So, if the static		 * filter defines a type filter of "articles" and three "category"		 * filters but the user only limits the category further, the category		 * filters will be flushed but the type filters will not.		 */		foreach ($results as $result)		{			// Check if the branch has been cleared.			if (!in_array($result->branch, $cleared))			{				// Clear the branch.				$this->filters[$result->branch] = array();				// Add the branch to the cleared list.				$cleared[] = $result->branch;			}			// Add the filter to the list.			$this->filters[$result->branch][$result->title] = (int) $result->id;		}		return true;	}	/**	 * Method to process the query date filters to determine start and end	 * date limitations.	 *	 * @param   string  $date1  The first date filter.	 * @param   string  $date2  The second date filter.	 * @param   string  $when1  The first date modifier.	 * @param   string  $when2  The second date modifier.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function processDates($date1, $date2, $when1, $when2)	{		// Clean up the inputs.		$date1 = JString::trim(JString::strtolower($date1));		$date2 = JString::trim(JString::strtolower($date2));		$when1 = JString::trim(JString::strtolower($when1));		$when2 = JString::trim(JString::strtolower($when2));		// Get the time offset.		$offset = JFactory::getApplication()->getCfg('offset');		// Array of allowed when values.		$whens = array('before', 'after', 'exact');		// The value of 'today' is a special case that we need to handle.		if ($date1 === JString::strtolower(JText::_('COM_FINDER_QUERY_FILTER_TODAY')))		{			$today = JFactory::getDate('now', $offset);			$date1 = $today->format('%Y-%m-%d');		}		// Try to parse the date string.		$date = JFactory::getDate($date1, $offset);		// Check if the date was parsed successfully.		if ($date->toUnix() !== null)		{			// Set the date filter.			$this->date1 = $date->toSQL();			$this->when1 = in_array($when1, $whens) ? $when1 : 'before';		}		// The value of 'today' is a special case that we need to handle.		if ($date2 === JString::strtolower(JText::_('COM_FINDER_QUERY_FILTER_TODAY')))		{			$today = JFactory::getDate('now', $offset);			$date2 = $today->format('%Y-%m-%d');		}		// Try to parse the date string.		$date = JFactory::getDate($date2, $offset);		// Check if the date was parsed successfully.		if ($date->toUnix() !== null)		{			// Set the date filter.			$this->date2 = $date->toSQL();			$this->when2 = in_array($when2, $whens) ? $when2 : 'before';		}		return true;	}	/**	 * Method to process the query input string and extract required, optional,	 * and excluded tokens; taxonomy filters; and date filters.	 *	 * @param   string  $input  The query input string.	 * @param   string  $lang   The query input language.	 * @param   string  $mode   The query matching mode.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function processString($input, $lang, $mode)	{		// Clean up the input string.		$input = html_entity_decode($input, ENT_QUOTES, 'UTF-8');		$input = JString::strtolower($input);		$input = preg_replace('#\s+#mi', ' ', $input);		$input = JString::trim($input);		$debug = JFactory::getConfig()->get('debug_lang');		/*		 * First, we need to handle string based modifiers. String based		 * modifiers could potentially include things like "category:blah" or		 * "before:2009-10-21" or "type:article", etc.		 */		$patterns = array(			'before' => JText::_('COM_FINDER_FILTER_WHEN_BEFORE'),			'after' => JText::_('COM_FINDER_FILTER_WHEN_AFTER')		);		// Add the taxonomy branch titles to the possible patterns.		foreach (FinderIndexerTaxonomy::getBranchTitles() as $branch)		{			// Add the pattern.			$patterns[$branch] = JString::strtolower(JText::_(FinderHelperLanguage::branchSingular($branch)));		}		// Container for search terms and phrases.		$terms = array();		$phrases = array();		// Cleared filter branches.		$cleared = array();		/*		 * Compile the suffix pattern. This is used to match the values of the		 * filter input string. Single words can be input directly, multi-word		 * values have to be wrapped in double quotes.		 */		$quotes = html_entity_decode('&#8216;&#8217;&#39;', ENT_QUOTES, 'UTF-8');		$suffix = '(([\w\d' . $quotes . '-]+)|\"([\w\d\s' . $quotes . '-]+)\")';		/*		 * Iterate through the possible filter patterns and search for matches.		 * We need to match the key, colon, and a value pattern for the match		 * to be valid.		 */		foreach ($patterns as $modifier => $pattern)		{			$matches = array();			if ($debug)			{				$pattern = substr($pattern, 2, -2);			}			// Check if the filter pattern is in the input string.			if (preg_match('#' . $pattern . '\s*:\s*' . $suffix . '#mi', $input, $matches))			{				// Get the value given to the modifier.				$value = isset($matches[3]) ? $matches[3] : $matches[1];				// Now we have to handle the filter string.				switch ($modifier)				{					// Handle a before and after date filters.					case 'before':					case 'after':					{						// Get the time offset.						$offset = JFactory::getApplication()->getCfg('offset');						// Array of allowed when values.						$whens = array('before', 'after', 'exact');						// The value of 'today' is a special case that we need to handle.						if ($value === JString::strtolower(JText::_('COM_FINDER_QUERY_FILTER_TODAY')))						{							$today = JFactory::getDate('now', $offset);							$value = $today->format('%Y-%m-%d');						}						// Try to parse the date string.						$date = JFactory::getDate($value, $offset);						// Check if the date was parsed successfully.						if ($date->toUnix() !== null)						{							// Set the date filter.							$this->date1 = $date->toSQL();							$this->when1 = in_array($modifier, $whens) ? $modifier : 'before';						}						break;					}					// Handle a taxonomy branch filter.					default:						{						// Try to find the node id.						$return = FinderIndexerTaxonomy::getNodeByTitle($modifier, $value);						// Check if the node id was found.						if ($return)						{							// Check if the branch has been cleared.							if (!in_array($modifier, $cleared))							{								// Clear the branch.								$this->filters[$modifier] = array();								// Add the branch to the cleared list.								$cleared[] = $modifier;							}							// Add the filter to the list.							$this->filters[$modifier][$return->title] = (int) $return->id;						}						break;						}				}				// Clean up the input string again.				$input = str_replace($matches[0], '', $input);				$input = preg_replace('#\s+#mi', ' ', $input);				$input = JString::trim($input);			}		}		/*		 * Extract the tokens enclosed in double quotes so that we can handle		 * them as phrases.		 */		if (JString::strpos($input, '"') !== false)		{			$matches = array();			// Extract the tokens enclosed in double quotes.			if (preg_match_all('#\"([^"]+)\"#mi', $input, $matches))			{				/*				 * One or more phrases were found so we need to iterate through				 * them, tokenize them as phrases, and remove them from the raw				 * input string before we move on to the next processing step.				 */				foreach ($matches[1] as $key => $match)				{					// Find the complete phrase in the input string.					$pos = JString::strpos($input, $matches[0][$key]);					$len = JString::strlen($matches[0][$key]);					// Add any terms that are before this phrase to the stack.					if (JString::trim(JString::substr($input, 0, $pos)))					{						$terms = array_merge($terms, explode(' ', JString::trim(JString::substr($input, 0, $pos))));					}					// Strip out everything up to and including the phrase.					$input = JString::substr($input, $pos + $len);					// Clean up the input string again.					$input = preg_replace('#\s+#mi', ' ', $input);					$input = JString::trim($input);					// Get the number of words in the phrase.					$parts = explode(' ', $match);					// Check if the phrase is longer than three words.					if (count($parts) > 3)					{						/*						 * If the phrase is longer than three words, we need to						 * break it down into smaller chunks of phrases that						 * are less than or equal to three words. We overlap						 * the chunks so that we can ensure that a match is						 * found for the complete phrase and not just portions						 * of it.						 */						for ($i = 0, $c = count($parts); $i < $c; $i += 2)						{							// Set up the chunk.							$chunk = array();							// The chunk has to be assembled based on how many							// pieces are available to use.							switch ($c - $i)							{								// If only one word is left, we can break from								// the switch and loop because the last word								// was already used at the end of the last								// chunk.								case 1:									break 2;								// If there words are left, we use them both as								// the last chunk of the phrase and we're done.								case 2:									$chunk[] = $parts[$i];									$chunk[] = $parts[$i + 1];									break;								// If there are three or more words left, we								// build a three word chunk and continue on.								default:									$chunk[] = $parts[$i];									$chunk[] = $parts[$i + 1];									$chunk[] = $parts[$i + 2];									break;							}							// If the chunk is not empty, add it as a phrase.							if (count($chunk))							{								$phrases[] = implode(' ', $chunk);								$terms[] = implode(' ', $chunk);							}						}					}					else					{						// The phrase is <= 3 words so we can use it as is.						$phrases[] = $match;						$terms[] = $match;					}				}			}		}		// Add the remaining terms if present.		if (!empty($input))		{			$terms = array_merge($terms, explode(' ', $input));		}		// An array of our boolean operators. $operator => $translation		$operators = array(			'AND' => JString::strtolower(JText::_('COM_FINDER_QUERY_OPERATOR_AND')),			'OR' => JString::strtolower(JText::_('COM_FINDER_QUERY_OPERATOR_OR')),			'NOT' => JString::strtolower(JText::_('COM_FINDER_QUERY_OPERATOR_NOT'))		);		// If language debugging is enabled you need to ignore the debug strings in matching.		if (JDEBUG)		{			$debugStrings = array('**', '??');			$operators = str_replace($debugStrings, '', $operators);		}		/*		 * Iterate through the terms and perform any sorting that needs to be		 * done based on boolean search operators. Terms that are before an		 * and/or/not modifier have to be handled in relation to their operator.		 */		for ($i = 0, $c = count($terms); $i < $c; $i++)		{			// Check if the term is followed by an operator that we understand.			if (isset($terms[$i + 1]) && in_array($terms[$i + 1], $operators))			{				// Get the operator mode.				$op = array_search($terms[$i + 1], $operators);				// Handle the AND operator.				if ($op === 'AND' && isset($terms[$i + 2]))				{					// Tokenize the current term.					$token = FinderIndexerHelper::tokenize($terms[$i], $lang, true);					$token = $this->getTokenData($token);					// Set the required flag.					$token->required = true;					// Add the current token to the stack.					$this->included[] = $token;					$this->highlight = array_merge($this->highlight, array_keys($token->matches));					// Skip the next token (the mode operator).					$this->operators[] = $terms[$i + 1];					// Tokenize the term after the next term (current plus two).					$other = FinderIndexerHelper::tokenize($terms[$i + 2], $lang, true);					$other = $this->getTokenData($other);					// Set the required flag.					$other->required = true;					// Add the token after the next token to the stack.					$this->included[] = $other;					$this->highlight = array_merge($this->highlight, array_keys($other->matches));					// Remove the processed phrases if possible.					if (($pk = array_search($terms[$i], $phrases)) !== false)					{						unset($phrases[$pk]);					}					if (($pk = array_search($terms[$i + 2], $phrases)) !== false)					{						unset($phrases[$pk]);					}					// Remove the processed terms.					unset($terms[$i]);					unset($terms[$i + 1]);					unset($terms[$i + 2]);					// Adjust the loop.					$i += 2;					continue;				}				// Handle the OR operator.				elseif ($op === 'OR' && isset($terms[$i + 2]))				{					// Tokenize the current term.					$token = FinderIndexerHelper::tokenize($terms[$i], $lang, true);					$token = $this->getTokenData($token);					// Set the required flag.					$token->required = false;					// Add the current token to the stack.					if (count($token->matches))					{						$this->included[] = $token;						$this->highlight = array_merge($this->highlight, array_keys($token->matches));					}					else					{						$this->ignored[] = $token;					}					// Skip the next token (the mode operator).					$this->operators[] = $terms[$i + 1];					// Tokenize the term after the next term (current plus two).					$other = FinderIndexerHelper::tokenize($terms[$i + 2], $lang, true);					$other = $this->getTokenData($other);					// Set the required flag.					$other->required = false;					// Add the token after the next token to the stack.					if (count($other->matches))					{						$this->included[] = $other;						$this->highlight = array_merge($this->highlight, array_keys($other->matches));					}					else					{						$this->ignored[] = $other;					}					// Remove the processed phrases if possible.					if (($pk = array_search($terms[$i], $phrases)) !== false)					{						unset($phrases[$pk]);					}					if (($pk = array_search($terms[$i + 2], $phrases)) !== false)					{						unset($phrases[$pk]);					}					// Remove the processed terms.					unset($terms[$i]);					unset($terms[$i + 1]);					unset($terms[$i + 2]);					// Adjust the loop.					$i += 2;					continue;				}			}			// Handle an orphaned OR operator.			elseif (isset($terms[$i + 1]) && array_search($terms[$i], $operators) === 'OR')			{				// Skip the next token (the mode operator).				$this->operators[] = $terms[$i];				// Tokenize the next term (current plus one).				$other = FinderIndexerHelper::tokenize($terms[$i + 1], $lang, true);				$other = $this->getTokenData($other);				// Set the required flag.				$other->required = false;				// Add the token after the next token to the stack.				if (count($other->matches))				{					$this->included[] = $other;					$this->highlight = array_merge($this->highlight, array_keys($other->matches));				}				else				{					$this->ignored[] = $other;				}				// Remove the processed phrase if possible.				if (($pk = array_search($terms[$i + 1], $phrases)) !== false)				{					unset($phrases[$pk]);				}				// Remove the processed terms.				unset($terms[$i]);				unset($terms[$i + 1]);				// Adjust the loop.				$i += 1;				continue;			}			// Handle the NOT operator.			elseif (isset($terms[$i + 1]) && array_search($terms[$i], $operators) === 'NOT')			{				// Skip the next token (the mode operator).				$this->operators[] = $terms[$i];				// Tokenize the next term (current plus one).				$other = FinderIndexerHelper::tokenize($terms[$i + 1], $lang, true);				$other = $this->getTokenData($other);				// Set the required flag.				$other->required = false;				// Add the next token to the stack.				if (count($other->matches))				{					$this->excluded[] = $other;				}				else				{					$this->ignored[] = $other;				}				// Remove the processed phrase if possible.				if (($pk = array_search($terms[$i + 1], $phrases)) !== false)				{					unset($phrases[$pk]);				}				// Remove the processed terms.				unset($terms[$i]);				unset($terms[$i + 1]);				// Adjust the loop.				$i += 1;				continue;			}		}		/*		 * Iterate through any search phrases and tokenize them. We handle		 * phrases as autonomous units and do not break them down into two and		 * three word combinations.		 */		for ($i = 0, $c = count($phrases); $i < $c; $i++)		{			// Tokenize the phrase.			$token = FinderIndexerHelper::tokenize($phrases[$i], $lang, true);			$token = $this->getTokenData($token);			// Set the required flag.			$token->required = true;			// Add the current token to the stack.			$this->included[] = $token;			$this->highlight = array_merge($this->highlight, array_keys($token->matches));			// Remove the processed term if possible.			if (($pk = array_search($phrases[$i], $terms)) !== false)			{				unset($terms[$pk]);			}			// Remove the processed phrase.			unset($phrases[$i]);		}		/*		 * Handle any remaining tokens using the standard processing mechanism.		 */		if (!empty($terms))		{			// Tokenize the terms.			$terms = implode(' ', $terms);			$tokens = FinderIndexerHelper::tokenize($terms, $lang, false);			// Make sure we are working with an array.			$tokens = is_array($tokens) ? $tokens : array($tokens);			// Get the token data and required state for all the tokens.			foreach ($tokens as $token)			{				// Get the token data.				$token = $this->getTokenData($token);				// Set the required flag for the token.				$token->required = $mode === 'AND' ? ($token->phrase ? false : true) : false;				// Add the token to the appropriate stack.				if (count($token->matches) || $token->required)				{					$this->included[] = $token;					$this->highlight = array_merge($this->highlight, array_keys($token->matches));				}				else				{					$this->ignored[] = $token;				}			}		}		return true;	}	/**	 * Method to get the base and similar term ids and, if necessary, suggested	 * term data from the database. The terms ids are identified based on a	 * 'like' match in MySQL and/or a common stem. If no term ids could be	 * found, then we know that we will not be able to return any results for	 * that term and we should try to find a similar term to use that we can	 * match so that we can suggest the alternative search query to the user.	 *	 * @param   FinderIndexerToken  $token  A FinderIndexerToken object.	 *	 * @return  FinderIndexerToken  A FinderIndexerToken object.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getTokenData($token)	{		// Get the database object.		$db = JFactory::getDbo();		// Create a database query to build match the token.		$query = $db->getQuery(true)			->select('t.term, t.term_id')			->from('#__finder_terms AS t');		/*		 * If the token is a phrase, the lookup process is fairly simple. If		 * the token is a word, it is a little more complicated. We have to		 * create two queries to lookup the term and the stem respectively,		 * then union the result sets together. This is MUCH faster than using		 * an or condition in the database query.		 */		if ($token->phrase)		{			// Add the phrase to the query.			$query->where('t.term = ' . $db->quote($token->term))				->where('t.phrase = 1');		}		else		{			// Add the term to the query.			$query->where('t.term = ' . $db->quote($token->term))				->where('t.phrase = 0');			// Clone the query, replace the WHERE clause.			$sub = clone($query);			$sub->clear('where');			$sub->where('t.stem = ' . $db->quote($token->stem));			$sub->where('t.phrase = 0');			// Union the two queries.			$query->union($sub);		}		// Get the terms.		$db->setQuery($query);		$matches = $db->loadObjectList();		// Setup the container.		$token->matches = array();		// Check the matching terms.		if (!empty($matches))		{			// Add the matches to the token.			for ($i = 0, $c = count($matches); $i < $c; $i++)			{				$token->matches[$matches[$i]->term] = (int) $matches[$i]->term_id;			}		}		// If no matches were found, try to find a similar but better token.		if (empty($token->matches))		{			// Create a database query to get the similar terms.			//@TODO: PostgreSQL doesn't support SOUNDEX out of the box			$query->clear()				->select('DISTINCT t.term_id AS id, t.term AS term')				->from('#__finder_terms AS t')				// ->where('t.soundex = ' . soundex($db->quote($token->term)))				->where('t.soundex = SOUNDEX(' . $db->quote($token->term) . ')')				->where('t.phrase = ' . (int) $token->phrase);			// Get the terms.			$db->setQuery($query);			$results = $db->loadObjectList();			// Check if any similar terms were found.			if (empty($results))			{				return $token;			}			// Stack for sorting the similar terms.			$suggestions = array();			// Get the levnshtein distance for all suggested terms.			foreach ($results as $sk => $st)			{				// Get the levenshtein distance between terms.				$distance = levenshtein($st->term, $token->term);				// Make sure the levenshtein distance isn't over 50.				if ($distance < 50)				{					$suggestions[$sk] = $distance;				}			}			// Sort the suggestions.			asort($suggestions, SORT_NUMERIC);			// Get the closest match.			$keys = array_keys($suggestions);			$key = $keys[0];			// Add the suggested term.			$token->suggestion = $results[$key]->term;		}		return $token;	}}
