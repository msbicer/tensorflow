<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/route.php';$controller = JControllerLegacy::getInstance('Finder');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users master display controller. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersController extends JControllerLegacy{	/**	 * Checks whether a user can see this view.	 *	 * @param   string	$view	The view name.	 *	 * @return  boolean	 * @since   1.6	 */	protected function canView($view)	{		$canDo	= UsersHelper::getActions();		switch ($view)		{			// Special permissions.			case 'groups':			case 'group':			case 'levels':			case 'level':				return $canDo->get('core.admin');				break;			// Default permissions.			default:				return true;		}	}	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$view   = $this->input->get('view', 'users');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		if (!$this->canView($view))		{			JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Check for edit form.		if ($view == 'user' && $layout == 'edit' && !$this->checkEditId('com_users.edit.user', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=users', false));			return false;		}		elseif ($view == 'group' && $layout == 'edit' && !$this->checkEditId('com_users.edit.group', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=groups', false));			return false;		}		elseif ($view == 'level' && $layout == 'edit' && !$this->checkEditId('com_users.edit.level', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=levels', false));			return false;		}		elseif ($view == 'note' && $layout == 'edit' && !$this->checkEditId('com_users.edit.note', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=notes', false));			return false;		}		return parent::display();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Tags List Controller * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsControllerTags extends JControllerLegacy{	/**	 * Method to search tags with AJAX	 *	 * @return  void	 */	public function searchAjax()	{		// Required objects		$app = JFactory::getApplication();		// Receive request data		$filters = array(			'like'      => trim($app->input->get('like', null)),			'title'     => trim($app->input->get('title', null)),			'flanguage' => $app->input->get('flanguage', null),			'published' => $app->input->get('published', 1, 'integer'),			'parent_id' => $app->input->get('parent_id', null)		);		if ($results = JHelperTags::searchTags($filters))		{			// Output a JSON object			echo json_encode($results);		}		$app->close();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base Application Class * * @package     Joomla.Platform * @subpackage  Application * @since       12.1 */abstract class JApplicationBase{	/**	 * The application dispatcher object.	 *	 * @var    JEventDispatcher	 * @since  12.1	 */	protected $dispatcher;	/**	 * The application identity object.	 *	 * @var    JUser	 * @since  12.1	 */	protected $identity;	/**	 * The application input object.	 *	 * @var    JInput	 * @since  12.1	 */	public $input = null;	/**	 * Method to close the application.	 *	 * @param   integer  $code  The exit code (optional; default is 0).	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   12.1	 */	public function close($code = 0)	{		exit($code);	}	/**	 * Get the application identity.	 *	 * @return  mixed  A JUser object or null.	 *	 * @since   12.1	 */	public function getIdentity()	{		return $this->identity;	}	/**	 * Registers a handler to a particular event group.	 *	 * @param   string    $event    The event name.	 * @param   callback  $handler  The handler, a function or an instance of a event object.	 *	 * @return  JApplicationBase  The application to allow chaining.	 *	 * @since   12.1	 */	public function registerEvent($event, $handler)	{		if ($this->dispatcher instanceof JEventDispatcher)		{			$this->dispatcher->register($event, $handler);		}		return $this;	}	/**	 * Calls all handlers associated with an event group.	 *	 * @param   string  $event  The event name.	 * @param   array   $args   An array of arguments (optional).	 *	 * @return  array   An array of results from each function call, or null if no dispatcher is defined.	 *	 * @since   12.1	 */	public function triggerEvent($event, array $args = null)	{		if ($this->dispatcher instanceof JEventDispatcher)		{			return $this->dispatcher->trigger($event, $args);		}		return null;	}	/**	 * Allows the application to load a custom or default dispatcher.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create event	 * dispatchers, if required, based on more specific needs.	 *	 * @param   JEventDispatcher  $dispatcher  An optional dispatcher object. If omitted, the factory dispatcher is created.	 *	 * @return  JApplicationBase This method is chainable.	 *	 * @since   12.1	 */	public function loadDispatcher(JEventDispatcher $dispatcher = null)	{		$this->dispatcher = ($dispatcher === null) ? JEventDispatcher::getInstance() : $dispatcher;		return $this;	}	/**	 * Allows the application to load a custom or default identity.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create an identity,	 * if required, based on more specific needs.	 *	 * @param   JUser  $identity  An optional identity object. If omitted, the factory user is created.	 *	 * @return  JApplicationBase This method is chainable.	 *	 * @since   12.1	 */	public function loadIdentity(JUser $identity = null)	{		$this->identity = ($identity === null) ? JFactory::getUser() : $identity;		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Finder route helper class. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderHelperRoute{	/**	 * Method to get the route for a search page.	 *	 * @param   integer  $f  The search filter id. [optional]	 * @param   string   $q  The search query string. [optional]	 *	 * @return  string  The search route.	 *	 * @since   2.5	 */	public static function getSearchRoute($f = null, $q = null)	{		// Get the menu item id.		$query = array('view' => 'search', 'q' => $q, 'f' => $f);		$item = self::getItemid($query);		// Get the base route.		$uri = clone(JUri::getInstance('index.php?option=com_finder&view=search'));		// Add the pre-defined search filter if present.		if ($f !== null)		{			$uri->setVar('f', $f);		}		// Add the search query string if present.		if ($q !== null)		{			$uri->setVar('q', $q);		}		// Add the menu item id if present.		if ($item !== null)		{			$uri->setVar('Itemid', $item);		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get the route for an advanced search page.	 *	 * @param   integer  $f  The search filter id. [optional]	 * @param   string   $q  The search query string. [optional]	 *	 * @return  string  The advanced search route.	 *	 * @since   2.5	 */	public static function getAdvancedRoute($f = null, $q = null)	{		// Get the menu item id.		$query = array('view' => 'advanced', 'q' => $q, 'f' => $f);		$item = self::getItemid($query);		// Get the base route.		$uri = clone(JUri::getInstance('index.php?option=com_finder&view=advanced'));		// Add the pre-defined search filter if present.		if ($q !== null)		{			$uri->setVar('f', $f);		}		// Add the search query string if present.		if ($q !== null)		{			$uri->setVar('q', $q);		}		// Add the menu item id if present.		if ($item !== null)		{			$uri->setVar('Itemid', $item);		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get the most appropriate menu item for the route based on the	 * supplied query needles.	 *	 * @param   array  $query  An array of URL parameters.	 *	 * @return  mixed  An integer on success, null otherwise.	 *	 * @since   2.5	 */	public static function getItemid($query)	{		static $items, $active;		// Get the menu items for com_finder.		if (!$items || !$active)		{			$app = JFactory::getApplication('site');			$com = JComponentHelper::getComponent('com_finder');			$menu = $app->getMenu();			$active = $menu->getActive();			$items = $menu->getItems('component_id', $com->id);			$items = is_array($items) ? $items : array();		}		// Try to match the active view and filter.		if ($active && @$active->query['view'] == @$query['view'] && @$active->query['f'] == @$query['f'])		{			return $active->id;		}		// Try to match the view, query, and filter.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'] && @$item->query['q'] == @$query['q'] && @$item->query['f'] == @$query['f'])			{				return $item->id;			}		}		// Try to match the view and filter.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'] && @$item->query['f'] == @$query['f'])			{				return $item->id;			}		}		// Try to match the view.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'])			{				return $item->id;			}		}		return null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users mail view. * * @package     Joomla.Administrator * @subpackage  com_users */class UsersViewMail extends JViewLegacy{	/**	 * @var object form object	 */	protected $form;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Get data from the model		$this->form = $this->get('Form');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		JToolbarHelper::title(JText::_('COM_USERS_MASS_MAIL'), 'massmail.png');		JToolbarHelper::custom('mail.send', 'envelope.png', 'send_f2.png', 'COM_USERS_TOOLBAR_MAIL_SEND_MAIL', false);		JToolbarHelper::cancel('mail.cancel');		JToolbarHelper::divider();		JToolbarHelper::preferences('com_users');		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_MASS_MAIL_USERS');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JSON format handler for JRegistry. * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistryFormatJSON extends JRegistryFormat{	/**	 * Converts an object into a JSON formatted string.	 *	 * @param   object  $object   Data source object.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  string  JSON formatted string.	 *	 * @since   11.1	 */	public function objectToString($object, $options = array())	{		return json_encode($object);	}	/**	 * Parse a JSON formatted string and convert it into an object.	 *	 * If the string is not in JSON format, this method will attempt to parse it as INI format.	 *	 * @param   string  $data     JSON formatted string to convert.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  object   Data object.	 *	 * @since   11.1	 */	public function stringToObject($data, array $options = array('processSections' => false))	{		$data = trim($data);		if ((substr($data, 0, 1) != '{') && (substr($data, -1, 1) != '}'))		{			$ini = JRegistryFormat::getInstance('INI');			$obj = $ini->stringToObject($data, $options);		}		else		{			$obj = json_decode($data);		}		return $obj;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;$canEdit = $displayData['params']->get('access-edit');?><div id="icons">	<?php if (empty($displayData['print'])) : ?>		<?php if ($canEdit || $displayData['params']->get('show_print_icon') || $displayData['params']->get('show_email_icon')) : ?>			<div class="btn-group pull-right">				<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span> <span class="caret"></span> </a>				<?php // Note the actions class is deprecated. Use dropdown-menu instead. ?>				<ul class="dropdown-menu">					<?php if ($displayData['params']->get('show_print_icon')) : ?>						<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>					<?php if ($displayData['params']->get('show_email_icon')) : ?>						<li class="email-icon"> <?php echo JHtml::_('icon.email', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>					<?php if ($canEdit) : ?>						<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $displayData['item'], $displayData['params']); ?> </li>					<?php endif; ?>				</ul>			</div>		<?php endif; ?>	<?php else : ?>		<div class="pull-right">			<?php echo JHtml::_('icon.print_screen', $displayData['item'], $displayData['params']); ?>		</div>	<?php endif; ?></div>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML utility class for building a dropdown menu * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlDropdown{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * @var    string  HTML markup for the dropdown list	 * @since  3.0	 */	protected static $dropDownList = null;	/**	 * Method to inject needed script	 *	 * @return  void	 *	 * @since   3.0	 */	public static function init()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Depends on Bootstrap		JHtml::_('bootstrap.framework');		JFactory::getDocument()->addScriptDeclaration("			(function($){				$(document).ready(function (){					$('.has-context')					.mouseenter(function (){						$('.btn-group',$(this)).show();					})					.mouseleave(function (){						$('.btn-group',$(this)).hide();						$('.btn-group',$(this)).removeClass('open');					});					contextAction =function (cbId, task)					{						$('input[name=\"cid[]\"]').removeAttr('checked');						$('#' + cbId).attr('checked','checked');						Joomla.submitbutton(task);					}				});			})(jQuery);			"		);		// Set static array		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to start a new dropdown menu	 *	 * @return  void	 *	 * @since   3.0	 */	public static function start()	{		// Only start once		if (isset(self::$loaded[__METHOD__]) && self::$loaded[__METHOD__] == true)		{			return;		}		$dropDownList = '<div class="btn-group" style="margin-left:6px;display:none">							<a href="#" data-toggle="dropdown" class="dropdown-toggle btn btn-mini">								<span class="caret"></span>							</a>							<ul class="dropdown-menu">';		self::$dropDownList = $dropDownList;		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to render current dropdown menu	 *	 * @return  string  HTML markup for the dropdown list	 *	 * @since   3.0	 */	public static function render()	{		$dropDownList = self::$dropDownList;		$dropDownList .= '</ul></div>';		self::$dropDownList	= null;		self::$loaded['JHtmlDropdown::start'] = false;		return $dropDownList;	}	/**	 * Append an edit item to the current dropdown menu	 *	 * @param   integer  $id          Record ID	 * @param   string   $prefix      Task prefix	 * @param   string   $customLink  The custom link if dont use default Joomla action format	 *	 * @return  void	 *	 * @since   3.0	 */	public static function edit($id, $prefix = '', $customLink = '')	{		self::start();		if (!$customLink)		{			$option = JFactory::getApplication()->input->getCmd('option');			$link = 'index.php?option=' . $option;		}		else		{			$link = $customLink;		}		$link .= '&task=' . $prefix . 'edit&id=' . $id;		$link = JRoute::_($link);		self::addCustomItem(JText::_('JACTION_EDIT'), $link);		return;	}	/**	 * Append a publish item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function publish($checkboxId, $prefix = '')	{		$task = $prefix . 'publish';		self::addCustomItem(JText::_('JTOOLBAR_PUBLISH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an unpublish item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function unpublish($checkboxId, $prefix = '')	{		$task = $prefix . 'unpublish';		self::addCustomItem(JText::_('JTOOLBAR_UNPUBLISH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append a featured item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function featured($checkboxId, $prefix = '')	{		$task = $prefix . 'featured';		self::addCustomItem(JText::_('JFEATURED'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an unfeatured item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function unfeatured($checkboxId, $prefix = '')	{		$task = $prefix . 'unfeatured';		self::addCustomItem(JText::_('JUNFEATURED'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an archive item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function archive($checkboxId, $prefix = '')	{		$task = $prefix . 'archive';		self::addCustomItem(JText::_('JTOOLBAR_ARCHIVE'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an unarchive item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function unarchive($checkboxId, $prefix = '')	{		$task = $prefix . 'unpublish';		self::addCustomItem(JText::_('JTOOLBAR_UNARCHIVE'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append a trash item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function trash($checkboxId, $prefix = '')	{		$task = $prefix . 'trash';		self::addCustomItem(JText::_('JTOOLBAR_TRASH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an untrash item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function untrash($checkboxId, $prefix = '')	{		$task = $prefix . 'publish';		self::addCustomItem(JText::_('JTOOLBAR_UNTRASH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append a checkin item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function checkin($checkboxId, $prefix = '')	{		$task = $prefix . 'checkin';		self::addCustomItem(JText::_('JTOOLBAR_CHECKIN'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Writes a divider between dropdown items	 *	 * @return  void	 *	 * @since   3.0	 */	public static function divider()	{		self::$dropDownList .= '<li class="divider"></li>';		return;	}	/**	 * Append a custom item to current dropdown menu	 *	 * @param   string   $label           The label of item	 * @param   string   $link            The link of item	 * @param   string   $linkAttributes  Custom link attributes	 * @param   string   $className       Class name of item	 * @param   boolean  $ajaxLoad        True if using ajax load when item clicked	 * @param   string   $jsCallBackFunc  Javascript function name, called when ajax load successfully	 *	 * @return  void	 *	 * @since   3.0	 */	public static function addCustomItem($label, $link = 'javascript:void(0)', $linkAttributes = '', $className = '', $ajaxLoad = false,		$jsCallBackFunc = null)	{		self::start();		if ($ajaxLoad)		{			$href = ' href = "javascript:void(0)" onclick="loadAjax(\'' . $link . '\', \'' . $jsCallBackFunc . '\')"';		}		else		{			$href = ' href = "' . $link . '" ';		}		$dropDownList = self::$dropDownList;		$dropDownList .= '<li class="' . $className . '"><a ' . $linkAttributes . $href . ' >';		$dropDownList .= $label;		$dropDownList .= '</a></li>';		self::$dropDownList = $dropDownList;		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_cache')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Cache');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Indexer model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelIndexer extends JModelLegacy{}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Form Rule class for the prefix DB. * * @package  Joomla.Installation * @since    1.7 */class JFormRulePrefix extends JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  1.7	 */	protected $regex = '^[a-z][a-z0-9]*_$';	/**	 * The regular expression modifiers to use when testing a form field value.	 *	 * @var    string	 * @since  1.7	 */	protected $modifiers = 'i';}
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Model Interface * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */interface JModel{	/**	 * Get the model state.	 *	 * @return  JRegistry  The state object.	 *	 * @since   12.1	 */	public function getState();	/**	 * Set the model state.	 *	 * @param   JRegistry  $state  The state object.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setState(JRegistry $state);}
<?php/** * @package     Joomla.Plugin * @subpackage  System.log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! System Logging Plugin * * @package     Joomla.Plugin * @subpackage  System.log * @since       1.5 */class PlgSystemLog extends JPlugin{	public function onUserLoginFailure($response)	{		$errorlog = array();		switch($response['status'])		{			case JAuthentication::STATUS_SUCCESS:				$errorlog['status']  = $response['type'] . " CANCELED: ";				$errorlog['comment'] = $response['error_message'];				break;			case JAuthentication::STATUS_FAILURE:				$errorlog['status']  = $response['type'] . " FAILURE: ";				if ($this->params->get('log_username', 0))				{					$errorlog['comment'] = $response['error_message'] . ' ("' . $response['username'] . '")';				}				else				{					$errorlog['comment'] = $response['error_message'];				}				break;			default:				$errorlog['status']  = $response['type'] . " UNKNOWN ERROR: ";				$errorlog['comment'] = $response['error_message'];				break;		}		JLog::addLogger(array(), JLog::INFO);		JLog::add($errorlog['comment'], JLog::INFO, $errorlog['status']);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filters controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderControllerFilters extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   2.5	 */	public function getModel($name = 'Filter', $prefix = 'FinderModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Editor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JEditor class to handle WYSIWYG editors * * @package     Joomla.Libraries * @subpackage  Editor * @since       1.5 */class JEditor extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  1.5	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  1.5	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  1.5	 */	protected $_methods = array();	/**	 * Editor Plugin object	 *	 * @var    object	 * @since  1.5	 */	protected $_editor = null;	/**	 * Editor Plugin name	 *	 * @var    string	 * @since  1.5	 */	protected $_name = null;	/**	 * Object asset	 *	 * @var    string	 * @since  1.6	 */	protected $asset = null;	/**	 * Object author	 *	 * @var    string	 * @since  1.6	 */	protected $author = null;	/**	 * @var    array  JEditor instances container.	 * @since  2.5	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   string  $editor  The editor name	 */	public function __construct($editor = 'none')	{		$this->_name = $editor;	}	/**	 * Returns the global Editor object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $editor  The editor to use.	 *	 * @return  JEditor The Editor object.	 *	 * @since   1.5	 */	public static function getInstance($editor = 'none')	{		$signature = serialize($editor);		if (empty(self::$instances[$signature]))		{			self::$instances[$signature] = new JEditor($editor);		}		return self::$instances[$signature];	}	/**	 * Get the state of the JEditor object	 *	 * @return  mixed    The state of the object.	 *	 * @since   1.5	 */	public function getState()	{		return $this->_state;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   1.5	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEditor))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   1.5	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}	/**	 * Initialise the editor	 *	 * @return  void	 *	 * @since   1.5	 */	public function initialise()	{		// Check if editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		$args['event'] = 'onInit';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				// @todo remove code: $return .= $result;				$return = $result;			}		}		$document = JFactory::getDocument();		$document->addCustomTag($return);	}	/**	 * Display the editor area.	 *	 * @param   string   $name     The control name.	 * @param   string   $html     The contents of the text area.	 * @param   string   $width    The width of the text area (px or %).	 * @param   string   $height   The height of the text area (px or %).	 * @param   integer  $col      The number of columns for the textarea.	 * @param   integer  $row      The number of rows for the textarea.	 * @param   boolean  $buttons  True and the editor buttons will be displayed.	 * @param   string   $id       An optional ID for the textarea (note: since 1.6). If not supplied the name is used.	 * @param   string   $asset    The object asset	 * @param   object   $author   The author.	 * @param   array    $params   Associative array of editor parameters.	 *	 * @return  string	 *	 * @since   1.5	 */	public function display($name, $html, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null, $params = array())	{		$this->asset = $asset;		$this->author = $author;		$this->_loadEditor($params);		// Check whether editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		// Backwards compatibility. Width and height should be passed without a semicolon from now on.		// If editor plugins need a unit like "px" for CSS styling, they need to take care of that		$width = str_replace(';', '', $width);		$height = str_replace(';', '', $height);		$return = null;		$args['name'] = $name;		$args['content'] = $html;		$args['width'] = $width;		$args['height'] = $height;		$args['col'] = $col;		$args['row'] = $row;		$args['buttons'] = $buttons;		$args['id'] = $id ? $id : $name;		$args['event'] = 'onDisplay';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Save the editor content	 *	 * @param   string  $editor  The name of the editor control	 *	 * @return  string	 *	 * @since   1.5	 */	public function save($editor)	{		$this->_loadEditor();		// Check whether editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		$args[] = $editor;		$args['event'] = 'onSave';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Get the editor contents	 *	 * @param   string  $editor  The name of the editor control	 *	 * @return  string	 *	 * @since   1.5	 */	public function getContent($editor)	{		$this->_loadEditor();		$args['name'] = $editor;		$args['event'] = 'onGetContent';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Set the editor contents	 *	 * @param   string  $editor  The name of the editor control	 * @param   string  $html    The contents of the text area	 *	 * @return  string	 *	 * @since   1.5	 */	public function setContent($editor, $html)	{		$this->_loadEditor();		$args['name'] = $editor;		$args['html'] = $html;		$args['event'] = 'onSetContent';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Get the editor extended buttons (usually from plugins)	 *	 * @param   string  $editor   The name of the editor.	 * @param   mixed   $buttons  Can be boolean or array, if boolean defines if the buttons are	 *                            displayed, if array defines a list of buttons not to show.	 *	 * @return  array	 *	 * @since   1.5	 */	public function getButtons($editor, $buttons = true)	{		$result = array();		if (is_bool($buttons) && !$buttons)		{			return $result;		}		// Get plugins		$plugins = JPluginHelper::getPlugin('editors-xtd');		foreach ($plugins as $plugin)		{			if (is_array($buttons) && in_array($plugin->name, $buttons))			{				continue;			}			JPluginHelper::importPlugin('editors-xtd', $plugin->name, false);			$className = 'plgButton' . $plugin->name;			if (class_exists($className))			{				$plugin = new $className($this, (array) $plugin);			}			// Try to authenticate			if ($temp = $plugin->onDisplay($editor, $this->asset, $this->author))			{				$result[] = $temp;			}		}		return $result;	}	/**	 * Load the editor	 *	 * @param   array  $config  Associative array of editor config paramaters	 *	 * @return  mixed	 *	 * @since   1.5	 */	protected function _loadEditor($config = array())	{		// Check whether editor is already loaded		if (!is_null(($this->_editor)))		{			return;		}		// Build the path to the needed editor plugin		$name = JFilterInput::getInstance()->clean($this->_name, 'cmd');		$path = JPATH_PLUGINS . '/editors/' . $name . '.php';		if (!is_file($path))		{			$path = JPATH_PLUGINS . '/editors/' . $name . '/' . $name . '.php';			if (!is_file($path))			{				JLog::add(JText::_('JLIB_HTML_EDITOR_CANNOT_LOAD'), JLog::WARNING, 'jerror');				return false;			}		}		// Require plugin file		require_once $path;		// Get the plugin		$plugin = JPluginHelper::getPlugin('editors', $this->_name);		$params = new JRegistry;		$params->loadString($plugin->params);		$params->loadArray($config);		$plugin->params = $params;		// Build editor plugin classname		$name = 'plgEditor' . $this->_name;		if ($this->_editor = new $name($this, (array) $plugin))		{			// Load plugin parameters			$this->initialise();			JPluginHelper::importPlugin('editors-xtd');		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="items-more"><ol class="nav nav-tabs nav-stacked"><?php	foreach ($this->link_items as &$item) :?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catid)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$version = new JVersion;?><div id="installer-languages">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=languages');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<?php if (count($this->items) || $this->escape($this->state->get('filter.search'))) : ?>			<?php echo $this->loadTemplate('filter'); ?>			<table class="adminlist">				<thead>					<tr>						<th width="20" class="nowrap hidden-phone">							<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />						</th>						<th class="nowrap">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>						</th>						<th width="10%" class="center">							<?php echo JText::_('JVERSION'); ?>						</th>						<th class="center nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_TYPE'); ?>						</th>						<th width="35%" class="nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_DETAILS_URL'); ?>						</th>						<th width="30" class="nowrap hidden-phone">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'update_id', $listDirn, $listOrder); ?>						</th>					</tr>				</thead>				<tbody>					<?php foreach ($this->items as $i => $language) : ?>					<tr class="row<?php echo $i % 2; ?>">						<td class="hidden-phone">							<?php echo JHtml::_('grid.id', $i, $language->update_id, false, 'cid'); ?>						</td>						<td>							<?php echo $language->name; ?>							<?php // Display a Note if language pack version is not equal to Joomla version ?>							<?php if (substr($language->version, 0, 3) != $version->RELEASE									|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>								<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>							<?php endif; ?>						</td>						<td class="center">							<?php echo $language->version; ?>						</td>						<td class="center">							<?php echo JText::_('COM_INSTALLER_TYPE_' . strtoupper($language->type)); ?>						</td>						<td>							<?php echo $language->detailsurl; ?>						</td>						<td class="center">							<?php echo $language->update_id; ?>						</td>					</tr>					<?php endforeach; ?>				</tbody>			</table>			<?php echo $this->pagination->getListFooter(); ?>		<?php else : ?>			<div class="alert"><?php echo JText::_('COM_INSTALLER_MSG_LANGUAGES_NOLANGUAGES'); ?></div>		<?php endif; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extended Utility class for handling date display. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.3 */abstract class JHtmlDate{	/**	 * Function to convert a static time into a relative measurement	 *	 * @param   string  $date  The date to convert	 * @param   string  $unit  The optional unit of measurement to return	 *                         if the value of the diff is greater than one	 * @param   string  $time  An optional time to compare to, defaults to now	 *	 * @return  string  The converted time string	 *	 * @since   11.3	 */	public static function relative($date, $unit = null, $time = null)	{		if (is_null($time))		{			// Get now			$time = JFactory::getDate('now');		}		// Get the difference in seconds between now and the time		$diff = strtotime($time) - strtotime($date);		// Less than a minute		if ($diff < 60)		{			return JText::_('JLIB_HTML_DATE_RELATIVE_LESSTHANAMINUTE');		}		// Round to minutes		$diff = round($diff / 60);		// 1 to 59 minutes		if ($diff < 60 || $unit == 'minute')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_MINUTES', $diff);		}		// Round to hours		$diff = round($diff / 60);		// 1 to 23 hours		if ($diff < 24 || $unit == 'hour')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_HOURS', $diff);		}		// Round to days		$diff = round($diff / 24);		// 1 to 6 days		if ($diff < 7 || $unit == 'day')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_DAYS', $diff);		}		// Round to weeks		$diff = round($diff / 7);		// 1 to 4 weeks		if ($diff <= 4 || $unit == 'week')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_WEEKS', $diff);		}		// Over a month, return the absolute time		return JHtml::_('date', $date);	}}
<?php/** * Parses and verifies the doc comments for files. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FileCommentSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_CommentParser_ClassCommentParser', true) === false) {    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_CommentParser_ClassCommentParser not found');}/** * Parses and verifies the doc comments for files. * * Verifies that : * <ul> *  <li>A doc comment exists.</li> *  <li>There is a blank newline after the short description.</li> *  <li>There is a blank newline between the long and short description.</li> *  <li>There is a blank newline between the long description and tags.</li> *  <li>A PHP version is specified.</li> *  <li>Check the order of the tags.</li> *  <li>Check the indentation of each tag.</li> *  <li>Check required and optional tags and the format of their content.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff{    /**     * The header comment parser for the current file.     *     * @var PHP_CodeSniffer_Comment_Parser_ClassCommentParser     */    protected $commentParser = null;    /**     * The current PHP_CodeSniffer_File object we are processing.     *     * @var PHP_CodeSniffer_File     */    protected $currentFile = null;    /**     * Tags in correct order and related info.     *     * @var array     */    protected $tags = array(                       'version'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must be first',                                       ),                       'category'   => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'precedes @package',                                       ),                       'package'    => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follows @category (if used)',                                       ),                       'subpackage' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @package',                                       ),                       'author'     => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @subpackage (if used) or @package',                                       ),                       'copyright'  => array(                                        'required'       => true,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @author (if used), @subpackage (if used) or @package',                                       ),                       'license'    => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @copyright',                                       ),                       'link'       => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @license',                                       ),                       'see'        => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @link (if used) or @license',                                       ),                       'since'      => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follows @see (if used), @link (if used) or @license',                                       ),                       'deprecated' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @since (if used), @see (if used), @link (if used) or @license',                                       ),                );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_OPEN_TAG);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $this->currentFile = $phpcsFile;        // We are only interested if this is the first open tag.        if ($stackPtr !== 0) {            if ($phpcsFile->findPrevious(T_OPEN_TAG, ($stackPtr - 1)) !== false) {                return;            }        }        $tokens = $phpcsFile->getTokens();        // Find the next non whitespace token.        $commentStart            = $phpcsFile->findNext(T_WHITESPACE, ($stackPtr + 1), null, true);        // Allow declare() statements at the top of the file.        if ($tokens[$commentStart]['code'] === T_DECLARE) {            $semicolon = $phpcsFile->findNext(T_SEMICOLON, ($commentStart + 1));            $commentStart                = $phpcsFile->findNext(T_WHITESPACE, ($semicolon + 1), null, true);        }        // Ignore vim header.        if ($tokens[$commentStart]['code'] === T_COMMENT) {            if (strstr($tokens[$commentStart]['content'], 'vim:') !== false) {                $commentStart = $phpcsFile->findNext(                    T_WHITESPACE,                    ($commentStart + 1),                    null,                    true                );            }        }        $errorToken = ($stackPtr + 1);        if (isset($tokens[$errorToken]) === false) {            $errorToken--;        }        if ($tokens[$commentStart]['code'] === T_CLOSE_TAG) {            // We are only interested if this is the first open tag.            return;        } else if ($tokens[$commentStart]['code'] === T_COMMENT) {            $error = 'You must use "/**" style comments for a file comment';            $phpcsFile->addError($error, $errorToken, 'WrongStyle');            return;        } else if ($commentStart === false            || $tokens[$commentStart]['code'] !== T_DOC_COMMENT        ) {            $phpcsFile->addError('Missing file doc comment', $errorToken, 'Missing');            return;        } else {            // Extract the header comment docblock.            $commentEnd = $phpcsFile->findNext(                T_DOC_COMMENT,                ($commentStart + 1),                null,                true            );            $commentEnd--;            // Check if there is only 1 doc comment between the            // open tag and class token.            $nextToken   = array(                            T_ABSTRACT,                            T_CLASS,                            T_FUNCTION,                            T_DOC_COMMENT,                           );            $commentNext = $phpcsFile->findNext($nextToken, ($commentEnd + 1));            if ($commentNext !== false                && $tokens[$commentNext]['code'] !== T_DOC_COMMENT            ) {                // Found a class token right after comment doc block.                $newlineToken = $phpcsFile->findNext(                    T_WHITESPACE,                    ($commentEnd + 1),                    $commentNext,                    false,                    $phpcsFile->eolChar                );                if ($newlineToken !== false) {                    $newlineToken = $phpcsFile->findNext(                        T_WHITESPACE,                        ($newlineToken + 1),                        $commentNext,                        false,                        $phpcsFile->eolChar                    );                    if ($newlineToken === false) {                        // No blank line between the class token and the doc block.                        // The doc block is most likely a class comment.                        $error = 'Missing file doc comment';                        $phpcsFile->addError($error, $errorToken, 'Missing');                        return;                    }                }            }//end if            $comment = $phpcsFile->getTokensAsString(                $commentStart,                ($commentEnd - $commentStart + 1)            );            // Parse the header comment docblock.            try {                $this->commentParser = new PHP_CodeSniffer_CommentParser_ClassCommentParser($comment, $phpcsFile);                $this->commentParser->parse();            } catch (PHP_CodeSniffer_CommentParser_ParserException $e) {                $line = ($e->getLineWithinComment() + $commentStart);                $phpcsFile->addError($e->getMessage(), $line, 'FailedParse');                return;            }            $comment = $this->commentParser->getComment();            if (is_null($comment) === true) {                $error = 'File doc comment is empty';                $phpcsFile->addError($error, $commentStart, 'Empty');                return;            }            // No extra newline before short description.            $short        = $comment->getShortComment();            $newlineCount = 0;            $newlineSpan  = strspn($short, $phpcsFile->eolChar);            if ($short !== '' && $newlineSpan > 0) {                $error = 'Extra newline(s) found before file comment short description';                $phpcsFile->addError($error, ($commentStart + 1), 'SpacingBefore');            }            $newlineCount = (substr_count($short, $phpcsFile->eolChar) + 1);            // Exactly one blank line between short and long description.            $long = $comment->getLongComment();            if (empty($long) === false) {                $between        = $comment->getWhiteSpaceBetween();                $newlineBetween = substr_count($between, $phpcsFile->eolChar);                if ($newlineBetween !== 2) {                    $error = 'There must be exactly one blank line between descriptions in file comment';                    $phpcsFile->addError($error, ($commentStart + $newlineCount + 1), 'DescriptionSpacing');                }                $newlineCount += $newlineBetween;            }            // Exactly one blank line before tags if short description is present.            $tags = $this->commentParser->getTagOrders();            if (count($tags) > 1 && $short !== '' && $newlineSpan > 0) {                $newlineSpan = $comment->getNewlineAfter();                if ($newlineSpan !== 2) {                    $error = 'There must be exactly one blank line before the tags in file comment';                    if ($long !== '') {                        $newlineCount += (substr_count($long, $phpcsFile->eolChar) - $newlineSpan + 1);                    }                    $phpcsFile->addError($error, ($commentStart + $newlineCount), 'SpacingBeforeTags');                    $short = rtrim($short, $phpcsFile->eolChar.' ');                }            }//            // Check the PHP Version.//            $this->processPHPVersion($commentStart, $commentEnd, $long);            // Check each tag.            $this->processTags($commentStart, $commentEnd);        }//end if    }//end process()//    /**//     * Check that the PHP version is specified.//     *//     * @param int    $commentStart Position in the stack where the comment started.//     * @param int    $commentEnd   Position in the stack where the comment ended.//     * @param string $commentText  The text of the function comment.//     *//     * @return void//     *///    protected function processPHPVersion($commentStart, $commentEnd, $commentText)//    {//        if (strstr(strtolower($commentText), 'php version') === false) {//            $error = 'PHP version not specified';//             $this->currentFile->addWarning($error, $commentEnd, 'MissingVersion');//        }////    }//end processPHPVersion()    /**     * Processes each required or optional tag.     *     * @param int $commentStart Position in the stack where the comment started.     * @param int $commentEnd   Position in the stack where the comment ended.     *     * @return void     */    protected function processTags($commentStart, $commentEnd)    {        $docBlock    = (get_class($this) === 'Joomla_Sniffs_Commenting_FileCommentSniff') ? 'file' : 'class';        $foundTags   = $this->commentParser->getTagOrders();        $orderIndex  = 0;        $indentation = array();        $longestTag  = 0;        $errorPos    = 0;        foreach ($this->tags as $tag => $info) {            // Required tag missing.            if ($info['required'] === true && in_array($tag, $foundTags) === false) {                $error = 'Missing @%s tag in %s comment';                $data  = array(                              $tag,                              $docBlock,                             );                $this->currentFile->addError($error, $commentEnd, 'MissingTag', $data);                continue;            }             // Get the line number for current tag.            $tagName = ucfirst($tag);            if ($info['allow_multiple'] === true) {                $tagName .= 's';            }            $getMethod  = 'get'.$tagName;            $tagElement = $this->commentParser->$getMethod();            if (is_null($tagElement) === true || empty($tagElement) === true) {                continue;            }            $errorPos = $commentStart;            if (is_array($tagElement) === false) {                $errorPos = ($commentStart + $tagElement->getLine());            }            // Get the tag order.            $foundIndexes = array_keys($foundTags, $tag);            if (count($foundIndexes) > 1) {                // Multiple occurance not allowed.                if ($info['allow_multiple'] === false) {                    $error = 'Only 1 @%s tag is allowed in a %s comment';                    $data  = array(                              $tag,                              $docBlock,                             );                    $this->currentFile->addError($error, $errorPos, 'DuplicateTag', $data);                } else {                    // Make sure same tags are grouped together.                    $i     = 0;                    $count = $foundIndexes[0];                    foreach ($foundIndexes as $index) {                        if ($index !== $count) {                            $errorPosIndex                                = ($errorPos + $tagElement[$i]->getLine());                            $error = '@%s tags must be grouped together';                            $data  = array($tag);                            $this->currentFile->addError($error, $errorPosIndex, 'TagsNotGrouped', $data);                        }                        $i++;                        $count++;                    }                }            }//end if            // Check tag order.            if ($foundIndexes[0] > $orderIndex) {                $orderIndex = $foundIndexes[0];            } else {                if (is_array($tagElement) === true && empty($tagElement) === false) {                    $errorPos += $tagElement[0]->getLine();                }                $error = 'The @%s tag is in the wrong order; the tag %s';                $data  = array(                          $tag,                          $info['order_text'],                         );                $this->currentFile->addError($error, $errorPos, 'WrongTagOrder', $data);            }            // Store the indentation for checking.            $len = strlen($tag);            if ($len > $longestTag) {                $longestTag = $len;            }            if (is_array($tagElement) === true) {                foreach ($tagElement as $key => $element) {                    $indentation[] = array(                                      'tag'   => $tag,                                      'space' => $this->getIndentation($tag, $element),                                      'line'  => $element->getLine(),                                     );                }            } else {                $indentation[] = array(                                  'tag'   => $tag,                                  'space' => $this->getIndentation($tag, $tagElement),                                 );            }            $method = 'process'.$tagName;            if (method_exists($this, $method) === true) {                // Process each tag if a method is defined.                call_user_func(array($this, $method), $errorPos);            } else {                if (is_array($tagElement) === true) {                    foreach ($tagElement as $key => $element) {                        $element->process(                            $this->currentFile,                            $commentStart,                            $docBlock                        );                    }                } else {                     $tagElement->process(                         $this->currentFile,                         $commentStart,                         $docBlock                     );                }            }        }//end foreach        foreach ($indentation as $indentInfo) {            if ($indentInfo['space'] !== 0            // Joomla change: allow for 2 space gap.                && $indentInfo['space'] !== ($longestTag + 2)            ) {                $expected = (($longestTag - strlen($indentInfo['tag'])) + 2);                $space    = ($indentInfo['space'] - strlen($indentInfo['tag']));                $error    = '@%s tag comment indented incorrectly; expected %s spaces but found %s';                $data     = array(                             $indentInfo['tag'],                             $expected,                             $space,                            );                $getTagMethod = 'get'.ucfirst($indentInfo['tag']);                if ($this->tags[$indentInfo['tag']]['allow_multiple'] === true) {                    $line = $indentInfo['line'];                } else {                    $tagElem = $this->commentParser->$getTagMethod();                    $line    = $tagElem->getLine();                }                $this->currentFile->addError($error, ($commentStart + $line), 'TagIndent', $data);            }        }    }//end processTags()    /**     * Get the indentation information of each tag.     *     * @param string                                   $tagName    The name of the     *                                                             doc comment     *                                                             element.     * @param PHP_CodeSniffer_CommentParser_DocElement $tagElement The doc comment     *                                                             element.     *     * @return void     */    protected function getIndentation($tagName, $tagElement)    {        if ($tagElement instanceof PHP_CodeSniffer_CommentParser_SingleElement) {            if ($tagElement->getContent() !== '') {                return (strlen($tagName) + substr_count($tagElement->getWhitespaceBeforeContent(), ' '));            }        } else if ($tagElement instanceof PHP_CodeSniffer_CommentParser_PairElement) {            if ($tagElement->getValue() !== '') {                return (strlen($tagName) + substr_count($tagElement->getWhitespaceBeforeValue(), ' '));            }        }        return 0;    }//end getIndentation()    /**     * Process the category tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processCategory($errorPos)    {        $category = $this->commentParser->getCategory();        if ($category !== null) {            $content = $category->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {//                    $newContent = str_replace(' ', '_', $content);//                    $nameBits   = explode('_', $newContent);//                    $firstBit   = array_shift($nameBits);//                    $newName    = ucfirst($firstBit).'_';//                    foreach ($nameBits as $bit) {//                        $newName .= ucfirst($bit).'_';//                    }////                    $error     = 'Category name "%s" is not valid; consider "%s" instead';//                    $validName = trim($newName, '_');//                    $data      = array(//                                  $content,//                                  $validName,//                                 );//                    $this->currentFile->addError($error, $errorPos, 'InvalidCategory', $data);                }            } else {                $error = '@category tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptyCategory');            }        }    }//end processCategory()    /**     * Process the package tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processPackage($errorPos)    {        $package = $this->commentParser->getPackage();        if ($package !== null) {            $content = $package->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {                    $newContent = str_replace(' ', '_', $content);                    $nameBits   = explode('_', $newContent);                    $firstBit   = array_shift($nameBits);                    $newName    = strtoupper($firstBit{0}).substr($firstBit, 1).'_';                    foreach ($nameBits as $bit) {                        $newName .= strtoupper($bit{0}).substr($bit, 1).'_';                    }                    $error     = 'Package name "%s" is not valid; consider "%s" instead';                    $validName = trim($newName, '_');                    $data      = array(                                  $content,                                  $validName,                                 );                    $this->currentFile->addError($error, $errorPos, 'InvalidPackage', $data);                }            } else {                $error = '@package tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptyPackage');            }        }    }//end processPackage()    /**     * Process the subpackage tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processSubpackage($errorPos)    {        $package = $this->commentParser->getSubpackage();        if ($package !== null) {            $content = $package->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {//                    $newContent = str_replace(' ', '_', $content);//                    $nameBits   = explode('_', $newContent);//                    $firstBit   = array_shift($nameBits);//                    $newName    = strtoupper($firstBit{0}).substr($firstBit, 1).'_';//                    foreach ($nameBits as $bit) {//                        $newName .= strtoupper($bit{0}).substr($bit, 1).'_';//                    }////                    $error     = 'Subpackage name "%s" is not valid; consider "%s" instead';//                    $validName = trim($newName, '_');//                    $data      = array(//                                  $content,//                                  $validName,//                                 );//                    $this->currentFile->addError($error, $errorPos, 'InvalidSubpackage', $data);                }            } else {                $error = '@subpackage tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptySubpackage');            }        }    }//end processSubpackage()    /**     * Process the author tag(s) that this header comment has.     *     * This function is different from other _process functions     * as $authors is an array of SingleElements, so we work out     * the errorPos for each element separately     *     * @param int $commentStart The position in the stack where     *                          the comment started.     *     * @return void     */    protected function processAuthors($commentStart)    {         $authors = $this->commentParser->getAuthors();        // Report missing return.        if (empty($authors) === false) {            foreach ($authors as $author) {                $errorPos = ($commentStart + $author->getLine());                $content  = $author->getContent();                if ($content !== '') {                    $local = '\da-zA-Z-_+';                    // Dot character cannot be the first or last character                    // in the local-part.                    $localMiddle = $local.'.\w';                    if (preg_match('/^([^<]*)\s+<(['.$local.']['.$localMiddle.']*['.$local.']@[\da-zA-Z][-.\w]*[\da-zA-Z]\.[a-zA-Z]{2,7})>$/', $content) === 0) {                        $error = 'Content of the @author tag must be in the form "Display Name <username@example.com>"';                        $this->currentFile->addError($error, $errorPos, 'InvalidAuthors');                    }                } else {                    $error    = 'Content missing for @author tag in %s comment';                    $docBlock = (get_class($this) === 'PEAR_Sniffs_Commenting_FileCommentSniff') ? 'file' : 'class';                    $data     = array($docBlock);                    $this->currentFile->addError($error, $errorPos, 'EmptyAuthors', $data);                }            }        }    }//end processAuthors()    /**     * Process the copyright tags.     *     * @param int $commentStart The position in the stack where     *                          the comment started.     *     * @return void     */    protected function processCopyrights($commentStart)    {        $copyrights = $this->commentParser->getCopyrights();        foreach ($copyrights as $copyright) {            $errorPos = ($commentStart + $copyright->getLine());            $content  = $copyright->getContent();            if ($content !== '') {                $matches = array();                if (preg_match('/^.*?([0-9]{4})((.{1})([0-9]{4}))? (.+)$/', $content, $matches) !== 0) {                    // Check earliest-latest year order.                    if ($matches[3] !== '') {                        if ($matches[3] !== '-') {                            $error = 'A hyphen must be used between the earliest and latest year';                            $this->currentFile->addError($error, $errorPos, 'CopyrightHyphen');                        }                        if ($matches[4] !== '' && $matches[4] < $matches[1]) {                            $error = "Invalid year span \"$matches[1]$matches[3]$matches[4]\" found; consider \"$matches[4]-$matches[1]\" instead";                            $this->currentFile->addWarning($error, $errorPos, 'InvalidCopyright');                        }                    }                } else {                    $error = '@copyright tag must contain a year and the name of the copyright holder';                    $this->currentFile->addError($error, $errorPos, 'EmptyCopyright');                }            } else {                $error = '@copyright tag must contain a year and the name of the copyright holder';                $this->currentFile->addError($error, $errorPos, 'EmptyCopyright');            }//end if        }//end if    }//end processCopyrights()    /**     * Process the license tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processLicense($errorPos)    {        $license = $this->commentParser->getLicense();        if ($license !== null) {            $value   = $license->getValue();            $comment = $license->getComment();            if ($value === '' || $comment === '') {                $error = '@license tag must contain a URL and a license name';                $this->currentFile->addError($error, $errorPos, 'EmptyLicense');            }        }    }//end processLicense()    /**     * Process the version tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processVersion($errorPos)    {        $version = $this->commentParser->getVersion();        if ($version !== null) {            $content = $version->getContent();            $matches = array();            if (empty($content) === true) {                $error = 'Content missing for @version tag in file comment';                $this->currentFile->addError($error, $errorPos, 'EmptyVersion');            } else if (strstr($content, 'CVS:') === false                && strstr($content, 'SVN:') === false                && strstr($content, 'Id:') === false            ) {                $error = 'Invalid version "%s" in file comment; consider "CVS: <cvs_id>" or "SVN: <svn_id>" instead';                $data  = array($content);                $this->currentFile->addWarning($error, $errorPos, 'InvalidVersion', $data);            }        }    }//end processVersion()}//end class?>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument Modules renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererModules extends JDocumentRenderer{	/**	 * Renders multiple modules script and returns the results as a string	 *	 * @param   string  $position  The position of the modules to render	 * @param   array   $params    Associative array of values	 * @param   string  $content   Module content	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($position, $params = array(), $content = null)	{		$renderer = $this->_doc->loadRenderer('module');		$buffer = '';		foreach (JModuleHelper::getModules($position) as $mod)		{			$buffer .= $renderer->render($mod, $params, $content);		}		return $buffer;	}}
<?php/** * Squiz_Sniffs_WhiteSpace_SemicolonSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: SemicolonSpacingSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Ensure there is no whitespace before a semicolon <b>;</b>. * * Example: * <b class="bad">echo $a ;</b> * <b class="good">echo $a;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SemicolonSpacingSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_SEMICOLON);    }//function    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param integer                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $prevType = $tokens[($stackPtr - 1)]['code'];        if(in_array($prevType, PHP_CodeSniffer_Tokens::$emptyTokens) === true)        {            $nonSpace = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$emptyTokens, ($stackPtr - 2), null, true);            $expected = $tokens[$nonSpace]['content'].';';            $found    = $phpcsFile->getTokensAsString($nonSpace, ($stackPtr - $nonSpace)).';';            $error    = sprintf('Space found before semicolon; expected "%s" but found "%s"'            , $expected, $found);            $phpcsFile->addError($error, $stackPtr, 'Incorrect');        }    }//function}//class
<?php/** * Verifies that control statements conform to their coding standards. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ControlSignatureSniff.php 244676 2007-10-23 06:05:14Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_Standards_AbstractPatternSniff', true) === false) {	throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractPatternSniff not found');}/** * Verifies that control statements conform to their coding standards. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_ControlSignatureSniff extends PHP_CodeSniffer_Standards_AbstractPatternSniff{	/**	 * Constructs a Joomla_Sniffs_ControlStructures_ControlSignatureSniff.	 */	public function __construct()	{		parent::__construct(true);	}//end __construct()	/**	 * Returns the patterns that this test wishes to verify.	 *	 * @return array(string)	 */	protected function getPatterns()	{		return array(			'if (...)EOL...{...}EOL...elseEOL',			'if (...)EOL...{...}EOL...elseif (...)EOL',			'if (...)EOL',			'tryEOL...{EOL...}EOL',			'catch (...)EOL...{EOL',			'doEOL...{...}EOL',			'while (...)EOL...{EOL',			'for (...)EOL...{EOL',			'foreach (...)EOL...{EOL',			'switch (...)EOL...{EOL',		);	}//end getPatterns()	/**	 * Process a pattern.	 *	 * Returns if we are inside a "tmpl" folder - workaround for the Joomla! CMS :(	 *	 * @param array $patternInfo Information about the pattern used for checking, which includes are	 *               parsed token representation of the pattern.	 * @param PHP_CodeSniffer_File $phpcsFile The PHP_CodeSniffer file where the token occured.	 * @param integer $stackPtr The postion in the tokens stack where the listening token type was found.	 *	 * @return return_type	 */	protected function processPattern($patternInfo, PHP_CodeSniffer_File $phpcsFile	, $stackPtr)	{		if (0)		{			/*			 * @todo disabled - This is a special sniff for the Joomla! CMS to exclude			* the tmpl folder which may contain constructs in colon notation			*/			$parts = explode(DIRECTORY_SEPARATOR, $phpcsFile->getFileName());			if ('tmpl' == $parts[count($parts) - 2])			{				return false;			}		}		return parent::processPattern($patternInfo, $phpcsFile, $stackPtr);	}//function}//end class?>
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ucwords* Uppercase the first character of each word in a string* Note: requires utf8_substr_replace and utf8_strtoupper* @param string* @return string with first char of each word uppercase* @see http://www.php.net/ucwords* @package utf8* @subpackage strings*/function utf8_ucwords($str) {    // Note: [\x0c\x09\x0b\x0a\x0d\x20] matches;    // form feeds, horizontal tabs, vertical tabs, linefeeds and carriage returns    // This corresponds to the definition of a "word" defined at http://www.php.net/ucwords    $pattern = '/(^|([\x0c\x09\x0b\x0a\x0d\x20]+))([^\x0c\x09\x0b\x0a\x0d\x20]{1})[^\x0c\x09\x0b\x0a\x0d\x20]*/u';    return preg_replace_callback($pattern, 'utf8_ucwords_callback',$str);}//---------------------------------------------------------------/*** Callback function for preg_replace_callback call in utf8_ucwords* You don't need to call this yourself* @param array of matches corresponding to a single word* @return string with first char of the word in uppercase* @see utf8_ucwords* @see utf8_strtoupper* @package utf8* @subpackage strings*/function utf8_ucwords_callback($matches) {    $leadingws = $matches[2];    $ucfirst = utf8_strtoupper($matches[3]);    $ucword = utf8_substr_replace(ltrim($matches[0]),$ucfirst,0,1);    return $leadingws . $ucword;}
<?php/** * @package     Joomla.Platform * @subpackage  Mail * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;$PHPMAILER_LANG["authenticate"] = JText::_('PHPMAILER_AUTHENTICATE');$PHPMAILER_LANG["connect_host"] = JText::_('PHPMAILER_CONNECT_HOST');$PHPMAILER_LANG["data_not_accepted"] = JText::_('PHPMAILER_DATA_NOT_ACCEPTED');$PHPMAILER_LANG['empty_message'] = JText::_('PHPMAILER_EMPTY_MESSAGE');$PHPMAILER_LANG["encoding"] = JText::_('PHPMAILER_ENCODING');$PHPMAILER_LANG["execute"] = JText::_('PHPMAILER_EXECUTE');$PHPMAILER_LANG["file_access"] = JText::_('PHPMAILER_FILE_ACCESS');$PHPMAILER_LANG["file_open"] = JText::_('PHPMAILER_FILE_OPEN');$PHPMAILER_LANG["from_failed"] = JText::_('PHPMAILER_FROM_FAILED');$PHPMAILER_LANG["instantiate"] = JText::_('PHPMAILER_INSTANTIATE');$PHPMAILER_LANG['invalid_address'] = JText::_('PHPMAILER_INVALID_ADDRESS');$PHPMAILER_LANG["mailer_not_supported"] = JText::_('PHPMAILER_MAILER_IS_NOT_SUPPORTED');$PHPMAILER_LANG["provide_address"] = JText::_('PHPMAILER_PROVIDE_ADDRESS');$PHPMAILER_LANG["recipients_failed"] = JText::_('PHPMAILER_RECIPIENTS_FAILED');$PHPMAILER_LANG["signing"]  = JText::_('PHPMAILER_SIGNING_ERROR');$PHPMAILER_LANG['smtp_connect_failed'] = JText::_('PHPMAILER_SMTP_CONNECT_FAILED');$PHPMAILER_LANG['smtp_error'] = JText::_('PHPMAILER_SMTP_ERROR');$PHPMAILER_LANG['variable_set'] = JText::_('PHPMAILER_VARIABLE_SET');
<?php/** * Sniffs_Squiz_WhiteSpace_OperatorSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: OperatorSpacingSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Verifies that operators have valid spacing surrounding them. * * Example: * <b class="bad">$a=$b+$c;</b> * <b class="good">$a = $b + $c;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_OperatorSpacingSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        $comparison = PHP_CodeSniffer_Tokens::$comparisonTokens;        $operators  = PHP_CodeSniffer_Tokens::$operators;        $assignment = PHP_CodeSniffer_Tokens::$assignmentTokens;        return array_unique(array_merge($comparison, $operators, $assignment));    }//function    /**     * Processes this sniff, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The current file being checked.     * @param integer                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Skip default values in function declarations.        if($tokens[$stackPtr]['code'] === T_EQUAL        || $tokens[$stackPtr]['code'] === T_MINUS        )        {            if(isset($tokens[$stackPtr]['nested_parenthesis']) === true)            {                $bracket = end($tokens[$stackPtr]['nested_parenthesis']);                if(isset($tokens[$bracket]['parenthesis_owner']) === true)                {                    $function = $tokens[$bracket]['parenthesis_owner'];                    if($tokens[$function]['code'] === T_FUNCTION)                    {                        return;                    }                }            }        }        if($tokens[$stackPtr]['code'] === T_EQUAL)        {            // Skip for '=&' case.            if(isset($tokens[($stackPtr + 1)]) === true            && $tokens[($stackPtr + 1)]['code'] === T_BITWISE_AND            || $tokens[($stackPtr + 1)]['code'] === T_OPEN_PARENTHESIS)            {                return;            }        }        if($tokens[$stackPtr]['code'] === T_EQUAL        || $tokens[$stackPtr]['content'] === '.='        || $tokens[$stackPtr]['content'] === '+=')        {            // Skip for '=(' case.            // Skip also '.=('            if(isset($tokens[($stackPtr + 1)]) === true            && $tokens[($stackPtr + 1)]['code'] === T_OPEN_PARENTHESIS)            {                return;            }        }        if($tokens[$stackPtr]['code'] === T_BITWISE_AND)        {            // If its not a reference, then we expect one space either side of the            // bitwise operator.            if($phpcsFile->isReference($stackPtr) === false)            {                // Check there is one space before the & operator.                if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)                {                    $error = 'Expected 1 space before "&" operator; 0 found';                    $phpcsFile->addError($error, $stackPtr, 'NoSpaceBeforeAmp');                }                else                {                    if(strlen($tokens[($stackPtr - 1)]['content']) !== 1)                    {                        $found = strlen($tokens[($stackPtr - 1)]['content']);                        $error = sprintf('Expected 1 space before "&" operator; %s found'                        , $found);                        $phpcsFile->addError($error, $stackPtr, 'SpacingBeforeAmp');                    }                }                // Check there is one space after the & operator.                if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)                {                    $error = 'Expected 1 space after "&" operator; 0 found';                    $phpcsFile->addError($error, $stackPtr, 'NoSpaceAfterAmp');                }                else                {                    if(strlen($tokens[($stackPtr + 1)]['content']) !== 1)                    {                        $found = strlen($tokens[($stackPtr + 1)]['content']);                        $error = sprintf('Expected 1 space after "&" operator; %s found'                        , $found);                        $phpcsFile->addError($error, $stackPtr, 'SpacingAfterAmp');                    }                }            }        }        else        {            if($tokens[$stackPtr]['code'] === T_MINUS            || $tokens[$stackPtr]['code'] === T_PLUS)            {                // Check minus spacing, but make sure we aren't just assigning                // a minus value or returning one.                $prev = $phpcsFile->findPrevious(T_WHITESPACE, ($stackPtr - 1), null, true);                if($tokens[$prev]['code'] === T_RETURN)                {                    // Just returning a negative value; eg. return -1.                    return;                }                if(in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$operators) === true)                {                    // Just trying to operate on a negative value; eg. ($var * -1).                    return;                }                if(in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$comparisonTokens) === true)                {                    // Just trying to compare a negative value; eg. ($var === -1).                    return;                }                // A list of tokens that indicate that the token is not                // part of an arithmetic operation.                $invalidTokens = array(                T_COMMA,                T_OPEN_PARENTHESIS,                T_OPEN_SQUARE_BRACKET,                T_DOUBLE_ARROW,                T_COLON,                T_INLINE_THEN, // the ternary "?"                T_CASE                );                if(in_array($tokens[$prev]['code'], $invalidTokens) === true)                {                    // Just trying to use a negative value; eg. myFunction($var, -2).                    return;                }                $number = $phpcsFile->findNext(T_WHITESPACE, ($stackPtr + 1), null, true);                if(in_array($tokens[$number]['code'], array(T_LNUMBER, T_VARIABLE)) === true)                {                    $semi = $phpcsFile->findNext(T_WHITESPACE, ($number + 1), null, true);                    if($tokens[$semi]['code'] === T_SEMICOLON)                    {                        if($prev !== false                        && (in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$assignmentTokens) === true))                        {                            // This is a negative assignment.                            return;                        }                    }                }            }            $operator = $tokens[$stackPtr]['content'];            if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)            {                $error = "Expected 1 space before \"$operator\"; 0 found";                $phpcsFile->addError($error, $stackPtr, 'NoSpaceBefore');            }            else if(strlen($tokens[($stackPtr - 1)]['content']) !== 1)            {                // Don't throw an error for assignments, because other standards allow                // multiple spaces there to align multiple assignments.                if(in_array($tokens[$stackPtr]['code'], PHP_CodeSniffer_Tokens::$assignmentTokens) === false)                {                    $found = strlen($tokens[($stackPtr - 1)]['content']);                    $error = sprintf('Expected 1 space before "%s"; %s found'                    , $operator, $found);                    $phpcsFile->addError($error, $stackPtr, 'SpacingBefore');                }            }            if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)            {                $error = "Expected 1 space after \"$operator\"; 0 found";                $phpcsFile->addError($error, $stackPtr, 'NoSpaceAfter');            }            else if(strlen($tokens[($stackPtr + 1)]['content']) !== 1)            {                $found = strlen($tokens[($stackPtr + 1)]['content']);                $error = sprintf('Expected 1 space after "%s"; %s found'                , $operator, $found);                $phpcsFile->addError($error, $stackPtr, 'SpacingAfter');            }        }    }//function}//class
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_content/helpers/route.php';?><?php if ($this->params->get('show_articles')) : ?><div class="contact-articles">	<ol>		<?php foreach ($this->item->articles as $article) :	?>			<li>				<?php echo JHtml::_('link', JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catslug)), htmlspecialchars($article->title, ENT_COMPAT, 'UTF-8')); ?>			</li>		<?php endforeach; ?>	</ol></div><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><fieldset>	<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR.'/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();$user = JFactory::getUser();?><fieldset class="adminform">	<legend><?php echo JText::_('COM_TEMPLATES_MENUS_ASSIGNMENT'); ?></legend>		<label id="jform_menuselect-lbl" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label>		<button type="button" class="jform-rightbtn" onclick="$$('.chk-menulink').each(function(el) { el.checked = !el.checked; });">			<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>		</button>		<div class="clr"></div>		<div id="menu-assignment">		<?php foreach ($menuTypes as &$type) : ?>			<ul class="menu-links">				<button type="button" class="jform-rightbtn" onclick="$$('.<?php echo $type->menutype; ?>').each(function(el) { el.checked = !el.checked; });">					<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>				</button>				<div class="clr"></div>				<h3><?php echo $type->title ? $type->title : $type->menutype; ?></h3>				<?php foreach ($type->links as $link) : ?>					<li class="menu-link">						<input type="checkbox" name="jform[assigned][]" value="<?php echo (int) $link->value;?>" id="link<?php echo (int) $link->value;?>"<?php if ($link->template_style_id == $this->item->id):?> checked="checked"<?php endif;?><?php if ($link->checked_out && $link->checked_out != $user->id):?> disabled="disabled"<?php else:?> class="chk-menulink <?php echo $type->menutype; ?>"<?php endif;?> />						<label for="link<?php echo (int) $link->value;?>" >							<?php echo $link->text; ?>						</label>					</li>				<?php endforeach; ?>			</ul>		<?php endforeach; ?>		</div></fieldset>
