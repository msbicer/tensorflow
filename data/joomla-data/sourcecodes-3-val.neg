<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users component helper. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersHelper{	/**	 * @var    JObject  A cache for the available actions.	 * @since  1.6	 */	protected static $actions;	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_USERS_SUBMENU_USERS'),			'index.php?option=com_users&view=users',			$vName == 'users'		);		// Groups and Levels are restricted to core.admin		$canDo = self::getActions();		if ($canDo->get('core.admin'))		{			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_GROUPS'),				'index.php?option=com_users&view=groups',				$vName == 'groups'			);			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_LEVELS'),				'index.php?option=com_users&view=levels',				$vName == 'levels'			);			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_NOTES'),				'index.php?option=com_users&view=notes',				$vName == 'notes'			);			$extension = JFactory::getApplication()->input->getString('extension');			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_NOTE_CATEGORIES'),				'index.php?option=com_categories&extension=com_users',				$vName == 'categories' || $extension == 'com_users'			);		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since   1.6	 * @todo    Refactor to work with notes	 */	public static function getActions()	{		if (empty(self::$actions))		{			$user = JFactory::getUser();			self::$actions = new JObject;			$actions = JAccess::getActions('com_users');			foreach ($actions as $action)			{				self::$actions->set($action->name, $user->authorise($action->name, 'com_users'));			}		}		return self::$actions;	}	/**	 * Get a list of filter options for the blocked state of a user.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getStateOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('JENABLED'));		$options[] = JHtml::_('select.option', '1', JText::_('JDISABLED'));		return $options;	}	/**	 * Get a list of filter options for the activated state of a user.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getActiveOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('COM_USERS_ACTIVATED'));		$options[] = JHtml::_('select.option', '1', JText::_('COM_USERS_UNACTIVATED'));		return $options;	}	/**	 * Get a list of the user groups for filtering.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getGroups()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value')			->select('a.title AS text')			->select('COUNT(DISTINCT b.id) AS level')			->from('#__usergroups as a')			->join('LEFT', '#__usergroups  AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseNotice(500, $e->getMessage());			return null;		}		foreach ($options as &$option)		{			$option->text = str_repeat('- ', $option->level).$option->text;		}		return $options;	}	/**	 * Creates a list of range options used in filter select list	 * used in com_users on users view	 *	 * @return  array	 *	 * @since   2.5	 */	public static function getRangeOptions()	{		$options = array(			JHtml::_('select.option', 'today', JText::_('COM_USERS_OPTION_RANGE_TODAY')),			JHtml::_('select.option', 'past_week', JText::_('COM_USERS_OPTION_RANGE_PAST_WEEK')),			JHtml::_('select.option', 'past_1month', JText::_('COM_USERS_OPTION_RANGE_PAST_1MONTH')),			JHtml::_('select.option', 'past_3month', JText::_('COM_USERS_OPTION_RANGE_PAST_3MONTH')),			JHtml::_('select.option', 'past_6month', JText::_('COM_USERS_OPTION_RANGE_PAST_6MONTH')),			JHtml::_('select.option', 'past_year', JText::_('COM_USERS_OPTION_RANGE_PAST_YEAR')),			JHtml::_('select.option', 'post_year', JText::_('COM_USERS_OPTION_RANGE_POST_YEAR')),		);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller for global configuration * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.5 */class ConfigControllerApplication extends JControllerLegacy{	/**	 * Class Constructor	 *	 * @param   array  $config		An optional associative array of configuration settings.	 * @return  void	 * @since   1.5	 */	public function __construct($config = array())	{		parent::__construct($config);		// Map the apply task to the save method.		$this->registerTask('apply', 'save');	}	/**	 * Method to save the configuration.	 *	 * @return  bool	True on success, false on failure.	 * @since   1.5	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Check if the user is authorized to do this.		if (!JFactory::getUser()->authorise('core.admin'))		{			JFactory::getApplication()->redirect('index.php', JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Set FTP credentials, if given.		JClientHelper::setCredentialsFromRequest('ftp');		$app   = JFactory::getApplication();		$model = $this->getModel('Application');		$form  = $model->getForm();		$data  = $this->input->post->get('jform', array(), 'array');		// Validate the posted data.		$return = $model->validate($form, $data);		// Check for validation errors.		if ($return === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_config.config.global.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_config&view=application', false));			return false;		}		// Attempt to save the configuration.		$data	= $return;		$return = $model->save($data);		// Check the return value.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('com_config.config.global.data', $data);			// Save failed, go back to the screen and display a notice.			$message = JText::sprintf('JERROR_SAVE_FAILED', $model->getError());			$this->setRedirect('index.php?option=com_config&view=application', $message, 'error');			return false;		}		// Set the success message.		$message = JText::_('COM_CONFIG_SAVE_SUCCESS');		// Set the redirect based on the task.		switch ($this->getTask())		{			case 'apply':				$this->setRedirect('index.php?option=com_config', $message);				break;			case 'save':			default:				$this->setRedirect('index.php', $message);				break;		}		return true;	}	/**	 * Cancel operation	 */	public function cancel()	{		// Check if the user is authorized to do this.		if (!JFactory::getUser()->authorise('core.admin', 'com_config'))		{			JFactory::getApplication()->redirect('index.php', JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		// Clean the session data.		$app = JFactory::getApplication();		$app->setUserState('com_config.config.global.data',	null);		$this->setRedirect('index.php');	}	public function refreshHelp()	{		jimport('joomla.filesystem.file');		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		if (($data = file_get_contents('http://help.joomla.org/helpsites.xml')) === false)		{			$this->setRedirect('index.php?option=com_config', JText::_('COM_CONFIG_ERROR_HELPREFRESH_FETCH'), 'error');		} elseif (!JFile::write(JPATH_BASE . '/help/helpsites.xml', $data))		{			$this->setRedirect('index.php?option=com_config', JText::_('COM_CONFIG_ERROR_HELPREFRESH_ERROR_STORE'), 'error');		}		else		{			$this->setRedirect('index.php?option=com_config', JText::_('COM_CONFIG_HELPREFRESH_SUCCESS'));		}	}	/**	 * Method to remove the root property from the configuration.	 *	 * @return  bool	True on success, false on failure.	 * @since   1.5	 */	public function removeroot()	{		// Check for request forgeries.		JSession::checkToken('get') or die('Invalid Token');		// Check if the user is authorized to do this.		if (!JFactory::getUser()->authorise('core.admin'))		{			JFactory::getApplication()->redirect('index.php', JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Initialise model.		$model	= $this->getModel('Application');		// Attempt to save the configuration and remove root.		$return = $model->removeroot();		// Check the return value.		if ($return === false)		{			// Save failed, go back to the screen and display a notice.			$this->setMessage(JText::sprintf('JERROR_SAVE_FAILED', $model->getError()), 'error');			$this->setRedirect('index.php');			return false;		}		// Set the success message.		$message = JText::_('COM_CONFIG_SAVE_SUCCESS');		// Set the redirect based on the task.		$this->setRedirect('index.php', $message);		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Table class supporting modified pre-order tree traversal behavior. * * @package     Joomla.Platform * @subpackage  Table * @link        http://docs.joomla.org/JTableAsset * @since       11.1 */class JTableAsset extends JTableNested{	/**	 * The primary key of the asset.	 *	 * @var    integer	 * @since  11.1	 */	public $id = null;	/**	 * The unique name of the asset.	 *	 * @var    string	 * @since  11.1	 */	public $name = null;	/**	 * The human readable title of the asset.	 *	 * @var    string	 * @since  11.1	 */	public $title = null;	/**	 * The rules for the asset stored in a JSON string	 *	 * @var    string	 * @since  11.1	 */	public $rules = null;	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__assets', 'id', $db);	}	/**	 * Method to load an asset by its name.	 *	 * @param   string  $name  The name of the asset.	 *	 * @return  integer	 *	 * @since   11.1	 */	public function loadByName($name)	{		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		// Get the asset id for the asset.		$query->select($this->_db->quoteName('id'))			->from($this->_db->quoteName('#__assets'))			->where($this->_db->quoteName('name') . ' = ' . $this->_db->quote($name));		$this->_db->setQuery($query);		$assetId = (int) $this->_db->loadResult();		if (empty($assetId))		{			return false;		}		return $this->load($assetId);	}	/**	 * Assert that the nested set data is valid.	 *	 * @return  boolean  True if the instance is sane and able to be stored in the database.	 *	 * @link    http://docs.joomla.org/JTable/check	 * @since   11.1	 */	public function check()	{		$this->parent_id = (int) $this->parent_id;		// JTableNested does not allow parent_id = 0, override this.		if ($this->parent_id > 0)		{			// Get the JDatabaseQuery object			$query = $this->_db->getQuery(true)				->select('COUNT(id)')				->from($this->_db->quoteName($this->_tbl))				->where($this->_db->quoteName('id') . ' = ' . $this->parent_id);			$this->_db->setQuery($query);			if ($this->_db->loadResult())			{				return true;			}			else			{				$this->setError('Invalid Parent ID');				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JMenu class * * @package     Joomla.Libraries * @subpackage  Menu * @since       1.5 */class JMenuSite extends JMenu{	/**	 * Loads the entire menu table into memory.	 *	 * @return  array	 */	public function load()	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('m.id, m.menutype, m.title, m.alias, m.note, m.path AS route, m.link, m.type, m.level, m.language')			->select($db->quoteName('m.browserNav') . ', m.access, m.params, m.home, m.img, m.template_style_id, m.component_id, m.parent_id')			->select('e.element as component')			->from('#__menu AS m')			->join('LEFT', '#__extensions AS e ON m.component_id = e.extension_id')			->where('m.published = 1')			->where('m.parent_id > 0')			->where('m.client_id = 0')			->order('m.lft');		// Set the query		$db->setQuery($query);		try		{			$this->_items = $db->loadObjectList('id');		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, JText::sprintf('JERROR_LOADING_MENUS', $e->getMessage()));			return false;		}		foreach ($this->_items as &$item)		{			// Get parent information.			$parent_tree = array();			if (isset($this->_items[$item->parent_id]))			{				$parent_tree  = $this->_items[$item->parent_id]->tree;			}			// Create tree.			$parent_tree[] = $item->id;			$item->tree = $parent_tree;			// Create the query array.			$url = str_replace('index.php?', '', $item->link);			$url = str_replace('&amp;', '&', $url);			parse_str($url, $item->query);		}	}	/**	 * Gets menu items by attribute	 *	 * @param   string   $attributes  The field name	 * @param   string   $values      The value of the field	 * @param   boolean  $firstonly   If true, only returns the first item found	 *	 * @return  array	 */	public function getItems($attributes, $values, $firstonly = false)	{		$attributes = (array) $attributes;		$values 	= (array) $values;		$app		= JApplication::getInstance('site');		if ($app->isSite())		{			// Filter by language if not set			if (($key = array_search('language', $attributes)) === false)			{				if (JLanguageMultilang::isEnabled())				{					$attributes[] 	= 'language';					$values[] 		= array(JFactory::getLanguage()->getTag(), '*');				}			}			elseif ($values[$key] === null)			{				unset($attributes[$key]);				unset($values[$key]);			}			// Filter by access level if not set			if (($key = array_search('access', $attributes)) === false)			{				$attributes[] = 'access';				$values[] = JFactory::getUser()->getAuthorisedViewLevels();			}			elseif ($values[$key] === null)			{				unset($attributes[$key]);				unset($values[$key]);			}		}		// Reset arrays or we get a notice if some values were unset		$attributes = array_values($attributes);		$values = array_values($values);		return parent::getItems($attributes, $values, $firstonly);	}	/**	 * Get menu item by id	 *	 * @param   string  $language  The language code.	 *	 * @return  object  The item object	 *	 * @since   1.5	 */	public function getDefault($language = '*')	{		if (array_key_exists($language, $this->_default) && JApplication::getInstance('site')->getLanguageFilter())		{			return $this->_items[$this->_default[$language]];		}		elseif (array_key_exists('*', $this->_default))		{			return $this->_items[$this->_default['*']];		}		else		{			return 0;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_feed * * @package     Joomla.Site * @subpackage  mod_feed * @since       1.5 */class ModFeedHelper{	public static function getFeed($params)	{		// module params		$rssurl	= $params->get('rssurl', '');		// get RSS parsed object		$cache_time = 0;		if ($params->get('cache'))		{			$cache_time  = $params->get('cache_time', 15) * 60;		}		try		{			$feed = new JFeedFactory;			$rssDoc = $feed->getFeed($rssurl);		}		catch (InvalidArgumentException $e)		{			$msg = JText::_('MOD_NEWSFEEDS_ERRORS_FEED_NOT_RETRIEVED');		}		catch (RunTimeException $e)		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');		}		if (empty($rssDoc))		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');			return $msg;		}		if ($rssDoc)		{			return $rssDoc;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for parse XML module files * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.5 */class ModulesHelperXML{	/**	 * @since  1.5	 */	public function parseXMLModuleFile(&$rows)	{		foreach ($rows as $i => $row)		{			if ($row->module == '')			{				$rows[$i]->name    = 'custom';				$rows[$i]->module  = 'custom';				$rows[$i]->descrip = 'Custom created module, using Module Manager New function';			}			else			{				$data = JInstaller::parseXMLInstallFile($row->path . '/' . $row->file);				if ($data['type'] == 'module')				{					$rows[$i]->name    = $data['name'];					$rows[$i]->descrip = $data['description'];				}			}		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users Html Helper * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */abstract class JHtmlUsers{	public static function value($value)	{		if (is_string($value))		{			$value = trim($value);		}		if (empty($value))		{			return JText::_('COM_USERS_PROFILE_VALUE_NOT_FOUND');		}		elseif (!is_array($value))		{			return htmlspecialchars($value);		}	}	public static function spacer($value)	{		return '';	}	public static function helpsite($value)	{		if (empty($value))		{			return self::value($value);		}		else		{			$pathToXml = JPATH_ADMINISTRATOR . '/help/helpsites.xml';			$text = $value;			if (!empty($pathToXml) && $xml = simplexml_load_file($pathToXml))			{				foreach ($xml->sites->site as $site)				{					if ((string) $site->attributes()->url == $value)					{						$text = (string) $site;						break;					}				}			}			$value = htmlspecialchars($value);			if (substr($value, 0, 4) == "http")			{				return '<a href="' . $value . '">' . $text . '</a>';			}			else			{				return '<a href="http://' . $value . '">' . $text . '</a>';			}		}	}	public static function templatestyle($value)	{		if (empty($value))		{			return self::value($value);		}		else		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('title')				->from('#__template_styles')				->where('id = ' . $db->quote($value));			$db->setQuery($query);			$title = $db->loadResult();			if ($title)			{				return htmlspecialchars($title);			}			else			{				return self::value('');			}		}	}	public static function admin_language($value)	{		if (empty($value))		{			return self::value($value);		}		else		{			$path = JLanguage::getLanguagePath(JPATH_ADMINISTRATOR, $value);			$file = "$value.xml";			$result = null;			if (is_file("$path/$file"))			{				$result = JLanguage::parseXMLLanguageFile("$path/$file");			}			if ($result)			{				return htmlspecialchars($result['name']);			}			else			{				return self::value('');			}		}	}	public static function language($value)	{		if (empty($value))		{			return self::value($value);		}		else		{			$path = JLanguage::getLanguagePath(JPATH_SITE, $value);			$file = "$value.xml";			$result = null;			if (is_file("$path/$file"))			{				$result = JLanguage::parseXMLLanguageFile("$path/$file");			}			if ($result)			{				return htmlspecialchars($result['name']);			}			else			{				return self::value('');			}		}	}	public static function editor($value)	{		if (empty($value))		{			return self::value($value);		}		else		{			$db = JFactory::getDbo();			$lang = JFactory::getLanguage();			$query = $db->getQuery(true)				->select('name')				->from('#__extensions')				->where('element = ' . $db->quote($value))				->where('folder = ' . $db->quote('editors'));			$db->setQuery($query);			$title = $db->loadResult();			if ($title)			{				$lang->load("plg_editors_$value.sys", JPATH_ADMINISTRATOR, null, false, false)					|| $lang->load("plg_editors_$value.sys", JPATH_PLUGINS . '/editors/' . $value, null, false, false)					|| $lang->load("plg_editors_$value.sys", JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					|| $lang->load("plg_editors_$value.sys", JPATH_PLUGINS . '/editors/' . $value, $lang->getDefault(), false, false);				$lang->load($title . '.sys');				return JText::_($title);			}			else			{				return self::value('');			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContactHelper', JPATH_ADMINISTRATOR . '/components/com_contact/helpers/contact.php');/** * @package     Joomla.Administrator * @subpackage  com_contact */abstract class JHtmlContact{	/**	 * Get the associated language flags	 *	 * @param   int  $contactid  The item id to search associations	 *	 * @return  string  The language HTML	 */	public static function association($contactid)	{		// Defaults		$html = '';		// Get the associations		if ($associations = JLanguageAssociations::getAssociations('com_contact', '#__contact_details', 'com_contact.item', $contactid))		{			foreach ($associations as $tag => $associated)			{				$associations[$tag] = (int) $associated->id;			}			// Get the associated contact items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('c.*')				->from('#__contact_details as c')				->select('cat.title as category_title')				->join('LEFT', '#__categories as cat ON cat.id=c.catid')				->where('c.id IN (' . implode(',', array_values($associations)) . ')')				->join('LEFT', '#__languages as l ON c.language=l.lang_code')				->select('l.image')				->select('l.title as language_title');			$db->setQuery($query);			try			{				$items = $db->loadObjectList('id');			}			catch (runtimeException $e)			{				throw new Exception($e->getMessage(), 500);				return false;			}			$flags = array();			// Construct html			foreach ($associations as $tag => $associated)			{				if ($associated != $contactid)				{					$flags[] = JText::sprintf(						'COM_CONTACT_TIP_ASSOCIATED_LANGUAGE',						JHtml::_('image', 'mod_languages/' . $items[$associated]->image . '.gif',							$items[$associated]->language_title,							array('title' => $items[$associated]->language_title),							true						),						$items[$associated]->name, $items[$associated]->category_title					);				}			}			$html = JHtml::_('tooltip', implode('<br />', $flags), JText::_('COM_CONTACT_TIP_ASSOCIATION'), 'admin/icon-16-links.png');		}		return $html;	}	/**	 * @param   int $value	The featured value	 * @param   int $i	 * @param   bool $canChange Whether the value can be changed or not	 *	 * @return  string	The anchor tag to toggle featured/unfeatured contacts.	 * @since   1.6	 */	public static function featured($value = 0, $i, $canChange = true)	{		// Array of image, task, title, action		$states	= array(			0	=> array('disabled.png', 'contacts.featured', 'COM_CONTACT_UNFEATURED', 'COM_CONTACT_TOGGLE_TO_FEATURE'),			1	=> array('featured.png', 'contacts.unfeatured', 'JFEATURED', 'COM_CONTACT_TOGGLE_TO_UNFEATURE'),		);		$state	= JArrayHelper::getValue($states, (int) $value, $states[1]);		$html	= JHtml::_('image', 'admin/'.$state[0], JText::_($state[2]), null, true);		if ($canChange)		{			$html	= '<a href="#" onclick="return listItemTask(\'cb'.$i.'\',\''.$state[1].'\')" title="'.JText::_($state[3]).'">'					. $html .'</a>';		}		return $html;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseQuerySqlite extends JDatabaseQueryPdo implements JDatabaseQueryPreparable, JDatabaseQueryLimitable{	/**	 * @var integer	 * @since 12.1	 */	protected $limit;	/**	 * @var integer	 * @since 12.1	 */	protected $offset;	/**	 * @var mixed	 * @since 12.1	 */	protected $bounded = array();	/**	 * Method to add a variable to an internal array that will be bound to a prepared SQL statement before query execution. Also	 * removes a variable that has been bounded from the internal bounded array when the passed in value is null.	 *	 * @param   string|integer  $key            The key that will be used in your SQL query to reference the value. Usually of	 *                                          the form ':key', but can also be an integer.	 * @param   mixed           &$value         The value that will be bound. The value is passed by reference to support output	 *                                          parameters such as those possible with stored procedures.	 * @param   integer         $dataType       Constant corresponding to a SQL datatype.	 * @param   integer         $length         The length of the variable. Usually required for OUTPUT parameters.	 * @param   array           $driverOptions  Optional driver options to be used.	 *	 * @return  JDatabaseQuery	 *	 * @since   12.1	 */	public function bind($key = null, &$value = null, $dataType = PDO::PARAM_STR, $length = 0, $driverOptions = array())	{		// Case 1: Empty Key (reset $bounded array)		if (empty($key))		{			$this->bounded = array();			return $this;		}		// Case 2: Key Provided, null value (unset key from $bounded array)		if (is_null($value))		{			if (isset($this->bounded[$key]))			{				unset($this->bounded[$key]);			}			return $this;		}		$obj = new stdClass;		$obj->value = &$value;		$obj->dataType = $dataType;		$obj->length = $length;		$obj->driverOptions = $driverOptions;		// Case 3: Simply add the Key/Value into the bounded array		$this->bounded[$key] = $obj;		return $this;	}	/**	 * Retrieves the bound parameters array when key is null and returns it by reference. If a key is provided then that item is	 * returned.	 *	 * @param   mixed  $key  The bounded variable key to retrieve.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function &getBounded($key = null)	{		if (empty($key))		{			return $this->bounded;		}		else		{			if (isset($this->bounded[$key]))			{				return $this->bounded[$key];			}		}	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function clear($clause = null)	{		switch ($clause)		{			case null:				$this->bounded = array();				break;		}		parent::clear($clause);		return $this;	}	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		if ($limit > 0 || $offset > 0)		{			$query .= ' LIMIT ' . $offset . ', ' . $limit;		}		return $query;	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit = (int) $limit;		$this->offset = (int) $offset;		return $this;	}	/**	 * Add to the current date and time.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date or datetime to add to	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @link http://www.sqlite.org/lang_datefunc.html	 */	public function dateAdd($date, $interval, $datePart)	{		// SQLite does not support microseconds as a separate unit. Convert the interval to seconds		if (strcasecmp($datePart, 'microseconds') == 0)		{			$interval = .001 * $interval;			$datePart = 'seconds';		}		if (substr($interval, 0, 1) != '-')		{			return "datetime('" . $date . "', '+" . $interval . " " . $datePart . "')";		}		else		{			return "datetime('" . $date . "', '" . $interval . " " . $datePart . "')";		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to pagination rendering. * * pagination_list_footer * 	Input variable $list is an array with offsets: * 		$list[limit]		: int * 		$list[limitstart]	: int * 		$list[total]		: int * 		$list[limitfield]	: string * 		$list[pagescounter]	: string * 		$list[pageslinks]	: string * * pagination_list_render * 	Input variable $list is an array with offsets: * 		$list[all] * 			[data]		: string * 			[active]	: boolean * 		$list[start] * 			[data]		: string * 			[active]	: boolean * 		$list[previous] * 			[data]		: string * 			[active]	: boolean * 		$list[next] * 			[data]		: string * 			[active]	: boolean * 		$list[end] * 			[data]		: string * 			[active]	: boolean * 		$list[pages] * 			[{PAGE}][data]		: string * 			[{PAGE}][active]	: boolean * * pagination_item_active * 	Input variable $item is an object with fields: * 		$item->base	: integer * 		$item->link	: string * 		$item->text	: string * * pagination_item_inactive * 	Input variable $item is an object with fields: * 		$item->base	: integer * 		$item->link	: string * 		$item->text	: string * * This gives template designers ultimate control over how pagination is rendered. * * NOTE: If you override pagination_item_active OR pagination_item_inactive you MUST override them both *//** * Renders the pagination footer * * @param   array  $list  Array containing pagination footer * * @return  string  HTML markup for the full pagination footer * * @since   3.0 */function pagination_list_footer($list){	$html = "<div class=\"pagination\">\n";	$html .= $list['pageslinks'];	$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"" . $list['limitstart'] . "\" />";	$html .= "\n</div>";	return $html;}/** * Renders the pagination list * * @param   array  $list  Array containing pagination information * * @return  string  HTML markup for the full pagination object * * @since   3.0 */function pagination_list_render($list){	// Calculate to display range of pages	$currentPage = 1;	$range = 1;	$step = 5;	foreach ($list['pages'] as $k => $page)	{		if (!$page['active'])		{			$currentPage = $k;		}	}	if ($currentPage >= $step)	{		if ($currentPage % $step == 0)		{			$range = ceil($currentPage / $step) + 1;		}		else		{			$range = ceil($currentPage / $step);		}	}	$html = '<ul class="pagination-list">';	$html .= $list['start']['data'];	$html .= $list['previous']['data'];	foreach ($list['pages'] as $k => $page)	{		if (in_array($k, range($range * $step - ($step + 1), $range * $step)))		{			if (($k % $step == 0 || $k == $range * $step - ($step + 1)) && $k != $currentPage && $k != $range * $step - $step)			{				$page['data'] = preg_replace('#(<a.*?>).*?(</a>)#', '$1...$2', $page['data']);			}		}		$html .= $page['data'];	}	$html .= $list['next']['data'];	$html .= $list['end']['data'];	$html .= '</ul>';	return $html;}/** * Renders an active item in the pagination block * * @param   JPaginationObject  $item  The current pagination object * * @return  string  HTML markup for active item * * @since   3.0 */function pagination_item_active(&$item){	// Check for "Start" item	if ($item->text == JText::_('JLIB_HTML_START'))	{		$display = '<i class="icon-first"></i>';	}	// Check for "Prev" item	if ($item->text == JText::_('JPREV'))	{		$display = '<i class="icon-previous"></i>';	}	// Check for "Next" item	if ($item->text == JText::_('JNEXT'))	{		$display = '<i class="icon-next"></i>';	}	// Check for "End" item	if ($item->text == JText::_('JLIB_HTML_END'))	{		$display = '<i class="icon-last"></i>';	}	// If the display object isn't set already, just render the item with its text	if (!isset($display))	{		$display = $item->text;	}	return "<li><a title=\"" . $item->text . "\" href=\"" . $item->link . "\" class=\"pagenav\">" . $display . "</a></li>";}/** * Renders an inactive item in the pagination block * * @param   JPaginationObject  $item  The current pagination object * * @return  string  HTML markup for inactive item * * @since   3.0 */function pagination_item_inactive(&$item){	// Check for "Start" item	if ($item->text == JText::_('JLIB_HTML_START'))	{		return '<li class="disabled"><a><i class="icon-first"></i></a></li>';	}	// Check for "Prev" item	if ($item->text == JText::_('JPREV'))	{		return '<li class="disabled"><a><i class="icon-previous"></i></a></li>';	}	// Check for "Next" item	if ($item->text == JText::_('JNEXT'))	{		return '<li class="disabled"><a><i class="icon-next"></i></a></li>';	}	// Check for "End" item	if ($item->text == JText::_('JLIB_HTML_END'))	{		return '<li class="disabled"><a><i class="icon-last"></i></a></li>';	}	// Check if the item is the active page	if (isset($item->active) && ($item->active))	{		return '<li class="active"><a>' . $item->text . '</a></li>';	}	// Doesn't match any other condition, render a normal item	return '<li class="disabled"><a>' . $item->text . '</a></li>';}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$doc = JFactory::getDocument();// Add Stylesheets$doc->addStyleSheet('../media/jui/css/bootstrap.css');$doc->addStyleSheet('../media/jui/css/bootstrap-extended.css');$doc->addStyleSheet('../media/jui/css/bootstrap-responsive.css');$doc->addStyleSheet('template/css/template.css');if ($this->direction === 'rtl'){	$doc->addStyleSheet('../media/jui/css/bootstrap-rtl.css');}// Load the JavaScript behaviorsJHtml::_('bootstrap.framework');JHtml::_('formbehavior.chosen', 'select');JHtml::_('behavior.framework', true);JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');JHtml::_('script', 'installation/template/js/installation.js', true, false, false, false);// Load the JavaScript translated messagesJText::script('INSTL_PROCESS_BUSY');JText::script('INSTL_FTP_SETTINGS_CORRECT');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>">	<head>		<jdoc:include type="head" />		<!--[if lt IE 9]>			<script src="../media/jui/js/html5.js"></script>		<![endif]-->		<script type="text/javascript">			window.addEvent('domready', function()			{				window.Install = new Installation('container-installation', '<?php echo JURI::current(); ?>');			});		</script>	</head>	<body>		<!-- Header -->		<div class="header">			<img src="<?php echo $this->baseurl ?>/template/images/joomla.png" alt="Joomla" />			<hr />			<h5>				<?php				$joomla = '<a href="http://www.joomla.org">Joomla!<sup>&#174;</sup></a>';				$license = '<a data-toggle="modal" href="#licenseModal">' . JText::_('INSTL_GNU_GPL_LICENSE') . '</a>';				echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla, $license);				?>			</h5>		</div>		<!-- Container -->		<div class="container">			<jdoc:include type="message" />			<div id="container-installation">				<jdoc:include type="component" />			</div>			<hr />		</div>		<div id="licenseModal" class="modal fade">			<div class="modal-header">				<button type="button" class="close" data-dismiss="modal"></button>				<h3><?php echo JText::_('INSTL_GNU_GPL_LICENSE'); ?></h3>			</div>			<div class="modal-body">				<iframe src="gpl.html" class="thumbnail span6 license" height="250" marginwidth="25" scrolling="auto"></iframe>			</div>		</div>		<script>			function initElements()			{				(function($){					$('.hasTooltip').tooltip()					// Chosen select boxes					$("select").chosen({						disable_search_threshold : 10,						allow_single_deselect : true					});					// Turn radios into btn-group				    $('.radio.btn-group label').addClass('btn');				    $(".btn-group label:not(.active)").click(function()					{				        var label = $(this);				        var input = $('#' + label.attr('for'));				        if (!input.prop('checked'))						{				            label.closest('.btn-group').find("label").removeClass('active btn-success btn-danger btn-primary');				            if(input.val()== '')							{				                    label.addClass('active btn-primary');				             } else if(input.val()==0 || input.val()=='remove')							{				                    label.addClass('active btn-danger');				             } else {				            label.addClass('active btn-success');				             }				            input.prop('checked', true);				        }				    });				    $(".btn-group input[checked=checked]").each(function()					{						if ($(this).val()== '')						{				           $("label[for=" + $(this).attr('id') + "]").addClass('active btn-primary');				        } else if($(this).val()==0 || $(this).val()=='remove')						{				           $("label[for=" + $(this).attr('id') + "]").addClass('active btn-danger');				        } else {				            $("label[for=" + $(this).attr('id') + "]").addClass('active btn-success');				        }				    });				})(jQuery);			}			initElements();		</script>	</body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of user group records. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelGroups extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'parent_id', 'a.parent_id',				'title', 'a.title',				'lft', 'a.lft',				'rgt', 'a.rgt',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		// Load the parameters.		$params = JComponentHelper::getParams('com_users');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.search');		return parent::getStoreId($id);	}	/**	 * Gets the list of groups and adds expensive joins to the result set.	 *	 * @return  mixed  An array of data items on success, false on failure.	 * @since   1.6	 */	public function getItems()	{		$db = $this->getDbo();		// Get a storage key.		$store = $this->getStoreId();		// Try to load the data from internal storage.		if (empty($this->cache[$store]))		{			$items = parent::getItems();			// Bail out on an error or empty list.			if (empty($items))			{				$this->cache[$store] = $items;				return $items;			}			// First pass: get list of the group id's and reset the counts.			$groupIds = array();			foreach ($items as $item)			{				$groupIds[] = (int) $item->id;				$item->user_count = 0;			}			// Get the counts from the database only for the users in the list.			$query = $db->getQuery(true);			// Count the objects in the user group.			$query->select('map.group_id, COUNT(DISTINCT map.user_id) AS user_count')				->from($db->quoteName('#__user_usergroup_map') . ' AS map')				->where('map.group_id IN (' . implode(',', $groupIds) . ')')				->group('map.group_id');			$db->setQuery($query);			// Load the counts into an array indexed on the user id field.			try			{				$users = $db->loadObjectList('group_id');			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage);				return false;			}			// Second pass: collect the group counts into the master items array.			foreach ($items as &$item)			{				if (isset($users[$item->id]))				{					$item->user_count = $users[$item->id]->user_count;				}			}			// Add the items to the internal cache.			$this->cache[$store] = $items;		}		return $this->cache[$store];	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.*'			)		);		$query->from($db->quoteName('#__usergroups') . ' AS a');		// Add the level in the tree.		$query->select('COUNT(DISTINCT c2.id) AS level')			->join('LEFT OUTER', $db->quoteName('#__usergroups') . ' AS c2 ON a.lft > c2.lft AND a.rgt < c2.rgt')			->group('a.id, a.lft, a.rgt, a.parent_id, a.title');		// Filter the comments over the search string if set.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.title LIKE ' . $search);			}		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canDo		= SearchHelper::getActions();?><form action="<?php echo JRoute::_('index.php?option=com_search&view=searches'); ?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_SEARCH_SEARCH_IN_PHRASE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<?php if ($this->enabled) : ?>			<span class="enabled"><?php echo JText::_('COM_SEARCH_LOGGING_ENABLED'); ?></span>			<?php else : ?>			<span class="disabled"><?php echo JText::_('COM_SEARCH_LOGGING_DISABLED'); ?></span>			<?php endif; ?>			<span class="adminlist-searchstatus">			<?php if ($this->state->get('filter.results')) : ?>				<a href="<?php echo JRoute::_('index.php?option=com_search&filter_results=0');?>">					<?php echo JText::_('COM_SEARCH_HIDE_SEARCH_RESULTS'); ?></a>			<?php else : ?>				<a href="<?php echo JRoute::_('index.php?option=com_search&filter_results=1');?>">					<?php echo JText::_('COM_SEARCH_SHOW_SEARCH_RESULTS'); ?></a>			<?php endif; ?>			</span>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="row-number-col">					<?php echo JText::_('JGRID_HEADING_ROW_NUMBER'); ?>				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_SEARCH_HEADING_PHRASE', 'a.search_term', $listDirn, $listOrder); ?>				</th>				<th class="hits-col">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th class="width-15">					<?php echo JText::_('COM_SEARCH_HEADING_RESULTS'); ?>				</th>				<th class="width-30">					&#160;				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">					<td class="right">						<?php echo $i + 1 + $this->pagination->limitstart; ?>					</td>					<td>						<?php echo $this->escape($item->search_term); ?>					</td>					<td class="center">						<?php echo (int) $item->hits; ?>					</td>					<td class="center">					<?php if ($this->state->get('filter.results')) : ?>						<?php echo (int) $item->returns; ?>					<?php else: ?>						<?php echo JText::_('COM_SEARCH_NO_RESULTS'); ?>					<?php endif; ?>					</td>					<td>						&#160;					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_tags_popular * * @package     Joomla.Site * @subpackage  mod_tags_popular * @since       3.1 */abstract class ModTagssimilarHelper{	public static function getList($params)	{		$db         = JFactory::getDbo();		$app        = JFactory::getApplication();		$user       = JFactory::getUser();		$groups     = implode(',', $user->getAuthorisedViewLevels());		$matchtype  = $params->get('matchtype', 'all');		$maximum    = $params->get('maximum', 5);		$tagsHelper = new JHelperTags;		$option     = $app->input->get('option');		$view       = $app->input->get('view');		$prefix     = $option . '.' . $view;		$id         = (array) $app->input->getObject('id');		// Strip off any slug data.		foreach ($id as $id)		{			if (substr_count($id, ':') > 0)			{				$idexplode = explode(':', $id);				$id        = $idexplode[0];			}		}		// For now assume com_tags and com_users do not have tags.		// This module does not apply to list views in general at this point.		if ($option != 'com_tags' && $view != 'category'  && $option != 'com_users')		{			$tagsToMatch = $tagsHelper->getTagIds($id, $prefix);			if (!$tagsToMatch || is_null($tagsToMatch))			{				return $results = false;			}			$tagCount = substr_count($tagsToMatch, ',') + 1;			$query = $db->getQuery(true)				->select(				array(					$db->quoteName('m.tag_id'),					$db->quoteName('m.core_content_id'),					$db->quoteName('m.content_item_id'),					$db->quoteName('m.type_alias'),						'COUNT( '  . $db->quoteName('tag_id') . ') AS ' . $db->quoteName('count'),					$db->quoteName('t.access'),					$db->quoteName('t.id'),					$db->quoteName('ct.router'),					$db->quoteName('cc.core_title'),					$db->quoteName('cc.core_alias'),					$db->quoteName('cc.core_catid'),					$db->quoteName('cc.core_language')					)			);			$query->from($db->quoteName('#__contentitem_tag_map', 'm'));			$query->join('INNER', $db->quoteName('#__tags', 't') . ' ON m.tag_id = t.id')				->join('INNER', $db->quoteName('#__ucm_content', 'cc') . ' ON m.core_content_id = cc.core_content_id')				->join('INNER', $db->quoteName('#__content_types', 'ct') . ' ON m.type_alias = ct.type_alias');			$query->where('t.access IN (' . $groups . ')');			$query->where($db->quoteName('m.tag_id') . ' IN (' . $tagsToMatch . ')');			// Don't show current item			$query->where('(' . $db->quoteName('m.content_item_id') . ' <> ' . $id . ' OR ' . $db->quoteName('m.type_alias') . ' <> ' . $db->quote($prefix) . ')');			// Only return published tags			$query->where($db->quoteName('cc.core_state') . ' = 1 ');			// Optionally filter on language			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');			if ($language != 'all')			{				if ($language == 'current_language')				{					$language = JHelperContent::getCurrentLanguage();				}				$query->where($db->quoteName('cc.core_language') . ' IN (' . $db->quote($language) . ', ' . $db->quote('*') . ')');			}			$query->group($db->quoteName(array('m.core_content_id')));			if ($matchtype == 'all' && $tagCount > 0)			{				$query->having('COUNT( '  . $db->quoteName('tag_id') . ')  = ' . $tagCount);			}			elseif ($matchtype == 'half' && $tagCount > 0)			{				$tagCountHalf = ceil($tagCount / 2);				$query->having('COUNT( '  . $db->quoteName('tag_id') . ')  >= ' . $tagCountHalf);			}			$query->order($db->quoteName('count') . ' DESC');			$db->setQuery($query, 0, $maximum);			$results = $db->loadObjectList();			foreach ($results as $result)			{				$explodedAlias = explode('.', $result->type_alias);				$result->link = 'index.php?option=' . $explodedAlias[0] . '&view=' . $explodedAlias[1] . '&id=' . $result->content_item_id . '-' . $result->core_alias;			}			return $results;		}		else		{			return;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving a list of tags. * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsModelTags extends JModelList{	/**	 * Model context string.	 *	 * @var    string	 * @since  3.1	 */	public $_context = 'com_tags.tags';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pid = $app->input->getInt('parent_id');		$this->setState('tag.parent_id', $pid);		$language = $app->input->getString('tag_list_language_filter');		$this->setState('tag.language', $language);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.offset', $offset);		$app = JFactory::getApplication();		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('list.limit', $params->get('maximum', 200));		$this->setState('filter.published', 1);		$this->setState('filter.access', true);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_tags')) &&  (!$user->authorise('core.edit', 'com_tags')))		{			$this->setState('filter.published', 1);		}		// Optional filter text		$itemid = $pid . ':' . $app->input->getInt('Itemid', 0);		$filterSearch = $app->getUserStateFromRequest('com_tags.tags.list.' . $itemid . '.filter_search', 'filter-search', '', 'string');		$this->setState('list.filter', $filterSearch);	}	/**	 * Redefine the function and add some properties to make the styling more easy	 *	 * @return  mixed  An array of data items on success, false on failure.	 *	 * @since   3.1	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		if (!count($items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string  An SQL query	 *	 * @since   1.6	 */	protected function getListQuery()	{		$app = JFactory::getApplication('site');		$user	= JFactory::getUser();		$groups	= implode(',', $user->getAuthorisedViewLevels());		$pid = $this->getState('tag.parent_id');		$orderby = $this->state->params->get('all_tags_orderby', 'title');		$orderDirection = $this->state->params->get('all_tags_orderby_direction', 'ASC');		$language = $this->getState('tag.language');		// Create a new query object.		$db		= $this->getDbo();		$query	= $db->getQuery(true);		// Select required fields from the tags.		$query->select('a.*')			->from($db->quoteName('#__tags') . ' AS a')			->where($db->quoteName('a.access') . ' IN (' . $groups . ')');		if (!empty($pid))		{			$query->where($db->quoteName('a.parent_id') . ' = ' . $pid);		}		// Exclude the root.		$query->where($db->quoteName('a.parent_id') . ' <> 0');		// Optionally filter on language		if (empty($language))		{			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');		}		if ($language != 'all')		{			if ($language == 'current_language')			{				$language = JHelperContent::getCurrentLanguage();			}			$query->where($db->quoteName('language') . ' IN (' . $db->quote($language) . ', ' . $db->quote('*') . ')');		}		// List state information		$format = $app->input->getWord('format');		if ($format == 'feed')		{			$limit = $app->getCfg('feed_limit');		}		else		{			if ($this->state->params->get('show_pagination_limit'))			{				$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');			}			else			{				$limit = $this->state->params->get('maximum', 20);			}		}		$this->setState('list.limit', $limit);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $offset);		// Optionally filter on entered value		if ($this->state->get('list.filter'))		{			$query->where($this->_db->quoteName('a.title') . ' LIKE ' . $this->_db->quote('%' . $this->state->get('list.filter') . '%'));		}		$query->order($db->quoteName($orderby) . ' ' . $orderDirection . ', a.title ASC');		return $query;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Menu Types table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableMenuType extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since  11.1	 */	public function __construct($db)	{		parent::__construct('#__menu_types', 'id', $db);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success, false on failure	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		$this->menutype = JApplication::stringURLSafe($this->menutype);		if (empty($this->menutype))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENUTYPE_EMPTY'));			return false;		}		// Sanitise data.		if (trim($this->title) == '')		{			$this->title = $this->menutype;		}		// Check for unique menutype.		$query = $this->_db->getQuery(true)			->select('COUNT(id)')			->from($this->_db->quoteName('#__menu_types'))			->where($this->_db->quoteName('menutype') . ' = ' . $this->_db->quote($this->menutype))			->where($this->_db->quoteName('id') . ' <> ' . (int) $this->id);		$this->_db->setQuery($query);		if ($this->_db->loadResult())		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_MENUTYPE_EXISTS', $this->menutype));			return false;		}		return true;	}	/**	 * Method to store a row in the database from the JTable instance properties.	 * If a primary key value is set the row with that primary key value will be	 * updated with the instance property values.  If no primary key value is set	 * a new row will be inserted into the database with the properties from the	 * JTable instance.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/store	 * @since   11.1	 */	public function store($updateNulls = false)	{		if ($this->id)		{			// Get the user id			$userId = JFactory::getUser()->id;			// Get the old value of the table			$table = JTable::getInstance('Menutype', 'JTable');			$table->load($this->id);			// Verify that no items are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(					JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE_CHECKOUT'))				);				return false;			}			// Verify that no module for this menu are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(					JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE_CHECKOUT'))				);				return false;			}			// Update the menu items			$query = $this->_db->getQuery(true)				->update('#__menu')				->set('menutype=' . $this->_db->quote($this->menutype))				->where('menutype=' . $this->_db->quote($table->menutype));			$this->_db->setQuery($query);			$this->_db->execute();			// Update the module items			$query = $this->_db->getQuery(true)				->update('#__modules')				->set(				'params=REPLACE(params,' . $this->_db->quote('"menutype":' . json_encode($table->menutype)) . ',' .				$this->_db->quote('"menutype":' . json_encode($this->menutype)) . ')'			);			$query->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'));			$this->_db->setQuery($query);			$this->_db->execute();		}		return parent::store($updateNulls);	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   mixed  $pk  An optional primary key value to delete.  If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/delete	 * @since   11.1	 */	public function delete($pk = null)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk !== null)		{			// Get the user id			$userId = JFactory::getUser()->id;			// Get the old value of the table			$table = JTable::getInstance('Menutype', 'JTable');			$table->load($pk);			// Verify that no items are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('client_id=0')				->where('(checked_out NOT IN (0,' . (int) $userId . ') OR home=1 AND language=' . $this->_db->quote('*') . ')');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_DELETE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE')));				return false;			}			// Verify that no module for this menu are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_DELETE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE')));				return false;			}			// Delete the menu items			$query = $this->_db->getQuery(true)				->delete('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('client_id=0');			$this->_db->setQuery($query);			$this->_db->execute();			// Update the module items			$query = $this->_db->getQuery(true)				->delete('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'));			$this->_db->setQuery($query);			$this->_db->execute();		}		return parent::delete($pk);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('text');/** * Form Field class for the Joomla Platform. * Supports a URL text field * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.url.html#input.url * @see         JFormRuleUrl for validation of full urls * @since       11.1 */class JFormFieldUrl extends JFormFieldText{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Url';}
<?php/** * @package     Joomla.Platform * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Adapter Instance Class * * @package     Joomla.Platform * @subpackage  Base * @since       11.1 */class JAdapterInstance extends JObject{	/**	 * Parent	 *	 * @var    JInstaller	 * @since  11.1	 */	protected $parent = null;	/**	 * Database	 *	 * @var    JDatabaseDriver	 * @since  11.1	 */	protected $db = null;	/**	 * Constructor	 *	 * @param   JAdapter         $parent   Parent object	 * @param   JDatabaseDriver  $db       Database object	 * @param   array            $options  Configuration Options	 *	 * @since   11.1	 */	public function __construct($parent, $db, $options = array())	{		// Set the properties from the options array that is passed in		$this->setProperties($options);		// Set the parent and db in case $options for some reason overrides it.		$this->parent = $parent;		// Pull in the global dbo in case something happened to it.		$this->db = $db ? $db : JFactory::getDbo();	}	/**	 * Retrieves the parent object	 *	 * @return  object parent	 *	 * @since   11.1	 */	public function getParent()	{		return $this->parent;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Comment class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/Comment/ * @since       13.1 */class JFacebookComment extends JFacebookObject{	/**	 * Method to get a comment. Requires authentication.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComment($comment)	{		return $this->get($comment);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get a comment's comments. Requires authentication.	 *	 * @param   string   $comment  The comment id.	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($comment, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($comment, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a comment. Requires authentication with publish_stream permission.	 *	 * @param   string  $comment  The comment id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($comment, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($comment, 'comments', $data);	}	/**	 * Method to get comment's likes. Requires authentication.	 *	 * @param   string   $comment  The comment id.	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($comment, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($comment, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a comment. Requires authentication and publish_stram permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($comment)	{		return $this->createConnection($comment, 'likes');	}	/**	 * Method to unlike a comment. Requires authentication and publish_stram permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($comment)	{		return $this->deleteConnection($comment, 'likes');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages Component Messages Model * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesModelMessages extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'message_id', 'a.id',				'subject', 'a.subject',				'state', 'a.state',				'user_id_from', 'a.user_id_from',				'user_id_to', 'a.user_id_to',				'date_time', 'a.date_time',				'priority', 'a.priority',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		// List state information.		parent::populateState('a.date_time', 'desc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.state');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.*, ' .					'u.name AS user_from'			)		);		$query->from('#__messages AS a');		// Join over the users for message owner.		$query->join('INNER', '#__users AS u ON u.id = a.user_id_from')			->where('a.user_id_to = ' . (int) $user->get('id'));		// Filter by published state.		$state = $this->getState('filter.state');		if (is_numeric($state))		{			$query->where('a.state = ' . (int) $state);		}		elseif ($state === '')		{			$query->where('(a.state IN (0, 1))');		}		// Filter by search in subject or message.		$search = $this->getState('filter.search');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%', false);			$query->where('a.subject LIKE ' . $search . ' OR a.message LIKE ' . $search);		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.date_time')) . ' ' . $db->escape($this->getState('list.direction', 'DESC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Cache base object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCache{	/**	 * @var    object  Storage handler	 * @since  11.1	 */	public static $_handler = array();	/**	 * @var    array  Options	 * @since  11.1	 */	public $_options;	/**	 * Constructor	 *	 * @param   array  $options  options	 *	 * @since   11.1	 */	public function __construct($options)	{		$conf = JFactory::getConfig();		$this->_options = array(			'cachebase' => $conf->get('cache_path', JPATH_CACHE),			'lifetime' => (int) $conf->get('cachetime'),			'language' => $conf->get('language', 'en-GB'),			'storage' => $conf->get('cache_handler', ''),			'defaultgroup' => 'default',			'locking' => true,			'locktime' => 15,			'checkTime' => true,			'caching' => ($conf->get('caching') >= 1) ? true : false);		// Overwrite default options with given options		foreach ($options as $option => $value)		{			if (isset($options[$option]) && $options[$option] !== '')			{				$this->_options[$option] = $options[$option];			}		}		if (empty($this->_options['storage']))		{			$this->_options['caching'] = false;		}	}	/**	 * Returns a reference to a cache adapter object, always creating it	 *	 * @param   string  $type     The cache object type to instantiate	 * @param   array   $options  The array of options	 *	 * @return  JCache  A JCache object	 *	 * @since   11.1	 */	public static function getInstance($type = 'output', $options = array())	{		return JCacheController::getInstance($type, $options);	}	/**	 * Get the storage handlers	 *	 * @return  array    An array of available storage handlers	 *	 * @since   11.1	 */	public static function getStores()	{		$handlers = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/storage');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile()				|| substr($fileName, strrpos($fileName, '.') + 1) != 'php'				|| $fileName == 'helper.php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JCacheStorage' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$handlers[] = str_ireplace('.php', '', $fileName);			}		}		return $handlers;	}	/**	 * Set caching enabled state	 *	 * @param   boolean  $enabled  True to enable caching	 *	 * @return  void	 *	 * @since   11.1	 */	public function setCaching($enabled)	{		$this->_options['caching'] = $enabled;	}	/**	 * Get caching state	 *	 * @return  boolean  Caching state	 *	 * @since   11.1	 */	public function getCaching()	{		return $this->_options['caching'];	}	/**	 * Set cache lifetime	 *	 * @param   integer  $lt  Cache lifetime	 *	 * @return  void	 *	 * @since   11.1	 */	public function setLifeTime($lt)	{		$this->_options['lifetime'] = $lt;	}	/**	 * Get cached data by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  mixed  boolean  False on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group = null)	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			return $handler->get($id, $group, $this->_options['checkTime']);		}		return false;	}	/**	 * Get a list of all cached data	 *	 * @return  mixed    Boolean false on failure or an object with a list of cache groups and data	 *	 * @since   11.1	 */	public function getAll()	{		// Get the storage		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			return $handler->getAll();		}		return false;	}	/**	 * Store the cached data by id and group	 *	 * @param   mixed   $data   The data to store	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True if cache stored	 *	 * @since   11.1	 */	public function store($data, $id, $group = null)	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage and store the cached data		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			$handler->_lifetime = $this->_options['lifetime'];			return $handler->store($id, $group, $data);		}		return false;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group = null)	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage		$handler = $this->_getStorage();		if (!($handler instanceof Exception))		{			return $handler->remove($id, $group);		}		return false;	}	/**	 * Clean cache for a group given a mode.	 *	 * group mode       : cleans all cache in the group	 * notgroup mode    : cleans all cache not in the group	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group = null, $mode = 'group')	{		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the storage handler		$handler = $this->_getStorage();		if (!($handler instanceof Exception))		{			return $handler->clean($group, $mode);		}		return false;	}	/**	 * Garbage collect expired cache data	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		// Get the storage handler		$handler = $this->_getStorage();		if (!($handler instanceof Exception))		{			return $handler->gc();		}		return false;	}	/**	 * Set lock flag on cached item	 *	 * @param   string  $id        The cache data id	 * @param   string  $group     The cache data group	 * @param   string  $locktime  The default locktime for locking the cache.	 *	 * @return  object  Properties are lock and locklooped	 *	 * @since   11.1	 */	public function lock($id, $group = null, $locktime = null)	{		$returning = new stdClass;		$returning->locklooped = false;		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Get the default locktime		$locktime = ($locktime) ? $locktime : $this->_options['locktime'];		// Allow storage handlers to perform locking on their own		// NOTE drivers with lock need also unlock or unlocking will fail because of false $id		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['locking'] == true && $this->_options['caching'] == true)		{			$locked = $handler->lock($id, $group, $locktime);			if ($locked !== false)			{				return $locked;			}		}		// Fallback		$curentlifetime = $this->_options['lifetime'];		// Set lifetime to locktime for storing in children		$this->_options['lifetime'] = $locktime;		$looptime = $locktime * 10;		$id2 = $id . '_lock';		if ($this->_options['locking'] == true && $this->_options['caching'] == true)		{			$data_lock = $this->get($id2, $group);		}		else		{			$data_lock = false;			$returning->locked = false;		}		if ($data_lock !== false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock !== false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = $this->get($id2, $group);				$lock_counter++;			}		}		if ($this->_options['locking'] == true && $this->_options['caching'] == true)		{			$returning->locked = $this->store(1, $id2, $group);		}		// Revert lifetime to previous one		$this->_options['lifetime'] = $curentlifetime;		return $returning;	}	/**	 * Unset lock flag on cached item	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		$unlock = false;		// Get the default group		$group = ($group) ? $group : $this->_options['defaultgroup'];		// Allow handlers to perform unlocking on their own		$handler = $this->_getStorage();		if (!($handler instanceof Exception) && $this->_options['caching'])		{			$unlocked = $handler->unlock($id, $group);			if ($unlocked !== false)			{				return $unlocked;			}		}		// Fallback		if ($this->_options['caching'])		{			$unlock = $this->remove($id . '_lock', $group);		}		return $unlock;	}	/**	 * Get the cache storage handler	 *	 * @return  JCacheStorage   A JCacheStorage object	 *	 * @since   11.1	 */	public function &_getStorage()	{		$hash = md5(serialize($this->_options));		if (isset(self::$_handler[$hash]))		{			return self::$_handler[$hash];		}		self::$_handler[$hash] = JCacheStorage::getInstance($this->_options['storage'], $this->_options);		return self::$_handler[$hash];	}	/**	 * Perform workarounds on retrieved cached data	 *	 * @param   string  $data     Cached data	 * @param   array   $options  Array of options	 *	 * @return  string  Body of cached data	 *	 * @since   11.1	 */	public static function getWorkarounds($data, $options = array())	{		$app = JFactory::getApplication();		$document = JFactory::getDocument();		$body = null;		// Get the document head out of the cache.		if (isset($options['mergehead']) && $options['mergehead'] == 1 && isset($data['head']) && !empty($data['head']))		{			$document->mergeHeadData($data['head']);		}		elseif (isset($data['head']) && method_exists($document, 'setHeadData'))		{			$document->setHeadData($data['head']);		}		// If the pathway buffer is set in the cache data, get it.		if (isset($data['pathway']) && is_array($data['pathway']))		{			// Push the pathway data into the pathway object.			$pathway = $app->getPathWay();			$pathway->setPathway($data['pathway']);		}		// @todo check if the following is needed, seems like it should be in page cache		// If a module buffer is set in the cache data, get it.		if (isset($data['module']) && is_array($data['module']))		{			// Iterate through the module positions and push them into the document buffer.			foreach ($data['module'] as $name => $contents)			{				$document->setBuffer($contents, 'module', $name);			}		}		if (isset($data['body']))		{			// The following code searches for a token in the cached page and replaces it with the			// proper token.			$token = JSession::getFormToken();			$search = '#<input type="hidden" name="[0-9a-f]{32}" value="1" />#';			$replacement = '<input type="hidden" name="' . $token . '" value="1" />';			$data['body'] = preg_replace($search, $replacement, $data['body']);			$body = $data['body'];		}		// Get the document body out of the cache.		return $body;	}	/**	 * Create workarounded data to be cached	 *	 * @param   string  $data     Cached data	 * @param   array   $options  Array of options	 *	 * @return  string  Data to be cached	 *	 * @since   11.1	 */	public static function setWorkarounds($data, $options = array())	{		$loptions = array();		$loptions['nopathway'] = 0;		$loptions['nohead'] = 0;		$loptions['nomodules'] = 0;		$loptions['modulemode'] = 0;		if (isset($options['nopathway']))		{			$loptions['nopathway'] = $options['nopathway'];		}		if (isset($options['nohead']))		{			$loptions['nohead'] = $options['nohead'];		}		if (isset($options['nomodules']))		{			$loptions['nomodules'] = $options['nomodules'];		}		if (isset($options['modulemode']))		{			$loptions['modulemode'] = $options['modulemode'];		}		$app = JFactory::getApplication();		$document = JFactory::getDocument();		// Get the modules buffer before component execution.		$buffer1 = $document->getBuffer();		if (!is_array($buffer1))		{			$buffer1 = array();		}		// Make sure the module buffer is an array.		if (!isset($buffer1['module']) || !is_array($buffer1['module']))		{			$buffer1['module'] = array();		}		// View body data		$cached['body'] = $data;		// Document head data		if ($loptions['nohead'] != 1 && method_exists($document, 'getHeadData'))		{			if ($loptions['modulemode'] == 1)			{				$headnow = $document->getHeadData();				$unset = array('title', 'description', 'link', 'links', 'metaTags');				foreach ($unset as $un)				{					unset($headnow[$un]);					unset($options['headerbefore'][$un]);				}				$cached['head'] = array();				// Only store what this module has added				foreach ($headnow as $now => $value)				{					if (isset($options['headerbefore'][$now]))					{						// We have to serialize the content of the arrays because the may contain other arrays which is a notice in PHP 5.4 and newer						$nowvalue = array_map('serialize', $headnow[$now]);						$beforevalue = array_map('serialize', $options['headerbefore'][$now]);						$newvalue = array_diff_assoc($nowvalue, $beforevalue);						$newvalue = array_map('unserialize', $newvalue);					}					else					{						$newvalue = $headnow[$now];					}					if (!empty($newvalue))					{						$cached['head'][$now] = $newvalue;					}				}			}			else			{				$cached['head'] = $document->getHeadData();			}		}		// Pathway data		if ($app->isSite() && $loptions['nopathway'] != 1)		{			$pathway = $app->getPathWay();			$cached['pathway'] = isset($data['pathway']) ? $data['pathway'] : $pathway->getPathway();		}		if ($loptions['nomodules'] != 1)		{			// @todo Check if the following is needed, seems like it should be in page cache			// Get the module buffer after component execution.			$buffer2 = $document->getBuffer();			if (!is_array($buffer2))			{				$buffer2 = array();			}			// Make sure the module buffer is an array.			if (!isset($buffer2['module']) || !is_array($buffer2['module']))			{				$buffer2['module'] = array();			}			// Compare the second module buffer against the first buffer.			$cached['module'] = array_diff_assoc($buffer2['module'], $buffer1['module']);		}		return $cached;	}	/**	 * Create safe id for cached data from url parameters set by plugins and framework	 *	 * @return  string   md5 encoded cacheid	 *	 * @since   11.1	 */	public static function makeId()	{		$app = JFactory::getApplication();		// Get url parameters set by plugins		if (!empty($app->registeredurlparams))		{			$registeredurlparams = $app->registeredurlparams;		}		// Platform defaults		$registeredurlparams->format = 'WORD';		$registeredurlparams->option = 'WORD';		$registeredurlparams->view = 'WORD';		$registeredurlparams->layout = 'WORD';		$registeredurlparams->tpl = 'CMD';		$registeredurlparams->id = 'INT';		$safeuriaddon = new stdClass;		foreach ($registeredurlparams as $key => $value)		{			$safeuriaddon->$key = $app->input->get($key, null, $value);		}		return md5(serialize($safeuriaddon));	}	/**	 * Add a directory where JCache should search for handlers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array   An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!empty($path) && !in_array($path, $paths))		{			jimport('joomla.filesystem.path');			array_unshift($paths, JPath::clean($path));		}		return $paths;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cpanel * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Cpanel component * * @package     Joomla.Administrator * @subpackage  com_cpanel * @since       1.0 */class CpanelViewCpanel extends JViewLegacy{	protected $modules = null;	public function display($tpl = null)	{		// Set toolbar items for the page		JToolbarHelper::title(JText::_('COM_CPANEL'), 'cpanel.png');		JToolbarHelper::help('screen.cpanel');		$input = JFactory::getApplication()->input;		/*		 * Set the template - this will display cpanel.php		 * from the selected admin template.		 */		$input->set('tmpl', 'cpanel');		// Display the cpanel modules		$this->modules = JModuleHelper::getModules('cpanel');		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('text');/** * Supports a modal article picker. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class JFormFieldModulePosition extends JFormFieldText{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ModulePosition';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		// Get the client id.		$clientId = $this->element['client_id'];		if (!isset($clientId))		{			$clientName = $this->element['client'];			if (isset($clientName))			{				$client = JApplicationHelper::getClientInfo($clientName, true);				$clientId = $client->id;			}		}		if (!isset($clientId) && $this->form instanceof JForm)		{			$clientId = $this->form->getValue('client_id');		}		$clientId = (int) $clientId;		// Load the modal behavior script.		JHtml::_('behavior.modal', 'a.modal');		// Build the script.		$script = array();		$script[] = '	function jSelectPosition_' . $this->id . '(name) {';		$script[] = '		document.id("' . $this->id . '").value = name;';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Setup variables for display.		$html = array();		$link = 'index.php?option=com_modules&view=positions&layout=modal&tmpl=component&function=jSelectPosition_' . $this->id . '&amp;client_id=' . $clientId;		// The current user display field.		$html[] = '<div class="input-append">';		$html[] = parent::getInput()			. '<a class="btn modal" title="' . JText::_('COM_MODULES_CHANGE_POSITION_TITLE') . '"  href="' . $link . '" rel="{handler: \'iframe\', size: {x: 800, y: 450}}">'			. '<i class="icon-screenshot"></i> '			. JText::_('COM_MODULES_CHANGE_POSITION_BUTTON') . '</a>';		$html[] = '</div>';		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user      = JFactory::getUser();$userId    = $user->get('id');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$canOrder  = $user->authorise('core.edit.state', 'com_banners.category');$saveOrder = $listOrder == 'ordering';?><form action="<?php echo JRoute::_('index.php?option=com_banners&view=banners'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('Banners_Search_in_title'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_client_id">				<?php echo JText::_('COM_BANNERS_SELECT_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<option value=""><?php echo JText::_('COM_BANNERS_SELECT_CLIENT');?></option>				<?php echo JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_NAME', 'name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'state', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_STICKY', 'sticky', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLIENT', 'client_name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) : ?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'banners.saveorder'); ?>					<?php endif;?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_IMPRESSIONS', 'impmade', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLICKS', 'clicks', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JText::_('COM_BANNERS_HEADING_METAKEYWORDS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_BANNERS_HEADING_PURCHASETYPE'); ?>				</th>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'ordering');			$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_banners&task=edit&type=other&cid[]=' . $item->catid);			$canCreate  = $user->authorise('core.create',     'com_banners.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_banners.category.' . $item->catid);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_banners.category.' . $item->catid) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'banners.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_banners&task=banner.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->name); ?></a>					<?php else : ?>							<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'banners.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo JHtml::_('banner.pinned', $item->sticky, $i, $canChange);?>				</td>				<td class="center">					<?php echo $item->client_name;?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) : ?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->catid == $item->catid), 'banners.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->catid == $item->catid), 'banners.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->catid == $item->catid), 'banners.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->catid == $item->catid), 'banners.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled; ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo JText::sprintf('COM_BANNERS_IMPRESSIONS', $item->impmade, $item->imptotal ? $item->imptotal : JText::_('COM_BANNERS_UNLIMITED'));?>				</td>				<td class="center">					<?php echo $item->clicks;?> -					<?php echo sprintf('%.2f%%', $item->impmade ? 100 * $item->clicks / $item->impmade : 0);?>				</td>				<td>					<?php echo $item->metakey; ?>				</td>				<td class="center">					<?php if ($item->purchase_type < 0):?>						<?php echo JText::sprintf('COM_BANNERS_DEFAULT', ($item->client_purchase_type > 0) ? JText::_('COM_BANNERS_FIELD_VALUE_'.$item->client_purchase_type) : JText::_('COM_BANNERS_FIELD_VALUE_'.$this->state->params->get('purchase_type')));?>					<?php else:?>						<?php echo JText::_('COM_BANNERS_FIELD_VALUE_'.$item->purchase_type);?>					<?php endif;?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div class="clr"> </div>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('script', 'system/multiselect.js', false, true);$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=styles'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TEMPLATES_STYLES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_template"><?php echo JText::_('COM_TEMPLATES_FILTER_TEMPLATE'); ?></label>			<select name="filter_template" class="inputbox" id="filter_template">				<option value="0"><?php echo JText::_('COM_TEMPLATES_FILTER_TEMPLATE'); ?></option>				<?php echo JHtml::_('select.options', TemplatesHelper::getTemplateOptions($this->state->get('filter.client_id')), 'value', 'text', $this->state->get('filter.template'));?>			</select>			<label class="selectlabel" for="filter_client_id"><?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?></label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<option value="*"><?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?></option>				<?php echo JHtml::_('select.options', TemplatesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					&#160;				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_STYLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'JCLIENT', 'a.client_id', $listDirn, $listOrder); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_TEMPLATE', 'a.template', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_DEFAULT', 'a.home', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JText::_('COM_TEMPLATES_HEADING_ASSIGNED'); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create',     'com_templates');				$canEdit   = $user->authorise('core.edit',       'com_templates');				$canChange = $user->authorise('core.edit.state', 'com_templates');			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($this->preview && $item->client_id == '0') : ?>						<a target="_blank"href="<?php echo JURI::root().'index.php?tp=1&templateStyle='.(int) $item->id ?>"  class="jgrid hasTip" title="<?php echo  htmlspecialchars(JText::_('COM_TEMPLATES_TEMPLATE_PREVIEW')); ?>::<?php echo htmlspecialchars($item->title);?>" ><span class="state icon-16-preview"><span class="text"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_PREVIEW'); ?></span></span></a>					<?php elseif ($item->client_id == '1') : ?>						<span class="jgrid hasTip" title="<?php echo  htmlspecialchars(JText::_('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_ADMIN')); ?>" ><span class="state icon-16-nopreview"><span class="text"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_ADMIN'); ?></span></span></span>					<?php else: ?>						<span class="jgrid hasTip" title="<?php echo  htmlspecialchars(JText::_('COM_TEMPLATES_TEMPLATE_NO_PREVIEW')); ?>" ><span class="state icon-16-nopreview"><span class="text"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?></span></span></span>					<?php endif; ?>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_templates&task=style.edit&id='.(int) $item->id); ?>">						<?php echo $this->escape($item->title);?></a>					<?php else : ?>						<?php echo $this->escape($item->title);?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>				</td>				<td>					<label for="cb<?php echo $i;?>">						<?php echo $this->escape($item->template);?>					</label>				</td>				<td class="center">					<?php if ($item->home == '0' || $item->home == '1'):?>						<?php echo JHtml::_('jgrid.isdefault', $item->home != '0', $i, 'styles.', $canChange && $item->home != '1');?>					<?php elseif ($canChange):?>						<a href="<?php echo JRoute::_('index.php?option=com_templates&task=styles.unsetDefault&cid[]='.$item->id.'&'.JSession::getFormToken().'=1');?>">							<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => JText::sprintf('COM_TEMPLATES_GRID_UNSET_LANGUAGE', $item->language_title)), true);?>						</a>					<?php else:?>						<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => $item->language_title), true);?>					<?php endif;?>				</td>				<td class="center">					<?php if ($item->assigned > 0) : ?>						<?php echo JHtml::_('image', 'admin/tick.png', JText::plural('COM_TEMPLATES_ASSIGNED', $item->assigned), array('title' => JText::plural('COM_TEMPLATES_ASSIGNED', $item->assigned)), true); ?>					<?php else : ?>						&#160;					<?php endif; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides an input field for files * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.file.html#input.file * @since       11.1 */class JFormFieldFile extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'File';	/**	 * Method to get the field input markup for the file field.	 * Field attributes allow specification of a maximum file size and a string	 * of accepted file extensions.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 *	 * @note    The field does not include an upload mechanism.	 * @see     JFormFieldMedia	 */	protected function getInput()	{		// Initialize some field attributes.		$accept = $this->element['accept'] ? ' accept="' . (string) $this->element['accept'] . '"' : '';		$size = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="file" name="' . $this->name . '" id="' . $this->id . '" value=""' . $accept . $disabled . $class . $size			. $onchange . $required . ' />';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */abstract class MediaHelper{	/**	 * Checks if the file is an image	 * @param string The filename	 * @return  boolean	 */	public static function isImage($fileName)	{		static $imageTypes = 'xcf|odg|gif|jpg|png|bmp';		return preg_match("/\.(?:$imageTypes)$/i", $fileName);	}	/**	 * Checks if the file is an image	 * @param string The filename	 * @return  boolean	 */	public static function getTypeIcon($fileName)	{		// Get file extension		return strtolower(substr($fileName, strrpos($fileName, '.') + 1));	}	/**	 * Checks if the file can be uploaded	 *	 * @param array File information	 * @param string An error message to be returned	 * @return  boolean	 */	public static function canUpload($file, &$err)	{		$params = JComponentHelper::getParams('com_media');		if (empty($file['name']))		{			$err = 'COM_MEDIA_ERROR_UPLOAD_INPUT';			return false;		}		jimport('joomla.filesystem.file');		if ($file['name'] !== JFile::makesafe($file['name']))		{			$err = 'COM_MEDIA_ERROR_WARNFILENAME';			return false;		}		$format = strtolower(JFile::getExt($file['name']));		$allowable = explode(',', $params->get('upload_extensions'));		$ignored = explode(',', $params->get('ignore_extensions'));		if (!in_array($format, $allowable) && !in_array($format, $ignored))		{			$err = 'COM_MEDIA_ERROR_WARNFILETYPE';			return false;		}		$maxSize = (int) ($params->get('upload_maxsize', 0) * 1024 * 1024);		if ($maxSize > 0 && (int) $file['size'] > $maxSize)		{			$err = 'COM_MEDIA_ERROR_WARNFILETOOLARGE';			return false;		}		$user = JFactory::getUser();		$imginfo = null;		if ($params->get('restrict_uploads', 1))		{			$images = explode(',', $params->get('image_extensions'));			if (in_array($format, $images)) { // if its an image run it through getimagesize				// if tmp_name is empty, then the file was bigger than the PHP limit				if (!empty($file['tmp_name']))				{					if (($imginfo = getimagesize($file['tmp_name'])) === false)					{						$err = 'COM_MEDIA_ERROR_WARNINVALID_IMG';						return false;					}				} else {					$err = 'COM_MEDIA_ERROR_WARNFILETOOLARGE';					return false;				}			} elseif (!in_array($format, $ignored))			{				// if its not an image...and we're not ignoring it				$allowed_mime = explode(',', $params->get('upload_mime'));				$illegal_mime = explode(',', $params->get('upload_mime_illegal'));				if (function_exists('finfo_open') && $params->get('check_mime', 1))				{					// We have fileinfo					$finfo = finfo_open(FILEINFO_MIME);					$type = finfo_file($finfo, $file['tmp_name']);					if (strlen($type) && !in_array($type, $allowed_mime) && in_array($type, $illegal_mime))					{						$err = 'COM_MEDIA_ERROR_WARNINVALID_MIME';						return false;					}					finfo_close($finfo);				} elseif (function_exists('mime_content_type') && $params->get('check_mime', 1))				{					// we have mime magic					$type = mime_content_type($file['tmp_name']);					if (strlen($type) && !in_array($type, $allowed_mime) && in_array($type, $illegal_mime))					{						$err = 'COM_MEDIA_ERROR_WARNINVALID_MIME';						return false;					}				} elseif (!$user->authorise('core.manage'))				{					$err = 'COM_MEDIA_ERROR_WARNNOTADMIN';					return false;				}			}		}		$xss_check = file_get_contents($file['tmp_name'], false, null, -1, 256);		$html_tags = array('abbr', 'acronym', 'address', 'applet', 'area', 'audioscope', 'base', 'basefont', 'bdo', 'bgsound', 'big', 'blackface', 'blink', 'blockquote', 'body', 'bq', 'br', 'button', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'comment', 'custom', 'dd', 'del', 'dfn', 'dir', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'fn', 'font', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'hr', 'html', 'iframe', 'ilayer', 'img', 'input', 'ins', 'isindex', 'keygen', 'kbd', 'label', 'layer', 'legend', 'li', 'limittext', 'link', 'listing', 'map', 'marquee', 'menu', 'meta', 'multicol', 'nobr', 'noembed', 'noframes', 'noscript', 'nosmartquotes', 'object', 'ol', 'optgroup', 'option', 'param', 'plaintext', 'pre', 'rt', 'ruby', 's', 'samp', 'script', 'select', 'server', 'shadow', 'sidebar', 'small', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'tt', 'ul', 'var', 'wbr', 'xml', 'xmp', '!DOCTYPE', '!--');		foreach ($html_tags as $tag)		{			// A tag is '<tagname ', so we need to add < and a space or '<tagname>'			if (stristr($xss_check, '<'.$tag.' ') || stristr($xss_check, '<'.$tag.'>'))			{				$err = 'COM_MEDIA_ERROR_WARNIEXSS';				return false;			}		}		return true;	}	/**	 * Method to parse a file size	 *	 * @param   integer  $size  The file size in bytes	 *	 * @return  string  The converted file size	 *	 * @since   1.6	 * @deprecated  4.0  Use JHtmlNumber::bytes() instead	 */	public static function parseSize($size)	{		JLog::add('MediaHelper::parseSize() is deprecated. Use JHtmlNumber::bytes() instead.', JLog::WARNING, 'deprecated');		return JHtml::_('number.bytes', $size);	}	public static function imageResize($width, $height, $target)	{		//takes the larger size of the width and height and applies the		//formula accordingly...this is so this script will work		//dynamically with any size image		if ($width > $height)		{			$percentage = ($target / $width);		}		else		{			$percentage = ($target / $height);		}		//gets the new value and applies the percentage, then rounds the value		$width = round($width * $percentage);		$height = round($height * $percentage);		return array($width, $height);	}	public static function countFiles($dir)	{		$total_file = 0;		$total_dir = 0;		if (is_dir($dir))		{			$d = dir($dir);			while (false !== ($entry = $d->read()))			{				if (substr($entry, 0, 1) != '.' && is_file($dir . DIRECTORY_SEPARATOR . $entry) && strpos($entry, '.html') === false && strpos($entry, '.php') === false)				{					$total_file++;				}				if (substr($entry, 0, 1) != '.' && is_dir($dir . DIRECTORY_SEPARATOR . $entry))				{					$total_dir++;				}			}			$d->close();		}		return array ($total_file, $total_dir);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $menu JAdminCSSMenu */$shownew = (boolean) $params->get('shownew', 1);$showhelp = $params->get('showhelp', 1);$user = JFactory::getUser();$lang = JFactory::getLanguage();//// Site SubMenu//$menu->addChild(	new JMenuNode(JText::_('MOD_MENU_SYSTEM'), '#'), true);$menu->addChild(	new JMenuNode(JText::_('MOD_MENU_CONTROL_PANEL'), 'index.php', 'class:cpanel'));$menu->addSeparator();if ($user->authorise('core.admin')){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_CONFIGURATION'), 'index.php?option=com_config', 'class:config'));	$menu->addSeparator();}$chm = $user->authorise('core.admin', 'com_checkin');$cam = $user->authorise('core.manage', 'com_cache');if ($chm || $cam ){	// Keep this for when bootstrap supports submenus?	/* $menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MAINTENANCE'), 'index.php?option=com_checkin', 'class:maintenance'), true	);*/	if ($chm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_GLOBAL_CHECKIN'), 'index.php?option=com_checkin', 'class:checkin'));		$menu->addSeparator();	}	if ($cam)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_CLEAR_CACHE'), 'index.php?option=com_cache', 'class:clear'));		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_PURGE_EXPIRED_CACHE'), 'index.php?option=com_cache&view=purge', 'class:purge'));	}	//$menu->getParent();}$menu->addSeparator();if ($user->authorise('core.admin')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_SYSTEM_INFORMATION'), 'index.php?option=com_admin&view=sysinfo', 'class:info')	);}$menu->getParent();//// Users Submenu//if ($user->authorise('core.manage', 'com_users')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USERS'), '#'), true	);	$createUser = $shownew && $user->authorise('core.create', 'com_users');	$createGrp = $user->authorise('core.admin', 'com_users');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USER_MANAGER'), 'index.php?option=com_users&view=users', 'class:user'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_USER'), 'index.php?option=com_users&task=user.add', 'class:newarticle')		);		$menu->getParent();	}	if ($createGrp)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_GROUPS'), 'index.php?option=com_users&view=groups', 'class:groups'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_GROUP'), 'index.php?option=com_users&task=group.add', 'class:newarticle')			);			$menu->getParent();		}		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_LEVELS'), 'index.php?option=com_users&view=levels', 'class:levels'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_LEVEL'), 'index.php?option=com_users&task=level.add', 'class:newarticle')			);			$menu->getParent();		}	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTES'), 'index.php?option=com_users&view=notes', 'class:user-note'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_NOTE'), 'index.php?option=com_users&task=note.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTE_CATEGORIES'), 'index.php?option=com_categories&view=categories&extension=com_users', 'class:category'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_users.notes', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MASS_MAIL_USERS'), 'index.php?option=com_users&view=mail', 'class:massmail')	);	$menu->getParent();}//// Menus Submenu//if ($user->authorise('core.manage', 'com_menus')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENUS'), '#'), true	);	$createMenu = $shownew && $user->authorise('core.create', 'com_menus');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER'), 'index.php?option=com_menus&view=menus', 'class:menumgr'), $createMenu	);	if ($createMenu)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU'), 'index.php?option=com_menus&view=menu&layout=edit', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	// Menu Types	foreach (ModMenuHelper::getMenus() as $menuType)	{		$alt = '*' .$menuType->sef. '*';		if ($menuType->home == 0)		{			$titleicon = '';		}		elseif ($menuType->home == 1 && $menuType->language == '*')		{			$titleicon = ' <i class="icon-home"></i>';		}		elseif ($menuType->home > 1)		{			$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $menuType->home, array('title' => JText::_('MOD_MENU_HOME_MULTIPLE')), true).'</span>';		}		else		{			$image = JHtml::_('image', 'mod_languages/'.$menuType->image.'.gif', null, null, true, true);			if (!$image)			{				$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $alt, array('title' => $menuType->title_native), true).'</span>';			}			else			{				$titleicon = ' <span>' . JHtml::_('image', 'mod_languages/' . $menuType->image . '.gif', $alt, array('title' => $menuType->title_native), true) . '</span>';			}		}		$menu->addChild(			new JMenuNode($menuType->title,	'index.php?option=com_menus&view=items&menutype='.$menuType->menutype, 'class:menu', null, null, $titleicon), $createMenu		);		if ($createMenu)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU_ITEM'), 'index.php?option=com_menus&view=item&layout=edit&menutype='.$menuType->menutype, 'class:newarticle')			);			$menu->getParent();		}	}	$menu->getParent();}//// Content Submenu//if ($user->authorise('core.manage', 'com_content')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT'), '#'), true	);	$createContent = $shownew && $user->authorise('core.create', 'com_content');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_ARTICLE_MANAGER'), 'index.php?option=com_content', 'class:article'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_ARTICLE'), 'index.php?option=com_content&task=article.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_CATEGORY_MANAGER'), 'index.php?option=com_categories&extension=com_content', 'class:category'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_content', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_FEATURED'), 'index.php?option=com_content&view=featured', 'class:featured')	);	$menu->addSeparator();	if ($user->authorise('core.manage', 'com_media'))	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_MEDIA_MANAGER'), 'index.php?option=com_media', 'class:media'));	}	$menu->getParent();}//// Components Submenu//// Get the authorised components and sub-menus.$components = ModMenuHelper::getComponents(true);// Check if there are any components, otherwise, don't render the menuif ($components){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COMPONENTS'), '#'), true);	foreach ($components as &$component)	{		if (!empty($component->submenu))		{			// This component has a db driven submenu.			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img), true);			foreach ($component->submenu as $sub)			{				$menu->addChild(new JMenuNode($sub->text, $sub->link, $sub->img));			}			$menu->getParent();		}		else		{			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img));		}	}	$menu->getParent();}//// Extensions Submenu//$im = $user->authorise('core.manage', 'com_installer');$mm = $user->authorise('core.manage', 'com_modules');$pm = $user->authorise('core.manage', 'com_plugins');$tm = $user->authorise('core.manage', 'com_templates');$lm = $user->authorise('core.manage', 'com_languages');if ($im || $mm || $pm || $tm || $lm){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSIONS'), '#'), true);	if ($im)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSION_MANAGER'), 'index.php?option=com_installer', 'class:install'));		$menu->addSeparator();	}	if ($mm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_MODULE_MANAGER'), 'index.php?option=com_modules', 'class:module'));	}	if ($pm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_PLUGIN_MANAGER'), 'index.php?option=com_plugins', 'class:plugin'));	}	if ($tm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_TEMPLATE_MANAGER'), 'index.php?option=com_templates', 'class:themes'));	}	if ($lm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_LANGUAGE_MANAGER'), 'index.php?option=com_languages', 'class:language'));	}	$menu->getParent();}//// Help Submenu//if ($showhelp == 1){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP'), '#'), true	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_JOOMLA'), 'index.php?option=com_admin&view=help', 'class:help')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_FORUM'), 'http://forum.joomla.org', 'class:help-forum', false, '_blank')	);	if ($forum_url = $params->get('forum_url'))	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_CUSTOM_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$debug = $lang->setDebug(false);	if ($lang->hasKey('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') && JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') != '')	{		$forum_url = 'http://forum.joomla.org/viewforum.php?f=' . (int) JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE');		$lang->setDebug($debug);		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$lang->setDebug($debug);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DOCUMENTATION'), 'http://docs.joomla.org', 'class:help-docs', false, '_blank')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_EXTENSIONS'), 'http://extensions.joomla.org', 'class:help-jed', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_TRANSLATIONS'), 'http://community.joomla.org/translations.html', 'class:help-trans', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_RESOURCES'), 'http://resources.joomla.org', 'class:help-jrd', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_COMMUNITY'), 'http://community.joomla.org', 'class:help-community', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SECURITY'), 'http://developer.joomla.org/security.html', 'class:help-security', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DEVELOPER'), 'http://developer.joomla.org', 'class:help-dev', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SHOP'), 'http://shop.joomla.org', 'class:help-shop', false, '_blank')	);	$menu->getParent();}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Strings JSON Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesControllerStrings extends JControllerAdmin{	/**	 * Constructor	 *	 * @param   	array	An optional associative array of configuration settings	 *	 * @return  void	 *	 * @since		2.5	 */	public function __construct($config = array())	{		parent::__construct($config);		require_once JPATH_COMPONENT . '/helpers/jsonresponse.php';	}	/**	 * Method for refreshing the cache in the database with the known language strings	 *	 * @return  void	 *	 * @since		2.5	 */	public function refresh()	{		echo new JJsonResponse($this->getModel('strings')->refresh());	}	/**	 * Method for searching language strings	 *	 * @return  void	 *	 * @since		2.5	 */	public function search()	{		echo new JJsonResponse($this->getModel('strings')->search());	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for com_content. * * @package     Joomla.Plugin * @subpackage  Finder.Content * @since       2.5 */class PlgFinderContent extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Content';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_content';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'article';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'Article';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__content';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to update the item link information when the item category is	 * changed. This is fired when the item category is published or unpublished	 * from the list view.	 *	 * @param   string   $extension  The extension whose category has been updated.	 * @param   array    $pks        A list of primary key ids of the content that has changed state.	 * @param   integer  $value      The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderCategoryChangeState($extension, $pks, $value)	{		// Make sure we're handling com_content categories		if ($extension == 'com_content')		{			$this->categoryStateChange($pks, $value);		}	}	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterDelete($context, $table)	{		if ($context == 'com_content.article')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle articles here		if ($context == 'com_content.article' || $context == 'com_content.form')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);			}			// Reindex the item			$this->reindex($row->id);		}		// Check for access changes in the category		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row     A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle articles here		if ($context == 'com_content.article' || $context == 'com_content.form')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);			}		}		// Check for access levels from the category		if ($context == 'com_categories.category')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle articles here		if ($context == 'com_content.article' || $context == 'com_content.form')		{			$this->itemStateChange($pks, $value);		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		$item->setLanguage();		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = JComponentHelper::getParams('com_content', true);		$item->params->merge($registry);		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		// Trigger the onContentPrepare event.		$item->summary = FinderIndexerHelper::prepareContent($item->summary, $item->params);		$item->body = FinderIndexerHelper::prepareContent($item->body, $item->params);		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $this->extension, $this->layout);		$item->route = ContentHelperRoute::getArticleRoute($item->slug, $item->catslug);		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Add the meta-data processing instructions.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Translate the state. Articles should only be published if the category is published.		$item->state = $this->translateState($item->state, $item->cat_state);		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Article');		// Add the author taxonomy data.		if (!empty($item->author) || !empty($item->created_by_alias))		{			$item->addTaxonomy('Author', !empty($item->created_by_alias) ? $item->created_by_alias : $item->author);		}		// Add the category taxonomy data.		$item->addTaxonomy('Category', $item->category, $item->cat_state, $item->cat_access);		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load dependent classes.		include_once JPATH_SITE . '/components/com_content/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.title, a.alias, a.introtext AS summary, a.fulltext AS body')			->select('a.state, a.catid, a.created AS start_date, a.created_by')			->select('a.created_by_alias, a.modified, a.modified_by, a.attribs AS params')			->select('a.metakey, a.metadesc, a.metadata, a.language, a.access, a.version, a.ordering')			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')			->select('c.title AS category, c.published AS cat_state, c.access AS cat_access');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias);		$case_when_category_alias = ' CASE WHEN ';		$case_when_category_alias .= $query->charLength('c.alias', '!=', '0');		$case_when_category_alias .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when_category_alias .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when_category_alias .= ' ELSE ';		$case_when_category_alias .= $c_id.' END as catslug';		$query->select($case_when_category_alias)			->select('u.name AS author')			->from('#__content AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid')			->join('LEFT', '#__users AS u ON u.id = a.created_by');		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$doc = JFactory::getDocument();$lang = JFactory::getLanguage();// Add JavaScript FrameworksJHtml::_('bootstrap.framework');JHtml::_('bootstrap.tooltip');// Add Stylesheets$doc->addStyleSheet('templates/' .$this->template. '/css/template.css');// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Detecting Active Variables$option   = $app->input->getCmd('option', '');$view     = $app->input->getCmd('view', '');$layout   = $app->input->getCmd('layout', '');$task     = $app->input->getCmd('task', '');$itemid   = $app->input->getCmd('Itemid', '');$sitename = $app->getCfg('sitename');// Check if debug is on$config = JFactory::getConfig();$debug  = (boolean) $config->get('debug');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" ><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<meta http-equiv="X-UA-Compatible" content="IE=edge" />	<jdoc:include type="head" />	<script type="text/javascript">		window.addEvent('domready', function ()		{			document.getElementById('form-login').username.select();			document.getElementById('form-login').username.focus();		});	</script>	<style type="text/css">		/* Responsive Styles */		@media (max-width: 480px) {			.view-login .container {				margin-top: -170px;			}			.btn {				font-size: 13px;				padding: 4px 10px 4px;			}		}		<?php if ($debug) : ?>			.view-login .container {				position: static;				margin-top: 20px;				margin-left: auto;				margin-right: auto;			}			.view-login .navbar-fixed-bottom {				display: none;			}		<?php endif; ?>	</style>	<!--[if lt IE 9]>		<script src="../media/jui/js/html5.js"></script>	<![endif]--></head><body class="site <?php echo $option . " view-" . $view . " layout-" . $layout . " task-" . $task . " itemid-" . $itemid . " ";?>">	<!-- Container -->	<div class="container">		<div id="content">			<!-- Begin Content -->			<div id="element-box" class="login well">				<img src="<?php echo $this->baseurl; ?>/templates/<?php echo $this->template ?>/images/joomla.png" alt="Joomla!" />				<hr />				<jdoc:include type="message" />				<jdoc:include type="component" />			</div>			<noscript>				<?php echo JText::_('JGLOBAL_WARNJAVASCRIPT') ?>			</noscript>			<!-- End Content -->		</div>	</div>	<div class="navbar navbar-fixed-bottom hidden-phone">		<p class="pull-right">&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>		<a class="login-joomla" href="http://www.joomla.org" class="hasTooltip" title="<?php echo JText::_('TPL_ISIS_ISFREESOFTWARE');?>">Joomla!&#174;</a>		<a href="<?php echo JURI::root(); ?>" class="pull-left"><i class="icon-share icon-white"></i> <?php echo JText::_('COM_LOGIN_RETURN_TO_SITE_HOME_PAGE') ?></a>	</div>	<jdoc:include type="modules" name="debug" style="none" /></body></html>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');// If the page class is defined, add to class as suffix.// It will be a separate class if the user starts it with a space?><div class="blog-featured<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading') != 0) : ?><div class="page-header">	<h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1></div><?php endif; ?><?php $leadingcount = 0; ?><?php if (!empty($this->lead_items)) : ?><div class="items-leading">	<?php foreach ($this->lead_items as &$item) : ?>		<div class="leading-<?php echo $leadingcount; ?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?>">			<?php				$this->item = &$item;				echo $this->loadTemplate('item');			?>		</div>		<div class="clearfix"></div>		<?php			$leadingcount++;		?>	<?php endforeach; ?></div><div class="clearfix"></div><?php endif; ?><?php	$introcount = (count($this->intro_items));	$counter = 0;?><?php if (!empty($this->intro_items)) : ?>	<?php foreach ($this->intro_items as $key => &$item) : ?>		<?php		$key = ($key - $leadingcount) + 1;		$rowcount = (((int) $key - 1) % (int) $this->columns) + 1;		$row = $counter / $this->columns;		if ($rowcount == 1) : ?>		<div class="items-row cols-<?php echo (int) $this->columns;?> <?php echo 'row-'.$row; ?> row-fluid">		<?php endif; ?>			<div class="item column-<?php echo $rowcount;?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?> span<?php echo round((12 / $this->columns));?>">			<?php					$this->item = &$item;					echo $this->loadTemplate('item');			?>			</div>			<?php $counter++; ?>			<?php if (($rowcount == $this->columns) or ($counter == $introcount)) : ?>		</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?><?php if (!empty($this->link_items)) : ?>	<div class="items-more">	<?php echo $this->loadTemplate('links'); ?>	</div><?php endif; ?><?php if ($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2 && $this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a list of access levels. Access levels control what users in specific * groups can see. * * @package     Joomla.Platform * @subpackage  Form * @see         JAccess * @since       11.1 */class JFormFieldAccessLevel extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'AccessLevel';	/**	 * Method to get the field input markup.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->multiple ? ' multiple="multiple"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Get the field options.		$options = $this->getOptions();		return JHtml::_('access.level', $this->name, $this->value, $attr, $options, $this->id);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';JHtml::_('bootstrap.tooltip');if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :		if (!isset($this->items[$this->parent->id][$id + 1]))		{			$class = ' class="last"';		}		?>		<div <?php echo $class; ?> >		<?php $class = ''; ?>			<h3 class="page-header item-title">				<a href="<?php echo JRoute::_(WeblinksHelperRoute::getCategoryRoute($item->id));?>">					<?php echo $this->escape($item->title); ?></a>					<?php if ($this->params->get('show_cat_num_articles_cat') == 1) :?>						<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_WEBLINKS_NUM_ITEMS'); ?>">							<?php echo $item->numitems; ?>						</span>					<?php endif; ?>					<?php if (count($item->getChildren()) > 0) : ?>						<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>					<?php endif;?>				</h3>				<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>					<?php if ($item->description) : ?>						<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_weblinks.categories'); ?>						</div>					<?php endif; ?>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) :?>					<div class="collapse fade" id="category-<?php echo $item->id;?>">						<?php						$this->items[$item->id] = $item->getChildren();						$this->parent = $item;						$this->maxLevelcat--;						echo $this->loadTemplate('items');						$this->parent = $item->getParent();						$this->maxLevelcat++;						?>					</div>				<?php endif; ?>			</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument head renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererHead extends JDocumentRenderer{	/**	 * Renders the document head and returns the results as a string	 *	 * @param   string  $head     (unused)	 * @param   array   $params   Associative array of values	 * @param   string  $content  The script	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 *	 * @note    Unused arguments are retained to preserve backward compatibility.	 */	public function render($head, $params = array(), $content = null)	{		ob_start();		echo $this->fetchHead($this->_doc);		$buffer = ob_get_contents();		ob_end_clean();		return $buffer;	}	/**	 * Generates the head HTML and return the results as a string	 *	 * @param   JDocument  $document  The document for which the head will be created	 *	 * @return  string  The head hTML	 *	 * @since   11.1	 */	public function fetchHead($document)	{		// Convert the tagids to titles		$tagsHelper = new JHelperTags();		if (isset($document->_metaTags['standard']['tags']))		{			$document->_metaTags['standard']['tags'] = implode(', ', $tagsHelper->getTagNames($document->_metaTags['standard']['tags']));		}		// Trigger the onBeforeCompileHead event		$app = JFactory::getApplication();		$app->triggerEvent('onBeforeCompileHead');		// Get line endings		$lnEnd = $document->_getLineEnd();		$tab = $document->_getTab();		$tagEnd = ' />';		$buffer = '';		// Generate charset when using HTML5 (should happen first)		if ($document->isHtml5())		{			$buffer .= $tab . '<meta charset="' . $document->getCharset() . '" />' . $lnEnd;		}		// Generate base tag (need to happen early)		$base = $document->getBase();		if (!empty($base))		{			$buffer .= $tab . '<base href="' . $document->getBase() . '" />' . $lnEnd;		}		// Generate META tags (needs to happen as early as possible in the head)		foreach ($document->_metaTags as $type => $tag)		{			foreach ($tag as $name => $content)			{				if ($type == 'http-equiv' && !($document->isHtml5() && $name == 'content-type'))				{					$buffer .= $tab . '<meta http-equiv="' . $name . '" content="' . htmlspecialchars($content) . '" />' . $lnEnd;				}				elseif ($type == 'standard' && !empty($content))				{					$buffer .= $tab . '<meta name="' . $name . '" content="' . htmlspecialchars($content) . '" />' . $lnEnd;				}			}		}		// Don't add empty descriptions		$documentDescription = $document->getDescription();		if ($documentDescription)		{			$buffer .= $tab . '<meta name="description" content="' . htmlspecialchars($documentDescription) . '" />' . $lnEnd;		}		// Don't add empty generators		$generator = $document->getGenerator();		if ($generator)		{			$buffer .= $tab . '<meta name="generator" content="' . htmlspecialchars($generator) . '" />' . $lnEnd;		}		$buffer .= $tab . '<title>' . htmlspecialchars($document->getTitle(), ENT_COMPAT, 'UTF-8') . '</title>' . $lnEnd;		// Generate link declarations		foreach ($document->_links as $link => $linkAtrr)		{			$buffer .= $tab . '<link href="' . $link . '" ' . $linkAtrr['relType'] . '="' . $linkAtrr['relation'] . '"';			if ($temp = JArrayHelper::toString($linkAtrr['attribs']))			{				$buffer .= ' ' . $temp;			}			$buffer .= ' />' . $lnEnd;		}		// Generate stylesheet links		foreach ($document->_styleSheets as $strSrc => $strAttr)		{			$buffer .= $tab . '<link rel="stylesheet" href="' . $strSrc . '" type="' . $strAttr['mime'] . '"';			if (!is_null($strAttr['media']))			{				$buffer .= ' media="' . $strAttr['media'] . '" ';			}			if ($temp = JArrayHelper::toString($strAttr['attribs']))			{				$buffer .= ' ' . $temp;			}			$buffer .= $tagEnd . $lnEnd;		}		// Generate stylesheet declarations		foreach ($document->_style as $type => $content)		{			$buffer .= $tab . '<style type="' . $type . '">' . $lnEnd;			// This is for full XHTML support.			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . '<![CDATA[' . $lnEnd;			}			$buffer .= $content . $lnEnd;			// See above note			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . ']]>' . $lnEnd;			}			$buffer .= $tab . '</style>' . $lnEnd;		}		// Generate script file links		foreach ($document->_scripts as $strSrc => $strAttr)		{			$buffer .= $tab . '<script src="' . $strSrc . '"';			if (!is_null($strAttr['mime']))			{				$buffer .= ' type="' . $strAttr['mime'] . '"';			}			if ($strAttr['defer'])			{				$buffer .= ' defer="defer"';			}			if ($strAttr['async'])			{				$buffer .= ' async="async"';			}			$buffer .= '></script>' . $lnEnd;		}		// Generate script declarations		foreach ($document->_script as $type => $content)		{			$buffer .= $tab . '<script type="' . $type . '">' . $lnEnd;			// This is for full XHTML support.			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . '<![CDATA[' . $lnEnd;			}			$buffer .= $content . $lnEnd;			// See above note			if ($document->_mime != 'text/html')			{				$buffer .= $tab . $tab . ']]>' . $lnEnd;			}			$buffer .= $tab . '</script>' . $lnEnd;		}		// Generate script language declarations.		if (count(JText::script()))		{			$buffer .= $tab . '<script type="text/javascript">' . $lnEnd;			$buffer .= $tab . $tab . '(function() {' . $lnEnd;			$buffer .= $tab . $tab . $tab . 'var strings = ' . json_encode(JText::script()) . ';' . $lnEnd;			$buffer .= $tab . $tab . $tab . 'if (typeof Joomla == \'undefined\') {' . $lnEnd;			$buffer .= $tab . $tab . $tab . $tab . 'Joomla = {};' . $lnEnd;			$buffer .= $tab . $tab . $tab . $tab . 'Joomla.JText = strings;' . $lnEnd;			$buffer .= $tab . $tab . $tab . '}' . $lnEnd;			$buffer .= $tab . $tab . $tab . 'else {' . $lnEnd;			$buffer .= $tab . $tab . $tab . $tab . 'Joomla.JText.load(strings);' . $lnEnd;			$buffer .= $tab . $tab . $tab . '}' . $lnEnd;			$buffer .= $tab . $tab . '})();' . $lnEnd;			$buffer .= $tab . '</script>' . $lnEnd;		}		foreach ($document->_custom as $custom)		{			$buffer .= $tab . $custom . $lnEnd;		}		return $buffer;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of clients. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewClients extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		BannersHelper::addSubmenu('clients');		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/banners.php';		$canDo	= BannersHelper::getActions();		JToolbarHelper::title(JText::_('COM_BANNERS_MANAGER_CLIENTS'), 'banners-clients.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('client.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('client.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('clients.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('clients.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('clients.archive');			JToolbarHelper::checkin('clients.checkin');		}		if ($this->state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'clients.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('clients.trash');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_banners');		}		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_CLIENTS');		JHtmlSidebar::setAction('index.php?option=com_banners&view=clients');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.status' => JText::_('JSTATUS'),			'a.name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'contact' => JText::_('COM_BANNERS_HEADING_CONTACT'),			'client_name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'nbanners' => JText::_('COM_BANNERS_HEADING_ACTIVE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');jimport('joomla.filesystem.path');jimport('joomla.base.adapter');jimport('joomla.utilities.arrayhelper');/** * Updater Class * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 */class JUpdater extends JAdapter{	/**	 * @var    JUpdater  JUpdater instance container.	 * @since  11.3	 */	protected static $instance;	/**	 * Constructor	 *	 * @since   11.1	 */	public function __construct()	{		// Adapter base path, class prefix		parent::__construct(__DIR__, 'JUpdater');	}	/**	 * Returns a reference to the global Installer object, only creating it	 * if it doesn't already exist.	 *	 * @return  object  An installer object	 *	 * @since   11.1	 */	public static function getInstance()	{		if (!isset(self::$instance))		{			self::$instance = new JUpdater;		}		return self::$instance;	}	/**	 * Finds an update for an extension	 *	 * @param   integer  $eid           Extension Identifier; if zero use all sites	 * @param   integer  $cacheTimeout  How many seconds to cache update information; if zero, force reload the update information	 *	 * @return  boolean True if there are updates	 *	 * @since   11.1	 */	public function findUpdates($eid = 0, $cacheTimeout = 0)	{		$db = $this->getDBO();		$retval = false;		// Push it into an array		if (!is_array($eid))		{			$query = 'SELECT DISTINCT update_site_id, type, location, last_check_timestamp FROM #__update_sites WHERE enabled = 1';		}		else		{			$query = 'SELECT DISTINCT update_site_id, type, location, last_check_timestamp FROM #__update_sites' .				' WHERE update_site_id IN' .				'  (SELECT update_site_id FROM #__update_sites_extensions WHERE extension_id IN (' . implode(',', $eid) . '))';		}		$db->setQuery($query);		$results = $db->loadAssocList();		$result_count = count($results);		$now = time();		for ($i = 0; $i < $result_count; $i++)		{			$result = &$results[$i];			$this->setAdapter($result['type']);			if (!isset($this->_adapters[$result['type']]))			{				// Ignore update sites requiring adapters we don't have installed				continue;			}			if ($cacheTimeout > 0)			{				if (isset($result['last_check_timestamp']) && ($now - $result['last_check_timestamp'] <= $cacheTimeout))				{					// Ignore update sites whose information we have fetched within					// the cache time limit					$retval = true;					continue;				}			}			$update_result = $this->_adapters[$result['type']]->findUpdate($result);			if (is_array($update_result))			{				if (array_key_exists('update_sites', $update_result) && count($update_result['update_sites']))				{					$results = JArrayHelper::arrayUnique(array_merge($results, $update_result['update_sites']));					$result_count = count($results);				}				if (array_key_exists('updates', $update_result) && count($update_result['updates']))				{					for ($k = 0, $count = count($update_result['updates']); $k < $count; $k++)					{						$current_update = &$update_result['updates'][$k];						$update = JTable::getInstance('update');						$extension = JTable::getInstance('extension');						$uid = $update							->find(							array(								'element' => strtolower($current_update->get('element')), 'type' => strtolower($current_update->get('type')),								'client_id' => strtolower($current_update->get('client_id')),								'folder' => strtolower($current_update->get('folder'))							)						);						$eid = $extension							->find(							array(								'element' => strtolower($current_update->get('element')), 'type' => strtolower($current_update->get('type')),								'client_id' => strtolower($current_update->get('client_id')),								'folder' => strtolower($current_update->get('folder'))							)						);						if (!$uid)						{							// Set the extension id							if ($eid)							{								// We have an installed extension, check the update is actually newer								$extension->load($eid);								$data = json_decode($extension->manifest_cache, true);								if (version_compare($current_update->version, $data['version'], '>') == 1)								{									$current_update->extension_id = $eid;									$current_update->store();								}							}							else							{								// A potentially new extension to be installed								$current_update->store();							}						}						else						{							$update->load($uid);							// If there is an update, check that the version is newer then replaces							if (version_compare($current_update->version, $update->version, '>') == 1)							{								$current_update->store();							}						}					}				}				$update_result = true;			}			elseif ($retval)			{				$update_result = true;			}			// Finally, update the last update check timestamp			$query = $db->getQuery(true)				->update($db->quoteName('#__update_sites'))				->set($db->quoteName('last_check_timestamp') . ' = ' . $db->quote($now))				->where($db->quoteName('update_site_id') . ' = ' . $db->quote($result['update_site_id']));			$db->setQuery($query);			$db->execute();		}		return $retval;	}	/**	 * Finds an update for an extension	 *	 * @param   integer  $id  Id of the extension	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function update($id)	{		$updaterow = JTable::getInstance('update');		$updaterow->load($id);		$update = new JUpdate;		if ($update->loadFromXML($updaterow->detailsurl))		{			return $update->install();		}		return false;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Profiler * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class to assist in the process of benchmarking the execution * of sections of code to understand where time is being spent. * * @package     Joomla.Platform * @subpackage  Profiler * @since       11.1 */class JProfiler{	/**	 * @var    integer  The start time.	 * @since  12.1	 */	protected $start = 0;	/**	 * @var    string  The prefix to use in the output	 * @since  12.1	 */	protected $prefix = '';	/**	 * @var    array  The buffer of profiling messages.	 * @since  12.1	 */	protected $buffer = null;	/**	 * @var    float	 * @since  12.1	 */	protected $previousTime = 0.0;	/**	 * @var    float	 * @since  12.1	 */	protected $previousMem = 0.0;	/**	 * @var    array  JProfiler instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   string  $prefix  Prefix for mark messages	 *	 * @since  11.1	 */	public function __construct($prefix = '')	{		$this->start = $this->getmicrotime();		$this->prefix = $prefix;		$this->buffer = array();	}	/**	 * Returns the global Profiler object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $prefix  Prefix used to distinguish profiler objects.	 *	 * @return  JProfiler  The Profiler object.	 *	 * @since   11.1	 */	public static function getInstance($prefix = '')	{		if (empty(self::$instances[$prefix]))		{			self::$instances[$prefix] = new JProfiler($prefix);		}		return self::$instances[$prefix];	}	/**	 * Output a time mark	 *	 * The mark is returned as text enclosed in <div> tags	 * with a CSS class of 'profiler'.	 *	 * @param   string  $label  A label for the time mark	 *	 * @return  string  Mark enclosed in <div> tags	 *	 * @since   11.1	 */	public function mark($label)	{		$current = self::getmicrotime() - $this->start;		$currentMem = 0;		$currentMem = memory_get_usage() / 1048576;		$mark = sprintf(			'<code>%s %.3f seconds (+%.3f); %0.2f MB (%s%0.3f) - %s</code>',			$this->prefix,			$current,			$current - $this->previousTime,			$currentMem,			($currentMem > $this->previousMem) ? '+' : '', $currentMem - $this->previousMem,			$label		);		$this->previousTime = $current;		$this->previousMem = $currentMem;		$this->buffer[] = $mark;		return $mark;	}	/**	 * Get the current time.	 *	 * @return  float The current time	 *	 * @since   11.1	 */	public static function getmicrotime()	{		list ($usec, $sec) = explode(' ', microtime());		return ((float) $usec + (float) $sec);	}	/**	 * Get information about current memory usage.	 *	 * @return  integer  The memory usage	 *	 * @link    PHP_MANUAL#memory_get_usage	 * @since   11.1	 * @deprecated  12.3  Use PHP's native memory_get_usage()	 */	public function getMemory()	{		return memory_get_usage();	}	/**	 * Get all profiler marks.	 *	 * Returns an array of all marks created since the Profiler object	 * was instantiated.  Marks are strings as per {@link JProfiler::mark()}.	 *	 * @return  array  Array of profiler marks	 */	public function getBuffer()	{		return $this->buffer;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of weblinks. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewWeblinks extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @return  void	 */	public function display($tpl = null)	{		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		WeblinksHelper::addSubmenu('weblinks');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/weblinks.php';		$state	= $this->get('State');		$canDo	= WeblinksHelper::getActions($state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_WEBLINKS_MANAGER_WEBLINKS'), 'weblinks.png');		if (count($user->getAuthorisedCategories('com_weblinks', 'core.create')) > 0)		{			JToolbarHelper::addNew('weblink.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('weblink.edit');		}		if ($canDo->get('core.edit.state')) {			JToolbarHelper::publish('weblinks.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('weblinks.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('weblinks.archive');			JToolbarHelper::checkin('weblinks.checkin');		}		if ($state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'weblinks.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('weblinks.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_weblinks');		}		JToolbarHelper::help('JHELP_COMPONENTS_WEBLINKS_LINKS');		JHtmlSidebar::setAction('index.php?option=com_weblinks&view=weblinks');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_weblinks'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'a.hits' => JText::_('JGLOBAL_HITS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Template style controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerSource extends JControllerLegacy{	/**	 * Constructor.	 *	 * @param   array An optional associative array of configuration settings.	 * @see     JController	 */	public function __construct($config = array())	{		parent::__construct($config);		// Apply, Save & New, and Save As copy should be standard on forms.		$this->registerTask('apply', 'save');	}	/**	 * Method to check if you can add a new record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 */	protected function allowEdit()	{		return JFactory::getUser()->authorise('core.edit', 'com_templates');	}	/**	 * Method to check if you can save a new or existing record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 */	protected function allowSave()	{		return $this->allowEdit();	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string	The model name. Optional.	 * @param   string	The class prefix. Optional.	 * @param   array  Configuration array for model. Optional (note, the empty array is atypical compared to other models).	 *	 * @return  object  The model.	 */	public function getModel($name = 'Source', $prefix = 'TemplatesModel', $config = array())	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * This controller does not have a display method. Redirect back to the list view of the component.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$this->setRedirect(JRoute::_('index.php?option=com_templates&view=templates', false));	}	/**	 * Method to edit an existing record.	 *	 * @return  void	 */	public function edit()	{		$app		= JFactory::getApplication();		$model		= $this->getModel();		$recordId	= JRequest::getVar('id');		$context	= 'com_templates.edit.source';		if (preg_match('#\.\.#', base64_decode($recordId)))		{			return JError::raiseError(500, JText::_('COM_TEMPLATES_ERROR_SOURCE_FILE_NOT_FOUND'));		}		// Access check.		if (!$this->allowEdit())		{			return JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));		}		// Check-out succeeded, push the new record id into the session.		$app->setUserState($context.'.id',	$recordId);		$app->setUserState($context.'.data', null);		$this->setRedirect('index.php?option=com_templates&view=source&layout=edit');		return true;	}	/**	 * Method to cancel an edit	 *	 * @return  void	 */	public function cancel()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app		= JFactory::getApplication();		$model		= $this->getModel();		$context	= 'com_templates.edit.source';		$returnId	= (int) $model->getState('extension.id');		// Clean the session data and redirect.		$app->setUserState($context . '.id', null);		$app->setUserState($context . '.data', null);		$this->setRedirect(JRoute::_('index.php?option=com_templates&view=template&id='.$returnId, false));	}	/**	 * Saves a template source file.	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$data    = $this->input->post->get('jform', array(), 'array');		$context = 'com_templates.edit.source';		$task    = $this->getTask();		$model   = $this->getModel();		// Access check.		if (!$this->allowSave())		{			return JError::raiseWarning(403, JText::_('JERROR_SAVE_NOT_PERMITTED'));		}		// Match the stored id's with the submitted.		if (empty($data['extension_id']) || empty($data['filename']))		{			return JError::raiseError(500, JText::_('COM_TEMPLATES_ERROR_SOURCE_ID_FILENAME_MISMATCH'));		}		elseif ($data['extension_id'] != $model->getState('extension.id'))		{			return JError::raiseError(500, JText::_('COM_TEMPLATES_ERROR_SOURCE_ID_FILENAME_MISMATCH'));		}		elseif ($data['filename'] != $model->getState('filename'))		{			return JError::raiseError(500, JText::_('COM_TEMPLATES_ERROR_SOURCE_ID_FILENAME_MISMATCH'));		}		// Validate the posted data.		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data = $model->validate($form, $data);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState($context.'.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_templates&view=source&layout=edit', false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Save the data in the session.			$app->setUserState($context.'.data', $data);			// Redirect back to the edit screen.			$this->setMessage(JText::sprintf('JERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_templates&view=source&layout=edit', false));			return false;		}		$this->setMessage(JText::_('COM_TEMPLATES_FILE_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Reset the record data in the session.				$app->setUserState($context.'.data',	null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=com_templates&view=source&layout=edit', false));				break;			default:				// Clear the record id and data from the session.				$app->setUserState($context.'.id', null);				$app->setUserState($context.'.data', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=com_templates&view=template&id='.$model->getState('extension.id'), false));				break;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of contact records. * * @package     Joomla.Administrator * @subpackage  com_contact */class ContactModelContacts extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'user_id', 'a.user_id',				'published', 'a.published',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'ul.name', 'linked_user',			);			$app = JFactory::getApplication();			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$config['filter_fields'][] = 'association';			}		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		// Adjust the context to support modal layouts.		if ($layout = $app->input->get('layout'))		{			$this->context .= '.' . $layout;		}		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$access = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', 0, 'int');		$this->setState('filter.access', $access);		$published = $this->getUserStateFromRequest($this->context . '.filter.published', 'filter_published', '');		$this->setState('filter.published', $published);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id');		$this->setState('filter.category_id', $categoryId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// force a language		$forcedLanguage = $app->input->get('forcedLanguage');		if (!empty($forcedLanguage))		{			$this->setState('filter.language', $forcedLanguage);			$this->setState('filter.forcedLanguage', $forcedLanguage);		}		$tag = $this->getUserStateFromRequest($this->context . '.filter.tag', 'filter_tag', '');		$this->setState('filter.tag', $tag);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.category_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.name, a.alias, a.checked_out, a.checked_out_time, a.catid, a.user_id' .					', a.published, a.access, a.created, a.created_by, a.ordering, a.featured, a.language' .					', a.publish_up, a.publish_down'			)		);		$query->from('#__contact_details AS a');		// Join over the users for the linked user.		$query->select('ul.name AS linked_user')			->join('LEFT', '#__users AS ul ON ul.id=a.user_id');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the associations.		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$query->select('COUNT(asso2.id)>1 as association')				->join('LEFT', '#__associations AS asso ON asso.id = a.id AND asso.context=' . $db->quote('com_contact.item'))				->join('LEFT', '#__associations AS asso2 ON asso2.key = asso.key')				->group('a.id');		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published = 0 OR a.published = 1)');		}		// Filter by a single or group of categories.		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$query->where('a.catid = ' . (int) $categoryId);		}		elseif (is_array($categoryId))		{			JArrayHelper::toInteger($categoryId);			$categoryId = implode(',', $categoryId);			$query->where('a.catid IN (' . $categoryId . ')');		}		// Filter by search in name.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'author:') === 0)			{				$search = $db->quote('%' . $db->escape(substr($search, 7), true) . '%');				$query->where('(uc.name LIKE ' . $search . ' OR uc.username LIKE ' . $search . ')');			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.name LIKE ' . $search . ' OR a.alias LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Filter by a single tag.		$tagId = $this->getState('filter.tag');		if (is_numeric($tagId))		{			$query->where($db->quoteName('tagmap.tag_id') . ' = ' . (int) $tagId)				->join(					'LEFT', $db->quoteName('#__contentitem_tag_map', 'tagmap')					. ' ON ' . $db->quoteName('tagmap.content_item_id') . ' = ' . $db->quoteName('a.id')					. ' AND ' . $db->quoteName('tagmap.type_alias') . ' = ' . $db->quote('com_contact.contact')				);		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering', 'a.name');		$orderDirn = $this->state->get('list.direction', 'asc');		if ($orderCol == 'a.ordering' || $orderCol == 'category_title')		{			$orderCol = 'c.title ' . $orderDirn . ', a.ordering';		}		$query->order($db->escape($orderCol . ' ' . $orderDirn));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Factory class * * @package  Joomla.Platform * @since    11.1 */abstract class JFactory{	/**	 * @var    JApplication	 * @since  11.1	 */	public static $application = null;	/**	 * @var    JCache	 * @since  11.1	 */	public static $cache = null;	/**	 * @var    JConfig	 * @since  11.1	 */	public static $config = null;	/**	 * @var    array	 * @since  11.3	 */	public static $dates = array();	/**	 * @var    JSession	 * @since  11.1	 */	public static $session = null;	/**	 * @var    JLanguage	 * @since  11.1	 */	public static $language = null;	/**	 * @var    JDocument	 * @since  11.1	 */	public static $document = null;	/**	 * @var    JAccess	 * @since  11.1	 * @deprecated  13.3	 */	public static $acl = null;	/**	 * @var    JDatabaseDriver	 * @since  11.1	 */	public static $database = null;	/**	 * @var    JMail	 * @since  11.1	 */	public static $mailer = null;	/**	 * Get a application object.	 *	 * Returns the global {@link JApplication} object, only creating it if it doesn't already exist.	 *	 * @param   mixed   $id      A client identifier or name.	 * @param   array   $config  An optional associative array of configuration settings.	 * @param   string  $prefix  Application prefix	 *	 * @return  JApplication object	 *	 * @see     JApplication	 * @since   11.1	 * @throws  Exception	 */	public static function getApplication($id = null, array $config = array(), $prefix = 'J')	{		if (!self::$application)		{			if (!$id)			{				throw new Exception('Application Instantiation Error', 500);			}			self::$application = JApplication::getInstance($id, $config, $prefix);		}		return self::$application;	}	/**	 * Get a configuration object	 *	 * Returns the global {@link JRegistry} object, only creating it if it doesn't already exist.	 *	 * @param   string  $file       The path to the configuration file	 * @param   string  $type       The type of the configuration file	 * @param   string  $namespace  The namespace of the configuration file	 *	 * @return  JRegistry	 *	 * @see     JRegistry	 * @since   11.1	 */	public static function getConfig($file = null, $type = 'PHP', $namespace = '')	{		if (!self::$config)		{			if ($file === null)			{				$file = JPATH_PLATFORM . '/config.php';			}			self::$config = self::createConfig($file, $type, $namespace);		}		return self::$config;	}	/**	 * Get a session object.	 *	 * Returns the global {@link JSession} object, only creating it if it doesn't already exist.	 *	 * @param   array  $options  An array containing session options	 *	 * @return  JSession object	 *	 * @see     JSession	 * @since   11.1	 */	public static function getSession(array $options = array())	{		if (!self::$session)		{			self::$session = self::createSession($options);		}		return self::$session;	}	/**	 * Get a language object.	 *	 * Returns the global {@link JLanguage} object, only creating it if it doesn't already exist.	 *	 * @return  JLanguage object	 *	 * @see     JLanguage	 * @since   11.1	 */	public static function getLanguage()	{		if (!self::$language)		{			self::$language = self::createLanguage();		}		return self::$language;	}	/**	 * Get a document object.	 *	 * Returns the global {@link JDocument} object, only creating it if it doesn't already exist.	 *	 * @return  JDocument object	 *	 * @see     JDocument	 * @since   11.1	 */	public static function getDocument()	{		if (!self::$document)		{			self::$document = self::createDocument();		}		return self::$document;	}	/**	 * Get an user object.	 *	 * Returns the global {@link JUser} object, only creating it if it doesn't already exist.	 *	 * @param   integer  $id  The user to load - Can be an integer or string - If string, it is converted to ID automatically.	 *	 * @return  JUser object	 *	 * @see     JUser	 * @since   11.1	 */	public static function getUser($id = null)	{		$instance = self::getSession()->get('user');		if (is_null($id))		{			if (!($instance instanceof JUser))			{				$instance = JUser::getInstance();			}		}		elseif ($instance->id != $id)		{			$instance = JUser::getInstance($id);		}		return $instance;	}	/**	 * Get a cache object	 *	 * Returns the global {@link JCache} object	 *	 * @param   string  $group    The cache group name	 * @param   string  $handler  The handler to use	 * @param   string  $storage  The storage method	 *	 * @return  JCacheController object	 *	 * @see     JCache	 */	public static function getCache($group = '', $handler = 'callback', $storage = null)	{		$hash = md5($group . $handler . $storage);		if (isset(self::$cache[$hash]))		{			return self::$cache[$hash];		}		$handler = ($handler == 'function') ? 'callback' : $handler;		$options = array('defaultgroup' => $group);		if (isset($storage))		{			$options['storage'] = $storage;		}		$cache = JCache::getInstance($handler, $options);		self::$cache[$hash] = $cache;		return self::$cache[$hash];	}	/**	 * Get an authorization object	 *	 * Returns the global {@link JAccess} object, only creating it	 * if it doesn't already exist.	 *	 * @return  JAccess object	 *	 * @deprecated  13.3  Use JAccess directly.	 */	public static function getACL()	{		JLog::add(__METHOD__ . ' is deprecated. Use JAccess directly.', JLog::WARNING, 'deprecated');		if (!self::$acl)		{			self::$acl = new JAccess;		}		return self::$acl;	}	/**	 * Get a database object.	 *	 * Returns the global {@link JDatabaseDriver} object, only creating it if it doesn't already exist.	 *	 * @return  JDatabaseDriver	 *	 * @see     JDatabaseDriver	 * @since   11.1	 */	public static function getDbo()	{		if (!self::$database)		{			// Get the debug configuration setting			$conf = self::getConfig();			$debug = $conf->get('debug');			self::$database = self::createDbo();			self::$database->setDebug($debug);		}		return self::$database;	}	/**	 * Get a mailer object.	 *	 * Returns the global {@link JMail} object, only creating it if it doesn't already exist.	 *	 * @return  JMail object	 *	 * @see     JMail	 * @since   11.1	 */	public static function getMailer()	{		if (!self::$mailer)		{			self::$mailer = self::createMailer();		}		$copy = clone self::$mailer;		return $copy;	}	/**	 * Get a parsed XML Feed Source	 *	 * @param   string   $url         Url for feed source.	 * @param   integer  $cache_time  Time to cache feed for (using internal cache mechanism).	 *	 * @return  mixed  SimplePie parsed object on success, false on failure.	 *	 * @since   11.1	 * @deprecated  4.0  Use directly JFeedFactory or supply SimplePie instead. Mehod will be proxied to JFeedFactory beginning in 3.2	 */	public static function getFeedParser($url, $cache_time = 0)	{		if (!class_exists('JSimplepieFactory'))		{			throw new BadMethodCallException('JSimplepieFactory not found');		}		JLog::add(__METHOD__ . ' is deprecated.   Use JFeedFactory() or supply SimplePie instead.', JLog::WARNING, 'deprecated');		return JSimplepieFactory::getFeedParser($url, $cache_time);	}	/**	 * Reads a XML file.	 *	 * @param   string   $data    Full path and file name.	 * @param   boolean  $isFile  true to load a file or false to load a string.	 *	 * @return  mixed    JXMLElement or SimpleXMLElement on success or false on error.	 *	 * @see     JXMLElement	 * @since   11.1	 * @note    When JXMLElement is not present a SimpleXMLElement will be returned.	 * @deprecated  13.3 Use SimpleXML directly.	 */	public static function getXML($data, $isFile = true)	{		JLog::add(__METHOD__ . ' is deprecated. Use SimpleXML directly.', JLog::WARNING, 'deprecated');		$class = 'SimpleXMLElement';		if (class_exists('JXMLElement'))		{			$class = 'JXMLElement';		}		// Disable libxml errors and allow to fetch error information as needed		libxml_use_internal_errors(true);		if ($isFile)		{			// Try to load the XML file			$xml = simplexml_load_file($data, $class);		}		else		{			// Try to load the XML string			$xml = simplexml_load_string($data, $class);		}		if ($xml === false)		{			JLog::add(JText::_('JLIB_UTIL_ERROR_XML_LOAD'), JLog::WARNING, 'jerror');			if ($isFile)			{				JLog::add($data, JLog::WARNING, 'jerror');			}			foreach (libxml_get_errors() as $error)			{				JLog::add($error->message, JLog::WARNING, 'jerror');			}		}		return $xml;	}	/**	 * Get an editor object.	 *	 * @param   string  $editor  The editor to load, depends on the editor plugins that are installed	 *	 * @return  JEditor instance of JEditor	 *	 * @since   11.1	 * @deprecated 12.3 Use JEditor directly	 */	public static function getEditor($editor = null)	{		JLog::add(__METHOD__ . ' is deprecated. Use JEditor directly.', JLog::WARNING, 'deprecated');		if (!class_exists('JEditor'))		{			throw new BadMethodCallException('JEditor not found');		}		JLog::add(__METHOD__ . ' is deprecated. Use JEditor directly.', JLog::WARNING, 'deprecated');		// Get the editor configuration setting		if (is_null($editor))		{			$conf = self::getConfig();			$editor = $conf->get('editor');		}		return JEditor::getInstance($editor);	}	/**	 * Return a reference to the {@link JURI} object	 *	 * @param   string  $uri  Uri name.	 *	 * @return  JURI object	 *	 * @see     JURI	 * @since   11.1	 * @deprecated  13.3 Use JURI directly.	 */	public static function getURI($uri = 'SERVER')	{		JLog::add(__METHOD__ . ' is deprecated. Use JURI directly.', JLog::WARNING, 'deprecated');		return JURI::getInstance($uri);	}	/**	 * Return the {@link JDate} object	 *	 * @param   mixed  $time      The initial time for the JDate object	 * @param   mixed  $tzOffset  The timezone offset.	 *	 * @return  JDate object	 *	 * @see     JDate	 * @since   11.1	 */	public static function getDate($time = 'now', $tzOffset = null)	{		static $classname;		static $mainLocale;		$language = self::getLanguage();		$locale = $language->getTag();		if (!isset($classname) || $locale != $mainLocale)		{			// Store the locale for future reference			$mainLocale = $locale;			if ($mainLocale !== false)			{				$classname = str_replace('-', '_', $mainLocale) . 'Date';				if (!class_exists($classname))				{					// The class does not exist, default to JDate					$classname = 'JDate';				}			}			else			{				// No tag, so default to JDate				$classname = 'JDate';			}		}		$key = $time . '-' . ($tzOffset instanceof DateTimeZone ? $tzOffset->getName() : (string) $tzOffset);		if (!isset(self::$dates[$classname][$key]))		{			self::$dates[$classname][$key] = new $classname($time, $tzOffset);		}		$date = clone self::$dates[$classname][$key];		return $date;	}	/**	 * Create a configuration object	 *	 * @param   string  $file       The path to the configuration file.	 * @param   string  $type       The type of the configuration file.	 * @param   string  $namespace  The namespace of the configuration file.	 *	 * @return  JRegistry	 *	 * @see     JRegistry	 * @since   11.1	 */	protected static function createConfig($file, $type = 'PHP', $namespace = '')	{		if (is_file($file))		{			include_once $file;		}		// Create the registry with a default namespace of config		$registry = new JRegistry;		// Sanitize the namespace.		$namespace = ucfirst((string) preg_replace('/[^A-Z_]/i', '', $namespace));		// Build the config name.		$name = 'JConfig' . $namespace;		// Handle the PHP configuration type.		if ($type == 'PHP' && class_exists($name))		{			// Create the JConfig object			$config = new $name;			// Load the configuration values into the registry			$registry->loadObject($config);		}		return $registry;	}	/**	 * Create a session object	 *	 * @param   array  $options  An array containing session options	 *	 * @return  JSession object	 *	 * @since   11.1	 */	protected static function createSession(array $options = array())	{		// Get the editor configuration setting		$conf = self::getConfig();		$handler = $conf->get('session_handler', 'none');		// Config time is in minutes		$options['expire'] = ($conf->get('lifetime')) ? $conf->get('lifetime') * 60 : 900;		$session = JSession::getInstance($handler, $options);		if ($session->getState() == 'expired')		{			$session->restart();		}		return $session;	}	/**	 * Create an database object	 *	 * @return  JDatabaseDriver	 *	 * @see     JDatabaseDriver	 * @since   11.1	 */	protected static function createDbo()	{		$conf = self::getConfig();		$host = $conf->get('host');		$user = $conf->get('user');		$password = $conf->get('password');		$database = $conf->get('db');		$prefix = $conf->get('dbprefix');		$driver = $conf->get('dbtype');		$debug = $conf->get('debug');		$options = array('driver' => $driver, 'host' => $host, 'user' => $user, 'password' => $password, 'database' => $database, 'prefix' => $prefix);		try		{			$db = JDatabaseDriver::getInstance($options);		}		catch (RuntimeException $e)		{			if (!headers_sent())			{				header('HTTP/1.1 500 Internal Server Error');			}			jexit('Database Error: ' . $e->getMessage());		}		$db->setDebug($debug);		return $db;	}	/**	 * Create a mailer object	 *	 * @return  JMail object	 *	 * @see     JMail	 * @since   11.1	 */	protected static function createMailer()	{		$conf = self::getConfig();		$smtpauth = ($conf->get('smtpauth') == 0) ? null : 1;		$smtpuser = $conf->get('smtpuser');		$smtppass = $conf->get('smtppass');		$smtphost = $conf->get('smtphost');		$smtpsecure = $conf->get('smtpsecure');		$smtpport = $conf->get('smtpport');		$mailfrom = $conf->get('mailfrom');		$fromname = $conf->get('fromname');		$mailer = $conf->get('mailer');		// Create a JMail object		$mail = JMail::getInstance();		// Set default sender without Reply-to		$mail->SetFrom(JMailHelper::cleanLine($mailfrom), JMailHelper::cleanLine($fromname), 0);		// Default mailer is to use PHP's mail function		switch ($mailer)		{			case 'smtp':				$mail->useSMTP($smtpauth, $smtphost, $smtpuser, $smtppass, $smtpsecure, $smtpport);				break;			case 'sendmail':				$mail->IsSendmail();				break;			default:				$mail->IsMail();				break;		}		return $mail;	}	/**	 * Create a language object	 *	 * @return  JLanguage object	 *	 * @see     JLanguage	 * @since   11.1	 */	protected static function createLanguage()	{		$conf = self::getConfig();		$locale = $conf->get('language');		$debug = $conf->get('debug_lang');		$lang = JLanguage::getInstance($locale, $debug);		return $lang;	}	/**	 * Create a document object	 *	 * @return  JDocument object	 *	 * @see     JDocument	 * @since   11.1	 */	protected static function createDocument()	{		$lang = self::getLanguage();		$input = self::getApplication()->input;		$type = $input->get('format', 'html', 'word');		$attributes = array('charset' => 'utf-8', 'lineend' => 'unix', 'tab' => '  ', 'language' => $lang->getTag(),			'direction' => $lang->isRTL() ? 'rtl' : 'ltr');		return JDocument::getInstance($type, $attributes);	}	/**	 * Creates a new stream object with appropriate prefix	 *	 * @param   boolean  $use_prefix   Prefix the connections for writing	 * @param   boolean  $use_network  Use network if available for writing; use false to disable (e.g. FTP, SCP)	 * @param   string   $ua           UA User agent to use	 * @param   boolean  $uamask       User agent masking (prefix Mozilla)	 *	 * @return  JStream	 *	 * @see JStream	 * @since   11.1	 */	public static function getStream($use_prefix = true, $use_network = true, $ua = null, $uamask = false)	{		jimport('joomla.filesystem.stream');		// Setup the context; Joomla! UA and overwrite		$context = array();		$version = new JVersion;		// Set the UA for HTTP and overwrite for FTP		$context['http']['user_agent'] = $version->getUserAgent($ua, $uamask);		$context['ftp']['overwrite'] = true;		if ($use_prefix)		{			$FTPOptions = JClientHelper::getCredentials('ftp');			$SCPOptions = JClientHelper::getCredentials('scp');			if ($FTPOptions['enabled'] == 1 && $use_network)			{				$prefix = 'ftp://' . $FTPOptions['user'] . ':' . $FTPOptions['pass'] . '@' . $FTPOptions['host'];				$prefix .= $FTPOptions['port'] ? ':' . $FTPOptions['port'] : '';				$prefix .= $FTPOptions['root'];			}			elseif ($SCPOptions['enabled'] == 1 && $use_network)			{				$prefix = 'ssh2.sftp://' . $SCPOptions['user'] . ':' . $SCPOptions['pass'] . '@' . $SCPOptions['host'];				$prefix .= $SCPOptions['port'] ? ':' . $SCPOptions['port'] : '';				$prefix .= $SCPOptions['root'];			}			else			{				$prefix = JPATH_ROOT . '/';			}			$retval = new JStream($prefix, JPATH_ROOT, $context);		}		else		{			$retval = new JStream('', '', $context);		}		return $retval;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsViewTag extends JViewLegacy{	public function display($tpl = null)	{		$app      = JFactory::getApplication();		$document = JFactory::getDocument();		$document->link = JRoute::_(TagsHelperRoute::getTagRoute($app->input->getInt('id')));		$app->input->set('limit', $app->getCfg('feed_limit'));		$params = $app->getParams();		$siteEmail = $app->getCfg('mailfrom');		$fromName  = $app->getCfg('fromname');		$feedEmail = $app->getCfg('feed_email', 'author');		$document->editor = $fromName;		if ($feedEmail != "none")		{			$document->editorEmail = $siteEmail;		}		// Get some data from the model		$items    = $this->get('Items');		$tag = $this->get('Item');		foreach ($items as $item)		{			// Strip HTML from feed item title			$title = $this->escape($item->core_title);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// URL link to tagged item			// Change to new routing once it is merged			$link = JRoute::_($item->link);			// Strip HTML from feed item description text			$description = $item->core_body;			$author			= $item->core_created_by_alias ? $item->core_created_by_alias : $item->author;			$date = ($item->displayDate ? date('r', strtotime($item->displayDate)) : '');			// Load individual item creator class			$feeditem = new JFeedItem;			$feeditem->title       = $title;			$feeditem->link        = $link;			$feeditem->description = $description;			$feeditem->date        = $date;			$feeditem->category    = $item->title;			$feeditem->author      = $author;			if ($feedEmail == 'site')			{				$item->authorEmail = $siteEmail;			}			elseif ($feedEmail === 'author')			{				$item->authorEmail = $row->author_email;			}			// Loads item info into RSS array			$document->addItem($feeditem);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit an article. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentViewArticle extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		if ($this->getLayout() == 'pagebreak')		{			// TODO: This is really dogy - should change this one day.			$eName    = JRequest::getVar('e_name');			$eName    = preg_replace('#[^A-Z0-9\-\_\[\]]#i', '', $eName);			$document = JFactory::getDocument();			$document->setTitle(JText::_('COM_CONTENT_PAGEBREAK_DOC_TITLE'));			$this->eName = &$eName;			parent::display($tpl);			return;		}		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		$this->canDo	= ContentHelper::getActions($this->state->get('filter.category_id'));		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		$canDo		= ContentHelper::getActions($this->state->get('filter.category_id'), $this->item->id);		JToolbarHelper::title(JText::_('COM_CONTENT_PAGE_'.($checkedOut ? 'VIEW_ARTICLE' : ($isNew ? 'ADD_ARTICLE' : 'EDIT_ARTICLE'))), 'article-add.png');		// Built the actions for new and existing records.		// For new records, check the create permission.		if ($isNew && (count($user->getAuthorisedCategories('com_content', 'core.create')) > 0))		{			JToolbarHelper::apply('article.apply');			JToolbarHelper::save('article.save');			JToolbarHelper::save2new('article.save2new');			JToolbarHelper::cancel('article.cancel');		}		else		{			// Can't save the record if it's checked out.			if (!$checkedOut)			{				// Since it's an existing record, check the edit permission, or fall back to edit own if the owner.				if ($canDo->get('core.edit') || ($canDo->get('core.edit.own') && $this->item->created_by == $userId))				{					JToolbarHelper::apply('article.apply');					JToolbarHelper::save('article.save');					// We can save this record, but check the create permission to see if we can return to make a new one.					if ($canDo->get('core.create'))					{						JToolbarHelper::save2new('article.save2new');					}				}			}			// If checked out, we can still save			if ($canDo->get('core.create'))			{				JToolbarHelper::save2copy('article.save2copy');			}			JToolbarHelper::cancel('article.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_CONTENT_ARTICLE_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract Form Field class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */abstract class JFormField{	/**	 * The description text for the form field.  Usually used in tooltips.	 *	 * @var    string	 * @since  11.1	 */	protected $description;	/**	 * The SimpleXMLElement object of the <field /> XML element that describes the form field.	 *	 * @var    SimpleXMLElement	 * @since  11.1	 */	protected $element;	/**	 * The JForm object of the form attached to the form field.	 *	 * @var    JForm	 * @since  11.1	 */	protected $form;	/**	 * The form control prefix for field names from the JForm object attached to the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $formControl;	/**	 * The hidden state for the form field.	 *	 * @var    boolean	 * @since  11.1	 */	protected $hidden = false;	/**	 * True to translate the field label string.	 *	 * @var    boolean	 * @since  11.1	 */	protected $translateLabel = true;	/**	 * True to translate the field description string.	 *	 * @var    boolean	 * @since  11.1	 */	protected $translateDescription = true;	/**	 * The document id for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $id;	/**	 * The input for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $input;	/**	 * The label for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $label;	/**	 * The multiple state for the form field.  If true then multiple values are allowed for the	 * field.  Most often used for list field types.	 *	 * @var    boolean	 * @since  11.1	 */	protected $multiple = false;	/**	 * The name of the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $name;	/**	 * The name of the field.	 *	 * @var    string	 * @since  11.1	 */	protected $fieldname;	/**	 * The group of the field.	 *	 * @var    string	 * @since  11.1	 */	protected $group;	/**	 * The required state for the form field.  If true then there must be a value for the field to	 * be considered valid.	 *	 * @var    boolean	 * @since  11.1	 */	protected $required = false;	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type;	/**	 * The validation method for the form field.  This value will determine which method is used	 * to validate the value for a field.	 *	 * @var    string	 * @since  11.1	 */	protected $validate;	/**	 * The value of the form field.	 *	 * @var    mixed	 * @since  11.1	 */	protected $value;	/**	 * The label's CSS class of the form field	 *	 * @var    mixed	 * @since  11.1	 */	protected $labelClass;	/**	 * The count value for generated name field	 *	 * @var    integer	 * @since  11.1	 */	protected static $count = 0;	/**	 * The string used for generated fields names	 *	 * @var    integer	 * @since  11.1	 */	protected static $generated_fieldname = '__field';	/**	 * Method to instantiate the form field object.	 *	 * @param   JForm  $form  The form to attach to the form field object.	 *	 * @since   11.1	 */	public function __construct($form = null)	{		// If there is a form passed into the constructor set the form and form control properties.		if ($form instanceof JForm)		{			$this->form = $form;			$this->formControl = $form->getFormControl();		}		// Detect the field type if not set		if (!isset($this->type))		{			$parts = JStringNormalise::fromCamelCase(get_called_class(), true);			if ($parts[0] == 'J')			{				$this->type = JString::ucfirst($parts[count($parts) - 1], '_');			}			else			{				$this->type = JString::ucfirst($parts[0], '_') . JString::ucfirst($parts[count($parts) - 1], '_');			}		}	}	/**	 * Method to get certain otherwise inaccessible properties from the form field object.	 *	 * @param   string  $name  The property name for which to the the value.	 *	 * @return  mixed  The property value or null.	 *	 * @since   11.1	 */	public function __get($name)	{		switch ($name)		{			case 'description':			case 'formControl':			case 'hidden':			case 'id':			case 'multiple':			case 'name':			case 'required':			case 'type':			case 'validate':			case 'value':			case 'labelClass':			case 'fieldname':			case 'group':				return $this->$name;			case 'input':				// If the input hasn't yet been generated, generate it.				if (empty($this->input))				{					$this->input = $this->getInput();				}				return $this->input;			case 'label':				// If the label hasn't yet been generated, generate it.				if (empty($this->label))				{					$this->label = $this->getLabel();				}				return $this->label;			case 'title':				return $this->getTitle();		}		return null;	}	/**	 * Method to attach a JForm object to the field.	 *	 * @param   JForm  $form  The JForm object to attach to the form field.	 *	 * @return  JFormField  The form field object so that the method can be used in a chain.	 *	 * @since   11.1	 */	public function setForm(JForm $form)	{		$this->form = $form;		$this->formControl = $form->getFormControl();		return $this;	}	/**	 * Method to attach a JForm object to the field.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function setup(SimpleXMLElement $element, $value, $group = null)	{		// Make sure there is a valid JFormField XML element.		if ((string) $element->getName() != 'field')		{			return false;		}		// Reset the input and label values.		$this->input = null;		$this->label = null;		// Set the XML element object.		$this->element = $element;		// Get some important attributes from the form field element.		$class = (string) $element['class'];		$id = (string) $element['id'];		$multiple = (string) $element['multiple'];		$name = (string) $element['name'];		$required = (string) $element['required'];		// Set the required and validation options.		$this->required = ($required == 'true' || $required == 'required' || $required == '1');		$this->validate = (string) $element['validate'];		// Add the required class if the field is required.		if ($this->required)		{			if ($class)			{				if (strpos($class, 'required') === false)				{					$this->element['class'] = $class . ' required';				}			}			else			{				$this->element['class'] = 'required';			}		}		// Set the multiple values option.		$this->multiple = ($multiple == 'true' || $multiple == 'multiple');		// Allow for field classes to force the multiple values option.		if (isset($this->forceMultiple))		{			$this->multiple = (bool) $this->forceMultiple;		}		// Set the field description text.		$this->description = (string) $element['description'];		// Set the visibility.		$this->hidden = ((string) $element['type'] == 'hidden' || (string) $element['hidden'] == 'true');		// Determine whether to translate the field label and/or description.		$this->translateLabel = !((string) $this->element['translate_label'] == 'false' || (string) $this->element['translate_label'] == '0');		$this->translateDescription = !((string) $this->element['translate_description'] == 'false'			|| (string) $this->element['translate_description'] == '0');		// Set the group of the field.		$this->group = $group;		// Set the field name and id.		$this->fieldname = $this->getFieldName($name);		$this->name = $this->getName($this->fieldname);		$this->id = $this->getId($id, $this->fieldname);		// Set the field default value.		$this->value = $value;		// Set the CSS class of field label		$this->labelClass = (string) $element['labelclass'];		return true;	}	/**	 * Method to get the id used for the field input tag.	 *	 * @param   string  $fieldId    The field element id.	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The id to be used for the field input tag.	 *	 * @since   11.1	 */	protected function getId($fieldId, $fieldName)	{		$id = '';		// If there is a form control set for the attached form add it first.		if ($this->formControl)		{			$id .= $this->formControl;		}		// If the field is in a group add the group control to the field id.		if ($this->group)		{			// If we already have an id segment add the group control as another level.			if ($id)			{				$id .= '_' . str_replace('.', '_', $this->group);			}			else			{				$id .= str_replace('.', '_', $this->group);			}		}		// If we already have an id segment add the field id/name as another level.		if ($id)		{			$id .= '_' . ($fieldId ? $fieldId : $fieldName);		}		else		{			$id .= ($fieldId ? $fieldId : $fieldName);		}		// Clean up any invalid characters.		$id = preg_replace('#\W#', '_', $id);		return $id;	}	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	abstract protected function getInput();	/**	 * Method to get the field title.	 *	 * @return  string  The field title.	 *	 * @since   11.1	 */	protected function getTitle()	{		$title = '';		if ($this->hidden)		{			return $title;		}		// Get the label text from the XML element, defaulting to the element name.		$title = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$title = $this->translateLabel ? JText::_($title) : $title;		return $title;	}	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   11.1	 */	protected function getLabel()	{		$label = '';		if ($this->hidden)		{			return $label;		}		// Get the label text from the XML element, defaulting to the element name.		$text = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$text = $this->translateLabel ? JText::_($text) : $text;		// Build the class for the label.		$class = !empty($this->description) ? 'hasTip' : '';		$class = $this->required == true ? $class . ' required' : $class;		$class = !empty($this->labelClass) ? $class . ' ' . $this->labelClass : $class;		// Add the opening label tag and main attributes attributes.		$label .= '<label id="' . $this->id . '-lbl" for="' . $this->id . '" class="' . $class . '"';		// If a description is specified, use it to build a tooltip.		if (!empty($this->description))		{			$label .= ' title="'				. htmlspecialchars(				trim($text, ':') . '::' . ($this->translateDescription ? JText::_($this->description) : $this->description),				ENT_COMPAT, 'UTF-8'			) . '"';		}		// Add the label text and closing tag.		if ($this->required)		{			$label .= '>' . $text . '<span class="star">&#160;*</span></label>';		}		else		{			$label .= '>' . $text . '</label>';		}		return $label;	}	/**	 * Method to get the name used for the field input tag.	 *	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The name to be used for the field input tag.	 *	 * @since   11.1	 */	protected function getName($fieldName)	{		$name = '';		// If there is a form control set for the attached form add it first.		if ($this->formControl)		{			$name .= $this->formControl;		}		// If the field is in a group add the group control to the field name.		if ($this->group)		{			// If we already have a name segment add the group control as another level.			$groups = explode('.', $this->group);			if ($name)			{				foreach ($groups as $group)				{					$name .= '[' . $group . ']';				}			}			else			{				$name .= array_shift($groups);				foreach ($groups as $group)				{					$name .= '[' . $group . ']';				}			}		}		// If we already have a name segment add the field name as another level.		if ($name)		{			$name .= '[' . $fieldName . ']';		}		else		{			$name .= $fieldName;		}		// If the field should support multiple values add the final array segment.		if ($this->multiple)		{			switch (strtolower((string) $this->element['type']))			{				case 'text':				case 'textarea':				case 'email':				case 'password':				case 'radio':				case 'calendar':				case 'editor':				case 'hidden':					break;				default:					$name .= '[]';			}		}		return $name;	}	/**	 * Method to get the field name used.	 *	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The field name	 *	 * @since   11.1	 */	protected function getFieldName($fieldName)	{		if ($fieldName)		{			return $fieldName;		}		else		{			self::$count = self::$count + 1;			return self::$generated_fieldname . self::$count;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');$app = JFactory::getApplication();$input = $app->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'category.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_categories&extension=' . $input->getCmd('extension', 'com_content') . '&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<div class="row-fluid">	<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_CATEGORIES_FIELDSET_DETAILS', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('title'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('title'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('alias'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('description'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('description'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('extension'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('extension'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_CATEGORIES_FIELDSET_PUBLISHING', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('id'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('hits'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('hits'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('created_user_id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('created_user_id'); ?>						</div>					</div>					<?php if (intval($this->item->created_time)) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('created_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('created_time'); ?>							</div>						</div>					<?php endif; ?>					<?php if ($this->item->modified_user_id) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_user_id'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_user_id'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_time'); ?>							</div>						</div>					<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'options', JText::_('CATEGORIES_FIELDSET_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('options'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('metadata'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo $this->loadTemplate('extrafields'); ?>				<?php if ($this->assoc) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>						<fieldset>							<?php echo $this->loadTemplate('associations'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>				<?php if ($this->canDo->get('core.admin')) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'rules', JText::_('COM_CATEGORIES_FIELDSET_RULES', true)); ?>						<fieldset>							<?php echo $this->form->getInput('rules'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->		<div class="span2">			<h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('title'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('parent_id'); ?>					<div class="controls">						<?php echo $this->form->getInput('parent_id'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('published'); ?>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('access'); ?>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('language'); ?>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<?php foreach ($this->form->getFieldset('jmetadata') as $field) : ?>						<?php if ($field->name == 'jform[metadata][tags][]') :?>						<div class="control-group">							<div class="control-label"><?php echo $field->label; ?></div>							<div class="controls"><?php echo $field->input; ?></div>						</div>						<?php endif; ?>					<?php endforeach; ?>				</div>			</fieldset>		</div>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Users table * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableUser extends JTable{	/**	 * Associative array of group ids => group ids for the user	 *	 * @var    array	 * @since  11.1	 */	public $groups;	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since  11.1	 */	public function __construct($db)	{		parent::__construct('#__users', 'id', $db);		// Initialise.		$this->id = 0;		$this->sendEmail = 0;	}	/**	 * Method to load a user, user groups, and any other necessary data	 * from the database so that it can be bound to the user object.	 *	 * @param   integer  $userId  An optional user id.	 * @param   boolean  $reset   False if row not found or on error	 *                           (internal error state set in that case).	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function load($userId = null, $reset = true)	{		// Get the id to load.		if ($userId !== null)		{			$this->id = $userId;		}		else		{			$userId = $this->id;		}		// Check for a valid id to load.		if ($userId === null)		{			return false;		}		// Reset the table.		$this->reset();		// Load the user data.		$query = $this->_db->getQuery(true)			->select('*')			->from($this->_db->quoteName('#__users'))			->where($this->_db->quoteName('id') . ' = ' . (int) $userId);		$this->_db->setQuery($query);		$data = (array) $this->_db->loadAssoc();		if (!count($data))		{			return false;		}		// Bind the data to the table.		$return = $this->bind($data);		if ($return !== false)		{			// Load the user groups.			$query->clear()				->select($this->_db->quoteName('g.id'))				->select($this->_db->quoteName('g.title'))				->from($this->_db->quoteName('#__usergroups') . ' AS g')				->join('INNER', $this->_db->quoteName('#__user_usergroup_map') . ' AS m ON m.group_id = g.id')				->where($this->_db->quoteName('m.user_id') . ' = ' . (int) $userId);			$this->_db->setQuery($query);			// Add the groups to the user data.			$this->groups = $this->_db->loadAssocList('id', 'id');		}		return $return;	}	/**	 * Method to bind the user, user groups, and any other necessary data.	 *	 * @param   array  $array   The data to bind.	 * @param   mixed  $ignore  An array or space separated list of fields to ignore.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		if (array_key_exists('params', $array) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		// Attempt to bind the data.		$return = parent::bind($array, $ignore);		// Load the real group data based on the bound ids.		if ($return && !empty($this->groups))		{			// Set the group ids.			JArrayHelper::toInteger($this->groups);			// Get the titles for the user groups.			$query = $this->_db->getQuery(true)				->select($this->_db->quoteName('id'))				->select($this->_db->quoteName('title'))				->from($this->_db->quoteName('#__usergroups'))				->where($this->_db->quoteName('id') . ' = ' . implode(' OR ' . $this->_db->quoteName('id') . ' = ', $this->groups));			$this->_db->setQuery($query);			// Set the titles for the user groups.			$this->groups = $this->_db->loadAssocList('id', 'id');		}		return $return;	}	/**	 * Validation and filtering	 *	 * @return  boolean  True if satisfactory	 *	 * @since   11.1	 */	public function check()	{		// Set user id to null istead of 0, if needed		if ($this->id === 0)		{			$this->id = null;		}		// Validate user information		if (trim($this->name) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_PLEASE_ENTER_YOUR_NAME'));			return false;		}		if (trim($this->username) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_PLEASE_ENTER_A_USER_NAME'));			return false;		}		if (preg_match("#[<>\"'%;()&]#i", $this->username) || strlen(utf8_decode($this->username)) < 2)		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_VALID_AZ09', 2));			return false;		}		if ((trim($this->email) == "") || !JMailHelper::isEmailAddress($this->email))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_VALID_MAIL'));			return false;		}		// Set the registration timestamp		if (empty($this->registerDate) || $this->registerDate == $this->_db->getNullDate())		{			$this->registerDate = JFactory::getDate()->toSql();		}		// Set the lastvisitDate timestamp		if (empty($this->lastvisitDate))		{			$this->lastvisitDate = $this->_db->getNullDate();		}		// Check for existing username		$query = $this->_db->getQuery(true)			->select($this->_db->quoteName('id'))			->from($this->_db->quoteName('#__users'))			->where($this->_db->quoteName('username') . ' = ' . $this->_db->quote($this->username))			->where($this->_db->quoteName('id') . ' != ' . (int) $this->id);		$this->_db->setQuery($query);		$xid = (int) $this->_db->loadResult();		if ($xid && $xid != (int) $this->id)		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_USERNAME_INUSE'));			return false;		}		// Check for existing email		$query->clear()			->select($this->_db->quoteName('id'))			->from($this->_db->quoteName('#__users'))			->where($this->_db->quoteName('email') . ' = ' . $this->_db->quote($this->email))			->where($this->_db->quoteName('id') . ' != ' . (int) $this->id);		$this->_db->setQuery($query);		$xid = (int) $this->_db->loadResult();		if ($xid && $xid != (int) $this->id)		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_EMAIL_INUSE'));			return false;		}		// Check for root_user != username		$config = JFactory::getConfig();		$rootUser = $config->get('root_user');		if (!is_numeric($rootUser))		{			$query->clear()				->select($this->_db->quoteName('id'))				->from($this->_db->quoteName('#__users'))				->where($this->_db->quoteName('username') . ' = ' . $this->_db->quote($rootUser));			$this->_db->setQuery($query);			$xid = (int) $this->_db->loadResult();			if ($rootUser == $this->username && (!$xid || $xid && $xid != (int) $this->id)				|| $xid && $xid == (int) $this->id && $rootUser != $this->username)			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_USERNAME_CANNOT_CHANGE'));				return false;			}		}		return true;	}	/**	 * Method to store a row in the database from the JTable instance properties.	 * If a primary key value is set the row with that primary key value will be	 * updated with the instance property values.  If no primary key value is set	 * a new row will be inserted into the database with the properties from the	 * JTable instance.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/store	 * @since   11.1	 */	public function store($updateNulls = false)	{		// Get the table key and key value.		$k = $this->_tbl_key;		$key = $this->$k;		// TODO: This is a dumb way to handle the groups.		// Store groups locally so as to not update directly.		$groups = $this->groups;		unset($this->groups);		// Insert or update the object based on presence of a key value.		if ($key)		{			// Already have a table key, update the row.			$this->_db->updateObject($this->_tbl, $this, $this->_tbl_key, $updateNulls);		}		else		{			// Don't have a table key, insert the row.			$this->_db->insertObject($this->_tbl, $this, $this->_tbl_key);		}		// Reset groups to the local object.		$this->groups = $groups;		unset($groups);		// Store the group data if the user data was saved.		if (is_array($this->groups) && count($this->groups))		{			// Delete the old user group maps.			$query = $this->_db->getQuery(true)				->delete($this->_db->quoteName('#__user_usergroup_map'))				->where($this->_db->quoteName('user_id') . ' = ' . (int) $this->id);			$this->_db->setQuery($query);			$this->_db->execute();			// Set the new user group maps.			$query->clear()				->insert($this->_db->quoteName('#__user_usergroup_map'))				->columns(array($this->_db->quoteName('user_id'), $this->_db->quoteName('group_id')));			// Have to break this up into individual queries for cross-database support.			foreach ($this->groups as $group)			{				$query->clear('values')					->values($this->id . ', ' . $group);				$this->_db->setQuery($query);				$this->_db->execute();			}		}		return true;	}	/**	 * Method to delete a user, user groups, and any other necessary data from the database.	 *	 * @param   integer  $userId  An optional user id.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function delete($userId = null)	{		// Set the primary key to delete.		$k = $this->_tbl_key;		if ($userId)		{			$this->$k = (int) $userId;		}		// Delete the user.		$query = $this->_db->getQuery(true)			->delete($this->_db->quoteName($this->_tbl))			->where($this->_db->quoteName($this->_tbl_key) . ' = ' . (int) $this->$k);		$this->_db->setQuery($query);		$this->_db->execute();		// Delete the user group maps.		$query->clear()			->delete($this->_db->quoteName('#__user_usergroup_map'))			->where($this->_db->quoteName('user_id') . ' = ' . (int) $this->$k);		$this->_db->setQuery($query);		$this->_db->execute();		/*		 * Clean Up Related Data.		 */		$query->clear()			->delete($this->_db->quoteName('#__messages_cfg'))			->where($this->_db->quoteName('user_id') . ' = ' . (int) $this->$k);		$this->_db->setQuery($query);		$this->_db->execute();		$query->clear()			->delete($this->_db->quoteName('#__messages'))			->where($this->_db->quoteName('user_id_to') . ' = ' . (int) $this->$k);		$this->_db->setQuery($query);		$this->_db->execute();		return true;	}	/**	 * Updates last visit time of user	 *	 * @param   integer  $timeStamp  The timestamp, defaults to 'now'.	 * @param   integer  $userId     The user id (optional).	 *	 * @return  boolean  False if an error occurs	 *	 * @since   11.1	 */	public function setLastVisit($timeStamp = null, $userId = null)	{		// Check for User ID		if (is_null($userId))		{			if (isset($this))			{				$userId = $this->id;			}			else			{				jexit('No userid in setLastVisit');			}		}		// If no timestamp value is passed to function, than current time is used.		$date = JFactory::getDate($timeStamp);		// Update the database row for the user.		$db = $this->_db;		$query = $db->getQuery(true)			->update($db->quoteName($this->_tbl))			->set($db->quoteName('lastvisitDate') . '=' . $db->quote($date->toSql()))			->where($db->quoteName('id') . '=' . (int) $userId);		$db->setQuery($query);		$db->execute();		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Libraries * @subpackage  Form * @since       3.1 */class JFormFieldContenttype extends JFormFieldList{	/**	 * A flexible tag list that respects access controls	 *	 * @var    string	 * @since  3.1	 */	public $type = 'Contenttype';	/**	 * Method to get the field input for a list of content types.	 *	 * @return  string  The field input.	 *	 * @since   3.1	 */	protected function getInput()	{		if (!is_array($this->value))		{			if (is_object($this->value))			{				$this->value = $this->value->tags;			}			if (is_string($this->value))			{				$this->value = explode(',', $this->value);			}		}		$input = parent::getInput();		return $input;	}	/**	 * Method to get a list of content types	 *	 * @return  array  The field option objects.	 *	 * @since   3.1	 */	protected function getOptions()	{		$options = array();		$name = (string) $this->element['name'];		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('a.type_id AS value, a.type_title AS text')			->from('#__content_types AS a')			->order('a.type_title ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return false;		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		foreach ($options as $option)		{			$option->text = mb_strtoupper(str_replace(' ', '_', $option->text), 'UTF-8');			$option->text = 'COM_TAGS_CONTENT_TYPE_' . $option->text;			$option->text = JText::_($option->text);		}		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');JHtml::_('formbehavior.chosen', 'select');$canDo = TemplatesHelper::getActions();$input = JFactory::getApplication()->input;?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=template'); ?>" method="post" name="adminForm" id="adminForm" class="form-horizontal">		<fieldset id="template-manager">			<div class="pull-left">				<?php echo JHtml::_('templates.thumb', $this->template->element, $this->template->client_id); ?>			</div>			<h2><?php echo ucfirst($this->template->element); ?></h2>			<?php $client = JApplicationHelper::getClientInfo($this->template->client_id); ?>			<p><?php $this->template->xmldata = TemplatesHelper::parseXMLTemplateFile($client->path, $this->template->element);?></p>			<p><?php  echo JText::_($this->template->xmldata->description); ?></p>			<div class="clearfix"></div>			<hr />			<div class="row-fluid">				<div class="span6">					<div class="page-header">						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_MASTER_FILES');?>					</div>					<ul class="nav nav-tabs nav-stacked">						<li>							<?php $id = $this->files['main']['index']->id; ?>							<?php if ($canDo->get('core.edit')) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">								<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_MAIN');?>							<?php if ($canDo->get('core.edit')) : ?>								</a>							<?php endif; ?>						</li>						<?php if ($this->files['main']['error']->exists) : ?>						<li>							<?php $id = $this->files['main']['error']->id; ?>							<?php if ($canDo->get('core.edit')) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">									<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_ERROR');?>							<?php if ($canDo->get('core.edit')) : ?>								</a>							<?php endif; ?>						</li>						<?php endif; ?>						<?php if ($this->files['main']['offline']->exists) : ?>							<li>								<?php $id = $this->files['main']['offline']->id; ?>								<?php if ($canDo->get('core.edit')) : ?>									<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">										<i class="icon-edit"></i>								<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_OFFLINEVIEW');?>								<?php if ($canDo->get('core.edit')) : ?>									</a>								<?php endif; ?>							</li>						<?php endif; ?>						<?php if ($this->files['main']['print']->exists) : ?>						<li>							<?php $id = $this->files['main']['print']->id; ?>							<?php if ($canDo->get('core.edit')) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">									<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_PRINTVIEW');?>							<?php if ($canDo->get('core.edit')) : ?>								</a>							<?php endif; ?>						</li>						<?php endif; ?>					</ul>				</div>				<div class="span6">					<div class="page-header">						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_CSS');?>					</div>					<?php if (!empty($this->files['css'])) : ?>					<ul class="nav nav-tabs nav-stacked">						<?php foreach ($this->files['css'] as $file) : ?>						<li>							<?php if ($canDo->get('core.edit')) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$file->id);?>">								<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_EDIT_CSS', $file->name);?>							<?php if ($canDo->get('core.edit')) : ?>							</a>							<?php endif; ?>						</li>						<?php endforeach; ?>					</ul>					<?php endif; ?>				</div>			</div>			<!--<div>				<a href="#" class="modal">					<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_ADD_CSS');?></a>			</div>-->		</fieldset>		<input type="hidden" name="task" value="" /></form><form action="<?php echo JRoute::_('index.php?option=com_templates&task=template.copy&id=' . $input->getInt('id')); ?>"			method="post" name="adminForm" id="adminForm">	<div  id="collapseModal" class="modal hide fade">		<div class="modal-header">			<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>			<h3><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY');?></h3>		</div>		<div class="modal-body">			<div id="template-manager-css" class="form-horizontal">				<div class="control-group">					<label for="new_name" class="control-label hasTip" title="<?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_DESC'); ?>"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_LABEL')?></label>					<div class="controls">						<input class="input-xlarge" type="text" id="new_name" name="new_name"  />					</div>				</div>			</div>		</div>		<div class="modal-footer">			<a href="#" class="btn" data-dismiss="modal">Close</a>			<button class="btn btn-primary" type="submit"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY'); ?></button>		</div>	</div>	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectContact');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_contact&view=contacts&layout=modal&tmpl=component');?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter-search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>				<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />				<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>				<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>				<select name="filter_language" class="inputbox" id="filter_language">					<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>					<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>				</select>			<?php endif; ?>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist modal">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th class="title language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<th>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $this->escape($item->name); ?></a>				</th>				<td class="center">					<?php if (!empty($item->linked_user)) : ?>						<?php echo $item->linked_user;?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tag Model * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsModelTag extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  3.1	 */	protected $text_prefix = 'COM_TAGS';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 *	 * @since   3.1	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return parent::canDelete($record);		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 *	 * @since   3.1	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return parent::canEditState($record);	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   3.1	*/	public function getTable($type = 'Tag', $prefix = 'TagsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		$parentId = $app->input->getInt('parent_id');		$this->setState('tag.parent_id', $parentId);		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState($this->getName() . '.id', $pk);		// Load the parameters.		$params = JComponentHelper::getParams('com_tags');		$this->setState('params', $params);	}	/**	 * Method to get a tag.	 *	 * @param   integer  $pk  An optional id of the object to get, otherwise the id from the model state is used.	 *	 * @return  mixed  Tag data object on success, false on failure.	 *	 * @since   3.1	 */	public function getItem($pk = null)	{		if ($result = parent::getItem($pk))		{			// Prime required properties.			if (empty($result->id))			{				$result->parent_id = $this->getState('tag.parent_id');			}			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($result->metadata);			$result->metadata = $registry->toArray();			// Convert the images field to an array.			$registry = new JRegistry;			$registry->loadString($result->images);			$result->images = $registry->toArray();			// Convert the urls field to an array.			$registry = new JRegistry;			$registry->loadString($result->urls);			$result->urls = $registry->toArray();			// Convert the created and modified dates to local user time for display in the form.			$tz = new DateTimeZone(JFactory::getApplication()->getCfg('offset'));			if ((int) $result->created_time)			{				$date = new JDate($result->created_time);				$date->setTimezone($tz);				$result->created_time = $date->toSql(true);			}			else			{				$result->created_time = null;			}			if ((int) $result->modified_time)			{				$date = new JDate($result->modified_time);				$date->setTimezone($tz);				$result->modified_time = $date->toSql(true);			}			else			{				$result->modified_time = null;			}		}		return $result;	}	/**	 * Method to get the row form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   3.1	 */	public function getForm($data = array(), $loadData = true)	{		$extension = $this->getState('tag');		$jinput = JFactory::getApplication()->input;		// Get the form.		$form = $this->loadForm('com_tags.tag', 'tag', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		$user = JFactory::getUser();		if (!$user->authorise('core.edit.state', 'com_tags' . $jinput->get('id')))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   3.1	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_tags.edit.tag.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_tags.tag', $data);		return $data;	}	/**	 * Method to preprocess the form.	 *	 * @param   JForm   $form    A JForm object.	 * @param   mixed   $data    The data expected for the form.	 * @param   string  $group  The name of the plugin group to import.	 *	 * @return  void	 *	 * @see     JFormField	 * @since   3.1	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$table = $this->getTable();		$input = JFactory::getApplication()->input;		$pk = (!empty($data['id'])) ? $data['id'] : (int) $this->getState($this->getName() . '.id');		$isNew = true;		// Include the content plugins for the on save events.		JPluginHelper::importPlugin('content');		// Load the row if saving an existing tag.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		// Set the new parent id if parent id not matched OR while New/Save as Copy .		if ($table->parent_id != $data['parent_id'] || $data['id'] == 0)		{			$table->setLocation($data['parent_id'], 'last-child');		}		if (isset($data['images']) && is_array($data['images']))		{			$registry = new JRegistry;			$registry->loadArray($data['images']);			$data['images'] = (string) $registry;		}		if (isset($data['urls']) && is_array($data['urls']))		{			$registry = new JRegistry;			$registry->loadArray($data['urls']);			$data['urls'] = (string) $registry;		}		// Alter the title for save as copy		if ($input->get('task') == 'save2copy')		{			list($title, $alias) = $this->generateNewTitle($data['parent_id'], $data['alias'], $data['title']);			$data['title'] = $title;			$data['alias'] = $alias;		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Bind the rules.		if (isset($data['rules']))		{			$rules = new JAccessRules($data['rules']);			$table->setRules($rules);		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentBeforeSave event.		$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, &$table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentAfterSave event.		$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, &$table, $isNew));		// Rebuild the path for the tag:		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		// Rebuild the paths of the tag's children:		if (!$table->rebuild($table->id, $table->lft, $table->level, $table->path))		{			$this->setError($table->getError());			return false;		}		$this->setState($this->getName() . '.id', $table->id);		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method rebuild the entire nested set tree.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   3.1	 */	public function rebuild()	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to save the reordered nested set tree.	 * First we save the new order values in the lft values of the changed ids.	 * Then we invoke the table rebuild to implement the new ordering.	 *	 * @param   array    $idArray    An array of primary key ids.	 * @param   integer  $lft_array  The lft value	 *	 * @return  boolean  False on failure or error, True otherwise	 *	 * @since   3.1	*/	public function saveorder($idArray = null, $lft_array = null)	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->saveorder($idArray, $lft_array))		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   3.1	 */	protected function generateNewTitle($parent_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'parent_id' => $parent_id)))		{			$title = ($table->title != $title) ? $title : JString::increment($title);			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * RSS Feed Parser class. * * @package     Joomla.Platform * @subpackage  Feed * @link        http://cyber.law.harvard.edu/rss/rss.html * @since       12.3 */class JFeedParserRss extends JFeedParser{	/**	 * @var    string  The feed element name for the entry elements.	 * @since  12.3	 */	protected $entryElementName = 'item';	/**	 * @var    string  The feed format version.	 * @since  12.3	 */	protected $version;	/**	 * Method to handle the <category> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleCategory(JFeed $feed, SimpleXMLElement $el)	{		// Get the data from the element.		$domain    = (string) $el['domain'];		$category  = (string) $el;		$feed->addCategory($category, $domain);	}	/**	 * Method to handle the <cloud> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleCloud(JFeed $feed, SimpleXMLElement $el)	{		$cloud = new stdClass;		$cloud->domain            = (string) $el['domain'];		$cloud->port              = (string) $el['port'];		$cloud->path              = (string) $el['path'];		$cloud->protocol          = (string) $el['protocol'];		$cloud->registerProcedure = (string) $el['registerProcedure'];		$feed->cloud = $cloud;	}	/**	 * Method to handle the <copyright> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleCopyright(JFeed $feed, SimpleXMLElement $el)	{		$feed->copyright = (string) $el;	}	/**	 * Method to handle the <description> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleDescription(JFeed $feed, SimpleXMLElement $el)	{		$feed->description = (string) $el;	}	/**	 * Method to handle the <generator> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleGenerator(JFeed $feed, SimpleXMLElement $el)	{		$feed->generator = (string) $el;	}	/**	 * Method to handle the <image> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleImage(JFeed $feed, SimpleXMLElement $el)	{		// Create a feed link object for the image.		$image = new JFeedLink(			(string) $el->url,			null,			'logo',			null,			(string) $el->title		);		// Populate extra fields if they exist.		$image->link         = (string) $el->link;		$image->description  = (string) $el->description;		$image->height       = (string) $el->height;		$image->width        = (string) $el->width;		$feed->image = $image;	}	/**	 * Method to handle the <language> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLanguage(JFeed $feed, SimpleXMLElement $el)	{		$feed->language = (string) $el;	}	/**	 * Method to handle the <lastBuildDate> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLastBuildDate(JFeed $feed, SimpleXMLElement $el)	{		$feed->updatedDate = (string) $el;	}	/**	 * Method to handle the <link> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLink(JFeed $feed, SimpleXMLElement $el)	{		$feed->uri = (string) $el;	}	/**	 * Method to handle the <managingEditor> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleManagingEditor(JFeed $feed, SimpleXMLElement $el)	{		$feed->author = $this->processPerson((string) $el);	}	/**	 * Method to handle the <skipDays> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleSkipDays(JFeed $feed, SimpleXMLElement $el)	{		// Initialise the array.		$days = array();		// Add all of the day values from the feed to the array.		foreach ($el->day as $day)		{			$days[] = (string) $day;		}		$feed->skipDays = $days;	}	/**	 * Method to handle the <skipHours> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleSkipHours(JFeed $feed, SimpleXMLElement $el)	{		// Initialise the array.		$hours = array();		// Add all of the day values from the feed to the array.		foreach ($el->hour as $hour)		{			$hours[] = (int) $hour;		}		$feed->skipHours = $hours;	}	/**	 * Method to handle the <pubDate> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handlePubDate(JFeed $feed, SimpleXMLElement $el)	{		$feed->publishedDate = (string) $el;	}	/**	 * Method to handle the <title> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleTitle(JFeed $feed, SimpleXMLElement $el)	{		$feed->title = (string) $el;	}	/**	 * Method to handle the <ttl> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleTtl(JFeed $feed, SimpleXMLElement $el)	{		$feed->ttl = (integer) $el;	}	/**	 * Method to handle the <webmaster> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleWebmaster(JFeed $feed, SimpleXMLElement $el)	{		// Get the tag contents and split it over the first space.		$tmp = (string) $el;		$tmp = explode(' ', $tmp, 2);		// This is really cheap parsing.  Probably need to create a method to do this more robustly.		$name = null;		if (isset($tmp[1]))		{			$name = trim($tmp[1], ' ()');		}		$email = trim($tmp[0]);		$feed->addContributor($name, $email, null, 'webmaster');	}	/**	 * Method to initialise the feed for parsing.  Here we detect the version and advance the stream	 * reader so that it is ready to parse feed elements.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function initialise()	{		// Read the version attribute.		$this->version = $this->stream->getAttribute('version');		// We want to move forward to the first element after the <channel> element.		$this->moveToNextElement('channel');		$this->moveToNextElement();	}	/**	 * Method to handle the feed entry element for the feed: <item>.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function processFeedEntry(JFeedEntry $entry, SimpleXMLElement $el)	{		$entry->uri           = (string) $el->link;		$entry->title         = (string) $el->title;		$entry->publishedDate = (string) $el->pubDate;		$entry->updatedDate   = (string) $el->pubDate;		$entry->content       = (string) $el->description;		$entry->guid          = (string) $el->guid;		$entry->comments      = (string) $el->comments;		// Add the feed entry author if available.		$author = (string) $el->author;		if (!empty($author))		{			$entry->author = $this->processPerson($author);		}		// Add any categories to the entry.		foreach ($el->category as $category)		{			$entry->addCategory((string) $category, (string) $category['domain']);		}		// Add any enclosures to the entry.		foreach ($el->enclosure as $enclosure)		{			$link = new JFeedLink(				(string) $enclosure['url'],				null,				(string) $enclosure['type'],				null,				null,				(int) $enclosure['length']			);			$entry->addLink($link);		}	}	/**	 * Method to parse a string with person data and return a JFeedPerson object.	 *	 * @param   string  $data  The string to parse for a person.	 *	 * @return  JFeedPerson	 *	 * @since   12.3	 */	protected function processPerson($data)	{		// Create a new person object.		$person = new JFeedPerson;		// This is really cheap parsing, but so far good enough. :)		$data = explode(' ', $data, 2);		if (isset($data[1]))		{			$person->name = trim($data[1], ' ()');		}		// Set the email for the person.		$person->email = trim($data[0]);		return $person;	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Stream Interface * * The Joomla! stream interface is designed to handle files as streams * where as the legacy JFile static class treated files in a rather * atomic manner. * * @package     Joomla.Platform * @subpackage  FileSystem * * This class adheres to the stream wrapper operations: * * @see         http://php.net/manual/en/function.stream-get-wrappers.php * @see         http://php.net/manual/en/intro.stream.php PHP Stream Manual * @see         http://php.net/manual/en/wrappers.php Stream Wrappers * @see         http://php.net/manual/en/filters.php Stream Filters * @see         http://php.net/manual/en/transports.php Socket Transports (used by some options, particularly HTTP proxy) * @since       11.1 */class JStream extends JObject{	// Publicly settable vars (protected to let our parent read them)	/**	 * File Mode	 * @var    integer	 * @since  11.1	 * */	protected $filemode = 0644;	/**	 * Directory Mode	 * @var   integer	 * @since  11.1	 * */	protected $dirmode = 0755;	/**	 * Default Chunk Size	 * @var    integer	 * @since  11.1	 */	protected $chunksize = 8192;	/**	 * Filename	 * @var    string	 * @since  11.1	 */	protected $filename;	/**	 * Prefix of the connection for writing	 * @var    string	 * @since  11.1	 */	protected $writeprefix;	/**	 * Prefix of the connection for reading	 * @var    string	 * @since  11.1	 */	protected $readprefix;	/**	 *	 *Read Processing method	 * @var   string  gz, bz, f	 * If a scheme is detected, fopen will be defaulted	 * To use compression with a network stream use a filter	 * @since  11.1	 */	protected $processingmethod = 'f';	/**	 * Filters applied to the current stream	 * @var    array	 * @since  11.1	 */	protected $filters = array();	/**	 * File Handle	 * @var    array	 * @since  12.1	 */	protected $fh;	/**	 * File size	 * @var    integer	 * @since  12.1	 */	protected $filesize;	/**	 *Context to use when opening the connection	 * @var	 * @since  12.1	 */	protected $context = null;	/**	 * Context options; used to rebuild the context	 * @var	 * @since  12.1	 */	protected $contextOptions;	/**	 * The mode under which the file was opened	 * @var	 * @since  12.1	 */	protected $openmode;	/**	 * Constructor	 *	 * @param   string  $writeprefix  Prefix of the stream (optional). Unlike the JPATH_*, this has a final path separator!	 * @param   string  $readprefix   The read prefix (optional).	 * @param   array   $context      The context options (optional).	 *	 * @since   11.1	 */	public function __construct($writeprefix = '', $readprefix = '', $context = array())	{		$this->writeprefix = $writeprefix;		$this->readprefix = $readprefix;		$this->contextOptions = $context;		$this->_buildContext();	}	/**	 * Destructor	 *	 * @since   11.1	 */	public function __destruct()	{		// Attempt to close on destruction if there is a file handle		if ($this->fh)		{			@$this->close();		}	}	/**	 * Generic File Operations	 *	 * Open a stream with some lazy loading smarts	 *	 * @param   string    $filename              Filename	 * @param   string    $mode                  Mode string to use	 * @param   boolean   $use_include_path      Use the PHP include path	 * @param   resource  $context               Context to use when opening	 * @param   boolean   $use_prefix            Use a prefix to open the file	 * @param   boolean   $relative              Filename is a relative path (if false, strips JPATH_ROOT to make it relative)	 * @param   boolean   $detectprocessingmode  Detect the processing method for the file and use the appropriate function	 *                                           to handle output automatically	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function open($filename, $mode = 'r', $use_include_path = false, $context = null,		$use_prefix = false, $relative = false, $detectprocessingmode = false)	{		$filename = $this->_getFilename($filename, $mode, $use_prefix, $relative);		if (!$filename)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILENAME'));			return false;		}		$this->filename = $filename;		$this->openmode = $mode;		$url = parse_url($filename);		$retval = false;		if (isset($url['scheme']))		{			// If we're dealing with a Joomla! stream, load it			if (JFilesystemHelper::isJoomlaStream($url['scheme']))			{				require_once __DIR__ . '/streams/' . $url['scheme'] . '.php';			}			// We have a scheme! force the method to be f			$this->processingmethod = 'f';		}		elseif ($detectprocessingmode)		{			$ext = strtolower(JFile::getExt($this->filename));			switch ($ext)			{				case 'tgz':				case 'gz':				case 'gzip':					$this->processingmethod = 'gz';					break;				case 'tbz2':				case 'bz2':				case 'bzip2':					$this->processingmethod = 'bz';					break;				default:					$this->processingmethod = 'f';					break;			}		}		// Capture PHP errors		$php_errormsg = 'Error Unknown whilst opening a file';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		// Decide which context to use:		switch ($this->processingmethod)		{			// Gzip doesn't support contexts or streams			case 'gz':				$this->fh = gzopen($filename, $mode, $use_include_path);				break;			// Bzip2 is much like gzip except it doesn't use the include path			case 'bz':				$this->fh = bzopen($filename, $mode);				break;			// Fopen can handle streams			case 'f':			default:				// One supplied at open; overrides everything				if ($context)				{					$this->fh = fopen($filename, $mode, $use_include_path, $context);				}				// One provided at initialisation				elseif ($this->context)				{					$this->fh = fopen($filename, $mode, $use_include_path, $this->context);				}				// No context; all defaults				else				{					$this->fh = fopen($filename, $mode, $use_include_path);				}				break;		}		if (!$this->fh)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Attempt to close a file handle	 *	 * Will return false if it failed and true on success	 * If the file is not open the system will return true, this function destroys the file handle as well	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function close()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return true;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzclose($this->fh);				break;			case 'bz':				$res = bzclose($this->fh);				break;			case 'f':			default:				$res = fclose($this->fh);				break;		}		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			// Reset this			$this->fh = null;			$retval = true;		}		// If we wrote, chmod the file after it's closed		if ($this->openmode[0] == 'w')		{			$this->chmod();		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Work out if we're at the end of the file for a stream	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function eof()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzeof($this->fh);				break;			case 'bz':			case 'f':			default:				$res = feof($this->fh);				break;		}		if ($php_errormsg)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $res;	}	/**	 * Retrieve the file size of the path	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function filesize()	{		if (!$this->filename)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$res = @filesize($this->filename);		if (!$res)		{			$tmp_error = '';			if ($php_errormsg)			{				// Something went wrong.				// Store the error in case we need it.				$tmp_error = $php_errormsg;			}			$res = JFilesystemHelper::remotefsize($this->filename);			if (!$res)			{				if ($tmp_error)				{					// Use the php_errormsg from before					$this->setError($tmp_error);				}				else				{					// Error but nothing from php? How strange! Create our own					$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_SIZE'));				}			}			else			{				$this->filesize = $res;				$retval = $res;			}		}		else		{			$this->filesize = $res;			$retval = $res;		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Get a line from the stream source.	 *	 * @param   integer  $length  The number of bytes (optional) to read.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function gets($length = 0)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = $length ? gzgets($this->fh, $length) : gzgets($this->fh);				break;			case 'bz':			case 'f':			default:				$res = $length ? fgets($this->fh, $length) : fgets($this->fh);				break;		}		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			$retval = $res;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Read a file	 *	 * Handles user space streams appropriately otherwise any read will return 8192	 *	 * @param   integer  $length  Length of data to read	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.fread.php	 * @since   11.1	 */	public function read($length = 0)	{		if (!$this->filesize && !$length)		{			// Get the filesize			$this->filesize();			if (!$this->filesize)			{				// Set it to the biggest and then wait until eof				$length = -1;			}			else			{				$length = $this->filesize;			}		}		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$remaining = $length;		do		{			// Do chunked reads where relevant			switch ($this->processingmethod)			{				case 'bz':					$res = ($remaining > 0) ? bzread($this->fh, $remaining) : bzread($this->fh, $this->chunksize);					break;				case 'gz':					$res = ($remaining > 0) ? gzread($this->fh, $remaining) : gzread($this->fh, $this->chunksize);					break;				case 'f':				default:					$res = ($remaining > 0) ? fread($this->fh, $remaining) : fread($this->fh, $this->chunksize);					break;			}			if (!$res)			{				$this->setError($php_errormsg);				// Jump from the loop				$remaining = 0;			}			else			{				if (!$retval)				{					$retval = '';				}				$retval .= $res;				if (!$this->eof())				{					$len = strlen($res);					$remaining -= $len;				}				else				{					// If it's the end of the file then we've nothing left to read; reset remaining and len					$remaining = 0;					$length = strlen($retval);				}			}		}		while ($remaining || !$length);		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Seek the file	 *	 * Note: the return value is different to that of fseek	 *	 * @param   integer  $offset  Offset to use when seeking.	 * @param   integer  $whence  Seek mode to use.	 *	 * @return  boolean  True on success, false on failure	 *	 * @see http://php.net/manual/en/function.fseek.php	 * @since   11.1	 */	public function seek($offset, $whence = SEEK_SET)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzseek($this->fh, $offset, $whence);				break;			case 'bz':			case 'f':			default:				$res = fseek($this->fh, $offset, $whence);				break;		}		// Seek, interestingly, returns 0 on success or -1 on failure.		if ($res == -1)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Returns the current position of the file read/write pointer.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function tell()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gztell($this->fh);				break;			case 'bz':			case 'f':			default:				$res = ftell($this->fh);				break;		}		// May return 0 so check if it's really false		if ($res === false)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $res;	}	/**	 * File write	 *	 * Whilst this function accepts a reference, the underlying fwrite	 * will do a copy! This will roughly double the memory allocation for	 * any write you do. Specifying chunked will get around this by only	 * writing in specific chunk sizes. This defaults to 8192 which is a	 * sane number to use most of the time (change the default with	 * JStream::set('chunksize', newsize);)	 * Note: This doesn't support gzip/bzip2 writing like reading does	 *	 * @param   string   &$string  Reference to the string to write.	 * @param   integer  $length   Length of the string to write.	 * @param   integer  $chunk    Size of chunks to write in.	 *	 * @return  boolean	 *	 * @see     http://php.net/manual/en/function.fwrite.php	 * @since   11.1	 */	public function write(&$string, $length = 0, $chunk = 0)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		// If the length isn't set, set it to the length of the string.		if (!$length)		{			$length = strlen($string);		}		// If the chunk isn't set, set it to the default.		if (!$chunk)		{			$chunk = $this->chunksize;		}		$retval = true;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$remaining = $length;		$start = 0;		do		{			// If the amount remaining is greater than the chunk size, then use the chunk			$amount = ($remaining > $chunk) ? $chunk : $remaining;			$res = fwrite($this->fh, substr($string, $start), $amount);			// Returns false on error or the number of bytes written			if ($res === false)			{				// Returned error				$this->setError($php_errormsg);				$retval = false;				$remaining = 0;			}			elseif ($res === 0)			{				// Wrote nothing?				$remaining = 0;				$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_NO_DATA_WRITTEN'));			}			else			{				// Wrote something				$start += $amount;				$remaining -= $res;			}		}		while ($remaining);		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Chmod wrapper	 *	 * @param   string  $filename  File name.	 * @param   mixed   $mode      Mode to use.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function chmod($filename = '', $mode = 0)	{		if (!$filename)		{			if (!isset($this->filename) || !$this->filename)			{				$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILENAME'));				return false;			}			$filename = $this->filename;		}		// If no mode is set use the default		if (!$mode)		{			$mode = $this->filemode;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$sch = parse_url($filename, PHP_URL_SCHEME);		// Scheme specific options; ftp's chmod support is fun.		switch ($sch)		{			case 'ftp':			case 'ftps':				$res = JFilesystemHelper::ftpChmod($filename, $mode);				break;			default:				$res = chmod($filename, $mode);				break;		}		// Seek, interestingly, returns 0 on success or -1 on failure		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Get the stream metadata	 *	 * @return  array  header/metadata	 *	 * @see     http://php.net/manual/en/function.stream-get-meta-data.php	 * @since   11.1	 */	public function get_meta_data()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		return stream_get_meta_data($this->fh);	}	/**	 * Stream contexts	 * Builds the context from the array	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function _buildContext()	{		// According to the manual this always works!		if (count($this->contextOptions))		{			$this->context = @stream_context_create($this->contextOptions);		}		else		{			$this->context = null;		}	}	/**	 * Updates the context to the array	 *	 * Format is the same as the options for stream_context_create	 *	 * @param   array  $context  Options to create the context with	 *	 * @return  void	 *	 * @see       http://php.net/stream_context_create	 * @since   11.1	 */	public function setContextOptions($context)	{		$this->contextOptions = $context;		$this->_buildContext();	}	/**	 * Adds a particular options to the context	 *	 * @param   string  $wrapper  The wrapper to use	 * @param   string  $name     The option to set	 * @param   string  $value    The value of the option	 *	 * @return  void	 *	 * @see     http://php.net/stream_context_create Stream Context Creation	 * @see     http://php.net/manual/en/context.php Context Options for various streams	 * @since   11.1	 */	public function addContextEntry($wrapper, $name, $value)	{		$this->contextOptions[$wrapper][$name] = $value;		$this->_buildContext();	}	/**	 * Deletes a particular setting from a context	 *	 * @param   string  $wrapper  The wrapper to use	 * @param   string  $name     The option to unset	 *	 * @return  void	 *	 * @see     http://php.net/stream_context_create	 * @since   11.1	 */	public function deleteContextEntry($wrapper, $name)	{		// Check whether the wrapper is set		if (isset($this->contextOptions[$wrapper]))		{			// Check that entry is set for that wrapper			if (isset($this->contextOptions[$wrapper][$name]))			{				// Unset the item				unset($this->contextOptions[$wrapper][$name]);				// Check that there are still items there				if (!count($this->contextOptions[$wrapper]))				{					// Clean up an empty wrapper context option					unset($this->contextOptions[$wrapper]);				}			}		}		// Rebuild the context and apply it to the stream		$this->_buildContext();	}	/**	 * Applies the current context to the stream	 *	 * Use this to change the values of the context after you've opened a stream	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function applyContextToStream()	{		$retval = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = 'Unknown error setting context option';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$retval = @stream_context_set_option($this->fh, $this->contextOptions);			if (!$retval)			{				$this->setError($php_errormsg);			}			// Restore error tracking to what it was before			ini_set('track_errors', $track_errors);		}		return $retval;	}	/**	 * Stream filters	 * Append a filter to the chain	 *	 * @param   string   $filtername  The key name of the filter.	 * @param   integer  $read_write  Optional. Defaults to STREAM_FILTER_READ.	 * @param   array    $params      An array of params for the stream_filter_append call.	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.stream-filter-append.php	 * @since   11.1	 */	public function appendFilter($filtername, $read_write = STREAM_FILTER_READ, $params = array())	{		$res = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = '';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$res = @stream_filter_append($this->fh, $filtername, $read_write, $params);			if (!$res && $php_errormsg)			{				$this->setError($php_errormsg);			}			else			{				$this->filters[] = &$res;			}			// Restore error tracking to what it was before.			ini_set('track_errors', $track_errors);		}		return $res;	}	/**	 * Prepend a filter to the chain	 *	 * @param   string   $filtername  The key name of the filter.	 * @param   integer  $read_write  Optional. Defaults to STREAM_FILTER_READ.	 * @param   array    $params      An array of params for the stream_filter_prepend call.	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.stream-filter-prepend.php	 * @since   11.1	 */	public function prependFilter($filtername, $read_write = STREAM_FILTER_READ, $params = array())	{		$res = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = '';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$res = @stream_filter_prepend($this->fh, $filtername, $read_write, $params);			if (!$res && $php_errormsg)			{				// Set the error msg				$this->setError($php_errormsg);			}			else			{				array_unshift($res, '');				$res[0] = &$this->filters;			}			// Restore error tracking to what it was before.			ini_set('track_errors', $track_errors);		}		return $res;	}	/**	 * Remove a filter, either by resource (handed out from the append or prepend function)	 * or via getting the filter list)	 *	 * @param   resource  &$resource  The resource.	 * @param   boolean   $byindex    The index of the filter.	 *	 * @return  boolean   Result of operation	 *	 * @since   11.1	 */	public function removeFilter(&$resource, $byindex = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		if ($byindex)		{			$res = stream_filter_remove($this->filters[$resource]);		}		else		{			$res = stream_filter_remove($resource);		}		if ($res && $php_errormsg)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Copy a file from src to dest	 *	 * @param   string    $src         The file path to copy from.	 * @param   string    $dest        The file path to copy to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function copy($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$chmodDest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		// Since we're going to open the file directly we need to get the filename.		// We need to use the same prefix so force everything to write.		$src = $this->_getFilename($src, 'w', $use_prefix, $relative);		$dest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @copy($src, $dest, $context);		}		elseif ($this->context)		{			// Use the objects context			$res = @copy($src, $dest, $this->context);		}		else		{			// Don't use any context			$res = @copy($src, $dest);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg);		}		else		{			$this->chmod($chmodDest);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Moves a file	 *	 * @param   string    $src         The file path to move from.	 * @param   string    $dest        The file path to move to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function move($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$src = $this->_getFilename($src, 'w', $use_prefix, $relative);		$dest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @rename($src, $dest, $context);		}		elseif ($this->context)		{			// Use the object's context			$res = @rename($src, $dest, $this->context);		}		else		{			// Don't use any context			$res = @rename($src, $dest);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg());		}		$this->chmod($dest);		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Delete a file	 *	 * @param   string    $filename    The file path to delete.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function delete($filename, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$filename = $this->_getFilename($filename, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @unlink($filename, $context);		}		elseif ($this->context)		{			// Use the object's context			$res = @unlink($filename, $this->context);		}		else		{			// Don't use any context			$res = @unlink($filename);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg());		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Upload a file	 *	 * @param   string    $src         The file path to copy from (usually a temp folder).	 * @param   string    $dest        The file path to copy to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function upload($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		if (is_uploaded_file($src))		{			// Make sure it's an uploaded file			return $this->copy($src, $dest, $context, $use_prefix, $relative);		}		else		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_NOT_UPLOADED_FILE'));			return false;		}	}	/**	 * Writes a chunk of data to a file.	 *	 * @param   string  $filename  The file name.	 * @param   string  &$buffer   The data to write to the file.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function writeFile($filename, &$buffer)	{		if ($this->open($filename, 'w'))		{			$result = $this->write($buffer);			$this->chmod();			$this->close();			return $result;		}		return false;	}	/**	 * Determine the appropriate 'filename' of a file	 *	 * @param   string   $filename    Original filename of the file	 * @param   string   $mode        Mode string to retrieve the filename	 * @param   boolean  $use_prefix  Controls the use of a prefix	 * @param   boolean  $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  string	 *	 * @since   11.1	 */	public function _getFilename($filename, $mode, $use_prefix, $relative)	{		if ($use_prefix)		{			// Get rid of binary or t, should be at the end of the string			$tmode = trim($mode, 'btf123456789');			// Check if it's a write mode then add the appropriate prefix			// Get rid of JPATH_ROOT (legacy compat) along the way			if (in_array($tmode, JFilesystemHelper::getWriteModes()))			{				if (!$relative && $this->writeprefix)				{					$filename = str_replace(JPATH_ROOT, '', $filename);				}				$filename = $this->writeprefix . $filename;			}			else			{				if (!$relative && $this->readprefix)				{					$filename = str_replace(JPATH_ROOT, '', $filename);				}				$filename = $this->readprefix . $filename;			}		}		return $filename;	}	/**	 * Return the internal file handle	 *	 * @return  File handler	 *	 * @since   11.1	 */	public function getFileHandle()	{		return $this->fh;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Newsfeeds component * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.0 */class NewsfeedsViewCategory extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $categories;	protected $pagination;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		if ($category == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		// Check whether category access level allows access.		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Prepare the data.		// Compute the newsfeed slug.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			$temp		= new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);		}		// Setup the category parameters.		$cparams = $category->getParams();		$category->params = clone($params);		$category->params->merge($cparams);		$children = array($category->id => $children);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$maxLevel = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=category') === false) || (strpos($active->link, '&id=' . (string) $this->category->id) === false)))		{			if ($layout = $category->params->get('category_layout'))		{			$this->setLayout($layout);			}		}		elseif (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$this->category->tags = new JHelperTags;		$this->category->tags->getItemTags('com_newsfeeds.category', $this->category->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_NEWSFEEDS_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_newsfeeds' || $menu->query['view'] == 'newsfeed' || $id != $this->category->id))		{			$path = array(array('title' => $this->category->title, 'link' => ''));			$category = $this->category->getParent();			while (($menu->query['option'] != 'com_newsfeeds' || $menu->query['view'] == 'newsfeed' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => NewsfeedsHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->category->metadesc)		{			$this->document->setDescription($this->category->metadesc);		}		elseif (!$this->category->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->category->metakey)		{			$this->document->setMetadata('keywords', $this->category->metakey);		}		elseif (!$this->category->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->category->getMetadata()->get('author'));		}		$mdata = $this->category->getMetadata()->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for creating HTML Grids * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlJGrid{	/**	 * Returns an action on a grid	 *	 * @param   integer       $i               The row index	 * @param   string        $task            The task to fire	 * @param   string|array  $prefix          An optional task prefix or an array of options	 * @param   string        $text            An optional text to display	 * @param   string        $active_title    An optional active tooltip to display if $enable is true	 * @param   string        $inactive_title  An optional inactive tooltip to display if $enable is true	 * @param   boolean       $tip             An optional setting for tooltip	 * @param   string        $active_class    An optional active HTML class	 * @param   string        $inactive_class  An optional inactive HTML class	 * @param   boolean       $enabled         An optional setting for access control on the action.	 * @param   boolean       $translate       An optional setting for translation.	 * @param   string        $checkbox	       An optional prefix for checkboxes.	 *	 * @return string         The Html code	 *	 * @since   11.1	 */	public static function action($i, $task, $prefix = '', $text = '', $active_title = '', $inactive_title = '', $tip = false, $active_class = '',		$inactive_class = '', $enabled = true, $translate = true, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$active_title = array_key_exists('active_title', $options) ? $options['active_title'] : $active_title;			$inactive_title = array_key_exists('inactive_title', $options) ? $options['inactive_title'] : $inactive_title;			$tip = array_key_exists('tip', $options) ? $options['tip'] : $tip;			$active_class = array_key_exists('active_class', $options) ? $options['active_class'] : $active_class;			$inactive_class = array_key_exists('inactive_class', $options) ? $options['inactive_class'] : $inactive_class;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$translate = array_key_exists('translate', $options) ? $options['translate'] : $translate;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		if ($tip)		{			JHtml::_('behavior.tooltip');		}		if ($enabled)		{			$html[] = '<a class="btn btn-micro ' . ($active_class == "publish" ? 'active' : '') . '" ' . ($tip ? 'rel="tooltip"' : '') . '';			$html[] = ' href="javascript:void(0);" onclick="return listItemTask(\'' . $checkbox . $i . '\',\'' . $prefix . $task . '\')"';			$html[] = ' title="' . addslashes(htmlspecialchars($translate ? JText::_($active_title) : $active_title, ENT_COMPAT, 'UTF-8')) . '">';			$html[] = '<i class="icon-' . $active_class . '">';			$html[] = '</i>';			$html[] = '</a>';		}		else		{			$html[] = '<a class="btn btn-micro disabled jgrid" ' . ($tip ? 'rel="tooltip"' : '') . '';			$html[] = ' title="' . addslashes(htmlspecialchars($translate ? JText::_($inactive_title) : $inactive_title, ENT_COMPAT, 'UTF-8')) . '">';			if ($active_class == "protected")			{				$html[] = '<i class="icon-lock"></i>';			}			else			{				$html[] = '<i class="icon-' . $inactive_class . '"></i>';			}			$html[] = '</a>';		}		return implode($html);	}	/**	 * Returns a state on a grid	 *	 * @param   array         $states     array of value/state. Each state is an array of the form	 *                                    (task, text, title,html active class, HTML inactive class)	 *                                    or ('task'=>task, 'text'=>text, 'active_title'=>active title,	 *                                    'inactive_title'=>inactive title, 'tip'=>boolean, 'active_class'=>html active class,	 *                                    'inactive_class'=>html inactive class)	 * @param   integer       $value      The state value.	 * @param   integer       $i          The row index	 * @param   string|array  $prefix     An optional task prefix or an array of options	 * @param   boolean       $enabled    An optional setting for access control on the action.	 * @param   boolean       $translate  An optional setting for translation.	 * @param   string        $checkbox   An optional prefix for checkboxes.	 *	 * @return  string       The Html code	 *	 * @since   11.1	 */	public static function state($states, $value, $i, $prefix = '', $enabled = true, $translate = true, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$translate = array_key_exists('translate', $options) ? $options['translate'] : $translate;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		$state = JArrayHelper::getValue($states, (int) $value, $states[0]);		$task = array_key_exists('task', $state) ? $state['task'] : $state[0];		$text = array_key_exists('text', $state) ? $state['text'] : (array_key_exists(1, $state) ? $state[1] : '');		$active_title = array_key_exists('active_title', $state) ? $state['active_title'] : (array_key_exists(2, $state) ? $state[2] : '');		$inactive_title = array_key_exists('inactive_title', $state) ? $state['inactive_title'] : (array_key_exists(3, $state) ? $state[3] : '');		$tip = array_key_exists('tip', $state) ? $state['tip'] : (array_key_exists(4, $state) ? $state[4] : false);		$active_class = array_key_exists('active_class', $state) ? $state['active_class'] : (array_key_exists(5, $state) ? $state[5] : '');		$inactive_class = array_key_exists('inactive_class', $state) ? $state['inactive_class'] : (array_key_exists(6, $state) ? $state[6] : '');		return self::action(			$i, $task, $prefix, $text, $active_title, $inactive_title, $tip,			$active_class, $inactive_class, $enabled, $translate, $checkbox		);	}	/**	 * Returns a published state on a grid	 *	 * @param   integer       $value         The state value.	 * @param   integer       $i             The row index	 * @param   string|array  $prefix        An optional task prefix or an array of options	 * @param   boolean       $enabled       An optional setting for access control on the action.	 * @param   string        $checkbox      An optional prefix for checkboxes.	 * @param   string        $publish_up    An optional start publishing date.	 * @param   string        $publish_down  An optional finish publishing date.	 *	 * @return  string  The Html code	 *	 * @see     JHtmlJGrid::state	 * @since   11.1	 */	public static function published($value, $i, $prefix = '', $enabled = true, $checkbox = 'cb', $publish_up = null, $publish_down = null)	{		if (is_array($prefix))		{			$options = $prefix;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		$states = array(1 => array('unpublish', 'JPUBLISHED', 'JLIB_HTML_UNPUBLISH_ITEM', 'JPUBLISHED', false, 'publish', 'publish'),			0 => array('publish', 'JUNPUBLISHED', 'JLIB_HTML_PUBLISH_ITEM', 'JUNPUBLISHED', false, 'unpublish', 'unpublish'),			2 => array('unpublish', 'JARCHIVED', 'JLIB_HTML_UNPUBLISH_ITEM', 'JARCHIVED', false, 'archive', 'archive'),			-2 => array('publish', 'JTRASHED', 'JLIB_HTML_PUBLISH_ITEM', 'JTRASHED', false, 'trash', 'trash'));		// Special state for dates		if ($publish_up || $publish_down)		{			$nullDate = JFactory::getDbo()->getNullDate();			$nowDate = JFactory::getDate()->toUnix();			$tz = new DateTimeZone(JFactory::getUser()->getParam('timezone', JFactory::getConfig()->get('offset')));			$publish_up = ($publish_up != $nullDate) ? JFactory::getDate($publish_up, 'UTC')->setTimeZone($tz) : false;			$publish_down = ($publish_down != $nullDate) ? JFactory::getDate($publish_down, 'UTC')->setTimeZone($tz) : false;			// Create tip text, only we have publish up or down settings			$tips = array();			if ($publish_up)			{				$tips[] = JText::sprintf('JLIB_HTML_PUBLISHED_START', $publish_up->format(JDate::$format, true));			}			if ($publish_down)			{				$tips[] = JText::sprintf('JLIB_HTML_PUBLISHED_FINISHED', $publish_down->format(JDate::$format, true));			}			$tip = empty($tips) ? false : implode('<br/>', $tips);			// Add tips and special titles			foreach ($states as $key => $state)			{				// Create special titles for published items				if ($key == 1)				{					$states[$key][2] = $states[$key][3] = 'JLIB_HTML_PUBLISHED_ITEM';					if ($publish_up > $nullDate && $nowDate < $publish_up->toUnix())					{						$states[$key][2] = $states[$key][3] = 'JLIB_HTML_PUBLISHED_PENDING_ITEM';						$states[$key][5] = $states[$key][6] = 'pending';					}					if ($publish_down > $nullDate && $nowDate > $publish_down->toUnix())					{						$states[$key][2] = $states[$key][3] = 'JLIB_HTML_PUBLISHED_EXPIRED_ITEM';						$states[$key][5] = $states[$key][6] = 'expired';					}				}				// Add tips to titles				if ($tip)				{					$states[$key][1] = JText::_($states[$key][1]);					$states[$key][2] = JText::_($states[$key][2]) . '::' . $tip;					$states[$key][3] = JText::_($states[$key][3]) . '::' . $tip;					$states[$key][4] = true;				}			}			return self::state($states, $value, $i, array('prefix' => $prefix, 'translate' => !$tip), $enabled, true, $checkbox);		}		return self::state($states, $value, $i, $prefix, $enabled, true, $checkbox);	}	/**	 * Returns a isDefault state on a grid	 *	 * @param   integer       $value     The state value.	 * @param   integer       $i         The row index	 * @param   string|array  $prefix    An optional task prefix or an array of options	 * @param   boolean       $enabled   An optional setting for access control on the action.	 * @param   string        $checkbox  An optional prefix for checkboxes.	 *	 * @return  string  The HTML code	 *	 * @see     JHtmlJGrid::state	 * @since   11.1	 */	public static function isdefault($value, $i, $prefix = '', $enabled = true, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		$states = array(			1 => array('unsetDefault', 'JDEFAULT', 'JLIB_HTML_UNSETDEFAULT_ITEM', 'JDEFAULT', false, 'star', 'star'),			0 => array('setDefault', '', 'JLIB_HTML_SETDEFAULT_ITEM', '', false, 'star-empty', 'star-empty'),		);		return self::state($states, $value, $i, $prefix, $enabled, true, $checkbox);	}	/**	 * Returns an array of standard published state filter options.	 *	 * @param   array  $config  An array of configuration options.	 *                          This array can contain a list of key/value pairs where values are boolean	 *                          and keys can be taken from 'published', 'unpublished', 'archived', 'trash', 'all'.	 *                          These pairs determine which values are displayed.	 *	 * @return  string  The HTML code for the select tag	 *	 * @since   11.1	 */	public static function publishedOptions($config = array())	{		// Build the active state filter options.		$options = array();		if (!array_key_exists('published', $config) || $config['published'])		{			$options[] = JHtml::_('select.option', '1', 'JPUBLISHED');		}		if (!array_key_exists('unpublished', $config) || $config['unpublished'])		{			$options[] = JHtml::_('select.option', '0', 'JUNPUBLISHED');		}		if (!array_key_exists('archived', $config) || $config['archived'])		{			$options[] = JHtml::_('select.option', '2', 'JARCHIVED');		}		if (!array_key_exists('trash', $config) || $config['trash'])		{			$options[] = JHtml::_('select.option', '-2', 'JTRASHED');		}		if (!array_key_exists('all', $config) || $config['all'])		{			$options[] = JHtml::_('select.option', '*', 'JALL');		}		return $options;	}	/**	 * Returns a checked-out icon	 *	 * @param   integer       $i           The row index.	 * @param   string        $editorName  The name of the editor.	 * @param   string        $time        The time that the object was checked out.	 * @param   string|array  $prefix      An optional task prefix or an array of options	 * @param   boolean       $enabled     True to enable the action.	 * @param   string        $checkbox    An optional prefix for checkboxes.	 *	 * @return  string  The required HTML.	 *	 * @since   11.1	 */	public static function checkedout($i, $editorName, $time, $prefix = '', $enabled = false, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		$text = addslashes(htmlspecialchars($editorName, ENT_COMPAT, 'UTF-8'));		$date = addslashes(htmlspecialchars(JHtml::_('date', $time, JText::_('DATE_FORMAT_LC')), ENT_COMPAT, 'UTF-8'));		$time = addslashes(htmlspecialchars(JHtml::_('date', $time, 'H:i'), ENT_COMPAT, 'UTF-8'));		$active_title = JText::_('JLIB_HTML_CHECKIN') . '::' . $text . '<br />' . $date . '<br />' . $time;		$inactive_title = JText::_('JLIB_HTML_CHECKED_OUT') . '::' . $text . '<br />' . $date . '<br />' . $time;		return self::action(			$i, 'checkin', $prefix, JText::_('JLIB_HTML_CHECKED_OUT'), $active_title, $inactive_title, true, 'checkedout',			'checkedout', $enabled, false, $checkbox		);	}	/**	 * Creates a order-up action icon.	 *	 * @param   integer       $i         The row index.	 * @param   string        $task      An optional task to fire.	 * @param   string|array  $prefix    An optional task prefix or an array of options	 * @param   string        $text      An optional text to display	 * @param   boolean       $enabled   An optional setting for access control on the action.	 * @param   string        $checkbox  An optional prefix for checkboxes.	 *	 * @return  string  The required HTML.	 *	 * @since   11.1	 */	public static function orderUp($i, $task = 'orderup', $prefix = '', $text = 'JLIB_HTML_MOVE_UP', $enabled = true, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$text = array_key_exists('text', $options) ? $options['text'] : $text;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		return self::action($i, $task, $prefix, $text, $text, $text, false, 'uparrow', 'uparrow_disabled', $enabled, true, $checkbox);	}	/**	 * Creates a order-down action icon.	 *	 * @param   integer       $i         The row index.	 * @param   string        $task      An optional task to fire.	 * @param   string|array  $prefix    An optional task prefix or an array of options	 * @param   string        $text      An optional text to display	 * @param   boolean       $enabled   An optional setting for access control on the action.	 * @param   string        $checkbox  An optional prefix for checkboxes.	 *	 * @return  string  The required HTML.	 *	 * @since   11.1	 */	public static function orderDown($i, $task = 'orderdown', $prefix = '', $text = 'JLIB_HTML_MOVE_DOWN', $enabled = true, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$text = array_key_exists('text', $options) ? $options['text'] : $text;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		return self::action($i, $task, $prefix, $text, $text, $text, false, 'downarrow', 'downarrow_disabled', $enabled, true, $checkbox);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewArchive extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	protected $pagination = null;	public function display($tpl = null)	{		$app = JFactory::getApplication();		$user		= JFactory::getUser();		$state 		= $this->get('State');		$items 		= $this->get('Items');		$pagination	= $this->get('Pagination');		$pathway	= $app->getPathway();		$document	= JFactory::getDocument();		// Get the page/component configuration		$params = &$state->params;		foreach ($items as $item)		{			$item->catslug = ($item->category_alias) ? ($item->catid . ':' . $item->category_alias) : $item->catid;			$item->parent_slug = ($item->parent_alias) ? ($item->parent_id . ':' . $item->parent_alias) : $item->parent_id;			// No link for ROOT category			if ($item->parent_alias == 'root')			{				$item->parent_slug = null;			}		}		$form = new stdClass;		// Month Field		$months = array(			'' => JText::_('COM_CONTENT_MONTH'),			'01' => JText::_('JANUARY_SHORT'),			'02' => JText::_('FEBRUARY_SHORT'),			'03' => JText::_('MARCH_SHORT'),			'04' => JText::_('APRIL_SHORT'),			'05' => JText::_('MAY_SHORT'),			'06' => JText::_('JUNE_SHORT'),			'07' => JText::_('JULY_SHORT'),			'08' => JText::_('AUGUST_SHORT'),			'09' => JText::_('SEPTEMBER_SHORT'),			'10' => JText::_('OCTOBER_SHORT'),			'11' => JText::_('NOVEMBER_SHORT'),			'12' => JText::_('DECEMBER_SHORT')		);		$form->monthField = JHtml::_(			'select.genericlist',			$months,			'month',			array(				'list.attr' => 'size="1" class="inputbox"',				'list.select' => $state->get('filter.month'),				'option.key' => null			)		);		// Year Field		$years = array();		$years[] = JHtml::_('select.option', null, JText::_('JYEAR'));		for ($i = 2000; $i <= 2020; $i++)		{			$years[] = JHtml::_('select.option', $i, $i);		}		$form->yearField = JHtml::_(			'select.genericlist',			$years,			'year',			array('list.attr' => 'size="1" class="inputbox"', 'list.select' => $state->get('filter.year'))		);		$form->limitField = $pagination->getLimitBox();		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->filter     = $state->get('list.filter');		$this->form       = &$form;		$this->items      = &$items;		$this->params     = &$params;		$this->user       = &$user;		$this->pagination = &$pagination;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Plugin * @subpackage  User.profile * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * An example custom profile plugin. * * @package     Joomla.Plugin * @subpackage  User.profile * @since       1.6 */class PlgUserProfile extends JPlugin{	/**	 * Date of birth.	 *	 * @var    string	 * @since  3.1	 */	private $_date = '';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Constructor	 *	 * @param   object  $subject  The object to observe	 * @param   array   $config   An array that holds the plugin configuration	 *	 * @since   1.5	 */	public function __construct(& $subject, $config)	{		parent::__construct($subject, $config);		JFormHelper::addFieldPath(__DIR__ . '/fields');	}	/**	 * @param   string     $context  The context for the data	 * @param   integer    $data     The user id	 *	 * @return  boolean	 *	 * @since   1.6	 */	public function onContentPrepareData($context, $data)	{		// Check we are manipulating a valid form.		if (!in_array($context, array('com_users.profile', 'com_users.user', 'com_users.registration', 'com_admin.profile')))		{			return true;		}		if (is_object($data))		{			$userId = isset($data->id) ? $data->id : 0;			if (!isset($data->profile) and $userId > 0)			{				// Load the profile data from the database.				$db = JFactory::getDbo();				$db->setQuery(					'SELECT profile_key, profile_value FROM #__user_profiles' .						' WHERE user_id = ' . (int) $userId . " AND profile_key LIKE 'profile.%'" .						' ORDER BY ordering'				);				try				{					$results = $db->loadRowList();				}				catch (RuntimeException $e)				{					$this->_subject->setError($e->getMessage());					return false;				}				// Merge the profile data.				$data->profile = array();				foreach ($results as $v)				{					$k = str_replace('profile.', '', $v[0]);					$data->profile[$k] = json_decode($v[1], true);					if ($data->profile[$k] === null)					{						$data->profile[$k] = $v[1];					}				}			}			if (!JHtml::isRegistered('users.url'))			{				JHtml::register('users.url', array(__CLASS__, 'url'));			}			if (!JHtml::isRegistered('users.calendar'))			{				JHtml::register('users.calendar', array(__CLASS__, 'calendar'));			}			if (!JHtml::isRegistered('users.tos'))			{				JHtml::register('users.tos', array(__CLASS__, 'tos'));			}		}		return true;	}	public static function url($value)	{		if (empty($value))		{			return JHtml::_('users.value', $value);		}		else		{			$value = htmlspecialchars($value);			if (substr($value, 0, 4) == "http")			{				return '<a href="' . $value . '">' . $value . '</a>';			}			else			{				return '<a href="http://' . $value . '">' . $value . '</a>';			}		}	}	public static function calendar($value)	{		if (empty($value))		{			return JHtml::_('users.value', $value);		}		else		{			return JHtml::_('date', $value, null, null);		}	}	public static function tos($value)	{		if ($value)		{			return JText::_('JYES');		}		else		{			return JText::_('JNO');		}	}	/**	 * @param   JForm    $form    The form to be altered.	 * @param   array    $data    The associated data for the form.	 *	 * @return  boolean	 * @since   1.6	 */	public function onContentPrepareForm($form, $data)	{		if (!($form instanceof JForm))		{			$this->_subject->setError('JERROR_NOT_A_FORM');			return false;		}		// Check we are manipulating a valid form.		$name = $form->getName();		if (!in_array($name, array('com_admin.profile', 'com_users.user', 'com_users.profile', 'com_users.registration')))		{			return true;		}		// Add the registration fields to the form.		JForm::addFormPath(__DIR__ . '/profiles');		$form->loadFile('profile', false);		$fields = array(			'address1',			'address2',			'city',			'region',			'country',			'postal_code',			'phone',			'website',			'favoritebook',			'aboutme',			'dob',			'tos',		);		//Change fields description when displayed in front-end		$app = JFactory::getApplication();		if ($app->isSite())		{			$form->setFieldAttribute('address1', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('address2', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('city', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('region', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('country', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('postal_code', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('phone', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('website', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('favoritebook', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('aboutme', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('dob', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('tos', 'description', 'PLG_USER_PROFILE_FIELD_TOS_DESC_SITE', 'profile');		}		$tosarticle = $this->params->get('register_tos_article');		$tosenabled = $this->params->get('register-require_tos', 0);		// We need to be in the registration form, field needs to be enabled and we need an article ID		if ($name != 'com_users.registration' || !$tosenabled || !$tosarticle)		{			// We only want the TOS in the registration form			$form->removeField('tos', 'profile');		}		else		{			// Push the TOS article ID into the TOS field.			$form->setFieldAttribute('tos', 'article', $tosarticle, 'profile');		}		foreach ($fields as $field)		{			// Case using the users manager in admin			if ($name == 'com_users.user')			{				// Remove the field if it is disabled in registration and profile				if ($this->params->get('register-require_' . $field, 1) == 0					&& $this->params->get('profile-require_' . $field, 1) == 0				)				{					$form->removeField($field, 'profile');				}			}			// Case registration			elseif ($name == 'com_users.registration')			{				// Toggle whether the field is required.				if ($this->params->get('register-require_' . $field, 1) > 0)				{					$form->setFieldAttribute($field, 'required', ($this->params->get('register-require_' . $field) == 2) ? 'required' : '', 'profile');				}				else				{					$form->removeField($field, 'profile');				}				if ($this->params->get('register-require_dob', 1) > 0)				{					$form->setFieldAttribute('spacer', 'type', 'spacer', 'profile');				}			}			// Case profile in site or admin			elseif ($name == 'com_users.profile' || $name == 'com_admin.profile')			{				// Toggle whether the field is required.				if ($this->params->get('profile-require_' . $field, 1) > 0)				{					$form->setFieldAttribute($field, 'required', ($this->params->get('profile-require_' . $field) == 2) ? 'required' : '', 'profile');				}				else				{					$form->removeField($field, 'profile');				}				if ($this->params->get('profile-require_dob', 1) > 0)				{					$form->setFieldAttribute('spacer', 'type', 'spacer', 'profile');				}			}		}		return true;	}	/**	 * Method is called before user data is stored in the database	 *	 * @param   array    $user   Holds the old user data.	 * @param   boolean  $isnew  True if a new user is stored.	 * @param   array    $data   Holds the new user data.	 *	 * @return    boolean	 *	 * @since   3.1	 * @throws    InvalidArgumentException on invalid date.	 */	public function onUserBeforeSave($user, $isnew, $data)	{		// Check that the date is valid.		if (!empty($data['profile']['dob']))		{			try			{				$date = new JDate($data['profile']['dob']);				$this->_date = $date->format('Y-m-d');			}			catch (Exception $e)			{				// Throw an exception if date is not valid.				throw new InvalidArgumentException(JText::_('PLG_USER_PROFILE_ERROR_INVALID_DOB'));			}		}		return true;	}	public function onUserAfterSave($data, $isNew, $result, $error)	{		$userId = JArrayHelper::getValue($data, 'id', 0, 'int');		if ($userId && $result && isset($data['profile']) && (count($data['profile'])))		{			try			{				// Sanitize the date				$data['profile']['dob'] = $this->_date;				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->delete($db->quoteName('#__user_profiles'))					->where($db->quoteName('userid') . ' = ' . (int) $userId)					->where($db->quoteName('profile_key') . ' LIKE ' . $db->quote('profile.%'));				$db->setQuery($query);				$db->execute();				$tuples = array();				$order = 1;				foreach ($data['profile'] as $k => $v)				{					$tuples[] = '(' . $userId . ', ' . $db->quote('profile.' . $k) . ', ' . $db->quote(json_encode($v)) . ', ' . $order++ . ')';				}				$db->setQuery('INSERT INTO #__user_profiles VALUES ' . implode(', ', $tuples));				$db->execute();			}			catch (RuntimeException $e)			{				$this->_subject->setError($e->getMessage());				return false;			}		}		return true;	}	/**	 * Remove all user profile information for the given user ID	 *	 * Method is called after user data is deleted from the database	 *	 * @param   array    $user     Holds the user data	 * @param   boolean  $success  True if user was succesfully stored in the database	 * @param   string   $msg      Message	 *	 * @return  boolean	 */	public function onUserAfterDelete($user, $success, $msg)	{		if (!$success)		{			return false;		}		$userId = JArrayHelper::getValue($user, 'id', 0, 'int');		if ($userId)		{			try			{				$db = JFactory::getDbo();				$db->setQuery(					'DELETE FROM #__user_profiles WHERE user_id = ' . $userId .						" AND profile_key LIKE 'profile.%'"				);				$db->execute();			}			catch (Exception $e)			{				$this->_subject->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Cache page type object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheControllerPage extends JCacheController{	/**	 * @var    integer  ID property for the cache page object.	 * @since  11.1	 */	protected $_id;	/**	 * @var    string  Cache group	 * @since  11.1	 */	protected $_group;	/**	 * @var    object  Cache lock test	 * @since  11.1	 */	protected $_locktest = null;	/**	 * Get the cached page data	 *	 * @param   string   $id          The cache data id	 * @param   string   $group       The cache data group	 * @param   boolean  $wrkarounds  True to use wrkarounds	 *	 * @return  boolean  True if the cache is hit (false else)	 *	 * @since   11.1	 */	public function get($id = false, $group = 'page', $wrkarounds = true)	{		// If an id is not given, generate it from the request		if ($id == false)		{			$id = $this->_makeId();		}		// If the etag matches the page id ... set a no change header and exit : utilize browser cache		if (!headers_sent() && isset($_SERVER['HTTP_IF_NONE_MATCH']))		{			$etag = stripslashes($_SERVER['HTTP_IF_NONE_MATCH']);			if ($etag == $id)			{				$browserCache = isset($this->options['browsercache']) ? $this->options['browsercache'] : false;				if ($browserCache)				{					$this->_noChange();				}			}		}		// We got a cache hit... set the etag header and echo the page data		$data = $this->cache->get($id, $group);		$this->_locktest = new stdClass;		$this->_locktest->locked = null;		$this->_locktest->locklooped = null;		if ($data === false)		{			$this->_locktest = $this->cache->lock($id, $group);			if ($this->_locktest->locked == true && $this->_locktest->locklooped == true)			{				$data = $this->cache->get($id, $group);			}		}		if ($data !== false)		{			$data = unserialize(trim($data));			if ($wrkarounds === true)			{				$data = JCache::getWorkarounds($data);			}			$this->_setEtag($id);			if ($this->_locktest->locked == true)			{				$this->cache->unlock($id, $group);			}			return $data;		}		// Set id and group placeholders		$this->_id = $id;		$this->_group = $group;		return false;	}	/**	 * Stop the cache buffer and store the cached data	 *	 * @param   mixed    $data        The data to store	 * @param   string   $id          The cache data id	 * @param   string   $group       The cache data group	 * @param   boolean  $wrkarounds  True to use wrkarounds	 *	 * @return  boolean  True if cache stored	 *	 * @since   11.1	 */	public function store($data, $id, $group = null, $wrkarounds = true)	{		// Get page data from JResponse body		$data = JResponse::getBody();		// Get id and group and reset the placeholders		$id = $this->_id;		$group = $this->_group;		$this->_id = null;		$this->_group = null;		// Only attempt to store if page data exists		if ($data)		{			$data = $wrkarounds == false ? $data : JCache::setWorkarounds($data);			if ($this->_locktest->locked == false)			{				$this->_locktest = $this->cache->lock($id, $group);			}			$sucess = $this->cache->store(serialize($data), $id, $group);			if ($this->_locktest->locked == true)			{				$this->cache->unlock($id, $group);			}			return $sucess;		}		return false;	}	/**	 * Generate a page cache id	 *	 * @return  string  MD5 Hash : page cache id	 *	 * @since   11.1	 * @todo    Discuss whether this should be coupled to a data hash or a request	 * hash ... perhaps hashed with a serialized request	 */	protected function _makeId()	{		return JCache::makeId();	}	/**	 * There is no change in page data so send an	 * unmodified header and die gracefully	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _noChange()	{		$app = JFactory::getApplication();		// Send not modified header and exit gracefully		header('HTTP/1.x 304 Not Modified', true);		$app->close();	}	/**	 * Set the ETag header in the response	 *	 * @param   string  $etag  The entity tag (etag) to set	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _setEtag($etag)	{		JResponse::setHeader('ETag', $etag, true);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Gzip format adapter for the JArchive class * * This class is inspired from and draws heavily in code and concept from the Compress package of * The Horde Project <http://www.horde.org> * * @contributor  Michael Slusarz <slusarz@horde.org> * @contributor  Michael Cochrane <mike@graftonhall.co.nz> * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveGzip implements JArchiveExtractable{	/**	 * Gzip file flags.	 *	 * @var    array	 * @since  11.1	 */	private $_flags = array('FTEXT' => 0x01, 'FHCRC' => 0x02, 'FEXTRA' => 0x04, 'FNAME' => 0x08, 'FCOMMENT' => 0x10);	/**	 * Gzip file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * Extract a Gzip compressed file to a given path	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive to	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function extract($archive, $destination, array $options = array ())	{		$this->_data = null;		if (!extension_loaded('zlib'))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'The zlib extension is not available.');			}			else			{				throw new RuntimeException('The zlib extension is not available.');			}		}		if (!isset($options['use_streams']) || $options['use_streams'] == false)		{			$this->_data = file_get_contents($archive);			if (!$this->_data)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive');				}				else				{					throw new RuntimeException('Unable to read archive');				}			}			$position = $this->_getFilePosition();			$buffer = gzinflate(substr($this->_data, $position, strlen($this->_data) - $position));			if (empty($buffer))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to decompress data');				}				else				{					throw new RuntimeException('Unable to decompress data');				}			}			if (JFile::write($destination, $buffer) === false)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive');				}				else				{					throw new RuntimeException('Unable to write archive');				}			}		}		else		{			// New style! streams!			$input = JFactory::getStream();			// Use gz			$input->set('processingmethod', 'gz');			if (!$input->open($archive))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive (gz)');				}				else				{					throw new RuntimeException('Unable to read archive (gz)');				}			}			$output = JFactory::getStream();			if (!$output->open($destination, 'w'))			{				$input->close();				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive (gz)');				}				else				{					throw new RuntimeException('Unable to write archive (gz)');				}			}			do			{				$this->_data = $input->read($input->get('chunksize', 8196));				if ($this->_data)				{					if (!$output->write($this->_data))					{						$input->close();						if (class_exists('JError'))						{							return JError::raiseWarning(100, 'Unable to write file (gz)');						}						else						{							throw new RuntimeException('Unable to write file (gz)');						}					}				}			}			while ($this->_data);			$output->close();			$input->close();		}		return true;	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return extension_loaded('zlib');	}	/**	 * Get file data offset for archive	 *	 * @return  integer  Data position marker for archive	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function _getFilePosition()	{		// Gzipped file... unpack it first		$position = 0;		$info = @ unpack('CCM/CFLG/VTime/CXFL/COS', substr($this->_data, $position + 2));		if (!$info)		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to decompress data.');			}			else			{				throw new RuntimeException('Unable to decompress data.');			}		}		$position += 10;		if ($info['FLG'] & $this->_flags['FEXTRA'])		{			$XLEN = unpack('vLength', substr($this->_data, $position + 0, 2));			$XLEN = $XLEN['Length'];			$position += $XLEN + 2;		}		if ($info['FLG'] & $this->_flags['FNAME'])		{			$filenamePos = strpos($this->_data, "\x0", $position);			$position = $filenamePos + 1;		}		if ($info['FLG'] & $this->_flags['FCOMMENT'])		{			$commentPos = strpos($this->_data, "\x0", $position);			$position = $commentPos + 1;		}		if ($info['FLG'] & $this->_flags['FHCRC'])		{			$hcrc = unpack('vCRC', substr($this->_data, $position + 0, 2));			$hcrc = $hcrc['CRC'];			$position += 2;		}		return $position;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extended Utility class for all HTML drawing classes. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlRules{	/**	 * Creates the HTML for the permissions widget	 *	 * @param   array    $actions   Array of action objects	 * @param   integer  $assetId   Id of a specific asset to  create a widget for.	 * @param   integer  $parent    Id of the parent of the asset	 * @param   string   $control   The form control	 * @param   string   $idPrefix  Prefix for the ids assigned to specific action-group pairs	 *	 * @return  string   HTML for the permissions widget	 *	 * @since   11.1	 *	 * @see     JAccess	 * @see     JFormFieldRules	 */	public static function assetFormWidget($actions, $assetId = null, $parent = null, $control = 'jform[rules]', $idPrefix = 'jform_rules')	{		$images = self::_getImagesArray();		// Get the user groups.		$groups = self::_getUserGroups();		// Get the incoming inherited rules as well as the asset specific rules.		$inheriting = JAccess::getAssetRules($parent ? $parent : self::_getParentAssetId($assetId), true);		$inherited = JAccess::getAssetRules($assetId, true);		$rules = JAccess::getAssetRules($assetId);		$html = array();		$html[] = '<div class="acl-options">';		$html[] = JHtml::_('tabs.start', 'acl-rules-' . $assetId, array('useCookie' => 1));		$html[] = JHtml::_('tabs.panel', JText::_('JLIB_HTML_ACCESS_SUMMARY'), 'summary');		$html[] = '			<p>' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC') . '</p>';		$html[] = '			<table class="aclsummary-table" summary="' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC') . '">';		$html[] = '			<caption>' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC_CAPTION') . '</caption>';		$html[] = '			<tr>';		$html[] = '				<th class="col1 hidelabeltxt">' . JText::_('JLIB_RULES_GROUPS') . '</th>';		foreach ($actions as $i => $action)		{			$html[] = '				<th class="col' . ($i + 2) . '">' . JText::_($action->title) . '</th>';		}		$html[] = '			</tr>';		foreach ($groups as $i => $group)		{			$html[] = '			<tr class="row' . ($i % 2) . '">';			$html[] = '				<td class="col1">' . $group->text . '</td>';			foreach ($actions as $j => $action)			{				$html[] = '				<td class="col' . ($j + 2) . '">'					. ($assetId ? ($inherited->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])					: ($inheriting->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])) . '</td>';			}			$html[] = '			</tr>';		}		$html[] = ' 		</table>';		foreach ($actions as $action)		{			$actionTitle = JText::_($action->title);			$actionDesc = JText::_($action->description);			$html[] = JHtml::_('tabs.panel', $actionTitle, $action->name);			$html[] = '			<p>' . $actionDesc . '</p>';			$html[] = '			<table class="aclmodify-table" summary="' . strip_tags($actionDesc) . '">';			$html[] = '			<caption>' . JText::_('JLIB_HTML_ACCESS_MODIFY_DESC_CAPTION_ACL') . ' ' . $actionTitle . ' '				. JText::_('JLIB_HTML_ACCESS_MODIFY_DESC_CAPTION_TABLE') . '</caption>';			$html[] = '			<tr>';			$html[] = '				<th class="col1 hidelabeltxt">' . JText::_('JLIB_RULES_GROUP') . '</th>';			$html[] = '				<th class="col2">' . JText::_('JLIB_RULES_INHERIT') . '</th>';			$html[] = '				<th class="col3 hidelabeltxt">' . JText::_('JMODIFY') . '</th>';			$html[] = '				<th class="col4">' . JText::_('JCURRENT') . '</th>';			$html[] = '			</tr>';			foreach ($groups as $i => $group)			{				$selected = $rules->allow($action->name, $group->value);				$html[] = '			<tr class="row' . ($i % 2) . '">';				$html[] = '				<td class="col1">' . $group->text . '</td>';				$html[] = '				<td class="col2">'					. ($inheriting->allow($action->name, $group->identities) ? $images['allow-i'] : $images['deny-i']) . '</td>';				$html[] = '				<td class="col3">';				$html[] = '					<select id="' . $idPrefix . '_' . $action->name . '_' . $group->value					. '" class="inputbox" size="1" name="' . $control . '[' . $action->name . '][' . $group->value . ']" title="'					. JText::sprintf('JLIB_RULES_SELECT_ALLOW_DENY_GROUP', $actionTitle, $group->text) . '">';				$html[] = '						<option value=""' . ($selected === null ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_INHERIT') . '</option>';				$html[] = '						<option value="1"' . ($selected === true ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_ALLOWED') . '</option>';				$html[] = '						<option value="0"' . ($selected === false ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_DENIED') . '</option>';				$html[] = '					</select>';				$html[] = '				</td>';				$html[] = '				<td class="col4">'					. ($assetId ? ($inherited->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])					: ($inheriting->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])) . '</td>';				$html[] = '			</tr>';			}			$html[] = '			</table>';		}		$html[] = JHtml::_('tabs.end');		// Build the footer with legend and special purpose buttons.		$html[] = '	<div class="clr"></div>';		$html[] = '	<ul class="acllegend fltlft">';		$html[] = '		<li class="acl-allowed">' . JText::_('JLIB_RULES_ALLOWED') . '</li>';		$html[] = '		<li class="acl-denied">' . JText::_('JLIB_RULES_DENIED') . '</li>';		$html[] = '	</ul>';		$html[] = '</div>';		return implode("\n", $html);	}	/**	 * Get the id of the parent asset	 *	 * @param   integer  $assetId  The asset for which the parentid will be returned	 *	 * @return  integer  The id of the parent asset	 *	 * @since   11.1	 */	protected static function _getParentAssetId($assetId)	{		// Get a database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get the user groups from the database.		$query->select($db->quoteName('parent_id'))			->from($db->quoteName('#__assets'))			->where($db->quoteName('id') . ' = ' . (int) $assetId);		$db->setQuery($query);		return (int) $db->loadResult();	}	/**	 * Get the user groups	 *	 * @return  array  Array of user groups	 *	 * @since   11.1	 */	protected static function _getUserGroups()	{		// Get a database object.		$db = JFactory::getDbo();		// Get the user groups from the database.		$db->setQuery(			'SELECT a.id AS value, a.title AS text, b.id as parent'			. ' FROM #__usergroups AS a LEFT JOIN #__usergroups AS b ON a.lft >= b.lft AND a.rgt <= b.rgt'			. ' ORDER BY a.lft ASC, b.lft ASC'		);		$result = $db->loadObjectList();		$options = array();		// Pre-compute additional values.		foreach ($result as $option)		{			$end = end($options);			if ($end === false || $end->value != $option->value)			{				$end = $option;				$end->level = 0;				$options[] = $end;			}			else			{				$end->level++;			}			$end->identities[] = $option->parent;		}		return $options;	}	/**	 * Get the array of images associate with specific permissions	 *	 * @return  array  An associative  array of permissions and images	 *	 * @since   11.1	 */	protected static function _getImagesArray()	{		$images['allow-l'] = '<label class="icon-16-allow" title="' . JText::_('JLIB_RULES_ALLOWED') . '">' . JText::_('JLIB_RULES_ALLOWED')			. '</label>';		$images['deny-l'] = '<label class="icon-16-deny" title="' . JText::_('JLIB_RULES_DENIED') . '">' . JText::_('JLIB_RULES_DENIED') . '</label>';		$images['allow'] = '<a class="icon-16-allow" title="' . JText::_('JLIB_RULES_ALLOWED') . '"> </a>';		$images['deny'] = '<a class="icon-16-deny" title="' . JText::_('JLIB_RULES_DENIED') . '"> </a>';		$images['allow-i'] = '<a class="icon-16-allowinactive" title="' . JText::_('JRULE_ALLOWED_INHERITED') . '"> </a>';		$images['deny-i'] = '<a class="icon-16-denyinactive" title="' . JText::_('JRULE_DENIED_INHERITED') . '"> </a>';		return $images;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;jimport('joomla.filesystem.folder');jimport('joomla.filesystem.file');JFormHelper::loadFieldClass('radio');/** * Sample data Form Field class. * * @package  Joomla.Installation * @since    1.6 */class JFormFieldSample extends JFormFieldRadio{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Sample';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   1.6	 */	protected function getOptions()	{		$lang = JFactory::getLanguage();		$options = array();		$type = $this->form->getValue('db_type');		// Some database drivers share DDLs; point these drivers to the correct parent		if ($type == 'mysqli')		{			$type = 'mysql';		}		elseif ($type == 'sqlsrv')		{			$type = 'sqlazure';		}		// Get a list of files in the search path with the given filter.		$files = JFolder::files(JPATH_INSTALLATION . '/sql/' . $type, '^sample.*\.sql$');		// Add option to not install sampledata.		$options[] = JHtml::_('select.option', '', 'INSTL_SITE_INSTALL_SAMPLE_NONE');		// Build the options list from the list of files.		if (is_array($files))		{			foreach ($files as $file)			{				$options[] = JHtml::_('select.option', $file, $lang->hasKey($key = 'INSTL_' . ($file = JFile::stripExt($file)) . '_SET') ? $key : $file);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		if (!$this->value)		{			$conf = JFactory::getConfig();			if ($conf->get('sampledata'))			{				$this->value = $conf->get('sampledata');			}			else			{				$this->value = '';			}		}		return parent::getInput();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User notes table class * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersTableNote extends JTable{	/**	 * Constructor	 *	 * @param  JDatabaseDriver  &$db  Database object	 *	 * @since  2.5	 */	public function __construct(&$db)	{		parent::__construct('#__user_notes', 'id', $db);	}	/**	 * Overloaded store method for the notes table.	 *	 * @param   boolean  $updateNulls  Toggle whether null values should be updated.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 */	public function store($updateNulls = false)	{		$date = JFactory::getDate()->toSql();		$userId = JFactory::getUser()->get('id');		if (empty($this->id))		{			// New record.			$this->created_time = $date;			$this->created_user_id = $userId;		}		else		{			// Existing record.			$this->modified_time = $date;			$this->modified_user_id = $userId;		}		// Attempt to store the data.		return parent::store($updateNulls);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to check-in rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/publish	 * @since   2.5	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		$query = $this->_db->getQuery(true)			->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('state') . ' = ' . (int) $state);		// Build the WHERE clause for the primary keys.		$query->where($k . '=' . implode(' OR ' . $k . '=', $pks));		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = false;		}		else		{			$query->where('(checked_out = 0 OR checked_out = ' . (int) $userId . ')');			$checkin = true;		}		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery($query);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($this->_db->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentControllerFeatured extends ContentControllerArticles{	/**	 * Removes an item	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user = JFactory::getUser();		$ids  = $this->input->get('cid', array(), 'array');		// Access checks.		foreach ($ids as $i => $id)		{			if (!$user->authorise('core.delete', 'com_content.article.'.(int) $id))			{				// Prune items that you can't delete.				unset($ids[$i]);				JError::raiseNotice(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));			}		}		if (empty($ids))		{			JError::raiseWarning(500, JText::_('JERROR_NO_ITEMS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Remove the items.			if (!$model->featured($ids, 0))			{				JError::raiseWarning(500, $model->getError());			}		}		$this->setRedirect('index.php?option=com_content&view=featured');	}	/**	 * Method to publish a list of articles.	 *	 * @return  void	 * @since   1.0	 */	public function publish()	{		parent::publish();		$this->setRedirect('index.php?option=com_content&view=featured');	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Feature', $prefix = 'ContentModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API Changesets class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */class JOpenstreetmapChangesets extends JOpenstreetmapObject{	/**	 * Method to create a changeset	 * 	 * @param   array  $changesets  array which contains changeset data	 * 	 * @return  array  The xml response	 * 	 * @since   13.1	 */	public function createChangeset($changesets=array())	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key'],				'oauth_token_secret' => $token['secret']		);		// Set the API base		$base = 'changeset/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$xml = '<?xml version="1.0" encoding="UTF-8"?>			<osm version="0.6" generator="JOpenstreetmap">';		if (!empty($changesets))		{			// Create Changeset element for every changeset			foreach ($changesets as $tags)			{				$xml .= '<changeset>';				$tag_list = '';				if (!empty($tags))				{					// Create a list of tags for each changeset					foreach ($tags as $key => $value)					{						$xml .= '<tag k="' . $key . '" v="' . $value . '"/>';					}				}				$xml .= '</changeset>';			}		}		$xml .= '</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to read a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  array    The xml response about a changeset	 *  	 * @since   13.1	 */	public function readChangeset($id)	{		// Set the API base		$base = 'changeset/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->changeset;	}	/**	 * Method to update a changeset	 * 	 * @param   int    $id    identifier of the changeset	 * @param   array  $tags  array of tags to update	 * 	 * @return  array    The xml response of updated changeset	 * 	 * @since   13.1 	 */	public function updateChangeset($id, $tags=array() )	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create a list of tags to update changeset		$tag_list = '';		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<changeset>'				. $tag_list .				'</changeset>  				</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->changeset;	}	/**	 * Method to close a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  No value returns	 * 	 * @since   13.1	 */	public function closeChangeset($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/close';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['format'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $header);	}	/**	 * Method to download a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  array	The xml response of requested changeset	 * 	 * @since   13.1	 */	public function downloadChangeset($id)	{		// Set the API base		$base = 'changeset/' . $id . '/download';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->create;	}	/**	 * Method to expand the bounding box of a changeset	 * 	 * @param   int    $id     identifier of the changeset	 * @param   array  $nodes  list of lat lon about nodes	 * 	 * @return  array    The xml response of changed changeset	 * 	 * @since   13.1	 */	public function expandBBoxChangeset($id, $nodes)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/expand_bbox';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create a list of tags to update changeset		$node_list = '';		if (!empty($nodes))		{			foreach ($nodes as $node)			{				$node_list .= '<node lat="' . $node[0] . '" lon="' . $node[1] . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<changeset>'				. $node_list .				'</changeset>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->changeset;	}	/**	 * Method to Query on changesets	 *  	 * @param   string  $param  parameters for query	 * 	 * @return  array    The xml response	 * 	 * @since   13.1	 */	public function queryChangeset($param)	{		// Set the API base		$base = 'changesets/' . $param;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->osm;	}	/**	 * Method to upload a diff to a changeset	 * 	 * @param   string  $xml  diff data to upload	 * @param   int     $id   identifier of the changeset	 * 	 * @return  array    The xml response of result	 * 	 * @since   13.1	 */	public function diffUploadChangeset($xml, $id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/upload';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->diffResult;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$ordering 	= ($listOrder == 'a.lft');$canOrder	= $user->authorise('core.edit.state',	'com_tags');$saveOrder 	= ($listOrder == 'a.lft' && $listDirn == 'asc');if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_tags&task=tags.saveOrderAjax';	JHtml::_('sortablelist.sortable', 'categoryList', 'adminForm', strtolower($listDirn), $saveOrderingUrl, false, true);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function() {		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		} else {			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_tags&view=tags');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)): ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER'); ?>" />			</div>			<div class="btn-group hidden-phone">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>			<div class="clearfix"></div>		</div>		<table class="table table-striped" id="categoryList">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>				<th width="10%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort',  'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>				</th>					<th width="1%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php			$originalOrders = array();			foreach ($this->items as $i => $item) :				$orderkey   = array_search($item->id, $this->ordering[$item->parent_id]);				$canCreate  = $user->authorise('core.create',     'com_tags');				$canEdit    = $user->authorise('core.edit',       'com_tags');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_tags') && $canCheckin;				// Get the parents of item for sorting				if ($item->level > 1)				{					$parentsStr = "";					$_currentParentId = $item->parent_id;					$parentsStr = " ".$_currentParentId;					for ($j = 0; $j < $item->level; $j++)					{						foreach ($this->ordering as $k => $v)						{							$v = implode("-", $v);							$v = "-" . $v . "-";							if (strpos($v, "-" . $_currentParentId . "-") !== false)							{								$parentsStr .= " " . $k;								$_currentParentId = $k;								break;							}						}					}				}				else				{					$parentsStr = "";				}				?>					<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->parent_id;?>" item-id="<?php echo $item->id?>" parents="<?php echo $parentsStr?>" level="<?php echo $item->level?>">						<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel    = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>						<?php else : ?>							<span class="sortable-handler inactive">								<i class="icon-menu"></i>							</span>						<?php endif; ?>							<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $orderkey + 1;?>" />						</td>						<td class="center hidden-phone">							<?php echo JHtml::_('grid.id', $i, $item->id); ?>						</td>						<td class="center">							<?php echo JHtml::_('jgrid.published', $item->published, $i, 'tags.', $canChange);?>						</td>						<td>							<?php if ($item->level > 0): ?>							<?php echo str_repeat('<span class="gi">&mdash;</span>', $item->level - 1) ?>							<?php endif; ?>							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'tags.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit || $canEditOwn) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_tags&task=tag.edit&id='.$item->id);?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>								<?php echo $this->escape($item->title); ?>							<?php endif; ?>							<span class="small" title="<?php echo $this->escape($item->path); ?>">								<?php if (empty($item->note)) : ?>									<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>								<?php else : ?>									<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS_NOTE', $this->escape($item->alias), $this->escape($item->note));?>								<?php endif; ?>							</span>						</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_title); ?>					</td>					<td class="small nowrap hidden-phone">					<?php if ($item->language == '*') : ?>						<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>						</td>						<td class="center hidden-phone">							<span title="<?php echo sprintf('%d-%d', $item->lft, $item->rgt); ?>">								<?php echo (int) $item->id; ?></span>						</td>					</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<input type="hidden" name="original_order_values" value="<?php echo implode($originalOrders, ','); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Items View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewItems extends JViewLegacy{	protected $f_levels;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$lang 		= JFactory::getLanguage();		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		MenusHelper::addSubmenu('items');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->ordering = array();		// Preprocess the list of items to find ordering divisions.		foreach ($this->items as $item)		{			$this->ordering[$item->parent_id][] = $item->id;			// item type text			switch ($item->type)			{				case 'url':					$value = JText::_('COM_MENUS_TYPE_EXTERNAL_URL');					break;				case 'alias':					$value = JText::_('COM_MENUS_TYPE_ALIAS');					break;				case 'separator':					$value = JText::_('COM_MENUS_TYPE_SEPARATOR');					break;				case 'heading':					$value = JText::_('COM_MENUS_TYPE_HEADING');					break;				case 'component':				default:					// load language						$lang->load($item->componentname.'.sys', JPATH_ADMINISTRATOR, null, false, false)					||	$lang->load($item->componentname.'.sys', JPATH_ADMINISTRATOR.'/components/'.$item->componentname, null, false, false)					||	$lang->load($item->componentname.'.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					||	$lang->load($item->componentname.'.sys', JPATH_ADMINISTRATOR.'/components/'.$item->componentname, $lang->getDefault(), false, false);					if (!empty($item->componentname))					{						$value	= JText::_($item->componentname);						$vars	= null;						parse_str($item->link, $vars);						if (isset($vars['view']))						{							// Attempt to load the view xml file.							$file = JPATH_SITE.'/components/'.$item->componentname.'/views/'.$vars['view'].'/metadata.xml';							if (is_file($file) && $xml = simplexml_load_file($file))							{								// Look for the first view node off of the root node.								if ($view = $xml->xpath('view[1]'))								{									if (!empty($view[0]['title']))									{										$vars['layout'] = isset($vars['layout']) ? $vars['layout'] : 'default';										// Attempt to load the layout xml file.										// If Alternative Menu Item, get template folder for layout file										if (strpos($vars['layout'], ':') > 0)										{											// Use template folder for layout file											$temp = explode(':', $vars['layout']);											$file = JPATH_SITE.'/templates/'.$temp[0].'/html/'.$item->componentname.'/'.$vars['view'].'/'.$temp[1].'.xml';											// Load template language file											$lang->load('tpl_'.$temp[0].'.sys', JPATH_SITE, null, false, false)											||	$lang->load('tpl_'.$temp[0].'.sys', JPATH_SITE.'/templates/'.$temp[0], null, false, false)											||	$lang->load('tpl_'.$temp[0].'.sys', JPATH_SITE, $lang->getDefault(), false, false)											||	$lang->load('tpl_'.$temp[0].'.sys', JPATH_SITE.'/templates/'.$temp[0], $lang->getDefault(), false, false);										}										else										{											// Get XML file from component folder for standard layouts											$file = JPATH_SITE.'/components/'.$item->componentname.'/views/'.$vars['view'].'/tmpl/'.$vars['layout'].'.xml';										}										if (is_file($file) && $xml = simplexml_load_file($file))										{											// Look for the first view node off of the root node.											if ($layout = $xml->xpath('layout[1]'))											{												if (!empty($layout[0]['title']))												{													$value .= '  ' . JText::_(trim((string) $layout[0]['title']));												}											}											if (!empty($layout[0]->message[0]))											{												$item->item_type_desc = JText::_(trim((string) $layout[0]->message[0]));											}										}									}								}								unset($xml);							}							else							{								// Special case for absent views								$value .= '  ' . $vars['view'];							}						}					}					else					{						if (preg_match("/^index.php\?option=([a-zA-Z\-0-9_]*)/", $item->link, $result))						{							$value = JText::sprintf('COM_MENUS_TYPE_UNEXISTING', $result[1]);						}						else {							$value = JText::_('COM_MENUS_TYPE_UNKNOWN');						}					}					break;			}			$item->item_type = $value;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/menus.php';		$canDo	= MenusHelper::getActions($this->state->get('filter.parent_id'));		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_MENUS_VIEW_ITEMS_TITLE'), 'menumgr.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('item.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('item.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('items.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('items.unpublish', 'JTOOLBAR_UNPUBLISH', true);		}		if (JFactory::getUser()->authorise('core.admin'))		{			JToolbarHelper::checkin('items.checkin', 'JTOOLBAR_CHECKIN', true);		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'items.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('items.trash');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::makeDefault('items.setDefault', 'COM_MENUS_TOOLBAR_SET_HOME');		}		if (JFactory::getUser()->authorise('core.admin'))		{			JToolbarHelper::custom('items.rebuild', 'refresh.png', 'refresh_f2.png', 'JToolbar_Rebuild', false);		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		JToolbarHelper::help('JHELP_MENUS_MENU_ITEM_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_menus&view=items');		JHtmlSidebar::addFilter(			// @todo we need a label here			'',			'menutype',			JHtml::_('select.options', JHtml::_('menu.menus'), 'value', 'text', $this->state->get('filter.menutype')),			false		);		JHtmlSidebar::addFilter(			JText::_('COM_MENUS_OPTION_SELECT_LEVEL'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions', array('archived' => false)), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.lft' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.home' => JText::_('COM_MENUS_HEADING_HOME'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'association' => JText::_('COM_MENUS_HEADING_ASSOCIATION'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><div class="registration<?php echo $this->pageclass_sfx?>"><?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1><?php echo $this->escape($this->params->get('page_heading')); ?></h1>	</div><?php endif; ?>	<form id="member-registration" action="<?php echo JRoute::_('index.php?option=com_users&task=registration.register'); ?>" method="post" class="form-validate form-horizontal" enctype="multipart/form-data"><?php foreach ($this->form->getFieldsets() as $fieldset): // Iterate through the form fieldsets and display each one.?>	<?php $fields = $this->form->getFieldset($fieldset->name);?>	<?php if (count($fields)):?>		<fieldset>		<?php if (isset($fieldset->label)):// If the fieldset has a label set, display it as the legend.		?>			<legend><?php echo JText::_($fieldset->label);?></legend>		<?php endif;?>		<?php foreach ($fields as $field) :// Iterate through the fields in the set and display them.?>			<?php if ($field->hidden):// If the field is hidden, just display the input.?>				<?php echo $field->input;?>			<?php else:?>				<div class="control-group">					<div class="control-label">					<?php echo $field->label; ?>					<?php if (!$field->required && $field->type != 'Spacer') : ?>						<span class="optional"><?php echo JText::_('COM_USERS_OPTIONAL');?></span>					<?php endif; ?>					</div>					<div class="controls">						<?php echo $field->input;?>					</div>				</div>			<?php endif;?>		<?php endforeach;?>		</fieldset>	<?php endif;?><?php endforeach;?>		<div class="form-actions">			<button type="submit" class="btn btn-primary validate"><?php echo JText::_('JREGISTER');?></button>			<a class="btn" href="<?php echo JRoute::_('');?>" title="<?php echo JText::_('JCANCEL');?>"><?php echo JText::_('JCANCEL');?></a>			<input type="hidden" name="option" value="com_users" />			<input type="hidden" name="task" value="registration.register" />			<?php echo JHtml::_('form.token');?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_users * @since       1.5 */class UsersViewUser extends JViewLegacy{	protected $form;	protected $item;	protected $grouplist;	protected $groups;	protected $state;	/**	 * Display the view	 *	 * @since  1.5	 */	public function display($tpl = null)	{		$this->form			= $this->get('Form');		$this->item			= $this->get('Item');		$this->grouplist	= $this->get('Groups');		$this->groups		= $this->get('AssignedGroups');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->form->setValue('password', null);		$this->form->setValue('password2',	null);		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = UsersHelper::getActions();		$isNew	= ($this->item->id == 0);		$isProfile = $this->item->id == $user->id;		JToolbarHelper::title(JText::_($isNew ? 'COM_USERS_VIEW_NEW_USER_TITLE' : ($isProfile ? 'COM_USERS_VIEW_EDIT_PROFILE_TITLE' : 'COM_USERS_VIEW_EDIT_USER_TITLE')), $isNew ? 'user-add' : ($isProfile ? 'user-profile' : 'user-edit'));		if ($canDo->get('core.edit')||$canDo->get('core.create'))		{			JToolbarHelper::apply('user.apply');			JToolbarHelper::save('user.save');		}		if ($canDo->get('core.create')&&$canDo->get('core.manage'))		{			JToolbarHelper::save2new('user.save2new');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('user.cancel');		}		else		{			JToolbarHelper::cancel('user.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_USER_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">		window.addEvent('domready', function()		{			document.id('jform_searchstring').addEvent('focus', function()			{				if (!Joomla.overrider.states.refreshed)				{					<?php if ($this->state->get('cache_expired')) : ?>					Joomla.overrider.refreshCache();					Joomla.overrider.states.refreshed = true;					<?php endif; ?>				}				this.removeClass('invalid');			});		});	Joomla.submitbutton = function(task)	{		if (task == 'override.cancel' || document.formvalidator.isValid(document.id('override-form')))		{			Joomla.submitform(task, document.getElementById('override-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_languages&id='.$this->item->key); ?>" method="post" name="adminForm" id="override-form" class="form-validate form-horizontal">	<div class="row-fluid">		<div class="span6">			<fieldset>				<legend><?php echo empty($this->item->key) ? JText::_('COM_LANGUAGES_VIEW_OVERRIDE_EDIT_NEW_OVERRIDE_LEGEND') : JText::_('COM_LANGUAGES_VIEW_OVERRIDE_EDIT_EDIT_OVERRIDE_LEGEND'); ?></legend>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('key'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('key'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('override'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('override'); ?>					</div>				</div>				<?php if ($this->state->get('filter.client') == 'administrator') : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('both'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('both'); ?>					</div>				</div>				<?php endif; ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('language'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('client'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('client'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('file'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('file'); ?>					</div>				</div>			</fieldset>		</div>		<div class="span6">			<fieldset>				<legend><?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SEARCH_LEGEND'); ?></legend>				<div class="alert alert-info"><p><?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SEARCH_TIP'); ?></p></div>				<div class="control-group">					<?php echo $this->form->getInput('searchstring'); ?>					<button type="submit" class="btn btn-primary" onclick="Joomla.overrider.searchStrings();return false;">						<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SEARCH_BUTTON'); ?>					</button>					<span id="refresh-status" class="overrider-spinner  help-block">						<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_REFRESHING'); ?>					</span>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('searchtype'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('searchtype'); ?>					</div>				</div>			</fieldset>			<fieldset id="results-container" class="adminform">				<legend><?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_RESULTS_LEGEND'); ?></legend>				<span id="more-results">					<a href="javascript:Joomla.overrider.searchStrings(Joomla.overrider.states.more);">						<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_MORE_RESULTS'); ?></a>				</span>			</fieldset>			<input type="hidden" name="task" value="" />			<input type="hidden" name="id" value="<?php echo $this->item->key; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</div></form>
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.updater.update');jimport('legacy.application.helper');jimport('legacy.component.helper');/** * Language Installer model for the Joomla Core Installer. * * @package     Joomla.Installation * @subpackage  Model * @since       3.1 */class InstallationModelLanguages extends JModelBase{	/**	 * @var    object  Client object	 * @since  3.1	 */	protected $client = null;	/**	 * @var    array  Languages description	 * @since  3.1	 */	protected $data = null;	/**	 * @var    string  Language path	 * @since  3.1	 */	protected $path = null;	/**	 * @var    integer  Total number of languages installed	 * @since  3.1	 */	protected $langlist = null;	/**	 * Constructor	 *	 * Deletes the default installation config file and recreates it with the good config file.	 *	 * @since  3.1	 */	public function __construct()	{		// Overrides application config and set the configuration.php file so tokens and database works		JFactory::$config = null;		JFactory::getConfig(JPATH_SITE . '/configuration.php');		JFactory::$session = null;		parent::__construct();	}	/**	 * Generate a list of language choices to install in the Joomla CMS	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	public function getItems()	{		$updater = JUpdater::getInstance();		/*		 * The following function uses extension_id 600, that is the English language extension id.		 * In #__update_sites_extensions you should have 600 linked to the Accredited Translations Repo		 */		$updater->findUpdates(array(600), 0);		$db		= JFactory::getDbo();		$query	= $db->getQuery(true);		// Select the required fields from the updates table		$query->select('update_id, name, version')			->from('#__updates')			->order('name');		$db->setQuery($query);		$list = $db->loadObjectList();		if (!$list || $list instanceof Exception)		{			$list = array();		}		return $list;	}	/**	 * Method that installs in Joomla! the selected languages in the Languages View of the installer	 *	 * @param   array  $lids  list of the update_id value of the languages to install	 *	 * @return  boolean True if successful	 */	public function install($lids)	{		/* @var InstallationApplicationWeb $app */		$app       = JFactory::getApplication();		$installer = JInstaller::getInstance();		// Loop through every selected language		foreach ($lids as $id)		{			// Loads the update database object that represents the language			$language = JTable::getInstance('update');			$language->load($id);			// Get the url to the XML manifest file of the selected language			$remote_manifest = $this->getLanguageManifest($id);			if (!$remote_manifest)			{				// Could not find the url, the information in the update server may be corrupt				$message = JText::sprintf('INSTL_DEFAULTLANGUAGE_COULD_NOT_INSTALL_LANGUAGE', $language->name);				$message .= ' ' . JText::_('INSTL_DEFAULTLANGUAGE_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Based on the language XML manifest get the url of the package to download			$package_url = $this->getPackageUrl($remote_manifest);			if (!$package_url)			{				// Could not find the url , maybe the url is wrong in the update server, or there is not internet access				$message = JText::sprintf('INSTL_DEFAULTLANGUAGE_COULD_NOT_INSTALL_LANGUAGE', $language->name);				$message .= ' ' . JText::_('INSTL_DEFAULTLANGUAGE_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Download the package to the tmp folder			$package = $this->downloadPackage($package_url);			// Install the package			if (!$installer->install($package['dir']))			{				// There was an error installing the package				$message = JText::sprintf('INSTL_DEFAULTLANGUAGE_COULD_NOT_INSTALL_LANGUAGE', $language->name);				$message .= ' ' . JText::_('INSTL_DEFAULTLANGUAGE_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Cleanup the install files in tmp folder			if (!is_file($package['packagefile']))			{				$config = JFactory::getConfig();				$package['packagefile'] = $config->get('tmp_path') . '/' . $package['packagefile'];			}			JInstallerHelper::cleanupInstall($package['packagefile'], $package['extractdir']);			// Delete the installed language from the list			$language->delete($id);		}		return true;	}	/**	 * Gets the manifest file of a selected language from a the language list in a update server.	 *	 * @param   integer  $uid  The id of the language in the #__updates table	 *	 * @return  string	 *	 * @since   3.1	 */	protected function getLanguageManifest($uid)	{		$instance = JTable::getInstance('update');		$instance->load($uid);		$detailurl = trim($instance->detailsurl);		return $detailurl;	}	/**	 * Finds the url of the package to download.	 *	 * @param   string  $remote_manifest  url to the manifest XML file of the remote package	 *	 * @return  string|bool	 *	 * @since   3.1	 */	protected function getPackageUrl($remote_manifest)	{		$update = new JUpdate;		$update->loadFromXML($remote_manifest);		$package_url = trim($update->get('downloadurl', false)->_data);		return $package_url;	}	/**	 * Download a language package from a URL and unpack it in the tmp folder.	 *	 * @param   string  $url  url of the package	 *	 * @return  array|bool Package details or false on failure	 *	 * @since   3.1	 */	protected function downloadPackage($url)	{		// Download the package from the given URL		$p_file = JInstallerHelper::downloadPackage($url);		// Was the package downloaded?		if (!$p_file)		{			JFactory::getApplication()->enqueueMessage(JText::_('COM_INSTALLER_MSG_INSTALL_INVALID_URL'), 'warning');			return false;		}		$config		= JFactory::getConfig();		$tmp_dest	= $config->get('tmp_path');		// Unpack the downloaded package file		$package = JInstallerHelper::unpack($tmp_dest . '/' . $p_file);		return $package;	}	/**	 * Method to get Languages item data for the Administrator	 *	 * @return  array	 *	 * @since   3.1	 */	public function getInstalledlangsAdministrator()	{		return $this->getInstalledlangs('administrator');	}	/**	 * Method to get Languages item data for the Frontend	 *	 * @return  array	 *	 * @since   3.1	 */	public function getInstalledlangsFrontend()	{		return $this->getInstalledlangs('site');	}	/**	 * Method to get Languages item data	 *	 * @param   string  $cms_client  name of the cms client	 *	 * @return  array	 *	 * @since   3.1	 */	protected function getInstalledlangs($cms_client = 'administrator')	{		// Get information		$path     = $this->getPath();		$client   = $this->getClient($cms_client);		$langlist = $this->getLanguageList($client->id);		// Compute all the languages		$data = array();		foreach ($langlist as $lang)		{			$file = $path . '/' . $lang . '/' . $lang . '.xml';			$info = JInstaller::parseXMLInstallFile($file);			$row = new stdClass;			$row->language = $lang;			if (!is_array($info))			{				continue;			}			foreach ($info as $key => $value)			{				$row->$key = $value;			}			// If current then set published			$params = JComponentHelper::getParams('com_languages');			if ($params->get($client->name, 'en-GB') == $row->language)			{				$row->published	= 1;			}			else			{				$row->published = 0;			}			$row->checked_out = 0;			$data[] = $row;		}		usort($data, array($this, 'compareLanguages'));		return $data;	}	/**	 * Method to get installed languages data.	 *	 * @param   integer  $client_id  The client ID to retrieve data for	 *	 * @return  object  The language data	 *	 * @since   3.1	 */	protected function getLanguageList($client_id = 1)	{		// Create a new db object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Select field element from the extensions table.		$query->select('a.element, a.name')			->from('#__extensions AS a')			->where('a.type = ' . $db->quote('language'))			->where('state = 0')			->where('enabled = 1')			->where('client_id=' . (int) $client_id);		$db->setQuery($query);		$this->langlist = $db->loadColumn();		return $this->langlist;	}	/**	 * Method to compare two languages in order to sort them	 *	 * @param   object  $lang1  the first language	 * @param   object  $lang2  the second language	 *	 * @return  integer	 *	 * @since   3.1	 */	protected function compareLanguages($lang1, $lang2)	{		return strcmp($lang1->name, $lang2->name);	}	/**	 * Method to get the path	 *	 * @return  string  The path to the languages folders	 *	 * @since   3.1	 */	protected function getPath()	{		if (is_null($this->path))		{			$client = $this->getClient();			$this->path = JLanguage::getLanguagePath($client->path);		}		return $this->path;	}	/**	 * Method to get the client object of Administrator or FrontEnd	 *	 * @param   string  $client  name of the client object	 *	 * @return  object	 *	 * @since   3.1	 */	protected function getClient($client = 'administrator')	{		$this->client = JApplicationHelper::getClientInfo($client, true);		return $this->client;	}	/**	 * Method to set the default language.	 *	 * @param   string  $language    The language to be set as default	 * @param   string  $cms_client  The name of the CMS client	 *	 * @return  boolean	 *	 * @since   3.1	 */	public function setDefault($language, $cms_client = 'administrator')	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		$client	= $this->getClient($cms_client);		$params = JComponentHelper::getParams('com_languages');		$params->set($client->name, $language);		$table = JTable::getInstance('extension');		$id    = $table->find(array('element' => 'com_languages'));		// Load		if (!$table->load($id))		{			$app->enqueueMessage($table->getError(), 'warning');			return false;		}		$table->params = (string) $params;		// Pre-save checks		if (!$table->check())		{			$app->enqueueMessage($table->getError(), 'warning');			return false;		}		// Save the changes		if (!$table->store())		{			$app->enqueueMessage($table->getError(), 'warning');			return false;		}		return true;	}	/**	 * Get the current setup options from the session.	 *	 * @return  array	 *	 * @since   3.1	 */	public function getOptions()	{		$session = JFactory::getSession();		$options = $session->get('setup.options', array());		return $options;	}}
<?php/** * @package    Joomla.Libraries * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;// Set the platform root path as a constant if necessary.if (!defined('JPATH_PLATFORM')){	define('JPATH_PLATFORM', __DIR__);}// Import the library loader if necessary.if (!class_exists('JLoader')){	require_once JPATH_PLATFORM . '/loader.php';}class_exists('JLoader') or die;// Register the library base path for CMS libraries.JLoader::registerPrefix('J', JPATH_PLATFORM . '/cms');// Register a handler for uncaught exceptions that shows a pretty error page when possibleset_exception_handler(array('JErrorPage', 'render'));// Define the Joomla version if not already defined.if (!defined('JVERSION')){	$jversion = new JVersion;	define('JVERSION', $jversion->getShortVersion());}// Set up the message queue logger for web requestsif (array_key_exists('REQUEST_METHOD', $_SERVER)){	JLog::addLogger(array('logger' => 'messagequeue'), JLog::ALL, array('jerror'));}// Register classes where the names have been changed to fit the autoloader rules// @deprecated  4.0JLoader::register('JToolBar', JPATH_PLATFORM . '/cms/toolbar/toolbar.php');JLoader::register('JButton',  JPATH_PLATFORM . '/cms/toolbar/button.php');JLoader::register('JInstallerComponent',  JPATH_PLATFORM . '/cms/installer/adapter/component.php');JLoader::register('JInstallerFile',  JPATH_PLATFORM . '/cms/installer/adapter/file.php');JLoader::register('JInstallerLanguage',  JPATH_PLATFORM . '/cms/installer/adapter/language.php');JLoader::register('JInstallerLibrary',  JPATH_PLATFORM . '/cms/installer/adapter/library.php');JLoader::register('JInstallerModule',  JPATH_PLATFORM . '/cms/installer/adapter/module.php');JLoader::register('JInstallerPackage',  JPATH_PLATFORM . '/cms/installer/adapter/package.php');JLoader::register('JInstallerPlugin',  JPATH_PLATFORM . '/cms/installer/adapter/plugin.php');JLoader::register('JInstallerTemplate',  JPATH_PLATFORM . '/cms/installer/adapter/template.php');JLoader::register('JExtension',  JPATH_PLATFORM . '/cms/installer/extension.php');
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'source.cancel' || document.formvalidator.isValid(document.id('source-form')))		{			<?php echo $this->form->getField('source')->save(); ?>			Joomla.submitform(task, document.getElementById('source-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_templates&layout=edit'); ?>" method="post" name="adminForm" id="source-form" class="form-validate">	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<fieldset class="adminform">		<legend><?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_FILENAME', $this->source->filename, $this->template->element); ?></legend>		<?php echo $this->form->getLabel('source'); ?>		<div class="clr"></div>		<div class="editor-border">		<?php echo $this->form->getInput('source'); ?>		</div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</fieldset>	<?php echo $this->form->getInput('extension_id'); ?>	<?php echo $this->form->getInput('filename'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags helper. * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsHelper{	/**	 * Configure the Submenu links.	 *	 * @param   string  The extension.	 *	 * @return  void	 *	 * @since   3.1	 */	public static function addSubmenu($extension)	{		$parts = explode('.', $extension);		$component = $parts[0];		if (count($parts) > 1)		{			$section = $parts[1];		}		// Try to find the component helper.		$file = JPath::clean(JPATH_ADMINISTRATOR . '/components/com_tags/helpers/tags.php');		if (file_exists($file))		{			require_once $file;			$cName = 'TagsHelper';			if (class_exists($cName))			{				if (is_callable(array($cName, 'addSubmenu')))				{					$lang = JFactory::getLanguage();					// loading language file from the administrator/language directory then					// loading language file from the administrator/components/*extension*/language directory						$lang->load($component, JPATH_BASE, null, false, false)					||	$lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), null, false, false)					||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)					||	$lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), $lang->getDefault(), false, false);				}			}		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since   3.1	 */	public static function getActions()	{		$user   = JFactory::getUser();		$result = new JObject;		$assetName = 'com_tags';		$level     = 'component';		$actions   = JAccess::getActions('com_tags', $level);		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Language installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterLanguage extends JAdapterInstance{	/**	 * Core language pack flag	 *	 * @var    boolean	 * @since  12.1	 */	protected $core = false;	/**	 * Custom install method	 *	 * Note: This behaves badly due to hacks made in the middle of 1.5.x to add	 * the ability to install multiple distinct packs in one install. The	 * preferred method is to use a package to install multiple language packs.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent				->setPath(				'source',				($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/language/' . $this->parent->extension->element			);		}		$this->manifest = $this->parent->getManifest();		// Get the client application target		if ($cname = (string) $this->manifest->attributes()->client)		{			// Attempt to map the client to a base path			$client = JApplicationHelper::getClientInfo($cname, true);			if ($client === null)			{				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_UNKNOWN_CLIENT_TYPE', $cname)));				return false;			}			$basePath = $client->path;			$clientId = $client->id;			$element = $this->manifest->files;			return $this->_install($cname, $basePath, $clientId, $element);		}		else		{			// No client attribute was found so we assume the site as the client			$cname = 'site';			$basePath = JPATH_SITE;			$clientId = 0;			$element = $this->manifest->files;			return $this->_install($cname, $basePath, $clientId, $element);		}	}	/**	 * Install function that is designed to handle individual clients	 *	 * @param   string   $cname     Cname @todo: not used	 * @param   string   $basePath  The base name.	 * @param   integer  $clientId  The client id.	 * @param   object   &$element  The XML element.	 *	 * @return  boolean	 *	 * @since  3.1	 */	protected function _install($cname, $basePath, $clientId, &$element)	{		$this->manifest = $this->parent->getManifest();		// Get the language name		// Set the extensions name		$name = JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd');		$this->set('name', $name);		// Get the Language tag [ISO tag, eg. en-GB]		$tag = (string) $this->manifest->tag;		// Check if we found the tag - if we didn't, we may be trying to install from an older language package		if (!$tag)		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::_('JLIB_INSTALLER_ERROR_NO_LANGUAGE_TAG')));			return false;		}		$this->set('tag', $tag);		// Set the language installation path		$this->parent->setPath('extension_site', $basePath . '/language/' . $tag);		// Do we have a meta file in the file list?  In other words... is this a core language pack?		if ($element && count($element->children()))		{			$files = $element->children();			foreach ($files as $file)			{				if ((string) $file->attributes()->file == 'meta')				{					$this->core = true;					break;				}			}		}		// If the language directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_site')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_site')))			{				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT',						JText::sprintf('JLIB_INSTALLER_ERROR_CREATE_FOLDER_FAILED', $this->parent->getPath('extension_site'))					)				);				return false;			}		}		else		{			// Look for an update function or update tag			$updateElement = $this->manifest->update;			// Upgrade manually set or update tag detected			if ($this->parent->isUpgrade() || $updateElement)			{				// Transfer control to the update function				return $this->update();			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is set				// We didn't have overwrite set, find an update function or find an update tag so lets call it safe				if (file_exists($this->parent->getPath('extension_site')))				{					// If the site exists say so.					JLog::add(						JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_FOLDER_IN_USE', $this->parent->getPath('extension_site'))),						JLog::WARNING, 'jerror'					);				}				else				{					// If the admin exists say so.					JLog::add(						JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_FOLDER_IN_USE', $this->parent->getPath('extension_administrator'))),						JLog::WARNING, 'jerror'					);				}				return false;			}		}		/*		 * If we created the language directory we will want to remove it if we		 * have to roll back the installation, so let's add it to the installation		 * step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_site')));		}		// Copy all the necessary files		if ($this->parent->parseFiles($element) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseMedia($this->manifest->media);		// Copy all the necessary font files to the common pdf_fonts directory		$this->parent->setPath('extension_site', $basePath . '/language/pdf_fonts');		$overwrite = $this->parent->setOverwrite(true);		if ($this->parent->parseFiles($this->manifest->fonts) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		$this->parent->setOverwrite($overwrite);		// Get the language description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Add an entry to the extension table with a whole heap of defaults		$row = JTable::getInstance('extension');		$row->set('name', $this->get('name'));		$row->set('type', 'language');		$row->set('element', $this->get('tag'));		// There is no folder for languages		$row->set('folder', '');		$row->set('enabled', 1);		$row->set('protected', 0);		$row->set('access', 0);		$row->set('client_id', $clientId);		$row->set('params', $this->parent->getParams());		$row->set('manifest_cache', $this->parent->generateManifestCache());		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', $row->getError()));			return false;		}		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('tag'), 'type' => 'language', 'client_id' => '', 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		return $row->get('extension_id');	}	/**	 * Custom update method	 *	 * @return  boolean  True on success, false on failure	 *	 * @since   3.1	 */	public function update()	{		$xml = $this->parent->getManifest();		$this->manifest = $xml;		$cname = $xml->attributes()->client;		// Attempt to map the client to a base path		$client = JApplicationHelper::getClientInfo($cname, true);		if ($client === null || (empty($cname) && $cname !== 0))		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_UNKNOWN_CLIENT_TYPE', $cname)));			return false;		}		$basePath = $client->path;		$clientId = $client->id;		// Get the language name		// Set the extensions name		$name = (string) $this->manifest->name;		$name = JFilterInput::getInstance()->clean($name, 'cmd');		$this->set('name', $name);		// Get the Language tag [ISO tag, eg. en-GB]		$tag = (string) $xml->tag;		// Check if we found the tag - if we didn't, we may be trying to install from an older language package		if (!$tag)		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::_('JLIB_INSTALLER_ERROR_NO_LANGUAGE_TAG')));			return false;		}		$this->set('tag', $tag);		$folder = $tag;		// Set the language installation path		$this->parent->setPath('extension_site', $basePath . '/language/' . $this->get('tag'));		// Do we have a meta file in the file list?  In other words... is this a core language pack?		if (count($xml->files->children()))		{			foreach ($xml->files->children() as $file)			{				if ((string) $file->attributes()->file == 'meta')				{					$this->core = true;					break;				}			}		}		// Copy all the necessary files		if ($this->parent->parseFiles($xml->files) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseMedia($xml->media);		// Copy all the necessary font files to the common pdf_fonts directory		$this->parent->setPath('extension_site', $basePath . '/language/pdf_fonts');		$overwrite = $this->parent->setOverwrite(true);		if ($this->parent->parseFiles($xml->fonts) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		$this->parent->setOverwrite($overwrite);		// Get the language description and set it as message		$this->parent->set('message', (string) $xml->description);		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('tag'), 'type' => 'language', 'client_id' => $clientId));		if ($uid)		{			$update->delete($uid);		}		// Update an entry to the extension table		$row = JTable::getInstance('extension');		$eid = $row->find(array('element' => strtolower($this->get('tag')), 'type' => 'language', 'client_id' => $clientId));		if ($eid)		{			$row->load($eid);		}		else		{			// Set the defaults			// There is no folder for language			$row->set('folder', '');			$row->set('enabled', 1);			$row->set('protected', 0);			$row->set('access', 0);			$row->set('client_id', $clientId);			$row->set('params', $this->parent->getParams());		}		$row->set('name', $this->get('name'));		$row->set('type', 'language');		$row->set('element', $this->get('tag'));		$row->set('manifest_cache', $this->parent->generateManifestCache());		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', $row->getError()));			return false;		}		return $row->get('extension_id');	}	/**	 * Custom uninstall method	 *	 * @param   string  $eid  The tag of the language to uninstall	 *	 * @return  mixed  Return value for uninstall method in component uninstall file	 *	 * @since   3.1	 */	public function uninstall($eid)	{		// Load up the extension details		$extension = JTable::getInstance('extension');		$extension->load($eid);		// Grab a copy of the client details		$client = JApplicationHelper::getClientInfo($extension->get('client_id'));		// Check the element isn't blank to prevent nuking the languages directory...just in case		$element = $extension->get('element');		if (empty($element))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_ELEMENT_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		// Check that the language is not protected, Normally en-GB.		$protected = $extension->get('protected');		if ($protected == 1)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_PROTECTED'), JLog::WARNING, 'jerror');			return false;		}		// Verify that it's not the default language for that client		$params = JComponentHelper::getParams('com_languages');		if ($params->get($client->name) == $element)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_DEFAULT'), JLog::WARNING, 'jerror');			return false;		}		// Construct the path from the client, the language and the extension element name		$path = $client->path . '/language/' . $element;		// Get the package manifest object and remove media		$this->parent->setPath('source', $path);		// We do findManifest to avoid problem when uninstalling a list of extension: getManifest cache its manifest file		$this->parent->findManifest();		$this->manifest = $this->parent->getManifest();		$this->parent->removeFiles($this->manifest->media);		// Check it exists		if (!JFolder::exists($path))		{			// If the folder doesn't exist lets just nuke the row as well and presume the user killed it for us			$extension->delete();			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_PATH_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		if (!JFolder::delete($path))		{			// If deleting failed we'll leave the extension entry in tact just in case			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_DIRECTORY'), JLog::WARNING, 'jerror');			return false;		}		// Remove the extension table entry		$extension->delete();		// Setting the language of users which have this language as the default language		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->from('#__users')			->select('*');		$db->setQuery($query);		$users = $db->loadObjectList();		if ($client->name == 'administrator')		{			$param_name = 'admin_language';		}		else		{			$param_name = 'language';		}		$count = 0;		foreach ($users as $user)		{			$registry = new JRegistry;			$registry->loadString($user->params);			if ($registry->get($param_name) == $element)			{				$registry->set($param_name, '');				$query = $db->getQuery(true)					->update('#__users')					->set('params=' . $db->quote($registry))					->where('id=' . (int) $user->id);				$db->setQuery($query);				$db->execute();				$count++;			}		}		if (!empty($count))		{			JLog::add(JText::plural('JLIB_INSTALLER_NOTICE_LANG_RESET_USERS', $count), JLog::NOTICE, 'jerror');		}		// All done!		return true;	}	/**	 * Custom discover method	 * Finds language files	 *	 * @return  boolean  True on success	 *	 * @since  3.1	 */	public function discover()	{		$results = array();		$site_languages = JFolder::folders(JPATH_SITE . '/language');		$admin_languages = JFolder::folders(JPATH_ADMINISTRATOR . '/language');		foreach ($site_languages as $language)		{			if (file_exists(JPATH_SITE . '/language/' . $language . '/' . $language . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(JPATH_SITE . '/language/' . $language . '/' . $language . '.xml');				$extension = JTable::getInstance('extension');				$extension->set('type', 'language');				$extension->set('client_id', 0);				$extension->set('element', $language);				$extension->set('folder', '');				$extension->set('name', $language);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		foreach ($admin_languages as $language)		{			if (file_exists(JPATH_ADMINISTRATOR . '/language/' . $language . '/' . $language . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(JPATH_ADMINISTRATOR . '/language/' . $language . '/' . $language . '.xml');				$extension = JTable::getInstance('extension');				$extension->set('type', 'language');				$extension->set('client_id', 1);				$extension->set('element', $language);				$extension->set('folder', '');				$extension->set('name', $language);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		return $results;	}	/**	 * Custom discover install method	 * Basically updates the manifest cache and leaves everything alone	 *	 * @return  integer  The extension id	 *	 * @since   3.1	 */	public function discover_install()	{		// Need to find to find where the XML file is since we don't store this normally		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$short_element = $this->parent->extension->element;		$manifestPath = $client->path . '/language/' . $short_element . '/' . $short_element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$this->parent->setPath('source', $client->path . '/language/' . $short_element);		$this->parent->setPath('extension_root', $this->parent->getPath('source'));		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		// @todo remove code: $this->parent->extension->params = $this->parent->getParams();		try		{			$this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}		return $this->parent->extension->get('extension_id');	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/language/' . $this->parent->extension->element . '/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		if ($this->parent->extension->store())		{			return true;		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_MOD_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterLanguage instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerLanguage extends JInstallerAdapterLanguage{}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('bootstrap.tooltip');JHtml::_('formbehavior.chosen');$document = JFactory::getDocument();$mainDirection = $document->direction == 'rtl' ? 'right' : 'left';$altDirection  = $document->direction == 'rtl' ? 'left' : 'right';?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="form-login" class="form-inline">	<fieldset class="loginform">		<div class="control-group">			<div class="controls">				<div class="input-prepend input-append">					<span class="add-on">						<i class="icon-user hasTooltip" data-placement="<?php echo $mainDirection; ?>" title="<?php echo JText::_('JGLOBAL_USERNAME'); ?>"></i>						<label for="mod-login-username" class="element-invisible">							<?php echo JText::_('JGLOBAL_USERNAME'); ?>						</label>					</span>					<input name="username" tabindex="1" id="mod-login-username" type="text" class="input-medium" placeholder="<?php echo JText::_('JGLOBAL_USERNAME'); ?>" size="15"/>					<a href="<?php echo JUri::root(); ?>index.php?option=com_users&view=remind" class="btn width-auto hasTooltip" data-placement="<?php echo $altDirection; ?>" title="<?php echo JText::_('MOD_LOGIN_REMIND'); ?>">						<i class="icon-help" title="<?php echo JText::_('MOD_LOGIN_REMIND'); ?>"></i>					</a>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="input-prepend input-append">					<span class="add-on">						<i class="icon-lock hasTooltip" data-placement="<?php echo $mainDirection; ?>" title="<?php echo JText::_('JGLOBAL_PASSWORD'); ?>"></i>						<label for="mod-login-password" class="element-invisible">							<?php echo JText::_('JGLOBAL_PASSWORD'); ?>						</label>					</span>					<input name="passwd" tabindex="2" id="mod-login-password" type="password" class="input-medium" placeholder="<?php echo JText::_('JGLOBAL_PASSWORD'); ?>" size="15"/>					<a href="<?php echo JUri::root(); ?>index.php?option=com_users&view=reset" class="btn width-auto hasTooltip" data-placement="<?php echo $altDirection; ?>" title="<?php echo JText::_('MOD_LOGIN_RESET'); ?>">						<i class="icon-help" title="<?php echo JText::_('MOD_LOGIN_RESET'); ?>"></i>					</a>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="input-prepend">					<span class="add-on">						<i class="icon-comment hasTooltip" data-placement="<?php echo $mainDirection; ?>" class="hasTooltip" title="<?php echo JText::_('MOD_LOGIN_LANGUAGE'); ?>"></i>						<label for="lang" class="element-invisible">							<?php echo JText::_('MOD_LOGIN_LANGUAGE'); ?>						</label>					</span>					<?php echo $langs; ?>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="btn-group pull-left">					<button tabindex="3" class="btn btn-primary btn-large">						<i class="icon-lock icon-white"></i> <?php echo JText::_('MOD_LOGIN_LOGIN'); ?>					</button>				</div>			</div>		</div>		<input type="hidden" name="option" value="com_login"/>		<input type="hidden" name="task" value="login"/>		<input type="hidden" name="return" value="<?php echo $return; ?>"/>		<?php echo JHtml::_('form.token'); ?>	</fieldset></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports a modal newsfeeds picker. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class JFormFieldModal_Newsfeeds extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Modal_Newsfeeds';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		// Load the javascript		JHtml::_('behavior.framework');		JHtml::_('behavior.modal', 'input.modal');		// Build the script.		$script = array();		$script[] = '	function jSelectChart_'.$this->id.'(id, name, object) {';		$script[] = '		document.id("'.$this->id.'_id").value = id;';		$script[] = '		document.id("'.$this->id.'_name").value = name;';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Build the script.		$script = array();		$script[] = '	window.addEvent("domready", function() {';		$script[] = '		var div = new Element("div").setStyle("display", "none").inject(document.id("menu-types"), "before");';		$script[] = '		document.id("menu-types").inject(div, "bottom");';		$script[] = '	});';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Get the title of the linked chart		$db = JFactory::getDbo();		$db->setQuery(			'SELECT name' .			' FROM #__newsfeeds' .			' WHERE id = '.(int) $this->value		);		try		{			$title = $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage);		}		if (empty($title))		{			$title = JText::_('COM_NEWSFEEDS_SELECT_A_FEED');		}		$link = 'index.php?option=com_newsfeeds&amp;view=newsfeeds&amp;layout=modal&amp;tmpl=component&amp;function=jSelectChart_'.$this->id;		if (isset($this->element['language']))		{			$link .= '&amp;forcedLanguage='.$this->element['language'];		}		JHtml::_('behavior.modal', 'a.modal');		$html = "\n".'<div class="input-append"><input type="text" class="input-medium" id="'.$this->id.'_name" value="'.htmlspecialchars($title, ENT_QUOTES, 'UTF-8').'" disabled="disabled" />';		$html .= '<a class="modal btn" title="'.JText::_('COM_NEWSFEEDS_CHANGE_FEED_BUTTON').'"  href="'.$link.'" rel="{handler: \'iframe\', size: {x: 800, y: 450}}"><i class="icon-feed" title="'.JText::_('COM_NEWSFEEDS_CHANGE_FEED_BUTTON').'"></i> '.JText::_('JSELECT').'</a></div>'."\n";		// The active newsfeed id field.		if (0 == (int) $this->value)		{			$value = '';		}		else		{			$value = (int) $this->value;		}		// class='required' for client side validation		$class = '';		if ($this->required)		{			$class = ' class="required modal-value"';		}		$html .= '<input type="hidden" id="'.$this->id.'_id"'.$class.' name="'.$this->name.'" value="'.$value.'" />';		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('InstallerModel', __DIR__ . '/extension.php');JLoader::register('JoomlaInstallerScript', JPATH_ADMINISTRATOR . '/components/com_admin/script.php');/** * Installer Manage Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelDatabase extends InstallerModel{	protected $_context = 'com_installer.discover';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		parent::populateState('name', 'asc');	}	/**	 * Fixes database problems	 *	 * @return  void	 */	public function fix()	{		if (!$changeSet = $this->getItems())		{			return false;		}		$changeSet->fix();		$this->fixSchemaVersion($changeSet);		$this->fixUpdateVersion();		$installer = new JoomlaInstallerScript;		$installer->deleteUnexistingFiles();		$this->fixDefaultTextFilters();	}	/**	 * Gets the changeset object	 *	 * @return  JSchemaChangeset	 */	public function getItems()	{		$folder = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		try		{			$changeSet = JSchemaChangeset::getInstance(JFactory::getDbo(), $folder);		}		catch (RuntimeException $e)		{			JFactory::getApplication()->enqueueMessage($e->getMessage(), 'warning');			return false;		}		return $changeSet;	}	/**	 * Method to get a JPagination object for the data set.	 *	 * @return  boolean	 *	 * @since   12.2	 */	public function getPagination()	{		return true;	}	/**	 * Get version from #__schemas table	 *	 * @return  mixed  the return value from the query, or null if the query fails	 *	 * @throws Exception	 */	public function getSchemaVersion()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('version_id')			->from($db->quoteName('#__schemas'))			->where('extension_id = 700');		$db->setQuery($query);		$result = $db->loadResult();		return $result;	}	/**	 * Fix schema version if wrong	 *	 * @param   JSchemaChangeSet  $changeSet  Schema change set	 *	 * @return   mixed  string schema version if success, false if fail	 */	public function fixSchemaVersion($changeSet)	{		// Get correct schema version -- last file in array		$schema = $changeSet->getSchema();		$db = JFactory::getDbo();		$result = false;		// Check value. If ok, don't do update		$version = $this->getSchemaVersion();		if ($version == $schema)		{			$result = $version;		}		else		{			// Delete old row			$query = $db->getQuery(true)				->delete($db->quoteName('#__schemas'))				->where($db->quoteName('extension_id') . ' = 700');			$db->setQuery($query);			$db->execute();			// Add new row			$query = $db->getQuery(true)				->insert($db->quoteName('#__schemas'))				->set($db->quoteName('extension_id') . '= 700')				->set($db->quoteName('version_id') . '= ' . $db->quote($schema));			$db->setQuery($query);			if ($db->execute())			{				$result = $schema;			}		}		return $result;	}	/**	 * Get current version from #__extensions table	 *	 * @return  mixed   version if successful, false if fail	 */	public function getUpdateVersion()	{		$table = JTable::getInstance('Extension');		$table->load('700');		$cache = new JRegistry($table->manifest_cache);		return $cache->get('version');	}	/**	 * Fix Joomla version in #__extensions table if wrong (doesn't equal JVersion short version)	 *	 * @return   mixed  string update version if success, false if fail	 */	public function fixUpdateVersion()	{		$table = JTable::getInstance('Extension');		$table->load('700');		$cache = new JRegistry($table->manifest_cache);		$updateVersion = $cache->get('version');		$cmsVersion = new JVersion;		if ($updateVersion == $cmsVersion->getShortVersion())		{			return $updateVersion;		}		else		{			$cache->set('version', $cmsVersion->getShortVersion());			$table->manifest_cache = $cache->toString();			if ($table->store())			{				return $cmsVersion->getShortVersion();			}			else			{				return false;			}		}	}	/**	 * For version 2.5.x only	 * Check if com_config parameters are blank.	 *	 * @return  string  default text filters (if any)	 */	public function getDefaultTextFilters()	{		$table = JTable::getInstance('Extension');		$table->load($table->find(array('name' => 'com_config')));		return $table->params;	}	/**	 * For version 2.5.x only	 * Check if com_config parameters are blank. If so, populate with com_content text filters.	 *	 * @return  mixed  boolean true if params are updated, null otherwise	 */	public function fixDefaultTextFilters()	{		$table = JTable::getInstance('Extension');		$table->load($table->find(array('name' => 'com_config')));		// Check for empty $config and non-empty content filters		if (!$table->params)		{			// Get filters from com_content and store if you find them			$contentParams = JComponentHelper::getParams('com_content');			if ($contentParams->get('filters'))			{				$newParams = new JRegistry;				$newParams->set('filters', $contentParams->get('filters'));				$table->params = (string) $newParams;				$table->store();				return true;			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @since       13.1 */abstract class JFacebookObject{	/**	 * @var    JRegistry  Options for the Facebook object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var    JFacebookOAuth  The OAuth client.	 * @since  13.1	 */	protected $oauth;	/**	 * Constructor.	 *	 * @param   JRegistry       $options  Facebook options object.	 * @param   JHttp           $client   The HTTP client object.	 * @param   JFacebookOAuth  $oauth    The OAuth client.	 *	 * @since   13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JFacebookOAuth $oauth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JHttp($this->options);		$this->oauth = $oauth;	}	/**	 * Method to build and return a full request URL for the request.  This method will	 * add appropriate pagination details if necessary and also prepend the API url	 * to have a complete URL for the request.	 *	 * @param   string     $path    URL to inflect.	 * @param   integer    $limit   The number of objects per page.	 * @param   integer    $offset  The object's number on the page.	 * @param   timestamp  $until   A unix timestamp or any date accepted by strtotime.	 * @param   timestamp  $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  string  The request URL.	 *	 * @since   13.1	 */	protected function fetchUrl($path, $limit = 0, $offset = 0, $until = null, $since = null)	{		// Get a new JUri object fousing the api url and given path.		$uri = new JUri($this->options->get('api.url') . $path);		if ($limit > 0)		{			$uri->setVar('limit', (int) $limit);		}		if ($offset > 0)		{			$uri->setVar('offset', (int) $offset);		}		if ($until != null)		{			$uri->setVar('until', $until);		}		if ($since != null)		{			$uri->setVar('since', $since);		}		return (string) $uri;	}	/**	 * Method to send the request.	 *	 * @param   string   $path     The path of the request to make.	 * @param   mixed    $data     Either an associative array or a string to be sent with the post request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return   mixed  The request response.	 *	 * @since    13.1	 * @throws   DomainException	 */	public function sendRequest($path, $data = '', array $headers = null, $limit = 0, $offset = 0, $until = null, $since = null)	{		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $limit, $offset, $until, $since), $headers);		$response = json_decode($response->body);		// Validate the response.		if (property_exists($response, 'error'))		{			throw new RuntimeException($response->error->message);		}		return $response;	}	/**	 * Method to get an object.	 *	 * @param   string  $object  The object id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function get($object)	{		if ($this->oauth != null)		{			if ($this->oauth->isAuthenticated())			{				$response = $this->oauth->query($this->fetchUrl($object));				return json_decode($response->body);			}			else			{				return false;			}		}		// Send the request.		return $this->sendRequest($object);	}	/**	 * Method to get object's connection.	 *	 * @param   string   $object        The object id.	 * @param   string   $connection    The object's connection name.	 * @param   string   $extra_fields  URL fields.	 * @param   integer  $limit         The number of objects per page.	 * @param   integer  $offset        The object's number on the page.	 * @param   string   $until         A unix timestamp or any date accepted by strtotime.	 * @param   string   $since         A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getConnection($object, $connection = null, $extra_fields = '', $limit = 0, $offset = 0, $until = null, $since = null)	{		$path = $object . '/' . $connection . $extra_fields;		if ($this->oauth != null)		{			if ($this->oauth->isAuthenticated())			{				$response = $this->oauth->query($this->fetchUrl($path, $limit, $offset, $until, $since));				if (strcmp($response->body, ''))				{					return json_decode($response->body);				}				else				{					return $response->headers['Location'];				}			}			else			{				return false;			}		}		// Send the request.		return $this->sendRequest($path, '', null, $limit, $offset, $until, $since);	}	/**	 * Method to create a connection.	 *	 * @param   string  $object      The object id.	 * @param   string  $connection  The object's connection name.	 * @param   array   $parameters  The POST request parameters.	 * @param   array   $headers     An array of name-value pairs to include in the header of the request	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createConnection($object, $connection = null, $parameters = null, array $headers = null)	{		if ($this->oauth->isAuthenticated())		{			// Build the request path.			if ($connection != null)			{				$path = $object . '/' . $connection;			}			else			{				$path = $object;			}			// Send the post request.			$response = $this->oauth->query($this->fetchUrl($path), $parameters, $headers, 'post');			return json_decode($response->body);		}		else		{			return false;		}	}	/**	 * Method to delete a connection.	 *	 * @param   string  $object        The object id.	 * @param   string  $connection    The object's connection name.	 * @param   string  $extra_fields  URL fields.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteConnection($object, $connection = null, $extra_fields = '')	{		if ($this->oauth->isAuthenticated())		{			// Build the request path.			if ($connection != null)			{				$path = $object . '/' . $connection . $extra_fields;			}			else			{				$path = $object . $extra_fields;			}			// Send the delete request.			$response = $this->oauth->query($this->fetchUrl($path), null, array(), 'delete');			return json_decode($response->body);		}		else		{			return false;		}	}	/**	 * Method used to set the OAuth client.	 *	 * @param   JFacebookOAuth  $oauth  The OAuth client object.	 *	 * @return  JFacebookObject  This object for method chaining.	 *	 * @since   13.1	 */	public function setOAuth($oauth)	{		$this->oauth = $oauth;		return $this;	}	/**	 * Method used to get the OAuth client.	 *	 * @return  JFacebookOAuth  The OAuth client	 *	 * @since   13.1	 */	public function getOAuth()	{		return $this->oauth;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.calendar');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');//$images = json_decode($this->item->images);//$urls = json_decode($this->item->urls);// This checks if the editor config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params->show_publishing_options);if (!$editoroptions){	$params->show_urls_images_frontend = '0';}?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('adminForm')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task);		}	}</script><div class="edit item-page<?php echo $this->pageclass_sfx; ?>">	<?php if ($params->get('show_page_heading', 1)) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_content&a_id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate form-vertical">		<div class="btn-toolbar">			<div class="btn-group">				<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('article.save')">					<span class="icon-ok"></span>&#160;<?php echo JText::_('JSAVE') ?>				</button>			</div>			<div class="btn-group">				<button type="button" class="btn" onclick="Joomla.submitbutton('article.cancel')">					<span class="icon-cancel"></span>&#160;<?php echo JText::_('JCANCEL') ?>				</button>			</div>		</div>		<fieldset>			<ul class="nav nav-tabs">				<li class="active"><a href="#editor" data-toggle="tab"><?php echo JText::_('JEDITOR') ?></a></li>				<?php if ($params->get('show_urls_images_frontend') ) : ?>				<li><a href="#images" data-toggle="tab"><?php echo JText::_('COM_CONTENT_IMAGES_AND_URLS') ?></a></li>				<?php endif; ?>				<li><a href="#publishing" data-toggle="tab"><?php echo JText::_('COM_CONTENT_PUBLISHING') ?></a></li>				<li><a href="#language" data-toggle="tab"><?php echo JText::_('JFIELD_LANGUAGE_LABEL') ?></a></li>				<li><a href="#metadata" data-toggle="tab"><?php echo JText::_('COM_CONTENT_METADATA') ?></a></li>			</ul>			<div class="tab-content">				<div class="tab-pane active" id="editor">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('title'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('title'); ?>						</div>					</div>					<?php if (is_null($this->item->id)) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('alias'); ?>						</div>					</div>					<?php endif; ?>					<?php echo $this->form->getInput('articletext'); ?>				</div>				<?php if ($params->get('show_urls_images_frontend')): ?>				<div class="tab-pane" id="images">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro', 'images'); ?>							<?php echo $this->form->getInput('image_intro', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro_alt', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_intro_alt', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro_caption', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_intro_caption', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('float_intro', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('float_intro', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext_alt', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext_alt', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext_caption', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext_caption', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('float_fulltext', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('float_fulltext', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urla', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urla', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlatext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlatext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targeta', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlb', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlb', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlbtext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlbtext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targetb', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlc', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlc', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlctext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlctext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targetc', 'urls'); ?>						</div>					</div>				</div>				<?php endif; ?>				<div class="tab-pane" id="publishing">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('catid'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('catid'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('tags', 'metadata'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('tags', 'metadata'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('created_by_alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('created_by_alias'); ?>						</div>					</div>					<?php if ($this->item->params->get('access-change')) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('state'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('state'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('featured'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('featured'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('publish_up'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('publish_up'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('publish_down'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('publish_down'); ?>							</div>						</div>					<?php endif; ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('access'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('access'); ?>						</div>					</div>					<?php if (is_null($this->item->id)):?>						<div class="control-group">							<div class="control-label">							</div>							<div class="controls">								<?php echo JText::_('COM_CONTENT_ORDERING'); ?>							</div>						</div>					<?php endif; ?>				</div>				<div class="tab-pane" id="language">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('language'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('language'); ?>						</div>					</div>				</div>				<div class="tab-pane" id="metadata">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('metadesc'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('metadesc'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('metakey'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('metakey'); ?>						</div>					</div>					<input type="hidden" name="task" value="" />					<input type="hidden" name="return" value="<?php echo $this->return_page; ?>" />					<?php if ($this->params->get('enable_category', 0) == 1) :?>					<input type="hidden" name="jform[catid]" value="<?php echo $this->params->get('catid', 1); ?>" />					<?php endif; ?>				</div>			</div>			<?php echo JHtml::_('form.token'); ?>		</fieldset>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Post class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/post/ * @since       13.1 */class JFacebookPost extends JFacebookObject{	/**	 * Method to get a post. Requires authentication and read_stream permission for all data.	 *	 * @param   string  $post  The post id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPost($post)	{		return $this->get($post);	}	/**	 * Method to delete a post if it was created by this application. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deletePost($post)	{		return $this->deleteConnection($post);	}	/**	 * Method to get a post's comments. Requires authentication and read_stream permission.	 *	 * @param   string   $post    The post id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($post, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($post, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post     The post id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($post, $message)	{		// Set POST request parameters.		$data['message'] = $message;		return $this->createConnection($post, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get post's likes. Requires authentication and read_stream permission.	 *	 * @param   string   $post    The post id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($post, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($post, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($post)	{		return $this->createConnection($post, 'likes');	}	/**	 * Method to unlike a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($post)	{		return $this->deleteConnection($post, 'likes');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules list controller class. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesControllerModules extends JControllerAdmin{	/**	 * Method to clone an existing module.	 * @since   1.6	 */	public function duplicate()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		JArrayHelper::toInteger($pks);		try {			if (empty($pks))			{				throw new Exception(JText::_('COM_MODULES_ERROR_NO_MODULES_SELECTED'));			}			$model = $this->getModel();			$model->duplicate($pks);			$this->setMessage(JText::plural('COM_MODULES_N_MODULES_DUPLICATED', count($pks)));		} catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_modules&view=modules');	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Module', $prefix = 'ModulesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$input = JFactory::getApplication()->input;		$pks   = $input->post->get('cid', array(), 'array');		$order = $input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect component helper. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectHelper{	public static $extension = 'com_redirect';	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 */	public static function addSubmenu($vName)	{		// No submenu for this component.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user		= JFactory::getUser();		$result		= new JObject;		$assetName	= 'com_redirect';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string  	The HTML code for the select tag	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '*', 'JALL');		$options[]	= JHtml::_('select.option', '1', 'JENABLED');		$options[]	= JHtml::_('select.option', '0', 'JDISABLED');		$options[]	= JHtml::_('select.option', '2', 'JARCHIVED');		$options[]	= JHtml::_('select.option', '-2', 'JTRASHED');		return $options;	}	/**	 * Determines if the plugin for Redirect to work is enabled.	 *	 * @return  boolean	 */	public static function isEnabled()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('enabled'))			->from('#__extensions')			->where($db->quoteName('folder') . ' = ' . $db->quote('system'))			->where($db->quoteName('element') . ' = ' . $db->quote('redirect'));		$db->setQuery($query);		try		{			$result = (boolean) $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of template styles. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesViewTemplates extends JViewLegacy{	/**	 * @var		array	 * @since   1.6	 */	protected $items;	/**	 * @var		object	 * @since   1.6	 */	protected $pagination;	/**	 * @var		object	 * @since   1.6	 */	protected $state;	/**	 * Display the view.	 *	 * @param   string	 *	 * @return  void	 * @since   1.6	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->preview		= JComponentHelper::getParams('com_templates')->get('template_positions_display');		TemplatesHelper::addSubmenu('templates');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_TEMPLATES_MSG_MANAGE_NO_TEMPLATES'),				'warning'			);		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= TemplatesHelper::getActions();		JToolbarHelper::title(JText::_('COM_TEMPLATES_MANAGER_TEMPLATES'), 'thememanager');		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_templates');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_TEMPLATE_MANAGER_TEMPLATES');		JHtmlSidebar::setAction('index.php?option=com_templates&view=templates');		JHtmlSidebar::addFilter(			JText::_('JGLOBAL_FILTER_CLIENT'),			'filter_client_id',			JHtml::_('select.options', TemplatesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'))		);		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Social Communications class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinCommunications extends JLinkedinObject{	/**	 * Method used to invite people.	 *	 * @param   string  $email       A string containing email of the recipient.	 * @param   string  $first_name  A string containing frist name of the recipient.	 * @param   string  $last_name   A string containing last name of the recipient.	 * @param   string  $subject     The subject of the message that will be sent to the recipient	 * @param   string  $body        A text of the message.	 * @param   string  $connection  Only connecting as a 'friend' is supported presently.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function inviteByEmail($email, $first_name, $last_name, $subject, $body, $connection = 'friend')	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base.		$base = '/v1/people/~/mailbox';		// Build the xml.		$xml = '<mailbox-item>				  <recipients>				  	<recipient>						<person path="/people/email=' . $email . '">							<first-name>' . $first_name . '</first-name>							<last-name>' . $last_name . '</last-name>						</person>					</recipient>				</recipients>				<subject>' . $subject . '</subject>				<body>' . $body . '</body>				<item-content>				    <invitation-request>				      <connect-type>' . $connection . '</connect-type>				    </invitation-request>				</item-content>			 </mailbox-item>';		$header['Content-Type'] = 'text/xml';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to invite people.	 *	 * @param   string  $id          Member id.	 * @param   string  $first_name  A string containing frist name of the recipient.	 * @param   string  $last_name   A string containing last name of the recipient.	 * @param   string  $subject     The subject of the message that will be sent to the recipient	 * @param   string  $body        A text of the message.	 * @param   string  $connection  Only connecting as a 'friend' is supported presently.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function inviteById($id, $first_name, $last_name, $subject, $body, $connection = 'friend')	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base for people search.		$base = '/v1/people-search:(people:(api-standard-profile-request))';		$data['format'] = 'json';		$data['first-name'] = $first_name;		$data['last-name'] = $last_name;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		if (strpos($response->body, 'apiStandardProfileRequest') === false)		{			throw new RuntimeException($response->body);		}		// Get header value.		$value = explode('"value": "', $response->body);		$value = explode('"', $value[1]);		$value = $value[0];		// Split on the colon character.		$value = explode(':', $value);		$name = $value[0];		$value = $value[1];		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base.		$base = '/v1/people/~/mailbox';		// Build the xml.		$xml = '<mailbox-item>				  <recipients>				  	<recipient>						<person path="/people/id=' . $id . '">						</person>					</recipient>				</recipients>				<subject>' . $subject . '</subject>				<body>' . $body . '</body>				<item-content>				    <invitation-request>				      <connect-type>' . $connection . '</connect-type>				      <authorization>				      	<name>' . $name . '</name>				        <value>' . $value . '</value>				      </authorization>				    </invitation-request>				</item-content>			 </mailbox-item>';		$header['Content-Type'] = 'text/xml';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to send messages via LinkedIn between two or more individuals connected to the member sending the message..	 *	 * @param   mixed   $recipient  A string containing the member id or an array of ids.	 * @param   string  $subject    The subject of the message that will be sent to the recipient	 * @param   string  $body       A text of the message.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function sendMessage($recipient, $subject, $body)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base.		$base = '/v1/people/~/mailbox';		// Build the xml.		$xml = '<mailbox-item>				  <recipients>';		if (is_array($recipient))		{			foreach ($recipient as $r)			{				$xml .= '<recipient>							<person path="/people/' . $r . '"/>						</recipient>';			}		}		$xml .= '</recipients>				 <subject>' . $subject . '</subject>				 <body>' . $body . '</body>				</mailbox-item>';		$header['Content-Type'] = 'text/xml';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}}
<?php/** * @package     Joomla.Platform * @subpackage  User * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Authorisation helper class, provides static methods to perform various tasks relevant * to the Joomla user and authorisation classes * * This class has influences and some method logic from the Horde Auth package * * @package     Joomla.Platform * @subpackage  User * @since       11.1 */abstract class JUserHelper{	/**	 * Method to add a user to a group.	 *	 * @param   integer  $userId   The id of the user.	 * @param   integer  $groupId  The id of the group.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function addUserToGroup($userId, $groupId)	{		// Get the user object.		$user = new JUser((int) $userId);		// Add the user to the group if necessary.		if (!in_array($groupId, $user->groups))		{			// Get the title of the group.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select($db->quoteName('title'))				->from($db->quoteName('#__usergroups'))				->where($db->quoteName('id') . ' = ' . (int) $groupId);			$db->setQuery($query);			$title = $db->loadResult();			// If the group does not exist, return an exception.			if (!$title)			{				throw new RuntimeException('Access Usergroup Invalid');			}			// Add the group data to the user object.			$user->groups[$title] = $groupId;			// Store the user object.			$user->save();		}		if (session_id())		{			// Set the group data for any preloaded user objects.			$temp = JFactory::getUser((int) $userId);			$temp->groups = $user->groups;			// Set the group data for the user object in the session.			$temp = JFactory::getUser();			if ($temp->id == $userId)			{				$temp->groups = $user->groups;			}		}		return true;	}	/**	 * Method to get a list of groups a user is in.	 *	 * @param   integer  $userId  The id of the user.	 *	 * @return  array    List of groups	 *	 * @since   11.1	 */	public static function getUserGroups($userId)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		return isset($user->groups) ? $user->groups : array();	}	/**	 * Method to remove a user from a group.	 *	 * @param   integer  $userId   The id of the user.	 * @param   integer  $groupId  The id of the group.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function removeUserFromGroup($userId, $groupId)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		// Remove the user from the group if necessary.		$key = array_search($groupId, $user->groups);		if ($key !== false)		{			// Remove the user from the group.			unset($user->groups[$key]);			// Store the user object.			$user->save();		}		// Set the group data for any preloaded user objects.		$temp = JFactory::getUser((int) $userId);		$temp->groups = $user->groups;		// Set the group data for the user object in the session.		$temp = JFactory::getUser();		if ($temp->id == $userId)		{			$temp->groups = $user->groups;		}		return true;	}	/**	 * Method to set the groups for a user.	 *	 * @param   integer  $userId  The id of the user.	 * @param   array    $groups  An array of group ids to put the user in.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function setUserGroups($userId, $groups)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		// Set the group ids.		JArrayHelper::toInteger($groups);		$user->groups = $groups;		// Get the titles for the user groups.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('id') . ', ' . $db->quoteName('title'))			->from($db->quoteName('#__usergroups'))			->where($db->quoteName('id') . ' = ' . implode(' OR ' . $db->quoteName('id') . ' = ', $user->groups));		$db->setQuery($query);		$results = $db->loadObjectList();		// Set the titles for the user groups.		for ($i = 0, $n = count($results); $i < $n; $i++)		{			$user->groups[$results[$i]->id] = $results[$i]->id;		}		// Store the user object.		$user->save();		if ($session_id())		{			// Set the group data for any preloaded user objects.			$temp = JFactory::getUser((int) $userId);			$temp->groups = $user->groups;			// Set the group data for the user object in the session.			$temp = JFactory::getUser();			if ($temp->id == $userId)			{				$temp->groups = $user->groups;			}		}		return true;	}	/**	 * Gets the user profile information	 *	 * @param   integer  $userId  The id of the user.	 *	 * @return  object	 *	 * @since   11.1	 */	public static function getProfile($userId = 0)	{		if ($userId == 0)		{			$user	= JFactory::getUser();			$userId	= $user->id;		}		// Get the dispatcher and load the user's plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		$data = new JObject;		$data->id = $userId;		// Trigger the data preparation event.		$dispatcher->trigger('onContentPrepareData', array('com_users.profile', &$data));		return $data;	}	/**	 * Method to activate a user	 *	 * @param   string  $activation  Activation string	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function activateUser($activation)	{		// Initialize some variables.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Let's get the id of the user we want to activate		$query->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('activation') . ' = ' . $db->quote($activation))			->where($db->quoteName('block') . ' = 1')			->where($db->quoteName('lastvisitDate') . ' = ' . $db->quote('0000-00-00 00:00:00'));		$db->setQuery($query);		$id = (int) $db->loadResult();		// Is it a valid user to activate?		if ($id)		{			$user = JUser::getInstance((int) $id);			$user->set('block', '0');			$user->set('activation', '');			// Time to take care of business.... store the user.			if (!$user->save())			{				JLog::add($user->getError(), JLog::WARNING, 'jerror');				return false;			}		}		else		{			JLog::add(JText::_('JLIB_USER_ERROR_UNABLE_TO_FIND_USER'), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Returns userid if a user exists	 *	 * @param   string  $username  The username to search on.	 *	 * @return  integer  The user id or 0 if not found.	 *	 * @since   11.1	 */	public static function getUserId($username)	{		// Initialise some variables		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('username') . ' = ' . $db->quote($username));		$db->setQuery($query, 0, 1);		return $db->loadResult();	}	/**	 * Formats a password using the current encryption.	 *	 * @param   string   $plaintext     The plaintext password to encrypt.	 * @param   string   $salt          The salt to use to encrypt the password. []	 *                                  If not present, a new salt will be	 *                                  generated.	 * @param   string   $encryption    The kind of password encryption to use.	 *                                  Defaults to md5-hex.	 * @param   boolean  $show_encrypt  Some password systems prepend the kind of	 *                                  encryption to the crypted password ({SHA},	 *                                  etc). Defaults to false.	 *	 * @return  string  The encrypted password.	 *	 * @since   11.1	 */	public static function getCryptedPassword($plaintext, $salt = '', $encryption = 'md5-hex', $show_encrypt = false)	{		// Get the salt to use.		$salt = self::getSalt($encryption, $salt, $plaintext);		// Encrypt the password.		switch ($encryption)		{			case 'plain':				return $plaintext;			case 'sha':				$encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext));				return ($show_encrypt) ? '{SHA}' . $encrypted : $encrypted;			case 'crypt':			case 'crypt-des':			case 'crypt-md5':			case 'crypt-blowfish':				return ($show_encrypt ? '{crypt}' : '') . crypt($plaintext, $salt);			case 'md5-base64':				$encrypted = base64_encode(mhash(MHASH_MD5, $plaintext));				return ($show_encrypt) ? '{MD5}' . $encrypted : $encrypted;			case 'ssha':				$encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext . $salt) . $salt);				return ($show_encrypt) ? '{SSHA}' . $encrypted : $encrypted;			case 'smd5':				$encrypted = base64_encode(mhash(MHASH_MD5, $plaintext . $salt) . $salt);				return ($show_encrypt) ? '{SMD5}' . $encrypted : $encrypted;			case 'aprmd5':				$length = strlen($plaintext);				$context = $plaintext . '$apr1$' . $salt;				$binary = self::_bin(md5($plaintext . $salt . $plaintext));				for ($i = $length; $i > 0; $i -= 16)				{					$context .= substr($binary, 0, ($i > 16 ? 16 : $i));				}				for ($i = $length; $i > 0; $i >>= 1)				{					$context .= ($i & 1) ? chr(0) : $plaintext[0];				}				$binary = self::_bin(md5($context));				for ($i = 0; $i < 1000; $i++)				{					$new = ($i & 1) ? $plaintext : substr($binary, 0, 16);					if ($i % 3)					{						$new .= $salt;					}					if ($i % 7)					{						$new .= $plaintext;					}					$new .= ($i & 1) ? substr($binary, 0, 16) : $plaintext;					$binary = self::_bin(md5($new));				}				$p = array();				for ($i = 0; $i < 5; $i++)				{					$k = $i + 6;					$j = $i + 12;					if ($j == 16)					{						$j = 5;					}					$p[] = self::_toAPRMD5((ord($binary[$i]) << 16) | (ord($binary[$k]) << 8) | (ord($binary[$j])), 5);				}				return '$apr1$' . $salt . '$' . implode('', $p) . self::_toAPRMD5(ord($binary[11]), 3);			case 'md5-hex':			default:				$encrypted = ($salt) ? md5($plaintext . $salt) : md5($plaintext);				return ($show_encrypt) ? '{MD5}' . $encrypted : $encrypted;		}	}	/**	 * Returns a salt for the appropriate kind of password encryption.	 * Optionally takes a seed and a plaintext password, to extract the seed	 * of an existing password, or for encryption types that use the plaintext	 * in the generation of the salt.	 *	 * @param   string  $encryption  The kind of password encryption to use.	 *                               Defaults to md5-hex.	 * @param   string  $seed        The seed to get the salt from (probably a	 *                               previously generated password). Defaults to	 *                               generating a new seed.	 * @param   string  $plaintext   The plaintext password that we're generating	 *                               a salt for. Defaults to none.	 *	 * @return  string  The generated or extracted salt.	 *	 * @since   11.1	 */	public static function getSalt($encryption = 'md5-hex', $seed = '', $plaintext = '')	{		// Encrypt the password.		switch ($encryption)		{			case 'crypt':			case 'crypt-des':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 2);				}				else				{					return substr(md5(mt_rand()), 0, 2);				}				break;			case 'crypt-md5':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 12);				}				else				{					return '$1$' . substr(md5(mt_rand()), 0, 8) . '$';				}				break;			case 'crypt-blowfish':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 16);				}				else				{					return '$2$' . substr(md5(mt_rand()), 0, 12) . '$';				}				break;			case 'ssha':				if ($seed)				{					return substr(preg_replace('|^{SSHA}|', '', $seed), -20);				}				else				{					return mhash_keygen_s2k(MHASH_SHA1, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);				}				break;			case 'smd5':				if ($seed)				{					return substr(preg_replace('|^{SMD5}|', '', $seed), -16);				}				else				{					return mhash_keygen_s2k(MHASH_MD5, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);				}				break;			case 'aprmd5': /* 64 characters that are valid for APRMD5 passwords. */				$APRMD5 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';				if ($seed)				{					return substr(preg_replace('/^\$apr1\$(.{8}).*/', '\\1', $seed), 0, 8);				}				else				{					$salt = '';					for ($i = 0; $i < 8; $i++)					{						$salt .= $APRMD5{rand(0, 63)};					}					return $salt;				}				break;			default:				$salt = '';				if ($seed)				{					$salt = $seed;				}				return $salt;				break;		}	}	/**	 * Generate a random password	 *	 * @param   integer  $length  Length of the password to generate	 *	 * @return  string  Random Password	 *	 * @since   11.1	 */	public static function genRandomPassword($length = 8)	{		$salt = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";		$base = strlen($salt);		$makepass = '';		/*		 * Start with a cryptographic strength random string, then convert it to		 * a string with the numeric base of the salt.		 * Shift the base conversion on each character so the character		 * distribution is even, and randomize the start shift so it's not		 * predictable.		 */		$random = JCrypt::genRandomBytes($length + 1);		$shift = ord($random[0]);		for ($i = 1; $i <= $length; ++$i)		{			$makepass .= $salt[($shift + ord($random[$i])) % $base];			$shift += ord($random[$i]);		}		return $makepass;	}	/**	 * Converts to allowed 64 characters for APRMD5 passwords.	 *	 * @param   string   $value  The value to convert.	 * @param   integer  $count  The number of characters to convert.	 *	 * @return  string  $value converted to the 64 MD5 characters.	 *	 * @since   11.1	 */	protected static function _toAPRMD5($value, $count)	{		/* 64 characters that are valid for APRMD5 passwords. */		$APRMD5 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';		$aprmd5 = '';		$count = abs($count);		while (--$count)		{			$aprmd5 .= $APRMD5[$value & 0x3f];			$value >>= 6;		}		return $aprmd5;	}	/**	 * Converts hexadecimal string to binary data.	 *	 * @param   string  $hex  Hex data.	 *	 * @return  string  Binary data.	 *	 * @since   11.1	 */	private static function _bin($hex)	{		$bin = '';		$length = strlen($hex);		for ($i = 0; $i < $length; $i += 2)		{			$tmp = sscanf(substr($hex, $i, 2), '%x');			$bin .= chr(array_shift($tmp));		}		return $bin;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * ATOM Feed Parser class. * * @package     Joomla.Platform * @subpackage  Feed * @link        http://www.atomenabled.org/developers/syndication/ * @since       12.3 */class JFeedParserAtom extends JFeedParser{	/**	 * @var    string  The feed format version.	 * @since  12.3	 */	protected $version;	/**	 * Method to handle the <author> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleAuthor(JFeed $feed, SimpleXMLElement $el)	{		// Set the author information from the XML element.		$feed->setAuthor((string) $el->name, (string) $el->email, (string) $el->uri);	}	/**	 * Method to handle the <contributor> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleContributor(JFeed $feed, SimpleXMLElement $el)	{		$feed->addContributor((string) $el->name, (string) $el->email, (string) $el->uri);	}	/**	 * Method to handle the <generator> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleGenerator(JFeed $feed, SimpleXMLElement $el)	{		$feed->generator = (string) $el;	}	/**	 * Method to handle the <id> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleId(JFeed $feed, SimpleXMLElement $el)	{		$feed->uri = (string) $el;	}	/**	 * Method to handle the <link> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLink(JFeed $feed, SimpleXMLElement $el)	{		$link = new JFeedLink;		$link->uri      = (string) $el['href'];		$link->language = (string) $el['hreflang'];		$link->length   = (int) $el['length'];		$link->relation = (string) $el['rel'];		$link->title    = (string) $el['title'];		$link->type     = (string) $el['type'];		$feed->link = $link;	}	/**	 * Method to handle the <rights> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleRights(JFeed $feed, SimpleXMLElement $el)	{		$feed->copyright = (string) $el;	}	/**	 * Method to handle the <subtitle> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleSubtitle(JFeed $feed, SimpleXMLElement $el)	{		$feed->description = (string) $el;	}	/**	 * Method to handle the <title> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleTitle(JFeed $feed, SimpleXMLElement $el)	{		$feed->title = (string) $el;	}	/**	 * Method to handle the <updated> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleUpdated(JFeed $feed, SimpleXMLElement $el)	{		$feed->updatedDate = (string) $el;	}	/**	 * Method to initialise the feed for parsing.  Here we detect the version and advance the stream	 * reader so that it is ready to parse feed elements.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function initialise()	{		// Read the version attribute.		$this->version = ($this->stream->getAttribute('version') == '0.3') ? '0.3' : '1.0';		// We want to move forward to the first element after the root element.		$this->moveToNextElement();	}	/**	 * Method to handle the feed entry element for the feed: <entry>.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function processFeedEntry(JFeedEntry $entry, SimpleXMLElement $el)	{		$entry->uri         = (string) $el->id;		$entry->title       = (string) $el->title;		$entry->updatedDate = (string) $el->updated;		$entry->content     = (string) $el->summary;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_breadcrumbs * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><ul class="breadcrumb<?php echo $moduleclass_sfx; ?>">	<?php	if ($params->get('showHere', 1))	{		echo '<li class="active"><span class="divider icon-location hasTooltip" title="' . JText::_('MOD_BREADCRUMBS_HERE') . '"></span></li>';	}	// Get rid of duplicated entries on trail including home page when using multilanguage	for ($i = 0; $i < $count; $i++)	{		if ($i == 1 && !empty($list[$i]->link) && !empty($list[$i - 1]->link) && $list[$i]->link == $list[$i - 1]->link)		{			unset($list[$i]);		}	}	// Find last and penultimate items in breadcrumbs list	end($list);	$last_item_key = key($list);	prev($list);	$penult_item_key = key($list);	// Generate the trail	foreach ($list as $key => $item) :	// Make a link if not the last item in the breadcrumbs	$show_last = $params->get('showLast', 1);	if ($key != $last_item_key)	{		// Render all but last item - along with separator		echo '<li>';		if (!empty($item->link))		{			echo '<a href="' . $item->link . '" class="pathway">' . $item->name . '</a>';		}		else		{			echo '<span>' . $item->name . '</span>';		}		if (($key != $penult_item_key) || $show_last)		{			echo '<span class="divider">' . $separator . '</span>';		}		echo '</li>';	}	elseif ($show_last)	{		// Render last item if reqd.		echo '<li>';		echo '<span>' . $item->name . '</span>';		echo '</li>';	}	endforeach; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of user groups. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewGroups extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		UsersHelper::addSubmenu('groups');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= UsersHelper::getActions();		JToolbarHelper::title(JText::_('COM_USERS_VIEW_GROUPS_TITLE'), 'groups');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('group.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('group.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'groups.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_users');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_USERS_GROUPS');	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Mediawiki * @since       12.3 */abstract class JMediawikiObject{	/**	 * @var    JRegistry  Options for the MediaWiki object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JMediawikiHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $client;	/**     * Constructor.     *     * @param   JRegistry       $options  Mediawiki options object.     * @param   JMediawikiHttp  $client   The HTTP client object.     *     * @since   12.3     */	public function __construct(JRegistry $options = null, JMediawikiHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JMediawikiHttp($this->options);	}	/**     * Method to build and return a full request URL for the request.     *     * @param   string  $path  URL to inflect     *     * @return  string   The request URL.     *     * @since   12.3     */	protected function fetchUrl($path)	{		// Append the path with output format		$path .= '&format=xml';		$uri = new JUri($this->options->get('api.url') . '/api.php' . $path);		if ($this->options->get('api.username', false))		{			$uri->setUser($this->options->get('api.username'));		}		if ($this->options->get('api.password', false))		{			$uri->setPass($this->options->get('api.password'));		}		return (string) $uri;	}	/**     * Method to build request parameters from a string array.     *     * @param   array  $params  string array that contains the parameters     *     * @return  string   request parameter     *     * @since   12.3     */	public function buildParameter(array $params)	{		$path = '';		foreach ($params as $param)		{			$path .= $param;			if (next($params) == true)			{				$path .= '|';			}		}		return $path;	}	/**     * Method to validate response for errors     *     * @param   JHttpresponse  $response  reponse from the mediawiki server     *     * @return  Object     *     * @since   12.3     */	public function validateResponse($response)	{		$xml = simplexml_load_string($response->body);		if (isset($xml->warnings))		{			throw new DomainException($xml->warnings->info);		}		if (isset($xml->error))		{			throw new DomainException($xml->error['info']);		}		return $xml;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.3 */class JDatabaseQueryPostgresql extends JDatabaseQuery implements JDatabaseQueryLimitable{	/**	 * @var    object  The FOR UPDATE element used in "FOR UPDATE"  lock	 * @since  11.3	 */	protected $forUpdate = null;	/**	 * @var    object  The FOR SHARE element used in "FOR SHARE"  lock	 * @since  11.3	 */	protected $forShare = null;	/**	 * @var    object  The NOWAIT element used in "FOR SHARE" and "FOR UPDATE" lock	 * @since  11.3	 */	protected $noWait = null;	/**	 * @var    object  The LIMIT element	 * @since  11.3	 */	protected $limit = null;	/**	 * @var    object  The OFFSET element	 * @since  11.3	 */	protected $offset = null;	/**	 * @var    object  The RETURNING element of INSERT INTO	 * @since  11.3	 */	protected $returning = null;	/**	 * Magic function to convert the query to a string, only for postgresql specific query	 *	 * @return  string	The completed query.	 *	 * @since   11.3	 */	public function __toString()	{		$query = '';		switch ($this->type)		{			case 'select':				$query .= (string) $this->select;				$query .= (string) $this->from;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				if ($this->where)				{					$query .= (string) $this->where;				}				if ($this->group)				{					$query .= (string) $this->group;				}				if ($this->having)				{					$query .= (string) $this->having;				}				if ($this->order)				{					$query .= (string) $this->order;				}				if ($this->limit)				{					$query .= (string) $this->limit;				}				if ($this->offset)				{					$query .= (string) $this->offset;				}				if ($this->forUpdate)				{					$query .= (string) $this->forUpdate;				}				else				{					if ($this->forShare)					{						$query .= (string) $this->forShare;					}				}				if ($this->noWait)				{					$query .= (string) $this->noWait;				}				break;			case 'update':				$query .= (string) $this->update;				$query .= (string) $this->set;				if ($this->join)				{					$onWord = ' ON ';					// Workaround for special case of JOIN with UPDATE					foreach ($this->join as $join)					{						$joinElem = $join->getElements();						$joinArray = explode($onWord, $joinElem[0]);						$this->from($joinArray[0]);						$this->where($joinArray[1]);					}					$query .= (string) $this->from;				}				if ($this->where)				{					$query .= (string) $this->where;				}				break;			case 'insert':				$query .= (string) $this->insert;				if ($this->values)				{					if ($this->columns)					{						$query .= (string) $this->columns;					}					$elements = $this->values->getElements();					if (!($elements[0] instanceof $this))					{						$query .= ' VALUES ';					}					$query .= (string) $this->values;					if ($this->returning)					{						$query .= (string) $this->returning;					}				}				break;			default:				$query = parent::__toString();				break;		}		return $query;	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  void	 *	 * @since   11.3	 */	public function clear($clause = null)	{		switch ($clause)		{			case 'limit':				$this->limit = null;				break;			case 'offset':				$this->offset = null;				break;			case 'forUpdate':				$this->forUpdate = null;				break;			case 'forShare':				$this->forShare = null;				break;			case 'noWait':				$this->noWait = null;				break;			case 'returning':				$this->returning = null;				break;			case 'select':			case 'update':			case 'delete':			case 'insert':			case 'from':			case 'join':			case 'set':			case 'where':			case 'group':			case 'having':			case 'order':			case 'columns':			case 'values':				parent::clear($clause);				break;			default:				$this->type = null;				$this->limit = null;				$this->offset = null;				$this->forUpdate = null;				$this->forShare = null;				$this->noWait = null;				$this->returning = null;				parent::clear($clause);				break;		}		return $this;	}	/**	 * Casts a value to a char.	 *	 * Ensure that the value is properly quoted before passing to the method.	 *	 * Usage:	 * $query->select($query->castAsChar('a'));	 *	 * @param   string  $value  The value to cast as a char.	 *	 * @return  string  Returns the cast value.	 *	 * @since   11.1	 */	public function castAsChar($value)	{		return $value . '::text';	}	/**	 * Concatenates an array of column names or values.	 *	 * Usage:	 * $query->select($query->concatenate(array('a', 'b')));	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.3	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			return implode(' || ' . $this->quote($separator) . ' || ', $values);		}		else		{			return implode(' || ', $values);		}	}	/**	 * Gets the current date and time.	 *	 * @return  string  Return string used in query to obtain	 *	 * @since   11.3	 */	public function currentTimestamp()	{		return 'NOW()';	}	/**	 * Sets the FOR UPDATE lock on select's output row	 *	 * @param   string   $table_name  The table to lock	 * @param   boolean  $glue        The glue by which to join the conditions. Defaults to ',' .	 *	 * @return  JDatabaseQuery  FOR UPDATE query element	 *	 * @since   11.3	 */	public function forUpdate ($table_name, $glue = ',')	{		$this->type = 'forUpdate';		if ( is_null($this->forUpdate) )		{			$glue = strtoupper($glue);			$this->forUpdate = new JDatabaseQueryElement('FOR UPDATE', 'OF ' . $table_name, "$glue ");		}		else		{			$this->forUpdate->append($table_name);		}		return $this;	}	/**	 * Sets the FOR SHARE lock on select's output row	 *	 * @param   string   $table_name  The table to lock	 * @param   boolean  $glue        The glue by which to join the conditions. Defaults to ',' .	 *	 * @return  JDatabaseQuery  FOR SHARE query element	 *	 * @since   11.3	 */	public function forShare ($table_name, $glue = ',')	{		$this->type = 'forShare';		if ( is_null($this->forShare) )		{			$glue = strtoupper($glue);			$this->forShare = new JDatabaseQueryElement('FOR SHARE', 'OF ' . $table_name, "$glue ");		}		else		{			$this->forShare->append($table_name);		}		return $this;	}	/**	 * Used to get a string to extract year from date column.	 *	 * Usage:	 * $query->select($query->year($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing year to be extracted.	 *	 * @return  string  Returns string to extract year from a date.	 *	 * @since   12.1	 */	public function year($date)	{		return 'EXTRACT (YEAR FROM ' . $date . ')';	}	/**	 * Used to get a string to extract month from date column.	 *	 * Usage:	 * $query->select($query->month($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing month to be extracted.	 *	 * @return  string  Returns string to extract month from a date.	 *	 * @since   12.1	 */	public function month($date)	{		return 'EXTRACT (MONTH FROM ' . $date . ')';	}	/**	 * Used to get a string to extract day from date column.	 *	 * Usage:	 * $query->select($query->day($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing day to be extracted.	 *	 * @return  string  Returns string to extract day from a date.	 *	 * @since   12.1	 */	public function day($date)	{		return 'EXTRACT (DAY FROM ' . $date . ')';	}	/**	 * Used to get a string to extract hour from date column.	 *	 * Usage:	 * $query->select($query->hour($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing hour to be extracted.	 *	 * @return  string  Returns string to extract hour from a date.	 *	 * @since   12.1	 */	public function hour($date)	{		return 'EXTRACT (HOUR FROM ' . $date . ')';	}	/**	 * Used to get a string to extract minute from date column.	 *	 * Usage:	 * $query->select($query->minute($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing minute to be extracted.	 *	 * @return  string  Returns string to extract minute from a date.	 *	 * @since   12.1	 */	public function minute($date)	{		return 'EXTRACT (MINUTE FROM ' . $date . ')';	}	/**	 * Used to get a string to extract seconds from date column.	 *	 * Usage:	 * $query->select($query->second($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing second to be extracted.	 *	 * @return  string  Returns string to extract second from a date.	 *	 * @since   12.1	 */	public function second($date)	{		return 'EXTRACT (SECOND FROM ' . $date . ')';	}	/**	 * Sets the NOWAIT lock on select's output row	 *	 * @return  JDatabaseQuery  NO WAIT query element	 *	 * @since   11.3	 */	public function noWait ()	{		$this->type = 'noWait';		if ( is_null($this->noWait) )		{			$this->noWait = new JDatabaseQueryElement('NOWAIT', null);		}		return $this;	}	/**	 * Set the LIMIT clause to the query	 *	 * @param   int  $limit  An int of how many row will be returned	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function limit( $limit = 0 )	{		if (is_null($this->limit))		{			$this->limit = new JDatabaseQueryElement('LIMIT', (int) $limit);		}		return $this;	}	/**	 * Set the OFFSET clause to the query	 *	 * @param   int  $offset  An int for skipping row	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function offset( $offset = 0 )	{		if (is_null($this->offset))		{			$this->offset = new JDatabaseQueryElement('OFFSET', (int) $offset);		}		return $this;	}	/**	 * Add the RETURNING element to INSERT INTO statement.	 *	 * @param   mixed  $pkCol  The name of the primary key column.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function returning( $pkCol )	{		if (is_null($this->returning))		{			$this->returning = new JDatabaseQueryElement('RETURNING', $pkCol);		}		return $this;	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit  = (int) $limit;		$this->offset = (int) $offset;		return $this;	}	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return string	 *	 * @since 12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		if ($limit > 0)		{			$query .= ' LIMIT ' . $limit;		}		if ($offset > 0)		{			$query .= ' OFFSET ' . $offset;		}		return $query;	}	/**	 * Add to the current date and time in Postgresql.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date to add to	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @note Not all drivers support all units. Check appropriate references	 * @link http://www.postgresql.org/docs/9.0/static/functions-datetime.html.	 */	public function dateAdd($date, $interval, $datePart)	{		if (substr($interval, 0, 1) != '-')		{			return "timestamp '" . $date . "' + interval '" . $interval . " " . $datePart . "'";		}		else		{			return "timestamp '" . $date . "' - interval '" . ltrim($interval, '-') . " " . $datePart . "'";		}	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to install additional languages for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallLanguages extends JControllerBase{	/**	 * Constructor.	 *	 * @since   3.1	 */	public function __construct()	{		parent::__construct();		// Overrides application config and set the configuration.php file so tokens and database works		JFactory::$config = null;		JFactory::getConfig(JPATH_SITE . '/configuration.php');		JFactory::$session = null;	}	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get array of selected languages		$lids = $this->input->get('cid', array(), 'array');		JArrayHelper::toInteger($lids, array());		// Get the languages model.		$model = new InstallationModelLanguages;		if (!$lids)		{			// No languages have been selected			$app->enqueueMessage(JText::_('INSTL_LANGUAGES_NO_LANGUAGE_SELECTED'));		}		else		{			// Install selected languages			$model->install($lids);		}		$r = new stdClass;		// Redirect to the page.		$r = new stdClass;		$r->view = 'defaultlanguage';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Plugin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Plugin helper class * * @package     Joomla.Platform * @subpackage  Plugin * @since       11.1 */abstract class JPluginHelper{	/**	 * A persistent cache of the loaded plugins.	 *	 * @var    array	 * @since  11.3	 */	protected static $plugins = null;	/**	 * Get the path to a layout from a Plugin	 *	 * @param   string  $type    Plugin type	 * @param   string  $name    Plugin name	 * @param   string  $layout  Layout name	 *	 * @return  string  Layout path	 *	 * @since   12.2	 */	public static function getLayoutPath($type, $name, $layout = 'default')	{		$template = JFactory::getApplication()->getTemplate();		$defaultLayout = $layout;		if (strpos($layout, ':') !== false)		{			// Get the template and file name from the string			$temp = explode(':', $layout);			$template = ($temp[0] == '_') ? $template : $temp[0];			$layout = $temp[1];			$defaultLayout = ($temp[1]) ? $temp[1] : 'default';		}		// Build the template and base path for the layout		$tPath = JPATH_THEMES . '/' . $template . '/html/plg_' . $type . '_' . $name . '/' . $layout . '.php';		$bPath = JPATH_BASE . '/plugins/' . $type . '/' . $name . '/tmpl/' . $defaultLayout . '.php';		$dPath = JPATH_BASE . '/plugins/' . $type . '/' . $name . '/tmpl/default.php';		// If the template has a layout override use it		if (file_exists($tPath))		{			return $tPath;		}		elseif (file_exists($bPath))		{			return $bPath;		}		else		{			return $dPath;		}	}	/**	 * Get the plugin data of a specific type if no specific plugin is specified	 * otherwise only the specific plugin data is returned.	 *	 * @param   string  $type    The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string  $plugin  The plugin name.	 *	 * @return  mixed  An array of plugin data objects, or a plugin data object.	 *	 * @since   11.1	 */	public static function getPlugin($type, $plugin = null)	{		$result = array();		$plugins = self::_load();		// Find the correct plugin(s) to return.		if (!$plugin)		{			foreach ($plugins as $p)			{				// Is this the right plugin?				if ($p->type == $type)				{					$result[] = $p;				}			}		}		else		{			foreach ($plugins as $p)			{				// Is this plugin in the right group?				if ($p->type == $type && $p->name == $plugin)				{					$result = $p;					break;				}			}		}		return $result;	}	/**	 * Checks if a plugin is enabled.	 *	 * @param   string  $type    The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string  $plugin  The plugin name.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public static function isEnabled($type, $plugin = null)	{		$result = self::getPlugin($type, $plugin);		return (!empty($result));	}	/**	 * Loads all the plugin files for a particular type if no specific plugin is specified	 * otherwise only the specific plugin is loaded.	 *	 * @param   string            $type        The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string            $plugin      The plugin name.	 * @param   boolean           $autocreate  Autocreate the plugin.	 * @param   JEventDispatcher  $dispatcher  Optionally allows the plugin to use a different dispatcher.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public static function importPlugin($type, $plugin = null, $autocreate = true, JEventDispatcher $dispatcher = null)	{		static $loaded = array();		// Check for the default args, if so we can optimise cheaply		$defaults = false;		if (is_null($plugin) && $autocreate == true && is_null($dispatcher))		{			$defaults = true;		}		if (!isset($loaded[$type]) || !$defaults)		{			$results = null;			// Load the plugins from the database.			$plugins = self::_load();			// Get the specified plugin(s).			for ($i = 0, $t = count($plugins); $i < $t; $i++)			{				if ($plugins[$i]->type == $type && ($plugin === null || $plugins[$i]->name == $plugin))				{					self::_import($plugins[$i], $autocreate, $dispatcher);					$results = true;				}			}			// Bail out early if we're not using default args			if (!$defaults)			{				return $results;			}			$loaded[$type] = $results;		}		return $loaded[$type];	}	/**	 * Loads the plugin file.	 *	 * @param   object            $plugin      The plugin.	 * @param   boolean           $autocreate  True to autocreate.	 * @param   JEventDispatcher  $dispatcher  Optionally allows the plugin to use a different dispatcher.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function _import($plugin, $autocreate = true, JEventDispatcher $dispatcher = null)	{		static $paths = array();		$plugin->type = preg_replace('/[^A-Z0-9_\.-]/i', '', $plugin->type);		$plugin->name = preg_replace('/[^A-Z0-9_\.-]/i', '', $plugin->name);		$path = JPATH_PLUGINS . '/' . $plugin->type . '/' . $plugin->name . '/' . $plugin->name . '.php';		if (!isset($paths[$path]))		{			if (file_exists($path))			{				if (!isset($paths[$path]))				{					require_once $path;				}				$paths[$path] = true;				if ($autocreate)				{					// Makes sure we have an event dispatcher					if (!is_object($dispatcher))					{						$dispatcher = JEventDispatcher::getInstance();					}					$className = 'plg' . $plugin->type . $plugin->name;					if (class_exists($className))					{						// Load the plugin from the database.						if (!isset($plugin->params))						{							// Seems like this could just go bye bye completely							$plugin = self::getPlugin($plugin->type, $plugin->name);						}						// Instantiate and register the plugin.						new $className($dispatcher, (array) ($plugin));					}				}			}			else			{				$paths[$path] = false;			}		}	}	/**	 * Loads the published plugins.	 *	 * @return  array  An array of published plugins	 *	 * @since   11.1	 */	protected static function _load()	{		if (self::$plugins !== null)		{			return self::$plugins;		}		$user = JFactory::getUser();		$cache = JFactory::getCache('com_plugins', '');		$levels = implode(',', $user->getAuthorisedViewLevels());		if (!self::$plugins = $cache->get($levels))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('folder AS type, element AS name, params')				->from('#__extensions')				->where('enabled >= 1')				->where('type =' . $db->quote('plugin'))				->where('state >= 0')				->where('access IN (' . $levels . ')')				->order('ordering');			self::$plugins = $db->setQuery($query)->loadObjectList();			$cache->store(self::$plugins, $levels);		}		return self::$plugins;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');jimport('joomla.utilities.arrayhelper');/** * Form Class for the Joomla Platform. * * This class implements a robust API for constructing, populating, filtering, and validating forms. * It uses XML definitions to construct form fields and a variety of field and rule classes to * render and validate the form. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html4/interact/forms.html * @link        http://www.w3.org/TR/html5/forms.html * @since       11.1 */class JForm{	/**	 * The JRegistry data store for form fields during display.	 * @var    object	 * @since  11.1	 */	protected $data;	/**	 * The form object errors array.	 * @var    array	 * @since  11.1	 */	protected $errors = array();	/**	 * The name of the form instance.	 * @var    string	 * @since  11.1	 */	protected $name;	/**	 * The form object options for use in rendering and validation.	 * @var    array	 * @since  11.1	 */	protected $options = array();	/**	 * The form XML definition.	 * @var    SimpleXMLElement	 * @since  11.1	 */	protected $xml;	/**	 * Form instances.	 * @var    array	 * @since  11.1	 */	protected static $forms = array();	/**	 * Method to instantiate the form object.	 *	 * @param   string  $name     The name of the form.	 * @param   array   $options  An array of form options.	 *	 * @since   11.1	 */	public function __construct($name, array $options = array())	{		// Set the name for the form.		$this->name = $name;		// Initialise the JRegistry data.		$this->data = new JRegistry;		// Set the options if specified.		$this->options['control'] = isset($options['control']) ? $options['control'] : false;	}	/**	 * Method to bind data to the form.	 *	 * @param   mixed  $data  An array or object of data to bind to the form.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function bind($data)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		// The data must be an object or array.		if (!is_object($data) && !is_array($data))		{			return false;		}		// Convert the input to an array.		if (is_object($data))		{			if ($data instanceof JRegistry)			{				// Handle a JRegistry.				$data = $data->toArray();			}			elseif ($data instanceof JObject)			{				// Handle a JObject.				$data = $data->getProperties();			}			else			{				// Handle other types of objects.				$data = (array) $data;			}		}		// Process the input data.		foreach ($data as $k => $v)		{			if ($this->findField($k))			{				// If the field exists set the value.				$this->data->set($k, $v);			}			elseif (is_object($v) || JArrayHelper::isAssociative($v))			{				// If the value is an object or an associative array hand it off to the recursive bind level method.				$this->bindLevel($k, $v);			}		}		return true;	}	/**	 * Method to bind data to the form for the group level.	 *	 * @param   string  $group  The dot-separated form group path on which to bind the data.	 * @param   mixed   $data   An array or object of data to bind to the form for the group level.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function bindLevel($group, $data)	{		// Ensure the input data is an array.		settype($data, 'array');		// Process the input data.		foreach ($data as $k => $v)		{			if ($this->findField($k, $group))			{				// If the field exists set the value.				$this->data->set($group . '.' . $k, $v);			}			elseif (is_object($v) || JArrayHelper::isAssociative($v))			{				// If the value is an object or an associative array, hand it off to the recursive bind level method				$this->bindLevel($group . '.' . $k, $v);			}		}	}	/**	 * Method to filter the form data.	 *	 * @param   array   $data   An array of field values to filter.	 * @param   string  $group  The dot-separated form group path on which to filter the fields.	 *	 * @return  mixed  Array or false.	 *	 * @since   11.1	 */	public function filter($data, $group = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		$input = new JRegistry($data);		$output = new JRegistry;		// Get the fields for which to filter the data.		$fields = $this->findFieldsByGroup($group);		if (!$fields)		{			// PANIC!			return false;		}		// Filter the fields.		foreach ($fields as $field)		{			$name = (string) $field['name'];			// Get the field groups for the element.			$attrs = $field->xpath('ancestor::fields[@name]/@name');			$groups = array_map('strval', $attrs ? $attrs : array());			$group = implode('.', $groups);			// Get the field value from the data input.			if ($group)			{				// Filter the value if it exists.				if ($input->exists($group . '.' . $name))				{					$output->set($group . '.' . $name, $this->filterField($field, $input->get($group . '.' . $name, (string) $field['default'])));				}			}			else			{				// Filter the value if it exists.				if ($input->exists($name))				{					$output->set($name, $this->filterField($field, $input->get($name, (string) $field['default'])));				}			}		}		return $output->toArray();	}	/**	 * Return all errors, if any.	 *	 * @return  array  Array of error messages or RuntimeException objects.	 *	 * @since   11.1	 */	public function getErrors()	{		return $this->errors;	}	/**	 * Method to get a form field represented as a JFormField object.	 *	 * @param   string  $name   The name of the form field.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 * @param   mixed   $value  The optional value to use as the default for the field.	 *	 * @return  mixed  The JFormField object for the field or boolean false on error.	 *	 * @since   11.1	 */	public function getField($name, $group = null, $value = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		// Attempt to find the field by name and group.		$element = $this->findField($name, $group);		// If the field element was not found return false.		if (!$element)		{			return false;		}		return $this->loadField($element, $group, $value);	}	/**	 * Method to get an attribute value from a field XML element.  If the attribute doesn't exist or	 * is null then the optional default value will be used.	 *	 * @param   string  $name       The name of the form field for which to get the attribute value.	 * @param   string  $attribute  The name of the attribute for which to get a value.	 * @param   mixed   $default    The optional default value to use if no attribute value exists.	 * @param   string  $group      The optional dot-separated form group path on which to find the field.	 *	 * @return  mixed  The attribute value for the field.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function getFieldAttribute($name, $attribute, $default = null, $group = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Find the form field element from the definition.		$element = $this->findField($name, $group);		// If the element exists and the attribute exists for the field return the attribute value.		if (($element instanceof SimpleXMLElement) && ((string) $element[$attribute]))		{			return (string) $element[$attribute];		}		// Otherwise return the given default value.		else		{			return $default;		}	}	/**	 * Method to get an array of JFormField objects in a given fieldset by name.  If no name is	 * given then all fields are returned.	 *	 * @param   string  $set  The optional name of the fieldset.	 *	 * @return  array  The array of JFormField objects in the fieldset.	 *	 * @since   11.1	 */	public function getFieldset($set = null)	{		$fields = array();		// Get all of the field elements in the fieldset.		if ($set)		{			$elements = $this->findFieldsByFieldset($set);		}		// Get all fields.		else		{			$elements = $this->findFieldsByGroup();		}		// If no field elements were found return empty.		if (empty($elements))		{			return $fields;		}		// Build the result array from the found field elements.		foreach ($elements as $element)		{			// Get the field groups for the element.			$attrs = $element->xpath('ancestor::fields[@name]/@name');			$groups = array_map('strval', $attrs ? $attrs : array());			$group = implode('.', $groups);			// If the field is successfully loaded add it to the result array.			if ($field = $this->loadField($element, $group))			{				$fields[$field->id] = $field;			}		}		return $fields;	}	/**	 * Method to get an array of fieldset objects optionally filtered over a given field group.	 *	 * @param   string  $group  The dot-separated form group path on which to filter the fieldsets.	 *	 * @return  array  The array of fieldset objects.	 *	 * @since   11.1	 */	public function getFieldsets($group = null)	{		$fieldsets = array();		$sets = array();		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return $fieldsets;		}		if ($group)		{			// Get the fields elements for a given group.			$elements = &$this->findGroup($group);			foreach ($elements as &$element)			{				// Get an array of <fieldset /> elements and fieldset attributes within the fields element.				if ($tmp = $element->xpath('descendant::fieldset[@name] | descendant::field[@fieldset]/@fieldset'))				{					$sets = array_merge($sets, (array) $tmp);				}			}		}		else		{			// Get an array of <fieldset /> elements and fieldset attributes.			$sets = $this->xml->xpath('//fieldset[@name] | //field[@fieldset]/@fieldset');		}		// If no fieldsets are found return empty.		if (empty($sets))		{			return $fieldsets;		}		// Process each found fieldset.		foreach ($sets as $set)		{			// Are we dealing with a fieldset element?			if ((string) $set['name'])			{				// Only create it if it doesn't already exist.				if (empty($fieldsets[(string) $set['name']]))				{					// Build the fieldset object.					$fieldset = (object) array('name' => '', 'label' => '', 'description' => '');					foreach ($set->attributes() as $name => $value)					{						$fieldset->$name = (string) $value;					}					// Add the fieldset object to the list.					$fieldsets[$fieldset->name] = $fieldset;				}			}			// Must be dealing with a fieldset attribute.			else			{				// Only create it if it doesn't already exist.				if (empty($fieldsets[(string) $set]))				{					// Attempt to get the fieldset element for data (throughout the entire form document).					$tmp = $this->xml->xpath('//fieldset[@name="' . (string) $set . '"]');					// If no element was found, build a very simple fieldset object.					if (empty($tmp))					{						$fieldset = (object) array('name' => (string) $set, 'label' => '', 'description' => '');					}					// Build the fieldset object from the element.					else					{						$fieldset = (object) array('name' => '', 'label' => '', 'description' => '');						foreach ($tmp[0]->attributes() as $name => $value)						{							$fieldset->$name = (string) $value;						}					}					// Add the fieldset object to the list.					$fieldsets[$fieldset->name] = $fieldset;				}			}		}		return $fieldsets;	}	/**	 * Method to get the form control. This string serves as a container for all form fields. For	 * example, if there is a field named 'foo' and a field named 'bar' and the form control is	 * empty the fields will be rendered like: <input name="foo" /> and <input name="bar" />.  If	 * the form control is set to 'joomla' however, the fields would be rendered like:	 * <input name="joomla[foo]" /> and <input name="joomla[bar]" />.	 *	 * @return  string  The form control string.	 *	 * @since   11.1	 */	public function getFormControl()	{		return (string) $this->options['control'];	}	/**	 * Method to get an array of JFormField objects in a given field group by name.	 *	 * @param   string   $group   The dot-separated form group path for which to get the form fields.	 * @param   boolean  $nested  True to also include fields in nested groups that are inside of the	 *                            group for which to find fields.	 *	 * @return  array    The array of JFormField objects in the field group.	 *	 * @since   11.1	 */	public function getGroup($group, $nested = false)	{		$fields = array();		// Get all of the field elements in the field group.		$elements = $this->findFieldsByGroup($group, $nested);		// If no field elements were found return empty.		if (empty($elements))		{			return $fields;		}		// Build the result array from the found field elements.		foreach ($elements as $element)		{			// Get the field groups for the element.			$attrs	= $element->xpath('ancestor::fields[@name]/@name');			$groups	= array_map('strval', $attrs ? $attrs : array());			$group	= implode('.', $groups);			// If the field is successfully loaded add it to the result array.			if ($field = $this->loadField($element, $group))			{				$fields[$field->id] = $field;			}		}		return $fields;	}	/**	 * Method to get a form field markup for the field input.	 *	 * @param   string  $name   The name of the form field.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 * @param   mixed   $value  The optional value to use as the default for the field.	 *	 * @return  string  The form field markup.	 *	 * @since   11.1	 */	public function getInput($name, $group = null, $value = null)	{		// Attempt to get the form field.		if ($field = $this->getField($name, $group, $value))		{			return $field->input;		}		return '';	}	/**	 * Method to get the label for a field input.	 *	 * @param   string  $name   The name of the form field.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 *	 * @return  string  The form field label.	 *	 * @since   11.1	 */	public function getLabel($name, $group = null)	{		// Attempt to get the form field.		if ($field = $this->getField($name, $group))		{			return $field->label;		}		return '';	}	/**	 * Method to get the form name.	 *	 * @return  string  The name of the form.	 *	 * @since   11.1	 */	public function getName()	{		return $this->name;	}	/**	 * Method to get the value of a field.	 *	 * @param   string  $name     The name of the field for which to get the value.	 * @param   string  $group    The optional dot-separated form group path on which to get the value.	 * @param   mixed   $default  The optional default value of the field value is empty.	 *	 * @return  mixed  The value of the field or the default value if empty.	 *	 * @since   11.1	 */	public function getValue($name, $group = null, $default = null)	{		// If a group is set use it.		if ($group)		{			$return = $this->data->get($group . '.' . $name, $default);		}		else		{			$return = $this->data->get($name, $default);		}		return $return;	}	/**	 * Method to load the form description from an XML string or object.	 *	 * The replace option works per field.  If a field being loaded already exists in the current	 * form definition then the behavior or load will vary depending upon the replace flag.  If it	 * is set to true, then the existing field will be replaced in its exact location by the new	 * field being loaded.  If it is false, then the new field being loaded will be ignored and the	 * method will move on to the next field to load.	 *	 * @param   string  $data     The name of an XML string or object.	 * @param   string  $replace  Flag to toggle whether form fields should be replaced if a field	 *                            already exists with the same group/name.	 * @param   string  $xpath    An optional xpath to search for the fields.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function load($data, $replace = true, $xpath = false)	{		// If the data to load isn't already an XML element or string return false.		if ((!($data instanceof SimpleXMLElement)) && (!is_string($data)))		{			return false;		}		// Attempt to load the XML if a string.		if (is_string($data))		{			try			{				$data = new SimpleXMLElement($data);			}			catch (Exception $e)			{				return false;			}			// Make sure the XML loaded correctly.			if (!$data)			{				return false;			}		}		// If we have no XML definition at this point let's make sure we get one.		if (empty($this->xml))		{			// If no XPath query is set to search for fields, and we have a <form />, set it and return.			if (!$xpath && ($data->getName() == 'form'))			{				$this->xml = $data;				// Synchronize any paths found in the load.				$this->syncPaths();				return true;			}			// Create a root element for the form.			else			{				$this->xml = new SimpleXMLElement('<form></form>');			}		}		// Get the XML elements to load.		$elements = array();		if ($xpath)		{			$elements = $data->xpath($xpath);		}		elseif ($data->getName() == 'form')		{			$elements = $data->children();		}		// If there is nothing to load return true.		if (empty($elements))		{			return true;		}		// Load the found form elements.		foreach ($elements as $element)		{			// Get an array of fields with the correct name.			$fields = $element->xpath('descendant-or-self::field');			foreach ($fields as $field)			{				// Get the group names as strings for ancestor fields elements.				$attrs = $field->xpath('ancestor::fields[@name]/@name');				$groups = array_map('strval', $attrs ? $attrs : array());				// Check to see if the field exists in the current form.				if ($current = $this->findField((string) $field['name'], implode('.', $groups)))				{					// If set to replace found fields, replace the data and remove the field so we don't add it twice.					if ($replace)					{						$olddom = dom_import_simplexml($current);						$loadeddom = dom_import_simplexml($field);						$addeddom = $olddom->ownerDocument->importNode($loadeddom);						$olddom->parentNode->replaceChild($addeddom, $olddom);						$loadeddom->parentNode->removeChild($loadeddom);					}					else					{						unset($field);					}				}			}			// Merge the new field data into the existing XML document.			self::addNode($this->xml, $element);		}		// Synchronize any paths found in the load.		$this->syncPaths();		return true;	}	/**	 * Method to load the form description from an XML file.	 *	 * The reset option works on a group basis. If the XML file references	 * groups that have already been created they will be replaced with the	 * fields in the new XML file unless the $reset parameter has been set	 * to false.	 *	 * @param   string  $file   The filesystem path of an XML file.	 * @param   string  $reset  Flag to toggle whether form fields should be replaced if a field	 *                          already exists with the same group/name.	 * @param   string  $xpath  An optional xpath to search for the fields.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function loadFile($file, $reset = true, $xpath = false)	{		// Check to see if the path is an absolute path.		if (!is_file($file))		{			// Not an absolute path so let's attempt to find one using JPath.			$file = JPath::find(self::addFormPath(), strtolower($file) . '.xml');			// If unable to find the file return false.			if (!$file)			{				return false;			}		}		// Attempt to load the XML file.		$xml = simplexml_load_file($file);		return $this->load($xml, $reset, $xpath);	}	/**	 * Method to remove a field from the form definition.	 *	 * @param   string  $name   The name of the form field for which remove.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function removeField($name, $group = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Find the form field element from the definition.		$element = $this->findField($name, $group);		// If the element exists remove it from the form definition.		if ($element instanceof SimpleXMLElement)		{			$dom = dom_import_simplexml($element);			$dom->parentNode->removeChild($dom);		}		return true;	}	/**	 * Method to remove a group from the form definition.	 *	 * @param   string  $group  The dot-separated form group path for the group to remove.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function removeGroup($group)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Get the fields elements for a given group.		$elements = &$this->findGroup($group);		foreach ($elements as &$element)		{			$dom = dom_import_simplexml($element);			$dom->parentNode->removeChild($dom);		}		return true;	}	/**	 * Method to reset the form data store and optionally the form XML definition.	 *	 * @param   boolean  $xml  True to also reset the XML form definition.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function reset($xml = false)	{		unset($this->data);		$this->data = new JRegistry;		if ($xml)		{			unset($this->xml);			$this->xml = new SimpleXMLElement('<form></form>');		}		return true;	}	/**	 * Method to set a field XML element to the form definition.  If the replace flag is set then	 * the field will be set whether it already exists or not.  If it isn't set, then the field	 * will not be replaced if it already exists.	 *	 * @param   SimpleXMLElement  $element  The XML element object representation of the form field.	 * @param   string            $group    The optional dot-separated form group path on which to set the field.	 * @param   boolean           $replace  True to replace an existing field if one already exists.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function setField(SimpleXMLElement $element, $group = null, $replace = true)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Find the form field element from the definition.		$old = &$this->findField((string) $element['name'], $group);		// If an existing field is found and replace flag is false do nothing and return true.		if (!$replace && !empty($old))		{			return true;		}		// If an existing field is found and replace flag is true remove the old field.		if ($replace && !empty($old) && ($old instanceof SimpleXMLElement))		{			$dom = dom_import_simplexml($old);			$dom->parentNode->removeChild($dom);		}		// If no existing field is found find a group element and add the field as a child of it.		if ($group)		{			// Get the fields elements for a given group.			$fields = &$this->findGroup($group);			// If an appropriate fields element was found for the group, add the element.			if (isset($fields[0]) && ($fields[0] instanceof SimpleXMLElement))			{				self::addNode($fields[0], $element);			}		}		else		{			// Set the new field to the form.			self::addNode($this->xml, $element);		}		// Synchronize any paths found in the load.		$this->syncPaths();		return true;	}	/**	 * Method to set an attribute value for a field XML element.	 *	 * @param   string  $name       The name of the form field for which to set the attribute value.	 * @param   string  $attribute  The name of the attribute for which to set a value.	 * @param   mixed   $value      The value to set for the attribute.	 * @param   string  $group      The optional dot-separated form group path on which to find the field.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function setFieldAttribute($name, $attribute, $value, $group = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Find the form field element from the definition.		$element = $this->findField($name, $group);		// If the element doesn't exist return false.		if (!($element instanceof SimpleXMLElement))		{			return false;		}		// Otherwise set the attribute and return true.		else		{			$element[$attribute] = $value;			// Synchronize any paths found in the load.			$this->syncPaths();			return true;		}	}	/**	 * Method to set some field XML elements to the form definition.  If the replace flag is set then	 * the fields will be set whether they already exists or not.  If it isn't set, then the fields	 * will not be replaced if they already exist.	 *	 * @param   array    &$elements  The array of XML element object representations of the form fields.	 * @param   string   $group      The optional dot-separated form group path on which to set the fields.	 * @param   boolean  $replace    True to replace existing fields if they already exist.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function setFields(&$elements, $group = null, $replace = true)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Make sure the elements to set are valid.		foreach ($elements as $element)		{			if (!($element instanceof SimpleXMLElement))			{				throw new UnexpectedValueException(sprintf('$element not SimpleXMLElement in %s::setFields', get_class($this)));			}		}		// Set the fields.		$return = true;		foreach ($elements as $element)		{			if (!$this->setField($element, $group, $replace))			{				$return = false;			}		}		// Synchronize any paths found in the load.		$this->syncPaths();		return $return;	}	/**	 * Method to set the value of a field. If the field does not exist in the form then the method	 * will return false.	 *	 * @param   string  $name   The name of the field for which to set the value.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 * @param   mixed   $value  The value to set for the field.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function setValue($name, $group = null, $value = null)	{		// If the field does not exist return false.		if (!$this->findField($name, $group))		{			return false;		}		// If a group is set use it.		if ($group)		{			$this->data->set($group . '.' . $name, $value);		}		else		{			$this->data->set($name, $value);		}		return true;	}	/**	 * Method to validate form data.	 *	 * Validation warnings will be pushed into JForm::errors and should be	 * retrieved with JForm::getErrors() when validate returns boolean false.	 *	 * @param   array   $data   An array of field values to validate.	 * @param   string  $group  The optional dot-separated form group path on which to filter the	 *                          fields to be validated.	 *	 * @return  mixed  True on sucess.	 *	 * @since   11.1	 */	public function validate($data, $group = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		$return = true;		// Create an input registry object from the data to validate.		$input = new JRegistry($data);		// Get the fields for which to validate the data.		$fields = $this->findFieldsByGroup($group);		if (!$fields)		{			// PANIC!			return false;		}		// Validate the fields.		foreach ($fields as $field)		{			$value = null;			$name = (string) $field['name'];			// Get the group names as strings for ancestor fields elements.			$attrs = $field->xpath('ancestor::fields[@name]/@name');			$groups = array_map('strval', $attrs ? $attrs : array());			$group = implode('.', $groups);			// Get the value from the input data.			if ($group)			{				$value = $input->get($group . '.' . $name);			}			else			{				$value = $input->get($name);			}			// Validate the field.			$valid = $this->validateField($field, $group, $value, $input);			// Check for an error.			if ($valid instanceof Exception)			{				array_push($this->errors, $valid);				$return = false;			}		}		return $return;	}	/**	 * Method to apply an input filter to a value based on field data.	 *	 * @param   string  $element  The XML element object representation of the form field.	 * @param   mixed   $value    The value to filter for the field.	 *	 * @return  mixed   The filtered value.	 *	 * @since   11.1	 */	protected function filterField($element, $value)	{		// Make sure there is a valid SimpleXMLElement.		if (!($element instanceof SimpleXMLElement))		{			return false;		}		// Get the field filter type.		$filter = (string) $element['filter'];		// Process the input value based on the filter.		$return = null;		switch (strtoupper($filter))		{			// Access Control Rules.			case 'RULES':				$return = array();				foreach ((array) $value as $action => $ids)				{					// Build the rules array.					$return[$action] = array();					foreach ($ids as $id => $p)					{						if ($p !== '')						{							$return[$action][$id] = ($p == '1' || $p == 'true') ? true : false;						}					}				}				break;			// Do nothing, thus leaving the return value as null.			case 'UNSET':				break;			// No Filter.			case 'RAW':				$return = $value;				break;			// Filter the input as an array of integers.			case 'INT_ARRAY':				// Make sure the input is an array.				if (is_object($value))				{					$value = get_object_vars($value);				}				$value = is_array($value) ? $value : array($value);				JArrayHelper::toInteger($value);				$return = $value;				break;			// Filter safe HTML.			case 'SAFEHTML':				$return = JFilterInput::getInstance(null, null, 1, 1)->clean($value, 'string');				break;			// Convert a date to UTC based on the server timezone offset.			case 'SERVER_UTC':				if ((int) $value > 0)				{					// Get the server timezone setting.					$offset = JFactory::getConfig()->get('offset');					// Return an SQL formatted datetime string in UTC.					$return = JFactory::getDate($value, $offset)->toSql();				}				else				{					$return = '';				}				break;			// Convert a date to UTC based on the user timezone offset.			case 'USER_UTC':				if ((int) $value > 0)				{					// Get the user timezone setting defaulting to the server timezone setting.					$offset = JFactory::getUser()->getParam('timezone', JFactory::getConfig()->get('offset'));					// Return a MySQL formatted datetime string in UTC.					$return = JFactory::getDate($value, $offset)->toSql();				}				else				{					$return = '';				}				break;			// Ensures a protocol is present in the saved field. Only use when			// the only permitted protocols requre '://'. See JFormRuleUrl for list of these.			case 'URL':				if (empty($value))				{					return;				}				$value = JFilterInput::getInstance()->clean($value, 'html');				$value = trim($value);				// Check for a protocol				$protocol = parse_url($value, PHP_URL_SCHEME);				// If there is no protocol and the relative option is not specified,				// we assume that it is an external URL and prepend http://.				if (($element['type'] == 'url' && !$protocol &&  !$element['relative'])					|| (!$element['type'] == 'url' && !$protocol))				{					$protocol = 'http';					// If it looks like an internal link, then add the root.					if (substr($value, 0) == 'index.php')					{						$value = JURI::root() . $value;					}					// Otherwise we treat it is an external link.					// Put the url back together.					$value = $protocol . '://' . $value;				}				// If relative URLS are allowed we assume that URLs without protocols are internal.				elseif (!$protocol && $element['relative'])				{					$host = JURI::getInstance('SERVER')->gethost();					// If it starts with the host string, just prepend the protocol.					if (substr($value, 0) == $host)					{						$value = 'http://' . $value;					}					// Otherwise prepend the root.					else					{						$value = JURI::root() . $value;					}				}				$return = $value;				break;			case 'TEL':				$value = trim($value);				// Does it match the NANP pattern?				if (preg_match('/^(?:\+?1[-. ]?)?\(?([2-9][0-8][0-9])\)?[-. ]?([2-9][0-9]{2})[-. ]?([0-9]{4})$/', $value) == 1)				{					$number = (string) preg_replace('/[^\d]/', '', $value);					if (substr($number, 0, 1) == 1)					{						$number = substr($number, 1);					}					if (substr($number, 0, 2) == '+1')					{						$number = substr($number, 2);					}					$result = '1.' . $number;				}				// If not, does it match ITU-T?				elseif (preg_match('/^\+(?:[0-9] ?){6,14}[0-9]$/', $value) == 1)				{					$countrycode = substr($value, 0, strpos($value, ' '));					$countrycode = (string) preg_replace('/[^\d]/', '', $countrycode);					$number = strstr($value, ' ');					$number = (string) preg_replace('/[^\d]/', '', $number);					$result = $countrycode . '.' . $number;				}				// If not, does it match EPP?				elseif (preg_match('/^\+[0-9]{1,3}\.[0-9]{4,14}(?:x.+)?$/', $value) == 1)				{					if (strstr($value, 'x'))					{						$xpos = strpos($value, 'x');						$value = substr($value, 0, $xpos);					}					$result = str_replace('+', '', $value);				}				// Maybe it is already ccc.nnnnnnn?				elseif (preg_match('/[0-9]{1,3}\.[0-9]{4,14}$/', $value) == 1)				{					$result = $value;				}				// If not, can we make it a string of digits?				else				{					$value = (string) preg_replace('/[^\d]/', '', $value);					if ($value != null && strlen($value) <= 15)					{						$length = strlen($value);						// If it is fewer than 13 digits assume it is a local number						if ($length <= 12)						{							$result = '.' . $value;						}						else						{							// If it has 13 or more digits let's make a country code.							$cclen = $length - 12;							$result = substr($value, 0, $cclen) . '.' . substr($value, $cclen);						}					}					// If not let's not save anything.					else					{						$result = '';					}				}				$return = $result;				break;			default:				// Check for a callback filter.				if (strpos($filter, '::') !== false && is_callable(explode('::', $filter)))				{					$return = call_user_func(explode('::', $filter), $value);				}				// Filter using a callback function if specified.				elseif (function_exists($filter))				{					$return = call_user_func($filter, $value);				}				// Filter using JFilterInput. All HTML code is filtered by default.				else				{					$return = JFilterInput::getInstance()->clean($value, $filter);				}				break;		}		return $return;	}	/**	 * Method to get a form field represented as an XML element object.	 *	 * @param   string  $name   The name of the form field.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 *	 * @return  mixed  The XML element object for the field or boolean false on error.	 *	 * @since   11.1	 */	protected function findField($name, $group = null)	{		$element = false;		$fields = array();		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		// Let's get the appropriate field element based on the method arguments.		if ($group)		{			// Get the fields elements for a given group.			$elements = &$this->findGroup($group);			// Get all of the field elements with the correct name for the fields elements.			foreach ($elements as $element)			{				// If there are matching field elements add them to the fields array.				if ($tmp = $element->xpath('descendant::field[@name="' . $name . '"]'))				{					$fields = array_merge($fields, $tmp);				}			}			// Make sure something was found.			if (!$fields)			{				return false;			}			// Use the first correct match in the given group.			$groupNames = explode('.', $group);			foreach ($fields as &$field)			{				// Get the group names as strings for ancestor fields elements.				$attrs = $field->xpath('ancestor::fields[@name]/@name');				$names = array_map('strval', $attrs ? $attrs : array());				// If the field is in the exact group use it and break out of the loop.				if ($names == (array) $groupNames)				{					$element = &$field;					break;				}			}		}		else		{			// Get an array of fields with the correct name.			$fields = $this->xml->xpath('//field[@name="' . $name . '"]');			// Make sure something was found.			if (!$fields)			{				return false;			}			// Search through the fields for the right one.			foreach ($fields as &$field)			{				// If we find an ancestor fields element with a group name then it isn't what we want.				if ($field->xpath('ancestor::fields[@name]'))				{					continue;				}				// Found it!				else				{					$element = &$field;					break;				}			}		}		return $element;	}	/**	 * Method to get an array of <field /> elements from the form XML document which are	 * in a specified fieldset by name.	 *	 * @param   string  $name  The name of the fieldset.	 *	 * @return  mixed  Boolean false on error or array of SimpleXMLElement objects.	 *	 * @since   11.1	 */	protected function &findFieldsByFieldset($name)	{		$false = false;		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return $false;		}		/*		 * Get an array of <field /> elements that are underneath a <fieldset /> element		 * with the appropriate name attribute, and also any <field /> elements with		 * the appropriate fieldset attribute.		 */		$fields = $this->xml->xpath('//fieldset[@name="' . $name . '"]//field | //field[@fieldset="' . $name . '"]');		return $fields;	}	/**	 * Method to get an array of <field /> elements from the form XML document which are	 * in a control group by name.	 *	 * @param   mixed    $group   The optional dot-separated form group path on which to find the fields.	 *                            Null will return all fields. False will return fields not in a group.	 * @param   boolean  $nested  True to also include fields in nested groups that are inside of the	 *                            group for which to find fields.	 *	 * @return  mixed  Boolean false on error or array of SimpleXMLElement objects.	 *	 * @since   11.1	 */	protected function &findFieldsByGroup($group = null, $nested = false)	{		$false = false;		$fields = array();		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return $false;		}		// Get only fields in a specific group?		if ($group)		{			// Get the fields elements for a given group.			$elements = &$this->findGroup($group);			// Get all of the field elements for the fields elements.			foreach ($elements as $element)			{				// If there are field elements add them to the return result.				if ($tmp = $element->xpath('descendant::field'))				{					// If we also want fields in nested groups then just merge the arrays.					if ($nested)					{						$fields = array_merge($fields, $tmp);					}					// If we want to exclude nested groups then we need to check each field.					else					{						$groupNames = explode('.', $group);						foreach ($tmp as $field)						{							// Get the names of the groups that the field is in.							$attrs = $field->xpath('ancestor::fields[@name]/@name');							$names = array_map('strval', $attrs ? $attrs : array());							// If the field is in the specific group then add it to the return list.							if ($names == (array) $groupNames)							{								$fields = array_merge($fields, array($field));							}						}					}				}			}		}		elseif ($group === false)		{			// Get only field elements not in a group.			$fields = $this->xml->xpath('descendant::fields[not(@name)]/field | descendant::fields[not(@name)]/fieldset/field ');		}		else		{			// Get an array of all the <field /> elements.			$fields = $this->xml->xpath('//field');		}		return $fields;	}	/**	 * Method to get a form field group represented as an XML element object.	 *	 * @param   string  $group  The dot-separated form group path on which to find the group.	 *	 * @return  mixed  An array of XML element objects for the group or boolean false on error.	 *	 * @since   11.1	 */	protected function &findGroup($group)	{		$false = false;		$groups = array();		$tmp = array();		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return $false;		}		// Make sure there is actually a group to find.		$group = explode('.', $group);		if (!empty($group))		{			// Get any fields elements with the correct group name.			$elements = $this->xml->xpath('//fields[@name="' . (string) $group[0] . '"]');			// Check to make sure that there are no parent groups for each element.			foreach ($elements as $element)			{				if (!$element->xpath('ancestor::fields[@name]'))				{					$tmp[] = $element;				}			}			// Iterate through the nested groups to find any matching form field groups.			for ($i = 1, $n = count($group); $i < $n; $i++)			{				// Initialise some loop variables.				$validNames = array_slice($group, 0, $i + 1);				$current = $tmp;				$tmp = array();				// Check to make sure that there are no parent groups for each element.				foreach ($current as $element)				{					// Get any fields elements with the correct group name.					$children = $element->xpath('descendant::fields[@name="' . (string) $group[$i] . '"]');					// For the found fields elements validate that they are in the correct groups.					foreach ($children as $fields)					{						// Get the group names as strings for ancestor fields elements.						$attrs = $fields->xpath('ancestor-or-self::fields[@name]/@name');						$names = array_map('strval', $attrs ? $attrs : array());						// If the group names for the fields element match the valid names at this						// level add the fields element.						if ($validNames == $names)						{							$tmp[] = $fields;						}					}				}			}			// Only include valid XML objects.			foreach ($tmp as $element)			{				if ($element instanceof SimpleXMLElement)				{					$groups[] = $element;				}			}		}		return $groups;	}	/**	 * Method to load, setup and return a JFormField object based on field data.	 *	 * @param   string  $element  The XML element object representation of the form field.	 * @param   string  $group    The optional dot-separated form group path on which to find the field.	 * @param   mixed   $value    The optional value to use as the default for the field.	 *	 * @return  mixed  The JFormField object for the field or boolean false on error.	 *	 * @since   11.1	 */	protected function loadField($element, $group = null, $value = null)	{		// Make sure there is a valid SimpleXMLElement.		if (!($element instanceof SimpleXMLElement))		{			return false;		}		// Get the field type.		$type = $element['type'] ? (string) $element['type'] : 'text';		// Load the JFormField object for the field.		$field = $this->loadFieldType($type);		// If the object could not be loaded, get a text field object.		if ($field === false)		{			$field = $this->loadFieldType('text');		}		/*		 * Get the value for the form field if not set.		 * Default to the translated version of the 'default' attribute		 * if 'translate_default' attribute if set to 'true' or '1'		 * else the value of the 'default' attribute for the field.		 */		if ($value === null)		{			$default = (string) $element['default'];			if (($translate = $element['translate_default']) && ((string) $translate == 'true' || (string) $translate == '1'))			{				$lang = JFactory::getLanguage();				if ($lang->hasKey($default))				{					$debug = $lang->setDebug(false);					$default = JText::_($default);					$lang->setDebug($debug);				}				else				{					$default = JText::_($default);				}			}			$value = $this->getValue((string) $element['name'], $group, $default);		}		// Setup the JFormField object.		$field->setForm($this);		if ($field->setup($element, $value, $group))		{			return $field;		}		else		{			return false;		}	}	/**	 * Proxy for {@link JFormHelper::loadFieldType()}.	 *	 * @param   string   $type  The field type.	 * @param   boolean  $new   Flag to toggle whether we should get a new instance of the object.	 *	 * @return  mixed  JFormField object on success, false otherwise.	 *	 * @since   11.1	 */	protected function loadFieldType($type, $new = true)	{		return JFormHelper::loadFieldType($type, $new);	}	/**	 * Proxy for JFormHelper::loadRuleType().	 *	 * @param   string   $type  The rule type.	 * @param   boolean  $new   Flag to toggle whether we should get a new instance of the object.	 *	 * @return  mixed  JFormRule object on success, false otherwise.	 *	 * @see     JFormHelper::loadRuleType()	 * @since   11.1	 */	protected function loadRuleType($type, $new = true)	{		return JFormHelper::loadRuleType($type, $new);	}	/**	 * Method to synchronize any field, form or rule paths contained in the XML document.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @todo    Maybe we should receive all addXXXpaths attributes at once?	 */	protected function syncPaths()	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		// Get any addfieldpath attributes from the form definition.		$paths = $this->xml->xpath('//*[@addfieldpath]/@addfieldpath');		$paths = array_map('strval', $paths ? $paths : array());		// Add the field paths.		foreach ($paths as $path)		{			$path = JPATH_ROOT . '/' . ltrim($path, '/\\');			self::addFieldPath($path);		}		// Get any addformpath attributes from the form definition.		$paths = $this->xml->xpath('//*[@addformpath]/@addformpath');		$paths = array_map('strval', $paths ? $paths : array());		// Add the form paths.		foreach ($paths as $path)		{			$path = JPATH_ROOT . '/' . ltrim($path, '/\\');			self::addFormPath($path);		}		// Get any addrulepath attributes from the form definition.		$paths = $this->xml->xpath('//*[@addrulepath]/@addrulepath');		$paths = array_map('strval', $paths ? $paths : array());		// Add the rule paths.		foreach ($paths as $path)		{			$path = JPATH_ROOT . '/' . ltrim($path, '/\\');			self::addRulePath($path);		}		return true;	}	/**	 * Method to validate a JFormField object based on field data.	 *	 * @param   SimpleXMLElement  $element  The XML element object representation of the form field.	 * @param   string            $group    The optional dot-separated form group path on which to find the field.	 * @param   mixed             $value    The optional value to use as the default for the field.	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate	 *                                      against the entire form.	 *	 * @return  mixed  Boolean true if field value is valid, Exception on failure.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 * @throws  UnexpectedValueException	 */	protected function validateField(SimpleXMLElement $element, $group = null, $value = null, JRegistry $input = null)	{		$valid = true;		// Check if the field is required.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if ($required)		{			// If the field is required and the value is empty return an error message.			if (($value === '') || ($value === null))			{				if ($element['label'])				{					$message = JText::_($element['label']);				}				else				{					$message = JText::_($element['name']);				}				$message = JText::sprintf('JLIB_FORM_VALIDATE_FIELD_REQUIRED', $message);				return new RuntimeException($message);			}		}		// Get the field validation rule.		if ($type = (string) $element['validate'])		{			// Load the JFormRule object for the field.			$rule = $this->loadRuleType($type);			// If the object could not be loaded return an error message.			if ($rule === false)			{				throw new UnexpectedValueException(sprintf('%s::validateField() rule `%s` missing.', get_class($this), $type));			}			// Run the field validation rule test.			$valid = $rule->test($element, $value, $group, $input, $this);			// Check for an error in the validation test.			if ($valid instanceof Exception)			{				return $valid;			}		}		// Check if the field is valid.		if ($valid === false)		{			// Does the field have a defined error message?			$message = (string) $element['message'];			if ($message)			{				$message = JText::_($element['message']);				return new UnexpectedValueException($message);			}			else			{				$message = JText::_($element['label']);				$message = JText::sprintf('JLIB_FORM_VALIDATE_FIELD_INVALID', $message);				return new UnexpectedValueException($message);			}		}		return true;	}	/**	 * Proxy for {@link JFormHelper::addFieldPath()}.	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @since   11.1	 */	public static function addFieldPath($new = null)	{		return JFormHelper::addFieldPath($new);	}	/**	 * Proxy for JFormHelper::addFormPath().	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @see     JFormHelper::addFormPath()	 * @since   11.1	 */	public static function addFormPath($new = null)	{		return JFormHelper::addFormPath($new);	}	/**	 * Proxy for JFormHelper::addRulePath().	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @see JFormHelper::addRulePath()	 * @since   11.1	 */	public static function addRulePath($new = null)	{		return JFormHelper::addRulePath($new);	}	/**	 * Method to get an instance of a form.	 *	 * @param   string  $name     The name of the form.	 * @param   string  $data     The name of an XML file or string to load as the form definition.	 * @param   array   $options  An array of form options.	 * @param   string  $replace  Flag to toggle whether form fields should be replaced if a field	 *                            already exists with the same group/name.	 * @param   string  $xpath    An optional xpath to search for the fields.	 *	 * @return  object  JForm instance.	 *	 * @since   11.1	 * @throws  InvalidArgumentException if no data provided.	 * @throws  RuntimeException if the form could not be loaded.	 */	public static function getInstance($name, $data = null, $options = array(), $replace = true, $xpath = false)	{		// Reference to array with form instances		$forms = &self::$forms;		// Only instantiate the form if it does not already exist.		if (!isset($forms[$name]))		{			$data = trim($data);			if (empty($data))			{				throw new InvalidArgumentException(sprintf('JForm::getInstance(name, *%s*)', gettype($data)));			}			// Instantiate the form.			$forms[$name] = new JForm($name, $options);			// Load the data.			if (substr(trim($data), 0, 1) == '<')			{				if ($forms[$name]->load($data, $replace, $xpath) == false)				{					throw new RuntimeException('JForm::getInstance could not load form');				}			}			else			{				if ($forms[$name]->loadFile($data, $replace, $xpath) == false)				{					throw new RuntimeException('JForm::getInstance could not load file');				}			}		}		return $forms[$name];	}	/**	 * Adds a new child SimpleXMLElement node to the source.	 *	 * @param   SimpleXMLElement  $source  The source element on which to append.	 * @param   SimpleXMLElement  $new     The new element to append.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function addNode(SimpleXMLElement $source, SimpleXMLElement $new)	{		// Add the new child node.		$node = $source->addChild($new->getName(), trim($new));		// Add the attributes of the child node.		foreach ($new->attributes() as $name => $value)		{			$node->addAttribute($name, $value);		}		// Add any children of the new node.		foreach ($new->children() as $child)		{			self::addNode($node, $child);		}	}	/**	 * Update the attributes of a child node	 *	 * @param   SimpleXMLElement  $source  The source element on which to append the attributes	 * @param   SimpleXMLElement  $new     The new element to append	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function mergeNode(SimpleXMLElement $source, SimpleXMLElement $new)	{		// Update the attributes of the child node.		foreach ($new->attributes() as $name => $value)		{			if (isset($source[$name]))			{				$source[$name] = (string) $value;			}			else			{				$source->addAttribute($name, $value);			}		}	}	/**	 * Merges new elements into a source <fields> element.	 *	 * @param   SimpleXMLElement  $source  The source element.	 * @param   SimpleXMLElement  $new     The new element to merge.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function mergeNodes(SimpleXMLElement $source, SimpleXMLElement $new)	{		// The assumption is that the inputs are at the same relative level.		// So we just have to scan the children and deal with them.		// Update the attributes of the child node.		foreach ($new->attributes() as $name => $value)		{			if (isset($source[$name]))			{				$source[$name] = (string) $value;			}			else			{				$source->addAttribute($name, $value);			}		}		foreach ($new->children() as $child)		{			$type = $child->getName();			$name = $child['name'];			// Does this node exist?			$fields = $source->xpath($type . '[@name="' . $name . '"]');			if (empty($fields))			{				// This node does not exist, so add it.				self::addNode($source, $child);			}			else			{				// This node does exist.				switch ($type)				{					case 'field':						self::mergeNode($fields[0], $child);						break;					default:						self::mergeNodes($fields[0], $child);						break;				}			}		}	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Form Field to display a list of the layouts for a component view from * the extension or template overrides. * * @package     Joomla.Legacy * @subpackage  Form * @since       11.1 */class JFormFieldComponentlayout extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'ComponentLayout';	/**	 * Method to get the field input for a component layout field.	 *	 * @return  string   The field input.	 *	 * @since   11.1	 */	protected function getInput()	{		// Get the client id.		$clientId = $this->element['client_id'];		if (is_null($clientId) && $this->form instanceof JForm)		{			$clientId = $this->form->getValue('client_id');		}		$clientId = (int) $clientId;		$client = JApplicationHelper::getClientInfo($clientId);		// Get the extension.		$extn = (string) $this->element['extension'];		if (empty($extn) && ($this->form instanceof JForm))		{			$extn = $this->form->getValue('extension');		}		$extn = preg_replace('#\W#', '', $extn);		// Get the template.		$template = (string) $this->element['template'];		$template = preg_replace('#\W#', '', $template);		// Get the style.		if ($this->form instanceof JForm)		{			$template_style_id = $this->form->getValue('template_style_id');		}		$template_style_id = preg_replace('#\W#', '', $template_style_id);		// Get the view.		$view = (string) $this->element['view'];		$view = preg_replace('#\W#', '', $view);		// If a template, extension and view are present build the options.		if ($extn && $view && $client)		{			// Load language file			$lang = JFactory::getLanguage();			$lang->load($extn . '.sys', JPATH_ADMINISTRATOR, null, false, false)				|| $lang->load($extn . '.sys', JPATH_ADMINISTRATOR . '/components/' . $extn, null, false, false)				|| $lang->load($extn . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)				|| $lang->load($extn . '.sys', JPATH_ADMINISTRATOR . '/components/' . $extn, $lang->getDefault(), false, false);			// Get the database object and a new query object.			$db = JFactory::getDbo();			$query = $db->getQuery(true);			// Build the query.			$query->select('e.element, e.name')				->from('#__extensions as e')				->where('e.client_id = ' . (int) $clientId)				->where('e.type = ' . $db->quote('template'))				->where('e.enabled = 1');			if ($template)			{				$query->where('e.element = ' . $db->quote($template));			}			if ($template_style_id)			{				$query->join('LEFT', '#__template_styles as s on s.template=e.element')					->where('s.id=' . (int) $template_style_id);			}			// Set the query and load the templates.			$db->setQuery($query);			$templates = $db->loadObjectList('element');			// Build the search paths for component layouts.			$component_path = JPath::clean($client->path . '/components/' . $extn . '/views/' . $view . '/tmpl');			// Prepare array of component layouts			$component_layouts = array();			// Prepare the grouped list			$groups = array();			// Add a Use Global option if useglobal="true" in XML file			if ($this->element['useglobal'] == 'true')			{				$groups[JText::_('JOPTION_FROM_STANDARD')]['items'][] = JHtml::_('select.option', '', JText::_('JGLOBAL_USE_GLOBAL'));			}			// Add the layout options from the component path.			if (is_dir($component_path) && ($component_layouts = JFolder::files($component_path, '^[^_]*\.xml$', false, true)))			{				// Create the group for the component				$groups['_'] = array();				$groups['_']['id'] = $this->id . '__';				$groups['_']['text'] = JText::sprintf('JOPTION_FROM_COMPONENT');				$groups['_']['items'] = array();				foreach ($component_layouts as $i => $file)				{					// Attempt to load the XML file.					if (!$xml = simplexml_load_file($file))					{						unset($component_layouts[$i]);						continue;					}					// Get the help data from the XML file if present.					if (!$menu = $xml->xpath('layout[1]'))					{						unset($component_layouts[$i]);						continue;					}					$menu = $menu[0];					// Add an option to the component group					$value = basename($file, '.xml');					$component_layouts[$i] = $value;					$text = isset($menu['option']) ? JText::_($menu['option']) : (isset($menu['title']) ? JText::_($menu['title']) : $value);					$groups['_']['items'][] = JHtml::_('select.option', '_:' . $value, $text);				}			}			// Loop on all templates			if ($templates)			{				foreach ($templates as $template)				{					// Load language file					$lang->load('tpl_' . $template->element . '.sys', $client->path, null, false, false)						|| $lang->load('tpl_' . $template->element . '.sys', $client->path . '/templates/' . $template->element, null, false, false)						|| $lang->load('tpl_' . $template->element . '.sys', $client->path, $lang->getDefault(), false, false)						|| $lang->load(						'tpl_' . $template->element . '.sys', $client->path . '/templates/' . $template->element, $lang->getDefault(), false, false					);					$template_path = JPath::clean($client->path . '/templates/' . $template->element . '/html/' . $extn . '/' . $view);					// Add the layout options from the template path.					if (is_dir($template_path) && ($files = JFolder::files($template_path, '^[^_]*\.php$', false, true)))					{						// Files with corresponding XML files are alternate menu items, not alternate layout files						// so we need to exclude these files from the list.						$xml_files = JFolder::files($template_path, '^[^_]*\.xml$', false, true);						for ($j = 0, $count = count($xml_files); $j < $count; $j++)						{							$xml_files[$j] = basename($xml_files[$j], '.xml');						}						foreach ($files as $i => $file)						{							// Remove layout files that exist in the component folder or that have XML files							if ((in_array(basename($file, '.php'), $component_layouts))								|| (in_array(basename($file, '.php'), $xml_files)))							{								unset($files[$i]);							}						}						if (count($files))						{							// Create the group for the template							$groups[$template->name] = array();							$groups[$template->name]['id'] = $this->id . '_' . $template->element;							$groups[$template->name]['text'] = JText::sprintf('JOPTION_FROM_TEMPLATE', $template->name);							$groups[$template->name]['items'] = array();							foreach ($files as $file)							{								// Add an option to the template group								$value = basename($file, '.php');								$text = $lang									->hasKey($key = strtoupper('TPL_' . $template->name . '_' . $extn . '_' . $view . '_LAYOUT_' . $value))									? JText::_($key) : $value;								$groups[$template->name]['items'][] = JHtml::_('select.option', $template->element . ':' . $value, $text);							}						}					}				}			}			// Compute attributes for the grouped list			$attr = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';			// Prepare HTML code			$html = array();			// Compute the current selected values			$selected = array($this->value);			// Add a grouped list			$html[] = JHtml::_(				'select.groupedlist', $groups, $this->name,				array('id' => $this->id, 'group.id' => 'id', 'list.attr' => $attr, 'list.select' => $selected)			);			return implode($html);		}		else		{			return '';		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_logged * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_logged * * @package     Joomla.Administrator * @subpackage  mod_logged * @since       1.5 */abstract class ModLoggedHelper{	/**	 * Get a list of logged users.	 *	 * @param   JRegistry  $params  The module parameters.	 *	 * @return  mixed  An array of users, or false on error.	 */	public static function getList($params)	{		$db    = JFactory::getDbo();		$user  = JFactory::getUser();		$query = $db->getQuery(true)			->select('s.time, s.client_id, u.id, u.name, u.username')			->from('#__session AS s')			->join('LEFT', '#__users AS u ON s.userid = u.id')			->where('s.guest = 0');		$db->setQuery($query, 0, $params->get('count', 5));		try		{			$results = $db->loadObjectList();		}		catch (RuntimeException $e)		{			throw new RuntimeException($e->getMessage());			return false;		}		foreach ($results as $k => $result)		{			$results[$k]->logoutLink = '';			if ($user->authorise('core.manage', 'com_users'))			{				$results[$k]->editLink   = JRoute::_('index.php?option=com_users&task=user.edit&id=' . $result->id);				$results[$k]->logoutLink = JRoute::_('index.php?option=com_login&task=logout&uid=' . $result->id . '&' . JSession::getFormToken() . '=1');			}			if ($params->get('name', 1) == 0)			{				$results[$k]->name = $results[$k]->username;			}		}		return $results;	}	/**	 * Get the alternate title for the module	 *	 * @param   JRegistry  $params  The module parameters.	 *	 * @return  string    The alternate title for the module.	 */	public static function getTitle($params)	{		return JText::plural('MOD_LOGGED_TITLE', $params->get('count'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Checkin Controller * * @package     Joomla.Administrator * @subpackage  com_checkin * @since       1.6 */class CheckinController extends JControllerLegacy{	public function display($cachable = false, $urlparams = false)	{		// Load the submenu.		$this->addSubmenu($this->input->getWord('option', 'com_checkin'));		parent::display();		return $this;	}	public function checkin()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$ids = $this->input->get('cid', array(), 'array');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('JLIB_HTML_PLEASE_MAKE_A_SELECTION_FROM_THE_LIST'));		}		else		{			// Get the model.			$model = $this->getModel();			// Checked in the items.			$this->setMessage(JText::plural('COM_CHECKIN_N_ITEMS_CHECKED_IN', $model->checkin($ids)));		}		$this->setRedirect('index.php?option=com_checkin');	}	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	protected function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_CHECKIN'),			'index.php?option=com_checkin',			$vName == 'com_checkin'		);		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_CLEAR_CACHE'),			'index.php?option=com_cache',			$vName == 'cache'		);		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_PURGE_EXPIRED_CACHE'),			'index.php?option=com_cache&view=purge',			$vName == 'purge'		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentViewFeatured extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		ContentHelper::addSubmenu('featured');		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->state      = $this->get('State');		$this->authors    = $this->get('Authors');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= ContentHelper::getActions($this->state->get('filter.category_id'));		JToolbarHelper::title(JText::_('COM_CONTENT_FEATURED_TITLE'), 'featured.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('article.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('article.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('articles.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('articles.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::custom('featured.delete', 'remove.png', 'remove_f2.png', 'JTOOLBAR_REMOVE', true);			JToolbarHelper::archiveList('articles.archive');			JToolbarHelper::checkin('articles.checkin');		}		if ($state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'articles.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('articles.trash');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_content');		}		JToolbarHelper::help('JHELP_CONTENT_FEATURED_ARTICLES');		JHtmlSidebar::setAction('index.php?option=com_content&view=featured');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_MAX_LEVELS'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_AUTHOR'),			'filter_author_id',			JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'fp.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'access_level' => JText::_('JGRID_HEADING_ACCESS'),			'a.created_by' => JText::_('JAUTHOR'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.created' => JText::_('JDATE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banner model. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelBanner extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_BANNERS_BANNER';	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array   $commands   An array of commands to perform.	 * @param   array   $pks        An array of item ids.	 * @param   array   $contexts   An array of item contexts.	 *	 * @return  boolean   Returns true on success, false on failure.	 *	 * @since	2.5	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['category_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['category_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['category_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (strlen($commands['client_id']) > 0)		{			if (!$this->batchClient($commands['client_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch client changes for a group of banners.	 *	 * @param   string  $value     The new value matching a client.	 * @param   array   $pks       An array of row IDs.	 * @param   array   $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	protected function batchClient($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->cid = (int) $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since	2.5	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_banners.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->name);			$table->name = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			//$table->ordering	= 1;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i]	= $newId;			$i++;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 *	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->state != -2)			{				return;			}			$user = JFactory::getUser();			if (!empty($record->catid))			{				return $user->authorise('core.delete', 'com_banners.category.' . (int) $record->catid);			}			else			{				return parent::canDelete($record);			}		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 *	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check against the category.		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_banners.category.' . (int) $record->catid);		}		// Default to component settings if category not known.		else		{			return parent::canEditState($record);		}	}	/**	 * Returns a JTable object, always creating it.	 *	 * @param   string  $type    The table type to instantiate. [optional]	 * @param   string  $prefix  A prefix for the table class name. [optional]	 * @param   array   $config  Configuration array for model. [optional]	 *	 * @return  JTable  A database object	 *	 * @since   1.6	 */	public function getTable($type = 'Banner', $prefix = 'BannersTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form. [optional]	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not. [optional]	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_banners.banner', 'banner', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Determine correct permissions to check.		if ($this->getState('banner.id'))		{			// Existing record. Can only edit in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.edit');		}		else		{			// New record. Can only create in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.create');		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			$form->setFieldAttribute('state', 'disabled', 'true');			$form->setFieldAttribute('sticky', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');			$form->setFieldAttribute('state', 'filter', 'unset');			$form->setFieldAttribute('sticky', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$app  = JFactory::getApplication();		$data = $app->getUserState('com_banners.edit.banner.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('banner.id') == 0)			{				$data->set('catid', $app->input->getInt('catid', $app->getUserState('com_banners.banners.filter.category_id')));			}		}		$this->preprocessData('com_banners.banner', $data);		return $data;	}	/**	 * Method to stick records.	 *	 * @param   array    &$pks   The ids of the items to publish.	 * @param   integer  $value  The value of the published state	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function stick(&$pks, $value = 1)	{		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Access checks.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));				}			}		}		// Attempt to change the state of the records.		if (!$table->stick($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		return true;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   JTable  $table  A record object.	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 *	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'catid = '. (int) $table->catid;		$condition[] = 'state >= 0';		return $condition;	}	/**	 * @since  3.0	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if (empty($table->id))		{			// Set the values			$table->created	= $date->toSql();			// Set ordering to the last item if not set			if (empty($table->ordering))			{				$db = JFactory::getDbo();				$db->setQuery('SELECT MAX(ordering) FROM #__banners');				$max = $db->loadResult();				$table->ordering = $max + 1;			}		}		else		{			// Set the values			$table->modified	= $date->toSql();			$table->modified_by	= $user->get('id');		}		// Increment the content version number.		$table->version++;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$app = JFactory::getApplication();		// Alter the name for save as copy		if ($app->input->get('task') == 'save2copy')		{			list($name, $alias) = $this->generateNewTitle($data['catid'], $data['alias'], $data['name']);			$data['name']	= $name;			$data['alias']	= $alias;			$data['state']	= 0;		}		if (parent::save($data))		{			return true;		}		return false;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags table * * @package     Joomla.Libraries * @subpackage  Table * @since       3.1 */class JTableContenttype extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   3.1	 */	public function __construct($db)	{		parent::__construct('#__content_types', 'type_id', $db);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function check()	{		// Check for valid name.		if (trim($this->type_title) == '')		{			throw new UnexpectedValueException(sprintf('The title is empty'));		}		$this->type_title = ucfirst($this->type_title);		if (empty($this->type_alias))		{			throw new UnexpectedValueException(sprintf('The type_alias is empty'));		}		return true;	}	/**	 * Overridden JTable::store.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function store($updateNulls = false)	{		// Verify that the alias is unique		$table = JTable::getInstance('Contenttype', 'JTable');		if ($table->load(array('type_alias' => $this->type_alias)) && ($table->type_id != $this->type_id || $this->type_id == 0))		{			$this->setError(JText::_('COM_TAGS_ERROR_UNIQUE_ALIAS'));			return false;		}		return parent::store($updateNulls);	}	/**	 * Method to expand the field mapping	 *	 * @param   boolean  $assoc  True to return an associative array.	 *	 * @return  mixed  Array or object with field mappings. Defaults to object.	 *	 * @since   3.1	 */	public function fieldmapExpand($assoc = true)	{		return $this->fieldmap = json_decode($this->fieldmappings, $assoc);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Session table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableSession extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__session', 'session_id', $db);		$this->guest = 1;		$this->username = '';	}	/**	 * Insert a session	 *	 * @param   string   $sessionId  The session id	 * @param   integer  $clientId   The id of the client application	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function insert($sessionId, $clientId)	{		$this->session_id = $sessionId;		$this->client_id = $clientId;		$this->time = time();		$ret = $this->_db->insertObject($this->_tbl, $this, 'session_id');		if (!$ret)		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', strtolower(get_class($this)), $this->_db->stderr()));			return false;		}		else		{			return true;		}	}	/**	 * Updates the session	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function update($updateNulls = false)	{		$this->time = time();		$ret = $this->_db->updateObject($this->_tbl, $this, 'session_id', $updateNulls);		if (!$ret)		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', strtolower(get_class($this)), $this->_db->stderr()));			return false;		}		else		{			return true;		}	}	/**	 * Destroys the pre-existing session	 *	 * @param   integer  $userId     Identifier of the user for this session.	 * @param   array    $clientIds  Array of client ids for which session(s) will be destroyed	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function destroy($userId, $clientIds = array())	{		$clientIds = implode(',', $clientIds);		$query = $this->_db->getQuery(true)			->delete($this->_db->quoteName($this->_tbl))			->where($this->_db->quoteName('userid') . ' = ' . $this->_db->quote($userId))			->where($this->_db->quoteName('client_id') . ' IN (' . $clientIds . ')');		$this->_db->setQuery($query);		if (!$this->_db->execute())		{			$this->setError($this->_db->stderr());			return false;		}		return true;	}	/**	 * Purge old sessions	 *	 * @param   integer  $maxLifetime  Session age in seconds	 *	 * @return  mixed  Resource on success, null on fail	 *	 * @since   11.1	 */	public function purge($maxLifetime = 1440)	{		$past = time() - $maxLifetime;		$query = $this->_db->getQuery(true)			->delete($this->_db->quoteName($this->_tbl))			->where($this->_db->quoteName('time') . ' < ' . (int) $past);		$this->_db->setQuery($query);		return $this->_db->execute();	}	/**	 * Find out if a user has a one or more active sessions	 *	 * @param   integer  $userid  The identifier of the user	 *	 * @return  boolean  True if a session for this user exists	 *	 * @since   11.1	 */	public function exists($userid)	{		$query = $this->_db->getQuery(true)			->select('COUNT(userid)')			->from($this->_db->quoteName($this->_tbl))			->where($this->_db->quoteName('userid') . ' = ' . $this->_db->quote($userid));		$this->_db->setQuery($query);		if (!$result = $this->_db->loadResult())		{			$this->setError($this->_db->stderr());			return false;		}		return (boolean) $result;	}	/**	 * Overloaded delete method	 *	 * We must override it because of the non-integer primary key	 *	 * @param   integer  $oid  The object id (optional).	 *	 * @return  mixed  True if successful otherwise an error message	 *	 * @since   11.1	 */	public function delete($oid = null)	{		$k = $this->_tbl_key;		if ($oid)		{			$this->$k = $oid;		}		$query = $this->_db->getQuery(true)			->delete($this->_db->quoteName($this->_tbl))			->where($this->_db->quoteName($this->_tbl_key) . ' = ' . $this->_db->quote($this->$k));		$this->_db->setQuery($query);		$this->_db->execute();		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/pdo * @since       12.1 */class JDatabaseDriverSqlite extends JDatabaseDriverPdo{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlite';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc. The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = '`';	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true);		$this->setQuery('DROP TABLE ' . ($ifExists ? 'IF EXISTS ' : '') . $query->quoteName($tableName));		$this->execute();		return $this;	}	/**	 * Method to escape a string for usage in an SQLite statement.	 *	 * Note: Using query objects with bound variables is	 * preferable to the below.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Unused optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		if (is_int($text) || is_float($text))		{			return $text;		}		return SQLite3::escapeString($text);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 */	public function getCollation()	{		return $this->charset;	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * Note: Doesn't appear to have support in SQLite	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		// Sanitize input to an array and iterate over the list.		settype($tables, 'array');		return $tables;	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$columns = array();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->setQuery('pragma table_info(' . $table . ')');		$this->setQuery($query);		$fields = $this->loadObjectList();		if ($typeOnly)		{			foreach ($fields as $field)			{				$columns[$field->NAME] = $field->TYPE;			}		}		else		{			foreach ($fields as $field)			{				// Do some dirty translation to MySQL output.				// TODO: Come up with and implement a standard across databases.				$columns[$field->NAME] = (object) array(					'Field' => $field->NAME,					'Type' => $field->TYPE,					'Null' => ($field->NOTNULL == '1' ? 'NO' : 'YES'),					'Default' => $field->DFLT_VALUE,					'Key' => ($field->PK == '1' ? 'PRI' : '')				);			}		}		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $columns;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		$keys = array();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->setQuery('pragma table_info( ' . $table . ')');		// $query->bind(':tableName', $table);		$this->setQuery($query);		$rows = $this->loadObjectList();		foreach ($rows as $column)		{			if ($column->PK == 1)			{				$keys[$column->NAME] = $column;			}		}		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $keys;	}	/**	 * Method to get an array of all tables in the database (schema).	 *	 * @return  array   An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		$query = $this->getQuery(true);		$tables = array();		$type = 'table';		$query->select('name')			->from('sqlite_master')			->where('type = :type')			->bind(':type', $type)			->order('name');		$this->setQuery($query);		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$this->setQuery("SELECT sqlite_version()");		return $this->loadResult();	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * Returns false automatically for the Oracle driver since	 * you can only set the character set when the connection	 * is created.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return false;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $table  The name of the table to unlock.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function lockTable($table)	{		return $this;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by Sqlite.	 * @param   string  $prefix    Not used by Sqlite.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->setQuery('ALTER TABLE ' . $oldTable . ' RENAME TO ' . $newTable)->execute();		return $this;	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		return $this;	}	/**	 * Test to see if the PDO ODBC connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return class_exists('PDO') && in_array('sqlite', PDO::getAvailableDrivers());	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Manage Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerControllerManage extends JControllerLegacy{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('unpublish', 'publish');		$this->registerTask('publish',   'publish');	}	/**	 * Enable/Disable an extension (if supported).	 *	 * @return  void	 *	 * @since   1.6	 */	public function publish()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids    = $this->input->get('cid', array(), 'array');		$values = array('publish' => 1, 'unpublish' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_INSTALLER_ERROR_NO_EXTENSIONS_SELECTED'));		}		else		{			// Get the model.			$model	= $this->getModel('manage');			// Change the state of the records.			if (!$model->publish($ids, $value))			{				JError::raiseWarning(500, implode('<br />', $model->getErrors()));			}			else			{				if ($value == 1)				{					$ntext = 'COM_INSTALLER_N_EXTENSIONS_PUBLISHED';				}				elseif ($value == 0)				{					$ntext = 'COM_INSTALLER_N_EXTENSIONS_UNPUBLISHED';				}				$this->setMessage(JText::plural($ntext, count($ids)));			}		}		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}	/**	 * Remove an extension (Uninstall).	 *	 * @return  void	 *	 * @since   1.5	 */	public function remove()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$eid   = $this->input->get('cid', array(), 'array');		$model = $this->getModel('manage');		JArrayHelper::toInteger($eid, array());		$result = $model->remove($eid);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}	/**	 * Refreshes the cached metadata about an extension.	 *	 * Useful for debugging and testing purposes when the XML file might change.	 *	 * @return  void	 *	 * @since   1.6	 */	public function refresh()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$uid   = $this->input->get('cid', array(), 'array');		$model = $this->getModel('manage');		JArrayHelper::toInteger($uid, array());		$result = $model->refresh($uid);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a standard button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonStandard extends JToolbarButton{	/**	 * Button type	 *	 * @var    string	 */	protected $_name = 'Standard';	/**	 * Fetch the HTML for the button	 *	 * @param   string   $type  Unused string.	 * @param   string   $name  The name of the button icon class.	 * @param   string   $text  Button text.	 * @param   string   $task  Task associated with the button.	 * @param   boolean  $list  True to allow lists	 *	 * @return  string  HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Standard', $name = '', $text = '', $task = '', $list = true)	{		$i18n_text = JText::_($text);		$class = $this->fetchIconClass($name);		$doTask = $this->_getCommand($text, $task, $list);		if ($name == "apply" || $name == "new")		{			$btnClass = "btn btn-small btn-success";			$iconWhite = "icon-white";		}		else		{			$btnClass = "btn btn-small";			$iconWhite = "";		}		$html = "<button href=\"#\" onclick=\"$doTask\" class=\"" . $btnClass . "\">\n";		$html .= "<i class=\"$class $iconWhite\">\n";		$html .= "</i>\n";		$html .= "$i18n_text\n";		$html .= "</button>\n";		return $html;	}	/**	 * Get the button CSS Id	 *	 * @param   string   $type      Unused string.	 * @param   string   $name      Name to be used as apart of the id	 * @param   string   $text      Button text	 * @param   string   $task      The task associated with the button	 * @param   boolean  $list      True to allow use of lists	 * @param   boolean  $hideMenu  True to hide the menu on click	 *	 * @return  string  Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type = 'Standard', $name = '', $text = '', $task = '', $list = true, $hideMenu = false)	{		return $this->_parent->getName() . '-' . $name;	}	/**	 * Get the JavaScript command for the button	 *	 * @param   string   $name  The task name as seen by the user	 * @param   string   $task  The task used by the application	 * @param   boolean  $list  True is requires a list confirmation.	 *	 * @return  string   JavaScript command string	 *	 * @since   3.0	 */	protected function _getCommand($name, $task, $list)	{		JHtml::_('behavior.framework');		$message = JText::_('JLIB_HTML_PLEASE_MAKE_A_SELECTION_FROM_THE_LIST');		$message = addslashes($message);		if ($list)		{			$cmd = "if (document.adminForm.boxchecked.value==0){alert('$message');}else{ Joomla.submitbutton('$task')}";		}		else		{			$cmd = "Joomla.submitbutton('$task')";		}		return $cmd;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $this UsersViewNotes */JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');?><div class="unotes">	<h1><?php echo JText::sprintf('COM_USERS_NOTES_FOR_USER', $this->user->name, $this->user->id); ?></h1><?php if (empty($this->items)) : ?>	<?php echo JText::_('COM_USERS_NO_NOTES'); ?><?php else : ?>	<ol class="alternating">	<?php foreach ($this->items as $item) : ?>		<li>			<div class="fltlft utitle">				<?php if ($item->subject) : ?>					<h4><?php echo JText::sprintf('COM_USERS_NOTE_N_SUBJECT', (int) $item->id, $this->escape($item->subject)); ?></h4>				<?php else : ?>					<h4><?php echo JText::sprintf('COM_USERS_NOTE_N_SUBJECT', (int) $item->id, JText::_('COM_USERS_EMPTY_SUBJECT')); ?></h4>				<?php endif; ?>			</div>			<div class="fltlft utitle">				<?php echo JHtml::date($item->created_time, 'D d M Y H:i'); ?>			</div>			<?php $category_image = $item->cparams->get('image'); ?>			<?php if ($item->catid && isset($category_image)) : ?>			<div class="fltlft utitle">				<?php echo JHtml::_('users.image', $category_image); ?>			</div>			<div class="fltlft utitle">				<em><?php echo $this->escape($item->category_title); ?></em>			</div>			<?php endif; ?>			<div class="clr"></div>			<div class="ubody">				<?php echo $item->body; ?>			</div>		</li>	<?php endforeach; ?>	</ol><?php endif; ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a select list of integers with specified first, last and step values. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldInteger extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Integer';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Initialize some field attributes.		$first = (int) $this->element['first'];		$last = (int) $this->element['last'];		$step = (int) $this->element['step'];		// Sanity checks.		if ($step == 0)		{			// Step of 0 will create an endless loop.			return $options;		}		elseif ($first < $last && $step < 0)		{			// A negative step will never reach the last number.			return $options;		}		elseif ($first > $last && $step > 0)		{			// A position step will never reach the last number.			return $options;		}		elseif ($step < 0)		{			// Build the options array backwards.			for ($i = $first; $i >= $last; $i += $step)			{				$options[] = JHtml::_('select.option', $i);			}		}		else		{			// Build the options array.			for ($i = $first; $i <= $last; $i += $step)			{				$options[] = JHtml::_('select.option', $i);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app   = JFactory::getApplication();$doc   = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;// Add JavaScript FrameworksJHtml::_('bootstrap.framework');// Add Stylesheets$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load optional rtl Bootstrap css and Bootstrap bugfixesJHtmlBootstrap::loadCss($includeMaincss = false, $this->direction);?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head><jdoc:include type="head" /><!--[if lt IE 9]>	<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script><![endif]--></head><body class="contentpane modal">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform class for interacting with a Mediawiki server instance. * * @property-read  JMediawikiSites          $sites          MediaWiki API object for sites. * @property-read  JMediawikiPages          $pages          MediaWiki API object for pages. * @property-read  JMediawikiUsers          $users          MediaWiki API object for users. * @property-read  JMediawikiLinks          $links          MediaWiki API object for links. * @property-read  JMediawikiCategories     $categories     MediaWiki API object for categories. * @property-read  JMediawikiImages         $images         MediaWiki API object for images. * @property-read  JMediawikiSearch         $search         MediaWiki API object for search. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawiki{	/**	 * @var    JRegistry  Options for the MediaWiki object.	 * @since  12.1	 */	protected $options;	/**	 * @var    JMediawikiHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $client;	/**	 * @var    JMediawikiSites  MediaWiki API object for Site.	 * @since  12.3	 */	protected $sites;	/**	 * @var    JMediawikiPages  MediaWiki API object for pages.	 * @since  12.1	 */	protected $pages;	/**	 * @var    JMediawikiUsers  MediaWiki API object for users.	 * @since  12.3	 */	protected $users;	/**	 * @var    JMediawikiLinks  MediaWiki API object for links.	 * @since  12.3	 */	protected $links;	/**	 * @var    JMediawikiCategories  MediaWiki API object for categories.	 * @since  12.3	 */	protected $categories;	/**	 * @var    JMediawikiImages  MediaWiki API object for images.	 * @since  12.3	 */	protected $images;	/**	 * @var    JMediawikiSearch  MediaWiki API object for search.	 * @since  12.1	 */	protected $search;	/**     * Constructor.     *     * @param   JRegistry       $options  MediaWiki options object.     * @param   JMediawikiHttp  $client   The HTTP client object.     *     * @since   12.3     */	public function __construct(JRegistry $options = null, JMediawikiHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JMediawikiHttp($this->options);	}	/**     * Magic method to lazily create API objects     *     * @param   string  $name  Name of property to retrieve     *     * @return  JMediaWikiObject  MediaWiki API object (users, reviews, etc).     *     * @since   12.3     * @throws  InvalidArgumentException     */	public function __get($name)	{		$name = strtolower($name);		$class = 'JMediawiki' . ucfirst($name);		$accessible = array(			'categories',			'images',			'links',			'pages',			'search',			'sites',			'users'		);		if (class_exists($class) && in_array($name, $accessible))		{			if (!isset($this->$name))			{				$this->$name = new $class($this->options, $this->client);			}			return $this->$name;		}		throw new InvalidArgumentException(sprintf('Property %s is not accessible.', $name));	}	/**     * Get an option from the JMediawiki instance.     *     * @param   string  $key  The name of the option to get.     *     * @return  mixed  The option value.     *     * @since   12.3     */	public function getOption($key)	{		return $this->options->get($key);	}	/**     * Set an option for the JMediawiki instance.     *     * @param   string  $key    The name of the option to set.     * @param   mixed   $value  The option value to set.     *     * @return  JMediawiki  This object for method chaining.     *     * @since   12.3     */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'moduleOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MODULES_'.$name.'_FIELDSET_LABEL';		$class = isset($fieldSet->class) && !empty($fieldSet->class) ? $fieldSet->class : '';		echo JHtml::_('bootstrap.addSlide', 'moduleOptions', JText::_($label), 'collapse' . $i++, $class);			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach;		echo JHtml::_('bootstrap.endSlide');	endforeach;echo JHtml::_('bootstrap.endAccordion');
<?php/** * @package     Joomla.Plugin * @subpackage  Content.emailcloak * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Email cloack plugin class. * * @package     Joomla.Plugin * @subpackage  Content.emailcloak * @since       1.5 */class PlgContentEmailcloak extends JPlugin{	/**	 * Plugin that cloaks all emails in content from spambots via Javascript.	 *	 * @param   string   $context  The context of the content being passed to the plugin.	 * @param   mixed    &$row     An object with a "text" property or the string to be cloaked.	 * @param   array    &$params  Additional parameters. See {@see PlgContentEmailcloak()}.	 * @param   integer  $page     Optional page number. Unused. Defaults to zero.	 *	 * @return  boolean	True on success.	 */	public function onContentPrepare($context, &$row, &$params, $page = 0)	{		// Don't run this plugin when the content is being indexed		if ($context == 'com_finder.indexer')		{			return true;		}		if (is_object($row))		{			return $this->_cloak($row->text, $params);		}		return $this->_cloak($row, $params);	}	/**	 * Genarate a search pattern based on link and text.	 *	 * @param   string	The target of an email link.	 * @param   string	The text enclosed by the link.	 * @return  string	A regular expression that matches a link containing the parameters.	 */	protected function _getPattern ($link, $text)	{		$pattern = '~(?:<a ([\w "\'=\@\.\-:;]*)href\s*=\s*"mailto:'			. $link . '"([\w "\'=\@\.\-:;]*))>' . $text . '</a>~i';		return $pattern;	}	/**	 * Adds an attributes to the js cloaked email.	 *	 * @param  string Js cloaked email.	 * @param  string Attributes before email.	 * @param  string Attributes after email.	 * @return string Js cloaked email with attributes.	 */	protected function _addAttributesToEmail($jsEmail, $before, $after)	{		if ($before !== "")		{			$before = str_replace("'", "\'", $before);			$jsEmail = str_replace("document.write('<a '", "document.write('<a {$before}'", $jsEmail);		}		if ($after !== "")		{			$after = str_replace("'", "\'", $after);			$jsEmail = str_replace("'\'>');", "'\'{$after}>');", $jsEmail);		}		return $jsEmail;	}	/**	 * Cloak all emails in text from spambots via Javascript.	 *	 * @param   string  The string to be cloaked.	 * @param   array   Additional parameters. Parameter "mode" (integer, default 1)	 *                  replaces addresses with "mailto:" links if nonzero.	 * @return  boolean  True on success.	 */	protected function _cloak(&$text, &$params)	{		/*		 * Check for presence of {emailcloak=off} which is explicits disables this		 * bot for the item.		 */		if (JString::strpos($text, '{emailcloak=off}') !== false)		{			$text = JString::str_ireplace('{emailcloak=off}', '', $text);			return true;		}		// Simple performance check to determine whether bot should process further.		if (JString::strpos($text, '@') === false)		{			return true;		}		$mode = $this->params->def('mode', 1);		// any@email.address.com		$searchEmail = '([\w\.\-]+\@(?:[a-z0-9\.\-]+\.)+(?:[a-z0-9\-]{2,4}))';		// any@email.address.com?subject=anyText		$searchEmailLink = $searchEmail . '([?&][\x20-\x7f][^"<>]+)';		// anyText		$searchText = '([\x20-\x7f][^<>]+)';		//Any Image link		$searchImage	=	"(<img[^>]+>)";		/*		 * Search and fix derivatives of link code <a href="http://mce_host/ourdirectory/email@amail.com"		 * >email@email.com</a>. This happens when inserting an email in TinyMCE, cancelling its suggestion to add		 * the mailto: prefix...		 */		$pattern = $this->_getPattern($searchEmail, $searchEmail);		$pattern = str_replace('"mailto:', '"http://mce_host([\x20-\x7f][^<>]+/)', $pattern);		while (preg_match($pattern, $text, $regs, PREG_OFFSET_CAPTURE))		{			$mail = $regs[3][0];			$mailText = $regs[5][0];			// Check to see if mail text is different from mail addy			$replacement = JHtml::_('email.cloak', $mail, $mode, $mailText);			// Ensure that attributes is not stripped out by email cloaking			$replacement = $this->_addAttributesToEmail($replacement, $regs[1][0], $regs[4][0]);			// Replace the found address with the js cloaked email			$text = substr_replace($text, $replacement, $regs[0][1], strlen($regs[0][0]));		}		/*		 * Search and fix derivatives of link code <a href="http://mce_host/ourdirectory/email@amail.com"		 * >anytext</a>. This happens when inserting an email in TinyMCE, cancelling its suggestion to add		 * the mailto: prefix...		 */		$pattern = $this->_getPattern($searchEmail, $searchText);		$pattern = str_replace('"mailto:', '"http://mce_host([\x20-\x7f][^<>]+/)', $pattern);		while (preg_match($pattern, $text, $regs, PREG_OFFSET_CAPTURE))		{			$mail = $regs[3][0];			$mailText = $regs[5][0];			// Check to see if mail text is different from mail addy			$replacement = JHtml::_('email.cloak', $mail, $mode, $mailText, 0);			// Ensure that attributes is not stripped out by email cloaking			$replacement = $this->_addAttributesToEmail($replacement, $regs[1][0], $regs[4][0]);			// Replace the found address with the js cloaked email			$text = substr_replace($text, $replacement, $regs[0][1], strlen($regs[0][0]));		}		/*		 * Search for derivatives of link code <a href="mailto:email@amail.com"		 * >email@amail.com</a>		 */		$pattern = $this->_getPattern($searchEmail, $searchEmail);		while (preg_match($pattern, $text, $regs, PREG_OFFSET_CAPTURE))		{			$mail = $regs[2][0];			$mailText = $regs[4][0];			// Check to see if mail text is different from mail addy			$replacement = JHtml::_('email.cloak', $mail, $mode, $mailText);			// Ensure that attributes is not stripped out by email cloaking			$replacement = $this->_addAttributesToEmail($replacement, $regs[1][0], $regs[3][0]);			// Replace the found address with the js cloaked email			$text = substr_replace($text, $replacement, $regs[0][1], strlen($regs[0][0]));		}		/*		 * Search for derivatives of link code <a href="mailto:email@amail.com">		 * anytext</a>		 */		$pattern = $this->_getPattern($searchEmail, $searchText);		while (preg_match($pattern, $text, $regs, PREG_OFFSET_CAPTURE))		{			$mail = $regs[2][0];			$mailText = $regs[4][0];			$replacement = JHtml::_('email.cloak', $mail, $mode, $mailText, 0);			// Ensure that attributes is not stripped out by email cloaking			$replacement = $this->_addAttributesToEmail($replacement, $regs[1][0], $regs[3][0]);			// Replace the found address with the js cloaked email			$text = substr_replace($text, $replacement, $regs[0][1], strlen($regs[0][0]));		}		/*		 * Search for derivatives of link code <a href="mailto:email@amail.com">		 * <img anything></a>		 */		$pattern = $this->_getPattern($searchEmail, $searchImage);		while (preg_match($pattern, $text, $regs, PREG_OFFSET_CAPTURE))		{			$mail = $regs[2][0];			$mailText = $regs[4][0];			$replacement = JHtml::_('email.cloak', $mail, $mode, $mailText, 0);			// Ensure that attributes is not stripped out by email cloaking			$replacement = $this->_addAttributesToEmail($replacement, $regs[1][0], $regs[3][0]);			// Replace the found address with the js cloaked email			$text = substr_replace($text, $replacement, $regs[0][1], strlen($regs[0][0]));		}		/*		 * Search for derivatives of link code <a href="mailto:email@amail.com?		 * subject=Text">email@amail.com</a>		 */		$pattern = $this->_getPattern($searchEmailLink, $searchEmail);		while (preg_match($pattern, $text, $regs, PREG_OFFSET_CAPTURE))		{			$mail = $regs[2][0] . $regs[3][0];			$mailText = $regs[5][0];			// Needed for handling of Body parameter			$mail = str_replace('&amp;', '&', $mail);			// Check to see if mail text is different from mail addy			$replacement = JHtml::_('email.cloak', $mail, $mode, $mailText);			// Ensure that attributes is not stripped out by email cloaking			$replacement = $this->_addAttributesToEmail($replacement, $regs[1][0], $regs[4][0]);			// Replace the found address with the js cloaked email			$text = substr_replace($text, $replacement, $regs[0][1], strlen($regs[0][0]));		}		/*		 * Search for derivatives of link code <a href="mailto:email@amail.com?		 * subject=Text">anytext</a>		 */		$pattern = $this->_getPattern($searchEmailLink, $searchText);		while (preg_match($pattern, $text, $regs, PREG_OFFSET_CAPTURE))		{			$mail = $regs[2][0] . $regs[3][0];			$mailText = $regs[5][0];			// Needed for handling of Body parameter			$mail = str_replace('&amp;', '&', $mail);			$replacement = JHtml::_('email.cloak', $mail, $mode, $mailText, 0);			// Ensure that attributes is not stripped out by email cloaking			$replacement = $this->_addAttributesToEmail($replacement, $regs[1][0], $regs[4][0]);			// Replace the found address with the js cloaked email			$text = substr_replace($text, $replacement, $regs[0][1], strlen($regs[0][0]));		}		// Search for plain text email@amail.com		$pattern = '~' . $searchEmail . '([^a-z0-9]|$)~i';		while (preg_match($pattern, $text, $regs, PREG_OFFSET_CAPTURE))		{			$mail = $regs[1][0];			$replacement = JHtml::_('email.cloak', $mail, $mode);			// Replace the found address with the js cloaked email			$text = substr_replace($text, $replacement, $regs[1][1], strlen($mail));		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class JFormFieldMenutype extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'menutype';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html 		= array();		$recordId	= (int) $this->form->getValue('id');		$size		= ($v = $this->element['size']) ? ' size="'.$v.'"' : '';		$class		= ($v = $this->element['class']) ? ' class="'.$v.'"' : 'class="text_area"';		// Get a reverse lookup of the base link URL to Title		$model 	= JModelLegacy::getInstance('menutypes', 'menusModel');		$rlu 	= $model->getReverseLookup();		switch ($this->value)		{			case 'url':				$value = JText::_('COM_MENUS_TYPE_EXTERNAL_URL');				break;			case 'alias':				$value = JText::_('COM_MENUS_TYPE_ALIAS');				break;			case 'separator':				$value = JText::_('COM_MENUS_TYPE_SEPARATOR');				break;			case 'heading':				$value = JText::_('COM_MENUS_TYPE_HEADING');				break;			default:				$link	= $this->form->getValue('link');				// Clean the link back to the option, view and layout				$value	= JText::_(JArrayHelper::getValue($rlu, MenusHelper::getLinkKey($link)));				break;		}		// Load the javascript and css		JHtml::_('behavior.framework');		JHtml::_('behavior.modal');		$html[] = '<span class="input-append"><input type="text" readonly="readonly" disabled="disabled" value="'.$value.'"'.$size.$class.' /><a class="btn btn-primary" onclick="SqueezeBox.fromElement(this, {handler:\'iframe\', size: {x: 600, y: 450}, url:\''.JRoute::_('index.php?option=com_menus&view=menutypes&tmpl=component&recordId='.$recordId).'\'})"><i class="icon-list icon-white"></i> '.JText::_('JSELECT').'</a></span>';		$html[] = '<input class="input-small" type="hidden" name="' . $this->name . '" value="'.htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '" />';		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides radio button inputs * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/command.radio.html#command.radio * @since       11.1 */class JFormFieldRadio extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Radio';	/**	 * Method to get the radio button field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="radio ' . (string) $this->element['class'] . '"' : ' class="radio"';		// Start the radio field output.		$html[] = '<fieldset id="' . $this->id . '"' . $class . '>';		// Get the field options.		$options = $this->getOptions();		// Build the radio field output.		foreach ($options as $i => $option)		{			// Initialize some option attributes.			$checked = ((string) $option->value == (string) $this->value) ? ' checked="checked"' : '';			$class = !empty($option->class) ? ' class="' . $option->class . '"' : '';			$disabled = !empty($option->disable) ? ' disabled="disabled"' : '';			$required = !empty($option->required) ? ' required="required" aria-required="true"' : '';			// Initialize some JavaScript option attributes.			$onclick = !empty($option->onclick) ? ' onclick="' . $option->onclick . '"' : '';			$html[] = '<input type="radio" id="' . $this->id . $i . '" name="' . $this->name . '" value="'				. htmlspecialchars($option->value, ENT_COMPAT, 'UTF-8') . '"' . $checked . $class . $onclick . $disabled . $required . '/>';			$html[] = '<label for="' . $this->id . $i . '"' . $class . '>'				. JText::alt($option->text, preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)) . '</label>';		}		// End the radio field output.		$html[] = '</fieldset>';		return implode($html);	}	/**	 * Method to get the field options for radio buttons.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		foreach ($this->element->children() as $option)		{			// Only add <option /> elements.			if ($option->getName() != 'option')			{				continue;			}			// Create a new option object based on the <option /> element.			$tmp = JHtml::_(				'select.option', (string) $option['value'], trim((string) $option), 'value', 'text',				((string) $option['disabled'] == 'true')			);			// Set some option attributes.			$tmp->class = (string) $option['class'];			// Set some JavaScript option attributes.			$tmp->onclick = (string) $option['onclick'];			// Add the option object to the result set.			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_tags component * * @param   array  An array of URL arguments * * @return  array  The URL arguments to use to assemble the subsequent URL. * * @since   3.1 */function TagsBuildRoute(&$query){	$segments = array();	// Get a menu item based on Itemid or currently active	$app		= JFactory::getApplication();	$menu		= $app->getMenu();	$params		= JComponentHelper::getParams('com_tags');	$advanced	= $params->get('sef_advanced_link', 0);	// We need a menu item.  Either the one specified in the query, or the current active one if none specified	if (empty($query['Itemid'])) {		$menuItem = $menu->getActive();	}	else {		$menuItem = $menu->getItem($query['Itemid']);	}	$mView = (empty($menuItem->query['view'])) ? null : $menuItem->query['view'];	$mId   = (empty($menuItem->query['id'])) ? null : $menuItem->query['id'];	if (is_array($mId))	{		JArrayHelper::toInteger($mId);	}	if (isset($query['view'])) {		$view = $query['view'];		if (empty($query['Itemid'])) {			$segments[] = $query['view'];		}		unset($query['view']);	}	// Are we dealing with a tag that is attached to a menu item?	if (isset($view) && ($mView == $view) and (isset($query['id'])) and ($mId == $query['id']))	{		unset($query['view']);		unset($query['id']);		return $segments;	}	if (isset($view) and $view == 'tag')	{		if ($mId != (int) $query['id'] || $mView != $view)		{			if ($view == 'tag') {				if ($advanced) {					list($tmp, $id) = explode(':', $query['id'], 2);				}				else {					$id = $query['id'];				}				$segments[] = $id;			}		}		unset($query['id']);	}	if (isset($query['layout'])) {		if (!empty($query['Itemid']) && isset($menuItem->query['layout'])) {			if ($query['layout'] == $menuItem->query['layout']) {				unset($query['layout']);			}		}		else {			if ($query['layout'] == 'default') {				unset($query['layout']);			}		}	};	return $segments;}/** * Parse the segments of a URL. * * @param   array  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. * * @since   3.1 */function TagsParseRoute($segments){	$vars = array();	//Get the active menu item.	$app	= JFactory::getApplication();	$menu	= $app->getMenu();	$item	= $menu->getActive();	$params = JComponentHelper::getParams('com_tags');	$advanced = $params->get('sef_advanced_link', 0);	// Count route segments	$count = count($segments);	// Standard routing for tags.	if (!isset($item))	{		$vars['view']	= $segments[0];		$vars['id']		= $segments[$count - 1];		return $vars;	}	// From the tags view, we can only jump to a tag.	$id = (isset($item->query['id']) && $item->query['id'] > 1) ? $item->query['id'] : 'root';	$found = 0;	foreach($segments as $segment)	{		if ($found == 0)		{			$id = $segment;		}			$vars['id'] = $id;			$vars['view'] = 'tag';			break;	}	$found = 0;	return $vars;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Media component * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.0 */class MediaViewMediaList extends JViewLegacy{	public function display($tpl = null)	{		// Do not allow cache		JResponse::allowCache(false);		$app	= JFactory::getApplication();		$style = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');		$lang	= JFactory::getLanguage();		JHtml::_('behavior.framework', true);		$document = JFactory::getDocument();		/*		$document->addStyleSheet('../media/media/css/medialist-'.$style.'.css');		if ($lang->isRTL()) :			$document->addStyleSheet('../media/media/css/medialist-'.$style.'_rtl.css');		endif;		*/		$document->addScriptDeclaration("		window.addEvent('domready', function()		{			window.parent.document.updateUploader();			$$('a.img-preview').each(function(el)			{				el.addEvent('click', function(e)				{					new Event(e).stop();					window.top.document.preview.fromElement(el);				});			});		});");		$images = $this->get('images');		$documents = $this->get('documents');		$folders = $this->get('folders');		$state = $this->get('state');		$this->baseURL = JURI::root();		$this->images = &$images;		$this->documents = &$documents;		$this->folders = &$folders;		$this->state = &$state;		parent::display($tpl);	}	function setFolder($index = 0)	{		if (isset($this->folders[$index]))		{			$this->_tmp_folder = &$this->folders[$index];		}		else		{			$this->_tmp_folder = new JObject;		}	}	function setImage($index = 0)	{		if (isset($this->images[$index]))		{			$this->_tmp_img = &$this->images[$index];		}		else		{			$this->_tmp_img = new JObject;		}	}	function setDoc($index = 0)	{		if (isset($this->documents[$index]))		{			$this->_tmp_doc = &$this->documents[$index];		}		else		{			$this->_tmp_doc = new JObject;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_BANNERS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_BANNERS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('banner.clients');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_banners');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-client-id').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('banner.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$uri		= JUri::getInstance();$return		= base64_encode($uri);$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task != 'menus.delete' || confirm('<?php echo JText::_('COM_MENUS_MENU_CONFIRM_DELETE', true);?>'))		{			Joomla.submitform(task);		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_menus&view=menus');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_MENUS_MENU_SEARCH_FILTER'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clearfix"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col" rowspan="2">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th rowspan="2">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="width-30" colspan="3">					<?php echo JText::_('COM_MENUS_HEADING_NUMBER_MENU_ITEMS'); ?>				</th>				<th class="width-20" rowspan="2">					<?php echo JText::_('COM_MENUS_HEADING_LINKED_MODULES'); ?>				</th>				<th class="nowrap id-col" rowspan="2">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>			<tr>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_PUBLISHED_ITEMS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_UNPUBLISHED_ITEMS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_TRASHED_ITEMS'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canCreate = $user->authorise('core.create',     'com_menus');			$canEdit   = $user->authorise('core.edit',       'com_menus');			$canChange = $user->authorise('core.edit.state', 'com_menus');		?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype) ?> ">						<?php echo $this->escape($item->title); ?></a>					<p class="smallsub">(<span><?php echo JText::_('COM_MENUS_MENU_MENUTYPE_LABEL') ?></span>						<?php if ($canEdit) : ?>							<?php echo '<a href="'.JRoute::_('index.php?option=com_menus&task=menu.edit&id='.$item->id).' title='.$this->escape($item->description).'">'.							$this->escape($item->menutype).'</a>'; ?>)						<?php else : ?>							<?php echo $this->escape($item->menutype)?>)						<?php endif; ?>					</p>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=1');?>">						<?php echo $item->count_published; ?></a>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=0');?>">						<?php echo $item->count_unpublished; ?></a>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=-2');?>">						<?php echo $item->count_trashed; ?></a>				</td>				<td class="left">				<ul class="menu-module-list">					<?php					if (isset($this->modules[$item->menutype])) :						foreach ($this->modules[$item->menutype] as &$module) :						?>						<li>							<?php if ($canEdit) : ?>								<a class="modal" href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.$module->id.'&return='.$return.'&tmpl=component&layout=modal');?>" rel="{handler: 'iframe', size: {x: 1024, y: 450}}"  title="<?php echo JText::_('COM_MENUS_EDIT_MODULE_SETTINGS');?>">								<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?></a>							<?php else :?>								<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?>							<?php endif; ?>						</li>						<?php						endforeach;					endif;					?>				</ul>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Module installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterModule extends JAdapterInstance{	/**	 * Install function routing	 *	 * @var    string	 * @since 3.1	 */	protected $route = 'Install';	/**	 * @var	 * @since 3.1	 */	protected $manifest = null;	/**	 * @var	 * @since 3.1	 */	protected $manifest_script = null;	/**	 * Extension name	 *	 * @var	 * @since   3.1	 */	protected $name = null;	/**	 * @var	 * @since  3.1	 */	protected $element = null;	/**	 * @var    string	 * @since  3.1	 */	protected $scriptElement = null;	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path where we find language files	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path = null)	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent				->setPath(				'source',				($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/modules/' . $this->parent->extension->element			);		}		$this->manifest = $this->parent->getManifest();		if ($this->manifest->files)		{			$element = $this->manifest->files;			$extension = '';			if (count($element->children()))			{				foreach ($element->children() as $file)				{					if ((string) $file->attributes()->module)					{						$extension = strtolower((string) $file->attributes()->module);						break;					}				}			}			if ($extension)			{				$lang = JFactory::getLanguage();				$source = $path ? $path : ($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/modules/' . $extension;				$folder = (string) $element->attributes()->folder;				if ($folder && file_exists($path . '/' . $folder))				{					$source = $path . '/' . $folder;				}				$client = (string) $this->manifest->attributes()->client;				$lang->load($extension . '.sys', $source, null, false, false)					|| $lang->load($extension . '.sys', constant('JPATH_' . strtoupper($client)), null, false, false)					|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)					|| $lang->load($extension . '.sys', constant('JPATH_' . strtoupper($client)), $lang->getDefault(), false, false);			}		}	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get a database connector object		$db = $this->parent->getDbo();		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extensions name		$name = (string) $this->manifest->name;		$name = JFilterInput::getInstance()->clean($name, 'string');		$this->set('name', $name);		// Get the module description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		/*		 * ---------------------------------------------------------------------------------------------		 * Target Application Section		 * ---------------------------------------------------------------------------------------------		 */		// Get the target application		if ($cname = (string) $this->manifest->attributes()->client)		{			// Attempt to map the client to a base path			$client = JApplicationHelper::getClientInfo($cname, true);			if ($client === false)			{				$this->parent					->abort(JText::sprintf('JLIB_INSTALLER_ABORT_MOD_UNKNOWN_CLIENT', JText::_('JLIB_INSTALLER_' . $this->route), $client->name));				return false;			}			$basePath = $client->path;			$clientId = $client->id;		}		else		{			// No client attribute was found so we assume the site as the client			$cname = 'site';			$basePath = JPATH_SITE;			$clientId = 0;		}		// Set the installation path		$element = '';		if (count($this->manifest->files->children()))		{			foreach ($this->manifest->files->children() as $file)			{				if ((string) $file->attributes()->module)				{					$element = (string) $file->attributes()->module;					$this->set('element', $element);					break;				}			}		}		if (!empty($element))		{			$this->parent->setPath('extension_root', $basePath . '/modules/' . $element);		}		else		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_MOD_INSTALL_NOFILE', JText::_('JLIB_INSTALLER_' . $this->route)));			return false;		}		/*		 * Check to see if a module by the same name is already installed		 * If it is, then update the table because if the files aren't there		 * we can assume that it was (badly) uninstalled		 * If it isn't, add an entry to extensions		 */		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('element') . ' = ' . $db->quote($element))			->where($db->quoteName('client_id') . ' = ' . (int) $clientId);		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent				->abort(JText::sprintf('JLIB_INSTALLER_ABORT_MOD_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true)));			return false;		}		$id = $db->loadResult();		/*		 * If the module directory already exists, then we will assume that the		 * module is already installed or another module is using that		 * directory.		 * Check that this is either an issue where its not overwriting or it is		 * set to upgrade anyway		 */		if (file_exists($this->parent->getPath('extension_root')) && (!$this->parent->isOverwrite() || $this->parent->isUpgrade()))		{			// Look for an update function or update tag			$updateElement = $this->manifest->update;			// Upgrade manually set or update function available or update tag detected			if ($this->parent->isUpgrade() || ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'update'))				|| $updateElement)			{				// Force this one				$this->parent->setOverwrite(true);				$this->parent->setUpgrade(true);				if ($id)				{					// If there is a matching extension mark this as an update; semantics really					$this->route = 'Update';				}			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is set				// We didn't have overwrite set, find an update function or find an update tag so lets call it safe				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT_MOD_INSTALL_DIRECTORY', JText::_('JLIB_INSTALLER_' . $this->route),						$this->parent->getPath('extension_root')					)				);				return false;			}		}		/*		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, let's load it; we'll copy it later (don't have destination yet)		$this->scriptElement = $this->manifest->scriptfile;		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance.				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later.				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight($this->route, $this) === false)			{				// Preflight failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_MOD_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// If the module directory does not exist, lets create it		$created = false;		if (!file_exists($this->parent->getPath('extension_root')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_root')))			{				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT_MOD_INSTALL_CREATE_DIRECTORY', JText::_('JLIB_INSTALLER_' . $this->route),						$this->parent->getPath('extension_root')					)				);				return false;			}		}		/*		 * Since we created the module directory and will want to remove it if		 * we have to roll back the installation, let's add it to the		 * installation step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_root')));		}		// Copy all necessary files		if ($this->parent->parseFiles($this->manifest->files, -1) === false)		{			// Install failed, roll back changes			$this->parent->abort();			return false;		}		// If there is a manifest script, let's copy it.		if ($this->get('manifest_script'))		{			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_root') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']) || $this->parent->isOverwrite())			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_MOD_INSTALL_MANIFEST'));					return false;				}			}		}		// Parse optional tags		$this->parent->parseMedia($this->manifest->media, $clientId);		$this->parent->parseLanguages($this->manifest->languages, $clientId);		/*		 * ---------------------------------------------------------------------------------------------		 * Database Processing Section		 * ---------------------------------------------------------------------------------------------		 */		$row = JTable::getInstance('extension');		// Was there a module already installed with the same name?		if ($id)		{			// Load the entry and update the manifest_cache			$row->load($id);			// Update name			$row->name = $this->get('name');			// Update manifest			$row->manifest_cache = $this->parent->generateManifestCache();			if (!$row->store())			{				// Install failed, roll back changes				$this->parent					->abort(JText::sprintf('JLIB_INSTALLER_ABORT_MOD_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true)));				return false;			}		}		else		{			$row->set('name', $this->get('name'));			$row->set('type', 'module');			$row->set('element', $this->get('element'));			// There is no folder for modules			$row->set('folder', '');			$row->set('enabled', 1);			$row->set('protected', 0);			$row->set('access', $clientId == 1 ? 2 : 0);			$row->set('client_id', $clientId);			$row->set('params', $this->parent->getParams());			// Custom data			$row->set('custom_data', '');			$row->set('manifest_cache', $this->parent->generateManifestCache());			if (!$row->store())			{				// Install failed, roll back changes				$this->parent					->abort(JText::sprintf('JLIB_INSTALLER_ABORT_MOD_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true)));				return false;			}			// Since we have created a module item, we add it to the installation step stack			// so that if we have to rollback the changes we can undo it.			$this->parent->pushStep(array('type' => 'extension', 'extension_id' => $row->extension_id));			// Create unpublished module in jos_modules			$name = preg_replace('#[\*?]#', '', JText::_($this->get('name')));			$module = JTable::getInstance('module');			$module->set('title', $name);			$module->set('content', '');			$module->set('module', $this->get('element'));			$module->set('access', '1');			$module->set('showtitle', '1');			$module->set('params', '');			$module->set('client_id', $clientId);			$module->set('language', '*');			$module->store();		}		// Let's run the queries for the module		if (strtolower($this->route) == 'install')		{			$result = $this->parent->parseSQLFiles($this->manifest->install->sql);			if ($result === false)			{				// Install failed, rollback changes				$this->parent					->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_MOD_INSTALL_SQL_ERROR', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))				);				return false;			}			// Set the schema version to be the latest update version			if ($this->manifest->update)			{				$this->parent->setSchemaVersion($this->manifest->update->schemas, $row->extension_id);			}		}		elseif (strtolower($this->route) == 'update')		{			if ($this->manifest->update)			{				$result = $this->parent->parseSchemaUpdates($this->manifest->update->schemas, $row->extension_id);				if ($result === false)				{					// Install failed, rollback changes					$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_MOD_UPDATE_SQL_ERROR', $db->stderr(true)));					return false;				}			}		}		// Run the custom method based on the route		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, $this->route))		{			if ($this->parent->manifestClass->{$this->route}($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_MOD_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Lastly, we will copy the manifest file to its appropriate place.		if (!$this->parent->copyManifest(-1))		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_MOD_INSTALL_COPY_SETUP'));			return false;		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight($this->route, $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $row->get('extension_id');	}	/**	 * Custom update method	 *	 * This is really a shell for the install system	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function update()	{		// Set the overwrite setting		$this->parent->setOverwrite(true);		$this->parent->setUpgrade(true);		// Set the route for the install		$this->route = 'update';		// Go to install which handles updates properly		return $this->install();	}	/**	 * Custom discover method	 *	 * @return  array  JExtension list of extensions available	 *	 * @since   3.1	 */	public function discover()	{		$results = array();		$site_list = JFolder::folders(JPATH_SITE . '/modules');		$admin_list = JFolder::folders(JPATH_ADMINISTRATOR . '/modules');		$site_info = JApplicationHelper::getClientInfo('site', true);		$admin_info = JApplicationHelper::getClientInfo('administrator', true);		foreach ($site_list as $module)		{			$manifest_details = JInstaller::parseXMLInstallFile(JPATH_SITE . "/modules/$module/$module.xml");			$extension = JTable::getInstance('extension');			$extension->set('type', 'module');			$extension->set('client_id', $site_info->id);			$extension->set('element', $module);			$extension->set('folder', '');			$extension->set('name', $module);			$extension->set('state', -1);			$extension->set('manifest_cache', json_encode($manifest_details));			$extension->set('params', '{}');			$results[] = clone $extension;		}		foreach ($admin_list as $module)		{			$manifest_details = JInstaller::parseXMLInstallFile(JPATH_ADMINISTRATOR . "/modules/$module/$module.xml");			$extension = JTable::getInstance('extension');			$extension->set('type', 'module');			$extension->set('client_id', $admin_info->id);			$extension->set('element', $module);			$extension->set('folder', '');			$extension->set('name', $module);			$extension->set('state', -1);			$extension->set('manifest_cache', json_encode($manifest_details));			$extension->set('params', '{}');			$results[] = clone $extension;		}		return $results;	}	/**	 * Custom discover_install method	 *	 * @return  mixed  Extension ID on success, boolean false on failure	 *	 * @since   3.1	 */	public function discover_install()	{		// Modules are like templates, and are one of the easiest		// If its not in the extensions table we just add it		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/modules/' . $this->parent->extension->element . '/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$description = (string) $this->parent->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		// TODO: Re-evaluate this; should we run installation triggers? postflight perhaps?		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		$this->parent->extension->params = $this->parent->getParams();		if ($this->parent->extension->store())		{			return $this->parent->extension->get('extension_id');		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_MOD_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure.	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/modules/' . $this->parent->extension->element . '/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		if ($this->parent->extension->store())		{			return true;		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_MOD_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Custom uninstall method	 *	 * @param   integer  $id  The id of the module to uninstall	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$row = null;		$retval = true;		$db = $this->parent->getDbo();		// First order of business will be to load the module object table from the database.		// This should give us the necessary information to proceed.		$row = JTable::getInstance('extension');		if (!$row->load((int) $id) || !strlen($row->element))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_MOD_UNINSTALL_ERRORUNKOWNEXTENSION'), JLog::WARNING, 'jerror');			return false;		}		// Is the module we are trying to uninstall a core one?		// Because that is not a good idea...		if ($row->protected)		{			JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_MOD_UNINSTALL_WARNCOREMODULE', $row->name), JLog::WARNING, 'jerror');			return false;		}		// Get the extension root path		$element = $row->element;		$client = JApplicationHelper::getClientInfo($row->client_id);		if ($client === false)		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ERROR_MOD_UNINSTALL_UNKNOWN_CLIENT', $row->client_id));			return false;		}		$this->parent->setPath('extension_root', $client->path . '/modules/' . $element);		$this->parent->setPath('source', $this->parent->getPath('extension_root'));		// Get the module's manifest objecct		// We do findManifest to avoid problem when uninstalling a list of extensions: getManifest cache its manifest file.		$this->parent->findManifest();		$this->manifest = $this->parent->getManifest();		// Attempt to load the language file; might have uninstall strings		$this->loadLanguage(($row->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/modules/' . $element);		// If there is an manifest class file, let's load it		$this->scriptElement = $this->manifest->scriptfile;		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('extension_root') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		ob_start();		ob_implicit_flush(false);		// Run uninstall if possible		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'uninstall'))		{			$this->parent->manifestClass->uninstall($this);		}		$msg = ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		if (!($this->manifest instanceof SimpleXMLElement))		{			// Make sure we delete the folders			JFolder::delete($this->parent->getPath('extension_root'));			JLog::add(JText::_('JLIB_INSTALLER_ERROR_MOD_UNINSTALL_INVALID_NOTFOUND_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// Let's run the uninstall queries for the module		$result = $this->parent->parseSQLFiles($this->manifest->uninstall->sql);		if ($result === false)		{			// Install failed, rollback changes			JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_MOD_UNINSTALL_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');			$retval = false;		}		// Remove the schema version		$query = $db->getQuery(true)			->delete('#__schemas')			->where('extension_id = ' . $row->extension_id);		$db->setQuery($query);		$db->execute();		// Remove other files		$this->parent->removeFiles($this->manifest->media);		$this->parent->removeFiles($this->manifest->languages, $row->client_id);		// Let's delete all the module copies for the type we are uninstalling		$query = $db->getQuery(true)			->select($db->quoteName('id'))			->from($db->quoteName('#__modules'))			->where($db->quoteName('module') . ' = ' . $db->quote($row->element))			->where($db->quoteName('client_id') . ' = ' . (int) $row->client_id);		$db->setQuery($query);		try		{			$modules = $db->loadColumn();		}		catch (RuntimeException $e)		{			$modules = array();		}		// Do we have any module copies?		if (count($modules))		{			// Ensure the list is sane			JArrayHelper::toInteger($modules);			$modID = implode(',', $modules);			// Wipe out any items assigned to menus			$query = 'DELETE FROM #__modules_menu WHERE moduleid IN (' . $modID . ')';			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_MOD_UNINSTALL_EXCEPTION', $db->stderr(true)), JLog::WARNING, 'jerror');				$retval = false;			}			// Wipe out any instances in the modules table			$query = 'DELETE FROM #__modules WHERE id IN (' . $modID . ')';			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_MOD_UNINSTALL_EXCEPTION', $db->stderr(true)), JLog::WARNING, 'jerror');				$retval = false;			}		}		// Now we will no longer need the module object, so let's delete it and free up memory		$row->delete($row->extension_id);		$query = 'DELETE FROM #__modules WHERE module = ' . $db->quote($row->element) . ' AND client_id = ' . $row->client_id;		$db->setQuery($query);		try		{			// Clean up any other ones that might exist as well			$db->execute();		}		catch (RuntimeException $e)		{			// Ignore the error...		}		unset($row);		// Remove the installation folder		if (!JFolder::delete($this->parent->getPath('extension_root')))		{			// JFolder should raise an error			$retval = false;		}		return $retval;	}	/**	 * Custom rollback method	 * - Roll back the menu item	 *	 * @param   array  $arg  Installation step to rollback	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	protected function _rollback_menu($arg)	{		// Get database connector object		$db = $this->parent->getDbo();		// Remove the entry from the #__modules_menu table		$query = 'DELETE FROM #__modules_menu WHERE moduleid=' . (int) $arg['id'];		$db->setQuery($query);		try		{			return $db->execute();		}		catch (RuntimeException $e)		{			return false;		}	}	/**	 * Custom rollback method	 * - Roll back the module item	 *	 * @param   array  $arg  Installation step to rollback	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	protected function _rollback_module($arg)	{		// Get database connector object		$db = $this->parent->getDbo();		// Remove the entry from the #__modules table		$query = 'DELETE FROM #__modules WHERE id=' . (int) $arg['id'];		$db->setQuery($query);		try		{			return $db->execute();		}		catch (RuntimeException $e)		{			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterModule instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerModule extends JInstallerAdapterModule{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;jimport('joomla.filesystem.file');/** * Indexer class supporting PostgreSQL for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.0 */class FinderIndexerDriverPostgresql extends FinderIndexer{	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	public function index($item, $format = 'html')	{		// Mark beforeIndexing in the profiler.		static::$profiler ? static::$profiler->mark('beforeIndexing') : null;		$db = JFactory::getDbo();		$nd = $db->getNullDate();		// Check if the item is in the database.		$query = $db->getQuery(true)			->select($db->quoteName('link_id') . ', ' . $db->quoteName('md5sum'))			->from($db->quoteName('#__finder_links'))			->where($db->quoteName('url') . ' = ' . $db->quote($item->url));		// Load the item  from the database.		$db->setQuery($query);		$link = $db->loadObject();		// Get the indexer state.		$state = static::getState();		// Get the signatures of the item.		$curSig = static::getSignature($item);		$oldSig = isset($link->md5sum) ? $link->md5sum : null;		// Get the other item information.		$linkId = empty($link->link_id) ? null : $link->link_id;		$isNew = empty($link->link_id) ? true : false;		// Check the signatures. If they match, the item is up to date.		if (!$isNew && $curSig == $oldSig)		{			return $linkId;		}		/*		 * If the link already exists, flush all the term maps for the item.		 * Maps are stored in 16 tables so we need to iterate through and flush		 * each table one at a time.		 */		if (!$isNew)		{			for ($i = 0; $i <= 15; $i++)			{				// Flush the maps for the link.				$query->clear()					->delete($db->quoteName('#__finder_links_terms' . dechex($i)))					->where($db->quoteName('link_id') . ' = ' . (int) $linkId);				$db->setQuery($query);				$db->execute();			}			// Remove the taxonomy maps.			FinderIndexerTaxonomy::removeMaps($linkId);		}		// Mark afterUnmapping in the profiler.		static::$profiler ? static::$profiler->mark('afterUnmapping') : null;		// Perform cleanup on the item data.		$item->publish_start_date = (int) $item->publish_start_date != 0 ? $item->publish_start_date : $nd;		$item->publish_end_date = (int) $item->publish_end_date != 0 ? $item->publish_end_date : $nd;		$item->start_date = (int) $item->start_date != 0 ? $item->start_date : $nd;		$item->end_date = (int) $item->end_date != 0 ? $item->end_date : $nd;		// Prepare the item description.		$item->description = FinderIndexerHelper::parse($item->summary);		/*		 * Now, we need to enter the item into the links table. If the item		 * already exists in the database, we need to use an UPDATE query.		 * Otherwise, we need to use an INSERT to get the link id back.		 */		if ($isNew)		{			$columnsArray = array(				$db->quoteName('url'), $db->quoteName('route'), $db->quoteName('title'), $db->quoteName('description'),				$db->quoteName('indexdate'), $db->quoteName('published'), $db->quoteName('state'), $db->quoteName('access'),				$db->quoteName('language'), $db->quoteName('type_id'), $db->quoteName('object'), $db->quoteName('publish_start_date'),				$db->quoteName('publish_end_date'), $db->quoteName('start_date'), $db->quoteName('end_date'), $db->quoteName('list_price'),				$db->quoteName('sale_price')			);			// Insert the link.			$query->clear()				->insert($db->quoteName('#__finder_links'))				->columns($columnsArray)				->values(				$db->quote($item->url) . ', '				. $db->quote($item->route) . ', '				. $db->quote($item->title) . ', '				. $db->quote($item->description) . ', '				. $query->currentTimestamp() . ', '				. '1, '				. (int) $item->state . ', '				. (int) $item->access . ', '				. $db->quote($item->language) . ', '				. (int) $item->type_id . ', '				. $db->quote(serialize($item)) . ', '				. $db->quote($item->publish_start_date) . ', '				. $db->quote($item->publish_end_date) . ', '				. $db->quote($item->start_date) . ', '				. $db->quote($item->end_date) . ', '				. (double) ($item->list_price ? $item->list_price : 0) . ', '				. (double) ($item->sale_price ? $item->sale_price : 0)			);			$db->setQuery($query);			$db->execute();			// Get the link id.			$linkId = (int) $db->insertid();		}		else		{			// Update the link.			$query->clear()				->update($db->quoteName('#__finder_links'))				->set($db->quoteName('route') . ' = ' . $db->quote($item->route))				->set($db->quoteName('title') . ' = ' . $db->quote($item->title))				->set($db->quoteName('description') . ' = ' . $db->quote($item->description))				->set($db->quoteName('indexdate') . ' = ' . $query->currentTimestamp())				->set($db->quoteName('state') . ' = ' . (int) $item->state)				->set($db->quoteName('access') . ' = ' . (int) $item->access)				->set($db->quoteName('language') . ' = ' . $db->quote($item->language))				->set($db->quoteName('type_id') . ' = ' . (int) $item->type_id)				->set($db->quoteName('object') . ' = ' . $db->quote(serialize($item)))				->set($db->quoteName('publish_start_date') . ' = ' . $db->quote($item->publish_start_date))				->set($db->quoteName('publish_end_date') . ' = ' . $db->quote($item->publish_end_date))				->set($db->quoteName('start_date') . ' = ' . $db->quote($item->start_date))				->set($db->quoteName('end_date') . ' = ' . $db->quote($item->end_date))				->set($db->quoteName('list_price') . ' = ' . (double) ($item->list_price ? $item->list_price : 0))				->set($db->quoteName('sale_price') . ' = ' . (double) ($item->sale_price ? $item->sale_price : 0))				->where('link_id = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Set up the variables we will need during processing.		$tokens = array();		$count = 0;		// Mark afterLinking in the profiler.		static::$profiler ? static::$profiler->mark('afterLinking') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		/*		 * Process the item's content. The items can customize their		 * processing instructions to define extra properties to process		 * or rearrange how properties are weighted.		 */		foreach ($item->getInstructions() as $group => $properties)		{			// Iterate through the properties of the group.			foreach ($properties as $property)			{				// Check if the property exists in the item.				if (empty($item->$property))				{					continue;				}				// Tokenize the property.				if (is_array($item->$property))				{					// Tokenize an array of content and add it to the database.					foreach ($item->$property as $ip)					{						// If the group is path, we need to a few extra processing						// steps to strip the extension and convert slashes and dashes						// to spaces.						if ($group === static::PATH_CONTEXT)						{							$ip = JFile::stripExt($ip);							$ip = str_replace('/', ' ', $ip);							$ip = str_replace('-', ' ', $ip);						}						// Tokenize a string of content and add it to the database.						$count += $this->tokenizeToDB($ip, $group, $item->language, $format);						// Check if we're approaching the memory limit of the token table.						if ($count > static::$state->options->get('memory_table_limit', 30000))						{							$this->toggleTables(false);						}					}				}				else				{					// If the group is path, we need to a few extra processing					// steps to strip the extension and convert slashes and dashes					// to spaces.					if ($group === static::PATH_CONTEXT)					{						$item->$property = JFile::stripExt($item->$property);						$item->$property = str_replace('/', ' ', $item->$property);						$item->$property = str_replace('-', ' ', $item->$property);					}					// Tokenize a string of content and add it to the database.					$count += $this->tokenizeToDB($item->$property, $group, $item->language, $format);					// Check if we're approaching the memory limit of the token table.					if ($count > static::$state->options->get('memory_table_limit', 30000))					{						$this->toggleTables(false);					}				}			}		}		/*		 * Process the item's taxonomy. The items can customize their		 * taxonomy mappings to define extra properties to map.		 */		foreach ($item->getTaxonomy() as $branch => $nodes)		{			// Iterate through the nodes and map them to the branch.			foreach ($nodes as $node)			{				// Add the node to the tree.				$nodeId = FinderIndexerTaxonomy::addNode($branch, $node->title, $node->state, $node->access);				// Add the link => node map.				FinderIndexerTaxonomy::addMap($linkId, $nodeId);				// Tokenize the node title and add them to the database.				$count += $this->tokenizeToDB($node->title, static::META_CONTEXT, $item->language, $format);			}		}		// Mark afterProcessing in the profiler.		static::$profiler ? static::$profiler->mark('afterProcessing') : null;		/*		 * At this point, all of the item's content has been parsed, tokenized		 * and inserted into the #__finder_tokens table. Now, we need to		 * aggregate all the data into that table into a more usable form. The		 * aggregated data will be inserted into #__finder_tokens_aggregate		 * table.		 */		$query	= 'INSERT INTO ' . $db->quoteName('#__finder_tokens_aggregate') .				' (' . $db->quoteName('term_id') .				', ' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('term_weight') .				', ' . $db->quoteName('context') .				', ' . $db->quoteName('context_weight') .				', ' . $db->quoteName('language') . ')' .				' SELECT' .				' t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context,' .				' ROUND( t1.weight * COUNT( t2.term ) * %F, 8 ) AS context_weight, t1.language' .				' FROM (' .				'   SELECT DISTINCT t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				'   FROM ' . $db->quoteName('#__finder_tokens') . ' AS t1' .				'   WHERE t1.context = %d' .				' ) AS t1' .				' JOIN ' . $db->quoteName('#__finder_tokens') . ' AS t2 ON t2.term = t1.term' .				' LEFT JOIN ' . $db->quoteName('#__finder_terms') . ' AS t ON t.term = t1.term' .				' WHERE t2.context = %d' .				' GROUP BY t1.term, t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				' ORDER BY t1.term DESC';		// Iterate through the contexts and aggregate the tokens per context.		foreach ($state->weights as $context => $multiplier)		{			// Run the query to aggregate the tokens for this context..			$db->setQuery(sprintf($query, $multiplier, $context, $context));			$db->execute();		}		// Mark afterAggregating in the profiler.		static::$profiler ? static::$profiler->mark('afterAggregating') : null;		/*		 * When we pulled down all of the aggregate data, we did a LEFT JOIN		 * over the terms table to try to find all the term ids that		 * already exist for our tokens. If any of the rows in the aggregate		 * table have a term of 0, then no term record exists for that		 * term so we need to add it to the terms table.		 */		/* Emulation of IGNORE INTO behaviour */		$db->setQuery(			' SELECT ta.term' .			' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .			' WHERE ta.term_id = 0'		);		if ($db->loadRow() == null)		{			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_terms') .				' (' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('weight') .				', ' . $db->quoteName('soundex') .				', ' . $db->quoteName('language') . ')' .				' SELECT ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term), ta.language' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .				' WHERE ta.term_id = 0' .				' GROUP BY ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term), ta.language'			);			$db->execute();		}		/*		 * Now, we just inserted a bunch of new records into the terms table		 * so we need to go back and update the aggregate table with all the		 * new term ids.		 */		$query = $db->getQuery(true)			->update($db->quoteName('#__finder_tokens_aggregate') . ' AS ta')			->join('INNER', $db->quoteName('#__finder_terms') . ' AS t ON t.term = ta.term')			->set('ta.term_id = t.term_id')			->where('ta.term_id = 0');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * After we've made sure that all of the terms are in the terms table		 * and the aggregate table has the correct term ids, we need to update		 * the links counter for each term by one.		 */		$query->clear()			->update($db->quoteName('#__finder_terms') . ' AS t')			->join('INNER', $db->quoteName('#__finder_tokens_aggregate') . ' AS ta ON ta.term_id = t.term_id')			->set('t.' . $db->quoteName('links') . ' = t.links + 1');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * Before we can insert all of the mapping rows, we have to figure out		 * which mapping table the rows need to be inserted into. The mapping		 * table for each term is based on the first character of the md5 of		 * the first character of the term. In php, it would be expressed as		 * substr(md5(substr($token, 0, 1)), 0, 1)		 */		$query->clear()			->update($db->quoteName('#__finder_tokens_aggregate'))			->set($db->quoteName('map_suffix') . ' = SUBSTR(MD5(SUBSTR(' . $db->quoteName('term') . ', 1, 1)), 1, 1)');		$db->setQuery($query);		$db->execute();		/*		 * At this point, the aggregate table contains a record for each		 * term in each context. So, we're going to pull down all of that		 * data while grouping the records by term and add all of the		 * sub-totals together to arrive at the final total for each token for		 * this link. Then, we insert all of that data into the appropriate		 * mapping table.		 */		for ($i = 0; $i <= 15; $i++)		{			// Get the mapping table suffix.			$suffix = dechex($i);			/*			 * We have to run this query 16 times, one for each link => term			 * mapping table.			 */			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_links_terms' . $suffix) .				' (' . $db->quoteName('link_id') .				', ' . $db->quoteName('term_id') .				', ' . $db->quoteName('weight') . ')' .				' SELECT ' . (int) $linkId . ', ' . $db->quoteName('term_id') . ',' .				' ROUND(SUM(' . $db->quoteName('context_weight') . '), 8)' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') .				' WHERE ' . $db->quoteName('map_suffix') . ' = ' . $db->quote($suffix) .				' GROUP BY ' . $db->quoteName('term') .				' ORDER BY ' . $db->quoteName('term') . ' DESC'			);			$db->execute();		}		// Mark afterMapping in the profiler.		static::$profiler ? static::$profiler->mark('afterMapping') : null;		// Update the signature.		$query->clear()			->update($db->quoteName('#__finder_links'))			->set($db->quoteName('md5sum') . ' = ' . $db->quote($curSig))			->where($db->quoteName('link_id') . ' = ' . $db->quote($linkId));		$db->setQuery($query);		$db->execute();		// Mark afterSigning in the profiler.		static::$profiler ? static::$profiler->mark('afterSigning') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		// Toggle the token tables back to memory tables.		$this->toggleTables(true);		// Mark afterTruncating in the profiler.		static::$profiler ? static::$profiler->mark('afterTruncating') : null;		return $linkId;	}	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function remove($linkId)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get the indexer state.		$state = static::getState();		// Update the link counts and remove the mapping records.		for ($i = 0; $i <= 15; $i++)		{			// Update the link counts for the terms.			$query->update($db->quoteName('#__finder_terms') . ' AS t')				->join('INNER', $db->quoteName('#__finder_links_terms' . dechex($i)) . ' AS m ON m.term_id = t.term_id')				->set('t.links = t.links - 1')				->where('m.link_id = ' . $db->quote((int) $linkId));			$db->setQuery($query);			$db->execute();			// Remove all records from the mapping tables.			$query->clear()				->delete($db->quoteName('#__finder_links_terms' . dechex($i)))				->where($db->quoteName('link_id') . ' = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Delete all orphaned terms.		$query->clear()			->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Delete the link from the index.		$query->clear()			->delete($db->quoteName('#__finder_links'))			->where($db->quoteName('link_id') . ' = ' . $db->quote((int) $linkId));		$db->setQuery($query);		$db->execute();		// Remove the taxonomy maps.		FinderIndexerTaxonomy::removeMaps($linkId);		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function optimize()	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Delete all orphaned terms.		$query->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Optimize the links table.		$db->setQuery('VACUUM ' . $db->quoteName('#__finder_links'));		$db->execute();		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links'));		$db->execute();		for ($i = 0; $i <= 15; $i++)		{			// Optimize the terms mapping table.			$db->setQuery('VACUUM ' . $db->quoteName('#__finder_links_terms' . dechex($i)));			$db->execute();			$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links_terms' . dechex($i)));			$db->execute();		}		// Optimize the terms mapping table.		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links_terms'));		$db->execute();		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		// Optimize the taxonomy mapping table.		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_taxonomy_map'));		$db->execute();		return true;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function addTokensToDB($tokens, $context = '')	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Force tokens to an array.		$tokens = is_array($tokens) ? $tokens : array($tokens);		// Count the number of token values.		$values = 0;		// Insert the tokens into the database.		$query->insert($db->quoteName('#__finder_tokens'))			->columns(				array(					$db->quoteName('term'),					$db->quoteName('stem'),					$db->quoteName('common'),					$db->quoteName('phrase'),					$db->quoteName('weight'),					$db->quoteName('context'),					$db->quoteName('language')				)			);		// Iterate through the tokens to create SQL value sets.		foreach ($tokens as $token)		{			$query->values(				$db->quote($token->term) . ', '					. $db->quote($token->stem) . ', '					. (int) $token->common . ', '					. (int) $token->phrase . ', '					. (float) $token->weight . ', '					. (int) $context . ', '					. $db->quote($token->language)			);			$values++;		}		$db->setQuery($query);		$db->execute();		return $values;	}	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function toggleTables($memory)	{		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();JHtml::_('behavior.noframes');$lang = JFactory::getLanguage();$doc	= JFactory::getDocument();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" ><head><jdoc:include type="head" /><!-- Load additional CSS styles for Internet Explorer --><!--[if IE 7]>	<link href="templates/<?php echo  $this->template ?>/css/ie7.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--><!-- Load Template JavaScript --><script type="text/javascript" src="templates/<?php  echo  $this->template  ?>/js/template.js"></script></head><body id="login-page">	<div id="containerwrap">		<!-- Header Logo -->		<div id="header">			<h1 class="title"><?php echo $this->params->get('showSiteName') ? $app->getCfg('sitename') . " " . JText::_('JADMINISTRATION') : JText::_('JADMINISTRATION'); ?></h1>		</div><!-- end header -->		<!-- Content Area -->		<div id="content">			<!-- Beginning of Actual Content -->			<div id="element-box" class="login">				<div class="pagetitle"><h2><?php echo JText::_('COM_LOGIN_JOOMLA_ADMINISTRATION_LOGIN') ?></h2></div>					<!-- System Messages -->					<jdoc:include type="message" />					<div class="login-inst">					<p><?php echo JText::_('COM_LOGIN_VALID') ?></p>					<div id="lock"></div>					<a href="<?php echo JURI::root(); ?>"><?php echo JText::_('COM_LOGIN_RETURN_TO_SITE_HOME_PAGE') ?></a>					</div>					<!-- Login Component -->					<div class="login-box">						<jdoc:include type="component" />					</div>				<div class="clr"></div>			</div><!-- end element-box -->		<noscript>			<?php echo JText::_('JGLOBAL_WARNJAVASCRIPT') ?>		</noscript>		</div><!-- end content -->		<div class="clr"></div>	</div><!-- end of containerwrap -->	<!-- Footer -->	<div id="footer">		<p class="copyright">			<?php $joomla = '<a href="http://www.joomla.org">Joomla!&#174;</a>';			echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla) ?>		</p>	</div></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$version = new JVersion;?><div id="installer-languages">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=languages');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<?php if (count($this->items) || $this->escape($this->state->get('filter.search'))) : ?>			<?php echo $this->loadTemplate('filter'); ?>			<table class="table table-striped">				<thead>					<tr>						<th width="20" class="nowrap hidden-phone">							<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />						</th>						<th class="nowrap">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>						</th>						<th width="10%" class="center">							<?php echo JText::_('JVERSION'); ?>						</th>						<th class="center nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_TYPE'); ?>						</th>						<th width="35%" class="nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_DETAILS_URL'); ?>						</th>						<th width="30" class="nowrap hidden-phone">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'update_id', $listDirn, $listOrder); ?>						</th>					</tr>				</thead>				<tfoot>					<tr>						<td colspan="6">							<?php echo $this->pagination->getListFooter(); ?>						</td>					</tr>				</tfoot>				<tbody>					<?php foreach ($this->items as $i => $language) :				?>					<tr class="row<?php echo $i % 2; ?>">						<td class="hidden-phone">							<?php echo JHtml::_('grid.id', $i, $language->update_id, false, 'cid'); ?>						</td>						<td>							<?php echo $language->name; ?>							<?php // Display a Note if language pack version is not equal to Joomla version ?>							<?php if (substr($language->version, 0, 3) != $version->RELEASE									|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>								<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>							<?php endif; ?>						</td>						<td class="center small">							<?php echo $language->version; ?>						</td>						<td class="center small hidden-phone">							<?php echo JText::_('COM_INSTALLER_TYPE_' . strtoupper($language->type)); ?>						</td>						<td class="small hidden-phone">							<?php echo $language->detailsurl; ?>						</td>						<td class="small hidden-phone">							<?php echo $language->update_id; ?>						</td>					</tr>					<?php endforeach; ?>				</tbody>			</table>		<?php else : ?>			<div class="alert"><?php echo JText::_('COM_INSTALLER_MSG_LANGUAGES_NOLANGUAGES'); ?></div>		<?php endif; ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2009 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Form Field class for the Joomla Framework. * * @package     Joomla.Libraries * @subpackage  Form * @since       2.5 */class JFormFieldCaptcha extends JFormField{	/**	 * The field type.	 *	 * @var		string	 */	protected $type = 'Captcha';	/**	 * Method to attach a JForm object to the field.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function setup(SimpleXMLElement $element, $value, $group = null)	{		$result = parent::setup($element, $value, $group);		$plugin = $this->element['plugin'] ?			(string) $this->element['plugin'] :			JFactory::getApplication()->getParams()->get('captcha', JFactory::getConfig()->get('captcha'));		if ($plugin === 0 || $plugin === '0' || $plugin === '' || $plugin === null)		{			$this->hidden = true;		}		else		{			// Force field to be required. There's no reason to have a captcha if it is not required.			// Obs: Don't put required="required" in the xml file, you just need to have validate="captcha"			$this->required = true;			$class = $this->element['class'];			if (strpos($class, 'required') === false)			{				$this->element['class'] = $class . ' required';			}		}		return $result;	}	/**	 * Method to get the field input.	 *	 * @return  string  The field input.	 *	 * @since   2.5	 */	protected function getInput()	{		$class     = $this->element['class'] ? (string) $this->element['class'] : '';		$plugin    = $this->element['plugin'] ? (string) $this->element['plugin'] : JFactory::getApplication()->getParams()->get('captcha', JFactory::getConfig()->get('captcha'));		$namespace = $this->element['namespace'] ? (string) $this->element['namespace'] : $this->form->getName();		// Use 0 for none		if ($plugin === 0 || $plugin === '0' || $plugin === '' || $plugin === null)		{			return '';		}		else		{			if (($captcha = JCaptcha::getInstance($plugin, array('namespace' => $namespace))) == null)			{				return '';			}		}		return $captcha->display($this->name, $this->id, $class);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');?><div class="profile <?php echo $this->pageclass_sfx?>"><?php if (JFactory::getUser()->id == $this->data->id) : ?><ul class="btn-toolbar pull-right">	<li class="btn-group">		<a class="btn" href="<?php echo JRoute::_('index.php?option=com_users&task=profile.edit&user_id='.(int) $this->data->id);?>">			<span class="icon-user"></span> <?php echo JText::_('COM_USERS_EDIT_PROFILE'); ?></a>	</li></ul><?php endif; ?><?php if ($this->params->get('show_page_heading')) : ?><div class="page-header">	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1></div><?php endif; ?><?php echo $this->loadTemplate('core'); ?><?php echo $this->loadTemplate('params'); ?><?php echo $this->loadTemplate('custom'); ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');$canDo = TemplatesHelper::getActions();$input = JFactory::getApplication()->input;?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=templates'); ?>" method="post" name="adminForm" id="adminForm">	<div class="width-50 fltlft">		<fieldset class="adminform" id="template-manager">			<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_DESCRIPTION');?></legend>			<?php echo JHtml::_('templates.thumb', $this->template->element, $this->template->client_id); ?>			<h2><?php echo ucfirst($this->template->element); ?></h2>			<?php $client = JApplicationHelper::getClientInfo($this->template->client_id); ?>			<p><?php $this->template->xmldata = TemplatesHelper::parseXMLTemplateFile($client->path, $this->template->element);?></p>			<p><?php  echo JText::_($this->template->xmldata->description); ?></p>		</fieldset>		<fieldset class="adminform" id="template-manager">			<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_MASTER_FILES');?></legend>			<ul>				<li>					<?php $id = $this->files['main']['index']->id; ?>					<?php if ($canDo->get('core.edit')) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">					<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_MAIN');?>					<?php if ($canDo->get('core.edit')) : ?>						</a>					<?php endif; ?>				</li>				<?php if ($this->files['main']['error']->exists) : ?>				<li>					<?php $id = $this->files['main']['error']->id; ?>					<?php if ($canDo->get('core.edit')) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">					<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_ERROR');?>					<?php if ($canDo->get('core.edit')) : ?>						</a>					<?php endif; ?>				</li>				<?php endif; ?>				<?php if ($this->files['main']['offline']->exists) : ?>					<li>						<?php $id = $this->files['main']['offline']->id; ?>						<?php if ($canDo->get('core.edit')) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">						<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_OFFLINEVIEW');?>						<?php if ($canDo->get('core.edit')) : ?>							</a>						<?php endif; ?>					</li>				<?php endif; ?>				<?php if ($this->files['main']['print']->exists) : ?>				<li>					<?php $id = $this->files['main']['print']->id; ?>					<?php if ($canDo->get('core.edit')) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">					<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_PRINTVIEW');?>					<?php if ($canDo->get('core.edit')) : ?>						</a>					<?php endif; ?>				</li>				<?php endif; ?>			</ul>		</fieldset>		<div class="clr"></div>	</div>	<div class="width-50 fltrt">		<fieldset class="adminform" id="template-manager-css">			<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_CSS');?></legend>			<?php if (!empty($this->files['css'])) : ?>			<ul>				<?php foreach ($this->files['css'] as $file) : ?>				<li>					<?php if ($canDo->get('core.edit')) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$file->id);?>">					<?php endif; ?>						<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_EDIT_CSS', $file->name);?>					<?php if ($canDo->get('core.edit')) : ?>					</a>					<?php endif; ?>				</li>				<?php endforeach; ?>			</ul>			<?php endif; ?>			<!--<div>				<a href="#" class="modal">					<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_ADD_CSS');?></a>			</div>-->		</fieldset>		<div class="clr"></div>		<input type="hidden" name="task" value="" />	</div><div class="width-50 fltrt"></form><form action="<?php echo JRoute::_('index.php?option=com_templates&task=template.copy&id=' . $input->getInt('id')); ?>"		method="post" name="adminForm" id="adminForm">	<fieldset class="adminform" id="template-manager-css">		<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY');?></legend>		<label id="new_name" class="hasTip"  title="<?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_DESC'); ?>"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_LABEL')?></label>		<input class="inputbox" type="text" id="new_name" name="new_name"  />		<button type="submit"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY'); ?></button>	</fieldset>	<?php echo JHtml::_('form.token'); ?></form></div>
<?php/** * @package     Joomla.Libraries * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Utitlity class for multilang * * @package     Joomla.Libraries * @subpackage  Language * @since       2.5.4 */class JLanguageMultilang{	/**	 * Method to determine if the language filter plugin is enabled.	 * This works for both site and administrator.	 *	 * @return  boolean  True if site is supporting multiple languages; false otherwise.	 *	 * @since   2.5.4	 */	public static function isEnabled()	{		// Flag to avoid doing multiple database queries.		static $tested = false;		// Status of language filter plugin.		static $enabled = false;		// Get application object.		$app = JFactory::getApplication();		// If being called from the front-end, we can avoid the database query.		if ($app->isSite())		{			$enabled = $app->getLanguageFilter();			return $enabled;		}		// If already tested, don't test again.		if (!$tested)		{			// Determine status of language filter plug-in.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('enabled')				->from($db->quoteName('#__extensions'))				->where($db->quoteName('type') . ' = ' . $db->quote('plugin'))				->where($db->quoteName('folder') . ' = ' . $db->quote('system'))				->where($db->quoteName('element') . ' = ' . $db->quote('languagefilter'));			$db->setQuery($query);			$enabled = $db->loadResult();			$tested = true;		}		return $enabled;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_content */class ContentControllerArticle extends JControllerForm{	/**	 * The URL view item variable.	 *	 * @var    string	 * @since  1.6	 */	protected $view_item = 'form';	/**	 * The URL view list variable.	 *	 * @var    string	 * @since  1.6	 */	protected $view_list = 'categories';	/**	 * Method to add a new record.	 *	 * @return  mixed  True if the record can be added, a error object if not.	 *	 * @since   1.6	 */	public function add()	{		if (!parent::add())		{			// Redirect to the return page.			$this->setRedirect($this->getReturnPage());		}	}	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user       = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('catid'), 'int');		$allow      = null;		if ($categoryId)		{			// If the category has been passed in the data or URL check it.			$allow	= $user->authorise('core.create', 'com_content.category.'.$categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd();		}		else		{			return $allow;		}	}	/**	 * Method override to check if you can edit an existing record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key; default is id.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$user     = JFactory::getUser();		$userId   = $user->get('id');		$asset    = 'com_content.article.' . $recordId;		// Check general edit permission first.		if ($user->authorise('core.edit', $asset))		{			return true;		}		// Fallback on edit.own.		// First test if the permission is available.		if ($user->authorise('core.edit.own', $asset))		{			// Now test the owner is the user.			$ownerId = (int) isset($data['created_by']) ? $data['created_by'] : 0;			if (empty($ownerId) && $recordId)			{				// Need to do a lookup from the model.				$record = $this->getModel()->getItem($recordId);				if (empty($record))				{					return false;				}				$ownerId = $record->created_by;			}			// If the owner matches 'me' then do the test.			if ($ownerId == $userId)			{				return true;			}		}		// Since there is no asset tracking, revert to the component permissions.		return parent::allowEdit($data, $key);	}	/**	 * Method to cancel an edit.	 *	 * @param   string  $key  The name of the primary key of the URL variable.	 *	 * @return  boolean  True if access level checks pass, false otherwise.	 *	 * @since   1.6	 */	public function cancel($key = 'a_id')	{		parent::cancel($key);		// Redirect to the return page.		$this->setRedirect($this->getReturnPage());	}	/**	 * Method to edit an existing record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key	 * (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if access level check and checkout passes, false otherwise.	 *	 * @since   1.6	 */	public function edit($key = null, $urlVar = 'a_id')	{		$result = parent::edit($key, $urlVar);		return $result;	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.5	 */	public function getModel($name = 'form', $prefix = '', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $urlVar    The name of the URL variable for the id.	 *	 * @return  string	The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = 'a_id')	{		// Need to override the parent method completely.		$tmpl   = $this->input->get('tmpl');		$layout = $this->input->get('layout', 'edit');		$append = '';		// Setup redirect info.		if ($tmpl)		{			$append .= '&tmpl='.$tmpl;		}		// TODO This is a bandaid, not a long term solution.//		if ($layout)//		{//			$append .= '&layout=' . $layout;//		}		$append .= '&layout=edit';		if ($recordId)		{			$append .= '&'.$urlVar.'='.$recordId;		}		$itemId	= $this->input->getInt('Itemid');		$return	= $this->getReturnPage();		$catId  = $this->input->getInt('catid', null, 'get');		if ($itemId)		{			$append .= '&Itemid='.$itemId;		}		if ($catId)		{			$append .= '&catid='.$catId;		}		if ($return)		{			$append .= '&return='.base64_encode($return);		}		return $append;	}	/**	 * Get the return URL.	 *	 * If a "return" variable has been passed in the request	 *	 * @return  string	The return URL.	 *	 * @since   1.6	 */	protected function getReturnPage()	{		$return = $this->input->get('return', null, 'base64');		if (empty($return) || !JUri::isInternal(base64_decode($return)))		{			return JUri::base();		}		else		{			return base64_decode($return);		}	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   array         $validData   The validated data.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		return;	}	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   1.6	 */	public function save($key = null, $urlVar = 'a_id')	{		$result = parent::save($key, $urlVar);		// If ok, redirect to the return page.		if ($result)		{			$this->setRedirect($this->getReturnPage());		}		return $result;	}	/**	 * Method to save a vote.	 *	 * @return  void	 *	 * @since   1.6	 */	public function vote()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user_rating = $this->input->getInt('user_rating', -1);		if ($user_rating > -1)		{			$url = $this->input->getString('url', '');			$id = $this->input->getInt('id', 0);			$viewName = $this->input->getString('view', $this->default_view);			$model = $this->getModel($viewName);			if ($model->storeVote($id, $user_rating))			{				$this->setRedirect($url, JText::_('COM_CONTENT_ARTICLE_VOTE_SUCCESS'));			}			else			{				$this->setRedirect($url, JText::_('COM_CONTENT_ARTICLE_VOTE_FAILURE'));			}		}	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */if (version_compare(PHP_VERSION, '5.3.1', '<')){	die('Your host needs to use PHP 5.3.1 or higher to run this version of Joomla!');}/** * Constant that is checked in included files to prevent direct access. * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower */define('_JEXEC', 1);// Bootstrap the applicationrequire_once dirname(__FILE__) . '/application/bootstrap.php';// Get the application$app = JApplicationWeb::getInstance('InstallationApplicationWeb');// Execute the application$app->execute();
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Install View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerViewInstall extends InstallerViewDefault{	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.5	 */	public function display($tpl = null)	{		$paths = new stdClass;		$paths->first = '';		$state = $this->get('state');		$this->paths = &$paths;		$this->state = &$state;		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		parent::addToolbar();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_INSTALL');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelTracks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'name', 'b.name',				'cl.name', 'client_name',				'cat.title', 'category_title',				'track_type', 'a.track_type',				'count', 'a.count',				'track_date', 'a.track_date',			);		}		parent::__construct($config);	}	/**	 * @since   1.6	 */	protected $basename;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$type = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type');		$this->setState('filter.type', $type);		$begin = $this->getUserStateFromRequest($this->context . '.filter.begin', 'filter_begin', '', 'string');		$this->setState('filter.begin', $begin);		$end = $this->getUserStateFromRequest($this->context . '.filter.end', 'filter_end', '', 'string');		$this->setState('filter.end', $end);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('b.name', 'asc');	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		require_once JPATH_COMPONENT . '/helpers/banners.php';		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			'a.track_date as track_date,'				. 'a.track_type as track_type,'				. $db->quoteName('a.count') . ' as ' . $db->quoteName('count')		);		$query->from($db->quoteName('#__banner_tracks') . ' AS a');		// Join with the banners		$query->join('LEFT', $db->quoteName('#__banners') . ' as b ON b.id=a.banner_id')			->select('b.name as name');		// Join with the client		$query->join('LEFT', $db->quoteName('#__banner_clients') . ' as cl ON cl.id=b.cid')			->select('cl.name as client_name');		// Join with the category		$query->join('LEFT', $db->quoteName('#__categories') . ' as cat ON cat.id=b.catid')			->select('cat.title as category_title');		// Filter by type		$type = $this->getState('filter.type');		if (!empty($type))		{			$query->where('a.track_type = ' . (int) $type);		}		// Filter by client		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('b.cid = ' . (int) $clientId);		}		// Filter by category		$catedoryId = $this->getState('filter.category_id');		if (is_numeric($catedoryId))		{			$query->where('b.catid = ' . (int) $catedoryId);		}		// Filter by begin date		$begin = $this->getState('filter.begin');		if (!empty($begin))		{			$query->where('a.track_date >= ' . $db->quote($begin));		}		// Filter by end date		$end = $this->getState('filter.end');		if (!empty($end))		{			$query->where('a.track_date <= ' . $db->quote($end));		}		// Add the list ordering clause.		$orderCol = $this->getState('list.ordering', 'name');		$query->order($db->escape($orderCol) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to delete rows.	 *	 * @param   array  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 */	public function delete()	{		$user = JFactory::getUser();		$categoryId = $this->getState('category_id');		// Access checks.		if ($categoryId)		{			$allow = $user->authorise('core.delete', 'com_banners.category.' . (int) $categoryId);		}		else		{			$allow = $user->authorise('core.delete', 'com_banners');		}		if ($allow)		{			// Delete tracks from this banner			$db = $this->getDbo();			$query = $db->getQuery(true)				->delete($db->quoteName('#__banner_tracks'));			// Filter by type			$type = $this->getState('filter.type');			if (!empty($type))			{				$query->where('track_type = ' . (int) $type);			}			// Filter by begin date			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$query->where('track_date >= ' . $db->quote($begin));			}			// Filter by end date			$end = $this->getState('filter.end');			if (!empty($end))			{				$query->where('track_date <= ' . $db->quote($end));			}			$where = '1';			// Filter by client			$clientId = $this->getState('filter.client_id');			if (!empty($clientId))			{				$where .= ' AND cid = ' . (int) $clientId;			}			// Filter by category			if (!empty($categoryId))			{				$where .= ' AND catid = ' . (int) $categoryId;			}			$query->where('banner_id IN (SELECT id FROM ' . $db->quoteName('#__banners') . ' WHERE ' . $where . ')');			$db->setQuery($query);			$this->setError((string) $query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));		}		return true;	}	/**	 * Get file name	 *	 * @return  string    The file name	 * @since   1.6	 */	public function getBaseName()	{		if (!isset($this->basename))		{			$app = JFactory::getApplication();			$basename = $this->getState('basename');			$basename = str_replace('__SITE__', $app->getCfg('sitename'), $basename);			$categoryId = $this->getState('filter.category_id');			if (is_numeric($categoryId))			{				if ($categoryId > 0)				{					$basename = str_replace('__CATID__', $categoryId, $basename);				}				else				{					$basename = str_replace('__CATID__', '', $basename);				}				$categoryName = $this->getCategoryName();				$basename = str_replace('__CATNAME__', $categoryName, $basename);			}			else			{				$basename = str_replace('__CATID__', '', $basename);				$basename = str_replace('__CATNAME__', '', $basename);			}			$clientId = $this->getState('filter.client_id');			if (is_numeric($clientId))			{				if ($clientId > 0)				{					$basename = str_replace('__CLIENTID__', $clientId, $basename);				}				else				{					$basename = str_replace('__CLIENTID__', '', $basename);				}				$clientName = $this->getClientName();				$basename = str_replace('__CLIENTNAME__', $clientName, $basename);			}			else			{				$basename = str_replace('__CLIENTID__', '', $basename);				$basename = str_replace('__CLIENTNAME__', '', $basename);			}			$type = $this->getState('filter.type');			if ($type > 0)			{				$basename = str_replace('__TYPE__', $type, $basename);				$typeName = JText::_('COM_BANNERS_TYPE' . $type);				$basename = str_replace('__TYPENAME__', $typeName, $basename);			}			else			{				$basename = str_replace('__TYPE__', '', $basename);				$basename = str_replace('__TYPENAME__', '', $basename);			}			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$basename = str_replace('__BEGIN__', $begin, $basename);			}			else			{				$basename = str_replace('__BEGIN__', '', $basename);			}			$end = $this->getState('filter.end');			if (!empty($end))			{				$basename = str_replace('__END__', $end, $basename);			}			else			{				$basename = str_replace('__END__', '', $basename);			}			$this->basename = $basename;		}		return $this->basename;	}	/**	 * Get the category name.	 *	 * @return  string    The category name	 * @since   1.6	 */	protected function getCategoryName()	{		$categoryId = $this->getState('filter.category_id');		if ($categoryId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('title')				->from($db->quoteName('#__categories'))				->where($db->quoteName('id') . '=' . $db->quote($categoryId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCATEGORYNAME');		}		return $name;	}	/**	 * Get the category name	 *	 * @return  string    The category name.	 * @since   1.6	 */	protected function getClientName()	{		$clientId = $this->getState('filter.client_id');		if ($clientId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('name')				->from($db->quoteName('#__banner_clients'))				->where($db->quoteName('id') . '=' . $db->quote($clientId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCLIENTNAME');		}		return $name;	}	/**	 * Get the file type.	 *	 * @return  string    The file type	 * @since   1.6	 */	public function getFileType()	{		return $this->getState('compressed') ? 'zip' : 'csv';	}	/**	 * Get the mime type.	 *	 * @return  string    The mime type.	 * @since   1.6	 */	public function getMimeType()	{		return $this->getState('compressed') ? 'application/zip' : 'text/csv';	}	/**	 * Get the content	 *	 * @return  string    The content.	 * @since   1.6	 */	public function getContent()	{		if (!isset($this->content))		{			$this->content = '';			$this->content .=				'"' . str_replace('"', '""', JText::_('COM_BANNERS_HEADING_NAME')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_CLIENT')) . '","' .					str_replace('"', '""', JText::_('JCATEGORY')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_TYPE')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_COUNT')) . '","' .					str_replace('"', '""', JText::_('JDATE')) . '"' . "\n";			foreach ($this->getItems() as $item)			{				$this->content .=					'"' . str_replace('"', '""', $item->name) . '","' .						str_replace('"', '""', $item->client_name) . '","' .						str_replace('"', '""', $item->category_title) . '","' .						str_replace('"', '""', ($item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION') : JText::_('COM_BANNERS_CLICK'))) . '","' .						str_replace('"', '""', $item->count) . '","' .						str_replace('"', '""', $item->track_date) . '"' . "\n";			}			if ($this->getState('compressed'))			{				$app = JFactory::getApplication('administrator');				$files = array();				$files['track'] = array();				$files['track']['name'] = $this->getBasename() . '.csv';				$files['track']['data'] = $this->content;				$files['track']['time'] = time();				$ziproot = $app->getCfg('tmp_path') . '/' . uniqid('banners_tracks_') . '.zip';				// run the packager				jimport('joomla.filesystem.folder');				jimport('joomla.filesystem.file');				$delete = JFolder::files($app->getCfg('tmp_path') . '/', uniqid('banners_tracks_'), false, true);				if (!empty($delete))				{					if (!JFile::delete($delete))					{						// JFile::delete throws an error						$this->setError(JText::_('COM_BANNERS_ERR_ZIP_DELETE_FAILURE'));						return false;					}				}				if (!$packager = JArchive::getAdapter('zip'))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_ADAPTER_FAILURE'));					return false;				}				elseif (!$packager->create($ziproot, $files))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_CREATE_FAILURE'));					return false;				}				$this->content = file_get_contents($ziproot);			}		}		return $this->content;	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * Joomla! system checks. */@ini_set('magic_quotes_runtime', 0);/* * Installation check, and check on removal of the install directory. */if (!file_exists(JPATH_CONFIGURATION.'/configuration.php') || (filesize(JPATH_CONFIGURATION.'/configuration.php') < 10) || file_exists(JPATH_INSTALLATION.'/index.php')){	header('Location: ../installation/index.php');	exit();}//// Joomla system startup.//// System includes.require_once JPATH_LIBRARIES.'/import.legacy.php';JError::setErrorHandling(E_NOTICE, 'message');JError::setErrorHandling(E_WARNING, 'message');JError::setErrorHandling(E_ERROR, 'message', array('JError', 'customErrorPage'));// Botstrap the CMS libraries.require_once JPATH_LIBRARIES.'/cms.php';// Pre-Load configuration.ob_start();require_once JPATH_CONFIGURATION.'/configuration.php';ob_end_clean();// System configuration.$config = new JConfig;// Set the error_reportingswitch ($config->error_reporting){	case 'default':	case '-1':		break;	case 'none':	case '0':		error_reporting(0);		break;	case 'simple':		error_reporting(E_ERROR | E_WARNING | E_PARSE);		ini_set('display_errors', 1);		break;	case 'maximum':		error_reporting(E_ALL);		ini_set('display_errors', 1);		break;	case 'development':		error_reporting(-1);		ini_set('display_errors', 1);		break;	default:		error_reporting($config->error_reporting);		ini_set('display_errors', 1);		break;}define('JDEBUG', $config->debug);unset($config);/* * Joomla! framework loading. */// System profiler.if (JDEBUG){	$_PROFILER = JProfiler::getInstance('Application');}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for Bootstrap elements. * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlBootstrap{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Add javascript support for Bootstrap alerts	 *	 * @param   string  $selector  Common class for the alerts	 *	 * @return  void	 *	 * @since   3.0	 */	public static function alert($selector = 'alert')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include Bootstrap framework		self::framework();		// Attach the alerts to the document		JFactory::getDocument()->addScriptDeclaration(			"(function($){				$('.$selector').alert();				})(jQuery);"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Add javascript support for Bootstrap carousels	 *	 * @param   string  $selector  Common class for the carousels.	 * @param   array   $params    An array of options for the modal.	 *                             Options for the modal can be:	 *                             - interval  number  The amount of time to delay between automatically cycling an item.	 *                                                 If false, carousel will not automatically cycle.	 *                             - pause     string  Pauses the cycling of the carousel on mouseenter and resumes the cycling	 *                                                 of the carousel on mouseleave.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function carousel($selector = 'carousel', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['interval'] = (isset($params['interval']) && ($params['interval'])) ? (int) $params['interval'] : 5000;			$opt['pause'] = (isset($params['pause']) && ($params['pause'])) ? $params['pause'] : 'hover';			$options = JHtml::getJSObject($opt);			// Attach the carousel to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('.$selector').carousel($options);					})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;		}		return;	}	/**	 * Add javascript support for Bootstrap dropdowns	 *	 * @param   string  $selector  Common class for the dropdowns	 *	 * @return  void	 *	 * @since   3.0	 */	public static function dropdown($selector = 'dropdown-toggle')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include Bootstrap framework		self::framework();		// Attach the dropdown to the document		JFactory::getDocument()->addScriptDeclaration(			"(function($){				$('.$selector').dropdown();				})(jQuery);"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Method to load the Bootstrap JavaScript framework into the document head	 *	 * If debugging mode is on an uncompressed version of Bootstrap is included for easier debugging.	 *	 * @param   mixed  $debug  Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function framework($debug = null)	{		// Only load once		if (!empty(self::$loaded[__METHOD__]))		{			return;		}		// Load jQuery		JHtml::_('jquery.framework');		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug = (boolean) $config->get('debug');		}		JHtml::_('script', 'jui/bootstrap.min.js', false, true, false, false, $debug);		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Add javascript support for Bootstrap modals	 *	 * @param   string  $selector  The ID selector for the modal.	 * @param   array   $params    An array of options for the modal.	 *                             Options for the modal can be:	 *                             - backdrop  boolean  Includes a modal-backdrop element.	 *                             - keyboard  boolean  Closes the modal when escape key is pressed.	 *                             - show      boolean  Shows the modal when initialized.	 *                             - remote    string   An optional remote URL to load	 *	 * @return  void	 *	 * @since   3.0	 */	public static function modal($selector = 'modal', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['backdrop'] = (isset($params['backdrop']) && ($params['backdrop'])) ? (boolean) $params['backdrop'] : true;			$opt['keyboard'] = (isset($params['keyboard']) && ($params['keyboard'])) ? (boolean) $params['keyboard'] : true;			$opt['show'] = (isset($params['show']) && ($params['show'])) ? (boolean) $params['show'] : true;			$opt['remote'] = (isset($params['remote']) && ($params['remote'])) ? (boolean) $params['remote'] : '';			$options = JHtml::getJSObject($opt);			// Attach the modal to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('#$selector').modal($options);					})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;		}		return;	}	/**	 * Method to render a Bootstrap modal	 *	 * @param   string  $selector  The ID selector for the modal.	 * @param   array   $params    An array of options for the modal.	 * @param   string  $footer    Optional markup for the modal footer	 *	 * @return  string  HTML markup for a modal	 *	 * @since   3.0	 */	public static function renderModal($selector = 'modal', $params = array(), $footer = '')	{		// Ensure the behavior is loaded		self::modal($selector, $params);		$html = "<div class=\"modal hide fade\" id=\"" . $selector . "\">\n";		$html .= "<div class=\"modal-header\">\n";		$html .= "<button type=\"button\" class=\"close\" data-dismiss=\"modal\"></button>\n";		$html .= "<h3>" . $params['title'] . "</h3>\n";		$html .= "</div>\n";		$html .= "<div id=\"" . $selector . "-container\">\n";		$html .= "</div>\n";		$html .= "</div>\n";		$html .= "<script>";		$html .= "jQuery('#" . $selector . "').on('show', function () {\n";		$html .= "document.getElementById('" . $selector . "-container').innerHTML = '<div class=\"modal-body\"><iframe class=\"iframe\" src=\""			. $params['url'] . "\" height=\"" . $params['height'] . "\" width=\"" . $params['width'] . "\"></iframe></div>" . $footer . "';\n";		$html .= "});\n";		$html .= "</script>";		return $html;	}	/**	 * Add javascript support for Bootstrap popovers	 *	 * Use element's Title as popover content	 *	 * @param   string  $selector  Selector for the tooltip	 * @param   array   $params    An array of options for the tooltip.	 *                  Options for the tooltip can be:	 *                      animation  boolean          apply a css fade transition to the tooltip	 *                      html       boolean          Insert HTML into the tooltip. If false, jQuery's text method will be used to insert	 *                                                  content into the dom.	 *                      placement  string|function  how to position the tooltip - top | bottom | left | right	 *                      selector   string           If a selector is provided, tooltip objects will be delegated to the specified targets.	 *                      title      string|function  default title value if `title` tag isn't present	 *                      trigger    string           how tooltip is triggered - hover | focus | manual	 *                      content    string|function  default content value if `data-content` attribute isn't present	 *                      delay      number|object    delay showing and hiding the tooltip (ms) - does not apply to manual trigger type	 *                                                  If a number is supplied, delay is applied to both hide/show	 *                                                  Object structure is: delay: { show: 500, hide: 100 }	 *	 * @return  void	 *	 * @since   3.0	 */	public static function popover($selector = '.hasPopover', $params = array())	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include Bootstrap framework		self::framework();		$opt['animation'] = isset($params['animation']) ? $params['animation'] : null;		$opt['html'] = isset($params['html']) ? $params['html'] : null;		$opt['placement'] = isset($params['placement']) ? $params['placement'] : null;		$opt['selector'] = isset($params['selector']) ? $params['selector'] : null;		$opt['title'] = isset($params['title']) ? $params['title'] : null;		$opt['trigger'] = isset($params['trigger']) ? $params['trigger'] : 'hover';		$opt['content'] = isset($params['content']) ? $params['content'] : null;		$opt['delay'] = isset($params['delay']) ? $params['delay'] : null;		$options = JHtml::getJSObject($opt);		// Attach the popover to the document		JFactory::getDocument()->addScriptDeclaration(			"jQuery(document).ready(function()			{				jQuery('" . $selector . "').popover(" . $options . ");			});"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Add javascript support for Bootstrap ScrollSpy	 *	 * @param   string  $selector  The ID selector for the ScrollSpy element.	 * @param   array   $params    An array of options for the ScrollSpy.	 *                             Options for the modal can be:	 *                             - offset  number  Pixels to offset from top when calculating position of scroll.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function scrollspy($selector = 'navbar', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['offset'] = (isset($params['offset']) && ($params['offset'])) ? (int) $params['offset'] : 10;			$options = JHtml::getJSObject($opt);			// Attach ScrollSpy to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('#$selector').scrollspy($options);					})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;		}		return;	}	/**	 * Add javascript support for Bootstrap tooltips	 *	 * Add a title attribute to any element in the form	 * title="title::text"	 *	 * @param   string  $selector  The ID selector for the tooltip.	 * @param   array   $params    An array of options for the tooltip.	 *                             Options for the tooltip can be:	 *                             - animation  boolean          Apply a CSS fade transition to the tooltip	 *                             - html       boolean          Insert HTML into the tooltip. If false, jQuery's text method will be used to insert	 *                                                           content into the dom.	 *                             - placement  string|function  How to position the tooltip - top | bottom | left | right	 *                             - selector   string           If a selector is provided, tooltip objects will be delegated to the specified targets.	 *                             - title      string|function  Default title value if `title` tag isn't present	 *                             - trigger    string           How tooltip is triggered - hover | focus | manual	 *                             - delay      number           Delay showing and hiding the tooltip (ms) - does not apply to manual trigger type	 *                                                           If a number is supplied, delay is applied to both hide/show	 *                                                           Object structure is: delay: { show: 500, hide: 100 }	 *	 * @return  void	 *	 * @since   3.0	 */	public static function tooltip($selector = '.hasTooltip', $params = array())	{		if (!isset(self::$loaded[__METHOD__][$selector]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['animation'] = (isset($params['animation']) && ($params['animation'])) ? (boolean) $params['animation'] : null;			$opt['html'] = (isset($params['html']) && ($params['html'])) ? (boolean) $params['html'] : null;			$opt['placement'] = (isset($params['placement']) && ($params['placement'])) ? (string) $params['placement'] : null;			$opt['selector'] = (isset($params['selector']) && ($params['selector'])) ? (string) $params['selector'] : null;			$opt['title'] = (isset($params['title']) && ($params['title'])) ? (string) $params['title'] : null;			$opt['trigger'] = (isset($params['trigger']) && ($params['trigger'])) ? (string) $params['trigger'] : null;			$opt['delay'] = (isset($params['delay']) && ($params['delay'])) ? (int) $params['delay'] : null;			$options = JHtml::getJSObject($opt);			// Attach tooltips to document			JFactory::getDocument()->addScriptDeclaration(				"jQuery(document).ready(function()				{					jQuery('" . $selector . "').tooltip(" . $options . ");				});"			);			// Set static array			self::$loaded[__METHOD__][$selector] = true;		}		return;	}	/**	 * Add javascript support for Bootstrap accordians and insert the accordian	 *	 * @param   string  $selector  The ID selector for the tooltip.	 * @param   array   $params    An array of options for the tooltip.	 *                             Options for the tooltip can be:	 *                             - parent  selector  If selector then all collapsible elements under the specified parent will be closed when this	 *                                                 collapsible item is shown. (similar to traditional accordion behavior)	 *                             - toggle  boolean   Toggles the collapsible element on invocation	 *                             - active  string    Sets the active slide during load	 *	 * @return  string  HTML for the accordian	 *	 * @since   3.0	 */	public static function startAccordion($selector = 'myAccordian', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['parent'] = (isset($params['parent']) && ($params['parent'])) ? (boolean) $params['parent'] : false;			$opt['toggle'] = (isset($params['toggle']) && ($params['toggle'])) ? (boolean) $params['toggle'] : true;			$opt['active'] = (isset($params['active']) && ($params['active'])) ? (string) $params['active'] : '';			$options = JHtml::getJSObject($opt);			// Attach accordion to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('#$selector').collapse($options);				})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;			self::$loaded[__METHOD__]['active'] = $opt['active'];		}		return '<div id="' . $selector . '" class="accordion">';	}	/**	 * Close the current accordion	 *	 * @return  string  HTML to close the accordian	 *	 * @since   3.0	 */	public static function endAccordion()	{		return '</div>';	}	/**	 * Begins the display of a new accordion slide.	 *	 * @param   string  $selector  Identifier of the accordion group.	 * @param   string  $text      Text to display.	 * @param   string  $id        Identifier of the slide.	 * @param   string  $class     Class of the accordion group.	 *	 * @return  string  HTML to add the slide	 *	 * @since   3.0	 */	public static function addSlide($selector, $text, $id, $class = '')	{		$in = (self::$loaded['JHtmlBootstrap::startAccordion']['active'] == $id) ? ' in' : '';		$class = (!empty($class)) ? ' ' . $class : '';		$html = '<div class="accordion-group' . $class . '">'			. '<div class="accordion-heading">'			. '<strong><a href="#' . $id . '" data-parent="#' . $selector . '" data-toggle="collapse" class="accordion-toggle">'			. $text			. '</a></strong>'			. '</div>'			. '<div class="accordion-body collapse' . $in . '" id="' . $id . '">'			. '<div class="accordion-inner">';		return $html;	}	/**	 * Close the current slide	 *	 * @return  string  HTML to close the slide	 *	 * @since   3.0	 */	public static function endSlide()	{		return '</div></div></div>';	}	/**	 * Creates a tab pane	 *	 * @param   string  $selector  The pane identifier.	 * @param   array   $params    The parameters for the pane	 *	 * @return  string	 *	 * @since   3.1	 */	public static function startTabSet($selector = 'myTab', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['active'] = (isset($params['active']) && ($params['active'])) ? (string) $params['active'] : '';			$options = JHtml::getJSObject($opt);			// Attach tabs to document			JFactory::getDocument()				->addScriptDeclaration(JLayoutHelper::render('libraries.cms.html.bootstrap.starttabsetscript', array('selector' => $selector)));			// Set static array			self::$loaded[__METHOD__][$sig] = true;			self::$loaded[__METHOD__][$selector]['active'] = $opt['active'];		}		$html = JLayoutHelper::render('libraries.cms.html.bootstrap.starttabset', array('selector' => $selector));		return $html;	}	/**	 * Close the current tab pane	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.1	 */	public static function endTabSet()	{		$html = JLayoutHelper::render('libraries.cms.html.bootstrap.endtabset');		return $html;	}	/**	 * Begins the display of a new tab content panel.	 *	 * @param   string  $selector  Identifier of the panel.	 * @param   string  $id        The ID of the div element	 * @param   string  $title     The title text for the new UL tab	 *	 * @return  string  HTML to start a new panel	 *	 * @since   3.1	 */	public static function addTab($selector, $id, $title)	{		static $tabScriptLayout = null;		static $tabLayout = null;		$tabScriptLayout = is_null($tabScriptLayout) ? new JLayoutFile('libraries.cms.html.bootstrap.addtabscript') : $tabScriptLayout;		$tabLayout = is_null($tabLayout) ? new JLayoutFile('libraries.cms.html.bootstrap.addtab') : $tabLayout;		$active = (self::$loaded['JHtmlBootstrap::startTabSet'][$selector]['active'] == $id) ? ' active' : '';		// Inject tab into UL		JFactory::getDocument()		->addScriptDeclaration($tabScriptLayout->render(array('selector' => $selector,'id' => $id, 'active' => $active, 'title' => $title)));		$html = $tabLayout->render(array('id' => $id, 'active' => $active));		return $html;	}	/**	 * Close the current tab content panel	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.1	 */	public static function endTab()	{		$html = JLayoutHelper::render('libraries.cms.html.bootstrap.endtab');		return $html;	}	/**	 * Creates a tab pane	 *	 * @param   string  $selector  The pane identifier.	 * @param   array   $params    The parameters for the pane	 *	 * @return  string	 *	 * @since   3.0	 * @deprecated  4.0	Use JHtml::_('bootstrap.startTabSet') instead.	 */	public static function startPane($selector = 'myTab', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded['JHtmlBootstrap::startTabSet'][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['active'] = (isset($params['active']) && ($params['active'])) ? (string) $params['active'] : '';			$options = JHtml::getJSObject($opt);			// Attach tooltips to document			JFactory::getDocument()				->addScriptDeclaration(					"(function($){			$('#$selector a').click(function (e)			{			e.preventDefault();			$(this).tab('show');		});		})(jQuery);");			// Set static array			self::$loaded['JHtmlBootstrap::startTabSet'][$sig] = true;			self::$loaded['JHtmlBootstrap::startTabSet'][$selector]['active'] = $opt['active'];		}		return '<div class="tab-content" id="' . $selector . 'Content">';	}	/**	 * Close the current tab pane	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.0	 * @deprecated  4.0	Use JHtml::_('bootstrap.endTabSet') instead.	 */	public static function endPane()	{		return '</div>';	}	/**	 * Begins the display of a new tab content panel.	 *	 * @param   string  $selector  Identifier of the panel.	 * @param   string  $id        The ID of the div element	 *	 * @return  string  HTML to start a new panel	 *	 * @since   3.0	 * @deprecated  4.0 Use JHtml::_('bootstrap.addTab') instead.	 */	public static function addPanel($selector, $id)	{		$active = (self::$loaded['JHtmlBootstrap::startTabSet'][$selector]['active'] == $id) ? ' active' : '';		return '<div id="' . $id . '" class="tab-pane' . $active . '">';	}	/**	 * Close the current tab content panel	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.0	 * @deprecated  4.0 Use JHtml::_('bootstrap.endTab') instead.	 */	public static function endPanel()	{		return '</div>';	}	/**	 * Loads CSS files needed by Bootstrap	 *	 * @param   boolean  $includeMainCss  If true, main bootstrap.css files are loaded	 * @param   string   $direction       rtl or ltr direction. If empty, ltr is assumed	 * @param   array    $attribs         Optional array of attributes to be passed to JHtml::_('stylesheet')	 *	 * @return  void	 *	 * @since   3.0	 */	public static function loadCss($includeMainCss = true, $direction = 'ltr', $attribs = array())	{		// Load Bootstrap main CSS		if ($includeMainCss)		{			JHtml::_('stylesheet', 'jui/bootstrap.min.css', $attribs, true);			JHtml::_('stylesheet', 'jui/bootstrap-responsive.min.css', $attribs, true);			JHtml::_('stylesheet', 'jui/bootstrap-extended.css', $attribs, true);		}		// Load Bootstrap RTL CSS		if ($direction === 'rtl')		{			JHtml::_('stylesheet', 'jui/bootstrap-rtl.css', $attribs, true);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP client class for connecting to a MediaWiki instance. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiHttp extends JHttp{	/**     * Constructor.     *     * @param   JRegistry       $options    Client options object.     * @param   JHttpTransport  $transport  The HTTP transport object.     *     * @since   12.3     */	public function __construct(JRegistry $options = null, JHttpTransport $transport = null)	{		// Override the JHttp contructor to use JHttpTransportStream.		$this->options = isset($options) ? $options : new JRegistry;		$this->transport = isset($transport) ? $transport : new JHttpTransportStream($this->options);		// Make sure the user agent string is defined.		$this->options->def('api.useragent', 'JMediawiki/1.0');		// Set the default timeout to 120 seconds.		$this->options->def('api.timeout', 120);	}	/**	 * Method to send the GET command to the server.	 *	 * @param   string  $url      Path to the resource.	 * @param   array   $headers  An array of name-value pairs to include in the header of the request.	 *	 * @return  JHttpResponse	 *	 * @since   12.3	 */	public function get($url, array $headers = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		return $this->transport->request('GET', new JUri($url), null, $headers, $this->options->get('api.timeout'), $this->options->get('api.useragent'));	}	/**	 * Method to send the POST command to the server.	 *	 * @param   string  $url      Path to the resource.	 * @param   mixed   $data     Either an associative array or a string to be sent with the request.	 * @param   array   $headers  An array of name-value pairs to include in the header of the request.	 *	 * @return  JHttpResponse	 *	 * @since   12.3	 */	public function post($url, $data, array $headers = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		return $this->transport->request('POST', new JUri($url), $data, $headers, $this->options->get('api.timeout'), $this->options->get('api.useragent'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Database Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5 */class InstallerControllerDatabase extends JControllerLegacy{	/**	 * Tries to fix missing database updates	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		$model = $this->getModel('database');		$model->fix();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=database', false));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class JFormFieldMenuParent extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.6	 */	protected $type = 'MenuParent';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level')			->from('#__menu AS a')			->join('LEFT', $db->quoteName('#__menu') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		if ($menuType = $this->form->getValue('menutype'))		{			$query->where('a.menutype = ' . $db->quote($menuType));		}		else		{			$query->where('a.menutype != ' . $db->quote(''));		}		// Prevent parenting to children of this item.		if ($id = $this->form->getValue('id'))		{			$query->join('LEFT', $db->quoteName('#__menu') . ' AS p ON p.id = ' . (int) $id)				->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');		}		$query->where('a.published != -2')			->group('a.id, a.title, a.level, a.lft, a.rgt, a.menutype, a.parent_id, a.published')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  CMS * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Route Helper * * A class providing basic routing for urls that are for content types found in * the #__content_types table and rows found in the #__ucm_content table. * * @package     Joomla.Libraries * @subpackage  CMS * @since       3.1 */class JHelperRoute{	/**	 * @var    array  Holds the reverse lookup	 * @since  3.1	 */	protected static $lookup;	/**	 * @var    string  Option for the extension (such as com_content)	 * @since  3.1	 */	protected  $extension;	/**	 * @var    string  Value of the primary key in the content type table	 * @since  3.1	 */	protected  $id;	/**	 * @var    string  Name of the view for the url	 * @since  3.1	 */	protected  $view;	/**	 * A method to get the route for a specific item	 *	 * @param   integer  $id         Value of the primary key for the item in its content table	 * @param   string   $typealias  The type_alias for the item being routed. Of the form extension.view.	 * @param   string   $link       The link to be routed	 * @param   string   $language   The language of the content for multilingual sites	 * @param   integer  $catid      Optional category id	 *	 * @return  string  The route of the item	 *	 * @since   3.1	 */	public function getRoute($id, $typealias, $link = '', $language = null, $catid = null)	{		$typeExploded = explode('.', $typealias);		$this->view = $typeExploded[1];		$this->extension = $typeExploded[0];		$name = ucfirst(substr_replace($this->extension, '', 0, 4));		if (isset($this->view))		{			$needles = array(				$this->view  => array((int) $id)			);		}		if (empty($link))		{			// Create the link			$link = 'index.php?option=' . $this->extension . '&view=' . $this->view . '&id=' . $id;		}		if ($catid > 1)		{			$categories = JCategories::getInstance($name);			if ($categories)			{				$category = $categories->get((int) $catid);				if ($category)				{					$needles['category'] = array_reverse($category->getPath());					$needles['categories'] = $needles['category'];					$link .= '&catid=' . $catid;				}			}		}		// Deal with languages only if needed		if (!empty($language) && $language != '*' && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang=' . $lang->sef;					$needles['language'] = $language;				}			}		}			if ($item = self::findItem($needles))			{				$link .= '&Itemid=' . $item;			}			elseif ($item = self::findItem())			{				$link .= '&Itemid=' . $item;			}		return $link;	}	/**	 * Method to find the item in the menu structure	 *	 * @param   array  $needles  Array of lookup values	 *	 * @return  mixed	 *	 * @since   3.1	 */	protected function findItem($needles = array())	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component = JComponentHelper::getComponent($this->extension);			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items = $menus->getItems($attributes, $values);			foreach ($items as $item)			{				if (isset($item->query) && isset($item->query['view']))				{					$view = $item->query['view'];					if (!isset(self::$lookup[$language][$view]))					{						self::$lookup[$language][$view] = array();					}					if (isset($item->query['id']))					{						if (is_array($item->query['id']))						{							$item->query['id'] = $item->query['id'][0];						}						/*						 * Here it will become a bit tricky						 * $language != * can override existing entries						 * $language == * cannot override existing entries						 */						if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')						{							self::$lookup[$language][$view][$item->query['id']] = $item->id;						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && $active->component == $this->extension && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// If not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Note class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/note/ * @since       13.1 */class JFacebookNote extends JFacebookObject{	/**	 * Method to get a note. Requires authentication and user_notes or friends_notes permission for non-public notes.	 *	 * @param   string  $note  The note id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getNote($note)	{		return $this->get($note);	}	/**	 * Method to get a note's comments. Requires authentication and user_notes or friends_notes permission for non-public notes.	 *	 * @param   string   $note    The note id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($note, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($note, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a note. Requires authentication and publish_stream and user_notes or friends_notes permissions.	 *	 * @param   string  $note     The note id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($note, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($note, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream and user_notes or friends_notes permissions.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get note's likes. Requires authentication and user_notes or friends_notes for non-public notes.	 *	 * @param   string   $note    The note id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($note, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($note, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a note. Requires authentication and publish_stream and user_notes or friends_notes permissions.	 *	 * @param   string  $note  The note id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($note)	{		return $this->createConnection($note, 'likes');	}	/**	 * Method to unlike a note. Requires authentication and publish_stream and user_notes or friends_notes permissions.	 *	 * @param   string  $note  The note id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($note)	{		return $this->deleteConnection($note, 'likes');	}}
<?php/** * @package     Joomla.Legacy * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla View * * Class holding methods for displaying presentation data. * * @package     Joomla.Legacy * @subpackage  View * @since       12.2 */class JViewLegacy extends JObject{	/**	 * The name of the view	 *	 * @var    array	 */	protected $_name = null;	/**	 * Registered models	 *	 * @var    array	 */	protected $_models = array();	/**	 * The base path of the view	 *	 * @var    string	 */	protected $_basePath = null;	/**	 * The default model	 *	 * @var	string	 */	protected $_defaultModel = null;	/**	 * Layout name	 *	 * @var    string	 */	protected $_layout = 'default';	/**	 * Layout extension	 *	 * @var    string	 */	protected $_layoutExt = 'php';	/**	 * Layout template	 *	 * @var    string	 */	protected $_layoutTemplate = '_';	/**	 * The set of search directories for resources (templates)	 *	 * @var array	 */	protected $_path = array('template' => array(), 'helper' => array());	/**	 * The name of the default template source file.	 *	 * @var string	 */	protected $_template = null;	/**	 * The output of the template script.	 *	 * @var string	 */	protected $_output = null;	/**	 * Callback for escaping.	 *	 * @var string	 * @deprecated 13.3	 */	protected $_escape = 'htmlspecialchars';	/**	 * Charset to use in escaping mechanisms; defaults to urf8 (UTF-8)	 *	 * @var string	 */	protected $_charset = 'UTF-8';	/**	 * Constructor	 *	 * @param   array  $config  A named configuration array for object construction.<br/>	 *                          name: the name (optional) of the view (defaults to the view class name suffix).<br/>	 *                          charset: the character set to use for display<br/>	 *                          escape: the name (optional) of the function to use for escaping strings<br/>	 *                          base_path: the parent path (optional) of the views directory (defaults to the component folder)<br/>	 *                          template_plath: the path (optional) of the layout directory (defaults to base_path + /views/ + view name<br/>	 *                          helper_path: the path (optional) of the helper files (defaults to base_path + /helpers/)<br/>	 *                          layout: the layout (optional) to use to display the view<br/>	 *	 * @since   12.2	 */	public function __construct($config = array())	{		// Set the view name		if (empty($this->_name))		{			if (array_key_exists('name', $config))			{				$this->_name = $config['name'];			}			else			{				$this->_name = $this->getName();			}		}		// Set the charset (used by the variable escaping functions)		if (array_key_exists('charset', $config))		{			JLog::add('Setting a custom charset for escaping is deprecated. Override JViewLegacy::escape() instead.', JLog::WARNING, 'deprecated');			$this->_charset = $config['charset'];		}		// User-defined escaping callback		if (array_key_exists('escape', $config))		{			$this->setEscape($config['escape']);		}		// Set a base path for use by the view		if (array_key_exists('base_path', $config))		{			$this->_basePath = $config['base_path'];		}		else		{			$this->_basePath = JPATH_COMPONENT;		}		// Set the default template search path		if (array_key_exists('template_path', $config))		{			// User-defined dirs			$this->_setPath('template', $config['template_path']);		}		else		{			$this->_setPath('template', $this->_basePath . '/views/' . $this->getName() . '/tmpl');		}		// Set the default helper search path		if (array_key_exists('helper_path', $config))		{			// User-defined dirs			$this->_setPath('helper', $config['helper_path']);		}		else		{			$this->_setPath('helper', $this->_basePath . '/helpers');		}		// Set the layout		if (array_key_exists('layout', $config))		{			$this->setLayout($config['layout']);		}		else		{			$this->setLayout('default');		}		$this->baseurl = JURI::base(true);	}	/**	 * Execute and display a template script.	 *	 * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.	 *	 * @return  mixed  A string if successful, otherwise a Error object.	 *	 * @see     fetch()	 * @since   12.2	 */	public function display($tpl = null)	{		$result = $this->loadTemplate($tpl);		if ($result instanceof Exception)		{			return $result;		}		echo $result;	}	/**	 * Assigns variables to the view script via differing strategies.	 *	 * This method is overloaded; you can assign all the properties of	 * an object, an associative array, or a single value by name.	 *	 * You are not allowed to set variables that begin with an underscore;	 * these are either private properties for JView or private variables	 * within the template script itself.	 *	 * <code>	 * $view = new JView;	 *	 * // Assign directly	 * $view->var1 = 'something';	 * $view->var2 = 'else';	 *	 * // Assign by name and value	 * $view->assign('var1', 'something');	 * $view->assign('var2', 'else');	 *	 * // Assign by assoc-array	 * $ary = array('var1' => 'something', 'var2' => 'else');	 * $view->assign($obj);	 *	 * // Assign by object	 * $obj = new stdClass;	 * $obj->var1 = 'something';	 * $obj->var2 = 'else';	 * $view->assign($obj);	 *	 * </code>	 *	 * @return  boolean  True on success, false on failure.	 *	 * @deprecated  13.3 Use native PHP syntax.	 */	public function assign()	{		JLog::add(__METHOD__ . ' is deprecated. Use native PHP syntax.', JLog::WARNING, 'deprecated');		// Get the arguments; there may be 1 or 2.		$arg0 = @func_get_arg(0);		$arg1 = @func_get_arg(1);		// Assign by object		if (is_object($arg0))		{			// Assign public properties			foreach (get_object_vars($arg0) as $key => $val)			{				if (substr($key, 0, 1) != '_')				{					$this->$key = $val;				}			}			return true;		}		// Assign by associative array		if (is_array($arg0))		{			foreach ($arg0 as $key => $val)			{				if (substr($key, 0, 1) != '_')				{					$this->$key = $val;				}			}			return true;		}		// Assign by string name and mixed value.		// We use array_key_exists() instead of isset() because isset()		// fails if the value is set to null.		if (is_string($arg0) && substr($arg0, 0, 1) != '_' && func_num_args() > 1)		{			$this->$arg0 = $arg1;			return true;		}		// $arg0 was not object, array, or string.		return false;	}	/**	 * Assign variable for the view (by reference).	 *	 * You are not allowed to set variables that begin with an underscore;	 * these are either private properties for JView or private variables	 * within the template script itself.	 *	 * <code>	 * $view = new JView;	 *	 * // Assign by name and value	 * $view->assignRef('var1', $ref);	 *	 * // Assign directly	 * $view->ref = &$var1;	 * </code>	 *	 * @param   string  $key   The name for the reference in the view.	 * @param   mixed   &$val  The referenced variable.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   12.2	 * @deprecated  13.3  Use native PHP syntax.	 */	public function assignRef($key, &$val)	{		JLog::add(__METHOD__ . ' is deprecated. Use native PHP syntax.', JLog::WARNING, 'deprecated');		if (is_string($key) && substr($key, 0, 1) != '_')		{			$this->$key = &$val;			return true;		}		return false;	}	/**	 * Escapes a value for output in a view script.	 *	 * If escaping mechanism is either htmlspecialchars or htmlentities, uses	 * {@link $_encoding} setting.	 *	 * @param   mixed  $var  The output to escape.	 *	 * @return  mixed  The escaped value.	 *	 * @since   12.2	 */	public function escape($var)	{		if (in_array($this->_escape, array('htmlspecialchars', 'htmlentities')))		{			return call_user_func($this->_escape, $var, ENT_COMPAT, $this->_charset);		}		return call_user_func($this->_escape, $var);	}	/**	 * Method to get data from a registered model or a property of the view	 *	 * @param   string  $property  The name of the method to call on the model or the property to get	 * @param   string  $default   The name of the model to reference or the default value [optional]	 *	 * @return  mixed  The return value of the method	 *	 * @since   12.2	 */	public function get($property, $default = null)	{		// If $model is null we use the default model		if (is_null($default))		{			$model = $this->_defaultModel;		}		else		{			$model = strtolower($default);		}		// First check to make sure the model requested exists		if (isset($this->_models[$model]))		{			// Model exists, let's build the method name			$method = 'get' . ucfirst($property);			// Does the method exist?			if (method_exists($this->_models[$model], $method))			{				// The method exists, let's call it and return what we get				$result = $this->_models[$model]->$method();				return $result;			}		}		// Degrade to JObject::get		$result = parent::get($property, $default);		return $result;	}	/**	 * Method to get the model object	 *	 * @param   string  $name  The name of the model (optional)	 *	 * @return  mixed  JModelLegacy object	 *	 * @since   12.2	 */	public function getModel($name = null)	{		if ($name === null)		{			$name = $this->_defaultModel;		}		return $this->_models[strtolower($name)];	}	/**	 * Get the layout.	 *	 * @return  string  The layout name	 */	public function getLayout()	{		return $this->_layout;	}	/**	 * Get the layout template.	 *	 * @return  string  The layout template name	 */	public function getLayoutTemplate()	{		return $this->_layoutTemplate;	}	/**	 * Method to get the view name	 *	 * The model name by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the model	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->_name))		{			$classname = get_class($this);			$viewpos = strpos($classname, 'View');			if ($viewpos === false)			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_VIEW_GET_NAME'), 500);			}			$this->_name = strtolower(substr($classname, $viewpos + 4));		}		return $this->_name;	}	/**	 * Method to add a model to the view.  We support a multiple model single	 * view system by which models are referenced by classname.  A caveat to the	 * classname referencing is that any classname prepended by JModel will be	 * referenced by the name without JModel, eg. JModelCategory is just	 * Category.	 *	 * @param   JModelLegacy  $model    The model to add to the view.	 * @param   boolean       $default  Is this the default model?	 *	 * @return  object   The added model.	 *	 * @since   12.2	 */	public function setModel($model, $default = false)	{		$name = strtolower($model->getName());		$this->_models[$name] = $model;		if ($default)		{			$this->_defaultModel = $name;		}		return $model;	}	/**	 * Sets the layout name to use	 *	 * @param   string  $layout  The layout name or a string in format <template>:<layout file>	 *	 * @return  string  Previous value.	 *	 * @since   12.2	 */	public function setLayout($layout)	{		$previous = $this->_layout;		if (strpos($layout, ':') === false)		{			$this->_layout = $layout;		}		else		{			// Convert parameter to array based on :			$temp = explode(':', $layout);			$this->_layout = $temp[1];			// Set layout template			$this->_layoutTemplate = $temp[0];		}		return $previous;	}	/**	 * Allows a different extension for the layout files to be used	 *	 * @param   string  $value  The extension.	 *	 * @return  string   Previous value	 *	 * @since   12.2	 */	public function setLayoutExt($value)	{		$previous = $this->_layoutExt;		if ($value = preg_replace('#[^A-Za-z0-9]#', '', trim($value)))		{			$this->_layoutExt = $value;		}		return $previous;	}	/**	 * Sets the _escape() callback.	 *	 * @param   mixed  $spec  The callback for _escape() to use.	 *	 * @return  void	 *	 * @since   12.2	 * @deprecated  13.3  Override JViewLegacy::escape() instead.	 */	public function setEscape($spec)	{		JLog::add(__METHOD__ . ' is deprecated. Override JViewLegacy::escape() instead.', JLog::WARNING, 'deprecated');		$this->_escape = $spec;	}	/**	 * Adds to the stack of view script paths in LIFO order.	 *	 * @param   mixed  $path  A directory path or an array of paths.	 *	 * @return  void	 *	 * @since   12.2	 */	public function addTemplatePath($path)	{		$this->_addPath('template', $path);	}	/**	 * Adds to the stack of helper script paths in LIFO order.	 *	 * @param   mixed  $path  A directory path or an array of paths.	 *	 * @return  void	 *	 * @since   12.2	 */	public function addHelperPath($path)	{		$this->_addPath('helper', $path);	}	/**	 * Load a template file -- first look in the templates folder for an override	 *	 * @param   string  $tpl  The name of the template source file; automatically searches the template paths and compiles as needed.	 *	 * @return  string  The output of the the template script.	 *	 * @since   12.2	 * @throws  Exception	 */	public function loadTemplate($tpl = null)	{		// Clear prior output		$this->_output = null;		$template = JFactory::getApplication()->getTemplate();		$layout = $this->getLayout();		$layoutTemplate = $this->getLayoutTemplate();		// Create the template file name based on the layout		$file = isset($tpl) ? $layout . '_' . $tpl : $layout;		// Clean the file name		$file = preg_replace('/[^A-Z0-9_\.-]/i', '', $file);		$tpl = isset($tpl) ? preg_replace('/[^A-Z0-9_\.-]/i', '', $tpl) : $tpl;		// Load the language file for the template		$lang = JFactory::getLanguage();		$lang->load('tpl_' . $template, JPATH_BASE, null, false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", null, false, false)			|| $lang->load('tpl_' . $template, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", $lang->getDefault(), false, false);		// Change the template folder if alternative layout is in different template		if (isset($layoutTemplate) && $layoutTemplate != '_' && $layoutTemplate != $template)		{			$this->_path['template'] = str_replace($template, $layoutTemplate, $this->_path['template']);		}		// Load the template script		jimport('joomla.filesystem.path');		$filetofind = $this->_createFileName('template', array('name' => $file));		$this->_template = JPath::find($this->_path['template'], $filetofind);		// If alternate layout can't be found, fall back to default layout		if ($this->_template == false)		{			$filetofind = $this->_createFileName('', array('name' => 'default' . (isset($tpl) ? '_' . $tpl : $tpl)));			$this->_template = JPath::find($this->_path['template'], $filetofind);		}		if ($this->_template != false)		{			// Unset so as not to introduce into template scope			unset($tpl);			unset($file);			// Never allow a 'this' property			if (isset($this->this))			{				unset($this->this);			}			// Start capturing output into a buffer			ob_start();			// Include the requested template filename in the local scope			// (this will execute the view logic).			include $this->_template;			// Done with the requested template; get the buffer and			// clear it.			$this->_output = ob_get_contents();			ob_end_clean();			return $this->_output;		}		else		{			throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_LAYOUTFILE_NOT_FOUND', $file), 500);		}	}	/**	 * Load a helper file	 *	 * @param   string  $hlp  The name of the helper source file automatically searches the helper paths and compiles as needed.	 *	 * @return  void	 *	 * @since   12.2	 */	public function loadHelper($hlp = null)	{		// Clean the file name		$file = preg_replace('/[^A-Z0-9_\.-]/i', '', $hlp);		// Load the template script		jimport('joomla.filesystem.path');		$helper = JPath::find($this->_path['helper'], $this->_createFileName('helper', array('name' => $file)));		if ($helper != false)		{			// Include the requested template filename in the local scope			include_once $helper;		}	}	/**	 * Sets an entire array of search paths for templates or resources.	 *	 * @param   string  $type  The type of path to set, typically 'template'.	 * @param   mixed   $path  The new search path, or an array of search paths.  If null or false, resets to the current directory only.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function _setPath($type, $path)	{		$component = JApplicationHelper::getComponentName();		$app = JFactory::getApplication();		// Clear out the prior search dirs		$this->_path[$type] = array();		// Actually add the user-specified directories		$this->_addPath($type, $path);		// Always add the fallback directories as last resort		switch (strtolower($type))		{			case 'template':				// Set the alternative template search dir				if (isset($app))				{					$component = preg_replace('/[^A-Z0-9_\.-]/i', '', $component);					$fallback = JPATH_THEMES . '/' . $app->getTemplate() . '/html/' . $component . '/' . $this->getName();					$this->_addPath('template', $fallback);				}				break;		}	}	/**	 * Adds to the search path for templates and resources.	 *	 * @param   string  $type  The type of path to add.	 * @param   mixed   $path  The directory or stream, or an array of either, to search.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function _addPath($type, $path)	{		// Just force to array		settype($path, 'array');		// Loop through the path directories		foreach ($path as $dir)		{			// No surrounding spaces allowed!			$dir = trim($dir);			// Add trailing separators as needed			if (substr($dir, -1) != DIRECTORY_SEPARATOR)			{				// Directory				$dir .= DIRECTORY_SEPARATOR;			}			// Add to the top of the search dirs			array_unshift($this->_path[$type], $dir);		}	}	/**	 * Create the filename for a resource	 *	 * @param   string  $type   The resource type to create the filename for	 * @param   array   $parts  An associative array of filename information	 *	 * @return  string  The filename	 *	 * @since   12.2	 */	protected function _createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'template':				$filename = strtolower($parts['name']) . '.' . $this->_layoutExt;				break;			default:				$filename = strtolower($parts['name']) . '.php';				break;		}		return $filename;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('behavior.modal', 'a.modal');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_banners&view=tracks'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_BANNERS_BEGIN_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-hide-lbl" for="filter_begin"><?php echo JText::_('COM_BANNERS_BEGIN_LABEL'); ?></label>			<?php echo JHtml::_('calendar', $this->state->get('filter.begin'), 'filter_begin', 'filter_begin', '%Y-%m-%d', array('size' => 10));?>			<label class="filter-hide-lbl" for="filter_end"><?php echo JText::_('COM_BANNERS_END_LABEL'); ?></label>			<?php echo JHtml::_('calendar', $this->state->get('filter.end'), 'filter_end', 'filter_end', '%Y-%m-%d', array('size' => 10));?>		</div>		<div class="filter-select">            <label class="selectlabel" for="filter_client_id">				<?php echo JText::_('COM_BANNERS_SELECT_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<option value=""><?php echo JText::_('COM_BANNERS_SELECT_CLIENT');?></option>				<?php echo JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<?php $category = $this->state->get('filter.category_id');?>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $category);?>			</select>			<label class="selectlabel" for="filter_type">				<?php echo JText::_('BANNERS_SELECT_TYPE'); ?>			</label>			<select name="filter_type" class="inputbox" id="filter_type">				<?php echo JHtml::_('select.options', array(JHtml::_('select.option', '0', JText::_('COM_BANNERS_SELECT_TYPE')), JHtml::_('select.option', 1, JText::_('COM_BANNERS_IMPRESSION')), JHtml::_('select.option', 2, JText::_('COM_BANNERS_CLICK'))), 'value', 'text', $this->state->get('filter.type'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_NAME', 'name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-20">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLIENT', 'client_name', $listDirn, $listOrder); ?>				</th>				<th class="width-20">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_TYPE', 'track_type', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_COUNT', 'count', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'JDATE', 'track_date', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo $item->name;?>				</td>				<td>					<?php echo $item->client_name;?>				</td>				<td>					<?php echo $item->category_title;?>				</td>				<td>					<?php echo $item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION'): JText::_('COM_BANNERS_CLICK');?>				</td>				<td>					<?php echo $item->count;?>				</td>				<td>					<?php echo JHtml::_('date', $item->track_date, JText::_('DATE_FORMAT_LC4').' H:i');?>				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_weblinks component * * @return  array  An array of URL arguments * * @return  array  The URL arguments to use to assemble the subsequent URL. */function WeblinksBuildRoute(&$query){	$segments = array();	// get a menu item based on Itemid or currently active	$app = JFactory::getApplication();	$menu = $app->getMenu();	$params = JComponentHelper::getParams('com_weblinks');	$advanced = $params->get('sef_advanced_link', 0);	// we need a menu item.  Either the one specified in the query, or the current active one if none specified	if (empty($query['Itemid']))	{		$menuItem = $menu->getActive();	}	else	{		$menuItem = $menu->getItem($query['Itemid']);	}	$mView = (empty($menuItem->query['view'])) ? null : $menuItem->query['view'];	$mId = (empty($menuItem->query['id'])) ? null : $menuItem->query['id'];	if (isset($query['view']))	{		$view = $query['view'];		if (empty($query['Itemid']) || empty($menuItem) || $menuItem->component != 'com_weblinks')		{			$segments[] = $query['view'];		}		// We need to keep the view for forms since they never have their own menu item		if ($view != 'form')		{			unset($query['view']);		}	}	// are we dealing with an weblink that is attached to a menu item?	if (isset($query['view']) && ($mView == $query['view']) and (isset($query['id'])) and ($mId == (int) $query['id']))	{		unset($query['view']);		unset($query['catid']);		unset($query['id']);		return $segments;	}	if (isset($view) and ($view == 'category' or $view == 'weblink'))	{		if ($mId != (int) $query['id'] || $mView != $view)		{			if ($view == 'weblink' && isset($query['catid']))			{				$catid = $query['catid'];			}			elseif (isset($query['id']))			{				$catid = $query['id'];			}			$menuCatid = $mId;			$categories = JCategories::getInstance('Weblinks');			$category = $categories->get($catid);			if ($category)			{				//TODO Throw error that the category either not exists or is unpublished				$path = $category->getPath();				$path = array_reverse($path);				$array = array();				foreach ($path as $id)				{					if ((int) $id == (int) $menuCatid)					{						break;					}					if ($advanced)					{						list($tmp, $id) = explode(':', $id, 2);					}					$array[] = $id;				}				$segments = array_merge($segments, array_reverse($array));			}			if ($view == 'weblink')			{				if ($advanced)				{					list($tmp, $id) = explode(':', $query['id'], 2);				}				else				{					$id = $query['id'];				}				$segments[] = $id;			}		}		unset($query['id']);		unset($query['catid']);	}	if (isset($query['layout']))	{		if (!empty($query['Itemid']) && isset($menuItem->query['layout']))		{			if ($query['layout'] == $menuItem->query['layout'])			{				unset($query['layout']);			}		}		else		{			if ($query['layout'] == 'default')			{				unset($query['layout']);			}		}	}	return $segments;}/** * Parse the segments of a URL. * * @return  array  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. */function WeblinksParseRoute($segments){	$vars = array();	//Get the active menu item.	$app = JFactory::getApplication();	$menu = $app->getMenu();	$item = $menu->getActive();	$params = JComponentHelper::getParams('com_weblinks');	$advanced = $params->get('sef_advanced_link', 0);	// Count route segments	$count = count($segments);	// Standard routing for weblinks.	if (!isset($item))	{		$vars['view'] = $segments[0];		$vars['id'] = $segments[$count - 1];		return $vars;	}	// From the categories view, we can only jump to a category.	$id = (isset($item->query['id']) && $item->query['id'] > 1) ? $item->query['id'] : 'root';	$category = JCategories::getInstance('Weblinks')->get($id);	$categories = $category->getChildren();	$found = 0;	foreach ($segments as $segment)	{		foreach ($categories as $category)		{			if (($category->slug == $segment) || ($advanced && $category->alias == str_replace(':', '-', $segment)))			{				$vars['id'] = $category->id;				$vars['view'] = 'category';				$categories = $category->getChildren();				$found = 1;				break;			}		}		if ($found == 0)		{			if ($advanced)			{				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('id'))					->from('#__weblinks')					->where($db->quoteName('catid') . ' = ' . (int) $vars['catid'])					->where($db->quoteName('alias') . ' = ' . $db->quote($db->quote(str_replace(':', '-', $segment))));				$db->setQuery($query);				$id = $db->loadResult();			}			else			{				$id = $segment;			}			$vars['id'] = $id;			$vars['view'] = 'weblink';			break;		}		$found = 0;	}	return $vars;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with directory * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */abstract class JHtmlDirectory{	/**	 * Method to generate a (un)writable message for directory	 *	 * @param   boolean	$writable is the directory writable?	 *	 * @return  string	html code	 */	public static function writable($writable)	{		if ($writable)		{			return '<span class="badge badge-success">'. JText::_('COM_ADMIN_WRITABLE') .'</span>';		}		else		{			return '<span class="badge badge-important">'. JText::_('COM_ADMIN_UNWRITABLE') .'</span>';		}	}	/**	 * Method to generate a message for a directory	 *	 * @param   string	$dir the directory	 * @param   boolean	$message the message	 * @param   boolean	$visible is the $dir visible?	 *	 * @return  string	html code	 */	public static function message($dir, $message, $visible=true)	{		if ($visible)		{			$output = $dir;		}		else		{			$output = '';		}		if (empty($message))		{			return $output;		}		else		{			return $output.' <strong>'.JText::_($message).'</strong>';		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * An editarea field for content creation * * @package     Joomla.Libraries * @subpackage  Form * @see         JEditor * @since       1.6 */class JFormFieldEditor extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'Editor';	/**	 * The JEditor object.	 *	 * @var    JEditor	 * @since  1.6	 */	protected $editor;	/**	 * Method to get the field input markup for the editor area	 *	 * @return  string  The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		$rows        = (int) $this->element['rows'];		$cols        = (int) $this->element['cols'];		$height      = ((string) $this->element['height']) ? (string) $this->element['height'] : '250';		$width       = ((string) $this->element['width']) ? (string) $this->element['width'] : '100%';		$assetField  = $this->element['asset_field'] ? (string) $this->element['asset_field'] : 'asset_id';		$authorField = $this->element['created_by_field'] ? (string) $this->element['created_by_field'] : 'created_by';		$asset       = $this->form->getValue($assetField) ? $this->form->getValue($assetField) : (string) $this->element['asset_id'];		// Build the buttons array.		$buttons = (string) $this->element['buttons'];		if ($buttons == 'true' || $buttons == 'yes' || $buttons == '1')		{			$buttons = true;		}		elseif ($buttons == 'false' || $buttons == 'no' || $buttons == '0')		{			$buttons = false;		}		else		{			$buttons = explode(',', $buttons);		}		$hide = ((string) $this->element['hide']) ? explode(',', (string) $this->element['hide']) : array();		// Get an editor object.		$editor = $this->getEditor();		return $editor			->display(			$this->name, htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8'), $width, $height, $cols, $rows,			$buttons ? (is_array($buttons) ? array_merge($buttons, $hide) : $hide) : false, $this->id, $asset,			$this->form->getValue($authorField)		);	}	/**	 * Method to get a JEditor object based on the form field.	 *	 * @return  JEditor  The JEditor object.	 *	 * @since   1.6	 */	protected function getEditor()	{		// Only create the editor if it is not already created.		if (empty($this->editor))		{			$editor = null;			// Get the editor type attribute. Can be in the form of: editor="desired|alternative".			$type = trim((string) $this->element['editor']);			if ($type)			{				// Get the list of editor types.				$types = explode('|', $type);				// Get the database object.				$db = JFactory::getDbo();				// Iterate over teh types looking for an existing editor.				foreach ($types as $element)				{					// Build the query.					$query = $db->getQuery(true)						->select('element')						->from('#__extensions')						->where('element = ' . $db->quote($element))						->where('folder = ' . $db->quote('editors'))						->where('enabled = 1');					// Check of the editor exists.					$db->setQuery($query, 0, 1);					$editor = $db->loadResult();					// If an editor was found stop looking.					if ($editor)					{						break;					}				}			}			// Create the JEditor instance based on the given editor.			if (is_null($editor))			{				$conf = JFactory::getConfig();				$editor = $conf->get('editor');			}			$this->editor = JEditor::getInstance($editor);		}		return $this->editor;	}	/**	 * Method to get the JEditor output for an onSave event.	 *	 * @return  string  The JEditor object output.	 *	 * @since   1.6	 */	public function save()	{		return $this->getEditor()->save($this->id);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Category table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableCategory extends JTableNested{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__categories', 'id', $db);		$this->access = (int) JFactory::getConfig()->get('access');		$this->tagsHelper = new JHelperTags();	}	/**	 * Method to compute the default name of the asset.	 * The default name is in the form table_name.id	 * where id is the value of the primary key of the table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetName()	{		$k = $this->_tbl_key;		return $this->extension . '.category.' . (int) $this->$k;	}	/**	 * Method to return the title to use for the asset table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetTitle()	{		return $this->title;	}	/**	 * Get the parent asset id for the record	 *	 * @param   JTable   $table  A JTable object for the asset parent.	 * @param   integer  $id     The id for the asset	 *	 * @return  integer  The id of the asset's parent	 *	 * @since   11.1	 */	protected function _getAssetParentId($table = null, $id = null)	{		$assetId = null;		// This is a category under a category.		if ($this->parent_id > 1)		{			// Build the query to get the asset id for the parent category.			$query = $this->_db->getQuery(true)				->select($this->_db->quoteName('asset_id'))				->from($this->_db->quoteName('#__categories'))				->where($this->_db->quoteName('id') . ' = ' . $this->parent_id);			// Get the asset id from the database.			$this->_db->setQuery($query);			if ($result = $this->_db->loadResult())			{				$assetId = (int) $result;			}		}		// This is a category that needs to parent with the extension.		elseif ($assetId === null)		{			// Build the query to get the asset id for the parent category.			$query = $this->_db->getQuery(true)				->select($this->_db->quoteName('id'))				->from($this->_db->quoteName('#__assets'))				->where($this->_db->quoteName('name') . ' = ' . $this->_db->quote($this->extension));			// Get the asset id from the database.			$this->_db->setQuery($query);			if ($result = $this->_db->loadResult())			{				$assetId = (int) $result;			}		}		// Return the asset id.		if ($assetId)		{			return $assetId;		}		else		{			return parent::_getAssetParentId($table, $id);		}	}	/**	 * Override check function	 *	 * @return  boolean	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// Check for a title.		if (trim($this->title) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MUSTCONTAIN_A_TITLE_CATEGORY'));			return false;		}		$this->alias = trim($this->alias);		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		return true;	}	/**	 * Overloaded bind function.	 *	 * @param   array   $array   named array	 * @param   string  $ignore  An optional array or space separated list of properties	 *                           to ignore while binding.	 *	 * @return  mixed   Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		// Bind the rules.		if (isset($array['rules']) && is_array($array['rules']))		{			$rules = new JAccessRules($array['rules']);			$this->setRules($rules);		}		return parent::bind($array, $ignore);	}	/**	 * Override parent delete method to process tags	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null, $children = true)	{		$result = parent::delete($pk);		$this->tagsHelper->typeAlias = $this->extension . '.category';		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Overridden JTable::store to set created/modified and user id.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function store($updateNulls = false)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if ($this->id)		{			// Existing category			$this->modified_time = $date->toSql();			$this->modified_user_id = $user->get('id');		}		else		{			// New category			$this->created_time = $date->toSql();			$this->created_user_id = $user->get('id');		}		// Verify that the alias is unique		$table = JTable::getInstance('Category', 'JTable', array('dbo' => $this->getDbo()));		if ($table->load(array('alias' => $this->alias, 'parent_id' => $this->parent_id, 'extension' => $this->extension))			&& ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_CATEGORY_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->typeAlias = $this->extension . '.category';		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');jimport('joomla.filesystem.path');jimport('joomla.base.adapter');/** * Joomla base installer class * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstaller extends JAdapter{	/**	 * Array of paths needed by the installer	 *	 * @var    array	 * @since  12.1	 */	protected $paths = array();	/**	 * True if package is an upgrade	 *	 * @var    boolean	 * @since  12.1	 */	protected $upgrade = null;	/**	 * The manifest trigger class	 *	 * @var    object	 * @since  3.1	 */	public $manifestClass = null;	/**	 * True if existing files can be overwritten	 * @var    boolean	 * @since  12.1	 */	protected $overwrite = false;	/**	 * Stack of installation steps	 * - Used for installation rollback	 *	 * @var    array	 * @since  12.1	 */	protected $stepStack = array();	/**	 * Extension Table Entry	 *	 * @var    JTableExtension	 * @since  3.1	 */	public $extension = null;	/**	 * The output from the install/uninstall scripts	 *	 * @var    string	 * @since  3.1	 * */	public $message = null;	/**	 * The installation manifest XML object	 *	 * @var    object	 * @since  3.1	 */	public $manifest = null;	/**	 * The extension message that appears	 *	 * @var    string	 * @since  3.1	 */	protected $extension_message = null;	/**	 * The redirect URL if this extension (can be null if no redirect)	 *	 * @var    string	 * @since  3.1	 */	protected $redirect_url = null;	/**	 * @var    JInstaller  JInstaller instance container.	 * @since  3.1	 */	protected static $instance;	/**	 * Constructor	 *	 * @since   3.1	 */	public function __construct()	{		parent::__construct(__DIR__, 'JInstallerAdapter', __DIR__ . '/adapter');		// Override the default adapter folder		$this->_adapterfolder = 'adapter';	}	/**	 * Returns the global Installer object, only creating it	 * if it doesn't already exist.	 *	 * @return  JInstaller  An installer object	 *	 * @since   3.1	 */	public static function getInstance()	{		if (!isset(self::$instance))		{			self::$instance = new JInstaller;		}		return self::$instance;	}	/**	 * Get the allow overwrite switch	 *	 * @return  boolean  Allow overwrite switch	 *	 * @since   3.1	 */	public function isOverwrite()	{		return $this->overwrite;	}	/**	 * Set the allow overwrite switch	 *	 * @param   boolean  $state  Overwrite switch state	 *	 * @return  boolean  True it state is set, false if it is not	 *	 * @since   3.1	 */	public function setOverwrite($state = false)	{		$tmp = $this->overwrite;		if ($state)		{			$this->overwrite = true;		}		else		{			$this->overwrite = false;		}		return $tmp;	}	/**	 * Get the redirect location	 *	 * @return  string  Redirect location (or null)	 *	 * @since   3.1	 */	public function getRedirectURL()	{		return $this->redirect_url;	}	/**	 * Set the redirect location	 *	 * @param   string  $newurl  New redirect location	 *	 * @return  void	 *	 * @since   3.1	 */	public function setRedirectURL($newurl)	{		$this->redirect_url = $newurl;	}	/**	 * Get the upgrade switch	 *	 * @return  boolean	 *	 * @since   3.1	 */	public function isUpgrade()	{		return $this->upgrade;	}	/**	 * Set the upgrade switch	 *	 * @param   boolean  $state  Upgrade switch state	 *	 * @return  boolean  True if upgrade, false otherwise	 *	 * @since   3.1	 */	public function setUpgrade($state = false)	{		$tmp = $this->upgrade;		if ($state)		{			$this->upgrade = true;		}		else		{			$this->upgrade = false;		}		return $tmp;	}	/**	 * Get the installation manifest object	 *	 * @return  object  Manifest object	 *	 * @since   3.1	 */	public function getManifest()	{		if (!is_object($this->manifest))		{			$this->findManifest();		}		return $this->manifest;	}	/**	 * Get an installer path by name	 *	 * @param   string  $name     Path name	 * @param   string  $default  Default value	 *	 * @return  string  Path	 *	 * @since   3.1	 */	public function getPath($name, $default = null)	{		return (!empty($this->paths[$name])) ? $this->paths[$name] : $default;	}	/**	 * Sets an installer path by name	 *	 * @param   string  $name   Path name	 * @param   string  $value  Path	 *	 * @return  void	 *	 * @since   3.1	 */	public function setPath($name, $value)	{		$this->paths[$name] = $value;	}	/**	 * Pushes a step onto the installer stack for rolling back steps	 *	 * @param   array  $step  Installer step	 *	 * @return  void	 *	 * @since   3.1	 */	public function pushStep($step)	{		$this->stepStack[] = $step;	}	/**	 * Installation abort method	 *	 * @param   string  $msg   Abort message from the installer	 * @param   string  $type  Package type if defined	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 * @throws  RuntimeException	 */	public function abort($msg = null, $type = null)	{		$retval = true;		$step = array_pop($this->stepStack);		// Raise abort warning		if ($msg)		{			JLog::add($msg, JLog::WARNING, 'jerror');		}		while ($step != null)		{			switch ($step['type'])			{				case 'file':					// Remove the file					$stepval = JFile::delete($step['path']);					break;				case 'folder':					// Remove the folder					$stepval = JFolder::delete($step['path']);					break;				case 'query':					// Placeholder in case this is necessary in the future					// $stepval is always false because if this step was called it invariably failed					$stepval = false;					break;				case 'extension':					// Get database connector object					$db = $this->getDBO();					$query = $db->getQuery(true);					// Remove the entry from the #__extensions table					$query->delete($db->quoteName('#__extensions'))						->where($db->quoteName('extension_id') . ' = ' . (int) $step['id']);					$db->setQuery($query);					$stepval = $db->execute();					break;				default:					if ($type && is_object($this->_adapters[$type]))					{						// Build the name of the custom rollback method for the type						$method = '_rollback_' . $step['type'];						// Custom rollback method handler						if (method_exists($this->_adapters[$type], $method))						{							$stepval = $this->_adapters[$type]->$method($step);						}					}					else					{						// Set it to false						$stepval = false;					}					break;			}			// Only set the return value if it is false			if ($stepval === false)			{				$retval = false;			}			// Get the next step and continue			$step = array_pop($this->stepStack);		}		$conf = JFactory::getConfig();		$debug = $conf->get('debug');		if ($debug)		{			throw new RuntimeException('Installation unexpectedly terminated: ' . $msg, 500);		}		return $retval;	}	// Adapter functions	/**	 * Package installation method	 *	 * @param   string  $path  Path to package source folder	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	public function install($path = null)	{		if ($path && JFolder::exists($path))		{			$this->setPath('source', $path);		}		else		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_NOINSTALLPATH'));			return false;		}		if (!$this->setupInstall())		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_DETECTMANIFEST'));			return false;		}		$type = (string) $this->manifest->attributes()->type;		if (is_object($this->_adapters[$type]))		{			// Add the languages from the package itself			if (method_exists($this->_adapters[$type], 'loadLanguage'))			{				$this->_adapters[$type]->loadLanguage($path);			}			// Fire the onExtensionBeforeInstall event.			JPluginHelper::importPlugin('extension');			$dispatcher = JEventDispatcher::getInstance();			$dispatcher->trigger(				'onExtensionBeforeInstall',				array('method' => 'install', 'type' => $type, 'manifest' => $this->manifest, 'extension' => 0)			);			// Run the install			$result = $this->_adapters[$type]->install();			// Fire the onExtensionAfterInstall			$dispatcher->trigger(				'onExtensionAfterInstall',				array('installer' => clone $this, 'eid' => $result)			);			if ($result !== false)			{				return true;			}			else			{				return false;			}		}		return false;	}	/**	 * Discovered package installation method	 *	 * @param   integer  $eid  Extension ID	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	public function discover_install($eid = null)	{		if ($eid)		{			$this->extension = JTable::getInstance('extension');			if (!$this->extension->load($eid))			{				$this->abort(JText::_('JLIB_INSTALLER_ABORT_LOAD_DETAILS'));				return false;			}			if ($this->extension->state != -1)			{				$this->abort(JText::_('JLIB_INSTALLER_ABORT_ALREADYINSTALLED'));				return false;			}			// Lazy load the adapter			if (!isset($this->_adapters[$this->extension->type]) || !is_object($this->_adapters[$this->extension->type]))			{				if (!$this->setAdapter($this->extension->type))				{					return false;				}			}			if (is_object($this->_adapters[$this->extension->type]))			{				if (method_exists($this->_adapters[$this->extension->type], 'discover_install'))				{					// Add the languages from the package itself					if (method_exists($this->_adapters[$this->extension->type], 'loadLanguage'))					{						$this->_adapters[$this->extension->type]->loadLanguage();					}					// Fire the onExtensionBeforeInstall event.					JPluginHelper::importPlugin('extension');					$dispatcher = JEventDispatcher::getInstance();					$dispatcher->trigger(						'onExtensionBeforeInstall',						array(							'method' => 'discover_install',							'type' => $this->extension->get('type'),							'manifest' => null,							'extension' => $this->extension->get('extension_id')						)					);					// Run the install					$result = $this->_adapters[$this->extension->type]->discover_install();					// Fire the onExtensionAfterInstall					$dispatcher->trigger(						'onExtensionAfterInstall',						array('installer' => clone $this, 'eid' => $result)					);					if ($result !== false)					{						return true;					}					else					{						return false;					}				}				else				{					$this->abort(JText::_('JLIB_INSTALLER_ABORT_METHODNOTSUPPORTED'));					return false;				}			}			return false;		}		else		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_EXTENSIONNOTVALID'));			return false;		}	}	/**	 * Extension discover method	 * Asks each adapter to find extensions	 *	 * @return  array  JExtension	 *	 * @since   3.1	 */	public function discover()	{		$this->loadAllAdapters();		$results = array();		foreach ($this->_adapters as $adapter)		{			// Joomla! 1.5 installation adapter legacy support			if (method_exists($adapter, 'discover'))			{				$tmp = $adapter->discover();				// If its an array and has entries				if (is_array($tmp) && count($tmp))				{					// Merge it into the system					$results = array_merge($results, $tmp);				}			}		}		return $results;	}	/**	 * Package update method	 *	 * @param   string  $path  Path to package source folder	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	public function update($path = null)	{		if ($path && JFolder::exists($path))		{			$this->setPath('source', $path);		}		else		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_NOUPDATEPATH'));			return false;		}		if (!$this->setupInstall())		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_DETECTMANIFEST'));			return false;		}		$type = (string) $this->manifest->attributes()->type;		if (is_object($this->_adapters[$type]))		{			// Add the languages from the package itself			if (method_exists($this->_adapters[$type], 'loadLanguage'))			{				$this->_adapters[$type]->loadLanguage($path);			}			// Fire the onExtensionBeforeUpdate event.			JPluginHelper::importPlugin('extension');			$dispatcher = JEventDispatcher::getInstance();			$dispatcher->trigger('onExtensionBeforeUpdate', array('type' => $type, 'manifest' => $this->manifest));			// Run the update			$result = $this->_adapters[$type]->update();			// Fire the onExtensionAfterUpdate			$dispatcher->trigger(				'onExtensionAfterUpdate',				array('installer' => clone $this, 'eid' => $result)			);			if ($result !== false)			{				return true;			}			else			{				return false;			}		}		return false;	}	/**	 * Package uninstallation method	 *	 * @param   string   $type        Package type	 * @param   mixed    $identifier  Package identifier for adapter	 * @param   integer  $cid         Application ID; deprecated in 1.6	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	public function uninstall($type, $identifier, $cid = 0)	{		if (!isset($this->_adapters[$type]) || !is_object($this->_adapters[$type]))		{			if (!$this->setAdapter($type))			{				// We failed to get the right adapter				return false;			}		}		if (is_object($this->_adapters[$type]))		{			// We don't load languages here, we get the extension adapter to work it out			// Fire the onExtensionBeforeUninstall event.			JPluginHelper::importPlugin('extension');			$dispatcher = JEventDispatcher::getInstance();			$dispatcher->trigger('onExtensionBeforeUninstall', array('eid' => $identifier));			// Run the uninstall			$result = $this->_adapters[$type]->uninstall($identifier);			// Fire the onExtensionAfterInstall			$dispatcher->trigger(				'onExtensionAfterUninstall',				array('installer' => clone $this, 'eid' => $identifier, 'result' => $result)			);			return $result;		}		return false;	}	/**	 * Refreshes the manifest cache stored in #__extensions	 *	 * @param   integer  $eid  Extension ID	 *	 * @return  mixed  void on success, false on error @todo missing return value ?	 *	 * @since   3.1	 */	public function refreshManifestCache($eid)	{		if ($eid)		{			$this->extension = JTable::getInstance('extension');			if (!$this->extension->load($eid))			{				$this->abort(JText::_('JLIB_INSTALLER_ABORT_LOAD_DETAILS'));				return false;			}			if ($this->extension->state == -1)			{				$this->abort(JText::_('JLIB_INSTALLER_ABORT_REFRESH_MANIFEST_CACHE'));				return false;			}			// Lazy load the adapter			if (!isset($this->_adapters[$this->extension->type]) || !is_object($this->_adapters[$this->extension->type]))			{				if (!$this->setAdapter($this->extension->type))				{					return false;				}			}			if (is_object($this->_adapters[$this->extension->type]))			{				if (method_exists($this->_adapters[$this->extension->type], 'refreshManifestCache'))				{					$result = $this->_adapters[$this->extension->type]->refreshManifestCache();					if ($result !== false)					{						return true;					}					else					{						return false;					}				}				else				{					$this->abort(JText::sprintf('JLIB_INSTALLER_ABORT_METHODNOTSUPPORTED_TYPE', $this->extension->type));					return false;				}			}			return false;		}		else		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_REFRESH_MANIFEST_CACHE_VALID'));			return false;		}	}	// Utility functions	/**	 * Prepare for installation: this method sets the installation directory, finds	 * and checks the installation file and verifies the installation type.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function setupInstall()	{		// We need to find the installation manifest file		if (!$this->findManifest())		{			return false;		}		// Load the adapter(s) for the install manifest		$type = (string) $this->manifest->attributes()->type;		// Lazy load the adapter		if (!isset($this->_adapters[$type]) || !is_object($this->_adapters[$type]))		{			if (!$this->setAdapter($type))			{				return false;			}		}		return true;	}	/**	 * Backward compatible method to parse through a queries element of the	 * installation manifest file and take appropriate action.	 *	 * @param   SimpleXMLElement  $element  The XML node to process	 *	 * @return  mixed  Number of queries processed or False on error	 *	 * @since   3.1	 */	public function parseQueries(SimpleXMLElement $element)	{		// Get the database connector object		$db = & $this->_db;		if (!$element || !count($element->children()))		{			// Either the tag does not exist or has no children therefore we return zero files processed.			return 0;		}		// Get the array of query nodes to process		$queries = $element->children();		if (count($queries) == 0)		{			// No queries to process			return 0;		}		// Process each query in the $queries array (children of $tagName).		foreach ($queries as $query)		{			$db->setQuery($query->data());			if (!$db->execute())			{				JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');				return false;			}		}		return (int) count($queries);	}	/**	 * Method to extract the name of a discreet installation sql file from the installation manifest file.	 *	 * @param   object  $element  The XML node to process	 *	 * @return  mixed  Number of queries processed or False on error	 *	 * @since   3.1	 */	public function parseSQLFiles($element)	{		if (!$element || !count($element->children()))		{			// The tag does not exist.			return 0;		}		$queries = array();		$db = & $this->_db;		$dbDriver = strtolower($db->name);		if ($dbDriver == 'mysqli')		{			$dbDriver = 'mysql';		}		// Get the name of the sql file to process		foreach ($element->children() as $file)		{			$fCharset = (strtolower($file->attributes()->charset) == 'utf8') ? 'utf8' : '';			$fDriver = strtolower($file->attributes()->driver);			if ($fDriver == 'mysqli')			{				$fDriver = 'mysql';			}			if ($fCharset == 'utf8' && $fDriver == $dbDriver)			{				$sqlfile = $this->getPath('extension_root') . '/' . $file;				// Check that sql files exists before reading. Otherwise raise error for rollback				if (!file_exists($sqlfile))				{					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');					return false;				}				$buffer = file_get_contents($sqlfile);				// Graceful exit and rollback if read not successful				if ($buffer === false)				{					JLog::add(JText::_('JLIB_INSTALLER_ERROR_SQL_READBUFFER'), JLog::WARNING, 'jerror');					return false;				}				// Create an array of queries from the sql file				$queries = JDatabaseDriver::splitSql($buffer);				if (count($queries) == 0)				{					// No queries to process					return 0;				}				// Process each query in the $queries array (split out of sql file).				foreach ($queries as $query)				{					$query = trim($query);					if ($query != '' && $query{0} != '#')					{						$db->setQuery($query);						if (!$db->execute())						{							JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');							return false;						}					}				}			}		}		return (int) count($queries);	}	/**	 * Set the schema version for an extension by looking at its latest update	 *	 * @param   SimpleXMLElement  $schema  Schema Tag	 * @param   integer           $eid     Extension ID	 *	 * @return  void	 *	 * @since   3.1	 */	public function setSchemaVersion(SimpleXMLElement $schema, $eid)	{		if ($eid && $schema)		{			$db = JFactory::getDbo();			$schemapaths = $schema->children();			if (!$schemapaths)			{				return;			}			if (count($schemapaths))			{				$dbDriver = strtolower($db->name);				if ($dbDriver == 'mysqli')				{					$dbDriver = 'mysql';				}				$schemapath = '';				foreach ($schemapaths as $entry)				{					$attrs = $entry->attributes();					if ($attrs['type'] == $dbDriver)					{						$schemapath = $entry;						break;					}				}				if (strlen($schemapath))				{					$files = str_replace('.sql', '', JFolder::files($this->getPath('extension_root') . '/' . $schemapath, '\.sql$'));					usort($files, 'version_compare');					// Update the database					$query = $db->getQuery(true)						->delete('#__schemas')						->where('extension_id = ' . $eid);					$db->setQuery($query);					if ($db->execute())					{						$query->clear()							->insert($db->quoteName('#__schemas'))							->columns(array($db->quoteName('extension_id'), $db->quoteName('version_id')))							->values($eid . ', ' . $db->quote(end($files)));						$db->setQuery($query);						$db->execute();					}				}			}		}	}	/**	 * Method to process the updates for an item	 *	 * @param   SimpleXMLElement  $schema  The XML node to process	 * @param   integer           $eid     Extension Identifier	 *	 * @return  boolean           Result of the operations	 *	 * @since   3.1	 */	public function parseSchemaUpdates(SimpleXMLElement $schema, $eid)	{		$files = array();		$update_count = 0;		// Ensure we have an XML element and a valid extension id		if ($eid && $schema)		{			$db = JFactory::getDbo();			$schemapaths = $schema->children();			if (count($schemapaths))			{				$dbDriver = strtolower($db->name);				if ($dbDriver == 'mysqli')				{					$dbDriver = 'mysql';				}				$schemapath = '';				foreach ($schemapaths as $entry)				{					$attrs = $entry->attributes();					if ($attrs['type'] == $dbDriver)					{						$schemapath = $entry;						break;					}				}				if (strlen($schemapath))				{					$files = str_replace('.sql', '', JFolder::files($this->getPath('extension_root') . '/' . $schemapath, '\.sql$'));					usort($files, 'version_compare');					if (!count($files))					{						return false;					}					$query = $db->getQuery(true)						->select('version_id')						->from('#__schemas')						->where('extension_id = ' . $eid);					$db->setQuery($query);					$version = $db->loadResult();					if ($version)					{						// We have a version!						foreach ($files as $file)						{							if (version_compare($file, $version) > 0)							{								$buffer = file_get_contents($this->getPath('extension_root') . '/' . $schemapath . '/' . $file . '.sql');								// Graceful exit and rollback if read not successful								if ($buffer === false)								{									JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_SQL_READBUFFER'), JLog::WARNING, 'jerror');									return false;								}								// Create an array of queries from the sql file								$queries = JDatabaseDriver::splitSql($buffer);								if (count($queries) == 0)								{									// No queries to process									continue;								}								// Process each query in the $queries array (split out of sql file).								foreach ($queries as $query)								{									$query = trim($query);									if ($query != '' && $query{0} != '#')									{										$db->setQuery($query);										if (!$db->execute())										{											JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');											return false;										}										$update_count++;									}								}							}						}					}					// Update the database					$query = $db->getQuery(true)						->delete('#__schemas')						->where('extension_id = ' . $eid);					$db->setQuery($query);					if ($db->execute())					{						$query->clear()							->insert($db->quoteName('#__schemas'))							->columns(array($db->quoteName('extension_id'), $db->quoteName('version_id')))							->values($eid . ', ' . $db->quote(end($files)));						$db->setQuery($query);						$db->execute();					}				}			}		}		return $update_count;	}	/**	 * Method to parse through a files element of the installation manifest and take appropriate	 * action.	 *	 * @param   SimpleXMLElement  $element   The XML node to process	 * @param   integer           $cid       Application ID of application to install to	 * @param   array             $oldFiles  List of old files (SimpleXMLElement's)	 * @param   array             $oldMD5    List of old MD5 sums (indexed by filename with value as MD5)	 *	 * @return  boolean      True on success	 *	 * @since   3.1	 */	public function parseFiles(SimpleXMLElement $element, $cid = 0, $oldFiles = null, $oldMD5 = null)	{		// Get the array of file nodes to process; we checked whether this had children above.		if (!$element || !count($element->children()))		{			// Either the tag does not exist or has no children (hence no files to process) therefore we return zero files processed.			return 0;		}		$copyfiles = array();		// Get the client info		$client = JApplicationHelper::getClientInfo($cid);		/*		 * Here we set the folder we are going to remove the files from.		 */		if ($client)		{			$pathname = 'extension_' . $client->name;			$destination = $this->getPath($pathname);		}		else		{			$pathname = 'extension_root';			$destination = $this->getPath($pathname);		}		/*		 * Here we set the folder we are going to copy the files from.		 *		 * Does the element have a folder attribute?		 *		 * If so this indicates that the files are in a subdirectory of the source		 * folder and we should append the folder attribute to the source path when		 * copying files.		 */		$folder = (string) $element->attributes()->folder;		if ($folder && file_exists($this->getPath('source') . '/' . $folder))		{			$source = $this->getPath('source') . '/' . $folder;		}		else		{			$source = $this->getPath('source');		}		// Work out what files have been deleted		if ($oldFiles && ($oldFiles instanceof SimpleXMLElement))		{			$oldEntries = $oldFiles->children();			if (count($oldEntries))			{				$deletions = $this->findDeletedFiles($oldEntries, $element->children());				foreach ($deletions['folders'] as $deleted_folder)				{					JFolder::delete($destination . '/' . $deleted_folder);				}				foreach ($deletions['files'] as $deleted_file)				{					JFile::delete($destination . '/' . $deleted_file);				}			}		}		$path = array();		// Copy the MD5SUMS file if it exists		if (file_exists($source . '/MD5SUMS'))		{			$path['src'] = $source . '/MD5SUMS';			$path['dest'] = $destination . '/MD5SUMS';			$path['type'] = 'file';			$copyfiles[] = $path;		}		// Process each file in the $files array (children of $tagName).		foreach ($element->children() as $file)		{			$path['src'] = $source . '/' . $file;			$path['dest'] = $destination . '/' . $file;			// Is this path a file or folder?			$path['type'] = ($file->getName() == 'folder') ? 'folder' : 'file';			/*			 * Before we can add a file to the copyfiles array we need to ensure			 * that the folder we are copying our file to exits and if it doesn't,			 * we need to create it.			 */			if (basename($path['dest']) != $path['dest'])			{				$newdir = dirname($path['dest']);				if (!JFolder::create($newdir))				{					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_CREATE_DIRECTORY', $newdir), JLog::WARNING, 'jerror');					return false;				}			}			// Add the file to the copyfiles array			$copyfiles[] = $path;		}		return $this->copyFiles($copyfiles);	}	/**	 * Method to parse through a languages element of the installation manifest and take appropriate	 * action.	 *	 * @param   SimpleXMLElement  $element  The XML node to process	 * @param   integer           $cid      Application ID of application to install to	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function parseLanguages(SimpleXMLElement $element, $cid = 0)	{		// TODO: work out why the below line triggers 'node no longer exists' errors with files		if (!$element || !count($element->children()))		{			// Either the tag does not exist or has no children therefore we return zero files processed.			return 0;		}		$copyfiles = array();		// Get the client info		$client = JApplicationHelper::getClientInfo($cid);		// Here we set the folder we are going to copy the files to.		// 'languages' Files are copied to JPATH_BASE/language/ folder		$destination = $client->path . '/language';		/*		 * Here we set the folder we are going to copy the files from.		 *		 * Does the element have a folder attribute?		 *		 * If so this indicates that the files are in a subdirectory of the source		 * folder and we should append the folder attribute to the source path when		 * copying files.		 */		$folder = (string) $element->attributes()->folder;		if ($folder && file_exists($this->getPath('source') . '/' . $folder))		{			$source = $this->getPath('source') . '/' . $folder;		}		else		{			$source = $this->getPath('source');		}		// Process each file in the $files array (children of $tagName).		foreach ($element->children() as $file)		{			/*			 * Language files go in a subfolder based on the language code, ie.			 * <language tag="en-US">en-US.mycomponent.ini</language>			 * would go in the en-US subdirectory of the language folder.			 */			// We will only install language files where a core language pack			// already exists.			if ((string) $file->attributes()->tag != '')			{				$path['src'] = $source . '/' . $file;				if ((string) $file->attributes()->client != '')				{					// Override the client					$langclient = JApplicationHelper::getClientInfo((string) $file->attributes()->client, true);					$path['dest'] = $langclient->path . '/language/' . $file->attributes()->tag . '/' . basename((string) $file);				}				else				{					// Use the default client					$path['dest'] = $destination . '/' . $file->attributes()->tag . '/' . basename((string) $file);				}				// If the language folder is not present, then the core pack hasn't been installed... ignore				if (!JFolder::exists(dirname($path['dest'])))				{					continue;				}			}			else			{				$path['src'] = $source . '/' . $file;				$path['dest'] = $destination . '/' . $file;			}			/*			 * Before we can add a file to the copyfiles array we need to ensure			 * that the folder we are copying our file to exits and if it doesn't,			 * we need to create it.			 */			if (basename($path['dest']) != $path['dest'])			{				$newdir = dirname($path['dest']);				if (!JFolder::create($newdir))				{					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_CREATE_DIRECTORY', $newdir), JLog::WARNING, 'jerror');					return false;				}			}			// Add the file to the copyfiles array			$copyfiles[] = $path;		}		return $this->copyFiles($copyfiles);	}	/**	 * Method to parse through a media element of the installation manifest and take appropriate	 * action.	 *	 * @param   SimpleXMLElement  $element  The XML node to process	 * @param   integer           $cid      Application ID of application to install to	 *	 * @return  boolean     True on success	 *	 * @since   3.1	 */	public function parseMedia(SimpleXMLElement $element, $cid = 0)	{		if (!$element || !count($element->children()))		{			// Either the tag does not exist or has no children therefore we return zero files processed.			return 0;		}		$copyfiles = array();		// Here we set the folder we are going to copy the files to.		// Default 'media' Files are copied to the JPATH_BASE/media folder		$folder = ((string) $element->attributes()->destination) ? '/' . $element->attributes()->destination : null;		$destination = JPath::clean(JPATH_ROOT . '/media' . $folder);		// Here we set the folder we are going to copy the files from.		/*		 * Does the element have a folder attribute?		 * If so this indicates that the files are in a subdirectory of the source		 * folder and we should append the folder attribute to the source path when		 * copying files.		 */		$folder = (string) $element->attributes()->folder;		if ($folder && file_exists($this->getPath('source') . '/' . $folder))		{			$source = $this->getPath('source') . '/' . $folder;		}		else		{			$source = $this->getPath('source');		}		// Process each file in the $files array (children of $tagName).		foreach ($element->children() as $file)		{			$path['src'] = $source . '/' . $file;			$path['dest'] = $destination . '/' . $file;			// Is this path a file or folder?			$path['type'] = ($file->getName() == 'folder') ? 'folder' : 'file';			/*			 * Before we can add a file to the copyfiles array we need to ensure			 * that the folder we are copying our file to exits and if it doesn't,			 * we need to create it.			 */			if (basename($path['dest']) != $path['dest'])			{				$newdir = dirname($path['dest']);				if (!JFolder::create($newdir))				{					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_CREATE_DIRECTORY', $newdir), JLog::WARNING, 'jerror');					return false;				}			}			// Add the file to the copyfiles array			$copyfiles[] = $path;		}		return $this->copyFiles($copyfiles);	}	/**	 * Method to parse the parameters of an extension, build the INI	 * string for its default parameters, and return the INI string.	 *	 * @return  string   INI string of parameter values	 *	 * @since   3.1	 */	public function getParams()	{		// Validate that we have a fieldset to use		if (!isset($this->manifest->config->fields->fieldset))		{			return '{}';		}		// Getting the fieldset tags		$fieldsets = $this->manifest->config->fields->fieldset;		// Creating the data collection variable:		$ini = array();		// Iterating through the fieldsets:		foreach ($fieldsets as $fieldset)		{			if (!count($fieldset->children()))			{				// Either the tag does not exist or has no children therefore we return zero files processed.				return null;			}			// Iterating through the fields and collecting the name/default values:			foreach ($fieldset as $field)			{				// Check against the null value since otherwise default values like "0"				// cause entire parameters to be skipped.				if (($name = $field->attributes()->name) === null)				{					continue;				}				if (($value = $field->attributes()->default) === null)				{					continue;				}				$ini[(string) $name] = (string) $value;			}		}		return json_encode($ini);	}	/**	 * Copyfiles	 *	 * Copy files from source directory to the target directory	 *	 * @param   array    $files      Array with filenames	 * @param   boolean  $overwrite  True if existing files can be replaced	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function copyFiles($files, $overwrite = null)	{		/*		 * To allow for manual override on the overwriting flag, we check to see if		 * the $overwrite flag was set and is a boolean value.  If not, use the object		 * allowOverwrite flag.		 */		if (is_null($overwrite) || !is_bool($overwrite))		{			$overwrite = $this->overwrite;		}		/*		 * $files must be an array of filenames.  Verify that it is an array with		 * at least one file to copy.		 */		if (is_array($files) && count($files) > 0)		{			foreach ($files as $file)			{				// Get the source and destination paths				$filesource = JPath::clean($file['src']);				$filedest = JPath::clean($file['dest']);				$filetype = array_key_exists('type', $file) ? $file['type'] : 'file';				if (!file_exists($filesource))				{					/*					 * The source file does not exist.  Nothing to copy so set an error					 * and return false.					 */					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_NO_FILE', $filesource), JLog::WARNING, 'jerror');					return false;				}				elseif (($exists = file_exists($filedest)) && !$overwrite)				{					// It's okay if the manifest already exists					if ($this->getPath('manifest') == $filesource)					{						continue;					}					// The destination file already exists and the overwrite flag is false.					// Set an error and return false.					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_FILE_EXISTS', $filedest), JLog::WARNING, 'jerror');					return false;				}				else				{					// Copy the folder or file to the new location.					if ($filetype == 'folder')					{						if (!(JFolder::copy($filesource, $filedest, null, $overwrite)))						{							JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_FAIL_COPY_FOLDER', $filesource, $filedest), JLog::WARNING, 'jerror');							return false;						}						$step = array('type' => 'folder', 'path' => $filedest);					}					else					{						if (!(JFile::copy($filesource, $filedest, null)))						{							JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_FAIL_COPY_FILE', $filesource, $filedest), JLog::WARNING, 'jerror');							return false;						}						$step = array('type' => 'file', 'path' => $filedest);					}					/*					 * Since we copied a file/folder, we want to add it to the installation step stack so that					 * in case we have to roll back the installation we can remove the files copied.					 */					if (!$exists)					{						$this->stepStack[] = $step;					}				}			}		}		else		{			// The $files variable was either not an array or an empty array			return false;		}		return count($files);	}	/**	 * Method to parse through a files element of the installation manifest and remove	 * the files that were installed	 *	 * @param   object   $element  The XML node to process	 * @param   integer  $cid      Application ID of application to remove from	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function removeFiles($element, $cid = 0)	{		if (!$element || !count($element->children()))		{			// Either the tag does not exist or has no children therefore we return zero files processed.			return true;		}		$retval = true;		$debug = false;		if (isset($GLOBALS['installerdebug']) && $GLOBALS['installerdebug'])		{			$debug = true;		}		// Get the client info if we're using a specific client		if ($cid > -1)		{			$client = JApplicationHelper::getClientInfo($cid);		}		else		{			$client = null;		}		// Get the array of file nodes to process		$files = $element->children();		if (count($files) == 0)		{			// No files to process			return true;		}		$folder = '';		/*		 * Here we set the folder we are going to remove the files from.  There are a few		 * special cases that need to be considered for certain reserved tags.		 */		switch ($element->getName())		{			case 'media':				if ((string) $element->attributes()->destination)				{					$folder = (string) $element->attributes()->destination;				}				else				{					$folder = '';				}				$source = $client->path . '/media/' . $folder;				break;			case 'languages':				$lang_client = (string) $element->attributes()->client;				if ($lang_client)				{					$client = JApplicationHelper::getClientInfo($lang_client, true);					$source = $client->path . '/language';				}				else				{					if ($client)					{						$source = $client->path . '/language';					}					else					{						$source = '';					}				}				break;			default:				if ($client)				{					$pathname = 'extension_' . $client->name;					$source = $this->getPath($pathname);				}				else				{					$pathname = 'extension_root';					$source = $this->getPath($pathname);				}				break;		}		// Process each file in the $files array (children of $tagName).		foreach ($files as $file)		{			/*			 * If the file is a language, we must handle it differently.  Language files			 * go in a subdirectory based on the language code, ie.			 * <language tag="en_US">en_US.mycomponent.ini</language>			 * would go in the en_US subdirectory of the languages directory.			 */			if ($file->getName() == 'language' && (string) $file->attributes()->tag != '')			{				if ($source)				{					$path = $source . '/' . $file->attributes()->tag . '/' . basename((string) $file);				}				else				{					$target_client = JApplicationHelper::getClientInfo((string) $file->attributes()->client, true);					$path = $target_client->path . '/language/' . $file->attributes()->tag . '/' . basename((string) $file);				}				// If the language folder is not present, then the core pack hasn't been installed... ignore				if (!JFolder::exists(dirname($path)))				{					continue;				}			}			else			{				$path = $source . '/' . $file;			}			// Actually delete the files/folders			if (is_dir($path))			{				$val = JFolder::delete($path);			}			else			{				$val = JFile::delete($path);			}			if ($val === false)			{				JLog::add('Failed to delete ' . $path, JLog::WARNING, 'jerror');				$retval = false;			}		}		if (!empty($folder))		{			$val = JFolder::delete($source);		}		return $retval;	}	/**	 * Copies the installation manifest file to the extension folder in the given client	 *	 * @param   integer  $cid  Where to copy the installfile [optional: defaults to 1 (admin)]	 *	 * @return  boolean  True on success, False on error	 *	 * @since   3.1	 */	public function copyManifest($cid = 1)	{		// Get the client info		$client = JApplicationHelper::getClientInfo($cid);		$path['src'] = $this->getPath('manifest');		if ($client)		{			$pathname = 'extension_' . $client->name;			$path['dest'] = $this->getPath($pathname) . '/' . basename($this->getPath('manifest'));		}		else		{			$pathname = 'extension_root';			$path['dest'] = $this->getPath($pathname) . '/' . basename($this->getPath('manifest'));		}		return $this->copyFiles(array($path), true);	}	/**	 * Tries to find the package manifest file	 *	 * @return  boolean  True on success, False on error	 *	 * @since 3.1	 */	public function findManifest()	{		// Main folder manifests (higher priority)		$parentXmlfiles = JFolder::files($this->getPath('source'), '.xml$', false, true);		// Search for children manifests (lower priority)		$allXmlFiles    = JFolder::files($this->getPath('source'), '.xml$', 1, true);		// Create an unique array of files ordered by priority		$xmlfiles = array_unique(array_merge($parentXmlfiles, $allXmlFiles));		// If at least one XML file exists		if (!empty($xmlfiles))		{			foreach ($xmlfiles as $file)			{				// Is it a valid Joomla installation manifest file?				$manifest = $this->isManifest($file);				if (!is_null($manifest))				{					// If the root method attribute is set to upgrade, allow file overwrite					if ((string) $manifest->attributes()->method == 'upgrade')					{						$this->upgrade = true;						$this->overwrite = true;					}					// If the overwrite option is set, allow file overwriting					if ((string) $manifest->attributes()->overwrite == 'true')					{						$this->overwrite = true;					}					// Set the manifest object and path					$this->manifest = $manifest;					$this->setPath('manifest', $file);					// Set the installation source path to that of the manifest file					$this->setPath('source', dirname($file));					return true;				}			}			// None of the XML files found were valid install files			JLog::add(JText::_('JLIB_INSTALLER_ERROR_NOTFINDJOOMLAXMLSETUPFILE'), JLog::WARNING, 'jerror');			return false;		}		else		{			// No XML files were found in the install folder			JLog::add(JText::_('JLIB_INSTALLER_ERROR_NOTFINDXMLSETUPFILE'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Is the XML file a valid Joomla installation manifest file.	 *	 * @param   string  $file  An xmlfile path to check	 *	 * @return  mixed  A SimpleXMLElement, or null if the file failed to parse	 *	 * @since   3.1	 */	public function isManifest($file)	{		$xml = simplexml_load_file($file);		// If we cannot load the XML file return null		if (!$xml)		{			return null;		}		// Check for a valid XML root tag.		if ($xml->getName() != 'extension')		{			return null;		}		// Valid manifest file return the object		return $xml;	}	/**	 * Generates a manifest cache	 *	 * @return string serialised manifest data	 *	 * @since   3.1	 */	public function generateManifestCache()	{		return json_encode(self::parseXMLInstallFile($this->getPath('manifest')));	}	/**	 * Cleans up discovered extensions if they're being installed some other way	 *	 * @param   string   $type     The type of extension (component, etc)	 * @param   string   $element  Unique element identifier (e.g. com_content)	 * @param   string   $folder   The folder of the extension (plugins; e.g. system)	 * @param   integer  $client   The client application (administrator or site)	 *	 * @return  object    Result of query	 *	 * @since   3.1	 */	public function cleanDiscoveredExtension($type, $element, $folder = '', $client = 0)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->delete($db->quoteName('#__extensions'))			->where('type = ' . $db->quote($type))			->where('element = ' . $db->quote($element))			->where('folder = ' . $db->quote($folder))			->where('client_id = ' . (int) $client)			->where('state = -1');		$db->setQuery($query);		return $db->execute();	}	/**	 * Compares two "files" entries to find deleted files/folders	 *	 * @param   array  $old_files  An array of SimpleXMLElement objects that are the old files	 * @param   array  $new_files  An array of SimpleXMLElement objects that are the new files	 *	 * @return  array  An array with the delete files and folders in findDeletedFiles[files] and findDeletedFiles[folders] respectively	 *	 * @since   3.1	 */	public function findDeletedFiles($old_files, $new_files)	{		// The magic find deleted files function!		// The files that are new		$files = array();		// The folders that are new		$folders = array();		// The folders of the files that are new		$containers = array();		// A list of files to delete		$files_deleted = array();		// A list of folders to delete		$folders_deleted = array();		foreach ($new_files as $file)		{			switch ($file->getName())			{				case 'folder':					// Add any folders to the list					$folders[] = (string) $file; // add any folders to the list					break;				case 'file':				default:					// Add any files to the list					$files[] = (string) $file;					// Now handle the folder part of the file to ensure we get any containers					// Break up the parts of the directory					$container_parts = explode('/', dirname((string) $file));					// Make sure this is clean and empty					$container = '';					foreach ($container_parts as $part)					{						// Iterate through each part						// Add a slash if its not empty						if (!empty($container))						{							$container .= '/';						}						// Aappend the folder part						$container .= $part;						if (!in_array($container, $containers))						{							// Add the container if it doesn't already exist							$containers[] = $container;						}					}					break;			}		}		foreach ($old_files as $file)		{			switch ($file->getName())			{				case 'folder':					if (!in_array((string) $file, $folders))					{						// See whether the folder exists in the new list						if (!in_array((string) $file, $containers))						{							// Check if the folder exists as a container in the new list							// If it's not in the new list or a container then delete it							$folders_deleted[] = (string) $file;						}					}					break;				case 'file':				default:					if (!in_array((string) $file, $files))					{						// Look if the file exists in the new list						if (!in_array(dirname((string) $file), $folders))						{							// Look if the file is now potentially in a folder							$files_deleted[] = (string) $file; // not in a folder, doesn't exist, wipe it out!						}					}					break;			}		}		return array('files' => $files_deleted, 'folders' => $folders_deleted);	}	/**	 * Loads an MD5SUMS file into an associative array	 *	 * @param   string  $filename  Filename to load	 *	 * @return  array  Associative array with filenames as the index and the MD5 as the value	 *	 * @since   3.1	 */	public function loadMD5Sum($filename)	{		if (!file_exists($filename))		{			// Bail if the file doesn't exist			return false;		}		$data = file($filename, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);		$retval = array();		foreach ($data as $row)		{			// Split up the data			$results = explode('  ', $row);			// Cull any potential prefix			$results[1] = str_replace('./', '', $results[1]);			// Throw into the array			$retval[$results[1]] = $results[0];		}		return $retval;	}	/**	 * Parse a XML install manifest file.	 *	 * XML Root tag should be 'install' except for languages which use meta file.	 *	 * @param   string  $path  Full path to XML file.	 *	 * @return  array  XML metadata.	 *	 * @since   12.1	 */	public static function parseXMLInstallFile($path)	{		// Read the file to see if it's a valid component XML file		$xml = simplexml_load_file($path);		if (!$xml)		{			return false;		}		// Check for a valid XML root tag.		// Extensions use 'extension' as the root tag.  Languages use 'metafile' instead		if ($xml->getName() != 'extension' && $xml->getName() != 'metafile')		{			unset($xml);			return false;		}		$data = array();		$data['name'] = (string) $xml->name;		// Check if we're a language. If so use metafile.		$data['type'] = $xml->getName() == 'metafile' ? 'language' : (string) $xml->attributes()->type;		$data['creationDate'] = ((string) $xml->creationDate) ? (string) $xml->creationDate : JText::_('Unknown');		$data['author'] = ((string) $xml->author) ? (string) $xml->author : JText::_('Unknown');		$data['copyright'] = (string) $xml->copyright;		$data['authorEmail'] = (string) $xml->authorEmail;		$data['authorUrl'] = (string) $xml->authorUrl;		$data['version'] = (string) $xml->version;		$data['description'] = (string) $xml->description;		$data['group'] = (string) $xml->group;		return $data;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Adsense data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataAdsense extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/adsense');		}	}	/**	 * Method to get an Adsense account's settings from Google	 *	 * @param   string   $accountID    ID of account to get	 * @param   boolean  $subaccounts  Include list of subaccounts	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getAccount($accountID, $subaccounts = true)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . ($subaccounts ? '?tree=true' : '');			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense accounts from Google	 *	 * @param   array  $options   Search settings	 * @param   int    $maxpages  Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listAccounts($options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense clients from Google	 *	 * @param   string  $accountID  ID of account to list the clients from	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listClients($accountID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an AdSense AdUnit	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $adunitID    ID of adunit to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getUnit($accountID, $adclientID, $adunitID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels for a specific Adunit	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $adunitID    ID of adunit to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUnitChannels($accountID, $adclientID, $adunitID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID) . '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an Adsense Channel	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $channelID   ID of channel to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getChannel($accountID, $adclientID, $channelID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/';			$url .= urlencode($adclientID) . '/customchannels/' . urlencode($channelID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Adunits for a specific Custom Channel	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $channelID   ID of channel to list units from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannelUnits($accountID, $adclientID, $channelID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels/' . urlencode($channelID) . '/adunits?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to generate a report from Google AdSense	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUrlChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/urlchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Channel URLs	 *	 * @param   string  $accountID  ID of account	 * @param   mixed   $start      Start day	 * @param   mixed   $end        End day	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function generateReport($accountID, $start, $end = false, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			if (is_int($start))			{				$startobj = new DateTime;				$startobj->setTimestamp($start);			}			elseif (is_string($start))			{				$startobj = new DateTime($start);			}			elseif (is_a($start, 'DateTime'))			{				$startobj = $start;			}			else			{				throw new InvalidArgumentException('Invalid start time.');			}			if (!$end)			{				$endobj = new DateTime;			}			elseif (is_int($end))			{				$endobj = new DateTime;				$endobj->setTimestamp($end);			}			elseif (is_string($end))			{				$endobj = new DateTime($end);			}			elseif (is_a($end, 'DateTime'))			{				$endobj = $end;			}			else			{				throw new InvalidArgumentException('Invalid end time.');			}			$options['startDate'] = $startobj->format('Y-m-d');			$options['endDate'] = $endobj->format('Y-m-d');			$begin = array_key_exists('startIndex', $options) ? $options['startIndex'] : 0;			unset($options['startIndex']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/reports?' . http_build_query($options);			if (strpos($url, '&'))			{				$url .= '&';			}			$i = 0;			$data['rows'] = array();			do			{				$jdata = $this->query($url . 'startIndex=' . count($data['rows']));				$newdata = json_decode($jdata->body, true);				if ($newdata && array_key_exists('rows', $newdata))				{					$newdata['rows'] = array_merge($data['rows'], $newdata['rows']);					$data = $newdata;				}				else				{					throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");				}				$i++;			}			while (count($data['rows']) < $data['totalMatchedRows'] && $i < $maxpages);			return $data;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_redirect&view=links'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC'); ?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_OLD_URL', 'a.old_url', $listDirn, $listOrder); ?>					</th>					<th width="30%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_NEW_URL', 'a.new_url', $listDirn, $listOrder); ?>					</th>					<th width="30%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_REFERRER', 'a.referer', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_CREATED_DATE', 'a.created_date', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="7">						<?php echo $this->pagination->getListFooter(); ?>						<p class="footer-tip">							<?php if ($this->enabled) : ?>								<span class="enabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_ENABLED'); ?></span>							<?php else : ?>								<span class="disabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_DISABLED'); ?></span>							<?php endif; ?>						</p>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create',     'com_redirect');				$canEdit   = $user->authorise('core.edit',       'com_redirect');				$canChange = $user->authorise('core.edit.state', 'com_redirect');				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td>						<?php echo JHtml::_('redirect.published', $item->published, $i); ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_redirect&task=link.edit&id='.$item->id);?>" title="<?php echo $this->escape($item->old_url); ?>">								<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?></a>						<?php else : ?>								<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?>						<?php endif; ?>					</td>					<td class="small">						<?php echo $this->escape($item->new_url); ?>					</td>					<td class="small">						<?php echo $this->escape($item->referer); ?>					</td>					<td class="small">						<?php echo JHtml::_('date', $item->created_date, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php if (!empty($this->items)) : ?>			<?php echo $this->loadTemplate('addform'); ?>		<?php endif; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Route Helper * * @static * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */abstract class ContentHelperRoute{	protected static $lookup = array();	/**	 * @param   integer  The route of the content item	 */	public static function getArticleRoute($id, $catid = 0, $language = 0)	{		$needles = array(			'article'  => array((int) $id)		);		//Create the link		$link = 'index.php?option=com_content&view=article&id='. $id;		if ((int) $catid > 1)		{			$categories = JCategories::getInstance('Content');			$category = $categories->get((int) $catid);			if ($category)			{				$needles['category'] = array_reverse($category->getPath());				$needles['categories'] = $needles['category'];				$link .= '&catid='.$catid;			}		}		if ($language && $language != "*" && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang='.$lang->sef;					$needles['language'] = $language;				}			}		}		if ($item = self::_findItem($needles))		{			$link .= '&Itemid='.$item;		}		elseif ($item = self::_findItem())		{			$link .= '&Itemid='.$item;		}		return $link;	}	public static function getCategoryRoute($catid, $language = 0)	{		if ($catid instanceof JCategoryNode)		{			$id = $catid->id;			$category = $catid;		}		else		{			$id = (int) $catid;			$category = JCategories::getInstance('Content')->get($id);		}		if ($id < 1)		{			$link = '';		}		else		{			$link = 'index.php?option=com_content&view=category&id='.$id;			$needles = array(				'category' => array($id)			);			if ($language && $language != "*" && JLanguageMultilang::isEnabled())			{				$db		= JFactory::getDbo();				$query	= $db->getQuery(true)					->select('a.sef AS sef')					->select('a.lang_code AS lang_code')					->from('#__languages AS a');				$db->setQuery($query);				$langs = $db->loadObjectList();				foreach ($langs as $lang)				{					if ($language == $lang->lang_code)					{						$link .= '&lang='.$lang->sef;						$needles['language'] = $language;					}				}			}			if ($item = self::_findItem($needles))			{				$link .= '&Itemid='.$item;			}			else			{				//Create the link				if ($category)				{					$catids = array_reverse($category->getPath());					$needles['category'] = $catids;					$needles['categories'] = $catids;					if ($item = self::_findItem($needles))					{						$link .= '&Itemid='.$item;					}					elseif ($item = self::_findItem())					{						$link .= '&Itemid='.$item;					}				}			}		}		return $link;	}	public static function getFormRoute($id)	{		//Create the link		if ($id)		{			$link = 'index.php?option=com_content&task=article.edit&a_id='. $id;		}		else		{			$link = 'index.php?option=com_content&task=article.edit&a_id=0';		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component	= JComponentHelper::getComponent('com_content');			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items		= $menus->getItems($attributes, $values);			foreach ($items as $item)			{				if (isset($item->query) && isset($item->query['view']))				{					$view = $item->query['view'];					if (!isset(self::$lookup[$language][$view]))					{						self::$lookup[$language][$view] = array();					}					if (isset($item->query['id'])) {						// here it will become a bit tricky						// language != * can override existing entries						// language == * cannot override existing entries						if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')						{							self::$lookup[$language][$view][$item->query['id']] = $item->id;						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && $active->component == 'com_content' && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// if not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink Table class * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksTableWeblink extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__weblinks', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_weblinks.weblink';	}	/**	 * Overloaded bind function to pre-process the params.	 *	 * @param   array  Named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see     JTable:bind	 * @since   1.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overload the store method for the Weblinks table.	 *	 * @param   boolean	Toggle whether null values should be updated.	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified		= $date->toSql();			$this->modified_by	= $user->get('id');		}		else		{			// New weblink. A weblink created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Set publish_up to null date if not set		if (!$this->publish_up)		{			$this->publish_up = $this->_db->getNullDate();		}		// Set publish_down to null date if not set		if (!$this->publish_down)		{			$this->publish_down = $this->_db->getNullDate();		}		// Verify that the alias is unique		$table = JTable::getInstance('Weblink', 'WeblinksTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_WEBLINKS_ERROR_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 */	public function check()	{		if (JFilterInput::checkAttribute(array ('href', $this->url)))		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_PROVIDE_URL'));			return false;		}		// check for valid name		if (trim($this->title) == '')		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_TITLE'));			return false;		}		// check for existing name		$query = 'SELECT id FROM #__weblinks WHERE title = '.$this->_db->quote($this->title).' AND catid = '.(int) $this->catid;		$this->_db->setQuery($query);		$xid = (int) $this->_db->loadResult();		if ($xid && $xid != (int) $this->id)		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_NAME'));			return false;		}		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ($this->publish_down > $this->_db->getNullDate() && $this->publish_down < $this->publish_up)		{			$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));			return false;		}		// clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// only process if not empty			$bad_characters = array("\n", "\r", "\"", "<", ">"); // array of characters to remove			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey); // remove bad characters			$keys = explode(',', $after_clean); // create array using commas as delimiter			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key)) {  // ignore blank keywords					$clean_keys[] = trim($key);				}			}			$this->metakey = implode(", ", $clean_keys); // put array back together delimited by ", "		}		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.0.4	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.'='.implode(' OR '.$k.'=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = '.(int) $userId.')';		}		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl) .			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')' .			$checkin		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$canDo = LanguagesHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'language.cancel' || document.formvalidator.isValid(document.id('language-form')))		{			Joomla.submitform(task, document.getElementById('language-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_languages&layout=edit&lang_id='.(int) $this->item->lang_id); ?>" method="post" name="adminForm" id="language-form" class="form-validate form-horizontal">	<fieldset>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('JDETAILS', true)); ?>			<div class="control-group">				<div class="controls">					<?php if ($this->item->lang_id) : ?>						<?php echo JText::sprintf('JGLOBAL_RECORD_NUMBER', $this->item->lang_id); ?>					<?php else : ?>						<?php echo JText::_('COM_LANGUAGES_VIEW_LANGUAGE_EDIT_NEW_TITLE'); ?>					<?php endif; ?>				</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('title'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('title'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('title_native'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('title_native'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('sef'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('sef'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('image'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('image'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lang_code'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lang_code'); ?>					</div>			</div>			<?php if ($canDo->get('core.edit.state')) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('published'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('access'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('description'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('description'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lang_id'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lang_id'); ?>					</div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>			<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'site_name', JText::_('COM_LANGUAGES_FIELDSET_SITE_NAME_LABEL', true)); ?>			<?php foreach ($this->form->getFieldset('site_name') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesControllerLanguages extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Language', $prefix = 'LanguagesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides a hidden field * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.hidden.html#input.hidden * @since       11.1 */class JFormFieldHidden extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Hidden';	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="hidden" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $class . $disabled . $onchange . ' />';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input = JFactory::getApplication()->input;if (!JFactory::getUser()->authorise('core.manage', 'com_tags')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$task = $input->get('task');$controller	= JControllerLegacy::getInstance('Tags');$controller->execute($input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;jimport('joomla.filesystem.file');/** * Indexer class supporting MySQL(i) for the Finder indexer package. * * The indexer class provides the core functionality of the Finder * search engine. It is responsible for adding and updating the * content links table; extracting and scoring tokens; and maintaining * all referential information for the content. * * Note: All exceptions thrown from within this class should be caught * by the controller. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.0 */class FinderIndexerDriverMysql extends FinderIndexer{	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	public function index($item, $format = 'html')	{		// Mark beforeIndexing in the profiler.		static::$profiler ? static::$profiler->mark('beforeIndexing') : null;		$db = JFactory::getDbo();		$nd = $db->getNullDate();		// Check if the item is in the database.		$query = $db->getQuery(true)			->select($db->quoteName('link_id') . ', ' . $db->quoteName('md5sum'))			->from($db->quoteName('#__finder_links'))			->where($db->quoteName('url') . ' = ' . $db->quote($item->url));		// Load the item  from the database.		$db->setQuery($query);		$link = $db->loadObject();		// Get the indexer state.		$state = static::getState();		// Get the signatures of the item.		$curSig = static::getSignature($item);		$oldSig = isset($link->md5sum) ? $link->md5sum : null;		// Get the other item information.		$linkId = empty($link->link_id) ? null : $link->link_id;		$isNew = empty($link->link_id) ? true : false;		// Check the signatures. If they match, the item is up to date.		if (!$isNew && $curSig == $oldSig)		{			return $linkId;		}		/*		 * If the link already exists, flush all the term maps for the item.		 * Maps are stored in 16 tables so we need to iterate through and flush		 * each table one at a time.		 */		if (!$isNew)		{			for ($i = 0; $i <= 15; $i++)			{				// Flush the maps for the link.				$query->clear()					->delete($db->quoteName('#__finder_links_terms' . dechex($i)))					->where($db->quoteName('link_id') . ' = ' . (int) $linkId);				$db->setQuery($query);				$db->execute();			}			// Remove the taxonomy maps.			FinderIndexerTaxonomy::removeMaps($linkId);		}		// Mark afterUnmapping in the profiler.		static::$profiler ? static::$profiler->mark('afterUnmapping') : null;		// Perform cleanup on the item data.		$item->publish_start_date = (int) $item->publish_start_date != 0 ? $item->publish_start_date : $nd;		$item->publish_end_date = (int) $item->publish_end_date != 0 ? $item->publish_end_date : $nd;		$item->start_date = (int) $item->start_date != 0 ? $item->start_date : $nd;		$item->end_date = (int) $item->end_date != 0 ? $item->end_date : $nd;		// Prepare the item description.		$item->description = FinderIndexerHelper::parse($item->summary);		/*		 * Now, we need to enter the item into the links table. If the item		 * already exists in the database, we need to use an UPDATE query.		 * Otherwise, we need to use an INSERT to get the link id back.		 */		if ($isNew)		{			$columnsArray = array(				$db->quoteName('url'), $db->quoteName('route'), $db->quoteName('title'), $db->quoteName('description'),				$db->quoteName('indexdate'), $db->quoteName('published'), $db->quoteName('state'), $db->quoteName('access'),				$db->quoteName('language'), $db->quoteName('type_id'), $db->quoteName('object'), $db->quoteName('publish_start_date'),				$db->quoteName('publish_end_date'), $db->quoteName('start_date'), $db->quoteName('end_date'), $db->quoteName('list_price'),				$db->quoteName('sale_price')			);			// Insert the link.			$query->clear()				->insert($db->quoteName('#__finder_links'))				->columns($columnsArray)				->values(				$db->quote($item->url) . ', '				. $db->quote($item->route) . ', '				. $db->quote($item->title) . ', '				. $db->quote($item->description) . ', '				. $query->currentTimestamp() . ', '				. '1, '				. (int) $item->state . ', '				. (int) $item->access . ', '				. $db->quote($item->language) . ', '				. (int) $item->type_id . ', '				. $db->quote(serialize($item)) . ', '				. $db->quote($item->publish_start_date) . ', '				. $db->quote($item->publish_end_date) . ', '				. $db->quote($item->start_date) . ', '				. $db->quote($item->end_date) . ', '				. (double) ($item->list_price ? $item->list_price : 0) . ', '				. (double) ($item->sale_price ? $item->sale_price : 0)			);			$db->setQuery($query);			$db->execute();			// Get the link id.			$linkId = (int) $db->insertid();		}		else		{			// Update the link.			$query->clear()				->update($db->quoteName('#__finder_links'))				->set($db->quoteName('route') . ' = ' . $db->quote($item->route))				->set($db->quoteName('title') . ' = ' . $db->quote($item->title))				->set($db->quoteName('description') . ' = ' . $db->quote($item->description))				->set($db->quoteName('indexdate') . ' = ' . $query->currentTimestamp())				->set($db->quoteName('state') . ' = ' . (int) $item->state)				->set($db->quoteName('access') . ' = ' . (int) $item->access)				->set($db->quoteName('language') . ' = ' . $db->quote($item->language))				->set($db->quoteName('type_id') . ' = ' . (int) $item->type_id)				->set($db->quoteName('object') . ' = ' . $db->quote(serialize($item)))				->set($db->quoteName('publish_start_date') . ' = ' . $db->quote($item->publish_start_date))				->set($db->quoteName('publish_end_date') . ' = ' . $db->quote($item->publish_end_date))				->set($db->quoteName('start_date') . ' = ' . $db->quote($item->start_date))				->set($db->quoteName('end_date') . ' = ' . $db->quote($item->end_date))				->set($db->quoteName('list_price') . ' = ' . (double) ($item->list_price ? $item->list_price : 0))				->set($db->quoteName('sale_price') . ' = ' . (double) ($item->sale_price ? $item->sale_price : 0))				->where('link_id = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Set up the variables we will need during processing.		$tokens = array();		$count = 0;		// Mark afterLinking in the profiler.		static::$profiler ? static::$profiler->mark('afterLinking') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		/*		 * Process the item's content. The items can customize their		 * processing instructions to define extra properties to process		 * or rearrange how properties are weighted.		 */		foreach ($item->getInstructions() as $group => $properties)		{			// Iterate through the properties of the group.			foreach ($properties as $property)			{				// Check if the property exists in the item.				if (empty($item->$property))				{					continue;				}				// Tokenize the property.				if (is_array($item->$property))				{					// Tokenize an array of content and add it to the database.					foreach ($item->$property as $ip)					{						// If the group is path, we need to a few extra processing						// steps to strip the extension and convert slashes and dashes						// to spaces.						if ($group === static::PATH_CONTEXT)						{							$ip = JFile::stripExt($ip);							$ip = str_replace('/', ' ', $ip);							$ip = str_replace('-', ' ', $ip);						}						// Tokenize a string of content and add it to the database.						$count += $this->tokenizeToDB($ip, $group, $item->language, $format);						// Check if we're approaching the memory limit of the token table.						if ($count > static::$state->options->get('memory_table_limit', 30000))						{							$this->toggleTables(false);						}					}				}				else				{					// If the group is path, we need to a few extra processing					// steps to strip the extension and convert slashes and dashes					// to spaces.					if ($group === static::PATH_CONTEXT)					{						$item->$property = JFile::stripExt($item->$property);						$item->$property = str_replace('/', ' ', $item->$property);						$item->$property = str_replace('-', ' ', $item->$property);					}					// Tokenize a string of content and add it to the database.					$count += $this->tokenizeToDB($item->$property, $group, $item->language, $format);					// Check if we're approaching the memory limit of the token table.					if ($count > static::$state->options->get('memory_table_limit', 30000))					{						$this->toggleTables(false);					}				}			}		}		/*		 * Process the item's taxonomy. The items can customize their		 * taxonomy mappings to define extra properties to map.		 */		foreach ($item->getTaxonomy() as $branch => $nodes)		{			// Iterate through the nodes and map them to the branch.			foreach ($nodes as $node)			{				// Add the node to the tree.				$nodeId = FinderIndexerTaxonomy::addNode($branch, $node->title, $node->state, $node->access);				// Add the link => node map.				FinderIndexerTaxonomy::addMap($linkId, $nodeId);				// Tokenize the node title and add them to the database.				$count += $this->tokenizeToDB($node->title, static::META_CONTEXT, $item->language, $format);			}		}		// Mark afterProcessing in the profiler.		static::$profiler ? static::$profiler->mark('afterProcessing') : null;		/*		 * At this point, all of the item's content has been parsed, tokenized		 * and inserted into the #__finder_tokens table. Now, we need to		 * aggregate all the data into that table into a more usable form. The		 * aggregated data will be inserted into #__finder_tokens_aggregate		 * table.		 */		$query	= 'INSERT INTO ' . $db->quoteName('#__finder_tokens_aggregate') .				' (' . $db->quoteName('term_id') .				', ' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('term_weight') .				', ' . $db->quoteName('context') .				', ' . $db->quoteName('context_weight') .				', ' . $db->quoteName('language') . ')' .				' SELECT' .				' t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, ' .				' ROUND( t1.weight * COUNT( t2.term ) * %F, 8 ) AS context_weight, t1.language' .				' FROM (' .				'   SELECT DISTINCT t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				'   FROM ' . $db->quoteName('#__finder_tokens') . ' AS t1' .				'   WHERE t1.context = %d' .				' ) AS t1' .				' JOIN ' . $db->quoteName('#__finder_tokens') . ' AS t2 ON t2.term = t1.term' .				' LEFT JOIN ' . $db->quoteName('#__finder_terms') . ' AS t ON t.term = t1.term' .				' WHERE t2.context = %d' .				' GROUP BY t1.term' .				' ORDER BY t1.term DESC';		// Iterate through the contexts and aggregate the tokens per context.		foreach ($state->weights as $context => $multiplier)		{			// Run the query to aggregate the tokens for this context..			$db->setQuery(sprintf($query, $multiplier, $context, $context));			$db->execute();		}		// Mark afterAggregating in the profiler.		static::$profiler ? static::$profiler->mark('afterAggregating') : null;		/*		 * When we pulled down all of the aggregate data, we did a LEFT JOIN		 * over the terms table to try to find all the term ids that		 * already exist for our tokens. If any of the rows in the aggregate		 * table have a term of 0, then no term record exists for that		 * term so we need to add it to the terms table.		 */		$db->setQuery(			'INSERT IGNORE INTO ' . $db->quoteName('#__finder_terms') .			' (' . $db->quoteName('term') .			', ' . $db->quoteName('stem') .			', ' . $db->quoteName('common') .			', ' . $db->quoteName('phrase') .			', ' . $db->quoteName('weight') .			', ' . $db->quoteName('soundex') .			', ' . $db->quoteName('language') . ')' .			' SELECT ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term), ta.language' .			' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .			' WHERE ta.term_id = 0' .			' GROUP BY ta.term'		);		$db->execute();		/*		 * Now, we just inserted a bunch of new records into the terms table		 * so we need to go back and update the aggregate table with all the		 * new term ids.		 */		$query = $db->getQuery(true)			->update($db->quoteName('#__finder_tokens_aggregate') . ' AS ta')			->join('INNER', $db->quoteName('#__finder_terms') . ' AS t ON t.term = ta.term')			->set('ta.term_id = t.term_id')			->where('ta.term_id = 0');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * After we've made sure that all of the terms are in the terms table		 * and the aggregate table has the correct term ids, we need to update		 * the links counter for each term by one.		 */		$query->clear()			->update($db->quoteName('#__finder_terms') . ' AS t')			->join('INNER', $db->quoteName('#__finder_tokens_aggregate') . ' AS ta ON ta.term_id = t.term_id')			->set('t.' . $db->quoteName('links') . ' = t.links + 1');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * Before we can insert all of the mapping rows, we have to figure out		 * which mapping table the rows need to be inserted into. The mapping		 * table for each term is based on the first character of the md5 of		 * the first character of the term. In php, it would be expressed as		 * substr(md5(substr($token, 0, 1)), 0, 1)		 */		$query->clear()			->update($db->quoteName('#__finder_tokens_aggregate'))			->set($db->quoteName('map_suffix') . ' = SUBSTR(MD5(SUBSTR(' . $db->quoteName('term') . ', 1, 1)), 1, 1)');		$db->setQuery($query);		$db->execute();		/*		 * At this point, the aggregate table contains a record for each		 * term in each context. So, we're going to pull down all of that		 * data while grouping the records by term and add all of the		 * sub-totals together to arrive at the final total for each token for		 * this link. Then, we insert all of that data into the appropriate		 * mapping table.		 */		for ($i = 0; $i <= 15; $i++)		{			// Get the mapping table suffix.			$suffix = dechex($i);			/*			 * We have to run this query 16 times, one for each link => term			 * mapping table.			 */			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_links_terms' . $suffix) .				' (' . $db->quoteName('link_id') .				', ' . $db->quoteName('term_id') .				', ' . $db->quoteName('weight') . ')' .				' SELECT ' . (int) $linkId . ', ' . $db->quoteName('term_id') . ',' .				' ROUND(SUM(' . $db->quoteName('context_weight') . '), 8)' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') .				' WHERE ' . $db->quoteName('map_suffix') . ' = ' . $db->quote($suffix) .				' GROUP BY ' . $db->quoteName('term') .				' ORDER BY ' . $db->quoteName('term') . ' DESC'			);			$db->execute();		}		// Mark afterMapping in the profiler.		static::$profiler ? static::$profiler->mark('afterMapping') : null;		// Update the signature.		$query->clear()			->update($db->quoteName('#__finder_links'))			->set($db->quoteName('md5sum') . ' = ' . $db->quote($curSig))			->where($db->quoteName('link_id') . ' = ' . $db->quote($linkId));		$db->setQuery($query);		$db->execute();		// Mark afterSigning in the profiler.		static::$profiler ? static::$profiler->mark('afterSigning') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		// Toggle the token tables back to memory tables.		$this->toggleTables(true);		// Mark afterTruncating in the profiler.		static::$profiler ? static::$profiler->mark('afterTruncating') : null;		return $linkId;	}	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function remove($linkId)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get the indexer state.		$state = static::getState();		// Update the link counts and remove the mapping records.		for ($i = 0; $i <= 15; $i++)		{			// Update the link counts for the terms.			$query->update($db->quoteName('#__finder_terms') . ' AS t')				->join('INNER', $db->quoteName('#__finder_links_terms' . dechex($i)) . ' AS m ON m.term_id = t.term_id')				->set('t.links = t.links - 1')				->where('m.link_id = ' . $db->quote((int) $linkId));			$db->setQuery($query);			$db->execute();			// Remove all records from the mapping tables.			$query->clear()				->delete($db->quoteName('#__finder_links_terms' . dechex($i)))				->where($db->quoteName('link_id') . ' = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Delete all orphaned terms.		$query->clear()			->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Delete the link from the index.		$query->clear()			->delete($db->quoteName('#__finder_links'))			->where($db->quoteName('link_id') . ' = ' . $db->quote((int) $linkId));		$db->setQuery($query);		$db->execute();		// Remove the taxonomy maps.		FinderIndexerTaxonomy::removeMaps($linkId);		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	public function optimize()	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Delete all orphaned terms.		$query->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Optimize the links table.		$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_links'));		$db->execute();		for ($i = 0; $i <= 15; $i++)		{			// Optimize the terms mapping table.			$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_links_terms' . dechex($i)));			$db->execute();		}		// Optimize the terms mapping table.		$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_links_terms'));		$db->execute();		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		// Optimize the taxonomy mapping table.		$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_taxonomy_map'));		$db->execute();		return true;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	protected function addTokensToDB($tokens, $context = '')	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Force tokens to an array.		$tokens = is_array($tokens) ? $tokens : array($tokens);		// Count the number of token values.		$values = 0;		// Insert the tokens into the database.		$query->insert($db->quoteName('#__finder_tokens'))			->columns(				array(					$db->quoteName('term'),					$db->quoteName('stem'),					$db->quoteName('common'),					$db->quoteName('phrase'),					$db->quoteName('weight'),					$db->quoteName('context'),					$db->quoteName('language')				)			);		// Iterate through the tokens to create SQL value sets.		foreach ($tokens as $token)		{			$query->values(				$db->quote($token->term) . ', '					. $db->quote($token->stem) . ', '					. (int) $token->common . ', '					. (int) $token->phrase . ', '					. (float) $token->weight . ', '					. (int) $context . ', '					. $db->quote($token->language)			);			$values++;		}		$db->setQuery($query);		$db->execute();		return $values;	}	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	protected function toggleTables($memory)	{		static $state;		// Get the database adapter.		$db = JFactory::getDbo();		// Check if we are setting the tables to the Memory engine.		if ($memory === true && $state !== true)		{			// Set the tokens table to Memory.			$db->setQuery('ALTER TABLE ' . $db->quoteName('#__finder_tokens') . ' ENGINE = MEMORY');			$db->execute();			// Set the tokens aggregate table to Memory.			$db->setQuery('ALTER TABLE ' . $db->quoteName('#__finder_tokens_aggregate') . ' ENGINE = MEMORY');			$db->execute();			// Set the internal state.			$state = $memory;		}		// We must be setting the tables to the MyISAM engine.		elseif ($memory === false && $state !== false)		{			// Set the tokens table to MyISAM.			$db->setQuery('ALTER TABLE ' . $db->quoteName('#__finder_tokens') . ' ENGINE = MYISAM');			$db->execute();			// Set the tokens aggregate table to MyISAM.			$db->setQuery('ALTER TABLE ' . $db->quoteName('#__finder_tokens_aggregate') . ' ENGINE = MYISAM');			$db->execute();			// Set the internal state.			$state = $memory;		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?phpif (is_string($feed)){	echo $feed;}else{	$lang      = JFactory::getLanguage();	$myrtl     = $params->get('rssrtl');	$direction = '';	if ($lang->isRTL() && $myrtl == 0)	{		$direction = " redirect-rtl";	}	elseif ($lang->isRTL() && $myrtl == 1)	{		$direction = " redirect-ltr";	}	elseif ($lang->isRTL() && $myrtl == 2)	{		$direction = " redirect-rtl";	}	elseif ($myrtl == 0)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 1)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 2)	{		$direction = " redirect-rtl";	}	?>	<?php if ($feed != false) : ?>	<?php	// Image handling	$iUrl   = isset($feed->image) ? $feed->image : null;	$iTitle = isset($feed->imagetitle) ? $feed->imagetitle : null;	?>	<div class="row-striped">	<div style="direction: <?php echo $rssrtl ? 'rtl' : 'ltr'; ?>; text-align: <?php echo $rssrtl ? 'right' : 'left'; ?> ! important"  class="feed<?php echo $moduleclass_sfx; ?>">	<?php if (!is_null($feed->title) && $params->get('rsstitle', 1)) : ?>		<h2 class="redirect-ltr">			<a href="<?php echo str_replace('&', '&amp', $feed->link); ?>" target="_blank">				<?php echo $feed->title; ?></a>		</h2>	<?php endif; ?>	<?php if ($params->get('rssdesc', 1)) : ?>		<?php echo $feed->description; ?>	<?php endif; ?>	<?php if ($params->get('rssimage', 1) && $iUrl) : ?>		<img src="<?php echo $iUrl; ?>" alt="<?php echo @$iTitle; ?>"/>	<?php endif; ?>	<ul class="newsfeed<?php echo $params->get('moduleclass_sfx'); ?>">	<?php if (!empty($feed)) : ?>		<?php for ($i = 0; $i < $params->get('rssitems', 5); $i++) : ?>			<?php			$uri  = (!empty($feed[$i]->guid) || !is_null($feed[$i]->guid)) ? $feed[$i]->guid : $feed[$i]->uri;			$uri  = substr($uri, 0, 4) != 'http' ? $params->get('rsslink') : $uri;			$text = !empty($feed[$i]->content) || !is_null($feed[$i]->content) ? $feed[$i]->content : $feed[$i]->description;			?>			<li>				<?php if (!empty($uri)) : ?>					<h5 class="feed-link">						<a href="<?php echo $uri; ?>" target="_blank">							<?php  echo $feed[$i]->title; ?></a></h5>				<?php else : ?>					<h5 class="feed-link"><?php  echo $feed[$i]->title; ?></h5>				<?php  endif; ?>				<?php if ($params->get('rssitemdesc') && !empty($text)) : ?>					<div class="feed-item-description">						<?php						// Strip the images.						$text = JFilterOutput::stripImages($text);						$text = JHtml::_('string.truncate', $text, $params->get('word_count'));						echo str_replace('&apos;', "'", $text);						?>					</div>				<?php endif; ?>			</li>		<?php endfor; ?>	</ul>	<?php endif; ?>	<?php endif; ?>	</div>	</div><?php}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for form related behaviors * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlFormbehavior{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the Chosen JavaScript framework and supporting CSS into the document head	 *	 * If debugging mode is on an uncompressed version of Chosen is included for easier debugging.	 *	 * @param   string  $selector  Class for Chosen elements.	 * @param   mixed   $debug     Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function chosen($selector = '.advancedSelect', $debug = null)	{		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include jQuery		JHtml::_('jquery.framework');		// Add chosen.jquery.js language strings		JText::script('JGLOBAL_SELECT_SOME_OPTIONS');		JText::script('JGLOBAL_SELECT_AN_OPTION');		JText::script('JGLOBAL_SELECT_NO_RESULTS_MATCH');		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug  = (boolean) $config->get('debug');		}		JHtml::_('script', 'jui/chosen.jquery.min.js', false, true, false, false, $debug);		JHtml::_('stylesheet', 'jui/chosen.css', false, true);		JFactory::getDocument()->addScriptDeclaration("				jQuery(document).ready(function (){					jQuery('" . $selector . "').chosen({						disable_search_threshold : 10,						allow_single_deselect : true					});				});			"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Method to load the AJAX Chosen library	 *	 * If debugging mode is on an uncompressed version of AJAX Chosen is included for easier debugging.	 *	 * @param   JRegistry  $options  Options in a JRegistry object	 * @param   mixed      $debug    Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function ajaxchosen(JRegistry $options, $debug = null)	{		// Retrieve options/defaults		$selector       = $options->get('selector', '.tagfield');		$type           = $options->get('type', 'GET');		$url            = $options->get('url', null);		$dataType       = $options->get('dataType', 'json');		$jsonTermKey    = $options->get('jsonTermKey', 'term');		$afterTypeDelay = $options->get('afterTypeDelay', '500');		$minTermLength  = $options->get('minTermLength', '3');		JText::script('JGLOBAL_KEEP_TYPING');		JText::script('JGLOBAL_LOOKING_FOR');		// Ajax URL is mandatory		if (!empty($url))		{			if (isset(self::$loaded[__METHOD__][$selector]))			{				return;			}			// Include jQuery			JHtml::_('jquery.framework');			// Requires chosen to work			self::chosen($selector, $debug);			JHtml::_('script', 'jui/ajax-chosen.min.js', false, true, false, false, $debug);			JFactory::getDocument()->addScriptDeclaration("				(function($){					$(document).ready(function () {						$('" . $selector . "').ajaxChosen({							type: '" . $type . "',							url: '" . $url . "',							dataType: '" . $dataType . "',							jsonTermKey: '" . $jsonTermKey . "',							afterTypeDelay: '" . $afterTypeDelay . "',							minTermLength: '" . $minTermLength . "'						}, function (data) {							var results = [];							$.each(data, function (i, val) {								results.push({ value: val.value, text: val.text });							});							return results;						});					});				})(jQuery);				"			);			self::$loaded[__METHOD__][$selector] = true;		}		return;	}}
<?php/** * @package    Joomla.Site * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Application define. *///Global definitions.//Joomla framework path definitions.$parts = explode(DIRECTORY_SEPARATOR, JPATH_BASE);//Defines.define('JPATH_ROOT',          implode(DIRECTORY_SEPARATOR, $parts));define('JPATH_SITE',          JPATH_ROOT);define('JPATH_CONFIGURATION', JPATH_ROOT);define('JPATH_ADMINISTRATOR', JPATH_ROOT . '/administrator');define('JPATH_LIBRARIES',     JPATH_ROOT . '/libraries');define('JPATH_PLUGINS',       JPATH_ROOT . '/plugins');define('JPATH_INSTALLATION',  JPATH_ROOT . '/installation');define('JPATH_THEMES',        JPATH_BASE . '/templates');define('JPATH_CACHE',         JPATH_BASE . '/cache');define('JPATH_MANIFESTS',     JPATH_ADMINISTRATOR . '/manifests');
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.combobox');JHtml::_('formbehavior.chosen', 'select');$hasContent = empty($this->item->module) || $this->item->module == 'custom' || $this->item->module == 'mod_custom';// Get Params Fieldsets$this->fieldsets = $this->form->getFieldsets('params');$script = "Joomla.submitbutton = function(task)	{			if (task == 'module.cancel' || document.formvalidator.isValid(document.id('module-form'))) {";if ($hasContent){	$script .= $this->form->getField('content')->save();}$script .= "	Joomla.submitform(task, document.getElementById('module-form'));				if (self != top)				{					window.top.setTimeout('window.parent.SqueezeBox.close()', 1000);				}			}	}";JFactory::getDocument()->addScriptDeclaration($script);?><form action="<?php echo JRoute::_('index.php?option=com_modules&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="module-form" class="form-validate form-horizontal">	<fieldset>		<ul class="nav nav-tabs">			<li class="active"><a href="#details" data-toggle="tab"><?php echo JText::_('JDETAILS'); ?></a></li>			<li><a href="#options" data-toggle="tab"><?php echo JText::_('JOPTIONS'); ?></a></li>			<?php if ($hasContent) : ?>				<li><a href="#custom" data-toggle="tab"><?php echo JText::_('COM_MODULES_CUSTOM_OUTPUT'); ?></a></li>			<?php endif; ?>			<?php if ($this->item->client_id == 0) : ?>				<li><a href="#assignment" data-toggle="tab"><?php echo JText::_('COM_MODULES_MENU_ASSIGNMENT'); ?></a></li>			<?php endif; ?>		</ul>		<div class="tab-content">			<div class="tab-pane active" id="details">				<div class="row-fluid">					<div class="span6">						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('title'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('title'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('showtitle'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('showtitle'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('position'); ?>							</div>							<div class="controls">								<?php echo $this->loadTemplate('positions'); ?>							</div>						</div>						<hr />						<?php if ((string) $this->item->xml->name != 'Login Form') : ?>							<div class="control-group">								<div class="control-label">									<?php echo $this->form->getLabel('published'); ?>								</div>								<div class="controls">									<?php echo $this->form->getInput('published'); ?>								</div>							</div>						<?php endif; ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('access'); ?>							</div>						<div class="controls">								<?php echo $this->form->getInput('access'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('ordering'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('ordering'); ?>							</div>						</div>						<?php if ((string) $this->item->xml->name != 'Login Form') : ?>							<div class="control-group">								<div class="control-label">									<?php echo $this->form->getLabel('publish_up'); ?>								</div>								<div class="controls">									<?php echo $this->form->getInput('publish_up'); ?>								</div>							</div>							<div class="control-group">								<div class="control-label">									<?php echo $this->form->getLabel('publish_down'); ?>								</div>								<div class="controls">									<?php echo $this->form->getInput('publish_down'); ?>								</div>							</div>						<?php endif; ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('language'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('language'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('note'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('note'); ?>							</div>						</div>					</div>					<div class="span6">						<?php if ($this->item->xml) : ?>							<?php if ($text = trim($this->item->xml->description)) : ?>								<blockquote>									<h4>										<?php echo JText::_('COM_MODULES_MODULE_DESCRIPTION'); ?>										<?php if ($this->item->id) : ?>											<span class="label label-info"><?php echo JText::_('JGRID_HEADING_ID'); ?> : <?php echo $this->item->id; ?></span>										<?php endif; ?>									</h4>									<hr />									<div>										<?php echo JText::_($text); ?>									</div>									<hr />									<div>										<span class="label"><?php echo $this->item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?></span> / <span class="label"><?php if ($this->item->xml) echo ($text = (string) $this->item->xml->name) ? JText::_($text) : $this->item->module;else echo JText::_('COM_MODULES_ERR_XML');?></span>									</div>								</blockquote>							<?php endif; ?>						<?php else : ?>							<div class="alert alert-error"><?php echo JText::_('COM_MODULES_ERR_XML'); ?></div>						<?php endif; ?>					</div>				</div>			</div>			<div class="tab-pane" id="options">				<?php echo $this->loadTemplate('options'); ?>			</div>			<?php if ($hasContent) : ?>			<div class="tab-pane" id="custom">				<?php echo $this->form->getInput('content'); ?>			</div>			<?php endif; ?>			<?php if ($this->item->client_id == 0) : ?>				<div class="tab-pane" id="assignment">					<?php echo $this->loadTemplate('assignment'); ?>				</div>			<?php endif; ?>		</div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>		<?php echo $this->form->getInput('module'); ?>		<?php echo $this->form->getInput('client_id'); ?>	</fieldset></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('InstallerModelInstall', JPATH_ADMINISTRATOR . '/components/com_installer/models/install.php');/** * Template style controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerTemplate extends JControllerLegacy{	/**	 */	public function cancel()	{		$this->setRedirect('index.php?option=com_templates&view=templates');	}	public function copy()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$this->input->set('installtype', 'folder');		$newName    = $this->input->get('new_name');		$newNameRaw = $this->input->get('new_name', null, 'string');		$templateID = $this->input->getInt('id', 0);		$this->setRedirect('index.php?option=com_templates&view=template&id=' . $templateID);		$model = $this->getModel('Template', 'TemplatesModel');		$model->setState('new_name', $newName);		$model->setState('tmp_prefix', uniqid('template_copy_'));		$model->setState('to_path', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));		// Process only if we have a new name entered		if (strlen($newName) > 0)		{			if (!JFactory::getUser()->authorise('core.create', 'com_templates'))			{				// User is not authorised to delete				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_CREATE_NOT_PERMITTED'));				return false;			}			// Set FTP credentials, if given			JClientHelper::setCredentialsFromRequest('ftp');			// Check that new name is valid			if (($newNameRaw !== null) && ($newName !== $newNameRaw))			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_TEMPLATE_NAME'));				return false;			}			// Check that new name doesn't already exist			if (!$model->checkNewName())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_DUPLICATE_TEMPLATE_NAME'));				return false;			}			// Check that from name does exist and get the folder name			$fromName = $model->getFromName();			if (!$fromName)			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_FROM_NAME'));				return false;			}			// Call model's copy method			if (!$model->copy())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_COPY'));				return false;			}			// Call installation model			$this->input->set('install_directory', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));			$installModel = $this->getModel('Install', 'InstallerModel');			JFactory::getLanguage()->load('com_installer');			if (!$installModel->install())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_INSTALL'));				return false;			}			$this->setMessage(JText::sprintf('COM_TEMPLATES_COPY_SUCCESS', $newName));			$model->cleanup();			return true;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><div id="filter-bar" class="btn-toolbar">	<div class="btn-group pull-right hidden-phone">		<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>			<?php echo $this->pagination->getLimitBox(); ?>	</div>	<div class="filter-search btn-group pull-left">		<label for="filter_search" class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL');?></label>		<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_INSTALLER_LANGUAGES_FILTER_SEARCH_DESC'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_INSTALLER_LANGUAGES_FILTER_SEARCH_DESC'); ?>" />	</div>	<div class="btn-group pull-left hidden-phone">		<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>		<button class="btn hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>	</div></div><div class="clearfix"> </div>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content categories view. * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewCategories extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		$parent		= $this->get('Parent');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		if ($items === false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		$params = &$state->params;		$items = array($parent->id => $items);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevelcat = $params->get('maxLevelcat', -1);		$this->params = &$params;		$this->parent = &$parent;		$this->items  = &$items;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_WEBLINKS_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @return  array  A named array * @return  array */function BannersBuildRoute(&$query){	$segments = array();	if (isset($query['task']))	{		$segments[] = $query['task'];		unset($query['task']);	}	if (isset($query['id']))	{		$segments[] = $query['id'];		unset($query['id']);	}	return $segments;}/** * @return  array  A named array * @param   array * * Formats: * * index.php?/banners/task/id/Itemid * * index.php?/banners/id/Itemid */function BannersParseRoute($segments){	$vars = array();	// view is always the first element of the array	$count = count($segments);	if ($count)	{		$count--;		$segment = array_shift($segments);		if (is_numeric($segment))		{			$vars['id'] = $segment;		}		else		{			$vars['task'] = $segment;		}	}	if ($count)	{		$count--;		$segment = array_shift($segments);		if (is_numeric($segment))		{			$vars['id'] = $segment;		}	}	return $vars;}
<?php/** * @package     Joomla.Libraries * @subpackage  Helper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for standard content style extensions. * * @package     Joomla.Libraries * @subpackage  Helper * @since       3.1 */class JHelperContent{	/**	 * Configure the Linkbar. Must be implemented by each extension.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   3.1	 */	public static function addSubmenu($vName)	{	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  $categoryId  The category ID.	 * @param   integer  $id          The item ID.	 * @param   string   $assetName   The asset name	 *	 * @return  JObject	 *	 * @since   3.1	 */	public static function getActions($categoryId = 0, $id = 0, $assetName = '')	{		// Reverted a change for version 2.5.6		$user	= JFactory::getUser();		$result	= new JObject;		$actions = array(			'core.admin', 'core.manage', 'core.create', 'core.edit', 'core.edit.own', 'core.edit.state', 'core.delete'		);		foreach ($actions as $action)		{			$result->set($action, $user->authorise($action, $assetName));		}		return $result;	}	/**	 * Gets the current language	 *	 * @param   boolean  $detectBrowser  Flag indicating whether to use the browser language as a fallback.	 *	 * @return  string  The language string	 *	 * @since   3.1	 */	public static function getCurrentLanguage($detectBrowser = true)	{		$app = JFactory::getApplication();		$langCode = $app->input->cookie->getString(JApplication::getHash('language'));		// No cookie - let's try to detect browser language or use site default		if (!$langCode)		{			if ($detectBrowser)			{				$langCode = JLanguageHelper::detectLanguage();			}			else			{				$langCode = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');			}		}		return $langCode;	}	/**	* Gets the associated language ID	*	* @param   string  $langCode  The language code to look up	*	* @return  integer  The language ID	*	* @since   3.1	*/	public static function getLanguageId($langCode)	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('lang_id')			->from('#__languages')			->where($db->quoteName('lang_code') . ' = ' . $db->quote($langCode));		$db->setQuery($query);		$id = $db->loadResult();		return $id;	}	/**	 * Gets a row of data from a table	 *	 * @param   JTable  $table  JTable instance for a row.	 *	 * @return  array  Associative array of all columns and values for a row in a table.	 *	 * @since   3.1	 */	public function getRowData($table)	{		$fields = $table->getFields();		$data = array();		foreach ($fields as &$field)		{			$columnName = $field->Field;			$value = $table->$columnName;			$data[$columnName] = $value;		}		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'newsfeed.cancel' || document.formvalidator.isValid(document.id('newsfeed-form')))		{			Joomla.submitform(task, document.getElementById('newsfeed-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="newsfeed-form" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin Newsfeed -->		<div class="span10 form-horizontal">	<fieldset>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_NEWSFEEDS_NEW_NEWSFEED', true) : JText::sprintf('COM_NEWSFEEDS_EDIT_NEWSFEED', $this->item->id, true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('name'); ?></div>				<div class="controls"><?php echo $this->form->getInput('name'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('link'); ?></div>				<div class="controls"><?php echo $this->form->getInput('link'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>				<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('description'); ?></div>				<div class="controls"><?php echo $this->form->getInput('description'); ?></div>			</div>			<div class="span6">				<h4><?php echo JText::_('COM_NEWSFEEDS_FIELDSET_IMAGES');?></h4>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('images'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('images'); ?>					</div>				</div>				<?php foreach ($this->form->getGroup('images') as $field) : ?>					<div class="control-group">						<?php if (!$field->hidden) : ?>							<div class="control-label">								<?php echo $field->label; ?>							</div>						<?php endif; ?>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>				<div class="controls"><?php echo $this->form->getInput('id'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>			</div>			<?php if ($this->item->modified_by) : ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>				</div>			<?php endif; ?>			<?php if ($this->item->version) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('version'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('version'); ?>					</div>				</div>			<?php endif; ?>			<?php if ($this->item->hits) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('hits'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('hits'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>				<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('numarticles'); ?></div>				<div class="controls"><?php echo $this->form->getInput('numarticles'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('cache_time'); ?></div>				<div class="controls"><?php echo $this->form->getInput('cache_time'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('rtl'); ?></div>				<div class="controls"><?php echo $this->form->getInput('rtl'); ?></div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php $fieldSets = $this->form->getFieldsets('params'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $paramstabs = 'params-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php $fieldSets = $this->form->getFieldsets('metadata'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $metadatatabs = 'metadata-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $metadatatabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('metadata'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php if ($assoc) : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>				<?php echo $this->loadTemplate('associations'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Newsfeed -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_users');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_users&view=levels');?>" method="post" id="adminForm" name="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_ACCESS_LEVELS'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_ACCESS_LEVELS'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_TITLE_LEVELS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_RESET'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LEVEL_NAME', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'levels.saveorder'); ?>					<?php endif; ?>				</th>				<th class="nowrap id-col">					<?php echo JText::_('JGRID_HEADING_ID'); ?>				</th>				<th class="width-40">					&#160;				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering  = ($listOrder == 'a.ordering');			$canCreate = $user->authorise('core.create',     'com_users');			$canEdit   = $user->authorise('core.edit',       'com_users');			$canChange = $user->authorise('core.edit.state', 'com_users');			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_users&task=level.edit&id='.$item->id);?>">						<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'levels.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'levels.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>				<td>					&#160;				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Indexer view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewIndexer extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	public function display($tpl = null)	{		JHtml::_('behavior.framework');		JHtml::_('stylesheet', 'com_finder/indexer.css', false, true, false);		JHtml::_('script', 'com_finder/indexer.js', false, true);		JHtml::_('script', 'system/progressbar.js', true, true);		parent::display();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$user		= JFactory::getUser();$userId		= $user->get('id');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_languages');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=languages'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_LANGUAGES_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_LANGUAGES_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="5">						<?php echo JText::_('JGRID_HEADING_ROW_NUMBER'); ?>					</th>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HEADING_TITLE_NATIVE', 'a.title_native', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_FIELD_LANG_TAG_LABEL', 'a.lang_code', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_FIELD_LANG_CODE_LABEL', 'a.sef', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HEADING_LANG_IMAGE', 'a.image', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>						<?php if ($canOrder && $saveOrder) :?>							<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'languages.saveorder'); ?>						<?php endif; ?>					</th>					<th width="5%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HOMEPAGE', '', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.lang_id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="11">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php			foreach ($this->items as $i => $item) :				$ordering  = ($listOrder == 'a.ordering');				$canCreate = $user->authorise('core.create',     'com_languages');				$canEdit   = $user->authorise('core.edit',       'com_languages');				$canChange = $user->authorise('core.edit.state', 'com_languages');			?>				<tr class="row<?php echo $i % 2; ?>">					<td>						<?php echo $this->pagination->getRowOffset($i); ?>					</td>					<td>						<?php echo JHtml::_('grid.id', $i, $item->lang_id); ?>					</td>					<td>						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'languages.', $canChange);?>						<span class="editlinktip hasTip" title="<?php echo JText::_('JGLOBAL_EDIT_ITEM');?>::<?php echo $this->escape($item->title); ?>">						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_languages&task=language.edit&lang_id='.(int) $item->lang_id); ?>">								<?php echo $this->escape($item->title); ?></a>						<?php else : ?>								<?php echo $this->escape($item->title); ?>						<?php endif; ?>						</span>					</td>					<td>						<?php echo $this->escape($item->title_native); ?>					</td>					<td>						<?php echo $this->escape($item->lang_code); ?>					</td>					<td>						<?php echo $this->escape($item->sef); ?>					</td>					<td>						<?php echo $this->escape($item->image); ?>					</td>					<td class="order">						<?php if ($canChange) : ?>							<div class="input-prepend">								<?php if ($saveOrder) :?>									<?php if ($listDirn == 'asc') : ?>										<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'languages.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span><span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'languages.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>									<?php elseif ($listDirn == 'desc') : ?>										<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'languages.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span><span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'languages.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>									<?php endif; ?>								<?php endif; ?>								<?php $disabled = $saveOrder ? '' : 'disabled="disabled"'; ?>								<?php if (!$disabled = $saveOrder) : echo "<span class=\"add-on tip\" title=\"".JText::_('JDISABLED')."\"><i class=\"icon-ban-circle\"></i></span>"; endif;?><input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="width-20 text-area-order" />							</div>						<?php else : ?>							<?php echo $item->ordering; ?>						<?php endif; ?>					</td>					<td class="center">						<?php echo $this->escape($item->access_level); ?>					</td>					<td>						<?php if ($item->home == '1') : ?>							<?php echo JText::_('JYES');?>						<?php else:?>							<?php echo JText::_('JNO');?>						<?php endif;?>					</td>					<td class="center">						<?php echo $this->escape($item->lang_id); ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_redirect&view=links'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', RedirectHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_OLD_URL', 'a.old_url', $listDirn, $listOrder); ?>				</th>				<th class="width-30">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_NEW_URL', 'a.new_url', $listDirn, $listOrder); ?>				</th>				<th class="width-30">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_REFERRER', 'a.referer', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_CREATED_DATE', 'a.created_date', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canCreate = $user->authorise('core.create',     'com_redirect');			$canEdit   = $user->authorise('core.edit',       'com_redirect');			$canChange = $user->authorise('core.edit.state', 'com_redirect');			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_redirect&task=link.edit&id='.$item->id);?>" title="<?php echo $this->escape($item->old_url); ?>">							<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?></a>					<?php else : ?>							<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?>					<?php endif; ?>				</td>				<td>					<?php echo $this->escape($item->new_url); ?>				</td>				<td>					<?php echo $this->escape($item->referer); ?>				</td>				<td class="center">					<?php echo JHtml::_('date', $item->created_date, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo JHtml::_('redirect.published', $item->published, $i); ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<p class="footer-tip">		<?php if ($this->enabled) : ?>			<span class="enabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_ENABLED'); ?></span>		<?php else : ?>			<span class="disabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_DISABLED'); ?></span>		<?php endif; ?>	</p>	<div class="clr"></div>	<?php if (!empty($this->items)) : ?>		<?php echo $this->loadTemplate('addform'); ?>	<?php endif; ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$lang = JFactory::getLanguage();JText::script('COM_FINDER_MAPS_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'map.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_MAPS_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=maps');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_MAPS')); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_MAPS')); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_branch"><?php echo JText::sprintf('COM_FINDER_FILTER_BY', JText::_('COM_FINDER_MAPS')); ?></label>			<select name="filter_branch" class="inputbox" id="filter_branch">				<?php echo JHtml::_('select.options', JHtml::_('finder.mapslist'), 'value', 'text', $this->state->get('filter.branch'));?>			</select>			<label class="selectlabel" for="filter_state"><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'); ?></label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?>			</button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php if (count($this->items) == 0) : ?>			<tr class="row0">				<td class="center" colspan="5">					<?php echo JText::_('COM_FINDER_MAPS_NO_CONTENT'); ?>				</td>			</tr>		<?php endif; ?>		<?php if ($this->state->get('filter.branch') != 1) : ?>			<tr class="row1">				<td colspan="5" class="center">					<a href="#" onclick="document.id('filter_branch').value='1';document.adminForm.submit();">						<?php echo JText::_('COM_FINDER_MAPS_RETURN_TO_BRANCHES'); ?></a>				</td>			</tr>		<?php endif; ?>		<?php $canChange	= JFactory::getUser()->authorise('core.manage',	'com_finder'); ?>		<?php foreach ($this->items as $i => $item) :?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php					$key = FinderHelperLanguage::branchSingular($item->title);					$title = $lang->hasKey($key) ? JText::_($key) : $item->title;					?>					<?php if ($this->state->get('filter.branch') == 1 && $item->num_children) : ?>						<a href="#" onclick="document.id('filter_branch').value='<?php echo (int) $item->id;?>';document.adminForm.submit();" title="<?php echo JText::_('COM_FINDER_MAPS_BRANCH_LINK'); ?>">							<?php echo $this->escape($title); ?></a>					<?php else: ?>						<?php echo $this->escape($title); ?>					<?php endif; ?>					<?php if ($item->num_children > 0) : ?>						<small>(<?php echo $item->num_children; ?>)</small>					<?php elseif ($item->num_nodes > 0) : ?>						<small>(<?php echo $item->num_nodes; ?>)</small>					<?php endif; ?>									</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'maps.', $canChange, 'cb'); ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));JText::script('COM_USERS_GROUPS_CONFIRM_DELETE');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'groups.delete')		{			var f = document.adminForm;			var cb='';<?php foreach ($this->items as $i => $item):?><?php if ($item->user_count > 0):?>			cb = f['cb'+<?php echo $i;?>];			if (cb && cb.checked)			{				if (confirm(Joomla.JText._('COM_USERS_GROUPS_CONFIRM_DELETE')))				{					Joomla.submitform(task);				}				return;			}<?php endif;?><?php endforeach;?>		}		Joomla.submitform(task);	}</script><form action="<?php echo JRoute::_('index.php?option=com_users&view=groups');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_GROUPS_LABEL'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_GROUPS'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="left">						<?php echo JText::_('COM_USERS_HEADING_GROUP_TITLE'); ?>					</th>					<th width="20%">						<?php echo JText::_('COM_USERS_HEADING_USERS_IN_GROUP'); ?>					</th>					<th width="5%">						<?php echo JText::_('JGRID_HEADING_ID'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="4">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create', 'com_users');				$canEdit   = $user->authorise('core.edit',    'com_users');				// If this group is super admin and this user is not super admin, $canEdit is false				if (!$user->authorise('core.admin') && (JAccess::checkGroup($item->id, 'core.admin')))				{					$canEdit = false;				}				$canChange	= $user->authorise('core.edit.state',	'com_users');			?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php if ($canEdit) : ?>							<?php echo JHtml::_('grid.id', $i, $item->id); ?>						<?php endif; ?>					</td>					<td>						<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>						<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=group.edit&id='.$item->id);?>">							<?php echo $this->escape($item->title); ?></a>						<?php else : ?>							<?php echo $this->escape($item->title); ?>						<?php endif; ?>						<?php if (JDEBUG) : ?>							<div class="small"><a href="<?php echo JRoute::_('index.php?option=com_users&view=debuggroup&group_id='.(int) $item->id);?>">							<?php echo JText::_('COM_USERS_DEBUG_GROUP');?></a></div>						<?php endif; ?>					</td>					<td class="center">						<?php echo $item->user_count ? $item->user_count : ''; ?>					</td>					<td class="center">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('behavior.modal');JHtml::_('formbehavior.chosen', 'select');$canDo = UsersHelper::getActions();$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn = $this->escape($this->state->get('list.direction'));$loggeduser = JFactory::getUser();?><form action="<?php echo JRoute::_('index.php?option=com_users&view=users');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<div id="filter-bar" class="btn-toolbar">		<div class="filter-search btn-group pull-left">			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_USERS'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_USERS'); ?>" />		</div>		<div class="btn-group pull-left">			<button type="submit" class="btn tip" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>			<button type="button" class="btn tip" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_RESET'); ?>"><i class="icon-remove"></i></button>		</div>	</div>	<div class="clearfix"> </div>	<table class="table table-striped">		<thead>			<tr>				<th width="1%" class="nowrap center">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<th width="10%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_USERNAME', 'a.username', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ENABLED', 'a.block', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ACTIVATED', 'a.activation', $listDirn, $listOrder); ?>				</th>				<th width="10%" class="nowrap center">					<?php echo JText::_('COM_USERS_HEADING_GROUPS'); ?>				</th>				<th width="15%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_EMAIL', 'a.email', $listDirn, $listOrder); ?>				</th>				<th width="10%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LAST_VISIT_DATE', 'a.lastvisitDate', $listDirn, $listOrder); ?>				</th>				<th width="10%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_REGISTRATION_DATE', 'a.registerDate', $listDirn, $listOrder); ?>				</th>				<th width="1%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canEdit   = $canDo->get('core.edit');			$canChange = $loggeduser->authorise('core.edit.state',	'com_users');			// If this group is super admin and this user is not super admin, $canEdit is false			if ((!$loggeduser->authorise('core.admin')) && JAccess::check($item->id, 'core.admin'))			{				$canEdit   = false;				$canChange = false;			}		?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php if ($canEdit) : ?>						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					<?php endif; ?>				</td>				<td>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=user.edit&id='.(int) $item->id); ?>" title="<?php echo JText::sprintf('COM_USERS_EDIT_USER', $this->escape($item->name)); ?>">							<?php echo $this->escape($item->name); ?></a>					<?php else : ?>						<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<div>						<?php echo JHtml::_('users.filterNotes', $item->note_count, $item->id); ?>						<?php echo JHtml::_('users.notes', $item->note_count, $item->id); ?>						<?php echo JHtml::_('users.addNote', $item->id); ?>					</div>					<?php if (JDEBUG) : ?>						<div class="small"><a href="<?php echo JRoute::_('index.php?option=com_users&view=debuguser&user_id='.(int) $item->id);?>">						<?php echo JText::_('COM_USERS_DEBUG_USER');?></a></div>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->username); ?>				</td>				<td class="center">					<?php if ($canChange) : ?>						<?php						$self = $loggeduser->id == $item->id;						echo JHtml::_('jgrid.state', JHtmlUsers::blockStates($self), $item->block, $i, 'users.', !$self);						?>					<?php else : ?>						<?php echo JText::_($item->block ? 'JNO' : 'JYES'); ?>					<?php endif; ?>				</td>				<td class="center">					<?php					$activated = empty( $item->activation) ? 0 : 1;					echo JHtml::_('jgrid.state', JHtmlUsers::activateStates(), $activated, $i, 'users.', (boolean) $activated);					?>				</td>				<td class="center">					<?php if (substr_count($item->group_names, "\n") > 1) : ?>						<span class="hasTip" title="<?php echo JText::_('COM_USERS_HEADING_GROUPS').'::'.nl2br($item->group_names); ?>"><?php echo JText::_('COM_USERS_USERS_MULTIPLE_GROUPS'); ?></span>					<?php else : ?>						<?php echo nl2br($item->group_names); ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->email); ?>				</td>				<td class="center">					<?php if ($item->lastvisitDate != '0000-00-00 00:00:00'):?>						<?php echo JHtml::_('date', $item->lastvisitDate, 'Y-m-d H:i:s'); ?>					<?php else:?>						<?php echo JText::_('JNEVER'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo JHtml::_('date', $item->registerDate, 'Y-m-d H:i:s'); ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;define('FINDER_PATH_INDEXER', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer');JLoader::register('FinderIndexerHelper', FINDER_PATH_INDEXER . '/helper.php');/** * Suggestions model class for the Finder package. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderModelSuggestions extends JModelList{	/**	 * Context string for the model type.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'com_finder.suggestions';	/**	 * Method to get an array of data items.	 *	 * @return  array  An array of data items.	 *	 * @since   2.5	 */	public function getItems()	{		// Get the items.		$items = parent::getItems();		// Convert them to a simple array.		foreach ($items as $k => $v)		{			$items[$k] = $v->term;		}		return $items;	}	/**	 * Method to build a database query to load the list data.	 *	 * @return  JDatabaseQuery  A database query	 *	 * @since   2.5	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select required fields		$query->select('t.term')			->from($db->quoteName('#__finder_terms') . ' AS t')			->where('t.term LIKE ' . $db->quote($db->escape($this->getState('input'), true) . '%'))			->where('t.common = 0')			->where('t.language IN (' . $db->quote($db->escape($this->getState('language'), true)) . ', ' . $db->quote('*') . ')')			->order('t.links DESC')			->order('t.weight DESC');		return $query;	}	/**	 * Method to get a store id based on model the configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  An identifier string to generate the store id. [optional]	 *	 * @return  string  A store id.	 *	 * @since   2.5	 */	protected function getStoreId($id = '')	{		// Add the search query state.		$id .= ':' . $this->getState('input');		$id .= ':' . $this->getState('language');		// Add the list state.		$id .= ':' . $this->getState('list.start');		$id .= ':' . $this->getState('list.limit');		return parent::getStoreId($id);	}	/**	 * Method to auto-populate the model state.  Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState($ordering = null, $direction = null)	{		// Get the configuration options.		$app = JFactory::getApplication();		$input = $app->input;		$params = JComponentHelper::getParams('com_finder');		$user = JFactory::getUser();		// Get the query input.		$this->setState('input', $input->request->get('q', '', 'string'));		// Set the query language		$lang = FinderIndexerHelper::getDefaultLanguage();		$lang = FinderIndexerHelper::getPrimaryLanguage($lang);		$this->setState('language', $lang);		// Load the list state.		$this->setState('list.start', 0);		$this->setState('list.limit', 10);		// Load the parameters.		$this->setState('params', $params);		// Load the user state.		$this->setState('user.id', (int) $user->get('id'));	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><div class="remind <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<form id="user-registration" action="<?php echo JRoute::_('index.php?option=com_users&task=remind.remind'); ?>" method="post" class="form-validate form-horizontal">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		</fieldset>		<?php endforeach; ?>		<div class="form-actions">			<button type="submit" class="btn btn-primary validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags table * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsTableTag extends JTableNested{	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct($db)	{		parent::__construct('#__tags', 'id', $db);	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 * to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error string	 *	 * @see     JTable::bind	 * @since   3.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['urls']) && $array['urls'])		{			$registry = new JRegistry;			$registry->loadArray($array['urls']);			$array['urls'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function check()	{		// Check for valid name.		if (trim($this->title) == '')		{			throw new UnexpectedValueException(sprintf('The title is empty'));		}		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ((int) $this->publish_down > 0 && $this->publish_down < $this->publish_up)		{			throw new UnexpectedValueException(sprintf('End publish date is before start publish date.'));		}		// Clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// Only process if not empty			// Define array of characters to remove			$bad_characters = array("\n", "\r", "\"", "<", ">");			// Remove bad characters			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey);			// Create array using commas as delimiter			$keys = explode(',', $after_clean);			$clean_keys = array();			foreach($keys as $key)			{				if (trim($key))				{					// Ignore blank keywords					$clean_keys[] = trim($key);				}			}			// Put array back together delimited by ", "			$this->metakey = implode(", ", $clean_keys);		}		// Clean up description -- eliminate quotes and <> brackets		if (!empty($this->metadesc)) {			// Only process if not empty			$bad_characters = array("\"", "<", ">");			$this->metadesc = JString::str_ireplace($bad_characters, "", $this->metadesc);		}		return true;	}	/**	 * Overriden JTable::store to set modified data and user id.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id) {			// Existing item			$this->modified_time		= $date->toSql();			$this->modified_user_id	= $user->get('id');		}		else		{			// New tag. A tag created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created_time) {				$this->created_time = $date->toSql();			}			if (empty($this->created_user_id)) {				$this->created_user_id = $user->get('id');			}		}		// Verify that the alias is unique		$table = JTable::getInstance('Tag', 'TagsTable');		if ($table->load(array('alias' => $this->alias)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_TAGS_ERROR_UNIQUE_ALIAS'));			return false;		}		return parent::store($updateNulls);	}	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @see     http://docs.joomla.org/JTableNested/delete	 */	public function delete($pk = null, $children = false)	{		return parent::delete($pk, $children);		$helper = new JHelperTags;		$helper->tagDeleteInstances($pk);	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create a shortcut for params.$params = $displayData->params;$canEdit = $displayData->params->get('access-edit');JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');?>	<?php if ($params->get('show_title') || $displayData->state == 0 || ($params->get('show_author') && !empty($displayData->author ))) : ?>		<div class="page-header">			<?php if ($params->get('show_title')) : ?>				<h2>					<?php if ($params->get('link_titles') && $params->get('access-view')) : ?>						<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($displayData->slug, $displayData->catid)); ?>">						<?php echo $this->escape($displayData->title); ?></a>					<?php else : ?>						<?php echo $this->escape($displayData->title); ?>					<?php endif; ?>				</h2>			<?php endif; ?>			<?php if ($displayData->state == 0) : ?>				<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>			<?php endif; ?>		</div>	<?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentXML class, provides an easy interface to parse and display XML output * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentXml extends JDocument{	/**	 * Document name	 *	 * @var    string	 * @since  12.1	 */	protected $name = 'joomla';	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'application/xml';		// Set document type		$this->_type = 'xml';	}	/**	 * Render the document.	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since  11.1	 */	public function render($cache = false, $params = array())	{		parent::render();		JResponse::setHeader('Content-disposition', 'inline; filename="' . $this->getName() . '.xml"', true);		return $this->getBuffer();	}	/**	 * Returns the document name	 *	 * @return  string	 *	 * @since  11.1	 */	public function getName()	{		return $this->name;	}	/**	 * Sets the document name	 *	 * @param   string  $name  Document name	 *	 * @return  JDocumentXml instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setName($name = 'joomla')	{		$this->name = $name;		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Oauth * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.response');/** * Joomla Platform class for interacting with an OAuth 2.0 server. * * @package     Joomla.Platform * @subpackage  Oauth * @since       12.3 */class JOAuth2Client{	/**	 * @var    JRegistry  Options for the JOAuth2Client object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $http;	/**	 * @var    JInput  The input object to use in retrieving GET/POST data.	 * @since  12.3	 */	protected $input;	/**	 * @var    JApplicationWeb  The application object to send HTTP headers for redirects.	 * @since  12.3	 */	protected $application;	/**	 * Constructor.	 *	 * @param   JRegistry        $options      JOAuth2Client options object	 * @param   JHttp            $http         The HTTP client object	 * @param   JInput           $input        The input object	 * @param   JApplicationWeb  $application  The application object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JHttp $http = null, JInput $input = null, JApplicationWeb $application = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->http = isset($http) ? $http : new JHttp($this->options);		$this->input = isset($input) ? $input : JFactory::getApplication()->input;		$this->application = isset($application) ? $application : new JApplicationWeb;	}	/**	 * Get the access token or redict to the authentication URL.	 *	 * @return  string  The access token	 *	 * @since   12.3	 */	public function authenticate()	{		if ($data['code'] = $this->input->get('code', false, 'raw'))		{			$data['grant_type'] = 'authorization_code';			$data['redirect_uri'] = $this->getOption('redirecturi');			$data['client_id'] = $this->getOption('clientid');			$data['client_secret'] = $this->getOption('clientsecret');			$response = $this->http->post($this->getOption('tokenurl'), $data);			if ($response->code >= 200 && $response->code < 400)			{				if ($response->headers['Content-Type'] == 'application/json')				{					$token = array_merge(json_decode($response->body, true), array('created' => time()));				}				else				{					parse_str($response->body, $token);					$token = array_merge($token, array('created' => time()));				}				$this->setToken($token);				return $token;			}			else			{				throw new RuntimeException('Error code ' . $response->code . ' received requesting access token: ' . $response->body . '.');			}		}		if ($this->getOption('sendheaders'))		{			$this->application->redirect($this->createUrl());		}		return false;	}	/**	 * Verify if the client has been authenticated	 *	 * @return  boolean  Is authenticated	 *	 * @since   12.3	 */	public function isAuthenticated()	{		$token = $this->getToken();		if (!$token || !array_key_exists('access_token', $token))		{			return false;		}		elseif (array_key_exists('expires_in', $token) && $token['created'] + $token['expires_in'] < time() + 20)		{			return false;		}		else		{			return true;		}	}	/**	 * Create the URL for authentication.	 *	 * @return  JHttpResponse  The HTTP response	 *	 * @since   12.3	 */	public function createUrl()	{		if (!$this->getOption('authurl') || !$this->getOption('clientid'))		{			throw new InvalidArgumentException('Authorization URL and client_id are required');		}		$url = $this->getOption('authurl');		if (strpos($url, '?'))		{			$url .= '&';		}		else		{			$url .= '?';		}		$url .= 'response_type=code';		$url .= '&client_id=' . urlencode($this->getOption('clientid'));		if ($this->getOption('redirecturi'))		{			$url .= '&redirect_uri=' . urlencode($this->getOption('redirecturi'));		}		if ($this->getOption('scope'))		{			$scope = is_array($this->getOption('scope')) ? implode(' ', $this->getOption('scope')) : $this->getOption('scope');			$url .= '&scope=' . urlencode($scope);		}		if ($this->getOption('state'))		{			$url .= '&state=' . urlencode($this->getOption('state'));		}		if (is_array($this->getOption('requestparams')))		{			foreach ($this->getOption('requestparams') as $key => $value)			{				$url .= '&' . $key . '=' . urlencode($value);			}		}		return $url;	}	/**	 * Send a signed Oauth request.	 *	 * @param   string  $url      The URL forf the request.	 * @param   mixed   $data     The data to include in the request	 * @param   array   $headers  The headers to send with the request	 * @param   string  $method   The method with which to send the request	 * @param   int     $timeout  The timeout for the request	 *	 * @return  string  The URL.	 *	 * @since   12.3	 */	public function query($url, $data = null, $headers = array(), $method = 'get', $timeout = null)	{		$token = $this->getToken();		if (array_key_exists('expires_in', $token) && $token['created'] + $token['expires_in'] < time() + 20)		{			if (!$this->getOption('userefresh'))			{				return false;			}			$token = $this->refreshToken($token['refresh_token']);		}		if (!$this->getOption('authmethod') || $this->getOption('authmethod') == 'bearer')		{			$headers['Authorization'] = 'Bearer ' . $token['access_token'];		}		elseif ($this->getOption('authmethod') == 'get')		{			if (strpos($url, '?'))			{				$url .= '&';			}			else			{				$url .= '?';			}			$url .= $this->getOption('getparam') ? $this->getOption('getparam') : 'access_token';			$url .= '=' . $token['access_token'];		}		switch ($method)		{			case 'head':			case 'get':			case 'delete':			case 'trace':			$response = $this->http->$method($url, $headers, $timeout);			break;			case 'post':			case 'put':			case 'patch':			$response = $this->http->$method($url, $data, $headers, $timeout);			break;			default:			throw new InvalidArgumentException('Unknown HTTP request method: ' . $method . '.');		}		if ($response->code < 200 || $response->code >= 400)		{			throw new RuntimeException('Error code ' . $response->code . ' received requesting data: ' . $response->body . '.');		}		return $response;	}	/**	 * Get an option from the JOAuth2Client instance.	 *	 * @param   string  $key  The name of the option to get	 *	 * @return  mixed  The option value	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JOAuth2Client instance.	 *	 * @param   string  $key    The name of the option to set	 * @param   mixed   $value  The option value to set	 *	 * @return  JOAuth2Client  This object for method chaining	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}	/**	 * Get the access token from the JOAuth2Client instance.	 *	 * @return  array  The access token	 *	 * @since   12.3	 */	public function getToken()	{		return $this->getOption('accesstoken');	}	/**	 * Set an option for the JOAuth2Client instance.	 *	 * @param   array  $value  The access token	 *	 * @return  JOAuth2Client  This object for method chaining	 *	 * @since   12.3	 */	public function setToken($value)	{		if (is_array($value) && !array_key_exists('expires_in', $value) && array_key_exists('expires', $value))		{			$value['expires_in'] = $value['expires'];			unset($value['expires']);		}		$this->setOption('accesstoken', $value);		return $this;	}	/**	 * Refresh the access token instance.	 *	 * @param   string  $token  The refresh token	 *	 * @return  array  The new access token	 *	 * @since   12.3	 */	public function refreshToken($token = null)	{		if (!$this->getOption('userefresh'))		{			throw new RuntimeException('Refresh token is not supported for this OAuth instance.');		}		if (!$token)		{			$token = $this->getToken();			if (!array_key_exists('refresh_token', $token))			{				throw new RuntimeException('No refresh token is available.');			}			$token = $token['refresh_token'];		}		$data['grant_type'] = 'refresh_token';		$data['refresh_token'] = $token;		$data['client_id'] = $this->getOption('clientid');		$data['client_secret'] = $this->getOption('clientsecret');		$response = $this->http->post($this->getOption('tokenurl'), $data);		if ($response->code >= 200 || $response->code < 400)		{			if ($response->headers['Content-Type'] == 'application/json')			{				$token = array_merge(json_decode($response->body, true), array('created' => time()));			}			else			{				parse_str($response->body, $token);				$token = array_merge($token, array('created' => time()));			}			$this->setToken($token);			return $token;		}		else		{			throw new Exception('Error code ' . $response->code . ' received refreshing token: ' . $response->body . '.');		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Extended Utility class for batch processing widgets. * * @package     Joomla.Libraries * @subpackage  HTML * @since       1.7 */abstract class JHtmlBatch{	/**	 * Display a batch widget for the access level selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   1.7	 */	public static function access()	{		// Create the batch selector to change an access level on a selection list.		$lines = array(			'<label id="batch-access-lbl" for="batch-access" class="hasTip" title="' . JText::_('JLIB_HTML_BATCH_ACCESS_LABEL') . '::'			. JText::_('JLIB_HTML_BATCH_ACCESS_LABEL_DESC') . '">', JText::_('JLIB_HTML_BATCH_ACCESS_LABEL'), '</label>',			JHtml::_(				'access.assetgrouplist',				'batch[assetgroup_id]', '',				'class="inputbox"',				array(					'title' => JText::_('JLIB_HTML_BATCH_NOCHANGE'),					'id' => 'batch-access')			)		);		return implode("\n", $lines);	}	/**	 * Displays a batch widget for moving or copying items.	 *	 * @param   string  $extension  The extension that owns the category.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   1.7	 */	public static function item($extension)	{		// Create the copy/move options.		$options = array(JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),			JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE')));		// Create the batch selector to change select the category by which to move or copy.		$lines = array('<label id="batch-choose-action-lbl" for="batch-choose-action">', JText::_('JLIB_HTML_BATCH_MENU_LABEL'), '</label>',			'<div id="batch-choose-action" class="control-group">', '<select name="batch[category_id]" class="inputbox" id="batch-category-id">',			'<option value="">' . JText::_('JSELECT') . '</option>',			JHtml::_('select.options', JHtml::_('category.options', $extension)), '</select>',			'</div>', '<div id="batch-move-copy" class="control-group radio">',			JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'), '</div><hr />');		return implode("\n", $lines);	}	/**	 * Display a batch widget for the language selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function language()	{		// Create the batch selector to change the language on a selection list.		$lines = array(			'<label id="batch-language-lbl" for="batch-language-id" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL'),			'</label>',			'<select name="batch[language_id]" class="inputbox" id="batch-language-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_LANGUAGE_NOCHANGE') . '</option>',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text'),			'</select>',		);		return implode("\n", $lines);	}	/**	 * Display a batch widget for the user selector.	 *	 * @param   boolean  $noUser  Choose to display a "no user" option	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function user($noUser = true)	{		$optionNo = '';		if ($noUser)		{			$optionNo = '<option value="0">' . JText::_('JLIB_HTML_BATCH_USER_NOUSER') . '</option>';		}		// Create the batch selector to select a user on a selection list.		$lines = array(			'<label id="batch-user-lbl" for="batch-user" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_USER_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_USER_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_USER_LABEL'),			'</label>',			'<select name="batch[user_id]" class="inputbox" id="batch-user-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_USER_NOCHANGE') . '</option>',			$optionNo,			JHtml::_('select.options', JHtml::_('user.userlist'), 'value', 'text'),			'</select>'		);		return implode("\n", $lines);	}	/**	 * Display a batch widget for the tag selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   3.1	 */	public static function tag()	{		// Create the batch selector to tag items on a selection list.		$lines = array(			'<label id="batch-tag-lbl" for="batch-tag-id" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_TAG_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_TAG_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_TAG_LABEL'),			'</label>',			'<select name="batch[tag]" class="inputbox" id="batch-tag-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_TAG_NOCHANGE') . '</option>',			JHtml::_('select.options', JHtml::_('tag.tags', array('filter.published' => array(1))), 'value', 'text'),			'</select>'		);		return implode("\n", $lines);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$lang = JFactory::getLanguage();$upper_limit = $lang->getUpperLimitSearchWord();JHtml::_('bootstrap.tooltip');?><form id="searchForm" action="<?php echo JRoute::_('index.php?option=com_search');?>" method="post">	<div class="btn-toolbar">		<div class="btn-group pull-left">			<input type="text" name="searchword" placeholder="<?php echo JText::_('COM_SEARCH_SEARCH_KEYWORD'); ?>" id="search-searchword" size="30" maxlength="<?php echo $upper_limit; ?>" value="<?php echo $this->escape($this->origkeyword); ?>" class="inputbox" />		</div>		<div class="btn-group pull-left">			<button name="Search" onclick="this.form.submit()" class="btn hasTooltip" title="<?php echo JText::_('COM_SEARCH_SEARCH');?>"><span class="icon-search"></span></button>		</div>		<input type="hidden" name="task" value="search" />		<div class="clearfix"></div>	</div>	<div class="searchintro<?php echo $this->params->get('pageclass_sfx'); ?>">		<?php if (!empty($this->searchword)):?>		<p><?php echo JText::plural('COM_SEARCH_SEARCH_KEYWORD_N_RESULTS', '<span class="badge badge-info">'. $this->total. '</span>');?></p>		<?php endif;?>	</div>	<fieldset class="phrases">		<legend><?php echo JText::_('COM_SEARCH_FOR');?>		</legend>			<div class="phrases-box">			<?php echo $this->lists['searchphrase']; ?>			</div>			<div class="ordering-box">			<label for="ordering" class="ordering">				<?php echo JText::_('COM_SEARCH_ORDERING');?>			</label>			<?php echo $this->lists['ordering'];?>			</div>	</fieldset>	<?php if ($this->params->get('search_areas', 1)) : ?>		<fieldset class="only">		<legend><?php echo JText::_('COM_SEARCH_SEARCH_ONLY');?></legend>		<?php foreach ($this->searchareas['search'] as $val => $txt) :			$checked = is_array($this->searchareas['active']) && in_array($val, $this->searchareas['active']) ? 'checked="checked"' : '';		?>		<label for="area-<?php echo $val;?>" class="checkbox">			<input type="checkbox" name="areas[]" value="<?php echo $val;?>" id="area-<?php echo $val;?>" <?php echo $checked;?> >			<?php echo JText::_($txt); ?>		</label>		<?php endforeach; ?>		</fieldset>	<?php endif; ?><?php if ($this->total > 0) : ?>	<div class="form-limit">		<label for="limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>		</label>		<?php echo $this->pagination->getLimitBox(); ?>	</div><p class="counter">		<?php echo $this->pagination->getPagesCounter(); ?>	</p><?php endif; ?></form>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksControllerWeblink extends JControllerForm{	/**	 * @since   1.6	 */	protected $view_item = 'form';	/**	 * @since   1.6	 */	protected $view_list = 'categories';	/**	 * Method to add a new record.	 *	 * @return  boolean  True if the article can be added, false if not.	 * @since   1.6	 */	public function add()	{		if (!parent::add())		{			// Redirect to the return page.			$this->setRedirect($this->getReturnPage());		}	}	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data	An array of input data.	 * @return  boolean	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user		= JFactory::getUser();		$categoryId	= JArrayHelper::getValue($data, 'catid', $this->input->getInt('id'), 'int');		$allow		= null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow	= $user->authorise('core.create', $this->option.'.category.'.$categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method to check if you can add a new record.	 *	 * @param   array  $data	An array of input data.	 * @param   string	$key	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId	= (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return JFactory::getUser()->authorise('core.edit', $this->option.'.category.'.$categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to cancel an edit.	 *	 * @param   string	$key	The name of the primary key of the URL variable.	 *	 * @return  Boolean	True if access level checks pass, false otherwise.	 * @since   1.6	 */	public function cancel($key = 'w_id')	{		parent::cancel($key);		// Redirect to the return page.		$this->setRedirect($this->getReturnPage());	}	/**	 * Method to edit an existing record.	 *	 * @param   string	$key	The name of the primary key of the URL variable.	 * @param   string	$urlVar	The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  Boolean	True if access level check and checkout passes, false otherwise.	 * @since   1.6	 */	public function edit($key = null, $urlVar = 'w_id')	{		$result = parent::edit($key, $urlVar);		return $result;	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string	$name	The model name. Optional.	 * @param   string	$prefix	The class prefix. Optional.	 * @param   array  $config	Configuration array for model. Optional.	 *	 * @return  object  The model.	 * @since   1.5	 */	public function getModel($name = 'form', $prefix = '', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId	The primary key id for the item.	 * @param   string	$urlVar		The name of the URL variable for the id.	 *	 * @return  string	The arguments to append to the redirect URL.	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = null)	{		$append = parent::getRedirectToItemAppend($recordId, $urlVar);		$itemId	= $this->input->getInt('Itemid');		$return	= $this->getReturnPage();		if ($itemId)		{			$append .= '&Itemid='.$itemId;		}		if ($return)		{			$append .= '&return='.base64_encode($return);		}		return $append;	}	/**	 * Get the return URL.	 *	 * If a "return" variable has been passed in the request	 *	 * @return  string	The return URL.	 * @since   1.6	 */	protected function getReturnPage()	{		$return = $this->input->get('return', null, 'base64');		if (empty($return) || !JUri::isInternal(base64_decode($return)))		{			return JURI::base();		}		else		{			return base64_decode($return);		}	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 * @since   1.6	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{			$task = $this->getTask();	}	/**	 * Method to save a record.	 *	 * @param   string	$key	The name of the primary key of the URL variable.	 * @param   string	$urlVar	The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  Boolean	True if successful, false otherwise.	 * @since   1.6	 */	public function save($key = null, $urlVar = 'w_id')	{		$result = parent::save($key, $urlVar);		// If ok, redirect to the return page.		if ($result)		{			$this->setRedirect($this->getReturnPage());		}		$model = $this->getModel();		return $result;	}	/**	 * Go to a weblink	 *	 * @return  void	 * @since   1.6	 */	public function go()	{		// Get the ID from the request		$id = $this->input->getInt('id');		// Get the model, requiring published items		$modelLink	= $this->getModel('Weblink', '', array('ignore_request' => true));		$modelLink->setState('filter.published', 1);		// Get the item		$link	= $modelLink->getItem($id);		// Make sure the item was found.		if (empty($link))		{			return JError::raiseWarning(404, JText::_('COM_WEBLINKS_ERROR_WEBLINK_NOT_FOUND'));		}		// Check whether item access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($link->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Check whether category access level allows access.		$modelCat = $this->getModel('Category', 'WeblinksModel', array('ignore_request' => true));		$modelCat->setState('filter.published', 1);		// Get the category		$category = $modelCat->getCategory($link->catid);		// Make sure the category was found.		if (empty($category))		{			return JError::raiseWarning(404, JText::_('COM_WEBLINKS_ERROR_WEBLINK_NOT_FOUND'));		}		// Check whether item access level allows access.		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Redirect to the URL		// TODO: Probably should check for a valid http link		if ($link->url)		{			$modelLink->hit($id);			JFactory::getApplication()->redirect($link->url);		}		else		{			return JError::raiseWarning(404, JText::_('COM_WEBLINKS_ERROR_WEBLINK_URL_INVALID'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of plugin records. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsModelPlugins extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'extension_id', 'a.extension_id',				'name', 'a.name',				'folder', 'a.folder',				'element', 'a.element',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'state', 'a.state',				'enabled', 'a.enabled',				'access', 'a.access', 'access_level',				'ordering', 'a.ordering',				'client_id', 'a.client_id',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$state = $this->getUserStateFromRequest($this->context . '.filter.enabled', 'filter_enabled', '', 'string');		$this->setState('filter.enabled', $state);		$folder = $this->getUserStateFromRequest($this->context . '.filter.folder', 'filter_folder', null, 'cmd');		$this->setState('filter.folder', $folder);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_plugins');		$this->setState('params', $params);		// List state information.		parent::populateState('folder', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.folder');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Returns an object list	 *	 * @param   string The query	 * @param   int    Offset	 * @param   int    The number of records	 * @return  array	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$search = $this->getState('filter.search');		$ordering = $this->getState('list.ordering', 'ordering');		if ($ordering == 'name' || (!empty($search) && stripos($search, 'id:') !== 0))		{			$this->_db->setQuery($query);			$result = $this->_db->loadObjectList();			$this->translate($result);			if (!empty($search))			{				foreach ($result as $i => $item)				{					if (!preg_match("/$search/i", $item->name))					{						unset($result[$i]);					}				}			}			$lang = JFactory::getLanguage();			$direction = ($this->getState('list.direction') == 'desc') ? -1 : 1;			JArrayHelper::sortObjects($result, $ordering, $direction, true, $lang->getLocale());			$total = count($result);			$this->cache[$this->getStoreId('getTotal')] = $total;			if ($total < $limitstart)			{				$limitstart = 0;				$this->setState('list.start', 0);			}			return array_slice($result, $limitstart, $limit ? $limit : null);		}		else		{			if ($ordering == 'ordering')			{				$query->order('a.folder ASC');				$ordering = 'a.ordering';			}			$query->order($this->_db->quoteName($ordering) . ' ' . $this->getState('list.direction'));			if ($ordering == 'folder')			{				$query->order('a.ordering ASC');			}			$result = parent::_getList($query, $limitstart, $limit);			$this->translate($result);			return $result;		}	}	/**	 * Translate a list of objects	 *	 * @param   array The array of objects	 * @return  array The array of translated objects	 */	protected function translate(&$items)	{		$lang = JFactory::getLanguage();		foreach ($items as &$item)		{			$source = JPATH_PLUGINS . '/' . $item->folder . '/' . $item->element;			$extension = 'plg_' . $item->folder . '_' . $item->element;			$lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)				|| $lang->load($extension . '.sys', $source, null, false, false)				|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)				|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);		}	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.extension_id , a.name, a.element, a.folder, a.checked_out, a.checked_out_time,' .					' a.enabled, a.access, a.ordering'			)		)			->from($db->quoteName('#__extensions') . ' AS a')			->where($db->quoteName('type') . ' = ' . $db->quote('plugin'));		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Filter by published state		$published = $this->getState('filter.enabled');		if (is_numeric($published))		{			$query->where('a.enabled = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.enabled IN (0, 1))');		}		// Filter by state		$query->where('a.state >= 0');		// Filter by folder.		if ($folder = $this->getState('filter.folder'))		{			$query->where('a.folder = ' . $db->quote($folder));		}		// Filter by search in id		$search = $this->getState('filter.search');		if (!empty($search) && stripos($search, 'id:') === 0)		{			$query->where('a.extension_id = ' . (int) substr($search, 3));		}		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of newsfeeds. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsViewNewsfeeds extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		NewsfeedsHelper::addSubmenu('newsfeeds');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= NewsfeedsHelper::getActions($state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_NEWSFEEDS_MANAGER_NEWSFEEDS'), 'newsfeeds.png');		if (count($user->getAuthorisedCategories('com_newsfeeds', 'core.create')) > 0)		{			JToolbarHelper::addNew('newsfeed.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('newsfeed.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('newsfeeds.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('newsfeeds.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('newsfeeds.archive');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::checkin('newsfeeds.checkin');			}		if ($state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'newsfeeds.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('newsfeeds.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_newsfeeds');		}		JToolbarHelper::help('JHELP_COMPONENTS_NEWSFEEDS_FEEDS');		JHtmlSidebar::setAction('index.php?option=com_newsfeeds&view=newsfeeds');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.name' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'numarticles' => JText::_('COM_NEWSFEEDS_NUM_ARTICLES_HEADING'),			'a.cache_time' => JText::_('COM_NEWSFEEDS_CACHE_TIME_HEADING'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Template installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterTemplate extends JAdapterInstance{	/**	 * Copy of the XML manifest file	 *	 * @var    string	 * @since  3.1	 */	protected $manifest = null;	/**	 * Name of the extension	 *	 * @var    string	 * @since  3.1	 * */	protected $name = null;	/**	 * The unique identifier for the extension (e.g. mod_login)	 *	 * @var    string	 * @since  3.1	 * */	protected $element = null;	/**	 * Method of system	 *	 * @var    string	 *	 * @since  3.1	 */	protected $route = 'install';	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path where to find language files.	 *	 * @return  JInstallerTemplate	 *	 * @since   3.1	 */	public function loadLanguage($path = null)	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent				->setPath(				'source',				($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/templates/' . $this->parent->extension->element			);		}		$this->manifest = $this->parent->getManifest();		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		$client = (string) $this->manifest->attributes()->client;		// Load administrator language if not set.		if (!$client)		{			$client = 'ADMINISTRATOR';		}		$extension = "tpl_$name";		$lang = JFactory::getLanguage();		$source = $path ? $path : ($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/templates/' . $name;		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', constant('JPATH_' . strtoupper($client)), null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', constant('JPATH_' . strtoupper($client)), $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get a database connector object		$db = $this->parent->getDbo();		$lang = JFactory::getLanguage();		$xml = $this->parent->getManifest();		// Get the client application target		if ($cname = (string) $xml->attributes()->client)		{			// Attempt to map the client to a base path			$client = JApplicationHelper::getClientInfo($cname, true);			if ($client === false)			{				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_UNKNOWN_CLIENT', $cname));				return false;			}			$basePath = $client->path;			$clientId = $client->id;		}		else		{			// No client attribute was found so we assume the site as the client			$cname = 'site';			$basePath = JPATH_SITE;			$clientId = 0;		}		// Set the extension's name		$name = JFilterInput::getInstance()->clean((string) $xml->name, 'cmd');		$element = strtolower(str_replace(" ", "_", $name));		$this->set('name', $name);		$this->set('element', $element);		// Check to see if a template by the same name is already installed.		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('template'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		try		{			$id = $db->loadResult();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_ROLLBACK'), $e->getMessage());			return false;		}		// Set the template root path		$this->parent->setPath('extension_root', $basePath . '/templates/' . $element);		// If it's on the fs...		if (file_exists($this->parent->getPath('extension_root')) && (!$this->parent->isOverwrite() || $this->parent->isUpgrade()))		{			$updateElement = $xml->update;			// Upgrade manually set or update tag detected			if ($this->parent->isUpgrade() || $updateElement)			{				// Force this one				$this->parent->setOverwrite(true);				$this->parent->setUpgrade(true);				if ($id)				{					// If there is a matching extension mark this as an update; semantics really					$this->route = 'update';				}			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is not set				// If we didn't have overwrite set, find an update function or find an update tag so let's call it safe				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT_TPL_INSTALL_ANOTHER_TEMPLATE_USING_DIRECTORY', JText::_('JLIB_INSTALLER_' . $this->route),						$this->parent->getPath('extension_root')					)				);				return false;			}		}		/*		 * If the template directory already exists, then we will assume that the template is already		 * installed or another template is using that directory.		 */		if (file_exists($this->parent->getPath('extension_root')) && !$this->parent->isOverwrite())		{			JLog::add(				JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_ANOTHER_TEMPLATE_USING_DIRECTORY', $this->parent->getPath('extension_root')),				JLog::WARNING, 'jerror'			);			return false;		}		// If the template directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_root')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_root')))			{				$this->parent					->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_FAILED_CREATE_DIRECTORY', $this->parent->getPath('extension_root')));				return false;			}		}		// If we created the template directory and will want to remove it if we have to roll back		// the installation, let's add it to the installation step stack		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_root')));		}		// Copy all the necessary files		if ($this->parent->parseFiles($xml->files, -1) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		if ($this->parent->parseFiles($xml->images, -1) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		if ($this->parent->parseFiles($xml->css, -1) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseMedia($xml->media);		$this->parent->parseLanguages($xml->languages, $clientId);		// Get the template description		$this->parent->set('message', JText::_((string) $xml->description));		// Lastly, we will copy the manifest file to its appropriate place.		if (!$this->parent->copyManifest(-1))		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_TPL_INSTALL_COPY_SETUP'));			return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Extension Registration		 * ---------------------------------------------------------------------------------------------		 */		$row = JTable::getInstance('extension');		if ($this->route == 'update' && $id)		{			$row->load($id);		}		else		{			$row->type = 'template';			$row->element = $this->get('element');			// There is no folder for templates			$row->folder = '';			$row->enabled = 1;			$row->protected = 0;			$row->access = 1;			$row->client_id = $clientId;			$row->params = $this->parent->getParams();			// Custom data			$row->custom_data = '';		}		// Name might change in an update		$row->name = $this->get('name');		$row->manifest_cache = $this->parent->generateManifestCache();		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_ROLLBACK', $db->stderr(true)));			return false;		}		if ($this->route == 'install')		{			$debug = $lang->setDebug(false);			$columns = array($db->quoteName('template'),				$db->quoteName('client_id'),				$db->quoteName('home'),				$db->quoteName('title'),				$db->quoteName('params')			);			$values = array(				$db->quote($row->element), $clientId, $db->quote(0),				$db->quote(JText::sprintf('JLIB_INSTALLER_DEFAULT_STYLE', JText::_($this->get('name')))),				$db->quote($row->params) );			$lang->setDebug($debug);			// Insert record in #__template_styles			$query = $db->getQuery(true)				->insert($db->quoteName('#__template_styles'))				->columns($columns)				->values(implode(',', $values));			$db->setQuery($query);			// There is a chance this could fail but we don't care...			$db->execute();		}		return $row->get('extension_id');	}	/**	 * Custom update method for components	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function update()	{		$this->route = 'update';		return $this->install();	}	/**	 * Custom uninstall method	 *	 * @param   integer  $id  The extension ID	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$retval = true;		// First order of business will be to load the template object table from the database.		// This should give us the necessary information to proceed.		$row = JTable::getInstance('extension');		if (!$row->load((int) $id) || !strlen($row->element))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_ERRORUNKOWNEXTENSION'), JLog::WARNING, 'jerror');			return false;		}		// Is the template we are trying to uninstall a core one?		// Because that is not a good idea...		if ($row->protected)		{			JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_WARNCORETEMPLATE', $row->name), JLog::WARNING, 'jerror');			return false;		}		$name = $row->element;		$clientId = $row->client_id;		// For a template the id will be the template name which represents the subfolder of the templates folder that the template resides in.		if (!$name)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_TEMPLATE_ID_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		// Deny remove default template		$db = $this->parent->getDbo();		$query = "SELECT COUNT(*) FROM #__template_styles WHERE home = '1' AND template = " . $db->quote($name);		$db->setQuery($query);		if ($db->loadResult() != 0)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_TEMPLATE_DEFAULT'), JLog::WARNING, 'jerror');			return false;		}		// Get the template root path		$client = JApplicationHelper::getClientInfo($clientId);		if (!$client)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_INVALID_CLIENT'), JLog::WARNING, 'jerror');			return false;		}		$this->parent->setPath('extension_root', $client->path . '/templates/' . strtolower($name));		$this->parent->setPath('source', $this->parent->getPath('extension_root'));		// We do findManifest to avoid problem when uninstalling a list of extensions: getManifest cache its manifest file		$this->parent->findManifest();		$manifest = $this->parent->getManifest();		if (!($manifest instanceof SimpleXMLElement))		{			// Kill the extension entry			$row->delete($row->extension_id);			unset($row);			// Make sure we delete the folders			JFolder::delete($this->parent->getPath('extension_root'));			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_INVALID_NOTFOUND_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// Remove files		$this->parent->removeFiles($manifest->media);		$this->parent->removeFiles($manifest->languages, $clientId);		// Delete the template directory		if (JFolder::exists($this->parent->getPath('extension_root')))		{			$retval = JFolder::delete($this->parent->getPath('extension_root'));		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_TEMPLATE_DIRECTORY'), JLog::WARNING, 'jerror');			$retval = false;		}		// Set menu that assigned to the template back to default template		$query = 'UPDATE #__menu'			. ' SET template_style_id = 0'			. ' WHERE template_style_id in ('			. '	SELECT s.id FROM #__template_styles s'			. ' WHERE s.template = ' . $db->quote(strtolower($name)) . ' AND s.client_id = ' . $clientId . ')';		$db->setQuery($query);		$db->execute();		$query = 'DELETE FROM #__template_styles WHERE template = ' . $db->quote($name) . ' AND client_id = ' . $clientId;		$db->setQuery($query);		$db->execute();		$row->delete($row->extension_id);		unset($row);		return $retval;	}	/**	 * Discover existing but uninstalled templates	 *	 * @return  array  JExtensionTable list	 */	public function discover()	{		$results = array();		$site_list = JFolder::folders(JPATH_SITE . '/templates');		$admin_list = JFolder::folders(JPATH_ADMINISTRATOR . '/templates');		$site_info = JApplicationHelper::getClientInfo('site', true);		$admin_info = JApplicationHelper::getClientInfo('administrator', true);		foreach ($site_list as $template)		{			if ($template == 'system')			{				// Ignore special system template				continue;			}			$manifest_details = JInstaller::parseXMLInstallFile(JPATH_SITE . "/templates/$template/templateDetails.xml");			$extension = JTable::getInstance('extension');			$extension->set('type', 'template');			$extension->set('client_id', $site_info->id);			$extension->set('element', $template);			$extension->set('folder', '');			$extension->set('name', $template);			$extension->set('state', -1);			$extension->set('manifest_cache', json_encode($manifest_details));			$extension->set('params', '{}');			$results[] = $extension;		}		foreach ($admin_list as $template)		{			if ($template == 'system')			{				// Ignore special system template				continue;			}			$manifest_details = JInstaller::parseXMLInstallFile(JPATH_ADMINISTRATOR . "/templates/$template/templateDetails.xml");			$extension = JTable::getInstance('extension');			$extension->set('type', 'template');			$extension->set('client_id', $admin_info->id);			$extension->set('element', $template);			$extension->set('folder', '');			$extension->set('name', $template);			$extension->set('state', -1);			$extension->set('manifest_cache', json_encode($manifest_details));			$extension->set('params', '{}');			$results[] = $extension;		}		return $results;	}	/**	 * Discover_install	 * Perform an install for a discovered extension	 *	 * @return boolean	 *	 * @since 3.1	 */	public function discover_install()	{		// Templates are one of the easiest		// If its not in the extensions table we just add it		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/templates/' . $this->parent->extension->element . '/templateDetails.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$description = (string) $this->parent->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		$data = new JObject;		foreach ($manifest_details as $key => $value)		{			$data->set($key, $value);		}		$this->parent->extension->params = $this->parent->getParams();		if ($this->parent->extension->store())		{			$db = $this->parent->getDbo();			// Insert record in #__template_styles			$lang = JFactory::getLanguage();			$debug = $lang->setDebug(false);			$columns = array($db->quoteName('template'),				$db->quoteName('client_id'),				$db->quoteName('home'),				$db->quoteName('title'),				$db->quoteName('params')			);			$query = $db->getQuery(true)				->insert($db->quoteName('#__template_styles'))				->columns($columns)				->values(					$db->quote($this->parent->extension->element)						. ',' . $db->quote($this->parent->extension->client_id)						. ',' . $db->quote(0)						. ',' . $db->quote(JText::sprintf('JLIB_INSTALLER_DEFAULT_STYLE', $this->parent->extension->name))						. ',' . $db->quote($this->parent->extension->params)				);			$lang->setDebug($debug);			$db->setQuery($query);			$db->execute();			return $this->parent->extension->get('extension_id');		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally.		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/templates/' . $this->parent->extension->element . '/templateDetails.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterTemplate instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerTemplate extends JInstallerAdapterTemplate{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users component debugging helper. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersHelperDebug{	/**	 * Get a list of the components.	 *	 * @return  array	 * @since   1.6	 */	public static function getComponents()	{		// Initialise variable.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('name AS text, element AS value')			->from('#__extensions')			->where('enabled >= 1')			->where('type =' . $db->quote('component'));		$items = $db->setQuery($query)->loadObjectList();		if (count($items))		{			$lang = JFactory::getLanguage();			foreach ($items as &$item)			{				// Load language				$extension = $item->value;				$source = JPATH_ADMINISTRATOR . '/components/' . $extension;				$lang->load("$extension.sys", JPATH_ADMINISTRATOR, null, false, false)					|| $lang->load("$extension.sys", $source, null, false, false)					|| $lang->load("$extension.sys", JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					|| $lang->load("$extension.sys", $source, $lang->getDefault(), false, false);				// Translate component name				$item->text = JText::_($item->text);			}			// Sort by component name			JArrayHelper::sortObjects($items, 'text', 1, true, $lang->getLocale());		}		return $items;	}	/**	 * Get a list of the actions for the component or code actions.	 *	 * @param   string    The name of the component.	 *	 * @return  array	 * @since   1.6	 */	public static function getDebugActions($component = null)	{		$actions = array();		// Try to get actions for the component		if (!empty($component))		{			$component_actions = JAccess::getActions($component);			if (!empty($component_actions))			{				foreach ($component_actions as &$action)				{					$actions[$action->title] = array($action->name, $action->description);				}			}		}		// Use default actions from configuration if no component selected or component doesn't have actions		if (empty($actions))		{			$filename = JPATH_ADMINISTRATOR . '/components/com_config/models/forms/application.xml';			if (is_file($filename))			{				$xml = simplexml_load_file($filename);				foreach ($xml->children()->fieldset as $fieldset)				{					if ('permissions' == (string) $fieldset['name'])					{						foreach ($fieldset->children() as $field)						{							if ('rules' == (string) $field['name'])							{								foreach ($field->children() as $action)								{									$actions[(string) $action['title']] = array(										(string) $action['name'],										(string) $action['description']									);								}								break;								break;								break;							}						}					}				}				// Load language				$lang = JFactory::getLanguage();				$extension = 'com_config';				$source = JPATH_ADMINISTRATOR . '/components/' . $extension;				$lang->load($extension, JPATH_ADMINISTRATOR, null, false, false)					|| $lang->load($extension, $source, null, false, false)					|| $lang->load($extension, JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					|| $lang->load($extension, $source, $lang->getDefault(), false, false);			}		}		return $actions;	}	/**	 * Get a list of filter options for the levels.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getLevelsOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '1', JText::sprintf('COM_USERS_OPTION_LEVEL_COMPONENT', 1));		$options[] = JHtml::_('select.option', '2', JText::sprintf('COM_USERS_OPTION_LEVEL_CATEGORY', 2));		$options[] = JHtml::_('select.option', '3', JText::sprintf('COM_USERS_OPTION_LEVEL_DEEPER', 3));		$options[] = JHtml::_('select.option', '4', '4');		$options[] = JHtml::_('select.option', '5', '5');		$options[] = JHtml::_('select.option', '6', '6');		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'weblink.cancel' || document.formvalidator.isValid(document.id('adminForm')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task);		}	}</script><div class="edit<?php echo $this->pageclass_sfx; ?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_weblinks&view=form&w_id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate form-vertical">		<div class="btn-toolbar">			<div class="btn-group">				<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('weblink.save')">					<span class="icon-ok"></span> <?php echo JText::_('JSAVE') ?>				</button>			</div>			<div class="btn-group">				<button type="button" class="btn" onclick="Joomla.submitbutton('weblink.cancel')">					<span class="icon-cancel"></span> <?php echo JText::_('JCANCEL') ?>				</button>			</div>		</div>		<hr class="hr-condensed" />		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('title'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('title'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('alias'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('alias'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('catid'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('catid'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('url'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('url'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('tags', 'metadata'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('tags', 'metadata'); ?>			</div>		</div>		<?php if ($this->user->authorise('core.edit.state', 'com_weblinks.weblink')) : ?>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>		<?php endif; ?>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('language'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('language'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('description'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('description'); ?>			</div>		</div>		<input type="hidden" name="return" value="<?php echo $this->return_page;?>" />		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_contact.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_contact&task=contacts.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_contact'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" style="min-width:55px" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>					</th>					<th class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JFEATURED', 'a.featured', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<?php if ($assoc) : ?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tbody>			<?php			$n = count($this->items);			foreach ($this->items as $i => $item) :				$ordering	= $listOrder == 'a.ordering';				$canCreate	= $user->authorise('core.create',     'com_contact.category.'.$item->catid);				$canEdit	= $user->authorise('core.edit',       'com_contact.category.'.$item->catid);				$canCheckin	= $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canEditOwn	= $user->authorise('core.edit.own',   'com_contact.category.'.$item->catid) && $item->created_by == $userId;				$canChange	= $user->authorise('core.edit.state', 'com_contact.category.'.$item->catid) && $canCheckin;				$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_contact&task=edit&type=other&id='.$item->catid);				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel	  = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip<?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>							<input type="text" style="display:none" name="order[]" size="5"							value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />						<?php else : ?>							<span class="sortable-handler inactive" >								<i class="icon-menu"></i>							</span>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'contacts.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'contacts.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit || $canEditOwn) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_contact&task=contact.edit&id='.(int) $item->id); ?>">								<?php echo $this->escape($item->name); ?></a>							<?php else : ?>								<?php echo $this->escape($item->name); ?>							<?php endif; ?>							<span class="small">								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							</span>							<div class="small">								<?php echo $item->category_title; ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'contact.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'contacts.');								endif;								if ($item->featured) :									JHtml::_('dropdown.unfeatured', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.featured', 'cb' . $i, 'contacts.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'contacts.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'contacts.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'contacts.');								endif;								// render dropdown list								echo JHtml::_('dropdown.render');							?>						</div>					</td>					<td align="small hidden-phone">						<?php if (!empty($item->linked_user)) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_users&task=user.edit&id='.$item->user_id);?>"><?php echo $item->linked_user;?></a>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('contact.featured', $item->featured, $i, $canChange); ?>					</td>					<td align="small hidden-phone">						<?php echo $item->access_level; ?>					</td>					<?php if ($assoc) : ?>					<td class="hidden-phone">						<?php if ($item->association) : ?>							<?php echo JHtml::_('contact.association', $item->id); ?>						<?php endif; ?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td align="center hidden-phone">						<?php echo $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewLanguagesHtml $this */// Get version of Joomla! to compare it with the version of the language package$version = new JVersion;?><script type="text/javascript">	function installLanguages()	{		document.id(install_languages_desc).hide();		document.id(wait_installing).show();		document.id(wait_installing_spinner).show();		Install.submitform();	}</script><?php echo JHtml::_('installation.stepbarlanguages'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a				class="btn"				href="#"				onclick="return Install.goToPage('remove');"				rel="prev"				title="<?php echo JText::_('JPREVIOUS'); ?>">				<i class="icon-arrow-left"></i>				<?php echo JText::_('JPREVIOUS'); ?>			</a>			<a				class="btn btn-primary"				href="#"				onclick="installLanguages()"				rel="next"				title="<?php echo JText::_('JNEXT'); ?>">				<i class="icon-arrow-right icon-white"></i>				<?php echo JText::_('JNEXT'); ?>			</a>		</div>	</div>	<h3><?php echo JText::_('INSTL_LANGUAGES'); ?></h3>	<hr class="hr-condensed" />	<?php if (!$this->items) : ?>		<p><?php echo JText::_('INSTL_LANGUAGES_WARNING_NO_INTERNET') ?></p>		<p>			<a href="#"			class="btn btn-primary"			onclick="return Install.goToPage('remove');">			<i class="icon-arrow-left icon-white"></i>			<?php echo JText::_('INSTL_LANGUAGES_WARNING_BACK_BUTTON'); ?>			</a>		</p>		<p><?php echo JText::_('INSTL_LANGUAGES_WARNING_NO_INTERNET2') ?></p>	<?php else : ?>		<p id="install_languages_desc"><?php echo JText::_('INSTL_LANGUAGES_DESC'); ?></p>		<p id="wait_installing" style="display: none;">			<?php echo JText::_('INSTL_LANGUAGES_MESSAGE_PLEASE_WAIT') ?><br />			<div id="wait_installing_spinner" class="spinner spinner-img" style="display: none;"></div>		</p>	<table class="table table-striped table-condensed">			<thead>					<tr>						<th>							<?php echo JText::_('INSTL_LANGUAGES_COLUMN_HEADER_LANGUAGE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_LANGUAGES_COLUMN_HEADER_VERSION'); ?>						</th>					</tr>			</thead>			<tbody>				<?php foreach ($this->items as $i => $language) : ?>					<tr>						<td>							<label class="checkbox">								<input									type="checkbox"									id="cb<?php echo $i; ?>"									name="cid[]"									value="<?php echo $language->update_id; ?>"									/> <?php echo $language->name; ?>									<?php // Display a Note if language pack version is not equal to Joomla version ?>									<?php if (substr($language->version, 0, 3) != $version->RELEASE											|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>										<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>									<?php endif; ?>							</label>						</td>						<td>							<span class="badge"><?php echo $language->version; ?></span>						</td>					</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="InstallLanguages" />		<?php echo JHtml::_('form.token'); ?>	<?php endif; ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to encapsulate a feed entry for the Joomla Platform. * * @property  JFeedPerson  $author         Person responsible for feed entry content. * @property  array        $categories     Categories to which the feed entry belongs. * @property  string       $content        The content of the feed entry. * @property  array        $contributors   People who contributed to the feed entry content. * @property  string       $copyright      Information about rights, e.g. copyrights, held in and over the feed entry. * @property  array        $links          Links associated with the feed entry. * @property  JDate        $publishedDate  The publication date for the feed entry. * @property  JFeed        $source         The feed from which the entry is sourced. * @property  string       $title          A human readable title for the feed entry. * @property  JDate        $updatedDate    The last time the content of the feed entry changed. * @property  string       $uri            Universal, permanent identifier for the feed entry. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedEntry{	/**	 * @var    array  The entry properties.	 * @since  12.3	 */	protected $properties = array(		'uri'  => '',		'title' => '',		'updatedDate' => '',		'content' => '',		'categories' => array(),		'contributors' => array(),		'links' => array()	);	/**	 * Magic method to return values for feed entry properties.	 *	 * @param   string  $name  The name of the property.	 *	 * @return  mixed	 *	 * @since   12.3	 */	public function __get($name)	{		return (isset($this->properties[$name])) ? $this->properties[$name] : null;	}	/**	 * Magic method to set values for feed properties.	 *	 * @param   string  $name   The name of the property.	 * @param   mixed   $value  The value to set for the property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __set($name, $value)	{		// Ensure that setting a date always sets a JDate instance.		if ((($name == 'updatedDate') || ($name == 'publishedDate')) && !($value instanceof JDate))		{			$value = new JDate($value);		}		// Validate that any authors that are set are instances of JFeedPerson or null.		if (($name == 'author') && (!($value instanceof JFeedPerson) || ($value === null)))		{			throw new InvalidArgumentException('JFeedEntry "author" must be of type JFeedPerson. ' . gettype($value) . 'given.');		}		// Validate that any sources that are set are instances of JFeed or null.		if (($name == 'source') && (!($value instanceof JFeed) || ($value === null)))		{			throw new InvalidArgumentException('JFeedEntry "source" must be of type JFeed. ' . gettype($value) . 'given.');		}		// Disallow setting categories, contributors, or links directly.		if (($name == 'categories') || ($name == 'contributors') || ($name == 'links'))		{			throw new InvalidArgumentException('Cannot directly set JFeedEntry property "' . $name . '".');		}		$this->properties[$name] = $value;	}	/**	 * Method to add a category to the feed entry object.	 *	 * @param   string  $name  The name of the category to add.	 * @param   string  $uri   The optional URI for the category to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addCategory($name, $uri = '')	{		$this->properties['categories'][$name] = $uri;		return $this;	}	/**	 * Method to add a contributor to the feed entry object.	 *	 * @param   string  $name   The full name of the person to add.	 * @param   string  $email  The email address of the person to add.	 * @param   string  $uri    The optional URI for the person to add.	 * @param   string  $type   The optional type of person to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addContributor($name, $email, $uri = null, $type = null)	{		$contributor = new JFeedPerson($name, $email, $uri, $type);		// If the new contributor already exists then there is nothing to do, so just return.		foreach ($this->properties['contributors'] as $c)		{			if ($c == $contributor)			{				return $this;			}		}		// Add the new contributor.		$this->properties['contributors'][] = $contributor;		return $this;	}	/**	 * Method to add a link to the feed entry object.	 *	 * @param   JFeedLink  $link  The link object to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addLink(JFeedLink $link)	{		// If the new link already exists then there is nothing to do, so just return.		foreach ($this->properties['links'] as $l)		{			if ($l == $link)			{				return $this;			}		}		// Add the new link.		$this->properties['links'][] = $link;		return $this;	}	/**	 * Method to remove a category from the feed entry object.	 *	 * @param   string  $name  The name of the category to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeCategory($name)	{		unset($this->properties['categories'][$name]);		return $this;	}	/**	 * Method to remove a contributor from the feed entry object.	 *	 * @param   JFeedPerson  $contributor  The person object to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeContributor(JFeedPerson $contributor)	{		// If the contributor exists remove it.		foreach ($this->properties['contributors'] as $k => $c)		{			if ($c == $contributor)			{				unset($this->properties['contributors'][$k]);				$this->properties['contributors'] = array_values($this->properties['contributors']);				return $this;			}		}		return $this;	}	/**	 * Method to remove a link from the feed entry object.	 *	 * @param   JFeedLink  $link  The link object to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeLink(JFeedLink $link)	{		// If the link exists remove it.		foreach ($this->properties['links'] as $k => $l)		{			if ($l == $link)			{				unset($this->properties['links'][$k]);				$this->properties['links'] = array_values($this->properties['links']);				return $this;			}		}		return $this;	}	/**	 * Shortcut method to set the author for the feed entry object.	 *	 * @param   string  $name   The full name of the person to set.	 * @param   string  $email  The email address of the person to set.	 * @param   string  $uri    The optional URI for the person to set.	 * @param   string  $type   The optional type of person to set.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function setAuthor($name, $email, $uri = null, $type = null)	{		$author = new JFeedPerson($name, $email, $uri, $type);		$this->properties['author'] = $author;		return $this;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Plugin class for redirect handling. * * @package     Joomla.Plugin * @subpackage  System.redirect * @since       1.6 */class PlgSystemRedirect extends JPlugin{	/**	 * Object Constructor.	 *	 * @access    public	 * @param   object    The object to observe -- event dispatcher.	 * @param   object    The configuration object for the plugin.	 * @return  void	 * @since   1.6	 */	public function __construct(&$subject, $config)	{		parent::__construct($subject, $config);		// Set the error handler for E_ERROR to be the class handleError method.		JError::setErrorHandling(E_ERROR, 'callback', array('PlgSystemRedirect', 'handleError'));	}	public static function handleError(&$error)	{		// Get the application object.		$app = JFactory::getApplication();		// Make sure the error is a 404 and we are not in the administrator.		if (!$app->isAdmin() and ($error->getCode() == 404))		{			// Get the full current URI.			$uri = JURI::getInstance();			$current = $uri->toString(array('scheme', 'host', 'port', 'path', 'query', 'fragment'));			// Attempt to ignore idiots.			if ((strpos($current, 'mosConfig_') !== false) || (strpos($current, '=http://') !== false))			{				// Render the error page.				JError::customErrorPage($error);			}			// See if the current url exists in the database as a redirect.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select($db->quoteName('new_url'))				->select($db->quoteName('published'))				->from($db->quoteName('#__redirect_links'))				->where($db->quoteName('old_url') . ' = ' . $db->quote($current));			$db->setQuery($query, 0, 1);			$link = $db->loadObject();			// If a redirect exists and is published, permanently redirect.			if ($link and ($link->published == 1))			{				$app->redirect($link->new_url, null, null, true, false);			}			else			{				$referer = empty($_SERVER['HTTP_REFERER']) ? '' : $_SERVER['HTTP_REFERER'];				$db->setQuery('SELECT id FROM ' . $db->quoteName('#__redirect_links') . '  WHERE old_url= ' . $db->quote($current));				$res = $db->loadResult();				if (!$res)				{					// If not, add the new url to the database.					$columns = array(						$db->quoteName('old_url'),						$db->quoteName('new_url'),						$db->quoteName('referer'),						$db->quoteName('comment'),						$db->quoteName('hits'),						$db->quoteName('published'),						$db->quoteName('created_date')					);					$query = $db->getQuery(true)						->insert($db->quoteName('#__redirect_links'), false)						->columns($columns)						->values(							$db->quote($current) . ', ' . $db->quote('') .								' ,' . $db->quote($referer) . ', ' . $db->quote('') . ',1,0, ' .								$db->quote(JFactory::getDate()->toSql())						);					$db->setQuery($query);					$db->execute();				}				else				{					// Existing error url, increase hit counter					$query = $db->getQuery(true)						->update($db->quoteName('#__redirect_links'))						->set($db->quoteName('hits') . ' = ' . $db->quote('hits') . ' + 1')						->where('id = ' . (int) $res);					$db->setQuery($query);					$db->execute();				}				// Render the error page.				JError::customErrorPage($error);			}		}		else		{			// Render the error page.			JError::customErrorPage($error);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Articles list controller class. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactControllerContacts extends JControllerAdmin{	/**	 * Constructor.	 *	 * @param   array  $config	An optional associative array of configuration settings.	 *	 * @return  ContactControllerContacts	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('unfeatured',	'featured');	}	/**	 * Method to toggle the featured setting of a list of contacts.	 *	 * @return  void	 * @since   1.6	 */	public function featured()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user   = JFactory::getUser();		$ids    = $this->input->get('cid', array(), 'array');		$values = array('featured' => 1, 'unfeatured' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		// Get the model.		$model  = $this->getModel();		// Access checks.		foreach ($ids as $i => $id)		{			$item = $model->getItem($id);			if (!$user->authorise('core.edit.state', 'com_contact.category.'.(int) $item->catid))			{				// Prune items that you can't change.				unset($ids[$i]);				JError::raiseNotice(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			}		}		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_CONTACT_NO_ITEM_SELECTED'));		}		else		{			// Publish the items.			if (!$model->featured($ids, $value))			{				JError::raiseWarning(500, $model->getError());			}		}		$this->setRedirect('index.php?option=com_contact&view=contacts');	}	/**	 * Proxy for getModel.	 *	 * @param   string	$name	The name of the model.	 * @param   string	$prefix	The prefix for the PHP class name.	 *	 * @return  JModel	 * @since   1.6	 */	public function getModel($name = 'Contact', $prefix = 'ContactModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$pks   = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}	/**	 * Function that allows child controller access to model data	 * after the item has been deleted.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   integer       $ids    The array of ids for items being deleted.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function postDeleteHook(JModelLegacy $model, $ids = null)	{	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Component Route Helper * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */abstract class NewsfeedsHelperRoute{	protected static $lookup;	/**	 * @param   integer  The route of the newsfeed	 */	public static function getNewsfeedRoute($id, $catid, $language = 0)	{		$needles = array(			'newsfeed'  => array((int) $id)		);		//Create the link		$link = 'index.php?option=com_newsfeeds&view=newsfeed&id='. $id;		if ((int) $catid > 1)		{			$categories = JCategories::getInstance('Newsfeeds');			$category = $categories->get((int) $catid);			if ($category)			{				//TODO Throw error that the category either not exists or is unpublished				$needles['category'] = array_reverse($category->getPath());				$needles['categories'] = $needles['category'];				$link .= '&catid='.$catid;			}		}		if ($language && $language != "*" && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang='.$lang->sef;					$needles['language'] = $language;				}			}		}		if ($item = self::_findItem($needles))		{			$link .= '&Itemid='.$item;		}		elseif ($item = self::_findItem())		{			$link .= '&Itemid='.$item;		}		return $link;	}	public static function getCategoryRoute($catid, $language = 0)	{		if ($catid instanceof JCategoryNode)		{			$id = $catid->id;			$category = $catid;		}		else		{			$id = (int) $catid;			$category = JCategories::getInstance('Newsfeeds')->get($id);		}		if ($id < 1)		{			$link = '';		}		else		{			//Create the link			$link = 'index.php?option=com_newsfeeds&view=category&id='.$id;			$needles = array(				'category' => array($id)			);			if ($language && $language != "*" && JLanguageMultilang::isEnabled())			{				$db		= JFactory::getDbo();				$query	= $db->getQuery(true)					->select('a.sef AS sef')					->select('a.lang_code AS lang_code')					->from('#__languages AS a');				$db->setQuery($query);				$langs = $db->loadObjectList();				foreach ($langs as $lang)				{					if ($language == $lang->lang_code)					{						$link .= '&lang='.$lang->sef;						$needles['language'] = $language;					}				}			}			if ($item = self::_findItem($needles))			{				$link .= '&Itemid='.$item;			}			else			{				if ($category)				{					$catids = array_reverse($category->getPath());					$needles = array(						'category' => $catids,						'categories' => $catids					);					if ($item = self::_findItem($needles))					{						$link .= '&Itemid='.$item;					}					elseif ($item = self::_findItem())					{						$link .= '&Itemid='.$item;					}				}			}		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component	= JComponentHelper::getComponent('com_newsfeeds');			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items = $menus->getItems($attributes, $values);			foreach ($items as $item)			{				if (isset($item->query) && isset($item->query['view']))				{					$view = $item->query['view'];				if (!isset(self::$lookup[$language][$view]))					{						self::$lookup[$language][$view] = array();					}					if (isset($item->query['id']))					{						// here it will become a bit tricky						// language != * can override existing entries						// language == * cannot override existing entries						if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')						{							self::$lookup[$language][$view][$item->query['id']] = $item->id;						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// if not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.path');require_once JPATH_COMPONENT . '/helpers/menus.php';/** * Menu Item Model for Menus. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusModelItem extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_MENUS_ITEM';	/**	 * @var        string    The help screen key for the menu item.	 * @since   1.6	 */	protected $helpKey = 'JHELP_MENUS_MENU_ITEM_MANAGER_EDIT';	/**	 * @var        string    The help screen base URL for the menu item.	 * @since   1.6	 */	protected $helpURL;	/**	 * @var        boolean    True to use local lookup for the help screen.	 * @since   1.6	 */	protected $helpLocal = false;	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return $user->authorise('core.delete', 'com_menus.item.' . (int) $record->id);		}	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		if (!empty($record->id))		{			return $user->authorise('core.edit.state', 'com_menus.item.' . (int) $record->id);		}		// Default to component settings if menu item not known.		else		{			return parent::canEditState($record);		}	}	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.6	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('COM_MENUS_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['menu_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['menu_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['menu_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		return true;	}	/**	 * Batch copy menu items to a new menu or parent.	 *	 * @param   integer  $value     The new menu or sub-item.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   1.6	 */	protected function batchCopy($value, $pks, $contexts)	{		// $value comes as {menutype}.{parent_id}		$parts = explode('.', $value);		$menuType = $parts[0];		$parentId = (int) JArrayHelper::getValue($parts, 1, 0);		$table = $this->getTable();		$db = $this->getDbo();		$query = $db->getQuery(true);		$i = 0;		// Check that the parent exists		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}		}		// If the parent is 0, set it to the ID of the root item in the tree		if (empty($parentId))		{			if (!$parentId = $table->getRootId())			{				$this->setError($db->getErrorMsg());				return false;			}		}		// Check that user has create permission for menus		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_CREATE'));			return false;		}		// We need to log the parent ID		$parents = array();		// Calculate the emergency stop count as a precaution against a runaway loop bug		$query->select('COUNT(id)')			->from($db->quoteName('#__menu'));		$db->setQuery($query);		try		{			$count = $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Parent exists so we let's proceed		while (!empty($pks) && $count > 0)		{			// Pop the first id off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Copy is a bit tricky, because we also need to copy the children			$query->clear()				->select('id')				->from($db->quoteName('#__menu'))				->where('lft > ' . (int) $table->lft)				->where('rgt < ' . (int) $table->rgt);			$db->setQuery($query);			$childIds = $db->loadColumn();			// Add child ID's to the array only if they aren't already there.			foreach ($childIds as $childId)			{				if (!in_array($childId, $pks))				{					array_push($pks, $childId);				}			}			// Make a copy of the old ID and Parent ID			$oldId = $table->id;			$oldParentId = $table->parent_id;			// Reset the id because we are making a copy.			$table->id = 0;			// If we a copying children, the Old ID will turn up in the parents list			// otherwise it's a new top level item			$table->parent_id = isset($parents[$oldParentId]) ? $parents[$oldParentId] : $parentId;			$table->menutype = $menuType;			// Set the new location in the tree for the node.			$table->setLocation($table->parent_id, 'last-child');			// TODO: Deal with ordering?			//$table->ordering	= 1;			$table->level = null;			$table->lft = null;			$table->rgt = null;			$table->home = 0;			// Alter the title & alias			list($title, $alias) = $this->generateNewTitle($table->parent_id, $table->alias, $table->title);			$table->title = $title;			$table->alias = $alias;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;			// Now we log the old 'parent' to the new 'parent'			$parents[$oldId] = $table->id;			$count--;		}		// Rebuild the hierarchy.		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Rebuild the tree path.		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch move menu items to a new menu or parent.	 *	 * @param   integer  $value     The new menu or sub-item.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	protected function batchMove($value, $pks, $contexts)	{		// $value comes as {menutype}.{parent_id}		$parts = explode('.', $value);		$menuType = $parts[0];		$parentId = (int) JArrayHelper::getValue($parts, 1, 0);		$table = $this->getTable();		$db = $this->getDbo();		$query = $db->getQuery(true);		// Check that the parent exists.		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}		}		// Check that user has create and edit permission for menus		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_CREATE'));			return false;		}		if (!$user->authorise('core.edit', 'com_menus'))		{			$this->setError(JText::_('COM_MENUS_BATCH_MENU_ITEM_CANNOT_EDIT'));			return false;		}		// We are going to store all the children and just moved the menutype		$children = array();		// Parent exists so we let's proceed		foreach ($pks as $pk)		{			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Set the new location in the tree for the node.			$table->setLocation($parentId, 'last-child');			// Set the new Parent Id			$table->parent_id = $parentId;			// Check if we are moving to a different menu			if ($menuType != $table->menutype)			{				// Add the child node ids to the children array.				$query->clear()					->select($db->quoteName('id'))					->from($db->quoteName('#__menu'))					->where($db->quoteName('lft') . ' BETWEEN ' . (int) $table->lft . ' AND ' . (int) $table->rgt);				$db->setQuery($query);				$children = array_merge($children, (array) $db->loadColumn());			}			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Rebuild the tree path.			if (!$table->rebuildPath())			{				$this->setError($table->getError());				return false;			}		}		// Process the child rows		if (!empty($children))		{			// Remove any duplicates and sanitize ids.			$children = array_unique($children);			JArrayHelper::toInteger($children);			// Update the menutype field in all nodes where necessary.			$query->clear()				->update($db->quoteName('#__menu'))				->set($db->quoteName('menutype') . ' = ' . $db->quote($menuType))				->where($db->quoteName('id') . ' IN (' . implode(',', $children) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to check if you can save a record.	 *	 * @param   array     $data    An array of input data.	 * @param   string    $key     The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function canSave($data = array(), $key = 'id')	{		return JFactory::getUser()->authorise('core.edit', $this->option);	}	/**	 * Method to get the row form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item = $this->getItem();			$this->setState('item.link', $item->link);			// The type should already be set.		}		else		{			$this->setState('item.link', JArrayHelper::getValue($data, 'link'));			$this->setState('item.type', JArrayHelper::getValue($data, 'type'));		}		// Get the form.		$form = $this->loadForm('com_menus.item', 'item', array('control' => 'jform', 'load_data' => $loadData), true);		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('menuordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is an article you can edit.			$form->setFieldAttribute('menuordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = array_merge((array) $this->getItem(), (array) JFactory::getApplication()->getUserState('com_menus.edit.item.data', array()));		$this->preprocessData('com_menus.item', $data);		return $data;	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL, 'local' => $this->helpLocal);	}	/**	 * Method to get a menu item.	 *	 * @param   integer    $pk    An optional id of the object to get, otherwise the id from the model state is used.	 *	 * @return  mixed  Menu item data object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('item.id');		// Get a level row instance.		$table = $this->getTable();		// Attempt to load the row.		$table->load($pk);		// Check for a table object error.		if ($error = $table->getError())		{			$this->setError($error);			return false;		}		// Prime required properties.		if ($type = $this->getState('item.type'))		{			$table->type = $type;		}		if (empty($table->id))		{			$table->parent_id = $this->getState('item.parent_id');			$table->menutype = $this->getState('item.menutype');			$table->params = '{}';		}		// If the link has been set in the state, possibly changing link type.		if ($link = $this->getState('item.link'))		{			// Check if we are changing away from the actual link type.			if (MenusHelper::getLinkKey($table->link) != MenusHelper::getLinkKey($link))			{				$table->link = $link;			}		}		switch ($table->type)		{			case 'alias':				$table->component_id = 0;				$args = array();				parse_str(parse_url($table->link, PHP_URL_QUERY), $args);				break;			case 'separator':			case 'heading':				$table->link = '';				$table->component_id = 0;				break;			case 'url':				$table->component_id = 0;				parse_str(parse_url($table->link, PHP_URL_QUERY));				break;			case 'component':			default:				// Enforce a valid type.				$table->type = 'component';				// Ensure the integrity of the component_id field is maintained, particularly when changing the menu item type.				$args = array();				parse_str(parse_url($table->link, PHP_URL_QUERY), $args);				if (isset($args['option']))				{					// Load the language file for the component.					$lang = JFactory::getLanguage();					$lang->load($args['option'], JPATH_ADMINISTRATOR, null, false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR . '/components/' . $args['option'], null, false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)						|| $lang->load($args['option'], JPATH_ADMINISTRATOR . '/components/' . $args['option'], $lang->getDefault(), false, false);					// Determine the component id.					$component = JComponentHelper::getComponent($args['option']);					if (isset($component->id))					{						$table->component_id = $component->id;					}				}				break;		}		// We have a valid type, inject it into the state for forms to use.		$this->setState('item.type', $table->type);		// Convert to the JObject before adding the params.		$properties = $table->getProperties(1);		$result = JArrayHelper::toObject($properties);		// Convert the params field to an array.		$registry = new JRegistry;		$registry->loadString($table->params);		$result->params = $registry->toArray();		// Merge the request arguments in to the params for a component.		if ($table->type == 'component')		{			// Note that all request arguments become reserved parameter names.			$result->request = $args;			$result->params = array_merge($result->params, $args);		}		if ($table->type == 'alias')		{			// Note that all request arguments become reserved parameter names.			$args = array();			parse_str(parse_url($table->link, PHP_URL_QUERY), $args);			$result->params = array_merge($result->params, $args);		}		if ($table->type == 'url')		{			// Note that all request arguments become reserved parameter names.			$args = array();			parse_str(parse_url($table->link, PHP_URL_QUERY), $args);			$result->params = array_merge($result->params, $args);		}		// Load associated menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			if ($pk != null)			{				$result->associations = MenusHelper::getAssociations($pk);			}			else			{				$result->associations = array();			}		}		$result->menuordering = $pk;		return $result;	}	/**	 * Get the list of modules not in trash.	 *	 * @return  mixed  An array of module records (id, title, position), or false on error.	 * @since   1.6	 */	public function getModules()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		// Join on the module-to-menu mapping table.		// We are only interested if the module is displayed on ALL or THIS menu item (or the inverse ID number).		//sqlsrv changes for modulelink to menu manager		$query->select('a.id, a.title, a.position, a.published, map.menuid')			->from('#__modules AS a')			->join('LEFT', sprintf('#__modules_menu AS map ON map.moduleid = a.id AND map.menuid IN (0, %1$d, -%1$d)', $this->getState('item.id')))			->select('(SELECT COUNT(*) FROM #__modules_menu WHERE moduleid = a.id AND menuid < 0) AS ' . $db->quoteName('except'));		// Join on the asset groups table.		$query->select('ag.title AS access_title')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access')			->where('a.published >= 0')			->where('a.client_id = 0')			->order('a.position, a.ordering');		$db->setQuery($query);		try		{			$result = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		return $result;	}	/**	 * A protected method to get the where clause for the reorder	 * This ensures that the row will be moved relative to a row with the same menutype	 *	 * @param   JTableMenu $table instance	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		return 'menutype = ' . $this->_db->quote($table->menutype);	}	/**	 * Returns a Table object, always creating it	 *	 * @param   type      $type      The table type to instantiate	 * @param   string    $prefix    A prefix for the table class name. Optional.	 * @param   array     $config    Configuration array for model. Optional.	 *	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Menu', $prefix = 'MenusTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState('item.id', $pk);		if (!($parentId = $app->getUserState('com_menus.edit.item.parent_id')))		{			$parentId = $app->input->getInt('parent_id');		}		$this->setState('item.parent_id', $parentId);		$menuType = $app->getUserState('com_menus.edit.item.menutype');		if ($app->input->getString('menutype', false))		{			$menuType = $app->input->getString('menutype', 'mainmenu');		}		$this->setState('item.menutype', $menuType);		if (!($type = $app->getUserState('com_menus.edit.item.type')))		{			$type = $app->input->get('type');			// Note a new menu item will have no field type.			// The field is required so the user has to change it.		}		$this->setState('item.type', $type);		if ($link = $app->getUserState('com_menus.edit.item.link'))		{			$this->setState('item.link', $link);		}		// Load the parameters.		$params = JComponentHelper::getParams('com_menus');		$this->setState('params', $params);	}	/**	 * @param   object    $form    A form object.	 * @param   mixed     $data    The data expected for the form.	 *	 * @return  void	 * @since   1.6	 * @throws    Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		$link = $this->getState('item.link');		$type = $this->getState('item.type');		$formFile = false;		// Initialise form with component view params if available.		if ($type == 'component')		{			$link = htmlspecialchars_decode($link);			// Parse the link arguments.			$args = array();			parse_str(parse_url(htmlspecialchars_decode($link), PHP_URL_QUERY), $args);			// Confirm that the option is defined.			$option = '';			$base = '';			if (isset($args['option']))			{				// The option determines the base path to work with.				$option = $args['option'];				$base = JPATH_SITE . '/components/' . $option;			}			// Confirm a view is defined.			$formFile = false;			if (isset($args['view']))			{				$view = $args['view'];				// Determine the layout to search for.				if (isset($args['layout']))				{					$layout = $args['layout'];				}				else				{					$layout = 'default';				}				$formFile = false;				// Check for the layout XML file. Use standard xml file if it exists.				$path = JPath::clean($base . '/views/' . $view . '/tmpl/' . $layout . '.xml');				if (is_file($path))				{					$formFile = $path;				}				// if custom layout, get the xml file from the template folder				// template folder is first part of file name -- template:folder				if (!$formFile && (strpos($layout, ':') > 0))				{					$temp = explode(':', $layout);					$templatePath = JPATH::clean(JPATH_SITE . '/templates/' . $temp[0] . '/html/' . $option . '/' . $view . '/' . $temp[1] . '.xml');					if (is_file($templatePath))					{						$formFile = $templatePath;					}				}			}			//Now check for a view manifest file			if (!$formFile)			{				if (isset($view) && is_file($path = JPath::clean($base . '/views/' . $view . '/metadata.xml')))				{					$formFile = $path;				}				else				{					//Now check for a component manifest file					$path = JPath::clean($base . '/metadata.xml');					if (is_file($path))					{						$formFile = $path;					}				}			}		}		if ($formFile)		{			// If an XML file was found in the component, load it first.			// We need to qualify the full path to avoid collisions with component file names.			if ($form->loadFile($formFile, true, '/metadata') == false)			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Attempt to load the xml file.			if (!$xml = simplexml_load_file($formFile))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Get the help data from the XML file if present.			$help = $xml->xpath('/metadata/layout/help');		}		else		{			// We don't have a component. Load the form XML to get the help path			$xmlFile = JPath::find(JPATH_ROOT . '/administrator/components/com_menus/models/forms', 'item_' . $type . '.xml');			// Attempt to load the xml file.			if ($xmlFile && !$xml = simplexml_load_file($xmlFile))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Get the help data from the XML file if present.			$help = $xml->xpath('/form/help');		}		if (!empty($help))		{			$helpKey = trim((string) $help[0]['key']);			$helpURL = trim((string) $help[0]['url']);			$helpLoc = trim((string) $help[0]['local']);			$this->helpKey = $helpKey ? $helpKey : $this->helpKey;			$this->helpURL = $helpURL ? $helpURL : $this->helpURL;			$this->helpLocal = (($helpLoc == 'true') || ($helpLoc == '1') || ($helpLoc == 'local')) ? true : false;		}		// Now load the component params.		// TODO: Work out why 'fixing' this breaks JForm		if ($isNew = false)		{			$path = JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $option . '/config.xml');		}		else		{			$path = 'null';		}		if (is_file($path))		{			// Add the component params last of all to the existing form.			if (!$form->load($path, true, '/config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Load the specific type file		if (!$form->loadFile('item_' . $type, false, false))		{			throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));		}		// Association menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_MENUS_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if ($tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'menuitem');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');					$option = $field->addChild('option', 'COM_MENUS_ITEM_FIELD_ASSOCIATION_NO_VALUE');					$option->addAttribute('value', '');				}			}			if ($add)			{				$form->load($addform, false);			}		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method rebuild the entire nested set tree.	 *	 * @return  boolean  False on failure or error, true otherwise.	 * @since   1.6	 */	public function rebuild()	{		// Initialiase variables.		$db = $this->getDbo();		$table = $this->getTable();		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Convert the parameters not in JSON format.		$db->setQuery(			'SELECT id, params' .				' FROM #__menu' .				' WHERE params NOT LIKE ' . $db->quote('{%') .				'  AND params <> ' . $db->quote('')		);		try		{			$items = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		foreach ($items as &$item)		{			$registry = new JRegistry;			$registry->loadString($item->params);			$params = (string) $registry;			$db->setQuery(				'UPDATE #__menu' .					' SET params = ' . $db->quote($params) .					' WHERE id = ' . (int) $item->id			);			if (!$db->execute())			{				$this->setError($error);				return false;			}			unset($registry);		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to save the form data.	 *	 * @param   array  $data    The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$pk = (!empty($data['id'])) ? $data['id'] : (int) $this->getState('item.id');		$isNew = true;		$table = $this->getTable();		// Load the row if saving an existing item.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		if (!$isNew && $table->menutype == $data['menutype'])		{			if ($table->parent_id == $data['parent_id'])			{				// If first is chosen make the item the first child of the selected parent.				if ($data['menuordering'] == -1)				{					$table->setLocation($data['parent_id'], 'first-child');				}				// If last is chosen make it the last child of the selected parent.				elseif ($data['menuordering'] == -2)				{					$table->setLocation($data['parent_id'], 'last-child');				}				// Don't try to put an item after itself. All other ones put after the selected item.				// $data['id'] is empty means it's a save as copy				elseif ($data['menuordering'] && $table->id != $data['menuordering'] || empty($data['id']))				{					$table->setLocation($data['menuordering'], 'after');				}				// Just leave it where it is if no change is made.				elseif ($data['menuordering'] && $table->id == $data['menuordering'])				{					unset($data['menuordering']);				}			}			// Set the new parent id if parent id not matched and put in last position			else			{				$table->setLocation($data['parent_id'], 'last-child');			}		}		// We have a new item, so it is not a change.		elseif ($isNew)		{			$table->setLocation($data['parent_id'], 'last-child');		}		// The menu type has changed so we need to just put this at the bottom		// of the root level.		else		{			$table->setLocation(1, 'last-child');		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Alter the title & alias for save as copy.  Also, unset the home record.		if (!$isNew && $data['id'] == 0)		{			list($title, $alias) = $this->generateNewTitle($table->parent_id, $table->alias, $table->title);			$table->title = $title;			$table->alias = $alias;			$table->published = 0;			$table->home = 0;		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Rebuild the tree path.		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		$this->setState('item.id', $table->id);		$this->setState('item.menutype', $table->menutype);		// Load associated menu items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			// Adding self to the association			$associations = $data['associations'];			foreach ($associations as $tag => $id)			{				if (empty($id))				{					unset($associations[$tag]);				}			}			// Detecting all item menus			$all_language = $table->language == '*';			if ($all_language && !empty($associations))			{				JError::raiseNotice(403, JText::_('COM_MENUS_ERROR_ALL_LANGUAGE_ASSOCIATED'));			}			$associations[$table->language] = $table->id;			// Deleting old association for these items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->delete('#__associations')				->where('context=' . $db->quote('com_menus.item'))				->where('id IN (' . implode(',', $associations) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}			if (!$all_language && count($associations) > 1)			{				// Adding new association for these items				$key = md5(json_encode($associations));				$query->clear()					->insert('#__associations');				foreach ($associations as $tag => $id)				{					$query->values($id . ',' . $db->quote('com_menus.item') . ',' . $db->quote($key));				}				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}		}		// Clean the cache		$this->cleanCache();		if (isset($data['link']))		{			$base = JURI::base();			$juri = JURI::getInstance($base . $data['link']);			$option = $juri->getVar('option');			// Clean the cache			parent::cleanCache($option);		}		return true;	}	/**	 * Method to save the reordered nested set tree.	 * First we save the new order values in the lft values of the changed ids.	 * Then we invoke the table rebuild to implement the new ordering.	 *	 * @param   array  $idArray      id's of rows to be reordered	 * @param   array  $lft_array    lft values of rows to be reordered	 *	 * @return  boolean false on failuer or error, true otherwise	 * @since   1.6	 */	public function saveorder($idArray = null, $lft_array = null)	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->saveorder($idArray, $lft_array))		{			$this->setError($table->getError());			return false;		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the home state of one or more items.	 *	 * @param   array    $pks      A list of the primary keys to change.	 * @param   integer  $value    The value of the home state.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function setHome(&$pks, $value = 1)	{		$table = $this->getTable();		$pks = (array) $pks;		$user = JFactory::getUser();		$languages = array();		$onehome = false;		// Remember that we can set a home page for different languages,		// so we need to loop through the primary key array.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if (!array_key_exists($table->language, $languages))				{					$languages[$table->language] = true;					if ($table->home == $value)					{						unset($pks[$i]);						JError::raiseNotice(403, JText::_('COM_MENUS_ERROR_ALREADY_HOME'));					}					else					{						$table->home = $value;						if ($table->language == '*')						{							$table->published = 1;						}						if (!$this->canSave($table))						{							// Prune items that you can't change.							unset($pks[$i]);							JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));						}						elseif (!$table->check())						{							// Prune the items that failed pre-save checks.							unset($pks[$i]);							JError::raiseWarning(403, $table->getError());						}						elseif (!$table->store())						{							// Prune the items that could not be stored.							unset($pks[$i]);							JError::raiseWarning(403, $table->getError());						}					}				}				else				{					unset($pks[$i]);					if (!$onehome)					{						$onehome = true;						JError::raiseNotice(403, JText::sprintf('COM_MENUS_ERROR_ONE_HOME'));					}				}			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array       &$pks   A list of the primary keys to change.	 * @param   integer     $value  The value of the published state.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function publish(&$pks, $value = 1)	{		$table = $this->getTable();		$pks = (array) $pks;		// Default menu item existence checks.		if ($value != 1)		{			foreach ($pks as $i => $pk)			{				if ($table->load($pk) && $table->home && $table->language == '*')				{					// Prune items that you can't change.					JError::raiseWarning(403, JText::_('JLIB_DATABASE_ERROR_MENU_UNPUBLISH_DEFAULT_HOME'));					unset($pks[$i]);					break;				}			}		}		// Clean the cache		$this->cleanCache();		// Ensure that previous checks doesn't empty the array		if (empty($pks))		{			return true;		}		return parent::publish($pks, $value);	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   1.6	 */	protected function generateNewTitle($parent_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'parent_id' => $parent_id)))		{			if ($title == $table->title)			{				$title = JString::increment($title);			}			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}	/**	 * Custom clean cache method	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_modules');		parent::cleanCache('mod_menu');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Statistics model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelStatistics extends JModelLegacy{	/**	 * Method to get the component statistics	 *	 * @return  object  The component statistics	 *	 * @since   2.5	 */	public function getData()	{		// Initialise		$db = $this->getDbo();		$query = $db->getQuery(true);		$data = new JObject;		$query->select('COUNT(term_id)')			->from($db->quoteName('#__finder_terms'));		$db->setQuery($query);		$data->term_count = $db->loadResult();		$query->clear()			->select('COUNT(link_id)')			->from($db->quoteName('#__finder_links'));		$db->setQuery($query);		$data->link_count = $db->loadResult();		$query->clear()			->select('COUNT(id)')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' = 1');		$db->setQuery($query);		$data->taxonomy_branch_count = $db->loadResult();		$query->clear()			->select('COUNT(id)')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' > 1');		$db->setQuery($query);		$data->taxonomy_node_count = $db->loadResult();		$query->clear()			->select('t.title AS type_title, COUNT(a.link_id) AS link_count')			->from($db->quoteName('#__finder_links') . ' AS a')			->join('INNER', $db->quoteName('#__finder_types') . ' AS t ON t.id = a.type_id')			->group('a.type_id, t.title')			->order($db->quoteName('type_title'), 'ASC');		$db->setQuery($query);		$data->type_list = $db->loadObjectList();		return $data;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') !== '0') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL').'&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_TAGS_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?>	<?php if ($this->items == false || $n == 0) : ?>		<p> <?php echo JText::_('COM_TAGS_NO_ITEMS'); ?></p></div>	<?php else : ?>		<table class="category table table-striped table-bordered table-hover">			<?php if ($this->params->get('show_headings')) : ?>			<thead>				<tr>					<th id="categorylist_header_title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'c.core_title', $listDirn, $listOrder); ?>					</th>					<?php if ($date = $this->params->get('tag_list_show_date')) : ?>						<th id="categorylist_header_date">							<?php if ($date == "created") : ?>								<?php echo JHtml::_('grid.sort', 'COM_TAGS_'.$date.'_DATE', 'c.core_created_time', $listDirn, $listOrder); ?>							<?php elseif ($date == "modified") : ?>								<?php echo JHtml::_('grid.sort', 'COM_TAGS_'.$date.'_DATE', 'c.core_modified_time', $listDirn, $listOrder); ?>							<?php elseif ($date == "published") : ?>								<?php echo JHtml::_('grid.sort', 'COM_TAGS_'.$date.'_DATE', 'c.core_publish_up', $listDirn, $listOrder); ?>							<?php endif; ?>						</th>					<?php endif; ?>				</tr>			</thead>			<?php endif; ?>			<tbody>				<?php foreach ($this->items as $i => $item) : ?>					<?php if ($this->items[$i]->core_state == 0) : ?>					 <tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">					<?php else: ?>					<tr class="cat-list-row<?php echo $i % 2; ?>" >					<?php endif; ?>						<td headers="categorylist_header_title" class="list-title">							<a href="<?php echo JRoute::_(TagsHelperRoute::getItemRoute($item->content_item_id, $item->core_alias, $item->core_catid, $item->core_language, $item->type_alias, $item->router)); ?>">								<?php echo $this->escape($item->core_title); ?>							</a>							<?php if ($item->core_state == 0) : ?>								<span class="list-published label label-warning">									<?php echo JText::_('JUNPUBLISHED'); ?>								</span>							<?php endif; ?>						</td>						<?php if ($this->params->get('tag_list_show_date')) : ?>							<td headers="categorylist_header_date" class="list-date small">								<?php								echo JHtml::_(									'date', $item->displayDate,									$this->escape($this->params->get('date_format', JText::_('DATE_FORMAT_LC3')))								); ?>							</td>						<?php endif; ?>					</tr>				<?php endforeach; ?>			</tbody>		</table></div>	<?php endif; ?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');$user = JFactory::getUser();$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>		<tr>			<td>				<a class="img-preview" href="<?php echo COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>"><?php echo JHtml::_('image', COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative, JText::sprintf('COM_MEDIA_IMAGE_TITLE', $this->_tmp_img->title, JHtml::_('number.bytes', $this->_tmp_img->size)), array('width' => $this->_tmp_img->width_16, 'height' => $this->_tmp_img->height_16)); ?></a>			</td>			<td class="description">				<a href="<?php echo  COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>" rel="preview"><?php echo $this->escape($this->_tmp_img->title); ?></a>			</td>			<td class="dimensions">				<?php echo JText::sprintf('COM_MEDIA_IMAGE_DIMENSIONS', $this->_tmp_img->width, $this->_tmp_img->height); ?>			</td>			<td class="filesize">				<?php echo JHtml::_('number.bytes', $this->_tmp_img->size); ?>			</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>				<a class="delete-item" target="_top" href="index.php?option=com_media&amp;task=file.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_img->name; ?>" rel="<?php echo $this->_tmp_img->name; ?>"><i class="icon-remove hasTooltip" title="<?php echo JText::_('JACTION_DELETE');?>"></i></a>				<input type="checkbox" name="rm[]" value="<?php echo $this->_tmp_img->name; ?>" />			</td>		<?php endif;?>		</tr><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>
<?php/** * @package     Joomla.Site * @subpackage  mod_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_weblinks/helpers/route.php';require_once JPATH_SITE . '/components/com_weblinks/helpers/category.php';JModelLegacy::addIncludePath(JPATH_SITE . '/components/com_weblinks/models', 'WeblinksModel');/** * Helper for mod_weblinks * * @package     Joomla.Site * @subpackage  mod_weblinks */class ModWeblinksHelper{	public static function getList($params)	{		// Get an instance of the generic articles model		$model = JModelLegacy::getInstance('Category', 'WeblinksModel', array('ignore_request' => true));		// Set application parameters in model		$app = JFactory::getApplication();		$appParams = $app->getParams();		$model->setState('params', $appParams);		// Set the filters based on the module params		$model->setState('list.start', 0);		$model->setState('list.limit', (int) $params->get('count', 5));		$model->setState('filter.state', 1);		$model->setState('filter.publish_date', true);		// Access filter		$access = !JComponentHelper::getParams('com_weblinks')->get('show_noauth');		$model->setState('filter.access', $access);		$ordering = $params->get('ordering', 'ordering');		$model->setState('list.ordering', $ordering == 'order' ? 'ordering' : $ordering);		$model->setState('list.direction', $params->get('direction', 'asc'));		$catid	= (int) $params->get('catid', 0);		$model->setState('category.id', $catid);		// Create query object		$db = JFactory::getDbo();		$query = $db->getQuery(true);		$case_when1 = ' CASE WHEN ';		$case_when1 .= $query->charLength('a.alias', '!=', '0');		$case_when1 .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when1 .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when1 .= ' ELSE ';		$case_when1 .= $a_id.' END as slug';		$case_when2 = ' CASE WHEN ';		$case_when2 .= $query->charLength('c.alias', '!=', '0');		$case_when2 .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when2 .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when2 .= ' ELSE ';		$case_when2 .= $c_id.' END as catslug';		$model->setState(			'list.select',			'a.*, c.published AS c_published,' . $case_when1 . ',' . $case_when2 . ',' . 'DATE_FORMAT(a.created, "%Y-%m-%d") AS created'		);		$model->setState('filter.c.published', 1);		// Filter by language		$model->setState('filter.language', $app->getLanguageFilter());		$items = $model->getItems();		if ($items)		{			foreach ($items as $item)			{				if ($item->params->get('count_clicks', $params->get('count_clicks')) == 1)				{					$item->link	= JRoute::_('index.php?option=com_weblinks&task=weblink.go&catid=' . $item->catslug . '&id=' . $item->slug);				}				else				{					$item->link = $item->url;				}			}			return $items;		}		else		{			return;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * UCM map table * * @package     Joomla.Libraries * @subpackage  Table * @since       3.1 */class JTableUcm extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   3.1	 */	public function __construct($db)	{		parent::__construct('#__ucm_base', 'ucm_id', $db);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Error * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Displays the custom error page when an uncaught exception occurs. * * @package     Joomla.Libraries * @subpackage  Error * @since       3.0 */class JErrorPage{	/**	 * Render the error page based on an exception.	 *	 * @param   Exception  $error  The exception for which to render the error page.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function render(Exception $error)	{		try		{			$app      = JFactory::getApplication();			$document = JDocument::getInstance('error');			if (!$document)			{				// We're probably in an CLI environment				exit($error->getMessage());				$app->close(0);			}			$config = JFactory::getConfig();			// Get the current template from the application			$template = $app->getTemplate();			// Push the error object into the document			$document->setError($error);			if (ob_get_contents())			{				ob_end_clean();			}			$document->setTitle(JText::_('Error') . ': ' . $error->getCode());			$data = $document->render(				false,				array('template' => $template,				'directory' => JPATH_THEMES,				'debug' => $config->get('debug'))			);			// Failsafe to get the error displayed.			if (empty($data))			{				exit($error->getMessage());			}			else			{				// Do not allow cache				JResponse::allowCache(false);				JResponse::setBody($data);				echo JResponse::toString();			}		}		catch (Exception $e)		{			exit('Error displaying the error page: ' . $e->getMessage());		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_newsfeeds.category');$saveOrder	= $listOrder == 'a.ordering';$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'newsfeeds.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_NUM_ARTICLES_HEADING', 'numarticles', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_CACHE_TIME_HEADING', 'a.cache_time', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>					<th class="width-5">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>				<?php endif;?>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'a.ordering');			$canCreate  = $user->authorise('core.create',     'com_newsfeeds.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_newsfeeds.category.' . $item->catid);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_newsfeeds.category.' . $item->catid) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'newsfeeds.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_newsfeeds&task=newsfeed.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->name); ?></a>					<?php else : ?>							<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'newsfeeds.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'newsfeeds.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'newsfeeds.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'newsfeeds.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'newsfeeds.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo (int) $item->numarticles; ?>				</td>				<td class="center">					<?php echo (int) $item->cache_time; ?>				</td>				<?php if ($assoc) : ?>					<td class="center">						<?php if ($item->association) : ?>							<?php echo JHtml::_('newsfeed.association', $item->id); ?>						<?php endif; ?>					</td>				<?php endif;?>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of contacts. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactViewContacts extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @return  void	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		ContactHelper::addSubmenu('contacts');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Preprocess the list of items to find ordering divisions.		// TODO: Complete the ordering stuff with nested sets		foreach ($this->items as &$item)		{			$item->order_up = true;			$item->order_dn = true;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/contact.php';		$canDo	= ContactHelper::getActions($this->state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_CONTACT_MANAGER_CONTACTS'), 'contact.png');		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories('com_contact', 'core.create'))) > 0)		{			JToolbarHelper::addNew('contact.add');		}		if (($canDo->get('core.edit')) || ($canDo->get('core.edit.own')))		{			JToolbarHelper::editList('contact.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('contacts.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('contacts.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('contacts.archive');			JToolbarHelper::checkin('contacts.checkin');		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'contacts.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('contacts.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_contact');		}		JToolbarHelper::help('JHELP_COMPONENTS_CONTACTS_CONTACTS');		JHtmlSidebar::setAction('index.php?option=com_contact');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.name' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'ul.name' => JText::_('COM_CONTACT_FIELD_LINKED_USER_LABEL'),			'a.featured' => JText::_('JFEATURED'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Override Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesControllerOverride extends JControllerForm{	/**	 * Method to edit an existing override	 *	 * @param   	string	$key		The name of the primary key of the URL variable (not used here).	 * @param   	string	$urlVar	The name of the URL variable if different from the primary key (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function edit($key = null, $urlVar = null)	{		$app     = JFactory::getApplication();		$cid     = $this->input->post->get('cid', array(), 'array');		$context = "$this->option.edit.$this->context";		// Get the constant name		$recordId = (count($cid) ? $cid[0] : $this->input->get('id'));		// Access check		if (!$this->allowEdit())		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));			return;		}		$app->setUserState($context.'.data', null);		$this->setRedirect('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'));	}	/**	 * Method to save an override	 *	 * @param   	string	$key		The name of the primary key of the URL variable (not used here).	 * @param   	string	$urlVar	The name of the URL variable if different from the primary key (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$model   = $this->getModel();		$data    = $this->input->post->get('jform', array(), 'array');		$context = "$this->option.edit.$this->context";		$task    = $this->getTask();		$recordId = $this->input->get('id');		$data['id'] = $recordId;		// Access check		if (!$this->allowSave($data, 'id'))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));			return;		}		// Validate the posted data		$form = $model->getForm($data, false);		if (!$form)		{			$app->enqueueMessage($model->getError(), 'error');			return;		}		// Require helper for filter functions called by JForm		require_once JPATH_COMPONENT.'/helpers/languages.php';		// Test whether the data is valid.		$validData = $model->validate($form, $data);		// Check for validation errors.		if ($validData === false)		{			// Get the validation messages			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session			$app->setUserState($context.'.data', $data);			// Redirect back to the edit screen			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'), false));			return;		}		// Attempt to save the data		if (!$model->save($validData))		{			// Save the data in the session			$app->setUserState($context.'.data', $validData);			// Redirect back to the edit screen			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'), false));			return;		}		// Add message of success		$this->setMessage(JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task		switch ($task)		{			case 'apply':				// Set the record data in the session				$recordId = $model->getState($this->context.'.id');				$app->setUserState($context.'.data', null);				// Redirect back to the edit screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($validData['key'], 'id'), false));				break;			case 'save2new':				// Clear the record id and data from the session				$app->setUserState($context.'.data', null);				// Redirect back to the edit screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend(null, 'id'), false));				break;			default:				// Clear the record id and data from the session				$app->setUserState($context.'.data', null);				// Redirect to the list screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));				break;		}	}	/**	 * Method to cancel an edit	 *	 * @param   	string	$key	The name of the primary key of the URL variable (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function cancel($key = null, $test = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$context = "$this->option.edit.$this->context";		$app->setUserState($context.'.data',	null);		$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Element Class. * * @property-read    string  $name      The name of the element. * @property-read    array   $elements  An array of elements. * @property-read    string  $glue      Glue piece. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQueryElement{	/**	 * @var    string  The name of the element.	 * @since  11.1	 */	protected $name = null;	/**	 * @var    array  An array of elements.	 * @since  11.1	 */	protected $elements = null;	/**	 * @var    string  Glue piece.	 * @since  11.1	 */	protected $glue = null;	/**	 * Constructor.	 *	 * @param   string  $name      The name of the element.	 * @param   mixed   $elements  String or array.	 * @param   string  $glue      The glue for elements.	 *	 * @since   11.1	 */	public function __construct($name, $elements, $glue = ',')	{		$this->elements = array();		$this->name = $name;		$this->glue = $glue;		$this->append($elements);	}	/**	 * Magic function to convert the query element to a string.	 *	 * @return  string	 *	 * @since   11.1	 */	public function __toString()	{		if (substr($this->name, -2) == '()')		{			return PHP_EOL . substr($this->name, 0, -2) . '(' . implode($this->glue, $this->elements) . ')';		}		else		{			return PHP_EOL . $this->name . ' ' . implode($this->glue, $this->elements);		}	}	/**	 * Appends element parts to the internal list.	 *	 * @param   mixed  $elements  String or array.	 *	 * @return  void	 *	 * @since   11.1	 */	public function append($elements)	{		if (is_array($elements))		{			$this->elements = array_merge($this->elements, $elements);		}		else		{			$this->elements = array_merge($this->elements, array($elements));		}	}	/**	 * Gets the elements of this element.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getElements()	{		return $this->elements;	}	/**	 * Method to provide deep copy support to nested objects and arrays	 * when cloning.	 *	 * @return  void	 *	 * @since   11.3	 */	public function __clone()	{		foreach ($this as $k => $v)		{			if (is_object($v) || is_array($v))			{				$this->{$k} = unserialize(serialize($v));			}		}	}}/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 * * @method      string  q()   q($text, $escape = true)  Alias for quote method * @method      string  qn()  qs($name, $as = null)     Alias for quoteName method * @method      string  e()   e($text, $extra = false)   Alias for escape method */abstract class JDatabaseQuery{	/**	 * @var    JDatabaseDriver  The database driver.	 * @since  11.1	 */	protected $db = null;	/**	 * @var    string  The SQL query (if a direct query string was provided).	 * @since  12.1	 */	protected $sql = null;	/**	 * @var    string  The query type.	 * @since  11.1	 */	protected $type = '';	/**	 * @var    JDatabaseQueryElement  The query element for a generic query (type = null).	 * @since  11.1	 */	protected $element = null;	/**	 * @var    JDatabaseQueryElement  The select element.	 * @since  11.1	 */	protected $select = null;	/**	 * @var    JDatabaseQueryElement  The delete element.	 * @since  11.1	 */	protected $delete = null;	/**	 * @var    JDatabaseQueryElement  The update element.	 * @since  11.1	 */	protected $update = null;	/**	 * @var    JDatabaseQueryElement  The insert element.	 * @since  11.1	 */	protected $insert = null;	/**	 * @var    JDatabaseQueryElement  The from element.	 * @since  11.1	 */	protected $from = null;	/**	 * @var    JDatabaseQueryElement  The join element.	 * @since  11.1	 */	protected $join = null;	/**	 * @var    JDatabaseQueryElement  The set element.	 * @since  11.1	 */	protected $set = null;	/**	 * @var    JDatabaseQueryElement  The where element.	 * @since  11.1	 */	protected $where = null;	/**	 * @var    JDatabaseQueryElement  The group by element.	 * @since  11.1	 */	protected $group = null;	/**	 * @var    JDatabaseQueryElement  The having element.	 * @since  11.1	 */	protected $having = null;	/**	 * @var    JDatabaseQueryElement  The column list for an INSERT statement.	 * @since  11.1	 */	protected $columns = null;	/**	 * @var    JDatabaseQueryElement  The values list for an INSERT statement.	 * @since  11.1	 */	protected $values = null;	/**	 * @var    JDatabaseQueryElement  The order element.	 * @since  11.1	 */	protected $order = null;	/**	 * @var   object  The auto increment insert field element.	 * @since 11.1	 */	protected $autoIncrementField = null;	/**	 * @var    JDatabaseQueryElement  The call element.	 * @since  12.1	 */	protected $call = null;	/**	 * @var    JDatabaseQueryElement  The exec element.	 * @since  12.1	 */	protected $exec = null;	/**	 * @var    JDatabaseQueryElement  The union element.	 * @since  12.1	 */	protected $union = null;	/**	 * @var    JDatabaseQueryElement  The unionAll element.	 * @since  13.1	 */	protected $unionAll = null;	/**	 * Magic method to provide method alias support for quote() and quoteName().	 *	 * @param   string  $method  The called method.	 * @param   array   $args    The array of arguments passed to the method.	 *	 * @return  string  The aliased method's return value or null.	 *	 * @since   11.1	 */	public function __call($method, $args)	{		if (empty($args))		{			return;		}		switch ($method)		{			case 'q':				return $this->quote($args[0], isset($args[1]) ? $args[1] : true);				break;			case 'qn':				return $this->quoteName($args[0], isset($args[1]) ? $args[1] : null);				break;			case 'e':				return $this->escape($args[0], isset($args[1]) ? $args[1] : false);				break;		}	}	/**	 * Class constructor.	 *	 * @param   JDatabaseDriver  $db  The database driver.	 *	 * @since   11.1	 */	public function __construct(JDatabaseDriver $db = null)	{		$this->db = $db;	}	/**	 * Magic function to convert the query to a string.	 *	 * @return  string	The completed query.	 *	 * @since   11.1	 */	public function __toString()	{		$query = '';		if ($this->sql)		{			return $this->sql;		}		switch ($this->type)		{			case 'element':				$query .= (string) $this->element;				break;			case 'select':				$query .= (string) $this->select;				$query .= (string) $this->from;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				if ($this->where)				{					$query .= (string) $this->where;				}				if ($this->group)				{					$query .= (string) $this->group;				}				if ($this->having)				{					$query .= (string) $this->having;				}				if ($this->order)				{					$query .= (string) $this->order;				}				break;			case 'union':				$query .= (string) $this->union;				break;			case 'unionAll':					$query .= (string) $this->unionAll;					break;			case 'delete':				$query .= (string) $this->delete;				$query .= (string) $this->from;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				if ($this->where)				{					$query .= (string) $this->where;				}				break;			case 'update':				$query .= (string) $this->update;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				$query .= (string) $this->set;				if ($this->where)				{					$query .= (string) $this->where;				}				break;			case 'insert':				$query .= (string) $this->insert;				// Set method				if ($this->set)				{					$query .= (string) $this->set;				}				// Columns-Values method				elseif ($this->values)				{					if ($this->columns)					{						$query .= (string) $this->columns;					}					$elements = $this->values->getElements();					if (!($elements[0] instanceof $this))					{						$query .= ' VALUES ';					}					$query .= (string) $this->values;				}				break;			case 'call':				$query .= (string) $this->call;				break;			case 'exec':				$query .= (string) $this->exec;				break;		}		if ($this instanceof JDatabaseQueryLimitable)		{			$query = $this->processLimit($query, $this->limit, $this->offset);		}		return $query;	}	/**	 * Magic function to get protected variable value	 *	 * @param   string  $name  The name of the variable.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function __get($name)	{		return isset($this->$name) ? $this->$name : null;	}	/**	 * Add a single column, or array of columns to the CALL clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 * The call method can, however, be called multiple times in the same query.	 *	 * Usage:	 * $query->call('a.*')->call('b.id');	 * $query->call(array('a.*', 'b.id'));	 *	 * @param   mixed  $columns  A string or an array of field names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function call($columns)	{		$this->type = 'call';		if (is_null($this->call))		{			$this->call = new JDatabaseQueryElement('CALL', $columns);		}		else		{			$this->call->append($columns);		}		return $this;	}	/**	 * Casts a value to a char.	 *	 * Ensure that the value is properly quoted before passing to the method.	 *	 * Usage:	 * $query->select($query->castAsChar('a'));	 *	 * @param   string  $value  The value to cast as a char.	 *	 * @return  string  Returns the cast value.	 *	 * @since   11.1	 */	public function castAsChar($value)	{		return $value;	}	/**	 * Gets the number of characters in a string.	 *	 * Note, use 'length' to find the number of bytes in a string.	 *	 * Usage:	 * $query->select($query->charLength('a'));	 *	 * @param   string  $field      A value.	 * @param   string  $operator   Comparison operator between charLength integer value and $condition	 * @param   string  $condition  Integer value to compare charLength with.	 *	 * @return  string  The required char length call.	 *	 * @since 11.1	 */	public function charLength($field, $operator = null, $condition = null)	{		return 'CHAR_LENGTH(' . $field . ')' . (isset($operator) && isset($condition) ? ' ' . $operator . ' ' . $condition : '');	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function clear($clause = null)	{		$this->sql = null;		switch ($clause)		{			case 'select':				$this->select = null;				$this->type = null;				break;			case 'delete':				$this->delete = null;				$this->type = null;				break;			case 'update':				$this->update = null;				$this->type = null;				break;			case 'insert':				$this->insert = null;				$this->type = null;				$this->autoIncrementField = null;				break;			case 'from':				$this->from = null;				break;			case 'join':				$this->join = null;				break;			case 'set':				$this->set = null;				break;			case 'where':				$this->where = null;				break;			case 'group':				$this->group = null;				break;			case 'having':				$this->having = null;				break;			case 'order':				$this->order = null;				break;			case 'columns':				$this->columns = null;				break;			case 'values':				$this->values = null;				break;			case 'exec':				$this->exec = null;				$this->type = null;				break;			case 'call':				$this->call = null;				$this->type = null;				break;			case 'limit':				$this->offset = 0;				$this->limit = 0;				break;			case 'union':				$this->union = null;				break;			case 'unionAll':				$this->unionAll = null;				break;			default:				$this->type = null;				$this->select = null;				$this->delete = null;				$this->update = null;				$this->insert = null;				$this->from = null;				$this->join = null;				$this->set = null;				$this->where = null;				$this->group = null;				$this->having = null;				$this->order = null;				$this->columns = null;				$this->values = null;				$this->autoIncrementField = null;				$this->exec = null;				$this->call = null;				$this->union = null;				$this->unionAll = null;				$this->offset = 0;				$this->limit = 0;				break;		}		return $this;	}	/**	 * Adds a column, or array of column names that would be used for an INSERT INTO statement.	 *	 * @param   mixed  $columns  A column name, or array of column names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function columns($columns)	{		if (is_null($this->columns))		{			$this->columns = new JDatabaseQueryElement('()', $columns);		}		else		{			$this->columns->append($columns);		}		return $this;	}	/**	 * Concatenates an array of column names or values.	 *	 * Usage:	 * $query->select($query->concatenate(array('a', 'b')));	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.1	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			return 'CONCATENATE(' . implode(' || ' . $this->quote($separator) . ' || ', $values) . ')';		}		else		{			return 'CONCATENATE(' . implode(' || ', $values) . ')';		}	}	/**	 * Gets the current date and time.	 *	 * Usage:	 * $query->where('published_up < '.$query->currentTimestamp());	 *	 * @return  string	 *	 * @since   11.1	 */	public function currentTimestamp()	{		return 'CURRENT_TIMESTAMP()';	}	/**	 * Returns a PHP date() function compliant date format for the database driver.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the getDateFormat method directly.	 *	 * @return  string  The format string.	 *	 * @since   11.1	 */	public function dateFormat()	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->getDateFormat();	}	/**	 * Creates a formatted dump of the query for debugging purposes.	 *	 * Usage:	 * echo $query->dump();	 *	 * @return  string	 *	 * @since   11.3	 */	public function dump()	{		return '<pre class="jdatabasequery">' . str_replace('#__', $this->db->getPrefix(), $this) . '</pre>';	}	/**	 * Add a table name to the DELETE clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 *	 * Usage:	 * $query->delete('#__a')->where('id = 1');	 *	 * @param   string  $table  The name of the table to delete from.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function delete($table = null)	{		$this->type = 'delete';		$this->delete = new JDatabaseQueryElement('DELETE', null);		if (!empty($table))		{			$this->from($table);		}		return $this;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the escape method directly.	 *	 * Note that 'e' is an alias for this method as it is in JDatabaseDriver.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   11.1	 * @throws  RuntimeException if the internal db property is not a valid object.	 */	public function escape($text, $extra = false)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->escape($text, $extra);	}	/**	 * Add a single column, or array of columns to the EXEC clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 * The exec method can, however, be called multiple times in the same query.	 *	 * Usage:	 * $query->exec('a.*')->exec('b.id');	 * $query->exec(array('a.*', 'b.id'));	 *	 * @param   mixed  $columns  A string or an array of field names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function exec($columns)	{		$this->type = 'exec';		if (is_null($this->exec))		{			$this->exec = new JDatabaseQueryElement('EXEC', $columns);		}		else		{			$this->exec->append($columns);		}		return $this;	}	/**	 * Add a table to the FROM clause of the query.	 *	 * Note that while an array of tables can be provided, it is recommended you use explicit joins.	 *	 * Usage:	 * $query->select('*')->from('#__a');	 *	 * @param   mixed   $tables         A string or array of table names.	 *                                  This can be a JDatabaseQuery object (or a child of it) when used	 *                                  as a subquery in FROM clause along with a value for $subQueryAlias.	 * @param   string  $subQueryAlias  Alias used when $tables is a JDatabaseQuery.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function from($tables, $subQueryAlias = null)	{		if (is_null($this->from))		{			if ($tables instanceof $this)			{				if (is_null($subQueryAlias))				{					throw new RuntimeException('JLIB_DATABASE_ERROR_NULL_SUBQUERY_ALIAS');				}				$tables = '( ' . (string) $tables . ' ) AS ' . $this->quoteName($subQueryAlias);			}			$this->from = new JDatabaseQueryElement('FROM', $tables);		}		else		{			$this->from->append($tables);		}		return $this;	}	/**	 * Used to get a string to extract year from date column.	 *	 * Usage:	 * $query->select($query->year($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing year to be extracted.	 *	 * @return  string  Returns string to extract year from a date.	 *	 * @since   12.1	 */	public function year($date)	{		return 'YEAR(' . $date . ')';	}	/**	 * Used to get a string to extract month from date column.	 *	 * Usage:	 * $query->select($query->month($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing month to be extracted.	 *	 * @return  string  Returns string to extract month from a date.	 *	 * @since   12.1	 */	public function month($date)	{		return 'MONTH(' . $date . ')';	}	/**	 * Used to get a string to extract day from date column.	 *	 * Usage:	 * $query->select($query->day($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing day to be extracted.	 *	 * @return  string  Returns string to extract day from a date.	 *	 * @since   12.1	 */	public function day($date)	{		return 'DAY(' . $date . ')';	}	/**	 * Used to get a string to extract hour from date column.	 *	 * Usage:	 * $query->select($query->hour($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing hour to be extracted.	 *	 * @return  string  Returns string to extract hour from a date.	 *	 * @since   12.1	 */	public function hour($date)	{		return 'HOUR(' . $date . ')';	}	/**	 * Used to get a string to extract minute from date column.	 *	 * Usage:	 * $query->select($query->minute($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing minute to be extracted.	 *	 * @return  string  Returns string to extract minute from a date.	 *	 * @since   12.1	 */	public function minute($date)	{		return 'MINUTE(' . $date . ')';	}	/**	 * Used to get a string to extract seconds from date column.	 *	 * Usage:	 * $query->select($query->second($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing second to be extracted.	 *	 * @return  string  Returns string to extract second from a date.	 *	 * @since   12.1	 */	public function second($date)	{		return 'SECOND(' . $date . ')';	}	/**	 * Add a grouping column to the GROUP clause of the query.	 *	 * Usage:	 * $query->group('id');	 *	 * @param   mixed  $columns  A string or array of ordering columns.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function group($columns)	{		if (is_null($this->group))		{			$this->group = new JDatabaseQueryElement('GROUP BY', $columns);		}		else		{			$this->group->append($columns);		}		return $this;	}	/**	 * A conditions to the HAVING clause of the query.	 *	 * Usage:	 * $query->group('id')->having('COUNT(id) > 5');	 *	 * @param   mixed   $conditions  A string or array of columns.	 * @param   string  $glue        The glue by which to join the conditions. Defaults to AND.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function having($conditions, $glue = 'AND')	{		if (is_null($this->having))		{			$glue = strtoupper($glue);			$this->having = new JDatabaseQueryElement('HAVING', $conditions, " $glue ");		}		else		{			$this->having->append($conditions);		}		return $this;	}	/**	 * Add an INNER JOIN clause to the query.	 *	 * Usage:	 * $query->innerJoin('b ON b.id = a.id')->innerJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function innerJoin($condition)	{		$this->join('INNER', $condition);		return $this;	}	/**	 * Add a table name to the INSERT clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 *	 * Usage:	 * $query->insert('#__a')->set('id = 1');	 * $query->insert('#__a')->columns('id, title')->values('1,2')->values('3,4');	 * $query->insert('#__a')->columns('id, title')->values(array('1,2', '3,4'));	 *	 * @param   mixed    $table           The name of the table to insert data into.	 * @param   boolean  $incrementField  The name of the field to auto increment.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function insert($table, $incrementField=false)	{		$this->type = 'insert';		$this->insert = new JDatabaseQueryElement('INSERT INTO', $table);		$this->autoIncrementField = $incrementField;		return $this;	}	/**	 * Add a JOIN clause to the query.	 *	 * Usage:	 * $query->join('INNER', 'b ON b.id = a.id);	 *	 * @param   string  $type        The type of join. This string is prepended to the JOIN keyword.	 * @param   string  $conditions  A string or array of conditions.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function join($type, $conditions)	{		if (is_null($this->join))		{			$this->join = array();		}		$this->join[] = new JDatabaseQueryElement(strtoupper($type) . ' JOIN', $conditions);		return $this;	}	/**	 * Add a LEFT JOIN clause to the query.	 *	 * Usage:	 * $query->leftJoin('b ON b.id = a.id')->leftJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function leftJoin($condition)	{		$this->join('LEFT', $condition);		return $this;	}	/**	 * Get the length of a string in bytes.	 *	 * Note, use 'charLength' to find the number of characters in a string.	 *	 * Usage:	 * query->where($query->length('a').' > 3');	 *	 * @param   string  $value  The string to measure.	 *	 * @return  int	 *	 * @since   11.1	 */	public function length($value)	{		return 'LENGTH(' . $value . ')';	}	/**	 * Get the null or zero representation of a timestamp for the database driver.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the nullDate method directly.	 *	 * Usage:	 * $query->where('modified_date <> '.$query->nullDate());	 *	 * @param   boolean  $quoted  Optionally wraps the null date in database quotes (true by default).	 *	 * @return  string  Null or zero representation of a timestamp.	 *	 * @since   11.1	 */	public function nullDate($quoted = true)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		$result = $this->db->getNullDate($quoted);		if ($quoted)		{			return $this->db->quote($result);		}		return $result;	}	/**	 * Add a ordering column to the ORDER clause of the query.	 *	 * Usage:	 * $query->order('foo')->order('bar');	 * $query->order(array('foo','bar'));	 *	 * @param   mixed  $columns  A string or array of ordering columns.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function order($columns)	{		if (is_null($this->order))		{			$this->order = new JDatabaseQueryElement('ORDER BY', $columns);		}		else		{			$this->order->append($columns);		}		return $this;	}	/**	 * Add an OUTER JOIN clause to the query.	 *	 * Usage:	 * $query->outerJoin('b ON b.id = a.id')->outerJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function outerJoin($condition)	{		$this->join('OUTER', $condition);		return $this;	}	/**	 * Method to quote and optionally escape a string to database requirements for insertion into the database.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the quote method directly.	 *	 * Note that 'q' is an alias for this method as it is in JDatabaseDriver.	 *	 * Usage:	 * $query->quote('fulltext');	 * $query->q('fulltext');	 * $query->q(array('option', 'fulltext'));	 *	 * @param   mixed    $text    A string or an array of strings to quote.	 * @param   boolean  $escape  True to escape the string, false to leave it unchanged.	 *	 * @return  string  The quoted input string.	 *	 * @since   11.1	 * @throws  RuntimeException if the internal db property is not a valid object.	 */	public function quote($text, $escape = true)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->quote($text, $escape);	}	/**	 * Wrap an SQL statement identifier name such as column, table or database names in quotes to prevent injection	 * risks and reserved word conflicts.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the quoteName method directly.	 *	 * Note that 'qn' is an alias for this method as it is in JDatabaseDriver.	 *	 * Usage:	 * $query->quoteName('#__a');	 * $query->qn('#__a');	 *	 * @param   mixed  $name  The identifier name to wrap in quotes, or an array of identifier names to wrap in quotes.	 *                        Each type supports dot-notation name.	 * @param   mixed  $as    The AS query part associated to $name. It can be string or array, in latter case it has to be	 *                        same length of $name; if is null there will not be any AS part for string or array element.	 *	 * @return  mixed  The quote wrapped name, same type of $name.	 *	 * @since   11.1	 * @throws  RuntimeException if the internal db property is not a valid object.	 */	public function quoteName($name, $as = null)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->quoteName($name, $as);	}	/**	 * Add a RIGHT JOIN clause to the query.	 *	 * Usage:	 * $query->rightJoin('b ON b.id = a.id')->rightJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function rightJoin($condition)	{		$this->join('RIGHT', $condition);		return $this;	}	/**	 * Add a single column, or array of columns to the SELECT clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 * The select method can, however, be called multiple times in the same query.	 *	 * Usage:	 * $query->select('a.*')->select('b.id');	 * $query->select(array('a.*', 'b.id'));	 *	 * @param   mixed  $columns  A string or an array of field names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function select($columns)	{		$this->type = 'select';		if (is_null($this->select))		{			$this->select = new JDatabaseQueryElement('SELECT', $columns);		}		else		{			$this->select->append($columns);		}		return $this;	}	/**	 * Add a single condition string, or an array of strings to the SET clause of the query.	 *	 * Usage:	 * $query->set('a = 1')->set('b = 2');	 * $query->set(array('a = 1', 'b = 2');	 *	 * @param   mixed   $conditions  A string or array of string conditions.	 * @param   string  $glue        The glue by which to join the condition strings. Defaults to ,.	 *                               Note that the glue is set on first use and cannot be changed.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function set($conditions, $glue = ',')	{		if (is_null($this->set))		{			$glue = strtoupper($glue);			$this->set = new JDatabaseQueryElement('SET', $conditions, "\n\t$glue ");		}		else		{			$this->set->append($conditions);		}		return $this;	}	/**	 * Allows a direct query to be provided to the database	 * driver's setQuery() method, but still allow queries	 * to have bounded variables.	 *	 * Usage:	 * $query->setQuery('select * from #__users');	 *	 * @param   mixed  $query  An SQL Query	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setQuery($query)	{		$this->sql = $query;		return $this;	}	/**	 * Add a table name to the UPDATE clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 *	 * Usage:	 * $query->update('#__foo')->set(...);	 *	 * @param   string  $table  A table to update.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function update($table)	{		$this->type = 'update';		$this->update = new JDatabaseQueryElement('UPDATE', $table);		return $this;	}	/**	 * Adds a tuple, or array of tuples that would be used as values for an INSERT INTO statement.	 *	 * Usage:	 * $query->values('1,2,3')->values('4,5,6');	 * $query->values(array('1,2,3', '4,5,6'));	 *	 * @param   string  $values  A single tuple, or array of tuples.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function values($values)	{		if (is_null($this->values))		{			$this->values = new JDatabaseQueryElement('()', $values, '),(');		}		else		{			$this->values->append($values);		}		return $this;	}	/**	 * Add a single condition, or an array of conditions to the WHERE clause of the query.	 *	 * Usage:	 * $query->where('a = 1')->where('b = 2');	 * $query->where(array('a = 1', 'b = 2'));	 *	 * @param   mixed   $conditions  A string or array of where conditions.	 * @param   string  $glue        The glue by which to join the conditions. Defaults to AND.	 *                               Note that the glue is set on first use and cannot be changed.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function where($conditions, $glue = 'AND')	{		if (is_null($this->where))		{			$glue = strtoupper($glue);			$this->where = new JDatabaseQueryElement('WHERE', $conditions, " $glue ");		}		else		{			$this->where->append($conditions);		}		return $this;	}   /**     * Method to provide deep copy support to nested objects and     * arrays when cloning.     *     * @return  void     *     * @since   11.3     */    public function __clone()    {        foreach ($this as $k => $v)        {            if ($k === 'db')            {                continue;            }            if (is_object($v) || is_array($v))            {                $this->$k = unserialize(serialize($v));            }        }    }    /**	 * Add a query to UNION with the current query.	 * Multiple unions each require separate statements and create an array of unions.	 *	 * Usage:	 * $query->union('SELECT name FROM  #__foo')	 * $query->union('SELECT name FROM  #__foo','distinct')	 * $query->union(array('SELECT name FROM  #__foo','SELECT name FROM  #__bar'))	 *	 * @param   mixed    $query     The JDatabaseQuery object or string to union.	 * @param   boolean  $distinct  True to only return distinct rows from the union.	 * @param   string   $glue      The glue by which to join the conditions.	 *	 * @return  mixed    The JDatabaseQuery object on success or boolean false on failure.	 *	 * @since   12.1	 */	public function union($query, $distinct = false, $glue = '')	{		// Clear any ORDER BY clause in UNION query		// See http://dev.mysql.com/doc/refman/5.0/en/union.html		if (!is_null($this->order))		{			$this->clear('order');		}		// Set up the DISTINCT flag, the name with parentheses, and the glue.		if ($distinct)		{			$name = 'UNION DISTINCT ()';			$glue = ')' . PHP_EOL . 'UNION DISTINCT (';		}		else		{			$glue = ')' . PHP_EOL . 'UNION (';			$name = 'UNION ()';		}		// Get the JDatabaseQueryElement if it does not exist		if (is_null($this->union))		{				$this->union = new JDatabaseQueryElement($name, $query, "$glue");		}		// Otherwise append the second UNION.		else		{			$glue = '';			$this->union->append($query);		}		return $this;	}	/**	 * Add a query to UNION DISTINCT with the current query. Simply a proxy to Union with the Distinct clause.	 *	 * Usage:	 * $query->unionDistinct('SELECT name FROM  #__foo')	 *	 * @param   mixed   $query  The JDatabaseQuery object or string to union.	 * @param   string  $glue   The glue by which to join the conditions.	 *	 * @return  mixed   The JDatabaseQuery object on success or boolean false on failure.	 *	 * @since   12.1	 */	public function unionDistinct($query, $glue = '')	{		$distinct = true;		// Apply the distinct flag to the union.		return $this->union($query, $distinct, $glue);	}	/**	 * Find and replace sprintf-like tokens in a format string.	 * Each token takes one of the following forms:	 *     %%       - A literal percent character.	 *     %[t]     - Where [t] is a type specifier.	 *     %[n]$[x] - Where [n] is an argument specifier and [t] is a type specifier.	 *	 * Types:	 * a - Numeric: Replacement text is coerced to a numeric type but not quoted or escaped.	 * e - Escape: Replacement text is passed to $this->escape().	 * E - Escape (extra): Replacement text is passed to $this->escape() with true as the second argument.	 * n - Name Quote: Replacement text is passed to $this->quoteName().	 * q - Quote: Replacement text is passed to $this->quote().	 * Q - Quote (no escape): Replacement text is passed to $this->quote() with false as the second argument.	 * r - Raw: Replacement text is used as-is. (Be careful)	 *	 * Date Types:	 * - Replacement text automatically quoted (use uppercase for Name Quote).	 * - Replacement text should be a string in date format or name of a date column.	 * y/Y - Year	 * m/M - Month	 * d/D - Day	 * h/H - Hour	 * i/I - Minute	 * s/S - Second	 *	 * Invariable Types:	 * - Takes no argument.	 * - Argument index not incremented.	 * t - Replacement text is the result of $this->currentTimestamp().	 * z - Replacement text is the result of $this->nullDate(false).	 * Z - Replacement text is the result of $this->nullDate(true).	 *	 * Usage:	 * $query->format('SELECT %1$n FROM %2$n WHERE %3$n = %4$a', 'foo', '#__foo', 'bar', 1);	 * Returns: SELECT `foo` FROM `#__foo` WHERE `bar` = 1	 *	 * Notes:	 * The argument specifier is optional but recommended for clarity.	 * The argument index used for unspecified tokens is incremented only when used.	 *	 * @param   string  $format  The formatting string.	 *	 * @return  string  Returns a string produced according to the formatting string.	 *	 * @since   12.3	 */	public function format($format)	{		$query = $this;		$args = array_slice(func_get_args(), 1);		array_unshift($args, null);		$i = 1;		$func = function ($match) use ($query, $args, &$i)		{			if (isset($match[6]) && $match[6] == '%')			{				return '%';			}			// No argument required, do not increment the argument index.			switch ($match[5])			{				case 't':					return $query->currentTimestamp();					break;				case 'z':					return $query->nullDate(false);					break;				case 'Z':					return $query->nullDate(true);					break;			}			// Increment the argument index only if argument specifier not provided.			$index = is_numeric($match[4]) ? (int) $match[4] : $i++;			if (!$index || !isset($args[$index]))			{				// TODO - What to do? sprintf() throws a Warning in these cases.				$replacement = '';			}			else			{				$replacement = $args[$index];			}			switch ($match[5])			{				case 'a':					return 0 + $replacement;					break;				case 'e':					return $query->escape($replacement);					break;				case 'E':					return $query->escape($replacement, true);					break;				case 'n':					return $query->quoteName($replacement);					break;				case 'q':					return $query->quote($replacement);					break;				case 'Q':					return $query->quote($replacement, false);					break;				case 'r':					return $replacement;					break;				// Dates				case 'y':					return $query->year($query->quote($replacement));					break;				case 'Y':					return $query->year($query->quoteName($replacement));					break;				case 'm':					return $query->month($query->quote($replacement));					break;				case 'M':					return $query->month($query->quoteName($replacement));					break;				case 'd':					return $query->day($query->quote($replacement));					break;				case 'D':					return $query->day($query->quoteName($replacement));					break;				case 'h':					return $query->hour($query->quote($replacement));					break;				case 'H':					return $query->hour($query->quoteName($replacement));					break;				case 'i':					return $query->minute($query->quote($replacement));					break;				case 'I':					return $query->minute($query->quoteName($replacement));					break;				case 's':					return $query->second($query->quote($replacement));					break;				case 'S':					return $query->second($query->quoteName($replacement));					break;			}			return '';		};		/**		 * Regexp to find an replace all tokens.		 * Matched fields:		 * 0: Full token		 * 1: Everything following '%'		 * 2: Everything following '%' unless '%'		 * 3: Argument specifier and '$'		 * 4: Argument specifier		 * 5: Type specifier		 * 6: '%' if full token is '%%'		 */		return preg_replace_callback('#%(((([\d]+)\$)?([aeEnqQryYmMdDhHiIsStzZ]))|(%))#', $func, $format);	}	/**	 * Add to the current date and time.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 * Note: Not all drivers support all units.	 *	 * @param   datetime  $date      The date to add to. May be date or datetime	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 *	 * @see http://dev.mysql.com/doc/refman/5.1/en/date-and-time-functions.html#function_date-add	 */	public function dateAdd($date, $interval, $datePart)	{		return trim("DATE_ADD('" . $date . "', INTERVAL " . $interval . ' ' . $datePart . ')');	}	/**	 * Add a query to UNION ALL with the current query.	 * Multiple unions each require separate statements and create an array of unions.	 *	 * Usage:	 * $query->union('SELECT name FROM  #__foo')	 * $query->union('SELECT name FROM  #__foo','distinct')	 * $query->union(array('SELECT name FROM  #__foo','SELECT name FROM  #__bar'))	 *	 * @param   mixed    $query     The JDatabaseQuery object or string to union.	 * @param   boolean  $distinct  True to only return distinct rows from the union.	 * @param   string   $glue      The glue by which to join the conditions.	 *	 * @return  mixed    The JDatabaseQuery object on success or boolean false on failure.	 *	 * @since   13.1	 */	public function unionAll($query, $distinct = false, $glue = '')	{			$glue = ')' . PHP_EOL . 'UNION ALL (';			$name = 'UNION ALL ()';		// Get the JDatabaseQueryElement if it does not exist		if (is_null($this->unionAll))		{			$this->unionAll = new JDatabaseQueryElement($name, $query, "$glue");		}		// Otherwise append the second UNION.		else		{			$glue = '';			$this->unionAll->append($query);		}		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto * @since       1.5 */class MailtoController extends JControllerLegacy{	/**	 * Show the form so that the user can send the link to someone	 *	 * @access public	 * @since 1.5	 */	public function mailto()	{		$session = JFactory::getSession();		$session->set('com_mailto.formtime', time());		$this->input->set('view', 'mailto');		$this->display();	}	/**	 * Send the message and display a notice	 *	 * @access public	 * @since 1.5	 */	public function send()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$session = JFactory::getSession();		$timeout = $session->get('com_mailto.formtime', 0);		if ($timeout == 0 || time() - $timeout < 20)		{			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		$SiteName = $app->getCfg('sitename');		$link     = MailtoHelper::validateHash($this->input->get('link', '', 'post'));		// Verify that this is a local link		if (!$link || !JURI::isInternal($link))		{			//Non-local url...			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		// An array of email headers we do not want to allow as input		$headers = array (	'Content-Type:',							'MIME-Version:',							'Content-Transfer-Encoding:',							'bcc:',							'cc:');		// An array of the input fields to scan for injected headers		$fields = array(			'mailto',			'sender',			'from',			'subject',		);		/*		 * Here is the meat and potatoes of the header injection test.  We		 * iterate over the array of form input and check for header strings.		 * If we find one, send an unauthorized header and die.		 */		foreach ($fields as $field)		{			foreach ($headers as $header)			{				if (strpos($_POST[$field], $header) !== false)				{					JError::raiseError(403, '');				}			}		}		/*		 * Free up memory		 */		unset ($headers, $fields);		$email           = $this->input->post->getString('mailto', '');		$sender          = $this->input->post->getString('sender', '');		$from            = $this->input->post->getString('from', '');		$subject_default = JText::sprintf('COM_MAILTO_SENT_BY', $sender);		$subject         = $this->input->post->getString('subject', $subject_default);		// Check for a valid to address		$error	= false;		if (! $email  || ! JMailHelper::isEmailAddress($email))		{			$error	= JText::sprintf('COM_MAILTO_EMAIL_INVALID', $email);			JError::raiseWarning(0, $error);		}		// Check for a valid from address		if (! $from || ! JMailHelper::isEmailAddress($from))		{			$error	= JText::sprintf('COM_MAILTO_EMAIL_INVALID', $from);			JError::raiseWarning(0, $error);		}		if ($error)		{			return $this->mailto();		}		// Build the message to send		$msg	= JText::_('COM_MAILTO_EMAIL_MSG');		$body	= sprintf($msg, $SiteName, $sender, $from, $link);		// Clean the email data		$subject = JMailHelper::cleanSubject($subject);		$body	 = JMailHelper::cleanBody($body);		$sender	 = JMailHelper::cleanAddress($sender);		// Send the email		if (JFactory::getMailer()->sendMail($from, $sender, $email, $subject, $body) !== true)		{			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		$this->input->set('view', 'sent');		$this->display();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extension Manager Default View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerViewDefault extends JViewLegacy{	/**	 * Constructor	 *	 * @param   array  $config  Configuration array	 *	 * @since   1.5	 */	public function __construct($config = null)	{		$app = JFactory::getApplication();		parent::__construct($config);		$this->_addPath('template', $this->_basePath . '/views/default/tmpl');		$this->_addPath('template', JPATH_THEMES . '/' . $app->getTemplate() . '/html/com_installer/default');	}	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.5	 */	public function display($tpl = null)	{		// Get data from the model		$state	= $this->get('State');		// Are there messages to display ?		$showMessage	= false;		if (is_object($state))		{			$message1		= $state->get('message');			$message2		= $state->get('extension_message');			$showMessage	= ($message1 || $message2);		}		$this->showMessage = $showMessage;		$this->state = &$state;		JHtml::_('behavior.tooltip');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= InstallerHelper::getActions();		JToolbarHelper::title(JText::_('COM_INSTALLER_HEADER_' . $this->getName()), 'install.png');		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_installer');			JToolbarHelper::divider();		}		// Document		$document = JFactory::getDocument();		$document->setTitle(JText::_('COM_INSTALLER_TITLE_' . $this->getName()));		// Render side bar		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Libraries * @subpackage  UCM * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * UCM Class for handling content types * * @package     Joomla.Libraries * @subpackage  UCM * @since       3.1 */class JUcmType implements JUcm{	/**	 * The UCM Type	 *	 * @var    JUcmType	 * @since  3.1	 */	public $type;	/**	* The Database object	*	* @var    JDatabaseDriver	* @since  3.1	*/	protected $db;	/**	* The alias for the content type	*	* @var	  string	* @since  3.1	*/	protected $alias;	/**	 * @param  string            $alias        The alias for the item	 * @param  JDatabaseDriver   $database     The database object	 * @param  JApplicationBase  $application  The application object	 */	public function __construct($alias = null, JDatabaseDriver $database = null, JApplicationBase $application = null)	{		$this->db = $database ? $database : JFactory::getDbo();		$app      = $application ? $application : JFactory::getApplication();		// Make the best guess we can in the absence of information.		$this->alias = $alias ? $alias : $app->input->get('option') . '.' . $app->input->get('view');		$this->type  = $this->getType();	}	/**	* Get the Content Type	*	* @param   integer  $pk  The primary key of the alias type	*	* @return  object  The UCM Type data	*	* @since   3.1	*/	public function getType($pk = null)	{		if (!$pk)		{			$pk = $this->getTypeId();		}		$query	= $this->db->getQuery(true);		$query->select('ct.*');		$query->from($this->db->quoteName('#__content_types', 'ct'));		$query->where($this->db->quoteName('ct.type_id') . ' = ' . (int) $pk);		$this->db->setQuery($query);		$type = $this->db->loadObject();		return $type;	}	/**	 * Retrieves the UCM type ID	 *	 * @param   string  $alias  The string of the type alias	 *	 * @return  integer  The ID of the requested type	 *	 * @since   3.1	 */	public function getTypeId($alias = null)	{		if (!$alias)		{			$alias = $this->alias;		}		$query = $this->db->getQuery(true);		$query->select('ct.type_id');		$query->from($this->db->quoteName('#__content_types', 'ct'));		$query->where($this->db->quoteName('ct.type_alias') . ' = ' . $this->db->q($alias));		$this->db->setQuery($query);		$id = $this->db->loadResult();		return $id;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$client		= $this->state->get('filter.client_id') ? 'administrator' : 'site';$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_modules');$saveOrder	= $listOrder == 'ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_modules&task=modules.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_modules'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="15%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_POSITION', 'position', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone" >						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_MODULE', 'name', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_PAGES', 'pages', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language_title', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'ordering');				$canCreate  = $user->authorise('core.create',     'com_modules');				$canEdit    = $user->authorise('core.edit',       'com_modules');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_modules') && $canCheckin;			?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->position?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>						<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order" />					<?php else : ?>						<span class="sortable-handler inactive" >							<i class="icon-menu"></i>						</span>					<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('modules.state', $item->published, $i, $canChange, 'cb'); ?>					</td>					<td class="has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'modules.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.(int) $item->id); ?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>									<?php echo $this->escape($item->title); ?>							<?php endif; ?>							<?php if (!empty($item->note)) : ?>								<div class="small">									<?php echo JText::sprintf('JGLOBAL_LIST_NOTE', $this->escape($item->note));?>								</div>							<?php endif; ?>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'module.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'modules.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'modules.');								endif;								JHtml::_('dropdown.divider');								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'modules.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'modules.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'modules.');								endif;								// Render dropdown list								echo JHtml::_('dropdown.render');								?>						</div>					</td>					<td class="small hidden-phone">						<?php if ($item->position) : ?>							<span class="label label-info">								<?php echo $item->position; ?>							</span>						<?php else : ?>							<span class="label">								<?php echo JText::_('JNONE'); ?>							</span>						<?php endif; ?>					</td>					<td class="small hidden-phone">						<?php echo $item->name;?>					</td>					<td class="small hidden-phone">						<?php echo $item->pages; ?>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="small hidden-phone">						<?php if ($item->language == ''):?>							<?php echo JText::_('JDEFAULT'); ?>						<?php elseif ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Module model. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesModelModule extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_MODULES';	/**	 * @var    string  The help screen key for the module.	 * @since  1.6	 */	protected $helpKey = 'JHELP_EXTENSIONS_MODULE_MANAGER_EDIT';	/**	 * @var    string  The help screen base URL for the module.	 * @since  1.6	 */	protected $helpURL;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('id');		if (!$pk)		{			if ($extensionId = (int) $app->getUserState('com_modules.add.module.extension_id'))			{				$this->setState('extension.id', $extensionId);			}		}		$this->setState('module.id', $pk);		// Load the parameters.		$params	= JComponentHelper::getParams('com_modules');		$this->setState('params', $params);	}	/**	 * Method to perform batch operations on a set of modules.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.7	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['position_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if (!empty($commands['position_id']))			{				if ($cmd == 'c')				{					$result = $this->batchCopy($commands['position_id'], $pks, $contexts);					if (is_array($result))					{						$pks = $result;					}					else					{						return false;					}				}				elseif ($cmd == 'm' && !$this->batchMove($commands['position_id'], $pks, $contexts))				{					return false;				}				$done = true;			}		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy modules to a new position or current.	 *	 * @param   integer  $value     The new value matching a module position.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	protected function batchCopy($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		$newIds = array();		$i = 0;		foreach ($pks as $pk)		{			if ($user->authorise('core.create', 'com_modules'))			{				$table->reset();				$table->load($pk);				// Set the new position				if ($value == 'noposition')				{					$position = '';				}				elseif ($value == 'nochange')				{					$position = $table->position;				}				else				{					$position = $value;				}				$table->position = $position;				// Alter the title if necessary				$data = $this->generateNewTitle(0, $table->title, $table->position);				$table->title = $data['0'];				// Reset the ID because we are making a copy				$table->id = 0;				// Unpublish the new module				$table->published = 0;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}				// Get the new item ID				$newId = $table->get('id');				// Add the new ID to the array				$newIds[$i]	= $newId;				$i++;				// Now we need to handle the module assignments				$db = $this->getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('menuid'))					->from($db->quoteName('#__modules_menu'))					->where($db->quoteName('moduleid') . ' = ' . $pk);				$db->setQuery($query);				$menus = $db->loadColumn();				// Insert the new records into the table				foreach ($menus as $menu)				{					$query->clear()						->insert($db->quoteName('#__modules_menu'))						->columns(array($db->quoteName('moduleid'), $db->quoteName('menuid')))						->values($newId . ', ' . $menu);					$db->setQuery($query);					$db->execute();				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch move modules to a new position or current.	 *	 * @param   integer  $value     The new value matching a module position.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	protected function batchMove($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', 'com_modules'))			{				$table->reset();				$table->load($pk);				// Set the new position				if ($value == 'noposition')				{					$position = '';				}				elseif ($value == 'nochange')				{					$position = $table->position;				}				else				{					$position = $value;				}				$table->position = $position;				// Alter the title if necessary				$data = $this->generateNewTitle(0, $table->title, $table->position);				$table->title = $data['0'];				// Unpublish the moved module				$table->published = 0;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to delete rows.	 *	 * @param   array  &$pks  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.6	 * @throws  Exception	 */	public function delete(&$pks)	{		$pks	= (array) $pks;		$user	= JFactory::getUser();		$table	= $this->getTable();		// Iterate the items to delete each one.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				// Access checks.				if (!$user->authorise('core.delete', 'com_modules') || $table->published != -2)				{					JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));					return;				}				if (!$table->delete($pk))				{					throw new Exception($table->getError());				}				else				{					// Delete the menu assignments					$db    = $this->getDbo();					$query = $db->getQuery(true)						->delete('#__modules_menu')						->where('moduleid=' . (int) $pk);					$db->setQuery($query);					$db->execute();				}				// Clear module cache				parent::cleanCache($table->module, $table->client_id);			}			else			{				throw new Exception($table->getError());			}		}		// Clear modules cache		$this->cleanCache();		return true;	}	/**	 * Method to duplicate modules.	 *	 * @param   array  &$pks  An array of primary key IDs.	 *	 * @return  boolean  True if successful.	 *	 * @since   1.6	 * @throws  Exception	 */	public function duplicate(&$pks)	{		$user	= JFactory::getUser();		$db		= $this->getDbo();		// Access checks.		if (!$user->authorise('core.create', 'com_modules'))		{			throw new Exception(JText::_('JERROR_CORE_CREATE_NOT_PERMITTED'));		}		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($table->load($pk, true))			{				// Reset the id to create a new record.				$table->id = 0;				// Alter the title.				$m = null;				if (preg_match('#\((\d+)\)$#', $table->title, $m))				{					$table->title = preg_replace('#\(\d+\)$#', '(' . ($m[1] + 1) . ')', $table->title);				}				else				{					$table->title .= ' (2)';				}				// Unpublish duplicate module				$table->published = 0;				if (!$table->check() || !$table->store())				{					throw new Exception($table->getError());				}				// $query = 'SELECT menuid'				//	. ' FROM #__modules_menu'				//	. ' WHERE moduleid = ' . (int) $pk				//	;				$query	= $db->getQuery(true)					->select('menuid')					->from('#__modules_menu')					->where('moduleid=' . (int) $pk);				$this->_db->setQuery($query);				$rows = $this->_db->loadColumn();				foreach ($rows as $menuid)				{					$tuples[] = '(' . (int) $table->id . ',' . (int) $menuid . ')';				}			}			else			{				throw new Exception($table->getError());			}		}		if (!empty($tuples))		{			// Module-Menu Mapping: Do it in one query			$query = 'INSERT INTO #__modules_menu (moduleid,menuid) VALUES ' . implode(',', $tuples);			$this->_db->setQuery($query);			try			{				$this->_db->execute();			}			catch (RuntimeException $e)			{				return JError::raiseWarning(500, $e->getMessage());			}		}		// Clear modules cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title.	 *	 * @param   integer  $category_id  The id of the category. Not used here.	 * @param   string   $title        The title.	 * @param   string   $position     The position.	 *	 * @return  array  Contains the modified title.	 *	 * @since   2.5	 */	protected function generateNewTitle($category_id, $title, $position)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('position' => $position, 'title' => $title)))		{			$title = JString::increment($title);		}		return array($title);	}	/**	 * Method to get the client object	 *	 * @return  void	 *	 * @since   1.6	 */	public function &getClient()	{		return $this->_client;	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  JForm  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item		= $this->getItem();			$clientId	= $item->client_id;			$module		= $item->module;		}		else		{			$clientId	= JArrayHelper::getValue($data, 'client_id');			$module		= JArrayHelper::getValue($data, 'module');		}		// These variables are used to add data from the plugin XML files.		$this->setState('item.client_id', $clientId);		$this->setState('item.module', $module);		// Get the form.		$form = $this->loadForm('com_modules.module', 'module', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		$form->setFieldAttribute('position', 'client', $this->getState('item.client_id') == 0 ? 'site' : 'administrator');		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		$app = JFactory::getApplication();		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_modules.edit.module.data', array());		if (empty($data))		{			$data = $this->getItem();			// This allows us to inject parameter settings into a new module.			$params = $app->getUserState('com_modules.add.module.params');			if (is_array($params))			{				$data->set('params', $params);			}		}		$this->preprocessData('com_modules.module', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   1.6	 */	public function getItem($pk = null)	{		$pk	= (!empty($pk)) ? (int) $pk : (int) $this->getState('module.id');		$db	= $this->getDbo();		if (!isset($this->_cache[$pk]))		{			$false	= false;			// Get a row instance.			$table = $this->getTable();			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $error = $table->getError())			{				$this->setError($error);				return $false;			}			// Check if we are creating a new extension.			if (empty($pk))			{				if ($extensionId = (int) $this->getState('extension.id'))				{					$query	= $db->getQuery(true)						->select('element, client_id')						->from('#__extensions')						->where('extension_id = ' . $extensionId)						->where('type = ' . $db->quote('module'));					$db->setQuery($query);					try					{						$extension = $db->loadObject();					}					catch (RuntimeException $e)					{						$this->setError($e->getMessage);						return false;					}					if (empty($extension))					{						$this->setError('COM_MODULES_ERROR_CANNOT_FIND_MODULE');						return false;					}					// Extension found, prime some module values.					$table->module    = $extension->element;					$table->client_id = $extension->client_id;				}				else				{					$app = JFactory::getApplication();					$app->redirect(JRoute::_('index.php?option=com_modules&view=modules', false));					return false;				}			}			// Convert to the JObject before adding other data.			$properties = $table->getProperties(1);			$this->_cache[$pk] = JArrayHelper::toObject($properties, 'JObject');			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($table->params);			$this->_cache[$pk]->params = $registry->toArray();			// Determine the page assignment mode.			$db->setQuery(				'SELECT menuid' .				' FROM #__modules_menu' .				' WHERE moduleid = ' . $pk			);			$assigned = $db->loadColumn();			if (empty($pk))			{				// If this is a new module, assign to all pages.				$assignment = 0;			}			elseif (empty($assigned))			{				// For an existing module it is assigned to none.				$assignment = '-';			}			else			{				if ($assigned[0] > 0)				{					$assignment = +1;				}				elseif ($assigned[0] < 0)				{					$assignment = -1;				}				else				{					$assignment = 0;				}			}			$this->_cache[$pk]->assigned = $assigned;			$this->_cache[$pk]->assignment = $assignment;			// Get the module XML.			$client	= JApplicationHelper::getClientInfo($table->client_id);			$path	= JPath::clean($client->path . '/modules/' . $table->module . '/' . $table->module . '.xml');			if (file_exists($path))			{				$this->_cache[$pk]->xml = simplexml_load_file($path);			}			else			{				$this->_cache[$pk]->xml = null;			}		}		return $this->_cache[$pk];	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 *	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL);	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   string  $type    The table type to instantiate	 * @param   string  $prefix  A prefix for the table class name. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A database object	 *	 * @since   1.6	*/	public function getTable($type = 'Module', $prefix = 'JTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Prepare and sanitise the table prior to saving.	 *	 * @param   JTable  $table  The database object	 *	 * @return  void	 *	 * @since   1.6	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		$table->title		= htmlspecialchars_decode($table->title, ENT_QUOTES);		if (empty($table->id))		{			// Set the values			// $table->created = $date->toSql();		}		else		{			// Set the values			// $table->modified    = $date->toSql();			// $table->modified_by = $user->get('id');		}	}	/**	 * Method to preprocess the form	 *	 * @param   JForm   $form   A form object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error loading the form.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		jimport('joomla.filesystem.path');		$lang     = JFactory::getLanguage();		$clientId = $this->getState('item.client_id');		$module   = $this->getState('item.module');		$client   = JApplicationHelper::getClientInfo($clientId);		$formFile = JPath::clean($client->path . '/modules/' . $module . '/' . $module . '.xml');		// Load the core and/or local language file(s).		$lang->load($module, $client->path, null, false, false)			||	$lang->load($module, $client->path . '/modules/' . $module, null, false, false)			||	$lang->load($module, $client->path, $lang->getDefault(), false, false)			||	$lang->load($module, $client->path . '/modules/' . $module, $lang->getDefault(), false, false);		if (file_exists($formFile))		{			// Get the module form.			if (!$form->loadFile($formFile, false, '//config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Attempt to load the xml file.			if (!$xml = simplexml_load_file($formFile))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Get the help data from the XML file if present.			$help = $xml->xpath('/extension/help');			if (!empty($help))			{				$helpKey = trim((string) $help[0]['key']);				$helpURL = trim((string) $help[0]['url']);				$this->helpKey = $helpKey ? $helpKey : $this->helpKey;				$this->helpURL = $helpURL ? $helpURL : $this->helpURL;			}		}		// Load the default advanced params		JForm::addFormPath(JPATH_ADMINISTRATOR . '/components/com_modules/models/forms');		$form->loadFile('advanced', false);		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Loads ContentHelper for filters before validating data.	 *	 * @param   object  $form   The form to validate against.	 * @param   array   $data   The data to validate.	 * @param   string  $group  The name of the group(defaults to null).	 *	 * @return  mixed  Array of filtered data if valid, false otherwise.	 *	 * @since   1.1	 */	public function validate($form, $data, $group = null)	{		require_once JPATH_ADMINISTRATOR . '/components/com_content/helpers/content.php';		return parent::validate($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$input      = JFactory::getApplication()->input;		$table		= $this->getTable();		$pk			= (!empty($data['id'])) ? $data['id'] : (int) $this->getState('module.id');		$isNew		= true;		// Include the content modules for the onSave events.		JPluginHelper::importPlugin('extension');		// Load the row if saving an existing record.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		// Alter the title and published state for Save as Copy		if ($input->get('task') == 'save2copy')		{			$orig_data  = $input->post->get('jform', array(), 'array');			$orig_table = clone($this->getTable());			$orig_table->load((int) $orig_data['id']);			if ($data['title'] == $orig_table->title)			{				$data['title'] .= ' ' . JText::_('JGLOBAL_COPY');				$data['published'] = 0;			}		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Prepare the row for saving		$this->prepareTable($table);		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionBeforeSave event.		$result = $dispatcher->trigger('onExtensionBeforeSave', array('com_modules.module', &$table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Process the menu link mappings.		$assignment = isset($data['assignment']) ? $data['assignment'] : 0;		// Delete old module to menu item associations		// $db->setQuery(		//	'DELETE FROM #__modules_menu'.		//	' WHERE moduleid = '.(int) $table->id		// );		$db    = $this->getDbo();		$query = $db->getQuery(true)			->delete('#__modules_menu')			->where('moduleid = ' . (int) $table->id);		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If the assignment is numeric, then something is selected (otherwise it's none).		if (is_numeric($assignment))		{			// Variable is numeric, but could be a string.			$assignment = (int) $assignment;			// Logic check: if no module excluded then convert to display on all.			if ($assignment == -1 && empty($data['assigned']))			{				$assignment = 0;			}			// Check needed to stop a module being assigned to `All`			// and other menu items resulting in a module being displayed twice.			if ($assignment === 0)			{				// Assign new module to `all` menu item associations.				// $this->_db->setQuery(				//  'INSERT INTO #__modules_menu'.				//  ' SET moduleid = ' . (int) $table->id . ', menuid = 0'				// )				$query->clear()					->insert('#__modules_menu')					->columns(array($db->quoteName('moduleid'), $db->quoteName('menuid')))					->values((int) $table->id . ', 0');				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}			elseif (!empty($data['assigned']))			{				// Get the sign of the number.				$sign = $assignment < 0 ? -1 : +1;				// Preprocess the assigned array.				$tuples = array();				foreach ($data['assigned'] as &$pk)				{					$tuples[] = '(' . (int) $table->id . ',' . (int) $pk * $sign . ')';				}				$this->_db->setQuery(					'INSERT INTO #__modules_menu (moduleid, menuid) VALUES ' .					implode(',', $tuples)				);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}		}		// Trigger the onExtensionAfterSave event.		$dispatcher->trigger('onExtensionAfterSave', array('com_modules.module', &$table, $isNew));		// Compute the extension id of this module in case the controller wants it.		$query	= $db->getQuery(true)			->select('extension_id')			->from('#__extensions AS e')			->join('LEFT', '#__modules AS m ON e.element = m.module')			->where('m.id = ' . (int) $table->id);		$db->setQuery($query);		try		{			$extensionId = $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());			return false;		}		$this->setState('module.extension_id', $extensionId);		$this->setState('module.id', $table->id);		// Clear modules cache		$this->cleanCache();		// Clean module cache		parent::cleanCache($table->module, $table->client_id);		return true;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object  $table  A record object.	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 *	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'client_id = ' . (int) $table->client_id;		$condition[] = 'position = ' . $this->_db->quote($table->position);		return $condition;	}	/**	 * Custom clean cache method for different clients	 *	 * @param   string   $group      The name of the plugin group to import (defaults to null).	 * @param   integer  $client_id  The client ID. [optional]	 *	 * @return  void	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_modules', $this->getClient());	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_status * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$hideLinks = $input->getBool('hidemainmenu');$task      = $input->getCmd('task');$output    = array();// Print the Preview link to Main site.if ($params->get('show_viewsite', 1)) :	$output[] = '<div class="btn-group viewsite"><a href="'.JURI::root().'" target="_blank"><i class="icon-share-alt"></i> '.JText::_('JGLOBAL_VIEW_SITE').'</a></div><div class="btn-group divider">	</div>';endif;// Print the logged in users.if ($params->get('show_loggedin_users', 1)) :	$output[] = '<div class="btn-group loggedin-users">'.JText::plural('MOD_STATUS_USERS', $online_num).'</div><div class="btn-group divider">	</div>';endif;// Print the back-end logged in users.if ($params->get('show_loggedin_users_admin', 1)) :	$output[] = '<div class="btn-group backloggedin-users">'.JText::plural('MOD_STATUS_BACKEND_USERS', $count).'</div><div class="btn-group divider">	</div>';endif;//  Print the inbox message.if ($params->get('show_messages', 1)) :	$output[] = '<div class="btn-group '.$inboxClass.'">'.			($hideLinks ? '' : '<a href="'.$inboxLink.'">').			'<i class="icon-envelope"></i> '.			JText::plural('MOD_STATUS_MESSAGES', $unread).			($hideLinks ? '' : '</a>').			'<div class="btn-group divider"></div>'.			'</div>';endif;// Print the logout link.if ($task == 'edit' || $task == 'editA' || $input->getInt('hidemainmenu')){	$logoutLink = '';} else {	$logoutLink = JRoute::_('index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1');}if ($params->get('show_logout', 1)) :	$output[] = '<div class="btn-group logout">' .($hideLinks ? '' : '<a href="'.$logoutLink.'"><i class="icon-minus-sign"></i> ').JText::_('JLOGOUT').($hideLinks ? '' : '</a>').'</div>';endif;// Output the items.foreach ($output as $item) :	echo $item;endforeach;
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-vertical">	<legend><?php echo JText::_('COM_CONFIG_PERMISSION_SETTINGS'); ?></legend>	<?php foreach ($this->form->getFieldset('permissions') as $field) : ?>		<div class="control-group">			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexer', __DIR__ . '/indexer.php');JLoader::register('FinderIndexerHelper', __DIR__ . '/helper.php');JLoader::register('FinderIndexerResult', __DIR__ . '/result.php');JLoader::register('FinderIndexerTaxonomy', __DIR__ . '/taxonomy.php');/** * Prototype adapter class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexerAdapter extends JPlugin{	/**	 * The context is somewhat arbitrary but it must be unique or there will be	 * conflicts when managing plugin/indexer state. A good best practice is to	 * use the plugin name suffix as the context. For example, if the plugin is	 * named 'plgFinderContent', the context could be 'Content'.	 *	 * @var    string	 * @since  2.5	 */	protected $context;	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension;	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout;	/**	 * The mime type of the content the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $mime;	/**	 * The access level of an item before save.	 *	 * @var    integer	 * @since  2.5	 */	protected $old_access;	/**	 * The access level of a category before save.	 *	 * @var    integer	 * @since  2.5	 */	protected $old_cataccess;	/**	 * The type of content the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title;	/**	 * The type id of the content.	 *	 * @var    integer	 * @since  2.5	 */	protected $type_id;	/**	 * The database object.	 *	 * @var    object	 * @since  2.5	 */	protected $db;	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table;	/**	 * The indexer object.	 *	 * @var    FinderIndexer	 * @since  3.0	 */	protected $indexer;	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'state';	/**	 * Method to instantiate the indexer adapter.	 *	 * @param   object  &$subject  The object to observe.	 * @param   array   $config    An array that holds the plugin configuration.	 *	 * @since   2.5	 */	public function __construct(&$subject, $config)	{		// Get the database object.		$this->db = JFactory::getDbo();		// Call the parent constructor.		parent::__construct($subject, $config);		// Get the type id.		$this->type_id = $this->getTypeId();		// Add the content type if it doesn't exist and is set.		if (empty($this->type_id) && !empty($this->type_title))		{			$this->type_id = FinderIndexerHelper::addContentType($this->type_title, $this->mime);		}		// Check for a layout override.		if ($this->params->get('layout'))		{			$this->layout = $this->params->get('layout');		}		// Get the indexer object		$this->indexer = FinderIndexer::getInstance();	}	/**	 * Method to get the adapter state and push it into the indexer.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws    Exception on error.	 */	public function onStartIndex()	{		// Get the indexer state.		$iState = FinderIndexer::getState();		// Get the number of content items.		$total = (int) $this->getContentCount();		// Add the content count to the total number of items.		$iState->totalItems += $total;		// Populate the indexer state information for the adapter.		$iState->pluginState[$this->context]['total'] = $total;		$iState->pluginState[$this->context]['offset'] = 0;		// Set the indexer state.		FinderIndexer::setState($iState);	}	/**	 * Method to prepare for the indexer to be run. This method will often	 * be used to include dependencies and things of that nature.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on error.	 */	public function onBeforeIndex()	{		// Get the indexer and adapter state.		$iState = FinderIndexer::getState();		$aState = $iState->pluginState[$this->context];		// Check the progress of the indexer and the adapter.		if ($iState->batchOffset == $iState->batchSize || $aState['offset'] == $aState['total'])		{			return true;		}		// Run the setup method.		return $this->setup();	}	/**	 * Method to index a batch of content items. This method can be called by	 * the indexer many times throughout the indexing process depending on how	 * much content is available for indexing. It is important to track the	 * progress correctly so we can display it to the user.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on error.	 */	public function onBuildIndex()	{		// Get the indexer and adapter state.		$iState = FinderIndexer::getState();		$aState = $iState->pluginState[$this->context];		// Check the progress of the indexer and the adapter.		if ($iState->batchOffset == $iState->batchSize || $aState['offset'] == $aState['total'])		{			return true;		}		// Get the batch offset and size.		$offset = (int) $aState['offset'];		$limit = (int) ($iState->batchSize - $iState->batchOffset);		// Get the content items to index.		$items = $this->getItems($offset, $limit);		// Iterate through the items and index them.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			// Index the item.			$this->index($items[$i]);			// Adjust the offsets.			$offset++;			$iState->batchOffset++;			$iState->totalItems--;		}		// Update the indexer state.		$aState['offset'] = $offset;		$iState->pluginState[$this->context] = $aState;		FinderIndexer::setState($iState);		return true;	}	/**	 * Method to change the value of a content item's property in the links	 * table. This is used to synchronize published and access states that	 * are changed when not editing an item directly.	 *	 * @param   string   $id        The ID of the item to change.	 * @param   string   $property  The property that is being changed.	 * @param   integer  $value     The new value of that property.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws    Exception on database error.	 */	protected function change($id, $property, $value)	{		// Check for a property we know how to handle.		if ($property !== 'state' && $property !== 'access')		{			return true;		}		// Get the url for the content id.		$item = $this->db->quote($this->getUrl($id, $this->extension, $this->layout));		// Update the content items.		$query = $this->db->getQuery(true)			->update($this->db->quoteName('#__finder_links'))			->set($this->db->quoteName($property) . ' = ' . (int) $value)			->where($this->db->quoteName('url') . ' = ' . $item);		$this->db->setQuery($query);		$this->db->execute();		return true;	}	/**	 * Method to index an item.	 *	 * @param   FinderIndexerResult  $item  The item to index as a FinderIndexerResult object.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function index(FinderIndexerResult $item);	/**	 * Method to reindex an item.	 *	 * @param   integer  $id  The ID of the item to reindex.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function reindex($id)	{		// Run the setup method.		$this->setup();		// Get the item.		$item = $this->getItem($id);		// Index the item.		$this->index($item);	}	/**	 * Method to remove an item from the index.	 *	 * @param   string  $id  The ID of the item to remove.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function remove($id)	{		// Get the item's URL		$url = $this->db->quote($this->getUrl($id, $this->extension, $this->layout));		// Get the link ids for the content items.		$query = $this->db->getQuery(true)			->select($this->db->quoteName('link_id'))			->from($this->db->quoteName('#__finder_links'))			->where($this->db->quoteName('url') . ' = ' . $url);		$this->db->setQuery($query);		$items = $this->db->loadColumn();		// Check the items.		if (empty($items))		{			return true;		}		// Remove the items.		foreach ($items as $item)		{			$this->indexer->remove($item);		}		return true;	}	/**	 * Method to setup the adapter before indexing.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function setup();	/**	 * Method to update index data on category access level changes	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function categoryAccessChange($row)	{		$query = clone($this->getStateQuery());		$query->where('c.id = ' . (int) $row->id);		// Get the access level.		$this->db->setQuery($query);		$items = $this->db->loadObjectList();		// Adjust the access level for each item within the category.		foreach ($items as $item)		{			// Set the access level.			$temp = max($item->access, $row->access);			// Update the item.			$this->change((int) $item->id, 'access', $temp);			// Reindex the item			$this->reindex($row->id);		}	}	/**	 * Method to update index data on category access level changes	 *	 * @param   array    $pks    A list of primary key ids of the content that has changed state.	 * @param   integer  $value  The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function categoryStateChange($pks, $value)	{		// The item's published state is tied to the category		// published state so we need to look up all published states		// before we change anything.		foreach ($pks as $pk)		{			$query = clone($this->getStateQuery());			$query->where('c.id = ' . (int) $pk);			// Get the published states.			$this->db->setQuery($query);			$items = $this->db->loadObjectList();			// Adjust the state for each item within the category.			foreach ($items as $item)			{				// Translate the state.				$temp = $this->translateState($item->state, $value);				// Update the item.				$this->change($item->id, 'state', $temp);				// Reindex the item				$this->reindex($item->id);			}		}	}	/**	 * Method to check the existing access level for categories	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function checkCategoryAccess($row)	{		$query = $this->db->getQuery(true)			->select($this->db->quoteName('access'))			->from($this->db->quoteName('#__categories'))			->where($this->db->quoteName('id') . ' = ' . (int) $row->id);		$this->db->setQuery($query);		// Store the access level to determine if it changes		$this->old_cataccess = $this->db->loadResult();	}	/**	 * Method to check the existing access level for items	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function checkItemAccess($row)	{		$query = $this->db->getQuery(true)			->select($this->db->quoteName('access'))			->from($this->db->quoteName($this->table))			->where($this->db->quoteName('id') . ' = ' . (int) $row->id);		$this->db->setQuery($query);		// Store the access level to determine if it changes		$this->old_access = $this->db->loadResult();	}	/**	 * Method to get the number of content items available to index.	 *	 * @return  integer  The number of content items available to index.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getContentCount()	{		$return = 0;		// Get the list query.		$query = $this->getListQuery();		// Check if the query is valid.		if (empty($query))		{			return $return;		}		// Tweak the SQL query to make the total lookup faster.		if ($query instanceof JDatabaseQuery)		{			$query = clone($query);			$query->clear('select')				->select('COUNT(*)')				->clear('order');		}		// Get the total number of content items to index.		$this->db->setQuery($query);		$return = (int) $this->db->loadResult();		return $return;	}	/**	 * Method to get a content item to index.	 *	 * @param   integer  $id  The id of the content item.	 *	 * @return  FinderIndexerResult  A FinderIndexerResult object.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getItem($id)	{		// Get the list query and add the extra WHERE clause.		$query = $this->getListQuery();		$query->where('a.id = ' . (int) $id);		// Get the item to index.		$this->db->setQuery($query);		$row = $this->db->loadAssoc();		// Convert the item to a result object.		$item = JArrayHelper::toObject($row, 'FinderIndexerResult');		// Set the item type.		$item->type_id = $this->type_id;		// Set the item layout.		$item->layout = $this->layout;		return $item;	}	/**	 * Method to get a list of content items to index.	 *	 * @param   integer         $offset  The list offset.	 * @param   integer         $limit   The list limit.	 * @param   JDatabaseQuery  $query   A JDatabaseQuery object. [optional]	 *	 * @return  array  An array of FinderIndexerResult objects.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getItems($offset, $limit, $query = null)	{		$items = array();		// Get the content items to index.		$this->db->setQuery($this->getListQuery($query), $offset, $limit);		$rows = $this->db->loadAssocList();		// Convert the items to result objects.		foreach ($rows as $row)		{			// Convert the item to a result object.			$item = JArrayHelper::toObject($row, 'FinderIndexerResult');			// Set the item type.			$item->type_id = $this->type_id;			// Set the mime type.			$item->mime = $this->mime;			// Set the item layout.			$item->layout = $this->layout;			// Set the extension if present			if (isset($row->extension))			{				$item->extension = $row->extension;			}			// Add the item to the stack.			$items[] = $item;		}		return $items;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object. [optional]	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $this->db->getQuery(true);		return $query;	}	/**	 * Method to get the plugin type	 *	 * @param   integer  $id  The plugin ID	 *	 * @return  string  The plugin type	 *	 * @since   2.5	 */	protected function getPluginType($id)	{		// Prepare the query		$query = $this->db->getQuery(true)			->select($this->db->quoteName('element'))			->from($this->db->quoteName('#__extensions'))			->where($this->db->quoteName('extension_id') . ' = ' . (int) $id);		$this->db->setQuery($query);		$type = $this->db->loadResult();		return $type;	}	/**	 * Method to get a SQL query to load the published and access states for	 * an article and category.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getStateQuery()	{		$query = $this->db->getQuery(true);		// Item ID		$query->select('a.id');		// Item and category published state		$query->select('a.' . $this->state_field . ' AS state, c.published AS cat_state');		// Item and category access levels		$query->select('a.access, c.access AS cat_access')			->from($this->table . ' AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		return $query;	}	/**	 * Method to get the query clause for getting items to update by time.	 *	 * @param   string  $time  The modified timestamp.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getUpdateQueryByTime($time)	{		// Build an SQL query based on the modified time.		$query = $this->db->getQuery(true)			->where('a.modified >= ' . $this->db->quote($time));		return $query;	}	/**	 * Method to get the query clause for getting items to update by id.	 *	 * @param   array  $ids  The ids to load.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getUpdateQueryByIds($ids)	{		// Build an SQL query based on the item ids.		$query = $this->db->getQuery(true)			->where('a.id IN(' . implode(',', $ids) . ')');		return $query;	}	/**	 * Method to get the type id for the adapter content.	 *	 * @return  integer  The numeric type id for the content.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getTypeId()	{		// Get the type id from the database.		$query = $this->db->getQuery(true)			->select($this->db->quoteName('id'))			->from($this->db->quoteName('#__finder_types'))			->where($this->db->quoteName('title') . ' = ' . $this->db->quote($this->type_title));		$this->db->setQuery($query);		$result = (int) $this->db->loadResult();		return $result;	}	/**	 * Method to get the URL for the item. The URL is how we look up the link	 * in the Finder index.	 *	 * @param   integer  $id         The id of the item.	 * @param   string   $extension  The extension the category is in.	 * @param   string   $view       The view for the URL.	 *	 * @return  string  The URL of the item.	 *	 * @since   2.5	 */	protected function getURL($id, $extension, $view)	{		return 'index.php?option=' . $extension . '&view=' . $view . '&id=' . $id;	}	/**	 * Method to get the page title of any menu item that is linked to the	 * content item, if it exists and is set.	 *	 * @param   string  $url  The url of the item.	 *	 * @return  mixed  The title on success, null if not found.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getItemMenuTitle($url)	{		$return = null;		// Set variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Build a query to get the menu params.		$query = $this->db->getQuery(true)			->select($this->db->quoteName('params'))			->from($this->db->quoteName('#__menu'))			->where($this->db->quoteName('link') . ' = ' . $this->db->quote($url))			->where($this->db->quoteName('published') . ' = 1')			->where($this->db->quoteName('access') . ' IN (' . $groups . ')');		// Get the menu params from the database.		$this->db->setQuery($query);		$params = $this->db->loadResult();		// Check the results.		if (empty($params))		{			return $return;		}		// Instantiate the params.		$params = json_decode($params);		// Get the page title if it is set.		if ($params->page_title)		{			$return = $params->page_title;		}		return $return;	}	/**	 * Method to update index data on access level changes	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function itemAccessChange($row)	{		$query = clone($this->getStateQuery());		$query->where('a.id = ' . (int) $row->id);		// Get the access level.		$this->db->setQuery($query);		$item = $this->db->loadObject();		// Set the access level.		$temp = max($row->access, $item->cat_access);		// Update the item.		$this->change((int) $row->id, 'access', $temp);	}	/**	 * Method to update index data on published state changes	 *	 * @param   array    $pks    A list of primary key ids of the content that has changed state.	 * @param   integer  $value  The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function itemStateChange($pks, $value)	{		// The item's published state is tied to the category		// published state so we need to look up all published states		// before we change anything.		foreach ($pks as $pk)		{			$query = clone($this->getStateQuery());			$query->where('a.id = ' . (int) $pk);			// Get the published states.			$this->db->setQuery($query);			$item = $this->db->loadObject();			// Translate the state.			$temp = $this->translateState($value, $item->cat_state);			// Update the item.			$this->change($pk, 'state', $temp);			// Reindex the item			$this->reindex($pk);		}	}	/**	 * Method to update index data when a plugin is disabled	 *	 * @param   array  $pks  A list of primary key ids of the content that has changed state.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function pluginDisable($pks)	{		// Since multiple plugins may be disabled at a time, we need to check first		// that we're handling the appropriate one for the context		foreach ($pks as $pk)		{			if ($this->getPluginType($pk) == strtolower($this->context))			{				// Get all of the items to unindex them				$query = clone($this->getStateQuery());				$this->db->setQuery($query);				$items = $this->db->loadColumn();				// Remove each item				foreach ($items as $item)				{					$this->remove($item);				}			}		}	}	/**	 * Method to translate the native content states into states that the	 * indexer can use.	 *	 * @param   integer  $item      The item state.	 * @param   integer  $category  The category state. [optional]	 *	 * @return  integer  The translated indexer state.	 *	 * @since   2.5	 */	protected function translateState($item, $category = null)	{		// If category is present, factor in its states as well		if ($category !== null)		{			if ($category == 0)			{				$item = 0;			}		}		// Translate the state		switch ($item)		{			// Published and archived items only should return a published state			case 1;			case 2:				return 1;			// All other states should return a unpublished state			default:			case 0:				return 0;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create the copy/move options.$options = array(	JHtml::_('select.option', 'add', JText::_('COM_USERS_BATCH_ADD')),	JHtml::_('select.option', 'del', JText::_('COM_USERS_BATCH_DELETE')),	JHtml::_('select.option', 'set', JText::_('COM_USERS_BATCH_SET')));JHtml::_('formbehavior.chosen', 'select');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_USERS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<div id="batch-choose-action" class="combo control-group">			<label id="batch-choose-action-lbl" class="control-label" for="batch-choose-action">				<?php echo JText::_('COM_USERS_BATCH_GROUP') ?>			</label>		</div>		<div id="batch-choose-action" class="combo controls">			<div class="control-group">				<select name="batch[group_id]" class="inputbox" id="batch-group-id">					<option value=""><?php echo JText::_('JSELECT') ?></option>					<?php echo JHtml::_('select.options', JHtml::_('user.groups')); ?>				</select>			</div>		</div>		<div class="control-group radio">			<?php echo JHtml::_('select.radiolist', $options, 'batch[group_action]', '', 'value', 'text', 'add') ?>		</div>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-group-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('user.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Content table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableContent extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__content', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_content.article';	}	/**	 * Method to compute the default name of the asset.	 * The default name is in the form table_name.id	 * where id is the value of the primary key of the table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetName()	{		$k = $this->_tbl_key;		return 'com_content.article.' . (int) $this->$k;	}	/**	 * Method to return the title to use for the asset table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetTitle()	{		return $this->title;	}	/**	 * Method to get the parent asset id for the record	 *	 * @param   JTable   $table  A JTable object (optional) for the asset parent	 * @param   integer  $id     The id (optional) of the content.	 *	 * @return  integer	 *	 * @since   11.1	 */	protected function _getAssetParentId($table = null, $id = null)	{		$assetId = null;		// This is a article under a category.		if ($this->catid)		{			// Build the query to get the asset id for the parent category.			$query = $this->_db->getQuery(true)				->select($this->_db->quoteName('asset_id'))				->from($this->_db->quoteName('#__categories'))				->where($this->_db->quoteName('id') . ' = ' . (int) $this->catid);			// Get the asset id from the database.			$this->_db->setQuery($query);			if ($result = $this->_db->loadResult())			{				$assetId = (int) $result;			}		}		// Return the asset id.		if ($assetId)		{			return $assetId;		}		else		{			return parent::_getAssetParentId($table, $id);		}	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 *                          to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error string	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Search for the {readmore} tag and split the text up accordingly.		if (isset($array['articletext']))		{			$pattern = '#<hr\s+id=("|\')system-readmore("|\')\s*\/*>#i';			$tagPos = preg_match($pattern, $array['articletext']);			if ($tagPos == 0)			{				$this->introtext = $array['articletext'];				$this->fulltext = '';			}			else			{				list ($this->introtext, $this->fulltext) = preg_split($pattern, $array['articletext'], 2);			}		}		if (isset($array['attribs']) && is_array($array['attribs']))		{			$registry = new JRegistry;			$registry->loadArray($array['attribs']);			$array['attribs'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		// Bind the rules.		if (isset($array['rules']) && is_array($array['rules']))		{			$rules = new JAccessRules($array['rules']);			$this->setRules($rules);		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success, false on failure	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		if (trim($this->title) == '')		{			$this->setError(JText::_('COM_CONTENT_WARNING_PROVIDE_VALID_NAME'));			return false;		}		if (trim($this->alias) == '')		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		if (trim(str_replace('&nbsp;', '', $this->fulltext)) == '')		{			$this->fulltext = '';		}		// Check the publish down date is not earlier than publish up.		if ($this->publish_down > $this->_db->getNullDate() && $this->publish_down < $this->publish_up)		{			// Swap the dates.			$temp = $this->publish_up;			$this->publish_up = $this->publish_down;			$this->publish_down = $temp;		}		// Clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// Only process if not empty			// Array of characters to remove			$bad_characters = array("\n", "\r", "\"", "<", ">");			// Remove bad characters			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey);			// Create array using commas as delimiter			$keys = explode(',', $after_clean);			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key))				{					// Ignore blank keywords					$clean_keys[] = trim($key);				}			}			// Put array back together delimited by ", "			$this->metakey = implode(", ", $clean_keys);		}		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		$this->tagsHelper->typeAlias = 'com_content.article';		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Overrides JTable::store to set modified data and user id.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function store($updateNulls = false)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified = $date->toSql();			$this->modified_by = $user->get('id');		}		else		{			// New article. An article created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Verify that the alias is unique		$table = JTable::getInstance('Content', 'JTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_ARTICLE_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->typeAlias = 'com_content.article';		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table. The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k . '=' . implode(' OR ' . $k . '=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) $userId . ')';		}		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		// Update the publishing state for rows with the given primary keys.		$query->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('state') . ' = ' . (int) $state)			->where('(' . $where . ')' . $checkin);		$this->_db->setQuery($query);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?><div id="sidebar">	<div class="sidebar-nav">		<?php if ($displayData->displayMenu) : ?>		<ul id="submenu" class="nav nav-list">			<?php foreach ($displayData->list as $item) :			if (isset ($item[2]) && $item[2] == 1) : ?>				<li class="active">			<?php else : ?>				<li>			<?php endif;			if ($displayData->hide) : ?>				<a class="nolink"><?php echo $item[0]; ?>			<?php else :				if (strlen($item[1])) : ?>					<a href="<?php echo JFilterOutput::ampReplace($item[1]); ?>"><?php echo $item[0]; ?></a>				<?php else : ?>					<?php echo $item[0]; ?>				<?php endif;			endif; ?>			</li>			<?php endforeach; ?>		</ul>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_login * * @package     Joomla.Administrator * @subpackage  mod_login * @since       1.6 */abstract class ModLoginHelper{	/**	 * Get an HTML select list of the available languages.	 *	 * @return  string	 */	public static function getLanguageList()	{		$languages = JLanguageHelper::createLanguageList(null, JPATH_ADMINISTRATOR, false, true);		array_unshift($languages, JHtml::_('select.option', '', JText::_('JDEFAULTLANGUAGE')));		return JHtml::_('select.genericlist', $languages, 'lang', ' class="inputbox advancedSelect"', 'value', 'text', null);	}	/**	 * Get the redirect URI after login.	 *	 * @return  string	 */	public static function getReturnURI()	{		$uri    = JUri::getInstance();		$return = 'index.php' . $uri->toString(array('query'));		if ($return != 'index.php?option=com_login')		{			return base64_encode($return);		}		else		{			return base64_encode('index.php');		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JFormRule for com_contact to make sure the message body contains no banned word. * * @package     Joomla.Site * @subpackage  com_contact */class JFormRuleContactEmailMessage extends JFormRule{	/**	 * Method to test for a valid color in hexadecimal.	 *	 * @param   SimpleXMLElement  &$element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value     The form field value to validate.	 * @param   string            $group     The field name group control value. This acts as as an array container for the field.	 *                                       For example if the field has name="foo" and the group value is set to "bar" then the	 *                                       full field name would end up being "bar[foo]".	 * @param   object            &$input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   object            &$form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 */	public function test(&$element, $value, $group = null, &$input = null, &$form = null)	{		$params = JComponentHelper::getParams('com_contact');		$banned = $params->get('banned_text');		foreach (explode(';', $banned) as $item) {			if (JString::stristr($item, $value) !== false)					return false;		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Platform * @subpackage  Form * @since       11.4 */class JFormFieldPlugins extends JFormFieldList{	/**	 * The field type.	 *	 * @var    string	 * @since  11.4	 */	protected $type = 'Plugins';	/**	 * Method to get a list of options for a list input.	 *	 * @return	array		An array of JHtml options.	 *	 * @since   11.4	 */	protected function getOptions()	{		$folder	= $this->element['folder'];		if (!empty($folder))		{			// Get list of plugins			$db     = JFactory::getDbo();			$query  = $db->getQuery(true)				->select('element AS value, name AS text')				->from('#__extensions')				->where('folder = ' . $db->quote($folder))				->where('enabled = 1')				->order('ordering, name');			$db->setQuery($query);			$options = $db->loadObjectList();			$lang = JFactory::getLanguage();			foreach ($options as $i => $item)			{				$source = JPATH_PLUGINS . '/' . $folder . '/' . $item->value;				$extension = 'plg_' . $folder . '_' . $item->value;					$lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)				||	$lang->load($extension . '.sys', $source, null, false, false)				||	$lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)				||	$lang->load($extension . '.sys', $source, $lang->getDefault(), false, false);				$options[$i]->text = JText::_($item->text);			}		}		else		{			JLog::add(JText::_('JFRAMEWORK_FORM_FIELDS_PLUGINS_ERROR_FOLDER_EMPTY'), JLog::WARNING, 'jerror');		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$canDo	= BannersHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'client.cancel' || document.formvalidator.isValid(document.id('client-form')))		{			Joomla.submitform(task, document.getElementById('client-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_banners&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="client-form" class="form-validate form-horizontal">	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', empty($this->item->id) ? JText::_('COM_BANNERS_NEW_CLIENT', true) : JText::sprintf('COM_BANNERS_EDIT_CLIENT', $this->item->id, true)); ?>			<div class="row-fluid">				<div class="span6">					<?php if ($canDo->get('core.edit.state')) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('state'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('state'); ?>							</div>						</div>					<?php endif; ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('name'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('name'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('contact'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('contact'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('email'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('email'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('purchase_type'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('purchase_type'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('track_impressions'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('track_impressions'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('track_clicks'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('track_clicks'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('id'); ?>						</div>					</div>				</div>				<div class="span6">					<?php foreach ($this->form->getFieldset('extra') as $field) : ?>						<div class="control-group">							<?php if (!$field->hidden) : ?>								<div class="control-label">									<?php echo $field->label; ?>								</div>							<?php endif; ?>							<div class="controls">								<?php echo $field->input; ?>							</div>						</div>					<?php endforeach; ?>				</div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>			<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Menu table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableMenu extends JTableNested{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__menu', 'id', $db);		// Set the default access level.		$this->access = (int) JFactory::getConfig()->get('access');	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Verify that the default home menu is not unset		if ($this->home == '1' && $this->language == '*' && ($array['home'] == '0'))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_CANNOT_UNSET_DEFAULT_DEFAULT'));			return false;		}		// Verify that the default home menu set to "all" languages" is not unset		if ($this->home == '1' && $this->language == '*' && ($array['language'] != '*'))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_CANNOT_UNSET_DEFAULT'));			return false;		}		// Verify that the default home menu is not unpublished		if ($this->home == '1' && $this->language == '*' && $array['published'] != '1')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNPUBLISH_DEFAULT_HOME'));			return false;		}		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// If the alias field is empty, set it to the title.		$this->alias = trim($this->alias);		if ((empty($this->alias)) && ($this->type != 'alias' && $this->type != 'url'))		{			$this->alias = $this->title;		}		// Make the alias URL safe.		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		// Cast the home property to an int for checking.		$this->home = (int) $this->home;		// Verify that a first level menu item alias is not 'component'.		if ($this->parent_id == 1 && $this->alias == 'component')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_ROOT_ALIAS_COMPONENT'));			return false;		}		// Verify that a first level menu item alias is not the name of a folder.		jimport('joomla.filesystem.folder');		if ($this->parent_id == 1 && in_array($this->alias, JFolder::folders(JPATH_ROOT)))		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_MENU_ROOT_ALIAS_FOLDER', $this->alias, $this->alias));			return false;		}		// Verify that the home item a component.		if ($this->home && $this->type != 'component')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_HOME_NOT_COMPONENT'));			return false;		}		return true;	}	/**	 * Overloaded store function	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  mixed  False on failure, positive integer on success.	 *	 * @see     JTable::store	 * @since   11.1	 */	public function store($updateNulls = false)	{		$db = JFactory::getDbo();		// Verify that the alias is unique		$table = JTable::getInstance('Menu', 'JTable', array('dbo' => $this->getDbo()));		if ($table->load(array('alias' => $this->alias, 'parent_id' => $this->parent_id, 'client_id' => (int) $this->client_id, 'language' => $this->language))			&& ($table->id != $this->id || $this->id == 0))		{			if ($this->menutype == $table->menutype)			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNIQUE_ALIAS'));			}			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNIQUE_ALIAS_ROOT'));			}			return false;		}		// Verify that the home page for this language is unique		if ($this->home == '1')		{			$table = JTable::getInstance('Menu', 'JTable', array('dbo' => $this->getDbo()));			if ($table->load(array('home' => '1', 'language' => $this->language)))			{				if ($table->checked_out && $table->checked_out != $this->checked_out)				{					$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_DEFAULT_CHECKIN_USER_MISMATCH'));					return false;				}				$table->home = 0;				$table->checked_out = 0;				$table->checked_out_time = $db->getNullDate();				$table->store();			}			// Verify that the home page for this menu is unique.			if ($table->load(array('home' => '1', 'menutype' => $this->menutype)) && ($table->id != $this->id || $this->id == 0))			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_HOME_NOT_UNIQUE_IN_MENU'));				return false;			}		}		if (!parent::store($updateNulls))		{			return false;		}		// Get the new path in case the node was moved		$pathNodes = $this->getPath();		$segments = array();		foreach ($pathNodes as $node)		{			// Don't include root in path			if ($node->alias != 'root')			{				$segments[] = $node->alias;			}		}		$newPath = trim(implode('/', $segments), ' /\\');		// Use new path for partial rebuild of table		// Rebuild will return positive integer on success, false on failure		return ($this->rebuild($this->{$this->_tbl_key}, $this->lft, $this->level, $newPath) > 0);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5 */abstract class InstallerHtmlManage{	/**	 * Returns a published state on a grid	 *	 * @param   integer       $value			The state value.	 * @param   integer       $i				The row index	 * @param   boolean       $enabled			An optional setting for access control on the action.	 * @param   string        $checkbox			An optional prefix for checkboxes.	 *	 * @return  string        The Html code	 *	 * @see JHtmlJGrid::state	 *	 * @since   2.5	 */	public static function state($value, $i, $enabled = true, $checkbox = 'cb')	{		$states	= array(			2	=> array(				'',				'COM_INSTALLER_EXTENSION_PROTECTED',				'',				'COM_INSTALLER_EXTENSION_PROTECTED',				false,				'protected',				'protected'			),			1	=> array(				'unpublish',				'COM_INSTALLER_EXTENSION_ENABLED',				'COM_INSTALLER_EXTENSION_DISABLE',				'COM_INSTALLER_EXTENSION_ENABLED',				false,				'publish',				'publish'			),			0	=> array(				'publish',				'COM_INSTALLER_EXTENSION_DISABLED',				'COM_INSTALLER_EXTENSION_ENABLE',				'COM_INSTALLER_EXTENSION_DISABLED',				false,				'unpublish',				'unpublish'			),		);		return JHtml::_('jgrid.state', $states, $value, $i, 'manage.', $enabled, true, $checkbox);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to install the sample data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallSample extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the options from the session		$options = $model->getOptions();		// Get the database model.		$db = new InstallationModelDatabase;		// Attempt to create the database tables.		$return = $db->installSampleData($options);		$r = new stdClass;		$r->view = 'install';		// Check if the database was initialised		if (!$return)		{			$r->view = 'database';		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * * Provides a pop up date picker linked to a button. * Optionally may be filtered to use user's or server's time zone. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldCalendar extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Calendar';	/**	 * Method to get the field input markup.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$format = $this->element['format'] ? (string) $this->element['format'] : '%Y-%m-%d';		// Build the attributes array.		$attributes = array();		if ($this->element['size'])		{			$attributes['size'] = (int) $this->element['size'];		}		if ($this->element['maxlength'])		{			$attributes['maxlength'] = (int) $this->element['maxlength'];		}		if ($this->element['class'])		{			$attributes['class'] = (string) $this->element['class'];		}		if ((string) $this->element['readonly'] == 'true')		{			$attributes['readonly'] = 'readonly';		}		if ((string) $this->element['disabled'] == 'true')		{			$attributes['disabled'] = 'disabled';		}		if ($this->element['onchange'])		{			$attributes['onchange'] = (string) $this->element['onchange'];		}		if ($this->required)		{			$attributes['required'] = 'required';			$attributes['aria-required'] = 'true';		}		// Handle the special case for "now".		if (strtoupper($this->value) == 'NOW')		{			$this->value = strftime($format);		}		// Get some system objects.		$config = JFactory::getConfig();		$user = JFactory::getUser();		// If a known filter is given use it.		switch (strtoupper((string) $this->element['filter']))		{			case 'SERVER_UTC':				// Convert a date to UTC based on the server timezone.				if ((int) $this->value)				{					// Get a date object based on the correct timezone.					$date = JFactory::getDate($this->value, 'UTC');					$date->setTimezone(new DateTimeZone($config->get('offset')));					// Transform the date string.					$this->value = $date->format('Y-m-d H:i:s', true, false);				}				break;			case 'USER_UTC':				// Convert a date to UTC based on the user timezone.				if ((int) $this->value)				{					// Get a date object based on the correct timezone.					$date = JFactory::getDate($this->value, 'UTC');					$date->setTimezone(new DateTimeZone($user->getParam('timezone', $config->get('offset'))));					// Transform the date string.					$this->value = $date->format('Y-m-d H:i:s', true, false);				}				break;		}		return JHtml::_('calendar', $this->value, $this->name, $this->id, $format, $attributes);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugins list controller class. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsControllerPlugins extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Plugin', $prefix = 'PluginsModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$input = JFactory::getApplication()->input;		$pks = $input->post->get('cid', array(), 'array');		$order = $input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PostgreSQL database driver * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseDriverPostgresql extends JDatabaseDriver{	/**	 * The database driver name	 *	 * @var string	 */	public $name = 'postgresql';	/**	 * Quote for named objects	 *	 * @var string	 */	protected $nameQuote = '"';	/**	 *  The null/zero date string	 *	 * @var string	 */	protected $nullDate = '1970-01-01 00:00:00';	/**	 * @var    string  The minimum supported database version.	 * @since  12.1	 */	protected static $dbMinimum = '8.3.18';	/**	 * Operator used for concatenation	 *	 * @var string	 */	protected $concat_operator = '||';	/**	 * JDatabaseDriverPostgresqlQuery object returned by getQuery	 *	 * @var JDatabaseDriverPostgresqlQuery	 */	protected $queryObject = null;	/**	 * Database object constructor	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since	12.1	 */	public function __construct( $options )	{		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['user'] = (isset($options['user'])) ? $options['user'] : '';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		// Finalize initialization		parent::__construct($options);	}	/**	 * Database object destructor	 *	 * @since 12.1	 */	public function __destruct()	{		if (is_resource($this->connection))		{			pg_close($this->connection);		}	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		// Make sure the postgresql extension for PHP is installed and enabled.		if (!function_exists('pg_connect'))		{			throw new RuntimeException('PHP extension pg_connect is not available.');		}		// Build the DSN for the connection.		$dsn = "host={$this->options['host']} dbname={$this->options['database']} user={$this->options['user']} password={$this->options['password']}";		// Attempt to connect to the server.		if (!($this->connection = @pg_connect($dsn)))		{			throw new RuntimeException('Error connecting to PGSQL database.');		}		pg_set_error_verbosity($this->connection, PGSQL_ERRORS_DEFAULT);		pg_query('SET standard_conforming_strings=off');	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		if (is_resource($this->connection))		{			pg_close($this->connection);		}		$this->connection = null;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		$this->connect();		$result = pg_escape_string($this->connection, $text);		if ($extra)		{			$result = addcslashes($result, '%_');		}		return $result;	}	/**	 * Test to see if the PostgreSQL connector is available	 *	 * @return boolean  True on success, false otherwise.	 */	public static function test()	{		return (function_exists('pg_connect'));	}	/**	 * Determines if the connection to the server is active.	 *	 * @return	boolean	 *	 * @since	12.1	 */	public function connected()	{		$this->connect();		if (is_resource($this->connection))		{			return pg_ping($this->connection);		}		return false;	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  boolean	true	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$this->setQuery('DROP TABLE ' . ($ifExists ? 'IF EXISTS ' : '') . $this->quoteName($tableName));		$this->execute();		return true;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return int The number of affected rows in the previous operation	 *	 * @since 12.1	 */	public function getAffectedRows()	{		$this->connect();		return pg_affected_rows($this->cursor);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getCollation()	{		$this->connect();		$this->setQuery('SHOW LC_COLLATE');		$array = $this->loadAssocList();		return $array[0]['lc_collate'];	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cur  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows( $cur = null )	{		$this->connect();		return pg_num_rows((int) $cur ? $cur : $this->cursor);	}	/**	 * Get the current or query, or new JDatabaseQuery object.	 *	 * @param   boolean  $new    False to return the last query set, True to return a new JDatabaseQuery object.	 * @param   boolean  $asObj  False to return last query as string, true to get JDatabaseQueryPostgresql object.	 *	 * @return  JDatabaseQuery  The current query object or a new object extending the JDatabaseQuery class.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getQuery($new = false, $asObj = false)	{		if ($new)		{			// Make sure we have a query class for this driver.			if (!class_exists('JDatabaseQueryPostgresql'))			{				throw new RuntimeException('JDatabaseQueryPostgresql Class not found.');			}			$this->queryObject = new JDatabaseQueryPostgresql($this);			return $this->queryObject;		}		else		{			if ($asObj)			{				return $this->queryObject;			}			else			{				return $this->sql;			}		}	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * This is unsuported by PostgreSQL.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  char  An empty char because this function is not supported by PostgreSQL.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		return '';	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$result = array();		$tableSub = $this->replacePrefix($table);		$this->setQuery('				SELECT a.attname AS "column_name",					pg_catalog.format_type(a.atttypid, a.atttypmod) as "type",					CASE WHEN a.attnotnull IS TRUE						THEN \'NO\'						ELSE \'YES\'					END AS "null",					CASE WHEN pg_catalog.pg_get_expr(adef.adbin, adef.adrelid, true) IS NOT NULL						THEN pg_catalog.pg_get_expr(adef.adbin, adef.adrelid, true)					END as "Default",					CASE WHEN pg_catalog.col_description(a.attrelid, a.attnum) IS NULL					THEN \'\'					ELSE pg_catalog.col_description(a.attrelid, a.attnum)					END  AS "comments"				FROM pg_catalog.pg_attribute a				LEFT JOIN pg_catalog.pg_attrdef adef ON a.attrelid=adef.adrelid AND a.attnum=adef.adnum				LEFT JOIN pg_catalog.pg_type t ON a.atttypid=t.oid				WHERE a.attrelid =					(SELECT oid FROM pg_catalog.pg_class WHERE relname=' . $this->quote($tableSub) . '						AND relnamespace = (SELECT oid FROM pg_catalog.pg_namespace WHERE						nspname = \'public\')					)				AND a.attnum > 0 AND NOT a.attisdropped				ORDER BY a.attnum'		);		$fields = $this->loadObjectList();		if ($typeOnly)		{			foreach ($fields as $field)			{				$result[$field->column_name] = preg_replace("/[(0-9)]/", '', $field->type);			}		}		else		{			foreach ($fields as $field)			{				$result[$field->column_name] = $field;			}		}		/* Change Postgresql's NULL::* type with PHP's null one */		foreach ($fields as $field)		{			if (preg_match("/^NULL::*/", $field->Default))			{				$field->Default = null;			}		}		return $result;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		// To check if table exists and prevent SQL injection		$tableList = $this->getTableList();		if ( in_array($table, $tableList) )		{			// Get the details columns information.			$this->setQuery('					SELECT indexname AS "idxName", indisprimary AS "isPrimary", indisunique  AS "isUnique",						CASE WHEN indisprimary = true THEN							( SELECT \'ALTER TABLE \' || tablename || \' ADD \' || pg_catalog.pg_get_constraintdef(const.oid, true)								FROM pg_constraint AS const WHERE const.conname= pgClassFirst.relname )						ELSE pg_catalog.pg_get_indexdef(indexrelid, 0, true)						END AS "Query"					FROM pg_indexes					LEFT JOIN pg_class AS pgClassFirst ON indexname=pgClassFirst.relname					LEFT JOIN pg_index AS pgIndex ON pgClassFirst.oid=pgIndex.indexrelid					WHERE tablename=' . $this->quote($table) . ' ORDER BY indkey'			);			$keys = $this->loadObjectList();			return $keys;		}		return false;	}	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		$query = $this->getQuery(true)			->select('table_name')				->from('information_schema.tables')				->where('table_type=' . $this->quote('BASE TABLE'))				->where(					'table_schema NOT IN (' . $this->quote('pg_catalog') . ', ' . $this->quote('information_schema') . ')'				)				->order('table_name ASC');		$this->setQuery($query);		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the details list of sequences for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of sequences specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableSequences($table)	{		$this->connect();		// To check if table exists and prevent SQL injection		$tableList = $this->getTableList();		if ( in_array($table, $tableList) )		{			$name = array('s.relname', 'n.nspname', 't.relname', 'a.attname', 'info.data_type',							'info.minimum_value', 'info.maximum_value', 'info.increment', 'info.cycle_option');			$as = array('sequence', 'schema', 'table', 'column', 'data_type',							'minimum_value', 'maximum_value', 'increment', 'cycle_option');			if (version_compare($this->getVersion(), '9.1.0') >= 0)			{				$name[] .= 'info.start_value';				$as[] .= 'start_value';			}			// Get the details columns information.			$query = $this->getQuery(true)				->select($this->quoteName($name, $as))					->from('pg_class AS s')					->join('LEFT', "pg_depend d ON d.objid=s.oid AND d.classid='pg_class'::regclass AND d.refclassid='pg_class'::regclass")					->join('LEFT', 'pg_class t ON t.oid=d.refobjid')					->join('LEFT', 'pg_namespace n ON n.oid=t.relnamespace')					->join('LEFT', 'pg_attribute a ON a.attrelid=t.oid AND a.attnum=d.refobjsubid')					->join('LEFT', 'information_schema.sequences AS info ON info.sequence_name=s.relname')					->where("s.relkind='S' AND d.deptype='a' AND t.relname=" . $this->quote($table));			$this->setQuery($query);			$seq = $this->loadObjectList();			return $seq;		}		return false;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$version = pg_version($this->connection);		return $version['server'];	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 * To be called after the INSERT statement, it's MANDATORY to have a sequence on	 * every primary key table.	 *	 * To get the auto incremented value it's possible to call this function after	 * INSERT INTO query, or use INSERT INTO with RETURNING clause.	 *	 * @example with insertid() call:	 *		$query = $this->getQuery(true);	 *		$query->insert('jos_dbtest')	 *				->columns('title,start_date,description')	 *				->values("'testTitle2nd','1971-01-01','testDescription2nd'");	 *		$this->setQuery($query);	 *		$this->execute();	 *		$id = $this->insertid();	 *	 * @example with RETURNING clause:	 *		$query = $this->getQuery(true);	 *		$query->insert('jos_dbtest')	 *				->columns('title,start_date,description')	 *				->values("'testTitle2nd','1971-01-01','testDescription2nd'")	 *				->returning('id');	 *		$this->setQuery($query);	 *		$id = $this->loadResult();	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		$insertQuery = $this->getQuery(false, true);		$table = $insertQuery->__get('insert')->getElements();		/* find sequence column name */		$colNameQuery = $this->getQuery(true);		$colNameQuery->select('column_default')						->from('information_schema.columns')						->where(								"table_name=" . $this->quote(									$this->replacePrefix(str_replace('"', '', $table[0]))								), 'AND'						)						->where("column_default LIKE '%nextval%'");		$this->setQuery($colNameQuery);		$colName = $this->loadRow();		$changedColName = str_replace('nextval', 'currval', $colName);		$insertidQuery = $this->getQuery(true);		$insertidQuery->select($changedColName);		$this->setQuery($insertidQuery);		$insertVal = $this->loadRow();		return $insertVal[0];	}	/**	 * Locks a table in the database.	 *	 * @param   string  $tableName  The name of the table to unlock.	 *	 * @return  JDatabaseDriverPostgresql  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public function lockTable($tableName)	{		$this->transactionStart();		$this->setQuery('LOCK TABLE ' . $this->quoteName($tableName) . ' IN ACCESS EXCLUSIVE MODE')->execute();		return $this;	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function execute()	{		$this->connect();		if (!is_resource($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			$query .= ' LIMIT ' . $this->limit . ' OFFSET ' . $this->offset;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query. Error suppression is used here to prevent warnings/notices that the connection has been lost.		$this->cursor = @pg_query($this->connection, $query);		// If an error occurred handle it.		if (!$this->cursor)		{			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					// Get the error number and message.					$this->errorNum = (int) pg_result_error_field($this->cursor, PGSQL_DIAG_SQLSTATE) . ' ';					$this->errorMsg = JText::_('JLIB_DATABASE_QUERY_FAILED') . "\n" . pg_last_error($this->connection) . "\nSQL=" . $query;					// Throw the normal query exception.					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				// Get the error number and message.				$this->errorNum = (int) pg_result_error_field($this->cursor, PGSQL_DIAG_SQLSTATE) . ' ';				$this->errorMsg = JText::_('JLIB_DATABASE_QUERY_FAILED') . "\n" . pg_last_error($this->connection) . "\nSQL=" . $query;				// Throw the normal query exception.				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg);			}		}		return $this->cursor;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by PostgreSQL.	 * @param   string  $prefix    Not used by PostgreSQL.	 *	 * @return  JDatabaseDriverPostgresql  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->connect();		// To check if table exists and prevent SQL injection		$tableList = $this->getTableList();		// Origin Table does not exist		if ( !in_array($oldTable, $tableList) )		{			// Origin Table not found			throw new RuntimeException('Table not found in Postgresql database.');		}		else		{			/* Rename indexes */			$this->setQuery(							'SELECT relname								FROM pg_class								WHERE oid IN (									SELECT indexrelid									FROM pg_index, pg_class									WHERE pg_class.relname=' . $this->quote($oldTable, true) . '									AND pg_class.oid=pg_index.indrelid );'			);			$oldIndexes = $this->loadColumn();			foreach ($oldIndexes as $oldIndex)			{				$changedIdxName = str_replace($oldTable, $newTable, $oldIndex);				$this->setQuery('ALTER INDEX ' . $this->escape($oldIndex) . ' RENAME TO ' . $this->escape($changedIdxName));				$this->execute();			}			/* Rename sequence */			$this->setQuery(							'SELECT relname								FROM pg_class								WHERE relkind = \'S\'								AND relnamespace IN (									SELECT oid									FROM pg_namespace									WHERE nspname NOT LIKE \'pg_%\'									AND nspname != \'information_schema\'								)								AND relname LIKE \'%' . $oldTable . '%\' ;'			);			$oldSequences = $this->loadColumn();			foreach ($oldSequences as $oldSequence)			{				$changedSequenceName = str_replace($oldTable, $newTable, $oldSequence);				$this->setQuery('ALTER SEQUENCE ' . $this->escape($oldSequence) . ' RENAME TO ' . $this->escape($changedSequenceName));				$this->execute();			}			/* Rename table */			$this->setQuery('ALTER TABLE ' . $this->escape($oldTable) . ' RENAME TO ' . $this->escape($newTable));			$this->execute();		}		return true;	}	/**	 * Selects the database, but redundant for PostgreSQL	 *	 * @param   string  $database  Database name to select.	 *	 * @return  boolean  Always true	 */	public function select($database)	{		return true;	}	/**	 * Custom settings for UTF support	 *	 * @return  int  Zero on success, -1 on failure	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return pg_set_client_encoding($this->connection, 'UTF8');	}	/**	 * This function return a field value as a prepared string to be used in a SQL statement.	 *	 * @param   array   $columns      Array of table's column returned by ::getTableColumns.	 * @param   string  $field_name   The table field's name.	 * @param   string  $field_value  The variable value to quote and return.	 *	 * @return  string  The quoted string.	 *	 * @since   11.3	 */	protected function sqlValue($columns, $field_name, $field_value)	{		switch ($columns[$field_name])		{			case 'boolean':				$val = 'NULL';				if ($field_value == 't')				{					$val = 'TRUE';				}				elseif ($field_value == 'f')				{					$val = 'FALSE';				}				break;			case 'bigint':			case 'bigserial':			case 'integer':			case 'money':			case 'numeric':			case 'real':			case 'smallint':			case 'serial':			case 'numeric,':				$val = strlen($field_value) == 0 ? 'NULL' : $field_value;				break;			case 'date':			case 'timestamp without time zone':				if (empty($field_value))				{					$field_value = $this->getNullDate();				}			default:				$val = $this->quote($field_value);				break;		}		return $val;	}	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		$this->setQuery('COMMIT');		$this->execute();	}	/**	 * Method to roll back a transaction.	 *	 * @param   string  $toSavepoint  If present rollback transaction to this savepoint	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionRollback($toSavepoint = null)	{		$this->connect();		$query = 'ROLLBACK';		if (!is_null($toSavepoint))		{			$query .= ' TO SAVEPOINT ' . $this->escape($toSavepoint);		}		$this->setQuery($query);		$this->execute();	}	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		$this->setQuery('START TRANSACTION');		$this->execute();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		return pg_fetch_row($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		return pg_fetch_assoc($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		return pg_fetch_object(is_null($cursor) ? $this->cursor : $cursor, null, $class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		pg_free_result($cursor ? $cursor : $this->cursor);	}	/**	 * Inserts a row into a table based on an object's properties.	 *	 * @param   string  $table    The name of the database table to insert into.	 * @param   object  &$object  A reference to an object whose public properties match the table fields.	 * @param   string  $key      The name of the primary key. If provided the object property is updated.	 *	 * @return  boolean    True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function insertObject($table, &$object, $key = null)	{		$columns = $this->getTableColumns($table);		$fields = array();		$values = array();		// Iterate over the object variables to build the query fields and values.		foreach (get_object_vars($object) as $k => $v)		{			// Only process non-null scalars.			if (is_array($v) or is_object($v) or $v === null)			{				continue;			}			// Ignore any internal fields.			if ($k[0] == '_')			{				continue;			}			// Prepare and sanitize the fields and values for the database query.			$fields[] = $this->quoteName($k);			$values[] = $this->sqlValue($columns, $k, $v);		}		// Create the base insert statement.		$query = $this->getQuery(true)			->insert($this->quoteName($table))				->columns($fields)				->values(implode(',', $values));		$retVal = false;		if ($key)		{			$query->returning($key);			// Set the query and execute the insert.			$this->setQuery($query);			$id = $this->loadResult();			if ($id)			{				$object->$key = $id;				$retVal = true;			}		}		else		{			// Set the query and execute the insert.			$this->setQuery($query);			if ($this->execute())			{				$retVal = true;			}		}		return $retVal;	}	/**	 * Test to see if the PostgreSQL connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (function_exists('pg_connect'));	}	/**	 * Returns an array containing database's table list.	 *	 * @return	array	The database's table list.	 */	public function showTables()	{		$this->connect();		$query = $this->getQuery(true)			->select('table_name')				->from('information_schema.tables')				->where('table_type=' . $this->quote('BASE TABLE'))				->where(					'table_schema NOT IN (' . $this->quote('pg_catalog') . ', ' . $this->quote('information_schema') . ' )'				);		$this->setQuery($query);		$tableList = $this->loadColumn();		return $tableList;	}	/**	 * Get the substring position inside a string	 *	 * @param   string  $substring  The string being sought	 * @param   string  $string     The string/column being searched	 *	 * @return int   The position of $substring in $string	 */	public function getStringPositionSQL( $substring, $string )	{		$this->connect();		$query = "SELECT POSITION( $substring IN $string )";		$this->setQuery($query);		$position = $this->loadRow();		return $position['position'];	}	/**	 * Generate a random value	 *	 * @return float The random generated number	 */	public function getRandom()	{		$this->connect();		$this->setQuery('SELECT RANDOM()');		$random = $this->loadAssoc();		return $random['random'];	}	/**	 * Return the query string to alter the database character set.	 *	 * @param   string  $dbName  The database name	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 */	protected function getAlterDbCharacterSet($dbName)	{		$query = 'ALTER DATABASE ' . $this->quoteName($dbName) . ' SET CLIENT_ENCODING TO ' . $this->quote('UTF8');		return $query;	}	/**	 * Return the query string to create new Database using PostgreSQL's syntax	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database, owned by $options['user']	 *	 * @since   12.2	 */	protected function getCreateDatabaseQuery($options, $utf)	{		$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name) . ' OWNER ' . $this->quoteName($options->db_user);		if ($utf)		{			$query .= ' ENCODING ' . $this->quote('UTF-8');		}		return $query;	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   12.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$query = trim($query);		$replacedQuery = '';		if ( strpos($query, '\'') )		{			// Sequence name quoted with ' ' but need to be replaced			if ( strpos($query, 'currval') )			{				$query = explode('currval', $query);				for ( $nIndex = 1; $nIndex < count($query); $nIndex = $nIndex + 2 )				{					$query[$nIndex] = str_replace($prefix, $this->tablePrefix, $query[$nIndex]);				}				$query = implode('currval', $query);			}			// Sequence name quoted with ' ' but need to be replaced			if ( strpos($query, 'nextval') )			{				$query = explode('nextval', $query);				for ( $nIndex = 1; $nIndex < count($query); $nIndex = $nIndex + 2 )				{					$query[$nIndex] = str_replace($prefix, $this->tablePrefix, $query[$nIndex]);				}				$query = implode('nextval', $query);			}			// Sequence name quoted with ' ' but need to be replaced			if ( strpos($query, 'setval') )			{				$query = explode('setval', $query);				for ( $nIndex = 1; $nIndex < count($query); $nIndex = $nIndex + 2 )				{					$query[$nIndex] = str_replace($prefix, $this->tablePrefix, $query[$nIndex]);				}				$query = implode('setval', $query);			}			$explodedQuery = explode('\'', $query);			for ( $nIndex = 0; $nIndex < count($explodedQuery); $nIndex = $nIndex + 2 )			{				if ( strpos($explodedQuery[$nIndex], $prefix) )				{					$explodedQuery[$nIndex] = str_replace($prefix, $this->tablePrefix, $explodedQuery[$nIndex]);				}			}			$replacedQuery = implode('\'', $explodedQuery);		}		else		{			$replacedQuery = str_replace($prefix, $this->tablePrefix, $query);		}		return $replacedQuery;	}	/**	 * Method to release a savepoint.	 *	 * @param   string  $savepointName  Savepoint's name to release	 *	 * @return  void	 *	 * @since   12.1	 */	public function releaseTransactionSavepoint( $savepointName )	{		$this->connect();		$this->setQuery('RELEASE SAVEPOINT ' . $this->escape($savepointName));		$this->execute();	}	/**	 * Method to create a savepoint.	 *	 * @param   string  $savepointName  Savepoint's name to create	 *	 * @return  void	 *	 * @since   12.1	 */	public function transactionSavepoint( $savepointName )	{		$this->connect();		$this->setQuery('SAVEPOINT ' . $this->escape($savepointName));		$this->execute();	}	/**	 * Unlocks tables in the database, this command does not exist in PostgreSQL,	 * it is automatically done on commit or rollback.	 *	 * @return  JDatabaseDriverPostgresql  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public function unlockTables()	{		$this->transactionCommit();		return $this;	}	/**	 * Updates a row in a table based on an object's properties.	 *	 * @param   string   $table    The name of the database table to update.	 * @param   object   &$object  A reference to an object whose public properties match the table fields.	 * @param   string   $key      The name of the primary key.	 * @param   boolean  $nulls    True to update null fields or false to ignore them.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function updateObject($table, &$object, $key, $nulls = false)	{		$columns = $this->getTableColumns($table);		$fields = array();		$where = '';		// Create the base update statement.		$query = $this->getQuery(true)			->update($table);		$stmt = '%s WHERE %s';		// Iterate over the object variables to build the query fields/value pairs.		foreach (get_object_vars($object) as $k => $v)		{			// Only process scalars that are not internal fields.			if (is_array($v) or is_object($v) or $k[0] == '_')			{				continue;			}			// Set the primary key to the WHERE clause instead of a field to update.			if ($k == $key)			{				$key_val = $this->sqlValue($columns, $k, $v);				$where = $this->quoteName($k) . '=' . $key_val;				continue;			}			// Prepare and sanitize the fields and values for the database query.			if ($v === null)			{				// If the value is null and we want to update nulls then set it.				if ($nulls)				{					$val = 'NULL';				}				// If the value is null and we do not want to update nulls then ignore this field.				else				{					continue;				}			}			// The field is not null so we prep it for update.			else			{				$val = $this->sqlValue($columns, $k, $v);			}			// Add the field to be updated.			$fields[] = $this->quoteName($k) . '=' . $val;		}		// We don't have any fields to update.		if (empty($fields))		{			return true;		}		// Set the query and execute the update.		$query->set(sprintf($stmt, implode(",", $fields), $where));		$this->setQuery($query);		return $this->execute();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// no direct accessdefined('_JEXEC') or die;echo JHtml::_('sliders.start', 'panel-sliders', array('useCookie' => '1'));foreach ($this->modules as $module){	$output = JModuleHelper::renderModule($module);	$params = new JRegistry;	$params->loadString($module->params);	if ($params->get('automatic_title', '0') == '0')	{		echo JHtml::_('sliders.panel', $module->title, 'cpanel-panel-' . $module->name);	}	elseif (method_exists('mod'.$module->name.'Helper', 'getTitle'))	{		echo JHtml::_('sliders.panel', call_user_func_array(array('mod' . $module->name . 'Helper', 'getTitle'), array($params)), 'cpanel-panel-' . $module->name);	}	else	{		echo JHtml::_('sliders.panel', JText::_('MOD_' . $module->name . '_TITLE'), 'cpanel-panel-' . $module->name);	}	echo $output;}echo JHtml::_('sliders.end');
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.updater.updateadapter');/** * Extension class for updater * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 * */class JUpdaterExtension extends JUpdateAdapter{	/**	 * Start element parser callback.	 *	 * @param   object  $parser  The parser object.	 * @param   string  $name    The name of the element.	 * @param   array   $attrs   The attributes of the element.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _startElement($parser, $name, $attrs = array())	{		array_push($this->stack, $name);		$tag = $this->_getStackLocation();		// Reset the data		if (isset($this->$tag))		{			$this->$tag->_data = "";		}		switch ($name)		{			case 'UPDATE':				$this->current_update = JTable::getInstance('update');				$this->current_update->update_site_id = $this->updateSiteId;				$this->current_update->detailsurl = $this->_url;				$this->current_update->folder = "";				$this->current_update->client_id = 1;				break;			// Don't do anything			case 'UPDATES':				break;			default:				if (in_array($name, $this->updatecols))				{					$name = strtolower($name);					$this->current_update->$name = '';				}				if ($name == 'TARGETPLATFORM')				{					$this->current_update->targetplatform = $attrs;				}				break;		}	}	/**	 * Character Parser Function	 *	 * @param   object  $parser  Parser object.	 * @param   object  $name    The name of the element.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _endElement($parser, $name)	{		array_pop($this->stack);		// @todo remove code: echo 'Closing: '. $name .'<br />';		switch ($name)		{			case 'UPDATE':				$ver = new JVersion;				// Lower case and remove the exclamation mark				$product = strtolower(JFilterInput::getInstance()->clean($ver->PRODUCT, 'cmd'));				// Check that the product matches and that the version matches (optionally a regexp)				// Check for optional min_dev_level and max_dev_level attributes to further specify targetplatform (e.g., 3.0.1)				if ($product == $this->current_update->targetplatform['NAME']					&& preg_match('/' . $this->currentUpdate->targetplatform->version . '/', $ver->RELEASE)					&& ((!isset($this->currentUpdate->targetplatform->min_dev_level)) || $ver->DEV_LEVEL >= $this->currentUpdate->targetplatform->min_dev_level)					&& ((!isset($this->currentUpdate->targetplatform->max_dev_level)) || $ver->DEV_LEVEL <= $this->currentUpdate->targetplatform->max_dev_level))				{					// Target platform isn't a valid field in the update table so unset it to prevent J! from trying to store it					unset($this->current_update->targetplatform);					if (isset($this->latest))					{						if (version_compare($this->current_update->version, $this->latest->version, '>') == 1)						{							$this->latest = $this->current_update;						}					}					else					{						$this->latest = $this->current_update;					}				}				break;			case 'UPDATES':				// :D				break;		}	}	/**	 * Character Parser Function	 *	 * @param   object  $parser  Parser object.	 * @param   object  $data    The data.	 *	 * @return  void	 *	 * @note    This is public because its called externally.	 * @since   11.1	 */	protected function _characterData($parser, $data)	{		$tag = $this->_getLastTag();		/**		 * @todo remove code		 * if(!isset($this->$tag->_data)) $this->$tag->_data = '';		 * $this->$tag->_data .= $data;		 */		if (in_array($tag, $this->updatecols))		{			$tag = strtolower($tag);			$this->current_update->$tag .= $data;		}	}	/**	 * Finds an update.	 *	 * @param   array  $options  Update options.	 *	 * @return  array  Array containing the array of update sites and array of updates	 *	 * @since   11.1	 */	public function findUpdate($options)	{		$url = $options['location'];		$this->_url = &$url;		$this->updateSiteId = $options['update_site_id'];		if (substr($url, -4) != '.xml')		{			if (substr($url, -1) != '/')			{				$url .= '/';			}			$url .= 'extension.xml';		}		$db = $this->parent->getDBO();		$http = JHttpFactory::getHttp();		$response = $http->get($url);		if (!empty($response->code) && 200 != $response->code)		{			$query = $db->getQuery(true)				->update('#__update_sites')				->set('enabled = 0')				->where('update_site_id = ' . $this->updateSiteId);			$db->setQuery($query);			$db->execute();			JLog::add("Error opening url: " . $url, JLog::WARNING, 'updater');			$app = JFactory::getApplication();			$app->enqueueMessage(JText::sprintf('JLIB_UPDATER_ERROR_EXTENSION_OPEN_URL', $url), 'warning');			return false;		}		$this->xmlParser = xml_parser_create('');		xml_set_object($this->xmlParser, $this);		xml_set_element_handler($this->xmlParser, '_startElement', '_endElement');		xml_set_character_data_handler($this->xmlParser, '_characterData');		if (!xml_parse($this->xmlParser, $response->body))		{			JLog::add("Error parsing url: " . $url, JLog::WARNING, 'updater');			$app = JFactory::getApplication();			$app->enqueueMessage(JText::sprintf('JLIB_UPDATER_ERROR_EXTENSION_PARSE_URL', $url), 'warning');			return false;		}		xml_parser_free($this->xmlParser);		if (isset($this->latest))		{			if (isset($this->latest->client) && strlen($this->latest->client))			{				if (is_numeric($this->latest->client))				{					$byName = false;					// <client> has to be 'administrator' or 'site', numeric values are depreceated. See http://docs.joomla.org/Design_of_JUpdate					JLog::add(						'Using numeric values for <client> in the updater xml is deprecated. Use \'administrator\' or \'site\' instead.',						JLog::WARNING, 'deprecated'					);				}				else				{					$byName = true;				}				$this->latest->client_id = JApplicationHelper::getClientInfo($this->latest->client, $byName)->id;				unset($this->latest->client);			}			$updates = array($this->latest);		}		else		{			$updates = array();		}		return array('update_sites' => array(), 'updates' => $updates);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Update View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewUpdate extends InstallerViewDefault{	/**	 * List of update items	 *	 * @var array	 */	protected $items;	/**	 * Model state object	 *	 * @var  object	 */	protected $state;	/**	 * List pagination	 *	 * @var JPagination	 */	protected $pagination;	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$app = JFactory::getApplication();		// Get data from the model		$this->state = $this->get('State');		$this->items = $this->get('Items');		$this->pagination = $this->get('Pagination');		$paths = new stdClass;		$paths->first = '';		$this->paths = &$paths;		if (count($this->items) > 0)		{			$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_WARNINGS_UPDATE_NOTICE'), 'notice');		}		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo = InstallerHelper::getActions();		JToolbarHelper::custom('update.update', 'upload', 'upload', 'COM_INSTALLER_TOOLBAR_UPDATE', true, false);		JToolbarHelper::custom('update.find', 'refresh', 'refresh', 'COM_INSTALLER_TOOLBAR_FIND_UPDATES', false, false);		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_UPDATE');		JHtmlSidebar::setAction('index.php?option=com_installer&view=manage');		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_CLIENT_SELECT'),			'filter_client_id',			JHtml::_('select.options', array('0' => 'JSITE', '1' => 'JADMINISTRATOR'), 'value', 'text', $this->state->get('filter.client_id'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_TYPE_SELECT'),			'filter_type',			JHtml::_('select.options', InstallerHelper::getExtensionTypes(), 'value', 'text', $this->state->get('filter.type'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_FOLDER_SELECT'),			'filter_group',			JHtml::_(				'select.options',				array_merge(InstallerHelper::getExtensionGroupes(), array('*' => JText::_('COM_INSTALLER_VALUE_FOLDER_NONAPPLICABLE'))),				'value',				'text',				$this->state->get('filter.group'),				true			)		);		parent::addToolbar();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'menuOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet):		if (!($this->item->link == 'index.php?option=com_wrapper&view=wrapper' && $fieldSet->name == 'request')):			$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$name.'_FIELDSET_LABEL';			echo JHtml::_('bootstrap.addSlide', 'menuOptions', JText::_($label), 'collapse' . $i++);				if (isset($fieldSet->description) && trim($fieldSet->description)) :					echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';				endif;				?>					<?php foreach ($this->form->getFieldset($name) as $field) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $field->label; ?>							</div>							<div class="controls">								<?php echo $field->input; ?>							</div>						</div>					<?php endforeach;			echo JHtml::_('bootstrap.endSlide');		endif;	endforeach;?><?phpecho JHtml::_('bootstrap.endAccordion');
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Languages View class for the Languages component * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesViewLanguages extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		LanguagesHelper::addSubmenu('languages');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_LANGUAGES_TITLE'), 'langmanager.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('language.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('language.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.edit.state'))		{			if ($this->state->get('filter.published') != 2)			{				JToolbarHelper::publishList('languages.publish');				JToolbarHelper::unpublishList('languages.unpublish');			}		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'languages.delete', 'JTOOLBAR_EMPTY_TRASH');			JToolbarHelper::divider();		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('languages.trash');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			// Add install languages link to the lang installer component			$bar = JToolbar::getInstance('toolbar');			$bar->appendButton('Link', 'upload', 'COM_LANGUAGES_INSTALL', 'index.php?option=com_installer&view=languages');			JToolbarHelper::divider();			JToolbarHelper::preferences('com_languages');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_CONTENT');		JHtmlSidebar::setAction('index.php?option=com_languages&view=languages');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php $images = json_decode($displayData->images); ?><?php if (isset($images->image_intro) && !empty($images->image_intro)) : ?>	<?php $imgfloat = (empty($images->float_intro)) ? $params->get('float_intro') : $images->float_intro; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_intro_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_intro_caption) .'"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_intro); ?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>"/> </div><?php endif; ?>
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Field to select a user id from a modal list. * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6.0 */class JFormFieldUser extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6.0	 */	public $type = 'User';	/**	 * Method to get the user field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   1.6.0	 */	protected function getInput()	{		$html = array();		$groups = $this->getGroups();		$excluded = $this->getExcluded();		$link = 'index.php?option=com_users&amp;view=users&amp;layout=modal&amp;tmpl=component&amp;field=' . $this->id			. (isset($groups) ? ('&amp;groups=' . base64_encode(json_encode($groups))) : '')			. (isset($excluded) ? ('&amp;excluded=' . base64_encode(json_encode($excluded))) : '');		// Initialize some field attributes.		$attr = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		// Initialize JavaScript field attributes.		$onchange = (string) $this->element['onchange'];		// Load the modal behavior script.		JHtml::_('behavior.modal', 'a.modal_' . $this->id);		// Build the script.		$script = array();		$script[] = '	function jSelectUser_' . $this->id . '(id, title) {';		$script[] = '		var old_id = document.getElementById("' . $this->id . '_id").value;';		$script[] = '		if (old_id != id) {';		$script[] = '			document.getElementById("' . $this->id . '_id").value = id;';		$script[] = '			document.getElementById("' . $this->id . '_name").value = title;';		$script[] = '			' . $onchange;		$script[] = '		}';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Load the current username if available.		$table = JTable::getInstance('user');		if ($this->value)		{			$table->load($this->value);		}		else		{			$table->username = JText::_('JLIB_FORM_SELECT_USER');		}		// Create a dummy text field with the user name.		$html[] = '<div class="input-append">';		$html[] = '	<input class="input-medium" type="text" id="' . $this->id . '_name" value="' . htmlspecialchars($table->name, ENT_COMPAT, 'UTF-8') . '"'			. ' disabled="disabled"' . $attr . ' />';		// Create the user select button.		if ($this->element['readonly'] != 'true')		{			$html[] = '		<a class="btn btn-primary modal_' . $this->id . '" title="' . JText::_('JLIB_FORM_CHANGE_USER') . '" href="' . $link . '"'				. ' rel="{handler: \'iframe\', size: {x: 800, y: 500}}">';			$html[] = '<i class="icon-user"></i></a>';		}		$html[] = '</div>';		// Create the real field, hidden, that stored the user id.		$html[] = '<input type="hidden" id="' . $this->id . '_id" name="' . $this->name . '" value="' . (int) $this->value . '" />';		return implode("\n", $html);	}	/**	 * Method to get the filtering groups (null means no filtering)	 *	 * @return  mixed  array of filtering groups or null.	 *	 * @since   1.6.0	 */	protected function getGroups()	{		return null;	}	/**	 * Method to get the users to exclude from the list of users	 *	 * @return  mixed  Array of users to exclude or null to to not exclude them	 *	 * @since   1.6.0	 */	protected function getExcluded()	{		return null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt * @since       3.0 */defined('_JEXEC') or die;$app   = JFactory::getApplication();$doc   = JFactory::getDocument();$lang  = JFactory::getLanguage();$this->language = $doc->language;$this->direction = $doc->direction;$input = $app->input;$user  = JFactory::getUser();// Add JavaScript FrameworksJHtml::_('bootstrap.framework');$doc->addScript('templates/' .$this->template. '/js/template.js');// Add Stylesheets$doc->addStyleSheet('templates/' . $this->template . '/css/template.css');// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Detecting Active Variables$option   = $input->get('option', '');$view     = $input->get('view', '');$layout   = $input->get('layout', '');$task     = $input->get('task', '');$itemid   = $input->get('Itemid', '');$sitename = $app->getCfg('sitename');$cpanel = ($option === 'com_cpanel');$showSubmenu = false;$this->submenumodules = JModuleHelper::getModules('submenu');foreach ($this->submenumodules as $submenumodule){	$output = JModuleHelper::renderModule($submenumodule);	if (strlen($output))	{		$showSubmenu = true;		break;	}}// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}// Template Parameters$displayHeader = $this->params->get('displayHeader', '1');$statusFixed = $this->params->get('statusFixed', '1');$stickyToolbar = $this->params->get('stickyToolbar', '1');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<jdoc:include type="head" />	<?php	// Template color	if ($this->params->get('templateColor'))	{	?>	<style type="text/css">		.navbar-inner, .navbar-inverse .navbar-inner, .nav-list > .active > a, .nav-list > .active > a:hover, .dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .active > a:hover, .navbar-inverse .nav li.dropdown.open > .dropdown-toggle, .navbar-inverse .nav li.dropdown.active > .dropdown-toggle, .navbar-inverse .nav li.dropdown.open.active > .dropdown-toggle, #status.status-top		{			background: <?php echo $this->params->get('templateColor');?>;		}		.navbar-inner, .navbar-inverse .nav li.dropdown.open > .dropdown-toggle, .navbar-inverse .nav li.dropdown.active > .dropdown-toggle, .navbar-inverse .nav li.dropdown.open.active > .dropdown-toggle{			-moz-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			-webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);		}	</style>	<?php	}	?>	<?php	// Template header color	if ($this->params->get('headerColor'))	{	?>	<style type="text/css">		.header		{			background: <?php echo $this->params->get('headerColor');?>;		}	</style>	<?php	}	?>	<!--[if lt IE 9]>		<script src="../media/jui/js/html5.js"></script>	<![endif]--></head><body class="admin <?php echo $option . " view-" . $view . " layout-" . $layout . " task-" . $task . " itemid-" . $itemid . " ";?>" <?php if ($stickyToolbar) : ?>data-spy="scroll" data-target=".subhead" data-offset="87"<?php endif;?>>	<!-- Top Navigation -->	<nav class="navbar navbar-inverse navbar-fixed-top">		<div class="navbar-inner">			<div class="container-fluid">				<?php if ($this->params->get('admin_menus') != '0') : ?>					<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">						<span class="icon-bar"></span>						<span class="icon-bar"></span>						<span class="icon-bar"></span>					</a>				<?php endif; ?>				<a class="brand" href="<?php echo JURI::root(); ?>" title="<?php echo JText::_('JGLOBAL_PREVIEW');?> <?php echo $sitename; ?>" target="_blank"><?php echo JHtml::_('string.truncate', $sitename, 14, false, false);?> <i class="icon-out-2 small"></i></a>				<?php if ($this->params->get('admin_menus') != '0') : ?>				<div class="nav-collapse">				<?php else : ?>				<div>				<?php endif; ?>					<jdoc:include type="modules" name="menu" style="none" />					<ul class="<?php if ($this->direction == 'rtl') : ?>nav<?php else : ?>nav pull-right<?php endif; ?>">						<li class="dropdown"> <a class="dropdown-toggle" data-toggle="dropdown" href="#"><?php echo $user->name; ?> <b class="caret"></b></a>							<ul class="dropdown-menu">								<li class=""><a href="index.php?option=com_admin&task=profile.edit&id=<?php echo $user->id;?>"><?php echo JText::_('TPL_ISIS_EDIT_ACCOUNT');?></a></li>								<li class="divider"></li>								<li class=""><a href="<?php echo JRoute::_('index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1');?>"><?php echo JText::_('TPL_ISIS_LOGOUT');?></a></li>							</ul>						</li>					</ul>				</div>				<!--/.nav-collapse -->			</div>		</div>	</nav>	<!-- Header -->	<?php	if ($displayHeader):	?>	<header class="header">		<div class="container-fluid">			<div class="row-fluid">				<div class="span2 container-logo">					<a class="logo" href="<?php echo $this->baseurl; ?>"><img src="<?php echo $logo;?>" alt="<?php echo $sitename; ?>" /></a>				</div>				<div class="span10">					<?php if (isset($app->JComponentTitle)) : ?>						<h1 class="page-title"><?php echo JHtml::_('string.truncate', $app->JComponentTitle, 0, false, false);?></h1>					<?php else : ?>						<h1 class="page-title"><?php echo JHtml::_('string.truncate', '', 0, false, false);?></h1>					<?php endif; ?>				</div>			</div>		</div>	</header>	<?php	endif;	?>	<?php	if ((!$statusFixed) && ($this->countModules('status'))):	?>	<!-- Begin Status Module -->	<div id="status" class="navbar status-top hidden-phone">		<div class="btn-toolbar">			<jdoc:include type="modules" name="status" style="no" />		</div>		<div class="clearfix"></div>	</div>	<!-- End Status Module -->	<?php	endif;	?>	<?php	if (!$cpanel):	?>	<!-- Subheader -->	<a class="btn btn-subhead" data-toggle="collapse" data-target=".subhead-collapse"><?php echo JText::_('TPL_ISIS_TOOLBAR');?> <i class="icon-wrench"></i></a>	<div class="subhead-collapse">		<div class="subhead">			<div class="container-fluid">				<div id="container-collapse" class="container-collapse"></div>				<div class="row-fluid">					<div class="span12">						<jdoc:include type="modules" name="toolbar" style="no" />					</div>				</div>			</div>		</div>	</div>	<?php	else:	?>	<div style="margin-bottom: 20px"></div>	<?php	endif;	?>	<!-- container-fluid -->	<div class="container-fluid container-main">		<section id="content">			<!-- Begin Content -->			<jdoc:include type="modules" name="top" style="xhtml" />			<div class="row-fluid">				<?php if ($showSubmenu) : ?>					<div class="span2">						<jdoc:include type="modules" name="submenu" style="none" />					</div>					<div class="span10">				<?php else : ?>					<div class="span12">				<?php endif; ?>						<jdoc:include type="message" />						<?php						// Show the page title here if the header is hidden						if (!$displayHeader):						?>						<h1 class="content-title"><?php echo JHtml::_('string.truncate', $app->JComponentTitle, 0, false, false);?></h1>						<?php						endif;						?>						<jdoc:include type="component" />					</div>			</div>			<jdoc:include type="modules" name="bottom" style="xhtml" />			<!-- End Content -->		</section>		<hr />		<?php if (!$this->countModules('status')) : ?>			<footer class="footer">				<p>&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>			</footer>		<?php endif; ?>	</div>	<?php if (($statusFixed) && ($this->countModules('status'))) : ?>	<!-- Begin Status Module -->	<div id="status" class="navbar navbar-fixed-bottom hidden-phone">		<div class="btn-toolbar">			<div class="btn-group pull-right">				<p>&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>			</div>			<jdoc:include type="modules" name="status" style="no" />		</div>	</div>	<!-- End Status Module -->	<?php endif; ?>	<jdoc:include type="modules" name="debug" style="none" />	<?php if ($stickyToolbar) : ?>	<script>		(function($){			// fix sub nav on scroll			var $win = $(window)			  , $nav = $('.subhead')			  , navTop = $('.subhead').length && $('.subhead').offset().top - <?php if ($displayHeader || !$statusFixed) : ?>40<?php else:?>20<?php endif;?>			  , isFixed = 0			processScroll()			// hack sad times - holdover until rewrite for 2.1			$nav.on('click', function ()			{				if (!isFixed) setTimeout(function () {  $win.scrollTop($win.scrollTop() - 47) }, 10)			})			$win.on('scroll', processScroll)			function processScroll()			{				var i, scrollTop = $win.scrollTop()				if (scrollTop >= navTop && !isFixed)				{					isFixed = 1					$nav.addClass('subhead-fixed')				} else if (scrollTop <= navTop && isFixed)				{					isFixed = 0					$nav.removeClass('subhead-fixed')				}			}		})(jQuery);	</script>	<?php endif; ?></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die();/** * Maps model for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelMaps extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An associative array of configuration settings. [optional]	 *	 * @since   2.5	 * @see     JController	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'state', 'a.state',				'title', 'a.title'			);		}		parent::__construct($config);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission for the component.	 *	 * @since   2.5	 */	protected function canDelete($record)	{		$user = JFactory::getUser();		return $user->authorise('core.delete', $this->option);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission for the component.	 *	 * @since   2.5	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return $user->authorise('core.edit.state', $this->option);	}	/**	 * Method to delete one or more records.	 *	 * @param   array  &$pks  An array of record primary keys.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   2.5	 */	public function delete(&$pks)	{		$dispatcher = JEventDispatcher::getInstance();		$pks = (array) $pks;		$table = $this->getTable();		// Include the content plugins for the on delete events.		JPluginHelper::importPlugin('content');		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if ($this->canDelete($table))				{					$context = $this->option . '.' . $this->name;					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger('onContentBeforeDelete', array($context, $table));					if (in_array(false, $result, true))					{						$this->setError($table->getError());						return false;					}					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					// Trigger the onContentAfterDelete event.					$dispatcher->trigger('onContentAfterDelete', array($context, $table));				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					$error = $this->getError();					if ($error)					{						$this->setError($error);					}					else					{						$this->setError(JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'));					}				}			}			else			{				$this->setError($table->getError());				return false;			}		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery  A JDatabaseQuery object	 *	 * @since   2.5	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select all fields from the table.		$query->select('a.*')			->from($db->quoteName('#__finder_taxonomy') . ' AS a');		// Self-join to get children.		$query->select('COUNT(b.id) AS num_children')			->join('LEFT', $db->quoteName('#__finder_taxonomy') . ' AS b ON b.parent_id=a.id');		// Join to get the map links		$query->select('COUNT(c.node_id) AS num_nodes')			->join('LEFT', $db->quoteName('#__finder_taxonomy_map') . ' AS c ON c.node_id=a.id')			->group('a.id, a.parent_id, a.title, a.state, a.access, a.ordering');		// If the model is set to check item state, add to the query.		if (is_numeric($this->getState('filter.state')))		{			$query->where('a.state = ' . (int) $this->getState('filter.state'));		}		// Filter the maps over the branch if set.		$branch_id = $this->getState('filter.branch');		if (!empty($branch_id))		{			$query->where('a.parent_id = ' . (int) $branch_id);		}		// Filter the maps over the search string if set.		$search = $this->getState('filter.search');		if (!empty($search))		{			$query->where('a.title LIKE ' . $db->quote('%' . $search . '%'));		}		// Handle the list ordering.		$ordering = $this->getState('list.ordering');		$direction = $this->getState('list.direction');		if (!empty($ordering))		{			$query->order($db->escape($ordering) . ' ' . $db->escape($direction));		}		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id. [optional]	 *	 * @return  string  A store id.	 *	 * @since   2.5	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.branch');		return parent::getStoreId($id);	}	/**	 * Returns a JTable object, always creating it.	 *	 * @param   string  $type    The table type to instantiate. [optional]	 * @param   string  $prefix  A prefix for the table class name. [optional]	 * @param   array   $config  Configuration array for model. [optional]	 *	 * @return  JTable  A database object	 *	 * @since   2.5	 */	public function getTable($type = 'Map', $prefix = 'FinderTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to auto-populate the model state.  Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field. [optional]	 * @param   string  $direction  An optional direction. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState($ordering = null, $direction = null)	{		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$branch = $this->getUserStateFromRequest($this->context . '.filter.branch', 'filter_branch', '1', 'string');		$this->setState('filter.branch', $branch);		// Load the parameters.		$params = JComponentHelper::getParams('com_finder');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    &$pks   A list of the primary keys to change.	 * @param   integer  $value  The value of the published state. [optional]	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function publish(&$pks, $value = 1)	{		$dispatcher = JEventDispatcher::getInstance();		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Include the content plugins for the change of state event.		JPluginHelper::importPlugin('content');		// Access checks.		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));					return false;				}			}		}		// Attempt to change the state of the records.		if (!$table->publish($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		$context = $this->option . '.' . $this->name;		// Trigger the onContentChangeState event.		$result = $dispatcher->trigger('onContentChangeState', array($context, $pks, $value));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Method to purge all maps from the taxonomy.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   2.5	 */	public function purge()	{		$db = $this->getDbo();		$query = $db->getQuery(true)			->delete($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' > 1');		$db->setQuery($query);		$db->execute();		$query->clear()			->delete($db->quoteName('#__finder_taxonomy_map'))			->where('1');		$db->setQuery($query);		$db->execute();		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'tag.cancel' || document.formvalidator.isValid(document.id('tag-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('tag-form'));		}	}</script><div class="weblink-edit"><form action="<?php echo JRoute::_('index.php?option=com_tags&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="tag-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo empty($this->item->id) ? JText::_('JTOOLBAR_NEW') : JText::sprintf('JTOOLBAR_EDIT', $this->item->id); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<li><?php echo $this->form->getLabel('alias'); ?>				<?php echo $this->form->getInput('alias'); ?></li>				<li><?php echo $this->form->getLabel('parent_id'); ?>				<?php echo $this->form->getInput('parent_id'); ?></li>				<li><?php echo $this->form->getLabel('published'); ?>				<?php echo $this->form->getInput('published'); ?></li>				<li><?php echo $this->form->getLabel('access'); ?>				<?php echo $this->form->getInput('access'); ?></li>				<li><?php echo $this->form->getLabel('language'); ?>				<?php echo $this->form->getInput('language'); ?></li>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>			</ul>			<div>				<?php echo $this->form->getLabel('description'); ?>				<div class="clr"></div>				<?php echo $this->form->getInput('description'); ?>			</div>		</fieldset>	</div>	<div class="col options-section">		<?php echo JHtml::_('sliders.start', 'weblink-sliders-'.$this->item->id, array('useCookie' => 1)); ?>		<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_PUBLISHING'), 'publishing-details'); ?>		<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_PUBLISHING'); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('created_by'); ?>				<?php echo $this->form->getInput('created_by'); ?></li>				<li><?php echo $this->form->getLabel('created_by_alias'); ?>				<?php echo $this->form->getInput('created_by_alias'); ?></li>				<li><?php echo $this->form->getLabel('created'); ?>				<?php echo $this->form->getInput('created'); ?></li>				<li><?php echo $this->form->getLabel('publish_up'); ?>				<?php echo $this->form->getInput('publish_up'); ?></li>				<li><?php echo $this->form->getLabel('publish_down'); ?>				<?php echo $this->form->getInput('publish_down'); ?></li>				<?php if ($this->item->modified_user_id) : ?>					<li><?php echo $this->form->getLabel('modified_user_id'); ?>					<?php echo $this->form->getInput('modified_user_id'); ?></li>					<li><?php echo $this->form->getLabel('modified'); ?>					<?php echo $this->form->getInput('modified'); ?></li>				<?php endif; ?>				<?php if ($this->item->hits) : ?>					<li><?php echo $this->form->getLabel('hits'); ?>					<?php echo $this->form->getInput('hits'); ?></li>				<?php endif; ?>			</ul>		</fieldset>		<?php echo $this->loadTemplate('options'); ?>		<?php echo $this->loadTemplate('metadata'); ?>		<?php echo JHtml::_('sliders.end'); ?>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<div class="clr"></div></form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><tr class="<?php echo "row".$this->item->index % 2; ?>" <?php echo $this->item->style; ?>>	<td><?php echo $this->pagination->getRowOffset($this->item->index); ?></td>	<td>			<input type="checkbox" id="cb<?php echo $this->item->index;?>" name="eid[]" value="<?php echo $this->item->extension_id; ?>" onclick="Joomla.isChecked(this.checked);" <?php echo $this->item->cbd; ?> /><!--		<input type="checkbox" id="cb<?php echo $this->item->index;?>" name="eid" value="<?php echo $this->item->extension_id; ?>" onclick="Joomla.isChecked(this.checked);" <?php echo $this->item->cbd; ?> />-->		<span class="bold"><?php echo $this->item->name; ?></span>	</td>	<td>		<?php echo $this->item->type ?>	</td>	<td class="center">		<?php if (!$this->item->element) : ?>		<strong>X</strong>		<?php else : ?>		<a href="index.php?option=com_installer&amp;type=manage&amp;task=<?php echo $this->item->task; ?>&amp;eid[]=<?php echo $this->item->extension_id; ?>&amp;limitstart=<?php echo $this->pagination->limitstart; ?>&amp;<?php echo JSession::getFormToken();?>=1"><?php echo JHtml::_('image', 'images/'.$this->item->img, $this->item->alt, array('title' => $this->item->action)); ?></a>		<?php endif; ?>	</td>	<td class="center"><?php echo @$this->item->folder != '' ? $this->item->folder : 'N/A'; ?></td>	<td class="center"><?php echo @$this->item->client != '' ? $this->item->client : 'N/A'; ?></td>	<td>		<span class="editlinktip hasTip" title="<?php echo addslashes(htmlspecialchars(JText::_('COM_INSTALLER_AUTHOR_INFORMATION').'::'.$this->item->author_info)); ?>">			<?php echo @$this->item->author != '' ? $this->item->author : '&#160;'; ?>		</span>	</td></tr>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactModelCategory extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * The category that applies.	 *	 * @access    protected	 * @var        object	 */	protected $_category = null;	/**	 * The list of other newfeed categories.	 *	 * @access    protected	 * @var        array	 */	protected $_categories = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'con_position', 'a.con_position',				'suburb', 'a.suburb',				'state', 'a.state',				'country', 'a.country',				'ordering', 'a.ordering',				'sortname',				'sortname1', 'a.sortname1',				'sortname2', 'a.sortname2',				'sortname3', 'a.sortname3'			);		}		parent::__construct($config);	}	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		// Convert the params field into an object, saving original in _params		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item = & $items[$i];			if (!isset($this->_params))			{				$params = new JRegistry;				$params->loadString($item->params);				$item->params = $params;			}		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select required fields from the categories.		//sqlsrv changes		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('a.alias', '!=', '0');		$case_when .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $a_id . ' END as slug';		$case_when1 = ' CASE WHEN ';		$case_when1 .= $query->charLength('c.alias', '!=', '0');		$case_when1 .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when1 .= ' ELSE ';		$case_when1 .= $c_id . ' END as catslug';		$query->select($this->getState('list.select', 'a.*') . ',' . $case_when . ',' . $case_when1)		// TODO: we actually should be doing it but it's wrong this way		//	. ' CASE WHEN CHAR_LENGTH(a.alias) THEN CONCAT_WS(\':\', a.id, a.alias) ELSE a.id END as slug, '		//	. ' CASE WHEN CHAR_LENGTH(c.alias) THEN CONCAT_WS(\':\', c.id, c.alias) ELSE c.id END AS catslug ');			->from($db->quoteName('#__contact_details') . ' AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid')			->where('a.access IN (' . $groups . ')');		// Filter by category.		if ($categoryId = $this->getState('category.id'))		{			$query->where('a.catid = ' . (int) $categoryId)				->where('c.access IN (' . $groups . ')');		}		// Join over the users for the author and modified_by names.		$query->select("CASE WHEN a.created_by_alias > ' ' THEN a.created_by_alias ELSE ua.name END AS author")			->select("ua.email AS author_email")			->join('LEFT', '#__users AS ua ON ua.id = a.created_by')			->join('LEFT', '#__users AS uam ON uam.id = a.modified_by');		// Filter by state		$state = $this->getState('filter.published');		if (is_numeric($state))		{			$query->where('a.published = ' . (int) $state);		}		// Filter by start and end dates.		$nullDate = $db->quote($db->getNullDate());		$nowDate = $db->quote(JFactory::getDate()->toSql());		if ($this->getState('filter.publish_date'))		{			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');		}		// Filter by search in title		$search = $this->getState('list.filter');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%');			$query->where('(a.name LIKE ' . $search . ')');		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		// Set sortname ordering if selected		if ($this->getState('list.ordering') == 'sortname')		{			$query->order($db->escape('a.sortname1') . ' ' . $db->escape($this->getState('list.direction', 'ASC')))				->order($db->escape('a.sortname2') . ' ' . $db->escape($this->getState('list.direction', 'ASC')))				->order($db->escape('a.sortname3') . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		}		else		{			$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		}		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_contact');		$db = $this->getDbo();		// List state information		$format = $app->input->getWord('format');		if ($format == 'feed')		{			$limit = $app->getCfg('feed_limit');		}		else		{			$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');		}		$this->setState('list.limit', $limit);		$limitstart = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $limitstart);		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		// Get list ordering default from the parameters		$menuParams = new JRegistry;		if ($menu = $app->getMenu()->getActive())		{			$menuParams->loadString($menu->params);		}		$mergedParams = clone $params;		$mergedParams->merge($menuParams);		$orderCol = $app->input->get('filter_order', $mergedParams->get('initial_sort', 'ordering'));		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->input->get('filter_order_Dir', 'ASC');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$id = $app->input->get('id', 0, 'int');		$this->setState('category.id', $id);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_contact')) && (!$user->authorise('core.edit', 'com_contact')))		{			// limit to published for people who can't edit or edit.state.			$this->setState('filter.published', 1);			// Filter by start and end dates.			$this->setState('filter.publish_date', true);		}		$this->setState('filter.language', $app->getLanguageFilter());		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get category data for the current category	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   1.5	 */	public function getCategory()	{		if (!is_object($this->_item))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_items', 1) || $params->get('show_empty_categories', 0);			$categories = JCategories::getInstance('Contact', $options);			$this->_item = $categories->get($this->getState('category.id', 'root'));			if (is_object($this->_item))			{				$this->_children = $this->_item->getChildren();				$this->_parent = false;				if ($this->_item->getParent())				{					$this->_parent = $this->_item->getParent();				}				$this->_rightsibling = $this->_item->getSibling();				$this->_leftsibling = $this->_item->getSibling(false);			}			else			{				$this->_children = false;				$this->_parent = false;			}		}		$this->tags = new JHelperTags;		$this->tags->getItemTags('com_contact.category', $this->_item->get('id'));		return $this->_item;	}	/**	 * Get the parent category.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	public function getParent()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_parent;	}	/**	 * Get the sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getLeftSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_leftsibling;	}	function &getRightSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_rightsibling;	}	/**	 * Get the child categories.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getChildren()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_children;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexerStemmer', __DIR__ . '/stemmer.php');JLoader::register('FinderIndexerToken', __DIR__ . '/token.php');/** * Helper class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerHelper{	/**	 * The token stemmer object. The stemmer is set by whatever class	 * wishes to use it but it must be an instance of FinderIndexerStemmer.	 *	 * @var		FinderIndexerStemmer	 * @since	2.5	 */	public static $stemmer;	/**	 * Method to parse input into plain text.	 *	 * @param   string  $input   The raw input.	 * @param   string  $format  The format of the input. [optional]	 *	 * @return  string  The parsed input.	 *	 * @since   2.5	 * @throws  Exception on invalid parser.	 */	public static function parse($input, $format = 'html')	{		// Get a parser for the specified format and parse the input.		return FinderIndexerParser::getInstance($format)->parse($input);	}	/**	 * Method to tokenize a text string.	 *	 * @param   string   $input   The input to tokenize.	 * @param   string   $lang    The language of the input.	 * @param   boolean  $phrase  Flag to indicate whether input could be a phrase. [optional]	 *	 * @return  array  An array of FinderIndexerToken objects.	 *	 * @since   2.5	 */	public static function tokenize($input, $lang, $phrase = false)	{		static $cache;		$store = JString::strlen($input) < 128 ? md5($input . '::' . $lang . '::' . $phrase) : null;		// Check if the string has been tokenized already.		if ($store && isset($cache[$store]))		{			return $cache[$store];		}		$tokens = array();		$quotes = html_entity_decode('&#8216;&#8217;&#39;', ENT_QUOTES, 'UTF-8');		// Get the simple language key.		$lang = self::getPrimaryLanguage($lang);		/*		 * Parsing the string input into terms is a multi-step process.		 *		 * Regexes:		 *  1. Remove everything except letters, numbers, quotes, apostrophe, plus, dash, period, and comma.		 *  2. Remove plus, dash, period, and comma characters located before letter characters.		 *  3. Remove plus, dash, period, and comma characters located after other characters.		 *  4. Remove plus, period, and comma characters enclosed in alphabetical characters. Ungreedy.		 *  5. Remove orphaned apostrophe, plus, dash, period, and comma characters.		 *  6. Remove orphaned quote characters.		 *  7. Replace the assorted single quotation marks with the ASCII standard single quotation.		 *  8. Remove multiple space characters and replaces with a single space.		 */		$input = JString::strtolower($input);		$input = preg_replace('#[^\pL\pM\pN\p{Pi}\p{Pf}\'+-.,]+#mui', ' ', $input);		$input = preg_replace('#(^|\s)[+-.,]+([\pL\pM]+)#mui', ' $1', $input);		$input = preg_replace('#([\pL\pM\pN]+)[+-.,]+(\s|$)#mui', '$1 ', $input);		$input = preg_replace('#([\pL\pM]+)[+.,]+([\pL\pM]+)#muiU', '$1 $2', $input); // Ungreedy		$input = preg_replace('#(^|\s)[\'+-.,]+(\s|$)#mui', ' ', $input);		$input = preg_replace('#(^|\s)[\p{Pi}\p{Pf}]+(\s|$)#mui', ' ', $input);		$input = preg_replace('#[' . $quotes . ']+#mui', '\'', $input);		$input = preg_replace('#\s+#mui', ' ', $input);		$input = JString::trim($input);		// Explode the normalized string to get the terms.		$terms = explode(' ', $input);		/*		 * If we have Unicode support and are dealing with Chinese text, Chinese		 * has to be handled specially because there are not necessarily any spaces		 * between the "words". So, we have to test if the words belong to the Chinese		 * character set and if so, explode them into single glyphs or "words".		 */		if ($lang === 'zh')		{			// Iterate through the terms and test if they contain Chinese.			for ($i = 0, $n = count($terms); $i < $n; $i++)			{				$charMatches = array();				$charCount = preg_match_all('#[\p{Han}]#mui', $terms[$i], $charMatches);				// Split apart any groups of Chinese characters.				for ($j = 0; $j < $charCount; $j++)				{					$tSplit = JString::str_ireplace($charMatches[0][$j], '', $terms[$i], false);					if (!empty($tSplit))					{						$terms[$i] = $tSplit;					}					else					{						unset($terms[$i]);					}					$terms[] = $charMatches[0][$j];				}			}			// Reset array keys.			$terms = array_values($terms);		}		/*		 * If we have to handle the input as a phrase, that means we don't		 * tokenize the individual terms and we do not create the two and three		 * term combinations. The phrase must contain more than one word!		 */		if ($phrase === true && count($terms) > 1)		{			// Create tokens from the phrase.			$tokens[] = new FinderIndexerToken($terms, $lang);		}		else		{			// Create tokens from the terms.			for ($i = 0, $n = count($terms); $i < $n; $i++)			{				$tokens[] = new FinderIndexerToken($terms[$i], $lang);			}			// Create two and three word phrase tokens from the individual words.			for ($i = 0, $n = count($tokens); $i < $n; $i++)			{				// Setup the phrase positions.				$i2 = $i + 1;				$i3 = $i + 2;				// Create the two word phrase.				if ($i2 < $n && isset($tokens[$i2]))				{					// Tokenize the two word phrase.					$token = new FinderIndexerToken(array($tokens[$i]->term, $tokens[$i2]->term), $lang, $lang === 'zh' ? '' : ' ');					$token->derived = true;					// Add the token to the stack.					$tokens[] = $token;				}				// Create the three word phrase.				if ($i3 < $n && isset($tokens[$i3]))				{					// Tokenize the three word phrase.					$token = new FinderIndexerToken(array($tokens[$i]->term, $tokens[$i2]->term, $tokens[$i3]->term), $lang, $lang === 'zh' ? '' : ' ');					$token->derived = true;					// Add the token to the stack.					$tokens[] = $token;				}			}		}		if ($store)		{			$cache[$store] = count($tokens) > 1 ? $tokens : array_shift($tokens);			return $cache[$store];		}		else		{			return count($tokens) > 1 ? $tokens : array_shift($tokens);		}	}	/**	 * Method to get the base word of a token. This method uses the public	 * {@link FinderIndexerHelper::$stemmer} object if it is set. If no stemmer is set,	 * the original token is returned.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	public static function stem($token, $lang)	{		// Trim apostrophes at either end of the token.		$token = JString::trim($token, '\'');		// Trim everything after any apostrophe in the token.		if (($pos = JString::strpos($token, '\'')) !== false)		{			$token = JString::substr($token, 0, $pos);		}		// Stem the token if we have a valid stemmer to use.		if (self::$stemmer instanceof FinderIndexerStemmer)		{			return self::$stemmer->stem($token, $lang);		}		else		{			return $token;		}	}	/**	 * Method to add a content type to the database.	 *	 * @param   string  $title  The type of content. For example: PDF	 * @param   string  $mime   The mime type of the content. For example: PDF [optional]	 *	 * @return  integer  The id of the content type.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function addContentType($title, $mime = null)	{		static $types;		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Check if the types are loaded.		if (empty($types))		{			// Build the query to get the types.			$query->select('*')				->from($db->quoteName('#__finder_types'));			// Get the types.			$db->setQuery($query);			$types = $db->loadObjectList('title');		}		// Check if the type already exists.		if (isset($types[$title]))		{			return (int) $types[$title]->id;		}		// Add the type.		$query->clear()			->insert($db->quoteName('#__finder_types'))			->columns(array($db->quoteName('title'), $db->quoteName('mime')))			->values($db->quote($title) . ', ' . $db->quote($mime));		$db->setQuery($query);		$db->execute();		// Return the new id.		return (int) $db->insertid();	}	/**	 * Method to check if a token is common in a language.	 *	 * @param   string  $token  The token to test.	 * @param   string  $lang   The language to reference.	 *	 * @return  boolean  True if common, false otherwise.	 *	 * @since   2.5	 */	public static function isCommon($token, $lang)	{		static $data;		// Load the common tokens for the language if necessary.		if (!isset($data[$lang]))		{			$data[$lang] = self::getCommonWords($lang);		}		// Check if the token is in the common array.		if (in_array($token, $data[$lang]))		{			return true;		}		else		{			return false;		}	}	/**	 * Method to get an array of common terms for a language.	 *	 * @param   string  $lang  The language to use.	 *	 * @return  array  Array of common terms.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function getCommonWords($lang)	{		$db = JFactory::getDbo();		// Create the query to load all the common terms for the language.		$query = $db->getQuery(true)			->select($db->quoteName('term'))			->from($db->quoteName('#__finder_terms_common'))			->where($db->quoteName('language') . ' = ' . $db->quote($lang));		// Load all of the common terms for the language.		$db->setQuery($query);		$results = $db->loadColumn();		return $results;	}	/**	 * Method to get the default language for the site.	 *	 * @return  string  The default language string.	 *	 * @since   2.5	 */	public static function getDefaultLanguage()	{		static $lang;		// We need to go to com_languages to get the site default language, it's the best we can guess.		if (empty($lang))		{			$lang = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');		}		return $lang;	}	/**	 * Method to parse a language/locale key and return a simple language string.	 *	 * @param   string  $lang  The language/locale key. For example: en-GB	 *	 * @return  string  The simple language string. For example: en	 *	 * @since   2.5	 */	public static function getPrimaryLanguage($lang)	{		static $data;		// Only parse the identifier if necessary.		if (!isset($data[$lang]))		{			if (is_callable(array('Locale', 'getPrimaryLanguage')))			{				// Get the language key using the Locale package.				$data[$lang] = Locale::getPrimaryLanguage($lang);			}			else			{				// Get the language key using string position.				$data[$lang] = JString::substr($lang, 0, JString::strpos($lang, '-'));			}		}		return $data[$lang];	}	/**	 * Method to get the path (SEF route) for a content item.	 *	 * @param   string  $url  The non-SEF route to the content item.	 *	 * @return  string  The path for the content item.	 *	 * @since   2.5	 */	public static function getContentPath($url)	{		static $router;		// Only get the router once.		if (!($router instanceof JRouter))		{			jimport('joomla.application.router');			include_once JPATH_SITE . '/includes/application.php';			// Get and configure the site router.			$config = JFactory::getConfig();			$router = JRouter::getInstance('site');			$router->setMode($config->get('sef', 1));		}		// Build the relative route.		$uri = $router->build($url);		$route = $uri->toString(array('path', 'query', 'fragment'));		$route = str_replace(JURI::base(true) . '/', '', $route);		return $route;	}	/**	 * Method to get extra data for a content before being indexed. This is how	 * we add Comments, Tags, Labels, etc. that should be available to Finder.	 *	 * @param   FinderIndexerResult  &$item  The item to index as an FinderIndexerResult object.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function getContentExtras(FinderIndexerResult &$item)	{		// Get the event dispatcher.		$dispatcher = JEventDispatcher::getInstance();		// Load the finder plugin group.		JPluginHelper::importPlugin('finder');		try		{			// Trigger the event.			$results = $dispatcher->trigger('onPrepareFinderContent', array(&$item));			// Check the returned results. This is for plugins that don't throw			// exceptions when they encounter serious errors.			if (in_array(false, $results))			{				throw new Exception($dispatcher->getError(), 500);			}		}		catch (Exception $e)		{			// Handle a caught exception.			throw $e;		}		return true;	}	/**	 * Method to process content text using the onContentPrepare event trigger.	 *	 * @param   string     $text    The content to process.	 * @param   JRegistry  $params  The parameters object. [optional]	 *	 * @return  string  The processed content.	 *	 * @since   2.5	 */	public static function prepareContent($text, $params = null)	{		static $loaded;		// Get the dispatcher.		$dispatcher = JEventDispatcher::getInstance();		// Load the content plugins if necessary.		if (empty($loaded))		{			JPluginHelper::importPlugin('content');			$loaded = true;		}		// Instantiate the parameter object if necessary.		if (!($params instanceof JRegistry))		{			$registry = new JRegistry;			$registry->loadString($params);			$params = $registry;		}		// Create a mock content object.		$content = JTable::getInstance('Content');		$content->text = $text;		// Fire the onContentPrepare event.		$dispatcher->trigger('onContentPrepare', array('com_finder.indexer', &$content, &$params, 0));		return $content->text;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Query Helper * * @static * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentHelperQuery{	/**	 * Translate an order code to a field for primary category ordering.	 *	 * @param   string	$orderby	The ordering code.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.5	 */	public static function orderbyPrimary($orderby)	{		switch ($orderby)		{			case 'alpha' :				$orderby = 'c.path, ';				break;			case 'ralpha' :				$orderby = 'c.path DESC, ';				break;			case 'order' :				$orderby = 'c.lft, ';				break;			default :				$orderby = '';				break;		}		return $orderby;	}	/**	 * Translate an order code to a field for secondary category ordering.	 *	 * @param   string	$orderby	The ordering code.	 * @param   string	$orderDate	The ordering code for the date.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.5	 */	public static function orderbySecondary($orderby, $orderDate = 'created')	{		$queryDate = self::getQueryDate($orderDate);		switch ($orderby)		{			case 'date' :				$orderby = $queryDate;				break;			case 'rdate' :				$orderby = $queryDate . ' DESC ';				break;			case 'alpha' :				$orderby = 'a.title';				break;			case 'ralpha' :				$orderby = 'a.title DESC';				break;			case 'hits' :				$orderby = 'a.hits DESC';				break;			case 'rhits' :				$orderby = 'a.hits';				break;			case 'order' :				$orderby = 'a.ordering';				break;			case 'author' :				$orderby = 'author';				break;			case 'rauthor' :				$orderby = 'author DESC';				break;			case 'front' :				$orderby = 'a.featured DESC, fp.ordering';				break;			default :				$orderby = 'a.ordering';				break;		}		return $orderby;	}	/**	 * Translate an order code to a field for primary category ordering.	 *	 * @param   string	$orderDate	The ordering code.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.6	 */	public static function getQueryDate($orderDate)	{		$db = JFactory::getDbo();		switch ($orderDate)		{			case 'modified' :				$queryDate = ' CASE WHEN a.modified = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.modified END';				break;			// use created if publish_up is not set			case 'published' :				$queryDate = ' CASE WHEN a.publish_up = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.publish_up END ';				break;			case 'created' :			default :				$queryDate = ' a.created ';				break;		}		return $queryDate;	}	/**	 * Get join information for the voting query.	 *	 * @param   JRegistry	$param	An options object for the article.	 *	 * @return  array  	A named array with "select" and "join" keys.	 * @since   1.5	 */	public static function buildVotingQuery($params=null)	{		if (!$params)		{			$params = JComponentHelper::getParams('com_content');		}		$voting = $params->get('show_vote');		if ($voting)		{			// calculate voting count			$select = ' , ROUND(v.rating_sum / v.rating_count) AS rating, v.rating_count';			$join = ' LEFT JOIN #__content_rating AS v ON a.id = v.content_id';		}		else		{			$select = '';			$join = '';		}		$results = array ('select' => $select, 'join' => $join);		return $results;	}	/**	 * Method to order the intro articles array for ordering	 * down the columns instead of across.	 * The layout always lays the introtext articles out across columns.	 * Array is reordered so that, when articles are displayed in index order	 * across columns in the layout, the result is that the	 * desired article ordering is achieved down the columns.	 *	 * @param   array  $articles	Array of intro text articles	 * @param   integer	$numColumns	Number of columns in the layout	 *	 * @return  array  Reordered array to achieve desired ordering down columns	 * @since   1.6	 */	public static function orderDownColumns(&$articles, $numColumns = 1)	{		$count = count($articles);		// just return the same array if there is nothing to change		if ($numColumns == 1 || !is_array($articles) || $count <= $numColumns)		{			$return = $articles;		}		// we need to re-order the intro articles array		else {			// we need to preserve the original array keys			$keys = array_keys($articles);			$maxRows = ceil($count / $numColumns);			$numCells = $maxRows * $numColumns;			$numEmpty = $numCells - $count;			$index = array();			// calculate number of empty cells in the array			// fill in all cells of the array			// put -1 in empty cells so we can skip later			for ($row = 1, $i = 1; $row <= $maxRows; $row++)			{				for ($col = 1; $col <= $numColumns; $col++)				{					if ($numEmpty > ($numCells - $i))					{						// put -1 in empty cells						$index[$row][$col] = -1;					}					else {						// put in zero as placeholder						$index[$row][$col] = 0;					}					$i++;				}			}			// layout the articles in column order, skipping empty cells			$i = 0;			for ($col = 1; ($col <= $numColumns) && ($i < $count); $col++)			{				for ($row = 1; ($row <= $maxRows) && ($i < $count); $row++)				{					if ($index[$row][$col] != - 1)					{						$index[$row][$col] = $keys[$i];						$i++;					}				}			}			// now read the $index back row by row to get articles in right row/col			// so that they will actually be ordered down the columns (when read by row in the layout)			$return = array();			$i = 0;			for ($row = 1; ($row <= $maxRows) && ($i < $count); $row++)			{				for ($col = 1; ($col <= $numColumns) && ($i < $count); $col++)				{					$return[$keys[$i]] = $articles[$index[$row][$col]];					$i++;				}			}		}		return $return;	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include __DIR__ . '/component.php';
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_messages&view=messages'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_MESSAGES_SEARCH_IN_SUBJECT'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MESSAGES_SEARCH_IN_SUBJECT'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-left">				<select name="filter_state" class="inputbox" onchange="this.form.submit()">					<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>					<?php echo JHtml::_('select.options', MessagesHelper::getStateOptions(), 'value', 'text', $this->state->get('filter.state'));?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'COM_MESSAGES_HEADING_SUBJECT', 'a.subject', $listDirn, $listOrder); ?>					</th>					<th width="5%">						<?php echo JHtml::_('grid.sort', 'COM_MESSAGES_HEADING_READ', 'a.state', $listDirn, $listOrder); ?>					</th>					<th width="15%">						<?php echo JHtml::_('grid.sort', 'COM_MESSAGES_HEADING_FROM', 'a.user_id_from', $listDirn, $listOrder); ?>					</th>					<th width="20%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JDATE', 'a.date_time', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="6">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$canChange = $user->authorise('core.edit.state', 'com_messages');				?>				<tr class="row<?php echo $i % 2; ?>">					<td>						<?php echo JHtml::_('grid.id', $i, $item->message_id); ?>					</td>					<td>						<a href="<?php echo JRoute::_('index.php?option=com_messages&view=message&message_id='.(int) $item->message_id); ?>">							<?php echo $this->escape($item->subject); ?></a>					</td>					<td class="center">						<?php echo JHtml::_('messages.state', $item->state, $i, $canChange); ?>					</td>					<td>						<?php echo $item->user_from; ?>					</td>					<td>						<?php echo JHtml::_('date', $item->date_time, JText::_('DATE_FORMAT_LC2')); ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<div>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Access checks are done internally because of different requirements for the two controllers.// Tell the browser not to cache this page.JResponse::setHeader('Expires', 'Mon, 26 Jul 1997 05:00:00 GMT', true);$controller = JControllerLegacy::getInstance('Config');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a nested check box field listing user groups. * Multiselect is available by default. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldUsergroup extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Usergroup';	/**	 * Method to get the user group field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$options = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->multiple ? ' multiple="multiple"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Iterate through the children and build an array of options.		foreach ($this->element->children() as $option)		{			// Only add <option /> elements.			if ($option->getName() != 'option')			{				continue;			}			// Create a new option object based on the <option /> element.			$tmp = JHtml::_(				'select.option', (string) $option['value'], trim((string) $option), 'value', 'text',				((string) $option['disabled'] == 'true')			);			// Set some option attributes.			$tmp->class = (string) $option['class'];			// Set some JavaScript option attributes.			$tmp->onclick = (string) $option['onclick'];			// Add the option object to the result set.			$options[] = $tmp;		}		return JHtml::_('access.usergroup', $this->name, $this->value, $attr, $options, $this->id);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Users access levels view. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewLevels extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		UsersHelper::addSubmenu('levels');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= UsersHelper::getActions();		JToolbarHelper::title(JText::_('COM_USERS_VIEW_LEVELS_TITLE'), 'levels');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('level.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('level.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'level.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_users');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_USERS_ACCESS_LEVELS');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Media component * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.0 */class MediaViewImages extends JViewLegacy{	public function display($tpl = null)	{		$config = JComponentHelper::getParams('com_media');		$app	= JFactory::getApplication();		$lang	= JFactory::getLanguage();		$append = '';		JHtml::_('behavior.framework', true);		JHtml::_('script', 'media/popup-imagemanager.js', true, true);		JHtml::_('stylesheet', 'media/popup-imagemanager.css', array(), true);		if ($lang->isRTL())		{			JHtml::_('stylesheet', 'media/popup-imagemanager_rtl.css', array(), true);		}		/*		 * Display form for FTP credentials?		 * Don't set them here, as there are other functions called before this one if there is any file write operation		 */		$ftp = !JClientHelper::hasCredentials('ftp');		$this->session = JFactory::getSession();		$this->config = $config;		$this->state = $this->get('state');		$this->folderList = $this->get('folderList');		$this->require_ftp = $ftp;		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules Component Positions Model * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesModelPositions extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'value',				'templates',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context.'.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context.'.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$clientId = $app->input->getInt('client_id', 0);		$this->setState('filter.client_id', $clientId);		$template = $this->getUserStateFromRequest($this->context.'.filter.template', 'filter_template', '', 'string');		$this->setState('filter.template', $template);		$type = $this->getUserStateFromRequest($this->context.'.filter.type', 'filter_type', '', 'string');		$this->setState('filter.type', $type);		// Load the parameters.		$params = JComponentHelper::getParams('com_modules');		$this->setState('params', $params);		// List state information.		parent::populateState('value', 'asc');	}	/**	 * Method to get an array of data items.	 *	 * @return  mixed  An array of data items on success, false on failure.	 * @since   1.6	 */	public function getItems()	{		if (!isset($this->items))		{			$lang            = JFactory::getLanguage();			$search          = $this->getState('filter.search');			$state           = $this->getState('filter.state');			$clientId        = $this->getState('filter.client_id');			$filter_template = $this->getState('filter.template');			$type            = $this->getState('filter.type');			$ordering        = $this->getState('list.ordering');			$direction       = $this->getState('list.direction');			$limitstart      = $this->getState('list.start');			$limit           = $this->getState('list.limit');			$client          = JApplicationHelper::getClientInfo($clientId);			if ($type != 'template')			{				// Get the database object and a new query object.				$query	= $this->_db->getQuery(true)					->select('DISTINCT(position) as value')					->from('#__modules')					->where($this->_db->quoteName('client_id').' = '.(int) $clientId);				if ($search)				{					$query->where('position LIKE '.$this->_db->quote('%'.$this->_db->escape($search, true).'%'));				}				$this->_db->setQuery($query);				try				{					$positions = $this->_db->loadObjectList('value');				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}				foreach ($positions as $value => $position)				{					$positions[$value] = array();				}			}			else			{				$positions = array();			}			// Load the positions from the installed templates.			foreach (ModulesHelper::getTemplates($clientId) as $template)			{				$path = JPath::clean($client->path.'/templates/'.$template->element.'/templateDetails.xml');				if (file_exists($path))				{					$xml = simplexml_load_file($path);					if (isset($xml->positions[0]))					{						$lang->load('tpl_'.$template->element.'.sys', $client->path, null, false, false)					||	$lang->load('tpl_'.$template->element.'.sys', $client->path.'/templates/'.$template->element, null, false, false)					||	$lang->load('tpl_'.$template->element.'.sys', $client->path, $lang->getDefault(), false, false)					||	$lang->load('tpl_'.$template->element.'.sys', $client->path.'/templates/'.$template->element, $lang->getDefault(), false, false);						foreach ($xml->positions[0] as $position)						{							$value = (string) $position['value'];							$label = (string) $position;							if (!$value)							{								$value = $label;								$label = preg_replace('/[^a-zA-Z0-9_\-]/', '_', 'TPL_'.$template->element.'_POSITION_'.$value);								$altlabel = preg_replace('/[^a-zA-Z0-9_\-]/', '_', 'COM_MODULES_POSITION_'.$value);								if (!$lang->hasKey($label) && $lang->hasKey($altlabel))								{									$label = $altlabel;								}							}							if ($type == 'user' || ($state != '' && $state != $template->enabled))							{								unset($positions[$value]);							}							elseif (preg_match(chr(1) . $search . chr(1) . 'i', $value) && ($filter_template == '' || $filter_template == $template->element))							{								if (!isset($positions[$value]))								{									$positions[$value] = array();								}								$positions[$value][$template->name] = $label;							}						}					}				}			}			$this->total = count($positions);			if ($limitstart >= $this->total)			{				$limitstart = $limitstart < $limit ? 0 : $limitstart - $limit;				$this->setState('list.start', $limitstart);			}			if ($ordering == 'value')			{				if ($direction == 'asc')				{					ksort($positions);				}				else {					krsort($positions);				}			}			else {				if ($direction == 'asc')				{					asort($positions);				}				else {					arsort($positions);				}			}			$this->items = array_slice($positions, $limitstart, $limit ? $limit : null);		}		return $this->items;	}	/**	 * Method to get the total number of items.	 *	 * @return  int	The total number of items.	 * @since   1.6	 */	public function getTotal()	{		if (!isset($this->total))		{			$this->getItems();		}		return $this->total;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_weblinks.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_weblinks&task=weblinks.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'weblinkList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_weblinks&view=weblinks'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_WEBLINKS_SEARCH_IN_TITLE');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_WEBLINKS_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_WEBLINKS_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="weblinkList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" style="min-width:55px" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'a.ordering');				$item->cat_link	= JRoute::_('index.php?option=com_categories&extension=com_weblinks&task=edit&type=other&cid[]='. $item->catid);				$canCreate  = $user->authorise('core.create',     'com_weblinks.category.' . $item->catid);				$canEdit    = $user->authorise('core.edit',       'com_weblinks.category.' . $item->catid);				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_weblinks.category.' . $item->catid) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>						<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />					<?php else : ?>						<span class="sortable-handler inactive" >							<i class="icon-menu"></i>						</span>					<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->state, $i, 'weblinks.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'weblinks.', $canCheckin); ?>						<?php endif; ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_weblinks&task=weblink.edit&id='.(int) $item->id); ?>">								<?php echo $this->escape($item->title); ?></a>						<?php else : ?>								<?php echo $this->escape($item->title); ?>						<?php endif; ?>						<span class="small">							<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>						</span>						<div class="small">							<?php echo $this->escape($item->category_title); ?>						</div>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="center hidden-phone">						<?php echo $item->hits; ?>					</td>					<td class="small nowrap hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Language helper class * * @package     Joomla.Platform * @subpackage  Language * @since       11.1 */class JLanguageHelper{	/**	 * Builds a list of the system languages which can be used in a select option	 *	 * @param   string   $actualLanguage  Client key for the area	 * @param   string   $basePath        Base path to use	 * @param   boolean  $caching         True if caching is used	 * @param   array    $installed       An array of arrays (text, value, selected)	 *	 * @return  array  List of system languages	 *	 * @since   11.1	 */	public static function createLanguageList($actualLanguage, $basePath = JPATH_BASE, $caching = false, $installed = false)	{		$list = array();		// Cache activation		$langs = JLanguage::getKnownLanguages($basePath);		if ($installed)		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('element')				->from('#__extensions')				->where('type=' . $db->quote('language'))				->where('state=0')				->where('enabled=1')				->where('client_id=' . ($basePath == JPATH_ADMINISTRATOR ? 1 : 0));			$db->setQuery($query);			$installed_languages = $db->loadObjectList('element');		}		foreach ($langs as $lang => $metadata)		{			if (!$installed || array_key_exists($lang, $installed_languages))			{				$option = array();				$option['text'] = $metadata['name'];				$option['value'] = $lang;				if ($lang == $actualLanguage)				{					$option['selected'] = 'selected="selected"';				}				$list[] = $option;			}		}		return $list;	}	/**	 * Tries to detect the language.	 *	 * @return  string  locale or null if not found	 *	 * @since   11.1	 */	public static function detectLanguage()	{		if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE']))		{			$browserLangs = explode(',', $_SERVER['HTTP_ACCEPT_LANGUAGE']);			$systemLangs = self::getLanguages();			foreach ($browserLangs as $browserLang)			{				// Slice out the part before ; on first step, the part before - on second, place into array				$browserLang = substr($browserLang, 0, strcspn($browserLang, ';'));				$primary_browserLang = substr($browserLang, 0, 2);				foreach ($systemLangs as $systemLang)				{					// Take off 3 letters iso code languages as they can't match browsers' languages and default them to en					$Jinstall_lang = $systemLang->lang_code;					if (strlen($Jinstall_lang) < 6)					{						if (strtolower($browserLang) == strtolower(substr($systemLang->lang_code, 0, strlen($browserLang))))						{							return $systemLang->lang_code;						}						elseif ($primary_browserLang == substr($systemLang->lang_code, 0, 2))						{							$primaryDetectedLang = $systemLang->lang_code;						}					}				}				if (isset($primaryDetectedLang))				{					return $primaryDetectedLang;				}			}		}		return null;	}	/**	 * Get available languages	 *	 * @param   string  $key  Array key	 *	 * @return  array  An array of published languages	 *	 * @since   11.1	 */	public static function getLanguages($key = 'default')	{		static $languages;		if (empty($languages))		{			// Installation uses available languages			if (JFactory::getApplication()->getClientId() == 2)			{				$languages[$key] = array();				$knownLangs = JLanguage::getKnownLanguages(JPATH_BASE);				foreach ($knownLangs as $metadata)				{					// Take off 3 letters iso code languages as they can't match browsers' languages and default them to en					$obj = new stdClass;					$obj->lang_code = $metadata['tag'];					$languages[$key][] = $obj;				}			}			else			{				$cache = JFactory::getCache('com_languages', '');				if (!$languages = $cache->get('languages'))				{					$db = JFactory::getDbo();					$query = $db->getQuery(true)						->select('*')						->from('#__languages')						->where('published=1')						->order('ordering ASC');					$db->setQuery($query);					$languages['default'] = $db->loadObjectList();					$languages['sef'] = array();					$languages['lang_code'] = array();					if (isset($languages['default'][0]))					{						foreach ($languages['default'] as $lang)						{							$languages['sef'][$lang->sef] = $lang;							$languages['lang_code'][$lang->lang_code] = $lang;						}					}					$cache->store($languages, 'languages');				}			}		}		return $languages[$key];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Template styles list controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerStyles extends JControllerAdmin{	/**	 * Method to clone and existing template style.	 */	public function duplicate()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			JArrayHelper::toInteger($pks);			$model = $this->getModel();			$model->duplicate($pks);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_DUPLICATED'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}	/**	 * Proxy for getModel.	 *	 * @since   1.6	 */	public function getModel($name = 'Style', $prefix = 'TemplatesModel', $config = array())	{		$model = parent::getModel($name, $prefix, array('ignore_request' => true));		return $model;	}	/**	 * Method to set the home template for a client.	 *	 * @since   1.6	 */	public function setDefault()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			JArrayHelper::toInteger($pks);			// Pop off the first element.			$id = array_shift($pks);			$model = $this->getModel();			$model->setHome($id);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_HOME_SET'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}	/**	 * Method to unset the default template for a client and for a language	 *	 * @since   1.6	 */	public function unsetDefault()	{		// Check for request forgeries		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->get->get('cid', array(), 'array');		JArrayHelper::toInteger($pks);		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			// Pop off the first element.			$id = array_shift($pks);			$model = $this->getModel();			$model->unsetHome($id);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_HOME_UNSET'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class JFormFieldCategoryEdit extends JFormFieldList{	/**	 * A flexible category list that respects access controls	 *	 * @var        string	 * @since   1.6	 */	public $type = 'CategoryEdit';	/**	 * Method to get a list of categories that respects access controls and can be used for	 * either category assignment or parent category assignment in edit screens.	 * Use the parent element to indicate that the field will be used for assigning parent categories.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$published = $this->element['published'] ? $this->element['published'] : array(0, 1);		$name = (string) $this->element['name'];		// Let's get the id for the current item, either category or content item.		$jinput = JFactory::getApplication()->input;		// Load the category options for a given extension.		// For categories the old category is the category id or 0 for new category.		if ($this->element['parent'] || $jinput->get('option') == 'com_categories')		{			$oldCat = $jinput->get('id', 0);			$oldParent = $this->form->getValue($name, 0);			$extension = $this->element['extension'] ? (string) $this->element['extension'] : (string) $jinput->get('extension', 'com_content');		}		else			// For items the old category is the category they are in when opened or 0 if new.		{			$thisItem = $jinput->get('id', 0);			$oldCat = $this->form->getValue($name, 0);			$extension = $this->element['extension'] ? (string) $this->element['extension'] : (string) $jinput->get('option', 'com_content');		}		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level, a.published')			->from('#__categories AS a')			->join('LEFT', $db->quoteName('#__categories') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		// Filter by the extension type		if ($this->element['parent'] == true || $jinput->get('option') == 'com_categories')		{			$query->where('(a.extension = ' . $db->quote($extension) . ' OR a.parent_id = 0)');		}		else		{			$query->where('(a.extension = ' . $db->quote($extension) . ')');		}		// If parent isn't explicitly stated but we are in com_categories assume we want parents		if ($oldCat != 0 && ($this->element['parent'] == true || $jinput->get('option') == 'com_categories'))		{			// Prevent parenting to children of this item.			// To rearrange parents and children move the children up, not the parents down.			$query->join('LEFT', $db->quoteName('#__categories') . ' AS p ON p.id = ' . (int) $oldCat)				->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');			$rowQuery = $db->getQuery(true);			$rowQuery->select('a.id AS value, a.title AS text, a.level, a.parent_id')				->from('#__categories AS a')				->where('a.id = ' . (int) $oldCat);			$db->setQuery($rowQuery);			$row = $db->loadObject();		}		// Filter language		if (!empty($this->element['language']))		{			$query->where('a.language = ' . $db->quote($this->element['language']));		}		// Filter on the published state		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif (is_array($published))		{			JArrayHelper::toInteger($published);			$query->where('a.published IN (' . implode(',', $published) . ')');		}		$query->group('a.id, a.title, a.level, a.lft, a.rgt, a.extension, a.parent_id, a.published')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage);		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			// Translate ROOT			if ($this->element['parent'] == true || $jinput->get('option') == 'com_categories')			{				if ($options[$i]->level == 0)				{					$options[$i]->text = JText::_('JGLOBAL_ROOT_PARENT');				}			}			if ($options[$i]->published == 1)			{				$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;			}			else			{				$options[$i]->text = str_repeat('- ', $options[$i]->level) . '[' . $options[$i]->text . ']';			}		}		// Get the current user object.		$user = JFactory::getUser();		// For new items we want a list of categories you are allowed to create in.		if ($oldCat == 0)		{			foreach ($options as $i => $option)			{				// To take save or create in a category you need to have create rights for that category				// unless the item is already in that category.				// Unset the option if the user isn't authorised for it. In this field assets are always categories.				if ($user->authorise('core.create', $extension . '.category.' . $option->value) != true)				{					unset($options[$i]);				}			}		}		// If you have an existing category id things are more complex.		else		{			// If you are only allowed to edit in this category but not edit.state, you should not get any			// option to change the category parent for a category or the category for a content item,			// but you should be able to save in that category.			foreach ($options as $i => $option)			{				if ($user->authorise('core.edit.state', $extension . '.category.' . $oldCat) != true && !isset($oldParent))				{					if ($option->value != $oldCat)					{						unset($options[$i]);					}				}				if ($user->authorise('core.edit.state', $extension . '.category.' . $oldCat) != true					&& (isset($oldParent))					&& $option->value != $oldParent				)				{					unset($options[$i]);				}				// However, if you can edit.state you can also move this to another category for which you have				// create permission and you should also still be able to save in the current category.				if (($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					&& ($option->value != $oldCat && !isset($oldParent))				)				{					{						unset($options[$i]);					}				}				if (($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					&& (isset($oldParent))					&& $option->value != $oldParent				)				{					{						unset($options[$i]);					}				}			}		}		if (($this->element['parent'] == true || $jinput->get('option') == 'com_categories')			&& (isset($row) && !isset($options[0]))			&& isset($this->element['show_root'])		)		{			if ($row->parent_id == '1')			{				$parent = new stdClass;				$parent->text = JText::_('JGLOBAL_ROOT_PARENT');				array_unshift($options, $parent);			}			array_unshift($options, JHtml::_('select.option', '0', JText::_('JGLOBAL_ROOT')));		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extension table * Replaces plugins table * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableExtension extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__extensions', 'extension_id', $db);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True if the object is ok	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// Check for valid name		if (trim($this->name) == '' || trim($this->element) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MUSTCONTAIN_A_TITLE_EXTENSION'));			return false;		}		return true;	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 * to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['control']) && is_array($array['control']))		{			$registry = new JRegistry;			$registry->loadArray($array['control']);			$array['control'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Method to create and execute a SELECT WHERE query.	 *	 * @param   array  $options  Array of options	 *	 * @return  string  The database query result	 *	 * @since   11.1	 */	public function find($options = array())	{		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		foreach ($options as $col => $val)		{			$query->where($col . ' = ' . $this->_db->quote($val));		}		$query->select($this->_db->quoteName('extension_id'))			->from($this->_db->quoteName('#__extensions'));		$this->_db->setQuery($query);		return $this->_db->loadResult();	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not	 *                            set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k . '=' . implode(' OR ' . $k . '=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) $userId . ')';		}		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		// Update the publishing state for rows with the given primary keys.		$query->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('enabled') . ' = ' . (int) $state)			->where('(' . $where . ')' . $checkin);		$this->_db->setQuery($query);		$this->_db->execute();		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->enabled = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with phpsetting * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */abstract class JHtmlPhpSetting{	/**	 * Method to generate a boolean message for a value	 *	 * @param boolean $val is the value set?	 *	 * @return  string html code	 */	public static function boolean($val)	{		if ($val)		{			return JText::_('JON');		}		else		{			return JText::_('JOFF');		}	}	/**	 * Method to generate a boolean message for a value	 *	 * @param boolean $val is the value set?	 *	 * @return  string html code	 */	public static function set($val)	{		if ($val)		{			return JText::_('JYES');		}		else		{			return JText::_('JNO');		}	}	/**	 * Method to generate a string message for a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 */	public static function string($val)	{		if (empty($val))		{			return JText::_('JNONE');		}		else		{			return $val;		}	}	/**	 * Method to generate an integer from a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 *	 * @deprecated  4.0  Use intval() or casting instead.	 */	public static function integer($val)	{		JLog::add('JHtmlPhpSetting::integer() is deprecated. Use intval() or casting instead.', JLog::WARNING, 'deprecated');		return (int) $val;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Form Field class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldTimezone extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Timezone';	/**	 * The list of available timezone groups to use.	 *	 * @var    array	 *	 * @since  11.1	 */	protected static $zones = array('Africa', 'America', 'Antarctica', 'Arctic', 'Asia', 'Atlantic', 'Australia', 'Europe', 'Indian', 'Pacific');	/**	 * Method to get the time zone field option groups.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   11.1	 */	protected function getGroups()	{		$groups = array();		$keyField = $this->element['key_field'] ? (string) $this->element['key_field'] : 'id';		$keyValue = $this->form->getValue($keyField);		// If the timezone is not set use the server setting.		if (strlen($this->value) == 0 && empty($keyValue))		{			$this->value = JFactory::getConfig()->get('offset');		}		// Get the list of time zones from the server.		$zones = DateTimeZone::listIdentifiers();		// Build the group lists.		foreach ($zones as $zone)		{			// Time zones not in a group we will ignore.			if (strpos($zone, '/') === false)			{				continue;			}			// Get the group/locale from the timezone.			list ($group, $locale) = explode('/', $zone, 2);			// Only use known groups.			if (in_array($group, self::$zones))			{				// Initialize the group if necessary.				if (!isset($groups[$group]))				{					$groups[$group] = array();				}				// Only add options where a locale exists.				if (!empty($locale))				{					$groups[$group][$zone] = JHtml::_('select.option', $zone, str_replace('_', ' ', $locale), 'value', 'text', false);				}			}		}		// Sort the group lists.		ksort($groups);		foreach ($groups as $zone => & $location)		{			sort($location);		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extended Utility class for the Users component. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class JHtmlUsers{	/**	 * Display an image.	 *	 * @param   string  $src  The source of the image	 *	 * @return  string  A <img> element if the specified file exists, otherwise, a null string	 *	 * @since   2.5	 */	public static function image($src)	{		$src = preg_replace('#[^A-Z0-9\-_\./]#i', '', $src);		$file = JPATH_SITE . '/' . $src;		jimport('joomla.filesystem.path');		JPath::check($file);		if (!file_exists($file))		{			return '';		}		return '<img src="' . JUri::root() . $src . '" alt="" />';	}	/**	 * Displays an icon to add a note for this user.	 *	 * @param   integer  $userId  The user ID	 *	 * @return  string  A link to add a note	 *	 * @since   2.5	 */	public static function addNote($userId)	{		$title = JText::_('COM_USERS_ADD_NOTE');		return '<a href="' . JRoute::_('index.php?option=com_users&task=note.add&u_id=' . (int) $userId) . '">'			. '<span class="label label-info"><i class="icon-vcard"></i>' . $title . '</span></a>';	}	/**	 * Displays an icon to filter the notes list on this user.	 *	 * @param   integer  $count   The number of notes for the user	 * @param   integer  $userId  The user ID	 *	 * @return  string  A link to apply a filter	 *	 * @since   2.5	 */	public static function filterNotes($count, $userId)	{		if (empty($count))		{			return '';		}		$title = JText::_('COM_USERS_FILTER_NOTES');		return '<a href="' . JRoute::_('index.php?option=com_users&view=notes&filter_search=uid:' . (int) $userId) . '">'			. JHtml::_('image', 'admin/filter_16.png', 'COM_USERS_NOTES', array('title' => $title), true) . '</a>';	}	/**	 * Displays a note icon.	 *	 * @param   integer  $count   The number of notes for the user	 * @param   integer  $userId  The user ID	 *	 * @return  string  A link to a modal window with the user notes	 *	 * @since   2.5	 */	public static function notes($count, $userId)	{		if (empty($count))		{			return '';		}		$title = JText::plural('COM_USERS_N_USER_NOTES', $count);		return '<a class="modal"'			. ' href="' . JRoute::_('index.php?option=com_users&view=notes&tmpl=component&layout=modal&u_id=' . (int) $userId) . '"'			. ' rel="{handler: \'iframe\', size: {x: 800, y: 450}}">'			. '<span class="label label-info"><i class="icon-drawer-2"></i>' . $title . '</span></a>';	}	/**	 * Build an array of block/unblock user states to be used by jgrid.state,	 * State options will be different for any user	 * and for currently logged in user	 *	 * @param   boolean  $self  True if state array is for currently logged in user	 *	 * @return  array  a list of possible states to display	 *	 * @since  3.0	 */	public static function blockStates( $self = false)	{		if ($self)		{			$states = array(				1 => array(					'task'				=> 'unblock',					'text'				=> '',					'active_title'		=> 'COM_USERS_USER_FIELD_BLOCK_DESC',					'inactive_title'	=> '',					'tip'				=> true,					'active_class'		=> 'unpublish',					'inactive_class'	=> 'unpublish'				),				0 => array(					'task'				=> 'block',					'text'				=> '',					'active_title'		=> '',					'inactive_title'	=> 'COM_USERS_USERS_ERROR_CANNOT_BLOCK_SELF',					'tip'				=> true,					'active_class'		=> 'publish',					'inactive_class'	=> 'publish'				)			);		}		else		{			$states = array(				1 => array(					'task'				=> 'unblock',					'text'				=> '',					'active_title'		=> 'COM_USERS_TOOLBAR_UNBLOCK',					'inactive_title'	=> '',					'tip'				=> true,					'active_class'		=> 'unpublish',					'inactive_class'	=> 'unpublish'				),				0 => array(					'task'				=> 'block',					'text'				=> '',					'active_title'		=> 'COM_USERS_USER_FIELD_BLOCK_DESC',					'inactive_title'	=> '',					'tip'				=> true,					'active_class'		=> 'publish',					'inactive_class'	=> 'publish'				)			);		}		return $states;	}	/**	 * Build an array of activate states to be used by jgrid.state,	 *	 * @return  array  a list of possible states to display	 *	 * @since  3.0	 */	public static function activateStates()	{		$states = array(			1	=> array(				'task'				=> 'activate',				'text'				=> '',				'active_title'		=> 'COM_USERS_TOOLBAR_ACTIVATE',				'inactive_title'	=> '',				'tip'				=> true,				'active_class'		=> 'unpublish',				'inactive_class'	=> 'unpublish'			),			0	=> array(				'task'				=> '',				'text'				=> '',				'active_title'		=> '',				'inactive_title'	=> 'COM_USERS_ACTIVATED',				'tip'				=> true,				'active_class'		=> 'publish',				'inactive_class'	=> 'publish'			)		);		return $states;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_contact')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller = JControllerLegacy::getInstance('contact');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Plugin * @subpackage  Quickicon.Extensionupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! udpate notification plugin * * @package     Joomla.Plugin * @subpackage  Quickicon.Extensionupdate * @since       2.5 */class PlgQuickiconExtensionupdate extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Returns an icon definition for an icon which looks for extensions updates	 * via AJAX and displays a notification when such updates are found.	 *	 * @param  $context  The calling context	 *	 * @return array A list of icon definition associative arrays, consisting of the	 *				 keys link, image, text and access.	 *	 * @since       2.5	 */	public function onGetIcons($context)	{		if ($context != $this->params->get('context', 'mod_quickicon') || !JFactory::getUser()->authorise('core.manage', 'com_installer'))		{			return;		}		JHtml::_('jquery.framework');		$ajax_url = JURI::base().'index.php?option=com_installer&view=update&task=update.ajax';		$script = "var plg_quickicon_extensionupdate_ajax_url = '$ajax_url';\n";		$script .= 'var plg_quickicon_extensionupdate_text = {"UPTODATE" : "'.			JText::_('PLG_QUICKICON_EXTENSIONUPDATE_UPTODATE', true).'", "UPDATEFOUND": "'.			JText::_('PLG_QUICKICON_EXTENSIONUPDATE_UPDATEFOUND', true).'", "ERROR": "'.			JText::_('PLG_QUICKICON_EXTENSIONUPDATE_ERROR', true)."\"};\n";		$document = JFactory::getDocument();		$document->addScriptDeclaration($script);		JHtml::_('script', 'plg_quickicon_extensionupdate/extensionupdatecheck.js', false, true);		return array(array(			'link' => 'index.php?option=com_installer&view=update',			'image' => 'asterisk',			'icon' => 'header/icon-48-extension.png',			'text' => JText::_('PLG_QUICKICON_EXTENSIONUPDATE_CHECKING'),			'id' => 'plg_quickicon_extensionupdate'		));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link model. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectModelLink extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_REDIRECT';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if ($record->published != -2)		{			return false;		}		$user = JFactory::getUser();		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check the component since there are no categories or other assets.		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Link', $prefix = 'RedirectTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_redirect.link', 'link', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if ($this->canEditState((object) $data) != true)		{			// Disable fields for display.			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_redirect.edit.link.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_redirect.link', $data);		return $data;	}	/**	 * Method to activate links.	 *	 * @param   array     An array of link ids.	 * @param   string    The new URL to set for the redirect.	 * @param   string    A comment for the redirect links.	 * @return  boolean  Returns true on success, false on failure.	 * @since   1.6	 */	public function activate(&$pks, $url, $comment = null)	{		$user = JFactory::getUser();		$db = $this->getDbo();		// Sanitize the ids.		$pks = (array) $pks;		JArrayHelper::toInteger($pks);		// Populate default comment if necessary.		$comment = (!empty($comment)) ? $comment : JText::sprintf('COM_REDIRECT_REDIRECTED_ON', JHtml::_('date', time()));		// Access checks.		if (!$user->authorise('core.admin', 'com_redirect'))		{			$pks = array();			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			return false;		}		if (!empty($pks))		{			// Update the link rows.			$query = $db->getQuery(true)				->update($db->quoteName('#__redirect_links'))				->set($db->quoteName('new_url') . ' = ' . $db->quote($url))				->set($db->quoteName('published') . ' = ' . $db->quote(1))				->set($db->quoteName('comment') . ' = ' . $db->quote($comment))				->where($db->quoteName('id') . ' IN (' . implode(',', $pks) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=debuguser&user_id='.(int) $this->state->get('filter.user_id'));?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?></legend>		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_USERS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_RESET'); ?></button>		</div>		<div class="filter-select fltrt">			<label class="selectlabel" for="filter_component"><?php echo JText::_('COM_USERS_OPTION_SELECT_COMPONENT'); ?></label>			<select name="filter_component" class="inputbox" id="filter_component">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_COMPONENT');?></option>				<?php if (!empty($this->components))				{					echo JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));				}?>			</select>			<label class="selectlabel" for="filter_level_start"><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'); ?></label>			<select name="filter_level_start" class="inputbox" id="filter_level_start">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_START');?></option>				<?php echo JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'));?>			</select>			<label class="selectlabel" for="filter_level_end"><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'); ?></label>			<select name="filter_level_end" class="inputbox" id="filter_level_end">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_END');?></option>				<?php echo JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<div>		<?php echo JText::_('COM_USERS_DEBUG_LEGEND'); ?>		<span class="swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_NO_CHECK', '-');?></span>		<span class="check-0 swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_IMPLICIT_DENY', '-');?></span>		<span class="check-a swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_EXPLICIT_ALLOW', '&#10003;');?></span>		<span class="check-d swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_EXPLICIT_DENY', '&#10007;');?></span>	</div>	<table class="adminlist">		<thead>			<tr>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<?php foreach ($this->actions as $key => $action) : ?>				<th class="width-5">					<span class="hasTip" title="<?php echo htmlspecialchars(JText::_($key).'::'.JText::_($action[1]), ENT_COMPAT, 'UTF-8'); ?>"><?php echo JText::_($key); ?></span>				</th>				<?php endforeach; ?>				<th class="width-5 nowrap">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LFT', 'a.lft', $listDirn, $listOrder); ?>				</th>				<th class="width-5 nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row1">				<th>					<?php echo $this->escape($item->title); ?>				</th>				<td class="nowrap">					<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>					<?php echo $this->escape($item->name); ?>				</td>				<?php foreach ($this->actions as $action) : ?>					<?php					$name	= $action[0];					$check	= $item->checks[$name];					if ($check === true) :						$class	= 'check-a';						$text	= '&#10003;';					elseif ($check === false) :						$class	= 'check-d';						$text	= '&#10007;';					elseif ($check === null) :						$class	= 'check-0';						$text	= '-';					else :						$class	= '';						$text	= '&#160;';					endif;					?>				<td class="center <?php echo $class;?>">					<?php echo $text; ?>				</td>				<?php endforeach; ?>				<td class="center">					<?php echo (int) $item->lft; ?>					- <?php echo (int) $item->rgt; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$app = JFactory::getApplication();$input = $app->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'tag.cancel' || document.formvalidator.isValid(document.id('item-form'))) {			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_tags&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<div class="row-fluid">	<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_TAGS_FIELDSET_DETAILS', true)); ?>					<fieldset class="adminform">						<div class="control-group form-inline">							<?php echo $this->form->getLabel('title'); ?> <?php echo $this->form->getInput('title'); ?> <?php echo $this->form->getLabel('catid'); ?> <?php echo $this->form->getInput('catid'); ?>						</div>						<?php echo $this->form->getInput('description'); ?>					</fieldset>						<div class="row-fluid">							<div class="span6">								<h4><?php echo JText::_('COM_TAGS_FIELDSET_URLS_AND_IMAGES');?></h4>								<div class="control-group">									<?php echo $this->form->getLabel('images'); ?>									<div class="controls">										<?php echo $this->form->getInput('images'); ?>									</div>								</div>								<?php foreach ($this->form->getGroup('images') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>											<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>						</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_TAGS_FIELDSET_PUBLISHING', true)); ?>							<div class="row-fluid">								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('alias'); ?>										</div>									</div>									<div class="control-group">										<div class="control-label">											<?php echo $this->form->getLabel('id'); ?>										</div>										<div class="controls">											<?php echo $this->form->getInput('id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_user_id'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_user_id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by_alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by_alias'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_time'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_time'); ?>										</div>									</div>								</div>								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('publish_up'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_up'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('publish_down'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_down'); ?>										</div>									</div>									<?php if ($this->item->modified_user_id) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('modified_user_id'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_user_id'); ?>											</div>										</div>										<div class="control-group">											<?php echo $this->form->getLabel('modified_time'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_time'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->version) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('version'); ?>											<div class="controls">												<?php echo $this->form->getInput('version'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->hits) : ?>										<div class="control-group">											<div class="control-label">												<?php echo $this->form->getLabel('hits'); ?>											</div>											<div class="controls">												<?php echo $this->form->getInput('hits'); ?>											</div>										</div>									<?php endif; ?>								</div>							</div>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>							<?php echo $this->loadTemplate('metadata'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>									</div>				<input type="hidden" name="task" value="" />				<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->		<div class="span2">			<h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('title'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('parent_id'); ?>					<div class="controls">						<?php echo $this->form->getInput('parent_id'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('published'); ?>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('access'); ?>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('language'); ?>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>			</fieldset>		</div>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a help popup window button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonHelp extends JToolbarButton{	/**	 * @var    string	Button type	 */	protected $_name = 'Help';	/**	 * Fetches the button HTML code.	 *	 * @param   string   $type       Unused string.	 * @param   string   $ref        The name of the help screen (its key reference).	 * @param   boolean  $com        Use the help file in the component directory.	 * @param   string   $override   Use this URL instead of any other.	 * @param   string   $component  Name of component to get Help (null for current component)	 *	 * @return  string	 *	 * @since   3.0	 */	public function fetchButton($type = 'Help', $ref = '', $com = false, $override = null, $component = null)	{		$text = JText::_('JTOOLBAR_HELP');		$class = 'question-sign';		$doTask = $this->_getCommand($ref, $com, $override, $component);		$html = "<button href=\"#\" onclick=\"$doTask\" rel=\"help\" class=\"btn btn-small\">\n";		$html .= "<i class=\"icon-$class\">\n";		$html .= "</i>\n";		$html .= "$text\n";		$html .= "</button>\n";		return $html;	}	/**	 * Get the button id	 *	 * Redefined from JButton class	 *	 * @return  string	Button CSS Id	 *	 * @since   3.0	 */	public function fetchId()	{		return $this->_parent->getName() . '-' . "help";	}	/**	 * Get the JavaScript command for the button	 *	 * @param   string   $ref        The name of the help screen (its key reference).	 * @param   boolean  $com        Use the help file in the component directory.	 * @param   string   $override   Use this URL instead of any other.	 * @param   string   $component  Name of component to get Help (null for current component)	 *	 * @return  string   JavaScript command string	 *	 * @since   3.0	 */	protected function _getCommand($ref, $com, $override, $component)	{		JHtml::_('behavior.framework');		// Get Help URL		$url = JHelp::createURL($ref, $com, $override, $component);		$url = htmlspecialchars($url, ENT_QUOTES);		$cmd = "Joomla.popupWindow('$url', '" . JText::_('JHELP', true) . "', 700, 500, 1)";		return $cmd;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Allows for quoting in language .ini files. */define('_QQ_', '"');/** * Languages/translation handler class * * @package     Joomla.Platform * @subpackage  Language * @since       11.1 */class JLanguage{	protected static $languages = array();	/**	 * Debug language, If true, highlights if string isn't found.	 * @var    boolean	 * @since  11.1	 */	protected $debug = false;	/**	 * The default language, used when a language file in the requested language does not exist.	 * @var    string	 * @since  11.1	 */	protected $default = 'en-GB';	/**	 * An array of orphaned text.	 * @var    array	 * @since  11.1	 */	protected $orphans = array();	/**	 * Array holding the language metadata.	 * @var    array	 * @since  11.1	 */	protected $metadata = null;	/**	 * Array holding the language locale or boolean null if none.	 * @var    array|boolean	 * @since  11.1	 */	protected $locale = null;	/**	 * The language to load.	 * @var    string	 * @since  11.1	 */	protected $lang = null;	/**	 * A nested array of language files that have been loaded	 * @var    array	 * @since  11.1	 */	protected $paths = array();	/**	 * List of language files that are in error state	 * @var    array	 * @since  11.1	 */	protected $errorfiles = array();	/**	 * Translations	 * @var    array	 * @since  11.1	 */	protected $strings = null;	/**	 * An array of used text, used during debugging.	 * @var    array	 * @since  11.1	 */	protected $used = array();	/**	 * Counter for number of loads.	 * @var    integer	 * @since  11.1	 */	protected $counter = 0;	/**	 * An array used to store overrides.	 * @var    array	 * @since  11.1	 */	protected $override = array();	/**	 * Name of the transliterator function for this language.	 * @var    string	 * @since  11.1	 */	protected $transliterator = null;	/**	 * Name of the pluralSuffixesCallback function for this language.	 * @var    string	 * @since  11.1	 */	protected $pluralSuffixesCallback = null;	/**	 * Name of the ignoredSearchWordsCallback function for this language.	 * @var    string	 * @since  11.1	 */	protected $ignoredSearchWordsCallback = null;	/**	 * Name of the lowerLimitSearchWordCallback function for this language.	 * @var    string	 * @since  11.1	 */	protected $lowerLimitSearchWordCallback = null;	/**	 * Name of the uppperLimitSearchWordCallback function for this language	 * @var    string	 * @since  11.1	 */	protected $upperLimitSearchWordCallback = null;	/**	 * Name of the searchDisplayedCharactersNumberCallback function for this language.	 * @var    string	 * @since  11.1	 */	protected $searchDisplayedCharactersNumberCallback = null;	/**	 * Constructor activating the default information of the language.	 *	 * @param   string   $lang   The language	 * @param   boolean  $debug  Indicates if language debugging is enabled.	 *	 * @since   11.1	 */	public function __construct($lang = null, $debug = false)	{		$this->strings = array();		if ($lang == null)		{			$lang = $this->default;		}		$this->setLanguage($lang);		$this->setDebug($debug);		$filename = JPATH_BASE . "/language/overrides/$lang.override.ini";		if (file_exists($filename) && $contents = $this->parse($filename))		{			if (is_array($contents))			{				// Sort the underlying heap by key values to optimize merging				ksort($contents, SORT_STRING);				$this->override = $contents;			}			unset($contents);		}		// Look for a language specific localise class		$class = str_replace('-', '_', $lang . 'Localise');		$paths = array();		if (defined('JPATH_SITE'))		{			// Note: Manual indexing to enforce load order.			$paths[0] = JPATH_SITE . "/language/overrides/$lang.localise.php";			$paths[2] = JPATH_SITE . "/language/$lang/$lang.localise.php";		}		if (defined('JPATH_ADMINISTRATOR'))		{			// Note: Manual indexing to enforce load order.			$paths[1] = JPATH_ADMINISTRATOR . "/language/overrides/$lang.localise.php";			$paths[3] = JPATH_ADMINISTRATOR . "/language/$lang/$lang.localise.php";		}		ksort($paths);		$path = reset($paths);		while (!class_exists($class) && $path)		{			if (file_exists($path))			{				require_once $path;			}			$path = next($paths);		}		if (class_exists($class))		{			/* Class exists. Try to find			 * -a transliterate method,			 * -a getPluralSuffixes method,			 * -a getIgnoredSearchWords method			 * -a getLowerLimitSearchWord method			 * -a getUpperLimitSearchWord method			 * -a getSearchDisplayCharactersNumber method			 */			if (method_exists($class, 'transliterate'))			{				$this->transliterator = array($class, 'transliterate');			}			if (method_exists($class, 'getPluralSuffixes'))			{				$this->pluralSuffixesCallback = array($class, 'getPluralSuffixes');			}			if (method_exists($class, 'getIgnoredSearchWords'))			{				$this->ignoredSearchWordsCallback = array($class, 'getIgnoredSearchWords');			}			if (method_exists($class, 'getLowerLimitSearchWord'))			{				$this->lowerLimitSearchWordCallback = array($class, 'getLowerLimitSearchWord');			}			if (method_exists($class, 'getUpperLimitSearchWord'))			{				$this->upperLimitSearchWordCallback = array($class, 'getUpperLimitSearchWord');			}			if (method_exists($class, 'getSearchDisplayedCharactersNumber'))			{				$this->searchDisplayedCharactersNumberCallback = array($class, 'getSearchDisplayedCharactersNumber');			}		}		$this->load();	}	/**	 * Returns a language object.	 *	 * @param   string   $lang   The language to use.	 * @param   boolean  $debug  The debug mode.	 *	 * @return  JLanguage  The Language object.	 *	 * @since   11.1	 */	public static function getInstance($lang, $debug = false)	{		if (!isset(self::$languages[$lang . $debug]))		{			self::$languages[$lang . $debug] = new JLanguage($lang, $debug);		}		return self::$languages[$lang . $debug];	}	/**	 * Translate function, mimics the php gettext (alias _) function.	 *	 * The function checks if $jsSafe is true, then if $interpretBackslashes is true.	 *	 * @param   string   $string                The string to translate	 * @param   boolean  $jsSafe                Make the result javascript safe	 * @param   boolean  $interpretBackSlashes  Interpret \t and \n	 *	 * @return  string  The translation of the string	 *	 * @since   11.1	 */	public function _($string, $jsSafe = false, $interpretBackSlashes = true)	{		// Detect empty string		if ($string == '')		{			return '';		}		$key = strtoupper($string);		if (isset($this->strings[$key]))		{			$string = $this->debug ? '**' . $this->strings[$key] . '**' : $this->strings[$key];			// Store debug information			if ($this->debug)			{				$caller = $this->getCallerInfo();				if (!array_key_exists($key, $this->used))				{					$this->used[$key] = array();				}				$this->used[$key][] = $caller;			}		}		else		{			if ($this->debug)			{				$caller = $this->getCallerInfo();				$caller['string'] = $string;				if (!array_key_exists($key, $this->orphans))				{					$this->orphans[$key] = array();				}				$this->orphans[$key][] = $caller;				$string = '??' . $string . '??';			}		}		if ($jsSafe)		{			// Javascript filter			$string = addslashes($string);		}		elseif ($interpretBackSlashes)		{			// Interpret \n and \t characters			$string = str_replace(array('\\\\', '\t', '\n'), array("\\", "\t", "\n"), $string);		}		return $string;	}	/**	 * Transliterate function	 *	 * This method processes a string and replaces all accented UTF-8 characters by unaccented	 * ASCII-7 "equivalents".	 *	 * @param   string  $string  The string to transliterate.	 *	 * @return  string  The transliteration of the string.	 *	 * @since   11.1	 */	public function transliterate($string)	{		if ($this->transliterator !== null)		{			return call_user_func($this->transliterator, $string);		}		$string = JLanguageTransliterate::utf8_latin_to_ascii($string);		$string = JString::strtolower($string);		return $string;	}	/**	 * Getter for transliteration function	 *	 * @return  callable  The transliterator function	 *	 * @since   11.1	 */	public function getTransliterator()	{		return $this->transliterator;	}	/**	 * Set the transliteration function.	 *	 * @param   callable  $function  Function name or the actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setTransliterator($function)	{		$previous = $this->transliterator;		$this->transliterator = $function;		return $previous;	}	/**	 * Returns an array of suffixes for plural rules.	 *	 * @param   integer  $count  The count number the rule is for.	 *	 * @return  array    The array of suffixes.	 *	 * @since   11.1	 */	public function getPluralSuffixes($count)	{		if ($this->pluralSuffixesCallback !== null)		{			return call_user_func($this->pluralSuffixesCallback, $count);		}		else		{			return array((string) $count);		}	}	/**	 * Getter for pluralSuffixesCallback function.	 *	 * @return  callable  Function name or the actual function.	 *	 * @since   11.1	 */	public function getPluralSuffixesCallback()	{		return $this->pluralSuffixesCallback;	}	/**	 * Set the pluralSuffixes function.	 *	 * @param   callable  $function  Function name or actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setPluralSuffixesCallback($function)	{		$previous = $this->pluralSuffixesCallback;		$this->pluralSuffixesCallback = $function;		return $previous;	}	/**	 * Returns an array of ignored search words	 *	 * @return  array  The array of ignored search words.	 *	 * @since   11.1	 */	public function getIgnoredSearchWords()	{		if ($this->ignoredSearchWordsCallback !== null)		{			return call_user_func($this->ignoredSearchWordsCallback);		}		else		{			return array();		}	}	/**	 * Getter for ignoredSearchWordsCallback function.	 *	 * @return  callable  Function name or the actual function.	 *	 * @since   11.1	 */	public function getIgnoredSearchWordsCallback()	{		return $this->ignoredSearchWordsCallback;	}	/**	 * Setter for the ignoredSearchWordsCallback function	 *	 * @param   callable  $function  Function name or actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setIgnoredSearchWordsCallback($function)	{		$previous = $this->ignoredSearchWordsCallback;		$this->ignoredSearchWordsCallback = $function;		return $previous;	}	/**	 * Returns a lower limit integer for length of search words	 *	 * @return  integer  The lower limit integer for length of search words (3 if no value was set for a specific language).	 *	 * @since   11.1	 */	public function getLowerLimitSearchWord()	{		if ($this->lowerLimitSearchWordCallback !== null)		{			return call_user_func($this->lowerLimitSearchWordCallback);		}		else		{			return 3;		}	}	/**	 * Getter for lowerLimitSearchWordCallback function	 *	 * @return  callable  Function name or the actual function.	 *	 * @since   11.1	 */	public function getLowerLimitSearchWordCallback()	{		return $this->lowerLimitSearchWordCallback;	}	/**	 * Setter for the lowerLimitSearchWordCallback function.	 *	 * @param   callable  $function  Function name or actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setLowerLimitSearchWordCallback($function)	{		$previous = $this->lowerLimitSearchWordCallback;		$this->lowerLimitSearchWordCallback = $function;		return $previous;	}	/**	 * Returns an upper limit integer for length of search words	 *	 * @return  integer  The upper limit integer for length of search words (20 if no value was set for a specific language).	 *	 * @since   11.1	 */	public function getUpperLimitSearchWord()	{		if ($this->upperLimitSearchWordCallback !== null)		{			return call_user_func($this->upperLimitSearchWordCallback);		}		else		{			return 20;		}	}	/**	 * Getter for upperLimitSearchWordCallback function	 *	 * @return  callable  Function name or the actual function.	 *	 * @since   11.1	 */	public function getUpperLimitSearchWordCallback()	{		return $this->upperLimitSearchWordCallback;	}	/**	 * Setter for the upperLimitSearchWordCallback function	 *	 * @param   callable  $function  Function name or the actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setUpperLimitSearchWordCallback($function)	{		$previous = $this->upperLimitSearchWordCallback;		$this->upperLimitSearchWordCallback = $function;		return $previous;	}	/**	 * Returns the number of characters displayed in search results.	 *	 * @return  integer  The number of characters displayed (200 if no value was set for a specific language).	 *	 * @since   11.1	 */	public function getSearchDisplayedCharactersNumber()	{		if ($this->searchDisplayedCharactersNumberCallback !== null)		{			return call_user_func($this->searchDisplayedCharactersNumberCallback);		}		else		{			return 200;		}	}	/**	 * Getter for searchDisplayedCharactersNumberCallback function	 *	 * @return  callable  Function name or the actual function.	 *	 * @since   11.1	 */	public function getSearchDisplayedCharactersNumberCallback()	{		return $this->searchDisplayedCharactersNumberCallback;	}	/**	 * Setter for the searchDisplayedCharactersNumberCallback function.	 *	 * @param   callable  $function  Function name or the actual function.	 *	 * @return  callable  The previous function.	 *	 * @since   11.1	 */	public function setSearchDisplayedCharactersNumberCallback($function)	{		$previous = $this->searchDisplayedCharactersNumberCallback;		$this->searchDisplayedCharactersNumberCallback = $function;		return $previous;	}	/**	 * Checks if a language exists.	 *	 * This is a simple, quick check for the directory that should contain language files for the given user.	 *	 * @param   string  $lang      Language to check.	 * @param   string  $basePath  Optional path to check.	 *	 * @return  boolean  True if the language exists.	 *	 * @since   11.1	 */	public static function exists($lang, $basePath = JPATH_BASE)	{		static $paths = array();		// Return false if no language was specified		if (!$lang)		{			return false;		}		$path = $basePath . '/language/' . $lang;		// Return previous check results if it exists		if (isset($paths[$path]))		{			return $paths[$path];		}		// Check if the language exists		$paths[$path] = is_dir($path);		return $paths[$path];	}	/**	 * Loads a single language file and appends the results to the existing strings	 *	 * @param   string   $extension  The extension for which a language file should be loaded.	 * @param   string   $basePath   The basepath to use.	 * @param   string   $lang       The language to load, default null for the current language.	 * @param   boolean  $reload     Flag that will force a language to be reloaded if set to true.	 * @param   boolean  $default    Flag that force the default language to be loaded if the current does not exist.	 *	 * @return  boolean  True if the file has successfully loaded.	 *	 * @since   11.1	 */	public function load($extension = 'joomla', $basePath = JPATH_BASE, $lang = null, $reload = false, $default = true)	{		if (!$lang)		{			$lang = $this->lang;		}		$path = self::getLanguagePath($basePath, $lang);		$internal = $extension == 'joomla' || $extension == '';		$filename = $internal ? $lang : $lang . '.' . $extension;		$filename = "$path/$filename.ini";		$result = false;		if (isset($this->paths[$extension][$filename]) && !$reload)		{			// This file has already been tested for loading.			$result = $this->paths[$extension][$filename];		}		else		{			// Load the language file			$result = $this->loadLanguage($filename, $extension);			// Check whether there was a problem with loading the file			if ($result === false && $default)			{				// No strings, so either file doesn't exist or the file is invalid				$oldFilename = $filename;				// Check the standard file name				$path = self::getLanguagePath($basePath, $this->default);				$filename = $internal ? $this->default : $this->default . '.' . $extension;				$filename = "$path/$filename.ini";				// If the one we tried is different than the new name, try again				if ($oldFilename != $filename)				{					$result = $this->loadLanguage($filename, $extension, false);				}			}		}		return $result;	}	/**	 * Loads a language file.	 *	 * This method will not note the successful loading of a file - use load() instead.	 *	 * @param   string  $filename   The name of the file.	 * @param   string  $extension  The name of the extension.	 *	 * @return  boolean  True if new strings have been added to the language	 *	 * @see     JLanguage::load()	 * @since   11.1	 */	protected function loadLanguage($filename, $extension = 'unknown')	{		$this->counter++;		$result = false;		$strings = false;		if (file_exists($filename))		{			$strings = $this->parse($filename);		}		if ($strings)		{			if (is_array($strings))			{				// Sort the underlying heap by key values to optimize merging				ksort($strings, SORT_STRING);				$this->strings = array_merge($this->strings, $strings);			}			if (is_array($strings) && count($strings))			{				// Do not bother with ksort here.  Since the originals were sorted, PHP will already have chosen the best heap.				$this->strings = array_merge($this->strings, $this->override);				$result = true;			}		}		// Record the result of loading the extension's file.		if (!isset($this->paths[$extension]))		{			$this->paths[$extension] = array();		}		$this->paths[$extension][$filename] = $result;		return $result;	}	/**	 * Parses a language file.	 *	 * @param   string  $filename  The name of the file.	 *	 * @return  array  The array of parsed strings.	 *	 * @since   11.1	 */	protected function parse($filename)	{		if ($this->debug)		{			// Capture hidden PHP errors from the parsing.			$php_errormsg = null;			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);		}		$contents = file_get_contents($filename);		$contents = str_replace('_QQ_', '"\""', $contents);		$strings = @parse_ini_string($contents);		if (!is_array($strings))		{			$strings = array();		}		if ($this->debug)		{			// Restore error tracking to what it was before.			ini_set('track_errors', $track_errors);			// Initialise variables for manually parsing the file for common errors.			$blacklist = array('YES', 'NO', 'NULL', 'FALSE', 'ON', 'OFF', 'NONE', 'TRUE');			$regex = '/^(|(\[[^\]]*\])|([A-Z][A-Z0-9_\-\.]*\s*=(\s*(("[^"]*")|(_QQ_)))+))\s*(;.*)?$/';			$this->debug = false;			$errors = array();			// Open the file as a stream.			$file = new SplFileObject($filename);			foreach ($file as $lineNumber => $line)			{				// Avoid BOM error as BOM is OK when using parse_ini				if ($lineNumber == 0)				{					$line = str_replace("\xEF\xBB\xBF", '', $line);				}				// Check that the key is not in the blacklist and that the line format passes the regex.				$key = strtoupper(trim(substr($line, 0, strpos($line, '='))));				// Workaround to reduce regex complexity when matching escaped quotes				$line = str_replace('\"', '_QQ_', $line);				if (!preg_match($regex, $line) || in_array($key, $blacklist))				{					$errors[] = $lineNumber;				}			}			// Check if we encountered any errors.			if (count($errors))			{				if (basename($filename) != $this->lang . '.ini')				{					$this->errorfiles[$filename] = $filename . JText::sprintf('JERROR_PARSING_LANGUAGE_FILE', implode(', ', $errors));				}				else				{					$this->errorfiles[$filename] = $filename . '&#160;: error(s) in line(s) ' . implode(', ', $errors);				}			}			elseif ($php_errormsg)			{				// We didn't find any errors but there's probably a parse notice.				$this->errorfiles['PHP' . $filename] = 'PHP parser errors :' . $php_errormsg;			}			$this->debug = true;		}		return $strings;	}	/**	 * Get a metadata language property.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed  The value of the property.	 *	 * @since   11.1	 */	public function get($property, $default = null)	{		if (isset($this->metadata[$property]))		{			return $this->metadata[$property];		}		return $default;	}	/**	 * Determine who called JLanguage or JText.	 *	 * @return  array  Caller information.	 *	 * @since   11.1	 */	protected function getCallerInfo()	{		// Try to determine the source if none was provided		if (!function_exists('debug_backtrace'))		{			return null;		}		$backtrace = debug_backtrace();		$info = array();		// Search through the backtrace to our caller		$continue = true;		while ($continue && next($backtrace))		{			$step = current($backtrace);			$class = @ $step['class'];			// We're looking for something outside of language.php			if ($class != 'JLanguage' && $class != 'JText')			{				$info['function'] = @ $step['function'];				$info['class'] = $class;				$info['step'] = prev($backtrace);				// Determine the file and name of the file				$info['file'] = @ $step['file'];				$info['line'] = @ $step['line'];				$continue = false;			}		}		return $info;	}	/**	 * Getter for Name.	 *	 * @return  string  Official name element of the language.	 *	 * @since   11.1	 */	public function getName()	{		return $this->metadata['name'];	}	/**	 * Get a list of language files that have been loaded.	 *	 * @param   string  $extension  An optional extension name.	 *	 * @return  array	 *	 * @since   11.1	 */	public function getPaths($extension = null)	{		if (isset($extension))		{			if (isset($this->paths[$extension]))			{				return $this->paths[$extension];			}			return null;		}		else		{			return $this->paths;		}	}	/**	 * Get a list of language files that are in error state.	 *	 * @return  array	 *	 * @since   11.1	 */	public function getErrorFiles()	{		return $this->errorfiles;	}	/**	 * Getter for the language tag (as defined in RFC 3066)	 *	 * @return  string  The language tag.	 *	 * @since   11.1	 */	public function getTag()	{		return $this->metadata['tag'];	}	/**	 * Get the RTL property.	 *	 * @return  boolean  True is it an RTL language.	 *	 * @since   11.1	 */	public function isRTL()	{		return (bool) $this->metadata['rtl'];	}	/**	 * Set the Debug property.	 *	 * @param   boolean  $debug  The debug setting.	 *	 * @return  boolean  Previous value.	 *	 * @since   11.1	 */	public function setDebug($debug)	{		$previous = $this->debug;		$this->debug = (boolean) $debug;		return $previous;	}	/**	 * Get the Debug property.	 *	 * @return  boolean  True is in debug mode.	 *	 * @since   11.1	 */	public function getDebug()	{		return $this->debug;	}	/**	 * Get the default language code.	 *	 * @return  string  Language code.	 *	 * @since   11.1	 */	public function getDefault()	{		return $this->default;	}	/**	 * Set the default language code.	 *	 * @param   string  $lang  The language code.	 *	 * @return  string  Previous value.	 *	 * @since   11.1	 */	public function setDefault($lang)	{		$previous = $this->default;		$this->default = $lang;		return $previous;	}	/**	 * Get the list of orphaned strings if being tracked.	 *	 * @return  array  Orphaned text.	 *	 * @since   11.1	 */	public function getOrphans()	{		return $this->orphans;	}	/**	 * Get the list of used strings.	 *	 * Used strings are those strings requested and found either as a string or a constant.	 *	 * @return  array  Used strings.	 *	 * @since   11.1	 */	public function getUsed()	{		return $this->used;	}	/**	 * Determines is a key exists.	 *	 * @param   string  $string  The key to check.	 *	 * @return  boolean  True, if the key exists.	 *	 * @since   11.1	 */	public function hasKey($string)	{		$key = strtoupper($string);		return isset($this->strings[$key]);	}	/**	 * Returns a associative array holding the metadata.	 *	 * @param   string  $lang  The name of the language.	 *	 * @return  mixed  If $lang exists return key/value pair with the language metadata, otherwise return NULL.	 *	 * @since   11.1	 */	public static function getMetadata($lang)	{		$path = self::getLanguagePath(JPATH_BASE, $lang);		$file = $lang . '.xml';		$result = null;		if (is_file("$path/$file"))		{			$result = self::parseXMLLanguageFile("$path/$file");		}		if (empty($result))		{			return null;		}		return $result;	}	/**	 * Returns a list of known languages for an area	 *	 * @param   string  $basePath  The basepath to use	 *	 * @return  array  key/value pair with the language file and real name.	 *	 * @since   11.1	 */	public static function getKnownLanguages($basePath = JPATH_BASE)	{		$dir = self::getLanguagePath($basePath);		$knownLanguages = self::parseLanguageFiles($dir);		return $knownLanguages;	}	/**	 * Get the path to a language	 *	 * @param   string  $basePath  The basepath to use.	 * @param   string  $language  The language tag.	 *	 * @return  string  language related path or null.	 *	 * @since   11.1	 */	public static function getLanguagePath($basePath = JPATH_BASE, $language = null)	{		$dir = $basePath . '/language';		if (!empty($language))		{			$dir .= '/' . $language;		}		return $dir;	}	/**	 * Set the language attributes to the given language.	 *	 * Once called, the language still needs to be loaded using JLanguage::load().	 *	 * @param   string  $lang  Language code.	 *	 * @return  string  Previous value.	 *	 * @since   11.1	 */	public function setLanguage($lang)	{		$previous = $this->lang;		$this->lang = $lang;		$this->metadata = $this->getMetadata($this->lang);		return $previous;	}	/**	 * Get the language locale based on current language.	 *	 * @return  array  The locale according to the language.	 *	 * @since   11.1	 */	public function getLocale()	{		if (!isset($this->locale))		{			$locale = str_replace(' ', '', isset($this->metadata['locale']) ? $this->metadata['locale'] : '');			if ($locale)			{				$this->locale = explode(',', $locale);			}			else			{				$this->locale = false;			}		}		return $this->locale;	}	/**	 * Get the first day of the week for this language.	 *	 * @return  integer  The first day of the week according to the language	 *	 * @since   11.1	 */	public function getFirstDay()	{		return (int) (isset($this->metadata['firstDay']) ? $this->metadata['firstDay'] : 0);	}	/**	 * Searches for language directories within a certain base dir.	 *	 * @param   string  $dir  directory of files.	 *	 * @return  array  Array holding the found languages as filename => real name pairs.	 *	 * @since   11.1	 */	public static function parseLanguageFiles($dir = null)	{		$languages = array();		$iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir));		foreach ($iterator as $file)		{			$langs    = array();			$fileName = $file->getFilename();			if (!$file->isFile() || !preg_match("/^([-_A-Za-z]*)\.xml$/", $fileName))			{				continue;			}			try			{				$metadata = self::parseXMLLanguageFile($file->getRealPath());				if ($metadata)				{					$lang = str_replace('.xml', '', $fileName);					$langs[$lang] = $metadata;				}				$languages = array_merge($languages, $langs);			}			catch (RuntimeException $e)			{			}		}		return $languages;	}	/**	 * Parse XML file for language information.	 *	 * @param   string  $path  Path to the XML files.	 *	 * @return  array  Array holding the found metadata as a key => value pair.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function parseXMLLanguageFile($path)	{		if (!is_readable($path))		{			throw new RuntimeException('File not found or not readable');		}		// Try to load the file		$xml = simplexml_load_file($path);		if (!$xml)		{			return null;		}		// Check that it's a metadata file		if ((string) $xml->getName() != 'metafile')		{			return null;		}		$metadata = array();		foreach ($xml->metadata->children() as $child)		{			$metadata[$child->getName()] = (string) $child;		}		return $metadata;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a multi line area for entry of plain text * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/textarea.html#textarea * @since       11.1 */class JFormFieldTextarea extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Textarea';	/**	 * Method to get the textarea field input markup.	 * Use the rows and columns attributes to specify the dimensions of the area.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$columns = $this->element['cols'] ? ' cols="' . (int) $this->element['cols'] . '"' : '';		$rows = $this->element['rows'] ? ' rows="' . (int) $this->element['rows'] . '"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<textarea name="' . $this->name . '" id="' . $this->id . '"' . $columns . $rows . $class . $disabled . $onchange . $required . '>'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '</textarea>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" role="presentation" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_CONTENT_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_CONTENT_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_content');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value='';document.id('batch-tag-id)').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('article.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Class to encapsulate a feed for the Joomla Platform. * * @property  JFeedPerson  $author         Person responsible for feed content. * @property  array        $categories     Categories to which the feed belongs. * @property  array        $contributors   People who contributed to the feed content. * @property  string       $copyright      Information about rights, e.g. copyrights, held in and over the feed. * @property  string       $description    A phrase or sentence describing the feed. * @property  string       $generator      A string indicating the program used to generate the feed. * @property  string       $image          Specifies a GIF, JPEG or PNG image that should be displayed with the feed. * @property  JDate        $publishedDate  The publication date for the feed content. * @property  string       $title          A human readable title for the feed. * @property  JDate        $updatedDate    The last time the content of the feed changed. * @property  string       $uri            Universal, permanent identifier for the feed. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeed implements ArrayAccess{	/**	 * @var    array  The entry properties.	 * @since  12.3	 */	protected $properties = array(		'uri' => '',		'title' => '',		'updatedDate' => '',		'description' => '',		'categories' => array(),		'contributors' => array()	);	/**	 * @var    array  The list of feed entry objects.	 * @since  12.3	 */	protected $entries = array();	/**	 * Magic method to return values for feed properties.	 *	 * @param   string  $name  The name of the property.	 *	 * @return  mixed	 *	 * @since   12.3	 */	public function __get($name)	{		return isset($this->properties[$name]) ? $this->properties[$name] : null;	}	/**	 * Magic method to set values for feed properties.	 *	 * @param   string  $name   The name of the property.	 * @param   mixed   $value  The value to set for the property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __set($name, $value)	{		// Ensure that setting a date always sets a JDate instance.		if ((($name == 'updatedDate') || ($name == 'publishedDate')) && !($value instanceof JDate))		{			$value = new JDate($value);		}		// Validate that any authors that are set are instances of JFeedPerson or null.		if (($name == 'author') && (!($value instanceof JFeedPerson) || ($value === null)))		{			throw new InvalidArgumentException('JFeed "author" must be of type JFeedPerson. ' . gettype($value) . 'given.');		}		// Disallow setting categories or contributors directly.		if (($name == 'categories') || ($name == 'contributors'))		{			throw new InvalidArgumentException('Cannot directly set JFeed property "' . $name . '".');		}		$this->properties[$name] = $value;	}	/**	 * Method to add a category to the feed object.	 *	 * @param   string  $name  The name of the category to add.	 * @param   string  $uri   The optional URI for the category to add.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function addCategory($name, $uri = '')	{		$this->properties['categories'][$name] = $uri;		return $this;	}	/**	 * Method to add a contributor to the feed object.	 *	 * @param   string  $name   The full name of the person to add.	 * @param   string  $email  The email address of the person to add.	 * @param   string  $uri    The optional URI for the person to add.	 * @param   string  $type   The optional type of person to add.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function addContributor($name, $email, $uri = null, $type = null)	{		$contributor = new JFeedPerson($name, $email, $uri, $type);		// If the new contributor already exists then there is nothing to do, so just return.		foreach ($this->properties['contributors'] as $c)		{			if ($c == $contributor)			{				return $this;			}		}		// Add the new contributor.		$this->properties['contributors'][] = $contributor;		return $this;	}	/**	 * Method to add an entry to the feed object.	 *	 * @param   JFeedEntry  $entry  The entry object to add.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function addEntry(JFeedEntry $entry)	{		// If the new entry already exists then there is nothing to do, so just return.		foreach ($this->entries as $e)		{			if ($e == $entry)			{				return $this;			}		}		// Add the new entry.		$this->entries[] = $entry;		return $this;	}	/**	 * Whether or not an offset exists.  This method is executed when using isset() or empty() on	 * objects implementing ArrayAccess.	 *	 * @param   mixed  $offset  An offset to check for.	 *	 * @return  boolean	 *	 * @see     ArrayAccess::offsetExists()	 * @since   12.3	 */	public function offsetExists($offset)	{		return isset($this->entries[$offset]);	}	/**	 * Returns the value at specified offset.	 *	 * @param   mixed  $offset  The offset to retrieve.	 *	 * @return  mixed  The value at the offset.	 *	 * @see     ArrayAccess::offsetGet()	 * @since   12.3	 */	public function offsetGet($offset)	{		return $this->entries[$offset];	}	/**	 * Assigns a value to the specified offset.	 *	 * @param   mixed       $offset  The offset to assign the value to.	 * @param   JFeedEntry  $value   The JFeedEntry to set.	 *	 * @return  boolean	 *	 * @see    ArrayAccess::offsetSet()	 * @since  12.3	 */	public function offsetSet($offset, $value)	{		if (!($value instanceof JFeedEntry))		{			throw new InvalidArgumentException('Cannot set value of type "' . gettype($value) . '".');		}		$this->entries[$offset] = $value;		return true;	}	/**	 * Unsets an offset.	 *	 * @param   mixed  $offset  The offset to unset.	 *	 * @return  void	 *	 * @see     ArrayAccess::offsetUnset()	 * @since   12.3	 */	public function offsetUnset($offset)	{		unset($this->entries[$offset]);	}	/**	 * Method to remove a category from the feed object.	 *	 * @param   string  $name  The name of the category to remove.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function removeCategory($name)	{		unset($this->properties['categories'][$name]);		return $this;	}	/**	 * Method to remove a contributor from the feed object.	 *	 * @param   JFeedPerson  $contributor  The person object to remove.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function removeContributor(JFeedPerson $contributor)	{		// If the contributor exists remove it.		foreach ($this->properties['contributors'] as $k => $c)		{			if ($c == $contributor)			{				unset($this->properties['contributors'][$k]);				$this->properties['contributors'] = array_values($this->properties['contributors']);				return $this;			}		}		return $this;	}	/**	 * Method to remove an entry from the feed object.	 *	 * @param   JFeedEntry  $entry  The entry object to remove.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function removeEntry(JFeedEntry $entry)	{		// If the entry exists remove it.		foreach ($this->entries as $k => $e)		{			if ($e == $entry)			{				unset($this->entries[$k]);				$this->entries = array_values($this->entries);				return $this;			}		}		return $this;	}	/**	 * Shortcut method to set the author for the feed object.	 *	 * @param   string  $name   The full name of the person to set.	 * @param   string  $email  The email address of the person to set.	 * @param   string  $uri    The optional URI for the person to set.	 * @param   string  $type   The optional type of person to set.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function setAuthor($name, $email, $uri = null, $type = null)	{		$author = new JFeedPerson($name, $email, $uri, $type);		$this->properties['author'] = $author;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $this UsersViewNotes */JHtml::_('behavior.tooltip');$user = JFactory::getUser();$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn = $this->escape($this->state->get('list.direction'));$canEdit = $user->authorise('core.edit', 'com_users');?><form action="<?php echo JRoute::_('index.php?option=com_users&view=notes');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_IN_NOTE_TITLE'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_NOTE_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<span class="faux-label")><?php echo JText::_('COM_USERS_FILTER_LABEL'); ?></span>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id" >				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php				echo JHtml::_(					'select.options', JHtml::_('category.options', 'com_users.notes'),					'value', 'text', $this->state->get('filter.category_id')				); ?>			</select>			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php				echo JHtml::_(					'select.options', JHtml::_('jgrid.publishedOptions'),					'value', 'text', $this->state->get('filter.state'), true				); ?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="toggle" value="" class="checklist-toggle" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="width-15">					<?php echo JHtml::_('grid.sort', 'COM_USERS_USER_HEADING', 'u.name', $listDirn, $listOrder); ?>				</th>				<th  class="title">					<?php echo JHtml::_('grid.sort', 'COM_USERS_SUBJECT_HEADING', 'a.subject', $listDirn, $listOrder); ?>				</th>				<th class="width-20">					<?php echo JHtml::_('grid.sort', 'COM_USERS_CATEGORY_HEADING', 'c.title', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_USERS_REVIEW_HEADING', 'a.review_time', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<?php $canChange	= $user->authorise('core.edit.state',	'com_users'); ?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center checklist">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=note.edit&id='.$item->id);?>">							<?php echo $this->escape($item->user_name); ?></a>					<?php else : ?>						<?php echo $this->escape($item->user_name); ?>					<?php endif; ?>				</td>				<td>					<?php if ($item->subject) : ?>						<?php echo $this->escape($item->subject); ?>					<?php else : ?>						<?php echo JText::_('COM_USERS_EMPTY_SUBJECT'); ?>					<?php endif; ?>				</td>				<td class="center">					<?php if ($item->catid && $item->cparams->get('image')) : ?>					<?php echo JHtml::_('users.image', $item->cparams->get('image')); ?>					<?php endif; ?>					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'notes.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php if ((int) $item->review_time) : ?>						<?php echo $this->escape($item->review_time); ?>					<?php else : ?>						<?php echo JText::_('COM_USERS_EMPTY_REVIEW'); ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'contact.cancel' || document.formvalidator.isValid(document.id('contact-form')))		{			<?php echo $this->form->getField('misc')->save(); ?>			Joomla.submitform(task, document.getElementById('contact-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_contact&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="contact-form" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin contact -->		<div class="span10 form-horizontal">		<fieldset>			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_CONTACT_NEW_CONTACT', true) : JText::sprintf('COM_CONTACT_EDIT_CONTACT', $this->item->id, true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('name'); ?></div>					<div class="controls"><?php echo $this->form->getInput('name'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('user_id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('user_id'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>					<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>					<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('id'); ?></div>				</div>				<div class="control-group form-inline">					<?php echo $this->form->getLabel('misc'); ?>				</div>					<?php echo $this->form->getInput('misc'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>				</div>					<?php if ($this->item->modified_by) : ?>						<div class="control-group">							<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>							<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>						</div>						<div class="control-group">							<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>							<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>						</div>					<?php endif; ?>				<?php if ($this->item->version) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('version'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('version'); ?>						</div>					</div>				<?php endif; ?>				<?php if ($this->item->hits) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('hits'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('hits'); ?>						</div>					</div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic', JText::_('COM_CONTACT_CONTACT_DETAILS', true)); ?>				<p><?php echo empty($this->item->id) ? JText::_('COM_CONTACT_DETAILS', true) : JText::sprintf('COM_CONTACT_EDIT_DETAILS', $this->item->id, true); ?></p>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('image'); ?></div>					<div class="controls"><?php echo $this->form->getInput('image'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('con_position'); ?></div>					<div class="controls"><?php echo $this->form->getInput('con_position'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('email_to'); ?></div>					<div class="controls"><?php echo $this->form->getInput('email_to'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('address'); ?></div>					<div class="controls"><?php echo $this->form->getInput('address'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('suburb'); ?></div>					<div class="controls"><?php echo $this->form->getInput('suburb'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('state'); ?></div>					<div class="controls"><?php echo $this->form->getInput('state'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('postcode'); ?></div>					<div class="controls"><?php echo $this->form->getInput('postcode'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('country'); ?></div>					<div class="controls"><?php echo $this->form->getInput('country'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('telephone'); ?></div>					<div class="controls"><?php echo $this->form->getInput('telephone'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('mobile'); ?></div>					<div class="controls"><?php echo $this->form->getInput('mobile'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('fax'); ?></div>					<div class="controls"><?php echo $this->form->getInput('fax'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('webpage'); ?></div>					<div class="controls"><?php echo $this->form->getInput('webpage'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname1'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname1'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname2'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname2'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname3'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname3'); ?></div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>					<?php echo $this->loadTemplate('metadata'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php if ($assoc) : ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>					<?php echo $this->loadTemplate('associations'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>		</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<!-- End content -->	<!-- Begin Sidebar -->		<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>	<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Interface * * @package     Joomla.Platform * @subpackage  Database * @since       11.2 */interface JDatabaseInterface{	/**	 * Test to see if the connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.2	 */	public static function isSupported();}/** * Joomla Platform Database Driver Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 * * @method      string  q()   q($text, $escape = true)  Alias for quote method * @method      string  qn()  qn($name, $as = null)     Alias for quoteName method */abstract class JDatabaseDriver extends JDatabase implements JDatabaseInterface{	/**	 * The name of the database.	 *	 * @var    string	 * @since  11.4	 */	private $_database;	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  11.1	 */	public $name;	/**	 * @var    resource  The database connection resource.	 * @since  11.1	 */	protected $connection;	/**	 * @var    integer  The number of SQL statements executed by the database driver.	 * @since  11.1	 */	protected $count = 0;	/**	 * @var    resource  The database connection cursor from the last query.	 * @since  11.1	 */	protected $cursor;	/**	 * @var    boolean  The database driver debugging state.	 * @since  11.1	 */	protected $debug = false;	/**	 * @var    integer  The affected row limit for the current SQL statement.	 * @since  11.1	 */	protected $limit = 0;	/**	 * @var    array  The log of executed SQL statements by the database driver.	 * @since  11.1	 */	protected $log = array();	/**	 * @var    string  The character(s) used to quote SQL statement names such as table names or field names,	 *                 etc.  The child classes should define this as necessary.  If a single character string the	 *                 same character is used for both sides of the quoted name, else the first character will be	 *                 used for the opening quote and the second for the closing quote.	 * @since  11.1	 */	protected $nameQuote;	/**	 * @var    string  The null or zero representation of a timestamp for the database driver.  This should be	 *                 defined in child classes to hold the appropriate value for the engine.	 * @since  11.1	 */	protected $nullDate;	/**	 * @var    integer  The affected row offset to apply for the current SQL statement.	 * @since  11.1	 */	protected $offset = 0;	/**	 * @var    array  Passed in upon instantiation and saved.	 * @since  11.1	 */	protected $options;	/**	 * @var    mixed  The current SQL statement to execute.	 * @since  11.1	 */	protected $sql;	/**	 * @var    string  The common database table prefix.	 * @since  11.1	 */	protected $tablePrefix;	/**	 * @var    boolean  True if the database engine supports UTF-8 character encoding.	 * @since  11.1	 */	protected $utf = true;	/**	 * @var         integer  The database error number	 * @since       11.1	 * @deprecated  12.1	 */	protected $errorNum = 0;	/**	 * @var         string  The database error message	 * @since       11.1	 * @deprecated  12.1	 */	protected $errorMsg;	/**	 * @var    array  JDatabaseDriver instances container.	 * @since  11.1	 */	protected static $instances = array();	/**	 * @var    string  The minimum supported database version.	 * @since  12.1	 */	protected static $dbMinimum;	/**	 * Get a list of available database connectors.  The list will only be populated with connectors that both	 * the class exists and the static test method returns true.  This gives us the ability to have a multitude	 * of connector classes that are self-aware as to whether or not they are able to be used on a given system.	 *	 * @return  array  An array of available database connectors.	 *	 * @since   11.1	 */	public static function getConnectors()	{		$connectors = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/driver');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JDatabaseDriver' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$connectors[] = str_ireplace('.php', '', $fileName);			}		}		return $connectors;	}	/**	 * Method to return a JDatabaseDriver instance based on the given options.  There are three global options and then	 * the rest are specific to the database driver.  The 'driver' option defines which JDatabaseDriver class is	 * used for the connection -- the default is 'mysqli'.  The 'database' option determines which database is to	 * be used for the connection.  The 'select' option determines whether the connector should automatically select	 * the chosen database.	 *	 * Instances are unique to the given options and new objects are only created when a unique options array is	 * passed into the method.  This ensures that we don't end up with unnecessary database connection resources.	 *	 * @param   array  $options  Parameters to be passed to the database driver.	 *	 * @return  JDatabaseDriver  A database object.	 *	 * @since   11.1	 */	public static function getInstance($options = array())	{		// Sanitize the database connector options.		$options['driver']   = (isset($options['driver'])) ? preg_replace('/[^A-Z0-9_\.-]/i', '', $options['driver']) : 'mysqli';		$options['database'] = (isset($options['database'])) ? $options['database'] : null;		$options['select']   = (isset($options['select'])) ? $options['select'] : true;		// Get the options signature for the database connector.		$signature = md5(serialize($options));		// If we already have a database connector instance for these options then just use that.		if (empty(self::$instances[$signature]))		{			// Derive the class name from the driver.			$class = 'JDatabaseDriver' . ucfirst(strtolower($options['driver']));			// If the class still doesn't exist we have nothing left to do but throw an exception.  We did our best.			if (!class_exists($class))			{				throw new RuntimeException(sprintf('Unable to load Database Driver: %s', $options['driver']));			}			// Create our new JDatabaseDriver connector based on the options given.			try			{				$instance = new $class($options);			}			catch (RuntimeException $e)			{				throw new RuntimeException(sprintf('Unable to connect to the Database: %s', $e->getMessage()));			}			// Set the new connector to the global instances based on signature.			self::$instances[$signature] = $instance;		}		return self::$instances[$signature];	}	/**	 * Splits a string of multiple queries into an array of individual queries.	 *	 * @param   string  $query  Input SQL string with which to split into individual queries.	 *	 * @return  array  The queries from the input string separated into an array.	 *	 * @since   11.1	 */	public static function splitSql($query)	{		$start = 0;		$open = false;		$char = '';		$end = strlen($query);		$queries = array();		for ($i = 0; $i < $end; $i++)		{			$current = substr($query, $i, 1);			if (($current == '"' || $current == '\''))			{				$n = 2;				while (substr($query, $i - $n + 1, 1) == '\\' && $n < $i)				{					$n++;				}				if ($n % 2 == 0)				{					if ($open)					{						if ($current == $char)						{							$open = false;							$char = '';						}					}					else					{						$open = true;						$char = $current;					}				}			}			if (($current == ';' && !$open) || $i == $end - 1)			{				$queries[] = substr($query, $start, ($i - $start + 1));				$start = $i + 1;			}		}		return $queries;	}	/**	 * Magic method to provide method alias support for quote() and quoteName().	 *	 * @param   string  $method  The called method.	 * @param   array   $args    The array of arguments passed to the method.	 *	 * @return  string  The aliased method's return value or null.	 *	 * @since   11.1	 */	public function __call($method, $args)	{		if (empty($args))		{			return;		}		switch ($method)		{			case 'q':				return $this->quote($args[0], isset($args[1]) ? $args[1] : true);				break;			case 'qn':				return $this->quoteName($args[0], isset($args[1]) ? $args[1] : null);				break;		}	}	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   11.1	 */	public function __construct($options)	{		// Initialise object variables.		$this->_database = (isset($options['database'])) ? $options['database'] : '';		$this->tablePrefix = (isset($options['prefix'])) ? $options['prefix'] : 'jos_';		$this->count = 0;		$this->errorNum = 0;		$this->log = array();		// Set class options.		$this->options = $options;	}	/**	 * Alter database's character set, obtaining query string from protected member.	 *	 * @param   string  $dbName  The database name that will be altered	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function alterDbCharacterSet($dbName)	{		if (is_null($dbName))		{			throw new RuntimeException('Database name must not be null.');		}		$this->setQuery($this->getAlterDbCharacterSet($dbName));		return $this->execute();	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	abstract public function connect();	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   11.1	 */	abstract public function connected();	/**	 * Create a new database using information from $options object, obtaining query string	 * from protected member.	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function createDatabase($options, $utf = true)	{		if (is_null($options))		{			throw new RuntimeException('$options object must not be null.');		}		elseif (empty($options->db_name))		{			throw new RuntimeException('$options object must have db_name set.');		}		elseif (empty($options->db_user))		{			throw new RuntimeException('$options object must have db_user set.');		}		$this->setQuery($this->getCreateDatabaseQuery($options, $utf));		return $this->execute();	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	abstract public function disconnect();	/**	 * Drops a table from the database.	 *	 * @param   string   $table     The name of the database table to drop.	 * @param   boolean  $ifExists  Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriver     Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function dropTable($table, $ifExists = true);	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string   The escaped string.	 *	 * @since   11.1	 */	abstract public function escape($text, $extra = false);	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchArray($cursor = null);	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchAssoc($cursor = null);	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchObject($cursor = null, $class = 'stdClass');	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   11.1	 */	abstract protected function freeResult($cursor = null);	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   11.1	 */	abstract public function getAffectedRows();	/**	 * Return the query string to alter the database character set.	 *	 * @param   string  $dbName  The database name	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 */	protected function getAlterDbCharacterSet($dbName)	{		$query = 'ALTER DATABASE ' . $this->quoteName($dbName) . ' CHARACTER SET `utf8`';		return $query;	}	/**	 * Return the query string to create new Database.	 * Each database driver, other than MySQL, need to override this member to return correct string.	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database	 *	 * @since   12.2	 */	protected function getCreateDatabaseQuery($options, $utf)	{		if ($utf)		{			$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name) . ' CHARACTER SET `utf8`';		}		else		{			$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name);		}		return $query;	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   11.1	 */	abstract public function getCollation();	/**	 * Method that provides access to the underlying database connection. Useful for when you need to call a	 * proprietary method such as postgresql's lo_* methods.	 *	 * @return  resource  The underlying database connection resource.	 *	 * @since   11.1	 */	public function getConnection()	{		return $this->connection;	}	/**	 * Get the total number of SQL statements executed by the database driver.	 *	 * @return  integer	 *	 * @since   11.1	 */	public function getCount()	{		return $this->count;	}	/**	 * Gets the name of the database used by this conneciton.	 *	 * @return  string	 *	 * @since   11.4	 */	protected function getDatabase()	{		return $this->_database;	}	/**	 * Returns a PHP date() function compliant date format for the database driver.	 *	 * @return  string  The format string.	 *	 * @since   11.1	 */	public function getDateFormat()	{		return 'Y-m-d H:i:s';	}	/**	 * Get the database driver SQL statement log.	 *	 * @return  array  SQL statements executed by the database driver.	 *	 * @since   11.1	 */	public function getLog()	{		return $this->log;	}	/**	 * Get the minimum supported database version.	 *	 * @return  string  The minimum version number for the database driver.	 *	 * @since   12.1	 */	public function getMinimum()	{		return static::$dbMinimum;	}	/**	 * Get the null or zero representation of a timestamp for the database driver.	 *	 * @return  string  Null or zero representation of a timestamp.	 *	 * @since   11.1	 */	public function getNullDate()	{		return $this->nullDate;	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   11.1	 */	abstract public function getNumRows($cursor = null);	/**	 * Get the common table prefix for the database driver.	 *	 * @return  string  The common database table prefix.	 *	 * @since   11.1	 */	public function getPrefix()	{		return $this->tablePrefix;	}	/**	 * Gets an exporter class object.	 *	 * @return  JDatabaseExporter  An exporter object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getExporter()	{		// Derive the class name from the driver.		$class = 'JDatabaseExporter' . ucfirst($this->name);		// Make sure we have an exporter class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Exporter not found.');		}		$o = new $class;		$o->setDbo($this);		return $o;	}	/**	 * Gets an importer class object.	 *	 * @return  JDatabaseImporter  An importer object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getImporter()	{		// Derive the class name from the driver.		$class = 'JDatabaseImporter' . ucfirst($this->name);		// Make sure we have an importer class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Importer not found');		}		$o = new $class;		$o->setDbo($this);		return $o;	}	/**	 * Get the current query object or a new JDatabaseQuery object.	 *	 * @param   boolean  $new  False to return the current query object, True to return a new JDatabaseQuery object.	 *	 * @return  JDatabaseQuery  The current query object or a new object extending the JDatabaseQuery class.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function getQuery($new = false)	{		if ($new)		{			// Derive the class name from the driver.			$class = 'JDatabaseQuery' . ucfirst($this->name);			// Make sure we have a query class for this driver.			if (!class_exists($class))			{				// If it doesn't exist we are at an impasse so throw an exception.				throw new RuntimeException('Database Query Class not found.');			}			return new $class($this);		}		else		{			return $this->sql;		}	}	/**	 * Get a new iterator on the current query.	 *	 * @param   string  $column  An option column to use as the iterator key.	 * @param   string  $class   The class of object that is returned.	 *	 * @return  JDatabaseIterator  A new database iterator.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getIterator($column = null, $class = 'stdClass')	{		// Derive the class name from the driver.		$iteratorClass = 'JDatabaseIterator' . ucfirst($this->name);		// Make sure we have an iterator class for this driver.		if (!class_exists($iteratorClass))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException(sprintf('class *%s* is not defined', $iteratorClass));		}		// Return a new iterator		return new $iteratorClass($this->execute(), $column, $class);	}	/**	 * Retrieves field information about the given tables.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True (default) to only return field types.	 *	 * @return  array  An array of fields by table.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableColumns($table, $typeOnly = true);	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableCreate($tables);	/**	 * Retrieves field information about the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  An array of keys for the table(s).	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableKeys($tables);	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableList();	/**	 * Determine whether or not the database engine supports UTF-8 character encoding.	 *	 * @return  boolean  True if the database engine supports UTF-8 character encoding.	 *	 * @since   11.1	 * @deprecated 12.3 Use hasUTFSupport() instead	 */	public function getUTFSupport()	{		JLog::add('JDatabase::getUTFSupport() is deprecated. Use JDatabase::hasUTFSupport() instead.', JLog::WARNING, 'deprecated');		return $this->hasUTFSupport();	}	/**	 * Determine whether or not the database engine supports UTF-8 character encoding.	 *	 * @return  boolean  True if the database engine supports UTF-8 character encoding.	 *	 * @since   12.1	 */	public function hasUTFSupport()	{		return $this->utf;	}	/**	 * Get the version of the database connector	 *	 * @return  string  The database connector version.	 *	 * @since   11.1	 */	abstract public function getVersion();	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   11.1	 */	abstract public function insertid();	/**	 * Inserts a row into a table based on an object's properties.	 *	 * @param   string  $table    The name of the database table to insert into.	 * @param   object  &$object  A reference to an object whose public properties match the table fields.	 * @param   string  $key      The name of the primary key. If provided the object property is updated.	 *	 * @return  boolean    True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function insertObject($table, &$object, $key = null)	{		$fields = array();		$values = array();		// Iterate over the object variables to build the query fields and values.		foreach (get_object_vars($object) as $k => $v)		{			// Only process non-null scalars.			if (is_array($v) or is_object($v) or $v === null)			{				continue;			}			// Ignore any internal fields.			if ($k[0] == '_')			{				continue;			}			// Prepare and sanitize the fields and values for the database query.			$fields[] = $this->quoteName($k);			$values[] = $this->quote($v);		}		// Create the base insert statement.		$query = $this->getQuery(true)			->insert($this->quoteName($table))				->columns($fields)				->values(implode(',', $values));		// Set the query and execute the insert.		$this->setQuery($query);		if (!$this->execute())		{			return false;		}		// Update the primary key if it exists.		$id = $this->insertid();		if ($key && $id && is_string($key))		{			$object->$key = $id;		}		return true;	}	/**	 * Method to check whether the installed database version is supported by the database driver	 *	 * @return  boolean  True if the database version is supported	 *	 * @since   12.1	 */	public function isMinimumVersion()	{		return version_compare($this->getVersion(), static::$dbMinimum) >= 0;	}	/**	 * Method to get the first row of the result set from the database query as an associative array	 * of ['field_name' => 'row_value'].	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadAssoc()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an associative array.		if ($array = $this->fetchAssoc($cursor))		{			$ret = $array;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an associative array	 * of ['field_name' => 'row_value'].  The array of rows can optionally be keyed by a field name, but defaults to	 * a sequential numeric array.	 *	 * NOTE: Chosing to key the result array by a non-unique field name can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key     The name of a field on which to key the result array.	 * @param   string  $column  An optional column name. Instead of the whole row, only this column value will be in	 * the result array.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadAssocList($key = null, $column = null)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set.		while ($row = $this->fetchAssoc($cursor))		{			$value = ($column) ? (isset($row[$column]) ? $row[$column] : $row) : $row;			if ($key)			{				$array[$row[$key]] = $value;			}			else			{				$array[] = $value;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get an array of values from the <var>$offset</var> field in each row of the result set from	 * the database query.	 *	 * @param   integer  $offset  The row offset to use to build the result array.	 *	 * @return  mixed    The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadColumn($offset = 0)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as arrays.		while ($row = $this->fetchArray($cursor))		{			$array[] = $row[$offset];		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get the next row in the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The result of the query as an array, false if there are no more rows.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadNextObject($class = 'stdClass')	{		JLog::add(__METHOD__ . '() is deprecated. Use JDatabase::getIterator() instead.', JLog::WARNING, 'deprecated');		$this->connect();		static $cursor = null;		// Execute the query and get the result set cursor.		if ( is_null($cursor) )		{			if (!($cursor = $this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchObject($cursor, $class))		{			return $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		$cursor = null;		return false;	}	/**	 * Method to get the next row in the result set from the database query as an array.	 *	 * @return  mixed  The result of the query as an array, false if there are no more rows.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadNextRow()	{		JLog::add('JDatabase::loadNextRow() is deprecated. Use JDatabase::getIterator() instead.', JLog::WARNING, 'deprecated');		$this->connect();		static $cursor = null;		// Execute the query and get the result set cursor.		if ( is_null($cursor) )		{			if (!($cursor = $this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchArray($cursor))		{			return $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		$cursor = null;		return false;	}	/**	 * Method to get the first row of the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadObject($class = 'stdClass')	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an object of type $class.		if ($object = $this->fetchObject($cursor, $class))		{			$ret = $object;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an object.  The array	 * of objects can optionally be keyed by a field name, but defaults to a sequential numeric array.	 *	 * NOTE: Choosing to key the result array by a non-unique field name can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key    The name of a field on which to key the result array.	 * @param   string  $class  The class name to use for the returned row objects.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadObjectList($key = '', $class = 'stdClass')	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as objects of type $class.		while ($row = $this->fetchObject($cursor, $class))		{			if ($key)			{				$array[$row->$key] = $row;			}			else			{				$array[] = $row;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get the first field of the first row of the result set from the database query.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadResult()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = $this->fetchArray($cursor))		{			$ret = $row[0];		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get the first row of the result set from the database query as an array.  Columns are indexed	 * numerically so the first column in the result set would be accessible via <var>$row[0]</var>, etc.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRow()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = $this->fetchArray($cursor))		{			$ret = $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an array.  The array	 * of objects can optionally be keyed by a field offset, but defaults to a sequential numeric array.	 *	 * NOTE: Choosing to key the result array by a non-unique field can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key  The name of a field on which to key the result array.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRowList($key = null)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as arrays.		while ($row = $this->fetchArray($cursor))		{			if ($key !== null)			{				$array[$row[$key]] = $row;			}			else			{				$array[] = $row;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $tableName  The name of the table to unlock.	 *	 * @return  JDatabaseDriver     Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function lockTable($tableName);	/**	 * Method to quote and optionally escape a string to database requirements for insertion into the database.	 *	 * @param   string   $text    The string to quote.	 * @param   boolean  $escape  True (default) to escape the string, false to leave it unchanged.	 *	 * @return  string  The quoted input string.	 *	 * @since   11.1	 */	public function quote($text, $escape = true)	{		return '\'' . ($escape ? $this->escape($text) : $text) . '\'';	}	/**	 * Wrap an SQL statement identifier name such as column, table or database names in quotes to prevent injection	 * risks and reserved word conflicts.	 *	 * @param   mixed  $name  The identifier name to wrap in quotes, or an array of identifier names to wrap in quotes.	 *                        Each type supports dot-notation name.	 * @param   mixed  $as    The AS query part associated to $name. It can be string or array, in latter case it has to be	 *                        same length of $name; if is null there will not be any AS part for string or array element.	 *	 * @return  mixed  The quote wrapped name, same type of $name.	 *	 * @since   11.1	 */	public function quoteName($name, $as = null)	{		if (is_string($name))		{			$quotedName = $this->quoteNameStr(explode('.', $name));			$quotedAs = '';			if (!is_null($as))			{				settype($as, 'array');				$quotedAs .= ' AS ' . $this->quoteNameStr($as);			}			return $quotedName . $quotedAs;		}		else		{			$fin = array();			if (is_null($as))			{				foreach ($name as $str)				{					$fin[] = $this->quoteName($str);				}			}			elseif (is_array($name) && (count($name) == count($as)))			{				$count = count($name);				for ($i = 0; $i < $count; $i++)				{					$fin[] = $this->quoteName($name[$i], $as[$i]);				}			}			return $fin;		}	}	/**	 * Quote strings coming from quoteName call.	 *	 * @param   array  $strArr  Array of strings coming from quoteName dot-explosion.	 *	 * @return  string  Dot-imploded string of quoted parts.	 *	 * @since 11.3	 */	protected function quoteNameStr($strArr)	{		$parts = array();		$q = $this->nameQuote;		foreach ($strArr as $part)		{			if (is_null($part))			{				continue;			}			if (strlen($q) == 1)			{				$parts[] = $q . $part . $q;			}			else			{				$parts[] = $q{0} . $part . $q{1};			}		}		return implode('.', $parts);	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   11.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$escaped = false;		$startPos = 0;		$quoteChar = '';		$literal = '';		$query = trim($query);		$n = strlen($query);		while ($startPos < $n)		{			$ip = strpos($query, $prefix, $startPos);			if ($ip === false)			{				break;			}			$j = strpos($query, "'", $startPos);			$k = strpos($query, '"', $startPos);			if (($k !== false) && (($k < $j) || ($j === false)))			{				$quoteChar = '"';				$j = $k;			}			else			{				$quoteChar = "'";			}			if ($j === false)			{				$j = $n;			}			$literal .= str_replace($prefix, $this->tablePrefix, substr($query, $startPos, $j - $startPos));			$startPos = $j;			$j = $startPos + 1;			if ($j >= $n)			{				break;			}			// Quote comes first, find end of quote			while (true)			{				$k = strpos($query, $quoteChar, $j);				$escaped = false;				if ($k === false)				{					break;				}				$l = $k - 1;				while ($l >= 0 && $query{$l} == '\\')				{					$l--;					$escaped = !$escaped;				}				if ($escaped)				{					$j = $k + 1;					continue;				}				break;			}			if ($k === false)			{				// Error in the query - no end quote; ignore it				break;			}			$literal .= substr($query, $startPos, $k - $startPos + 1);			$startPos = $k + 1;		}		if ($startPos < $n)		{			$literal .= substr($query, $startPos, $n - $startPos);		}		return $literal;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Table prefix	 * @param   string  $prefix    For the table - used to rename constraints in non-mysql databases	 *	 * @return  JDatabaseDriver    Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function renameTable($oldTable, $newTable, $backup = null, $prefix = null);	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function select($database);	/**	 * Sets the database debugging state for the driver.	 *	 * @param   boolean  $level  True to enable debugging.	 *	 * @return  boolean  The old debugging level.	 *	 * @since   11.1	 */	public function setDebug($level)	{		$previous = $this->debug;		$this->debug = (bool) $level;		return $previous;	}	/**	 * Sets the SQL statement string for later execution.	 *	 * @param   mixed    $query   The SQL statement to set either as a JDatabaseQuery object or a string.	 * @param   integer  $offset  The affected row offset to set.	 * @param   integer  $limit   The maximum affected rows to set.	 *	 * @return  JDatabaseDriver  This object to support method chaining.	 *	 * @since   11.1	 */	public function setQuery($query, $offset = 0, $limit = 0)	{		$this->sql = $query;		$this->limit = (int) max(0, $limit);		$this->offset = (int) max(0, $offset);		return $this;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	abstract public function setUTF();	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionCommit();	/**	 * Method to roll back a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionRollback();	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionStart();	/**	 * Method to truncate a table.	 *	 * @param   string  $table  The table to truncate	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function truncateTable($table)	{		$this->setQuery('TRUNCATE TABLE ' . $this->quoteName($table));		$this->execute();	}	/**	 * Updates a row in a table based on an object's properties.	 *	 * @param   string   $table    The name of the database table to update.	 * @param   object   &$object  A reference to an object whose public properties match the table fields.	 * @param   array    $key      The name of the primary key.	 * @param   boolean  $nulls    True to update null fields or false to ignore them.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function updateObject($table, &$object, $key, $nulls = false)	{		$fields = array();		$where = array();		if (is_string($key))		{			$key = array($key);		}		if (is_object($key))		{			$key = (array) $key;		}		// Create the base update statement.		$statement = 'UPDATE ' . $this->quoteName($table) . ' SET %s WHERE %s';		// Iterate over the object variables to build the query fields/value pairs.		foreach (get_object_vars($object) as $k => $v)		{			// Only process scalars that are not internal fields.			if (is_array($v) or is_object($v) or $k[0] == '_')			{				continue;			}			// Set the primary key to the WHERE clause instead of a field to update.			if (in_array($k, $key))			{				$where[] = $this->quoteName($k) . '=' . $this->quote($v);				continue;			}			// Prepare and sanitize the fields and values for the database query.			if ($v === null)			{				// If the value is null and we want to update nulls then set it.				if ($nulls)				{					$val = 'NULL';				}				// If the value is null and we do not want to update nulls then ignore this field.				else				{					continue;				}			}			// The field is not null so we prep it for update.			else			{				$val = $this->quote($v);			}			// Add the field to be updated.			$fields[] = $this->quoteName($k) . '=' . $val;		}		// We don't have any fields to update.		if (empty($fields))		{			return true;		}		// Set the query and execute the update.		$this->setQuery(sprintf($statement, implode(",", $fields), implode(' AND ', $where)));		return $this->execute();	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	abstract public function execute();	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriver  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function unlockTables();}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_checkin');?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>  	<div id="filter-bar" class="btn-toolbar">  		<div class="filter-search btn-group pull-left">  			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CHECKIN_FILTER_SEARCH_DESC'); ?>" />  		</div>  		<div class="btn-group pull-left">  			<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>  			<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>  		</div>  	</div>  	<div class="clearfix"> </div>  	<table id="global-checkin" class="table table-striped">  		<thead>  			<tr>  				<th width="1%">  					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />  				</th>  				<th class="left"><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_DATABASE_TABLE', 'table', $listDirn, $listOrder); ?></th>  				<th><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_ITEMS_TO_CHECK_IN', 'count', $listDirn, $listOrder); ?></th>  			</tr>  		</thead>  		<tbody>  		<?php foreach ($this->items as $table => $count): $i = 0;?>  			<tr class="row<?php echo $i % 2; ?>">  				<td class="center"><?php echo JHtml::_('grid.id', $i, $table); ?></td>  				<td><?php echo JText::sprintf('COM_CHECKIN_TABLE', $table); ?></td>  				<td width="200" class="center"><span class="label label-info"><?php echo $count; ?></span></td>  			</tr>  		<?php endforeach;?>  		</tbody>  		<tfoot>  			<tr>  				<td colspan="15">  					<?php echo $this->pagination->getListFooter(); ?>  				</td>  			</tr>  		</tfoot>  	</table>  	<input type="hidden" name="task" value="" />  	<input type="hidden" name="boxchecked" value="0" />  	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of weblink records. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.6 */class WeblinksModelWeblinks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'state', 'a.state',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'hits', 'a.hits',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'url', 'a.url',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$published = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $published);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		$tag = $this->getUserStateFromRequest($this->context . '.filter.tag', 'filter_tag', '');		$this->setState('filter.tag', $tag);		// Load the parameters.		$params = JComponentHelper::getParams('com_weblinks');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.category_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.checked_out, a.checked_out_time, a.catid,' .					'a.hits,' .					'a.state, a.access, a.ordering,' .					'a.language, a.publish_up, a.publish_down'			)		);		$query->from($db->quoteName('#__weblinks') . ' AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.state');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state IN (0, 1))');		}		// Filter by category.		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$query->where('a.catid = ' . (int) $categoryId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		$tagId = $this->getState('filter.tag');		// Filter by a single tag.		if (is_numeric($tagId))		{			$query->where($db->quoteName('tagmap.tag_id') . ' = ' . (int) $tagId)				->join(					'LEFT', $db->quoteName('#__contentitem_tag_map', 'tagmap')					. ' ON ' . $db->quoteName('tagmap.content_item_id') . ' = ' . $db->quoteName('a.id')					. ' AND ' . $db->quoteName('tagmap.type_alias') . ' = ' . $db->quote('com_weblinks.weblink')				);		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering');		$orderDirn = $this->state->get('list.direction');		if ($orderCol == 'a.ordering' || $orderCol == 'category_title')		{			$orderCol = 'c.title ' . $orderDirn . ', a.ordering';		}		$query->order($db->escape($orderCol . ' ' . $orderDirn));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact */class ContactModelFeatured extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * The category that applies.	 *	 * @access    protected	 * @var        object	 */	protected $_category = null;	/**	 * The list of other cotnact categories.	 *	 * @access    protected	 * @var        array	 */	protected $_categories = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'con_position', 'a.con_position',				'suburb', 'a.suburb',				'state', 'a.state',				'country', 'a.country',				'ordering', 'a.ordering',			);		}		parent::__construct($config);	}	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		// Convert the params field into an object, saving original in _params		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item = & $items[$i];			if (!isset($this->_params))			{				$params = new JRegistry;				$params->loadString($item->params);				$item->params = $params;			}		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select required fields from the categories.		$query->select($this->getState('list.select', 'a.*'))			->from($db->quoteName('#__contact_details') . ' AS a')			->where('a.access IN (' . $groups . ')')			->where('a.featured=1')			->join('INNER', '#__categories AS c ON c.id = a.catid')			->where('c.access IN (' . $groups . ')');		// Filter by category.		if ($categoryId = $this->getState('category.id'))		{			$query->where('a.catid = ' . (int) $categoryId);		}		//sqlsrv change... aliased c.published to cat_published		// Join to check for category published state in parent categories up the tree		$query->select('c.published as cat_published, CASE WHEN badcats.id is null THEN c.published ELSE 0 END AS parents_published');		$subquery = 'SELECT cat.id as id FROM #__categories AS cat JOIN #__categories AS parent ';		$subquery .= 'ON cat.lft BETWEEN parent.lft AND parent.rgt ';		$subquery .= 'WHERE parent.extension = ' . $db->quote('com_contact');		// Find any up-path categories that are not published		// If all categories are published, badcats.id will be null, and we just use the contact state		$subquery .= ' AND parent.published != 1 GROUP BY cat.id ';		// Select state to unpublished if up-path category is unpublished		$publishedWhere = 'CASE WHEN badcats.id is null THEN a.published ELSE 0 END';		$query->join('LEFT OUTER', '(' . $subquery . ') AS badcats ON badcats.id = c.id');		// Filter by state		$state = $this->getState('filter.published');		if (is_numeric($state))		{			$query->where('a.published = ' . (int) $state);			// Filter by start and end dates.			$nullDate = $db->quote($db->getNullDate());			$date = JFactory::getDate();			$nowDate = $db->quote($date->toSql());			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')')				->where($publishedWhere . ' = ' . (int) $state);		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_contact');		// List state information		$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');		$this->setState('list.limit', $limit);		$limitstart = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $limitstart);		$orderCol = $app->input->get('filter_order', 'ordering');		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->input->get('filter_order_Dir', 'ASC');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_contact')) && (!$user->authorise('core.edit', 'com_contact')))		{			// Limit to published for people who can't edit or edit.state.			$this->setState('filter.published', 1);			// Filter by start and end dates.			$this->setState('filter.publish_date', true);		}		$this->setState('filter.language', $app->getLanguageFilter());		// Load the parameters.		$this->setState('params', $params);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of template style records. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesModelStyles extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'client_id', 'a.client_id',				'template', 'a.template',				'home', 'a.home',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$template = $this->getUserStateFromRequest($this->context . '.filter.template', 'filter_template');		$this->setState('filter.template', $template);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', null);		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_templates');		$this->setState('params', $params);		// List state information.		parent::populateState('a.template', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.template');		$id .= ':' . $this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.template, a.title, a.home, a.client_id, l.title AS language_title, l.image as image'			)		);		$query->from($db->quoteName('#__template_styles') . ' AS a');		// Join on menus.		$query->select('COUNT(m.template_style_id) AS assigned')			->join('LEFT', '#__menu AS m ON m.template_style_id = a.id')			->group('a.id, a.template, a.title, a.home, a.client_id, l.title, l.image, e.extension_id');		// Join over the language		$query->join('LEFT', '#__languages AS l ON l.lang_code = a.home');		// Filter by extension enabled		$query->select('extension_id AS e_id')			->join('LEFT', '#__extensions AS e ON e.element = a.template')			->where('e.enabled = 1')			->where('e.type=' . $db->quote('template'));		// Filter by template.		if ($template = $this->getState('filter.template'))		{			$query->where('a.template = ' . $db->quote($template));		}		// Filter by client.		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('a.client_id = ' . (int) $clientId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.template LIKE ' . $search . ' OR a.title LIKE ' . $search);			}		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.title')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds component helper. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsHelper{	public static $extension = 'com_newsfeeds';	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_NEWSFEEDS_SUBMENU_NEWSFEEDS'),			'index.php?option=com_newsfeeds&view=newsfeeds',			$vName == 'newsfeeds'		);		JHtmlSidebar::addEntry(			JText::_('COM_NEWSFEEDS_SUBMENU_CATEGORIES'),			'index.php?option=com_categories&extension=com_newsfeeds',			$vName == 'categories'		);		if ($vName == 'categories')		{			JToolbarHelper::title(				JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', JText::_('com_newsfeeds')),				'newsfeeds-categories');		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The category ID.	 *	 * @return  JObject	 */	public static function getActions($categoryId = 0, $newsfeedId = 0)	{		$user	= JFactory::getUser();		$result	= new JObject;		if (empty($categoryId))		{			$assetName = 'com_newsfeeds';			$level = 'component';		}		else		{			$assetName = 'com_newsfeeds.category.'.(int) $categoryId;			$level = 'category';		}		$actions = JAccess::getActions('com_newsfeeds', $level);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Default Language View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewDefaultlanguageHtml extends JViewHtml{	/**	 * Container with all installed languages	 *	 * @var    array	 * @since  3.1	 */	protected $items;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelLanguages	 * @since   3.1	 */	protected $model;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->items = new stdClass;		$this->items->administrator = $this->model->getInstalledlangsAdministrator();		$this->items->frontend      = $this->model->getInstalledlangsFrontend();		return parent::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));JText::script('COM_USERS_GROUPS_CONFIRM_DELETE');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'groups.delete')		{			var f = document.adminForm;			var cb='';<?php foreach ($this->items as $i => $item):?><?php if ($item->user_count > 0):?>			cb = f['cb'+<?php echo $i;?>];			if (cb && cb.checked)			{				if (confirm(Joomla.JText._('COM_USERS_GROUPS_CONFIRM_DELETE')))				{					Joomla.submitform(task);				}				return;			}<?php endif;?><?php endforeach;?>		}		Joomla.submitform(task);	}</script><form action="<?php echo JRoute::_('index.php?option=com_users&view=groups');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_GROUPS_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_GROUPS_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_GROUPS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JText::_('COM_USERS_HEADING_GROUP_TITLE'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_USERS_HEADING_USERS_IN_GROUP'); ?>				</th>				<th class="nowrap id-col">					<?php echo JText::_('JGRID_HEADING_ID'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canCreate = $user->authorise('core.create', 'com_users');			$canEdit   = $user->authorise('core.edit',   'com_users');			// If this group is super admin and this user is not super admin, $canEdit is false			if (!$user->authorise('core.admin') && (JAccess::checkGroup($item->id, 'core.admin')))			{				$canEdit = false;			}			$canChange	= $user->authorise('core.edit.state',	'com_users');		?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php if ($canEdit) : ?>						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					<?php endif; ?>				</td>				<td>					<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_users&task=group.edit&id='.$item->id);?>">						<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<?php if (JDEBUG) : ?>						<div class="fltrt"><div class="button2-left smallsub"><div class="blank"><a href="<?php echo JRoute::_('index.php?option=com_users&view=debuggroup&group_id='.(int) $item->id);?>">						<?php echo JText::_('COM_USERS_DEBUG_GROUP');?></a></div></div></div>					<?php endif; ?>				</td>				<td class="center">					<?php echo $item->user_count ? $item->user_count : ''; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Index model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelIndex extends JModelList{	/**	 * The event to trigger after deleting the data.	 *	 * @var    string	 * @since  2.5	 */	protected $event_after_delete = 'onContentAfterDelete';	/**	 * The event to trigger before deleting the data.	 *	 * @var    string	 * @since  2.5	 */	protected $event_before_delete = 'onContentBeforeDelete';	/**	 * Constructor.	 *	 * @param   array  $config  An associative array of configuration settings. [optional]	 *	 * @since   2.5	 * @see     JController	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'published', 'l.published',				'title', 'l.title',				'type_id', 'l.type_id',				'url', 'l.url',				'indexdate', 'l.indexdate'			);		}		parent::__construct($config);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission for the component.	 *	 * @since   2.5	 */	protected function canDelete($record)	{		$user = JFactory::getUser();		return $user->authorise('core.delete', $this->option);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission for the component.	 *	 * @since   2.5	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return $user->authorise('core.edit.state', $this->option);	}	/**	 * Method to delete one or more records.	 *	 * @param   array  &$pks  An array of record primary keys.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   2.5	 */	public function delete(&$pks)	{		$dispatcher = JEventDispatcher::getInstance();		$pks = (array) $pks;		$table = $this->getTable();		// Include the content plugins for the on delete events.		JPluginHelper::importPlugin('content');		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if ($this->canDelete($table))				{					$context = $this->option . '.' . $this->name;					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger($this->event_before_delete, array($context, $table));					if (in_array(false, $result, true))					{						$this->setError($table->getError());						return false;					}					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					// Trigger the onContentAfterDelete event.					$dispatcher->trigger($this->event_after_delete, array($context, $table));				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					$error = $this->getError();					if ($error)					{						$this->setError($error);					}					else					{						$this->setError(JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'));					}				}			}			else			{				$this->setError($table->getError());				return false;			}		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery  A JDatabaseQuery object	 *	 * @since   2.5	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('l.*')			->select('t.title AS t_title')			->from($db->quoteName('#__finder_links') . ' AS l')			->join('INNER', $db->quoteName('#__finder_types') . ' AS t ON t.id = l.type_id');		// Check the type filter.		if ($this->getState('filter.type'))		{			$query->where('l.type_id = ' . (int) $this->getState('filter.type'));		}		// Check for state filter.		if (is_numeric($this->getState('filter.state')))		{			$query->where('l.published = ' . (int) $this->getState('filter.state'));		}		// Check the search phrase.		if ($this->getState('filter.search') != '')		{			$search = $db->escape($this->getState('filter.search'));			$query->where('l.title LIKE ' . $db->quote('%' . $db->escape($search) . '%') . ' OR l.url LIKE ' . $db->quote('%' . $db->escape($search) . '%') . ' OR l.indexdate LIKE  ' . $db->quote('%' . $db->escape($search) . '%'));		}		// Handle the list ordering.		$ordering = $this->getState('list.ordering');		$direction = $this->getState('list.direction');		if (!empty($ordering))		{			$query->order($db->escape($ordering) . ' ' . $db->escape($direction));		}		return $query;	}	/**	 * Method to get the state of the Smart Search plug-ins.	 *	 * @return  array   Array of relevant plug-ins and whether they are enabled or not.	 *	 * @since   2.5	 */	public function getPluginState()	{		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('name, enabled')			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' .  $db->quote('plugin'))			->where($db->quoteName('folder') . ' IN(' .  $db->quote('system') . ',' . $db->quote('content') . ')')			->where($db->quoteName('element') . ' = ' .  $db->quote('finder'));		$db->setQuery($query);		$db->execute();		$plugins = $db->loadObjectList('name');		return $plugins;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id. [optional]	 *	 * @return  string  A store id.	 *	 * @since   2.5	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.type');		return parent::getStoreId($id);	}	/**	 * Returns a JTable object, always creating it.	 *	 * @param   string  $type    The table type to instantiate. [optional]	 * @param   string  $prefix  A prefix for the table class name. [optional]	 * @param   array   $config  Configuration array for model. [optional]	 *	 * @return  JTable  A database object	 *	 * @since   2.5	 */	public function getTable($type = 'Link', $prefix = 'FinderTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to purge the index, deleting all links.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 * @throws  Exception on database error	 */	public function purge()	{		$db = $this->getDbo();		// Truncate the links table.		$db->truncateTable('#__finder_links');		// Truncate the links terms tables.		for ($i = 0; $i <= 15; $i++)		{			// Get the mapping table suffix.			$suffix = dechex($i);			$db->truncateTable('#__finder_links_terms' . $suffix);		}		// Truncate the terms table.		$db->truncateTable('#__finder_terms');		// Truncate the taxonomy map table.		$db->truncateTable('#__finder_taxonomy_map');		// Delete all the taxonomy nodes except the root.		$query = $db->getQuery(true)			->delete($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('id') . ' > 1');		$db->setQuery($query);		$db->execute();		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		return true;	}	/**	 * Method to auto-populate the model state.  Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field. [optional]	 * @param   string  $direction  An optional direction. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState($ordering = null, $direction = null)	{		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$type = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type', '', 'string');		$this->setState('filter.type', $type);		// Load the parameters.		$params = JComponentHelper::getParams('com_finder');		$this->setState('params', $params);		// List state information.		parent::populateState('l.title', 'asc');	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    &$pks   A list of the primary keys to change.	 * @param   integer  $value  The value of the published state. [optional]	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function publish(&$pks, $value = 1)	{		$dispatcher = JEventDispatcher::getInstance();		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Include the content plugins for the change of state event.		JPluginHelper::importPlugin('content');		// Access checks.		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));					return false;				}			}		}		// Attempt to change the state of the records.		if (!$table->publish($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		$context = $this->option . '.' . $this->name;		// Trigger the onContentChangeState event.		$result = $dispatcher->trigger('onContentChangeState', array($context, $pks, $value));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Clear the component's cache		$this->cleanCache();		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// Create shortcuts to some parameters.$params  = $this->item->params;$images  = json_decode($this->item->images);$urls    = json_decode($this->item->urls);$canEdit = $params->get('access-edit');$user    = JFactory::getUser();$info    = $params->get('info_block_position', 0);JHtml::_('behavior.caption');?><div class="item-page<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading') && $params->get('show_title')) : ?>	<div class="page-header">		<h1> <?php echo $this->escape($this->params->get('page_heading')); ?> </h1>	</div>	<?php endif;if (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && $this->item->paginationrelative){	echo $this->item->pagination;}?>	<?php if ($params->get('show_title') || $params->get('show_author')) : ?>	<div class="page-header">		<h2>			<?php if ($this->item->state == 0) : ?>				<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>			<?php endif; ?>			<?php if ($params->get('show_title')) : ?>				<?php if ($params->get('link_titles') && !empty($this->item->readmore_link)) : ?>					<a href="<?php echo $this->item->readmore_link; ?>"> <?php echo $this->escape($this->item->title); ?></a>				<?php else : ?>					<?php echo $this->escape($this->item->title); ?>				<?php endif; ?>			<?php endif; ?>		</h2>	</div>	<?php endif; ?>	<?php if (!$this->print) : ?>		<?php if ($canEdit || $params->get('show_print_icon') || $params->get('show_email_icon')) : ?>		<div class="btn-group pull-right">			<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span> <span class="caret"></span> </a>			<?php // Note the actions class is deprecated. Use dropdown-menu instead. ?>			<ul class="dropdown-menu actions">				<?php if ($params->get('show_print_icon')) : ?>				<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $this->item, $params); ?> </li>				<?php endif; ?>				<?php if ($params->get('show_email_icon')) : ?>				<li class="email-icon"> <?php echo JHtml::_('icon.email', $this->item, $params); ?> </li>				<?php endif; ?>				<?php if ($canEdit) : ?>				<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $this->item, $params); ?> </li>				<?php endif; ?>			</ul>		</div>		<?php endif; ?>		<?php else : ?>		<div class="pull-right">		<?php echo JHtml::_('icon.print_screen', $this->item, $params); ?>		</div>	<?php endif; ?><?php $useDefList = ($params->get('show_modify_date') || $params->get('show_publish_date') || $params->get('show_create_date')	|| $params->get('show_hits') || $params->get('show_category') || $params->get('show_parent_category') || $params->get('show_author')); ?>	<?php if ($useDefList && ($info == 0 || $info == 2)) : ?>		<div class="article-info muted">			<dl class="article-info">			<dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt>			<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>				<dd class="createdby">					<?php $author = $this->item->created_by_alias ? $this->item->created_by_alias : $this->item->author; ?>					<?php if (!empty($this->item->contactid) && $params->get('link_author') == true) : ?>						<?php						$needle = 'index.php?option=com_contact&view=contact&id=' . $this->item->contactid;						$menu = JFactory::getApplication()->getMenu();						$item = $menu->getItems('link', $needle, true);						$cntlink = !empty($item) ? $needle . '&Itemid=' . $item->id : $needle;						?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', JHtml::_('link', JRoute::_($cntlink), $author)); ?>					<?php else: ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>				<dd class="parent-category-name">					<?php $title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>					<?php if ($params->get('link_parent_category') && !empty($this->item->parent_slug)) : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_category')) : ?>				<dd class="category-name">					<?php $title = $this->escape($this->item->category_title);					$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)) . '">' . $title . '</a>';?>					<?php if ($params->get('link_category') && $this->item->catslug) : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_publish_date')) : ?>				<dd class="published">					<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($info == 0) : ?>				<?php if ($params->get('show_modify_date')) : ?>					<dd class="modified">						<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_create_date')) : ?>					<dd class="create">						<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_hits')) : ?>					<dd class="hits">						<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>					</dd>				<?php endif; ?>			<?php endif; ?>			</dl>		</div>	<?php endif; ?>	<?php if ($params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?>	<?php if (!$params->get('show_intro')) : echo $this->item->event->afterDisplayTitle; endif; ?>	<?php echo $this->item->event->beforeDisplayContent; ?>	<?php if (isset($urls) && ((!empty($urls->urls_position) && ($urls->urls_position == '0')) || ($params->get('urls_position') == '0' && empty($urls->urls_position)))		|| (empty($urls->urls_position) && (!$params->get('urls_position')))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($params->get('access-view')):?>	<?php if (isset($images->image_fulltext) && !empty($images->image_fulltext)) : ?>	<?php $imgfloat = (empty($images->float_fulltext)) ? $params->get('float_fulltext') : $images->float_fulltext; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_fulltext_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_fulltext_caption) . '"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_fulltext); ?>" alt="<?php echo htmlspecialchars($images->image_fulltext_alt); ?>"/> </div>	<?php endif; ?>	<?php	if (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && !$this->item->paginationrelative):		echo $this->item->pagination;	endif;	?>	<?php if (isset ($this->item->toc)) :		echo $this->item->toc;	endif; ?>	<?php echo $this->item->text; ?>	<?php if ($useDefList && ($info == 1 || $info == 2)) : ?>		<div class="article-info muted">			<dl class="article-info">			<dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt>			<?php if ($info == 1) : ?>				<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>					<dd class="createdby">						<?php $author = $this->item->created_by_alias ? $this->item->created_by_alias : $this->item->author; ?>						<?php if (!empty($this->item->contactid) && $params->get('link_author') == true) : ?>						<?php						$needle = 'index.php?option=com_contact&view=contact&id=' . $this->item->contactid;						$menu = JFactory::getApplication()->getMenu();						$item = $menu->getItems('link', $needle, true);						$cntlink = !empty($item) ? $needle . '&Itemid=' . $item->id : $needle;						?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', JHtml::_('link', JRoute::_($cntlink), $author)); ?>						<?php else: ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>					<dd class="parent-category-name">						<?php	$title = $this->escape($this->item->parent_title);						$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)) . '">' . $title . '</a>';?>						<?php if ($params->get('link_parent_category') && $this->item->parent_slug) : ?>							<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>						<?php else : ?>							<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_category')) : ?>					<dd class="category-name">						<?php 	$title = $this->escape($this->item->category_title);						$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)) . '">' . $title . '</a>';?>						<?php if ($params->get('link_category') && $this->item->catslug) : ?>							<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>						<?php else : ?>							<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_publish_date')) : ?>					<dd class="published">						<span class="icon-calendar"></span>						<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>			<?php endif; ?>			<?php if ($params->get('show_create_date')) : ?>				<dd class="create">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_modify_date')) : ?>				<dd class="modified">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_hits')) : ?>				<dd class="hits">					<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>				</dd>			<?php endif; ?>			</dl>		</div>	<?php endif; ?>	<?phpif (!empty($this->item->pagination) && $this->item->pagination && $this->item->paginationposition && !$this->item->paginationrelative):	echo $this->item->pagination;?>	<?php endif; ?>	<?php if (isset($urls) && ((!empty($urls->urls_position) && ($urls->urls_position == '1')) || ($params->get('urls_position') == '1'))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php // Optional teaser intro text for guests ?>	<?php elseif ($params->get('show_noauth') == true && $user->get('guest')) : ?>	<?php echo $this->item->introtext; ?>	<?php //Optional link to let them register to see the whole article. ?>	<?php if ($params->get('show_readmore') && $this->item->fulltext != null) :		$link1 = JRoute::_('index.php?option=com_users&view=login');		$link = new JURI($link1);?>	<p class="readmore">		<a href="<?php echo $link; ?>">		<?php $attribs = json_decode($this->item->attribs); ?>		<?php		if ($attribs->alternative_readmore == null) :			echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');		elseif ($readmore = $this->item->alternative_readmore) :			echo $readmore;			if ($params->get('show_readmore_title', 0) != 0) :				echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));			endif;		elseif ($params->get('show_readmore_title', 0) == 0) :			echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');		else :			echo JText::_('COM_CONTENT_READ_MORE');			echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));		endif; ?>		</a>	</p>	<?php endif; ?>	<?php endif; ?>	<?phpif (!empty($this->item->pagination) && $this->item->pagination && $this->item->paginationposition && $this->item->paginationrelative) :	echo $this->item->pagination;?>	<?php endif; ?>	<?php echo $this->item->event->afterDisplayContent; ?> </div>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving a category, the articles associated with the category, * sibling, child and parent categories. * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelCategory extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * Model context string.	 *	 * @var		string	 */	protected $_context = 'com_content.category';	/**	 * The category that applies.	 *	 * @access	protected	 * @var		object	 */	protected $_category = null;	/**	 * The list of other newfeed categories.	 *	 * @access	protected	 * @var		array	 */	protected $_categories = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'state', 'a.state',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'modified', 'a.modified',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'hits', 'a.hits',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'author', 'a.author'			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * return	void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('site');		$pk  = $app->input->getInt('id');		$this->setState('category.id', $pk);		// Load the parameters. Merge Global and Menu Item params into new object		$params = $app->getParams();		$menuParams = new JRegistry;		if ($menu = $app->getMenu()->getActive())		{			$menuParams->loadString($menu->params);		}		$mergedParams = clone $menuParams;		$mergedParams->merge($params);		$this->setState('params', $mergedParams);		$user		= JFactory::getUser();				// Create a new query object.		$db		= $this->getDbo();		$query	= $db->getQuery(true);		$groups	= implode(',', $user->getAuthorisedViewLevels());		if ((!$user->authorise('core.edit.state', 'com_content')) &&  (!$user->authorise('core.edit', 'com_content'))){			// limit to published for people who can't edit or edit.state.			$this->setState('filter.published', 1);			// Filter by start and end dates.			$nullDate = $db->quote($db->getNullDate());			$nowDate = $db->quote(JFactory::getDate()->toSQL());			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');		}		else		{			$this->setState('filter.published', array(0, 1, 2));		}		// process show_noauth parameter		if (!$params->get('show_noauth'))		{			$this->setState('filter.access', true);		}		else		{			$this->setState('filter.access', false);		}		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		// filter.order		$itemid = $app->input->get('id', 0, 'int') . ':' . $app->input->get('Itemid', 0, 'int');		$orderCol = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'a.ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order_Dir',			'filter_order_Dir', '', 'cmd');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$this->setState('list.start', $app->input->get('limitstart', 0, 'uint'));		// set limit for query. If list, use parameter. If blog, add blog parameters for limit.		if (($app->input->get('layout') == 'blog') || $params->get('layout_type') == 'blog')		{			$limit = $params->get('num_leading_articles') + $params->get('num_intro_articles') + $params->get('num_links');			$this->setState('list.links', $params->get('num_links'));		}		else		{			$limit = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.limit', 'limit', $params->get('display_num'), 'uint');		}		$this->setState('list.limit', $limit);		// set the depth of the category query based on parameter		$showSubcategories = $params->get('show_subcategory_content', '0');		if ($showSubcategories)		{			$this->setState('filter.max_category_levels', $params->get('show_subcategory_content', '1'));			$this->setState('filter.subcategories', true);		}		$this->setState('filter.language', JLanguageMultilang::isEnabled());		$this->setState('layout', $app->input->get('layout'));	}	/**	 * Get the articles in the category	 *	 * @return  mixed  An array of articles or false if an error occurs.	 * @since   1.5	 */	function getItems()	{		$params = $this->getState()->get('params');		$limit = $this->getState('list.limit');		if ($this->_articles === null && $category = $this->getCategory())		{			$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));			$model->setState('params', JFactory::getApplication()->getParams());			$model->setState('filter.category_id', $category->id);			$model->setState('filter.published', $this->getState('filter.published'));			$model->setState('filter.access', $this->getState('filter.access'));			$model->setState('filter.language', $this->getState('filter.language'));			$model->setState('list.ordering', $this->_buildContentOrderBy());			$model->setState('list.start', $this->getState('list.start'));			$model->setState('list.limit', $limit);			$model->setState('list.direction', $this->getState('list.direction'));			$model->setState('list.filter', $this->getState('list.filter'));			// filter.subcategories indicates whether to include articles from subcategories in the list or blog			$model->setState('filter.subcategories', $this->getState('filter.subcategories'));			$model->setState('filter.max_category_levels', $this->setState('filter.max_category_levels'));			$model->setState('list.links', $this->getState('list.links'));			if ($limit >= 0)			{				$this->_articles = $model->getItems();				if ($this->_articles === false)				{					$this->setError($model->getError());				}			}			else			{				$this->_articles = array();			}			$this->_pagination = $model->getPagination();		}		return $this->_articles;	}	/**	 * Build the orderby for the query	 *	 * @return  string	$orderby portion of query	 * @since   1.5	 */	protected function _buildContentOrderBy()	{		$app		= JFactory::getApplication('site');		$db			= $this->getDbo();		$params		= $this->state->params;		$itemid		= $app->input->get('id', 0, 'int') . ':' . $app->input->get('Itemid', 0, 'int');		$orderCol	= $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');		$orderDirn	= $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order_Dir', 'filter_order_Dir', '', 'cmd');		$orderby	= ' ';		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = null;		}		if (!in_array(strtoupper($orderDirn), array('ASC', 'DESC', '')))		{			$orderDirn = 'ASC';		}		if ($orderCol && $orderDirn)		{			$orderby .= $db->escape($orderCol) . ' ' . $db->escape($orderDirn) . ', ';		}		$articleOrderby		= $params->get('orderby_sec', 'rdate');		$articleOrderDate	= $params->get('order_date');		$categoryOrderby	= $params->def('orderby_pri', '');		$secondary			= ContentHelperQuery::orderbySecondary($articleOrderby, $articleOrderDate) . ', ';		$primary			= ContentHelperQuery::orderbyPrimary($categoryOrderby);		$orderby .= $primary . ' ' . $secondary . ' a.created ';		return $orderby;	}	public function getPagination()	{		if (empty($this->_pagination))		{			return null;		}		return $this->_pagination;	}	/**	 * Method to get category data for the current category	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   1.5	 */	public function getCategory()	{		if (!is_object($this->_item))		{			if ( isset( $this->state->params ) )			{				$params = $this->state->params;				$options = array();				$options['countItems'] = $params->get('show_cat_num_articles', 1) || !$params->get('show_empty_categories_cat', 0);			}			else {				$options['countItems'] = 0;			}			$categories = JCategories::getInstance('Content', $options);			$this->_item = $categories->get($this->getState('category.id', 'root'));			// Compute selected asset permissions.			if (is_object($this->_item))			{				$user	= JFactory::getUser();				$userId	= $user->get('id');				$asset	= 'com_content.category.'.$this->_item->id;				// Check general create permission.				if ($user->authorise('core.create', $asset))				{					$this->_item->getParams()->set('access-create', true);				}				// TODO: Why aren't we lazy loading the children and siblings?				$this->_children = $this->_item->getChildren();				$this->_parent = false;				if ($this->_item->getParent())				{					$this->_parent = $this->_item->getParent();				}				$this->_rightsibling = $this->_item->getSibling();				$this->_leftsibling = $this->_item->getSibling(false);			}			else {				$this->_children = false;				$this->_parent = false;			}		}		return $this->_item;	}	/**	 * Get the parent category.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	public function getParent()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_parent;	}	/**	 * Get the left sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	function &getLeftSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_leftsibling;	}	/**	 * Get the right sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	function &getRightSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_rightsibling;	}	/**	 * Get the child categories.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	function &getChildren()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		// Order subcategories		if (count($this->_children))		{			$params = $this->getState()->get('params');			if ($params->get('orderby_pri') == 'alpha' || $params->get('orderby_pri') == 'ralpha')			{				jimport('joomla.utilities.arrayhelper');				JArrayHelper::sortObjects($this->_children, 'title', ($params->get('orderby_pri') == 'alpha') ? 1 : -1);			}		}		return $this->_children;	}	/**	 * Increment the hit counter for the category.	 *	 * @param   int  $pk  Optional primary key of the category to increment.	 *	 * @return  boolean True if successful; false otherwise and internal error set.	 */	public function hit($pk = 0)	{		// Initialise variables.		$pk = (!empty($pk)) ? $pk : (int) $this->getState('category.id');		$db = $this->getDbo();		$query = $db->getQuery(true)			->update('#__categories')			->set('hits = hits + 1')			->where('id = ' . (int) $pk);		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><div id="installer-update">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=update');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty($this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif; ?>	<?php if ($this->showMessage) : ?>		<div class="alert alert-info">			<a class="close" data-dismiss="alert" href="#">&times;</a>			<?php echo $this->loadTemplate('message'); ?>		</div>	<?php endif; ?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<div id="filter-bar" class="btn-toolbar">		<div class="btn-group pull-right hidden-phone">			<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>			<?php echo $this->pagination->getLimitBox(); ?>		</div>		<div class="filter-search btn-group pull-left">			<input type="text" name="filter_search" placeholder="<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('JSEARCH_FILTER'); ?>" />		</div>		<div class="btn-group pull-left">			<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>			<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>		</div>	</div>	<div class="clearfix"> </div>	<!-- Begin Content -->		<?php if (count($this->items)) : ?>		<table class="table table-striped" >			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_INSTALLTYPE', 'extension_id', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_TYPE', 'type', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center">						<?php echo JText::_('JVERSION'); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_FOLDER', 'folder', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_CLIENT', 'client_id', $listDirn, $listOrder); ?>					</th>					<th width="25%">						<?php echo JText::_('COM_INSTALLER_HEADING_DETAILSURL'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="9">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php				foreach ($this->items as $i => $item) :				$client = $item->client_id ? JText::_('JADMINISTRATOR') : JText::_('JSITE');			?>				<tr class="row<?php echo $i % 2; ?>">					<td>						<?php echo JHtml::_('grid.id', $i, $item->update_id); ?>					</td>					<td>						<span class="editlinktip hasTip" title="<?php echo JText::_('JGLOBAL_DESCRIPTION'); ?>::<?php echo $item->description ? $this->escape($item->description) : JText::_('COM_INSTALLER_MSG_UPDATE_NODESC'); ?>">						<?php echo $this->escape($item->name); ?>						</span>					</td>					<td class="center">						<?php echo $item->extension_id ? JText::_('COM_INSTALLER_MSG_UPDATE_UPDATE') : JText::_('COM_INSTALLER_NEW_INSTALL') ?>					</td>					<td>						<?php echo JText::_('COM_INSTALLER_TYPE_' . $item->type) ?>					</td>					<td class="center">						<?php echo $item->version ?>					</td>					<td class="center">						<?php echo @$item->folder != '' ? $item->folder : JText::_('COM_INSTALLER_TYPE_NONAPPLICABLE'); ?>					</td>					<td class="center">						<?php echo $client; ?>					</td>					<td><?php echo $item->detailsurl ?>						<?php if (isset($item->infourl)) : ?>							<br />							<a href="<?php echo $item->infourl; ?>" target="_blank">							<?php echo $this->escape($item->infourl); ?>							</a>						<?php endif; ?>					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php else : ?>			<div class="alert alert-info">				<a class="close" data-dismiss="alert" href="#">&times;</a>				<?php echo JText::_('COM_INSTALLER_MSG_UPDATE_NOUPDATES'); ?>			</div>		<?php endif; ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_login * * @package     Joomla.Site * @subpackage  mod_login * @since       1.5 */class ModLoginHelper{	public static function getReturnURL($params, $type)	{		$app	= JFactory::getApplication();		$router = $app->getRouter();		$url = null;		if ($itemid = $params->get($type))		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select($db->quoteName('link'))				->from($db->quoteName('#__menu'))				->where($db->quoteName('published') . '=1')				->where($db->quoteName('id') . '=' . $db->quote($itemid));			$db->setQuery($query);			if ($link = $db->loadResult())			{				if ($router->getMode() == JROUTER_MODE_SEF)				{					$url = 'index.php?Itemid='.$itemid;				}				else {					$url = $link.'&Itemid='.$itemid;				}			}		}		if (!$url)		{			// Stay on the same page			$uri = clone JURI::getInstance();			$vars = $router->parse($uri);			unset($vars['lang']);			if ($router->getMode() == JROUTER_MODE_SEF)			{				if (isset($vars['Itemid']))				{					$itemid = $vars['Itemid'];					$menu = $app->getMenu();					$item = $menu->getItem($itemid);					unset($vars['Itemid']);					if (isset($item) && $vars == $item->query)					{						$url = 'index.php?Itemid='.$itemid;					}					else {						$url = 'index.php?'.JURI::buildQuery($vars).'&Itemid='.$itemid;					}				}				else				{					$url = 'index.php?'.JURI::buildQuery($vars);				}			}			else			{				$url = 'index.php?'.JURI::buildQuery($vars);			}		}		return base64_encode($url);	}	public static function getType()	{		$user = JFactory::getUser();		return (!$user->get('guest')) ? 'logout' : 'login';	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * Frontpage Component Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelFeatured extends ContentModelArticles{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_content.frontpage';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		parent::populateState($ordering, $direction);		$input = JFactory::getApplication()->input;		$user  = JFactory::getUser();		// List state information		$limitstart = $input->getUInt('limitstart', 0);		$this->setState('list.start', $limitstart);		$params = $this->state->params;		$limit = $params->get('num_leading_articles') + $params->get('num_intro_articles') + $params->get('num_links');		$this->setState('list.limit', $limit);		$this->setState('list.links', $params->get('num_links'));		$this->setState('filter.frontpage', true);		if ((!$user->authorise('core.edit.state', 'com_content')) &&  (!$user->authorise('core.edit', 'com_content'))){			// filter on published for those who do not have edit or edit.state rights.			$this->setState('filter.published', 1);		}		else		{			$this->setState('filter.published', array(0, 1, 2));		}		// check for category selection		if ($params->get('featured_categories') && implode(',', $params->get('featured_categories')) == true)		{			$featuredCategories = $params->get('featured_categories');			$this->setState('filter.frontpage.categories', $featuredCategories);		}	}	/**	 * Method to get a list of articles.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		$params = clone $this->getState('params');		$limit = $params->get('num_leading_articles') + $params->get('num_intro_articles') + $params->get('num_links');		if ($limit > 0)		{			$this->setState('list.limit', $limit);			return parent::getItems();		}		return array();	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= $this->getState('filter.frontpage');		return parent::getStoreId($id);	}	/**	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Set the blog ordering		$params = $this->state->params;		$articleOrderby = $params->get('orderby_sec', 'rdate');		$articleOrderDate = $params->get('order_date');		$categoryOrderby = $params->def('orderby_pri', '');		$secondary = ContentHelperQuery::orderbySecondary($articleOrderby, $articleOrderDate) . ', ';		$primary = ContentHelperQuery::orderbyPrimary($categoryOrderby);		$orderby = $primary . ' ' . $secondary . ' a.created DESC ';		$this->setState('list.ordering', $orderby);		$this->setState('list.direction', '');		// Create a new query object.		$query = parent::getListQuery();		// Filter by frontpage.		if ($this->getState('filter.frontpage'))		{			$query->join('INNER', '#__content_frontpage AS fp ON fp.content_id = a.id');		}		// Filter by categories		if (is_array($featuredCategories = $this->getState('filter.frontpage.categories')))		{			$query->where('a.catid IN (' . implode(',', $featuredCategories) . ')');		}		return $query;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the default application languages for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSetdefaultlanguage extends JControllerBase{	/**	 * Constructor.	 *	 * @since   3.1	 */	public function __construct()	{		parent::__construct();		// Overrides application config and set the configuration.php file so tokens and database works		JFactory::$config = null;		JFactory::getConfig(JPATH_SITE . '/configuration.php');		JFactory::$session = null;	}	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the languages model.		$model = new InstallationModelLanguages;		// Check for request forgeries in the administrator language		$admin_lang = $this->input->getString('administratorlang', false);		// Check that the string is an ISO Language Code avoiding any injection.		if (!preg_match('/^[a-z]{2}(\-[A-Z]{2})?$/', $admin_lang))		{			$admin_lang = 'en-GB';		}		// Attempt to set the default administrator language		if (!$model->setDefault($admin_lang, 'administrator'))		{			// Create a error response message.			$app->enqueueMessage(JText::_('INSTL_DEFAULTLANGUAGE_ADMIN_COULDNT_SET_DEFAULT'), 'error');		}		else		{			// Create a response body.			$app->enqueueMessage(JText::sprintf('INSTL_DEFAULTLANGUAGE_ADMIN_SET_DEFAULT', $admin_lang));		}		// Check for request forgeries in the site language		$frontend_lang = $this->input->getString('frontendlang', false);		// Check that the string is an ISO Language Code avoiding any injection.		if (!preg_match('/^[a-z]{2}(\-[A-Z]{2})?$/', $frontend_lang))		{			$frontend_lang = 'en-GB';		}		// Attempt to set the default site language		if (!$model->setDefault($frontend_lang, 'site'))		{			// Create a error response message.			$app->enqueueMessage(JText::_('INSTL_DEFAULTLANGUAGE_FRONTEND_COULDNT_SET_DEFAULT'), 'error');		}		else		{			// Create a response body.			$app->enqueueMessage(JText::sprintf('INSTL_DEFAULTLANGUAGE_FRONTEND_SET_DEFAULT', $frontend_lang));		}		$r = new stdClass;		// Redirect to the final page.		$r->view = 'remove';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Public cache handler * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheController{	/**	 * @var    JCache	 * @since  11.1	 */	public $cache;	/**	 * @var    array  Array of options	 * @since  11.1	 */	public $options;	/**	 * Constructor	 *	 * @param   array  $options  Array of options	 *	 * @since   11.1	 */	public function __construct($options)	{		$this->cache = new JCache($options);		$this->options = & $this->cache->_options;		// Overwrite default options with given options		foreach ($options as $option => $value)		{			if (isset($options[$option]))			{				$this->options[$option] = $options[$option];			}		}	}	/**	 * Magic method to proxy JCacheControllerMethods	 *	 * @param   string  $name       Name of the function	 * @param   array   $arguments  Array of arguments for the function	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function __call($name, $arguments)	{		$nazaj = call_user_func_array(array($this->cache, $name), $arguments);		return $nazaj;	}	/**	 * Returns a reference to a cache adapter object, always creating it	 *	 * @param   string  $type     The cache object type to instantiate; default is output.	 * @param   array   $options  Array of options	 *	 * @return  JCache  A JCache object	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($type = 'output', $options = array())	{		self::addIncludePath(JPATH_PLATFORM . '/joomla/cache/controller');		$type = strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $type));		$class = 'JCacheController' . ucfirst($type);		if (!class_exists($class))		{			// Search for the class file in the JCache include paths.			jimport('joomla.filesystem.path');			if ($path = JPath::find(self::addIncludePath(), strtolower($type) . '.php'))			{				include_once $path;			}			else			{				throw new RuntimeException('Unable to load Cache Controller: ' . $type, 500);			}		}		return new $class($options);	}	/**	 * Set caching enabled state	 *	 * @param   boolean  $enabled  True to enable caching	 *	 * @return  void	 *	 * @since   11.1	 */	public function setCaching($enabled)	{		$this->cache->setCaching($enabled);	}	/**	 * Set cache lifetime	 *	 * @param   integer  $lt  Cache lifetime	 *	 * @return  void	 *	 * @since   11.1	 */	public function setLifeTime($lt)	{		$this->cache->setLifeTime($lt);	}	/**	 * Add a directory where JCache should search for controllers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array   An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!empty($path) && !in_array($path, $paths))		{			jimport('joomla.filesystem.path');			array_unshift($paths, JPath::clean($path));		}		return $paths;	}	/**	 * Get stored cached data by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  mixed   False on no result, cached object otherwise	 *	 * @since   11.1	 */	public function get($id, $group = null)	{		$data = false;		$data = $this->cache->get($id, $group);		if ($data === false)		{			$locktest = new stdClass;			$locktest->locked = null;			$locktest->locklooped = null;			$locktest = $this->cache->lock($id, $group);			if ($locktest->locked == true && $locktest->locklooped == true)			{				$data = $this->cache->get($id, $group);			}			if ($locktest->locked == true)			{				$this->cache->unlock($id, $group);			}		}		// Check again because we might get it from second attempt		if ($data !== false)		{			// Trim to fix unserialize errors			$data = unserialize(trim($data));		}		return $data;	}	/**	 * Store data to cache by id and group	 *	 * @param   mixed    $data        The data to store	 * @param   string   $id          The cache data id	 * @param   string   $group       The cache data group	 * @param   boolean  $wrkarounds  True to use wrkarounds	 *	 * @return  boolean  True if cache stored	 * 	 * @since   11.1	 */	public function store($data, $id, $group = null, $wrkarounds = true)	{		$locktest = new stdClass;		$locktest->locked = null;		$locktest->locklooped = null;		$locktest = $this->cache->lock($id, $group);		if ($locktest->locked == false && $locktest->locklooped == true)		{			$locktest = $this->cache->lock($id, $group);		}		$sucess = $this->cache->store(serialize($data), $id, $group);		if ($locktest->locked == true)		{			$this->cache->unlock($id, $group);		}		return $sucess;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Companies class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinCompanies extends JLinkedinObject{	/**	 * Method to retrieve companies using a company ID, a universal name, or an email domain.	 *	 * @param   integer  $id      The unique internal numeric company identifier.	 * @param   string   $name    The unique string identifier for a company.	 * @param   string   $domain  Company email domains.	 * @param   string   $fields  Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 * @throws  RuntimeException	 */	public function getCompanies($id = null, $name = null, $domain = null, $fields = null)	{		// At least one value is needed to retrieve data.		if ($id == null && $name == null && $domain == null)		{			// We don't have a valid entry			throw new RuntimeException('You must specify a company ID, a universal name, or an email domain.');		}		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/companies';		if ($id && $name)		{			$base .= '::(' . $id . ',universal-name=' . $name . ')';		}		elseif ($id)		{			$base .= '/' . $id;		}		elseif ($name)		{			$base .= '/universal-name=' . $name;		}		// Set request parameters.		$data['format'] = 'json';		if ($domain)		{			$data['email-domain'] = $domain;		}		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to read shares for a particular company .	 *	 * @param   string   $id     The unique company identifier.	 * @param   string   $type   Any valid Company Update Type from the table: https://developer.linkedin.com/reading-company-updates.	 * @param   integer  $count  Maximum number of updates to return.	 * @param   integer  $start  The offset by which to start Network Update pagination.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getUpdates($id, $type = null, $count = 0, $start = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/companies/' . $id . '/updates';		// Set request parameters.		$data['format'] = 'json';		// Check if type is specified.		if ($type)		{			$data['event-type'] = $type;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to search across company pages.	 *	 * @param   string   $fields    Request fields beyond the default ones.	 * @param   string   $keywords  Members who have all the keywords anywhere in their profile.	 * @param   boolean  $hq        Matching companies by the headquarters location. When this is set to "true" and a location facet is used,	 * 								this restricts returned companies to only those whose headquarters resides in the specified location.	 * @param   string   $facets    Facet buckets to return, e.g. location.	 * @param   array    $facet     Array of facet values to search over. Contains values for location, industry, network, company-size,	 * 								num-followers-range and fortune, in exactly this order, null must be specified for an element if no value.	 * @param   integer  $start     Starting location within the result set for paginated returns.	 * @param   integer  $count     The number of results returned.	 * @param   string   $sort      Controls the search result order. There are four options: relevance, relationship,	 * 								followers and company-size.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function search($fields = null, $keywords = null, $hq = false, $facets = null, $facet = null, $start = 0, $count = 0, $sort = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/company-search';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if keywords is specified.		if ($keywords)		{			$data['keywords'] = $keywords;		}		// Check if hq is true.		if ($hq)		{			$data['hq-only'] = $hq;		}		// Check if facets is specified.		if ($facets)		{			$data['facets'] = $facets;		}		// Check if facet is specified.		if ($facet)		{			$data['facet'] = array();			for ($i = 0; $i < count($facet); $i++)			{				if ($facet[$i])				{					if ($i == 0)					{						$data['facet'][] = 'location,' . $facet[$i];					}					if ($i == 1)					{						$data['facet'][] = 'industry,' . $facet[$i];					}					if ($i == 2)					{						$data['facet'][] = 'network,' . $facet[$i];					}					if ($i == 3)					{						$data['facet'][] = 'company-size,' . $facet[$i];					}					if ($i == 4)					{						$data['facet'][] = 'num-followers-range,' . $facet[$i];					}					if ($i == 5)					{						$data['facet'][] = 'fortune,' . $facet[$i];					}				}			}		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if sort is specified.		if ($sort)		{			$data['sort'] = $sort;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get a list of companies the current member is following.	 *	 * @param   string  $fields  Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getFollowed($fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/following/companies';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to follow a company.	 *	 * @param   string  $id  The unique identifier for a company.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function follow($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/following/companies';		// Build xml.		$xml = '<company><id>' . $id . '</id></company>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to unfollow a company.	 *	 * @param   string  $id  The unique identifier for a company.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unfollow($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/~/following/companies/id=' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to get a collection of suggested companies for the current user.	 *	 * @param   string   $fields  Request fields beyond the default ones.	 * @param   integer  $start   Starting location within the result set for paginated returns.	 * @param   integer  $count   The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSuggested($fields = null, $start = 0, $count = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/suggestions/to-follow/companies';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get a collection of suggested companies for the current user.	 *	 * @param   string   $id      The unique identifier for a company.	 * @param   string   $fields  Request fields beyond the default ones.	 * @param   integer  $start   Starting location within the result set for paginated returns.	 * @param   integer  $count   The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getProducts($id, $fields = null, $start = 0, $count = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/companies/' . $id . '/products';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Router * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;jimport('joomla.application.router');/** * Class to create and parse routes * * @package     Joomla.Libraries * @subpackage  Router * @since       1.5 */class JRouterAdministrator extends JRouter{	/**	 * Function to convert a route to an internal URI.	 *	 * @param   JURI  $uri  The uri.	 *	 * @return  array	 */	public function parse($uri)	{		return array();	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 *	 * @since   1.5	 */	public function build($url)	{		// Create the URI object		$uri = parent::build($url);		// Get the path data		$route = $uri->getPath();		// Add basepath to the uri		$uri->setPath(JURI::base(true) . '/' . $route);		return $uri;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class JFormFieldCategoryParent extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.6	 */	protected $type = 'CategoryParent';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		// Initialise variables.		$options = array();		$name = (string) $this->element['name'];		// Let's get the id for the current item, either category or content item.		$jinput = JFactory::getApplication()->input;		// For categories the old category is the category id 0 for new category.		if ($this->element['parent'])		{			$oldCat = $jinput->get('id', 0);			$oldParent = $this->form->getValue($name);		}		else			// For items the old category is the category they are in when opened or 0 if new.		{			$thisItem = $jinput->get('id', 0);			$oldCat = $this->form->getValue($name);		}		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level')			->from('#__categories AS a')			->join('LEFT', $db->quoteName('#__categories') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		// Filter by the type		if ($extension = $this->form->getValue('extension'))		{			$query->where('(a.extension = ' . $db->quote($extension) . ' OR a.parent_id = 0)');		}		if ($this->element['parent'])		{			// Prevent parenting to children of this item.			if ($id = $this->form->getValue('id'))			{				$query->join('LEFT', $db->quoteName('#__categories') . ' AS p ON p.id = ' . (int) $id)					->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');				$rowQuery = $db->getQuery(true);				$rowQuery->select('a.id AS value, a.title AS text, a.level, a.parent_id')					->from('#__categories AS a')					->where('a.id = ' . (int) $id);				$db->setQuery($rowQuery);				$row = $db->loadObject();			}		}		$query->where('a.published IN (0,1)')			->group('a.id, a.title, a.level, a.lft, a.rgt, a.extension, a.parent_id')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			// Translate ROOT			if ($options[$i]->level == 0)			{				$options[$i]->text = JText::_('JGLOBAL_ROOT_PARENT');			}			$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;		}		// Get the current user object.		$user = JFactory::getUser();		// For new items we want a list of categories you are allowed to create in.		if ($oldCat == 0)		{			foreach ($options as $i => $option)			{				// To take save or create in a category you need to have create rights for that category				// unless the item is already in that category.				// Unset the option if the user isn't authorised for it. In this field assets are always categories.				if ($user->authorise('core.create', $extension . '.category.' . $option->value) != true)				{					unset($options[$i]);				}			}		}		// If you have an existing category id things are more complex.		else		{			//$categoryOld = $this->form->getValue($name);			foreach ($options as $i => $option)			{				// If you are only allowed to edit in this category but not edit.state, you should not get any				// option to change the category parent for a category or the category for a content item,				// but you should be able to save in that category.				if ($user->authorise('core.edit.state', $extension . '.category.' . $oldCat) != true)				{					if ($option->value != $oldCat)					{						echo 'y';						unset($options[$i]);					}				}				// However, if you can edit.state you can also move this to another category for which you have				// create permission and you should also still be able to save in the current category.				elseif				(($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					&& $option->value != $oldCat				)				{					echo 'x';					unset($options[$i]);				}			}		}		if (isset($row) && !isset($options[0]))		{			if ($row->parent_id == '1')			{				$parent = new stdClass;				$parent->text = JText::_('JGLOBAL_ROOT_PARENT');				array_unshift($options, $parent);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Editors.none * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plain Textarea Editor Plugin * * @package     Joomla.Plugin * @subpackage  Editors.none * @since       1.5 */class PlgEditorNone extends JPlugin{	/**	 * Method to handle the onInitEditor event.	 *  - Initialises the Editor	 *	 * @return  string	JavaScript Initialization string	 * @since 1.5	 */	public function onInit()	{		$txt =	"<script type=\"text/javascript\">					function insertAtCursor(myField, myValue)					{						if (document.selection)						{							// IE support							myField.focus();							sel = document.selection.createRange();							sel.text = myValue;						} else if (myField.selectionStart || myField.selectionStart == '0')						{							// MOZILLA/NETSCAPE support							var startPos = myField.selectionStart;							var endPos = myField.selectionEnd;							myField.value = myField.value.substring(0, startPos)								+ myValue								+ myField.value.substring(endPos, myField.value.length);						} else {							myField.value += myValue;						}					}				</script>";		return $txt;	}	/**	 * Copy editor content to form field.	 *	 * Not applicable in this editor.	 *	 * @return  void	 */	public function onSave()	{		return;	}	/**	 * Get the editor content.	 *	 * @param   string	$id		The id of the editor field.	 *	 * @return  string	 */	public function onGetContent($id)	{		return "document.getElementById('$id').value;\n";	}	/**	 * Set the editor content.	 *	 * @param   string	$id		The id of the editor field.	 * @param   string	$html	The content to set.	 *	 * @return  string	 */	public function onSetContent($id, $html)	{		return "document.getElementById('$id').value = $html;\n";	}	/**	 * @param   string	$id	 *	 * @return  string	 */	public function onGetInsertMethod($id)	{		static $done = false;		// Do this only once.		if (!$done)		{			$doc = JFactory::getDocument();			$js = "\tfunction jInsertEditorText(text, editor)			{				insertAtCursor(document.getElementById(editor), text);			}";			$doc->addScriptDeclaration($js);		}		return true;	}	/**	 * Display the editor area.	 *	 * @param   string	$name		The control name.	 * @param   string	$html		The contents of the text area.	 * @param   string	$width		The width of the text area (px or %).	 * @param   string	$height		The height of the text area (px or %).	 * @param   integer  $col		The number of columns for the textarea.	 * @param   integer  $row		The number of rows for the textarea.	 * @param   boolean	$buttons	True and the editor buttons will be displayed.	 * @param   string	$id			An optional ID for the textarea (note: since 1.6). If not supplied the name is used.	 * @param   string	$asset	 * @param   object	$author	 * @param   array  $params		Associative array of editor parameters.	 *	 * @return  string	 */	public function onDisplay($name, $content, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null, $params = array())	{		if (empty($id))		{			$id = $name;		}		// Only add "px" to width and height if they are not given as a percentage		if (is_numeric($width))		{			$width .= 'px';		}		if (is_numeric($height))		{			$height .= 'px';		}		$buttons = $this->_displayButtons($id, $buttons, $asset, $author);		$editor  = "<textarea name=\"$name\" id=\"$id\" cols=\"$col\" rows=\"$row\" style=\"width: $width; height: $height;\">$content</textarea>" . $buttons;		return $editor;	}	public function _displayButtons($name, $buttons, $asset, $author)	{		// Load modal popup behavior		JHtml::_('behavior.modal', 'a.modal-button');		$args['name'] = $name;		$args['event'] = 'onGetInsertMethod';		$return = '';		$results[] = $this->update($args);		foreach ($results as $result)		{			if (is_string($result) && trim($result))			{				$return .= $result;			}		}		if (is_array($buttons) || (is_bool($buttons) && $buttons))		{			$results = $this->_subject->getButtons($name, $buttons, $asset, $author);			// This will allow plugins to attach buttons or change the behavior on the fly using AJAX			$return .= "\n<div id=\"editor-xtd-buttons\" class=\"btn-toolbar pull-left\">\n";			$return .= "\n<div class=\"btn-toolbar\">\n";			foreach ($results as $button)			{				// Results should be an object				if ($button->get('name'))				{					$modal		= ($button->get('modal')) ? 'class="modal-button btn"' : null;					$href		= ($button->get('link')) ? 'class="btn" href="'.JURI::base().$button->get('link').'"' : null;					$onclick	= ($button->get('onclick')) ? 'onclick="'.$button->get('onclick').'"' : null;					$title      = ($button->get('title')) ? $button->get('title') : $button->get('text');					$return .= "<a ".$modal." title=\"".$title."\" ".$href." ".$onclick." rel=\"".$button->get('options')."\"><i class=\"icon-".$button->get('name')."\"></i> ".$button->get('text')."</a>\n";				}			}			$return .= "</div>\n";			$return .= "</div>\n";			$return .= "<div class=\"clearfix\"></div>\n";		}		return $return;	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;//Global definitions.//Joomla framework path definitions.$parts = explode(DIRECTORY_SEPARATOR, JPATH_BASE);array_pop($parts);//Defines.define('JPATH_ROOT',           implode(DIRECTORY_SEPARATOR, $parts));define('JPATH_SITE',          JPATH_ROOT);define('JPATH_CONFIGURATION', JPATH_ROOT);define('JPATH_ADMINISTRATOR', JPATH_ROOT . '/administrator');define('JPATH_LIBRARIES',     JPATH_ROOT . '/libraries');define('JPATH_PLUGINS',       JPATH_ROOT . '/plugins');define('JPATH_INSTALLATION',  JPATH_ROOT . '/installation');define('JPATH_THEMES',        JPATH_BASE . '/templates');define('JPATH_CACHE',         JPATH_ROOT . '/cache');define('JPATH_MANIFESTS',     JPATH_ADMINISTRATOR . '/manifests');
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Categories. * * @package     Joomla.Plugin * @subpackage  Finder.Categories * @since       2.5 */class PlgFinderCategories extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Categories';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_categories';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'category';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'Category';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__categories';	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'published';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderDelete($context, $table)	{		if ($context == 'com_categories.category')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);				// Reindex the item				$this->reindex($row->id);			}			// Check if the parent access level is different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row     A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// Query the database for the old access level and the parent if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// The category published state is tied to the parent category			// published state so we need to look up all published states			// before we change anything.			foreach ($pks as $pk)			{				$query = clone($this->getStateQuery());				$query->where('a.id = ' . (int) $pk);				// Get the published states.				$this->db->setQuery($query);				$item = $this->db->loadObject();				// Translate the state.				$state = null;				if ($item->parent_id != 1)				{					$state = $item->cat_state;				}				$temp = $this->translateState($value, $state);				// Update the item.				$this->change($pk, 'state', $temp);				// Reindex the item				$this->reindex($pk);			}		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Need to import component route helpers dynamically, hence the reason it's handled here		$path = JPATH_SITE . '/components/' . $item->extension . '/helpers/route.php';		if (is_file($path))		{			include_once $path;		}		$extension = ucfirst(substr($item->extension, 4));		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = $registry;		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		/* Add the meta-data processing instructions based on the categories		 * configuration parameters.		 */		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Handle the link to the meta-data.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'link');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		//$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Trigger the onContentPrepare event.		$item->summary = FinderIndexerHelper::prepareContent($item->summary, $item->params);		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $item->extension, $this->layout);		$class = $extension . 'HelperRoute';		if (class_exists($class) && method_exists($class, 'getCategoryRoute'))		{			$item->route = $class::getCategoryRoute($item->id);		}		else		{			$item->route = ContentHelperRoute::getCategoryRoute($item->slug, $item->catid);		}		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		// Translate the state. Categories should only be published if the parent category is published.		$item->state = $this->translateState($item->state);		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Category');		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load com_content route helper as it is the fallback for routing in the indexer in this instance.		include_once JPATH_SITE . '/components/com_content/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.title, a.alias, a.description AS summary, a.extension')			->select('a.created_user_id AS created_by, a.modified_time AS modified, a.modified_user_id AS modified_by')			->select('a.metakey, a.metadesc, a.metadata, a.language, a.lft, a.parent_id, a.level')			->select('a.created_time AS start_date, a.published AS state, a.access, a.params');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias)			->from('#__categories AS a')			->where($db->quoteName('a.id') . ' > 1');		return $query;	}	/**	 * Method to get a SQL query to load the published and access states for	 * an article and category.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getStateQuery()	{		$query = $this->db->getQuery(true)			->select($this->db->quoteName('a.id'))			->select('a.' . $this->state_field . ' AS state, c.published AS cat_state')			->select('a.access, c.access AS cat_access')			->from($this->db->quoteName('#__categories') . ' AS a')			->join('LEFT', '#__categories AS c ON c.id = a.parent_id');		return $query;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Editors-xtd.pagebreak * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Editor Pagebreak buton * * @package     Joomla.Plugin * @subpackage  Editors-xtd.pagebreak * @since       1.5 */class PlgButtonPagebreak extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Display the button	 *	 * @return array A two element array of (imageName, textToInsert)	 */	public function onDisplay($name)	{		JHtml::_('behavior.modal');		$link = 'index.php?option=com_content&amp;view=article&amp;layout=pagebreak&amp;tmpl=component&amp;e_name='.$name;		$button = new JObject;		$button->modal = true;		$button->link  = $link;		$button->text  = JText::_('PLG_EDITORSXTD_PAGEBREAK_BUTTON_PAGEBREAK');		$button->name  = 'copy';		$button->options = "{handler: 'iframe', size: {x: 500, y: 300}}";		return $button;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of articles. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentViewArticles extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @return  void	 */	public function display($tpl = null)	{		if ($this->getLayout() !== 'modal')		{			ContentHelper::addSubmenu('articles');		}		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->authors		= $this->get('Authors');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		// We don't need toolbar in the modal window.		if ($this->getLayout() !== 'modal')		{			$this->addToolbar();			$this->sidebar = JHtmlSidebar::render();		}		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo = ContentHelper::getActions($this->state->get('filter.category_id'));		$user  = JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_CONTENT_ARTICLES_TITLE'), 'article.png');		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories('com_content', 'core.create'))) > 0 )		{			JToolbarHelper::addNew('article.add');		}		if (($canDo->get('core.edit')) || ($canDo->get('core.edit.own')))		{			JToolbarHelper::editList('article.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('articles.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('articles.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::custom('articles.featured', 'featured.png', 'featured_f2.png', 'JFEATURED', true);			JToolbarHelper::archiveList('articles.archive');			JToolbarHelper::checkin('articles.checkin');		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'articles.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('articles.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_content');		}		JToolbarHelper::help('JHELP_CONTENT_ARTICLE_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_content&view=articles');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_MAX_LEVELS'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_AUTHOR'),			'filter_author_id',			JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'access_level' => JText::_('JGRID_HEADING_ACCESS'),			'a.created_by' => JText::_('JAUTHOR'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.created' => JText::_('JDATE'),			'a.id' => JText::_('JGRID_HEADING_ID'),			'a.featured' => JText::_('JFEATURED')		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Update class. * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 */class JUpdate extends JObject{	/**	 * @var    string	 * @since  11.1	 */	protected $name;	/**	 * @var    string	 * @since  11.1	 */	protected $description;	/**	 * @var    string	 * @since  11.1	 */	protected $element;	/**	 * @var    string	 * @since  11.1	 */	protected $type;	/**	 * @var    string	 * @since  11.1	 */	protected $version;	/**	 * @var    string	 * @since  11.1	 */	protected $infourl;	/**	 * @var    string	 * @since  11.1	 */	protected $client;	/**	 * @var    string	 * @since  11.1	 */	protected $group;	/**	 * @var    string	 * @since  11.1	 */	protected $downloads;	/**	 * @var    string	 * @since  11.1	 */	protected $tags;	/**	 * @var    string	 * @since  11.1	 */	protected $maintainer;	/**	 * @var    string	 * @since  11.1	 */	protected $maintainerurl;	/**	 * @var    string	 * @since  11.1	 */	protected $category;	/**	 * @var    string	 * @since  11.1	 */	protected $relationships;	/**	 * @var    string	 * @since  11.1	 */	protected $targetplatform;	/**	 * @var    string	 * @since  12.1	 */	protected $xmlParser;	/**	 * @var    array	 * @since  12.1	 */	protected $stack = array('base');	/**	 * @var    array	 * @since  12.1	 */	protected $stateStore = array();	/**	 * @var    stdClass	 * @since  12.1	 */	protected $currentUpdate;	/**	 * @var    stdClass	 * @since  12.1	 */	protected $latest;	/**	 * Gets the reference to the current direct parent	 *	 * @return  object	 *	 * @since   11.1	 */	protected function _getStackLocation()	{		return implode('->', $this->stack);	}	/**	 * Get the last position in stack count	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getLastTag()	{		return $this->stack[count($this->stack) - 1];	}	/**	 * XML Start Element callback	 *	 * @param   object  $parser  Parser object	 * @param   string  $name    Name of the tag found	 * @param   array   $attrs   Attributes of the tag	 *	 * @return  void	 *	 * @note    This is public because it is called externally	 * @since   11.1	 */	public function _startElement($parser, $name, $attrs = array())	{		array_push($this->stack, $name);		$tag = $this->_getStackLocation();		// Reset the data		if (isset($this->$tag))		{			$this->$tag->_data = "";		}		switch ($name)		{			// This is a new update; create a current update			case 'UPDATE':				$this->currentUpdate = new stdClass;				break;			// Don't do anything			case 'UPDATES':				break;			// For everything else there's...the default!			default:				$name = strtolower($name);				if (!isset($this->currentUpdate->$name))				{					$this->currentUpdate->$name = new stdClass;				}				$this->currentUpdate->$name->_data = '';				foreach ($attrs as $key => $data)				{					$key = strtolower($key);					$this->currentUpdate->$name->$key = $data;				}				break;		}	}	/**	 * Callback for closing the element	 *	 * @param   object  $parser  Parser object	 * @param   string  $name    Name of element that was closed	 *	 * @return  void	 *	 * @note This is public because it is called externally	 * @since  11.1	 */	public function _endElement($parser, $name)	{		array_pop($this->stack);		switch ($name)		{			// Closing update, find the latest version and check			case 'UPDATE':				$ver = new JVersion;				$product = strtolower(JFilterInput::getInstance()->clean($ver->PRODUCT, 'cmd'));				// Check for optional min_dev_level and max_dev_level attributes to further specify targetplatform (e.g., 3.0.1)				if (isset($this->currentUpdate->targetplatform->name)					&& $product == $this->currentUpdate->targetplatform->name					&& preg_match('/' . $this->currentUpdate->targetplatform->version . '/', $ver->RELEASE)					&& ((!isset($this->currentUpdate->targetplatform->min_dev_level)) || $ver->DEV_LEVEL >= $this->currentUpdate->targetplatform->min_dev_level)					&& ((!isset($this->currentUpdate->targetplatform->max_dev_level)) || $ver->DEV_LEVEL <= $this->currentUpdate->targetplatform->max_dev_level))				{					if (isset($this->latest))					{						if (version_compare($this->currentUpdate->version->_data, $this->latest->version->_data, '>') == 1)						{							$this->latest = $this->currentUpdate;						}					}					else					{						$this->latest = $this->currentUpdate;					}				}				break;			case 'UPDATES':				// If the latest item is set then we transfer it to where we want to				if (isset($this->latest))				{					foreach (get_object_vars($this->latest) as $key => $val)					{						$this->$key = $val;					}					unset($this->latest);					unset($this->currentUpdate);				}				elseif (isset($this->currentUpdate))				{					// The update might be for an older version of j!					unset($this->currentUpdate);				}				break;		}	}	/**	 * Character Parser Function	 *	 * @param   object  $parser  Parser object.	 * @param   object  $data    The data.	 *	 * @return  void	 *	 * @note    This is public because its called externally.	 * @since   11.1	 */	public function _characterData($parser, $data)	{		$tag = $this->_getLastTag();		// @todo remove code: if(!isset($this->$tag->_data)) $this->$tag->_data = '';		// @todo remove code: $this->$tag->_data .= $data;		// Throw the data for this item together		$tag = strtolower($tag);		if (isset($this->currentUpdate->$tag))		{			$this->currentUpdate->$tag->_data .= $data;		}	}	/**	 * Loads an XML file from a URL.	 *	 * @param   string  $url  The URL.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadFromXML($url)	{		$http = JHttpFactory::getHttp();		$response = $http->get($url);		if (200 != $response->code)		{			// TODO: Add a 'mark bad' setting here somehow			JLog::add(JText::sprintf('JLIB_UPDATER_ERROR_EXTENSION_OPEN_URL', $url), JLog::WARNING, 'jerror');			return false;		}		$this->xmlParser = xml_parser_create('');		xml_set_object($this->xmlParser, $this);		xml_set_element_handler($this->xmlParser, '_startElement', '_endElement');		xml_set_character_data_handler($this->xmlParser, '_characterData');		if (!xml_parse($this->xmlParser, $response->body))		{			die(				sprintf(					"XML error: %s at line %d", xml_error_string(xml_get_error_code($this->xmlParser)),					xml_get_current_line_number($this->xmlParser)				)			);		}		xml_parser_free($this->xmlParser);		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'message.cancel' || document.formvalidator.isValid(document.id('message-form')))		{			Joomla.submitform(task, document.getElementById('message-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_messages'); ?>" method="post" name="adminForm" id="message-form" class="form-validate form-horizontal">	<fieldset class="adminform">		<ul class="adminformlist">			<li><?php echo $this->form->getLabel('user_id_to'); ?>				<?php echo $this->form->getInput('user_id_to'); ?></li>			<li><?php echo $this->form->getLabel('subject'); ?>				<?php echo $this->form->getInput('subject'); ?></li>		</ul>	</fieldset>	<fieldset class="adminform">		<legend><?php echo $this->form->getLabel('message'); ?></legend>		<ul class="adminformlist">			<li><?php echo $this->form->getInput('message'); ?> </li>		</ul>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleUsername extends JFormRule{	/**	 * Method to test the username for uniqueness.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Get the database object and a new query object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Build the query.		$query->select('COUNT(*)')			->from('#__users')			->where('username = ' . $db->quote($value));		// Get the extra field check attribute.		$userId = ($form instanceof JForm) ? $form->getValue('id') : '';		$query->where($db->quoteName('id') . ' <> ' . (int) $userId);		// Set and query the database.		$db->setQuery($query);		$duplicate = (bool) $db->loadResult();		if ($duplicate)		{			return false;		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewCategory extends JViewLegacy{	public function display($tpl = null)	{		$app       = JFactory::getApplication();		$doc       = JFactory::getDocument();		$params    = $app->getParams();		$feedEmail = $app->getCfg('feed_email', 'author');		$siteEmail = $app->getCfg('mailfrom');		// Get some data from the model		$app->input->set('limit', $app->getCfg('feed_limit'));		$category = $this->get('Category');		$rows     = $this->get('Items');		$doc->link = JRoute::_(ContentHelperRoute::getCategoryRoute($category->id));		foreach ($rows as $row)		{			// Strip html from feed item title			$title = $this->escape($row->title);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// Compute the article slug			$row->slug = $row->alias ? ($row->id . ':' . $row->alias) : $row->id;			// Url link to article			$link = JRoute::_(ContentHelperRoute::getArticleRoute($row->slug, $row->catid));			// Get row fulltext			$db = JFactory::getDbo();			$query = 'SELECT' .$db->quoteName('fulltext'). 'FROM #__content WHERE id ='.$row->id;			$db->setQuery($query);			$row->fulltext = $db->loadResult();			// Get description, author and date			$description = ($params->get('feed_summary', 0) ? $row->introtext.$row->fulltext : $row->introtext);			$author = $row->created_by_alias ? $row->created_by_alias : $row->author;			@$date = ($row->publish_up ? date('r', strtotime($row->publish_up)) : '');			// Load individual item creator class			$item           = new JFeedItem;			$item->title    = $title;			$item->link     = $link;			$item->date     = $date;			$item->category = $row->category_title;			$item->author   = $author;			if ($feedEmail == 'site')			{				$item->authorEmail = $siteEmail;			}			elseif ($feedEmail === 'author')			{				$item->authorEmail = $row->author_email;			}			// Add readmore link to description if introtext is shown, show_readmore is true and fulltext exists			if (!$params->get('feed_summary', 0) && $params->get('feed_show_readmore', 0) && $row->fulltext)			{				$description .= '<p class="feed-readmore"><a target="_blank" href ="' . $item->link . '">' . JText::_('COM_CONTENT_FEED_READMORE') . '</a></p>';			}			// Load item description and add div			$item->description	= '<div class="feed-description">'.$description.'</div>';			// Loads item info into rss array			$doc->addItem($item);		}	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.languagecode * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Language Code plugin class. * * @package     Joomla.Plugin * @subpackage  Content.languagecode * @since       2.5 */class PlgSystemLanguagecode extends JPlugin{	/**	 * Plugin that change the language code used in the <html /> tag	 *	 * @since  2.5	 */	public function onAfterRender()	{		// Use this plugin only in site application		if (JFactory::getApplication()->isSite())		{			// Get the response body			$body = JResponse::getBody();			// Get the current language code			$code = JFactory::getDocument()->getLanguage();			// Get the new code			$new_code  = $this->params->get($code);			// Replace the old code by the new code in the <html /> tag			if ($new_code)			{				// Replace the new code in the HTML document				$patterns = array(					chr(1) . '(<html.*\s+xml:lang=")(' . $code . ')(".*>)' . chr(1) . 'i',					chr(1) . '(<html.*\s+lang=")(' . $code . ')(".*>)' . chr(1) . 'i',				);				$replace = array(					'${1}' . strtolower($new_code) . '${3}',					'${1}' . strtolower($new_code) . '${3}'				);			}			else			{				$patterns = array();				$replace = array();			}			// Replace codes in <link hreflang="" /> attributes			preg_match_all(chr(1) . '(<link.*\s+hreflang=")([0-9a-z\-]*)(".*\s+rel="alternate".*/>)' . chr(1) . 'i', $body, $matches);			foreach ($matches[2] as $match)			{				$new_code = $this->params->get(strtolower($match));				if ($new_code)				{					$patterns[] = chr(1) . '(<link.*\s+hreflang=")(' . $match . ')(".*\s+rel="alternate".*/>)' . chr(1) . 'i';					$replace[] = '${1}' . $new_code . '${3}';				}			}			preg_match_all(chr(1) . '(<link.*\s+rel="alternate".*\s+hreflang=")([0-9A-Za-z\-]*)(".*/>)' . chr(1) . 'i', $body, $matches);			foreach ($matches[2] as $match)			{				$new_code = $this->params->get(strtolower($match));				if ($new_code)				{					$patterns[] = chr(1) . '(<link.*\s+rel="alternate".*\s+hreflang=")(' . $match . ')(".*/>)' . chr(1) . 'i';					$replace[] = '${1}' . $new_code . '${3}';				}			}			JResponse::setBody(preg_replace($patterns, $replace, $body));		}	}	/**	 * @param   JForm	$form	The form to be altered.	 * @param   array  $data	The associated data for the form.	 *	 * @return  boolean	 * @since	2.5	 */	public function onContentPrepareForm($form, $data)	{		// Check we have a form		if (!($form instanceof JForm))		{			$this->_subject->setError('JERROR_NOT_A_FORM');			return false;		}		// Check we are manipulating a valid form.		$app = JFactory::getApplication();		if ($form->getName() != 'com_plugins.plugin'			|| isset($data->name) && $data->name != 'plg_system_languagecode'			|| empty($data) && !$app->getUserState('plg_system_language_code.edit')		)		{			return true;		}		// Mark the plugin as being edited		$app->setUserState('plg_system_language_code.edit', $data->name == 'plg_system_languagecode');		// Get site languages		$languages = JLanguage::getKnownLanguages(JPATH_SITE);		// Inject fields into the form		foreach ($languages as $tag => $language)		{			$form->load('<form>	<fields name="params">		<fieldset			name="languagecode"			label="PLG_SYSTEM_LANGUAGECODE_FIELDSET_LABEL"			description="PLG_SYSTEM_LANGUAGECODE_FIELDSET_DESC"		>			<field				name="'.strtolower($tag).'"				type="text"				description="' . htmlspecialchars(JText::sprintf('PLG_SYSTEM_LANGUAGECODE_FIELD_DESC', $language['name']), ENT_COMPAT, 'UTF-8') . '"				translate_description="false"				label="' . $tag . '"				translate_label="false"				size="7"				filter="cmd"			/>		</fieldset>	</fields></form>			');		}		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Router * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;jimport('joomla.application.router');/** * Class to create and parse routes for the site application * * @package     Joomla.Libraries * @subpackage  Router * @since       1.5 */class JRouterSite extends JRouter{	/**	 * Function to convert a route to an internal URI	 *	 * @param   JURI  $uri  The uri.	 *	 * @return  array	 */	public function parse($uri)	{		$vars = array();		// Get the application		$app = JApplication::getInstance('site');		if ($app->getCfg('force_ssl') == 2 && strtolower($uri->getScheme()) != 'https')		{			// Forward to https			$uri->setScheme('https');			$app->redirect((string) $uri);		}		// Get the path		// Decode URL to convert punycode to unicode so that strings match when routing.		$path = urldecode($uri->getPath());		// Remove the base URI path.		$path = substr_replace($path, '', 0, strlen(JURI::base(true)));		// Check to see if a request to a specific entry point has been made.		if (preg_match("#.*?\.php#u", $path, $matches))		{			// Get the current entry point path relative to the site path.			$scriptPath = realpath($_SERVER['SCRIPT_FILENAME'] ? $_SERVER['SCRIPT_FILENAME'] : str_replace('\\\\', '\\', $_SERVER['PATH_TRANSLATED']));			$relativeScriptPath = str_replace('\\', '/', str_replace(JPATH_SITE, '', $scriptPath));			// If a php file has been found in the request path, check to see if it is a valid file.			// Also verify that it represents the same file from the server variable for entry script.			if (file_exists(JPATH_SITE . $matches[0]) && ($matches[0] == $relativeScriptPath))			{				// Remove the entry point segments from the request path for proper routing.				$path = str_replace($matches[0], '', $path);			}		}		// Identify format		if ($this->_mode == JROUTER_MODE_SEF)		{			if ($app->getCfg('sef_suffix') && !(substr($path, -9) == 'index.php' || substr($path, -1) == '/'))			{				if ($suffix = pathinfo($path, PATHINFO_EXTENSION))				{					$vars['format'] = $suffix;				}			}		}		// Set the route		$uri->setPath(trim($path, '/'));		$vars += parent::parse($uri);		return $vars;	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 */	public function build($url)	{		$uri = parent::build($url);		// Get the path data		$route = $uri->getPath();		// Add the suffix to the uri		if ($this->_mode == JROUTER_MODE_SEF && $route)		{			$app = JApplication::getInstance('site');			if ($app->getCfg('sef_suffix') && !(substr($route, -9) == 'index.php' || substr($route, -1) == '/'))			{				if ($format = $uri->getVar('format', 'html'))				{					$route .= '.' . $format;					$uri->delVar('format');				}			}			if ($app->getCfg('sef_rewrite'))			{				// Transform the route				if ($route == 'index.php')				{					$route = '';				}				else				{					$route = str_replace('index.php/', '', $route);				}			}		}		// Add basepath to the uri		$uri->setPath(JURI::base(true) . '/' . $route);		return $uri;	}	/**	 * Function to convert a raw route to an internal URI	 *	 * @param   JURI  $uri  The raw route	 *	 * @return  array	 */	protected function _parseRawRoute($uri)	{		$vars = array();		$app  = JApplication::getInstance('site');		$menu = $app->getMenu(true);		// Handle an empty URL (special case)		if (!$uri->getVar('Itemid') && !$uri->getVar('option'))		{			$item = $menu->getDefault(JFactory::getLanguage()->getTag());			if (!is_object($item))			{				// No default item set				return $vars;			}			// Set the information in the request			$vars = $item->query;			// Get the itemid			$vars['Itemid'] = $item->id;			// Set the active menu item			$menu->setActive($vars['Itemid']);			return $vars;		}		// Get the variables from the uri		$this->setVars($uri->getQuery(true));		// Get the itemid, if it hasn't been set force it to null		$this->setVar('Itemid', $app->input->getInt('Itemid', null));		// Only an Itemid  OR if filter language plugin set? Get the full information from the itemid		if (count($this->getVars()) == 1 || ($app->getLanguageFilter() && count($this->getVars()) == 2 ))		{			$item = $menu->getItem($this->getVar('Itemid'));			if ($item !== null && is_array($item->query))			{				$vars = $vars + $item->query;			}		}		// Set the active menu item		$menu->setActive($this->getVar('Itemid'));		return $vars;	}	/**	 * Function to convert a sef route to an internal URI	 *	 * @param   JURI  $uri  The sef URI	 *	 * @return  string  Internal URI	 */	protected function _parseSefRoute($uri)	{		$vars  = array();		$app   = JApplication::getInstance('site');		$menu  = $app->getMenu(true);		$route = $uri->getPath();		// Remove the suffix		if ($this->_mode == JROUTER_MODE_SEF)		{			if ($app->getCfg('sef_suffix'))			{				if ($suffix = pathinfo($route, PATHINFO_EXTENSION))				{					$route = str_replace('.' . $suffix, '', $route);				}			}		}		// Get the variables from the uri		$vars = $uri->getQuery(true);		// Handle an empty URL (special case)		if (empty($route))		{			// If route is empty AND option is set in the query, assume it's non-sef url, and parse apropriately			if (isset($vars['option']) || isset($vars['Itemid']))			{				return $this->_parseRawRoute($uri);			}			$item = $menu->getDefault(JFactory::getLanguage()->getTag());			// If user not allowed to see default menu item then avoid notices			if (is_object($item))			{				// Set the information in the request				$vars = $item->query;				// Get the itemid				$vars['Itemid'] = $item->id;				// Set the active menu item				$menu->setActive($vars['Itemid']);			}			return $vars;		}		/*		 * Parse the application route		 */		$segments	= explode('/', $route);		if (count($segments) > 1 && $segments[0] == 'component')		{			$vars['option'] = 'com_' . $segments[1];			$vars['Itemid'] = null;			$route = implode('/', array_slice($segments, 2));		}		else		{			// Need to reverse the array (highest sublevels first)			$items = array_reverse($menu->getMenu());			$found 				= false;			$route_lowercase 	= JString::strtolower($route);			$lang_tag 			= JFactory::getLanguage()->getTag();			foreach ($items as $item)			{				// Sqlsrv change				if (isset($item->language))				{					$item->language = trim($item->language);				}				// Get the length of the route				$length = strlen($item->route);				if ($length > 0 && JString::strpos($route_lowercase . '/', $item->route . '/') === 0					&& $item->type != 'menulink' && (!$app->getLanguageFilter() || $item->language == '*'					|| $item->language == $lang_tag))				{					// We have exact item for this language					if ($item->language == $lang_tag)					{						$found = $item;						break;					}					// Or let's remember an item for all languages					elseif (!$found)					{						$found = $item;					}				}			}			if (!$found)			{				$found = $menu->getDefault($lang_tag);			}			else			{				$route = substr($route, strlen($found->route));				if ($route)				{					$route = substr($route, 1);				}			}			$vars['Itemid'] = $found->id;			$vars['option'] = $found->component;		}		// Set the active menu item		if (isset($vars['Itemid']))		{			$menu->setActive($vars['Itemid']);		}		// Set the variables		$this->setVars($vars);		/*		 * Parse the component route		 */		if (!empty($route) && isset($this->_vars['option']))		{			$segments = explode('/', $route);			if (empty($segments[0]))			{				array_shift($segments);			}			// Handle component	route			$component = preg_replace('/[^A-Z0-9_\.-]/i', '', $this->_vars['option']);			// Use the component routing handler if it exists			$path = JPATH_SITE . '/components/' . $component . '/router.php';			if (file_exists($path) && count($segments))			{				// Cheap fix on searches				if ($component != "com_search")				{					// Decode the route segments					$segments = $this->_decodeSegments($segments);				}				else				{					// Fix up search for URL					$total = count($segments);					for ($i = 0; $i < $total; $i++)					{						// Urldecode twice because it is encoded twice						$segments[$i] = urldecode(urldecode(stripcslashes($segments[$i])));					}				}				require_once $path;				$function = substr($component, 4) . 'ParseRoute';				$function = str_replace(array("-", "."), "", $function);				$vars = $function($segments);				$this->setVars($vars);			}		}		else		{			// Set active menu item			if ($item = $menu->getActive())			{				$vars = $item->query;			}		}		return $vars;	}	/**	 * Function to build a raw route	 *	 * @param   JURI  $uri  The internal URL	 *	 * @return  string  Raw Route	 */	protected function _buildRawRoute($uri)	{	}	/**	 * Function to build a sef route	 *	 * @param   JURI  $uri  The uri	 *	 * @return  void	 */	protected function _buildSefRoute($uri)	{		// Get the route		$route = $uri->getPath();		// Get the query data		$query = $uri->getQuery(true);		if (!isset($query['option']))		{			return;		}		$app  = JApplication::getInstance('site');		$menu = $app->getMenu();		/*		 * Build the component route		 */		$component = preg_replace('/[^A-Z0-9_\.-]/i', '', $query['option']);		$tmp       = '';		$itemID    = !empty($query['Itemid']) ? $query['Itemid'] : null;		// Use the component routing handler if it exists		$path = JPATH_SITE . '/components/' . $component . '/router.php';		// Use the custom routing handler if it exists		if (file_exists($path) && !empty($query))		{			require_once $path;			$function = substr($component, 4) . 'BuildRoute';			$function = str_replace(array("-", "."), "", $function);			$parts    = $function($query);			// Encode the route segments			if ($component != 'com_search')			{				// Cheep fix on searches				$parts = $this->_encodeSegments($parts);			}			else			{				// Fix up search for URL				$total = count($parts);				for ($i = 0; $i < $total; $i++)				{					// Urlencode twice because it is decoded once after redirect					$parts[$i] = urlencode(urlencode(stripcslashes($parts[$i])));				}			}			$result = implode('/', $parts);			$tmp    = ($result != "") ? $result : '';		}		/*		 * Build the application route		 */		$built = false;		if (!empty($query['Itemid']))		{			$item = $menu->getItem($query['Itemid']);			if (is_object($item) && $query['option'] == $item->component)			{				if (!$item->home || $item->language != '*')				{					$tmp = !empty($tmp) ? $item->route . '/' . $tmp : $item->route;				}				$built = true;			}		}		if (empty($query['Itemid']) && !empty($itemID))		{			$query['Itemid'] = $itemID;		}		if (!$built)		{			$tmp = 'component/' . substr($query['option'], 4) . '/' . $tmp;		}		if ($tmp)		{			$route .= '/' . $tmp;		}		elseif ($route == 'index.php')		{			$route = '';		}		// Unset unneeded query information		if (isset($item) && $query['option'] == $item->component)		{			unset($query['Itemid']);		}		unset($query['option']);		// Set query again in the URI		$uri->setQuery($query);		$uri->setPath($route);	}	/**	 * Process the parsed router variables based on custom defined rules	 *	 * @param   JURI  $uri  The URI to parse	 *	 * @return  array  The array of processed URI variables	 */	protected function _processParseRules($uri)	{		// Process the attached parse rules		$vars = parent::_processParseRules($uri);		// Process the pagination support		if ($this->_mode == JROUTER_MODE_SEF)		{			if ($start = $uri->getVar('start'))			{				$uri->delVar('start');				$vars['limitstart'] = $start;			}		}		return $vars;	}	/**	 * Process the build uri query data based on custom defined rules	 *	 * @param   JURI  $uri  The URI	 *	 * @return  void	 */	protected function _processBuildRules($uri)	{		// Make sure any menu vars are used if no others are specified		if (($this->_mode != JROUTER_MODE_SEF) && $uri->getVar('Itemid') && count($uri->getQuery(true)) == 2)		{			$app  = JApplication::getInstance('site');			$menu = $app->getMenu();			// Get the active menu item			$itemid = $uri->getVar('Itemid');			$item = $menu->getItem($itemid);			if ($item)			{				$uri->setQuery($item->query);			}			$uri->setVar('Itemid', $itemid);		}		// Process the attached build rules		parent::_processBuildRules($uri);		// Get the path data		$route = $uri->getPath();		if ($this->_mode == JROUTER_MODE_SEF && $route)		{			$app = JApplication::getInstance('site');			if ($limitstart = $uri->getVar('limitstart'))			{				$uri->setVar('start', (int) $limitstart);				$uri->delVar('limitstart');			}		}		$uri->setPath($route);	}	/**	 * Create a uri based on a full or partial url string	 *	 * @param   string  $url  The URI	 *	 * @return  JURI	 */	protected function _createURI($url)	{		// Create the URI		$uri = parent::_createURI($url);		// Set URI defaults		$app  = JApplication::getInstance('site');		$menu = $app->getMenu();		// Get the itemid form the URI		$itemid = $uri->getVar('Itemid');		if (is_null($itemid))		{			if ($option = $uri->getVar('option'))			{				$item  = $menu->getItem($this->getVar('Itemid'));				if (isset($item) && $item->component == $option)				{					$uri->setVar('Itemid', $item->id);				}			}			else			{				if ($option = $this->getVar('option'))				{					$uri->setVar('option', $option);				}				if ($itemid = $this->getVar('Itemid'))				{					$uri->setVar('Itemid', $itemid);				}			}		}		else		{			if (!$uri->getVar('option'))			{				if ($item = $menu->getItem($itemid))				{					$uri->setVar('option', $item->component);				}			}		}		return $uri;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create shortcut$urls = json_decode($this->item->urls);// Create shortcuts to some parameters.$params = $this->item->params;if ($urls && (!empty($urls->urla) || !empty($urls->urlb) || !empty($urls->urlc))) :?><div class="content-links">	<ul class="nav nav-tabs nav-stacked">		<?php			$urlarray = array(			array($urls->urla, $urls->urlatext, $urls->targeta, 'a'),			array($urls->urlb, $urls->urlbtext, $urls->targetb, 'b'),			array($urls->urlc, $urls->urlctext, $urls->targetc, 'c')			);			foreach ($urlarray as $url) :				$link = $url[0];				$label = $url[1];				$target = $url[2];				$id = $url[3];				if ( ! $link) :					continue;				endif;				// If no label is present, take the link				$label = ($label) ? $label : $link;				// If no target is present, use the default				$target = $target ? $target : $params->get('target'.$id);				?>			<li class="content-links-<?php echo $id; ?>">				<?php					// Compute the correct link					switch ($target)					{						case 1:							// open in a new window							echo '<a href="'. htmlspecialchars($link) .'" target="_blank"  rel="nofollow">'.								htmlspecialchars($label) .'</a>';							break;						case 2:							// open in a popup window							$attribs = 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=600,height=600';							echo "<a href=\"" . htmlspecialchars($link) . "\" onclick=\"window.open(this.href, 'targetWindow', '".$attribs."'); return false;\">".								htmlspecialchars($label).'</a>';							break;						case 3:							// open in a modal window							JHtml::_('behavior.modal', 'a.modal'); ?>							<a class="modal" href="<?php echo htmlspecialchars($link); ?>"  rel="{handler: 'iframe', size: {x:600, y:600}}">								<?php echo htmlspecialchars($label) . ' </a>';							break;						default:							// open in parent window							echo '<a href="'.  htmlspecialchars($link) . '" rel="nofollow">'.								htmlspecialchars($label) . ' </a>';							break;					}				?>				</li>		<?php endforeach; ?>	</ul></div><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactModelContact extends JModelForm{	/**	 * @since   1.6	 */	protected $view_item = 'contact';	protected $_item = null;	/**	 * Model context string.	 *	 * @var		string	 */	protected $_context = 'com_contact.contact';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pk = $app->input->getInt('id');		$this->setState('contact.id', $pk);		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_contact')) &&  (!$user->authorise('core.edit', 'com_contact'))){			$this->setState('filter.published', 1);			$this->setState('filter.archived', 2);		}	}	/**	 * Method to get the contact form.	 *	 * The base form is loaded from XML and then an event is fired	 *	 *	 * @param   array  $data		An optional array of data for the form to interrogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_contact.contact', 'contact', array('control' => 'jform', 'load_data' => true));		if (empty($form))		{			return false;		}		$id = $this->getState('contact.id');		$params = $this->getState('params');		$contact = $this->_item[$id];		$params->merge($contact->params);		if (!$params->get('show_email_copy', 0)){			$form->removeField('contact_email_copy');		}		return $form;	}	protected function loadFormData()	{		$data = (array) JFactory::getApplication()->getUserState('com_contact.contact.data', array());		$this->preprocessData('com_contact.contact', $data);		return $data;	}	/**	 * Gets a contact	 *	 * @param integer $pk  Id for the contact	 *	 * @return mixed Object or null	 */	public function &getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');		if ($this->_item === null)		{			$this->_item = array();		}		if (!isset($this->_item[$pk]))		{			try			{				$db = $this->getDbo();				$query = $db->getQuery(true);				//sqlsrv changes				$case_when = ' CASE WHEN ';				$case_when .= $query->charLength('a.alias', '!=', '0');				$case_when .= ' THEN ';				$a_id = $query->castAsChar('a.id');				$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');				$case_when .= ' ELSE ';				$case_when .= $a_id.' END as slug';				$case_when1 = ' CASE WHEN ';				$case_when1 .= $query->charLength('c.alias', '!=', '0');				$case_when1 .= ' THEN ';				$c_id = $query->castAsChar('c.id');				$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');				$case_when1 .= ' ELSE ';				$case_when1 .= $c_id.' END as catslug';				$query->select($this->getState('item.select', 'a.*') . ','.$case_when.','.$case_when1)					->from('#__contact_details AS a')				// Join on category table.					->select('c.title AS category_title, c.alias AS category_alias, c.access AS category_access')					->join('LEFT', '#__categories AS c on c.id = a.catid')				// Join over the categories to get parent category titles					->select('parent.title as parent_title, parent.id as parent_id, parent.path as parent_route, parent.alias as parent_alias')					->join('LEFT', '#__categories as parent ON parent.id = c.parent_id')					->where('a.id = ' . (int) $pk);				// Filter by start and end dates.				$nullDate = $db->quote($db->getNullDate());				$nowDate = $db->quote(JFactory::getDate()->toSql());				// Filter by published state.				$published = $this->getState('filter.published');				$archived = $this->getState('filter.archived');				if (is_numeric($published))				{					$query->where('(a.published = ' . (int) $published . ' OR a.published =' . (int) $archived . ')')						->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')						->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');				}				$db->setQuery($query);				$data = $db->loadObject();				if (empty($data))				{					JError::raiseError(404, JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'));				}				// Check for published state if filter set.				if (((is_numeric($published)) || (is_numeric($archived))) && (($data->published != $published) && ($data->published != $archived)))				{					JError::raiseError(404, JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'));				}				// Convert parameter fields to objects.				$registry = new JRegistry;				$registry->loadString($data->params);				$data->params = clone $this->getState('params');				$data->params->merge($registry);				$registry = new JRegistry;				$registry->loadString($data->metadata);				$data->metadata = $registry;				$data->tags = new JHelperTags;				$data->tags->getItemTags('com_contact.contact', $data->id);				// Compute access permissions.				if ($access = $this->getState('filter.access')) {					// If the access filter has been set, we already know this user can view.					$data->params->set('access-view', true);				}				else {					// If no access filter is set, the layout takes some responsibility for display of limited information.					$user = JFactory::getUser();					$groups = $user->getAuthorisedViewLevels();					if ($data->catid == 0 || $data->category_access === null)					{						$data->params->set('access-view', in_array($data->access, $groups));					}					else {						$data->params->set('access-view', in_array($data->access, $groups) && in_array($data->category_access, $groups));					}				}				$this->_item[$pk] = $data;			}			catch (Exception $e)			{				$this->setError($e);				$this->_item[$pk] = false;			}		}		if ($this->_item[$pk])		{			if ($extendedData = $this->getContactQuery($pk))			{				$this->_item[$pk]->articles = $extendedData->articles;				$this->_item[$pk]->profile = $extendedData->profile;			}		}		return $this->_item[$pk];	}	protected function getContactQuery($pk = null)	{		// TODO: Cache on the fingerprint of the arguments		$db		= $this->getDbo();		$user	= JFactory::getUser();		$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');		$query	= $db->getQuery(true);		if ($pk)		{			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id.' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('cc.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('cc.id');			$case_when1 .= $query->concatenate(array($c_id, 'cc.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id.' END as catslug';			$query->select(				'a.*, cc.access as category_access, cc.title as category_name, '				. $case_when . ',' . $case_when1			)				->from('#__contact_details AS a')				->join('INNER', '#__categories AS cc on cc.id = a.catid')				->where('a.id = ' . (int) $pk);			$published = $this->getState('filter.published');			$archived = $this->getState('filter.archived');			if (is_numeric($published))			{				$query->where('a.published IN (1,2)')					->where('cc.published IN (1,2)');			}			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN ('.$groups.')');			try			{				$db->setQuery($query);				$result = $db->loadObject();				if (empty($result))				{					throw new Exception(JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'), 404);				}			// If we are showing a contact list, then the contact parameters take priority			// So merge the contact parameters with the merged parameters				if ($this->getState('params')->get('show_contact_list'))				{					$registry = new JRegistry;					$registry->loadString($result->params);					$this->getState('params')->merge($registry);				}			}			catch (Exception $e)			{				$this->setError($e);				return false;			}			if ($result)			{				$user	= JFactory::getUser();				$groups	= implode(',', $user->getAuthorisedViewLevels());				//get the content by the linked user				$query	= $db->getQuery(true)					->select('a.id')					->select('a.title')					->select('a.state')					->select('a.access')					->select('a.created');				// SQL Server changes				$case_when = ' CASE WHEN ';				$case_when .= $query->charLength('a.alias', '!=', '0');				$case_when .= ' THEN ';				$a_id = $query->castAsChar('a.id');				$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');				$case_when .= ' ELSE ';				$case_when .= $a_id.' END as slug';				$case_when1 = ' CASE WHEN ';				$case_when1 .= $query->charLength('c.alias', '!=', '0');				$case_when1 .= ' THEN ';				$c_id = $query->castAsChar('c.id');				$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');				$case_when1 .= ' ELSE ';				$case_when1 .= $c_id.' END as catslug';				$query->select($case_when1 . ',' . $case_when)					->from('#__content as a')					->join('LEFT', '#__categories as c on a.catid=c.id')					->where('a.created_by = ' . (int) $result->user_id)					->where('a.access IN ('. $groups.')')					->order('a.state DESC, a.created DESC');				// filter per language if plugin published				if (JLanguageMultilang::isEnabled())				{					$query->where(('a.created_by = ' . (int) $result->user_id) AND ('a.language=' . $db->quote(JFactory::getLanguage()->getTag()) . ' OR a.language=' . $db->quote('*')));				}				if (is_numeric($published))				{					$query->where('a.state IN (1,2)');				}				$db->setQuery($query, 0, 10);				$articles = $db->loadObjectList();				$result->articles = $articles;				//get the profile information for the linked user				require_once JPATH_ADMINISTRATOR.'/components/com_users/models/user.php';				$userModel = JModelLegacy::getInstance('User', 'UsersModel', array('ignore_request' => true));				$data = $userModel->getItem((int) $result->user_id);				JPluginHelper::importPlugin('user');				$form = new JForm('com_users.profile');				// Get the dispatcher.				$dispatcher	= JEventDispatcher::getInstance();				// Trigger the form preparation event.				$dispatcher->trigger('onContentPrepareForm', array($form, $data));				// Trigger the data preparation event.				$dispatcher->trigger('onContentPrepareData', array('com_users.profile', $data));				// Load the data into the form after the plugins have operated.				$form->bind($data);				$result->profile = $form;				$this->contact = $result;				return $result;			}		}	}	/**	 * Increment the hit counter for the contact.	 *	 * @param   int  $pk  Optional primary key of the article to increment.	 *	 * @return  boolean  True if successful; false otherwise and internal error set.	 *	 * @since   3.0	 */	public function hit($pk = 0)	{		$input = JFactory::getApplication()->input;		$hitcount = $input->getInt('hitcount', 1);		if ($hitcount)		{			$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__contact_details' .				' SET hits = hits + 1' .				' WHERE id = '.(int) $pk			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one SQL Server DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeitemSqlsrv extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand == 'ADD')			{				$result = 'SELECT * FROM INFORMATION_SCHEMA.Columns ' . $wordArray[2] . ' WHERE COLUMN_NAME = ' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand == 'CREATE INDEX')			{				$index = $this->fixQuote(substr($wordArray[5], 0, strpos($wordArray[5], '(')));				$result = 'SELECT * FROM SYS.INDEXES ' . $wordArray[2] . ' WHERE name = ' . $index;				$this->queryType = 'CREATE INDEX';				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif (strtoupper($wordArray[3]) == 'MODIFY')			{				$type = $this->fixQuote($wordArray[5]);				if (isset($wordArray[6]))				{					$type = $this->fixQuote($this->fixInteger($wordArray[5], $wordArray[6]));				}				$result = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS  WHERE table_name = ' . $this->fixQuote($wordArray[2]);				$this->queryType = 'ALTER COLUMN COLUMN_NAME =' . $this->fixQuote($wordArray[4]);				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]));			}			elseif (strtoupper($wordArray[3]) == 'CHANGE')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($this->fixInteger($wordArray[6], $wordArray[7]));				$result = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS  WHERE table_name = ' . $this->fixQuote($wordArray[2]);				$this->fixQuote($wordArray[4]);				$this->queryType = 'ALTER COLUMN COLUMN_NAME =' . $this->fixQuote($wordArray[4]);				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]));			}		}		if ($command == 'CREATE TABLE')		{			$table = $wordArray[5];			$result = 'SELECT * FROM sys.TABLES WHERE NAME = ' . $this->fixQuote($table);			$this->queryType = 'CREATE_TABLE';			$this->msgElements = array($this->fixQuote($table));		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with MySQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   2.5	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == 'integer' && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'int';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   2.5	 */	private function fixQuote($string)	{		$string = str_replace('`', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Implements a combo box field. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldCombo extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Combo';	/**	 * Method to get the field input markup for a combo box field.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="combobox ' . (string) $this->element['class'] . '"' : ' class="combobox"';		$attr .= ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Get the field options.		$options = $this->getOptions();		// Load the combobox behavior.		JHtml::_('behavior.combobox');		// Build the input for the combo box.		$html[] = '<input type="text" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $attr . '/>';		// Build the list for the combo box.		$html[] = '<ul id="combobox-' . $this->id . '" style="display:none;">';		foreach ($options as $option)		{			$html[] = '<li>' . $option->text . '</li>';		}		$html[] = '</ul>';		return implode($html);	}}
